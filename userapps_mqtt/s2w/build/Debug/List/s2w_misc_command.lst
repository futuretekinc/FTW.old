###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  14:31:03 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\parser\s2w_misc_command.c            #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\parser\s2w_misc_command.c -D         #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ -lA                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ --diag_suppress        #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\Debug\Obj\    #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\core\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\drivers\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\modules\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\rtos\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\netx_bsd_la #
#                    yer\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\main\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\src\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\hw_e #
#                    ngine_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1 #
#                    .5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\sec #
#                    urity\wpa_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp #
#                    _5.1.5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ #
#                    ncm\inc\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1. #
#                    5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ctx\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\hal\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\parser\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\config\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\otafu\inc\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\provisioning\inc\ -I  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_log\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_log\ -Ohz              #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\s2w_misc_command.lst    #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\Obj\s2w_misc_command.o       #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\src\parser\s2w_misc_command.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_misc_command.c,v $
     28          *
     29          * Description : s2w command interprter file
     30          ******************************************************************/
     31          #ifndef IOT_APP_ENABLE
     32          
     33          
     34          /*****************************************************************
     35            * File Inclusions
     36            *****************************************************************/
     37          #include "time.h"
     38          #include <ctype.h>
     39          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     40          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnOsal_IntrDisable(void)
   \                     GsnOsal_IntrDisable:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnOsal_IntrEnable(int)
   \                     GsnOsal_IntrEnable:
   \   00000000   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_Sel(UINT32, UINT32)
   \                     GsnIoMux_Sel:
   \   00000000   0x4A01             LDR.N    R2,??GsnIoMux_Sel_0  ;; 0x40160000
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??GsnIoMux_Sel_0:
   \   00000008   0x40160000         DC32     0x40160000

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_PullDownDisable(UINT32)
   \                     GsnIoMux_PullDownDisable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x4908             LDR.N    R1,??GsnIoMux_PullDownDisable_0  ;; 0x40160200
   \   0000000C   0x2C20             CMP      R4,#+32
   \   0000000E   0xD204             BCS.N    ??GsnIoMux_PullDownDisable_1
   \   00000010   0x680B             LDR      R3,[R1, #+0]
   \   00000012   0x40A2             LSLS     R2,R2,R4
   \   00000014   0x431A             ORRS     R2,R2,R3
   \   00000016   0x600A             STR      R2,[R1, #+0]
   \   00000018   0xE004             B.N      ??GsnIoMux_PullDownDisable_2
   \                     ??GsnIoMux_PullDownDisable_1:
   \   0000001A   0x3C20             SUBS     R4,R4,#+32
   \   0000001C   0x684B             LDR      R3,[R1, #+4]
   \   0000001E   0x40A2             LSLS     R2,R2,R4
   \   00000020   0x431A             ORRS     R2,R2,R3
   \   00000022   0x604A             STR      R2,[R1, #+4]
   \                     ??GsnIoMux_PullDownDisable_2:
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x.... 0x....      B.W      GsnOsal_IntrEnable
   \                     ??GsnIoMux_PullDownDisable_0:
   \   0000002C   0x40160200         DC32     0x40160200
     41          #include "hal/s2w.h"
     42          #include "hal/s2w_types.h"
     43          #include "hal/s2w_hal.h"
     44          #include "hal/s2w_timer.h"
     45          #include "parser/s2w_parse.h"
     46          #include "parser/s2w_process.h"
     47          #include "parser/s2w_command.h"
     48          #include "hal/s2w_net.h"
     49          #include "app_defines_builder.h"
     50          #include "hal/s2w_config.h"
     51          //#include "config\app_config_private.h"
     52          #include "hal/s2w_cert_mgmt.h"
     53          #include "main/app_main_ctx.h"
     54          #include "config/app_stat_config.h"
     55          #include "app_rtc_mem.h"
     56          #include "app_events.h"
     57          //#include "modules\gsn_dyn_alloc_chk.h"
     58          #include "config/app_resource_config.h"
     59          #include "config/app_httpd_config.h"
     60          //#include "config\app_ncm_config.h"
     61          //#include "web_prov/html/app_http_fs.h"
     62          #include "modules/http/gsn_httpd.h"
     63          #include "modules/http/gsn_httpd_util.h"
     64          //#include "gsn_httpd_config.h"
     65          //#include "gsn_httpd_prov.h"
     66          //#include "modules/gsn_httpd_logo.h"
     67          //#include "config/app_httpd_config.h"
     68          #include "web_prov\s2w_web_prov.h"
     69          #include "../src/gslink\app_mcu_def.h"
     70          #ifdef S2W_GSLINK
     71          #ifdef S2W_GSLINK_XML
     72          #include "modules/xml_string_parser/gsn_xml_string_parser.h"
     73          #endif
     74          #endif
     75          //#include "web_prov\s2w_web_prov.h"
     76          #if defined(S2W_DTLS_CLIENT_SUPPORT)
     77          #include "modules/dtls/gsn_dtls.h"
     78          #endif
     79          
     80          #ifdef GSN_MEM_TRACE
     81          #include "modules\dbg\gsn_dyn_alloc_chk.h"
     82          #endif
     83          
     84          
     85          #define TX_BUF_ELEMENTS                 19
     86          #define TX_MAC_INDEX                    0x06
     87          #define TX_BSSID_INDEX                  0x07
     88          #define TX99_BUF_ELEMENTS               21
     89          #define TX99_MAC_DESTADDR_INDEX         6
     90          #define TX99_MAC_BSSID_INDEX            7
     91          #define TX100_BUF_ELEMENTS              14
     92          #define CR_WAVE_BUF_ELEMENTS            5
     93          #define RX_BUF_ELEMENTS                 6
     94          #define RX_MAC_INDEX                    0x03
     95          #define HTTP_SEND_CHUNK_SIZE   			1000
     96          
     97          #ifdef S2W_HTTP_CUSTOM_SUPPORT
     98          #define HTTP_HDR_BITMAP_STR_SIZE        8
     99          #endif
    100          
    101          typedef enum RF_TEST
    102          {
    103          	RF_TX_TEST,
    104          	RF_TX99_TEST,
    105          	RF_TX100_TEST,
    106          	RF_CARRIER_WAVE_TEST,
    107          	RF_RX_TEST
    108          
    109          }RF_TEST_T;
    110          
    111          #ifdef ADK_PROV
    112          #include "modules/http/gsn_httpd_api.h"
    113          #endif
    114          #ifdef ADK_OTAFU
    115          #endif

   \                                 In section .bss, align 4
    116          PUBLIC UINT8 *pS2wHttpdTaskStack;
   \                     pS2wHttpdTaskStack:
   \   00000000                      DS8 4
    117          extern S2W_PROFILE_T s2wCurrent;
    118          extern GSN_OSAL_QUEUE_T s2wNetQueue;
    119          UINT8 mdnsv6Enable;
    120          /**
    121           ******************************************************************************
    122           * @file s2w_misc_command.c
    123           * @brief S2W Application command routines.
    124           *      This file contains the s2w application specific implimentation for
    125           *      functions for each command .
    126          ******************************************************************************/
    127          
    128          /*****************************************************************************
    129            *  Private Variables
    130            *****************************************************************************/
    131          
    132          /*****************************************************************************
    133            *  Public Variables
    134            *****************************************************************************/
    135          
    136          extern UINT8 curCid;
    137          extern S2W_LINK_STATE_T s2wLinkState ;
    138          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
    139          extern UINT8 s2wNRAWState;
    140          extern UINT8 stbySuccess;
    141          extern UINT8 storeParams;
    142          extern BOOL ncmAutoMode;
    143          #ifdef S2W_RFTEST
    144          extern UINT32 asyncFrameCount;
    145          #endif
    146          extern S2W_PROFILE_PARAMS_T profile_params;
    147          UINT8 frameTransmissionType = 0;
    148          #ifdef S2W_UNASSOC_TXRX_SUPPORT
    149          S2W_UNSOLICITED_FRAME_T frame;
    150          #endif
    151          
    152          #if 0
    153          PRIVATE const char *S2W_ErrList[] =
    154          {
    155              "NO ERROR",                         /* S2W_ERR_NOERROR */
    156              "ERR:SSID NOT FOUND",                /* S2W_ERR_SSID_NOT_FOUND */
    157              "ERR:AUTH FAIL:PSK INVALID",         /* S2W_ERR_PSK_INVALID */
    158              "ERR:AUTH FAIL:TIMEOUT",             /* S2W_ERR_AUTH_TIMEOUT */
    159              "ERR:AUTH FAIL:EAP_FAST_FAILURE",     /* S2W_ERR_AUTH_EAP_FAST_FAILURE */
    160              "ERR:AUTH FAIL:EAP_CRED_FAILURE",     /* S2W_ERR_AUTH_EAP_CRED_FAILURE */
    161          };
    162          #endif
    163          
    164          
    165          #define S2W_INVALID_CERT_INDEX 0xFFFFFFFF
    166          extern UINT32 certIndex, certFormat, certFileSize;
    167          extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[];
    168          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
    169          extern S2W_CID_T s2wCidList[];
    170          #ifdef S2W_HTTPC_SUPPORT
    171          extern GSN_HTTPC_CONF_INFO_T httpConfInfo;
    172          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypes[];
    173          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[];
    174          #endif
    175          
    176          /* packet pool handle to be used by HTTP server */
    177          GSN_NW_PKT_POOL_HANDLE   trPktPoolHndl;
    178          void                    *s2wHttpdPktPtr;
   \                     s2wHttpdPktPtr:
   \   00000004                      DS8 4
    179          #define S2W_HTTPD_PKT_POOL  (10*1024)
    180          
    181          #endif
    182          extern const UINT8 server_key[];
    183          extern const UINT8 server_cert[];
    184          extern const UINT8 ca_cert[];
    185          
    186          /*****************************************************************************
    187           *  Private Functions
    188           *****************************************************************************/
    189          
    190          
    191          VOID S2w_AsyncMsgGpioOp(UINT8 flag);
    192          
    193          
    194          #ifdef S2W_GSLINK
    195          UINT8
    196          AppS2w_HttpdCtxInit(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 reinit);
    197          
    198          #ifdef S2W_WEB_SERVER
    199          
    200          GSN_HTTPD_STATUS_T
    201          McuHttpCb(ttHttpdUserEvent event, const char* uri,
    202                  ttHttpdUserConHandle conHandle);
    203          #endif
    204          #ifdef S2W_GSLINK_XML
    205          
    206          extern VOID
    207          App_XmlParserCb(VOID *cbContext,GSNXMLSTR_CB_PARAM_T *xmlCbparams);
    208          #endif
    209          #endif /* S2W_GSLINK */
    210          
    211          extern INT8*
    212          GsnHttpd_GetBuffer();
    213          
    214          #ifdef S2W_MDNS_ENABLE
    215          
    216          VOID
    217          AppS2wHal_MdnsInit(UINT8*);
    218          
    219          PUBLIC UINT8
    220          AppS2wHal_MdnsHostNameReg(S2W_MDNS_HN_PARAM_T *pHNparam);
    221          
    222          PUBLIC UINT8
    223          AppS2wHal_MdnsHostNameDereg(S2W_MDNS_HN_PARAM_T *pHNparam);
    224          
    225          PUBLIC UINT8
    226          AppS2wHal_MdnsServiceReg(S2W_MDNS_SRV_PARAM_T *pSrvParam);
    227          
    228          PUBLIC UINT8
    229          AppS2wHal_MdnsServiceReg(S2W_MDNS_SRV_PARAM_T *pSrvParam);
    230          
    231          PUBLIC UINT8
    232          AppS2wHal_MdnsSrvcDiscover(S2W_MDNS_SRVCDISCVR_PARAM_T *mdnsSrvDscr);
    233          
    234          #endif
    235          
    236          #ifdef S2W_ISOTX_SUPPORT
    237          extern GSN_STATUS
    238          GsnIsotx_BlinkReq(GSN_ISOTX_CTX_T *pIsotxCtx, 	GSN_ISOTX_BLINK_REQ_PARAM *pParam);
    239          
    240          extern GSN_STATUS
    241          GsnIsotx_StopReq(GSN_ISOTX_CTX_T *pIsotxCtx);
    242          
    243          extern GSN_STATUS
    244          GsnIsotx_RegWriteReq(GSN_ISOTX_CTX_T *pIsotxCtx, 	GSN_ISOTX_REG_WRITE_REQ_PARAM *pParam);
    245          extern VOID
    246          App_IsotxCtrlNotifCb(VOID *ctx, UINT16 msgId, UINT16 msgLen,	VOID *pMsg);
    247          
    248          #endif
    249          
    250          
    251          #ifdef S2W_MEM_ACCESS
    252          extern PUBLIC GSN_STATUS
    253          GsnSysCtl_MemReadReq(GSN_SYS_CTL_CTX_T *pSysCtlCtx, GSN_SYS_CTL_MEM_READ_REQ_T * pMemReadReqParam);
    254          extern PUBLIC GSN_STATUS
    255          GsnSysCtl_MemWriteReq(GSN_SYS_CTL_CTX_T *pSysCtlCtx,          GSN_SYS_CTL_MEM_WRITE_REQ_T *pMemWrReqParam);
    256          
    257          #endif
    258          
    259          /**
    260           ******************************************************************
    261           * @ingroup S2w-Application
    262           * @brief help print function
    263           *   This function prints the help information of all commands.
    264           * @param cmd - IN  Pointer to the user input command.
    265           * @param desc - IN Pointer to the desription.
    266           * @return none.
    267           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    268          VOID
    269          AppS2wHelp_Print(const char *cmd, const char *desc)
    270          {
   \                     AppS2wHelp_Print:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x4688             MOV      R8,R1
    271              int len = cmd ? strlen(cmd) : 1;
   \   00000008   0xD003             BEQ.N    ??AppS2wHelp_Print_0
   \   0000000A   0x.... 0x....      BL       strlen
   \   0000000E   0x4606             MOV      R6,R0
   \   00000010   0xE000             B.N      ??AppS2wHelp_Print_1
   \                     ??AppS2wHelp_Print_0:
   \   00000012   0x2601             MOVS     R6,#+1
    272              int desclen = strlen(desc);
   \                     ??AppS2wHelp_Print_1:
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x.... 0x....      BL       strlen
   \   0000001A   0x4607             MOV      R7,R0
    273              int left = 78;
    274              int i;
    275          
    276              S2W_ASSERT(desclen <= left);
    277          
    278              AppS2wHal_CharNPut("\r\n", 2);
   \   0000001C   0x....             ADR.N    R5,??DataTable147  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000001E   0x.... 0x....      BL       ?Subroutine5
    279              AppS2wHal_CharNPut(cmd ? cmd : " ", len);
   \                     ??CrossCallReturnLabel_20:
   \   00000022   0xB904             CBNZ.N   R4,??AppS2wHelp_Print_2
   \   00000024   0x....             ADR.N    R4,??DataTable149  ;; " "
   \                     ??AppS2wHelp_Print_2:
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       AppS2wHal_CharNPut
    280          
    281              left -= len;
   \   0000002E   0xF1C6 0x044E      RSB      R4,R6,#+78
    282              if (desclen > left)
   \   00000032   0x42BC             CMP      R4,R7
   \   00000034   0xDA02             BGE.N    ??AppS2wHelp_Print_3
    283              {
    284                  AppS2wHal_CharNPut("\r\n", 2);
   \   00000036   0x.... 0x....      BL       ?Subroutine5
    285                  left = 78;
   \                     ??CrossCallReturnLabel_19:
   \   0000003A   0x244E             MOVS     R4,#+78
    286              }
    287          
    288              for (i = 0; i < left - desclen; i++)
   \                     ??AppS2wHelp_Print_3:
   \   0000003C   0x2600             MOVS     R6,#+0
   \   0000003E   0xE003             B.N      ??AppS2wHelp_Print_4
    289              {
    290                  S2w_PutChar(' ');
   \                     ??AppS2wHelp_Print_5:
   \   00000040   0x2020             MOVS     R0,#+32
   \   00000042   0x.... 0x....      BL       S2w_PutChar
    291              }
   \   00000046   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wHelp_Print_4:
   \   00000048   0x1BE0             SUBS     R0,R4,R7
   \   0000004A   0x4286             CMP      R6,R0
   \   0000004C   0xDBF8             BLT.N    ??AppS2wHelp_Print_5
    292          
    293              AppS2wHal_CharNPut(desc, desclen);
   \   0000004E   0x4639             MOV      R1,R7
   \   00000050   0x4640             MOV      R0,R8
   \   00000052   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000056   0x.... 0x....      B.W      AppS2wHal_CharNPut
    294          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2102             MOVS     R1,#+2
   \                     ??Subroutine5_0:
   \   00000002   0x4628             MOV      R0,R5
   \   00000004   0x.... 0x....      B.W      AppS2wHal_CharNPut
    295          
    296          #if 0
    297          /**
    298           ******************************************************************
    299           * @ingroup S2w-Application
    300           * @brief Process the Help command
    301           *        Help command lists all the Serial2WiFi Host commands.
    302           *        It also displays the command format and the brief descriptions about
    303           *        the command.
    304           * @param ptr Pointer to the user input string.
    305           * @return status.
    306           ******************************************************************/
    307          PUBLIC UINT8
    308          AppS2wCmd_Help(UINT8 *ptr)
    309          {
    310          
    311          /**************** Command Interface********************************************************************************/
    312          	AppS2wHelp_Print("AT",	"verify that the command interface is operating correctly \
    313          					\n\rit should return a successful response OK (or 0 if verbose mode is disabled");
    314              AppS2wHelp_Print("ATE<0|1>", "Disable/enable echo");
    315              AppS2wHelp_Print("ATV<0|1>", "Disable/enable verbose responses");
    316              AppS2wHelp_Print("AT?", "Help");
    317          /****************************************************************************************************************/
    318          
    319          /**************** UART/ADAPTER Interface Configuration***************************************************************/
    320              AppS2wHelp_Print("ATB=<rate>,<bitsperchar>,<parity>,<stopbits>",
    321                                "Configure serial port");
    322              AppS2wHelp_Print("AT&K<0|1>", "Disable/enable software flow control");
    323              AppS2wHelp_Print("AT&R<0|1>", "Disable/enable hardware flow control");
    324              AppS2wHelp_Print("ATSparam=value", "Set configuration parameters");
    325          	AppS2wHelp_Print("AT+UARTFLVL=<?>/<Rx Level>,<Tx Level>" ,"Sets/displays the UART FIFO thresholds");
    326              AppS2wHelp_Print("ATI<n>", "Display identification number n");	
    327          	AppS2wHelp_Print("AT+WST=<Min scan time>,<Max scantime> <passive time>","configures the scan time");
    328          /****************************************************************************************************************/
    329          
    330          /****************************Profile Management*******************************************************************/
    331              AppS2wHelp_Print("AT&W<0|1>", "Save Settings to profile 0/1");
    332              AppS2wHelp_Print("ATZ<0|1>", "Load Settings from profile 0/1");
    333              AppS2wHelp_Print("AT&Y<0|1>",
    334                               "Set default power on profile to profile 0/1");
    335              AppS2wHelp_Print("AT&V", "Output current configuration");
    336              AppS2wHelp_Print("AT&F", "Reset to factory defaults");
    337          
    338          /****************************************************************************************************************/
    339          
    340          /****************************WiFi Interface************************************************************************/
    341          	AppS2wHelp_Print("AT+NMAC=<?>/<mac>",
    342          						 "Get/Set MAC address and store in flash");
    343              AppS2wHelp_Print("AT+WREGDOMAIN=<?>/<domain>","Get/Set Reg.Domain.domain values:fcc->0,etsi->1,telec->2");	
    344              AppS2wHelp_Print("AT+WS[=<SSID>[,<BSSID>][,<Ch>][,<ScanTime>]]",
    345                               "Perform wireless scan");
    346          	AppS2wHelp_Print("AT+WM=<0|1>",
    347          							 "Set mode to Infrastructure (0) or ad-hoc (1)");
    348              AppS2wHelp_Print("AT+WA=<SSID>[[,<BSSID>][,<Ch>]]",
    349                               "Associate to network or form ad-hoc network");
    350              AppS2wHelp_Print("AT+WD or ATH", "Disassociate from current network");
    351          #ifdef S2W_SECURITY_WPS_ENABLE
    352          	AppS2wHelp_Print("AT+WWPS=<1/2>,<wps pin>",
    353          					 "Associate to an AP using WPS. 1 - Push Button mathod.   \
    354          					 2 - PIN mathod. Provide <wps pin> only in case of PIN mathod");
    355          #endif
    356          #ifndef S2W_IP2WIFI_SUPPORT
    357          		AppS2wHelp_Print("AT+NSTAT=?", "Display current network context");
    358          #endif
    359          	AppS2wHelp_Print("WLANSTATS=?","");
    360          	AppS2wHelp_Print("AT+WRSSI=?", "Query the current RSSI value");
    361          	AppS2wHelp_Print("AT+WRATE=?", "Query the current WiFi rate used");
    362              AppS2wHelp_Print("AT+WRETRY=n", "Set the wireless retry count");
    363          	AppS2wHelp_Print("AT+APCLIENTINFO=?", "Get the information about the clients associated to node \
    364          					\n\rwhen it acts as a limited AP");
    365          	AppS2wHelp_Print("AT+BCONMISSTHRHLD=<BeaconMissThresholdTime>,<BeaconMissThresholdCount>",
    366          			 		 "Configure the beacon miss threshold count and time");
    367          	AppS2wHelp_Print("AT+TKIPCNTRMSR=<0|1>", "");	
    368          	AppS2wHelp_Print("AT+TKIPSEQSET=","");	
    369          /*******************************************************************************************************************/
    370              AppS2wHelp_Print("AT+WRXACTIVE=<0|1>", "Enable/disable the radio");
    371              AppS2wHelp_Print("AT+WRXPS=<0|1>", "Enable/disable 802.11 power save");
    372              AppS2wHelp_Print("AT+WP=<power>", "Set the transmit power");
    373              AppS2wHelp_Print("AT+WSTATUS", "Display current Wireless Status");
    374              AppS2wHelp_Print("AT+WSYNCINTRL=<interval>","configure the sync loss interval in TBTT interval");
    375          	AppS2wHelp_Print("AT+WAPSM=<0|1|2|3>", " configure 802.11 power save mode to be used during association");
    376          	AppS2wHelp_Print("AT+WIEEEPSPOLL=<n>[,listen beacon interval]", "sets the listen intervals for n beacons  \
    377          					 \n\r The interval range is 1 to 65535 beacons");				 
    378              AppS2wHelp_Print("AT+PSPOLLINTRL=<interval>", "configure the Ps poll interval in Seconds");
    379          	AppS2wHelp_Print("AT+MCSTSET=<0/1>", " enable or disable multicast and broadcast reception");
    380          /*******************************************************************************************************************/
    381          
    382          /****************************WiFi Security***************************************************************/
    383          	AppS2wHelp_Print("AT+WAUTH=<authmode>",
    384          						 "Set authmode (1->open,2->shared)");	
    385          	AppS2wHelp_Print("AT+WWEPn=<key>",
    386          						 "Set WEP key (10 or 26 hex digits) with index n (1-4)");
    387          	AppS2wHelp_Print("AT+WWPA=passphrase",
    388          						 "Set WPA passphrase (8 - 63 chars)");
    389          	AppS2wHelp_Print("AT+WPAPSK=<SSID>,<PassPhrase>",
    390          						 "Calculate and store the PSK");
    391          	AppS2wHelp_Print("AT+WPSK=<PSK>", "Store the PSK");		
    392          #if defined(S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE) || defined(S2W__SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE)|| defined(S2W__SECURITY_ENTERPRISE_TTLS_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE)|| defined(S2W__SECURITY_ENTERPRISE_PEAP_V1_AVAILABLE)
    393          	AppS2wHelp_Print("AT+WEAPCONF=<outer authtype>,<inner authtype>,<user name>,<password>",
    394          		   "Configure auth type,user name and password for EAP");
    395          	AppS2wHelp_Print("AT+WEAP=<type>,<format>,<size>,<location>\n\r<ESC>W<data of size above>",
    396          		"Provision certificate for EAP TLS. Type-CA/CLIENT/PUB_KEY(0/1/2),format\
    397          		-binary/ascii(0/1),location- flash/RAM(0/1).Follow the escape sequence to send data.");
    398          #endif
    399          #ifndef S2W_IP2WIFI_SUPPORT
    400          	AppS2wHelp_Print("AT+TCERTADD=<name>,<format>,<size>,<location>\n\r<ESC>W<data of size above>",
    401          		   "Provisions a certificate. format-binary/ascii(0/1),location-FLASH/RAM.\
    402          			\n\rFollow the escape sequence to send data.");
    403          	AppS2wHelp_Print("AT+TCERTDEL=<name>", "Delete a certificate");
    404          #endif
    405          	AppS2wHelp_Print("AT+WSEC=n", "configure the security[0 - Auto,1 - Open,  2 - WEP \
    406          					\n\r 3 - WPA-PSK,4 - WPA2-PSK,16 - WPA Enterprise, 32 - WPA2 Enterprise");
    407          /*******************************************************************************************************************/
    408          
    409          /*****************Connection Management *****************************************************************************/
    410          #ifndef S2W_IP2WIFI_SUPPORT
    411              AppS2wHelp_Print("AT+NCTCP=<IP>,<Port>", "Open TCP client");
    412              AppS2wHelp_Print("AT+NCUDP=<IP>,<RemotePort>,[<LocalPort>]",
    413                               "Open UDP client");
    414              AppS2wHelp_Print("AT+NSTCP=<Port>", "Open TCP server on Port");
    415              AppS2wHelp_Print("AT+NSUDP=<Port>", "Open UDP server on Port");
    416              AppS2wHelp_Print("AT+NCLOSE=cid", "Close the specified connection");
    417              AppS2wHelp_Print("AT+NCLOSEALL", "Close all connections");
    418              AppS2wHelp_Print("AT+SETSOCKOPT=<cid>,<type>,<parameter>,<value>,<length>",
    419                                "Set options of a socket specified by cid");
    420              AppS2wHelp_Print("AT+NXSETSOCKOPT=<cid>,<type>,<parameter>,<value>,<length>",
    421                                "Set options of a socket specified by cid");
    422          
    423          	AppS2wHelp_Print("AT+SSLOPEN=<cid>,<name>",
    424          		"Opens a ssl connection. name-Name of certificate to use");
    425          	AppS2wHelp_Print("AT+SSLCLOSE=<cid>","Close a SSL connection");
    426          	AppS2wHelp_Print("AT+HTTPOPEN=<hostName/ip addr>,[<port>,<secured/non secured>,<certificate name>]",\
    427          		"Opens a http/https connection");
    428          	AppS2wHelp_Print("AT+HTTPCLOSE=<cid>", "Closes a http connection");
    429          	AppS2wHelp_Print("AT+HTTPSEND=<cid>,<Method>,<TimeOut>,<Page>[,<Size>]\n\r<ESC>H<data of size above>",
    430          		"Send a Get or POST request.Method- GET/HEAD/POST(1/2/3) Follow the escape sequence to send data");
    431          	AppS2wHelp_Print("AT+HTTPCONF=<Param>,<Value>", "Configures http parameters");
    432          	AppS2wHelp_Print("AT+HTTPCONFDEL=<Param>", "Delete the http Configuration parameters");		
    433          	AppS2wHelp_Print("AT+CID=?", "Display The CID info");
    434          #ifdef S2W_WEB_PROV
    435          #ifdef S2W_IP2WIFI_SUPPORT
    436          	   AppS2wHelp_Print("AT+WEBPROV=<user name>,<passwd>,<ip addr><subnet mask> <gateway>",
    437          							"start web server. username passwd are used for authentication\
    438          							The server is atarted with the given ip addr, subnetmask and gateway");
    439          #else
    440          	   AppS2wHelp_Print("AT+WEBPROV=<user name>,<passwd>,[<SSL enable>,<Store params>,<Idle timeout>,<NCM auto connect>]",
    441          							   "start/stop web server. 1-start,0-stop. username passwd are used for authentication\r\n");
    442          	   AppS2wHelp_Print("AT+WEBPROVSTOP=",
    443          							"stops the web server\r\n");
    444          	   AppS2wHelp_Print("AT+ NURIREDIR=<URL>",	"Adds the redirection URI");
    445          #endif
    446          #ifdef S2W_WEB_SRVR_LOGO_INTRNL_FLASH
    447          	   AppS2wHelp_Print("AT+WEBLOGOADD=<size>","add webserver logo of size <size>. After issuing \
    448          					  the command, send <esc> followed by l/L	and send the content of the logo file");
    449          #endif
    450          #endif
    451          #ifdef S2W_UNASSOC_TXRX_SUPPORT	
    452          	AppS2wHelp_Print("AT+UNSOLICITEDTX=<FC>,<SC>,<CH>,<Rate>,<Power>,<CCA Enable>,<FrameLength>,<Rx_WaitTime>, \
    453          					<DestAddr>,[<RxAddr3>],[<TxAddr4>]<FC>,<SC>,<CH>,<Rate>,<Wmm>,<Receiver Mac>,<Bssid>,<FrameLen>",
    454          					"\n\rconfigure and start unsolicited Tx.After issuing this cmd send <ESC> followed by \
    455          					\n\r D/d and frame content");
    456          	AppS2wHelp_Print("AT+UNSOLICITEDRX=<TypeBitmap>,<IEFilterEnable>,<IEID>,<Channel>,<Rx_WaitTime>",
    457          					"\n\rconfigure and start unsolicited Rx.Data will send <ESC>D<Data> format");
    458          	AppS2wHelp_Print("AT+UNSOLICITEDRX=<TypeBitmap>,<IEFilterEnable>,<IEID>,<Channel>,<Rx_WaitTime>",
    459          					"\n\r start Unsolicited data reception"); 
    460          	AppS2wHelp_Print("AT+UNSOLICITEDRXSTOP", "Stops unsolicited Rx");
    461          #endif
    462          #ifdef S2W_ISOTX_SUPPORT
    463          	AppS2wHelp_Print("AT+ISOTXSTART=<frequency>,<gain>,<blink type>,<bandwidth>,<mode>,<no of blinks> \
    464          					[,<interval between 1st blink>,,<interval between 2nd blink>,...]>",
    465          					"\n\r starts the ISOTX Transmission");
    466          	AppS2wHelp_Print("AT+ISOTXSTOP=","stops the ISOTX Transmission");
    467          	AppS2wHelp_Print("AT+ISOTXREGWR= <addr>,<value>","configures the ISOTX");
    468          #endif	
    469          	AppS2wHelp_Print("AT++NIPMULTICASTJOIN=<ip>", "Joins multicast group");
    470          	AppS2wHelp_Print("AT++NIPMULTICASTLEAVE=<ip>", "Leaves multicast group");
    471          #endif
    472          /***************** ***** ***** ***** *****************************************************************************/
    473          /****************Auto connection************************************************************************************/
    474              AppS2wHelp_Print("AT+WAUTO=<Mode>,<SSID>,<bssid>,[Channel]",
    475                               "Configure auto connect wireless settings");
    476          	AppS2wHelp_Print("AT+NCMAUTO=<Mode>,<Start/Stop>[,Level] ,[<Nvds store flag>]",
    477          					 "starts the Network Connection Manager \n\r\
    478          					 Mode: 0-station,1-Limited AP \n\r\
    479          					 Level: 0-L2+L3 Connection,1-L2+L3+L4 connection");
    480              AppS2wHelp_Print("AT+NAUTO=<Type>,<Protocol>,<DestIP>,<DestPort>",
    481                      "Configure auto connection");
    482              AppS2wHelp_Print(NULL,
    483                               "Client(0)/server(1), protocol UDP(0)/TCP(1),and host");
    484          	AppS2wHelp_Print("AT+APCONF=<1>","Enable the NCM AP configuration");
    485          #ifndef S2W_IP2WIFI_SUPPORT
    486          /***************Misc Commands************************************************************************************/
    487              AppS2wHelp_Print("AT+BDATA=<0|1> ","Enable bulk data");
    488          	AppS2wHelp_Print("AT+RESET","Resets the Device");
    489          	AppS2wHelp_Print("AT+NTIMESYNC= <Enable>,<Server IP>,<Timeout>,<Periodic>,[<frequency>]",
    490          					 "\n\rSets the system time using the SNTP");
    491          	AppS2wHelp_Print("AT+SETTIME=<dd/mm/yyyy>,<HH:MM:SS>","Set the system time");
    492          	AppS2wHelp_Print("AT+GETTIME=?","Get the system time in Milli-seconds since Epoch(1970)");
    493          	AppS2wHelp_Print("AT+DGPIO=<GPIO_PIN>,<1-SET/0-RESET>","Set/reset a gpio pin");
    494          	AppS2wHelp_Print("AT+VER=?|?", "Get the Version Info");
    495          	AppS2wHelp_Print("AT+PING=<Ip>,<Trails>,<Interval>,<Len>,<TOS>,<TTL>,<PAYLAOD(16 Bytes)>",
    496          						 "Starts Ping");
    497              AppS2wHelp_Print("AT+NSET=<IP>,<NetMask>,<Gateway>",
    498                               "Configure network address");
    499          	AppS2wHelp_Print("AT+SOTAFWUPSTART=<value>", "start the Firmware upgrading procedure");
    500          	AppS2wHelp_Print("AT+SOTAFWUPCONF=<param>,<value>","configure the firware upgrade parameters");
    501          	AppS2wHelp_Print("AT+ASYNCMSGFMT=<0|1>","enable/disable enhanced asynchronous notification ");
    502          /****************************************************************************************************************/
    503          	#if 0
    504              AppS2wHelp_Print("ATC<0|1>", "Disable/enable auto connection");
    505              AppS2wHelp_Print("ATA", "Initiate AutoConnect");
    506              AppS2wHelp_Print("ATA2", "Initiate AutoConnect-tcp/udp level");
    507              AppS2wHelp_Print("ATO", "Return to Auto Data mode");
    508          
    509              AppS2wHelp_Print("+++",
    510                               "Switch to Command mode while in auto-connect mode");
    511          
    512              AppS2wHelp_Print("ATSparam=value", "Set configuration parameters");
    513              AppS2wHelp_Print(NULL,
    514                               "Network connection timeout (0) / Auto associate timeout (1)");
    515              AppS2wHelp_Print(NULL,
    516                               "TCP connection timeout (2) / Association retry count (3)");
    517              AppS2wHelp_Print(NULL, "Nagle algorithm wait time (4)");
    518          	 AppS2wHelp_Print("AT+FWUP=<SrvIp>,<SrvPort>,<SrcPort>", "Start FW Upgrade");
    519          #endif
    520          #endif
    521             
    522          
    523          #ifndef S2W_IP2WIFI_SUPPORT
    524          
    525          /****************Network Interface***************************************************************************************/
    526          	AppS2wHelp_Print("AT+DNS=1/0,<url>" , "start/stop the DNS server,URL is the DNS name \
    527          					\n\r associated to the DNS IP address");
    528          	AppS2wHelp_Print("AT+DHCPSRVR=<Start/Stop>[,<DnsOptionDisable>,<GatewayOptionDisable>]",
    529          					 "\n\r start/stop the DHCP server");
    530          	AppS2wHelp_Print("AT+DHCPSRVRCFG=<start IP addr>,<no Clients>","configure DHCP server");
    531          	AppS2wHelp_Print("AT+NDHCP=<0|1>", "Disable/Enable DHCP");
    532              AppS2wHelp_Print("AT+DNSLOOKUP=<URL>,[<RETRY>,<TIMEOUT-S>]",
    533                               "Get the ip from host name");
    534              AppS2wHelp_Print("AT+DNSSET=<DNS1-IP>,[<DNS2-IP>]",
    535                               "Set static DNS IP addresses");
    536          #ifdef S2W_MDNS_ENABLE
    537          	AppS2wHelp_Print("AT+MDNSSTART","Initialise MDNS module");
    538          	AppS2wHelp_Print("AT+MDNSHNREG=<Host name>,<Domain name>,[<TTL>,<scope><Conflict Detect>]","Register Host Name");
    539          	AppS2wHelp_Print("AT+MDNSHNDEREG==<host name>,<Domain name>", "De-register Host Name");
    540          	AppS2wHelp_Print("AT+MDNSSRVREG=<ServiceInstanceName>,<ServiceSubType>,<ServiceType>, <Protocol>,\
    541          					\n\r <Domain>,<port>,<Default Key=Val>...<key n=valn >,<TTL>[<TTL>,<scope>\
    542          					,\n\r<Conflict Detect>]",
    543          					"Register MDNS service");
    544          	AppS2wHelp_Print("AT+MDNSSRVDEREG=<ServiceInstanceName>,[<ServiceSubType>],<ServiceType>, <Protocol>,<Domain>",
    545          					"De-register MDNS service");
    546          	AppS2wHelp_Print("AT+MDNSSD=[<Service subtype>],<Service type>,<Protocol>,<Domain>",
    547          					  "Discover the mDNC service");
    548          	AppS2wHelp_Print("AT+MDNSANNOUNCE", "Announce the mDNS services");	
    549          #endif
    550          	AppS2wHelp_Print("AT+STORENWCONN", "Store the nw context");
    551          	AppS2wHelp_Print("AT+RESTORENWCONN", "Restore the nw context");
    552          #endif
    553          /****************************************************************************************************************/
    554          
    555          /****************Battery Check*************************************************************************************/
    556              AppS2wHelp_Print("AT+BCHKSTRT=<Measure interval>","Start the batt chk ");
    557              AppS2wHelp_Print("AT+BCHK=<?>/<Measure interval>",
    558                               "Get/Set batt chk param ");
    559              AppS2wHelp_Print("AT+BATTVALGET",
    560                               " Get the latest battery value stored in RTC");
    561              AppS2wHelp_Print("AT+BCHKSTOP ","Stop the batt chk ");
    562          
    563              AppS2wHelp_Print("AT+BATTLVLSET=<Warning Level>,<warning Freq>,<Standby Level>",
    564                               "Set batt warning level, frequency of reporting warning and batt standby levl ");
    565          
    566          /****************************************************************************************************************/
    567          #ifdef S2W_RFTEST
    568              AppS2wHelp_Print("AT+RFFRAMETXSTART=<CH>,<Power>,<Rate>,<No.Of.Times>,<Fr.Intrvel>,<FC>,<DurationId>,<SC>,<frameLen>,\
    569              				\n\r<Preamble>,<Scrambler>[,<DstMac>,<Src Mac>]",
    570              				"\n\rconfigure and start async Tx.After issuing this cmd send <ESC> followed by A/a and frame content");
    571              AppS2wHelp_Print("AT+RFWAVETXSTART=<Modulated>,<CH>,<rate>,<PreambleLong>,<ScamblerOff>,<Cont.Tx>,<Power>,<ssid>",
    572          					"\n\rstart modulated/unmodulated Wave Tx.");
    573              AppS2wHelp_Print("AT+RFRXSTART=<CH>[,<sendtouser>]","start async Reception on channel CH.");
    574              AppS2wHelp_Print("AT+RFSTOP","stop the rf test which has been started.");
    575          	AppS2wHelp_Print("AT+WFRAMETXTEST=<Channel>,<bandWidth>,<numFrames>,<frameLen>,<txRate>,<txPower>,<destAddr>,<bssid>,<htEnable> \
    576          					,<guardInterval>,<greenField>,<preambleType>,<qosEnable>,<ackPolicy>,<scrambler>,<aifsnVal>,<antenna>",
    577          					"\n\rn Enable the frame transmissionwith the given configurations");
    578          	AppS2wHelp_Print("AT+WTX99TEST=<Channel>,<bandWidth>,<numFrames>,<frameLen>,<txRate>,<txPower>,<destAddr>,<bssid>,<guardInterval> \
    579          					  ,<greenField>,<antenna>,<cca>,<agc>,<contPreambleMode>,<spreader>,<scrambler>,<preamble>,<preambleType>,\
    580          					  <phyTestTxtRate>,<modeSelect>", "Starts TX99 mode with the given configurations");
    581          	AppS2wHelp_Print("AT+WTX100TEST=<Channel>,<bandWidth>,<txPower>,<antenna>,<cca>,<agc>,<contPreambleMode>,<spreader>,<scrambler>\
    582          					  ,<preamble>,<preambleType>,<testPatternType>,<phyTestTxRate>,<modeSelect>",
    583          					  "\n\rStarts TX100 mode with given configurations");
    584          	AppS2wHelp_Print("AT+WCARWAVTEST=<Channel>,<bandWidth>,<txPower>,<antenna>,<customWavePeriod>","Starts Carrier Wave mode \
    585          					  \n\rwith given configurations");
    586          	AppS2wHelp_Print("AT+WRXTEST=<Channel>,<bandWidth>,<rxFrameTypeFilter>,<rxaddrFilter>,<antenna>", "Enables the frame reception");
    587          	AppS2wHelp_Print("AT+WRXSTOP", "Stops the frame reception and displays the PER stats");
    588          	AppS2wHelp_Print("AT+WCALIB","");
    589          	AppS2wHelp_Print("AT+WTXSTOP","");
    590          #endif
    591          /****************Power Management********************************************************************************/
    592              AppS2wHelp_Print("AT+PSDPSLEEP", "Enable deep sleep");
    593              AppS2wHelp_Print("AT+PSSTBY=<n>[,<delay time>,<alarm1-pol>,<alarm2-pol>]",
    594                               "Standby request for n milliseconds");
    595          /********************************************************************************************************************/
    596          /****************GSLINK**********************************************************************************************/
    597          	AppS2wHelp_Print("AT+WEBSERVER=<start/stop>,<user name>,<passwd>,[<SSL enable>,<Idle timeout>,<Response Timeout>]",
    598          						"start web server. username passwd are used for authentication\r\n");
    599          	AppS2wHelp_Print("AT+XMLPARSE=<enable/disable>",
    600          						  "Enable/Disable the XML parser. 1-Enable,0-Disable\r\n");
    601              AppS2wHelp_Print("AT+XMLSEND=<cid>,<Method>,<TimeOut>,<URL>,<root tag>,[<No of Tags>]",
    602          			"Send a Get or POST request for XML data.Method- GET Response/POST Response(6/7) \r\n\
    603          			 Follow the escape sequence to send data-<ESC>G<cid><len>tag:value");
    604          	AppS2wHelp_Print("AT+URIRECV=<URI>[,Content Type]","Modifies the default URI and content type \n\r\
    605          					  Content Type:	0-application/xml \r\n1-application/json,2-application/html\
    606          					  \r\n 3-img/gif,4-application/octet-stream");
    607          /********************************************************************************************************************/
    608          #ifdef  S2W_FS_SPI_ENABLE
    609             AppS2wHelp_Print("AT+SPICONF=<CPOL(0/1)>,<CPH(0/1)>","Configure SPI clock polarity and clock phase");
    610          #endif
    611          
    612          /****************EMU Commands**********************************************************************************************/
    613          #ifdef S2W_ISOTX_SUPPORT
    614          	AppS2wHelp_Print("AT+EMUVER=?", "prints the EMU software version");
    615          	AppS2wHelp_Print("AT+EMUSUPMOD=?", "prints the supported module lists");
    616          	AppS2wHelp_Print("AT+EMUSTART", "starts the EMU");
    617          	AppS2wHelp_Print("AT+EMUSTOP", "stops the EMU");
    618          	AppS2wHelp_Print("AT+EMUSETCONF=<Param>,<Value>", "configures the EMU parameters");
    619          	AppS2wHelp_Print("AT+EMUSETCONF=<Channel>,<Enable\Disable>,[<GainValue>]" ,
    620          					 "\n\rconfigures the channel to a given gain value");
    621          	AppS2wHelp_Print("AT+EMUGETCONF=<Param>", "prints configuration value set for the EMU");
    622          	AppS2wHelp_Print("AT+EMUGETVALUES", "prints the last read raw ADC values of voltage and current");
    623          	AppS2wHelp_Print("AT+EMULOADCTRL= <1/0>", "switches ON(1)/)OFF(0) the load"); 
    624          	AppS2wHelp_Print("AT+EMURESETENERGY", "resets the energy");
    625          	AppS2wHelp_Print("AT+EMUGETSTATUS", "gets the status of the EMU");
    626          	AppS2wHelp_Print("AT+EMULOADSTATUS", "gets the load status of the EMU");
    627          #endif
    628          /***************************************************************************************************************************/
    629          /****************Persistent Timer Commands**********************************************************************************************/
    630          #if S2W_PERSISTENT_TMR_SUPPORT 
    631          	AppS2wHelp_Print("AT+PRSTMRSTART=<ID>,<TYPE>,<PERIOD>", "Create a persistent Timer");
    632          	AppS2wHelp_Print("AT+PRSTMRSTOP=<ID>", "Stop Persistent timer");
    633          	AppS2wHelp_Print"AT+PRSTMRDEL=<ID>", "Delete persistent timer");
    634          	AppS2wHelp_Print"AT+PRSTMRRESTART=<ID>,< PERIOD >", "Restart persistent timer with new period");
    635          #endif
    636          
    637          #ifdef S2W_IPv6_SUPPORT
    638             AppS2wHelp_Print("AT+NSETv6=<IPv6 Linklocal/Global Address>", "Configure Interface static IPv6 address");
    639             AppS2wHelp_Print("AT+NDHCPv6=<Enable/Disable>", "Configure Interface IPv6 address");
    640             AppS2wHelp_Print("AT+NCUDPv6=<IPv6 Address>,<Port>", "Connect to a remote UDP server with IPv6 address");
    641             AppS2wHelp_Print("AT+NSUDPv6=<Port>", "Open UDP server over IPv6");
    642             AppS2wHelp_Print("AT+NCTCPv6=<IPv6 Adrress>,<Remote Port>", "Connect to a remote TCP server with IPv6 address");
    643             AppS2wHelp_Print("AT+NSTCPv6=<Port>", "Open TCP server over IPv6");
    644             AppS2wHelp_Print("AT+DHCPSERVERv6=<Enable/Disable>", "Start DHCPv6 server");
    645             AppS2wHelp_Print("AT+PING=<IPv6 address>", "Ping to a IPv6 address");
    646             AppS2wHelp_Print("AT+DNSLOOKUPv6=<IPv6 FQDN>", "Resolve host name to IPv6 address");
    647             AppS2wHelp_Print("AT+DNSSET=<DNSv6 server address>", "Set static IPv6 DNS server");
    648             AppS2wHelp_Print("AT+MDNSv6START", "Start MDNS service over IPv6");
    649          #endif   
    650          
    651          
    652              return S2W_SUCCESS;
    653          }
    654          
    655          #endif
    656          
    657          /**
    658           ******************************************************************
    659           * @ingroup S2w-Application
    660           * @brief Process the AT+PSPOLLINTRL Command.
    661           *   This function set the keep alive timer interval .
    662           * @param ptr Pointer to the user input string.
    663           * @return S2W_SUCCESS - operation successful.
    664           * @retval S2W_EINVAL  - operation failure-invalid command.
    665           * @retval S2W_FAILURE - operation failure.
    666           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    667          PUBLIC UINT8
    668          S2w_CmdPsPollIntervelset(UINT8 *ptr)
    669          
    670          {
   \                     S2w_CmdPsPollIntervelset:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    671              UINT32 interval;
    672              UINT8 *p;
    673              UINT8 status = S2W_EINVAL;
    674          
    675              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine7_0
    676              if (!p)
   \                     ??CrossCallReturnLabel_73:
   \   00000008   0xB128             CBZ.N    R0,??S2w_CmdPsPollIntervelset_0
    677              {
    678                  return S2W_EINVAL;
    679              }
    680              status = AppS2wParse_Int(p, &interval);
   \   0000000A   0x.... 0x....      BL       ?Subroutine17
    681              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_218:
   \   0000000E   0xB930             CBNZ.N   R0,??S2w_CmdPsPollIntervelset_1
    682              {
    683                  return status;
    684              }
    685              if(interval > 255)
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0x28FF             CMP      R0,#+255
   \   00000014   0xD901             BLS.N    ??S2w_CmdPsPollIntervelset_2
    686              {
    687                  return S2W_EINVAL;
   \                     ??S2w_CmdPsPollIntervelset_0:
   \   00000016   0x2002             MOVS     R0,#+2
   \   00000018   0xBD0E             POP      {R1-R3,PC}
    688              }
    689              /* bug id: 5823. Setting 0 will stop keep alive (to make it backward compatible with 1011) */
    690          #if 0
    691              if(interval == 0)
    692              {
    693                  interval = 45;/*Default*/
    694              }
    695          #endif    
    696              status = AppS2wHal_PsPollIntervelset(interval);
    697              return status;
   \                     ??S2w_CmdPsPollIntervelset_2:
   \   0000001A   0x.... 0x....      BL       AppS2wHal_PsPollIntervelset
   \                     ??S2w_CmdPsPollIntervelset_1:
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
    698          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0xF109 0x0001      ADD      R0,R9,#+1
   \   00000004   0x1986             ADDS     R6,R0,R6
   \                     ??Subroutine7_0:
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int
    699          
    700          
    701          #ifdef S2W_CODE_COVERAGE
    702          /**
    703           *******************************************************************************
    704           * code coverage commands
    705           *******************************************************************************/
    706           /*       CODECOVG01=<adcMode><refVoltage><clockSelect><samplePeriod>
    707           CODECOVG01=<GSN_ADC_PSMODE_OFF><GSN_ADC_REF_BANDGAP><GSN_ADC_CLK_SEL_1MHZ><20>
    708              AT+CODECOVG01= 0, 0, 0,20
    709           */
    710          
    711          PUBLIC UINT8
    712          AppS2wCmd_codeCvg01(UINT8 *ptr)
    713          {
    714              UINT8 status;
    715              UINT32 adcMode;
    716              UINT32 refVoltage;
    717              UINT32 clockSelect;
    718              UINT32 samplePeriod;
    719              UINT8 *p;
    720          
    721              p = AppS2wParse_NextParamGet(&ptr);
    722              if (!p)
    723              {
    724                  return S2W_EINVAL;
    725              }
    726              status = AppS2wParse_Int(p, &adcMode);
    727              if(status != S2W_SUCCESS)
    728              {
    729                  return status;
    730              }
    731          
    732              p = AppS2wParse_NextParamGet(&ptr);
    733              if (!p)
    734              {
    735                return S2W_EINVAL;
    736              }
    737              status = AppS2wParse_Int(p, &refVoltage);
    738              if(status != S2W_SUCCESS)
    739              {
    740                  return status;
    741              }
    742          
    743               p = AppS2wParse_NextParamGet(&ptr);
    744              if (!p)
    745              {
    746                  return S2W_EINVAL;
    747              }
    748              status = AppS2wParse_Int(p, &clockSelect);
    749              if(status != S2W_SUCCESS)
    750              {
    751                  return status;
    752              }
    753          
    754               p = AppS2wParse_NextParamGet(&ptr);
    755              if (!p)
    756              {
    757                  return S2W_EINVAL;
    758              }
    759              status = AppS2wParse_Int(p, &samplePeriod);
    760              if(status != S2W_SUCCESS)
    761              {
    762                  return status;
    763              }
    764              p = AppS2wParse_NextParamGet(&ptr);
    765              if (p)
    766              {
    767                  return S2W_EINVAL;
    768              }
    769              return AppS2wHal_codeCovg01(adcMode, refVoltage, clockSelect, samplePeriod);
    770          
    771          
    772          }
    773          
    774          PUBLIC UINT8
    775          AppS2wCmd_codeCvg02(UINT8 *ptr)
    776          {
    777              UINT8 *p;
    778              UINT8 status;
    779              UINT32 waitTime;
    780          
    781              p = AppS2wParse_NextParamGet(&ptr);
    782              if (!p)
    783              {
    784                return S2W_EINVAL;
    785              }
    786              status = AppS2wParse_Int(p, &waitTime);
    787              if(status != S2W_SUCCESS)
    788              {
    789                  return status;
    790              }
    791          
    792              p = AppS2wParse_NextParamGet(&ptr);
    793              if (p)
    794              {
    795                return S2W_EINVAL;
    796              }
    797              return AppS2wHal_codeCovg02(waitTime);
    798          }
    799          
    800          PUBLIC UINT8
    801          AppS2wCmd_codeCvg03(UINT8 *ptr)
    802          {
    803              UINT8 *p;
    804          
    805              p = AppS2wParse_NextParamGet(&ptr);
    806              if (p)
    807              {
    808                return S2W_EINVAL;
    809              }
    810              return AppS2wHal_codeCovg03();
    811          }
    812          
    813          PUBLIC UINT8
    814          AppS2wCmd_codeCvg04(UINT8 *ptr)
    815          {
    816              UINT8 *p;
    817          
    818              p = AppS2wParse_NextParamGet(&ptr);
    819              if (p)
    820              {
    821                return S2W_EINVAL;
    822              }
    823              return AppS2wHal_codeCovg04();
    824          
    825          }
    826          
    827          PUBLIC UINT8
    828          AppS2wCmd_codeCvg05(UINT8 *ptr)
    829          {
    830              UINT8 status;
    831              UINT32 numElemnts;
    832              UINT8 *p;
    833          
    834              p = AppS2wParse_NextParamGet(&ptr);
    835              if (!p)
    836              {
    837                return S2W_EINVAL;
    838              }
    839              status = AppS2wParse_Int(p, &numElemnts);
    840              if(status != S2W_SUCCESS)
    841              {
    842                  return status;
    843              }
    844              return APPS2wHal_codeCovg05(numElemnts);
    845          }
    846          
    847          PUBLIC UINT8
    848          AppS2wCmd_codeCvg06(UINT8 *ptr)
    849          {
    850              UINT8 *p;
    851          
    852              p = AppS2wParse_NextParamGet(&ptr);
    853              if (p)
    854              {
    855                return S2W_EINVAL;
    856              }
    857          
    858              return APPS2wHal_codeCovg06();
    859          
    860          }
    861          
    862          PUBLIC UINT8
    863          AppS2wCmd_codeCvg07(UINT8 *ptr)
    864          {
    865              UINT8 status;
    866              UINT32 txPowLvl;
    867              UINT8 *p;
    868          
    869              p = AppS2wParse_NextParamGet(&ptr);
    870              if (!p)
    871              {
    872                return S2W_EINVAL;
    873              }
    874              status = AppS2wParse_Int(p, &txPowLvl);
    875              if(status != S2W_SUCCESS)
    876              {
    877                  return status;
    878              }
    879              return AppS2wHal_codeCovg07(txPowLvl);
    880          }
    881          
    882          PUBLIC UINT8
    883          AppS2wCmd_codeCvg08(UINT8 *ptr)
    884          {
    885              UINT8 *p;
    886          
    887              p = AppS2wParse_NextParamGet(&ptr);
    888              if (p)
    889              {
    890                return S2W_EINVAL;
    891              }
    892          
    893              return AppS2wHal_codeCovg08();
    894          }
    895          
    896          PUBLIC UINT8
    897          AppS2wCmd_codeCvg09(UINT8 *ptr)
    898          {
    899              UINT8 *p;
    900          
    901              p = AppS2wParse_NextParamGet(&ptr);
    902              if (p)
    903              {
    904                return S2W_EINVAL;
    905              }
    906          
    907              return AppS2wHal_codeCovg09();
    908          }
    909          #endif
    910          
    911          
    912          
    913          
    914          /**
    915           ******************************************************************
    916           * @ingroup S2w-Application
    917           * @brief Process the AT+WPSK command
    918           * @param ptr Pointer to the user input string.
    919           * @return status.
    920           ******************************************************************/
    921          #if 0 
    922          UINT8
    923          AppS2wCmd_Psk(UINT8 *ptr)
    924          {
    925              UINT8 status;
    926              UINT8 psk[32];
    927              status = AppS2wParse_Psk(ptr,psk);
    928              if(status != S2W_SUCCESS)
    929              {
    930                  return status;
    931              }
    932              return AppS2wHal_PskKeyStore(psk);
    933          }
    934          #endif
    935          
    936          
    937          /**
    938           ******************************************************************
    939           * @ingroup S2w-Application
    940           * @brief Process the AT+WSEC command. This function set the strict
    941           * security feature.
    942           * @param ptr Pointer to the user input string.
    943           * @return S2W_SUCCESS - operation successful.
    944           * @retval S2W_EINVAL  - operation failure-invalid command.
    945           ******************************************************************/
    946           #if 0
    947          UINT8
    948          AppS2wCmd_SecuritySet(UINT8 *ptr)
    949          {
    950              UINT8 status;
    951              UINT32 SecMode;
    952          
    953              /* check the validity of parameter passed
    954               */
    955              status = AppS2wParse_Int(ptr, &SecMode);
    956              if (status != S2W_SUCCESS)
    957              {
    958                  return S2W_EINVAL;
    959              }
    960              /*  allowed values are upto 32(0x40) and or'd values also other than 0
    961              0-->auto
    962              1-->none
    963              2-->wep
    964              4-->wpapsk
    965              8-->wpa2psk
    966              16-->wpaE
    967              32-->wpa2E
    968              */
    969              if(!((SecMode == SECTYPE_AUTO) || (SecMode == SECTYPE_NONE) ||(SecMode == SECTYPE_WEP)
    970                   ||(SecMode == SECTYPE_WPAPSK)||(SecMode == SECTYPE_WPA2PSK)||(SecMode == SECTYPE_WPA)
    971                   ||(SecMode == SECTYPE_WPA2)||(SecMode == SECTYPE_WPA2PSK_TKIP)))
    972              {
    973                  return S2W_EINVAL;
    974              }
    975              /* update the active profile parameter
    976               */
    977          
    978              {
    979                  s2wCurrent.securityType = SecMode;
    980              }
    981          
    982              return S2W_SUCCESS;
    983          }
    984          
    985          #endif
    986          
    987          /**
    988           ******************************************************************
    989           * @ingroup S2w-Application
    990           * @brief Process the AT+WAPSM Command.
    991               This function call the wdd ioctl function to set then association
    992               ps poll conserve.
    993           * @param ptr Pointer to the user string.
    994           * @return S2W_SUCCESS - operation successful.
    995           * @retval S2W_EINVAL  - operation failure-invalid command.
    996           * @retval S2W_FAILURE - operation failure- disconnect failed.
    997           ******************************************************************/
    998          
    999          #ifdef GSN_DHCP_SERVER_ENABLE
   1000          extern GSN_DHCP_SRVR_T dhcpSrvr;
   1001          extern GSN_MAC_ADDR_T* disconStaMac;
   1002          PUBLIC VOID
   1003          AppS2w_StaDisconnectSuccessProcess()
   1004          {
   1005              /* Remove the http entry */
   1006              GsnDhcpSrvr_ClientDelete(&dhcpSrvr,disconStaMac );
   1007          }
   1008          #endif
   1009          
   1010          

   \                                 In section .text, align 2, keep-with-next
   1011          VOID S2w_AsyncMsgGpioInit()
   1012          {
   \                     S2w_AsyncMsgGpioInit:
   \   00000000   0xB580             PUSH     {R7,LR}
   1013              GsnIoMux_Sel(APP_S2W_ASYNC_GPIO, APP_S2W_ASYNC_GPIO_MUX);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2013             MOVS     R0,#+19
   \   00000006   0x.... 0x....      BL       GsnIoMux_Sel
   1014              GsnIoMux_PullDownEnable (APP_S2W_ASYNC_GPIO);
   \   0000000A   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable160  ;; 0x40160200
   \   00000012   0x680A             LDR      R2,[R1, #+0]
   \   00000014   0xF422 0x2200      BIC      R2,R2,#0x80000
   \   00000018   0x600A             STR      R2,[R1, #+0]
   \   0000001A   0x.... 0x....      BL       GsnOsal_IntrEnable
   1015              /* Initialise as Output */
   1016              GsnGpio_Init(APP_S2W_ASYNC_GPIO_BITMAP, ~APP_S2W_ASYNC_GPIO_BITMAP);
   \   0000001E   0xF46F 0x2200      MVN      R2,#+524288
   \   00000022   0xE8BD 0x5000      POP      {R12,LR}
   \   00000026   0xF04F 0x33FF      MOV      R3,#-1
   \   0000002A   0xF44F 0x2000      MOV      R0,#+524288
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x.... 0x....      B.W      GsnGpio_Init
   1017          
   1018          }
   1019          

   \                                 In section .text, align 2, keep-with-next
   1020          VOID S2w_AsyncMsgGpioOp(UINT8 flag)
   1021          {
   1022              if(flag)
   \                     S2w_AsyncMsgGpioOp:
   \   00000000   0x2800             CMP      R0,#+0
   \   00000002   0xF44F 0x2000      MOV      R0,#+524288
   \   00000006   0xBF1C             ITT      NE 
   \   00000008   0x2100             MOVNE    R1,#+0
   \   0000000A   0x.... 0x....      BNE.W    GsnGpio_OutIndvidualSet
   1023              {
   1024                  GsnGpio_OutIndvidualSet(APP_S2W_ASYNC_GPIO_BITMAP);
   1025              }
   1026              else
   1027              {
   1028                  GsnGpio_OutClear(APP_S2W_ASYNC_GPIO_BITMAP);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x.... 0x....      B.W      GsnGpio_OutClear
   1029              }
   1030          }
   1031          
   1032          
   1033          /**
   1034           ******************************************************************
   1035           * @ingroup S2w-Application
   1036           * @brief Process the AT+ASYNCMSGFMT command
   1037           *   This function check the input parameter and start/stop the
   1038           *   enhanced asynchronous notification.
   1039           * @param ptr Pointer to the user input string.
   1040           * @return S2W_SUCCESS - operation successful.
   1041           * @retval S2W_EINVAL  - operation failure-invalid command.
   1042           * @retval S2W_FAILURE - operation failure.
   1043           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1044          PUBLIC UINT8
   1045          AppS2wCmd_AsyncMsgFmt(UINT8 *ptr)
   1046          {
   \                     AppS2wCmd_AsyncMsgFmt:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1047              UINT8 val;
   1048              UINT8 status = S2W_SUCCESS;
   1049          
   1050              status = AppS2wParse_Boolean(ptr, &val);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000000A   0x0004             MOVS     R4,R0
   1051              if (status != S2W_SUCCESS)
   \   0000000C   0xD10C             BNE.N    ??AppS2wCmd_AsyncMsgFmt_0
   1052              {
   1053                  return status;
   1054              }
   1055              s2wCurrent.asyncMsgFormat = val;
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable160_1
   \   00000012   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000016   0xF880 0x11D8      STRB     R1,[R0, #+472]
   1056              if(s2wCurrent.asyncMsgFormat)
   \   0000001A   0x0008             MOVS     R0,R1
   \   0000001C   0xD004             BEQ.N    ??AppS2wCmd_AsyncMsgFmt_0
   1057              {
   1058                 S2w_AsyncMsgGpioInit();
   \   0000001E   0x.... 0x....      BL       S2w_AsyncMsgGpioInit
   1059                 S2w_AsyncMsgGpioOp(0);
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   1060              }
   1061              return status;
   \                     ??AppS2wCmd_AsyncMsgFmt_0:
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1062          }
   1063          
   1064          
   1065          
   1066          #ifdef GSN_DHCP_SERVER_ENABLE
   1067          extern GSN_DHCP_SRVR_T dhcpSrvr;
   1068          #endif
   1069          /**
   1070           ******************************************************************
   1071           * @ingroup S2w-Application
   1072           * @brief Process the AT+VER command
   1073           * @param ptr Pointer to the user input string.
   1074           * @return status.
   1075           ******************************************************************/
   1076          
   1077          
   1078          #ifdef GS1500M
   1079          /**
   1080           ******************************************************************
   1081           * @ingroup S2w-Application
   1082           * @brief Process the AT+WSTAT Command.
   1083           *
   1084           * @param ptr Pointer to the user input string.
   1085           *
   1086           * @return S2W_SUCCESS - operation successful.
   1087           ******************************************************************/
   1088          
   1089          
   1090          /**
   1091           ******************************************************************
   1092           * @ingroup S2w-Application
   1093           * @brief Process the AT+AGGR Command.
   1094           *	 This function is used to enable or disable agrregation
   1095           * @param ptr Pointer to the user input string.
   1096           *
   1097           * @return S2W_SUCCESS - operation successful.
   1098           ******************************************************************/
   1099          PUBLIC UINT8
   1100          AppS2wCmd_AggregationSet(UINT8 *ptr)
   1101          {
   1102          	UINT8    status;
   1103          	UINT32   txTidMask;
   1104          	UINT32	 rxTidMask;
   1105          	UINT32	 val;
   1106              UINT8 *p;
   1107          
   1108          	p = AppS2wParse_NextParamGet(&ptr);
   1109          
   1110          	 if (!p)
   1111              {
   1112                  return S2W_EINVAL;
   1113              }
   1114          
   1115          	status = AppS2wParse_Hex(p, &txTidMask);  /* 16-bit mask allowing uplink ADDBA  negotiation; bit position indicates TID*/
   1116          	if (status != S2W_SUCCESS)
   1117          	{
   1118          		return status;
   1119          	}
   1120          
   1121          	p = AppS2wParse_NextParamGet(&ptr);
   1122          	 if (!p)
   1123              {
   1124                  return S2W_EINVAL;
   1125              }
   1126          
   1127          	status = AppS2wParse_Hex(p, &rxTidMask); /* 16-bit mask to allow donwlink ADDBA negotiation; bit position indicates TID*/
   1128          	if (status != S2W_SUCCESS)
   1129          	{
   1130          		return status;
   1131          	}
   1132          
   1133          	val = (txTidMask <<16 ) |  rxTidMask;
   1134          
   1135          	GsnWdd_AggregationSet(&s2wappMainTaskCtxt->wdd, val);
   1136          
   1137          	return status;
   1138          }
   1139          
   1140          
   1141          /**
   1142           ******************************************************************
   1143           * @ingroup S2w-Application
   1144           * @brief Process the AT+WKEEPALIVE  Command.
   1145           *	 This function is used to configure keep alive interval
   1146           * @param ptr Pointer to the user input string.
   1147           *
   1148           * @return S2W_SUCCESS - operation successful.
   1149           ******************************************************************/
   1150          PUBLIC UINT8
   1151          AppS2wCmd_KeepAliveSet(UINT8 *ptr)
   1152          {
   1153          	UINT8    status;
   1154          	UINT32    keepAliveInterval;
   1155              UINT8 *p;
   1156          
   1157          
   1158          	p = AppS2wParse_NextParamGet(&ptr);
   1159          
   1160          	 if (!p)
   1161              {
   1162                  return S2W_EINVAL;
   1163              }
   1164          
   1165          	   /* validate the parameter as enable/disable
   1166               */
   1167              status = AppS2wParse_Int(p, &keepAliveInterval);
   1168              if (status != S2W_SUCCESS)
   1169              {
   1170                  return status;
   1171              }
   1172          
   1173          
   1174          	GsnWdd_KeepAliveSet(&s2wappMainTaskCtxt->wdd, (UINT8)keepAliveInterval);
   1175          	/* Update in RTC memory */
   1176          	//appRtcMemData.wlanKeepAliveCount= (UINT8)keepAliveInterval;
   1177          	//GsnWif_SysRtcMemWrite(&s2wappMainTaskCtxt->wifCtx, sizeof(appRtcMemData),
   1178                //                    (UINT8 *)&appRtcMemData);
   1179          
   1180          	return status;
   1181          }
   1182          #endif
   1183          
   1184          #if 0
   1185          #ifdef S2W_FILE_SYS
   1186          #define S2W_WR_BUFF_SIZE	1024
   1187          PUBLIC UINT8
   1188          AppS2wHal_FileWriteDataGet(INT32 fd, UINT32 dataLen)
   1189          {
   1190              GSN_STATUS status = S2W_SUCCESS;
   1191          	UINT8 *dataBuff;
   1192          	UINT32 writeLen;
   1193          
   1194          	dataBuff = (UINT8 *)gsn_malloc(S2W_WR_BUFF_SIZE);
   1195              if(NULL ==  dataBuff)
   1196              {
   1197                  status = S2W_FAILURE;
   1198                  goto AppS2wHal_FileWriteDataGetExit;
   1199              }
   1200          	writeLen = 0;
   1201              while(dataLen)
   1202              {
   1203                  writeLen = dataLen >= S2W_WR_BUFF_SIZE? S2W_WR_BUFF_SIZE:dataLen;
   1204          
   1205                  AppS2wHal_CharNGet(dataBuff,writeLen);
   1206          		/* write in to file */
   1207          		GsnFs_write(fd, dataBuff, writeLen);
   1208          
   1209          		dataLen -= writeLen;
   1210                  /*S2w_Printf("%d\r\n", dataLen);*/
   1211              }
   1212          	/* free the buffer */
   1213          	gsn_free(dataBuff);
   1214          AppS2wHal_FileWriteDataGetExit:
   1215          	S2w_Printf("\r\nOK\r\n");
   1216             return status;
   1217          }
   1218          #endif
   1219          #endif
   1220          
   1221          
   1222          
   1223          
   1224          
   1225          INT32 s2wErrorCode=0;
   1226          
   1227          
   1228          
   1229          
   1230          
   1231          #ifdef S2W_GSLINK_RAW
   1232          /**
   1233          ******************************************************************
   1234          * @ingroup S2w-Application
   1235          * @brief Process the http data from the serial interface.
   1236          *   This function reads the http data and sends to wifi.
   1237          * @param dataLen the input data length.
   1238          * @param hCid the cid of the http connection.
   1239          * @return S2W_SUCCESS - operation successful.
   1240          * @return S2W_FAILURE - operation Failed.
   1241          ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1242          PUBLIC UINT8
   1243          AppS2wHal_RawhttpContentGet(UINT32 dataLen, UINT8 hCid)
   1244          {
   \                     AppS2wHal_RawhttpContentGet:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4688             MOV      R8,R1
   1245              GSN_STATUS status = S2W_SUCCESS;
   1246              s2wCidList[hCid].httpdCtx.moreData=1;
   \   00000008   0xF44F 0x7094      MOV      R0,#+296
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable160_2
   \   00000010   0x.... 0x....      LDR.W    R7,??DataTable160_3
   \   00000014   0xFB00 0x1908      MLA      R9,R0,R8,R1
   \   00000018   0xF109 0x0594      ADD      R5,R9,#+148
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x2600             MOVS     R6,#+0
   \   00000020   0x7328             STRB     R0,[R5, #+12]
   1247              while(dataLen)
   \                     ??AppS2wHal_RawhttpContentGet_0:
   \   00000022   0xB304             CBZ.N    R4,??AppS2wHal_RawhttpContentGet_1
   1248              {
   1249                  s2wCidList[hCid].httpdCtx.httpdBufferLenUsed = dataLen >= 1000? 1000:dataLen;
   \   00000024   0xF44F 0x707A      MOV      R0,#+1000
   \   00000028   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   0000002C   0xBF98             IT       LS 
   \   0000002E   0x4620             MOVLS    R0,R4
   \   00000030   0xF8C9 0x0094      STR      R0,[R9, #+148]
   1250          #ifndef S2W_DUAL_INTERFACE_SUPPORT  
   1251                  AppS2wHal_CharNGet((UINT8*)s2wCidList[hCid].httpdCtx.httpdBuffer,s2wCidList[hCid].httpdCtx.httpdBufferLenUsed);
   \   00000034   0x4601             MOV      R1,R0
   \   00000036   0x68A8             LDR      R0,[R5, #+8]
   \   00000038   0x.... 0x....      BL       AppS2wHal_CharNGet
   1252          #else
   1253                  AppS2wHal_CharNGet1((UINT8*)s2wCidList[hCid].httpdCtx.httpdBuffer,s2wCidList[hCid].httpdCtx.httpdBufferLenUsed);
   1254          #endif
   1255                  dataLen = dataLen - s2wCidList[hCid].httpdCtx.httpdBufferLenUsed;
   \   0000003C   0xF8D9 0x0094      LDR      R0,[R9, #+148]
   \   00000040   0x1A24             SUBS     R4,R4,R0
   1256          	    if(0 == dataLen )
   \   00000042   0xBF08             IT       EQ 
   \   00000044   0x732E             STRBEQ   R6,[R5, #+12]
   1257          	    {
   1258          	        s2wCidList[hCid].httpdCtx.moreData = 0;
   1259          	    }
   1260                   AppS2w_HttpSemRelease(hCid);
   \   00000046   0x4640             MOV      R0,R8
   \   00000048   0x.... 0x....      BL       AppS2w_HttpSemRelease
   1261                  GsnOsal_SemAcquire(&s2wCidList[hCid].httpdCtx.httpdSendSem,GSN_OSAL_WAIT_FOREVER);
   \   0000004C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000050   0xF109 0x00C0      ADD      R0,R9,#+192
   \   00000054   0x.... 0x....      BL       GsnOsal_SemAcquire
   1262          		if(s2wappMainTaskCtxt->gsLinkSendStatus  == S2W_FAILURE)
   \   00000058   0x6839             LDR      R1,[R7, #+0]
   \   0000005A   0xF646 0x3055      MOVW     R0,#+27477
   \   0000005E   0x5C40             LDRB     R0,[R0, R1]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD1DE             BNE.N    ??AppS2wHal_RawhttpContentGet_0
   1263          		{
   1264          			status = S2W_FAILURE;
   \   00000064   0x2601             MOVS     R6,#+1
   1265          			break;
   1266          		}
   1267          	}
   1268              return status;
   \                     ??AppS2wHal_RawhttpContentGet_1:
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   1269          }
   1270          #endif
   1271          #ifdef S2W_HTTPC_SUPPORT
   1272          #ifdef S2W_GSLINK
   1273          

   \                                 In section .text, align 2, keep-with-next
   1274          UINT8
   1275          AppS2wHal_GetStausCode(INT8 *httpRxBuf,UINT8 *statusCodeLen)
   1276          {
   \                     AppS2wHal_GetStausCode:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1277          	INT8 *current;
   1278          	INT8 statusCode[5];
   1279          	UINT8 status=S2W_SUCCESS;
   \   00000006   0x2600             MOVS     R6,#+0
   1280          	UINT32 len=0;
   1281          	//current = strstr((const char *)httpRxBuf," ");
   1282          	memcpy(statusCode,httpRxBuf,3);
   \   00000008   0x2203             MOVS     R2,#+3
   \   0000000A   0x4621             MOV      R1,R4
   \   0000000C   0x.... 0x....      BL       ??Subroutine26_0
   1283          	if(memcmp(statusCode,"200",3) != 0)
   \                     ??CrossCallReturnLabel_257:
   \   00000010   0x2203             MOVS     R2,#+3
   \   00000012   0x....             ADR.N    R1,??DataTable152  ;; "200"
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       memcmp
   \   0000001A   0xB100             CBZ.N    R0,??AppS2wHal_GetStausCode_0
   1284          	{
   1285          		status = S2W_FAILURE;	
   \   0000001C   0x2601             MOVS     R6,#+1
   1286          	}
   1287          	current = strstr((const char *)httpRxBuf,"\n");
   \                     ??AppS2wHal_GetStausCode_0:
   \   0000001E   0x....             ADR.N    R1,??DataTable153  ;; "\n"
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       __iar_Strstr
   1288          	if(current == NULL)
   \   00000026   0xB900             CBNZ.N   R0,??AppS2wHal_GetStausCode_1
   1289          		status = S2W_FAILURE;	
   \   00000028   0x2601             MOVS     R6,#+1
   1290          	len = (current - httpRxBuf)+1;
   1291          	*statusCodeLen = len;
   \                     ??AppS2wHal_GetStausCode_1:
   \   0000002A   0x1B00             SUBS     R0,R0,R4
   \   0000002C   0x1C40             ADDS     R0,R0,#+1
   \   0000002E   0x7028             STRB     R0,[R5, #+0]
   1292          	return status;
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   1293          }	

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0xF10D 0x010E      ADD      R1,SP,#+14
   \                     ??Subroutine26_0:
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      B.W      memcpy
   1294          
   1295          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   1296          VOID
   1297          AppS2w_HttpStatusLineSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 statusline)
   1298          {
   1299              if(httpdCtx != NULL)
   1300              {
   1301                  httpdCtx->statusline = statusline;
   1302              }
   1303          }
   1304          
   1305          VOID
   1306          AppS2w_HttpHdrCountSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT32 headercount)
   1307          {
   1308              if(httpdCtx != NULL)
   1309              {
   1310                  httpdCtx->appheadercount = headercount;
   1311              }
   1312          }
   1313          
   1314          PUBLIC UINT8
   1315          AppS2wCmd_RecvConf(UINT8 *ptr)
   1316          {
   1317              int cid, sendRespHdrs, sendStatus;
   1318              UINT8 *p = NULL;
   1319              UINT8 *hdr = NULL;
   1320              UINT8 *status = NULL;
   1321              UINT32 httpHddrBmap = 0;
   1322          
   1323              p = AppS2wParse_NextParamGet(&ptr);
   1324              if (!p)
   1325              {
   1326                  return S2W_EINVAL;
   1327              }
   1328              cid = AppS2w_CidValidate(*p);
   1329              if( cid == INVALID_CID)
   1330                  return S2W_EBADCID;
   1331          
   1332          
   1333              status = AppS2wParse_NextParamGet(&ptr);
   1334              if (!status)
   1335              {
   1336                 return S2W_EINVAL;
   1337              }
   1338              AppS2wParse_Int(status, &sendStatus);
   1339              if(1 == sendStatus)
   1340              {
   1341                  httpConfInfo.sendStatus = 1;
   1342              }
   1343              else
   1344              {
   1345              	httpConfInfo.sendStatus = 0;
   1346              }
   1347          
   1348              /* Parse the Http header bitmap */
   1349              hdr = AppS2wParse_NextParamGet(&ptr);
   1350              if (!hdr)
   1351              {
   1352                 return S2W_EINVAL;
   1353              }
   1354              AppS2wParse_HexString(hdr, &httpHddrBmap, HTTP_HDR_BITMAP_STR_SIZE);
   1355              httpConfInfo.httpcHdrBmap = httpHddrBmap;
   1356          
   1357              return S2W_SUCCESS;
   1358          }
   1359          #endif
   1360          
   1361          
   1362          /**
   1363          ******************************************************************
   1364          * @ingroup S2w-Application
   1365          * @brief Process AT+XMLRECV command
   1366          *	 This function adds the new URI.
   1367          * @param ptr Pointer to the user input string.
   1368          *
   1369          * @return S2W_SUCCESS - operation successful.
   1370          * @return S2W_FAILURE - operation Failed.
   1371          * @return S2W_EINVAL - operation Failed-invalid input
   1372          *************************************************************/
   1373          
   1374          
   1375          
   1376          
   1377          #ifdef S2W_GSLINK_XML
   1378          

   \                                 In section .text, align 2, keep-with-next
   1379          PUBLIC void
   1380          AppS2w_XmlRxBufferMgmtCb(VOID *context,
   1381                             GSN_HTTPC_CONN_HANDLE conHandle,
   1382                               INT8 *httpRxDataBuf,
   1383                               INT32 httpRxDataLen,
   1384                               INT32* rxBufferOffset)
   1385          {
   \                     AppS2w_XmlRxBufferMgmtCb:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   1386              UINT8 cid,status,headerLen,statusCodeLen=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000000C   0x4614             MOV      R4,R2
   1387              INT8 startMark[10];
   1388              ttHttpcConEntryPtr conEntryPtr = (ttHttpcConEntryPtr)conHandle;
   1389          	GSN_STATUS decodeStatus = GSN_FAILURE;
   1390          	headerLen=0;
   1391              cid = AppS2wHal_CidFind(conEntryPtr->hconSd);
   \   0000000E   0xF8D1 0x00A8      LDR      R0,[R1, #+168]
   \   00000012   0x4698             MOV      R8,R3
   \   00000014   0x.... 0x....      BL       AppS2wHal_CidFind
   \   00000018   0x4606             MOV      R6,R0
   1392          	if(s2wCidList[cid].httpdCtx.methodLineReceived==0)
   \   0000001A   0xF44F 0x7094      MOV      R0,#+296
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable160_2
   \   00000022   0x9D0E             LDR      R5,[SP, #+56]
   \   00000024   0xFB00 0x1906      MLA      R9,R0,R6,R1
   \   00000028   0xF899 0x00A1      LDRB     R0,[R9, #+161]
   \   0000002C   0xBB10             CBNZ.N   R0,??AppS2w_XmlRxBufferMgmtCb_0
   1393          	{
   1394          		status = AppS2wHal_GetStausCode(httpRxDataBuf,&statusCodeLen);
   \   0000002E   0xA902             ADD      R1,SP,#+8
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       AppS2wHal_GetStausCode
   \   00000036   0x.... 0x....      BL       ?Subroutine4
   1395          		headerLen = sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,statusCodeLen);
   \                     ??CrossCallReturnLabel_16:
   \   0000003A   0x9600             STR      R6,[SP, #+0]
   \   0000003C   0x2348             MOVS     R3,#+72
   \   0000003E   0x221B             MOVS     R2,#+27
   \   00000040   0xA803             ADD      R0,SP,#+12
   \   00000042   0x.... 0x....      BL       sprintf
   1396          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1397          		AppS2wHal_CharNPut(startMark, headerLen);
   \   00000046   0xB2C1             UXTB     R1,R0
   \   00000048   0xA803             ADD      R0,SP,#+12
   \   0000004A   0x.... 0x....      BL       AppS2wHal_CharNPut
   1398          		AppS2wHal_CharNPut(httpRxDataBuf,statusCodeLen);
   \   0000004E   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       AppS2wHal_CharNPut
   1399          #else
   1400          		AppS2wHal_CharNPut1(startMark, headerLen);
   1401          		AppS2wHal_CharNPut1(httpRxDataBuf,statusCodeLen);
   1402          #endif
   1403          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1404          	    if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable160_3
   \   0000005C   0x6809             LDR      R1,[R1, #+0]
   \   0000005E   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000062   0x5C40             LDRB     R0,[R0, R1]
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xBF08             IT       EQ 
   \   00000068   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1405          	    {
   1406          	        s2wSpiFs_Flush();
   1407          	    }
   1408          #else
   1409          	    if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   1410          	    {
   1411          	        s2wSpiFs_Flush1();
   1412                  }
   1413          #endif
   1414          		s2wCidList[cid].httpdCtx.methodLineReceived=1;		
   \   0000006C   0x2001             MOVS     R0,#+1
   \   0000006E   0xF889 0x00A1      STRB     R0,[R9, #+161]
   1415          		if(status == S2W_SUCCESS)
   \   00000072   0xB9C7             CBNZ.N   R7,??AppS2w_XmlRxBufferMgmtCb_1
   1416          		{				
   1417          			decodeStatus = GsnXMLStr_Decode(s2wCidList[cid].xmlParserCtx,(UINT8 *)httpRxDataBuf,httpRxDataLen,App_XmlParserCb,NULL);
   1418          		}			
   1419          	}
   1420          	else				
   1421          	{
   1422          		decodeStatus= GsnXMLStr_Decode(s2wCidList[cid].xmlParserCtx,(UINT8 *)httpRxDataBuf,httpRxDataLen,App_XmlParserCb,NULL);
   \                     ??AppS2w_XmlRxBufferMgmtCb_0:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x9000             STR      R0,[SP, #+0]
   \   00000078   0x4642             MOV      R2,R8
   \   0000007A   0xF8D9 0x00E4      LDR      R0,[R9, #+228]
   \   0000007E   0x.... 0x....      LDR.W    R3,??DataTable161_2
   \   00000082   0x4621             MOV      R1,R4
   \   00000084   0x.... 0x....      BL       GsnXMLStr_Decode
   1423          	}
   1424          	if(decodeStatus == GSN_XML_PARTIAL_ELEMENT)
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable161_3  ;; 0x8000000c
   \   0000008C   0x4288             CMP      R0,R1
   \   0000008E   0xD103             BNE.N    ??AppS2w_XmlRxBufferMgmtCb_2
   1425          	{
   1426          		*rxBufferOffset = s2wCidList[cid].xmlParserCtx->bytesTodecode;// S2W_SUCCESS;
   \   00000090   0xF8D9 0x00E4      LDR      R0,[R9, #+228]
   \   00000094   0x6A80             LDR      R0,[R0, #+40]
   \   00000096   0xE008             B.N      ??AppS2w_XmlRxBufferMgmtCb_3
   1427          	}
   1428          	else if((decodeStatus == GSN_INVALID_PARAM) || (decodeStatus == GSN_FAILURE))
   \                     ??AppS2w_XmlRxBufferMgmtCb_2:
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable162  ;; 0x80000004
   \   0000009C   0x4288             CMP      R0,R1
   \   0000009E   0xBF18             IT       NE 
   \   000000A0   0xF110 0x4F00      CMNNE    R0,#-2147483648
   \   000000A4   0xD102             BNE.N    ??AppS2w_XmlRxBufferMgmtCb_4
   1429          		*rxBufferOffset = -1;
   \                     ??AppS2w_XmlRxBufferMgmtCb_1:
   \   000000A6   0xF04F 0x30FF      MOV      R0,#-1
   \                     ??AppS2w_XmlRxBufferMgmtCb_3:
   \   000000AA   0x6028             STR      R0,[R5, #+0]
   1430          }
   \                     ??AppS2w_XmlRxBufferMgmtCb_4:
   \   000000AC   0xB007             ADD      SP,SP,#+28
   \   000000AE   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x4607             MOV      R7,R0
   \   00000002   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable162_5
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x4770             BX       LR
   1431          /**
   1432           ******************************************************************
   1433           * @ingroup S2w-Application
   1434           * @brief Http client send function.
   1435           * @param cid                - IN the cid needs to be closed
   1436           * @retval S2W_SUCCESS     - operation successfull.
   1437           * @retval S2W_EBADCID     - cid is not valid.
   1438           * @retval S2W_FAILURE     - operation failed.
   1439           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1440          PUBLIC GSN_STATUS S2wHttp_XmlSend(UINT8 cid)
   1441          {
   \                     S2wHttp_XmlSend:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   1442              UINT8 *httpRxDataBuf = NULL;
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x4604             MOV      R4,R0
   1443              UINT32 httpRxDataLen = 0;
   \   0000000A   0x9503             STR      R5,[SP, #+12]
   1444              UINT32 ret = S2W_SUCCESS;
   1445              INT8 startMark[10];
   1446          	UINT8 statusCodeLen=0,headerLen=0;
   \   0000000C   0xF88D 0x5008      STRB     R5,[SP, #+8]
   1447          #ifdef S2W_HTTPC_SUPPORT
   1448              S2W_HTTP_DATA_T *pHttpData;
   1449          #endif
   1450              pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   \   00000010   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   00000014   0xEA5F 0x0800      MOVS     R8,R0
   1451              if(pHttpData == NULL)
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x2001             MOVEQ    R0,#+1
   1452              {
   1453                   return S2W_FAILURE;
   \   0000001C   0xD07A             BEQ.N    ??S2wHttp_XmlSend_0
   1454              }
   1455              if(0 == httpConfInfo.moredata)
   \   0000001E   0x.... 0x....      LDR.W    R6,??DataTable162_1
   \   00000022   0xF896 0x0048      LDRB     R0,[R6, #+72]
   \   00000026   0x1D37             ADDS     R7,R6,#+4
   \   00000028   0xB998             CBNZ.N   R0,??S2wHttp_XmlSend_1
   1456              {/* prepare to receive response */
   1457                  httpRxDataLen = 1024 ;
   \   0000002A   0xF44F 0x6080      MOV      R0,#+1024
   \   0000002E   0x9003             STR      R0,[SP, #+12]
   1458                  httpRxDataBuf = gsn_malloc(1024);
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0xF240 0x51B2      MOVW     R1,#+1458
   \   00000036   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000003A   0x0005             MOVS     R5,R0
   1459                  if(NULL == httpRxDataBuf)
   \   0000003C   0xD104             BNE.N    ??S2wHttp_XmlSend_2
   1460                  {
   1461                      ret = S2W_FAILURE;
   1462          			goto S2wHttp_XmlSendExit;
   1463                  }
   1464                  httpConfInfo.rxBufferMgmtCb = AppS2w_XmlRxBufferMgmtCb;
   1465                httpConfInfo.rxBufferMgmtCbCtx = NULL;
   1466              }
   1467          	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
   1468          	compiled with header type array being defined as array of UINT8 */
   1469          	{
   1470          		UINT8 i;
   1471          		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   1472                  {
   1473                  	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM)
   1474          			{
   1475          				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T) TM_HTTP_HEADER_CUSTOM;
   1476          			}
   1477          			else
   1478          			{
   1479                  		headerTypesModified[i] = headerTypes[i];
   1480          			}
   1481                  }
   1482          	}
   1483              ret = GsnHttp_Send(pHttpData->pHttpHandle, (INT8 *)httpRxDataBuf,
   1484                                 &httpRxDataLen, httpConfInfo.httpTimeOut, &httpConfInfo);
   1485              if(GSN_SUCCESS == ret)
   1486              {
   1487                  if(0 == httpConfInfo.moredata)
   1488                  {
   1489          			if(s2wCidList[cid].httpdCtx.methodLineReceived==0)
   1490                  	{
   1491          				ret = AppS2wHal_GetStausCode((INT8 *)httpRxDataBuf,&statusCodeLen);
   1492              			headerLen = sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,statusCodeLen);
   1493          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1494          				AppS2wHal_CharNPut(startMark, headerLen);
   1495          				AppS2wHal_CharNPut(httpRxDataBuf,statusCodeLen);
   1496          #else
   1497          				AppS2wHal_CharNPut1(startMark, headerLen);
   1498          				AppS2wHal_CharNPut1(httpRxDataBuf,statusCodeLen);
   1499          #endif
   1500          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1501          			    if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   1502          			    {
   1503          			        s2wSpiFs_Flush();
   1504          			    }
   1505          #else
   1506          			    if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   1507          			    {
   1508          			        s2wSpiFs_Flush1();
   1509                          }
   1510          #endif
   1511          				s2wCidList[cid].httpdCtx.methodLineReceived=0;
   1512          				if(ret == S2W_SUCCESS)
   1513          				{				
   1514          					 GsnXMLStr_Decode(s2wCidList[cid].xmlParserCtx,(UINT8 *)httpRxDataBuf,httpRxDataLen,App_XmlParserCb,NULL);
   1515          				}			
   1516          			}
   1517          			else				
   1518          			{
   1519          				 GsnXMLStr_Decode(s2wCidList[cid].xmlParserCtx,(UINT8 *)httpRxDataBuf,httpRxDataLen,App_XmlParserCb,NULL);
   1520          			}						
   1521                  }
   1522                  ret = S2W_SUCCESS;
   1523              }
   1524              else /* ERROR or TimeOut */
   1525              {
   1526                  ret = S2W_FAILURE;
   1527              }
   1528              if(NULL != httpRxDataBuf)
   1529              {
   1530                  gsn_free(httpRxDataBuf);
   1531                  httpRxDataBuf = NULL;
   1532              }
   1533          		if(NULL != httpConfInfo.reqPathPtr)
   1534          		   {
   1535          			   gsn_free(httpConfInfo.reqPathPtr);
   1536          			   httpConfInfo.reqPathPtr = NULL;
   1537          		   }
   1538          S2wHttp_XmlSendExit:
   1539          		if(NULL != httpConfInfo.reqPathPtr)
   \   0000003E   0x6870             LDR      R0,[R6, #+4]
   \   00000040   0x2401             MOVS     R4,#+1
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD065             BEQ.N    ??S2wHttp_XmlSend_3
   \   00000046   0xE05F             B.N      ??S2wHttp_XmlSend_4
   \                     ??S2wHttp_XmlSend_2:
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable162_2
   \   0000004C   0x63B8             STR      R0,[R7, #+56]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x63F8             STR      R0,[R7, #+60]
   \                     ??S2wHttp_XmlSend_1:
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x.... 0x....      LDR.W    R1,??DataTable162_3
   \   00000058   0x.... 0x....      LDR.W    R2,??DataTable162_4
   \                     ??S2wHttp_XmlSend_5:
   \   0000005C   0xF852 0x3020      LDR      R3,[R2, R0, LSL #+2]
   \   00000060   0x2BFF             CMP      R3,#+255
   \   00000062   0xBF28             IT       CS 
   \   00000064   0x23FF             MOVCS    R3,#+255
   \   00000066   0xF841 0x3020      STR      R3,[R1, R0, LSL #+2]
   \   0000006A   0x1C40             ADDS     R0,R0,#+1
   \   0000006C   0x2819             CMP      R0,#+25
   \   0000006E   0xD3F5             BCC.N    ??S2wHttp_XmlSend_5
   \   00000070   0x9600             STR      R6,[SP, #+0]
   \   00000072   0x6C3B             LDR      R3,[R7, #+64]
   \   00000074   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000078   0xAA03             ADD      R2,SP,#+12
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x.... 0x....      BL       GsnHttp_Send
   \   00000080   0x2800             CMP      R0,#+0
   \   00000082   0xD13A             BNE.N    ??S2wHttp_XmlSend_6
   \   00000084   0xF896 0x0048      LDRB     R0,[R6, #+72]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD134             BNE.N    ??S2wHttp_XmlSend_7
   \   0000008C   0xF44F 0x7094      MOV      R0,#+296
   \   00000090   0x.... 0x....      LDR.W    R1,??DataTable160_2
   \   00000094   0xFB00 0x1804      MLA      R8,R0,R4,R1
   \   00000098   0xF898 0x00A1      LDRB     R0,[R8, #+161]
   \   0000009C   0xBB08             CBNZ.N   R0,??S2wHttp_XmlSend_8
   \   0000009E   0xA902             ADD      R1,SP,#+8
   \   000000A0   0x4628             MOV      R0,R5
   \   000000A2   0x.... 0x....      BL       AppS2wHal_GetStausCode
   \   000000A6   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_17:
   \   000000AA   0x9400             STR      R4,[SP, #+0]
   \   000000AC   0x2348             MOVS     R3,#+72
   \   000000AE   0x221B             MOVS     R2,#+27
   \   000000B0   0xA804             ADD      R0,SP,#+16
   \   000000B2   0x.... 0x....      BL       sprintf
   \   000000B6   0xB2C1             UXTB     R1,R0
   \   000000B8   0xA804             ADD      R0,SP,#+16
   \   000000BA   0x.... 0x....      BL       AppS2wHal_CharNPut
   \   000000BE   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   000000C2   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_18:
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable160_3
   \   000000CA   0x6809             LDR      R1,[R1, #+0]
   \   000000CC   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000D0   0x5C40             LDRB     R0,[R0, R1]
   \   000000D2   0x2802             CMP      R0,#+2
   \   000000D4   0xBF08             IT       EQ 
   \   000000D6   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0xF888 0x00A1      STRB     R0,[R8, #+161]
   \   000000E0   0xB94F             CBNZ.N   R7,??S2wHttp_XmlSend_7
   \                     ??S2wHttp_XmlSend_8:
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0x9000             STR      R0,[SP, #+0]
   \   000000E6   0x4629             MOV      R1,R5
   \   000000E8   0x9A03             LDR      R2,[SP, #+12]
   \   000000EA   0xF8D8 0x00E4      LDR      R0,[R8, #+228]
   \   000000EE   0x.... 0x....      LDR.W    R3,??DataTable161_2
   \   000000F2   0x.... 0x....      BL       GsnXMLStr_Decode
   \                     ??S2wHttp_XmlSend_7:
   \   000000F6   0x2400             MOVS     R4,#+0
   \   000000F8   0xE000             B.N      ??S2wHttp_XmlSend_9
   \                     ??S2wHttp_XmlSend_6:
   \   000000FA   0x2401             MOVS     R4,#+1
   \                     ??S2wHttp_XmlSend_9:
   \   000000FC   0xB115             CBZ.N    R5,??S2wHttp_XmlSend_10
   \   000000FE   0x4628             MOV      R0,R5
   \   00000100   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??S2wHttp_XmlSend_10:
   \   00000104   0x6870             LDR      R0,[R6, #+4]
   \   00000106   0xB120             CBZ.N    R0,??S2wHttp_XmlSend_3
   1540          		   {
   1541          			   gsn_free(httpConfInfo.reqPathPtr);
   \                     ??S2wHttp_XmlSend_4:
   \   00000108   0x6870             LDR      R0,[R6, #+4]
   \   0000010A   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1542          			   httpConfInfo.reqPathPtr = NULL;
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x6070             STR      R0,[R6, #+4]
   1543          		   }
   1544              return ret;
   \                     ??S2wHttp_XmlSend_3:
   \   00000112   0x4620             MOV      R0,R4
   \                     ??S2wHttp_XmlSend_0:
   \   00000114   0xB008             ADD      SP,SP,#+32
   \   00000116   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1545          }
   1546          
   1547          
   1548          
   1549          /**
   1550           ******************************************************************
   1551           * @ingroup S2w-Application
   1552           * @brief Process the http data from the serial interface.
   1553           *   This function reads the http data and sends to wifi.
   1554           * @param hCid the cid of the http connection.
   1555           * @return S2W_SUCCESS - operation successful.
   1556           * @return S2W_FAILURE - operation Failed.
   1557           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1558          PUBLIC UINT8
   1559          AppS2wHal_XmlPost( UINT8 hCid)
   1560          {
   \                     AppS2wHal_XmlPost:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1561          	GSN_STATUS status = S2W_SUCCESS;
   1562              //S2W_HTTP_DATA_T *pHttpData;
   1563          	INT8 *buffer;
   1564          	UINT32 	dataLen=0/*,sendDataCount=0*/;
   1565          
   1566          	buffer = s2wCidList[hCid].httpdCtx.httpdBuffer;
   1567          	//buffer = buffer - s2wCidList[hCid].httpdCtx.httpdBufferLenUsed;
   1568          	dataLen = s2wCidList[hCid].httpdCtx.httpdBufferLenUsed;
   1569              httpConfInfo.moredata = 1;
   1570          	httpConfInfo.reqBodyPtr = buffer;
   \   00000002   0xF44F 0x7294      MOV      R2,#+296
   \   00000006   0x.... 0x....      LDR.W    R3,??DataTable160_2
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable162_1
   \   0000000E   0xFB02 0x3200      MLA      R2,R2,R0,R3
   \   00000012   0xF102 0x0394      ADD      R3,R2,#+148
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x689D             LDR      R5,[R3, #+8]
   \   0000001A   0x6165             STR      R5,[R4, #+20]
   1571              httpConfInfo.reqBodyLen = dataLen;
   \   0000001C   0xF104 0x0514      ADD      R5,R4,#+20
   \   00000020   0xF8D2 0x2094      LDR      R2,[R2, #+148]
   \   00000024   0x606A             STR      R2,[R5, #+4]
   1572          
   1573              if(0 == s2wCidList[hCid].xmlParserCtx->moreData )
   \   00000026   0x6D1A             LDR      R2,[R3, #+80]
   \   00000028   0x6992             LDR      R2,[R2, #+24]
   \   0000002A   0xB902             CBNZ.N   R2,??AppS2wHal_XmlPost_0
   1574              {
   1575                  httpConfInfo.moredata = 0;
   \   0000002C   0x2100             MOVS     R1,#+0
   \                     ??AppS2wHal_XmlPost_0:
   \   0000002E   0xF884 0x1048      STRB     R1,[R4, #+72]
   1576              }
   1577              status = S2wHttp_XmlSend(hCid);
   \   00000032   0x.... 0x....      BL       S2wHttp_XmlSend
   1578          
   1579          	httpConfInfo.reqBodyLen = 0;
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x6069             STR      R1,[R5, #+4]
   1580              if(status != S2W_SUCCESS)
   \   0000003A   0xB110             CBZ.N    R0,??AppS2wHal_XmlPost_1
   1581              {
   1582              	httpConfInfo.moredata = 0;
   \   0000003C   0xF884 0x1048      STRB     R1,[R4, #+72]
   1583                  return S2W_FAILURE;
   \   00000040   0x2001             MOVS     R0,#+1
   1584              }
   1585          return status;
   \                     ??AppS2wHal_XmlPost_1:
   \   00000042   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1586          }
   1587          
   1588          
   1589          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   1590          extern ttConstCharPtr const TM_CONST_QLF
   1591          tlHttpdContentTypes[TM_HTTPD_CONTENT_TYPES_MAX] ;
   1592          
   1593          extern const char  TM_CONST_QLF tlHttpdChunked[];
   1594          UINT8
   1595          AppS2w_HttpAddHdr(S2W_HTTPD_CONTEXT_T *httpdCtx, ttHttpUserHeaderType httphdrtype, UINT8  *httphdrvalptr)
   1596          {
   1597              UINT32   i;
   1598              UINT32 totalhdrcount;
   1599          
   1600              if((NULL == httpdCtx) || (NULL == httpdCtx->httphdrvalptrptr) ||
   1601                 (NULL == httpdCtx->httphdrnameptrptr) || (NULL == httpdCtx->httphdrtypeptr) || (NULL == httphdrvalptr))
   1602              {
   1603                  return S2W_FAILURE;
   1604              }
   1605          
   1606              totalhdrcount = httpdCtx->appheadercount + HTTP_STATIC_HDR_COUNT;
   1607              /* search for an empty slot */
   1608              for(i = 0; i < totalhdrcount; i++)
   1609              {
   1610                  if(NULL == httpdCtx->httphdrvalptrptr[i])
   1611                  {
   1612                      //httpdCtx->httphdrnameptrptr[i] = gsn_malloc(hdrnamelen + 1);
   1613                      *(httpdCtx->httphdrvalptrptr + i) = gsn_malloc(strlen(httphdrvalptr) + 1);
   1614                      memset((*(httpdCtx->httphdrvalptrptr + i)), 0, (strlen(httphdrvalptr) + 1));
   1615                      break;
   1616                  }
   1617              }
   1618          
   1619              if(i < totalhdrcount)
   1620              {
   1621          //        strncpy(httpdCtx->httphdrnameptrptr, dataBuffer, hdrnamelen);
   1622                  strncpy(httpdCtx->httphdrvalptrptr[i], httphdrvalptr, strlen(httphdrvalptr));
   1623                  httpdCtx->httphdrtypeptr[i] = httphdrtype;
   1624                  httpdCtx->headercount++;
   1625              }
   1626              return S2W_SUCCESS;
   1627          }
   1628          
   1629          UINT8 AppS2w_HttpAddStaticHdr(S2W_HTTPD_CONTEXT_T *httpdCtx, UINT32 totalhdrcount)
   1630          {
   1631              UINT8        headerValue[32];
   1632              UINT8       *tmpPtr;
   1633              if(NULL == httpdCtx)
   1634              {
   1635                  return S2W_FAILURE;
   1636              }
   1637          
   1638              /* Get the HTTP format string of the current time */
   1639              memset(headerValue, 0, 32);
   1640              tmpPtr = tfHttpGetCurrentTime(headerValue, 32);
   1641              if (tmpPtr == headerValue)
   1642              /* no converstion, because the buffer was too small */
   1643              {
   1644                  return S2W_FAILURE;
   1645              }
   1646          
   1647              AppS2w_HttpAddHdr(httpdCtx, TM_HTTP_HEADER_DATE, headerValue);
   1648              AppS2w_HttpAddHdr(httpdCtx, TM_HTTP_HEADER_CONTENT_TYPE, (unsigned char *)tlHttpdContentTypes[TM_HTTPD_CONTENT_TEXT_XML]);
   1649              AppS2w_HttpAddHdr(httpdCtx, TM_HTTP_HEADER_TRANSFER_ENCODING, (unsigned char *)tlHttpdChunked);
   1650          }
   1651          
   1652          UINT8
   1653          AppS2w_HttpDataProcess(UINT8 cid,UINT8 *dataBuffer,UINT32 inBuflen, UINT32 elementType)
   1654          {
   1655              UINT32 bufSpaceLeft;
   1656              UINT8 status = S2W_SUCCESS;
   1657              UINT32  statuscode;
   1658              UINT8   *databuf;
   1659              UINT32   count = 0;
   1660              UINT32   i, hdrnamelen, hdrvallen, totalhdrcount;
   1661              UINT8   statuscodestr[4];
   1662              //s2wCidList[cid].httpdCtx.
   1663          
   1664              if (httpConfInfo.reqMethod == GSN_HTTP_METHOD_GETRESP || httpConfInfo.reqMethod == GSN_HTTP_METHOD_POSTRESP)
   1665              {
   1666                  if(S2W_HTTP_RESPONSE_LINE == elementType)
   1667                  {
   1668                      /* Get status code from incoming buffer */
   1669                      strncpy(statuscodestr, dataBuffer, 3);
   1670                      AppS2wParse_Int(statuscodestr, &statuscode);
   1671                      if(0 != statuscode)
   1672                      {
   1673                          s2wCidList[cid].httpdCtx.statuscode = statuscode;
   1674                      }
   1675                      /* Copy response phrase from incoming buffer */
   1676                      databuf = dataBuffer;
   1677                      while((*databuf != ':') && (count < inBuflen))
   1678                      {
   1679                          databuf++;
   1680                          count++;
   1681                      }
   1682                      if(count < inBuflen)
   1683                      {
   1684                          s2wCidList[cid].httpdCtx.respphrase = gsn_malloc(inBuflen - count + 1);
   1685                          if(NULL != s2wCidList[cid].httpdCtx.respphrase)
   1686                          {
   1687                              strncpy(s2wCidList[cid].httpdCtx.respphrase, (databuf + 1), (inBuflen - count - 1));
   1688                              *(s2wCidList[cid].httpdCtx.respphrase + (inBuflen - count - 1)) = '\0';
   1689                          }
   1690                      }
   1691                  }
   1692                  if(S2W_HTTP_HEADER == elementType)
   1693                  {
   1694                      if(0 != s2wCidList[cid].httpdCtx.appheadercount)
   1695                      {
   1696                         /* calculate the length of the header name and header value */
   1697                         databuf = dataBuffer;
   1698                         while((*databuf != '=') && (count < inBuflen))
   1699                         {
   1700                             databuf++;
   1701                             count++;
   1702                         }
   1703                         if(count < inBuflen)
   1704                         {
   1705                             hdrnamelen = count;
   1706                             hdrvallen = inBuflen - count - 1;
   1707                             totalhdrcount = s2wCidList[cid].httpdCtx.appheadercount + HTTP_STATIC_HDR_COUNT;
   1708                             /* If it is the first header coming in, allocate buffer to accommodate all the header ptrs */
   1709                             if((NULL == s2wCidList[cid].httpdCtx.httphdrvalptrptr) && (NULL == s2wCidList[cid].httpdCtx.httphdrnameptrptr) &&
   1710                                 (NULL == s2wCidList[cid].httpdCtx.httphdrtypeptr))
   1711                             {
   1712                                 s2wCidList[cid].httpdCtx.httphdrvalptrptr = gsn_malloc(totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrvalptrptr));
   1713                                 s2wCidList[cid].httpdCtx.httphdrnameptrptr = gsn_malloc(totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrnameptrptr));
   1714                                 s2wCidList[cid].httpdCtx.httphdrtypeptr = gsn_malloc(totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrtypeptr));
   1715                                 /* Add static headers here */
   1716                                 if((NULL != s2wCidList[cid].httpdCtx.httphdrvalptrptr) && (NULL != s2wCidList[cid].httpdCtx.httphdrnameptrptr) &&
   1717                                    (NULL != s2wCidList[cid].httpdCtx.httphdrtypeptr))
   1718                                 {
   1719                                     memset(s2wCidList[cid].httpdCtx.httphdrtypeptr, 0, (totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrtypeptr)));
   1720                                     memset(s2wCidList[cid].httpdCtx.httphdrnameptrptr, 0, (totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrnameptrptr)));
   1721                                     memset(s2wCidList[cid].httpdCtx.httphdrvalptrptr, 0, (totalhdrcount * sizeof(s2wCidList[cid].httpdCtx.httphdrvalptrptr)));
   1722                                     AppS2w_HttpAddStaticHdr(&s2wCidList[cid].httpdCtx, totalhdrcount);
   1723                                 }
   1724                             }
   1725                             /* start filling the headers */
   1726                             if((NULL != s2wCidList[cid].httpdCtx.httphdrvalptrptr) && (NULL != s2wCidList[cid].httpdCtx.httphdrnameptrptr) &&
   1727                                (NULL != s2wCidList[cid].httpdCtx.httphdrtypeptr))
   1728                             {
   1729                                 /* search for an empty slot */
   1730                                 for(i = 0; i < totalhdrcount; i++)
   1731                                 {
   1732                                     if(NULL == s2wCidList[cid].httpdCtx.httphdrvalptrptr[i])
   1733                                     {
   1734                                         s2wCidList[cid].httpdCtx.httphdrvalptrptr[i] = gsn_malloc(hdrvallen + 1);
   1735                                         s2wCidList[cid].httpdCtx.httphdrnameptrptr[i] = gsn_malloc(hdrnamelen + 1);
   1736                                         s2wCidList[cid].httpdCtx.httphdrtypeptr[i] = TM_HTTP_HEADER_CUSTOM;
   1737                                         break;
   1738                                     }
   1739                                 }
   1740          
   1741                                 if(i < totalhdrcount)
   1742                                 {
   1743                                     memcpy(s2wCidList[cid].httpdCtx.httphdrnameptrptr[i], dataBuffer, hdrnamelen);
   1744                                     *(s2wCidList[cid].httpdCtx.httphdrnameptrptr[i] + hdrnamelen) = '\0';
   1745                                     memcpy(s2wCidList[cid].httpdCtx.httphdrvalptrptr[i], databuf+1, hdrvallen);
   1746                                     *(s2wCidList[cid].httpdCtx.httphdrvalptrptr[i] + hdrvallen) = '\0';
   1747                                     s2wCidList[cid].httpdCtx.headercount++;
   1748                                 }
   1749                             }
   1750          
   1751                         }
   1752                      }
   1753                  }
   1754              }
   1755              return status;
   1756          }
   1757          #endif
   1758          
   1759          #endif
   1760          
   1761          #endif
   1762          #endif
   1763          
   1764          #ifdef S2W_RF_TEST
   1765          //PRIVATE UINT8 AppS2sw_RfTestTx99(UINT8 *ptr,GSN_WIF_API_WLAN_RF_TEST_TX99_START_PARAM_T *param);
   1766          
   1767          //PRIVATE UINT8 AppS2sw_RfTestTx100(UINT8 *ptr,GSN_WIF_API_WLAN_RF_TEST_TX100_START_PARAM_T *param);
   1768          

   \                                 In section .text, align 2, keep-with-next
   1769          PUBLIC UINT8 
   1770          AppS2wCmd_RfTestStop (UINT8 *ptr)
   1771          {
   \                     AppS2wCmd_RfTestStop:
   \   00000000   0xB580             PUSH     {R7,LR}
   1772          	UINT8 status;
   1773          	GSN_WDD_CTX_T *pWddRfTest;
   1774          	pWddRfTest = &appCtx.if0.wddCtx;
   1775          	status = GsnWdd_RfTestModeStop(pWddRfTest);
   1776          	return status;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable162_6
   \   00000006   0x.... 0x....      BL       GsnWdd_RfTestModeStop
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0xBD02             POP      {R1,PC}          ;; return
   1777          }
   1778          
   1779          

   \                                 In section .text, align 2, keep-with-next
   1780          PUBLIC UINT8
   1781          AppS2wCmd_RfTestStart (UINT8 *ptr)
   1782          {
   \                     AppS2wCmd_RfTestStart:
   \   00000000   0xB510             PUSH     {R4,LR}
   1783          	UINT8 status;
   1784          	GSN_WDD_CTX_T *pWddRfTest;
   1785          	pWddRfTest = &appCtx.if0.wddCtx;
   1786          	GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable162_7
   \   00000006   0x.... 0x....      BL       ?Subroutine34
   1787          	status = GsnWdd_RfTestModeStart(pWddRfTest);
   1788          	return status;
   \                     ??CrossCallReturnLabel_277:
   \   0000000A   0xF504 0x606E      ADD      R0,R4,#+3808
   \   0000000E   0x.... 0x....      BL       GsnWdd_RfTestModeStart
   \   00000012   0xB2C0             UXTB     R0,R0
   \   00000014   0xBD10             POP      {R4,PC}          ;; return
   1789          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   0xF504 0x60A9      ADD      R0,R4,#+1352
   \   00000004   0x.... 0x....      B.W      GsnSysCtl_AppTempSend
   1790          

   \                                 In section .text, align 2, keep-with-next
   1791          PUBLIC UINT8
   1792          AppS2wCmd_RfTestTxStart(UINT8 *ptr)
   1793          {
   \                     AppS2wCmd_RfTestTxStart:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   1794          	GSN_WDD_RFTEST_TX_START_PARAM_T param;
   1795          	GSN_STATUS retVal;
   1796          	UINT8 status = S2W_SUCCESS;
   1797          	UINT8 index=0;
   \   00000004   0x2600             MOVS     R6,#+0
   1798          	UINT32 temp;
   1799          	UINT8 *p;
   1800          	UINT32 IntArray[TX_BUF_ELEMENTS] = {0};
   \   00000006   0xA805             ADD      R0,SP,#+20
   \   00000008   0x214C             MOVS     R1,#+76
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
   1801          	UINT8 MacAddr[S2W_MAC_ADDR_SIZE];
   1802          	UINT8 Bssid[S2W_MAC_ADDR_SIZE];
   1803                  //GSN_WIF_WLAN_TX_STATS_T txStats;
   1804          	GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   1805          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000000E   0xA821             ADD      R0,SP,#+132
   \   00000010   0x.... 0x....      BL       AppS2wParse_NextParamGet
   1806          	if(!p)
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xAD05             ADD      R5,SP,#+20
   \   00000018   0xD10D             BNE.N    ??AppS2wCmd_RfTestTxStart_0
   1807          	{
   1808          		return S2W_EINVAL;
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xE053             B.N      ??AppS2wCmd_RfTestTxStart_1
   1809          	}
   1810          	do
   1811          	{
   1812          		if(!((index == TX_MAC_INDEX) || (index == TX_BSSID_INDEX)))
   \                     ??AppS2wCmd_RfTestTxStart_2:
   \   0000001E   0x2E06             CMP      R6,#+6
   \   00000020   0xBF08             IT       EQ 
   \   00000022   0xA903             ADDEQ    R1,SP,#+12
   1813          		{
   1814          			status = AppS2wParse_Int(p, &temp);
   1815          			if (status != S2W_SUCCESS)
   1816          			{
   1817          			return status;
   1818          			}
   1819          			IntArray[index] = temp;
   1820          		}
   1821          		else if (index == TX_MAC_INDEX)
   1822          		{
   1823          			status = AppS2wParse_Mac(p, MacAddr);
   \   00000024   0xD002             BEQ.N    ??AppS2wCmd_RfTestTxStart_3
   \   00000026   0x2E07             CMP      R6,#+7
   \   00000028   0xD105             BNE.N    ??AppS2wCmd_RfTestTxStart_0
   1824          			if (status != S2W_SUCCESS)
   1825          			{
   1826          			return status;
   1827          			}
   1828          		}
   1829          		else if (index == TX_BSSID_INDEX)
   1830          		{
   1831          			status = AppS2wParse_Mac(p, Bssid);
   \   0000002A   0xA901             ADD      R1,SP,#+4
   \                     ??AppS2wCmd_RfTestTxStart_3:
   \   0000002C   0x.... 0x....      BL       AppS2wParse_Mac
   \   00000030   0x0004             MOVS     R4,R0
   1832          			if (status != S2W_SUCCESS)
   \   00000032   0xD007             BEQ.N    ??AppS2wCmd_RfTestTxStart_4
   \   00000034   0xE046             B.N      ??AppS2wCmd_RfTestTxStart_5
   1833          			{
   1834          				return status;
   1835          			}
   1836          		}
   \                     ??AppS2wCmd_RfTestTxStart_0:
   \   00000036   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_217:
   \   0000003A   0x0004             MOVS     R4,R0
   \   0000003C   0xD142             BNE.N    ??AppS2wCmd_RfTestTxStart_5
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0xF845 0x0026      STR      R0,[R5, R6, LSL #+2]
   1837          		index++;
   \                     ??AppS2wCmd_RfTestTxStart_4:
   \   00000044   0x1C76             ADDS     R6,R6,#+1
   \   00000046   0xB2F6             UXTB     R6,R6
   1838          	}while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL);
   \   00000048   0xA821             ADD      R0,SP,#+132
   \   0000004A   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD1E5             BNE.N    ??AppS2wCmd_RfTestTxStart_2
   1839          
   1840          	param.generalOptions.userPrefChannel = IntArray[0];
   \   00000052   0x9805             LDR      R0,[SP, #+20]
   \   00000054   0xF8AD 0x0060      STRH     R0,[SP, #+96]
   1841          	param.generalOptions.bandWidth = IntArray[1];
   1842          	param.numFrames = IntArray[2];
   1843          	param.frameLen  = IntArray[3];
   \   00000058   0xAE19             ADD      R6,SP,#+100
   \   0000005A   0x6868             LDR      R0,[R5, #+4]
   \   0000005C   0xF88D 0x0062      STRB     R0,[SP, #+98]
   1844          	param.txRate    = IntArray[4];
   1845          	param.txPower   = IntArray[5];
   1846          	memcpy((INT8 *)param.destAddr, (const INT8 *)MacAddr, 6);
   \   00000060   0x2206             MOVS     R2,#+6
   \   00000062   0x9807             LDR      R0,[SP, #+28]
   \   00000064   0x9019             STR      R0,[SP, #+100]
   \   00000066   0xA903             ADD      R1,SP,#+12
   \   00000068   0x68E8             LDR      R0,[R5, #+12]
   \   0000006A   0x80B0             STRH     R0,[R6, #+4]
   \   0000006C   0x9809             LDR      R0,[SP, #+36]
   \   0000006E   0x71B0             STRB     R0,[R6, #+6]
   \   00000070   0x980A             LDR      R0,[SP, #+40]
   \   00000072   0x71F0             STRB     R0,[R6, #+7]
   \   00000074   0xA81B             ADD      R0,SP,#+108
   \   00000076   0x.... 0x....      BL       memcpy
   1847          	memcpy((INT8 *)param.bssid, (const INT8 *)Bssid, 6);
   \   0000007A   0x2206             MOVS     R2,#+6
   \   0000007C   0xA901             ADD      R1,SP,#+4
   \   0000007E   0xF10D 0x0072      ADD      R0,SP,#+114
   \   00000082   0x.... 0x....      BL       memcpy
   1848          	param.htEnable = IntArray[8];
   \   00000086   0x980D             LDR      R0,[SP, #+52]
   1849          	param.guardInterval = IntArray[9];    
   1850          	param.greenField = IntArray[10];
   1851          	param.preambleType = IntArray[11];
   1852          
   1853          	param.qosEnable = IntArray[12];
   1854          	param.ackPolicy = IntArray[13];
   1855          	param.scrambler = IntArray[14];
   1856          	param.aifsnVal  = IntArray[15];
   1857          	param.antenna   = IntArray[16];
   1858          	param.ccaBypass = IntArray[17];
   1859          #if 0
   1860          	S2w_Printf("\r\nuserPrefChannel:%d\r\n",param.generalOptions.userPrefChannel);
   1861          	S2w_Printf("\r\nbandWidth: %d\r\n",param.generalOptions.bandWidth);
   1862          	S2w_Printf("\r\nnumFrames: %d\r\n",param.numFrames);
   1863          	S2w_Printf("\r\nframeLen: %d\r\n",param.frameLen);
   1864          	S2w_Printf("\r\ntxRate: %d\r\n",param.txRate);
   1865          	S2w_Printf("\r\ntxPower: %d\r\n",param.txPower);
   1866          	S2w_Printf("\r\nhtEnable: %d\r\n",param.htEnable);
   1867          	S2w_Printf("\r\ngreenField: %d\r\n",param.greenField);
   1868          	S2w_Printf("\r\nguardInterval: %d\r\n",param.guardInterval);
   1869          	S2w_Printf("\r\npreambleType: %d\r\n",param.preambleType);
   1870          	S2w_Printf("\r\nqosEnable: %d\r\n",param.qosEnable);
   1871          	S2w_Printf("\r\nackPolicy: %d\r\n",param.ackPolicy);
   1872          	S2w_Printf("\r\nscrambler: %d\r\n",param.scrambler);
   1873          	S2w_Printf("\r\naifsnVal: %d\r\n",param.aifsnVal);
   1874          	S2w_Printf("\r\nantenna: %d\r\n",param.antenna);    
   1875          #endif        
   1876          	GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   00000088   0x.... 0x....      LDR.W    R5,??DataTable162_7
   \   0000008C   0x7530             STRB     R0,[R6, #+20]
   \   0000008E   0x980E             LDR      R0,[SP, #+56]
   \   00000090   0x7570             STRB     R0,[R6, #+21]
   \   00000092   0x980F             LDR      R0,[SP, #+60]
   \   00000094   0x75B0             STRB     R0,[R6, #+22]
   \   00000096   0x9810             LDR      R0,[SP, #+64]
   \   00000098   0x75F0             STRB     R0,[R6, #+23]
   \   0000009A   0x9811             LDR      R0,[SP, #+68]
   \   0000009C   0x7630             STRB     R0,[R6, #+24]
   \   0000009E   0x9812             LDR      R0,[SP, #+72]
   \   000000A0   0x7670             STRB     R0,[R6, #+25]
   \   000000A2   0x9813             LDR      R0,[SP, #+76]
   \   000000A4   0x76B0             STRB     R0,[R6, #+26]
   \   000000A6   0x9814             LDR      R0,[SP, #+80]
   \   000000A8   0x76F0             STRB     R0,[R6, #+27]
   \   000000AA   0x9815             LDR      R0,[SP, #+84]
   \   000000AC   0x7730             STRB     R0,[R6, #+28]
   \   000000AE   0x9816             LDR      R0,[SP, #+88]
   \   000000B0   0x7770             STRB     R0,[R6, #+29]
   \   000000B2   0x.... 0x....      BL       ?Subroutine35
   1877          	retVal = GsnWdd_RfTestTxStart(pWdd, &param);
   1878          	if(GSN_SUCCESS != retVal)
   \                     ??CrossCallReturnLabel_281:
   \   000000B6   0xA918             ADD      R1,SP,#+96
   \   000000B8   0xF505 0x606E      ADD      R0,R5,#+3808
   \   000000BC   0x.... 0x....      BL       GsnWdd_RfTestTxStart
   \   000000C0   0xB100             CBZ.N    R0,??AppS2wCmd_RfTestTxStart_5
   1879          	{
   1880          		status = S2W_FAILURE;
   \   000000C2   0x2401             MOVS     R4,#+1
   1881          	}
   1882          
   1883          	return status;
   \                     ??AppS2wCmd_RfTestTxStart_5:
   \   000000C4   0x4620             MOV      R0,R4
   \                     ??AppS2wCmd_RfTestTxStart_1:
   \   000000C6   0xB022             ADD      SP,SP,#+136
   \   000000C8   0xBD70             POP      {R4-R6,PC}       ;; return
   1884          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0xF505 0x60A9      ADD      R0,R5,#+1352
   \   00000004   0x.... 0x....      B.W      GsnSysCtl_AppTempSend
   1885          

   \                                 In section .text, align 2, keep-with-next
   1886          PUBLIC UINT8
   1887          AppS2wCmd_RfTestTx99Start(UINT8 *ptr)
   1888          {
   \                     AppS2wCmd_RfTestTx99Start:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB0A4             SUB      SP,SP,#+144
   1889          	UINT8 status;
   1890          	UINT8 index=0;
   \   00000004   0x2500             MOVS     R5,#+0
   1891          	UINT32 temp;
   1892          	UINT8 *p;
   1893          	UINT32 IntArray[TX99_BUF_ELEMENTS];
   1894          	UINT8 MacAddrBssid[S2W_MAC_ADDR_SIZE];
   1895              
   1896              UINT8 MacAddrDest[S2W_MAC_ADDR_SIZE];    
   1897          	GSN_WIF_API_WLAN_RF_TEST_TX99_START_PARAM_T param;
   1898          
   1899              
   1900              GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   1901              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000006   0xA824             ADD      R0,SP,#+144
   \   00000008   0x.... 0x....      BL       AppS2wParse_NextParamGet
   1902              if(!p)
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xAC0F             ADD      R4,SP,#+60
   \   00000010   0xD105             BNE.N    ??AppS2wCmd_RfTestTx99Start_0
   1903          	{
   1904          		return S2W_EINVAL;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xE050             B.N      ??AppS2wCmd_RfTestTx99Start_1
   1905          	}
   1906              do
   1907              {
   1908                  if((index != TX99_MAC_BSSID_INDEX) && (index != TX99_MAC_DESTADDR_INDEX) )
   \                     ??AppS2wCmd_RfTestTx99Start_2:
   \   00000016   0x2D07             CMP      R5,#+7
   \   00000018   0xD050             BEQ.N    ??AppS2wCmd_RfTestTx99Start_3
   \   0000001A   0x2D06             CMP      R5,#+6
   \   0000001C   0xD054             BEQ.N    ??AppS2wCmd_RfTestTx99Start_4
   1909                  {
   1910                      status = AppS2wParse_Int(p, &temp);
   \                     ??AppS2wCmd_RfTestTx99Start_0:
   \   0000001E   0x.... 0x....      BL       ?Subroutine17
   1911                      if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_216:
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD148             BNE.N    ??AppS2wCmd_RfTestTx99Start_1
   1912                      {
   1913                          return status;
   1914                      }
   1915                      IntArray[index] = temp;
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0xF844 0x0025      STR      R0,[R4, R5, LSL #+2]
   1916                  }
   1917                  else if (index == TX99_MAC_BSSID_INDEX)
   1918                  {
   1919                      status = AppS2wParse_Mac(p, MacAddrBssid);
   1920                      if (status != S2W_SUCCESS)
   1921                      {
   1922                          return status;
   1923                      }
   1924                  }
   1925                  else if (index == TX99_MAC_DESTADDR_INDEX)
   1926                  {
   1927                      status = AppS2wParse_Mac(p, MacAddrDest);
   1928                      if (status != S2W_SUCCESS)
   1929                      {
   1930                          return status;
   1931                      }
   1932                  }
   1933                  index++;
   \                     ??AppS2wCmd_RfTestTx99Start_5:
   \   0000002C   0x1C6D             ADDS     R5,R5,#+1
   \   0000002E   0xB2ED             UXTB     R5,R5
   1934              }while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL);
   \   00000030   0xA824             ADD      R0,SP,#+144
   \   00000032   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000036   0x2800             CMP      R0,#+0
   \   00000038   0xD1ED             BNE.N    ??AppS2wCmd_RfTestTx99Start_2
   1935          
   1936              param.generalOptions.userPrefChannel = IntArray[0];
   \   0000003A   0x980F             LDR      R0,[SP, #+60]
   \   0000003C   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   1937              param.generalOptions.bandWidth = IntArray[1];
   1938              param.numFrames = IntArray[2];
   1939              param.frameLen = IntArray[3];
   \   00000040   0xAD06             ADD      R5,SP,#+24
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0xF88D 0x0016      STRB     R0,[SP, #+22]
   1940              param.txRate = IntArray[4];
   1941              param.txPower= IntArray[5];
   1942              memcpy((INT8 *)param.destAddr, (const INT8*)MacAddrDest, 6);
   \   00000048   0x2206             MOVS     R2,#+6
   \   0000004A   0x9811             LDR      R0,[SP, #+68]
   \   0000004C   0x9006             STR      R0,[SP, #+24]
   \   0000004E   0xA901             ADD      R1,SP,#+4
   \   00000050   0x68E0             LDR      R0,[R4, #+12]
   \   00000052   0x80A8             STRH     R0,[R5, #+4]
   \   00000054   0x9813             LDR      R0,[SP, #+76]
   \   00000056   0x71A8             STRB     R0,[R5, #+6]
   \   00000058   0x9814             LDR      R0,[SP, #+80]
   \   0000005A   0x71E8             STRB     R0,[R5, #+7]
   \   0000005C   0xA808             ADD      R0,SP,#+32
   \   0000005E   0x.... 0x....      BL       memcpy
   1943              memcpy((INT8 *)param.bssid, (const INT8*)MacAddrBssid, 6);    
   \   00000062   0x2206             MOVS     R2,#+6
   \   00000064   0xA903             ADD      R1,SP,#+12
   \   00000066   0xF10D 0x0026      ADD      R0,SP,#+38
   \   0000006A   0x.... 0x....      BL       memcpy
   1944              param.guardInterval = IntArray[8];    
   \   0000006E   0x9817             LDR      R0,[SP, #+92]
   \   00000070   0x7528             STRB     R0,[R5, #+20]
   1945              param.greenField = IntArray[9];
   \   00000072   0x6A60             LDR      R0,[R4, #+36]
   1946              param.antenna= IntArray[10];    
   1947              param.cca = IntArray[11];
   1948              param.agc = IntArray[12];
   1949              param.contPreambleMode = IntArray[13];
   1950              param.spreader = IntArray[14];
   1951              param.scrambler = IntArray[15];
   1952              param.preamble = IntArray[16];
   1953              param.preambleType = IntArray[17];
   1954              param.testPatternType = IntArray[18];
   1955              param.phyTestTxRate = IntArray[19];
   1956              param.modeSelect = IntArray[20];
   1957          #if 0
   1958              S2w_Printf("\r\nuserPrefChannel: %d\r\n",param.generalOptions.userPrefChannel);
   1959              S2w_Printf("\r\nbandWidth: %d\r\n",param.generalOptions.bandWidth);
   1960              S2w_Printf("\r\nnumFrames: %d\r\n",param.numFrames);
   1961              S2w_Printf("\r\nframeLen: %d\r\n",param.frameLen);
   1962              S2w_Printf("\r\ntxRate: %d\r\n",param.txRate);
   1963              S2w_Printf("\r\ntxPower: %d\r\n",param.txPower);
   1964              S2w_Printf("\r\nguardInterval: %d\r\n",param.guardInterval);
   1965              S2w_Printf("\r\ngreenField: %d\r\n",param.greenField);
   1966              S2w_Printf("\r\nantenna: %d\r\n",param.antenna);
   1967              S2w_Printf("\r\ncca: %d\r\n",param.cca);
   1968              S2w_Printf("\r\nagc: %d\r\n",param.agc);
   1969              S2w_Printf("\r\ncontPreambleMode: %d\r\n",param.contPreambleMode);
   1970              S2w_Printf("\r\nspreader: %d\r\n",param.spreader);
   1971              S2w_Printf("\r\nscrambler: %d\r\n",param.scrambler);
   1972              S2w_Printf("\r\npreamble: %d\r\n",param.preamble);
   1973              S2w_Printf("\r\npreambleType: %d\r\n",param.preambleType);
   1974              S2w_Printf("\r\ntestPatternType: %d\r\n",param.testPatternType);
   1975              S2w_Printf("\r\nphyTestTxRate: %d\r\n",param.phyTestTxRate);
   1976              S2w_Printf("\r\nmodeSelect: %d\r\n",param.modeSelect);
   1977          #endif
   1978              GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   00000074   0x.... 0x....      LDR.W    R4,??DataTable164
   \   00000078   0x7568             STRB     R0,[R5, #+21]
   \   0000007A   0x9819             LDR      R0,[SP, #+100]
   \   0000007C   0x75A8             STRB     R0,[R5, #+22]
   \   0000007E   0x981A             LDR      R0,[SP, #+104]
   \   00000080   0x75E8             STRB     R0,[R5, #+23]
   \   00000082   0x981B             LDR      R0,[SP, #+108]
   \   00000084   0x7628             STRB     R0,[R5, #+24]
   \   00000086   0x981C             LDR      R0,[SP, #+112]
   \   00000088   0x7668             STRB     R0,[R5, #+25]
   \   0000008A   0x981D             LDR      R0,[SP, #+116]
   \   0000008C   0x76A8             STRB     R0,[R5, #+26]
   \   0000008E   0x981E             LDR      R0,[SP, #+120]
   \   00000090   0x76E8             STRB     R0,[R5, #+27]
   \   00000092   0x981F             LDR      R0,[SP, #+124]
   \   00000094   0x7728             STRB     R0,[R5, #+28]
   \   00000096   0x9820             LDR      R0,[SP, #+128]
   \   00000098   0x7768             STRB     R0,[R5, #+29]
   \   0000009A   0x9821             LDR      R0,[SP, #+132]
   \   0000009C   0x77A8             STRB     R0,[R5, #+30]
   \   0000009E   0x9822             LDR      R0,[SP, #+136]
   \   000000A0   0x77E8             STRB     R0,[R5, #+31]
   \   000000A2   0x9823             LDR      R0,[SP, #+140]
   \   000000A4   0xF88D 0x0038      STRB     R0,[SP, #+56]
   \   000000A8   0x.... 0x....      BL       ?Subroutine34
   1979                status = GsnWdd_RfTestTx99Start(pWdd, &param);
   1980          
   1981              return status;
   \                     ??CrossCallReturnLabel_276:
   \   000000AC   0xA905             ADD      R1,SP,#+20
   \   000000AE   0xF504 0x606E      ADD      R0,R4,#+3808
   \   000000B2   0x.... 0x....      BL       GsnWdd_RfTestTx99Start
   \   000000B6   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_RfTestTx99Start_1:
   \   000000B8   0xB025             ADD      SP,SP,#+148
   \   000000BA   0xBD30             POP      {R4,R5,PC}       ;; return
   \                     ??AppS2wCmd_RfTestTx99Start_3:
   \   000000BC   0xA903             ADD      R1,SP,#+12
   \                     ??AppS2wCmd_RfTestTx99Start_6:
   \   000000BE   0x.... 0x....      BL       AppS2wParse_Mac
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xD0B2             BEQ.N    ??AppS2wCmd_RfTestTx99Start_5
   \   000000C6   0xE7F7             B.N      ??AppS2wCmd_RfTestTx99Start_1
   \                     ??AppS2wCmd_RfTestTx99Start_4:
   \   000000C8   0xA901             ADD      R1,SP,#+4
   \   000000CA   0xE7F8             B.N      ??AppS2wCmd_RfTestTx99Start_6
   1982          
   1983          }
   1984          

   \                                 In section .text, align 2, keep-with-next
   1985          PUBLIC UINT8
   1986          AppS2wCmd_RfTestTx100Start(UINT8 *ptr)
   1987          {
   \                     AppS2wCmd_RfTestTx100Start:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   1988              UINT8 status;
   1989              UINT8 index=0;
   \   00000004   0x2600             MOVS     R6,#+0
   1990              UINT32 temp;
   1991              UINT8 *p;
   1992              UINT32 IntArray[TX100_BUF_ELEMENTS];
   1993          
   1994          	GSN_WIF_API_WLAN_RF_TEST_TX100_START_PARAM_T param;
   1995          
   1996              GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   \   00000006   0xAD05             ADD      R5,SP,#+20
   \   00000008   0xE004             B.N      ??AppS2wCmd_RfTestTx100Start_0
   1997          
   1998              while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   1999               {
   2000                   status = AppS2wParse_Int(p, &temp);
   2001                   if (status != S2W_SUCCESS)
   2002                   {
   2003                       return status;
   2004                   }
   2005                   IntArray[index] = temp;
   \                     ??AppS2wCmd_RfTestTx100Start_1:
   \   0000000A   0x9804             LDR      R0,[SP, #+16]
   \   0000000C   0xB2F6             UXTB     R6,R6
   \   0000000E   0xF845 0x0026      STR      R0,[R5, R6, LSL #+2]
   2006                   index++;
   \   00000012   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wCmd_RfTestTx100Start_0:
   \   00000014   0xA813             ADD      R0,SP,#+76
   \   00000016   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000001A   0xB128             CBZ.N    R0,??AppS2wCmd_RfTestTx100Start_2
   \   0000001C   0xA904             ADD      R1,SP,#+16
   \   0000001E   0x.... 0x....      BL       AppS2wParse_Int
   \   00000022   0x0004             MOVS     R4,R0
   \   00000024   0xD0F1             BEQ.N    ??AppS2wCmd_RfTestTx100Start_1
   \   00000026   0xE033             B.N      ??AppS2wCmd_RfTestTx100Start_3
   2007               }
   2008          
   2009              param.generalOptions.userPrefChannel = IntArray[0];
   \                     ??AppS2wCmd_RfTestTx100Start_2:
   \   00000028   0x9805             LDR      R0,[SP, #+20]
   \   0000002A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   2010              param.generalOptions.bandWidth = IntArray[1];
   \   0000002E   0x6868             LDR      R0,[R5, #+4]
   \   00000030   0xF88D 0x0002      STRB     R0,[SP, #+2]
   2011              param.txPower  = IntArray[2];
   \   00000034   0x68A8             LDR      R0,[R5, #+8]
   \   00000036   0xF88D 0x0004      STRB     R0,[SP, #+4]
   2012              param.antenna  = IntArray[3];    
   \   0000003A   0x68E8             LDR      R0,[R5, #+12]
   2013              param.cca = IntArray[4];
   2014              param.agc = IntArray[5];
   2015              param.contPreambleMode = IntArray[6];
   2016              param.spreader = IntArray[7];
   2017              param.scrambler = IntArray[8];
   2018              param.preamble = IntArray[9];
   2019              param.preambleType = IntArray[10];
   2020              param.testPatternType = IntArray[11];
   2021              param.phyTestTxRate = IntArray[12];
   2022              param.modeSelect = IntArray[13];
   2023          #if 0
   2024              S2w_Printf("\r\nuserPrefChannel: %d\r\n",param.generalOptions.userPrefChannel);
   2025              S2w_Printf("\r\nbandWidth: %d\r\n",param.generalOptions.bandWidth);
   2026              S2w_Printf("\r\ntxPower: %d\r\n",param.txPower);
   2027              S2w_Printf("\r\nantenna: %d\r\n",param.antenna);
   2028              S2w_Printf("\r\ncca: %d\r\n",param.cca);
   2029              S2w_Printf("\r\nagc: %d\r\n",param.agc);
   2030              S2w_Printf("\r\ncontPreambleMode: %d\r\n",param.contPreambleMode);
   2031              S2w_Printf("\r\nspreader: %d\r\n",param.spreader);
   2032              S2w_Printf("\r\nscrambler: %d\r\n",param.scrambler);
   2033              S2w_Printf("\r\npreamble: %d\r\n",param.preamble);
   2034              S2w_Printf("\r\npreambleType: %d\r\n",param.preambleType);
   2035              S2w_Printf("\r\ntestPatternType: %d\r\n",param.testPatternType);
   2036              S2w_Printf("\r\nphyTestTxRate: %d\r\n",param.phyTestTxRate);
   2037              S2w_Printf("\r\nmodeSelect: %d\r\n",param.modeSelect);
   2038          #endif
   2039              GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   0000003C   0x.... 0x....      LDR.W    R5,??DataTable164
   \   00000040   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000044   0x9809             LDR      R0,[SP, #+36]
   \   00000046   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   0000004A   0x980A             LDR      R0,[SP, #+40]
   \   0000004C   0xF88D 0x0007      STRB     R0,[SP, #+7]
   \   00000050   0x980B             LDR      R0,[SP, #+44]
   \   00000052   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000056   0x980C             LDR      R0,[SP, #+48]
   \   00000058   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   0000005C   0x980D             LDR      R0,[SP, #+52]
   \   0000005E   0xF88D 0x000A      STRB     R0,[SP, #+10]
   \   00000062   0x980E             LDR      R0,[SP, #+56]
   \   00000064   0xF88D 0x000B      STRB     R0,[SP, #+11]
   \   00000068   0x980F             LDR      R0,[SP, #+60]
   \   0000006A   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   0000006E   0x9810             LDR      R0,[SP, #+64]
   \   00000070   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   00000074   0x9811             LDR      R0,[SP, #+68]
   \   00000076   0xF88D 0x000E      STRB     R0,[SP, #+14]
   \   0000007A   0x9812             LDR      R0,[SP, #+72]
   \   0000007C   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   00000080   0x.... 0x....      BL       ?Subroutine35
   2040                  GsnWdd_RfTestTx100Start(pWdd, &param);
   \                     ??CrossCallReturnLabel_280:
   \   00000084   0xA900             ADD      R1,SP,#+0
   \   00000086   0xF505 0x606E      ADD      R0,R5,#+3808
   \   0000008A   0x.... 0x....      BL       GsnWdd_RfTestTx100Start
   2041          
   2042              return status;
   \   0000008E   0xB2E0             UXTB     R0,R4
   \                     ??AppS2wCmd_RfTestTx100Start_3:
   \   00000090   0xB014             ADD      SP,SP,#+80
   \   00000092   0xBD70             POP      {R4-R6,PC}       ;; return
   2043          
   2044          }
   2045          

   \                                 In section .text, align 2, keep-with-next
   2046          PUBLIC UINT8
   2047          AppS2wCmd_RfTestCarrierWaveStart(UINT8 *ptr)
   2048          {
   \                     AppS2wCmd_RfTestCarrierWaveStart:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   2049          	UINT8 status;
   2050          	UINT8 index=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2051          	UINT32 temp;
   2052          	UINT8 *p;
   2053          	UINT32 IntArray[CR_WAVE_BUF_ELEMENTS];
   2054          	GSN_WIF_API_WLAN_RF_TEST_CARRIER_WAVE_START_PARAM_T param;
   2055          
   2056          	GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   \   00000006   0xAE03             ADD      R6,SP,#+12
   \   00000008   0xE004             B.N      ??AppS2wCmd_RfTestCarrierWaveStart_0
   2057          
   2058          	while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   2059          	{
   2060          		status = AppS2wParse_Int(p, &temp);
   2061          		if (status != S2W_SUCCESS)
   2062          		{
   2063          			return status;
   2064          		}
   2065          		IntArray[index] = temp;
   \                     ??AppS2wCmd_RfTestCarrierWaveStart_1:
   \   0000000A   0x9802             LDR      R0,[SP, #+8]
   \   0000000C   0xB2ED             UXTB     R5,R5
   \   0000000E   0xF846 0x0025      STR      R0,[R6, R5, LSL #+2]
   2066          		index++;
   \   00000012   0x1C6D             ADDS     R5,R5,#+1
   \                     ??AppS2wCmd_RfTestCarrierWaveStart_0:
   \   00000014   0xA809             ADD      R0,SP,#+36
   \   00000016   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000001A   0xB128             CBZ.N    R0,??AppS2wCmd_RfTestCarrierWaveStart_2
   \   0000001C   0xA902             ADD      R1,SP,#+8
   \   0000001E   0x.... 0x....      BL       AppS2wParse_Int
   \   00000022   0x0004             MOVS     R4,R0
   \   00000024   0xD0F1             BEQ.N    ??AppS2wCmd_RfTestCarrierWaveStart_1
   \   00000026   0xE018             B.N      ??AppS2wCmd_RfTestCarrierWaveStart_3
   2067          	}
   2068          	param.generalOptions.userPrefChannel = IntArray[0];
   \                     ??AppS2wCmd_RfTestCarrierWaveStart_2:
   \   00000028   0x9803             LDR      R0,[SP, #+12]
   2069          	param.generalOptions.bandWidth = IntArray[1];
   2070              param.txPower= IntArray[2];
   2071              param.antenna= IntArray[3];
   2072          	param.customWavePeriod = IntArray[4];
   2073          #if 0
   2074          	S2w_Printf("\r\nuserPrefChannel: %d\r\n",param.generalOptions.userPrefChannel);
   2075          	S2w_Printf("\r\nbandWidth: %d\r\n",param.generalOptions.bandWidth);
   2076              S2w_Printf("\r\ntxPower: %d\r\n",param.txPower);
   2077              S2w_Printf("\r\nantenna: %d\r\n",param.antenna);
   2078          	S2w_Printf("\r\ncustomWavePeriod: %d\r\n",param.customWavePeriod);
   2079          #endif
   2080          	GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   0000002A   0x.... 0x....      LDR.W    R5,??DataTable164
   \   0000002E   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000032   0x6870             LDR      R0,[R6, #+4]
   \   00000034   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000038   0x9805             LDR      R0,[SP, #+20]
   \   0000003A   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000003E   0x9806             LDR      R0,[SP, #+24]
   \   00000040   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000044   0x9807             LDR      R0,[SP, #+28]
   \   00000046   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   0000004A   0x.... 0x....      BL       ?Subroutine35
   2081          	GsnWdd_RfTestCarrierWaveStart(pWdd, &param);
   \                     ??CrossCallReturnLabel_279:
   \   0000004E   0xA900             ADD      R1,SP,#+0
   \   00000050   0xF505 0x606E      ADD      R0,R5,#+3808
   \   00000054   0x.... 0x....      BL       GsnWdd_RfTestCarrierWaveStart
   2082          	return status;
   \   00000058   0xB2E0             UXTB     R0,R4
   \                     ??AppS2wCmd_RfTestCarrierWaveStart_3:
   \   0000005A   0xB00A             ADD      SP,SP,#+40
   \   0000005C   0xBD70             POP      {R4-R6,PC}       ;; return
   2083          }
   2084          

   \                                 In section .text, align 2, keep-with-next
   2085          PUBLIC UINT8 AppS2wCmd_RfTestTxStop (UINT8 *ptr)
   2086          {
   2087          	/* [TO DO] */
   2088              return S2W_SUCCESS;
   \                     AppS2wCmd_RfTestTxStop:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2089          }
   2090          

   \                                 In section .text, align 2, keep-with-next
   2091          PUBLIC UINT8
   2092          AppS2wCmd_RfTestRxStart(UINT8 *ptr)
   2093          {
   \                     AppS2wCmd_RfTestRxStart:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   2094          	UINT8 status;
   2095          	UINT8 index=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2096          	UINT32 temp;
   2097          	UINT8 *p;
   2098          	UINT32 IntArray[RX_BUF_ELEMENTS];
   2099          	UINT8 MacAddr[S2W_MAC_ADDR_SIZE];
   2100          	GSN_WIF_API_WLAN_RF_TEST_RX_START_PARAM_T param;
   2101          
   2102          	GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   2103          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000006   0xA80D             ADD      R0,SP,#+52
   \   00000008   0x.... 0x....      BL       AppS2wParse_NextParamGet
   2104          	if(!p)
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xAE07             ADD      R6,SP,#+28
   \   00000010   0xD104             BNE.N    ??AppS2wCmd_RfTestRxStart_0
   2105          	{
   2106          		return S2W_EINVAL;
   \   00000012   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_RfTestRxStart_1:
   \   00000014   0xB00E             ADD      SP,SP,#+56
   \   00000016   0xBD70             POP      {R4-R6,PC}       ;; return
   2107          	}
   2108          	do
   2109          	{
   2110          		if(!(index == RX_MAC_INDEX))
   \                     ??AppS2wCmd_RfTestRxStart_2:
   \   00000018   0x2D03             CMP      R5,#+3
   \   0000001A   0xD027             BEQ.N    ??AppS2wCmd_RfTestRxStart_3
   2111          		{
   2112          			status = AppS2wParse_Int(p, &temp);
   \                     ??AppS2wCmd_RfTestRxStart_0:
   \   0000001C   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_215:
   \   00000020   0x0004             MOVS     R4,R0
   2113          			if (status != S2W_SUCCESS)
   \   00000022   0xD128             BNE.N    ??AppS2wCmd_RfTestRxStart_4
   2114          			{
   2115          				return status;
   2116          			}
   2117          			IntArray[index] = temp;
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0xF846 0x0025      STR      R0,[R6, R5, LSL #+2]
   2118          		}
   2119          		else if (index == RX_MAC_INDEX)
   2120          		{
   2121          			status = AppS2wParse_Mac(p, MacAddr);
   2122          			if (status != S2W_SUCCESS)
   2123          			{
   2124          			return status;
   2125          			}
   2126          		}
   2127          		index++;
   \                     ??AppS2wCmd_RfTestRxStart_5:
   \   0000002A   0x1C6D             ADDS     R5,R5,#+1
   \   0000002C   0xB2ED             UXTB     R5,R5
   2128          	}while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL);
   \   0000002E   0xA80D             ADD      R0,SP,#+52
   \   00000030   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD1EF             BNE.N    ??AppS2wCmd_RfTestRxStart_2
   2129          	
   2130          	param.generalOptions.userPrefChannel = IntArray[0];
   \   00000038   0x9807             LDR      R0,[SP, #+28]
   \   0000003A   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   2131          	param.generalOptions.bandWidth = IntArray[1];
   2132          	param.rxFrameTypeFilter = IntArray[2];
   2133          	memcpy((INT8 *)param.rxAddrFilter, (const INT8 *)MacAddr, 6);
   \   0000003E   0x2206             MOVS     R2,#+6
   \   00000040   0x6870             LDR      R0,[R6, #+4]
   \   00000042   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   00000046   0xA905             ADD      R1,SP,#+20
   \   00000048   0x68B0             LDR      R0,[R6, #+8]
   \   0000004A   0x9002             STR      R0,[SP, #+8]
   \   0000004C   0xA803             ADD      R0,SP,#+12
   \   0000004E   0x.... 0x....      BL       memcpy
   2134              param.antenna   = IntArray[4];
   \   00000052   0x980B             LDR      R0,[SP, #+44]
   2135          #if 0
   2136          	S2w_Printf("\r\nuserPrefChannel: %d\r\n",param.generalOptions.userPrefChannel);
   2137          	S2w_Printf("\r\nbandWidth: %d\r\n",param.generalOptions.bandWidth);
   2138          	S2w_Printf("\r\nrxFrameTypeFilter: %d\r\n",param.rxFrameTypeFilter);
   2139              S2w_Printf("\r\nrxFrameTypeFilter: %d\r\n",param.antenna);
   2140          #endif
   2141          	GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   00000054   0x.... 0x....      LDR.W    R5,??DataTable164
   \   00000058   0xF88D 0x0012      STRB     R0,[SP, #+18]
   \   0000005C   0x.... 0x....      BL       ?Subroutine35
   2142          	GsnWdd_RfTestRxStart(pWdd, &param);
   \                     ??CrossCallReturnLabel_278:
   \   00000060   0xA901             ADD      R1,SP,#+4
   \   00000062   0xF505 0x606E      ADD      R0,R5,#+3808
   \   00000066   0x.... 0x....      BL       GsnWdd_RfTestRxStart
   \   0000006A   0xE004             B.N      ??AppS2wCmd_RfTestRxStart_4
   \                     ??AppS2wCmd_RfTestRxStart_3:
   \   0000006C   0xA905             ADD      R1,SP,#+20
   \   0000006E   0x.... 0x....      BL       AppS2wParse_Mac
   \   00000072   0x0004             MOVS     R4,R0
   \   00000074   0xD0D9             BEQ.N    ??AppS2wCmd_RfTestRxStart_5
   \                     ??AppS2wCmd_RfTestRxStart_4:
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0xE7CC             B.N      ??AppS2wCmd_RfTestRxStart_1
   2143          	return status;
   2144          }
   2145          
   2146          
   2147          

   \                                 In section .text, align 2, keep-with-next
   2148          PUBLIC UINT8 AppS2wCmd_RfTestRxStop (UINT8 *ptr)
   2149          {
   \                     AppS2wCmd_RfTestRxStop:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   2150          	UINT8 status;
   2151          	GSN_WDD_CTX_T *pWddRfTest;
   2152           	GSN_WLAN_RF_TEST_RX_STATS_T rxStats;
   2153                  
   2154          	pWddRfTest = &appCtx.if0.wddCtx;
   2155          	GsnSysCtl_AppTempSend(&appCtx.sysCtlCtx);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable162_7
   \   00000006   0xB0A7             SUB      SP,SP,#+156
   \   00000008   0x.... 0x....      BL       ?Subroutine34
   2156          	status = GsnWdd_RfTestRxStop(pWddRfTest, &rxStats);
   \                     ??CrossCallReturnLabel_275:
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0xF504 0x606E      ADD      R0,R4,#+3808
   \   00000012   0x.... 0x....      BL       GsnWdd_RfTestRxStop
   \   00000016   0x4604             MOV      R4,R0
   2157          	
   2158          	S2w_Printf("\r\nNo of packets received = %d\r\n", rxStats.rxPackets);
   \   00000018   0x9900             LDR      R1,[SP, #+0]
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNo of packets recei...">`
   \   0000001E   0x.... 0x....      BL       S2w_Printf
   2159          	S2w_Printf("No of bytes received = %d\r\n", rxStats.rxBytes);
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0x.... 0x....      ADR.W    R0,`?<Constant "No of bytes received ...">`
   \   00000028   0x.... 0x....      BL       S2w_Printf
   2160          				S2w_Printf("No of packets received with CRC Errors = %d\r\n", rxStats.crcErrors);
   \   0000002C   0x9902             LDR      R1,[SP, #+8]
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">`
   \   00000032   0x.... 0x....      BL       S2w_Printf
   2161          	S2w_Printf("No of packets received with Security Errors = %d\r\n", rxStats.secErrors);
   \   00000036   0x9903             LDR      R1,[SP, #+12]
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_1`
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   2162          	S2w_Printf("No of duplicate packets received = %d\r\n", rxStats.dupPackets);
   \   00000040   0x9904             LDR      R1,[SP, #+16]
   \   00000042   0x.... 0x....      ADR.W    R0,`?<Constant "No of duplicate packe...">`
   \   00000046   0x.... 0x....      BL       S2w_Printf
   2163          	S2w_Printf("No of header errors received = %d\r\n", rxStats.headerErrors);
   \   0000004A   0x9905             LDR      R1,[SP, #+20]
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant "No of header errors r...">`
   \   00000050   0x.... 0x....      BL       S2w_Printf
   2164          	S2w_Printf("Average RSSI of the received packets = %d\r\n", rxStats.avgRssi);
   \   00000054   0x9906             LDR      R1,[SP, #+24]
   \   00000056   0x.... 0x....      ADR.W    R0,`?<Constant "Average RSSI of the r...">`
   \   0000005A   0x.... 0x....      BL       S2w_Printf
   2165          
   2166          	S2w_Printf(" No of packets received at 1M and Long Preamble = %d\r\n", rxStats.rxRate1_long);
   \   0000005E   0x9907             LDR      R1,[SP, #+28]
   \   00000060   0x.... 0x....      ADR.W    R0,`?<Constant " No of packets receiv...">`
   \   00000064   0x.... 0x....      BL       S2w_Printf
   2167          	S2w_Printf(" No of packets received at 2M and Long Preamble = %d\r\n", rxStats.rxRate2_long);
   \   00000068   0x9908             LDR      R1,[SP, #+32]
   \   0000006A   0x.... 0x....      ADR.W    R0,`?<Constant " No of packets receiv...">_1`
   \   0000006E   0x.... 0x....      BL       S2w_Printf
   2168          	S2w_Printf("No of packets received at 5M and Long Preamble = %d\r\n", rxStats.rxRate5_long);
   \   00000072   0x9909             LDR      R1,[SP, #+36]
   \   00000074   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_2`
   \   00000078   0x.... 0x....      BL       S2w_Printf
   2169          	S2w_Printf("No of packets received at 11M and Long Preamble = %d\r\n",rxStats.rxRate11_long );
   \   0000007C   0x990A             LDR      R1,[SP, #+40]
   \   0000007E   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_3`
   \   00000082   0x.... 0x....      BL       S2w_Printf
   2170          	S2w_Printf("No of packets received at 2M and Short Preamble = %d\r\n", rxStats.rxRate2_short);
   \   00000086   0x990B             LDR      R1,[SP, #+44]
   \   00000088   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_4`
   \   0000008C   0x.... 0x....      BL       S2w_Printf
   2171          	S2w_Printf("No of packets received at 5M and Short Preamble = %d\r\n", rxStats.rxRate5_short);
   \   00000090   0x990C             LDR      R1,[SP, #+48]
   \   00000092   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_5`
   \   00000096   0x.... 0x....      BL       S2w_Printf
   2172          	S2w_Printf("No of packets received at 11M and Short Preamble = %d\r\n",rxStats.rxRate11_short );
   \   0000009A   0x990D             LDR      R1,[SP, #+52]
   \   0000009C   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_6`
   \   000000A0   0x.... 0x....      BL       S2w_Printf
   2173          
   2174          	S2w_Printf("No of packets received at 6M = %d\r\n", rxStats.rxRate6);
   \   000000A4   0x990E             LDR      R1,[SP, #+56]
   \   000000A6   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_7`
   \   000000AA   0x.... 0x....      BL       S2w_Printf
   2175          	S2w_Printf("No of packets received at 9M = %d\r\n", rxStats.rxRate9);
   \   000000AE   0x990F             LDR      R1,[SP, #+60]
   \   000000B0   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_8`
   \   000000B4   0x.... 0x....      BL       S2w_Printf
   2176          	S2w_Printf("No of packets received at 12M = %d\r\n", rxStats.rxRate12);
   \   000000B8   0x9910             LDR      R1,[SP, #+64]
   \   000000BA   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_9`
   \   000000BE   0x.... 0x....      BL       S2w_Printf
   2177          	S2w_Printf("No of packets received at 18M = %d\r\n", rxStats.rxRate18);
   \   000000C2   0x9911             LDR      R1,[SP, #+68]
   \   000000C4   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_10`
   \   000000C8   0x.... 0x....      BL       S2w_Printf
   2178          	S2w_Printf("No of packets received at 24M = %d\r\n", rxStats.rxRate24);
   \   000000CC   0x9912             LDR      R1,[SP, #+72]
   \   000000CE   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_11`
   \   000000D2   0x.... 0x....      BL       S2w_Printf
   2179          	S2w_Printf("No of packets received at 36M = %d\r\n", rxStats.rxRate36);
   \   000000D6   0x9913             LDR      R1,[SP, #+76]
   \   000000D8   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_12`
   \   000000DC   0x.... 0x....      BL       S2w_Printf
   2180          	S2w_Printf("No of packets received at 48M = %d\r\n", rxStats.rxRate48);
   \   000000E0   0x9914             LDR      R1,[SP, #+80]
   \   000000E2   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_13`
   \   000000E6   0x.... 0x....      BL       S2w_Printf
   2181          	S2w_Printf("No of packets received at 54M = %d\r\n", rxStats.rxRate54);
   \   000000EA   0x9915             LDR      R1,[SP, #+84]
   \   000000EC   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_14`
   \   000000F0   0x.... 0x....      BL       S2w_Printf
   2182          	
   2183          	S2w_Printf("No of packets received at"
   2184          			    "respective MCS Index with Short GI=\r\n");
   \   000000F4   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_15`
   \   000000F8   0x.... 0x....      BL       S2w_Printf
   2185          	{
   2186          		UINT8 i;
   2187          		for(i = 0; i<8; i++)S2w_Printf("%x ", rxStats.rxMcsSgi[i]);
   \   000000FC   0x2600             MOVS     R6,#+0
   \   000000FE   0x....             ADR.N    R5,??DataTable158  ;; "%x "
   \                     ??AppS2wCmd_RfTestRxStop_0:
   \   00000100   0xA800             ADD      R0,SP,#+0
   \   00000102   0xEB00 0x0086      ADD      R0,R0,R6, LSL #+2
   \   00000106   0x6D81             LDR      R1,[R0, #+88]
   \   00000108   0x4628             MOV      R0,R5
   \   0000010A   0x.... 0x....      BL       S2w_Printf
   \   0000010E   0x1C76             ADDS     R6,R6,#+1
   \   00000110   0x2E08             CMP      R6,#+8
   \   00000112   0xDBF5             BLT.N    ??AppS2wCmd_RfTestRxStop_0
   2188          		S2w_Printf("\r\n");
   \   00000114   0x....             ADR.N    R6,??DataTable158_1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000116   0x.... 0x....      BL       ?Subroutine39
   2189          									
   2190          	}
   2191          	S2w_Printf("No of packets received at"
   2192          				"respective MCS Index with Long GI = \r\n");
   \                     ??CrossCallReturnLabel_292:
   \   0000011A   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">_16`
   \   0000011E   0x.... 0x....      BL       S2w_Printf
   2193          	{
   2194          		UINT8 i;
   2195          		for(i = 0; i<8; i++)S2w_Printf("%x ", rxStats.rxMcsLgi[i]);
   \   00000122   0x2700             MOVS     R7,#+0
   \                     ??AppS2wCmd_RfTestRxStop_1:
   \   00000124   0xA800             ADD      R0,SP,#+0
   \   00000126   0xEB00 0x0087      ADD      R0,R0,R7, LSL #+2
   \   0000012A   0x6F81             LDR      R1,[R0, #+120]
   \   0000012C   0x4628             MOV      R0,R5
   \   0000012E   0x.... 0x....      BL       S2w_Printf
   \   00000132   0x1C7F             ADDS     R7,R7,#+1
   \   00000134   0x2F08             CMP      R7,#+8
   \   00000136   0xDBF5             BLT.N    ??AppS2wCmd_RfTestRxStop_1
   2196          		S2w_Printf("\r\n");
   \   00000138   0x.... 0x....      BL       ?Subroutine39
   2197          	}
   2198          	
   2199          	return status;
   \                     ??CrossCallReturnLabel_291:
   \   0000013C   0xB2E0             UXTB     R0,R4
   \   0000013E   0xB027             ADD      SP,SP,#+156
   \   00000140   0xBDF0             POP      {R4-R7,PC}       ;; return
   2200          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0x4630             MOV      R0,R6
   \   00000002   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   2201          VOID S2w_Wlan_Cal_Cb(VOID *ctx, GSN_WDD_CAL_RUN_RSP_T *resp)
   2202          {
   \                     S2w_Wlan_Cal_Cb:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x460C             MOV      R4,R1
   2203          	UINT32 i = 0;
   \   00000004   0x2500             MOVS     R5,#+0
   2204          	S2w_Printf("Calibration Info:\r\n");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "Calibration Info:\\r\\n">`
   \   0000000A   0x.... 0x....      BL       S2w_Printf
   2205          	if(GSN_WIF_CAL_SUCCESS == resp->status)
   \   0000000E   0x7821             LDRB     R1,[R4, #+0]
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "status = %s\\r\\n">`
   \   00000014   0x2900             CMP      R1,#+0
   \   00000016   0xBF0C             ITE      EQ 
   \   00000018   0x.... 0x....      ADREQ.W  R1,`?<Constant "SUCCESS">`
   \   0000001C   0x.... 0x....      ADRNE.W  R1,`?<Constant "FAIL">`
   2206          	{
   2207          		S2w_Printf("status = %s\r\n", "SUCCESS");		
   2208          	}
   2209          	else
   2210          	{
   2211          		S2w_Printf("status = %s\r\n", "FAIL");
   \   00000020   0x.... 0x....      BL       S2w_Printf
   2212          	}
   2213          
   2214          	S2w_Printf("Length = %d\r\n", resp->len);
   \   00000024   0x8861             LDRH     R1,[R4, #+2]
   \   00000026   0x.... 0x....      ADR.W    R0,`?<Constant "Length = %d\\r\\n">`
   \   0000002A   0x.... 0x....      BL       S2w_Printf
   2215          	S2w_Printf("Data:\r\n\r\n");
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "Data:\\r\\n\\r\\n">`
   \   00000032   0x.... 0x....      BL       S2w_Printf
   2216          	for(i = 0; i < resp->len ; i++)
   \   00000036   0x....             ADR.N    R6,??DataTable161  ;; "%x "
   \   00000038   0xE004             B.N      ??S2w_Wlan_Cal_Cb_0
   2217          	{
   2218          		S2w_Printf("%x ", resp->data[i]);
   \                     ??S2w_Wlan_Cal_Cb_1:
   \   0000003A   0x1928             ADDS     R0,R5,R4
   \   0000003C   0x7901             LDRB     R1,[R0, #+4]
   \   0000003E   0x.... 0x....      BL       ??Subroutine38_0
   2219          	}
   \                     ??CrossCallReturnLabel_286:
   \   00000042   0x1C6D             ADDS     R5,R5,#+1
   \                     ??S2w_Wlan_Cal_Cb_0:
   \   00000044   0x8860             LDRH     R0,[R4, #+2]
   \   00000046   0x4285             CMP      R5,R0
   \   00000048   0xD3F7             BCC.N    ??S2w_Wlan_Cal_Cb_1
   2220          	S2w_Printf("\r\n");
   \   0000004A   0x....             ADR.N    R0,??DataTable161_1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000004C   0x.... 0x....      BL       S2w_Printf
   2221              GsnOsal_SemRelease ( &s2wWlanOpSyncSem);
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable173
   \   00000054   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000058   0x.... 0x....      B.W      GsnOsal_SemRelease
   2222          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0x1860             ADDS     R0,R4,R1
   \   00000002   0xF810 0x1C01      LDRB     R1,[R0, #-1]
   \                     ??Subroutine38_0:
   \   00000006   0x4630             MOV      R0,R6
   \   00000008   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   2223          PUBLIC UINT8 AppS2wCmd_WlanCalib (UINT8 *ptr)
   2224          {
   \                     AppS2wCmd_WlanCalib:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   2225          	UINT8 status;;
   2226          	GSN_WDD_CAL_RUN_REQ_T calRunReq;
   2227          	UINT32 temp = 0;	
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   2228          	GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   2229          	UINT8 *p;
   2230          
   2231          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ?Subroutine16
   2232          	if(!p)
   \                     ??CrossCallReturnLabel_162:
   \   0000000C   0xB190             CBZ.N    R0,??AppS2wCmd_WlanCalib_0
   2233          	{
   2234          		return S2W_EINVAL;
   2235          	}
   2236          	status = AppS2wParse_Int(p, &temp);
   \   0000000E   0x.... 0x....      BL       ?Subroutine17
   2237          	if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_214:
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD13A             BNE.N    ??AppS2wCmd_WlanCalib_1
   2238          	{
   2239          		return status;
   2240          	}
   2241          	calRunReq.calType = temp;
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   2242          
   2243          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);	
   \   0000001C   0x.... 0x....      BL       ?Subroutine16
   2244          	if(!p)
   \                     ??CrossCallReturnLabel_161:
   \   00000020   0xB140             CBZ.N    R0,??AppS2wCmd_WlanCalib_0
   2245          	{
   2246          		return S2W_EINVAL;
   2247          	}
   2248          	status = AppS2wParse_Int(p, &temp);
   \   00000022   0x.... 0x....      BL       ?Subroutine17
   2249          	if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_213:
   \   00000026   0xBB88             CBNZ.N   R0,??AppS2wCmd_WlanCalib_1
   2250          	{
   2251          		return status;
   2252          	}	
   2253          	calRunReq.calSubtype = temp;
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   2254          
   2255          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000002E   0x.... 0x....      BL       ?Subroutine16
   2256          	if(!p)
   \                     ??CrossCallReturnLabel_160:
   \   00000032   0xB908             CBNZ.N   R0,??AppS2wCmd_WlanCalib_2
   2257          	{
   2258          		return S2W_EINVAL;
   \                     ??AppS2wCmd_WlanCalib_0:
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xE029             B.N      ??AppS2wCmd_WlanCalib_1
   2259          	}
   2260          	status = AppS2wParse_Int(p, &temp);
   \                     ??AppS2wCmd_WlanCalib_2:
   \   00000038   0x.... 0x....      BL       ?Subroutine17
   2261          	if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_212:
   \   0000003C   0xBB30             CBNZ.N   R0,??AppS2wCmd_WlanCalib_1
   2262          	{
   2263          		return status;
   2264          	}
   2265          	calRunReq.channel = temp;
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x9002             STR      R0,[SP, #+8]
   2266          	calRunReq.modType = 0xFF;// unknown
   \   00000042   0x20FF             MOVS     R0,#+255
   \   00000044   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2267          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000048   0x.... 0x....      BL       ?Subroutine16
   2268          	if (p && *p)
   \                     ??CrossCallReturnLabel_159:
   \   0000004C   0x2800             CMP      R0,#+0
   \   0000004E   0xBF1C             ITT      NE 
   \   00000050   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000052   0x2900             CMPNE    R1,#+0
   \   00000054   0xD005             BEQ.N    ??AppS2wCmd_WlanCalib_3
   2269          	{
   2270          		status = AppS2wParse_Int(p, &temp);
   \   00000056   0x.... 0x....      BL       ?Subroutine17
   2271          	    if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_211:
   \   0000005A   0xB9B8             CBNZ.N   R0,??AppS2wCmd_WlanCalib_1
   2272          	    {
   2273          	    	return status;
   2274          	    }
   2275          	    calRunReq.modType = (UINT8)temp;
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0xF88D 0x000C      STRB     R0,[SP, #+12]
   2276          	}
   2277          	S2w_Printf("\r\n ModType:%d\r\n",calRunReq.modType);
   \                     ??AppS2wCmd_WlanCalib_3:
   \   00000062   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000066   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n ModType:%d\\r\\n">`
   \   0000006A   0x.... 0x....      BL       S2w_Printf
   2278          	status = GsnWdd_CalibrnRun(pWdd, &calRunReq, S2w_Wlan_Cal_Cb, NULL);
   \   0000006E   0x.... 0x....      LDR.W    R2,??DataTable173_1
   \   00000072   0x....             LDR.N    R0,??DataTable162_6
   \   00000074   0x2300             MOVS     R3,#+0
   \   00000076   0xA901             ADD      R1,SP,#+4
   \   00000078   0x.... 0x....      BL       GsnWdd_CalibrnRun
   \   0000007C   0x4604             MOV      R4,R0
   2279          	GsnOsal_SemAcquire ( &s2wWlanOpSyncSem, GSN_OSAL_WAIT_FOREVER );
   \   0000007E   0xF04F 0x31FF      MOV      R1,#-1
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable173
   \   00000086   0x.... 0x....      BL       GsnOsal_SemAcquire
   2280          	/* [TO DO] : Print the stat values*/
   2281          	return status;
   \   0000008A   0xB2E0             UXTB     R0,R4
   \                     ??AppS2wCmd_WlanCalib_1:
   \   0000008C   0xB006             ADD      SP,SP,#+24
   \   0000008E   0xBD10             POP      {R4,PC}          ;; return
   2282          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0xA805             ADD      R0,SP,#+20
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   2283          
   2284          #endif
   2285          
   2286          
   2287          
   2288          #ifdef S2W_WEB_SERVER
   2289          
   2290          /******************************************************************
   2291          * @ingroup S2w-Application
   2292          * @brief Process AT+WEBSERVER command
   2293          *	 This Command starts webserver
   2294          * @param ptr Pointer to the user input string.
   2295          *
   2296          * @return S2W_SUCCESS - operation successful.
   2297          * @return S2W_FAILURE - operation Failed.
   2298          * @return S2W_EINVAL - operation Failed-invalid input
   2299          *************************************************************/
   2300          

   \                                 In section .text, align 2, keep-with-next
   2301          UINT8
   2302          AppS2wCmd_WebServer(UINT8* ptr)
   2303          {
   \                     AppS2wCmd_WebServer:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   2304          	UINT8 status = S2W_FAILURE;
   2305          	UINT32 webSrvrEnable;
   2306          	UINT8 *p;
   2307          	UINT8 dfltUnamePwd[8];
   2308          	UINT32 message;
   2309          	UINT8 i;
   2310          	UINT32 val = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   2311          
   2312          	memset(&s2wappMainTaskCtxt->WebServerCfg,0,sizeof(S2W_WBSERVER_CONFIG_T));
   \   0000000A   0xF646 0x3456      MOVW     R4,#+27478
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable173_2
   \   00000012   0x.... 0x....      BL       ?Subroutine20
   2313          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_235:
   \   00000016   0x.... 0x....      BL       ??Subroutine9_0
   2314              if (!p)
   \                     ??CrossCallReturnLabel_97:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD065             BEQ.N    ??AppS2wCmd_WebServer_0
   2315          	{
   2316          	   return S2W_EINVAL;
   2317          	}
   2318          
   2319          	AppS2wParse_Int(p, &webSrvrEnable);
   \   0000001E   0x.... 0x....      BL       ?Subroutine19
   2320          
   2321          	if( (webSrvrEnable==0) && (TRUE == GsnHttpd_IsRunning()) && s2wappMainTaskCtxt->webServerStatus == RUNNING)
   \                     ??CrossCallReturnLabel_232:
   \   00000022   0x9801             LDR      R0,[SP, #+4]
   \   00000024   0x.... 0x....      LDR.W    R11,??DataTable173_3
   \   00000028   0xF646 0x3ABC      MOVW     R10,#+27580
   \   0000002C   0xF646 0x36C4      MOVW     R6,#+27588
   \   00000030   0xB9C8             CBNZ.N   R0,??AppS2wCmd_WebServer_1
   \   00000032   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xBF02             ITTT     EQ 
   \   0000003A   0x6829             LDREQ    R1,[R5, #+0]
   \   0000003C   0x5C70             LDRBEQ   R0,[R6, R1]
   \   0000003E   0x2802             CMPEQ    R0,#+2
   \   00000040   0xD111             BNE.N    ??AppS2wCmd_WebServer_1
   2322          	{
   2323          		message = APP_NOTIFICATION_SRVR_ONLY_STOP;
   2324          		(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000042   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   00000046   0x201B             MOVS     R0,#+27
   \   00000048   0x4790             BLX      R2
   2325          		GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   0000004A   0x.... 0x....      BL       ?Subroutine23
   2326          		memset(&s2wappMainTaskCtxt->WebServerCfg,0,sizeof(S2W_WBSERVER_CONFIG_T));
   \                     ??CrossCallReturnLabel_248:
   \   0000004E   0x.... 0x....      BL       ?Subroutine20
   2327          		s2wappMainTaskCtxt->respTimeOut=0;
   \                     ??CrossCallReturnLabel_234:
   \   00000052   0x.... 0x....      BL       ?Subroutine40
   2328          		s2wappMainTaskCtxt->responseInprogress=0;
   2329          		GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl);		
   \                     ??CrossCallReturnLabel_293:
   \   00000056   0xF646 0x30E8      MOVW     R0,#+27624
   \   0000005A   0x6829             LDR      R1,[R5, #+0]
   \   0000005C   0x5840             LDR      R0,[R0, R1]
   \   0000005E   0x.... 0x....      BL       GsnSoftTmr_Stop
   2330          		return S2W_SUCCESS;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0xE0A2             B.N      ??AppS2wCmd_WebServer_2
   2331          	}
   2332          	else if( (webSrvrEnable==0) && (FALSE == GsnHttpd_IsRunning()) )
   \                     ??AppS2wCmd_WebServer_1:
   \   00000066   0x9801             LDR      R0,[SP, #+4]
   \   00000068   0xB910             CBNZ.N   R0,??AppS2wCmd_WebServer_3
   \   0000006A   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000006E   0xB150             CBZ.N    R0,??AppS2wCmd_WebServer_4
   2333          	{
   2334          		return S2W_FAILURE;
   2335          	}
   2336          	else if( (webSrvrEnable==1) && (TRUE == GsnHttpd_IsRunning()) && s2wappMainTaskCtxt->webServerStatus == RUNNING)
   \                     ??AppS2wCmd_WebServer_3:
   \   00000070   0x9801             LDR      R0,[SP, #+4]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD109             BNE.N    ??AppS2wCmd_WebServer_5
   \   00000076   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xBF02             ITTT     EQ 
   \   0000007E   0x6828             LDREQ    R0,[R5, #+0]
   \   00000080   0x5C30             LDRBEQ   R0,[R6, R0]
   \   00000082   0x2802             CMPEQ    R0,#+2
   \   00000084   0xD101             BNE.N    ??AppS2wCmd_WebServer_5
   2337          	{
   2338          		return S2W_FAILURE;
   \                     ??AppS2wCmd_WebServer_4:
   \   00000086   0x2001             MOVS     R0,#+1
   \   00000088   0xE090             B.N      ??AppS2wCmd_WebServer_2
   2339          	}
   2340          	memset(&s2wappMainTaskCtxt->WebServerCfg,0,sizeof(S2W_WBSERVER_CONFIG_T));
   \                     ??AppS2wCmd_WebServer_5:
   \   0000008A   0x.... 0x....      BL       ?Subroutine20
   2341          	/* get user name and password*/
   2342          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_233:
   \   0000008E   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_96:
   \   00000092   0xEA5F 0x0800      MOVS     R8,R0
   2343              if (!p || (strlen((const char *)p) > S2W_HTTPD_MAX_USERNAME_LEN))
   \   00000096   0xD028             BEQ.N    ??AppS2wCmd_WebServer_0
   \   00000098   0x.... 0x....      BL       strlen
   \   0000009C   0x2811             CMP      R0,#+17
   \   0000009E   0xD224             BCS.N    ??AppS2wCmd_WebServer_0
   2344              {
   2345                 	return S2W_EINVAL;
   2346              }
   2347              strcpy((INT8 *)s2wappMainTaskCtxt->WebServerCfg.username,(const INT8 *) p);
   \   000000A0   0x6828             LDR      R0,[R5, #+0]
   \   000000A2   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_298:
   \   000000A6   0x.... 0x....      ADR.W    R9,`?<Constant "DEFAULT">`
   \   000000AA   0xAE02             ADD      R6,SP,#+8
   \   000000AC   0x4640             MOV      R0,R8
   2348          	if(7 == strlen((INT8 *)p))
   \   000000AE   0x.... 0x....      BL       strlen
   \   000000B2   0x2807             CMP      R0,#+7
   \   000000B4   0xD110             BNE.N    ??CrossCallReturnLabel_296
   2349          	{
   2350          		for(i = 0; i< 7; i++)
   \   000000B6   0x2700             MOVS     R7,#+0
   2351          		{
   2352          			dfltUnamePwd[i] = toupper(p[i]);
   \                     ??AppS2wCmd_WebServer_6:
   \   000000B8   0xF817 0x0008      LDRB     R0,[R7, R8]
   \   000000BC   0x.... 0x....      BL       toupper
   \   000000C0   0x55B8             STRB     R0,[R7, R6]
   2353          		}
   \   000000C2   0x1C7F             ADDS     R7,R7,#+1
   \   000000C4   0x2F07             CMP      R7,#+7
   \   000000C6   0xDBF7             BLT.N    ??AppS2wCmd_WebServer_6
   2354          		dfltUnamePwd[i] = 0;
   \   000000C8   0x.... 0x....      BL       ?Subroutine8
   2355          		if(0 == strcmp((const char *)dfltUnamePwd, "DEFAULT"))
   \                     ??CrossCallReturnLabel_79:
   \   000000CC   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_296
   2356          		{
   2357          			strcpy(s2wappMainTaskCtxt->WebServerCfg.username, (const char *)s2wCurrent.httpSrvrConf.username);
   \   000000CE   0x6828             LDR      R0,[R5, #+0]
   \   000000D0   0x.... 0x....      LDR.W    R1,??DataTable174
   \   000000D4   0x.... 0x....      BL       ??Subroutine41_0
   2358          		}
   2359          	}
   2360              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_296:
   \   000000D8   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_95:
   \   000000DC   0xEA5F 0x0800      MOVS     R8,R0
   2361              if (!p || (strlen((const char *)p) > S2W_HTTPD_MAX_PASSWORD_LEN) )
   \   000000E0   0xD003             BEQ.N    ??AppS2wCmd_WebServer_0
   \   000000E2   0x.... 0x....      BL       strlen
   \   000000E6   0x2811             CMP      R0,#+17
   \   000000E8   0xD301             BCC.N    ??AppS2wCmd_WebServer_7
   2362              {
   2363                  return S2W_EINVAL;
   \                     ??AppS2wCmd_WebServer_0:
   \   000000EA   0x2002             MOVS     R0,#+2
   \   000000EC   0xE05E             B.N      ??AppS2wCmd_WebServer_2
   2364              }
   2365              strcpy(s2wappMainTaskCtxt->WebServerCfg.passwd, (const INT8 *)p);
   \                     ??AppS2wCmd_WebServer_7:
   \   000000EE   0x6828             LDR      R0,[R5, #+0]
   \   000000F0   0xF646 0x3467      MOVW     R4,#+27495
   \   000000F4   0x.... 0x....      BL       ?Subroutine41
   2366          	if(7 == strlen((INT8 *)p))
   \                     ??CrossCallReturnLabel_297:
   \   000000F8   0x4640             MOV      R0,R8
   \   000000FA   0x.... 0x....      BL       strlen
   \   000000FE   0x2807             CMP      R0,#+7
   \   00000100   0xD110             BNE.N    ??CrossCallReturnLabel_295
   2367          	{
   2368          		for(i = 0; i< 7; i++)
   \   00000102   0x2700             MOVS     R7,#+0
   2369          		{
   2370          			dfltUnamePwd[i] = toupper(p[i]);
   \                     ??AppS2wCmd_WebServer_8:
   \   00000104   0xF817 0x0008      LDRB     R0,[R7, R8]
   \   00000108   0x.... 0x....      BL       toupper
   \   0000010C   0x55B8             STRB     R0,[R7, R6]
   2371          		}
   \   0000010E   0x1C7F             ADDS     R7,R7,#+1
   \   00000110   0x2F07             CMP      R7,#+7
   \   00000112   0xDBF7             BLT.N    ??AppS2wCmd_WebServer_8
   2372          		dfltUnamePwd[i] = 0;
   \   00000114   0x.... 0x....      BL       ?Subroutine8
   2373          		if(0 == strcmp((const char *)dfltUnamePwd, "DEFAULT"))
   \                     ??CrossCallReturnLabel_78:
   \   00000118   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_295
   2374          		{
   2375          			strcpy(s2wappMainTaskCtxt->WebServerCfg.passwd, (const char *)s2wCurrent.httpSrvrConf.password);
   \   0000011A   0x6828             LDR      R0,[R5, #+0]
   \   0000011C   0x.... 0x....      LDR.W    R1,??DataTable175
   \   00000120   0x.... 0x....      BL       ??Subroutine41_0
   2376          		}
   2377          	}
   2378              /* Assume SSL is not used */
   2379              s2wappMainTaskCtxt->WebServerCfg.sslEnabled = S2W_DFLT_HTTP_SRVR_SSL_ENABLE;
   \                     ??CrossCallReturnLabel_295:
   \   00000124   0x6828             LDR      R0,[R5, #+0]
   \   00000126   0xF646 0x3479      MOVW     R4,#+27513
   \   0000012A   0x2100             MOVS     R1,#+0
   \   0000012C   0x5421             STRB     R1,[R4, R0]
   2380          
   2381          	/* see if more parameters are present */
   2382              p = AppS2wParse_NextParamGet(&ptr);
   \   0000012E   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_94:
   \   00000132   0x0006             MOVS     R6,R0
   2383          	if (p && 0 != strlen ((INT8 *)p))
   \   00000134   0xD009             BEQ.N    ??AppS2wCmd_WebServer_9
   \   00000136   0x.... 0x....      BL       strlen
   \   0000013A   0xB130             CBZ.N    R0,??AppS2wCmd_WebServer_9
   2384          	{
   2385          	   status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \   0000013C   0x6828             LDR      R0,[R5, #+0]
   \   0000013E   0x1821             ADDS     R1,R4,R0
   \   00000140   0x4630             MOV      R0,R6
   \   00000142   0x.... 0x....      BL       AppS2wParse_Boolean
   2386          	   if (status != S2W_SUCCESS)
   \   00000146   0x2800             CMP      R0,#+0
   \   00000148   0xD130             BNE.N    ??AppS2wCmd_WebServer_2
   2387          	   {
   2388          		   return status;
   2389          	   }
   2390          	}
   2391          	s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut = S2W_DFLT_HTTP_SRVR_IDLE_TIMEOUT;
   \                     ??AppS2wCmd_WebServer_9:
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0xF646 0x347C      MOVW     R4,#+27516
   \   00000150   0x2178             MOVS     R1,#+120
   \   00000152   0x5221             STRH     R1,[R4, R0]
   2392          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000154   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_93:
   \   00000158   0x0006             MOVS     R6,R0
   2393          	if (p && 0 != strlen ((INT8 *)p))
   \   0000015A   0xD008             BEQ.N    ??AppS2wCmd_WebServer_10
   \   0000015C   0x.... 0x....      BL       strlen
   \   00000160   0xB128             CBZ.N    R0,??AppS2wCmd_WebServer_10
   2394          	{
   2395          		status = AppS2wParse_Int(p, &val);
   \   00000162   0x.... 0x....      BL       ?Subroutine18
   2396          		if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_221:
   \   00000166   0xBB08             CBNZ.N   R0,??AppS2wCmd_WebServer_2
   2397          	    {
   2398          	        return status;
   2399          	    }
   2400          		s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut = val;
   \   00000168   0x6828             LDR      R0,[R5, #+0]
   \   0000016A   0x9900             LDR      R1,[SP, #+0]
   \   0000016C   0x5221             STRH     R1,[R4, R0]
   2401          	}
   2402          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_WebServer_10:
   \   0000016E   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_92:
   \   00000172   0x4604             MOV      R4,R0
   2403          #if (defined(S2W_GSLINK_XML) || defined(S2W_GSLINK_RAW))
   2404          		s2wappMainTaskCtxt->respTimeOut = 0;
   \   00000174   0x.... 0x....      BL       ?Subroutine40
   2405          		s2wappMainTaskCtxt->responseInprogress=0;
   2406          		if (p && 0 != strlen ((INT8 *)p))
   \                     ??CrossCallReturnLabel_294:
   \   00000178   0xB16C             CBZ.N    R4,??AppS2wCmd_WebServer_11
   \   0000017A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_5:
   \   0000017E   0xB150             CBZ.N    R0,??AppS2wCmd_WebServer_11
   2407          		{
   2408          			status = AppS2wParse_Int(p, &val);
   \   00000180   0xA900             ADD      R1,SP,#+0
   \   00000182   0x4620             MOV      R0,R4
   \   00000184   0x.... 0x....      BL       AppS2wParse_Int
   2409          			if (status != S2W_SUCCESS)
   \   00000188   0xB980             CBNZ.N   R0,??AppS2wCmd_WebServer_2
   2410          				return status;	
   2411          			s2wappMainTaskCtxt->respTimeOut = val*TIMER_INTERRUPT_1_MS;
   \   0000018A   0x6829             LDR      R1,[R5, #+0]
   \   0000018C   0x9A00             LDR      R2,[SP, #+0]
   \   0000018E   0xF646 0x30C0      MOVW     R0,#+27584
   \   00000192   0x0152             LSLS     R2,R2,#+5
   \   00000194   0x5042             STR      R2,[R0, R1]
   2412          		}
   2413          #endif
   2414              	
   2415          	message = APP_NOTIFICATION_SRVR_START;
   2416          	(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     ??AppS2wCmd_WebServer_11:
   \   00000196   0x6829             LDR      R1,[R5, #+0]
   \   00000198   0xF8DB 0x2000      LDR      R2,[R11, #+0]
   \   0000019C   0x201D             MOVS     R0,#+29
   \   0000019E   0x4790             BLX      R2
   2417          	GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   000001A0   0x.... 0x....      BL       ?Subroutine23
   2418          	return s2wappMainTaskCtxt->WebServerCfg.status;
   \                     ??CrossCallReturnLabel_247:
   \   000001A4   0x6829             LDR      R1,[R5, #+0]
   \   000001A6   0xF646 0x3078      MOVW     R0,#+27512
   \   000001AA   0x5C40             LDRB     R0,[R0, R1]
   \                     ??AppS2wCmd_WebServer_2:
   \   000001AC   0x....             B.N      ?Subroutine0
   2419          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0x4641             MOV      R1,R8
   \                     ??Subroutine41_0:
   \   00000002   0x1820             ADDS     R0,R4,R0
   \   00000004   0x.... 0x....      B.W      strcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0xEB0A 0x0100      ADD      R1,R10,R0
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x604A             STR      R2,[R1, #+4]
   \   0000000A   0xF80A 0x2000      STRB     R2,[R10, R0]
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0x2228             MOVS     R2,#+40
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x1820             ADDS     R0,R4,R0
   \   00000008   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x55B8             STRB     R0,[R7, R6]
   \   00000004   0x4649             MOV      R1,R9
   \                     ??Subroutine8_0:
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x.... 0x....      B.W      strcmp

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB005             ADD      SP,SP,#+20
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \                     ??Subroutine23_0:
   \   00000002   0xF04F 0x31FF      MOV      R1,#-1
   \   00000006   0xF500 0x40D7      ADD      R0,R0,#+27520
   \   0000000A   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      strlen

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x5439             STRB     R1,[R7, R0]
   \                     ??Subroutine9_0:
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0xA901             ADD      R1,SP,#+4
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int
   2420          

   \                                 In section .text, align 2, keep-with-next
   2421          VOID
   2422          AppS2w_WebServerStop()
   2423          {
   \                     AppS2w_WebServerStop:
   \   00000000   0xB580             PUSH     {R7,LR}
   2424          #ifdef S2W_GSLINK
   2425          	App_McuHttpApiDeInit();
   \   00000002   0x.... 0x....      BL       App_McuHttpApiDeInit
   2426          #endif
   2427          	s2wappMainTaskCtxt->webServerStatus = IDLE;
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable173_2
   \   0000000A   0x6809             LDR      R1,[R1, #+0]
   \   0000000C   0xF646 0x30C4      MOVW     R0,#+27588
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x5442             STRB     R2,[R0, R1]
   2428          
   2429          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
   2430          

   \                                 In section .text, align 2, keep-with-next
   2431          PUBLIC VOID
   2432          AppS2w_WebServerStart()
   2433          {
   \                     AppS2w_WebServerStart:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0F7             SUB      SP,SP,#+476
   2434          
   2435          	INT8 httpdStatus;
   2436          	//UINT8 status = S2W_FAILURE;
   2437          	UINT32 index,certLength;
   2438          
   2439          	GSN_HTTPD_CONFIG_T config;
   2440              GSN_NWIF_IP_CONFIG_T nwParams;
   2441          	//char ipAddrStr[16];
   2442          	SERVER_CERT_DETAIL_T certDetail, *pCertDtl = NULL;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9020             STR      R0,[SP, #+128]
   2443          	//UINT8 i;
   2444              //GSN_STATUS ret;
   2445          	if(TRUE == GsnHttpd_IsRunning() )
   \   0000000A   0xF646 0x3478      MOVW     R4,#+27512
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable173_2
   \   00000012   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xF000 0x80F1      BEQ.W    ??AppS2w_WebServerStart_0
   2446          	{
   2447          		goto WebServer_RegURI;
   2448          	}
   2449              if(NULL != s2wHttpdPktPtr)
   \   0000001C   0x.... 0x....      LDR.W    R10,??DataTable175_2
   \   00000020   0xF8DA 0x0004      LDR      R0,[R10, #+4]
   \   00000024   0xB120             CBZ.N    R0,??AppS2w_WebServerStart_1
   2450              {
   2451                  gsn_free(s2wHttpdPktPtr);
   \   00000026   0x.... 0x....      BL       GsnDynMemMgmt_Free
   2452                  s2wHttpdPktPtr = NULL;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xF8CA 0x0004      STR      R0,[R10, #+4]
   2453              }
   2454              (VOID)pCertDtl;
   2455          	memset((INT8 *)&certDetail, 0, sizeof(certDetail));
   \                     ??AppS2w_WebServerStart_1:
   \   00000030   0x2234             MOVS     R2,#+52
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xA821             ADD      R0,SP,#+132
   \   00000036   0x.... 0x....      BL       memset
   2456              if(!s2wappMainTaskCtxt->fsInit)
   \   0000003A   0x6828             LDR      R0,[R5, #+0]
   \   0000003C   0xF248 0x1770      MOVW     R7,#+33136
   \   00000040   0x5C38             LDRB     R0,[R7, R0]
   \   00000042   0xB930             CBNZ.N   R0,??AppS2w_WebServerStart_2
   2457              {
   2458          		App_FsInit();
   \   00000044   0x.... 0x....      BL       App_FsInit
   2459          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000048   0x6828             LDR      R0,[R5, #+0]
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0x5439             STRB     R1,[R7, R0]
   2460                  f_enterFS();
   \   0000004E   0x.... 0x....      BL       fsm_enterFS
   2461          	}
   2462          #if 1
   2463              if( s2wappMainTaskCtxt->WebServerCfg.sslEnabled )
   \                     ??AppS2w_WebServerStart_2:
   \   00000052   0xF646 0x3879      MOVW     R8,#+27513
   \   00000056   0x6828             LDR      R0,[R5, #+0]
   \   00000058   0xF818 0x0000      LDRB     R0,[R8, R0]
   \   0000005C   0x2800             CMP      R0,#+0
   \   0000005E   0xD05F             BEQ.N    ??AppS2w_WebServerStart_3
   2464              {
   2465                  pCertDtl = &certDetail;
   \   00000060   0xA821             ADD      R0,SP,#+132
   \   00000062   0x9020             STR      R0,[SP, #+128]
   2466          
   2467          #ifndef S2W_SSL_SERVER_TEST
   2468                  index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_CA);
   \   00000064   0x.... 0x....      ADR.W    R6,`?<Constant "SSL_CA">`
   \   00000068   0x4630             MOV      R0,R6
   \   0000006A   0x.... 0x....      BL       S2wCert_SearchRamTable
   2469                  if(index == -1)
   \   0000006E   0xF110 0x0F01      CMN      R0,#+1
   \   00000072   0xBF04             ITT      EQ 
   \   00000074   0x4630             MOVEQ    R0,R6
   \   00000076   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2470                  {
   2471                  	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_CA);
   2472                  }
   2473                  if(index == -1)
   \   0000007A   0x.... 0x....      ADR.W    R7,`?<Constant "\\n\\rCertificate %s Not ...">`
   \   0000007E   0xF110 0x0F01      CMN      R0,#+1
   \   00000082   0xD104             BNE.N    ??AppS2w_WebServerStart_4
   2474                  {
   2475          			s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \   00000084   0x6828             LDR      R0,[R5, #+0]
   \   00000086   0x2101             MOVS     R1,#+1
   \   00000088   0x5421             STRB     R1,[R4, R0]
   2476                      S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_CA);
   \   0000008A   0x4631             MOV      R1,R6
   \   0000008C   0xE039             B.N      ??AppS2w_WebServerStart_5
   2477                      goto webServerExit;
   2478                  }
   2479                  certDetail.CaCertName = (char const *)s2w_ssl_cert_table[index].name;
   \                     ??AppS2w_WebServerStart_4:
   \   0000008E   0xF04F 0x090C      MOV      R9,#+12
   \   00000092   0xFB09 0xF000      MUL      R0,R9,R0
   \   00000096   0x.... 0x....      LDR.W    R6,??DataTable176
   2480                  certDetail.CaCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   2481                  certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   2482                  certLength <<= 8;
   2483                  certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   2484                  certDetail.CaCertLen = certLength;
   2485                  /* CA certificate is optional*/
   2486                  /*else return retVal; */
   2487          
   2488                  index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_SERVER);
   \   0000009A   0x.... 0x....      ADR.W    R11,`?<Constant "SSL_SERVER">`
   \   0000009E   0x1981             ADDS     R1,R0,R6
   \   000000A0   0x6849             LDR      R1,[R1, #+4]
   \   000000A2   0x9121             STR      R1,[SP, #+132]
   \   000000A4   0x5980             LDR      R0,[R0, R6]
   \   000000A6   0x1C81             ADDS     R1,R0,#+2
   \   000000A8   0x9122             STR      R1,[SP, #+136]
   \   000000AA   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_313:
   \   000000AE   0x9023             STR      R0,[SP, #+140]
   \   000000B0   0x4658             MOV      R0,R11
   \   000000B2   0x.... 0x....      BL       S2wCert_SearchRamTable
   2489                  if(index == -1)
   \   000000B6   0xF110 0x0F01      CMN      R0,#+1
   \   000000BA   0xBF04             ITT      EQ 
   \   000000BC   0x4658             MOVEQ    R0,R11
   \   000000BE   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2490                  {
   2491                      index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_SERVER);
   2492                  }
   2493                  if(index == -1)
   \   000000C2   0xF110 0x0F01      CMN      R0,#+1
   \   000000C6   0xD018             BEQ.N    ??AppS2w_WebServerStart_6
   2494                  {
   2495                      s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   2496                      S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_SERVER);
   2497                      goto webServerExit;
   2498                  }
   2499                  certDetail.ClientCertName = (const char *)s2w_ssl_cert_table[index].name;
   \   000000C8   0xFB09 0xF000      MUL      R0,R9,R0
   \   000000CC   0x1981             ADDS     R1,R0,R6
   2500                  certDetail.ClientCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   2501                  certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   2502                  certLength <<= 8;
   2503                  certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   2504                  certDetail.ClientCertLen = certLength;
   2505          
   2506          
   2507                  index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_KEY);
   \   000000CE   0x.... 0x....      ADR.W    R11,`?<Constant "SSL_KEY">`
   \   000000D2   0x6849             LDR      R1,[R1, #+4]
   \   000000D4   0x9124             STR      R1,[SP, #+144]
   \   000000D6   0x5980             LDR      R0,[R0, R6]
   \   000000D8   0x1C81             ADDS     R1,R0,#+2
   \   000000DA   0x9125             STR      R1,[SP, #+148]
   \   000000DC   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_314:
   \   000000E0   0x9026             STR      R0,[SP, #+152]
   \   000000E2   0x4658             MOV      R0,R11
   \   000000E4   0x.... 0x....      BL       S2wCert_SearchRamTable
   2508                  if(index == -1)
   \   000000E8   0xF110 0x0F01      CMN      R0,#+1
   \   000000EC   0xBF04             ITT      EQ 
   \   000000EE   0x4658             MOVEQ    R0,R11
   \   000000F0   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2509                  {
   2510                      index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_KEY);
   2511                  }
   2512                  if(index == -1)
   \   000000F4   0xF110 0x0F01      CMN      R0,#+1
   \   000000F8   0xD107             BNE.N    ??AppS2w_WebServerStart_7
   2513                  {
   2514                      s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \                     ??AppS2w_WebServerStart_6:
   \   000000FA   0x6828             LDR      R0,[R5, #+0]
   \   000000FC   0x2101             MOVS     R1,#+1
   \   000000FE   0x5421             STRB     R1,[R4, R0]
   2515                      S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_KEY);
   \   00000100   0x4659             MOV      R1,R11
   \                     ??AppS2w_WebServerStart_5:
   \   00000102   0x4638             MOV      R0,R7
   \   00000104   0x.... 0x....      BL       S2w_Printf
   2516                      goto webServerExit;
   \   00000108   0xE083             B.N      ??AppS2w_WebServerStart_8
   2517                  }
   2518                  certDetail.PrivateKeyName = (const char *)s2w_ssl_cert_table[index].name;
   \                     ??AppS2w_WebServerStart_7:
   \   0000010A   0xFB09 0xF000      MUL      R0,R9,R0
   \   0000010E   0x1981             ADDS     R1,R0,R6
   \   00000110   0x6849             LDR      R1,[R1, #+4]
   \   00000112   0x9127             STR      R1,[SP, #+156]
   2519                  certDetail.PrivateKeyLocation = s2w_ssl_cert_table[index].certAddress + 2;
   \   00000114   0x5980             LDR      R0,[R0, R6]
   \   00000116   0x1C81             ADDS     R1,R0,#+2
   \   00000118   0x9128             STR      R1,[SP, #+160]
   2520                  certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   2521                  certLength <<= 8;
   2522                  certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   2523                  certDetail.PrivateKeyLen = certLength;
   \   0000011A   0x.... 0x....      BL       ?Subroutine45
   2524          
   2525          #else
   2526                  certDetail.CaCertName = "ca_cert.crt";
   2527                  certDetail.CaCertLocation = ca_cert;
   2528                  certDetail.CaCertLen = sizeof(ca_cert);
   2529                  certDetail.ClientCertName = "server_cert.crt";
   2530                  certDetail.ClientCertLocation = server_cert;
   2531                  certDetail.ClientCertLen = sizeof(server_cert);
   2532                  certDetail.PrivateKeyName = "server_key.key";
   2533                  certDetail.PrivateKeyLocation = server_key;
   2534                  certDetail.PrivateKeyLen = sizeof(server_key);
   2535          #endif
   2536              }
   \                     ??CrossCallReturnLabel_315:
   \   0000011E   0x9029             STR      R0,[SP, #+164]
   2537          #endif
   2538          	//storeParams = serverData.storeParams;
   2539          
   2540              /* get the ip information by calling geps API */
   2541          #if 1
   2542                  GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx, &nwParams);
   \                     ??AppS2w_WebServerStart_3:
   \   00000120   0xA92E             ADD      R1,SP,#+184
   \   00000122   0x6828             LDR      R0,[R5, #+0]
   \   00000124   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000128   0x3050             ADDS     R0,R0,#+80
   \   0000012A   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   2543              //inet_ntop(AF_INET, &nwParams.ipv4.ipAddr, ipAddrStr, sizeof(ipAddrStr));
   2544          #else
   2545              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->nwIf, &nwParams);
   2546              inet_ntop(AF_INET, &nwParams.ipAddr, ipAddrStr, sizeof(ipAddrStr));
   2547          #endif
   2548          #ifdef TRROM_FILE_SYS
   2549              /* initialise the Rom File System that contains Welcome Page*/
   2550              tfRomFsInit(tlRomFile, tlRomPageSize, tlRomPages, tlRomFiles);
   2551          #endif
   2552              /* Initialize web parameters */
   2553              memset(&config, 0, sizeof(GSN_HTTPD_CONFIG_T));
   \   0000012E   0x228C             MOVS     R2,#+140
   \   00000130   0x2100             MOVS     R1,#+0
   \   00000132   0xA854             ADD      R0,SP,#+336
   \   00000134   0x.... 0x....      BL       memset
   2554          
   2555              /* store user mane and passwd*/
   2556              strcpy(config.username, s2wappMainTaskCtxt->WebServerCfg.username);
   \   00000138   0xF8D5 0x9000      LDR      R9,[R5, #+0]
   \   0000013C   0xF509 0x41D6      ADD      R1,R9,#+27392
   \   00000140   0x3156             ADDS     R1,R1,#+86
   \   00000142   0xA85E             ADD      R0,SP,#+376
   \   00000144   0x.... 0x....      BL       strcpy
   2557              strcpy(config.password, s2wappMainTaskCtxt->WebServerCfg.passwd);
   \   00000148   0xF509 0x41D6      ADD      R1,R9,#+27392
   \   0000014C   0x3167             ADDS     R1,R1,#+103
   \   0000014E   0xA866             ADD      R0,SP,#+408
   \   00000150   0x.... 0x....      BL       strcpy
   2558              config.port = APP_HTTPD_PORT;
   \   00000154   0xAF59             ADD      R7,SP,#+356
   \   00000156   0x2050             MOVS     R0,#+80
   \   00000158   0x6078             STR      R0,[R7, #+4]
   2559              config.maxConnPerIp = APP_HTTPD_MAX_PER_IP_CONN;
   \   0000015A   0x2010             MOVS     R0,#+16
   \   0000015C   0x7278             STRB     R0,[R7, #+9]
   2560              config.maxConnTotal = S2W_DFLT_HTTP_SRVR_CLIENT_NO;//APP_HTTPD_MAX_TOTAL_CONN;
   \   0000015E   0x2008             MOVS     R0,#+8
   \   00000160   0x7238             STRB     R0,[R7, #+8]
   2561              config.blockingState = APP_HTTPD_BLOCKING_STATE;
   \   00000162   0x2001             MOVS     R0,#+1
   \   00000164   0x72F8             STRB     R0,[R7, #+11]
   2562              config.threadPriority = APP_HTTPD_THREAD_PRIORITY;
   \   00000166   0x2010             MOVS     R0,#+16
   \   00000168   0x7338             STRB     R0,[R7, #+12]
   2563              config.idleTimeout = APP_HTTPD_IDLE_TIMEOUT;
   \   0000016A   0x2005             MOVS     R0,#+5
   \   0000016C   0x72B8             STRB     R0,[R7, #+10]
   \   0000016E   0xF646 0x307C      MOVW     R0,#+27516
   \   00000172   0xF830 0x0009      LDRH     R0,[R0, R9]
   \   00000176   0xB100             CBZ.N    R0,??AppS2w_WebServerStart_9
   2564          	if(0 != s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut)
   2565          	{
   2566          		config.idleTimeout = s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut;
   \   00000178   0x72B8             STRB     R0,[R7, #+10]
   2567          	}
   2568          
   2569          #if 1
   2570          #ifdef USE_V6
   2571              //memcpy(config.ipAddr, (const INT8 *)nwParams.ipv6.linkLocalAddr, 16);
   2572          	config.ip_flag = GSN_USE_IPV6;
   2573                  GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx, &nwParams);
   2574                  memcpy(config.ipAddr6,nwParams.ipv6.globalAddr, 16);
   2575          #else
   2576              config.ip_flag = GSN_USE_IPV4;
   \                     ??AppS2w_WebServerStart_9:
   \   0000017A   0x2002             MOVS     R0,#+2
   \   0000017C   0xF88D 0x0150      STRB     R0,[SP, #+336]
   2577              config.ipAddr = nwParams.ipv4.ipAddr;
   2578          #endif
   2579          #endif
   2580              config.rootCgiDir = NULL;
   2581              config.rootDir = "/";
   2582              config.defaultFileName = "index.html";
   2583          	config.mallocTimeout = 2 *1000; /* 2 Sec. */
   \   00000180   0xAE72             ADD      R6,SP,#+456
   \   00000182   0x9831             LDR      R0,[SP, #+196]
   \   00000184   0x9059             STR      R0,[SP, #+356]
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x65F8             STR      R0,[R7, #+92]
   \   0000018A   0x....             ADR.N    R0,??DataTable164_1  ;; "/"
   \   0000018C   0x6578             STR      R0,[R7, #+84]
   \   0000018E   0x.... 0x....      ADR.W    R0,`?<Constant "index.html">`
   \   00000192   0x65B8             STR      R0,[R7, #+88]
   \   00000194   0xF44F 0x60FA      MOV      R0,#+2000
   \   00000198   0x6070             STR      R0,[R6, #+4]
   2584          	config.sysQualTskID = APP_CFG_SQ_HTTPD_TASK_ID;
   \   0000019A   0x2007             MOVS     R0,#+7
   \   0000019C   0x60F0             STR      R0,[R6, #+12]
   2585          	config.sysQualTicks = APP_CFG_SQ_TICKS_FOR_HTTPD_TASK;
   \   0000019E   0x2078             MOVS     R0,#+120
   \   000001A0   0x6130             STR      R0,[R6, #+16]
   2586          
   2587              config.stack = S2wApp_WebserverStack_Get(s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \   000001A2   0xF818 0x0009      LDRB     R0,[R8, R9]
   \   000001A6   0x.... 0x....      BL       S2wApp_WebserverStack_Get
   \   000001AA   0x6638             STR      R0,[R7, #+96]
   2588          	 pS2wHttpdTaskStack = config.stack;
   \   000001AC   0xF8CA 0x0000      STR      R0,[R10, #+0]
   2589          	 if(NULL == config.stack)
   \   000001B0   0x6E39             LDR      R1,[R7, #+96]
   \   000001B2   0x6828             LDR      R0,[R5, #+0]
   \   000001B4   0xB909             CBNZ.N   R1,??AppS2w_WebServerStart_10
   2590          	{
   2591          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \   000001B6   0x2101             MOVS     R1,#+1
   \   000001B8   0xE02A             B.N      ??AppS2w_WebServerStart_11
   2592          		goto webServerExit;
   2593          
   2594          	}
   2595              config.stackSize  = S2wApp_WebserverStackSize_Get(s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \                     ??AppS2w_WebServerStart_10:
   \   000001BA   0x1820             ADDS     R0,R4,R0
   \   000001BC   0x7840             LDRB     R0,[R0, #+1]
   \   000001BE   0x.... 0x....      BL       S2wApp_WebserverStackSize_Get
   \   000001C2   0xF8AD 0x01C8      STRH     R0,[SP, #+456]
   2596              //config.pWdd = &s2wappMainTaskCtxt->wdd;
   2597          #if 1
   2598              //config.pool_hdl = &(s2wappMainTaskCtxt->nwCtx.trPktPoolHndl);
   2599          #if 0
   2600              /* Initialize web parameters */
   2601              memset(&trPktPoolHndl, 0, sizeof(trPktPoolHndl));
   2602              /* TODO: need to check proper place to free this buffer */
   2603              s2wHttpdPktPtr = (void*)gsn_malloc(S2W_HTTPD_PKT_POOL);
   2604              if(NULL == s2wHttpdPktPtr)
   2605              {
   2606          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   2607          		goto webServerExit;
   2608              }
   2609              /*Create a packet pool for tcp layer */
   2610              ret = nx_packet_pool_create(&trPktPoolHndl, "", 1600,
   2611                       s2wHttpdPktPtr, S2W_HTTPD_PKT_POOL);
   2612              if(ret)
   2613              {
   2614          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   2615          		goto webServerExit;
   2616              }
   2617          #else
   2618              config.pool_hdl = GsnNw_PktPoolHndlGet(&s2wappMainTaskCtxt->nwCtx, GSN_NW_LBUF_PKT_POOL);
   \   000001C6   0x2101             MOVS     R1,#+1
   \   000001C8   0x6828             LDR      R0,[R5, #+0]
   \   000001CA   0xF500 0x6014      ADD      R0,R0,#+2368
   \   000001CE   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   000001D2   0x60B0             STR      R0,[R6, #+8]
   2619          #endif
   2620          #endif
   2621              /* Start httpd */
   2622              httpdStatus = GsnHttpd_Start(config
   2623          #if 1//def GSN_SSL_SERVER_SUPPORT
   2624          	    ,pCertDtl
   2625          #endif
   2626          	    );
   2627          
   2628          	if(httpdStatus == GSN_HTTPD_FAILURE)
   \   000001D4   0xA954             ADD      R1,SP,#+336
   \   000001D6   0x9820             LDR      R0,[SP, #+128]
   \   000001D8   0x901F             STR      R0,[SP, #+124]
   \   000001DA   0xB084             SUB      SP,SP,#+16
   \   000001DC   0x4668             MOV      R0,SP
   \   000001DE   0x228C             MOVS     R2,#+140
   \   000001E0   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001E4   0xBC0F             POP      {R0-R3}
   \   000001E6   0x.... 0x....      BL       GsnHttpd_Start
   \   000001EA   0x2801             CMP      R0,#+1
   \   000001EC   0xD107             BNE.N    ??AppS2w_WebServerStart_0
   2629          	{
   2630          	    S2wApp_WebserverStack_Free(config.stack);
   \   000001EE   0x6E38             LDR      R0,[R7, #+96]
   \   000001F0   0x.... 0x....      BL       S2wApp_WebserverStack_Free
   2631          		pS2wHttpdTaskStack = NULL;
   \   000001F4   0x2000             MOVS     R0,#+0
   \   000001F6   0xF8CA 0x0000      STR      R0,[R10, #+0]
   2632          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \   000001FA   0x2101             MOVS     R1,#+1
   \   000001FC   0xE007             B.N      ??AppS2w_WebServerStart_12
   2633          		goto webServerExit;
   2634          	}
   2635          WebServer_RegURI:
   2636          #ifdef S2W_GSLINK
   2637              App_McuHttpApiInit();
   \                     ??AppS2w_WebServerStart_0:
   \   000001FE   0x.... 0x....      BL       App_McuHttpApiInit
   2638          #endif
   2639           #ifdef S2W_WEB_SERVER
   2640          	s2wappMainTaskCtxt->webServerStatus = RUNNING;
   \   00000202   0x6829             LDR      R1,[R5, #+0]
   \   00000204   0xF646 0x30C4      MOVW     R0,#+27588
   \   00000208   0x2202             MOVS     R2,#+2
   \   0000020A   0x5442             STRB     R2,[R0, R1]
   2641          #endif
   2642          	s2wappMainTaskCtxt->WebServerCfg.status = S2W_SUCCESS;
   \   0000020C   0x2100             MOVS     R1,#+0
   \                     ??AppS2w_WebServerStart_12:
   \   0000020E   0x6828             LDR      R0,[R5, #+0]
   \                     ??AppS2w_WebServerStart_11:
   \   00000210   0x5421             STRB     R1,[R4, R0]
   2643          webServerExit:
   2644          	GsnOsal_SemRelease(&s2wappMainTaskCtxt->webServerSync);
   \                     ??AppS2w_WebServerStart_8:
   \   00000212   0x6828             LDR      R0,[R5, #+0]
   \   00000214   0xF500 0x40D7      ADD      R0,R0,#+27520
   \   00000218   0x.... 0x....      BL       GsnOsal_SemRelease
   2645          }
   \   0000021C   0xB077             ADD      SP,SP,#+476
   \   0000021E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000008   0x4770             BX       LR
   2646          

   \                                 In section .text, align 2, keep-with-next
   2647          PUBLIC UINT8
   2648          AppS2wCmd_CfgUri(UINT8 *ptr)
   2649          {
   \                     AppS2wCmd_CfgUri:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   2650          	UINT8 *p,*ctype;
   2651              GSN_HTTPD_STATUS_T status=GSN_HTTPD_FAILURE;
   2652          	UINT32 contentType;
   2653          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2654              UINT8 *cgi,*reqLine, *hdr;
   2655              UINT32  sendCgi = 0;
   2656              UINT32 sendReq = 0;
   2657              UINT32 httpHddrBmap = 0;
   2658          #endif
   2659          	if(!GsnHttpd_IsRunning())
   \   00000004   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD03C             BEQ.N    ??AppS2wCmd_CfgUri_0
   2660          		return S2W_FAILURE;
   2661          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_153:
   \   00000010   0x0004             MOVS     R4,R0
   2662          	if (!p)
   \   00000012   0xD00D             BEQ.N    ??AppS2wCmd_CfgUri_1
   2663          	{
   2664          	   return S2W_EINVAL;
   2665          	}
   2666          	ctype = AppS2wParse_NextParamGet(&ptr);
   \   00000014   0x.... 0x....      BL       ?Subroutine14
   2667          	if (ctype != NULL)
   \                     ??CrossCallReturnLabel_152:
   \   00000018   0xB128             CBZ.N    R0,??AppS2wCmd_CfgUri_2
   2668          	{
   2669          		AppS2wParse_Int(ctype, &contentType);
   \   0000001A   0x.... 0x....      BL       ?Subroutine19
   2670          		if(contentType > GSN_HTTPD_CONTENT_TYPES_MAX)
   \                     ??CrossCallReturnLabel_231:
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x2806             CMP      R0,#+6
   \   00000022   0xD301             BCC.N    ??AppS2wCmd_CfgUri_3
   \   00000024   0xE004             B.N      ??AppS2wCmd_CfgUri_1
   2671          			return S2W_EINVAL;
   2672          	}
   2673          	else
   2674          		contentType = GSN_HTTPD_CONTENT_APP_XML;
   \                     ??AppS2wCmd_CfgUri_2:
   \   00000026   0x9001             STR      R0,[SP, #+4]
   2675          	if(strlen((const char *)p) > GSN_HTTPD_MAX_URI_LENGTH)
   \                     ??AppS2wCmd_CfgUri_3:
   \   00000028   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_4:
   \   0000002C   0x2841             CMP      R0,#+65
   \   0000002E   0xD301             BCC.N    ??AppS2wCmd_CfgUri_4
   2676          		return S2W_EINVAL;
   \                     ??AppS2wCmd_CfgUri_1:
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0xE029             B.N      ??AppS2wCmd_CfgUri_5
   2677          #ifdef  S2W_GSLINK
   2678          	if(GSN_HTTPD_MAX_URI_LENGTH == strlen((const char *)p))
   \                     ??AppS2wCmd_CfgUri_4:
   \   00000034   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_3:
   \   00000038   0x2840             CMP      R0,#+64
   \   0000003A   0xBF04             ITT      EQ 
   \   0000003C   0x2000             MOVEQ    R0,#+0
   \   0000003E   0xF884 0x003F      STRBEQ   R0,[R4, #+63]
   2679          	{
   2680          		p[GSN_HTTPD_MAX_URI_LENGTH - 1] = '\0';
   2681          	}
   2682          	status = GsnHttpd_UriHandlerConfig((char *)s2wappMainTaskCtxt->currenturi,
   2683          			   0, NULL,NULL, 0);
   2684          	if(status != GSN_HTTPD_SUCCESS)
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R6,??DataTable173_2
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x4602             MOV      R2,R0
   \   0000004C   0x4601             MOV      R1,R0
   \   0000004E   0x6830             LDR      R0,[R6, #+0]
   \   00000050   0xF646 0x3514      MOVW     R5,#+27412
   \   00000054   0x2300             MOVS     R3,#+0
   \   00000056   0x1828             ADDS     R0,R5,R0
   \   00000058   0x.... 0x....      BL       GsnHttpd_UriHandlerConfig
   \   0000005C   0xB998             CBNZ.N   R0,??AppS2wCmd_CfgUri_0
   2685          		return S2W_FAILURE;
   2686          	memset(s2wappMainTaskCtxt->currenturi,0,GSN_HTTPD_MAX_URI_LENGTH);
   \   0000005E   0x6830             LDR      R0,[R6, #+0]
   \   00000060   0x.... 0x....      BL       ?Subroutine42
   2687          	memcpy(s2wappMainTaskCtxt->currenturi,p,strlen((const char*)p));
   \                     ??CrossCallReturnLabel_300:
   \   00000064   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   00000068   0x.... 0x....      BL       ?Subroutine47
   2688          	status  = GsnHttpd_UriHandlerConfig((char *)s2wappMainTaskCtxt->currenturi,
   2689          			   GSN_HTTPD_URI_METHOD_GET_POST, APP_MCU_PROFILE_DESC,
   2690          			   McuHttpCb, (UINT8)contentType);
   2691          #endif
   2692          	if(status != GSN_HTTPD_SUCCESS)
   \                     ??CrossCallReturnLabel_319:
   \   0000006C   0x9801             LDR      R0,[SP, #+4]
   \   0000006E   0x.... 0x....      LDR.W    R3,??DataTable178
   \   00000072   0x.... 0x....      ADR.W    R2,`?<Constant "Generic MCU Profile">`
   \   00000076   0xB2C0             UXTB     R0,R0
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x2103             MOVS     R1,#+3
   \   0000007C   0x6830             LDR      R0,[R6, #+0]
   \   0000007E   0x1828             ADDS     R0,R5,R0
   \   00000080   0x.... 0x....      BL       GsnHttpd_UriHandlerConfig
   \   00000084   0xB100             CBZ.N    R0,??AppS2wCmd_CfgUri_5
   2693          		return S2W_FAILURE;
   \                     ??AppS2wCmd_CfgUri_0:
   \   00000086   0x2001             MOVS     R0,#+1
   2694          	
   2695          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2696              cgi = AppS2wParse_NextParamGet(&ptr);
   2697              if (!cgi)
   2698              {
   2699                 return S2W_EINVAL;
   2700              }
   2701              AppS2wParse_Int(cgi, &sendCgi);
   2702              if(1 == sendCgi)
   2703              {
   2704                  s2wappMainTaskCtxt->WebServerCfg.sendCgi = 1;
   2705              }
   2706              else
   2707              {
   2708                  s2wappMainTaskCtxt->WebServerCfg.sendCgi = 0;
   2709              }
   2710          /* need to check about this global variable, not sure where to declare this*/
   2711              reqLine = AppS2wParse_NextParamGet(&ptr);
   2712              if (!reqLine)
   2713              {
   2714                 return S2W_EINVAL;
   2715              }
   2716              AppS2wParse_Int(reqLine, &sendReq);
   2717              if(1 == sendReq)
   2718              {
   2719                  s2wappMainTaskCtxt->WebServerCfg.sendReq = 1;
   2720              }
   2721              else
   2722              {
   2723                  s2wappMainTaskCtxt->WebServerCfg.sendReq = 0;
   2724              }
   2725              hdr = AppS2wParse_NextParamGet(&ptr);
   2726              if (!hdr)
   2727              {
   2728                 return S2W_EINVAL;
   2729              }
   2730              AppS2wParse_HexString(hdr, &httpHddrBmap, HTTP_HDR_BITMAP_STR_SIZE);
   2731              if(0 != httpHddrBmap)
   2732              {
   2733                  s2wappMainTaskCtxt->WebServerCfg.httpdHdrBmap = httpHddrBmap;
   2734              }
   2735              else
   2736              {
   2737                  s2wappMainTaskCtxt->WebServerCfg.httpdHdrBmap = 0;
   2738              }
   2739          #endif
   2740              return S2W_SUCCESS;
   \                     ??AppS2wCmd_CfgUri_5:
   \   00000088   0xB004             ADD      SP,SP,#+16
   \   0000008A   0xBD70             POP      {R4-R6,PC}       ;; return
   2741          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   0x4602             MOV      R2,R0
   \   00000002   0x6830             LDR      R0,[R6, #+0]
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x1828             ADDS     R0,R5,R0
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   0x2240             MOVS     R2,#+64
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x1828             ADDS     R0,R5,R0
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0xA803             ADD      R0,SP,#+12
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   2742          #endif
   2743          #if S2W_WEB_PROV
   2744          
   2745          /**
   2746           ******************************************************************
   2747           * @ingroup S2w-Application
   2748           * @brief Process the AT+WEBPROV command
   2749           *      This function vaidate the input parameters and start the
   2750           *      Web server.
   2751           * @param ptr Pointer to the user input string.
   2752           * @retval S2W_SUCCESS - operation successful.
   2753           * @retval S2W_EINVAL  - operation failure-invalid command.
   2754           * @retval S2W_FAILURE - operation failure
   2755           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2756          UINT8
   2757          APPS2wCmd_WebProv(UINT8 *ptr)
   2758          {
   \                     APPS2wCmd_WebProv:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   2759          #ifdef S2W_IP2WIFI_SUPPORT
   2760              S2W_NETCONF_T NetworkParams;
   2761          #endif
   2762          	UINT32 message,val = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   2763              UINT8 status;
   2764              UINT8 *p;
   2765          	UINT8 dfltUnamePwd[8];
   2766          	UINT8 i ;
   2767          	if(s2wappMainTaskCtxt->webProvStatus == RUNNING)
   \   0000000A   0xF646 0x492C      MOVW     R9,#+27692
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable173_2
   \   00000012   0x6820             LDR      R0,[R4, #+0]
   \   00000014   0xF819 0x1000      LDRB     R1,[R9, R0]
   \   00000018   0x2902             CMP      R1,#+2
   \   0000001A   0xF000 0x80AC      BEQ.W    ??APPS2wCmd_WebProv_0
   2768          	{
   2769          		return S2W_FAILURE;
   2770          	}
   2771          
   2772          	memset(&s2wappMainTaskCtxt->WebServerCfg,0,sizeof(S2W_WBSERVER_CONFIG_T));
   \   0000001E   0xF646 0x3B56      MOVW     R11,#+27478
   \   00000022   0x2228             MOVS     R2,#+40
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x4458             ADD      R0,R11,R0
   \   00000028   0x.... 0x....      BL       memset
   2773              /* get user name and password*/
   2774              p = AppS2wParse_NextParamGet(&ptr);
   \   0000002C   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_91:
   \   00000030   0xEA5F 0x0A00      MOVS     R10,R0
   2775              if (!p || (strlen((const char *)p) > S2W_HTTPD_MAX_USERNAME_LEN))
   \   00000034   0xD02D             BEQ.N    ??APPS2wCmd_WebProv_1
   \   00000036   0x.... 0x....      BL       strlen
   \   0000003A   0x2811             CMP      R0,#+17
   \   0000003C   0xD229             BCS.N    ??APPS2wCmd_WebProv_1
   2776              {
   2777                  return S2W_EINVAL;
   2778              }
   2779              strcpy(s2wappMainTaskCtxt->WebServerCfg.username,(const INT8 *) p);
   \   0000003E   0x6820             LDR      R0,[R4, #+0]
   \   00000040   0x.... 0x....      BL       ?Subroutine44
   2780          	if(7 == strlen((INT8 *)p))
   \                     ??CrossCallReturnLabel_312:
   \   00000044   0x.... 0x....      LDR.W    R7,??DataTable178_2
   \   00000048   0x.... 0x....      ADR.W    R8,`?<Constant "DEFAULT">`
   \   0000004C   0xAD02             ADD      R5,SP,#+8
   \   0000004E   0x4650             MOV      R0,R10
   \   00000050   0x.... 0x....      BL       strlen
   \   00000054   0x2807             CMP      R0,#+7
   \   00000056   0xD113             BNE.N    ??CrossCallReturnLabel_310
   2781          	{
   2782          
   2783          		for(i = 0; i< 7; i++)
   \   00000058   0x2600             MOVS     R6,#+0
   2784          		{
   2785          			dfltUnamePwd[i] = toupper(p[i]);
   \                     ??APPS2wCmd_WebProv_2:
   \   0000005A   0xF816 0x000A      LDRB     R0,[R6, R10]
   \   0000005E   0x.... 0x....      BL       toupper
   \   00000062   0x5570             STRB     R0,[R6, R5]
   2786          		}
   \   00000064   0x1C76             ADDS     R6,R6,#+1
   \   00000066   0x2E07             CMP      R6,#+7
   \   00000068   0xDBF7             BLT.N    ??APPS2wCmd_WebProv_2
   2787          		dfltUnamePwd[i] = 0;
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x5570             STRB     R0,[R6, R5]
   2788          		if(0 == strcmp((const char *)dfltUnamePwd, "DEFAULT"))
   \   0000006E   0x4641             MOV      R1,R8
   \   00000070   0x.... 0x....      BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_77:
   \   00000074   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_310
   2789          		{
   2790          			strcpy(s2wappMainTaskCtxt->WebServerCfg.username, (const char *)s2wCurrent.httpSrvrConf.username);
   \   00000076   0x6820             LDR      R0,[R4, #+0]
   \   00000078   0xF507 0x713A      ADD      R1,R7,#+744
   \   0000007C   0x.... 0x....      BL       ??Subroutine44_0
   2791          		}
   2792          	}
   2793              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_310:
   \   00000080   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_90:
   \   00000084   0xEA5F 0x0A00      MOVS     R10,R0
   2794              if (!p || (strlen((const char *)p) > S2W_HTTPD_MAX_PASSWORD_LEN))
   \   00000088   0xD003             BEQ.N    ??APPS2wCmd_WebProv_1
   \   0000008A   0x.... 0x....      BL       strlen
   \   0000008E   0x2811             CMP      R0,#+17
   \   00000090   0xD301             BCC.N    ??APPS2wCmd_WebProv_3
   2795              {
   2796                  return S2W_EINVAL;
   \                     ??APPS2wCmd_WebProv_1:
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0xE09A             B.N      ??APPS2wCmd_WebProv_4
   2797              }
   2798              strcpy(s2wappMainTaskCtxt->WebServerCfg.passwd, (const INT8 *)p);
   \                     ??APPS2wCmd_WebProv_3:
   \   00000096   0x6820             LDR      R0,[R4, #+0]
   \   00000098   0xF646 0x3B67      MOVW     R11,#+27495
   \   0000009C   0x.... 0x....      BL       ?Subroutine44
   2799          	if(7 == strlen((INT8 *)p))
   \                     ??CrossCallReturnLabel_311:
   \   000000A0   0x4650             MOV      R0,R10
   \   000000A2   0x.... 0x....      BL       strlen
   \   000000A6   0x2807             CMP      R0,#+7
   \   000000A8   0xD113             BNE.N    ??CrossCallReturnLabel_309
   2800          	{
   2801          		for(i = 0; i< 7; i++)
   \   000000AA   0x2600             MOVS     R6,#+0
   2802          		{
   2803          			dfltUnamePwd[i] = toupper(p[i]);
   \                     ??APPS2wCmd_WebProv_5:
   \   000000AC   0xF816 0x000A      LDRB     R0,[R6, R10]
   \   000000B0   0x.... 0x....      BL       toupper
   \   000000B4   0x5570             STRB     R0,[R6, R5]
   2804          		}
   \   000000B6   0x1C76             ADDS     R6,R6,#+1
   \   000000B8   0x2E07             CMP      R6,#+7
   \   000000BA   0xDBF7             BLT.N    ??APPS2wCmd_WebProv_5
   2805          		dfltUnamePwd[i] = 0;
   \   000000BC   0x2000             MOVS     R0,#+0
   \   000000BE   0x5570             STRB     R0,[R6, R5]
   2806          		if(0 == strcmp((const char *)dfltUnamePwd, "DEFAULT"))
   \   000000C0   0x4641             MOV      R1,R8
   \   000000C2   0x.... 0x....      BL       ??Subroutine8_0
   \                     ??CrossCallReturnLabel_76:
   \   000000C6   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_309
   2807          		{
   2808          			strcpy(s2wappMainTaskCtxt->WebServerCfg.passwd, (const char *)s2wCurrent.httpSrvrConf.password);
   \   000000C8   0x6820             LDR      R0,[R4, #+0]
   \   000000CA   0xF507 0x7142      ADD      R1,R7,#+776
   \   000000CE   0x.... 0x....      BL       ??Subroutine44_0
   2809          		}
   2810          	}
   2811              /* Assume SSL is not used */
   2812              s2wappMainTaskCtxt->WebServerCfg.sslEnabled = S2W_DFLT_HTTP_SRVR_SSL_ENABLE;
   \                     ??CrossCallReturnLabel_309:
   \   000000D2   0x6820             LDR      R0,[R4, #+0]
   \   000000D4   0xF646 0x3779      MOVW     R7,#+27513
   \   000000D8   0x.... 0x....      BL       ?Subroutine9
   2813          #ifndef S2W_IP2WIFI_SUPPORT
   2814              /* see if more parameters are present */
   2815              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_99:
   \   000000DC   0x0005             MOVS     R5,R0
   2816              if (p && (0 != strlen((const char *)p)))
   \   000000DE   0xD009             BEQ.N    ??APPS2wCmd_WebProv_6
   \   000000E0   0x.... 0x....      BL       strlen
   \   000000E4   0xB130             CBZ.N    R0,??APPS2wCmd_WebProv_6
   2817              {
   2818                  status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \   000000E6   0x6820             LDR      R0,[R4, #+0]
   \   000000E8   0x1839             ADDS     R1,R7,R0
   \   000000EA   0x4628             MOV      R0,R5
   \   000000EC   0x.... 0x....      BL       AppS2wParse_Boolean
   2819                  if (status != S2W_SUCCESS)
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD16B             BNE.N    ??APPS2wCmd_WebProv_4
   2820                  {
   2821                      return status;
   2822                  }
   2823              }    
   2824              
   2825          #else /* This block is for IP2wifi*/
   2826              /* here onwards its setting up L3 connection*/
   2827              memcpy(&NetworkParams, &s2wCurrent.netConf, sizeof(NetworkParams));
   2828          
   2829              /* get IP */
   2830              p = AppS2wParse_NextParamGet(&ptr);
   2831          
   2832              status = AppS2wParse_Ip(p, (UINT8 *)NetworkParams.ipAddr);
   2833              if (status != S2W_SUCCESS)
   2834              {
   2835                  return status;
   2836              }
   2837          
   2838              /* get subnet mask and gateway */
   2839              p = AppS2wParse_NextParamGet(&ptr);
   2840              status = AppS2wParse_Ip(p, (UINT8 *)NetworkParams.netMask);
   2841              if (status != S2W_SUCCESS)
   2842              {
   2843                  return status;
   2844              }
   2845          
   2846              p = AppS2wParse_NextParamGet(&ptr);
   2847              status = AppS2wParse_Ip(p, (UINT8 *)NetworkParams.gateway);
   2848              if (status != S2W_SUCCESS)
   2849              {
   2850                  return status;
   2851              }
   2852              p = AppS2wParse_NextParamGet(&ptr);
   2853              status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   2854              if (status != S2W_SUCCESS)
   2855              {
   2856                  return status;
   2857              }
   2858              /* see if more parameters are present */
   2859              p = AppS2wParse_NextParamGet(&ptr);
   2860              if (p)
   2861              {
   2862                  return S2W_EINVAL;
   2863              }
   2864          
   2865              NetworkParams.dhcp = 0;
   2866              /* call hal ip config function to configure the static IP
   2867               */
   2868              status = AppS2wHal_NetworkConfig(&NetworkParams);
   2869              if (status != S2W_SUCCESS)
   2870              {
   2871                  return status;
   2872              }
   2873          
   2874              /* update the active profile paramater
   2875               */
   2876              memcpy(&s2wCurrent.netConf, &NetworkParams, sizeof(s2wCurrent.netConf));
   2877          #endif
   2878          
   2879          	s2wappMainTaskCtxt->WebServerCfg.storeParams = 0;
   \                     ??APPS2wCmd_WebProv_6:
   \   000000F4   0x6820             LDR      R0,[R4, #+0]
   \   000000F6   0xF646 0x377A      MOVW     R7,#+27514
   \   000000FA   0x.... 0x....      BL       ?Subroutine9
   2880          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_98:
   \   000000FE   0x0005             MOVS     R5,R0
   2881          	if (p && 0 != strlen((INT8*)p))
   \   00000100   0xD00D             BEQ.N    ??APPS2wCmd_WebProv_7
   \   00000102   0x.... 0x....      BL       strlen
   \   00000106   0xB150             CBZ.N    R0,??APPS2wCmd_WebProv_7
   2882          	{
   2883          		UINT32 val = 0;
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x9001             STR      R0,[SP, #+4]
   2884          		status = AppS2wParse_Int(p, &val);
   \   0000010C   0xA901             ADD      R1,SP,#+4
   \   0000010E   0x4628             MOV      R0,R5
   \   00000110   0x.... 0x....      BL       AppS2wParse_Int
   2885          		if (status != S2W_SUCCESS)
   \   00000114   0x2800             CMP      R0,#+0
   \   00000116   0xD159             BNE.N    ??APPS2wCmd_WebProv_4
   2886          	    {
   2887          	        return status;
   2888          	    }
   2889          		s2wappMainTaskCtxt->WebServerCfg.storeParams = val;
   \   00000118   0x6820             LDR      R0,[R4, #+0]
   \   0000011A   0x9901             LDR      R1,[SP, #+4]
   \   0000011C   0x5439             STRB     R1,[R7, R0]
   2890          	}
   2891          	s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut = S2W_DFLT_HTTP_SRVR_IDLE_TIMEOUT;
   \                     ??APPS2wCmd_WebProv_7:
   \   0000011E   0xF646 0x357C      MOVW     R5,#+27516
   \   00000122   0x6820             LDR      R0,[R4, #+0]
   \   00000124   0x2178             MOVS     R1,#+120
   \   00000126   0x5229             STRH     R1,[R5, R0]
   2892          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000128   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_89:
   \   0000012C   0x0006             MOVS     R6,R0
   2893          	if (p && 0 != strlen((INT8*)p))
   \   0000012E   0xD009             BEQ.N    ??APPS2wCmd_WebProv_8
   \   00000130   0x.... 0x....      BL       strlen
   \   00000134   0xB130             CBZ.N    R0,??APPS2wCmd_WebProv_8
   2894          	{
   2895          		status = AppS2wParse_Int(p, &val);
   \   00000136   0x.... 0x....      BL       ?Subroutine18
   2896          		if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_220:
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD146             BNE.N    ??APPS2wCmd_WebProv_4
   2897          	    {
   2898          	        return status;
   2899          	    }
   2900          		s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut = val;
   \   0000013E   0x6820             LDR      R0,[R4, #+0]
   \   00000140   0x9900             LDR      R1,[SP, #+0]
   \   00000142   0x5229             STRH     R1,[R5, R0]
   2901          		
   2902          	}
   2903          #ifdef  S2W_NCM_SUPPORT_ENABLE	
   2904          	s2wappMainTaskCtxt->ncmAutoConEn = 0;
   \                     ??APPS2wCmd_WebProv_8:
   \   00000144   0xF44F 0x45EA      MOV      R5,#+29952
   \   00000148   0x6820             LDR      R0,[R4, #+0]
   \   0000014A   0x2100             MOVS     R1,#+0
   \   0000014C   0x5029             STR      R1,[R5, R0]
   2905          #endif
   2906          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000014E   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_88:
   \   00000152   0x0006             MOVS     R6,R0
   2907          	if (p && 0 != strlen((INT8*)p))
   \   00000154   0xD013             BEQ.N    ??APPS2wCmd_WebProv_9
   \   00000156   0x.... 0x....      BL       strlen
   \   0000015A   0xB180             CBZ.N    R0,??APPS2wCmd_WebProv_9
   2908          	{
   2909          		val=0;
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0x9000             STR      R0,[SP, #+0]
   2910          		status = AppS2wParse_Int(p, &val);
   \   00000160   0x.... 0x....      BL       ?Subroutine18
   2911          		if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_219:
   \   00000164   0x2800             CMP      R0,#+0
   \   00000166   0xD131             BNE.N    ??APPS2wCmd_WebProv_4
   2912          	    {
   2913          	        return status;
   2914          	    }
   2915          		if(( s2wappMainTaskCtxt->WebServerCfg.storeParams  == S2W_WEB_PARAMS_SND_TO_HOST)	&& val == 1 )		
   \   00000168   0x6820             LDR      R0,[R4, #+0]
   \   0000016A   0x5C39             LDRB     R1,[R7, R0]
   \   0000016C   0x2900             CMP      R1,#+0
   \   0000016E   0xBF04             ITT      EQ 
   \   00000170   0x9900             LDREQ    R1,[SP, #+0]
   \   00000172   0x2901             CMPEQ    R1,#+1
   \   00000174   0xD101             BNE.N    ??APPS2wCmd_WebProv_10
   2916          		{
   2917          			 return S2W_FAILURE;			 
   \                     ??APPS2wCmd_WebProv_0:
   \   00000176   0x2001             MOVS     R0,#+1
   \   00000178   0xE028             B.N      ??APPS2wCmd_WebProv_4
   2918          		}
   2919          #ifdef  S2W_NCM_SUPPORT_ENABLE
   2920          		else
   2921          		{
   2922          			s2wappMainTaskCtxt->ncmAutoConEn = val;
   \                     ??APPS2wCmd_WebProv_10:
   \   0000017A   0x9900             LDR      R1,[SP, #+0]
   \   0000017C   0x5029             STR      R1,[R5, R0]
   2923          		}
   2924          #endif
   2925          		
   2926          	}
   2927          	s2wappMainTaskCtxt->formatVersion = 0;
   \                     ??APPS2wCmd_WebProv_9:
   \   0000017E   0xF646 0x37B8      MOVW     R7,#+27576
   \   00000182   0x6820             LDR      R0,[R4, #+0]
   \   00000184   0x2100             MOVS     R1,#+0
   \   00000186   0x5039             STR      R1,[R7, R0]
   2928          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000188   0x.... 0x....      BL       ??Subroutine9_0
   \                     ??CrossCallReturnLabel_87:
   \   0000018C   0x0005             MOVS     R5,R0
   2929          	if (p && 0 != strlen((INT8*)p))
   \   0000018E   0xD00C             BEQ.N    ??APPS2wCmd_WebProv_11
   \   00000190   0x.... 0x....      BL       strlen
   \   00000194   0xB148             CBZ.N    R0,??APPS2wCmd_WebProv_11
   2930          	{
   2931          		val=0;
   \   00000196   0x2000             MOVS     R0,#+0
   \   00000198   0x9000             STR      R0,[SP, #+0]
   2932          		status = AppS2wParse_Int(p, &val);
   \   0000019A   0xA900             ADD      R1,SP,#+0
   \   0000019C   0x4628             MOV      R0,R5
   \   0000019E   0x.... 0x....      BL       AppS2wParse_Int
   2933          		if (status != S2W_SUCCESS)
   \   000001A2   0xB998             CBNZ.N   R0,??APPS2wCmd_WebProv_4
   2934          	    {
   2935          	        return status;
   2936          	    }
   2937          		s2wappMainTaskCtxt->formatVersion = val;
   \   000001A4   0x6820             LDR      R0,[R4, #+0]
   \   000001A6   0x9900             LDR      R1,[SP, #+0]
   \   000001A8   0x5039             STR      R1,[R7, R0]
   2938          	}
   2939          	
   2940          	message = APP_NOTIFICATION_PROV_START;
   2941              s2wappMainTaskCtxt->webProvStatus=START;
   \                     ??APPS2wCmd_WebProv_11:
   \   000001AA   0x2101             MOVS     R1,#+1
   \   000001AC   0x6820             LDR      R0,[R4, #+0]
   2942          	(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   000001AE   0x.... 0x....      LDR.W    R2,??DataTable173_3
   \   000001B2   0xF809 0x1000      STRB     R1,[R9, R0]
   \   000001B6   0x201E             MOVS     R0,#+30
   \   000001B8   0x6821             LDR      R1,[R4, #+0]
   \   000001BA   0x6812             LDR      R2,[R2, #+0]
   \   000001BC   0x4790             BLX      R2
   2943          	GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   000001BE   0x6820             LDR      R0,[R4, #+0]
   \   000001C0   0x.... 0x....      BL       ??Subroutine23_0
   2944              return s2wappMainTaskCtxt->WebServerCfg.status;
   \                     ??CrossCallReturnLabel_246:
   \   000001C4   0x6821             LDR      R1,[R4, #+0]
   \   000001C6   0xF646 0x3078      MOVW     R0,#+27512
   \   000001CA   0x5C40             LDRB     R0,[R0, R1]
   \                     ??APPS2wCmd_WebProv_4:
   \   000001CC                      REQUIRE ?Subroutine0
   \   000001CC                      ;; // Fall through to label ?Subroutine0
   2945          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0x4651             MOV      R1,R10
   \                     ??Subroutine44_0:
   \   00000002   0x4458             ADD      R0,R11,R0
   \   00000004   0x.... 0x....      B.W      strcpy

   \                                 In section .text, align 2, keep-with-next
   2946          UINT8
   2947          APPS2wCmd_WebProvStop(UINT8 *ptr)
   2948          {
   \                     APPS2wCmd_WebProvStop:
   \   00000000   0xB510             PUSH     {R4,LR}
   2949          	UINT32 message;
   2950          	if( (TRUE == GsnHttpd_IsRunning()) && s2wappMainTaskCtxt->webProvStatus == RUNNING)
   \   00000002   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD111             BNE.N    ??APPS2wCmd_WebProvStop_0
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable173_2
   \   0000000E   0x6821             LDR      R1,[R4, #+0]
   \   00000010   0xF646 0x402C      MOVW     R0,#+27692
   \   00000014   0x5C40             LDRB     R0,[R0, R1]
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xD109             BNE.N    ??APPS2wCmd_WebProvStop_0
   2951          	{
   2952          		message = APP_NOTIFICATION_PROV_ONLY_STOP;
   2953          		(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   0000001A   0x.... 0x....      LDR.W    R2,??DataTable173_3
   \   0000001E   0x6812             LDR      R2,[R2, #+0]
   \   00000020   0x201C             MOVS     R0,#+28
   \   00000022   0x4790             BLX      R2
   2954          		GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   00000024   0x6820             LDR      R0,[R4, #+0]
   \   00000026   0x.... 0x....      BL       ??Subroutine23_0
   2955          		return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_245:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD10             POP      {R4,PC}
   2956          	}
   2957          	return S2W_FAILURE;
   \                     ??APPS2wCmd_WebProvStop_0:
   \   0000002E   0x2001             MOVS     R0,#+1
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
   2958          }

   \                                 In section .text, align 2, keep-with-next
   2959          UINT8
   2960          APPS2wCmd_AddRedirURI(UINT8 *ptr)
   2961          {
   \                     APPS2wCmd_AddRedirURI:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   2962          	UINT8 status;
   2963          	if(TRUE == GsnHttpd_IsRunning())
   \   00000004   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD110             BNE.N    ??APPS2wCmd_AddRedirURI_0
   2964          	{
   2965          		memset(s2wappMainTaskCtxt->rediruri,0,GSN_HTTPD_MAX_URI_LENGTH);
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable173_2
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0xF646 0x35EC      MOVW     R5,#+27628
   \   00000016   0x.... 0x....      BL       ?Subroutine42
   2966          		memcpy(s2wappMainTaskCtxt->rediruri,ptr,strlen((const char *)ptr));
   \                     ??CrossCallReturnLabel_299:
   \   0000001A   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_1:
   \   0000001E   0x.... 0x....      BL       ?Subroutine47
   2967          		status = GsnHttpd_AddRedirURI(s2wappMainTaskCtxt->rediruri);
   2968          		if(status != GSN_SUCCESS)
   \                     ??CrossCallReturnLabel_318:
   \   00000022   0x6830             LDR      R0,[R6, #+0]
   \   00000024   0x1828             ADDS     R0,R5,R0
   \   00000026   0x.... 0x....      BL       GsnHttpd_AddRedirURI
   \   0000002A   0xB2C0             UXTB     R0,R0
   \   0000002C   0xB100             CBZ.N    R0,??APPS2wCmd_AddRedirURI_1
   2969          			return S2W_FAILURE;
   2970          		else
   2971          			return S2W_SUCCESS;
   2972          	}
   2973          	else
   2974          		return S2W_FAILURE;
   \                     ??APPS2wCmd_AddRedirURI_0:
   \   0000002E   0x2001             MOVS     R0,#+1
   \                     ??APPS2wCmd_AddRedirURI_1:
   \   00000030   0xBD70             POP      {R4-R6,PC}       ;; return
   2975          }

   \                                 In section .bss, align 4
   \                     mdnsv6Enable:
   \   00000000                      DS8 1
   2976          #endif
   2977          
   2978          #ifdef S2W_MDNS_ENABLE
   2979          extern UINT8 mdnsFlag;
   2980          UINT32 mdnsStarted;
   2981          
   2982          UINT8 mdnsATConfig=0;
   \                     mdnsATConfig:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     mdnsStarted:
   \   00000004                      DS8 4

   \                                 In section .bss, align 1
   \                     frameTransmissionType:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     frame:
   \   00000000                      DS8 36

   \                                 In section .bss, align 4
   \                     trPktPoolHndl:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
   \                     s2wErrorCode:
   \   00000000                      DS8 4
   2983          extern S2W_MDNS_HN_PARAM_T mdnsHnParam;

   \                                 In section .noinit, align 4
   2984          __no_init UINT8 mdnsParamBuff[256];
   \                     mdnsParamBuff:
   \   00000000                      DS8 256

   \                                 In section .bss, align 4
   2985          S2W_MDNS_SRV_PARAM_T mdnsSrvcParam;
   \                     mdnsSrvcParam:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
   2986          S2W_MDNS_ANNOUNCE_PARAM_T mdnsAnnceParam;
   \                     mdnsAnnceParam:
   \   00000000                      DS8 24
   2987          
   2988          #ifdef S2W_IPv6_SUPPORT
   2989          
   2990          PUBLIC UINT8
   2991          AppS2wCmd_MdnsInitv6(UINT8 *ptr)
   2992          {
   2993              UINT8 ptr1='6';
   2994              ptr=&ptr1;
   2995              mdnsv6Enable = TRUE;
   2996              AppS2wHal_MdnsInit(ptr);
   2997          
   2998              return S2W_SUCCESS;
   2999          }
   3000          #endif

   \                                 In section .text, align 2, keep-with-next
   3001          PUBLIC UINT8
   3002          AppS2wCmd_MdnsInit(UINT8 *ptr)
   3003          {
   \                     AppS2wCmd_MdnsInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   3004              if((!mdnsv6Enable) && !(mdnsStarted == TRUE))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable179
   \   00000006   0x7821             LDRB     R1,[R4, #+0]
   \   00000008   0xB941             CBNZ.N   R1,??AppS2wCmd_MdnsInit_0
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0x2901             CMP      R1,#+1
   \   0000000E   0xD005             BEQ.N    ??AppS2wCmd_MdnsInit_0
   3005              {
   3006                AppS2wHal_MdnsInit(ptr);
   \   00000010   0x.... 0x....      BL       AppS2wHal_MdnsInit
   3007              }
   3008              else
   3009              {
   3010                return S2W_FAILURE;
   3011              }
   3012              mdnsStarted = TRUE;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x6060             STR      R0,[R4, #+4]
   3013              return S2W_SUCCESS;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD10             POP      {R4,PC}
   \                     ??AppS2wCmd_MdnsInit_0:
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return
   3014          }
   3015          

   \                                 In section .text, align 2, keep-with-next
   3016          PUBLIC UINT8
   3017          AppS2wCmd_MdnsDeInit(VOID)
   3018          {
   \                     AppS2wCmd_MdnsDeInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   3019              if(mdnsFlag && mdnsStarted)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable179_1
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xBF1E             ITTT     NE 
   \   0000000C   0x.... 0x....      LDRNE.W  R4,??DataTable179
   \   00000010   0x6860             LDRNE    R0,[R4, #+4]
   \   00000012   0x2800             CMPNE    R0,#+0
   \   00000014   0xD005             BEQ.N    ??AppS2wCmd_MdnsDeInit_0
   3020              {
   3021               AppS2wHal_MdnsDeInit();
   \   00000016   0x.... 0x....      BL       AppS2wHal_MdnsDeInit
   3022               mdnsv6Enable = FALSE;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
   3023               mdnsStarted = FALSE;
   \   0000001E   0x6060             STR      R0,[R4, #+4]
   3024               return S2W_SUCCESS; 
   \   00000020   0xBD10             POP      {R4,PC}
   3025              }
   3026              else
   3027              {
   3028               return S2W_FAILURE;
   \                     ??AppS2wCmd_MdnsDeInit_0:
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0xBD10             POP      {R4,PC}          ;; return
   3029              }
   3030          }
   3031          

   \                                 In section .text, align 2, keep-with-next
   3032          PUBLIC UINT8
   3033          AppS2wCmd_MdnsHostNameReg(UINT8 *ptr)
   3034          {
   \                     AppS2wCmd_MdnsHostNameReg:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   3035              UINT8 *p;
   3036              UINT16 len;
   3037              UINT16 totalLen = 0;
   3038              //UINT8 status;
   3039              UINT32 param;
   3040              
   3041              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_72:
   \   00000008   0x0005             MOVS     R5,R0
   3042              if (!p)
   \   0000000A   0xD016             BEQ.N    ??AppS2wCmd_MdnsHostNameReg_0
   3043              {
   3044                  return S2W_EINVAL;
   3045              }
   3046          
   3047              len = strlen((const char *)p);
   \   0000000C   0x.... 0x....      BL       strlen
   3048          
   3049              mdnsHnParam.hostname = mdnsParamBuff;
   \   00000010   0x.... 0x....      LDR.W    R4,??DataTable179_2
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable179_3
   \   00000018   0x6027             STR      R7,[R4, #+0]
   3050          
   3051              if(0 != len)
   \   0000001A   0xB286             UXTH     R6,R0
   \   0000001C   0xB92E             CBNZ.N   R6,??AppS2wCmd_MdnsHostNameReg_1
   3052              {
   3053                  strcpy((INT8 *)mdnsHnParam.hostname, (const char *)p);
   3054              }
   3055              else
   3056              {/*Read the default system name*/
   3057                 len = strlen((const INT8 *)s2wCurrent.hostName);
   \   0000001E   0x.... 0x....      LDR.W    R5,??DataTable179_4
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       strlen
   \   00000028   0x4606             MOV      R6,R0
   3058          
   3059                 strcpy((INT8 *)mdnsHnParam.hostname, (const char *)s2wCurrent.hostName);
   \                     ??AppS2wCmd_MdnsHostNameReg_1:
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x4638             MOV      R0,R7
   \   0000002E   0x.... 0x....      BL       strcpy
   3060              }
   3061              totalLen += (len+1);
   3062            
   3063              p = AppS2wParse_NextParamGet(&ptr);
   \   00000032   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_71:
   \   00000036   0x0005             MOVS     R5,R0
   3064              if (!p)
   \   00000038   0xD101             BNE.N    ??AppS2wCmd_MdnsHostNameReg_2
   3065              {
   3066                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsHostNameReg_0:
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBDFE             POP      {R1-R7,PC}
   3067              }
   3068          
   3069              len = strlen((const char *)p);
   \                     ??AppS2wCmd_MdnsHostNameReg_2:
   \   0000003E   0x.... 0x....      BL       strlen
   3070            
   3071              mdnsHnParam.domain = &mdnsParamBuff[totalLen];
   \   00000042   0x1C70             ADDS     R0,R6,#+1
   \   00000044   0xB280             UXTH     R0,R0
   \   00000046   0x19C0             ADDS     R0,R0,R7
   \   00000048   0x6060             STR      R0,[R4, #+4]
   3072            
   3073              strcpy((INT8 *)mdnsHnParam.domain, (const char *)p);
   \   0000004A   0x4629             MOV      R1,R5
   \   0000004C   0x.... 0x....      BL       strcpy
   3074          
   3075              totalLen += (len+1);
   3076               
   3077              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000050   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_70:
   \   00000054   0xB118             CBZ.N    R0,??AppS2wCmd_MdnsHostNameReg_3
   3078              {
   3079              AppS2wParse_Int(p, &param);
   \   00000056   0x.... 0x....      BL       ?Subroutine17
   3080              mdnsHnParam.ttl = param;
   \                     ??CrossCallReturnLabel_210:
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0xE000             B.N      ??AppS2wCmd_MdnsHostNameReg_4
   3081              }
   3082              else
   3083              	mdnsHnParam.ttl =  S2W_DFLT_MDNS_TTL; 
   \                     ??AppS2wCmd_MdnsHostNameReg_3:
   \   0000005E   0x200A             MOVS     R0,#+10
   \                     ??AppS2wCmd_MdnsHostNameReg_4:
   \   00000060   0x6120             STR      R0,[R4, #+16]
   3084              
   3085              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000062   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_69:
   \   00000066   0xB110             CBZ.N    R0,??AppS2wCmd_MdnsHostNameReg_5
   3086              {
   3087              AppS2wParse_Int(p, &param);
   \   00000068   0x.... 0x....      BL       ?Subroutine17
   3088                 
   3089              mdnsHnParam.scope = (UINT8)param;
   \                     ??CrossCallReturnLabel_209:
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   3090              }
   3091              else
   3092              mdnsHnParam.scope = S2W_DFLT_MDNS_SCOPE;
   \                     ??AppS2wCmd_MdnsHostNameReg_5:
   \   0000006E   0x7360             STRB     R0,[R4, #+13]
   3093              
   3094              
   3095             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000070   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_68:
   \   00000074   0xB118             CBZ.N    R0,??AppS2wCmd_MdnsHostNameReg_6
   3096              {
   3097          
   3098              AppS2wParse_Int(p, &param);
   \   00000076   0x.... 0x....      BL       ?Subroutine17
   3099              mdnsHnParam.conflctDetect = (UINT8)param;
   \                     ??CrossCallReturnLabel_208:
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0xE000             B.N      ??AppS2wCmd_MdnsHostNameReg_7
   3100              }
   3101             else
   3102              mdnsHnParam.conflctDetect = S2W_DFLT_MDNS_CONFLICT_DETECT;
   \                     ??AppS2wCmd_MdnsHostNameReg_6:
   \   0000007E   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_MdnsHostNameReg_7:
   \   00000080   0x73A0             STRB     R0,[R4, #+14]
   3103          
   3104              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000082   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_67:
   \   00000086   0xB110             CBZ.N    R0,??AppS2wCmd_MdnsHostNameReg_8
   3105              {    
   3106              AppS2wParse_Int(p, &param);
   \   00000088   0x.... 0x....      BL       ?Subroutine17
   3107              mdnsHnParam.autoCorrect = (UINT8)param;
   \                     ??CrossCallReturnLabel_207:
   \   0000008C   0x9800             LDR      R0,[SP, #+0]
   3108              }
   3109              else
   3110              mdnsHnParam.autoCorrect = S2W_DFLT_MDNS_AUTOCORRECT;
   \                     ??AppS2wCmd_MdnsHostNameReg_8:
   \   0000008E   0x7320             STRB     R0,[R4, #+12]
   3111              
   3112              if(mdnsv6Enable)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable179
   \   00000094   0x7801             LDRB     R1,[R0, #+0]
   \   00000096   0xB111             CBZ.N    R1,??AppS2wCmd_MdnsHostNameReg_9
   3113              mdnsHnParam.IpVersion |= ADDR_TYPE_IPv6;
   \   00000098   0x7D21             LDRB     R1,[R4, #+20]
   \   0000009A   0xF041 0x0101      ORR      R1,R1,#0x1
   3114              else
   3115              mdnsHnParam.IpVersion = ADDR_TYPE_IPv4;
   \                     ??AppS2wCmd_MdnsHostNameReg_9:
   \   0000009E   0x7521             STRB     R1,[R4, #+20]
   3116              
   3117               mdnsATConfig =1;
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x7041             STRB     R1,[R0, #+1]
   3118              return (AppS2wHal_MdnsHostNameReg(&mdnsHnParam));
   \   000000A4   0x4620             MOV      R0,R4
   \   000000A6   0x.... 0x....      BL       AppS2wHal_MdnsHostNameReg
   \   000000AA   0xBDFE             POP      {R1-R7,PC}       ;; return
   3119          }
   3120          
   3121          #ifdef ADK_OTAFU
   3122          #define S2W_OTAFU_MDNS_KEY_VAL "api="GSN_HTTP_OTAFU_API_NAME":"GSN_HTTP_OTAFU_API_VERSION":"GSN_HTTP_OTAFU_API_PATH
   3123          #endif
   3124          #ifdef ADK_PROV
   3125          #define S2W_SYS_MDNS_KEY_VAL "api="GSN_HTTP_SYS_API_NAME":"GSN_HTTP_SYS_API_VERSION":"GSN_HTTP_SYS_API_PATH
   3126          #endif
   3127          

   \                                 In section .text, align 2, keep-with-next
   3128          PUBLIC UINT8
   3129          AppS2wCmd_MdnsServiceReg(UINT8 *ptr)
   3130          {
   \                     AppS2wCmd_MdnsServiceReg:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB082             SUB      SP,SP,#+8
   3131              
   3132              UINT8 *p;
   3133              UINT16 len;
   3134              UINT16 totalLen = 0;
   3135              //UINT8 status;
   3136              UINT32 param = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   3137              UINT8  KeyValPrsnt = 0;
   3138              UINT8  KeyValIndx=0;
   \   0000000A   0x2500             MOVS     R5,#+0
   3139          
   3140              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_66:
   \   00000010   0xEA5F 0x0800      MOVS     R8,R0
   3141              if (!p)
   \   00000014   0xD046             BEQ.N    ??AppS2wCmd_MdnsServiceReg_0
   3142              {
   3143                  return S2W_EINVAL;
   3144              }
   3145              len = strlen((const char *)p);
   \   00000016   0x.... 0x....      BL       strlen
   3146              mdnsSrvcParam.srvcInstance = mdnsParamBuff;
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable181
   \   0000001E   0x.... 0x....      LDR.W    R7,??DataTable179_3
   \   00000022   0x6027             STR      R7,[R4, #+0]
   \   00000024   0x4606             MOV      R6,R0
   3147              strcpy((INT8 *)mdnsSrvcParam.srvcInstance, (const INT8 *)p);
   \   00000026   0x4641             MOV      R1,R8
   \   00000028   0x4638             MOV      R0,R7
   \   0000002A   0x.... 0x....      BL       strcpy
   3148              totalLen += (len+1);
   \   0000002E   0x1C76             ADDS     R6,R6,#+1
   3149             
   3150              p = AppS2wParse_NextParamGet(&ptr);
   \   00000030   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_65:
   \   00000034   0xEA5F 0x0800      MOVS     R8,R0
   3151              if (!p)
   \   00000038   0xD034             BEQ.N    ??AppS2wCmd_MdnsServiceReg_0
   3152              {
   3153                  return S2W_EINVAL;
   3154              }
   3155              len = strlen((const char *)p);
   \   0000003A   0x.... 0x....      BL       strlen
   \   0000003E   0x4681             MOV      R9,R0
   3156              mdnsSrvcParam.subType = &mdnsParamBuff[totalLen];;
   \   00000040   0xB2B6             UXTH     R6,R6
   \   00000042   0x19F0             ADDS     R0,R6,R7
   \   00000044   0x60A0             STR      R0,[R4, #+8]
   3157              strcpy((INT8 *)mdnsSrvcParam.subType, (const INT8 *)p);
   \   00000046   0x.... 0x....      BL       ?Subroutine43
   3158              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_308:
   \   0000004A   0x.... 0x....      BL       ?Subroutine7
   3159          
   3160              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_75:
   \   0000004E   0xEA5F 0x0800      MOVS     R8,R0
   3161              if (!p)
   \   00000052   0xD027             BEQ.N    ??AppS2wCmd_MdnsServiceReg_0
   3162              {
   3163                  return S2W_EINVAL;
   3164              }
   3165              len = strlen((const char *)p);
   \   00000054   0x.... 0x....      BL       strlen
   \   00000058   0x4681             MOV      R9,R0
   3166              mdnsSrvcParam.srvcType= &mdnsParamBuff[totalLen];
   \   0000005A   0xB2B6             UXTH     R6,R6
   \   0000005C   0x19F0             ADDS     R0,R6,R7
   \   0000005E   0x60E0             STR      R0,[R4, #+12]
   3167              strcpy((INT8 *)mdnsSrvcParam.srvcType, (const INT8 *)p);
   \   00000060   0x.... 0x....      BL       ?Subroutine43
   3168              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_307:
   \   00000064   0x.... 0x....      BL       ?Subroutine7
   3169          
   3170              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_74:
   \   00000068   0xEA5F 0x0800      MOVS     R8,R0
   3171              if (!p)
   \   0000006C   0xD01A             BEQ.N    ??AppS2wCmd_MdnsServiceReg_0
   3172              {
   3173                  return S2W_EINVAL;
   3174              }
   3175              len = strlen((const char *)p);
   \   0000006E   0x.... 0x....      BL       strlen
   \   00000072   0x4681             MOV      R9,R0
   3176              mdnsSrvcParam.proto = &mdnsParamBuff[totalLen];
   \   00000074   0xB2B6             UXTH     R6,R6
   \   00000076   0x19F0             ADDS     R0,R6,R7
   \   00000078   0x6120             STR      R0,[R4, #+16]
   3177              strcpy((INT8 *)mdnsSrvcParam.proto, (const INT8 *)p);
   \   0000007A   0x.... 0x....      BL       ?Subroutine43
   3178              totalLen += (len+1);
   3179              
   3180              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_306:
   \   0000007E   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_64:
   \   00000082   0xEA5F 0x0800      MOVS     R8,R0
   3181              if (!p)
   \   00000086   0xD00D             BEQ.N    ??AppS2wCmd_MdnsServiceReg_0
   3182              {
   3183                  return S2W_EINVAL;
   3184              }
   3185              len = strlen((const char *)p);
   \   00000088   0x.... 0x....      BL       strlen
   3186              mdnsSrvcParam.domain = &mdnsParamBuff[totalLen];
   \   0000008C   0xEB09 0x0006      ADD      R0,R9,R6
   \   00000090   0x1C40             ADDS     R0,R0,#+1
   \   00000092   0xB280             UXTH     R0,R0
   \   00000094   0x19C0             ADDS     R0,R0,R7
   \   00000096   0x6160             STR      R0,[R4, #+20]
   3187              strcpy((INT8 *)mdnsSrvcParam.domain, (const INT8 *)p);
   \   00000098   0x.... 0x....      BL       ?Subroutine43
   3188              totalLen += (len+1);
   3189          
   3190              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_305:
   \   0000009C   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_63:
   \   000000A0   0x0001             MOVS     R1,R0
   3191               if (!p)
   \   000000A2   0xD101             BNE.N    ??AppS2wCmd_MdnsServiceReg_1
   3192               {
   3193                   return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsServiceReg_0:
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0xE053             B.N      ??AppS2wCmd_MdnsServiceReg_2
   3194               }
   3195               AppS2wParse_Int(p, &param);
   \                     ??AppS2wCmd_MdnsServiceReg_1:
   \   000000A8   0x.... 0x....      BL       ?Subroutine17
   3196               mdnsSrvcParam.port = param;
   \                     ??CrossCallReturnLabel_206:
   \   000000AC   0x9800             LDR      R0,[SP, #+0]
   \   000000AE   0x8320             STRH     R0,[R4, #+24]
   3197               
   3198          	 mdnsSrvcParam.keyVal[KeyValIndx] = NULL;
   \   000000B0   0x61E5             STR      R5,[R4, #+28]
   3199          	 p = AppS2wParse_NextParamGet(&ptr);
   \   000000B2   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_62:
   \   000000B6   0x0002             MOVS     R2,R0
   3200               if (p)
   \   000000B8   0xD010             BEQ.N    ??AppS2wCmd_MdnsServiceReg_3
   3201               {
   3202                   
   3203          		param = 0;
   \   000000BA   0x9500             STR      R5,[SP, #+0]
   3204          		AppS2wParse_Int(p, &param);
   \   000000BC   0x.... 0x....      BL       ?Subroutine17
   3205          		if(1 == param)
   \                     ??CrossCallReturnLabel_205:
   \   000000C0   0x9800             LDR      R0,[SP, #+0]
   \   000000C2   0x2801             CMP      R0,#+1
   \   000000C4   0xD103             BNE.N    ??AppS2wCmd_MdnsServiceReg_4
   3206          		{
   3207          #ifdef ADK_PROV
   3208          		mdnsSrvcParam.keyVal[KeyValIndx] = S2W_SYS_MDNS_KEY_VAL;
   \   000000C6   0x.... 0x....      ADR.W    R0,`?<Constant "api=gs_sys_prov:1.0.0...">`
   \   000000CA   0x61E0             STR      R0,[R4, #+28]
   3209          		KeyValIndx++;
   \   000000CC   0xE001             B.N      ??AppS2wCmd_MdnsServiceReg_5
   3210          #else
   3211          		return S2W_EINVAL; 		 
   3212          #endif
   3213          		}
   3214          		else if(2 == param)
   \                     ??AppS2wCmd_MdnsServiceReg_4:
   \   000000CE   0x2802             CMP      R0,#+2
   \   000000D0   0xD104             BNE.N    ??AppS2wCmd_MdnsServiceReg_3
   3215          		{ 
   3216          #ifdef ADK_OTAFU
   3217          		//mdnsSrvcParam.keyVal[KeyValIndx] = S2W_OTAFU_MDNS_KEY_VAL;
   3218          		KeyValIndx++;
   \                     ??AppS2wCmd_MdnsServiceReg_5:
   \   000000D2   0x2501             MOVS     R5,#+1
   \   000000D4   0xE002             B.N      ??AppS2wCmd_MdnsServiceReg_3
   3219          #else
   3220          		return S2W_EINVAL; 		 
   3221          #endif
   3222          		}   
   3223               }
   3224          
   3225          	/* key=valuepairpresent*/
   3226          	KeyValPrsnt= 1;
   3227          	while(KeyValPrsnt)
   3228          	{
   3229          		p = AppS2wParse_NextParamGet(&ptr);
   3230          		if(p)
   3231          		{
   3232          			if(TRUE == AppS2wParse_MdnsKeyValidate(p,strlen((char*)p)))
   3233          			{
   3234          			   mdnsSrvcParam.keyVal[KeyValIndx] = (UINT8 *)p;
   3235          			   KeyValIndx++;
   \                     ??AppS2wCmd_MdnsServiceReg_6:
   \   000000D6   0x1C6D             ADDS     R5,R5,#+1
   \   000000D8   0x61FE             STR      R6,[R7, #+28]
   \   000000DA   0xB2ED             UXTB     R5,R5
   3236          			}
   \                     ??AppS2wCmd_MdnsServiceReg_3:
   \   000000DC   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_61:
   \   000000E0   0x0006             MOVS     R6,R0
   \   000000E2   0xEB04 0x0785      ADD      R7,R4,R5, LSL #+2
   \   000000E6   0xD007             BEQ.N    ??AppS2wCmd_MdnsServiceReg_7
   \   000000E8   0x.... 0x....      BL       strlen
   \   000000EC   0x4601             MOV      R1,R0
   \   000000EE   0x4630             MOV      R0,R6
   \   000000F0   0x.... 0x....      BL       AppS2wParse_MdnsKeyValidate
   \   000000F4   0x2801             CMP      R0,#+1
   \   000000F6   0xD0EE             BEQ.N    ??AppS2wCmd_MdnsServiceReg_6
   3237          			else
   3238          			{
   3239          				 KeyValPrsnt = 0;
   3240          				 mdnsSrvcParam.keyVal[KeyValIndx] = NULL;
   3241          			}
   3242          		}
   3243          		else
   3244          		{
   3245          			KeyValPrsnt = 0;
   3246          			mdnsSrvcParam.keyVal[KeyValIndx] = NULL;
   \                     ??AppS2wCmd_MdnsServiceReg_7:
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x61F8             STR      R0,[R7, #+28]
   3247          		}
   3248          	}
   3249             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   000000FC   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_60:
   \   00000100   0xB118             CBZ.N    R0,??AppS2wCmd_MdnsServiceReg_8
   3250              {
   3251              AppS2wParse_Int(p, &param);
   \   00000102   0x.... 0x....      BL       ?Subroutine17
   3252              mdnsSrvcParam.ttl = param;
   \                     ??CrossCallReturnLabel_204:
   \   00000106   0x9800             LDR      R0,[SP, #+0]
   \   00000108   0xE000             B.N      ??AppS2wCmd_MdnsServiceReg_9
   3253              }
   3254              else
   3255              	mdnsSrvcParam.ttl =  S2W_DFLT_MDNS_TTL; 
   \                     ??AppS2wCmd_MdnsServiceReg_8:
   \   0000010A   0x200A             MOVS     R0,#+10
   \                     ??AppS2wCmd_MdnsServiceReg_9:
   \   0000010C   0x6360             STR      R0,[R4, #+52]
   3256              
   3257              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000010E   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_59:
   \   00000112   0xB110             CBZ.N    R0,??AppS2wCmd_MdnsServiceReg_10
   3258              {
   3259              	AppS2wParse_Int(p, &param);       
   \   00000114   0x.... 0x....      BL       ?Subroutine17
   3260              	mdnsSrvcParam.scope = (UINT8)param;
   \                     ??CrossCallReturnLabel_203:
   \   00000118   0x9800             LDR      R0,[SP, #+0]
   3261              }
   3262              else
   3263              	mdnsSrvcParam.scope = S2W_DFLT_MDNS_SCOPE;    
   \                     ??AppS2wCmd_MdnsServiceReg_10:
   \   0000011A   0x76A0             STRB     R0,[R4, #+26]
   3264              
   3265             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000011C   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_58:
   \   00000120   0xB118             CBZ.N    R0,??AppS2wCmd_MdnsServiceReg_11
   3266              {
   3267          
   3268              AppS2wParse_Int(p, &param);
   \   00000122   0x.... 0x....      BL       ?Subroutine17
   3269              mdnsSrvcParam.conflctDetect = (UINT8)param;
   \                     ??CrossCallReturnLabel_202:
   \   00000126   0x9800             LDR      R0,[SP, #+0]
   \   00000128   0xE000             B.N      ??AppS2wCmd_MdnsServiceReg_12
   3270              }
   3271             else
   3272              	mdnsSrvcParam.conflctDetect = S2W_DFLT_MDNS_CONFLICT_DETECT;
   \                     ??AppS2wCmd_MdnsServiceReg_11:
   \   0000012A   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_MdnsServiceReg_12:
   \   0000012C   0xF884 0x0031      STRB     R0,[R4, #+49]
   3273          
   3274              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000130   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_57:
   \   00000134   0xB110             CBZ.N    R0,??AppS2wCmd_MdnsServiceReg_13
   3275              {    
   3276              	AppS2wParse_Int(p, &param);
   \   00000136   0x.... 0x....      BL       ?Subroutine17
   3277              	mdnsSrvcParam.autoCorrect = (UINT8)param;
   \                     ??CrossCallReturnLabel_201:
   \   0000013A   0x9800             LDR      R0,[SP, #+0]
   3278              }
   3279              else
   3280              	mdnsSrvcParam.autoCorrect = S2W_DFLT_MDNS_AUTOCORRECT;
   \                     ??AppS2wCmd_MdnsServiceReg_13:
   \   0000013C   0xF884 0x0030      STRB     R0,[R4, #+48]
   3281                 
   3282               AppS2wHal_MdnsServiceReg(&mdnsSrvcParam);
   \   00000140   0x4620             MOV      R0,R4
   \   00000142   0x.... 0x....      BL       AppS2wHal_MdnsServiceReg
   3283               mdnsATConfig =1;
   \   00000146   0x.... 0x....      LDR.W    R0,??DataTable179
   \   0000014A   0x2101             MOVS     R1,#+1
   \   0000014C   0x7041             STRB     R1,[R0, #+1]
   3284              return S2W_SUCCESS;
   \   0000014E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_MdnsServiceReg_2:
   \   00000150   0xE8BD 0x83FE      POP      {R1-R9,PC}       ;; return
   3285          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0x4641             MOV      R1,R8
   \   00000002   0x.... 0x....      B.W      strcpy
   3286          
   3287          

   \                                 In section .text, align 2, keep-with-next
   3288          PUBLIC UINT8
   3289          AppS2wCmd_MdnsHostNmDeReg(UINT8 *ptr)
   3290          {
   \                     AppS2wCmd_MdnsHostNmDeReg:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   3291              UINT8 *p;
   3292              UINT16 len;
   3293              UINT16 totalLen = 0;
   3294              //UINT8 status;
   3295              
   3296              p = AppS2wParse_NextParamGet(&ptr);
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000008   0x0004             MOVS     R4,R0
   3297              if (!p)
   \   0000000A   0xD016             BEQ.N    ??AppS2wCmd_MdnsHostNmDeReg_0
   3298              {
   3299                  return S2W_EINVAL;
   3300              }
   3301              len = strlen((const char *)p);
   \   0000000C   0x.... 0x....      BL       strlen
   3302              mdnsHnParam.hostname = mdnsParamBuff;
   \   00000010   0x.... 0x....      LDR.W    R6,??DataTable179_2
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable179_3
   \   00000018   0x6037             STR      R7,[R6, #+0]
   3303              if(0 != len)
   \   0000001A   0xB285             UXTH     R5,R0
   \   0000001C   0xB925             CBNZ.N   R5,??AppS2wCmd_MdnsHostNmDeReg_1
   3304              {
   3305                  strcpy((INT8 *)mdnsHnParam.hostname, (const char *)p);
   3306              }
   3307              else
   3308              {/*Read the default system name*/
   3309                 len = strlen((const INT8 *)s2wCurrent.hostName);
   \   0000001E   0x.... 0x....      LDR.W    R4,??DataTable179_4
   \   00000022   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_0:
   \   00000026   0x4605             MOV      R5,R0
   3310                 strcpy((INT8 *)mdnsHnParam.hostname, (const char *)s2wCurrent.hostName);
   \                     ??AppS2wCmd_MdnsHostNmDeReg_1:
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       strcpy
   3311              }
   3312              totalLen += (len+1);
   3313          
   3314              p = AppS2wParse_NextParamGet(&ptr);
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000036   0x0004             MOVS     R4,R0
   3315              if (!p)
   \   00000038   0xD101             BNE.N    ??AppS2wCmd_MdnsHostNmDeReg_2
   3316              {
   3317                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsHostNmDeReg_0:
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBDF2             POP      {R1,R4-R7,PC}
   3318              }
   3319              len = strlen((const char *)p);
   \                     ??AppS2wCmd_MdnsHostNmDeReg_2:
   \   0000003E   0x.... 0x....      BL       strlen
   3320              mdnsHnParam.domain = &mdnsParamBuff[totalLen];
   \   00000042   0x1C68             ADDS     R0,R5,#+1
   \   00000044   0xB280             UXTH     R0,R0
   \   00000046   0x19C0             ADDS     R0,R0,R7
   \   00000048   0x6070             STR      R0,[R6, #+4]
   3321              strcpy((INT8 *)mdnsHnParam.domain, (const char*)p);
   \   0000004A   0x.... 0x....      BL       ??Subroutine25_0
   3322              totalLen += (len+1);
   3323          
   3324              AppS2wHal_MdnsHostNameDereg(&mdnsHnParam);
   \                     ??CrossCallReturnLabel_254:
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       AppS2wHal_MdnsHostNameDereg
   3325          
   3326              return S2W_SUCCESS;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   3327          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0x9004             STR      R0,[SP, #+16]
   \                     ??Subroutine25_0:
   \   00000002   0x4621             MOV      R1,R4
   \   00000004   0x.... 0x....      B.W      strcpy
   3328          

   \                                 In section .text, align 2, keep-with-next
   3329          PUBLIC UINT8
   3330          AppS2wCmd_MdnsSrvDeReg(UINT8 *ptr)
   3331          {
   \                     AppS2wCmd_MdnsSrvDeReg:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   3332            UINT8 *p;
   3333              UINT16 len;
   3334              UINT16 totalLen = 0;
   3335             // UINT8 status;
   3336              //UINT32 param = 0;
   3337             // UINT8  KeyValPrsnt = 0;
   3338             // UINT8  KeyValIndx=0;
   3339          
   3340              p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_145:
   \   0000000A   0x0004             MOVS     R4,R0
   3341              if (!p)
   \   0000000C   0xD038             BEQ.N    ??AppS2wCmd_MdnsSrvDeReg_0
   3342              {
   3343                  return S2W_EINVAL;
   3344              }
   3345              len = strlen((const char *)p);
   \   0000000E   0x.... 0x....      BL       strlen
   3346              mdnsSrvcParam.srvcInstance = mdnsParamBuff;
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable181
   \   00000016   0x.... 0x....      LDR.W    R6,??DataTable179_3
   \   0000001A   0x602E             STR      R6,[R5, #+0]
   \   0000001C   0x4607             MOV      R7,R0
   3347              strcpy((INT8 *)mdnsSrvcParam.srvcInstance, (const INT8 *)p);
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x4630             MOV      R0,R6
   \   00000022   0x.... 0x....      BL       strcpy
   3348              totalLen += (len+1);
   \   00000026   0x1C7F             ADDS     R7,R7,#+1
   3349              
   3350              p = AppS2wParse_NextParamGet(&ptr);
   \   00000028   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_144:
   \   0000002C   0xEA5F 0x0800      MOVS     R8,R0
   3351              if (!p)
   \   00000030   0xD026             BEQ.N    ??AppS2wCmd_MdnsSrvDeReg_0
   3352              {
   3353                  return S2W_EINVAL;
   3354              }
   3355              len = strlen((const char *)p);
   \   00000032   0x.... 0x....      BL       strlen
   \   00000036   0x4604             MOV      R4,R0
   3356              mdnsSrvcParam.subType = &mdnsParamBuff[totalLen];;
   \   00000038   0xB2BF             UXTH     R7,R7
   \   0000003A   0x19B8             ADDS     R0,R7,R6
   \   0000003C   0x60A8             STR      R0,[R5, #+8]
   3357              strcpy((INT8 *)mdnsSrvcParam.subType, (const INT8 *)p);
   \   0000003E   0x.... 0x....      BL       ?Subroutine43
   3358              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_304:
   \   00000042   0x.... 0x....      BL       ?Subroutine13
   3359          
   3360              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_147:
   \   00000046   0xEA5F 0x0800      MOVS     R8,R0
   3361              if (!p)
   \   0000004A   0xD019             BEQ.N    ??AppS2wCmd_MdnsSrvDeReg_0
   3362              {
   3363                  return S2W_EINVAL;
   3364              }
   3365              len = strlen((const char *)p);
   \   0000004C   0x.... 0x....      BL       strlen
   \   00000050   0x4604             MOV      R4,R0
   3366              mdnsSrvcParam.srvcType= &mdnsParamBuff[totalLen];
   \   00000052   0xB2BF             UXTH     R7,R7
   \   00000054   0x19B8             ADDS     R0,R7,R6
   \   00000056   0x60E8             STR      R0,[R5, #+12]
   3367              strcpy((INT8 *)mdnsSrvcParam.srvcType, (const INT8 *)p);
   \   00000058   0x.... 0x....      BL       ?Subroutine43
   3368              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_303:
   \   0000005C   0x.... 0x....      BL       ?Subroutine13
   3369          
   3370              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_146:
   \   00000060   0xEA5F 0x0800      MOVS     R8,R0
   3371              if (!p)
   \   00000064   0xD00C             BEQ.N    ??AppS2wCmd_MdnsSrvDeReg_0
   3372              {
   3373                  return S2W_EINVAL;
   3374              }
   3375              len = strlen((const char *)p);
   \   00000066   0x.... 0x....      BL       strlen
   \   0000006A   0x4604             MOV      R4,R0
   3376              mdnsSrvcParam.proto = &mdnsParamBuff[totalLen];
   \   0000006C   0xB2BF             UXTH     R7,R7
   \   0000006E   0x19B8             ADDS     R0,R7,R6
   \   00000070   0x6128             STR      R0,[R5, #+16]
   3377              strcpy((INT8 *)mdnsSrvcParam.proto, (const INT8 *)p);
   \   00000072   0x.... 0x....      BL       ?Subroutine43
   3378              totalLen += (len+1);
   3379              
   3380              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_302:
   \   00000076   0x.... 0x....      BL       ??Subroutine13_0
   \                     ??CrossCallReturnLabel_143:
   \   0000007A   0xEA5F 0x0800      MOVS     R8,R0
   3381              if (!p)
   \   0000007E   0xD101             BNE.N    ??AppS2wCmd_MdnsSrvDeReg_1
   3382              {
   3383                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsSrvDeReg_0:
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0xE00C             B.N      ??AppS2wCmd_MdnsSrvDeReg_2
   3384              }
   3385              len = strlen((const char *)p);
   \                     ??AppS2wCmd_MdnsSrvDeReg_1:
   \   00000084   0x.... 0x....      BL       strlen
   3386              mdnsSrvcParam.domain = &mdnsParamBuff[totalLen];
   \   00000088   0x19E0             ADDS     R0,R4,R7
   \   0000008A   0x1C40             ADDS     R0,R0,#+1
   \   0000008C   0xB280             UXTH     R0,R0
   \   0000008E   0x1980             ADDS     R0,R0,R6
   \   00000090   0x6168             STR      R0,[R5, #+20]
   3387              strcpy((INT8 *)mdnsSrvcParam.domain, (const INT8 *)p);
   \   00000092   0x.... 0x....      BL       ?Subroutine43
   3388              totalLen += (len+1);
   3389          
   3390              AppS2wHal_MdnsServiceDereg(&mdnsSrvcParam);
   \                     ??CrossCallReturnLabel_301:
   \   00000096   0x4628             MOV      R0,R5
   \   00000098   0x.... 0x....      BL       AppS2wHal_MdnsServiceDereg
   3391              
   3392              return S2W_SUCCESS;
   \   0000009C   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_MdnsSrvDeReg_2:
   \   0000009E   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   3393              
   3394          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x1C60             ADDS     R0,R4,#+1
   \   00000002   0x19C7             ADDS     R7,R0,R7
   \                     ??Subroutine13_0:
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   3395          

   \                                 In section .text, align 2, keep-with-next
   3396          PUBLIC UINT8
   3397          AppS2wCmd_MdnsAnnounceAll(UINT8 *ptr)
   3398          {
   \                     AppS2wCmd_MdnsAnnounceAll:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0CD             SUB      SP,SP,#+308
   3399            // check the config paramaters are not populated then populate from dflt
   3400            APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();  
   3401            UINT8 macaddr[GSN_MAC_ADDR_LEN],grpProvUuid[17] = {'g','a','i','n','s', 'p', 'a', 'n','_'};
   \   00000006   0xA808             ADD      R0,SP,#+32
   \   00000008   0x.... 0x....      ADR.W    R1,`?<Constant {103, 97, 105, 110, 115, 112, 97, 1`
   \   0000000C   0x2214             MOVS     R2,#+20
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
   3402            INT32 grpMdnsPort =80;
   3403            S2w_macAddrRTCGet(macaddr);
   \   00000012   0xA806             ADD      R0,SP,#+24
   \   00000014   0x.... 0x....      BL       S2w_macAddrRTCGet
   3404            AppS2wParse_IntToStr(&macaddr[3],&grpProvUuid[9],3);
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0xF10D 0x0129      ADD      R1,SP,#+41
   \   0000001E   0xF10D 0x001B      ADD      R0,SP,#+27
   \   00000022   0x.... 0x....      BL       AppS2wParse_IntToStr
   3405            grpProvUuid[15] = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x002F      STRB     R0,[SP, #+47]
   3406          
   3407            if( mdnsATConfig != 1)
   \   0000002C   0x.... 0x....      LDR.W    R4,??DataTable179
   \   00000030   0x7860             LDRB     R0,[R4, #+1]
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD063             BEQ.N    ??AppS2wCmd_MdnsAnnounceAll_0
   3408            { // register with default parameter
   3409            		// register with default parameter
   3410          	  UINT8 tmpBuff[255],len;
   3411          
   3412          	  memset(tmpBuff,0,255);
   \   00000036   0x.... 0x....      BL       ?Subroutine46
   3413          		if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP || pAppRtcLtchInfo->grpProvVerify == 1)
   \                     ??CrossCallReturnLabel_317:
   \   0000003A   0x.... 0x....      LDR.W    R9,??DataTable178_2
   \   0000003E   0x.... 0x....      ADR.W    R1,`?<Constant "%s,%s,%d,%d,%d,%d">`
   \   00000042   0xF899 0x0004      LDRB     R0,[R9, #+4]
   \   00000046   0x.... 0x....      ADR.W    R8,`?<Constant "gainspan">`
   \   0000004A   0x.... 0x....      ADR.W    R7,`?<Constant "local">`
   \   0000004E   0x.... 0x....      LDR.W    R5,??DataTable185  ;; 0x4101009c
   \   00000052   0x2806             CMP      R0,#+6
   \   00000054   0xBF1C             ITT      NE 
   \   00000056   0x7828             LDRBNE   R0,[R5, #+0]
   \   00000058   0x2801             CMPNE    R0,#+1
   \   0000005A   0xD103             BNE.N    ??AppS2wCmd_MdnsAnnounceAll_1
   3414          	   	{
   3415          			len = sprintf((char*)tmpBuff,"%s,%s,%d,%d,%d,%d",
   3416                              grpProvUuid,S2W_DFLT_MDNS_DOMAIN_NAME,S2W_DFLT_MDNS_TTL,
   3417                              S2W_DFLT_MDNS_SCOPE,S2W_DFLT_MDNS_CONFLICT_DETECT,
   3418                              S2W_DFLT_MDNS_AUTOCORRECT);
   \   0000005C   0x.... 0x....      BL       ?Subroutine24
   3419          	   	}
   \                     ??CrossCallReturnLabel_249:
   \   00000060   0xAA08             ADD      R2,SP,#+32
   \   00000062   0xE002             B.N      ??AppS2wCmd_MdnsAnnounceAll_2
   3420          	   	else
   3421          	   	{
   3422          	   		/* use configuration from builder*/
   3423          			len = sprintf((char*)tmpBuff,"%s,%s,%d,%d,%d,%d",
   3424          				   S2W_DFLT_MDNS_HOST_NAME,S2W_DFLT_MDNS_DOMAIN_NAME,S2W_DFLT_MDNS_TTL,
   3425          				   S2W_DFLT_MDNS_SCOPE,S2W_DFLT_MDNS_CONFLICT_DETECT,
   3426          				   S2W_DFLT_MDNS_AUTOCORRECT);
   \                     ??AppS2wCmd_MdnsAnnounceAll_1:
   \   00000064   0x.... 0x....      BL       ?Subroutine24
   3427          	   	}
   \                     ??CrossCallReturnLabel_250:
   \   00000068   0x4642             MOV      R2,R8
   \                     ??AppS2wCmd_MdnsAnnounceAll_2:
   \   0000006A   0x2000             MOVS     R0,#+0
   \   0000006C   0x9001             STR      R0,[SP, #+4]
   \   0000006E   0x200A             MOVS     R0,#+10
   \   00000070   0x.... 0x....      BL       ?Subroutine30
   3428                 	tmpBuff[len]='\0';
   \                     ??CrossCallReturnLabel_268:
   \   00000074   0xAE0D             ADD      R6,SP,#+52
   \   00000076   0xB2C0             UXTB     R0,R0
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x5581             STRB     R1,[R0, R6]
   3429                 AppS2wCmd_MdnsHostNameReg(tmpBuff);
   \   0000007C   0xA80D             ADD      R0,SP,#+52
   \   0000007E   0x.... 0x....      BL       AppS2wCmd_MdnsHostNameReg
   3430          
   3431                	/* service registration */
   3432                 	memset(tmpBuff,0,255);
   \   00000082   0x.... 0x....      BL       ?Subroutine46
   3433                 	if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP) // for grp provision need to use ssl port
   \                     ??CrossCallReturnLabel_316:
   \   00000086   0xF899 0xE004      LDRB     LR,[R9, #+4]
   \   0000008A   0x.... 0x....      ADR.W    R1,`?<Constant "%s,%s,%s,%s,%s,%d,%d,%s">`
   \   0000008E   0x.... 0x....      ADR.W    R0,`?<Constant "_http">`
   \   00000092   0x.... 0x....      ADR.W    R2,`?<Constant "_tcp">`
   \   00000096   0x.... 0x....      ADR.W    R12,`?<Constant "api=gs_sys_prov:1.0.1...">`
   \   0000009A   0x....             ADR.N    R3,??DataTable175_1  ;; ""
   \   0000009C   0xF1BE 0x0F06      CMP      LR,#+6
   \   000000A0   0xD106             BNE.N    ??AppS2wCmd_MdnsAnnounceAll_3
   3434                 	{
   3435                 		/* group provision start*/
   3436          			grpMdnsPort = 443;
   3437          		   	len = sprintf((char*)tmpBuff,"%s,%s,%s,%s,%s,%d,%d,%s",
   3438                              S2W_DFLT_MDNS_SER_INST_NAME,S2W_DFLT_MDNS_SER_SUB_TYPE,S2W_DFLT_MDNS_SER_TYPE,
   3439                              S2W_DFLT_MDNS_PROTO,S2W_DFLT_MDNS_DOMAIN_NAME,grpMdnsPort,S2W_DFLT_MDNS_KEY,
   3440                              S2W_DFLT_MDNS_TXT_RECORD );
   \   000000A2   0x2500             MOVS     R5,#+0
   \   000000A4   0x9504             STR      R5,[SP, #+16]
   \   000000A6   0xF8CD 0xC014      STR      R12,[SP, #+20]
   \   000000AA   0xF240 0x15BB      MOVW     R5,#+443
   \   000000AE   0xE017             B.N      ??AppS2wCmd_MdnsAnnounceAll_4
   3441          	   		
   3442          	   	}
   3443          	   	else if(pAppRtcLtchInfo->grpProvVerify == 1)
   \                     ??AppS2wCmd_MdnsAnnounceAll_3:
   \   000000B0   0xF895 0xE000      LDRB     LR,[R5, #+0]
   \   000000B4   0xF8CD 0xC014      STR      R12,[SP, #+20]
   \   000000B8   0xF1BE 0x0F01      CMP      LR,#+1
   \   000000BC   0xD10D             BNE.N    ??AppS2wCmd_MdnsAnnounceAll_5
   3444          	   	{	   		
   3445          	   		/* group provision verification*/
   3446                		len = sprintf((char*)tmpBuff,"%s,%s,%s,%s,%s,%d,%d,%s",
   3447          				  	grpProvUuid,S2W_DFLT_MDNS_SER_SUB_TYPE,S2W_GRPPROV_VERIFY_MDNSSER_TYPE,
   3448                              S2W_DFLT_MDNS_PROTO,S2W_DFLT_MDNS_DOMAIN_NAME,grpMdnsPort,S2W_DFLT_MDNS_KEY,
   3449                              S2W_DFLT_MDNS_TXT_RECORD );
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x9004             STR      R0,[SP, #+16]
   \   000000C2   0x2050             MOVS     R0,#+80
   \   000000C4   0x9003             STR      R0,[SP, #+12]
   \   000000C6   0x9702             STR      R7,[SP, #+8]
   \   000000C8   0x9201             STR      R2,[SP, #+4]
   \   000000CA   0xAA08             ADD      R2,SP,#+32
   \   000000CC   0x.... 0x....      ADR.W    R0,`?<Constant "_guid">`
   \   000000D0   0x.... 0x....      BL       ?Subroutine30
   3450          			pAppRtcLtchInfo->grpProvVerify = 0;			
   \                     ??CrossCallReturnLabel_267:
   \   000000D4   0x2100             MOVS     R1,#+0
   \   000000D6   0x7029             STRB     R1,[R5, #+0]
   \   000000D8   0xE009             B.N      ??CrossCallReturnLabel_266
   3451          	   	}
   3452          	   	else
   3453          	   	{
   3454          	   		/* use configuration from builder*/	
   3455          	   		len = sprintf((char*)tmpBuff,"%s,%s,%s,%s,%s,%d,%d,%s",
   3456          					S2W_DFLT_MDNS_SER_INST_NAME,S2W_DFLT_MDNS_SER_SUB_TYPE,S2W_DFLT_MDNS_SER_TYPE,
   3457          					S2W_DFLT_MDNS_PROTO,S2W_DFLT_MDNS_DOMAIN_NAME,S2W_DFLT_MDNS_PORT,S2W_DFLT_MDNS_KEY,
   3458          					S2W_DFLT_MDNS_TXT_RECORD );
   \                     ??AppS2wCmd_MdnsAnnounceAll_5:
   \   000000DA   0x2500             MOVS     R5,#+0
   \   000000DC   0x9504             STR      R5,[SP, #+16]
   \   000000DE   0x2550             MOVS     R5,#+80
   \                     ??AppS2wCmd_MdnsAnnounceAll_4:
   \   000000E0   0x9503             STR      R5,[SP, #+12]
   \   000000E2   0x9702             STR      R7,[SP, #+8]
   \   000000E4   0x9201             STR      R2,[SP, #+4]
   \   000000E6   0x9000             STR      R0,[SP, #+0]
   \   000000E8   0x4642             MOV      R2,R8
   3459          	   	}
   \   000000EA   0x.... 0x....      BL       ??Subroutine30_0
   3460          		
   3461                 	tmpBuff[len]='\0';
   \                     ??CrossCallReturnLabel_266:
   \   000000EE   0xB2C0             UXTB     R0,R0
   \   000000F0   0x2100             MOVS     R1,#+0
   \   000000F2   0x5581             STRB     R1,[R0, R6]
   3462                 	AppS2wCmd_MdnsServiceReg(tmpBuff);
   \   000000F4   0xA80D             ADD      R0,SP,#+52
   \   000000F6   0x.... 0x....      BL       AppS2wCmd_MdnsServiceReg
   3463                 	mdnsATConfig = 0;
   \   000000FA   0x2000             MOVS     R0,#+0
   \   000000FC   0x7060             STRB     R0,[R4, #+1]
   3464            	}
   3465            
   3466            if(GsnMdns_AnnounceAll(&s2wappMainTaskCtxt->mdns) != S2W_SUCCESS)
   \                     ??AppS2wCmd_MdnsAnnounceAll_0:
   \   000000FE   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_332:
   \   00000102   0xF500 0x40D8      ADD      R0,R0,#+27648
   \   00000106   0x3030             ADDS     R0,R0,#+48
   \   00000108   0x.... 0x....      BL       GsnMdns_AnnounceAll
   \   0000010C   0xB100             CBZ.N    R0,??AppS2wCmd_MdnsAnnounceAll_6
   3467            {
   3468              return S2W_FAILURE;
   \   0000010E   0x2001             MOVS     R0,#+1
   3469            }
   3470            return S2W_SUCCESS;
   \                     ??AppS2wCmd_MdnsAnnounceAll_6:
   \   00000110   0xB04D             ADD      SP,SP,#+308
   \   00000112   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   3471            
   3472          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   0x22FF             MOVS     R2,#+255
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA80D             ADD      R0,SP,#+52
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \                     ??Subroutine30_0:
   \   00000002   0xA80D             ADD      R0,SP,#+52
   \   00000004   0x.... 0x....      B.W      sprintf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9003             STR      R0,[SP, #+12]
   \   00000004   0x463B             MOV      R3,R7
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x9002             STR      R0,[SP, #+8]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   0x....             LDR.N    R0,??DataTable196
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR
   3473          

   \                                 In section .text, align 2, keep-with-next
   3474          PUBLIC UINT8
   3475          AppS2wCmd_MdnsAnnounce(UINT8 *ptr)
   3476          {
   \                     AppS2wCmd_MdnsAnnounce:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   3477              UINT8 *p;
   3478              UINT16 len;
   3479              UINT16 totalLen = 0;
   3480             // UINT8 status;
   3481              UINT32 param = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   3482             // UINT8  KeyValPrsnt = 0;
   3483             // UINT8  KeyValIndx=0;
   3484              S2W_MDNS_ANNOUNCE_PARAM_T mdnsAnnceParam;
   3485             
   3486              p = AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_125:
   \   0000000C   0x0004             MOVS     R4,R0
   3487              if (!p)
   \   0000000E   0xD036             BEQ.N    ??AppS2wCmd_MdnsAnnounce_0
   3488              {
   3489                  return S2W_EINVAL;
   3490              }
   3491              AppS2wParse_Int(p, &param);
   \   00000010   0x.... 0x....      BL       ?Subroutine17
   3492              mdnsAnnceParam.type = param;
   \                     ??CrossCallReturnLabel_200:
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0xF88D 0x0004      STRB     R0,[SP, #+4]
   3493              
   3494              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001A   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_124:
   \   0000001E   0x0004             MOVS     R4,R0
   3495              if (!p)
   \   00000020   0xD02D             BEQ.N    ??AppS2wCmd_MdnsAnnounce_0
   3496              {
   3497                  return S2W_EINVAL;
   3498              }
   3499              len = strlen((const char *)p);
   \   00000022   0x.... 0x....      BL       strlen
   \   00000026   0x4606             MOV      R6,R0
   3500              mdnsAnnceParam.srvceName = mdnsParamBuff;
   \   00000028   0x.... 0x....      LDR.W    R5,??DataTable179_3
   \   0000002C   0x9502             STR      R5,[SP, #+8]
   3501              strcpy((INT8 *)mdnsAnnceParam.srvceName, (const INT8 *)p);
   \   0000002E   0x4621             MOV      R1,R4
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0x.... 0x....      BL       strcpy
   3502              totalLen += (len+1);
   \   00000036   0x1C76             ADDS     R6,R6,#+1
   3503              
   3504              p = AppS2wParse_NextParamGet(&ptr);
   \   00000038   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_123:
   \   0000003C   0x0004             MOVS     R4,R0
   3505              if (!p)
   \   0000003E   0xD01E             BEQ.N    ??AppS2wCmd_MdnsAnnounce_0
   3506              {
   3507                  return S2W_EINVAL;
   3508              }
   3509              len = strlen((const char *)p);
   \   00000040   0x.... 0x....      BL       strlen
   \   00000044   0x.... 0x....      BL       ?Subroutine3
   3510              mdnsAnnceParam.domain = &mdnsParamBuff[totalLen];
   3511              strcpy((INT8 *)mdnsAnnceParam.domain, (const INT8 *)p);
   3512              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_15:
   \   00000048   0x.... 0x....      BL       ?Subroutine11
   3513              
   3514              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_128:
   \   0000004C   0x0004             MOVS     R4,R0
   3515              if (!p)
   \   0000004E   0xD016             BEQ.N    ??AppS2wCmd_MdnsAnnounce_0
   3516              {
   3517                  return S2W_EINVAL;
   3518              }
   3519              len = strlen((const char *)p);
   \   00000050   0x.... 0x....      BL       strlen
   \   00000054   0x4607             MOV      R7,R0
   3520              mdnsAnnceParam.srvceSubType = &mdnsParamBuff[totalLen];;
   \   00000056   0xB2B6             UXTH     R6,R6
   \   00000058   0x1970             ADDS     R0,R6,R5
   \   0000005A   0x.... 0x....      BL       ?Subroutine25
   3521              strcpy((INT8 *)mdnsAnnceParam.srvceSubType, (const INT8 *)p);
   3522              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_256:
   \   0000005E   0x.... 0x....      BL       ?Subroutine11
   3523          
   3524              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_127:
   \   00000062   0x0004             MOVS     R4,R0
   3525              if (!p)
   \   00000064   0xD00B             BEQ.N    ??AppS2wCmd_MdnsAnnounce_0
   3526              {
   3527                  return S2W_EINVAL;
   3528              }
   3529              len = strlen((const char *)p);
   \   00000066   0x.... 0x....      BL       strlen
   \   0000006A   0x4607             MOV      R7,R0
   3530              mdnsAnnceParam.srvceType= &mdnsParamBuff[totalLen];
   \   0000006C   0xB2B6             UXTH     R6,R6
   \   0000006E   0x1970             ADDS     R0,R6,R5
   \   00000070   0x9005             STR      R0,[SP, #+20]
   3531              strcpy((INT8 *)mdnsAnnceParam.srvceType, (const INT8 *)p);
   \   00000072   0x.... 0x....      BL       ??Subroutine25_0
   3532              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_253:
   \   00000076   0x.... 0x....      BL       ?Subroutine11
   3533          
   3534              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_126:
   \   0000007A   0x0004             MOVS     R4,R0
   3535              if (!p)
   \   0000007C   0xD101             BNE.N    ??AppS2wCmd_MdnsAnnounce_1
   3536              {
   3537                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsAnnounce_0:
   \   0000007E   0x2002             MOVS     R0,#+2
   \   00000080   0xE009             B.N      ??AppS2wCmd_MdnsAnnounce_2
   3538              }
   3539              len = strlen((const char *)p);
   \                     ??AppS2wCmd_MdnsAnnounce_1:
   \   00000082   0x.... 0x....      BL       strlen
   3540              mdnsAnnceParam.srvceProto = &mdnsParamBuff[totalLen];
   \   00000086   0xB2B6             UXTH     R6,R6
   \   00000088   0x1970             ADDS     R0,R6,R5
   \   0000008A   0x9006             STR      R0,[SP, #+24]
   3541              strcpy((INT8 *)mdnsAnnceParam.srvceProto, (const INT8 *)p);
   \   0000008C   0x.... 0x....      BL       ??Subroutine25_0
   3542              totalLen += (len+1);
   3543              
   3544              
   3545              
   3546              return AppS2wHal_MdnsAnnounce(&mdnsAnnceParam);
   \                     ??CrossCallReturnLabel_252:
   \   00000090   0xA801             ADD      R0,SP,#+4
   \   00000092   0x.... 0x....      BL       AppS2wHal_MdnsAnnounce
   \                     ??AppS2wCmd_MdnsAnnounce_2:
   \   00000096   0xB009             ADD      SP,SP,#+36
   \   00000098   0xBDF0             POP      {R4-R7,PC}       ;; return
   3547          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x4607             MOV      R7,R0
   \   00000002   0xB2B6             UXTH     R6,R6
   \   00000004   0x1970             ADDS     R0,R6,R5
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x4621             MOV      R1,R4
   \   0000000A   0x.... 0x....      B.W      strcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x1C78             ADDS     R0,R7,#+1
   \   00000002   0x1986             ADDS     R6,R0,R6
   \                     ??Subroutine11_0:
   \   00000004   0xA808             ADD      R0,SP,#+32
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   3548          
   3549          

   \                                 In section .text, align 2, keep-with-next
   3550          PUBLIC UINT8
   3551          AppS2wCmd_MdnsSrvcDiscover(UINT8 *ptr)
   3552          {
   \                     AppS2wCmd_MdnsSrvcDiscover:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   3553              UINT8 *p;
   3554              UINT16 len;
   3555              UINT16 totalLen = 0;
   3556              UINT32 val;
   3557              S2W_MDNS_SRVCDISCVR_PARAM_T mdnsSrvDscr;
   3558              
   3559              //S2w_Printf("\r\nAppS2wCmd_MdnsSrvcDiscover\r\n");
   3560              
   3561                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_113:
   \   00000008   0x0004             MOVS     R4,R0
   3562              if (!p)
   \   0000000A   0xD024             BEQ.N    ??AppS2wCmd_MdnsSrvcDiscover_0
   3563              {
   3564                  return S2W_EINVAL;
   3565              }
   3566              len = strlen((const char *)p);
   \   0000000C   0x.... 0x....      BL       strlen
   \   00000010   0x4606             MOV      R6,R0
   3567              
   3568              mdnsSrvDscr.srvcSubType = &mdnsParamBuff[totalLen];
   \   00000012   0x.... 0x....      LDR.W    R5,??DataTable179_3
   \   00000016   0x9501             STR      R5,[SP, #+4]
   3569              strcpy((INT8 *)mdnsSrvDscr.srvcSubType, (const INT8 *)p);
   \   00000018   0x4621             MOV      R1,R4
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       strcpy
   3570              totalLen += (len+1);
   \   00000020   0x1C76             ADDS     R6,R6,#+1
   3571          
   3572              p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_112:
   \   00000026   0x0004             MOVS     R4,R0
   3573              if (!p)
   \   00000028   0xD015             BEQ.N    ??AppS2wCmd_MdnsSrvcDiscover_0
   3574              {
   3575                  return S2W_EINVAL;
   3576              }
   3577              len = strlen((const char *)p);
   \   0000002A   0x.... 0x....      BL       strlen
   \   0000002E   0x4607             MOV      R7,R0
   3578              mdnsSrvDscr.srvcType= &mdnsParamBuff[totalLen];
   \   00000030   0xB2B6             UXTH     R6,R6
   \   00000032   0x1970             ADDS     R0,R6,R5
   \   00000034   0x9002             STR      R0,[SP, #+8]
   3579              strcpy((INT8 *)mdnsSrvDscr.srvcType, (const INT8 *)p);
   \   00000036   0x.... 0x....      BL       ??Subroutine25_0
   3580              totalLen += (len+1);
   \                     ??CrossCallReturnLabel_251:
   \   0000003A   0x1C78             ADDS     R0,R7,#+1
   \   0000003C   0x1986             ADDS     R6,R0,R6
   3581          
   3582              p = AppS2wParse_NextParamGet(&ptr);
   \   0000003E   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_111:
   \   00000042   0x0004             MOVS     R4,R0
   3583              if (!p)
   \   00000044   0xD007             BEQ.N    ??AppS2wCmd_MdnsSrvcDiscover_0
   3584              {
   3585                  return S2W_EINVAL;
   3586              }
   3587              len = strlen((const char *)p);
   \   00000046   0x.... 0x....      BL       strlen
   \   0000004A   0x.... 0x....      BL       ?Subroutine3
   3588              mdnsSrvDscr.srvcProto = &mdnsParamBuff[totalLen];
   3589              strcpy((INT8 *)mdnsSrvDscr.srvcProto, (const INT8 *)p);
   3590              totalLen += (len+1);
   3591              
   3592              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_14:
   \   0000004E   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_110:
   \   00000052   0x0004             MOVS     R4,R0
   3593              if (!p)
   \   00000054   0xD101             BNE.N    ??AppS2wCmd_MdnsSrvcDiscover_1
   3594              {
   3595                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MdnsSrvcDiscover_0:
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE017             B.N      ??AppS2wCmd_MdnsSrvcDiscover_2
   3596              }
   3597              len = strlen((const char *)p);
   \                     ??AppS2wCmd_MdnsSrvcDiscover_1:
   \   0000005A   0x.... 0x....      BL       strlen
   3598              mdnsSrvDscr.domain = &mdnsParamBuff[totalLen];
   \   0000005E   0x19B8             ADDS     R0,R7,R6
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0xB280             UXTH     R0,R0
   \   00000064   0x1940             ADDS     R0,R0,R5
   \   00000066   0x.... 0x....      BL       ?Subroutine25
   3599              strcpy((INT8 *)mdnsSrvDscr.domain, (const INT8 *)p);
   3600              totalLen += (len+1);
   3601          
   3602              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_255:
   \   0000006A   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_109:
   \   0000006E   0x0004             MOVS     R4,R0
   3603              
   3604          	if(p)
   \   00000070   0xD002             BEQ.N    ??AppS2wCmd_MdnsSrvcDiscover_3
   3605              AppS2wParse_Int(p, &val);
   \   00000072   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_199:
   \   00000076   0xE001             B.N      ??AppS2wCmd_MdnsSrvcDiscover_4
   3606          	else
   3607          		val=S2W_DFLT_MDNS_SCOPE;
   \                     ??AppS2wCmd_MdnsSrvcDiscover_3:
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   3608              mdnsSrvDscr.scope = (UINT8 )val;
   \                     ??AppS2wCmd_MdnsSrvcDiscover_4:
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0xF88D 0x0014      STRB     R0,[SP, #+20]
   3609              /* check service discovery */
   3610              AppS2wHal_MdnsSrvcDiscover(&mdnsSrvDscr);
   \   00000082   0xA801             ADD      R0,SP,#+4
   \   00000084   0x.... 0x....      BL       AppS2wHal_MdnsSrvcDiscover
   3611              return S2W_SUCCESS;
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_MdnsSrvcDiscover_2:
   \   0000008A   0xB007             ADD      SP,SP,#+28
   \   0000008C   0xBDF0             POP      {R4-R7,PC}       ;; return
   3612          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9002             STR      R0,[SP, #+8]
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \                     ??Subroutine10_0:
   \   00000006   0xA806             ADD      R0,SP,#+24
   \   00000008   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   3613          
   3614          #endif // # GSN_MDNS_ENABLE
   3615          /**
   3616           ******************************************************************
   3617           * @ingroup S2w-Application
   3618           * @brief Process the AT+WRSSI Command.
   3619           * @param ptr Pointer to the user input string.
   3620           * @return status.
   3621           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3622          PUBLIC UINT8
   3623          AppS2wCmd_Wrssi(UINT8 *ptr)
   3624          {
   \                     AppS2wCmd_Wrssi:
   \   00000000   0xB580             PUSH     {R7,LR}
   3625              INT8 rssi;
   3626              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x293F             CMP      R1,#+63
   \   00000006   0xBF04             ITT      EQ 
   \   00000008   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000A   0x2800             CMPEQ    R0,#+0
   \   0000000C   0xD108             BNE.N    ??AppS2wCmd_Wrssi_0
   3627              {
   3628                 rssi = AppS2wHal_RssiGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_RssiGet
   3629                 S2w_Printf("\r\n%d", (signed char)rssi);
   \   00000012   0xB241             SXTB     R1,R0
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%d">`
   \   00000018   0x.... 0x....      BL       S2w_Printf
   3630                 return S2W_SUCCESS;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD02             POP      {R1,PC}
   3631              }
   3632              return S2W_EINVAL;
   \                     ??AppS2wCmd_Wrssi_0:
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0xBD02             POP      {R1,PC}          ;; return
   3633          }
   3634          
   3635          

   \                                 In section .text, align 2, keep-with-next
   3636          VOID
   3637          AppS2wCmd_GetSecurityString(GSN_WDD_WLAN_CFG_T *WddConf,const char **security )
   3638          {
   3639              
   3640              *security = "NONE";
   \                     AppS2wCmd_GetSecurityString:
   \   00000000   0x.... 0x....      ADR.W    R2,`?<Constant "NONE">`
   \   00000004   0x600A             STR      R2,[R1, #+0]
   3641          
   3642              switch (WddConf->securityCfg.mode)
   \   00000006   0xF890 0x2040      LDRB     R2,[R0, #+64]
   \   0000000A   0x2A04             CMP      R2,#+4
   \   0000000C   0xD008             BEQ.N    ??AppS2wCmd_GetSecurityString_0
   \   0000000E   0x2A08             CMP      R2,#+8
   \   00000010   0xD00F             BEQ.N    ??AppS2wCmd_GetSecurityString_1
   \   00000012   0x2A10             CMP      R2,#+16
   \   00000014   0xD013             BEQ.N    ??AppS2wCmd_GetSecurityString_2
   \   00000016   0x2A20             CMP      R2,#+32
   \   00000018   0xD00E             BEQ.N    ??AppS2wCmd_GetSecurityString_3
   \   0000001A   0x2A40             CMP      R2,#+64
   \   0000001C   0xD012             BEQ.N    ??AppS2wCmd_GetSecurityString_4
   \   0000001E   0x4770             BX       LR
   3643              {
   3644                  case GSN_WDD_SEC_MODE_DISABLE:
   3645                      *security = "NONE";
   3646                      break;
   3647                  case GSN_WDD_SEC_MODE_WEP:
   3648                      if(GSN_WDD_SEC_WEP_OPEN == WddConf->securityCfg.wepConfig.authType)
   \                     ??AppS2wCmd_GetSecurityString_0:
   \   00000020   0xF890 0x0041      LDRB     R0,[R0, #+65]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xBF14             ITE      NE 
   \   00000028   0x.... 0x....      ADRNE.W  R0,`?<Constant "WEP (SHARED)">`
   \   0000002C   0x.... 0x....      ADREQ.W  R0,`?<Constant "WEP (OPEN)">`
   3649                          *security = "WEP (OPEN)";
   \   00000030   0xE00A             B.N      ??AppS2wCmd_GetSecurityString_5
   3650                      else
   3651                          *security = "WEP (SHARED)";
   3652                      break;
   3653                  case GSN_WDD_SEC_MODE_WPA_PERSONAL:
   3654                  *security = "WPA-PERSONAL";
   \                     ??AppS2wCmd_GetSecurityString_1:
   \   00000032   0x.... 0x....      ADR.W    R0,`?<Constant "WPA-PERSONAL">`
   \   00000036   0xE007             B.N      ??AppS2wCmd_GetSecurityString_5
   3655                  break;
   3656                  case GSN_WDD_SEC_MODE_WPA2_PERSONAL:
   3657                  *security = "WPA2-PERSONAL";
   \                     ??AppS2wCmd_GetSecurityString_3:
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "WPA2-PERSONAL">`
   \   0000003C   0xE004             B.N      ??AppS2wCmd_GetSecurityString_5
   3658                  break;
   3659                  case GSN_WDD_SEC_MODE_WPA_ENTERPRISE:
   3660                      *security = "WPA-ENTERPRISE";
   \                     ??AppS2wCmd_GetSecurityString_2:
   \   0000003E   0x.... 0x....      ADR.W    R0,`?<Constant "WPA-ENTERPRISE">`
   \   00000042   0xE001             B.N      ??AppS2wCmd_GetSecurityString_5
   3661                  break;
   3662                  case GSN_WDD_SEC_MODE_WPA2_ENTERPRISE:
   3663                      *security = "WPA2-ENTERPRISE";
   \                     ??AppS2wCmd_GetSecurityString_4:
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "WPA2-ENTERPRISE">`
   \                     ??AppS2wCmd_GetSecurityString_5:
   \   00000048   0x6008             STR      R0,[R1, #+0]
   3664                  break;
   3665              }
   3666              return;
   \   0000004A   0x4770             BX       LR               ;; return
   3667          }
   3668          
   3669          /**
   3670           ******************************************************************
   3671           * @ingroup S2w-Application
   3672           * @brief Process the AT+WSTATUS Command.
   3673           *   This function dispaly the connected network status.
   3674           * @param ptr pointer to the user input string.
   3675           *
   3676           * @return S2W_SUCCESS - operation successful.
   3677           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3678          PUBLIC UINT8
   3679          AppS2wCmd_Wstatus(UINT8 *ptr)
   3680          {
   \                     AppS2wCmd_Wstatus:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   3681              const char *security = "NONE";
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "NONE">`
   \   00000008   0x9005             STR      R0,[SP, #+20]
   3682              S2W_WLANINFO_T info;
   3683              UINT8 status,mode = 2;
   \   0000000A   0x2402             MOVS     R4,#+2
   3684              GSN_WDD_WLAN_CFG_T *WddConf;
   3685          
   3686          	GSN_WLAN_MAC_ADDR_T bssid;
   3687              /* call the hal function to get the network status
   3688               */
   3689              status = AppS2wHal_InfoGet(&info);
   3690          
   3691              if (status != S2W_SUCCESS)
   \   0000000C   0xA806             ADD      R0,SP,#+24
   \   0000000E   0x.... 0x....      BL       AppS2wHal_InfoGet
   \   00000012   0xB120             CBZ.N    R0,??AppS2wCmd_Wstatus_0
   3692              {
   3693                  S2w_Printf("\r\nNOT ASSOCIATED\r\n");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNOT ASSOCIATED\\r\\n">`
   \   00000018   0x.... 0x....      BL       S2w_Printf
   3694                  return S2W_SUCCESS;
   \   0000001C   0xE051             B.N      ??AppS2wCmd_Wstatus_1
   3695              }
   3696              if(info.mode == S2W_WLANDATA_MODE_INFRA)
   \                     ??AppS2wCmd_Wstatus_0:
   \   0000001E   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xBF08             IT       EQ 
   \   00000026   0x2400             MOVEQ    R4,#+0
   3697              {
   3698                  mode = 0;
   3699              }
   3700          
   3701              S2w_Printf("\r\nMODE:%d CHANNEL:%d SSID:\"",
   3702                      mode, info.channel);
   \   00000028   0xF89D 0x2019      LDRB     R2,[SP, #+25]
   \   0000002C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nMODE:%d CHANNEL:%d ...">`
   \   00000030   0x4621             MOV      R1,R4
   \   00000032   0x.... 0x....      BL       S2w_Printf
   3703              AppS2wHal_CharNPut(info.ssid, info.ssidLen);
   \   00000036   0xF89D 0x101A      LDRB     R1,[SP, #+26]
   \   0000003A   0xF10D 0x0022      ADD      R0,SP,#+34
   \   0000003E   0x.... 0x....      BL       AppS2wHal_CharNPut
   3704              S2w_Printf("\"");
   \   00000042   0x....             ADR.N    R0,??DataTable178_1  ;; "\""
   \   00000044   0x.... 0x....      BL       S2w_Printf
   3705          
   3706          	if(GSN_WIF_WLAN_NW_TYPE_AP == s2wappMainTaskCtxt->if0.wddCtx.wlanNwType)
   \   00000048   0x.... 0x....      LDR.W    R4,??DataTable189_1
   \   0000004C   0x.... 0x....      ADR.W    R5,`?<Constant "\\r\\nBSSID:%02x:%02x:%02...">`
   \   00000050   0x6820             LDR      R0,[R4, #+0]
   \   00000052   0xF890 0x1F08      LDRB     R1,[R0, #+3848]
   \   00000056   0x2902             CMP      R1,#+2
   \   00000058   0xD113             BNE.N    ??AppS2wCmd_Wstatus_2
   3707          	{ 				  
   3708          		GsnWdd_PhyAddrGet(&s2wappMainTaskCtxt->if0.wddCtx,(INT8 *)&bssid);
   \   0000005A   0xA903             ADD      R1,SP,#+12
   \   0000005C   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000060   0x.... 0x....      BL       GsnWdd_PhyAddrGet
   3709          		S2w_Printf("\r\nBSSID:%02x:%02x:%02x:%02x:%02x:%02x",
   3710          		   bssid.array[0], bssid.array[1], bssid.array[2],
   3711          		   bssid.array[3], bssid.array[4], bssid.array[5]);
   \   00000064   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   00000068   0xF89D 0x300E      LDRB     R3,[SP, #+14]
   \   0000006C   0xF89D 0x200D      LDRB     R2,[SP, #+13]
   \   00000070   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   00000074   0x9002             STR      R0,[SP, #+8]
   \   00000076   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   \   0000007C   0xF89D 0x000F      LDRB     R0,[SP, #+15]
   \   00000080   0xE010             B.N      ??AppS2wCmd_Wstatus_3
   3712          	}
   3713          	else
   3714          	{
   3715              if (info.validBssid)
   \                     ??AppS2wCmd_Wstatus_2:
   \   00000082   0xF89D 0x001B      LDRB     R0,[SP, #+27]
   \   00000086   0xB188             CBZ.N    R0,??AppS2wCmd_Wstatus_4
   3716              {
   3717                  S2w_Printf("\r\nBSSID:%02x:%02x:%02x:%02x:%02x:%02x",
   3718                      info.bssid[0], info.bssid[1], info.bssid[2],
   3719                      info.bssid[3], info.bssid[4], info.bssid[5]);
   \   00000088   0xF89D 0x0021      LDRB     R0,[SP, #+33]
   \   0000008C   0xF89D 0x301E      LDRB     R3,[SP, #+30]
   \   00000090   0xF89D 0x201D      LDRB     R2,[SP, #+29]
   \   00000094   0xF89D 0x101C      LDRB     R1,[SP, #+28]
   \   00000098   0x9002             STR      R0,[SP, #+8]
   \   0000009A   0xF89D 0x0020      LDRB     R0,[SP, #+32]
   \   0000009E   0x9001             STR      R0,[SP, #+4]
   \   000000A0   0xF89D 0x001F      LDRB     R0,[SP, #+31]
   \                     ??AppS2wCmd_Wstatus_3:
   \   000000A4   0x9000             STR      R0,[SP, #+0]
   \   000000A6   0x4628             MOV      R0,R5
   \   000000A8   0x.... 0x....      BL       S2w_Printf
   3720          	   	}
   3721              }
   3722              WddConf = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   3723              AppS2wCmd_GetSecurityString(WddConf, &security);
   \                     ??AppS2wCmd_Wstatus_4:
   \   000000AC   0xA905             ADD      R1,SP,#+20
   \   000000AE   0x6820             LDR      R0,[R4, #+0]
   \   000000B0   0xF600 0x7094      ADDW     R0,R0,#+3988
   \   000000B4   0x.... 0x....      BL       AppS2wCmd_GetSecurityString
   3724          
   3725              S2w_Printf(" SECURITY:%s", security);
   \   000000B8   0x9905             LDR      R1,[SP, #+20]
   \   000000BA   0x.... 0x....      ADR.W    R0,`?<Constant " SECURITY:%s">`
   \   000000BE   0x.... 0x....      BL       S2w_Printf
   3726          
   3727              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Wstatus_1:
   \   000000C2   0x2000             MOVS     R0,#+0
   \   000000C4   0xB011             ADD      SP,SP,#+68
   \   000000C6   0xBD30             POP      {R4,R5,PC}       ;; return
   3728          }
   3729          
   3730          #ifdef S2W_GSLINK
   3731          
   3732          
   3733          /**
   3734           ******************************************************************
   3735           * @ingroup S2w-Application
   3736           * @brief Process AT+XMLPARSE command
   3737           *   This function enable/disable the XML string parser.
   3738           * @param ptr Pointer to the user input string.
   3739           *
   3740           * @return S2W_SUCCESS - operation successful.
   3741           * @return S2W_FAILURE - operation Failed.
   3742           * @return S2W_EINVAL - operation Failed-invalid input
   3743           *************************************************************/
   3744          

   \                                 In section .text, align 2, keep-with-next
   3745          PUBLIC UINT8
   3746          AppS2wCmd_XmlParseEnable(UINT8 *ptr)
   3747          {
   \                     AppS2wCmd_XmlParseEnable:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   3748              UINT8 status = S2W_SUCCESS;
   3749          	UINT8 *p;
   3750          	UINT32 ParseEn=0;//,cid;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   3751          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ??Subroutine7_0
   3752              if (!p)
   \                     ??CrossCallReturnLabel_56:
   \   0000000C   0xB908             CBNZ.N   R0,??AppS2wCmd_XmlParseEnable_0
   3753              {
   3754                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD0E             POP      {R1-R3,PC}
   3755              }
   3756          	AppS2wParse_Int(p, (UINT32 *)&ParseEn);
   \                     ??AppS2wCmd_XmlParseEnable_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine17
   3757          	s2wappMainTaskCtxt->xmlParseEn = (UINT8)ParseEn;
   \                     ??CrossCallReturnLabel_198:
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable189_1
   \   0000001A   0x9A00             LDR      R2,[SP, #+0]
   \   0000001C   0x6809             LDR      R1,[R1, #+0]
   \   0000001E   0xF646 0x3054      MOVW     R0,#+27476
   \   00000022   0x5442             STRB     R2,[R0, R1]
   3758          	return(status);
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return
   3759          }
   3760          /**
   3761           ******************************************************************
   3762           * @ingroup S2w-Application
   3763           * @brief Process httpd context initialisation.
   3764           *   This function configures the httpd context initialisation.
   3765           * @param cid - connection identifier.
   3766           *@param reinit - reinit flag.
   3767           * @return NONE
   3768           *************************************************************/
   3769          

   \                                 In section .text, align 2, keep-with-next
   3770          UINT8
   3771          AppS2w_HttpdCtxInit(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 reinit)
   3772          {
   \                     AppS2w_HttpdCtxInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   3773          	UINT8 status= S2W_SUCCESS;
   3774          	httpdCtx->httpdBufferLenUsed=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x6020             STR      R0,[R4, #+0]
   3775          	httpdCtx->httpdMaxBufferSize= 1024 ;//GSN_HTTPD_BUF_SIZE;
   \   00000008   0xF44F 0x6080      MOV      R0,#+1024
   \   0000000C   0x6060             STR      R0,[R4, #+4]
   3776          	if(reinit == 0 )
   \   0000000E   0xB981             CBNZ.N   R1,??AppS2w_HttpdCtxInit_0
   3777          	{
   3778          		httpdCtx->httpdBuffer=(INT8*)GsnHttpd_GetBuffer();
   \   00000010   0x.... 0x....      BL       GsnHttpd_GetBuffer
   \   00000014   0x60A0             STR      R0,[R4, #+8]
   3779          		if(httpdCtx->httpdBuffer == NULL)
   \   00000016   0xB170             CBZ.N    R0,??AppS2w_HttpdCtxInit_1
   3780          			return S2W_FAILURE;
   3781          		GsnOsal_SemCreate(&httpdCtx->httpdSendSem, 0 );
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2100             MOVS     R1,#+0
   \   0000001C   0xF104 0x002C      ADD      R0,R4,#+44
   \   00000020   0x.... 0x....      BL       _tx_semaphore_create
   3782          		httpdCtx->moreData=0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x7320             STRB     R0,[R4, #+12]
   3783          		httpdCtx->methodLineReceived=0;
   \   00000028   0x7360             STRB     R0,[R4, #+13]
   3784          		httpdCtx->reqBodyLen = 0;
   \   0000002A   0x64A0             STR      R0,[R4, #+72]
   3785          		httpdCtx->method= 0;
   \   0000002C   0xF884 0x004C      STRB     R0,[R4, #+76]
   3786          		return status;
   \   00000030   0xBD10             POP      {R4,PC}
   3787          	}
   3788          	else if(httpdCtx->httpdBuffer == NULL)
   \                     ??AppS2w_HttpdCtxInit_0:
   \   00000032   0x68A0             LDR      R0,[R4, #+8]
   \   00000034   0xB908             CBNZ.N   R0,??AppS2w_HttpdCtxInit_2
   3789          	{
   3790          		return S2W_FAILURE;
   \                     ??AppS2w_HttpdCtxInit_1:
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xBD10             POP      {R4,PC}
   3791          	}
   3792          	return status;
   \                     ??AppS2w_HttpdCtxInit_2:
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xBD10             POP      {R4,PC}          ;; return
   3793           }
   3794          /**
   3795           ******************************************************************
   3796           * @ingroup S2w-Application
   3797           * @brief Process httpd context initialisation.
   3798           *   This function configures the httpd context initialisation.
   3799           * @param cid - connection identifier.
   3800           *@param reinit - reinit flag.
   3801           * @return NONE
   3802           *************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3803          VOID
   3804          AppS2w_HttpdCtxDeInit(S2W_HTTPD_CONTEXT_T *httpdCtx)
   3805          {
   \                     AppS2w_HttpdCtxDeInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   3806          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3807              UINT32 totalhdrcount = 0;
   3808              UINT32 i = 0;
   3809          #endif
   3810          
   3811          	/* HTTP context Init*/
   3812          	//UINT8 status= S2W_SUCCESS;
   3813              if(NULL != httpdCtx->httpdBuffer)
   \   00000004   0x68A0             LDR      R0,[R4, #+8]
   \   00000006   0xB118             CBZ.N    R0,??AppS2w_HttpdCtxDeInit_0
   3814              {
   3815              	GsnHttpd_ReleaseBuffer(httpdCtx->httpdBuffer);
   \   00000008   0x.... 0x....      BL       GsnHttpd_ReleaseBuffer
   3816              	httpdCtx->httpdBuffer=NULL;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x60A0             STR      R0,[R4, #+8]
   3817              }
   3818          
   3819          	httpdCtx->httpdBufferLenUsed=0;
   \                     ??AppS2w_HttpdCtxDeInit_0:
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x6020             STR      R0,[R4, #+0]
   3820          	httpdCtx->httpdMaxBufferSize=0;
   \   00000014   0x6060             STR      R0,[R4, #+4]
   3821          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3822              /* Fre up all the allocated memmory for cutom headers */
   3823              if(NULL != httpdCtx->httphdrnameptrptr)
   3824              {
   3825                  totalhdrcount = httpdCtx->appheadercount + HTTP_STATIC_HDR_COUNT;
   3826                  /* search for an empty slot */
   3827                  for(i = 0; i < totalhdrcount; i++)
   3828                  {
   3829                      if(NULL != httpdCtx->httphdrnameptrptr[i])
   3830                      {
   3831                          gsn_free(httpdCtx->httphdrnameptrptr[i]);
   3832                          httpdCtx->httphdrnameptrptr[i] = NULL;
   3833                          break;
   3834                      }
   3835                  }
   3836                  gsn_free(httpdCtx->httphdrnameptrptr);
   3837                  httpdCtx->httphdrnameptrptr = NULL;
   3838              }
   3839              if(NULL != httpdCtx->httphdrvalptrptr)
   3840              {
   3841                  totalhdrcount = httpdCtx->appheadercount + HTTP_STATIC_HDR_COUNT;
   3842                  /* search for an empty slot */
   3843                  for(i = 0; i < totalhdrcount; i++)
   3844                  {
   3845                      if(NULL != httpdCtx->httphdrvalptrptr[i])
   3846                      {
   3847                          gsn_free(httpdCtx->httphdrvalptrptr[i]);
   3848                          httpdCtx->httphdrvalptrptr[i] = NULL;
   3849                          break;
   3850                      }
   3851                  }
   3852                  gsn_free(httpdCtx->httphdrvalptrptr);
   3853                  httpdCtx->httphdrvalptrptr = NULL;
   3854              }
   3855              if(NULL != httpdCtx->httphdrtypeptr)
   3856              {
   3857                  gsn_free(httpdCtx->httphdrtypeptr);
   3858                  httpdCtx->httphdrtypeptr = NULL;
   3859              }
   3860          #endif
   3861          	GsnOsal_SemDelete(&httpdCtx->httpdSendSem);
   \   00000016   0xF104 0x002C      ADD      R0,R4,#+44
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x.... 0x....      B.W      _tx_semaphore_delete
   3862           }
   3863          

   \                                 In section .text, align 2, keep-with-next
   3864          VOID
   3865          AppS2w_HttpdMethodSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 method)
   3866          {
   3867          	if(httpdCtx != NULL)
   \                     AppS2w_HttpdMethodSet:
   \   00000000   0xB108             CBZ.N    R0,??AppS2w_HttpdMethodSet_0
   3868          		httpdCtx->method= method;
   \   00000002   0xF880 0x104C      STRB     R1,[R0, #+76]
   3869          }
   \                     ??AppS2w_HttpdMethodSet_0:
   \   00000006   0x4770             BX       LR               ;; return
   3870          #ifdef S2W_GSLINK_RAW

   \                                 In section .text, align 2, keep-with-next
   3871          VOID
   3872          AppS2w_HttpdBodyLenSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT32 len)
   3873          {
   3874                          if(httpdCtx != NULL)
   \                     AppS2w_HttpdBodyLenSet:
   \   00000000   0xB100             CBZ.N    R0,??AppS2w_HttpdBodyLenSet_0
   3875                                          httpdCtx->reqBodyLen= len;
   \   00000002   0x6481             STR      R1,[R0, #+72]
   3876          
   3877          }
   \                     ??AppS2w_HttpdBodyLenSet_0:
   \   00000004   0x4770             BX       LR               ;; return
   3878          /**
   3879          ******************************************************************
   3880          * @ingroup S2w-Application
   3881          * @brief Process Sends the http data to serial interface.
   3882          *   This function Sends the http data to serial interface.
   3883          * @param cid the cid of the http connection.
   3884          * @param dataLen the input data length.
   3885          @return None.
   3886          ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3887          VOID
   3888          AppS2w_RawDataSend(UINT8 cid, UINT8 *buffer,UINT32 httpRxDataLen)
   3889          {
   \                     AppS2w_RawDataSend:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x460C             MOV      R4,R1
   3890              INT8 startMark[10],len;
   3891              len=sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,httpRxDataLen);
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x4615             MOV      R5,R2
   \   0000000A   0x9501             STR      R5,[SP, #+4]
   \   0000000C   0x2348             MOVS     R3,#+72
   \   0000000E   0x221B             MOVS     R2,#+27
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "%c%c%x%04d">`
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       sprintf
   \   0000001A   0x4606             MOV      R6,R0
   3892          
   3893          
   3894          	
   3895          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3896          	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);	
   \   0000001C   0x.... 0x....      LDR.W    R7,??DataTable193_2
   \   00000020   0xF04F 0x31FF      MOV      R1,#-1
   \   00000024   0x4638             MOV      R0,R7
   \   00000026   0x.... 0x....      BL       GsnOsal_SemAcquire
   3897              AppS2wHal_CharNPut(startMark, len);
   \   0000002A   0xB2F1             UXTB     R1,R6
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x.... 0x....      BL       AppS2wHal_CharNPut
   3898          #else
   3899          	GsnOsal_SemAcquire(&s2wSyncSemID1, GSN_OSAL_WAIT_FOREVER);
   3900              AppS2wHal_CharNPut1(startMark, len);
   3901          #endif
   3902          	if(buffer != NULL)
   \   00000032   0xB11C             CBZ.N    R4,??AppS2w_RawDataSend_0
   3903              {
   3904          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3905          		AppS2wHal_CharNPut(buffer, httpRxDataLen);
   \   00000034   0x4629             MOV      R1,R5
   \   00000036   0x4620             MOV      R0,R4
   \   00000038   0x.... 0x....      BL       AppS2wHal_CharNPut
   3906          #else
   3907                   AppS2wHal_CharNPut1(buffer, httpRxDataLen);
   3908          #endif
   3909              }
   3910          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3911              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2w_RawDataSend_0:
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable189_1
   \   00000040   0x6809             LDR      R1,[R1, #+0]
   \   00000042   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000046   0x5C40             LDRB     R0,[R0, R1]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xBF08             IT       EQ 
   \   0000004C   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3912              {
   3913                  s2wSpiFs_Flush();
   3914              }
   3915          #else
   3916              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3917              {
   3918                  s2wSpiFs_Flush1();
   3919              }
   3920          #endif
   3921          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3922          	GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000050   0x4638             MOV      R0,R7
   \   00000052   0x.... 0x....      BL       GsnOsal_SemRelease
   3923          #else
   3924          	GsnOsal_SemRelease(&s2wSyncSemID1);
   3925          #endif
   3926          	
   3927          
   3928          }
   \   00000056   0xB005             ADD      SP,SP,#+20
   \   00000058   0xBDF0             POP      {R4-R7,PC}       ;; return
   3929          
   3930          #endif
   3931          
   3932          #ifdef S2W_GSLINK_XML
   3933          
   3934          /**
   3935           ******************************************************************
   3936           * @ingroup S2w-Application
   3937           * @brief Process AT+XMLSEND command
   3938           *   This function configures the http send paramters.
   3939           * @param ptr Pointer to the user input string.
   3940           *
   3941           * @return S2W_SUCCESS - operation successful.
   3942           * @return S2W_FAILURE - operation Failed.
   3943           * @return S2W_EINVAL - operation Failed-invalid input
   3944           *************************************************************/
   3945          
   3946          

   \                                 In section .text, align 2, keep-with-next
   3947          PUBLIC UINT8
   3948          AppS2wCmd_XmlSend(UINT8 *ptr)
   3949          {
   \                     AppS2wCmd_XmlSend:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   3950          
   3951              UINT32 cid, method;
   3952              UINT8 /**page, *content,*/ *p,*profName /*,*httpRxDataBuf */;
   3953              UINT32 /*httpRxDataLen = 0, temp, ret, */ timeOut,len;
   3954          
   3955          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   3956          			S2W_HTTP_DATA_T *pHttpData;
   3957          #endif
   3958              UINT8 status = S2W_SUCCESS;
   3959          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3960              UINT8 statusline;
   3961              UINT32 headercount;
   3962          #endif
   3963          
   3964          
   3965          	/* cid,type,timeout,uri,n*/
   3966              p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_122:
   \   0000000A   0x0005             MOVS     R5,R0
   3967              if (!p)
   \   0000000C   0xF000 0x80F8      BEQ.W    ??AppS2wCmd_XmlSend_0
   3968              {
   3969                  return S2W_EINVAL;
   3970              }
   3971          	cid = AppS2w_CidValidate(*p);
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x.... 0x....      BL       AppS2w_CidValidate
   \   00000016   0x4681             MOV      R9,R0
   3972          	if( cid == INVALID_CID)
   \   00000018   0xF1B9 0x0FFF      CMP      R9,#+255
   \   0000001C   0xBF08             IT       EQ 
   \   0000001E   0x2005             MOVEQ    R0,#+5
   3973                  return S2W_EBADCID;
   \   00000020   0xF000 0x80B1      BEQ.W    ??AppS2wCmd_XmlSend_1
   3974              p = AppS2wParse_NextParamGet(&ptr);
   \   00000024   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_121:
   \   00000028   0x0005             MOVS     R5,R0
   3975          	if (!p)
   \   0000002A   0xD06F             BEQ.N    ??AppS2wCmd_XmlSend_2
   3976          	{
   3977          		return S2W_EINVAL;
   3978          	}
   3979          	AppS2wParse_Int(p, (UINT32 *)&method);
   \   0000002C   0xA904             ADD      R1,SP,#+16
   \   0000002E   0x.... 0x....      BL       AppS2wParse_Int
   3980          
   3981              if(method == S2W_HTTP_METHOD_GETRESP)
   \   00000032   0x9804             LDR      R0,[SP, #+16]
   \   00000034   0x2806             CMP      R0,#+6
   \   00000036   0xBF08             IT       EQ 
   \   00000038   0x2008             MOVEQ    R0,#+8
   3982              {
   3983              	method = GSN_HTTP_METHOD_GETRESP;
   \   0000003A   0xD002             BEQ.N    ??AppS2wCmd_XmlSend_3
   3984              }
   3985              else if(method == S2W_HTTP_METHOD_POSTRESP)
   \   0000003C   0x2807             CMP      R0,#+7
   \   0000003E   0xD101             BNE.N    ??AppS2wCmd_XmlSend_4
   3986              {
   3987              	method = GSN_HTTP_METHOD_POSTRESP;
   \   00000040   0x2009             MOVS     R0,#+9
   \                     ??AppS2wCmd_XmlSend_3:
   \   00000042   0x9004             STR      R0,[SP, #+16]
   3988              }
   3989          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   3990          	httpConfInfo.reqMethod = (GSN_HTTP_USER_METHOD_T)method;
   \                     ??AppS2wCmd_XmlSend_4:
   \   00000044   0x.... 0x....      LDR.W    R7,??DataTable194
   \   00000048   0x9804             LDR      R0,[SP, #+16]
   \   0000004A   0x7078             STRB     R0,[R7, #+1]
   3991          #endif
   3992          
   3993          	/*timeout*/
   3994              p = AppS2wParse_NextParamGet(&ptr);
   \   0000004C   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_120:
   \   00000050   0x0005             MOVS     R5,R0
   3995          	if (!p)
   \   00000052   0xD05B             BEQ.N    ??AppS2wCmd_XmlSend_2
   3996          	{
   3997          		return S2W_EINVAL;
   3998          	}
   3999             	AppS2wParse_Int(p, &timeOut);
   \   00000054   0xA906             ADD      R1,SP,#+24
   \   00000056   0x.... 0x....      BL       AppS2wParse_Int
   4000             	if(timeOut == 0)
   \   0000005A   0x9806             LDR      R0,[SP, #+24]
   \   0000005C   0xB908             CBNZ.N   R0,??AppS2wCmd_XmlSend_5
   4001                 	timeOut = 5;
   \   0000005E   0x2005             MOVS     R0,#+5
   \   00000060   0x9006             STR      R0,[SP, #+24]
   4002          #ifdef S2W_WEB_SERVER
   4003          	if(TRUE == GsnHttpd_IsRunning())
   \                     ??AppS2wCmd_XmlSend_5:
   \   00000062   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD106             BNE.N    ??AppS2wCmd_XmlSend_6
   4004          	{
   4005          		status = AppS2w_HttpdSetTimeOut(cid,timeOut);
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x9906             LDR      R1,[SP, #+24]
   \   0000006E   0x.... 0x....      BL       AppS2w_HttpdSetTimeOut
   \   00000072   0x0005             MOVS     R5,R0
   4006          		if(status != S2W_SUCCESS)
   \   00000074   0xF040 0x8086      BNE.W    ??AppS2wCmd_XmlSend_7
   4007          			return 	status;
   4008          	}
   4009          #endif
   4010          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   4011          		httpConfInfo.httpTimeOut =timeOut;
   \                     ??AppS2wCmd_XmlSend_6:
   \   00000078   0x9806             LDR      R0,[SP, #+24]
   \   0000007A   0x6478             STR      R0,[R7, #+68]
   4012          #endif
   4013          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000007C   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_119:
   \   00000080   0x0005             MOVS     R5,R0
   4014          	if (!p)
   \   00000082   0xD043             BEQ.N    ??AppS2wCmd_XmlSend_2
   4015          	{
   4016          		return S2W_EINVAL;
   4017          	}
   4018             	len = strlen((const char *)p);
   \   00000084   0x.... 0x....      BL       strlen
   \   00000088   0x9005             STR      R0,[SP, #+20]
   4019          #if defined (S2W_HTTPS_SUPPORT) || defined (S2W_HTTPC_SUPPORT)
   4020          
   4021             	if(NULL != httpConfInfo.reqPathPtr)
   \   0000008A   0x6878             LDR      R0,[R7, #+4]
   \   0000008C   0xB118             CBZ.N    R0,??AppS2wCmd_XmlSend_8
   4022             	{
   4023                 	gsn_free(httpConfInfo.reqPathPtr);
   \   0000008E   0x.... 0x....      BL       GsnDynMemMgmt_Free
   4024                 	httpConfInfo.reqPathPtr = NULL;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x6078             STR      R0,[R7, #+4]
   4025             	}
   4026             	httpConfInfo.reqPathPtr = gsn_malloc(len+1);
   \                     ??AppS2wCmd_XmlSend_8:
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0x9805             LDR      R0,[SP, #+20]
   \   0000009A   0xF640 0x71BA      MOVW     R1,#+4026
   \   0000009E   0x1C40             ADDS     R0,R0,#+1
   \   000000A0   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000A4   0x6078             STR      R0,[R7, #+4]
   4027          	if(NULL == httpConfInfo.reqPathPtr)
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xF000 0x80C4      BEQ.W    ??AppS2wCmd_XmlSend_9
   4028          	{
   4029              	return S2W_FAILURE;
   4030          	}
   4031          	strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
   \   000000AC   0x9A05             LDR      R2,[SP, #+20]
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x.... 0x....      BL       strncpy
   4032             	httpConfInfo.reqPathPtr[len] ='\0';
   \   000000B4   0x9805             LDR      R0,[SP, #+20]
   \   000000B6   0x6879             LDR      R1,[R7, #+4]
   \   000000B8   0x2200             MOVS     R2,#+0
   \   000000BA   0x5442             STRB     R2,[R0, R1]
   4033              	/* Set the HTTP version */
   4034             	httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
   \   000000BC   0x2003             MOVS     R0,#+3
   \   000000BE   0x7038             STRB     R0,[R7, #+0]
   4035          #endif
   4036          
   4037          	profName = AppS2wParse_NextParamGet(&ptr);
   \   000000C0   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_118:
   \   000000C4   0x4606             MOV      R6,R0
   4038          #if (defined(S2W_GSLINK_XML) &&  defined(S2W_WEB_SERVER))
   4039          
   4040          	if((method == GSN_HTTP_METHOD_GETRESP || method == GSN_HTTP_METHOD_POSTRESP || method == GSN_HTTP_METHOD_PUTRESP || method == GSN_HTTP_METHOD_DELETERESP)
   4041          		&& s2wappMainTaskCtxt->xmlParseEn == 1)
   \   000000C6   0xF44F 0x7094      MOV      R0,#+296
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable195
   \   000000CE   0x.... 0x....      LDR.W    R4,??DataTable196
   \   000000D2   0xFB00 0x1809      MLA      R8,R0,R9,R1
   \   000000D6   0x9904             LDR      R1,[SP, #+16]
   \   000000D8   0xF646 0x3054      MOVW     R0,#+27476
   \   000000DC   0x2908             CMP      R1,#+8
   \   000000DE   0xBF18             IT       NE 
   \   000000E0   0x2909             CMPNE    R1,#+9
   \   000000E2   0xD003             BEQ.N    ??AppS2wCmd_XmlSend_10
   \   000000E4   0x290A             CMP      R1,#+10
   \   000000E6   0xBF18             IT       NE 
   \   000000E8   0x290B             CMPNE    R1,#+11
   \   000000EA   0xD14F             BNE.N    ??AppS2wCmd_XmlSend_11
   \                     ??AppS2wCmd_XmlSend_10:
   \   000000EC   0x6822             LDR      R2,[R4, #+0]
   \   000000EE   0x5C81             LDRB     R1,[R0, R2]
   \   000000F0   0x2901             CMP      R1,#+1
   \   000000F2   0xD14B             BNE.N    ??AppS2wCmd_XmlSend_11
   4042          	{
   4043          
   4044          		if(strcmp((const char *)s2wappMainTaskCtxt->currenturi,(const INT8 *)p) != 0)
   \   000000F4   0xF502 0x40D6      ADD      R0,R2,#+27392
   \   000000F8   0x4629             MOV      R1,R5
   \   000000FA   0x3014             ADDS     R0,R0,#+20
   \   000000FC   0x.... 0x....      BL       strcmp
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD16E             BNE.N    ??AppS2wCmd_XmlSend_12
   4045          			return S2W_FAILURE;
   4046          
   4047          		//if (!(*profName))
   4048          		if ((NULL == profName) || (*profName == NULL))
   \   00000104   0x2E00             CMP      R6,#+0
   \   00000106   0xBF1C             ITT      NE 
   \   00000108   0x7830             LDRBNE   R0,[R6, #+0]
   \   0000010A   0x2800             CMPNE    R0,#+0
   \                     ??AppS2wCmd_XmlSend_2:
   \   0000010C   0xD078             BEQ.N    ??AppS2wCmd_XmlSend_0
   4049          		{
   4050          			return S2W_EINVAL;
   4051          		}
   4052          		GsnXMLStr_SetRootTag(s2wCidList[cid].xmlParserCtx,profName);
   \   0000010E   0x.... 0x....      BL       ?Subroutine32
   4053                  len=0;
   \                     ??CrossCallReturnLabel_272:
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0x9005             STR      R0,[SP, #+20]
   4054          		/*Number of tags*/
   4055          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000116   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_117:
   \   0000011A   0x0005             MOVS     R5,R0
   4056          		if (p != NULL)
   \   0000011C   0xBF1C             ITT      NE 
   \   0000011E   0xA905             ADDNE    R1,SP,#+20
   \   00000120   0x.... 0x....      BLNE     AppS2wParse_Int
   4057          		AppS2wParse_Int(p,  &len);
   4058          		if(len != 0)
   \   00000124   0x9805             LDR      R0,[SP, #+20]
   \   00000126   0xB120             CBZ.N    R0,??AppS2wCmd_XmlSend_13
   4059          
   4060          		GsnXMLStr_SetTagCount(s2wCidList[cid].xmlParserCtx,len);
   \   00000128   0x4601             MOV      R1,R0
   \   0000012A   0xF8D8 0x00E4      LDR      R0,[R8, #+228]
   \   0000012E   0x.... 0x....      BL       GsnXMLStr_SetTagCount
   4061          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   4062                  /* check if custom headers has to be added */
   4063                  p = NULL;
   4064                  len = 0;
   4065          
   4066                  p = AppS2wParse_NextParamGet(&ptr);
   4067                  if (NULL != p)
   4068                  {
   4069                      status = AppS2wParse_Boolean(p, &statusline);
   4070                      if (status != S2W_SUCCESS)
   4071                      {
   4072                          return status;
   4073                      }
   4074                      p = NULL;
   4075                      p = AppS2wParse_NextParamGet(&ptr);
   4076                      AppS2wParse_Int(p,  &len);
   4077                      if(len != 0)
   4078                      {
   4079                          headercount = len;
   4080                      }
   4081                  }
   4082          #endif
   4083          		status = AppS2w_HttpdCtxInit(&s2wCidList[cid].httpdCtx,1);
   \                     ??AppS2wCmd_XmlSend_13:
   \   00000132   0xF108 0x0694      ADD      R6,R8,#+148
   \   00000136   0x2101             MOVS     R1,#+1
   \   00000138   0x4630             MOV      R0,R6
   \   0000013A   0x.... 0x....      BL       AppS2w_HttpdCtxInit
   4084          		AppS2w_HttpdMethodSet(&s2wCidList[cid].httpdCtx,(UINT8)method);
   \   0000013E   0x9904             LDR      R1,[SP, #+16]
   \   00000140   0x4605             MOV      R5,R0
   \   00000142   0xB2C9             UXTB     R1,R1
   \   00000144   0x4630             MOV      R0,R6
   \   00000146   0x.... 0x....      BL       AppS2w_HttpdMethodSet
   4085          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   4086                  AppS2w_HttpStatusLineSet(&s2wCidList[cid].httpdCtx, statusline);
   4087                  AppS2w_HttpHdrCountSet(&s2wCidList[cid].httpdCtx, headercount);
   4088          #endif
   4089          		if(s2wappMainTaskCtxt->respTimeOut !=0)
   \   0000014A   0x6820             LDR      R0,[R4, #+0]
   \   0000014C   0xF646 0x31BC      MOVW     R1,#+27580
   \   00000150   0x180A             ADDS     R2,R1,R0
   \   00000152   0x6852             LDR      R2,[R2, #+4]
   \   00000154   0xB1B2             CBZ.N    R2,??AppS2wCmd_XmlSend_7
   4090          		{
   4091          			s2wappMainTaskCtxt->responseInprogress=1;
   \   00000156   0x2201             MOVS     R2,#+1
   \   00000158   0x540A             STRB     R2,[R1, R0]
   4092          		GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl);
   \   0000015A   0xF646 0x36E8      MOVW     R6,#+27624
   \   0000015E   0x6820             LDR      R0,[R4, #+0]
   \   00000160   0x5830             LDR      R0,[R6, R0]
   \   00000162   0x.... 0x....      BL       GsnSoftTmr_Stop
   4093          		s2wappMainTaskCtxt->respTimeOutTmrHndl = GsnSoftTmr_Start(&s2wappMainTaskCtxt->respTimeOutTmr,
   4094          						  GSN_SOFT_TMR_ONESHOT,0, (ULONG64)(s2wappMainTaskCtxt->respTimeOut),
   4095          						  ( GSN_SOFT_TMR_CBR_T )AppMcu_RespTimeoutCb, &s2wCidList[cid].sd );
   \   00000166   0x6827             LDR      R7,[R4, #+0]
   \   00000168   0x.... 0x....      BL       ?Subroutine53
   4096          		}
   4097          		return status;
   4098          	}
   \                     ??CrossCallReturnLabel_340:
   \   0000016C   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_284:
   \   00000170   0x59C0             LDR      R0,[R0, R7]
   \   00000172   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000176   0xF507 0x40D6      ADD      R0,R7,#+27392
   \   0000017A   0x30C8             ADDS     R0,R0,#+200
   \   0000017C   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000180   0x6821             LDR      R1,[R4, #+0]
   \   00000182   0x5070             STR      R0,[R6, R1]
   4099          	else
   4100          #endif
   4101          #if (defined(S2W_GSLINK_XML) || defined(S2W_GSLINK_RAW )) &&  (defined (S2W_HTTPS_SUPPORT) || defined(S2W_HTTPC_SUPPORT))
   4102          	if((method == GSN_HTTP_METHOD_GET) && s2wappMainTaskCtxt->xmlParseEn == 1)
   4103              {
   4104                  if(GSN_HTTP_METHOD_POST == method)
   4105                  {
   4106                      gsn_free(httpConfInfo.reqPathPtr);
   4107                      /* type is post and content length is not optional */
   4108                      return S2W_EINVAL;
   4109                  }
   4110                  httpConfInfo.reqBodyTotalLen = 0;
   4111                  httpConfInfo.reqBodyLen = 0;
   4112          
   4113                  pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   4114                  if(pHttpData != NULL)
   4115                  {
   4116                      GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   4117          			status = AppS2w_GslinkInit(cid);
   4118          			if(status == S2W_FAILURE)
   4119          				return status;
   4120          			status = S2wHttp_XmlSend(cid);
   4121          			AppS2w_GslinkDeInit(cid,0);
   4122                  }
   4123                  else
   4124                  {
   4125                      return S2W_FAILURE;
   4126                  }
   4127          
   4128                  if(pHttpData != NULL)
   4129                  {
   4130                      GsnOsal_SemRelease(&pHttpData->opInProgress);
   4131                  }
   4132              }
   4133              else if(s2wappMainTaskCtxt->xmlParseEn == 1)    	/*http post*/
   4134              {
   4135          
   4136          		if ((NULL == profName) || (*profName == NULL))
   4137          		{
   4138          			return S2W_EINVAL;
   4139          		}
   4140          		/*Number of tags*/
   4141          		p = AppS2wParse_NextParamGet(&ptr);
   4142          		if (!p)
   4143          		{
   4144          			return S2W_EINVAL;
   4145          		}
   4146          		AppS2wParse_Int(p, &len);
   4147          		if(len == 0)
   4148          			return S2W_EINVAL;
   4149          		pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   4150          		if(pHttpData == NULL)
   4151          		{
   4152          			return S2W_FAILURE;
   4153          		}
   4154          		GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   4155          		status = AppS2w_GslinkInit(cid);
   4156          		if(status == S2W_FAILURE)
   4157          			return status;
   4158          		GsnXMLStr_SetRootTag(s2wCidList[cid].xmlParserCtx,profName);
   4159          		GsnXMLStr_SetTagCount(s2wCidList[cid].xmlParserCtx,len);
   4160              }
   4161          	else
   4162          		return S2W_FAILURE;
   4163          #endif
   4164              return status;
   \                     ??AppS2wCmd_XmlSend_7:
   \   00000184   0xB2E8             UXTB     R0,R5
   \                     ??AppS2wCmd_XmlSend_1:
   \   00000186   0xB009             ADD      SP,SP,#+36
   \   00000188   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   \                     ??AppS2wCmd_XmlSend_11:
   \   0000018C   0x9904             LDR      R1,[SP, #+16]
   \   0000018E   0x2901             CMP      R1,#+1
   \   00000190   0xBF02             ITTT     EQ 
   \   00000192   0x6821             LDREQ    R1,[R4, #+0]
   \   00000194   0x5C41             LDRBEQ   R1,[R0, R1]
   \   00000196   0x2901             CMPEQ    R1,#+1
   \   00000198   0xD120             BNE.N    ??AppS2wCmd_XmlSend_14
   \   0000019A   0x2000             MOVS     R0,#+0
   \   0000019C   0x61F8             STR      R0,[R7, #+28]
   \   0000019E   0x61B8             STR      R0,[R7, #+24]
   \   000001A0   0x4648             MOV      R0,R9
   \   000001A2   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   000001A6   0x0004             MOVS     R4,R0
   \   000001A8   0xD044             BEQ.N    ??AppS2wCmd_XmlSend_9
   \   000001AA   0xF04F 0x31FF      MOV      R1,#-1
   \   000001AE   0xF104 0x0030      ADD      R0,R4,#+48
   \   000001B2   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   000001B6   0x4648             MOV      R0,R9
   \   000001B8   0x.... 0x....      BL       AppS2w_GslinkInit
   \   000001BC   0x4605             MOV      R5,R0
   \   000001BE   0x2D01             CMP      R5,#+1
   \   000001C0   0xD0E0             BEQ.N    ??AppS2wCmd_XmlSend_7
   \   000001C2   0x4648             MOV      R0,R9
   \   000001C4   0x.... 0x....      BL       S2wHttp_XmlSend
   \   000001C8   0x4605             MOV      R5,R0
   \   000001CA   0x2100             MOVS     R1,#+0
   \   000001CC   0x4648             MOV      R0,R9
   \   000001CE   0x.... 0x....      BL       AppS2w_GslinkDeInit
   \   000001D2   0xF104 0x0030      ADD      R0,R4,#+48
   \   000001D6   0x.... 0x....      BL       GsnOsal_SemRelease
   \   000001DA   0xE7D3             B.N      ??AppS2wCmd_XmlSend_7
   \                     ??AppS2wCmd_XmlSend_14:
   \   000001DC   0x6821             LDR      R1,[R4, #+0]
   \   000001DE   0x5C40             LDRB     R0,[R0, R1]
   \   000001E0   0x2801             CMP      R0,#+1
   \                     ??AppS2wCmd_XmlSend_12:
   \   000001E2   0xD127             BNE.N    ??AppS2wCmd_XmlSend_9
   \   000001E4   0x2E00             CMP      R6,#+0
   \   000001E6   0xBF1C             ITT      NE 
   \   000001E8   0x7830             LDRBNE   R0,[R6, #+0]
   \   000001EA   0x2800             CMPNE    R0,#+0
   \   000001EC   0xD008             BEQ.N    ??AppS2wCmd_XmlSend_0
   \   000001EE   0x.... 0x....      BL       ??Subroutine11_0
   \                     ??CrossCallReturnLabel_116:
   \   000001F2   0x0005             MOVS     R5,R0
   \   000001F4   0xD004             BEQ.N    ??AppS2wCmd_XmlSend_0
   \   000001F6   0xA905             ADD      R1,SP,#+20
   \   000001F8   0x.... 0x....      BL       AppS2wParse_Int
   \   000001FC   0x9805             LDR      R0,[SP, #+20]
   \   000001FE   0xB908             CBNZ.N   R0,??AppS2wCmd_XmlSend_15
   \                     ??AppS2wCmd_XmlSend_0:
   \   00000200   0x2002             MOVS     R0,#+2
   \   00000202   0xE7C0             B.N      ??AppS2wCmd_XmlSend_1
   \                     ??AppS2wCmd_XmlSend_15:
   \   00000204   0x4648             MOV      R0,R9
   \   00000206   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   0000020A   0x0004             MOVS     R4,R0
   \   0000020C   0xD012             BEQ.N    ??AppS2wCmd_XmlSend_9
   \   0000020E   0xF04F 0x31FF      MOV      R1,#-1
   \   00000212   0x3030             ADDS     R0,R0,#+48
   \   00000214   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   00000218   0x4648             MOV      R0,R9
   \   0000021A   0x.... 0x....      BL       AppS2w_GslinkInit
   \   0000021E   0x4605             MOV      R5,R0
   \   00000220   0x2D01             CMP      R5,#+1
   \   00000222   0xD0AF             BEQ.N    ??AppS2wCmd_XmlSend_7
   \   00000224   0x.... 0x....      BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_271:
   \   00000228   0x9905             LDR      R1,[SP, #+20]
   \   0000022A   0xF8D8 0x00E4      LDR      R0,[R8, #+228]
   \   0000022E   0x.... 0x....      BL       GsnXMLStr_SetTagCount
   \   00000232   0xE7A7             B.N      ??AppS2wCmd_XmlSend_7
   \                     ??AppS2wCmd_XmlSend_9:
   \   00000234   0x2001             MOVS     R0,#+1
   \   00000236   0xE7A6             B.N      ??AppS2wCmd_XmlSend_1
   4165          
   4166          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0xF8D8 0x00E4      LDR      R0,[R8, #+228]
   \   00000004   0x4631             MOV      R1,R6
   \   00000006   0x.... 0x....      B.W      GsnXMLStr_SetRootTag

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   0xF108 0x001C      ADD      R0,R8,#+28
   \   00000004   0x9003             STR      R0,[SP, #+12]
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable199
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0x9002             STR      R0,[SP, #+8]
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xF646 0x30C0      MOVW     R0,#+27584
   \   00000008   0x460B             MOV      R3,R1
   \   0000000A   0x4770             BX       LR
   4167          
   4168          /**
   4169           ******************************************************************
   4170           * @ingroup S2w-Application
   4171           * @brief Process the xml data.
   4172           *   This function encodes the xml data .
   4173           * @param cid - cid of the http connection.
   4174           * @param dataBuffer - data buffer
   4175            * @param inBuflen - data buffer length
   4176           * @return None
   4177           ******************************************************************/
   4178          

   \                                 In section .text, align 2, keep-with-next
   4179          VOID
   4180          AppS2w_XmlDataProcess(UINT8 cid,UINT8 *dataBuffer,UINT32 inBuflen,UINT32 elementType)
   4181          {
   \                     AppS2w_XmlDataProcess:
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   \   00000004   0x4604             MOV      R4,R0
   4182          	UINT32 bufSpaceLeft;
   4183          	UINT8 status=S2W_SUCCESS;
   \   00000006   0xF44F 0x7094      MOV      R0,#+296
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable195
   \   0000000E   0x.... 0x....      LDR.W    R6,??DataTable189_1
   \   00000012   0x.... 0x....      LDR.W    R9,??DataTable196_1  ;; 0x8000000b
   \   00000016   0x.... 0x....      LDR.W    R10,??DataTable193_2
   \   0000001A   0xB086             SUB      SP,SP,#+24
   \   0000001C   0xFB00 0x1804      MLA      R8,R0,R4,R1
   \   00000020   0xF646 0x3755      MOVW     R7,#+27477
   4184          	GSN_STATUS encodeStatus;
   4185          	do
   4186          	{
   4187          		/* Check for valid xmlparser context, if socket closed or sent failed , then closed  the cid */
   4188          		if(s2wCidList[cid].xmlParserCtx == NULL)
   \                     ??AppS2w_XmlDataProcess_0:
   \   00000024   0xF108 0x00E0      ADD      R0,R8,#+224
   \   00000028   0x6841             LDR      R1,[R0, #+4]
   \   0000002A   0x2900             CMP      R1,#+0
   \   0000002C   0xF000 0x80BF      BEQ.W    ??AppS2w_XmlDataProcess_1
   4189          		{
   4190          			return;
   4191          		}
   4192          		bufSpaceLeft =  s2wCidList[cid].httpdCtx.httpdMaxBufferSize - s2wCidList[cid].httpdCtx.httpdBufferLenUsed;
   \   00000030   0xF108 0x0294      ADD      R2,R8,#+148
   \   00000034   0xF8D8 0x1094      LDR      R1,[R8, #+148]
   \   00000038   0x6852             LDR      R2,[R2, #+4]
   4193          		encodeStatus = GsnXMLStr_Encode((s2wCidList[(cid)].xmlParserCtx),dataBuffer,inBuflen ,elementType,
   4194          				&(s2wCidList[(cid)].httpdCtx.httpdBuffer),s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed,&bufSpaceLeft);
   \   0000003A   0x9B08             LDR      R3,[SP, #+32]
   \   0000003C   0x9101             STR      R1,[SP, #+4]
   \   0000003E   0x1A52             SUBS     R2,R2,R1
   \   00000040   0x9204             STR      R2,[SP, #+16]
   \   00000042   0xF108 0x019C      ADD      R1,R8,#+156
   \   00000046   0xAA04             ADD      R2,SP,#+16
   \   00000048   0x9202             STR      R2,[SP, #+8]
   \   0000004A   0x9100             STR      R1,[SP, #+0]
   \   0000004C   0x9A07             LDR      R2,[SP, #+28]
   \   0000004E   0x9906             LDR      R1,[SP, #+24]
   \   00000050   0x6840             LDR      R0,[R0, #+4]
   \   00000052   0x.... 0x....      BL       GsnXMLStr_Encode
   \   00000056   0x4605             MOV      R5,R0
   4195          #if (defined (S2W_HTTPS_SUPPORT) || defined(S2W_HTTPC_SUPPORT))
   4196          	if((httpConfInfo.reqMethod == GSN_HTTP_METHOD_POST))
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable194
   \   0000005C   0x7840             LDRB     R0,[R0, #+1]
   \   0000005E   0x2803             CMP      R0,#+3
   \   00000060   0xD141             BNE.N    ??AppS2w_XmlDataProcess_2
   4197          	{
   4198          		if(encodeStatus == GSN_SUCCESS)
   \   00000062   0xB9BD             CBNZ.N   R5,??AppS2w_XmlDataProcess_3
   4199          		{
   4200          				S2W_HTTP_DATA_T *pHttpData;
   4201          			s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed +=bufSpaceLeft;
   \   00000064   0x.... 0x....      BL       ?Subroutine54
   4202          			status = AppS2wHal_XmlPost(cid);
   \                     ??CrossCallReturnLabel_342:
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       AppS2wHal_XmlPost
   \   0000006E   0x4683             MOV      R11,R0
   4203          			AppS2w_GslinkDeInit(cid,0);
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       AppS2w_GslinkDeInit
   4204          			GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \   00000078   0x.... 0x....      BL       ?Subroutine22
   4205          			AppS2wProcess_StatusNotify(status, 0);
   \                     ??CrossCallReturnLabel_244:
   \   0000007C   0x2100             MOVS     R1,#+0
   \   0000007E   0x4658             MOV      R0,R11
   \   00000080   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   4206          			GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000084   0x.... 0x....      BL       ?Subroutine48
   4207          			pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   \                     ??CrossCallReturnLabel_323:
   \   00000088   0x4620             MOV      R0,R4
   \   0000008A   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   4208          			if(pHttpData != NULL)
   \   0000008E   0xB350             CBZ.N    R0,??AppS2w_XmlDataProcess_2
   4209          			{
   4210          				GsnOsal_SemRelease(&pHttpData->opInProgress);
   \   00000090   0x3030             ADDS     R0,R0,#+48
   \   00000092   0xE01F             B.N      ??AppS2w_XmlDataProcess_4
   4211          			}
   4212          		}
   4213          		else if(encodeStatus == GSN_BUFFER_FULL)/* NO space in buffer to store the encoded data*/
   \                     ??AppS2w_XmlDataProcess_3:
   \   00000094   0x454D             CMP      R5,R9
   \   00000096   0xD114             BNE.N    ??AppS2w_XmlDataProcess_5
   4214          		{
   4215          			status = AppS2wHal_XmlPost(cid);
   \   00000098   0x4620             MOV      R0,R4
   \   0000009A   0x.... 0x....      BL       AppS2wHal_XmlPost
   4216          			if(status == S2W_FAILURE)
   \   0000009E   0x2801             CMP      R0,#+1
   \   000000A0   0xD109             BNE.N    ??AppS2w_XmlDataProcess_6
   4217          			{
   4218          					GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \   000000A2   0x.... 0x....      BL       ?Subroutine22
   4219          					AppS2wProcess_StatusNotify(status, 0);					
   \                     ??CrossCallReturnLabel_243:
   \   000000A6   0x.... 0x....      BL       ?Subroutine21
   4220          					GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_238:
   \   000000AA   0x.... 0x....      BL       ?Subroutine48
   4221          					AppS2w_GslinkDeInit(cid,0);
   \                     ??CrossCallReturnLabel_322:
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       AppS2w_GslinkDeInit
   4222          			}
   4223          				status = AppS2w_HttpdCtxInit(&s2wCidList[cid].httpdCtx,1);
   \                     ??AppS2w_XmlDataProcess_6:
   \   000000B6   0x2101             MOVS     R1,#+1
   \   000000B8   0xF108 0x0094      ADD      R0,R8,#+148
   \   000000BC   0x.... 0x....      BL       AppS2w_HttpdCtxInit
   \   000000C0   0xE011             B.N      ??AppS2w_XmlDataProcess_2
   4224          		}
   4225          		else if	(encodeStatus == GSN_INVALID_PARAM)
   \                     ??AppS2w_XmlDataProcess_5:
   \   000000C2   0x.... 0x....      LDR.W    R0,??DataTable197  ;; 0x80000004
   \   000000C6   0x4285             CMP      R5,R0
   \   000000C8   0xD107             BNE.N    ??AppS2w_XmlDataProcess_7
   4226          		{
   4227          			GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \   000000CA   0x.... 0x....      BL       ?Subroutine22
   4228          			AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??CrossCallReturnLabel_242:
   \   000000CE   0x.... 0x....      BL       ?Subroutine21
   4229          			GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_237:
   \   000000D2   0x4650             MOV      R0,R10
   \                     ??AppS2w_XmlDataProcess_4:
   \   000000D4   0x.... 0x....      BL       GsnOsal_SemRelease
   \   000000D8   0xE005             B.N      ??AppS2w_XmlDataProcess_2
   4230          		}
   4231          		else
   4232          			{
   4233          			s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed +=bufSpaceLeft;
   \                     ??AppS2w_XmlDataProcess_7:
   \   000000DA   0xF8D8 0x0094      LDR      R0,[R8, #+148]
   \   000000DE   0x9904             LDR      R1,[SP, #+16]
   \   000000E0   0x1808             ADDS     R0,R1,R0
   \   000000E2   0xF8C8 0x0094      STR      R0,[R8, #+148]
   \                     ??AppS2w_XmlDataProcess_2:
   \   000000E6   0xF898 0x00E0      LDRB     R0,[R8, #+224]
   \   000000EA   0x2808             CMP      R0,#+8
   \   000000EC   0xBF18             IT       NE 
   \   000000EE   0x2809             CMPNE    R0,#+9
   \   000000F0   0xD15A             BNE.N    ??AppS2w_XmlDataProcess_8
   4234          	}
   4235          		}
   4236          #endif
   4237          #if defined(S2W_GSLINK_XML)  &&  defined(S2W_WEB_SERVER)
   4238          		if (s2wCidList[(cid)].httpdCtx.method == GSN_HTTP_METHOD_GETRESP || s2wCidList[(cid)].httpdCtx.method == GSN_HTTP_METHOD_POSTRESP)
   4239          	{
   4240          		if(encodeStatus == GSN_SUCCESS)
   \   000000F2   0xB955             CBNZ.N   R5,??AppS2w_XmlDataProcess_9
   4241          		{
   4242          			s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed +=bufSpaceLeft;
   \   000000F4   0x.... 0x....      BL       ?Subroutine54
   4243          			GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_343:
   \   000000F8   0x.... 0x....      BL       ?Subroutine22
   4244          			AppS2w_HttpSemRelease(cid);			
   \                     ??CrossCallReturnLabel_241:
   \   000000FC   0x4620             MOV      R0,R4
   \   000000FE   0x.... 0x....      BL       AppS2w_HttpSemRelease
   4245          			status = s2wappMainTaskCtxt->gsLinkSendStatus ;
   4246          			AppS2wProcess_StatusNotify(status, 0);
   \   00000102   0x6830             LDR      R0,[R6, #+0]
   \   00000104   0x5C38             LDRB     R0,[R7, R0]
   \   00000106   0x2100             MOVS     R1,#+0
   \   00000108   0xE022             B.N      ??AppS2w_XmlDataProcess_10
   4247          			GsnOsal_SemRelease(&s2wSyncSemID);
   4248          		}
   4249          		else if(encodeStatus == GSN_BUFFER_FULL)/* NO space in buffer to store the encoded data*/
   \                     ??AppS2w_XmlDataProcess_9:
   \   0000010A   0x454D             CMP      R5,R9
   \   0000010C   0xD118             BNE.N    ??AppS2w_XmlDataProcess_11
   4250          		{
   4251          			AppS2w_HttpSemRelease(cid);
   \   0000010E   0x4620             MOV      R0,R4
   \   00000110   0x.... 0x....      BL       AppS2w_HttpSemRelease
   4252          			GsnOsal_SemAcquire(&s2wCidList[cid].httpdCtx.httpdSendSem,GSN_OSAL_WAIT_FOREVER);
   \   00000114   0xF04F 0x31FF      MOV      R1,#-1
   \   00000118   0xF108 0x00C0      ADD      R0,R8,#+192
   \   0000011C   0x.... 0x....      BL       GsnOsal_SemAcquire
   4253          			s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed = 0;
   \   00000120   0x2000             MOVS     R0,#+0
   \   00000122   0xF8C8 0x0094      STR      R0,[R8, #+148]
   4254          			if(S2W_FAILURE == s2wappMainTaskCtxt->gsLinkSendStatus)
   \   00000126   0x6830             LDR      R0,[R6, #+0]
   \   00000128   0x5C38             LDRB     R0,[R7, R0]
   \   0000012A   0x2801             CMP      R0,#+1
   \   0000012C   0xD138             BNE.N    ??AppS2w_XmlDataProcess_12
   4255          			{
   4256          				//S2w_Printf("\r\n$$$ s2wappMainTaskCtxt->gsLinkSendStatus: %d", s2wappMainTaskCtxt->gsLinkSendStatus);
   4257          				GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \   0000012E   0x.... 0x....      BL       ?Subroutine22
   4258          				AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??CrossCallReturnLabel_240:
   \   00000132   0x.... 0x....      BL       ?Subroutine21
   4259          				GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_236:
   \   00000136   0x.... 0x....      BL       ?Subroutine48
   4260          				encodeStatus = GSN_INVALID_PARAM;
   \                     ??CrossCallReturnLabel_321:
   \   0000013A   0x.... 0x....      LDR.W    R5,??DataTable197  ;; 0x80000004
   \   0000013E   0xE02F             B.N      ??AppS2w_XmlDataProcess_12
   4261          			}
   4262          
   4263          			if(status == S2W_FAILURE)
   4264          			{/* to do */
   4265          			}
   4266          		}
   4267          		else if (encodeStatus == GSN_INVALID_PARAM)
   \                     ??AppS2w_XmlDataProcess_11:
   \   00000140   0x.... 0x....      LDR.W    R0,??DataTable197  ;; 0x80000004
   \   00000144   0x4285             CMP      R5,R0
   \   00000146   0xD108             BNE.N    ??AppS2w_XmlDataProcess_13
   4268          		{
   4269          			GsnOsal_SemAcquire(&s2wSyncSemID,GSN_OSAL_WAIT_FOREVER);
   \   00000148   0x.... 0x....      BL       ?Subroutine22
   4270          			AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??CrossCallReturnLabel_239:
   \   0000014C   0x2100             MOVS     R1,#+0
   \   0000014E   0x2001             MOVS     R0,#+1
   \                     ??AppS2w_XmlDataProcess_10:
   \   00000150   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   4271          			GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000154   0x.... 0x....      BL       ?Subroutine48
   4272          		}
   \                     ??CrossCallReturnLabel_320:
   \   00000158   0xE022             B.N      ??AppS2w_XmlDataProcess_12
   4273          		else
   4274          			{
   4275          				s2wCidList[(cid)].httpdCtx.httpdBufferLenUsed +=bufSpaceLeft;
   \                     ??AppS2w_XmlDataProcess_13:
   \   0000015A   0xF8D8 0x0094      LDR      R0,[R8, #+148]
   \   0000015E   0x9904             LDR      R1,[SP, #+16]
   \   00000160   0x1808             ADDS     R0,R1,R0
   \   00000162   0xF8C8 0x0094      STR      R0,[R8, #+148]
   4276          				if(s2wappMainTaskCtxt->respTimeOut !=0)
   \   00000166   0x6830             LDR      R0,[R6, #+0]
   \   00000168   0xF500 0x41D6      ADD      R1,R0,#+27392
   \   0000016C   0x31BC             ADDS     R1,R1,#+188
   \   0000016E   0x6849             LDR      R1,[R1, #+4]
   \   00000170   0xB1B1             CBZ.N    R1,??AppS2w_XmlDataProcess_12
   4277          				{
   4278          					s2wappMainTaskCtxt->responseInprogress=1;
   \   00000172   0xF646 0x31BC      MOVW     R1,#+27580
   \   00000176   0x2201             MOVS     R2,#+1
   \   00000178   0x540A             STRB     R2,[R1, R0]
   4279          				s2wappMainTaskCtxt->respTimeOutTmrHndl = GsnSoftTmr_Start(&s2wappMainTaskCtxt->respTimeOutTmr,
   4280          								GSN_SOFT_TMR_ONESHOT,0, (ULONG64)(s2wappMainTaskCtxt->respTimeOut),
   4281          								  ( GSN_SOFT_TMR_CBR_T )AppMcu_RespTimeoutCb, &s2wCidList[cid].sd);
   \   0000017A   0x.... 0x....      BL       ?Subroutine53
   4282          				}
   4283          			}
   \                     ??CrossCallReturnLabel_341:
   \   0000017E   0xF8D6 0xC000      LDR      R12,[R6, #+0]
   \   00000182   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_285:
   \   00000186   0xF850 0x000C      LDR      R0,[R0, R12]
   \   0000018A   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000018E   0xF50C 0x40D6      ADD      R0,R12,#+27392
   \   00000192   0x30C8             ADDS     R0,R0,#+200
   \   00000194   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000198   0x6832             LDR      R2,[R6, #+0]
   \   0000019A   0xF646 0x31E8      MOVW     R1,#+27624
   \   0000019E   0x5088             STR      R0,[R1, R2]
   4284          			if(s2wappMainTaskCtxt->gsLinkSendStatus == S2W_FAILURE)
   \                     ??AppS2w_XmlDataProcess_12:
   \   000001A0   0x6830             LDR      R0,[R6, #+0]
   \   000001A2   0x5C38             LDRB     R0,[R7, R0]
   \   000001A4   0x2801             CMP      R0,#+1
   \   000001A6   0xD002             BEQ.N    ??AppS2w_XmlDataProcess_1
   4285          			{
   4286          				return;
   4287          	}
   4288          		}
   4289          #endif
   4290          	}while(encodeStatus == GSN_BUFFER_FULL);
   \                     ??AppS2w_XmlDataProcess_8:
   \   000001A8   0x454D             CMP      R5,R9
   \   000001AA   0xF43F 0xAF3B      BEQ.W    ??AppS2w_XmlDataProcess_0
   4291          }
   \                     ??AppS2w_XmlDataProcess_1:
   \   000001AE   0xB009             ADD      SP,SP,#+36
   \   000001B0   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   0xF8D8 0x0094      LDR      R0,[R8, #+148]
   \   00000004   0x9904             LDR      R1,[SP, #+16]
   \   00000006   0x1808             ADDS     R0,R1,R0
   \   00000008   0xF8C8 0x0094      STR      R0,[R8, #+148]
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   0x4650             MOV      R0,R10
   \   00000002   0x.... 0x....      B.W      GsnOsal_SemRelease

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4650             MOV      R0,R10
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      B.W      AppS2wProcess_StatusNotify
   4292          
   4293          #endif
   4294          #endif
   4295          
   4296          
   4297          #ifdef S2W_ISOTX_SUPPORT
   4298          #define S2W_ISOTX_BLINK_INDEX 6
   4299          extern GSN_OSAL_SEM_T isoTxSem;
   4300          UINT8
   4301          AppS2wCmd_IsoTxStart(UINT8 *ptr)
   4302          {
   4303              UINT8 *p;
   4304              UINT8 status, index=0,times=0;
   4305              UINT32 IntArray[RX_BUF_ELEMENTS],temp;
   4306              GSN_ISOTX_BLINK_REQ_PARAM param;
   4307              memset(&param,0,sizeof(GSN_ISOTX_BLINK_REQ_PARAM));
   4308              // first parameter frequency
   4309              // 2nd param-gain
   4310              // 3rd param-blink type
   4311              // 4th parambandwidth
   4312              // 5th param-mode
   4313              // 6th param- no of blinks
   4314              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   4315              if(!p)
   4316              {
   4317                  return S2W_EINVAL;
   4318              }
   4319          	do
   4320          	{
   4321          		if(index < S2W_ISOTX_BLINK_INDEX)
   4322          		{
   4323          			status = AppS2wParse_Int(p, &temp);
   4324          			if (status != S2W_SUCCESS)
   4325          			{
   4326          				return status;
   4327          			}
   4328          			IntArray[index] = temp;
   4329          		}
   4330          		else
   4331          		{
   4332                      break;
   4333          		}
   4334          		index++;
   4335          	}while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL);
   4336          	
   4337          	param.frequency    = IntArray[0];
   4338          	param.gain         = IntArray[1];
   4339          	param.blinkType    = IntArray[2];
   4340          	param.bandwidth    = IntArray[3];
   4341          	param.testMode     = IntArray[4];
   4342          	param.subBlinkCnt  = IntArray[5];
   4343              if( (param.subBlinkCnt > GSN_WIF_WLAN_ISOTX_SUBBLINKS_MAX) || (param.subBlinkCnt < 1))
   4344              {
   4345          		return S2W_EINVAL;
   4346          	}
   4347             // 7th param- time b/w blinks
   4348           	do
   4349          	{
   4350                         if(times < param.subBlinkCnt)
   4351          		{
   4352          			status = AppS2wParse_Int(p, &temp);
   4353          			if (status != S2W_SUCCESS)
   4354          			{
   4355          				return status;
   4356          			}
   4357          			param.subBlinkInt[times] = temp;
   4358          		}
   4359          		else
   4360          		{
   4361                       break;
   4362          		}
   4363          		index++;
   4364          		times++;
   4365          	}while((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL);
   4366              status= GsnIsotx_BlinkReq(&s2wappMainTaskCtxt->isotxCtx,&param);
   4367              if(status != GSN_SUCCESS)
   4368              {
   4369                  App_IsotxCtrlNotifCb(s2wappMainTaskCtxt,0,0,NULL);
   4370              }
   4371          	// wait on a semaphore
   4372              GsnOsal_SemAcquire(&isoTxSem, GSN_OSAL_WAIT_FOREVER);
   4373              return S2W_SUCCESS;
   4374          }
   4375          
   4376          
   4377          UINT8
   4378          AppS2wCmd_IsoTxStop(UINT8 *ptr)
   4379          {
   4380              return GsnIsotx_StopReq(&s2wappMainTaskCtxt->isotxCtx);
   4381          }
   4382          
   4383          
   4384          UINT8
   4385          AppS2wCmd_IsoTxConfig(UINT8 *ptr)
   4386          {
   4387              UINT8 *p;
   4388              UINT8 status;
   4389              GSN_ISOTX_REG_WRITE_REQ_PARAM param;
   4390          	UINT32 addr;
   4391              // addr
   4392              p = AppS2wParse_NextParamGet(&ptr);
   4393              if (!p)
   4394              {
   4395                  return S2W_EINVAL;
   4396              }
   4397              status = AppS2wParse_Int(p, &addr);
   4398              if (status != S2W_SUCCESS)
   4399          	{
   4400          	    return status;
   4401          	}
   4402          	param.regAddrVals[0].addr= addr;
   4403             // value
   4404              p = AppS2wParse_NextParamGet(&ptr);
   4405              if (!p)
   4406              {
   4407                  return S2W_EINVAL;
   4408              }
   4409              status = AppS2wParse_Int(p, &(param.regAddrVals[0].val));
   4410              if (status != S2W_SUCCESS)
   4411          	{
   4412          	    return status;
   4413          	}
   4414          	param.numRegVals=1;
   4415          	return (GsnIsotx_RegWriteReq(&s2wappMainTaskCtxt->isotxCtx, &param));
   4416          
   4417          }
   4418          
   4419          #endif
   4420          
   4421          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   4422          /**
   4423           ******************************************************************
   4424           * @ingroup S2w-Application
   4425           * @brief Unsolicited tx configuration function.
   4426           *   This function validate the parameter passed and configures
   4427           *   the same for unsolicited data transmission.
   4428           * @param ptr pointer to the input parameter
   4429           * @return S2W_SUCCESS - operation successful.
   4430           * @retval S2W_EINVAL  - operation failure-invalid command.
   4431           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4432          UINT8
   4433          S2w_CmdUnSolicitedTx(UINT8 *ptr)
   4434          {
   \                     S2w_CmdUnSolicitedTx:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   4435              UINT8 *p, status;
   4436              UINT32 temp=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   4437          
   4438              memset(&s2wappMainTaskCtxt->frame,0,sizeof(s2wappMainTaskCtxt->frame));
   \   00000008   0x222C             MOVS     R2,#+44
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable196
   \   0000000E   0x6820             LDR      R0,[R4, #+0]
   \   00000010   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x30A0             ADDS     R0,R0,#+160
   \   00000018   0x.... 0x....      BL       memset
   4439              /* get the frame control */
   4440              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001C   0x.... 0x....      BL       ??Subroutine7_0
   4441              if (!p)
   \                     ??CrossCallReturnLabel_55:
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD063             BEQ.N    ??S2w_CmdUnSolicitedTx_0
   4442              {
   4443                  return S2W_EINVAL;
   4444              }
   4445              status = AppS2wParse_Int(p,&temp);
   \   00000024   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_197:
   \   00000028   0x0005             MOVS     R5,R0
   4446              if (status != S2W_SUCCESS)
   \   0000002A   0xD13E             BNE.N    ??S2w_CmdUnSolicitedTx_1
   4447              {
   4448                  return status;
   4449              }
   4450              s2wappMainTaskCtxt->frame.frameControl=temp;
   \   0000002C   0x6821             LDR      R1,[R4, #+0]
   \   0000002E   0x9A00             LDR      R2,[SP, #+0]
   \   00000030   0xF247 0x50A6      MOVW     R0,#+30118
   \   00000034   0x5242             STRH     R2,[R0, R1]
   4451              /* get the seq control */
   4452              p = AppS2wParse_NextParamGet(&ptr);
   \   00000036   0x.... 0x....      BL       ??Subroutine7_0
   4453              if (!p)
   \                     ??CrossCallReturnLabel_54:
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD056             BEQ.N    ??S2w_CmdUnSolicitedTx_0
   4454              {
   4455                  return S2W_EINVAL;
   4456              }
   4457              status = AppS2wParse_Int(p,&temp);
   \   0000003E   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_196:
   \   00000042   0x0005             MOVS     R5,R0
   4458              if (status != S2W_SUCCESS)
   \   00000044   0xD131             BNE.N    ??S2w_CmdUnSolicitedTx_1
   4459              {
   4460                  return status;
   4461              }
   4462              s2wappMainTaskCtxt->frame.seqControl=temp;
   \   00000046   0x6821             LDR      R1,[R4, #+0]
   \   00000048   0x9A00             LDR      R2,[SP, #+0]
   \   0000004A   0xF247 0x50A8      MOVW     R0,#+30120
   \   0000004E   0x5242             STRH     R2,[R0, R1]
   4463              /* get the channel */
   4464              p = AppS2wParse_NextParamGet(&ptr);
   \   00000050   0x.... 0x....      BL       ??Subroutine7_0
   4465              if (!p)
   \                     ??CrossCallReturnLabel_53:
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD049             BEQ.N    ??S2w_CmdUnSolicitedTx_0
   4466              {
   4467                  return S2W_EINVAL;
   4468              }
   4469              status = AppS2wParse_Int(p,&temp);
   \   00000058   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_195:
   \   0000005C   0x0005             MOVS     R5,R0
   4470              if (status != S2W_SUCCESS)
   \   0000005E   0xD124             BNE.N    ??S2w_CmdUnSolicitedTx_1
   4471              {
   4472                  return status;
   4473              }
   4474              s2wappMainTaskCtxt->frame.channelNum = temp;
   \   00000060   0x6821             LDR      R1,[R4, #+0]
   \   00000062   0x9A00             LDR      R2,[SP, #+0]
   \   00000064   0xF247 0x50AA      MOVW     R0,#+30122
   \   00000068   0x5442             STRB     R2,[R0, R1]
   4475              /* get the txrate */
   4476          
   4477              p = AppS2wParse_NextParamGet(&ptr);
   \   0000006A   0x.... 0x....      BL       ??Subroutine7_0
   4478              if (!p)
   \                     ??CrossCallReturnLabel_52:
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD03C             BEQ.N    ??S2w_CmdUnSolicitedTx_0
   4479              {
   4480                  return S2W_EINVAL;
   4481              }
   4482              status = AppS2wParse_Int(p,&temp);
   \   00000072   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_194:
   \   00000076   0x0005             MOVS     R5,R0
   4483              if (status != S2W_SUCCESS)
   \   00000078   0xD117             BNE.N    ??S2w_CmdUnSolicitedTx_1
   4484              {
   4485                  return status;
   4486              }
   4487              s2wappMainTaskCtxt->frame.txRate = temp;
   \   0000007A   0x6821             LDR      R1,[R4, #+0]
   \   0000007C   0x9A00             LDR      R2,[SP, #+0]
   \   0000007E   0xF247 0x50AB      MOVW     R0,#+30123
   \   00000082   0x5442             STRB     R2,[R0, R1]
   4488              /* get the power info */
   4489              p = AppS2wParse_NextParamGet(&ptr);
   \   00000084   0x.... 0x....      BL       ??Subroutine7_0
   4490              if (!p)
   \                     ??CrossCallReturnLabel_51:
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD02F             BEQ.N    ??S2w_CmdUnSolicitedTx_0
   4491              {
   4492                  return S2W_EINVAL;
   4493              }
   4494              status = AppS2wParse_Int(p,&temp);
   \   0000008C   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_193:
   \   00000090   0x0005             MOVS     R5,R0
   4495              if (status != S2W_SUCCESS)
   \   00000092   0xD10A             BNE.N    ??S2w_CmdUnSolicitedTx_1
   4496              {
   4497                  return status;
   4498              }
   4499              s2wappMainTaskCtxt->frame.power = temp;
   \   00000094   0x6821             LDR      R1,[R4, #+0]
   \   00000096   0x9A00             LDR      R2,[SP, #+0]
   \   00000098   0xF247 0x50A4      MOVW     R0,#+30116
   \   0000009C   0x5442             STRB     R2,[R0, R1]
   4500              /* get the ccaenable info */
   4501              p = AppS2wParse_NextParamGet(&ptr);
   \   0000009E   0x.... 0x....      BL       ??Subroutine7_0
   4502              if (!p)
   \                     ??CrossCallReturnLabel_50:
   \   000000A2   0xB318             CBZ.N    R0,??S2w_CmdUnSolicitedTx_0
   4503              {
   4504                  return S2W_EINVAL;
   4505              }
   4506              status = AppS2wParse_Int(p,&temp);
   \   000000A4   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_192:
   \   000000A8   0x0005             MOVS     R5,R0
   4507              if (status != S2W_SUCCESS)
   \                     ??S2w_CmdUnSolicitedTx_1:
   \   000000AA   0xD179             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4508              {
   4509                  return status;
   4510              }
   4511              s2wappMainTaskCtxt->frame.ccaEnable = temp;
   \   000000AC   0x6821             LDR      R1,[R4, #+0]
   \   000000AE   0x9A00             LDR      R2,[SP, #+0]
   \   000000B0   0xF247 0x50A5      MOVW     R0,#+30117
   \   000000B4   0x5442             STRB     R2,[R0, R1]
   4512              /* get the len */
   4513              p = AppS2wParse_NextParamGet(&ptr);
   \   000000B6   0x.... 0x....      BL       ??Subroutine7_0
   4514              if (!p)
   \                     ??CrossCallReturnLabel_49:
   \   000000BA   0xB1B8             CBZ.N    R0,??S2w_CmdUnSolicitedTx_0
   4515              {
   4516                  return S2W_EINVAL;
   4517              }
   4518              status = AppS2wParse_Int(p,&temp);
   \   000000BC   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_191:
   \   000000C0   0x0005             MOVS     R5,R0
   4519              if (status != S2W_SUCCESS)
   \   000000C2   0xD16D             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4520              {
   4521                  return status;
   4522              }
   4523              s2wappMainTaskCtxt->frame.macFrameLen = temp;
   \   000000C4   0x6821             LDR      R1,[R4, #+0]
   \   000000C6   0x9A00             LDR      R2,[SP, #+0]
   \   000000C8   0xF247 0x50AC      MOVW     R0,#+30124
   \   000000CC   0x5242             STRH     R2,[R0, R1]
   4524              // tx wait time
   4525              p = AppS2wParse_NextParamGet(&ptr);
   \   000000CE   0x.... 0x....      BL       ??Subroutine7_0
   4526              if (!p)
   \                     ??CrossCallReturnLabel_48:
   \   000000D2   0xB158             CBZ.N    R0,??S2w_CmdUnSolicitedTx_0
   4527              {
   4528                  return S2W_EINVAL;
   4529              }
   4530              status = AppS2wParse_Int(p,&temp);
   \   000000D4   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_190:
   \   000000D8   0x0005             MOVS     R5,R0
   4531              if (status != S2W_SUCCESS)
   \   000000DA   0xD161             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4532              {
   4533                  return status;
   4534              }
   4535              s2wappMainTaskCtxt->frame.rxWaitTime = temp;
   \   000000DC   0x6821             LDR      R1,[R4, #+0]
   \   000000DE   0x9A00             LDR      R2,[SP, #+0]
   \   000000E0   0xF247 0x50C8      MOVW     R0,#+30152
   \   000000E4   0x5042             STR      R2,[R0, R1]
   4536          
   4537             /* get the remote mac addr1  */
   4538              p = AppS2wParse_NextParamGet(&ptr);
   \   000000E6   0x.... 0x....      BL       ??Subroutine7_0
   4539              if (!p)
   \                     ??CrossCallReturnLabel_47:
   \   000000EA   0xB908             CBNZ.N   R0,??S2w_CmdUnSolicitedTx_3
   4540              {
   4541                  return S2W_EINVAL;
   \                     ??S2w_CmdUnSolicitedTx_0:
   \   000000EC   0x2002             MOVS     R0,#+2
   \   000000EE   0xBD3E             POP      {R1-R5,PC}       ;; return
   4542              }
   4543              status = AppS2wParse_Mac(p,s2wappMainTaskCtxt->frame.addr1.array);
   \                     ??S2w_CmdUnSolicitedTx_3:
   \   000000F0   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_324:
   \   000000F4   0x31AE             ADDS     R1,R1,#+174
   \   000000F6   0x.... 0x....      BL       AppS2wParse_Mac
   \   000000FA   0x0005             MOVS     R5,R0
   4544              if (status != S2W_SUCCESS)
   \   000000FC   0xD150             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4545              {
   4546                  return status;
   4547              }
   4548              /* get the addr3 */
   4549              p = AppS2wParse_NextParamGet(&ptr);
   \   000000FE   0x.... 0x....      BL       ??Subroutine7_0
   4550              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_46:
   \   00000102   0x2800             CMP      R0,#+0
   \   00000104   0xBF1C             ITT      NE 
   \   00000106   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000108   0x2900             CMPNE    R1,#+0
   \   0000010A   0xD006             BEQ.N    ??S2w_CmdUnSolicitedTx_4
   4551              {
   4552                  status = AppS2wParse_Mac(p,s2wappMainTaskCtxt->frame.addr3.array);
   \   0000010C   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_325:
   \   00000110   0x31BA             ADDS     R1,R1,#+186
   \   00000112   0x.... 0x....      BL       AppS2wParse_Mac
   \   00000116   0x0005             MOVS     R5,R0
   4553                  if (status != S2W_SUCCESS)
   \   00000118   0xD142             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4554                  {
   4555                      return status;
   4556                  }
   4557              }
   4558              /* get the addr4 */
   4559              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??S2w_CmdUnSolicitedTx_4:
   \   0000011A   0x.... 0x....      BL       ??Subroutine7_0
   4560              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_45:
   \   0000011E   0x2800             CMP      R0,#+0
   \   00000120   0xBF1C             ITT      NE 
   \   00000122   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000124   0x2900             CMPNE    R1,#+0
   \   00000126   0xD006             BEQ.N    ??S2w_CmdUnSolicitedTx_5
   4561              {
   4562                  status = AppS2wParse_Mac(p,s2wappMainTaskCtxt->frame.addr4.array);
   \   00000128   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_326:
   \   0000012C   0x31C0             ADDS     R1,R1,#+192
   \   0000012E   0x.... 0x....      BL       AppS2wParse_Mac
   \   00000132   0x0005             MOVS     R5,R0
   4563                  if (status != S2W_SUCCESS)
   \   00000134   0xD134             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4564                  {
   4565                      return status;
   4566                  }
   4567              }
   4568              // optional field for time stamp return
   4569              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??S2w_CmdUnSolicitedTx_5:
   \   00000136   0x.... 0x....      BL       ??Subroutine7_0
   4570              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_44:
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xBF1C             ITT      NE 
   \   0000013E   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000140   0x2900             CMPNE    R1,#+0
   \   00000142   0xD006             BEQ.N    ??S2w_CmdUnSolicitedTx_6
   4571              {
   4572                  status = AppS2wParse_Boolean(p,&s2wappMainTaskCtxt->uamTimeStampReturn);
   \   00000144   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_327:
   \   00000148   0x31D4             ADDS     R1,R1,#+212
   \   0000014A   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000014E   0x0005             MOVS     R5,R0
   4573                  if (status != S2W_SUCCESS)
   \   00000150   0xD126             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4574                  {
   4575                      return status;
   4576                  }
   4577              }
   4578              // optional field for tx and rx
   4579              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??S2w_CmdUnSolicitedTx_6:
   \   00000152   0x.... 0x....      BL       ??Subroutine7_0
   4580              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_43:
   \   00000156   0x2800             CMP      R0,#+0
   \   00000158   0xBF1C             ITT      NE 
   \   0000015A   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000015C   0x2900             CMPNE    R1,#+0
   \   0000015E   0xD006             BEQ.N    ??S2w_CmdUnSolicitedTx_7
   4581              {
   4582                  status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->RxParam.rxFrameTypeBitMap);
   \   00000160   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_328:
   \   00000164   0x31DC             ADDS     R1,R1,#+220
   \   00000166   0x.... 0x....      BL       AppS2wParse_Int
   \   0000016A   0x0005             MOVS     R5,R0
   4583                  if (status != S2W_SUCCESS)
   \   0000016C   0xD118             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4584                  {
   4585                      return status;
   4586                  }
   4587              }
   4588              // optional field for tx and rx
   4589              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??S2w_CmdUnSolicitedTx_7:
   \   0000016E   0x.... 0x....      BL       ??Subroutine7_0
   4590              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_42:
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xBF1C             ITT      NE 
   \   00000176   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000178   0x2900             CMPNE    R1,#+0
   \   0000017A   0xD018             BEQ.N    ??S2w_CmdUnSolicitedTx_8
   4591              {
   4592                  status = AppS2wParse_Boolean(p,&s2wappMainTaskCtxt->RxParam.ieFilterEnable);
   \   0000017C   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_329:
   \   00000180   0x31E0             ADDS     R1,R1,#+224
   \   00000182   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000186   0x0005             MOVS     R5,R0
   4593                  if (status != S2W_SUCCESS)
   \   00000188   0xD10A             BNE.N    ??S2w_CmdUnSolicitedTx_2
   4594                  {
   4595                      return status;
   4596                  }
   4597                  // if filter is enabled then filter
   4598                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000018A   0x.... 0x....      BL       ??Subroutine7_0
   4599          		if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_41:
   \   0000018E   0x2800             CMP      R0,#+0
   \   00000190   0xBF1C             ITT      NE 
   \   00000192   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000194   0x2900             CMPNE    R1,#+0
   \   00000196   0xD00A             BEQ.N    ??S2w_CmdUnSolicitedTx_8
   4600          		{
   4601          			UINT32 temp;
   4602          		    status = AppS2wParse_Int(p,&temp);
   \   00000198   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_230:
   \   0000019C   0x0005             MOVS     R5,R0
   4603          		    if (status != S2W_SUCCESS)
   \   0000019E   0xD001             BEQ.N    ??S2w_CmdUnSolicitedTx_9
   4604          		    {
   4605          		        return status;
   \                     ??S2w_CmdUnSolicitedTx_2:
   \   000001A0   0x4628             MOV      R0,R5
   \   000001A2   0xBD3E             POP      {R1-R5,PC}
   4606          		    }
   4607          		    s2wappMainTaskCtxt->RxParam.ieFilterId = temp;
   \                     ??S2w_CmdUnSolicitedTx_9:
   \   000001A4   0x6821             LDR      R1,[R4, #+0]
   \   000001A6   0x9A01             LDR      R2,[SP, #+4]
   \   000001A8   0xF247 0x50E4      MOVW     R0,#+30180
   \   000001AC   0x5042             STR      R2,[R0, R1]
   4608                   }
   4609          
   4610              }
   4611              // addr2 is the src addr
   4612              //S2w_LoadMacAddr(s2wappMainTaskCtxt->frame.addr2.array);
   4613              S2w_macAddrRTCGet(s2wappMainTaskCtxt->frame.addr2.array);
   \                     ??S2w_CmdUnSolicitedTx_8:
   \   000001AE   0x6820             LDR      R0,[R4, #+0]
   \   000001B0   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   000001B4   0x30B4             ADDS     R0,R0,#+180
   \   000001B6   0x.... 0x....      BL       S2w_macAddrRTCGet
   4614              // set the default cca threshold and timeout
   4615              s2wappMainTaskCtxt->ccaThr = (INT8)((~S2W_DFLT_CCA_THR)+1);
   \   000001BA   0x6821             LDR      R1,[R4, #+0]
   \   000001BC   0xF247 0x50CC      MOVW     R0,#+30156
   \   000001C0   0x22B0             MOVS     R2,#+176
   \   000001C2   0x5442             STRB     R2,[R0, R1]
   4616          	s2wappMainTaskCtxt->ccaTimeout = S2W_DFLT_CCA_TIMEOUT;
   \   000001C4   0xF247 0x50D0      MOVW     R0,#+30160
   \   000001C8   0x6821             LDR      R1,[R4, #+0]
   \   000001CA   0xF241 0x3288      MOVW     R2,#+5000
   \   000001CE   0x5042             STR      R2,[R0, R1]
   \   000001D0   0xE7E6             B.N      ??S2w_CmdUnSolicitedTx_2
   4617              return status;
   4618          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   0x6821             LDR      R1,[R4, #+0]
   \   00000002   0xF501 0x41EA      ADD      R1,R1,#+29952
   \   00000006   0x4770             BX       LR
   4619          
   4620          

   \                                 In section .bss, align 4
   4621          UINT8 s2wUamBufs[S2W_NUM_UAM_BUFS][1500];
   4622          UINT8 uamRxInit=0;
   \                     uamRxInit:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     s2wUamBufs:
   \   00000004                      DS8 4500

   \                                 In section .text, align 2, keep-with-next
   4623          PUBLIC GSN_STATUS
   4624          s2wUamRx_Init()
   4625          {
   \                     s2wUamRx_Init:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   4626              GSN_STATUS retCode = GSN_SUCCESS;
   4627              int i =0;
   4628              UINT8 *pBuf;
   4629          
   4630              if(!uamRxInit)
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable203
   \   00000006   0x7828             LDRB     R0,[R5, #+0]
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xB9E0             CBNZ.N   R0,??s2wUamRx_Init_0
   4631              {
   4632              GsnRingBuf_Init( &s2wappMainTaskCtxt->s2wUamBufQ, sizeof(UINT32), S2W_NUM_UAM_BUFS+1,
   4633                  s2wappMainTaskCtxt->s2wUamBufQBuf);
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable196
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0xF247 0x57F0      MOVW     R7,#+30192
   \   00000016   0xF500 0x43EA      ADD      R3,R0,#+29952
   \   0000001A   0x33F8             ADDS     R3,R3,#+248
   \   0000001C   0x2204             MOVS     R2,#+4
   \   0000001E   0x2104             MOVS     R1,#+4
   \   00000020   0x1838             ADDS     R0,R7,R0
   \   00000022   0x.... 0x....      BL       GsnRingBuf_Init
   4634              for (i = 0; i  < S2W_NUM_UAM_BUFS; i++)
   4635              {
   4636                  pBuf = s2wUamBufs[i];
   \                     ??s2wUamRx_Init_1:
   \   00000026   0xF240 0x50DC      MOVW     R0,#+1500
   \   0000002A   0xFB00 0x5004      MLA      R0,R0,R4,R5
   \   0000002E   0x1D00             ADDS     R0,R0,#+4
   \   00000030   0x9000             STR      R0,[SP, #+0]
   4637                  GsnRingBuf_Put( &s2wappMainTaskCtxt->s2wUamBufQ, &pBuf);
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0x6830             LDR      R0,[R6, #+0]
   \   00000036   0x1838             ADDS     R0,R7,R0
   \   00000038   0x.... 0x....      BL       GsnRingBuf_Put
   4638              }
   \   0000003C   0x1C64             ADDS     R4,R4,#+1
   \   0000003E   0x2C03             CMP      R4,#+3
   \   00000040   0xDBF1             BLT.N    ??s2wUamRx_Init_1
   4639                  uamRxInit =1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0x7028             STRB     R0,[R5, #+0]
   4640          	}
   4641              return retCode;
   \                     ??s2wUamRx_Init_0:
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   4642          }
   4643          

   \                                 In section .text, align 2, keep-with-next
   4644          VOID
   4645          S2W_UnassocDataIndCB(VOID *ctx, INT8 *data, UINT16 dataLen)
   4646          {
   \                     S2W_UnassocDataIndCB:
   \   00000000   0xB5FE             PUSH     {R1-R7,LR}
   4647              S2W_MSG_T recvMsg;
   4648              UINT8 *rawbuf;
   4649              if (GSN_SUCCESS == GsnRingBuf_Get( &s2wappMainTaskCtxt->s2wUamBufQ, &rawbuf))
   \   00000002   0x....             LDR.N    R6,??DataTable189_1
   \   00000004   0x6830             LDR      R0,[R6, #+0]
   \   00000006   0x460F             MOV      R7,R1
   \   00000008   0xF247 0x55F0      MOVW     R5,#+30192
   \   0000000C   0x4614             MOV      R4,R2
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x1828             ADDS     R0,R5,R0
   \   00000012   0x.... 0x....      BL       GsnRingBuf_Get
   \   00000016   0xB9E8             CBNZ.N   R0,??S2W_UnassocDataIndCB_0
   4650              {
   4651                   /* Buffer allocation successful, copy frame. This buffer is
   4652                      freed in S2W recv task */
   4653                   memcpy(rawbuf, (data+1), dataLen-1);
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x1E62             SUBS     R2,R4,#+1
   \   0000001C   0x1C79             ADDS     R1,R7,#+1
   \   0000001E   0x.... 0x....      BL       memcpy
   4654                   recvMsg.msgType = S2W_RECV_TYPE_UAMDATA;
   \   00000022   0x2036             MOVS     R0,#+54
   \   00000024   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   4655                   recvMsg.rData.dataPtr = rawbuf;
   4656                   recvMsg.msgLen = dataLen;
   \   00000028   0xF8AD 0x4008      STRH     R4,[SP, #+8]
   4657          
   4658                   if( GSN_OSAL_SUCCESS != GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg))
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x9001             STR      R0,[SP, #+4]
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable203_1
   \   00000038   0x.... 0x....      BL       _tx_queue_send
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xBF1C             ITT      NE 
   \   00000040   0xF100 0x4010      ADDNE    R0,R0,#-1879048192
   \   00000044   0xF510 0x7080      ADDSNE   R0,R0,#+256
   \   00000048   0xD004             BEQ.N    ??S2W_UnassocDataIndCB_0
   4659                   {
   4660                        GsnRingBuf_Put(&s2wappMainTaskCtxt->s2wUamBufQ,  &rawbuf);
   \   0000004A   0x6830             LDR      R0,[R6, #+0]
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0x1828             ADDS     R0,R5,R0
   \   00000050   0x.... 0x....      BL       GsnRingBuf_Put
   4661                   }
   4662              }
   4663          }
   \                     ??S2W_UnassocDataIndCB_0:
   \   00000054   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   4664          VOID
   4665          S2w_UamRx(void *buf, INT16 len)
   4666          {
   \                     S2w_UamRx:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0x460C             MOV      R4,R1
   4667              INT32 InterruptEnableStatus;
   4668          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable193_2
   \   00000008   0xF04F 0x31FF      MOV      R1,#-1
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       GsnOsal_SemAcquire
   4669          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   4670              S2w_Printf("%cD", S2W_ESC);
   \   00000012   0x211B             MOVS     R1,#+27
   \   00000014   0x....             ADR.N    R0,??DataTable189  ;; "%cD"
   \   00000016   0x.... 0x....      BL       S2w_Printf
   4671          #else
   4672              S2w_Printf1("%cD", S2W_ESC);
   4673          #endif
   4674          
   4675          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   4676              AppS2wHal_CharNPut(buf, len);
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x4621             MOV      R1,R4
   \   0000001E   0x.... 0x....      BL       AppS2wHal_CharNPut
   4677          #else
   4678              AppS2wHal_CharNPut1(buf, len);
   4679          #endif
   4680          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   4681              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   00000022   0x.... 0x....      LDR.W    R4,??DataTable196
   \   00000026   0x6821             LDR      R1,[R4, #+0]
   \   00000028   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000002C   0x5C40             LDRB     R0,[R0, R1]
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xBF08             IT       EQ 
   \   00000032   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   4682              {
   4683                  s2wSpiFs_Flush();
   4684              }
   4685          #else
   4686              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   4687              {
   4688                  s2wSpiFs_Flush1();
   4689              }
   4690          #endif
   4691          GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       GsnOsal_SemRelease
   4692          
   4693              InterruptEnableStatus = GsnOsal_IntrDisable();
   \   0000003C   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000040   0x4605             MOV      R5,R0
   4694          
   4695                  /*Now free the buffer*/
   4696              GsnRingBuf_Put(&s2wappMainTaskCtxt->s2wUamBufQ,  &buf);
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   00000048   0xA900             ADD      R1,SP,#+0
   \   0000004A   0x30F0             ADDS     R0,R0,#+240
   \   0000004C   0x.... 0x....      BL       GsnRingBuf_Put
   4697          
   4698                  /**< Reenable the interrupts */
   4699              GsnOsal_IntrEnable( InterruptEnableStatus );
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       GsnOsal_IntrEnable
   4700          }
   \   00000056   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   4701          
   4702          
   4703           /******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4704          UINT8
   4705          S2w_CmdUnSolicitedRx(UINT8 *ptr)
   4706          {
   \                     S2w_CmdUnSolicitedRx:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   4707              UINT8 *p, status;
   4708              UINT32 temp=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   4709              GSN_WDD_UAM_DRX_CONFIG_PARAM_T param;
   4710              GSN_WDD_UAM_DRX_START_PARAM sParam;
   4711          
   4712              memset(&param,0,sizeof(param));
   \   00000008   0x2218             MOVS     R2,#+24
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xA808             ADD      R0,SP,#+32
   \   0000000E   0x.... 0x....      BL       memset
   4713              /* get the frame type */
   4714              p = AppS2wParse_NextParamGet(&ptr);
   \   00000012   0x.... 0x....      BL       ?Subroutine12
   4715              if (!p)
   \                     ??CrossCallReturnLabel_142:
   \   00000016   0xB308             CBZ.N    R0,??S2w_CmdUnSolicitedRx_0
   4716              {
   4717                  return S2W_EINVAL;
   4718              }
   4719              status = AppS2wParse_Int(p,&param.rxFrameTypeBitMap);
   \   00000018   0xA909             ADD      R1,SP,#+36
   \   0000001A   0x.... 0x....      BL       AppS2wParse_Int
   4720              if (status != S2W_SUCCESS)
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD142             BNE.N    ??S2w_CmdUnSolicitedRx_1
   4721              {
   4722                  return status;
   4723              }
   4724              p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ?Subroutine12
   4725              if (!p)
   \                     ??CrossCallReturnLabel_141:
   \   00000026   0xB1C8             CBZ.N    R0,??S2w_CmdUnSolicitedRx_0
   4726              {
   4727                  return S2W_EINVAL;
   4728              }
   4729              status = AppS2wParse_Boolean(p,&param.ieFilterEnable);
   \   00000028   0xA90A             ADD      R1,SP,#+40
   \   0000002A   0x.... 0x....      BL       AppS2wParse_Boolean
   4730              if (status != S2W_SUCCESS)
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD13A             BNE.N    ??S2w_CmdUnSolicitedRx_1
   4731              {
   4732                  return status;
   4733              }
   4734              p = AppS2wParse_NextParamGet(&ptr);
   \   00000032   0x.... 0x....      BL       ?Subroutine12
   4735              if (!p)
   \                     ??CrossCallReturnLabel_140:
   \   00000036   0xB188             CBZ.N    R0,??S2w_CmdUnSolicitedRx_0
   4736              {
   4737                  return S2W_EINVAL;
   4738              }
   4739              status = AppS2wParse_Int(p,&temp);
   \   00000038   0x.... 0x....      BL       ?Subroutine17
   4740              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_189:
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD133             BNE.N    ??S2w_CmdUnSolicitedRx_1
   4741              {
   4742                  return status;
   4743              }
   4744              param.ieFilterId = temp;
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x900B             STR      R0,[SP, #+44]
   4745          
   4746              // channel
   4747              p = AppS2wParse_NextParamGet(&ptr);
   \   00000044   0x.... 0x....      BL       ?Subroutine12
   4748              if (!p)
   \                     ??CrossCallReturnLabel_139:
   \   00000048   0xB140             CBZ.N    R0,??S2w_CmdUnSolicitedRx_0
   4749              {
   4750                  return S2W_EINVAL;
   4751              }
   4752              status = AppS2wParse_Int(p,&temp);
   \   0000004A   0x.... 0x....      BL       ?Subroutine17
   4753              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_188:
   \   0000004E   0xBB58             CBNZ.N   R0,??S2w_CmdUnSolicitedRx_1
   4754              {
   4755                  return status;
   4756              }
   4757              sParam.chNum = temp;
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0xF88D 0x0018      STRB     R0,[SP, #+24]
   4758              // wait time
   4759              p = AppS2wParse_NextParamGet(&ptr);
   \   00000056   0x.... 0x....      BL       ?Subroutine12
   4760              if (!p)
   \                     ??CrossCallReturnLabel_138:
   \   0000005A   0xB908             CBNZ.N   R0,??S2w_CmdUnSolicitedRx_2
   4761              {
   4762                  return S2W_EINVAL;
   \                     ??S2w_CmdUnSolicitedRx_0:
   \   0000005C   0x2002             MOVS     R0,#+2
   \   0000005E   0xE023             B.N      ??S2w_CmdUnSolicitedRx_1
   4763              }
   4764              status = AppS2wParse_Int(p,&sParam.rxWaitTime);
   \                     ??S2w_CmdUnSolicitedRx_2:
   \   00000060   0xA907             ADD      R1,SP,#+28
   \   00000062   0x.... 0x....      BL       AppS2wParse_Int
   4765              if (status != S2W_SUCCESS)
   \   00000066   0xB9F8             CBNZ.N   R0,??S2w_CmdUnSolicitedRx_1
   4766              {
   4767                  return status;
   4768              }
   4769              //S2w_Printf("\r\n start Rx mode\r\n");
   4770              // start the mode
   4771              GSN_WDD_UAM_START_RESP_T resp;
   4772              status= GsnWdd_UAMStart(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp);
   \   00000068   0x....             LDR.N    R4,??DataTable189_1
   \   0000006A   0x6820             LDR      R0,[R4, #+0]
   \   0000006C   0xAA03             ADD      R2,SP,#+12
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000074   0x.... 0x....      BL       GsnWdd_UAMStart
   4773              if(status != GSN_SUCCESS)
   \   00000078   0xB2C0             UXTB     R0,R0
   \   0000007A   0xB9A8             CBNZ.N   R0,??S2w_CmdUnSolicitedRx_1
   4774              {
   4775                  return(status);
   4776              }
   4777              //S2w_Printf("\r\n start Rx config\r\n");
   4778              // configure it
   4779              status= GsnWdd_UAMDataRxConfig(&(s2wappMainTaskCtxt->if0.wddCtx), &param);
   \   0000007C   0x6820             LDR      R0,[R4, #+0]
   \   0000007E   0xA908             ADD      R1,SP,#+32
   \   00000080   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000084   0x.... 0x....      BL       GsnWdd_UAMDataRxConfig
   4780              if(status != GSN_SUCCESS)
   \   00000088   0xB2C0             UXTB     R0,R0
   \   0000008A   0xB968             CBNZ.N   R0,??S2w_CmdUnSolicitedRx_1
   4781              {
   4782                  return(status);
   4783              }
   4784              s2wUamRx_Init();
   \   0000008C   0x.... 0x....      BL       s2wUamRx_Init
   4785              // cb register for data rx
   4786              GsnWdd_DataIndCbReg(&(s2wappMainTaskCtxt->if0.wddCtx), S2W_UnassocDataIndCB, s2wappMainTaskCtxt);
   \   00000090   0x6821             LDR      R1,[R4, #+0]
   \   00000092   0x.... 0x....      LDR.W    R2,??DataTable206_1
   \   00000096   0xF601 0x60E0      ADDW     R0,R1,#+3808
   \   0000009A   0x6742             STR      R2,[R0, #+116]
   \   0000009C   0x6781             STR      R1,[R0, #+120]
   4787              // start the reception
   4788              GSN_WDD_UAM_DRX_START_RESP_T stResp;
   4789              status = GsnWdd_UamDataRxStart(&(s2wappMainTaskCtxt->if0.wddCtx), &sParam,
   4790          								     &stResp);
   4791          
   4792              return status;
   \   0000009E   0xAA01             ADD      R2,SP,#+4
   \   000000A0   0xA905             ADD      R1,SP,#+20
   \   000000A2   0x.... 0x....      BL       GsnWdd_UamDataRxStart
   \   000000A6   0xB2C0             UXTB     R0,R0
   \                     ??S2w_CmdUnSolicitedRx_1:
   \   000000A8   0xB010             ADD      SP,SP,#+64
   \   000000AA   0xBD10             POP      {R4,PC}          ;; return
   4793          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0xA80F             ADD      R0,SP,#+60
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   4794          
   4795          

   \                                 In section .text, align 2, keep-with-next
   4796          UINT8
   4797          S2w_CmdUnSolicitedRxstop(UINT8 *ptr)
   4798          {
   \                     S2w_CmdUnSolicitedRxstop:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   4799          	UINT8 status;
   4800          	GSN_WDD_UAM_DRX_STOP_PARAM param;
   4801          	GSN_WDD_UAM_DRX_STOP_RESP_T resp;
   4802          	param.ifNum =0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   4803          	status = GsnWdd_UAMDataRxStop(&(s2wappMainTaskCtxt->if0.wddCtx), &param, &resp);
   \   00000006   0xAA01             ADD      R2,SP,#+4
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable196
   \   0000000C   0x6820             LDR      R0,[R4, #+0]
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000014   0x.... 0x....      BL       GsnWdd_UAMDataRxStop
   4804          	if(status != GSN_SUCCESS)
   \   00000018   0xB2C0             UXTB     R0,R0
   \   0000001A   0xB938             CBNZ.N   R0,??S2w_CmdUnSolicitedRxstop_0
   4805          	{
   4806          		return status;
   4807          	}
   4808          	// stop the mode
   4809              GSN_WDD_UAM_STOP_RESP_T resp1;
   4810              return (GsnWdd_UAMStop(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp1));
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xAA02             ADD      R2,SP,#+8
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000026   0x.... 0x....      BL       GsnWdd_UAMStop
   \   0000002A   0xB2C0             UXTB     R0,R0
   \                     ??S2w_CmdUnSolicitedRxstop_0:
   \   0000002C   0xB004             ADD      SP,SP,#+16
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
   4811          }
   4812          
   4813          

   \                                 In section .text, align 2, keep-with-next
   4814          UINT8
   4815          S2w_CmdUnSolicitedCcaConf(UINT8 *ptr)
   4816          {
   \                     S2w_CmdUnSolicitedCcaConf:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   4817              UINT8 status,*p;
   4818              UINT32 thresh=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   4819              p = AppS2wParse_NextParamGet(&ptr);//threshold in db
   \   00000008   0x.... 0x....      BL       ??Subroutine7_0
   4820              if (!p)
   \                     ??CrossCallReturnLabel_40:
   \   0000000C   0xB908             CBNZ.N   R0,??S2w_CmdUnSolicitedCcaConf_0
   4821              {
   4822                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD3E             POP      {R1-R5,PC}
   4823              }
   4824              status = AppS2wParse_Int(p,&thresh);
   \                     ??S2w_CmdUnSolicitedCcaConf_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine17
   4825              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_187:
   \   00000016   0xB9D8             CBNZ.N   R0,??S2w_CmdUnSolicitedCcaConf_1
   4826              {
   4827                  return status;
   4828              }
   4829              s2wappMainTaskCtxt->ccaThr = (INT8)(~(thresh)+1);// 2s compliment
   \   00000018   0x.... 0x....      LDR.W    R4,??DataTable196
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x6822             LDR      R2,[R4, #+0]
   \   00000020   0x43C0             MVNS     R0,R0
   \   00000022   0xF247 0x51CC      MOVW     R1,#+30156
   \   00000026   0x1C40             ADDS     R0,R0,#+1
   \   00000028   0x5488             STRB     R0,[R1, R2]
   4830              s2wappMainTaskCtxt->ccaTimeout = S2W_DFLT_CCA_TIMEOUT;
   \   0000002A   0xF247 0x55D0      MOVW     R5,#+30160
   \   0000002E   0x6820             LDR      R0,[R4, #+0]
   \   00000030   0xF241 0x3188      MOVW     R1,#+5000
   \   00000034   0x5029             STR      R1,[R5, R0]
   4831              p = AppS2wParse_NextParamGet(&ptr); // timeout in micro- sec
   \   00000036   0x.... 0x....      BL       ??Subroutine7_0
   4832              if (p)
   \                     ??CrossCallReturnLabel_39:
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xBF1C             ITT      NE 
   \   0000003E   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000040   0x2900             CMPNE    R1,#+0
   4833              {
   4834                  if(*p != '\0')
   \   00000042   0xD004             BEQ.N    ??S2w_CmdUnSolicitedCcaConf_2
   4835                  {
   4836                      status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->ccaTimeout);
   \   00000044   0x6821             LDR      R1,[R4, #+0]
   \   00000046   0x1869             ADDS     R1,R5,R1
   \   00000048   0x.... 0x....      BL       AppS2wParse_Int
   4837                      if (status != S2W_SUCCESS)
   \   0000004C   0xB900             CBNZ.N   R0,??S2w_CmdUnSolicitedCcaConf_1
   4838                      {
   4839                          return status;
   4840                      }
   4841                 	}
   4842          	}
   4843          	return S2W_SUCCESS;
   \                     ??S2w_CmdUnSolicitedCcaConf_2:
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??S2w_CmdUnSolicitedCcaConf_1:
   \   00000050   0xBD3E             POP      {R1-R5,PC}       ;; return
   4844          }
   4845          #endif
   4846          
   4847          
   4848          /**
   4849           ******************************************************************
   4850           * @ingroup S2w-Application
   4851           * @brief Process the AT+APCLIENTINFO command
   4852           * @param ptr Pointer to the user input string.
   4853           * @return status.
   4854           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4855          UINT8
   4856          AppS2wCmd_ApClientInfoGet(UINT8* ptr)
   4857          {
   \                     AppS2wCmd_ApClientInfoGet:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4601             MOV      R1,R0
   \   00000006   0xF2AD 0x5D8C      SUBW     SP,SP,#+1420
   4858             UINT8 status = S2W_EINVAL;
   4859             //GSN_MAC_ADDR_T mac[32];
   4860             INT8 mac[(6 * 64) + 4];
   4861             GSN_MAC_ADDR_T *pMac;
   4862             GSN_WIF_WLAN_CONNECTED_STA_LIST_RSP_T *pConctedStaListResp;
   4863             GSN_DHCP_SRVR_CLIENT_T client[64];
   4864             UINT8 macCount=0,ipCount=0,i=0,j=0,k=0,localFlag=0;
   4865             if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000A   0x780A             LDRB     R2,[R1, #+0]
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x2400             MOVS     R4,#+0
   \   00000010   0x2A3F             CMP      R2,#+63
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0x7849             LDRBEQ   R1,[R1, #+1]
   \   00000016   0x2900             CMPEQ    R1,#+0
   \   00000018   0xD17D             BNE.N    ??AppS2wCmd_ApClientInfoGet_0
   4866             {
   4867                 if((s2wCurrent.mode == 2)
   4868          #ifdef S2W_NCM_SUPPORT_ENABLE
   4869                    || (ncmAutoMode)
   4870          #endif
   4871          #ifdef GSN_P2P 
   4872                  || ((s2wCurrent.mode == 3)  &&  (s2wappMainTaskCtxt->wdd.wddP2pConf.roleGo == P2P_ROLE_GO))
   4873          #endif
   4874          	   )// only on Ap mode
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable206_2
   \   0000001E   0x7900             LDRB     R0,[R0, #+4]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD004             BEQ.N    ??AppS2wCmd_ApClientInfoGet_1
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable206_3
   \   00000028   0x7800             LDRB     R0,[R0, #+0]
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD072             BEQ.N    ??AppS2wCmd_ApClientInfoGet_2
   4875                 {
   4876                     macCount = GsnWdd_ConctedStaListGet(&s2wappMainTaskCtxt->if0.wddCtx, &mac[0],sizeof(mac));
   \                     ??AppS2wCmd_ApClientInfoGet_1:
   \   0000002E   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_333:
   \   00000032   0xA9FF             ADD      R1,SP,#+1020
   \   00000034   0xF44F 0x72C2      MOV      R2,#+388
   \   00000038   0x3108             ADDS     R1,R1,#+8
   \   0000003A   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000003E   0x.... 0x....      BL       GsnWdd_ConctedStaListGet
   4877          			pConctedStaListResp = (GSN_WIF_WLAN_CONNECTED_STA_LIST_RSP_T *)&mac[0];
   4878          			macCount = pConctedStaListResp->numStaConnected;
   \   00000042   0xF8DD 0x0404      LDR      R0,[SP, #+1028]
   4879                     S2w_Printf("\r\nNo.Of Stations Connected=%d\r\n",macCount);
   \   00000046   0xB2C5             UXTB     R5,R0
   \   00000048   0x4629             MOV      R1,R5
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNo.Of Stations Conn...">`
   \   0000004E   0x.... 0x....      BL       S2w_Printf
   4880          #ifdef S2W_DHCP_SERVER_ENABLE
   4881                     ipCount = GsnDhcpSrvr_ClientQuery(&dhcpSrvr, &client[0],64);
   \   00000052   0x.... 0x....      LDR.W    R0,??DataTable206_4
   \   00000056   0x2240             MOVS     R2,#+64
   \   00000058   0xA901             ADD      R1,SP,#+4
   \   0000005A   0x.... 0x....      BL       GsnDhcpSrvr_ClientQuery
   \   0000005E   0x4680             MOV      R8,R0
   4882          #endif
   4883                     if(macCount>0)
   \   00000060   0x2D00             CMP      R5,#+0
   \   00000062   0xD055             BEQ.N    ??AppS2wCmd_ApClientInfoGet_3
   4884                     {
   4885                         localFlag = 0;
   4886                         S2w_Printf("No     MacAddr                   IP\r\n");
   \   00000064   0x.... 0x....      ADR.W    R0,`?<Constant "No     MacAddr       ...">`
   \   00000068   0x.... 0x....      BL       S2w_Printf
   4887          			   pMac = (GSN_MAC_ADDR_T *) pConctedStaListResp->addr;
   \   0000006C   0xF50D 0x6A81      ADD      R10,SP,#+1032
   \   00000070   0x.... 0x....      LDR.W    R9,??DataTable206_5
   \   00000074   0xE00A             B.N      ??AppS2wCmd_ApClientInfoGet_4
   4888                         while(macCount--)
   4889                         {
   4890                            S2w_Printf("%d      ", j+1);
   4891                            for(i=0;i<6;i++)
   4892                            {
   4893                                S2w_Printf("%02x", pMac->array[i]);
   4894                                if( i<5)
   4895                                {
   4896                                    S2w_Printf(":");
   4897                                }
   4898                                // serach in dhcp table
   4899                            }
   4900                            for(k=0;k<ipCount;k++)
   4901                            {
   4902                                if((memcmp(client[k].macAddr,pMac->array, GSN_MAC_ADDR_LEN) ==0 ) && 
   4903          					  	 (client[k].allocated == 1)) // dhcp
   4904                                {
   4905                                    UINT32 ipaddr= ntohl(client[k].ipAddr);
   4906                                    S2w_Printf("         %d.%d.%d.%d",((ipaddr >> 24) & 0xff),((ipaddr >> 16) & 0xff),
   4907                                                  ((ipaddr >> 8) & 0xff),(ipaddr & 0xff)) ;
   4908                                    localFlag = 1;
   4909                                    break;
   4910                                }
   4911                            }
   4912                            if(localFlag == 0) // static ip
   4913                            {
   4914                                S2w_Printf("         ****");
   \                     ??AppS2wCmd_ApClientInfoGet_5:
   \   00000076   0x.... 0x....      ADR.W    R0,`?<Constant "         ****">`
   \   0000007A   0x.... 0x....      BL       S2w_Printf
   4915                            }
   4916                            localFlag = 0;
   4917                            j=j+1;
   \                     ??AppS2wCmd_ApClientInfoGet_6:
   \   0000007E   0x1C64             ADDS     R4,R4,#+1
   \   00000080   0xB2E4             UXTB     R4,R4
   4918          				  pMac++;
   \   00000082   0xF20A 0x0A06      ADDW     R10,R10,#+6
   4919                            S2w_Printf("\r\n");
   \   00000086   0x....             ADR.N    R0,??DataTable193  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000088   0x.... 0x....      BL       S2w_Printf
   \                     ??AppS2wCmd_ApClientInfoGet_4:
   \   0000008C   0x4628             MOV      R0,R5
   \   0000008E   0x1E45             SUBS     R5,R0,#+1
   \   00000090   0xB2C0             UXTB     R0,R0
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD03C             BEQ.N    ??AppS2wCmd_ApClientInfoGet_3
   \   00000096   0x1C61             ADDS     R1,R4,#+1
   \   00000098   0x.... 0x....      ADR.W    R0,`?<Constant "%d      ">`
   \   0000009C   0x.... 0x....      BL       S2w_Printf
   \   000000A0   0x2600             MOVS     R6,#+0
   \                     ??AppS2wCmd_ApClientInfoGet_7:
   \   000000A2   0xF816 0x100A      LDRB     R1,[R6, R10]
   \   000000A6   0x4648             MOV      R0,R9
   \   000000A8   0x.... 0x....      BL       S2w_Printf
   \   000000AC   0x2E05             CMP      R6,#+5
   \   000000AE   0xBFBC             ITT      LT 
   \   000000B0   0x....             ADRLT.N  R0,??DataTable193_1  ;; ":"
   \   000000B2   0x.... 0x....      BLLT     S2w_Printf
   \   000000B6   0x1C76             ADDS     R6,R6,#+1
   \   000000B8   0x2E06             CMP      R6,#+6
   \   000000BA   0xDBF2             BLT.N    ??AppS2wCmd_ApClientInfoGet_7
   \   000000BC   0x2600             MOVS     R6,#+0
   \   000000BE   0xE001             B.N      ??AppS2wCmd_ApClientInfoGet_8
   \                     ??AppS2wCmd_ApClientInfoGet_9:
   \   000000C0   0x1C70             ADDS     R0,R6,#+1
   \   000000C2   0xB2C6             UXTB     R6,R0
   \                     ??AppS2wCmd_ApClientInfoGet_8:
   \   000000C4   0x4546             CMP      R6,R8
   \   000000C6   0xDAD6             BGE.N    ??AppS2wCmd_ApClientInfoGet_5
   \   000000C8   0x0137             LSLS     R7,R6,#+4
   \   000000CA   0xA801             ADD      R0,SP,#+4
   \   000000CC   0xEB07 0x0B00      ADD      R11,R7,R0
   \   000000D0   0x2206             MOVS     R2,#+6
   \   000000D2   0x4651             MOV      R1,R10
   \   000000D4   0xF10B 0x0008      ADD      R0,R11,#+8
   \   000000D8   0x.... 0x....      BL       memcmp
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xBF04             ITT      EQ 
   \   000000E0   0xF89B 0x000F      LDRBEQ   R0,[R11, #+15]
   \   000000E4   0x2801             CMPEQ    R0,#+1
   \   000000E6   0xD1EB             BNE.N    ??AppS2wCmd_ApClientInfoGet_9
   \   000000E8   0xA801             ADD      R0,SP,#+4
   \   000000EA   0x5838             LDR      R0,[R7, R0]
   \   000000EC   0x0A01             LSRS     R1,R0,#+8
   \   000000EE   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000000F2   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000000F6   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000000FA   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000000FE   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000102   0x.... 0x....      BL       ?Subroutine29
   \                     ??CrossCallReturnLabel_264:
   \   00000106   0x.... 0x....      ADR.W    R0,`?<Constant "         %d.%d.%d.%d">`
   \   0000010A   0x.... 0x....      BL       S2w_Printf
   \   0000010E   0xE7B6             B.N      ??AppS2wCmd_ApClientInfoGet_6
   4920                         }
   4921                     }
   4922                     status = S2W_SUCCESS;
   \                     ??AppS2wCmd_ApClientInfoGet_3:
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0xE000             B.N      ??AppS2wCmd_ApClientInfoGet_0
   4923                 }
   4924                 else
   4925                 {
   4926                     status = S2W_FAILURE;
   \                     ??AppS2wCmd_ApClientInfoGet_2:
   \   00000114   0x2001             MOVS     R0,#+1
   4927                 }
   4928             }
   4929             return status;
   \                     ??AppS2wCmd_ApClientInfoGet_0:
   \   00000116   0xF20D 0x5D8C      ADDW     SP,SP,#+1420
   \   0000011A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4930          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0xB2C1             UXTB     R1,R0
   \   00000002   0x9100             STR      R1,[SP, #+0]
   \   00000004   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000008   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000000C   0x0E01             LSRS     R1,R0,#+24
   \   0000000E   0x4770             BX       LR
   4931          
   4932          

   \                                 In section .text, align 2, keep-with-next
   4933          UINT8
   4934          AppS2wCmd_ArpEntrySet(UINT8 *ptr)
   4935          {
   \                     AppS2wCmd_ArpEntrySet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   4936            UINT8 *p,status;
   4937            UINT32 ipAddr;
   4938            UINT8 macAddr[6];
   4939            ULONG hwMsw=0,hwLsw=0;
   \   00000004   0x.... 0x....      BL       ?Subroutine10
   4940            
   4941            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??CrossCallReturnLabel_115:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD018             BEQ.N    ??AppS2wCmd_ArpEntrySet_0
   4942            {
   4943              
   4944              status = AppS2wParse_Ip(p,(UINT8*)&ipAddr);
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x.... 0x....      BL       AppS2wParse_Ip
   4945          	if (status != S2W_SUCCESS)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD111             BNE.N    ??AppS2wCmd_ArpEntrySet_1
   4946          	{
   4947                    return status;
   4948          	}
   4949            }
   4950            else
   4951            {
   4952              return S2W_EINVAL;
   4953            }
   4954            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000016   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_108:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00F             BEQ.N    ??AppS2wCmd_ArpEntrySet_0
   4955            {
   4956              
   4957              status = AppS2wParse_Mac(p,macAddr);
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0x.... 0x....      BL       AppS2wParse_Mac
   4958          	if (status != S2W_SUCCESS)
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD108             BNE.N    ??AppS2wCmd_ArpEntrySet_1
   4959          	{
   4960                    return status;
   4961          	}
   4962            }
   4963            else
   4964            {
   4965              return S2W_EINVAL;
   4966            }
   4967            memcpy(&hwMsw,macAddr,2);
   \   00000028   0x.... 0x....      BL       ?Subroutine27
   4968            memcpy(&hwLsw,macAddr+2,4);
   \                     ??CrossCallReturnLabel_261:
   \   0000002C   0x.... 0x....      BL       ?Subroutine26
   4969             
   4970            hwMsw = htonl(hwMsw);
   4971            hwLsw = htonl(hwLsw);
   \                     ??CrossCallReturnLabel_259:
   \   00000030   0x.... 0x....      BL       ?Subroutine28
   4972            ipAddr = htonl(ipAddr);
   4973            hwMsw >>= 16;
   4974            if(nx_arp_static_entry_create(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ipAddr,hwMsw,hwLsw) != NX_SUCCESS)
   \                     ??CrossCallReturnLabel_262:
   \   00000034   0x.... 0x....      BL       _nxe_arp_static_entry_create
   \   00000038   0xB918             CBNZ.N   R0,??AppS2wCmd_ArpEntrySet_2
   \                     ??AppS2wCmd_ArpEntrySet_1:
   \   0000003A   0xB007             ADD      SP,SP,#+28
   \   0000003C   0xBD00             POP      {PC}             ;; return
   \                     ??AppS2wCmd_ArpEntrySet_0:
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0xE7FB             B.N      ??AppS2wCmd_ArpEntrySet_1
   4975              return S2W_FAILURE;
   \                     ??AppS2wCmd_ArpEntrySet_2:
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE7F9             B.N      ??AppS2wCmd_ArpEntrySet_1
   4976            
   4977            return S2W_SUCCESS;
   4978            
   4979          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9900             LDR      R1,[SP, #+0]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9900             LDR      R1,[SP, #+0]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x9801             LDR      R0,[SP, #+4]
   \   00000020   0x9B00             LDR      R3,[SP, #+0]
   \   00000022   0x0A01             LSRS     R1,R0,#+8
   \   00000024   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000028   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000002C   0x9901             LDR      R1,[SP, #+4]
   \   0000002E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000032   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000036   0x9901             LDR      R1,[SP, #+4]
   \   00000038   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000003C   0x9001             STR      R0,[SP, #+4]
   \   0000003E   0x9902             LDR      R1,[SP, #+8]
   \   00000040   0x9802             LDR      R0,[SP, #+8]
   \   00000042   0xF3C0 0x2007      UBFX     R0,R0,#+8,#+8
   \   00000046   0x0609             LSLS     R1,R1,#+24
   \   00000048   0xEA40 0x4011      ORR      R0,R0,R1, LSR #+16
   \   0000004C   0x9002             STR      R0,[SP, #+8]
   \   0000004E   0x4602             MOV      R2,R0
   \   00000050   0x....             LDR.N    R0,??DataTable196
   \   00000052   0x9901             LDR      R1,[SP, #+4]
   \   00000054   0x6800             LDR      R0,[R0, #+0]
   \   00000056   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000005A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0x2202             MOVS     R2,#+2
   \   00000002   0xA903             ADD      R1,SP,#+12
   \   00000004   0xA802             ADD      R0,SP,#+8
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   4980          UINT8
   4981          AppS2wCmd_ArpEntryGet(UINT8 *ptr)
   4982          {
   \                     AppS2wCmd_ArpEntryGet:
   \   00000000   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   4983          	//APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   4984              ULONG32 numOfEntries=0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x9103             STR      R1,[SP, #+12]
   4985          	UINT8 index=0;
   4986          	ARP_REC *ArpTbl_From_NwStack;//[MAX_ARP_ENTRY_STORE];
   4987          	
   4988              /*memset( ArpTbl_From_NwStack, 0, sizeof( ArpTbl_From_NwStack ));*/
   4989          	
   4990              if(*ptr == '?')
   \   00000008   0x7800             LDRB     R0,[R0, #+0]
   \   0000000A   0x283F             CMP      R0,#+63
   \   0000000C   0xD13C             BNE.N    ??AppS2wCmd_ArpEntryGet_0
   4991              {
   4992              	ArpTbl_From_NwStack = (ARP_REC *)MALLOC(1024);
   \   0000000E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000012   0x.... 0x....      BL       MALLOC
   \   00000016   0x0004             MOVS     R4,R0
   4993          		if(NULL == ArpTbl_From_NwStack)
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x2001             MOVEQ    R0,#+1
   4994          		{
   4995          			return S2W_FAILURE;
   \   0000001C   0xD035             BEQ.N    ??AppS2wCmd_ArpEntryGet_1
   4996          		}
   4997          		nx_arp_table_get(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl, 
   4998          							(VOID *)ArpTbl_From_NwStack, 
   4999          							1024, &numOfEntries);
   \   0000001E   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_334:
   \   00000022   0xAB03             ADD      R3,SP,#+12
   \   00000024   0xF44F 0x6280      MOV      R2,#+1024
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000002E   0x.... 0x....      BL       nx_arp_table_get
   5000                  for(index =0; index<numOfEntries;index++)
   \   00000032   0x2500             MOVS     R5,#+0
   \   00000034   0x.... 0x....      ADR.W    R6,`?<Constant "%d.%d.%d.%d">`
   \   00000038   0x.... 0x....      ADR.W    R8,`?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`
   \   0000003C   0xE01C             B.N      ??AppS2wCmd_ArpEntryGet_2
   5001                  {
   5002                      S2w_Printf("\r\n%02x:%02x:%02x:%02x:%02x:%02x : ", ((ArpTbl_From_NwStack[ index ].msw >>8)&  0xff),(ArpTbl_From_NwStack[ index ].msw & 0xff),
   5003                               ((ArpTbl_From_NwStack[ index ].lsw >> 24)& 0xff),((ArpTbl_From_NwStack[ index ].lsw >> 16)& 0xff),
   5004                               ((ArpTbl_From_NwStack[ index ].lsw >> 8)& 0xff), ArpTbl_From_NwStack[ index ].lsw & 0xff);
   \                     ??AppS2wCmd_ArpEntryGet_3:
   \   0000003E   0x2018             MOVS     R0,#+24
   \   00000040   0xFB00 0xF705      MUL      R7,R0,R5
   \   00000044   0x1938             ADDS     R0,R7,R4
   \   00000046   0x6841             LDR      R1,[R0, #+4]
   \   00000048   0x6880             LDR      R0,[R0, #+8]
   \   0000004A   0xB2C2             UXTB     R2,R0
   \   0000004C   0x9202             STR      R2,[SP, #+8]
   \   0000004E   0x0E03             LSRS     R3,R0,#+24
   \   00000050   0xF3C0 0x2207      UBFX     R2,R0,#+8,#+8
   \   00000054   0x9201             STR      R2,[SP, #+4]
   \   00000056   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000005A   0x9200             STR      R2,[SP, #+0]
   \   0000005C   0x4640             MOV      R0,R8
   \   0000005E   0xB2CA             UXTB     R2,R1
   \   00000060   0xF3C1 0x2107      UBFX     R1,R1,#+8,#+8
   \   00000064   0x.... 0x....      BL       S2w_Printf
   5005                      S2w_Printf("%d.%d.%d.%d",(( ArpTbl_From_NwStack[ index ].ip_address >> 24)& 0xff),(( ArpTbl_From_NwStack[ index ].ip_address >> 16) & 0xff),
   5006                    (( ArpTbl_From_NwStack[ index ].ip_address >> 8)& 0xff),(( ArpTbl_From_NwStack[ index ].ip_address )& 0xff));
   \   00000068   0x5938             LDR      R0,[R7, R4]
   \   0000006A   0x.... 0x....      BL       ?Subroutine29
   5007                  }
   \                     ??CrossCallReturnLabel_265:
   \   0000006E   0x4630             MOV      R0,R6
   \   00000070   0x.... 0x....      BL       S2w_Printf
   \   00000074   0x1C6D             ADDS     R5,R5,#+1
   \   00000076   0xB2ED             UXTB     R5,R5
   \                     ??AppS2wCmd_ArpEntryGet_2:
   \   00000078   0x9803             LDR      R0,[SP, #+12]
   \   0000007A   0x4285             CMP      R5,R0
   \   0000007C   0xD3DF             BCC.N    ??AppS2wCmd_ArpEntryGet_3
   5008          		FREE(ArpTbl_From_NwStack);
   \   0000007E   0x4620             MOV      R0,R4
   \   00000080   0x.... 0x....      BL       FREE
   5009              }
   5010              else
   5011              {
   5012                  return S2W_EINVAL;
   5013              }
   5014              return S2W_SUCCESS;
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0xE000             B.N      ??AppS2wCmd_ArpEntryGet_1
   \                     ??AppS2wCmd_ArpEntryGet_0:
   \   00000088   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_ArpEntryGet_1:
   \   0000008A   0xB004             ADD      SP,SP,#+16
   \   0000008C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   5015          }
   5016          
   5017          

   \                                 In section .text, align 2, keep-with-next
   5018          UINT8
   5019          AppS2wCmd_ArpAutoSet(UINT8 *ptr)
   5020          {
   \                     AppS2wCmd_ArpAutoSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5021            
   5022            UINT8 *p,status;
   5023            UINT32 enable;
   5024            
   5025            /* get the frame type */
   5026            p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine7_0
   5027            if (!p)
   \                     ??CrossCallReturnLabel_38:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_ArpAutoSet_0
   5028            {
   5029          	  return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD0E             POP      {R1-R3,PC}
   5030            }
   5031            status = AppS2wParse_Int(p,&enable);
   \                     ??AppS2wCmd_ArpAutoSet_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine17
   5032            if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_186:
   \   00000012   0xB918             CBNZ.N   R0,??AppS2wCmd_ArpAutoSet_1
   5033            {
   5034          	  return status;
   5035            }
   5036          
   5037            _nx_arp_auto_arp_entry_enable(enable);
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x.... 0x....      BL       _nx_arp_auto_arp_entry_enable
   5038            
   5039            return S2W_SUCCESS;
   \   0000001A   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_ArpAutoSet_1:
   \   0000001C   0xBD0E             POP      {R1-R3,PC}       ;; return
   5040            
   5041            
   5042          }
   5043          
   5044          

   \                                 In section .text, align 2, keep-with-next
   5045          UINT8
   5046          AppS2wCmd_ArpEntryDelete(UINT8 *ptr)
   5047          {
   \                     AppS2wCmd_ArpEntryDelete:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   5048            
   5049            UINT8 *p,status;
   5050            UINT32 ipAddr;
   5051            UINT8 macAddr[6];
   5052            ULONG hwMsw=0,hwLsw=0;
   \   00000004   0x.... 0x....      BL       ?Subroutine10
   5053            
   5054            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??CrossCallReturnLabel_114:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD018             BEQ.N    ??AppS2wCmd_ArpEntryDelete_0
   5055            {
   5056              
   5057              status = AppS2wParse_Ip(p,(UINT8*)&ipAddr);
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x.... 0x....      BL       AppS2wParse_Ip
   5058          	if (status != S2W_SUCCESS)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD111             BNE.N    ??AppS2wCmd_ArpEntryDelete_1
   5059          	{
   5060                    return status;
   5061          	}
   5062            }
   5063            else
   5064            {
   5065              return S2W_EINVAL;
   5066            }
   5067            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000016   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_107:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD00F             BEQ.N    ??AppS2wCmd_ArpEntryDelete_0
   5068            {
   5069              
   5070              status = AppS2wParse_Mac(p,macAddr);
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0x.... 0x....      BL       AppS2wParse_Mac
   5071          	if (status != S2W_SUCCESS)
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD108             BNE.N    ??AppS2wCmd_ArpEntryDelete_1
   5072          	{
   5073                    return status;
   5074          	}
   5075            }
   5076            else
   5077            {
   5078              return S2W_EINVAL;
   5079            }
   5080            memcpy(&hwMsw,macAddr,2);
   \   00000028   0x.... 0x....      BL       ?Subroutine27
   5081            memcpy(&hwLsw,macAddr+2,4);
   \                     ??CrossCallReturnLabel_260:
   \   0000002C   0x.... 0x....      BL       ?Subroutine26
   5082             
   5083            hwMsw = htonl(hwMsw);
   5084            hwLsw = htonl(hwLsw);
   \                     ??CrossCallReturnLabel_258:
   \   00000030   0x.... 0x....      BL       ?Subroutine28
   5085            ipAddr = htonl(ipAddr);
   5086            hwMsw >>= 16;
   5087            if(nx_arp_static_entry_delete(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ipAddr,hwMsw,hwLsw) != NX_SUCCESS)
   \                     ??CrossCallReturnLabel_263:
   \   00000034   0x.... 0x....      BL       _nxe_arp_static_entry_delete
   \   00000038   0xB918             CBNZ.N   R0,??AppS2wCmd_ArpEntryDelete_2
   \                     ??AppS2wCmd_ArpEntryDelete_1:
   \   0000003A   0xB007             ADD      SP,SP,#+28
   \   0000003C   0xBD00             POP      {PC}             ;; return
   \                     ??AppS2wCmd_ArpEntryDelete_0:
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0xE7FB             B.N      ??AppS2wCmd_ArpEntryDelete_1
   5088              return S2W_FAILURE;
   \                     ??AppS2wCmd_ArpEntryDelete_2:
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE7F9             B.N      ??AppS2wCmd_ArpEntryDelete_1
   5089            
   5090            return S2W_SUCCESS;
   5091            
   5092            
   5093          }
   5094          
   5095          
   5096          
   5097          /**
   5098           ******************************************************************
   5099           * @ingroup S2w-Application
   5100           * @brief Process the AT+NARPCACHEEN command
   5101           * @param ptr Pointer to the user input string.
   5102           * @return status.
   5103           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5104          PUBLIC UINT8
   5105          AppS2wCmd_ArpCacheEn(UINT8 *ptr)
   5106          {
   \                     AppS2wCmd_ArpCacheEn:
   \   00000000   0xB580             PUSH     {R7,LR}
   5107          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   5108              UINT8 status = S2W_EINVAL;
   5109              UINT8 CacheEn;
   5110              status = AppS2wParse_Boolean(ptr, &CacheEn);
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0x.... 0x....      BL       AppS2wParse_Boolean
   5111          	// S2w_Printf("arp =%x",CacheEn);
   5112              if (status != S2W_SUCCESS)
   \   00000008   0xB928             CBNZ.N   R0,??AppS2wCmd_ArpCacheEn_0
   5113              {
   5114                  return status;
   5115              }
   5116              pAppRtcLtchInfo->arpCacheEn = CacheEn;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable207  ;; 0x41010194
   \   0000000E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000012   0x7001             STRB     R1,[R0, #+0]
   5117              return status;
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_ArpCacheEn_0:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   5118          }
   5119          
   5120          /**
   5121           ******************************************************************************
   5122           * @ingroup App
   5123           * @brief Invalidate NW stack Arp Entry.
   5124           *    This function Invalidates the  the ARP entries .
   5125           * @param pNcmCtx - None.
   5126           * @note
   5127           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5128          PUBLIC VOID
   5129          AppArp_Invalidate(  )
   5130          {
   \                     AppArp_Invalidate:
   \   00000000   0xB580             PUSH     {R7,LR}
   5131          
   5132          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   5133          	nx_arp_dynamic_entries_invalidate(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_335:
   \   00000006   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000000A   0x.... 0x....      BL       _nxe_arp_dynamic_entries_invalidate
   5134             	memset(&pAppRtcLtchInfo->arpTablebuf[0],0,(sizeof(ARP_REC) * MAX_ARP_ENTRY_STORE));	
   \   0000000E   0xE8BD 0x4008      POP      {R3,LR}
   \   00000012   0x2230             MOVS     R2,#+48
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable207_1  ;; 0x41010164
   \   0000001A   0x.... 0x....      B.W      memset
   5135          }
   5136          
   5137          /**
   5138           ******************************************************************
   5139           * @ingroup S2w-Application
   5140           * @brief Process the AT+NARPCACHEDEL command
   5141           * @param ptr Pointer to the user input string.
   5142           * @return status.
   5143           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5144          PUBLIC UINT8
   5145          AppS2wCmd_ArpCacheDel(UINT8 *ptr)
   5146          {
   \                     AppS2wCmd_ArpCacheDel:
   \   00000000   0xB580             PUSH     {R7,LR}
   5147              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB108             CBZ.N    R0,??AppS2wCmd_ArpCacheDel_0
   5148              {
   5149                  return S2W_EINVAL;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xBD02             POP      {R1,PC}
   5150              }
   5151              else
   5152              {
   5153                  AppArp_Invalidate();
   \                     ??AppS2wCmd_ArpCacheDel_0:
   \   0000000A   0x.... 0x....      BL       AppArp_Invalidate
   5154              }
   5155              return S2W_SUCCESS;
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
   5156          }
   5157          
   5158          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   5159          /**
   5160           ******************************************************************
   5161           * @ingroup S2w-Application
   5162           * @brief Process AT+DTSLOPEN command.
   5163           * @param ptr Pointer to the user input string.
   5164           * @return status, S2W_SUCCESS or S2W_FAILURE.
   5165           ******************************************************************/
   5166          UINT8
   5167          AppS2wCmd_DTSLOpen(UINT8 *ptr)
   5168          {
   5169              UINT8 status = S2W_EINVAL;
   5170              UINT8 cid;
   5171              UINT8 valCid;
   5172              UINT8 *p;
   5173              UINT8 endParam = 1;
   5174              //S2w_Printf("\r\nAppS2wCmd_DTSLOpen\r\n");
   5175          
   5176              p = AppS2wParse_NextParamGet(&ptr);
   5177              if (!p)
   5178              {
   5179                  S2w_Printf("Error-2\r\n");
   5180                  return S2W_EINVAL;
   5181              }
   5182          
   5183              cid = *p;
   5184          
   5185              valCid = AppS2w_CidValidate(cid);
   5186          
   5187              if (valCid != INVALID_CID)
   5188              {
   5189                  UINT8 *pCertName = NULL;
   5190                  UINT8 *pClientCertName = NULL;
   5191                  UINT8 *pClientKeyName = NULL;
   5192          
   5193                  (VOID)pClientCertName;
   5194                  (VOID)pClientKeyName;
   5195          
   5196                  p = AppS2wParse_NextParamGet(&ptr);
   5197          
   5198                  if (p != NULL)
   5199                  {
   5200                      pCertName = p;
   5201                      endParam = 0;
   5202          
   5203                  }
   5204          
   5205                  if(!endParam)
   5206                  {
   5207                      endParam = 1;
   5208                      p = AppS2wParse_NextParamGet(&ptr);
   5209                      if(NULL != p)
   5210                      {
   5211                          endParam = 0;
   5212                          pClientCertName = p;
   5213                      }
   5214                  }
   5215          
   5216                  if(!endParam)
   5217                  {
   5218                      endParam = 1;
   5219                      p = AppS2wParse_NextParamGet(&ptr);
   5220                      if(NULL != p)
   5221                      {
   5222                          endParam = 0;
   5223                          pClientKeyName = p;
   5224                      }
   5225                  }
   5226          
   5227                  if( S2W_NETDATA_MODE_CLIENT == AppS2w_ConnModeGet(valCid))
   5228                  {
   5229                      //S2w_Printf("Start processing DTLS Joining\r\n");
   5230                      status = AppS2w_DtslClientOpen(valCid, (char*)pCertName, pClientCertName,
   5231                                                    pClientKeyName);
   5232                  }
   5233          
   5234          #if 0
   5235                  if( S2W_NETDATA_MODE_SERVER == AppS2w_ConnModeGet(valCid))
   5236                  {
   5237                      status = AppS2w_SslServerOpen(valCid, pCertName);
   5238                  }
   5239          #endif
   5240                  //S2w_Printf("Error-3, status = %d\r\n", status);
   5241                  return status;
   5242              }
   5243              else
   5244              {
   5245                  S2w_Printf("Error-1\r\n");
   5246                  return S2W_EBADCID;
   5247              }
   5248          }
   5249          
   5250          /**
   5251           ******************************************************************
   5252           * @ingroup S2w-Application
   5253           * @brief Process AT+DTLSCLOSE command.
   5254           * @param ptr Pointer to the user input string.
   5255           * @return status, S2W_SUCCESS or S2W_FAILURE.
   5256           ******************************************************************/
   5257          UINT8
   5258          AppS2wCmd_DTSLClose(UINT8 *ptr)
   5259          {
   5260              UINT8 cid;
   5261              UINT8 *p;
   5262              UINT8 valCid;
   5263              //UINT8 status;
   5264              p = AppS2wParse_NextParamGet(&ptr);
   5265              if (!p)
   5266              {
   5267                  S2w_Printf("Error-2\r\n");
   5268                  return S2W_EINVAL;
   5269              }
   5270          
   5271              cid = *p;
   5272          
   5273              if ((valCid = AppS2w_CidValidate(cid)) == INVALID_CID)
   5274              {
   5275                  return S2W_EINVAL;//AppS2w_SslClose(valCid);
   5276              }
   5277              nx_bsd_callback_register(s2wCidList[valCid].sd, NULL, 0);
   5278          	if(s2wCidList[valCid].conMode == S2W_NETDATA_MODE_CLIENT)
   5279              {
   5280                  GsnDtls_Close((GSN_DTLS_CONN_T *)s2wCidList[valCid].ssl.sslConn);
   5281          	}
   5282              s2wCidList[valCid].ssl.sslConn = NULL;
   5283              s2wCidList[valCid].sslflag = FALSE;
   5284              soc_close(s2wCidList[valCid].sd);
   5285              s2wCidList[valCid].localPort = 0;
   5286              s2wCidList[valCid].remotePort = 0;
   5287          	s2wCidList[valCid].sd = CID_NOTINUSE;
   5288              return S2W_SUCCESS;
   5289          }
   5290          #endif
   5291          

   \                                 In section .text, align 2, keep-with-next
   5292          PUBLIC UINT8
   5293          AppS2wCmd_WlanStaPsCfg(UINT8 *ptr)
   5294          {
   \                     AppS2wCmd_WlanStaPsCfg:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   5295          	UINT8 status;
   5296          	 UINT8 *p = NULL;
   5297          	GSN_WDD_STA_PS_CFG_SET_PARAM_T psCfgParam;
   5298          	UINT32 val;
   5299              GSN_STATUS retVal;
   5300          	
   5301              GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   5302          
   5303          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine10_0
   5304          	if (!p)
   \                     ??CrossCallReturnLabel_106:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD039             BEQ.N    ??AppS2wCmd_WlanStaPsCfg_0
   5305          	{
   5306          		return S2W_EINVAL;
   5307          	}
   5308          
   5309          	status = AppS2wParse_Int(p, &val);
   \   0000000C   0x.... 0x....      BL       ?Subroutine17
   5310              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_185:
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD144             BNE.N    ??AppS2wCmd_WlanStaPsCfg_1
   5311              {
   5312                  return status;
   5313              }
   5314          	psCfgParam.wakeupType= (GSN_WIF_WLAN_STA_PS_WAKEUP_T)val;
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0xF88D 0x0004      STRB     R0,[SP, #+4]
   5315          	
   5316          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000001A   0x.... 0x....      BL       ??Subroutine10_0
   5317          	if (!p)
   \                     ??CrossCallReturnLabel_105:
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD02E             BEQ.N    ??AppS2wCmd_WlanStaPsCfg_0
   5318          	{
   5319          		return S2W_EINVAL;
   5320          	}
   5321          
   5322          	status = AppS2wParse_Int(p, &val);
   \   00000022   0x.... 0x....      BL       ?Subroutine17
   5323              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_184:
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD139             BNE.N    ??AppS2wCmd_WlanStaPsCfg_1
   5324              {
   5325                  return status;
   5326              }
   5327          	psCfgParam.wakeupInterval= val;
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   5328          
   5329          
   5330          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000030   0x.... 0x....      BL       ??Subroutine10_0
   5331          	if (!p)
   \                     ??CrossCallReturnLabel_104:
   \   00000034   0xB320             CBZ.N    R0,??AppS2wCmd_WlanStaPsCfg_0
   5332          	{
   5333          		return S2W_EINVAL;
   5334          	}
   5335          
   5336          	status = AppS2wParse_Int(p, &val);
   \   00000036   0x.... 0x....      BL       ?Subroutine17
   5337              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_183:
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD12F             BNE.N    ??AppS2wCmd_WlanStaPsCfg_1
   5338              {
   5339                  return status;
   5340              }
   5341          	psCfgParam.listenIntervalAssoc= val;
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   5342          
   5343          
   5344          
   5345          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000044   0x.... 0x....      BL       ??Subroutine10_0
   5346          	if (!p)
   \                     ??CrossCallReturnLabel_103:
   \   00000048   0xB1D0             CBZ.N    R0,??AppS2wCmd_WlanStaPsCfg_0
   5347          	{
   5348          		return S2W_EINVAL;
   5349          	}
   5350          
   5351          	status = AppS2wParse_Int(p, &val);
   \   0000004A   0x.... 0x....      BL       ?Subroutine17
   5352              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_182:
   \   0000004E   0xBB30             CBNZ.N   R0,??AppS2wCmd_WlanStaPsCfg_1
   5353              {
   5354                  return status;
   5355              }
   5356          	psCfgParam.dataRxType = (GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_T) val;
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0xF88D 0x000A      STRB     R0,[SP, #+10]
   5357          
   5358          
   5359          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000056   0x.... 0x....      BL       ??Subroutine10_0
   5360          	if (!p)
   \                     ??CrossCallReturnLabel_102:
   \   0000005A   0xB188             CBZ.N    R0,??AppS2wCmd_WlanStaPsCfg_0
   5361          	{
   5362          		return S2W_EINVAL;
   5363          	}
   5364          
   5365          	status = AppS2wParse_Int(p, &val);
   \   0000005C   0x.... 0x....      BL       ?Subroutine17
   5366              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_181:
   \   00000060   0xB9E8             CBNZ.N   R0,??AppS2wCmd_WlanStaPsCfg_1
   5367              {
   5368                  return status;
   5369              }
   5370          	psCfgParam.uapsdEnable = val;
   \   00000062   0x9800             LDR      R0,[SP, #+0]
   \   00000064   0xF88D 0x000B      STRB     R0,[SP, #+11]
   5371          
   5372          
   5373          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000068   0x.... 0x....      BL       ??Subroutine10_0
   5374          	if (!p)
   \                     ??CrossCallReturnLabel_101:
   \   0000006C   0xB140             CBZ.N    R0,??AppS2wCmd_WlanStaPsCfg_0
   5375          	{
   5376          		return S2W_EINVAL;
   5377          	}
   5378          
   5379          	status = AppS2wParse_Int(p, &val);
   \   0000006E   0x.... 0x....      BL       ?Subroutine17
   5380              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_180:
   \   00000072   0xB9A0             CBNZ.N   R0,??AppS2wCmd_WlanStaPsCfg_1
   5381              {
   5382                  return status;
   5383              }
   5384          	psCfgParam.txAtTbttWakeup= val;
   \   00000074   0x9800             LDR      R0,[SP, #+0]
   \   00000076   0xF88D 0x000C      STRB     R0,[SP, #+12]
   5385          
   5386          
   5387          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000007A   0x.... 0x....      BL       ??Subroutine10_0
   5388          	if (!p)
   \                     ??CrossCallReturnLabel_100:
   \   0000007E   0xB908             CBNZ.N   R0,??AppS2wCmd_WlanStaPsCfg_2
   5389          	{
   5390          		return S2W_EINVAL;
   \                     ??AppS2wCmd_WlanStaPsCfg_0:
   \   00000080   0x2002             MOVS     R0,#+2
   \   00000082   0xE00C             B.N      ??AppS2wCmd_WlanStaPsCfg_1
   5391          	}
   5392          
   5393          	status = AppS2wParse_Int(p, &val);
   \                     ??AppS2wCmd_WlanStaPsCfg_2:
   \   00000084   0x.... 0x....      BL       ?Subroutine17
   5394              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_179:
   \   00000088   0xB948             CBNZ.N   R0,??AppS2wCmd_WlanStaPsCfg_1
   5395              {
   5396                  return status;
   5397              }
   5398          	psCfgParam.beaconWaitTimeout = val;
   \   0000008A   0x9800             LDR      R0,[SP, #+0]
   \   0000008C   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   5399          
   5400          	retVal= GsnWdd_RadioPowerSaveCfgSet(pWdd, &psCfgParam);
   5401          	if(GSN_SUCCESS != retVal)
   \   00000090   0xA901             ADD      R1,SP,#+4
   \   00000092   0x.... 0x....      LDR.W    R0,??DataTable207_2
   \   00000096   0x.... 0x....      BL       GsnWdd_RadioPowerSaveCfgSet
   \   0000009A   0xB100             CBZ.N    R0,??AppS2wCmd_WlanStaPsCfg_1
   5402          	{
   5403          		return S2W_FAILURE;
   \   0000009C   0x2001             MOVS     R0,#+1
   5404          	}
   5405          	return S2W_SUCCESS;
   \                     ??AppS2wCmd_WlanStaPsCfg_1:
   \   0000009E   0xB007             ADD      SP,SP,#+28
   \   000000A0   0xBD00             POP      {PC}             ;; return
   5406          	
   5407          }

   \                                 In section .text, align 2, keep-with-next
   5408          PUBLIC UINT8
   5409          AppS2wCmd_WlanApPsCfg(UINT8 *ptr)
   5410          {
   \                     AppS2wCmd_WlanApPsCfg:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   5411          	UINT8 status;
   5412          	 UINT8 *p = NULL;
   5413          	GSN_WDD_AP_PS_CFG_SET_PARAM psCfgParam;
   5414          	UINT32 val;
   5415              GSN_STATUS retVal;
   5416          	
   5417              GSN_WDD_CTX_T *pWdd = &appCtx.if0.wddCtx;
   5418          
   5419          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine9_0
   5420          	if (!p)
   \                     ??CrossCallReturnLabel_86:
   \   00000008   0xB1C8             CBZ.N    R0,??AppS2wCmd_WlanApPsCfg_0
   5421          	{
   5422          		return S2W_EINVAL;
   5423          	}
   5424          
   5425          	status = AppS2wParse_Int(p, &val);
   \   0000000A   0x.... 0x....      BL       ?Subroutine17
   5426              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_178:
   \   0000000E   0xBB38             CBNZ.N   R0,??AppS2wCmd_WlanApPsCfg_1
   5427              {
   5428                  return status;
   5429              }
   5430          	psCfgParam.deepSleepEnable= val;
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0xF88D 0x0004      STRB     R0,[SP, #+4]
   5431          	
   5432          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000016   0x.... 0x....      BL       ??Subroutine9_0
   5433          	if (!p)
   \                     ??CrossCallReturnLabel_85:
   \   0000001A   0xB180             CBZ.N    R0,??AppS2wCmd_WlanApPsCfg_0
   5434          	{
   5435          		return S2W_EINVAL;
   5436          	}
   5437          
   5438          	status = AppS2wParse_Int(p, &val);
   \   0000001C   0x.... 0x....      BL       ?Subroutine17
   5439              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_177:
   \   00000020   0xB9F0             CBNZ.N   R0,??AppS2wCmd_WlanApPsCfg_1
   5440              {
   5441                  return status;
   5442              }
   5443          	psCfgParam.ctsToSelfBeforeSleep= val;
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0xF88D 0x0005      STRB     R0,[SP, #+5]
   5444          
   5445          
   5446          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000028   0x.... 0x....      BL       ??Subroutine9_0
   5447          	if (!p)
   \                     ??CrossCallReturnLabel_84:
   \   0000002C   0xB138             CBZ.N    R0,??AppS2wCmd_WlanApPsCfg_0
   5448          	{
   5449          		return S2W_EINVAL;
   5450          	}
   5451          
   5452          	status = AppS2wParse_Int(p, &val);
   \   0000002E   0x.... 0x....      BL       ?Subroutine17
   5453              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_176:
   \   00000032   0xB9A8             CBNZ.N   R0,??AppS2wCmd_WlanApPsCfg_1
   5454              {
   5455                  return status;
   5456              }
   5457          	psCfgParam.rxOnAfterTx = val;
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0x9002             STR      R0,[SP, #+8]
   5458          
   5459              p = AppS2wParse_NextParamGet(&ptr);
   \   00000038   0x.... 0x....      BL       ??Subroutine9_0
   5460          	if (!p)
   \                     ??CrossCallReturnLabel_83:
   \   0000003C   0xB908             CBNZ.N   R0,??AppS2wCmd_WlanApPsCfg_2
   5461          	{
   5462          		return S2W_EINVAL;
   \                     ??AppS2wCmd_WlanApPsCfg_0:
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0xE00E             B.N      ??AppS2wCmd_WlanApPsCfg_1
   5463          	}
   5464          	status = AppS2wParse_Int(p, &val);
   \                     ??AppS2wCmd_WlanApPsCfg_2:
   \   00000042   0x.... 0x....      BL       ?Subroutine17
   5465              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_175:
   \   00000046   0xB958             CBNZ.N   R0,??AppS2wCmd_WlanApPsCfg_1
   5466              {
   5467                  return status;
   5468              }
   5469          
   5470              psCfgParam.rxOnAfterTx |= (val << 16);
   \   00000048   0x9802             LDR      R0,[SP, #+8]
   \   0000004A   0x9900             LDR      R1,[SP, #+0]
   \   0000004C   0xEA40 0x4001      ORR      R0,R0,R1, LSL #+16
   \   00000050   0x9002             STR      R0,[SP, #+8]
   5471              
   5472          	retVal = GsnWdd_ApPowerSaveCfgSet(pWdd, &psCfgParam);
   5473          	if(GSN_SUCCESS != retVal)
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable207_2
   \   00000058   0x.... 0x....      BL       GsnWdd_ApPowerSaveCfgSet
   \   0000005C   0xB100             CBZ.N    R0,??AppS2wCmd_WlanApPsCfg_1
   5474          	{
   5475          		return S2W_FAILURE;
   \   0000005E   0x2001             MOVS     R0,#+1
   5476          	}
   5477          	return S2W_SUCCESS;
   \                     ??AppS2wCmd_WlanApPsCfg_1:
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xBD00             POP      {PC}             ;; return
   5478          }
   5479          
   5480          

   \                                 In section .text, align 2, keep-with-next
   5481          UINT8
   5482          AppS2w_CmdL2ConfigSet(UINT8 *ptr)
   5483          {
   \                     AppS2w_CmdL2ConfigSet:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   5484          	UINT8 status = S2W_SUCCESS;
   5485          	UINT32 proto;
   5486          	UINT32 disable;
   5487          	UINT8 *p;
   5488          	if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x....             LDR.N    R6,??DataTable196
   \   00000008   0x2400             MOVS     R4,#+0
   \   0000000A   0xF647 0x75F1      MOVW     R5,#+32753
   \   0000000E   0x283F             CMP      R0,#+63
   \   00000010   0xBF02             ITTT     EQ 
   \   00000012   0x9803             LDREQ    R0,[SP, #+12]
   \   00000014   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000016   0x2800             CMPEQ    R0,#+0
   \   00000018   0xD106             BNE.N    ??AppS2w_CmdL2ConfigSet_0
   5489          	{
   5490          		S2w_Printf("\r\nCONFIG MAP:%02x\r\n", s2wappMainTaskCtxt->l2ConfigBitField);
   \   0000001A   0x6830             LDR      R0,[R6, #+0]
   \   0000001C   0x5C29             LDRB     R1,[R5, R0]
   \   0000001E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCONFIG MAP:%02x\\r\\n">`
   \   00000022   0x.... 0x....      BL       S2w_Printf
   \   00000026   0xE01D             B.N      ??AppS2w_CmdL2ConfigSet_1
   5491          	}
   5492          	else
   5493          	{
   5494          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2w_CmdL2ConfigSet_0:
   \   00000028   0x.... 0x....      BL       ?Subroutine14
   5495          		if (!p)
   \                     ??CrossCallReturnLabel_151:
   \   0000002C   0xB180             CBZ.N    R0,??AppS2w_CmdL2ConfigSet_2
   5496          		{
   5497          			return S2W_EINVAL;
   5498          		}
   5499          		status = AppS2wParse_Int(p, &proto);
   5500          		if ((status != S2W_SUCCESS) ||((proto & S2W_PROTO_ALL_MASK) == 0))
   \   0000002E   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_174:
   \   00000032   0xB968             CBNZ.N   R0,??AppS2w_CmdL2ConfigSet_2
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0xF010 0x0F03      TST      R0,#0x3
   \   0000003A   0xD009             BEQ.N    ??AppS2w_CmdL2ConfigSet_2
   5501          		{
   5502          			return S2W_EINVAL;
   5503          		}
   5504          		p = AppS2wParse_NextParamGet(&ptr);
   \   0000003C   0x.... 0x....      BL       ?Subroutine14
   5505          		if (!p)
   \                     ??CrossCallReturnLabel_150:
   \   00000040   0xB130             CBZ.N    R0,??AppS2w_CmdL2ConfigSet_2
   5506          		{
   5507          			return S2W_EINVAL;
   5508          		}
   5509          		status = AppS2wParse_Int(p, &disable);
   \   00000042   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_229:
   \   00000046   0x0004             MOVS     R4,R0
   5510          		if ((status != S2W_SUCCESS)||(disable > S2W_PROTO_ALL_MASK))
   \   00000048   0xD102             BNE.N    ??AppS2w_CmdL2ConfigSet_2
   \   0000004A   0x9801             LDR      R0,[SP, #+4]
   \   0000004C   0x2804             CMP      R0,#+4
   \   0000004E   0xD301             BCC.N    ??AppS2w_CmdL2ConfigSet_3
   5511          		{
   5512          			return S2W_EINVAL;
   \                     ??AppS2w_CmdL2ConfigSet_2:
   \   00000050   0x2002             MOVS     R0,#+2
   \   00000052   0xE008             B.N      ??AppS2w_CmdL2ConfigSet_4
   5513          		}
   5514          		s2wappMainTaskCtxt->l2ConfigBitField = (s2wappMainTaskCtxt->l2ConfigBitField & (~proto)) |( proto & disable);
   \                     ??AppS2w_CmdL2ConfigSet_3:
   \   00000054   0x6830             LDR      R0,[R6, #+0]
   \   00000056   0x9A00             LDR      R2,[SP, #+0]
   \   00000058   0x5C29             LDRB     R1,[R5, R0]
   \   0000005A   0x9B01             LDR      R3,[SP, #+4]
   \   0000005C   0x4391             BICS     R1,R1,R2
   \   0000005E   0x401A             ANDS     R2,R3,R2
   \   00000060   0x4311             ORRS     R1,R2,R1
   \   00000062   0x5429             STRB     R1,[R5, R0]
   5515          	}
   5516          	return status;
   \                     ??AppS2w_CmdL2ConfigSet_1:
   \   00000064   0x4620             MOV      R0,R4
   \                     ??AppS2w_CmdL2ConfigSet_4:
   \   00000066   0xB004             ADD      SP,SP,#+16
   \   00000068   0xBD70             POP      {R4-R6,PC}       ;; return
   5517          }
   5518          
   5519          
   5520          #ifdef S2W_PWM_SUPPORT

   \                                 In section .bss, align 4
   5521          GSN_PWM_HANDLE_T pwm_handle;
   5522          GSN_PWM_PATTERN_T pattern;
   5523          UINT8 pwmInit=0;
   \                     pwmInit:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     pattern:
   \   00000004                      DS8 4
   \                     pwm_handle:
   \   00000008                      DS8 84

   \                                 In section .text, align 2, keep-with-next
   5524          UINT8
   5525          AppS2wCmd_PwmStart(UINT8 *ptr)
   5526          {
   \                     AppS2wCmd_PwmStart:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   5527              UINT8 *p, status = S2W_EINVAL;
   5528              UINT32 pwmId=0,prescalerValue=0,period=0,phaseDelay01=0,phaseDelay12=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9002             STR      R0,[SP, #+8]
   \   00000008   0x9009             STR      R0,[SP, #+36]
   \   0000000A   0x9003             STR      R0,[SP, #+12]
   \   0000000C   0x9005             STR      R0,[SP, #+20]
   \   0000000E   0x9004             STR      R0,[SP, #+16]
   5529              BOOL on_off=0,polarity=0,clocksel=0,frequency=0;
   \   00000010   0x9001             STR      R0,[SP, #+4]
   5530          
   5531          
   5532              GSN_PWM_INFO_T pwmInfo;
   5533              GSN_PWM_CONFIG_T pwmConfig;
   5534              
   5535              if(pwmInit)
   \   00000012   0x.... 0x....      LDR.W    R4,??DataTable210
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xF040 0x80DE      BNE.W    ??AppS2wCmd_PwmStart_0
   5536              {
   5537                 return S2W_FAILURE;
   5538              }
   5539              p = AppS2wParse_NextParamGet(&ptr);  /* pwm id */
   \   0000001E   0x.... 0x....      BL       ?Subroutine12
   5540              if (!p)
   \                     ??CrossCallReturnLabel_137:
   \   00000022   0xB1E0             CBZ.N    R0,??AppS2wCmd_PwmStart_1
   5541              {
   5542                  return S2W_EINVAL;
   5543              }
   5544              status = AppS2wParse_Int(p, &pwmId);
   5545              if((status != GSN_SUCCESS) || (pwmId >4 ) || (pwmId < 1 ))
   \   00000024   0xA902             ADD      R1,SP,#+8
   \   00000026   0x.... 0x....      BL       AppS2wParse_Int
   \   0000002A   0xB9C0             CBNZ.N   R0,??AppS2wCmd_PwmStart_1
   \   0000002C   0x9802             LDR      R0,[SP, #+8]
   \   0000002E   0x2805             CMP      R0,#+5
   \   00000030   0xD215             BCS.N    ??AppS2wCmd_PwmStart_1
   \   00000032   0xB1A0             CBZ.N    R0,??AppS2wCmd_PwmStart_1
   5546              {
   5547                  return S2W_EINVAL;
   5548              }
   5549          
   5550              p = AppS2wParse_NextParamGet(&ptr); /* on or off */
   \   00000034   0x.... 0x....      BL       ?Subroutine12
   5551              if (!p)
   \                     ??CrossCallReturnLabel_136:
   \   00000038   0xB188             CBZ.N    R0,??AppS2wCmd_PwmStart_1
   5552              {
   5553                  return S2W_EINVAL;
   5554              }
   5555          
   5556              status = AppS2wParse_Boolean(p, &on_off );
   \   0000003A   0xF10D 0x0107      ADD      R1,SP,#+7
   \   0000003E   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000042   0x0005             MOVS     R5,R0
   5557              if (status != S2W_SUCCESS)
   \   00000044   0xD10C             BNE.N    ??AppS2wCmd_PwmStart_2
   5558              {
   5559                  return status;
   5560              }
   5561          
   5562              p = AppS2wParse_NextParamGet(&ptr); /* polarity */
   \   00000046   0x.... 0x....      BL       ?Subroutine12
   5563              if (!p)
   \                     ??CrossCallReturnLabel_135:
   \   0000004A   0xB140             CBZ.N    R0,??AppS2wCmd_PwmStart_1
   5564              {
   5565                  return S2W_EINVAL;
   5566              }
   5567          
   5568              status = AppS2wParse_Boolean(p, &polarity );
   \   0000004C   0xF10D 0x0106      ADD      R1,SP,#+6
   \   00000050   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000054   0x0005             MOVS     R5,R0
   5569              if (status != S2W_SUCCESS)
   \   00000056   0xD103             BNE.N    ??AppS2wCmd_PwmStart_2
   5570              {
   5571                  return status;
   5572              }
   5573          
   5574              p = AppS2wParse_NextParamGet(&ptr); /* period */
   \   00000058   0x.... 0x....      BL       ?Subroutine12
   5575              if (!p)
   \                     ??CrossCallReturnLabel_134:
   \   0000005C   0xB908             CBNZ.N   R0,??AppS2wCmd_PwmStart_3
   5576              {
   5577                  return S2W_EINVAL;
   \                     ??AppS2wCmd_PwmStart_1:
   \   0000005E   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_PwmStart_2:
   \   00000060   0xE0C0             B.N      ??AppS2wCmd_PwmStart_4
   5578              }
   5579          
   5580              status = AppS2wParse_Int(p, &period );
   \                     ??AppS2wCmd_PwmStart_3:
   \   00000062   0xA903             ADD      R1,SP,#+12
   \   00000064   0x.... 0x....      BL       AppS2wParse_Int
   \   00000068   0x0005             MOVS     R5,R0
   5581              if ((status != S2W_SUCCESS) || (period  == 0)||(period  > 1000))
   \   0000006A   0xD13E             BNE.N    ??AppS2wCmd_PwmStart_5
   \   0000006C   0x9803             LDR      R0,[SP, #+12]
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xF000 0x80B7      BEQ.W    ??AppS2wCmd_PwmStart_6
   \   00000074   0xF240 0x36E9      MOVW     R6,#+1001
   \   00000078   0x42B0             CMP      R0,R6
   \   0000007A   0xD239             BCS.N    ??AppS2wCmd_PwmStart_7
   5582              {
   5583                  return status;
   5584              }
   5585              p = AppS2wParse_NextParamGet(&ptr);  /* frequency */
   \   0000007C   0x.... 0x....      BL       ?Subroutine12
   5586              if (p)
   \                     ??CrossCallReturnLabel_133:
   \   00000080   0xB128             CBZ.N    R0,??AppS2wCmd_PwmStart_8
   5587              {
   5588                  status = AppS2wParse_Boolean(p,&frequency );
   \   00000082   0xF10D 0x0105      ADD      R1,SP,#+5
   \   00000086   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000008A   0x0005             MOVS     R5,R0
   5589                  if (status != S2W_SUCCESS)
   \   0000008C   0xD1E8             BNE.N    ??AppS2wCmd_PwmStart_2
   5590                  {
   5591                      return status;
   5592                  }
   5593              }
   5594              p = AppS2wParse_NextParamGet(&ptr);  /* clock sel */
   \                     ??AppS2wCmd_PwmStart_8:
   \   0000008E   0x.... 0x....      BL       ?Subroutine12
   5595              if (p)
   \                     ??CrossCallReturnLabel_132:
   \   00000092   0xB120             CBZ.N    R0,??AppS2wCmd_PwmStart_9
   5596              {
   5597                   status = AppS2wParse_Boolean(p,&clocksel );
   \   00000094   0xA901             ADD      R1,SP,#+4
   \   00000096   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000009A   0x0005             MOVS     R5,R0
   5598                   if (status != S2W_SUCCESS)
   \   0000009C   0xD1E0             BNE.N    ??AppS2wCmd_PwmStart_2
   5599                   {
   5600                        return status;
   5601                   }
   5602              }
   5603              if(clocksel == GSN_PWM_CLOCKSEL_PRESCALECLOCK)
   \                     ??AppS2wCmd_PwmStart_9:
   \   0000009E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000000A2   0x2801             CMP      R0,#+1
   \   000000A4   0xD107             BNE.N    ??AppS2wCmd_PwmStart_10
   5604              {
   5605                  p = AppS2wParse_NextParamGet(&ptr);  /* prescalar value */
   \   000000A6   0x.... 0x....      BL       ?Subroutine12
   5606                  if (p)
   \                     ??CrossCallReturnLabel_131:
   \   000000AA   0xB120             CBZ.N    R0,??AppS2wCmd_PwmStart_10
   5607                  {
   5608                      status = AppS2wParse_Int(p,&prescalerValue );
   \   000000AC   0xA909             ADD      R1,SP,#+36
   \   000000AE   0x.... 0x....      BL       AppS2wParse_Int
   \   000000B2   0x0005             MOVS     R5,R0
   5609                      if (status != S2W_SUCCESS)
   \   000000B4   0xD1D4             BNE.N    ??AppS2wCmd_PwmStart_2
   5610                      {
   5611                           return status;
   5612                      }
   5613                  }
   5614          
   5615              }
   5616              
   5617              p = AppS2wParse_NextParamGet(&ptr); /* phaseDelay01 */
   \                     ??AppS2wCmd_PwmStart_10:
   \   000000B6   0x.... 0x....      BL       ?Subroutine12
   5618              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_130:
   \   000000BA   0x2800             CMP      R0,#+0
   \   000000BC   0xBF1C             ITT      NE 
   \   000000BE   0x7801             LDRBNE   R1,[R0, #+0]
   \   000000C0   0x2900             CMPNE    R1,#+0
   \   000000C2   0xD007             BEQ.N    ??AppS2wCmd_PwmStart_11
   5619              {
   5620              status = AppS2wParse_Int(p, &phaseDelay01 );
   \   000000C4   0xA905             ADD      R1,SP,#+20
   \   000000C6   0x.... 0x....      BL       AppS2wParse_Int
   \   000000CA   0x0005             MOVS     R5,R0
   5621              if ((status != S2W_SUCCESS) || (phaseDelay01  > 1000))
   \   000000CC   0xD10D             BNE.N    ??AppS2wCmd_PwmStart_5
   \   000000CE   0x9805             LDR      R0,[SP, #+20]
   \   000000D0   0x42B0             CMP      R0,R6
   \   000000D2   0xD20D             BCS.N    ??AppS2wCmd_PwmStart_7
   5622              {
   5623                  return status;
   5624              }
   5625          	}
   5626              
   5627              p = AppS2wParse_NextParamGet(&ptr); /* phaseDelay12 */
   \                     ??AppS2wCmd_PwmStart_11:
   \   000000D4   0x.... 0x....      BL       ?Subroutine12
   5628              if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_129:
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xBF1C             ITT      NE 
   \   000000DC   0x7801             LDRBNE   R1,[R0, #+0]
   \   000000DE   0x2900             CMPNE    R1,#+0
   \   000000E0   0xD007             BEQ.N    ??AppS2wCmd_PwmStart_12
   5629              {
   5630              status = AppS2wParse_Int(p, &phaseDelay12 );
   \   000000E2   0xA904             ADD      R1,SP,#+16
   \   000000E4   0x.... 0x....      BL       AppS2wParse_Int
   \   000000E8   0x0005             MOVS     R5,R0
   5631              if ((status != S2W_SUCCESS) || (phaseDelay12 > 1000))
   \                     ??AppS2wCmd_PwmStart_5:
   \   000000EA   0xD17A             BNE.N    ??AppS2wCmd_PwmStart_6
   \   000000EC   0x9804             LDR      R0,[SP, #+16]
   \   000000EE   0x42B0             CMP      R0,R6
   \                     ??AppS2wCmd_PwmStart_7:
   \   000000F0   0xD277             BCS.N    ??AppS2wCmd_PwmStart_6
   5632              {
   5633                  return status;
   5634              }
   5635          	}
   5636              
   5637              pwm_handle.pwmInitialized = 0;
   \                     ??AppS2wCmd_PwmStart_12:
   \   000000F2   0x2000             MOVS     R0,#+0
   \   000000F4   0x6120             STR      R0,[R4, #+16]
   5638          
   5639              pattern.framePeriod = period;
   \   000000F6   0x9803             LDR      R0,[SP, #+12]
   \   000000F8   0x80E0             STRH     R0,[R4, #+6]
   5640              if(on_off)
   \   000000FA   0xF89D 0x0007      LDRB     R0,[SP, #+7]
   \   000000FE   0xB110             CBZ.N    R0,??AppS2wCmd_PwmStart_13
   5641              {
   5642                  pattern.timeON = (UINT16)period/2;
   \   00000100   0x9803             LDR      R0,[SP, #+12]
   \   00000102   0x0400             LSLS     R0,R0,#+16
   \   00000104   0x0C40             LSRS     R0,R0,#+17
   5643              }
   5644              else
   5645              {
   5646                  pattern.timeON = 0;
   \                     ??AppS2wCmd_PwmStart_13:
   \   00000106   0x80A0             STRH     R0,[R4, #+4]
   5647              }
   5648          
   5649              pwmInfo.channelId   = (GSN_PWM_NO)(pwmId-1);
   5650              pwmInfo.callback    = NULL;
   5651              pwmInfo.callBackCtx = NULL;
   5652              pwmInfo.recurrences = 0;
   5653          
   5654          
   5655              memset(&pwmConfig, 0, sizeof(GSN_PWM_CONFIG_T));
   \   00000108   0x220C             MOVS     R2,#+12
   \   0000010A   0x9802             LDR      R0,[SP, #+8]
   \   0000010C   0x1E40             SUBS     R0,R0,#+1
   \   0000010E   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \   00000112   0x2100             MOVS     R1,#+0
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0x900D             STR      R0,[SP, #+52]
   \   00000118   0x900E             STR      R0,[SP, #+56]
   \   0000011A   0x900C             STR      R0,[SP, #+48]
   \   0000011C   0xA806             ADD      R0,SP,#+24
   \   0000011E   0x.... 0x....      BL       memset
   5656              pwmConfig.eClockFrequency = (GSN_PWM_CLOCKFREQ)frequency ;
   \   00000122   0xF89D 0x0005      LDRB     R0,[SP, #+5]
   \   00000126   0xF88D 0x001D      STRB     R0,[SP, #+29]
   5657              pwmConfig.eClockSelect  = (GSN_PWM_CLOCKSEL)clocksel;
   \   0000012A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000012E   0xF88D 0x001C      STRB     R0,[SP, #+28]
   5658              pwmConfig.prescaleValue = prescalerValue;
   \   00000132   0x9809             LDR      R0,[SP, #+36]
   \   00000134   0xF88D 0x0022      STRB     R0,[SP, #+34]
   5659              pwmConfig.phaseDelay01  = phaseDelay01;
   \   00000138   0x9805             LDR      R0,[SP, #+20]
   \   0000013A   0xF8AD 0x0018      STRH     R0,[SP, #+24]
   5660              pwmConfig.phaseDelay12  = phaseDelay12;
   \   0000013E   0x9804             LDR      R0,[SP, #+16]
   \   00000140   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   5661              pwmConfig.ePolarity[0]  = (GSN_PWM_POLARITY)polarity;
   \   00000144   0xF89D 0x0006      LDRB     R0,[SP, #+6]
   \   00000148   0xF88D 0x001E      STRB     R0,[SP, #+30]
   5662              pwmConfig.eSystemClkSelect = (GSN_PWM_SYSTEM_CLOCKSEL)GSN_PWM_CLK_XTAL ;
   \   0000014C   0x2001             MOVS     R0,#+1
   \   0000014E   0xF88D 0x0021      STRB     R0,[SP, #+33]
   5663              /*pwmConfig.ePolarity[] = iotInput.pwmConfig.ePolarity;*/
   5664              
   5665              /* gpio muxing for PWM */
   5666              if((GSN_PWM_NO)(pwmId-1) == GSN_PWM_1)
   \   00000152   0x9802             LDR      R0,[SP, #+8]
   \   00000154   0x1E40             SUBS     R0,R0,#+1
   \   00000156   0xB2C0             UXTB     R0,R0
   \   00000158   0xB928             CBNZ.N   R0,??AppS2wCmd_PwmStart_14
   5667              {
   5668                  GsnIoMux_Sel(10,GSN_IOMUX_GPIO_10_APWM_0);
   \   0000015A   0x2103             MOVS     R1,#+3
   \   0000015C   0x200A             MOVS     R0,#+10
   \   0000015E   0x.... 0x....      BL       GsnIoMux_Sel
   5669                  GsnIoMux_PullDownDisable(10);
   \   00000162   0x200A             MOVS     R0,#+10
   \   00000164   0xE01E             B.N      ??AppS2wCmd_PwmStart_15
   5670              }
   5671              else if((GSN_PWM_NO)(pwmId-1) == GSN_PWM_2)
   \                     ??AppS2wCmd_PwmStart_14:
   \   00000166   0x2801             CMP      R0,#+1
   \   00000168   0xD105             BNE.N    ??AppS2wCmd_PwmStart_16
   5672              {
   5673                  GsnIoMux_Sel(30,GSN_IOMUX_GPIO_30_APWM_1);
   \   0000016A   0x2103             MOVS     R1,#+3
   \   0000016C   0x201E             MOVS     R0,#+30
   \   0000016E   0x.... 0x....      BL       GsnIoMux_Sel
   5674                  GsnIoMux_PullDownDisable(30);
   \   00000172   0x201E             MOVS     R0,#+30
   \   00000174   0xE016             B.N      ??AppS2wCmd_PwmStart_15
   5675              }
   5676              else if((GSN_PWM_NO)(pwmId-1) == GSN_PWM_3)
   \                     ??AppS2wCmd_PwmStart_16:
   \   00000176   0x2802             CMP      R0,#+2
   \   00000178   0xD00F             BEQ.N    ??AppS2wCmd_PwmStart_17
   5677              {
   5678                  GsnIoMux_Sel(31,GSN_IOMUX_GPIO_31_APWM_2);
   5679                  GsnIoMux_PullDownDisable(31);
   5680                
   5681              }
   5682              else if((GSN_PWM_NO)(pwmId-1) ==  GSN_PWM_SYNC)
   \   0000017A   0x2803             CMP      R0,#+3
   \   0000017C   0xD114             BNE.N    ??AppS2wCmd_PwmStart_18
   5683              {
   5684                  /* sync Mode  */
   5685                  GsnIoMux_Sel(10,GSN_IOMUX_GPIO_10_APWM_0);
   \   0000017E   0x2103             MOVS     R1,#+3
   \   00000180   0x200A             MOVS     R0,#+10
   \   00000182   0x.... 0x....      BL       GsnIoMux_Sel
   5686                  GsnIoMux_PullDownDisable(10);
   \   00000186   0x200A             MOVS     R0,#+10
   \   00000188   0x.... 0x....      BL       GsnIoMux_PullDownDisable
   5687                  GsnIoMux_Sel(30,GSN_IOMUX_GPIO_30_APWM_1);
   \   0000018C   0x2103             MOVS     R1,#+3
   \   0000018E   0x201E             MOVS     R0,#+30
   \   00000190   0x.... 0x....      BL       GsnIoMux_Sel
   5688                  GsnIoMux_PullDownDisable(30);
   \   00000194   0x201E             MOVS     R0,#+30
   \   00000196   0x.... 0x....      BL       GsnIoMux_PullDownDisable
   5689                  GsnIoMux_Sel(31,GSN_IOMUX_GPIO_31_APWM_2);
   \                     ??AppS2wCmd_PwmStart_17:
   \   0000019A   0x2103             MOVS     R1,#+3
   \   0000019C   0x201F             MOVS     R0,#+31
   \   0000019E   0x.... 0x....      BL       GsnIoMux_Sel
   5690                  GsnIoMux_PullDownDisable(31);
   \   000001A2   0x201F             MOVS     R0,#+31
   \                     ??AppS2wCmd_PwmStart_15:
   \   000001A4   0x.... 0x....      BL       GsnIoMux_PullDownDisable
   5691              }
   5692          
   5693              if(GsnPwm_Open(&pwm_handle,&pwmConfig) != GSN_SUCCESS)
   \                     ??AppS2wCmd_PwmStart_18:
   \   000001A8   0xA906             ADD      R1,SP,#+24
   \   000001AA   0xF104 0x0008      ADD      R0,R4,#+8
   \   000001AE   0x.... 0x....      BL       GsnPwm_Open
   \   000001B2   0xB110             CBZ.N    R0,??AppS2wCmd_PwmStart_19
   5694              {
   5695                  S2w_Printf("\r\nERROR: PWM open failed \r\n");
   \   000001B4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nERROR: PWM open fai...">`
   \   000001B8   0xE00D             B.N      ??AppS2wCmd_PwmStart_20
   5696                  return S2W_FAILURE;
   5697              }
   5698          
   5699              if(GsnPwm_Start(&pwm_handle, (GSN_PWM_NO)(pwmId-1), &pwmConfig,
   5700                              &pattern, &pwmInfo) != GSN_SUCCESS)
   \                     ??AppS2wCmd_PwmStart_19:
   \   000001BA   0xA80A             ADD      R0,SP,#+40
   \   000001BC   0x9000             STR      R0,[SP, #+0]
   \   000001BE   0x1D23             ADDS     R3,R4,#+4
   \   000001C0   0x9802             LDR      R0,[SP, #+8]
   \   000001C2   0x1E41             SUBS     R1,R0,#+1
   \   000001C4   0xAA06             ADD      R2,SP,#+24
   \   000001C6   0xB2C9             UXTB     R1,R1
   \   000001C8   0xF104 0x0008      ADD      R0,R4,#+8
   \   000001CC   0x.... 0x....      BL       GsnPwm_Start
   \   000001D0   0xB128             CBZ.N    R0,??AppS2wCmd_PwmStart_21
   5701              {
   5702                  S2w_Printf("\r\nERROR: PWM start failed \r\n");
   \   000001D2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nERROR: PWM start fa...">`
   \                     ??AppS2wCmd_PwmStart_20:
   \   000001D6   0x.... 0x....      BL       S2w_Printf
   5703                  return S2W_FAILURE;
   \                     ??AppS2wCmd_PwmStart_0:
   \   000001DA   0x2001             MOVS     R0,#+1
   \   000001DC   0xE002             B.N      ??AppS2wCmd_PwmStart_4
   5704              }
   5705              pwmInit = 1;
   \                     ??AppS2wCmd_PwmStart_21:
   \   000001DE   0x2001             MOVS     R0,#+1
   \   000001E0   0x7020             STRB     R0,[R4, #+0]
   5706              return status;
   \                     ??AppS2wCmd_PwmStart_6:
   \   000001E2   0x4628             MOV      R0,R5
   \                     ??AppS2wCmd_PwmStart_4:
   \   000001E4   0xB010             ADD      SP,SP,#+64
   \   000001E6   0xBD70             POP      {R4-R6,PC}       ;; return
   5707          
   5708          }
   5709          

   \                                 In section .text, align 2, keep-with-next
   5710          UINT8
   5711          AppS2wCmd_PwmStop(UINT8 *ptr)
   5712          {
   \                     AppS2wCmd_PwmStop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   5713              UINT8 status = S2W_EINVAL;
   5714              UINT32 pwmId=0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
   5715              if(!pwmInit)
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable210
   \   0000000A   0x7821             LDRB     R1,[R4, #+0]
   \   0000000C   0xB909             CBNZ.N   R1,??AppS2wCmd_PwmStop_0
   5716              {
   5717                 return S2W_FAILURE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0xBD32             POP      {R1,R4,R5,PC}
   5718              }
   5719              status = AppS2wParse_Int(ptr,&pwmId);
   \                     ??AppS2wCmd_PwmStop_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_173:
   \   00000016   0x0005             MOVS     R5,R0
   5720              if((status != GSN_SUCCESS) || (pwmId > 4) || (pwmId < 1 ))
   \   00000018   0xD103             BNE.N    ??AppS2wCmd_PwmStop_1
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x2805             CMP      R0,#+5
   \   0000001E   0xD200             BCS.N    ??AppS2wCmd_PwmStop_1
   \   00000020   0xB900             CBNZ.N   R0,??AppS2wCmd_PwmStop_2
   5721              {
   5722                  status= S2W_EINVAL;
   \                     ??AppS2wCmd_PwmStop_1:
   \   00000022   0x2502             MOVS     R5,#+2
   5723              }
   5724              pwmInit = 0;
   \                     ??AppS2wCmd_PwmStop_2:
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x7020             STRB     R0,[R4, #+0]
   5725              GsnPwm_Stop(&pwm_handle,(GSN_PWM_NO)(pwmId-1));
   \   00000028   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_282:
   \   0000002C   0x.... 0x....      BL       GsnPwm_Stop
   5726          
   5727              return status;
   \   00000030   0x4628             MOV      R0,R5
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   5728          
   5729          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x1E41             SUBS     R1,R0,#+1
   \   00000004   0xB2C9             UXTB     R1,R1
   \   00000006   0xF104 0x0008      ADD      R0,R4,#+8
   \   0000000A   0x4770             BX       LR
   5730          
   5731          

   \                                 In section .text, align 2, keep-with-next
   5732          UINT8
   5733          AppS2wCmd_PwmCtrl(UINT8 *ptr)
   5734          {
   \                     AppS2wCmd_PwmCtrl:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   5735              UINT8 *p, status = S2W_EINVAL;
   5736              UINT32 pwmId=0,duty_cycle;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   5737              if(!pwmInit)
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable210
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0xB908             CBNZ.N   R0,??AppS2wCmd_PwmCtrl_0
   5738              {
   5739                 return S2W_FAILURE;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE022             B.N      ??AppS2wCmd_PwmCtrl_1
   5740              }
   5741              p = AppS2wParse_NextParamGet(&ptr);  /* pwm id */
   \                     ??AppS2wCmd_PwmCtrl_0:
   \   00000014   0x.... 0x....      BL       ?Subroutine14
   5742              if (!p)
   \                     ??CrossCallReturnLabel_149:
   \   00000018   0xB180             CBZ.N    R0,??AppS2wCmd_PwmCtrl_2
   5743              {
   5744                  return S2W_EINVAL;
   5745              }
   5746              status = AppS2wParse_Int(p, &pwmId);
   5747              if((status != GSN_SUCCESS) || (pwmId >4) || (pwmId < 1 ))
   \   0000001A   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_172:
   \   0000001E   0xB968             CBNZ.N   R0,??AppS2wCmd_PwmCtrl_2
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x2805             CMP      R0,#+5
   \   00000024   0xD20A             BCS.N    ??AppS2wCmd_PwmCtrl_2
   \   00000026   0xB148             CBZ.N    R0,??AppS2wCmd_PwmCtrl_2
   5748              {
   5749                  return S2W_EINVAL;
   5750              }
   5751              p = AppS2wParse_NextParamGet(&ptr);  /* duty cycle */
   \   00000028   0x.... 0x....      BL       ?Subroutine14
   5752              if (!p)
   \                     ??CrossCallReturnLabel_148:
   \   0000002C   0xB130             CBZ.N    R0,??AppS2wCmd_PwmCtrl_2
   5753              {
   5754                  return S2W_EINVAL;
   5755              }
   5756              status = AppS2wParse_Int(p, &duty_cycle);
   5757              if((status != GSN_SUCCESS) || (duty_cycle > 100) ||(duty_cycle == 0))
   \   0000002E   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_228:
   \   00000032   0xB918             CBNZ.N   R0,??AppS2wCmd_PwmCtrl_2
   \   00000034   0x9801             LDR      R0,[SP, #+4]
   \   00000036   0x2865             CMP      R0,#+101
   \   00000038   0xD200             BCS.N    ??AppS2wCmd_PwmCtrl_2
   \   0000003A   0xB908             CBNZ.N   R0,??AppS2wCmd_PwmCtrl_3
   5758              {
   5759                  return S2W_EINVAL;
   \                     ??AppS2wCmd_PwmCtrl_2:
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0xE00C             B.N      ??AppS2wCmd_PwmCtrl_1
   5760              }
   5761          
   5762              pattern.timeON = (UINT16)((pattern.framePeriod)*(duty_cycle)/100);
   \                     ??AppS2wCmd_PwmCtrl_3:
   \   00000040   0x88E0             LDRH     R0,[R4, #+6]
   \   00000042   0x9901             LDR      R1,[SP, #+4]
   \   00000044   0x4348             MULS     R0,R1,R0
   \   00000046   0x2164             MOVS     R1,#+100
   \   00000048   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000004C   0x80A0             STRH     R0,[R4, #+4]
   5763              status= GsnPwm_PatternUpdate(&pwm_handle,(GSN_PWM_NO)(pwmId-1),&pattern);
   5764              return status;
   \   0000004E   0x1D22             ADDS     R2,R4,#+4
   \   00000050   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_283:
   \   00000054   0x.... 0x....      BL       GsnPwm_PatternUpdate
   \   00000058   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_PwmCtrl_1:
   \   0000005A   0xB004             ADD      SP,SP,#+16
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
   5765          
   5766          }
   5767          
   5768          
   5769          #endif
   5770          
   5771          #ifdef S2W_MEM_ACCESS
   5772          #define S2W_APP 0
   5773          #define S2W_WLAN 1

   \                                 In section .text, align 2, keep-with-next
   5774          UINT8
   5775          AppS2wCmd_MemRead(UINT8 *ptr)
   5776          {
   \                     AppS2wCmd_MemRead:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB0A7             SUB      SP,SP,#+156
   5777              UINT8 *p, status = S2W_EINVAL;
   5778              BOOL device=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0008      STRB     R0,[SP, #+8]
   5779              UINT32 size=0, address=0,count=0;
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x2400             MOVS     R4,#+0
   5780              INT32* addrPtr;
   5781              p = AppS2wParse_NextParamGet(&ptr);  /*app or wlan */
   \   00000010   0xA827             ADD      R0,SP,#+156
   \   00000012   0x.... 0x....      BL       AppS2wParse_NextParamGet
   5782              if (!p)
   \   00000016   0xB198             CBZ.N    R0,??AppS2wCmd_MemRead_0
   5783              {
   5784                  return S2W_EINVAL;
   5785              }
   5786              status = AppS2wParse_Boolean(p, &device);
   5787              if(status != GSN_SUCCESS)
   \   00000018   0xA902             ADD      R1,SP,#+8
   \   0000001A   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000001E   0xB978             CBNZ.N   R0,??AppS2wCmd_MemRead_0
   5788              {
   5789                  return S2W_EINVAL;
   5790              }
   5791          
   5792              p = AppS2wParse_NextParamGet(&ptr);  /*address */
   \   00000020   0xA827             ADD      R0,SP,#+156
   \   00000022   0x.... 0x....      BL       AppS2wParse_NextParamGet
   5793              if (!p)
   \   00000026   0xB158             CBZ.N    R0,??AppS2wCmd_MemRead_0
   5794              {
   5795                  return S2W_EINVAL;
   5796              }
   5797              status = AppS2wParse_Hex(p, &address);
   5798              if(status != GSN_SUCCESS)
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x.... 0x....      BL       AppS2wParse_Hex
   \   0000002E   0xB938             CBNZ.N   R0,??AppS2wCmd_MemRead_0
   5799              {
   5800                  return S2W_EINVAL;
   5801              }
   5802              addrPtr = (INT32*)address;
   \   00000030   0x9E00             LDR      R6,[SP, #+0]
   5803              p = AppS2wParse_NextParamGet(&ptr);  /*size in bytes */
   \   00000032   0xA827             ADD      R0,SP,#+156
   \   00000034   0x.... 0x....      BL       AppS2wParse_NextParamGet
   5804              if (!p)
   \   00000038   0xB110             CBZ.N    R0,??AppS2wCmd_MemRead_0
   5805              {
   5806                  return S2W_EINVAL;
   5807              }
   5808              status = AppS2wParse_Int(p, &size);
   5809              if(status != GSN_SUCCESS)
   \   0000003A   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_227:
   \   0000003E   0xB108             CBZ.N    R0,??AppS2wCmd_MemRead_1
   5810              {
   5811                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MemRead_0:
   \   00000040   0x2002             MOVS     R0,#+2
   \   00000042   0xE02A             B.N      ??AppS2wCmd_MemRead_2
   5812              }
   5813          
   5814              // do the read depends on the address is on wlan or app
   5815              S2w_Printf("\r\n");
   \                     ??AppS2wCmd_MemRead_1:
   \   00000044   0x....             ADR.N    R0,??DataTable206  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000046   0x.... 0x....      BL       S2w_Printf
   5816              if(device == S2W_APP)
   \   0000004A   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000004E   0x.... 0x....      ADR.W    R5,`?<Constant "0x%08x:%08x\\r\\n">`
   \   00000052   0xB950             CBNZ.N   R0,??AppS2wCmd_MemRead_3
   5817              {
   5818                  for(count=0;count<(size/4);count++)
   \                     ??AppS2wCmd_MemRead_4:
   \   00000054   0x9801             LDR      R0,[SP, #+4]
   \   00000056   0xEBB4 0x0F90      CMP      R4,R0, LSR #+2
   \   0000005A   0xD21D             BCS.N    ??AppS2wCmd_MemRead_5
   5819                  {
   5820                      S2w_Printf("0x%08x:%08x\r\n",(address+(count*4)),*(addrPtr+count));
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0xF856 0x2024      LDR      R2,[R6, R4, LSL #+2]
   \   00000062   0x.... 0x....      BL       ?Subroutine52
   5821                  }
   \                     ??CrossCallReturnLabel_339:
   \   00000066   0x1C64             ADDS     R4,R4,#+1
   \   00000068   0xE7F4             B.N      ??AppS2wCmd_MemRead_4
   5822              }
   5823              else
   5824              {
   5825                  UINT32 buff[32];
   5826                  GSN_SYS_CTL_MEM_READ_REQ_T readParam;
   5827                  readParam.addr = address;
   \                     ??AppS2wCmd_MemRead_3:
   \   0000006A   0x9800             LDR      R0,[SP, #+0]
   \   0000006C   0x9003             STR      R0,[SP, #+12]
   5828                  readParam.len = size;
   5829                  readParam.respBuf = (UINT8*)buff;
   5830                  GsnSysCtl_MemReadReq(&s2wappMainTaskCtxt->sysCtlCtx,&readParam);
   \   0000006E   0xA903             ADD      R1,SP,#+12
   \   00000070   0x9801             LDR      R0,[SP, #+4]
   \   00000072   0x9004             STR      R0,[SP, #+16]
   \   00000074   0xA806             ADD      R0,SP,#+24
   \   00000076   0x9005             STR      R0,[SP, #+20]
   \   00000078   0x.... 0x....      BL       ?Subroutine50
   \                     ??CrossCallReturnLabel_330:
   \   0000007C   0x.... 0x....      BL       GsnSysCtl_MemReadReq
   5831                  for(count=0;count<(size/4);count++)
   \   00000080   0xE006             B.N      ??AppS2wCmd_MemRead_6
   5832                  {
   5833                      S2w_Printf("0x%08x:%08x\r\n",(address+(count*4)),buff[count]);
   \                     ??AppS2wCmd_MemRead_7:
   \   00000082   0xA806             ADD      R0,SP,#+24
   \   00000084   0xF850 0x2024      LDR      R2,[R0, R4, LSL #+2]
   \   00000088   0x9800             LDR      R0,[SP, #+0]
   \   0000008A   0x.... 0x....      BL       ?Subroutine52
   5834                  }
   \                     ??CrossCallReturnLabel_338:
   \   0000008E   0x1C64             ADDS     R4,R4,#+1
   \                     ??AppS2wCmd_MemRead_6:
   \   00000090   0x9801             LDR      R0,[SP, #+4]
   \   00000092   0xEBB4 0x0F90      CMP      R4,R0, LSR #+2
   \   00000096   0xD3F4             BCC.N    ??AppS2wCmd_MemRead_7
   5835              }
   5836              return S2W_SUCCESS;
   \                     ??AppS2wCmd_MemRead_5:
   \   00000098   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_MemRead_2:
   \   0000009A   0xB028             ADD      SP,SP,#+160
   \   0000009C   0xBD70             POP      {R4-R6,PC}       ;; return
   5837          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   0xEB00 0x0184      ADD      R1,R0,R4, LSL #+2
   \   00000004   0x4628             MOV      R0,R5
   \   00000006   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable210_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000000A   0x4770             BX       LR
   5838          

   \                                 In section .text, align 2, keep-with-next
   5839          UINT8
   5840          AppS2wCmd_MemWrite(UINT8 *ptr)
   5841          {
   \                     AppS2wCmd_MemWrite:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   5842              UINT8 *p, status = S2W_EINVAL;
   5843              BOOL device=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x000C      STRB     R0,[SP, #+12]
   5844              UINT32 size=0, address=0,count=0,data=0;
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x9002             STR      R0,[SP, #+8]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x2400             MOVS     R4,#+0
   5845              INT32 *addrPtr;
   5846              p = AppS2wParse_NextParamGet(&ptr);  /*app or wlan */
   \   00000012   0x.... 0x....      BL       ?Subroutine15
   5847              if (!p)
   \                     ??CrossCallReturnLabel_158:
   \   00000016   0xB188             CBZ.N    R0,??AppS2wCmd_MemWrite_0
   5848              {
   5849                  return S2W_EINVAL;
   5850              }
   5851              status = AppS2wParse_Boolean(p, &device);
   5852              if(status != GSN_SUCCESS)
   \   00000018   0xA903             ADD      R1,SP,#+12
   \   0000001A   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000001E   0xB968             CBNZ.N   R0,??AppS2wCmd_MemWrite_0
   5853              {
   5854                  return S2W_EINVAL;
   5855              }
   5856          
   5857              p = AppS2wParse_NextParamGet(&ptr);  /*address */
   \   00000020   0x.... 0x....      BL       ?Subroutine15
   5858              if (!p)
   \                     ??CrossCallReturnLabel_157:
   \   00000024   0xB150             CBZ.N    R0,??AppS2wCmd_MemWrite_0
   5859              {
   5860                  return S2W_EINVAL;
   5861              }
   5862              status = AppS2wParse_Hex(p, &address);
   5863              if(status != GSN_SUCCESS)
   \   00000026   0xA902             ADD      R1,SP,#+8
   \   00000028   0x.... 0x....      BL       AppS2wParse_Hex
   \   0000002C   0xB930             CBNZ.N   R0,??AppS2wCmd_MemWrite_0
   5864              {
   5865                  return S2W_EINVAL;
   5866              }
   5867              addrPtr = (INT32*)address;
   \   0000002E   0x9D02             LDR      R5,[SP, #+8]
   5868              p = AppS2wParse_NextParamGet(&ptr);  /*size in bytes */
   \   00000030   0x.... 0x....      BL       ?Subroutine15
   5869              if (!p)
   \                     ??CrossCallReturnLabel_156:
   \   00000034   0xB110             CBZ.N    R0,??AppS2wCmd_MemWrite_0
   5870              {
   5871                  return S2W_EINVAL;
   5872              }
   5873              status = AppS2wParse_Int(p, &size);
   5874              if(status != GSN_SUCCESS)
   \   00000036   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_171:
   \   0000003A   0xB108             CBZ.N    R0,??AppS2wCmd_MemWrite_1
   5875              {
   5876                  return S2W_EINVAL;
   \                     ??AppS2wCmd_MemWrite_0:
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0xE037             B.N      ??AppS2wCmd_MemWrite_2
   5877              }
   5878          
   5879              // do the write depends on the address is on wlan or app
   5880              //S2w_Printf("\r\n");
   5881              if(device == S2W_APP)
   \                     ??AppS2wCmd_MemWrite_1:
   \   00000040   0xF89D 0x000C      LDRB     R0,[SP, #+12]
   \   00000044   0xB988             CBNZ.N   R0,??AppS2wCmd_MemWrite_3
   5882              {
   5883                   while(((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL) && ((size/4)))
   \                     ??AppS2wCmd_MemWrite_4:
   \   00000046   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_155:
   \   0000004A   0xB380             CBZ.N    R0,??AppS2wCmd_MemWrite_5
   \   0000004C   0x9900             LDR      R1,[SP, #+0]
   \   0000004E   0x0889             LSRS     R1,R1,#+2
   \   00000050   0xD02D             BEQ.N    ??AppS2wCmd_MemWrite_5
   5884                   {
   5885                       status = AppS2wParse_Hex(p, &data);
   \   00000052   0xA901             ADD      R1,SP,#+4
   \   00000054   0x.... 0x....      BL       AppS2wParse_Hex
   5886                       if (status != S2W_SUCCESS)
   \   00000058   0xBB50             CBNZ.N   R0,??AppS2wCmd_MemWrite_2
   5887                       {
   5888                           return status;
   5889                       }
   5890                       *(addrPtr+count) = data;
   \   0000005A   0x9801             LDR      R0,[SP, #+4]
   \   0000005C   0xF845 0x0024      STR      R0,[R5, R4, LSL #+2]
   5891                       count++;
   \   00000060   0x1C64             ADDS     R4,R4,#+1
   5892                       size -= 4;
   \   00000062   0x9800             LDR      R0,[SP, #+0]
   \   00000064   0x1F00             SUBS     R0,R0,#+4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0xE7ED             B.N      ??AppS2wCmd_MemWrite_4
   5893                   }
   5894              }
   5895              else
   5896              {
   5897                   UINT8 buff[32];
   5898                   GSN_SYS_CTL_MEM_WRITE_REQ_T writeParam;
   5899                   writeParam.addr = address;
   \                     ??AppS2wCmd_MemWrite_3:
   \   0000006A   0x9802             LDR      R0,[SP, #+8]
   \   0000006C   0x9004             STR      R0,[SP, #+16]
   5900                   writeParam.len = size;
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x9005             STR      R0,[SP, #+20]
   5901                   count=0;
   \   00000072   0xE00A             B.N      ??AppS2wCmd_MemWrite_6
   5902                   while(((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL) && (size))
   5903                   {
   5904                       status = AppS2wParse_Hex(p, &data);
   5905                       if (status != S2W_SUCCESS)
   5906                       {
   5907                           return status;
   5908                       }
   5909                       memcpy(&buff[count*4],(UINT8*)&data,4);
   \                     ??AppS2wCmd_MemWrite_7:
   \   00000074   0xA807             ADD      R0,SP,#+28
   \   00000076   0x2204             MOVS     R2,#+4
   \   00000078   0xA901             ADD      R1,SP,#+4
   \   0000007A   0xEB00 0x0084      ADD      R0,R0,R4, LSL #+2
   \   0000007E   0x.... 0x....      BL       memcpy
   5910                       count++;
   5911                       size -= 4;
   \   00000082   0x9800             LDR      R0,[SP, #+0]
   \   00000084   0x1F00             SUBS     R0,R0,#+4
   \   00000086   0x1C64             ADDS     R4,R4,#+1
   \   00000088   0x9000             STR      R0,[SP, #+0]
   \                     ??AppS2wCmd_MemWrite_6:
   \   0000008A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_154:
   \   0000008E   0xB138             CBZ.N    R0,??AppS2wCmd_MemWrite_8
   \   00000090   0x9900             LDR      R1,[SP, #+0]
   \   00000092   0xB129             CBZ.N    R1,??AppS2wCmd_MemWrite_8
   \   00000094   0xA901             ADD      R1,SP,#+4
   \   00000096   0x.... 0x....      BL       AppS2wParse_Hex
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD0EA             BEQ.N    ??AppS2wCmd_MemWrite_7
   \   0000009E   0xE007             B.N      ??AppS2wCmd_MemWrite_2
   5912                  }
   5913          
   5914                  writeParam.data = (UINT8*)buff;
   \                     ??AppS2wCmd_MemWrite_8:
   \   000000A0   0xA807             ADD      R0,SP,#+28
   \   000000A2   0x9006             STR      R0,[SP, #+24]
   5915                  GsnSysCtl_MemWriteReq(&s2wappMainTaskCtxt->sysCtlCtx,&writeParam);
   \   000000A4   0xA904             ADD      R1,SP,#+16
   \   000000A6   0x.... 0x....      BL       ?Subroutine50
   5916              }
   \                     ??CrossCallReturnLabel_331:
   \   000000AA   0x.... 0x....      BL       GsnSysCtl_MemWriteReq
   5917              return S2W_SUCCESS;
   \                     ??AppS2wCmd_MemWrite_5:
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_MemWrite_2:
   \   000000B0   0xB011             ADD      SP,SP,#+68
   \   000000B2   0xBD30             POP      {R4,R5,PC}       ;; return
   5918          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0xA810             ADD      R0,SP,#+64
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   5919          
   5920          #endif
   5921          

   \                                 In section .text, align 2, keep-with-next
   5922          UINT8
   5923          AppS2wCmd_LogLevelSet(UINT8* ptr)
   5924          {
   \                     AppS2wCmd_LogLevelSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5925          	UINT32 param;
   5926              UINT8 *p, status = S2W_EINVAL;
   5927              p = AppS2wParse_NextParamGet(&ptr);  /*log level */
   \   00000004   0x.... 0x....      BL       ??Subroutine7_0
   5928              if (!p)
   \                     ??CrossCallReturnLabel_37:
   \   00000008   0xB110             CBZ.N    R0,??AppS2wCmd_LogLevelSet_0
   5929              {
   5930                  return S2W_EINVAL;
   5931              }
   5932              status = AppS2wParse_Int(p, &param);
   5933              if(status != GSN_SUCCESS)
   \   0000000A   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_170:
   \   0000000E   0xB108             CBZ.N    R0,??AppS2wCmd_LogLevelSet_1
   5934              {
   5935                  return S2W_EINVAL;
   \                     ??AppS2wCmd_LogLevelSet_0:
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xBD0E             POP      {R1-R3,PC}
   5936              }
   5937              s2wCurrent.logLevel = (UINT8)param;
   \                     ??AppS2wCmd_LogLevelSet_1:
   \   00000014   0x....             LDR.N    R0,??DataTable206_2
   \   00000016   0x9900             LDR      R1,[SP, #+0]
   \   00000018   0xF880 0x13A8      STRB     R1,[R0, #+936]
   5938              //s2wappMainTaskCtxt->logLevel = (UINT8)param;
   5939          
   5940              return S2W_SUCCESS;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD0E             POP      {R1-R3,PC}       ;; return
   5941          }
   5942          /**
   5943           ******************************************************************
   5944           * @ingroup S2w-Application
   5945           * @brief Process the AT+BCHKSTRT command
   5946           * @param ptr Pointer to the user input string.
   5947           * @return status.
   5948           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5949          UINT8
   5950          AppS2wCmd_BattCheckStart(UINT8 *ptr)
   5951          {
   \                     AppS2wCmd_BattCheckStart:
   \   00000000   0xB580             PUSH     {R7,LR}
   5952              UINT8 status = S2W_EINVAL;
   5953              UINT32 freq=0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x9100             STR      R1,[SP, #+0]
   5954          
   5955              status = AppS2wParse_Int(ptr,&freq);
   \   00000006   0x.... 0x....      BL       ?Subroutine17
   5956              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_169:
   \   0000000A   0xB978             CBNZ.N   R0,??AppS2wCmd_BattCheckStart_0
   5957              {
   5958                  return status;
   5959              }
   5960              if((freq < 1) || (freq > 100))
   \   0000000C   0x9800             LDR      R0,[SP, #+0]
   \   0000000E   0xB108             CBZ.N    R0,??AppS2wCmd_BattCheckStart_1
   \   00000010   0x2865             CMP      R0,#+101
   \   00000012   0xD301             BCC.N    ??AppS2wCmd_BattCheckStart_2
   5961              {
   5962                  return S2W_EINVAL;
   \                     ??AppS2wCmd_BattCheckStart_1:
   \   00000014   0x2002             MOVS     R0,#+2
   \   00000016   0xBD02             POP      {R1,PC}
   5963              }
   5964          	
   5965              status = AppS2wHal_BattChkStart(freq);
   \                     ??AppS2wCmd_BattCheckStart_2:
   \   00000018   0x.... 0x....      BL       AppS2wHal_BattChkStart
   5966          	if(S2W_SUCCESS == status)
   \   0000001C   0xB930             CBNZ.N   R0,??AppS2wCmd_BattCheckStart_0
   5967          		s2wappMainTaskCtxt->battChk.battChckStarted =1;
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable210_1
   \   00000022   0x6812             LDR      R2,[R2, #+0]
   \   00000024   0xF248 0x116C      MOVW     R1,#+33132
   \   00000028   0x2301             MOVS     R3,#+1
   \   0000002A   0x548B             STRB     R3,[R1, R2]
   5968          		
   5969          	return status;  	
   \                     ??AppS2wCmd_BattCheckStart_0:
   \   0000002C   0xBD02             POP      {R1,PC}          ;; return
   5970          
   5971          }
   5972          
   5973          /**
   5974           ******************************************************************
   5975           * @ingroup S2w-Application
   5976           * @brief Process the AT+BATTLVLSET command
   5977           * @param ptr Pointer to the user input string.
   5978           * @return status.
   5979           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5980          UINT8
   5981          AppS2wCmd_BattLvlSet(UINT8 *ptr)
   5982          {
   \                     AppS2wCmd_BattLvlSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   5983              UINT8 status = S2W_EINVAL;
   5984              UINT8 *p;
   5985              UINT32 warningLvl =0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   5986              UINT32 warningFreq = 0;
   \   00000008   0x9002             STR      R0,[SP, #+8]
   5987              UINT32 stdByLvl = 0;
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   5988          
   5989              /* Get warning level*/
   5990              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ??Subroutine9_0
   5991              if (!p)
   \                     ??CrossCallReturnLabel_82:
   \   00000010   0xB1B8             CBZ.N    R0,??AppS2wCmd_BattLvlSet_0
   5992              {
   5993                  return S2W_EINVAL;
   5994              }
   5995              status = AppS2wParse_Int(p, &warningLvl);
   \   00000012   0x.... 0x....      BL       ?Subroutine19
   5996              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_226:
   \   00000016   0xB9E0             CBNZ.N   R0,??AppS2wCmd_BattLvlSet_1
   5997              {
   5998                  return status;
   5999              }
   6000              /* Get warning indication freq */
   6001              p = AppS2wParse_NextParamGet(&ptr);
   \   00000018   0x.... 0x....      BL       ??Subroutine9_0
   6002              if (!p)
   \                     ??CrossCallReturnLabel_81:
   \   0000001C   0xB188             CBZ.N    R0,??AppS2wCmd_BattLvlSet_0
   6003              {
   6004                  return S2W_EINVAL;
   6005              }
   6006              status = AppS2wParse_Int(p, &warningFreq);
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0x.... 0x....      BL       AppS2wParse_Int
   6007              if (status != S2W_SUCCESS)
   \   00000024   0xB9A8             CBNZ.N   R0,??AppS2wCmd_BattLvlSet_1
   6008              {
   6009                  return status;
   6010              }
   6011              /* Get standby  level*/
   6012              p = AppS2wParse_NextParamGet(&ptr);
   \   00000026   0x.... 0x....      BL       ??Subroutine9_0
   6013              if (!p)
   \                     ??CrossCallReturnLabel_80:
   \   0000002A   0xB150             CBZ.N    R0,??AppS2wCmd_BattLvlSet_0
   6014              {
   6015                  return S2W_EINVAL;
   6016              }
   6017              status = AppS2wParse_Int(p, &stdByLvl);
   \   0000002C   0x.... 0x....      BL       ?Subroutine17
   6018              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_168:
   \   00000030   0xB978             CBNZ.N   R0,??AppS2wCmd_BattLvlSet_1
   6019              {
   6020                  return status;
   6021              }
   6022              if(warningLvl > 3700 || stdByLvl > 3700)
   \   00000032   0x9901             LDR      R1,[SP, #+4]
   \   00000034   0xF640 0x6075      MOVW     R0,#+3701
   \   00000038   0x4281             CMP      R1,R0
   \   0000003A   0xBF3C             ITT      CC 
   \   0000003C   0x9900             LDRCC    R1,[SP, #+0]
   \   0000003E   0x4281             CMPCC    R1,R0
   \   00000040   0xD301             BCC.N    ??AppS2wCmd_BattLvlSet_2
   6023              {
   6024                  return S2W_EINVAL;
   \                     ??AppS2wCmd_BattLvlSet_0:
   \   00000042   0x2002             MOVS     R0,#+2
   \   00000044   0xE005             B.N      ??AppS2wCmd_BattLvlSet_1
   6025              }
   6026              return AppS2wHal_BattChkLvlSet(warningLvl, warningFreq,stdByLvl);
   \                     ??AppS2wCmd_BattLvlSet_2:
   \   00000046   0x460A             MOV      R2,R1
   \   00000048   0x9902             LDR      R1,[SP, #+8]
   \   0000004A   0x9801             LDR      R0,[SP, #+4]
   \   0000004C   0xB2C9             UXTB     R1,R1
   \   0000004E   0x.... 0x....      BL       AppS2wHal_BattChkLvlSet
   \                     ??AppS2wCmd_BattLvlSet_1:
   \   00000052   0xB005             ADD      SP,SP,#+20
   \   00000054   0xBD00             POP      {PC}             ;; return
   6027          
   6028          }
   6029          
   6030          
   6031          /**
   6032           ******************************************************************
   6033           * @ingroup S2w-Application
   6034           * @brief Process the AT+BCHK command
   6035           * @param ptr Pointer to the user input string.
   6036           * @return status.
   6037           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6038          UINT8
   6039          AppS2wCmd_BattCheckSet(UINT8 *ptr)
   6040          {
   \                     AppS2wCmd_BattCheckSet:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   6041              UINT8 status = S2W_EINVAL;
   6042              UINT32 battParam =0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x9100             STR      R1,[SP, #+0]
   6043          
   6044              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000008   0x7801             LDRB     R1,[R0, #+0]
   \   0000000A   0x293F             CMP      R1,#+63
   \   0000000C   0xBF04             ITT      EQ 
   \   0000000E   0x7841             LDRBEQ   R1,[R0, #+1]
   \   00000010   0x2900             CMPEQ    R1,#+0
   \   00000012   0xD10A             BNE.N    ??AppS2wCmd_BattCheckSet_0
   6045              {
   6046                  status = AppS2wHal_BattChkParam(&battParam);
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       AppS2wHal_BattChkParam
   \   0000001A   0x4604             MOV      R4,R0
   6047                  S2w_Printf("\r\nBatt.Measure Freq:%d",battParam);
   \   0000001C   0x9900             LDR      R1,[SP, #+0]
   \   0000001E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBatt.Measure Freq:%d">`
   \   00000022   0x.... 0x....      BL       S2w_Printf
   6048                  return status;
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0xBD16             POP      {R1,R2,R4,PC}
   6049              }
   6050          
   6051          	status = AppS2wParse_Int(ptr,&battParam);
   \                     ??AppS2wCmd_BattCheckSet_0:
   \   0000002A   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_167:
   \   0000002E   0x0004             MOVS     R4,R0
   6052              if (status != S2W_SUCCESS)
   \   00000030   0xD118             BNE.N    ??AppS2wCmd_BattCheckSet_1
   6053              {
   6054                  return status;
   6055              }
   6056              if((battParam < 1) || (battParam > 100))
   \   00000032   0x9800             LDR      R0,[SP, #+0]
   \   00000034   0xB108             CBZ.N    R0,??AppS2wCmd_BattCheckSet_2
   \   00000036   0x2865             CMP      R0,#+101
   \   00000038   0xD301             BCC.N    ??AppS2wCmd_BattCheckSet_3
   6057              {
   6058                  return S2W_EINVAL;
   \                     ??AppS2wCmd_BattCheckSet_2:
   \   0000003A   0x2002             MOVS     R0,#+2
   \   0000003C   0xBD16             POP      {R1,R2,R4,PC}
   6059              }
   6060          	
   6061              if(s2wappMainTaskCtxt->battChk.battChckStarted ==  1)
   \                     ??AppS2wCmd_BattCheckSet_3:
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable210_1
   \   00000042   0x6809             LDR      R1,[R1, #+0]
   \   00000044   0xF248 0x106C      MOVW     R0,#+33132
   \   00000048   0x5C40             LDRB     R0,[R0, R1]
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xD109             BNE.N    ??AppS2wCmd_BattCheckSet_4
   6062              {
   6063          		AppS2wHal_BattChkSet(battParam);	
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x.... 0x....      BL       AppS2wHal_BattChkSet
   6064          		if(S2W_SUCCESS == AppS2wHal_BattChkStop() )
   \   00000054   0x.... 0x....      BL       AppS2wHal_BattChkStop
   \   00000058   0xB918             CBNZ.N   R0,??AppS2wCmd_BattCheckSet_4
   6065          		{
   6066          			return AppS2wHal_BattChkStart(battParam);
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0x.... 0x....      BL       AppS2wHal_BattChkStart
   \   00000060   0xBD16             POP      {R1,R2,R4,PC}
   6067          		}
   6068              }
   6069          	return S2W_FAILURE;
   \                     ??AppS2wCmd_BattCheckSet_4:
   \   00000062   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_BattCheckSet_1:
   \   00000064   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   6070          }
   6071          
   6072          
   6073          /**
   6074           ******************************************************************
   6075           * @ingroup S2w-Application
   6076           * @brief Process the AT+BATTVALGET command
   6077           *   This function get the latest battery value by calling the hal function.
   6078           * @param ptr Pointer to the user input string.
   6079           * @return status.
   6080           ******************************************************************/
   6081          	

   \                                 In section .text, align 2, keep-with-next
   6082          UINT8
   6083          AppS2wCmd_BattValueGet(UINT8 *ptr)
   6084          {
   \                     AppS2wCmd_BattValueGet:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   6085          	UINT16 battValue=0;
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   6086          	UINT8 status = S2W_EINVAL;
   \   0000000A   0x2402             MOVS     R4,#+2
   6087          	UINT32 value;
   6088          	UINT8 deciPart;
   6089          
   6090          	if (*ptr)
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xB108             CBZ.N    R0,??AppS2wCmd_BattValueGet_0
   6091          	   return S2W_EINVAL;
   \   00000010   0x2002             MOVS     R0,#+2
   \   00000012   0xBD16             POP      {R1,R2,R4,PC}
   6092          	if(s2wappMainTaskCtxt->battChk.battChckStarted == 1)
   \                     ??AppS2wCmd_BattValueGet_0:
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable210_1
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0xF248 0x106C      MOVW     R0,#+33132
   \   0000001E   0x5C40             LDRB     R0,[R0, R1]
   \   00000020   0x2801             CMP      R0,#+1
   \   00000022   0xD113             BNE.N    ??AppS2wCmd_BattValueGet_1
   6093          		status = AppS2wHal_BattChkValueGet(&battValue); 
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x.... 0x....      BL       AppS2wHal_BattChkValueGet
   \   0000002A   0x0004             MOVS     R4,R0
   6094          	if(S2W_SUCCESS == status)
   \   0000002C   0xD10E             BNE.N    ??AppS2wCmd_BattValueGet_1
   6095          	{
   6096          		deciPart = battValue/1000;
   \   0000002E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000032   0xF44F 0x717A      MOV      R1,#+1000
   \   00000036   0xFB90 0xF1F1      SDIV     R1,R0,R1
   \   0000003A   0xB2C9             UXTB     R1,R1
   6097          		value = battValue - (1000*deciPart);
   6098          		S2w_Printf("\r\nBattery Value:%d.%03d V\r\n",deciPart,value);
   \   0000003C   0xF44F 0x727A      MOV      R2,#+1000
   \   00000040   0xFB02 0x0211      MLS      R2,R2,R1,R0
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBattery Value:%d.%0...">`
   \   00000048   0x.... 0x....      BL       S2w_Printf
   6099          	}
   6100          	return status;
   \                     ??AppS2wCmd_BattValueGet_1:
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   6101          }
   6102          
   6103          /**
   6104           ******************************************************************
   6105           * @ingroup S2w-Application
   6106           * @brief Process the AT+BCHKSTOP command
   6107           * @param ptr Pointer to the user input string.
   6108           * @return status.
   6109           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6110          UINT8
   6111          AppS2wCmd_BattCheckStop(UINT8 *ptr)
   6112          {
   \                     AppS2wCmd_BattCheckStop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   6113          	UINT8 status;
   6114              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB968             CBNZ.N   R0,??AppS2wCmd_BattCheckStop_0
   6115                 return S2W_EINVAL;
   6116              else
   6117              {
   6118          		if(s2wappMainTaskCtxt->battChk.battChckStarted)
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable210_1
   \   0000000A   0x6828             LDR      R0,[R5, #+0]
   \   0000000C   0xF248 0x146C      MOVW     R4,#+33132
   \   00000010   0x5C20             LDRB     R0,[R4, R0]
   \   00000012   0xB130             CBZ.N    R0,??AppS2wCmd_BattCheckStop_0
   6119          		{
   6120          
   6121          			status=  AppS2wHal_BattChkStop();
   \   00000014   0x.... 0x....      BL       AppS2wHal_BattChkStop
   6122          			if(S2W_SUCCESS == status)
   \   00000018   0xB920             CBNZ.N   R0,??AppS2wCmd_BattCheckStop_1
   6123          				s2wappMainTaskCtxt->battChk.battChckStarted = 0;
   \   0000001A   0x6829             LDR      R1,[R5, #+0]
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x5462             STRB     R2,[R4, R1]
   6124          			return status;
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}
   6125          		}
   6126          	   	else	   	
   6127          		   return S2W_EINVAL;
   \                     ??AppS2wCmd_BattCheckStop_0:
   \   00000022   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_BattCheckStop_1:
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   6128              }
   6129          }
   6130          
   6131          
   6132          
   6133          #ifdef GSN_MEM_TRACE
   6134          UINT8* moduleName[] = {"Supplicant", "GHS", "GSN"};
   6135          
   6136          /**
   6137           ******************************************************************
   6138           * @ingroup S2w-Application
   6139           * @brief Process the AT+MEMTRACE Command.
   6140           *   This function display the memory trace information.
   6141           * @param ptr Pointer to the user input string.
   6142           *
   6143           * @return S2W_SUCCESS - operation successful.
   6144           ******************************************************************/
   6145          PUBLIC UINT8
   6146          AppS2wCmd_memTraceGet(UINT8 *ptr)
   6147          {
   6148               alloc_data_t * list;
   6149               UINT32 i = 0;
   6150               UINT8 module=0;
   6151               GsnDynAllChk_ResetTrace();
   6152               S2w_Printf("\r\n******  Memory Trace starts Here ******* \r\n");
   6153               S2w_Printf(" \r\n Number Of Allocation    : %d \r\n", GsnDynAllChk_NumOfAlloc());
   6154               S2w_Printf(" Number Of Free          : %d \r\n", GsnDynAllChk_NumOfFree());
   6155               S2w_Printf(" Current Used Memory in bytes   : %d \r\n", GsnDynAllChk_TotalAllocMemSize());
   6156               S2w_Printf(" Peak Memory Usage in bytes     : %d \r\n", GsnDynAllChk_PeakAllocMemSize());
   6157          
   6158               S2w_Printf("\r\n**The Following Memory Not Freed**\r\n");
   6159               S2w_Printf("Address ,Line , Size ,Module\r\n");
   6160               S2w_Printf("------- ,---- , ----,------  \r\n");
   6161               while(1)
   6162              {
   6163          
   6164                  list = GsnDynAllChk_GetList(&module);
   6165                  if(list == NULL)
   6166                  {
   6167                      break;
   6168                  }
   6169                  S2w_Printf("%x,%5d,%5d, %s\r\n",(UINT32)list,list->line,list->size, moduleName[module]);
   6170                  i++;
   6171              }
   6172              S2w_Printf("\r\nNumber of Allocations to be Freed: %d \r\n",i);
   6173              S2w_Printf("****** Memory Trace Ends Here ****** \r\n");
   6174          
   6175              return S2W_SUCCESS;
   6176          }
   6177          
   6178          #endif
   6179          /**
   6180           ******************************************************************
   6181           * @ingroup S2w-Application
   6182           * @brief Process the AT+WLANSTATS Command.
   6183           *   
   6184           * @param ptr Pointer to the user input string.
   6185           *
   6186           * @return S2W_SUCCESS - operation successful.
   6187           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6188          PUBLIC UINT8
   6189          AppS2wCmd_WlanStatsGet(UINT8 *ptr)
   6190          {
   \                     AppS2wCmd_WlanStatsGet:
   \   00000000   0xE92D 0x4FFE      PUSH     {R1-R11,LR}
   6191          	UINT8 reset=1;
   6192          	UINT8 status;
   6193          	UINT32 i;
   6194          	GSN_WIF_WLAN_TX_STATS_T *txStats;
   6195          	GSN_WIF_WLAN_RX_STATS_T *rxStats;
   6196          	
   6197          	txStats = gsn_malloc(sizeof(GSN_WIF_WLAN_TX_STATS_T));
   \   00000004   0x2200             MOVS     R2,#+0
   \   00000006   0xF641 0x0135      MOVW     R1,#+6197
   \   0000000A   0xF44F 0x70FC      MOV      R0,#+504
   \   0000000E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000012   0xEA5F 0x0B00      MOVS     R11,R0
   6198          	if(NULL == txStats)
   \   00000016   0xF000 0x8115      BEQ.W    ??AppS2wCmd_WlanStatsGet_0
   6199          		return S2W_FAILURE;
   6200          
   6201          	memset(txStats,0,sizeof(GSN_WIF_WLAN_TX_STATS_T));
   \   0000001A   0xF44F 0x72FC      MOV      R2,#+504
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x.... 0x....      BL       memset
   \   00000024   0xF44F 0x70FC      MOV      R0,#+504
   \   00000028   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_269:
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_274:
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xF040 0x8105      BNE.W    ??AppS2wCmd_WlanStatsGet_0
   6202              status = GsnWdd_WlanStatsGet(&s2wappMainTaskCtxt->if0.wddCtx,reset,GSN_WDD_WLAN_STAT_TYPE_TX,(INT8*)txStats,sizeof(GSN_WIF_WLAN_TX_STATS_T));
   6203              if(status != S2W_SUCCESS)
   6204              {
   6205                return S2W_FAILURE;
   6206              }
   6207          	
   6208              
   6209               /* TX stats */
   6210          	S2w_Printf("\r\nitxs=%d\r\nitxto=%d\r\nitxf=%d",txStats->st.itxs,txStats->st.itxto,txStats->st.itxf);
   \   0000003A   0xF10B 0x0404      ADD      R4,R11,#+4
   \   0000003E   0xF8DB 0x1004      LDR      R1,[R11, #+4]
   \   00000042   0x68A3             LDR      R3,[R4, #+8]
   \   00000044   0x6862             LDR      R2,[R4, #+4]
   \   00000046   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nitxs=%d\\r\\nitxto=%d\\r\\n...">`
   \   0000004A   0x.... 0x....      BL       S2w_Printf
   6211          	  
   6212          	S2w_Printf("\r\nwep40=%d\r\nwep104=%d\r\ntkip=%d\r\nccmp=%d\r\nunencryp=%d\r\nukencryp=%d",
   6213          	 		    txStats->cip_type.wep40,txStats->cip_type.wep104,txStats->cip_type.tkip,txStats->cip_type.ccmp,
   6214          	 		    txStats->cip_type.unencryp,txStats->cip_type.ukencryp);
   \   0000004E   0x6A20             LDR      R0,[R4, #+32]
   \   00000050   0x9002             STR      R0,[SP, #+8]
   \   00000052   0x69E0             LDR      R0,[R4, #+28]
   \   00000054   0x9001             STR      R0,[SP, #+4]
   \   00000056   0x69A0             LDR      R0,[R4, #+24]
   \   00000058   0x9000             STR      R0,[SP, #+0]
   \   0000005A   0x6963             LDR      R3,[R4, #+20]
   \   0000005C   0x6922             LDR      R2,[R4, #+16]
   \   0000005E   0x68E1             LDR      R1,[R4, #+12]
   \   00000060   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nwep40=%d\\r\\nwep104=%d...">`
   \   00000064   0x.... 0x....      BL       S2w_Printf
   \   00000068   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nleg=">`
   6215          
   6216          	S2w_Printf("\r\nleg=");
   \   0000006C   0x.... 0x....      BL       S2w_Printf
   6217          	for(i=0;i<14;i++)
   \   00000070   0x.... 0x....      ADR.W    R4,`?<Constant "%d,%d:">`
   \   00000074   0xF04F 0x0800      MOV      R8,#+0
   6218          	{
   6219          		S2w_Printf("%d,%d:",txStats->dr.leg[i][0],txStats->dr.leg[i][1]);  	
   \                     ??AppS2wCmd_WlanStatsGet_1:
   \   00000078   0xEB0B 0x00C8      ADD      R0,R11,R8, LSL #+3
   \   0000007C   0x6AC2             LDR      R2,[R0, #+44]
   \   0000007E   0x6A81             LDR      R1,[R0, #+40]
   \   00000080   0x.... 0x....      BL       ?Subroutine6
   6220          	}                                          
   \                     ??CrossCallReturnLabel_31:
   \   00000084   0xF108 0x0801      ADD      R8,R8,#+1
   \   00000088   0xF1B8 0x0F0E      CMP      R8,#+14
   \   0000008C   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_1
   6221          	S2w_Printf("%d,%d",txStats->dr.leg[15][0],txStats->dr.leg[15][1]);	
   \   0000008E   0xF10B 0x07A0      ADD      R7,R11,#+160
   \   00000092   0x.... 0x....      ADR.W    R8,`?<Constant "%d,%d">`
   \   00000096   0x687A             LDR      R2,[R7, #+4]
   \   00000098   0xF8DB 0x10A0      LDR      R1,[R11, #+160]
   \   0000009C   0x.... 0x....      BL       ?Subroutine2
   6222          
   6223          	S2w_Printf("\r\nht20l=");
   \                     ??CrossCallReturnLabel_13:
   \   000000A0   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\nht20l=">`
   \   000000A4   0x.... 0x....      BL       ?Subroutine39
   6224          	for(i=0;i<GSN_WLAN_MAX_MCS_SUPPORTED;i++)
   \                     ??CrossCallReturnLabel_290:
   \   000000A8   0x2500             MOVS     R5,#+0
   6225          	{
   6226          		S2w_Printf("%d,%d:",txStats->dr.ht20l[i][0],txStats->dr.ht20l[i][1]);		
   \                     ??AppS2wCmd_WlanStatsGet_2:
   \   000000AA   0xEB0B 0x00C5      ADD      R0,R11,R5, LSL #+3
   \   000000AE   0xF8D0 0x20AC      LDR      R2,[R0, #+172]
   \   000000B2   0xF8D0 0x10A8      LDR      R1,[R0, #+168]
   \   000000B6   0x.... 0x....      BL       ?Subroutine6
   6227          	}										   
   \                     ??CrossCallReturnLabel_30:
   \   000000BA   0x1C6D             ADDS     R5,R5,#+1
   \   000000BC   0x2D07             CMP      R5,#+7
   \   000000BE   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_2
   6228          	S2w_Printf("%d,%d",txStats->dr.ht20l[GSN_WLAN_MAX_MCS_SUPPORTED][0],txStats->dr.ht20l[GSN_WLAN_MAX_MCS_SUPPORTED][1]);		
   \   000000C0   0x6C7A             LDR      R2,[R7, #+68]
   \   000000C2   0x6C39             LDR      R1,[R7, #+64]
   \   000000C4   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12:
   \   000000C8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht40l=">`
   6229          
   6230          	S2w_Printf("\r\nht40l=");
   \   000000CC   0x.... 0x....      BL       S2w_Printf
   6231          	for(i=0;i<GSN_WLAN_MAX_MCS_SUPPORTED;i++)
   \   000000D0   0x2700             MOVS     R7,#+0
   6232          	{
   6233          		S2w_Printf("%d,%d:",txStats->dr.ht40l[i][0],txStats->dr.ht40l[i][1]);	
   \                     ??AppS2wCmd_WlanStatsGet_3:
   \   000000D2   0xEB0B 0x00C7      ADD      R0,R11,R7, LSL #+3
   \   000000D6   0xF8D0 0x212C      LDR      R2,[R0, #+300]
   \   000000DA   0xF8D0 0x1128      LDR      R1,[R0, #+296]
   \   000000DE   0x.... 0x....      BL       ?Subroutine6
   6234          	}										   
   \                     ??CrossCallReturnLabel_29:
   \   000000E2   0x1C7F             ADDS     R7,R7,#+1
   \   000000E4   0x2F07             CMP      R7,#+7
   \   000000E6   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_3
   6235          	S2w_Printf("%d,%d",txStats->dr.ht40l[GSN_WLAN_MAX_MCS_SUPPORTED][0],txStats->dr.ht40l[GSN_WLAN_MAX_MCS_SUPPORTED][1]);	
   \   000000E8   0xF50B 0x7990      ADD      R9,R11,#+288
   \   000000EC   0xF8D9 0x2044      LDR      R2,[R9, #+68]
   \   000000F0   0xF8D9 0x1040      LDR      R1,[R9, #+64]
   \   000000F4   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11:
   \   000000F8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht40s=">`
   6236          	
   6237          	S2w_Printf("\r\nht40s=");
   \   000000FC   0x.... 0x....      BL       S2w_Printf
   6238          	for(i=0;i<(GSN_WLAN_MAX_MCS_SUPPORTED);i++)
   \   00000100   0x2700             MOVS     R7,#+0
   6239          	{
   6240          		S2w_Printf("%d,%d:",txStats->dr.ht40s[i][0],txStats->dr.ht40s[i][1]);		
   \                     ??AppS2wCmd_WlanStatsGet_4:
   \   00000102   0xEB0B 0x00C7      ADD      R0,R11,R7, LSL #+3
   \   00000106   0xF8D0 0x216C      LDR      R2,[R0, #+364]
   \   0000010A   0xF8D0 0x1168      LDR      R1,[R0, #+360]
   \   0000010E   0x.... 0x....      BL       ?Subroutine6
   6241          	}									
   \                     ??CrossCallReturnLabel_28:
   \   00000112   0x1C7F             ADDS     R7,R7,#+1
   \   00000114   0x2F07             CMP      R7,#+7
   \   00000116   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_4
   6242          	S2w_Printf("%d,%d",txStats->dr.ht40s[GSN_WLAN_MAX_MCS_SUPPORTED][0],txStats->dr.ht40s[GSN_WLAN_MAX_MCS_SUPPORTED][1]);		
   \   00000118   0xF50B 0x77D0      ADD      R7,R11,#+416
   \   0000011C   0xF8DB 0x11A0      LDR      R1,[R11, #+416]
   \   00000120   0x687A             LDR      R2,[R7, #+4]
   \   00000122   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10:
   \   00000126   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht20s=">`
   6243          
   6244          	S2w_Printf("\r\nht20s=");
   \   0000012A   0x.... 0x....      BL       S2w_Printf
   6245          	for(i=0;i<GSN_WLAN_MAX_MCS_SUPPORTED;i++)
   \   0000012E   0x2500             MOVS     R5,#+0
   6246          	{
   6247          		S2w_Printf("%d,%d:",txStats->dr.ht20s[i][0],txStats->dr.ht20s[i][1]);		
   \                     ??AppS2wCmd_WlanStatsGet_5:
   \   00000130   0xEB0B 0x00C5      ADD      R0,R11,R5, LSL #+3
   \   00000134   0xF8D0 0x20EC      LDR      R2,[R0, #+236]
   \   00000138   0xF8D0 0x10E8      LDR      R1,[R0, #+232]
   \   0000013C   0x.... 0x....      BL       ?Subroutine6
   6248          	}										   
   \                     ??CrossCallReturnLabel_27:
   \   00000140   0x1C6D             ADDS     R5,R5,#+1
   \   00000142   0x2D07             CMP      R5,#+7
   \   00000144   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_5
   6249          	S2w_Printf("%d,%d",txStats->dr.ht20s[GSN_WLAN_MAX_MCS_SUPPORTED][0],txStats->dr.ht20s[GSN_WLAN_MAX_MCS_SUPPORTED][1]);		
   \   00000146   0xF8D9 0x2004      LDR      R2,[R9, #+4]
   \   0000014A   0xF8DB 0x1120      LDR      R1,[R11, #+288]
   \   0000014E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_9:
   \   00000152   0x68FA             LDR      R2,[R7, #+12]
   \   00000154   0x68B9             LDR      R1,[R7, #+8]
   \   00000156   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmcs32s=%d,%d">`
   6250          
   6251          	S2w_Printf("\r\nmcs32s=%d,%d",txStats->dr.mcs32s[0],txStats->dr.mcs32s[1]);
   \   0000015A   0x.... 0x....      BL       S2w_Printf
   \   0000015E   0x697A             LDR      R2,[R7, #+20]
   \   00000160   0x6939             LDR      R1,[R7, #+16]
   \   00000162   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmcs32l=%d,%d">`
   6252          	S2w_Printf("\r\nmcs32l=%d,%d",txStats->dr.mcs32l[0],txStats->dr.mcs32l[1]);
   \   00000166   0x.... 0x....      BL       S2w_Printf
   \   0000016A   0x69B9             LDR      R1,[R7, #+24]
   \   0000016C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nprobersp=%d">`
   6253          
   6254          	S2w_Printf("\r\nprobersp=%d",txStats->type.probersp);       
   \   00000170   0x.... 0x....      BL       S2w_Printf
   \   00000174   0x69F9             LDR      R1,[R7, #+28]
   \   00000176   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nprobereq=%d">`
   6255          	S2w_Printf("\r\nprobereq=%d",txStats->type.probereq);       
   \   0000017A   0x.... 0x....      BL       S2w_Printf
   \   0000017E   0x6A39             LDR      R1,[R7, #+32]
   \   00000180   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmc_data=%d">`
   6256          	S2w_Printf("\r\nmc_data=%d",txStats->type.mc_data);       
   \   00000184   0x.... 0x....      BL       S2w_Printf
   \   00000188   0x6A79             LDR      R1,[R7, #+36]
   \   0000018A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nuc_data=%d">`
   6257          	S2w_Printf("\r\nuc_data=%d",txStats->type.uc_data);       
   \   0000018E   0x.... 0x....      BL       S2w_Printf
   \   00000192   0x6AB9             LDR      R1,[R7, #+40]
   \   00000194   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nqos_uc_data=%d">`
   6258          	S2w_Printf("\r\nqos_uc_data=%d",txStats->type.qos_uc_data);       
   \   00000198   0x.... 0x....      BL       S2w_Printf
   \   0000019C   0x6AF9             LDR      R1,[R7, #+44]
   \   0000019E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nqos_mc_data=%d">`
   6259          	S2w_Printf("\r\nqos_mc_data=%d",txStats->type.qos_mc_data);       
   \   000001A2   0x.... 0x....      BL       S2w_Printf
   \   000001A6   0x6B39             LDR      R1,[R7, #+48]
   \   000001A8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\namsdu_uc_data=%d">`
   6260          	S2w_Printf("\r\namsdu_uc_data=%d",txStats->type.amsdu_uc_data);       
   \   000001AC   0x.... 0x....      BL       S2w_Printf
   \   000001B0   0x6B79             LDR      R1,[R7, #+52]
   \   000001B2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\namsdu_mc_data=%d">`
   6261          	S2w_Printf("\r\namsdu_mc_data=%d",txStats->type.amsdu_mc_data);       	
   \   000001B6   0x.... 0x....      BL       S2w_Printf
   6262          	S2w_Printf("\r\nampdu_uc_data=%d",txStats->type.ampdu_uc_data);       
   \   000001BA   0x6BB9             LDR      R1,[R7, #+56]
   \   000001BC   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nampdu_uc_data=%d">`
   \   000001C0   0x.... 0x....      BL       S2w_Printf
   6263          	S2w_Printf("\r\nampdu_mc_data=%d",txStats->type.ampdu_mc_data);       
   \   000001C4   0x6BF9             LDR      R1,[R7, #+60]
   \   000001C6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nampdu_mc_data=%d">`
   \   000001CA   0x.... 0x....      BL       S2w_Printf
   \   000001CE   0x6C39             LDR      R1,[R7, #+64]
   \   000001D0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\noth_mgmt=%d">`
   6264          	S2w_Printf("\r\noth_mgmt=%d",txStats->type.oth_mgmt);       
   \   000001D4   0x.... 0x....      BL       S2w_Printf
   6265          	S2w_Printf("\r\noth=%d",txStats->type.oth);       
   \   000001D8   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\noth=%d">`
   \   000001DC   0x6C79             LDR      R1,[R7, #+68]
   \   000001DE   0x4648             MOV      R0,R9
   \   000001E0   0x.... 0x....      BL       S2w_Printf
   6266          	S2w_Printf("\r\nctrl=%d",txStats->type.ctrl);       
   \   000001E4   0x.... 0x....      ADR.W    R10,`?<Constant "\\r\\nctrl=%d">`
   \   000001E8   0x6CB9             LDR      R1,[R7, #+72]
   \   000001EA   0x4650             MOV      R0,R10
   \   000001EC   0x.... 0x....      BL       S2w_Printf
   6267          
   6268          	S2w_Printf("\r\nretries=%d",txStats->retries); 
   \   000001F0   0x6CF9             LDR      R1,[R7, #+76]
   \   000001F2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nretries=%d">`
   \   000001F6   0x.... 0x....      BL       S2w_Printf
   6269          	S2w_Printf("\r\nmultiple_retries=%d",txStats->multiple_retries); 
   \   000001FA   0x6D39             LDR      R1,[R7, #+80]
   \   000001FC   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmultiple_retries=%d">`
   \   00000200   0x.... 0x....      BL       S2w_Printf
   6270          	S2w_Printf("\r\nfragments=%d",txStats->fragments); 
   \   00000204   0x6D79             LDR      R1,[R7, #+84]
   \   00000206   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nfragments=%d">`
   \   0000020A   0x.... 0x....      BL       S2w_Printf
   6271          
   6272          	free(txStats);	
   \   0000020E   0x4658             MOV      R0,R11
   \   00000210   0x.... 0x....      BL       free
   6273          	 /* RX stats */
   6274          
   6275          	rxStats = gsn_malloc(sizeof(GSN_WIF_WLAN_RX_STATS_T));
   \   00000214   0x2200             MOVS     R2,#+0
   \   00000216   0xF641 0x0183      MOVW     R1,#+6275
   \   0000021A   0xF44F 0x700F      MOV      R0,#+572
   \   0000021E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000222   0xEA5F 0x0B00      MOVS     R11,R0
   6276          	if(NULL == rxStats)
   \   00000226   0xD00D             BEQ.N    ??AppS2wCmd_WlanStatsGet_0
   6277          		return S2W_FAILURE;
   6278          	
   6279          	memset(rxStats,0,sizeof(GSN_WIF_WLAN_RX_STATS_T));
   \   00000228   0xF44F 0x720F      MOV      R2,#+572
   \   0000022C   0x2100             MOVS     R1,#+0
   \   0000022E   0x.... 0x....      BL       memset
   6280          	status = GsnWdd_WlanStatsGet(&s2wappMainTaskCtxt->if0.wddCtx,reset,GSN_WDD_WLAN_STAT_TYPE_RX,(INT8*)rxStats,sizeof(GSN_WIF_WLAN_RX_STATS_T));
   6281          	if(status != S2W_SUCCESS)
   \   00000232   0xF44F 0x700F      MOV      R0,#+572
   \   00000236   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_270:
   \   0000023A   0x2201             MOVS     R2,#+1
   \   0000023C   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_273:
   \   00000240   0xB2C0             UXTB     R0,R0
   \   00000242   0xB108             CBZ.N    R0,??AppS2wCmd_WlanStatsGet_6
   6282          	{
   6283          	  return S2W_FAILURE;
   \                     ??AppS2wCmd_WlanStatsGet_0:
   \   00000244   0x2001             MOVS     R0,#+1
   \   00000246   0xE13C             B.N      ??AppS2wCmd_WlanStatsGet_7
   6284          	}
   6285          	 
   6286          	S2w_Printf("\r\nirx0=%d",rxStats->st.irx0);        
   \                     ??AppS2wCmd_WlanStatsGet_6:
   \   00000248   0xF8DB 0x1004      LDR      R1,[R11, #+4]
   \   0000024C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirx0=%d">`
   \   00000250   0x.... 0x....      BL       S2w_Printf
   6287          	S2w_Printf("\r\nirxf=%d",rxStats->st.irxf);                
   \   00000254   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxf=%d">`
   \   00000258   0xF10B 0x0504      ADD      R5,R11,#+4
   \   0000025C   0x6869             LDR      R1,[R5, #+4]
   \   0000025E   0x.... 0x....      BL       S2w_Printf
   6288          	S2w_Printf("\r\nirxs=%d",rxStats->st.irxs);                
   \   00000262   0x68A9             LDR      R1,[R5, #+8]
   \   00000264   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxs=%d">`
   \   00000268   0x.... 0x....      BL       S2w_Printf
   6289          	S2w_Printf("\r\nirxd=%d",rxStats->st.irxd);                
   \   0000026C   0x68E9             LDR      R1,[R5, #+12]
   \   0000026E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxd=%d">`
   \   00000272   0x.... 0x....      BL       S2w_Printf
   6290          	S2w_Printf("\r\nirxmf=%d",rxStats->st.irxmf);               
   \   00000276   0x6929             LDR      R1,[R5, #+16]
   \   00000278   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxmf=%d">`
   \   0000027C   0x.... 0x....      BL       S2w_Printf
   6291          	S2w_Printf("\r\nirxkf=%d",rxStats->st.irxkf);               
   \   00000280   0x6969             LDR      R1,[R5, #+20]
   \   00000282   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxkf=%d">`
   \   00000286   0x.... 0x....      BL       S2w_Printf
   6292          	S2w_Printf("\r\nirxicvf=%d",rxStats->st.irxicvf);             
   \   0000028A   0x69A9             LDR      R1,[R5, #+24]
   \   0000028C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxicvf=%d">`
   \   00000290   0x.... 0x....      BL       S2w_Printf
   6293          	S2w_Printf("\r\nirxtkipicvf=%d",rxStats->st.irxtkipicvf);         
   \   00000294   0x69E9             LDR      R1,[R5, #+28]
   \   00000296   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nirxtkipicvf=%d">`
   \   0000029A   0x.... 0x....      BL       S2w_Printf
   6294          	S2w_Printf("\r\nrxtkipmf=%d",rxStats->st.irxtkipmf);          
   \   0000029E   0x6A29             LDR      R1,[R5, #+32]
   \   000002A0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxtkipmf=%d">`
   \   000002A4   0x.... 0x....      BL       S2w_Printf
   6295          	S2w_Printf("\r\nrxrf=%d",rxStats->st.irxrf);               
   \   000002A8   0x6A69             LDR      R1,[R5, #+36]
   \   000002AA   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxrf=%d">`
   \   000002AE   0x.... 0x....      BL       S2w_Printf
   6296          	S2w_Printf("\r\nrxtkiprf=%d",rxStats->st.irxtkiprf);           
   \   000002B2   0x6AA9             LDR      R1,[R5, #+40]
   \   000002B4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxtkiprf=%d">`
   \   000002B8   0x.... 0x....      BL       S2w_Printf
   6297          	S2w_Printf("\r\nrxdip=%d",rxStats->st.irxdip);              
   \   000002BC   0x6AE9             LDR      R1,[R5, #+44]
   \   000002BE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxdip=%d">`
   \   000002C2   0x.... 0x....      BL       S2w_Printf
   6298          	S2w_Printf("\r\nrxdf=%d",rxStats->st.irxdf);               
   \   000002C6   0x6B29             LDR      R1,[R5, #+48]
   \   000002C8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxdf=%d">`
   \   000002CC   0x.... 0x....      BL       S2w_Printf
   6299          	S2w_Printf("\r\nrxex=%d",rxStats->st.irxex);               
   \   000002D0   0x6B69             LDR      R1,[R5, #+52]
   \   000002D2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrxex=%d">`
   \   000002D6   0x.... 0x....      BL       S2w_Printf
   6300          
   6301          	S2w_Printf("wep40=%d\r\nwep104=%d\r\ntkip=%d\r\nccmp:%d\r\nunencryp=%d\r\nukencryp=%d",
   6302          			 rxStats->cip_type.wep40,rxStats->cip_type.wep104,rxStats->cip_type.tkip,rxStats->cip_type.ccmp,
   6303          			 rxStats->cip_type.unencryp,rxStats->cip_type.ukencryp);
   \   000002DA   0x6CE8             LDR      R0,[R5, #+76]
   \   000002DC   0x9002             STR      R0,[SP, #+8]
   \   000002DE   0x6CA8             LDR      R0,[R5, #+72]
   \   000002E0   0x9001             STR      R0,[SP, #+4]
   \   000002E2   0x6C68             LDR      R0,[R5, #+68]
   \   000002E4   0x9000             STR      R0,[SP, #+0]
   \   000002E6   0x6C2B             LDR      R3,[R5, #+64]
   \   000002E8   0x6BEA             LDR      R2,[R5, #+60]
   \   000002EA   0x6BA9             LDR      R1,[R5, #+56]
   \   000002EC   0x.... 0x....      ADR.W    R0,`?<Constant "wep40=%d\\r\\nwep104=%d\\r\\n...">`
   \   000002F0   0x.... 0x....      BL       S2w_Printf
   6304          
   6305          	S2w_Printf("\r\nleg=");
   \   000002F4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nleg=">`
   \   000002F8   0x.... 0x....      BL       S2w_Printf
   6306          	for(i=0;i<14;i++)
   \   000002FC   0x2500             MOVS     R5,#+0
   6307          	{
   6308          		S2w_Printf("%d,%d:",rxStats->dr.leg[i][0],rxStats->dr.leg[i][1]);	 
   \                     ??AppS2wCmd_WlanStatsGet_8:
   \   000002FE   0xEB0B 0x00C5      ADD      R0,R11,R5, LSL #+3
   \   00000302   0x6D82             LDR      R2,[R0, #+88]
   \   00000304   0x6D41             LDR      R1,[R0, #+84]
   \   00000306   0x.... 0x....      BL       ?Subroutine6
   6309          	}											
   \                     ??CrossCallReturnLabel_26:
   \   0000030A   0x1C6D             ADDS     R5,R5,#+1
   \   0000030C   0x2D0E             CMP      R5,#+14
   \   0000030E   0xD3F6             BCC.N    ??AppS2wCmd_WlanStatsGet_8
   6310          	S2w_Printf("%d,%d",rxStats->dr.leg[15][0],rxStats->dr.leg[15][1]);	 
   \   00000310   0xF8DB 0x10CC      LDR      R1,[R11, #+204]
   \   00000314   0xF10B 0x05CC      ADD      R5,R11,#+204
   \   00000318   0x4640             MOV      R0,R8
   \   0000031A   0x686A             LDR      R2,[R5, #+4]
   \   0000031C   0x.... 0x....      BL       S2w_Printf
   6311          
   6312          	S2w_Printf("\r\nht20l=");
   \   00000320   0x.... 0x....      BL       ?Subroutine39
   6313          	for(i=0;i<(GSN_WLAN_MAX_MCS_SUPPORTED);i++)
   \                     ??CrossCallReturnLabel_289:
   \   00000324   0x2600             MOVS     R6,#+0
   6314          	{
   6315          		S2w_Printf("%d,%d:",rxStats->dr.ht20l[i][0],rxStats->dr.ht20l[i][1]);	 
   \                     ??AppS2wCmd_WlanStatsGet_9:
   \   00000326   0xEB0B 0x00C6      ADD      R0,R11,R6, LSL #+3
   \   0000032A   0xF8D0 0x20D8      LDR      R2,[R0, #+216]
   \   0000032E   0xF8D0 0x10D4      LDR      R1,[R0, #+212]
   \   00000332   0x.... 0x....      BL       ?Subroutine6
   6316          	}											
   \                     ??CrossCallReturnLabel_25:
   \   00000336   0x1C76             ADDS     R6,R6,#+1
   \   00000338   0x2E07             CMP      R6,#+7
   \   0000033A   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_9
   6317          	S2w_Printf("%d,%d",rxStats->dr.ht20l[GSN_WLAN_MAX_MCS_SUPPORTED][0],rxStats->dr.ht20l[GSN_WLAN_MAX_MCS_SUPPORTED][1]);	 
   \   0000033C   0x6C6A             LDR      R2,[R5, #+68]
   \   0000033E   0x6C29             LDR      R1,[R5, #+64]
   \   00000340   0x.... 0x....      BL       ?Subroutine2
   6318          
   6319          	S2w_Printf("\r\nht40l=");
   \                     ??CrossCallReturnLabel_8:
   \   00000344   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht40l=">`
   \   00000348   0x.... 0x....      BL       S2w_Printf
   6320          	for(i=0;i<(GSN_WLAN_MAX_MCS_SUPPORTED);i++)
   \   0000034C   0x2600             MOVS     R6,#+0
   6321          	{
   6322          		S2w_Printf("%d,%d:",rxStats->dr.ht40l[i][0],rxStats->dr.ht40l[i][1]); 
   \                     ??AppS2wCmd_WlanStatsGet_10:
   \   0000034E   0xEB0B 0x00C6      ADD      R0,R11,R6, LSL #+3
   \   00000352   0xF8D0 0x2158      LDR      R2,[R0, #+344]
   \   00000356   0xF8D0 0x1154      LDR      R1,[R0, #+340]
   \   0000035A   0x.... 0x....      BL       ?Subroutine6
   6323          	}											
   \                     ??CrossCallReturnLabel_24:
   \   0000035E   0x1C76             ADDS     R6,R6,#+1
   \   00000360   0x2E07             CMP      R6,#+7
   \   00000362   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_10
   6324          	S2w_Printf("%d,%d",rxStats->dr.ht40l[GSN_WLAN_MAX_MCS_SUPPORTED][0],rxStats->dr.ht40l[GSN_WLAN_MAX_MCS_SUPPORTED][1]); 
   \   00000364   0xF50B 0x76A6      ADD      R6,R11,#+332
   \   00000368   0x6C72             LDR      R2,[R6, #+68]
   \   0000036A   0x6C31             LDR      R1,[R6, #+64]
   \   0000036C   0x.... 0x....      BL       ?Subroutine2
   6325          
   6326          	S2w_Printf("\r\nht40s=");
   \                     ??CrossCallReturnLabel_7:
   \   00000370   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht40s=">`
   \   00000374   0x.... 0x....      BL       S2w_Printf
   6327          	for(i=0;i<(GSN_WLAN_MAX_MCS_SUPPORTED);i++)
   \   00000378   0x2500             MOVS     R5,#+0
   6328          	{
   6329          		S2w_Printf("%d,%d:",rxStats->dr.ht40s[i][0],rxStats->dr.ht40s[i][1]);		 
   \                     ??AppS2wCmd_WlanStatsGet_11:
   \   0000037A   0xEB0B 0x00C5      ADD      R0,R11,R5, LSL #+3
   \   0000037E   0xF8D0 0x2198      LDR      R2,[R0, #+408]
   \   00000382   0xF8D0 0x1194      LDR      R1,[R0, #+404]
   \   00000386   0x.... 0x....      BL       ?Subroutine6
   6330          	}				
   \                     ??CrossCallReturnLabel_23:
   \   0000038A   0x1C6D             ADDS     R5,R5,#+1
   \   0000038C   0x2D07             CMP      R5,#+7
   \   0000038E   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_11
   6331          	S2w_Printf("%d,%d",rxStats->dr.ht40s[GSN_WLAN_MAX_MCS_SUPPORTED],rxStats->dr.ht40s[GSN_WLAN_MAX_MCS_SUPPORTED][1]);		 
   \   00000390   0xF8DB 0x21D0      LDR      R2,[R11, #+464]
   \   00000394   0xF50B 0x71E6      ADD      R1,R11,#+460
   \   00000398   0x.... 0x....      BL       ?Subroutine2
   6332          	
   6333          	S2w_Printf("\r\nht20s=");
   \                     ??CrossCallReturnLabel_6:
   \   0000039C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nht20s=">`
   \   000003A0   0x.... 0x....      BL       S2w_Printf
   6334          	for(i=0;i<(GSN_WLAN_MAX_MCS_SUPPORTED);i++)
   \   000003A4   0x2500             MOVS     R5,#+0
   6335          	{
   6336          		S2w_Printf("%d,%d:",rxStats->dr.ht20s[i][0],rxStats->dr.ht20s[i][1]) ;	 
   \                     ??AppS2wCmd_WlanStatsGet_12:
   \   000003A6   0xEB0B 0x00C5      ADD      R0,R11,R5, LSL #+3
   \   000003AA   0xF8D0 0x2118      LDR      R2,[R0, #+280]
   \   000003AE   0xF8D0 0x1114      LDR      R1,[R0, #+276]
   \   000003B2   0x.... 0x....      BL       ?Subroutine6
   6337          	}	
   \                     ??CrossCallReturnLabel_22:
   \   000003B6   0x1C6D             ADDS     R5,R5,#+1
   \   000003B8   0x2D07             CMP      R5,#+7
   \   000003BA   0xD3F4             BCC.N    ??AppS2wCmd_WlanStatsGet_12
   6338          	S2w_Printf("%d,%d:",rxStats->dr.ht20s[GSN_WLAN_MAX_MCS_SUPPORTED][0],rxStats->dr.ht20s[GSN_WLAN_MAX_MCS_SUPPORTED][1]) ;	 
   \   000003BC   0x6872             LDR      R2,[R6, #+4]
   \   000003BE   0xF8DB 0x114C      LDR      R1,[R11, #+332]
   \   000003C2   0x.... 0x....      BL       ?Subroutine6
   6339          	
   6340          	S2w_Printf("\r\nmcs32s=%d,%d",rxStats->dr.mcs32s[0],rxStats->dr.mcs32s[1]);
   \                     ??CrossCallReturnLabel_21:
   \   000003C6   0xF50B 0x74E8      ADD      R4,R11,#+464
   \   000003CA   0x68A2             LDR      R2,[R4, #+8]
   \   000003CC   0x6861             LDR      R1,[R4, #+4]
   \   000003CE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmcs32s=%d,%d">`
   \   000003D2   0x.... 0x....      BL       S2w_Printf
   6341          	S2w_Printf("\r\nmcs32l=%d,%d",rxStats->dr.mcs32l[0],rxStats->dr.mcs32l[1]);
   \   000003D6   0x6922             LDR      R2,[R4, #+16]
   \   000003D8   0x68E1             LDR      R1,[R4, #+12]
   \   000003DA   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmcs32l=%d,%d">`
   \   000003DE   0x.... 0x....      BL       S2w_Printf
   6342          
   6343          	S2w_Printf("\r\nbcn=%d",rxStats->type.bcn);       
   \   000003E2   0x6961             LDR      R1,[R4, #+20]
   \   000003E4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nbcn=%d">`
   \   000003E8   0x.... 0x....      BL       S2w_Printf
   6344          	S2w_Printf("\r\nrts=%d",rxStats->type.rts);       
   \   000003EC   0x69A1             LDR      R1,[R4, #+24]
   \   000003EE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nrts=%d">`
   \   000003F2   0x.... 0x....      BL       S2w_Printf
   6345          	S2w_Printf("\r\ncts=%d",rxStats->type.cts);       
   \   000003F6   0x69E1             LDR      R1,[R4, #+28]
   \   000003F8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\ncts=%d">`
   \   000003FC   0x.... 0x....      BL       S2w_Printf
   6346          	S2w_Printf("\r\nack=%d",rxStats->type.ack);       
   \   00000400   0x6A21             LDR      R1,[R4, #+32]
   \   00000402   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nack=%d">`
   \   00000406   0x.... 0x....      BL       S2w_Printf
   6347          	S2w_Printf("\r\nprobersp=%d",rxStats->type.probersp);       
   \   0000040A   0x6A61             LDR      R1,[R4, #+36]
   \   0000040C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nprobersp=%d">`
   \   00000410   0x.... 0x....      BL       S2w_Printf
   6348          	S2w_Printf("\r\nprobereq=%d",rxStats->type.probereq);     
   \   00000414   0x6AA1             LDR      R1,[R4, #+40]
   \   00000416   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nprobereq=%d">`
   \   0000041A   0x.... 0x....      BL       S2w_Printf
   6349          	S2w_Printf("\r\natim=%d",rxStats->type.atim);
   \   0000041E   0x6AE1             LDR      R1,[R4, #+44]
   \   00000420   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\natim=%d">`
   \   00000424   0x.... 0x....      BL       S2w_Printf
   6350          	S2w_Printf("\r\ncfend=%d",rxStats->type.cfend);
   \   00000428   0x6B21             LDR      R1,[R4, #+48]
   \   0000042A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\ncfend=%d">`
   \   0000042E   0x.... 0x....      BL       S2w_Printf
   6351          	S2w_Printf("\r\nback=%d",rxStats->type.back);
   \   00000432   0x6B61             LDR      R1,[R4, #+52]
   \   00000434   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nback=%d">`
   \   00000438   0x.... 0x....      BL       S2w_Printf
   6352          	S2w_Printf("\r\nbar=%d",rxStats->type.bar);	
   \   0000043C   0x6BA1             LDR      R1,[R4, #+56]
   \   0000043E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nbar=%d">`
   \   00000442   0x.... 0x....      BL       S2w_Printf
   6353          	S2w_Printf("\r\nmc_data=%d",rxStats->type.mc_data);       
   \   00000446   0x6BE1             LDR      R1,[R4, #+60]
   \   00000448   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nmc_data=%d">`
   \   0000044C   0x.... 0x....      BL       S2w_Printf
   6354          	S2w_Printf("\r\nuc_data=%d",rxStats->type.uc_data);       
   \   00000450   0x6C21             LDR      R1,[R4, #+64]
   \   00000452   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nuc_data=%d">`
   \   00000456   0x.... 0x....      BL       S2w_Printf
   6355          	S2w_Printf("\r\noth_data=%d",rxStats->type.oth_data);
   \   0000045A   0x6C61             LDR      R1,[R4, #+68]
   \   0000045C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\noth_data=%d">`
   \   00000460   0x.... 0x....      BL       S2w_Printf
   6356          	S2w_Printf("\r\nqos_uc_data=%d",rxStats->type.qos_uc_data);     
   \   00000464   0x6CA1             LDR      R1,[R4, #+72]
   \   00000466   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nqos_uc_data=%d">`
   \   0000046A   0x.... 0x....      BL       S2w_Printf
   6357          	S2w_Printf("\r\nqos_mc_data=%d",rxStats->type.qos_mc_data);      
   \   0000046E   0x6CE1             LDR      R1,[R4, #+76]
   \   00000470   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nqos_mc_data=%d">`
   \   00000474   0x.... 0x....      BL       S2w_Printf
   6358          	S2w_Printf("\r\nqos_oth_data=%d",rxStats->type.qos_oth_data);     	
   \   00000478   0x6D21             LDR      R1,[R4, #+80]
   \   0000047A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nqos_oth_data=%d">`
   \   0000047E   0x.... 0x....      BL       S2w_Printf
   6359          	S2w_Printf("\r\namsdu_uc_data=%d",rxStats->type.amsdu_uc_data);       
   \   00000482   0x6D61             LDR      R1,[R4, #+84]
   \   00000484   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\namsdu_uc_data=%d">`
   \   00000488   0x.... 0x....      BL       S2w_Printf
   6360          	S2w_Printf("\r\namsdu_mc_data=%d",rxStats->type.amsdu_mc_data);       	
   \   0000048C   0x6DA1             LDR      R1,[R4, #+88]
   \   0000048E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\namsdu_mc_data=%d">`
   \   00000492   0x.... 0x....      BL       S2w_Printf
   6361          	S2w_Printf("\r\namsdu_oth_data=%d",rxStats->type.amsdu_oth_data);     
   \   00000496   0x6DE1             LDR      R1,[R4, #+92]
   \   00000498   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\namsdu_oth_data=%d">`
   \   0000049C   0x.... 0x....      BL       S2w_Printf
   6362          	S2w_Printf("\r\noth_mgmt=%d",rxStats->type.oth_mgmt);       
   \   000004A0   0x6E21             LDR      R1,[R4, #+96]
   \   000004A2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\noth_mgmt=%d">`
   \   000004A6   0x.... 0x....      BL       S2w_Printf
   6363          	S2w_Printf("\r\noth=%d",rxStats->type.oth_ctrl);       
   \   000004AA   0x6E61             LDR      R1,[R4, #+100]
   \   000004AC   0x4648             MOV      R0,R9
   \   000004AE   0x.... 0x....      BL       S2w_Printf
   6364          	S2w_Printf("\r\nctrl=%d",txStats->type.ctrl);       
   \   000004B2   0x6CB9             LDR      R1,[R7, #+72]
   \   000004B4   0x4650             MOV      R0,R10
   \   000004B6   0x.... 0x....      BL       S2w_Printf
   6365          	free(rxStats);	
   \   000004BA   0x4658             MOV      R0,R11
   \   000004BC   0x.... 0x....      BL       free
   6366          	return S2W_SUCCESS;
   \   000004C0   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_WlanStatsGet_7:
   \   000004C2   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   6367          	  
   6368          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000006   0x.... 0x....      B.W      GsnWdd_WlanStatsGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0x465B             MOV      R3,R11
   \   00000004   0x....             LDR.N    R0,??DataTable210_1
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      S2w_Printf
   6369          #if   defined(S2W_FS_SPI_ENABLE) || defined(S2W_FS_SPI_HI_ENABLE)
   6370          /**
   6371           ******************************************************************
   6372           * @ingroup S2w-Application
   6373           * @brief Process the AT+SPI Command.
   6374           * @param ptr Pointer to the user input string.
   6375           * @return status.
   6376           ******************************************************************/
   6377          PUBLIC UINT8
   6378          AppS2wCmd_SpiConfig(UINT8 *ptr)
   6379          {
   6380          
   6381             UINT8   clockPolarity;    /**< SPI clock polarity */
   6382             UINT8   clockPhase;       /**< SPI clock phase    */
   6383              UINT8   status = S2W_SUCCESS;
   6384             UINT8   *p=0;
   6385          
   6386              p = AppS2wParse_NextParamGet(&ptr);
   6387              if (!p)
   6388              {
   6389                  return S2W_EINVAL;
   6390              }
   6391          
   6392              status = AppS2wParse_Boolean(p, &clockPolarity);
   6393              if (status != S2W_SUCCESS)
   6394              {
   6395                  return status;
   6396              }
   6397          
   6398              p = AppS2wParse_NextParamGet(&ptr);
   6399             if (!p)
   6400              {
   6401                  return S2W_EINVAL;
   6402              }
   6403          
   6404              if (p)
   6405              {
   6406                  if (*p != '\0')
   6407                  {
   6408                      status = AppS2wParse_Boolean(p, &clockPhase);
   6409                      if (status != S2W_SUCCESS)
   6410                      {
   6411                          return status;
   6412                      }
   6413                  }
   6414                else
   6415                {
   6416                    return S2W_EINVAL;
   6417                }
   6418              }
   6419          
   6420          
   6421             if((clockPhase == (UINT8)(s2wCurrent.serialPortConf.conf.spi.clockPhase)) &&
   6422                (clockPolarity == (UINT8)(s2wCurrent.serialPortConf.conf.spi.clockPolarity)))
   6423             {/* already configured */
   6424                return S2W_SUCCESS;
   6425             }
   6426          
   6427             if(clockPhase != (UINT8)(s2wCurrent.serialPortConf.conf.spi.clockPhase))
   6428             {
   6429                /*Set the clock phase for data change on output */
   6430                s2wCurrent.serialPortConf.conf.spi.clockPhase = (GSN_SPI_CLOCKPHASE_T)clockPhase ;
   6431             }
   6432          
   6433             if(clockPolarity != (UINT8)(s2wCurrent.serialPortConf.conf.spi.clockPolarity))
   6434             {
   6435                /*Set the new clock polarity */
   6436                s2wCurrent.serialPortConf.conf.spi.clockPolarity = (GSN_SPI_CLOCKPOLARITY_T)clockPolarity;
   6437          
   6438             }
   6439          
   6440             return status;
   6441          
   6442          }
   6443          #endif
   6444          
   6445          
   6446          

   \                                 In section .text, align 2, keep-with-next
   6447          UINT8
   6448          AppS2wCmd_WlanOtpRead (UINT8 *ptr)
   6449          {
   \                     AppS2wCmd_WlanOtpRead:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB0C4             SUB      SP,SP,#+272
   6450          	UINT8 status;;
   6451          	UINT32 temp = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9001             STR      R0,[SP, #+4]
   6452          	UINT8 *p;
   6453                  UINT8 otpGrpId, otpGrpVer;
   6454          	UINT8 data[255] ={0};
   \   0000000A   0xF44F 0x7180      MOV      R1,#+256
   \   0000000E   0xA803             ADD      R0,SP,#+12
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
   6455                  UINT16 dataLen=255;
   \   00000014   0x20FF             MOVS     R0,#+255
   \   00000016   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   6456          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000001A   0xA844             ADD      R0,SP,#+272
   \   0000001C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   6457          	if(!p)
   \   00000020   0xB1C8             CBZ.N    R0,??AppS2wCmd_WlanOtpRead_0
   6458          	{
   6459          		return S2W_EINVAL;
   6460          	}
   6461          	status = AppS2wParse_Int(p, &temp);
   \   00000022   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_225:
   \   00000026   0xEA5F 0x0800      MOVS     R8,R0
   6462          	if ((status != S2W_SUCCESS) ||(temp > 255))
   \   0000002A   0xD114             BNE.N    ??AppS2wCmd_WlanOtpRead_0
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0x28FF             CMP      R0,#+255
   \   00000030   0xD811             BHI.N    ??AppS2wCmd_WlanOtpRead_0
   6463          	{
   6464          		return S2W_EINVAL;
   6465          	}
   6466          	otpGrpId = temp;
   \   00000032   0x4605             MOV      R5,R0
   6467          
   6468              // version
   6469              otpGrpVer = GSN_OTP_MM_VER_UNKNOWN ;
   \   00000034   0x2610             MOVS     R6,#+16
   6470          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000036   0xA844             ADD      R0,SP,#+272
   \   00000038   0x.... 0x....      BL       AppS2wParse_NextParamGet
   6471          
   6472              if((p) && (*p != '\0'))
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xBF1C             ITT      NE 
   \   00000040   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000042   0x2900             CMPNE    R1,#+0
   \   00000044   0xD00A             BEQ.N    ??AppS2wCmd_WlanOtpRead_1
   6473              {
   6474          	status = AppS2wParse_Int(p, &temp);
   \   00000046   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_224:
   \   0000004A   0xEA5F 0x0800      MOVS     R8,R0
   6475          	if ((status != S2W_SUCCESS) ||(temp > 255))
   \   0000004E   0xD102             BNE.N    ??AppS2wCmd_WlanOtpRead_0
   \   00000050   0x9801             LDR      R0,[SP, #+4]
   \   00000052   0x28FF             CMP      R0,#+255
   \   00000054   0xD901             BLS.N    ??AppS2wCmd_WlanOtpRead_2
   6476          	{
   6477          		    return S2W_EINVAL;
   \                     ??AppS2wCmd_WlanOtpRead_0:
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE02A             B.N      ??AppS2wCmd_WlanOtpRead_3
   6478          	}
   6479          	otpGrpVer = temp;
   \                     ??AppS2wCmd_WlanOtpRead_2:
   \   0000005A   0x4606             MOV      R6,R0
   6480          	}
   6481          
   6482              if(GSN_SUCCESS != GsnSysCtl_OtpReadReq(&s2wappMainTaskCtxt->sysCtlCtx,otpGrpId,otpGrpVer,
   6483                                            data,&dataLen))
   \                     ??AppS2wCmd_WlanOtpRead_1:
   \   0000005C   0xA802             ADD      R0,SP,#+8
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0xAB03             ADD      R3,SP,#+12
   \   00000062   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_336:
   \   00000066   0xB2F2             UXTB     R2,R6
   \   00000068   0xB2E9             UXTB     R1,R5
   \   0000006A   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000006E   0x.... 0x....      BL       GsnSysCtl_OtpReadReq
   \   00000072   0xB108             CBZ.N    R0,??AppS2wCmd_WlanOtpRead_4
   6484              {
   6485                  return S2W_FAILURE;
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE01B             B.N      ??AppS2wCmd_WlanOtpRead_3
   6486              }
   6487              else
   6488              {
   6489          		UINT8 k=0;
   6490          		for(k=0;(k<(dataLen/GSN_OTP_NUM_BYTES_PER_WORD ));k++)
   \                     ??AppS2wCmd_WlanOtpRead_4:
   \   00000078   0x2500             MOVS     R5,#+0
   \   0000007A   0x.... 0x....      ADR.W    R6,`?<Constant "%02x">`
   \   0000007E   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\n0x">`
   \   00000082   0xE008             B.N      ??AppS2wCmd_WlanOtpRead_5
   6491          		{
   6492          	UINT8 i =0;
   6493                      S2w_Printf("\r\n0x");
   6494                      for(i=(8+k*8);i>(k*8);i--)
   6495                  {
   6496                         S2w_Printf("%02x",data[i-1]);
   \                     ??AppS2wCmd_WlanOtpRead_6:
   \   00000084   0xA903             ADD      R1,SP,#+12
   \   00000086   0x.... 0x....      BL       ?Subroutine38
   6497          		    }
   \                     ??CrossCallReturnLabel_288:
   \   0000008A   0x1E64             SUBS     R4,R4,#+1
   \                     ??AppS2wCmd_WlanOtpRead_7:
   \   0000008C   0xB2E4             UXTB     R4,R4
   \   0000008E   0x42A7             CMP      R7,R4
   \   00000090   0xDBF8             BLT.N    ??AppS2wCmd_WlanOtpRead_6
   \   00000092   0x1C6D             ADDS     R5,R5,#+1
   \   00000094   0xB2ED             UXTB     R5,R5
   \                     ??AppS2wCmd_WlanOtpRead_5:
   \   00000096   0xF8BD 0x0008      LDRH     R0,[SP, #+8]
   \   0000009A   0xEBB5 0x0FD0      CMP      R5,R0, LSR #+3
   \   0000009E   0xDA06             BGE.N    ??AppS2wCmd_WlanOtpRead_8
   \   000000A0   0x4648             MOV      R0,R9
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   \   000000A6   0x00EF             LSLS     R7,R5,#+3
   \   000000A8   0xF107 0x0408      ADD      R4,R7,#+8
   \   000000AC   0xE7EE             B.N      ??AppS2wCmd_WlanOtpRead_7
   6498          	}
   6499              }
   6500              return status;
   \                     ??AppS2wCmd_WlanOtpRead_8:
   \   000000AE   0x4640             MOV      R0,R8
   \                     ??AppS2wCmd_WlanOtpRead_3:
   \   000000B0   0xB045             ADD      SP,SP,#+276
   \   000000B2   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   6501          }
   6502          

   \                                 In section .text, align 2, keep-with-next
   6503          UINT8
   6504          AppS2wCmd_AppOtpRead (UINT8 *ptr)
   6505          {
   \                     AppS2wCmd_AppOtpRead:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB0C2             SUB      SP,SP,#+264
   6506          	UINT8 status;;
   6507          	UINT32 temp = 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   6508          	UINT8 *p;
   6509              UINT8 otpGrpId, otpGrpVer;
   6510          	UINT8 data[255] ={0};
   \   0000000A   0xF44F 0x7180      MOV      R1,#+256
   \   0000000E   0xA802             ADD      R0,SP,#+8
   \   00000010   0x.... 0x....      BL       __aeabi_memclr4
   6511              UINT16 dataLen=0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   6512          
   6513              //id
   6514          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000001A   0xA842             ADD      R0,SP,#+264
   \   0000001C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   6515          	if(!p)
   \   00000020   0xB1C8             CBZ.N    R0,??AppS2wCmd_AppOtpRead_0
   6516          	{
   6517          		return S2W_EINVAL;
   6518          	}
   6519          	status = AppS2wParse_Int(p, &temp);
   \   00000022   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_166:
   \   00000026   0xEA5F 0x0800      MOVS     R8,R0
   6520          	if ((status != S2W_SUCCESS) ||(temp > 255))
   \   0000002A   0xD114             BNE.N    ??AppS2wCmd_AppOtpRead_0
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0x28FF             CMP      R0,#+255
   \   00000030   0xD811             BHI.N    ??AppS2wCmd_AppOtpRead_0
   6521          	{
   6522          		return S2W_EINVAL;
   6523          	}
   6524          	otpGrpId = temp;
   \   00000032   0x4605             MOV      R5,R0
   6525          
   6526              // version
   6527              otpGrpVer = GSN_OTP_MM_VER_UNKNOWN ;
   \   00000034   0x2610             MOVS     R6,#+16
   6528          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000036   0xA842             ADD      R0,SP,#+264
   \   00000038   0x.... 0x....      BL       AppS2wParse_NextParamGet
   6529          
   6530              if((p) && (*p != '\0'))
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xBF1C             ITT      NE 
   \   00000040   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000042   0x2900             CMPNE    R1,#+0
   \   00000044   0xD00A             BEQ.N    ??AppS2wCmd_AppOtpRead_1
   6531              {
   6532          	status = AppS2wParse_Int(p, &temp);
   \   00000046   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_165:
   \   0000004A   0xEA5F 0x0800      MOVS     R8,R0
   6533          	if ((status != S2W_SUCCESS) ||(temp > 255))
   \   0000004E   0xD102             BNE.N    ??AppS2wCmd_AppOtpRead_0
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0x28FF             CMP      R0,#+255
   \   00000054   0xD901             BLS.N    ??AppS2wCmd_AppOtpRead_2
   6534          	{
   6535          		    return S2W_EINVAL;
   \                     ??AppS2wCmd_AppOtpRead_0:
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE025             B.N      ??AppS2wCmd_AppOtpRead_3
   6536          	}
   6537          	otpGrpVer = temp;
   \                     ??AppS2wCmd_AppOtpRead_2:
   \   0000005A   0x4606             MOV      R6,R0
   6538          	}
   6539              if(GSN_SUCCESS != GsnOtpMm_Read(otpGrpId,otpGrpVer,
   6540                                            &dataLen, data))
   \                     ??AppS2wCmd_AppOtpRead_1:
   \   0000005C   0xAB02             ADD      R3,SP,#+8
   \   0000005E   0xAA01             ADD      R2,SP,#+4
   \   00000060   0xB2F1             UXTB     R1,R6
   \   00000062   0xB2E8             UXTB     R0,R5
   \   00000064   0x.... 0x....      BL       GsnOtpMm_Read
   \   00000068   0xB108             CBZ.N    R0,??AppS2wCmd_AppOtpRead_4
   6541              {
   6542                  return S2W_FAILURE;
   \   0000006A   0x2001             MOVS     R0,#+1
   \   0000006C   0xE01B             B.N      ??AppS2wCmd_AppOtpRead_3
   6543              }
   6544              else
   6545              {
   6546                  UINT8 k=0;
   6547                  for(k=0;(k<(dataLen/GSN_OTP_NUM_BYTES_PER_WORD ));k++)
   \                     ??AppS2wCmd_AppOtpRead_4:
   \   0000006E   0x2500             MOVS     R5,#+0
   \   00000070   0x.... 0x....      ADR.W    R6,`?<Constant "%02x">`
   \   00000074   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\n0x">`
   \   00000078   0xE008             B.N      ??AppS2wCmd_AppOtpRead_5
   6548          		{
   6549          	UINT8 i =0;
   6550                      S2w_Printf("\r\n0x");
   6551                      for(i=(8+k*8);i>(k*8);i--)
   6552                  {
   6553                         S2w_Printf("%02x",data[i-1]);
   \                     ??AppS2wCmd_AppOtpRead_6:
   \   0000007A   0xA902             ADD      R1,SP,#+8
   \   0000007C   0x.... 0x....      BL       ?Subroutine38
   6554          	        }
   \                     ??CrossCallReturnLabel_287:
   \   00000080   0x1E64             SUBS     R4,R4,#+1
   \                     ??AppS2wCmd_AppOtpRead_7:
   \   00000082   0xB2E4             UXTB     R4,R4
   \   00000084   0x42A7             CMP      R7,R4
   \   00000086   0xDBF8             BLT.N    ??AppS2wCmd_AppOtpRead_6
   \   00000088   0x1C6D             ADDS     R5,R5,#+1
   \   0000008A   0xB2ED             UXTB     R5,R5
   \                     ??AppS2wCmd_AppOtpRead_5:
   \   0000008C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000090   0xEBB5 0x0FD0      CMP      R5,R0, LSR #+3
   \   00000094   0xDA06             BGE.N    ??AppS2wCmd_AppOtpRead_8
   \   00000096   0x4648             MOV      R0,R9
   \   00000098   0x.... 0x....      BL       S2w_Printf
   \   0000009C   0x00EF             LSLS     R7,R5,#+3
   \   0000009E   0xF107 0x0408      ADD      R4,R7,#+8
   \   000000A2   0xE7EE             B.N      ??AppS2wCmd_AppOtpRead_7
   6555          	}
   6556              }
   6557              return status;
   \                     ??AppS2wCmd_AppOtpRead_8:
   \   000000A4   0x4640             MOV      R0,R8
   \                     ??AppS2wCmd_AppOtpRead_3:
   \   000000A6   0xB043             ADD      SP,SP,#+268
   \   000000A8   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   6558          }
   6559          
   6560          
   6561          

   \                                 In section .text, align 2, keep-with-next
   6562          UINT8
   6563          AppS2wCmd_SetAssocTimeout(UINT8 *ptr)
   6564          {
   \                     AppS2wCmd_SetAssocTimeout:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   6565          	UINT32 temp = 0, timeout = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x9001             STR      R0,[SP, #+4]
   6566          	UINT8 *p;
   6567          	UINT8 status;
   6568          	p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000000A   0x.... 0x....      BL       ??Subroutine7_0
   6569          	if(!p)
   \                     ??CrossCallReturnLabel_36:
   \   0000000E   0xB1B0             CBZ.N    R0,??AppS2wCmd_SetAssocTimeout_0
   6570          	{
   6571          		return S2W_EINVAL;
   6572          	}
   6573          	status = AppS2wParse_Int(p, &temp);
   6574          	if(status != S2W_SUCCESS)
   \   00000010   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_164:
   \   00000014   0xB998             CBNZ.N   R0,??AppS2wCmd_SetAssocTimeout_0
   6575          	{
   6576          		return S2W_EINVAL;
   6577          	}
   6578          	if(1 == temp)
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD10E             BNE.N    ??AppS2wCmd_SetAssocTimeout_1
   6579          	{
   6580          		p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000001C   0x.... 0x....      BL       ??Subroutine7_0
   6581          		if(!p)
   \                     ??CrossCallReturnLabel_35:
   \   00000020   0xB168             CBZ.N    R0,??AppS2wCmd_SetAssocTimeout_0
   6582          		{
   6583          			return S2W_EINVAL;
   6584          		}
   6585          		status = AppS2wParse_Int(p, &timeout);
   6586          		if(status != S2W_SUCCESS)
   \   00000022   0x.... 0x....      BL       ?Subroutine19
   6587          		{
   6588          			return S2W_EINVAL;
   6589          		}
   6590          	}
   \                     ??CrossCallReturnLabel_223:
   \   00000026   0xB950             CBNZ.N   R0,??AppS2wCmd_SetAssocTimeout_0
   6591          	else if(0 != temp)
   6592          	{
   6593          		return S2W_EINVAL;
   6594          	}
   6595              s2wCurrent.assocConf.enableAssocConf = temp;
   \                     ??AppS2wCmd_SetAssocTimeout_2:
   \   00000028   0x....             LDR.N    R0,??DataTable210_2
   \   0000002A   0x9900             LDR      R1,[SP, #+0]
   \   0000002C   0xF8C0 0x13B4      STR      R1,[R0, #+948]
   6596              s2wCurrent.assocConf.assocTimeout = timeout;
   \   00000030   0x9901             LDR      R1,[SP, #+4]
   \   00000032   0xF8C0 0x13B8      STR      R1,[R0, #+952]
   6597          
   6598              return S2W_SUCCESS;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xBD0E             POP      {R1-R3,PC}       ;; return
   \                     ??AppS2wCmd_SetAssocTimeout_1:
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD0F4             BEQ.N    ??AppS2wCmd_SetAssocTimeout_2
   \                     ??AppS2wCmd_SetAssocTimeout_0:
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0xBD0E             POP      {R1-R3,PC}
   6599          
   6600          }
   6601          

   \                                 In section .text, align 2, keep-with-next
   6602          UINT8
   6603          AppS2wCmd_HwCryptoEn(UINT8 *ptr)
   6604          {
   \                     AppS2wCmd_HwCryptoEn:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   6605              UINT8 *p, enable, status;
   6606          
   6607              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine7_0
   6608              if(!p)
   \                     ??CrossCallReturnLabel_34:
   \   00000008   0xB118             CBZ.N    R0,??AppS2wCmd_HwCryptoEn_0
   6609              {
   6610                  return S2W_EINVAL;
   6611              }
   6612              status = AppS2wParse_Boolean(p, &enable);
   6613              if(status != S2W_SUCCESS)
   \   0000000A   0xA900             ADD      R1,SP,#+0
   \   0000000C   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000010   0xB108             CBZ.N    R0,??AppS2wCmd_HwCryptoEn_1
   6614              {
   6615                  return S2W_EINVAL;
   \                     ??AppS2wCmd_HwCryptoEn_0:
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xBD0E             POP      {R1-R3,PC}
   6616              }
   6617          
   6618              if(enable)
   \                     ??AppS2wCmd_HwCryptoEn_1:
   \   00000016   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001A   0xB120             CBZ.N    R0,??AppS2wCmd_HwCryptoEn_2
   6619              {
   6620                  GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
   \   0000001C   0x....             LDR.N    R0,??DataTable210_3  ;; 0x41010018
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       GsnHeIf_DriverInit
   \   00000024   0xE001             B.N      ??AppS2wCmd_HwCryptoEn_3
   6621              }
   6622              else
   6623              {
   6624                  GsnHeIf_DriverSuspend();
   \                     ??AppS2wCmd_HwCryptoEn_2:
   \   00000026   0x.... 0x....      BL       GsnHeIf_DriverSuspend
   6625              }
   6626              return S2W_SUCCESS;
   \                     ??AppS2wCmd_HwCryptoEn_3:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0xBD0E             POP      {R1-R3,PC}       ;; return
   6627          }
   6628          

   \                                 In section .text, align 2, keep-with-next
   6629          UINT8
   6630          AppS2wCmd_GratArpSend(UINT8 *ptr)
   6631          {
   \                     AppS2wCmd_GratArpSend:
   \   00000000   0xB580             PUSH     {R7,LR}
   6632             
   6633              nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,NULL);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_337:
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000000C   0x.... 0x....      BL       _nxe_arp_gratuitous_send
   6634              return S2W_SUCCESS;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
   6635          }
   6636          
   6637          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   6638          

   \                                 In section .bss, align 4
   6639          S2W_SSL_CONF_T s2wSslConf = {0};
   \                     s2wSslConf:
   \   00000000                      DS8 8
   6640          

   \                                 In section .text, align 2, keep-with-next
   6641          UINT8
   6642          AppS2wCmd_SslConfig(UINT8 *ptr)
   6643          {
   \                     AppS2wCmd_SslConfig:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   6644              UINT8 *p, status;
   6645              UINT32 temp = 0, bufLen = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   6646          
   6647              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000000A   0x.... 0x....      BL       ??Subroutine7_0
   6648              if(!p)
   \                     ??CrossCallReturnLabel_33:
   \   0000000E   0xB158             CBZ.N    R0,??AppS2wCmd_SslConfig_0
   6649              {
   6650                  return S2W_EINVAL;
   6651              }
   6652          	status = AppS2wParse_Int(p, &temp);
   6653          	if(status != S2W_SUCCESS)
   \   00000010   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_222:
   \   00000014   0xB940             CBNZ.N   R0,??AppS2wCmd_SslConfig_0
   6654          	{
   6655          		return S2W_EINVAL;
   6656          	}
   6657          	if(1 == temp)
   \   00000016   0x9801             LDR      R0,[SP, #+4]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD10A             BNE.N    ??AppS2wCmd_SslConfig_1
   6658          	{
   6659          		p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000001C   0x.... 0x....      BL       ??Subroutine7_0
   6660          		if(!p)
   \                     ??CrossCallReturnLabel_32:
   \   00000020   0xB110             CBZ.N    R0,??AppS2wCmd_SslConfig_0
   6661          		{
   6662          			return S2W_EINVAL;
   6663          		}
   6664          		status = AppS2wParse_Int(p, &bufLen);
   6665          		if(status != S2W_SUCCESS)
   \   00000022   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_163:
   \   00000026   0xB108             CBZ.N    R0,??AppS2wCmd_SslConfig_2
   6666          		{
   6667          			return S2W_EINVAL;
   \                     ??AppS2wCmd_SslConfig_0:
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xBD0E             POP      {R1-R3,PC}
   6668          		}
   6669          		s2wSslConf.dnsBufferLen = bufLen;
   \                     ??AppS2wCmd_SslConfig_2:
   \   0000002C   0x....             LDR.N    R0,??DataTable210_4
   \   0000002E   0x9900             LDR      R1,[SP, #+0]
   \   00000030   0x6001             STR      R1,[R0, #+0]
   6670          
   6671          	}
   6672              return S2W_SUCCESS;
   \                     ??AppS2wCmd_SslConfig_1:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD0E             POP      {R1-R3,PC}       ;; return
   6673          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable147:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable149:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable152:
   \   00000000   0x32 0x30          DC8      "200"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable153:
   \   00000000   0x0A 0x00          DC8      "\n",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158:
   \   00000000   0x25 0x78          DC8      "%x "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable158_1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant " ">`:
   \   00000000   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "200">`:
   \   00000000   0x32 0x30          DC8 "200"
   \              0x30 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\n">`:
   \   00000000   0x0A 0x00          DC8 "\012"

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNo of packets recei...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012No of packets received = %d\015\012"
   \              0x4E 0x6F    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of bytes received ...">`:
   \   00000000   0x4E 0x6F          DC8 "No of bytes received = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received with CRC Errors = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x77    
   \              0x69 0x74    
   \              0x68 0x20    
   \              0x43 0x52    
   \              0x43 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x73    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_1`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 77H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x77    
   \   00000018   0x69 0x74          DC8 69H, 74H, 68H, 20H, 53H, 65H, 63H, 75H
   \              0x68 0x20    
   \              0x53 0x65    
   \              0x63 0x75    
   \   00000020   0x72 0x69          DC8 72H, 69H, 74H, 79H, 20H, 45H, 72H, 72H
   \              0x74 0x79    
   \              0x20 0x45    
   \              0x72 0x72    
   \   00000028   0x6F 0x72          DC8 6FH, 72H, 73H, 20H, 3DH, 20H, 25H, 64H
   \              0x73 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of duplicate packe...">`:
   \   00000000   0x4E 0x6F          DC8 "No of duplicate packets received = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x64 0x75    
   \              0x70 0x6C    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of header errors r...">`:
   \   00000000   0x4E 0x6F          DC8 "No of header errors received = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x68 0x65    
   \              0x61 0x64    
   \              0x65 0x72    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Average RSSI of the r...">`:
   \   00000000   0x41 0x76          DC8 "Average RSSI of the received packets = %d\015\012"
   \              0x65 0x72    
   \              0x61 0x67    
   \              0x65 0x20    
   \              0x52 0x53    
   \              0x53 0x49    
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x74 0x68    
   \              0x65 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x70    
   \              0x61 0x63    
   \              0x6B 0x65    
   \              0x74 0x73    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " No of packets receiv...">`:
   \   00000000   0x20 0x4E          DC8 20H, 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H
   \              0x6F 0x20    
   \              0x6F 0x66    
   \              0x20 0x70    
   \   00000008   0x61 0x63          DC8 61H, 63H, 6BH, 65H, 74H, 73H, 20H, 72H
   \              0x6B 0x65    
   \              0x74 0x73    
   \              0x20 0x72    
   \   00000010   0x65 0x63          DC8 65H, 63H, 65H, 69H, 76H, 65H, 64H, 20H
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \   00000018   0x61 0x74          DC8 61H, 74H, 20H, 31H, 4DH, 20H, 61H, 6EH
   \              0x20 0x31    
   \              0x4D 0x20    
   \              0x61 0x6E    
   \   00000020   0x64 0x20          DC8 64H, 20H, 4CH, 6FH, 6EH, 67H, 20H, 50H
   \              0x4C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x50    
   \   00000028   0x72 0x65          DC8 72H, 65H, 61H, 6DH, 62H, 6CH, 65H, 20H
   \              0x61 0x6D    
   \              0x62 0x6C    
   \              0x65 0x20    
   \   00000030   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " No of packets receiv...">_1`:
   \   00000000   0x20 0x4E          DC8 20H, 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H
   \              0x6F 0x20    
   \              0x6F 0x66    
   \              0x20 0x70    
   \   00000008   0x61 0x63          DC8 61H, 63H, 6BH, 65H, 74H, 73H, 20H, 72H
   \              0x6B 0x65    
   \              0x74 0x73    
   \              0x20 0x72    
   \   00000010   0x65 0x63          DC8 65H, 63H, 65H, 69H, 76H, 65H, 64H, 20H
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \   00000018   0x61 0x74          DC8 61H, 74H, 20H, 32H, 4DH, 20H, 61H, 6EH
   \              0x20 0x32    
   \              0x4D 0x20    
   \              0x61 0x6E    
   \   00000020   0x64 0x20          DC8 64H, 20H, 4CH, 6FH, 6EH, 67H, 20H, 50H
   \              0x4C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x50    
   \   00000028   0x72 0x65          DC8 72H, 65H, 61H, 6DH, 62H, 6CH, 65H, 20H
   \              0x61 0x6D    
   \              0x62 0x6C    
   \              0x65 0x20    
   \   00000030   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_2`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x20          DC8 74H, 20H, 35H, 4DH, 20H, 61H, 6EH, 64H
   \              0x35 0x4D    
   \              0x20 0x61    
   \              0x6E 0x64    
   \   00000020   0x20 0x4C          DC8 20H, 4CH, 6FH, 6EH, 67H, 20H, 50H, 72H
   \              0x6F 0x6E    
   \              0x67 0x20    
   \              0x50 0x72    
   \   00000028   0x65 0x61          DC8 65H, 61H, 6DH, 62H, 6CH, 65H, 20H, 3DH
   \              0x6D 0x62    
   \              0x6C 0x65    
   \              0x20 0x3D    
   \   00000030   0x20 0x25          DC8 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_3`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x20          DC8 74H, 20H, 31H, 31H, 4DH, 20H, 61H, 6EH
   \              0x31 0x31    
   \              0x4D 0x20    
   \              0x61 0x6E    
   \   00000020   0x64 0x20          DC8 64H, 20H, 4CH, 6FH, 6EH, 67H, 20H, 50H
   \              0x4C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x50    
   \   00000028   0x72 0x65          DC8 72H, 65H, 61H, 6DH, 62H, 6CH, 65H, 20H
   \              0x61 0x6D    
   \              0x62 0x6C    
   \              0x65 0x20    
   \   00000030   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_4`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x20          DC8 74H, 20H, 32H, 4DH, 20H, 61H, 6EH, 64H
   \              0x32 0x4D    
   \              0x20 0x61    
   \              0x6E 0x64    
   \   00000020   0x20 0x53          DC8 20H, 53H, 68H, 6FH, 72H, 74H, 20H, 50H
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x50    
   \   00000028   0x72 0x65          DC8 72H, 65H, 61H, 6DH, 62H, 6CH, 65H, 20H
   \              0x61 0x6D    
   \              0x62 0x6C    
   \              0x65 0x20    
   \   00000030   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_5`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x20          DC8 74H, 20H, 35H, 4DH, 20H, 61H, 6EH, 64H
   \              0x35 0x4D    
   \              0x20 0x61    
   \              0x6E 0x64    
   \   00000020   0x20 0x53          DC8 20H, 53H, 68H, 6FH, 72H, 74H, 20H, 50H
   \              0x68 0x6F    
   \              0x72 0x74    
   \              0x20 0x50    
   \   00000028   0x72 0x65          DC8 72H, 65H, 61H, 6DH, 62H, 6CH, 65H, 20H
   \              0x61 0x6D    
   \              0x62 0x6C    
   \              0x65 0x20    
   \   00000030   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_6`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x20          DC8 74H, 20H, 31H, 31H, 4DH, 20H, 61H, 6EH
   \              0x31 0x31    
   \              0x4D 0x20    
   \              0x61 0x6E    
   \   00000020   0x64 0x20          DC8 64H, 20H, 53H, 68H, 6FH, 72H, 74H, 20H
   \              0x53 0x68    
   \              0x6F 0x72    
   \              0x74 0x20    
   \   00000028   0x50 0x72          DC8 50H, 72H, 65H, 61H, 6DH, 62H, 6CH, 65H
   \              0x65 0x61    
   \              0x6D 0x62    
   \              0x6C 0x65    
   \   00000030   0x20 0x3D          DC8 20H, 3DH, 20H, 25H, 64H, 0DH, 0AH, 0
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_7`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 6M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x36 0x4D    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_8`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 9M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x39 0x4D    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_9`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 12M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x31 0x32    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_10`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 18M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x31 0x38    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_11`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 24M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x32 0x34    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_12`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 36M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x33 0x36    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_13`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 48M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x34 0x38    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_14`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received at 54M = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \              0x74 0x20    
   \              0x35 0x34    
   \              0x4D 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_15`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x72          DC8 74H, 72H, 65H, 73H, 70H, 65H, 63H, 74H
   \              0x65 0x73    
   \              0x70 0x65    
   \              0x63 0x74    
   \   00000020   0x69 0x76          DC8 69H, 76H, 65H, 20H, 4DH, 43H, 53H, 20H
   \              0x65 0x20    
   \              0x4D 0x43    
   \              0x53 0x20    
   \   00000028   0x49 0x6E          DC8 49H, 6EH, 64H, 65H, 78H, 20H, 77H, 69H
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x77 0x69    
   \   00000030   0x74 0x68          DC8 74H, 68H, 20H, 53H, 68H, 6FH, 72H, 74H
   \              0x20 0x53    
   \              0x68 0x6F    
   \              0x72 0x74    
   \   00000038   0x20 0x47          DC8 20H, 47H, 49H, 3DH, 0DH, 0AH, 0
   \              0x49 0x3D    
   \              0x0D 0x0A    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">_16`:
   \   00000000   0x4E 0x6F          DC8 4EH, 6FH, 20H, 6FH, 66H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \   00000008   0x63 0x6B          DC8 63H, 6BH, 65H, 74H, 73H, 20H, 72H, 65H
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \   00000010   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 61H
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x61    
   \   00000018   0x74 0x72          DC8 74H, 72H, 65H, 73H, 70H, 65H, 63H, 74H
   \              0x65 0x73    
   \              0x70 0x65    
   \              0x63 0x74    
   \   00000020   0x69 0x76          DC8 69H, 76H, 65H, 20H, 4DH, 43H, 53H, 20H
   \              0x65 0x20    
   \              0x4D 0x43    
   \              0x53 0x20    
   \   00000028   0x49 0x6E          DC8 49H, 6EH, 64H, 65H, 78H, 20H, 77H, 69H
   \              0x64 0x65    
   \              0x78 0x20    
   \              0x77 0x69    
   \   00000030   0x74 0x68          DC8 74H, 68H, 20H, 4CH, 6FH, 6EH, 67H, 20H
   \              0x20 0x4C    
   \              0x6F 0x6E    
   \              0x67 0x20    
   \   00000038   0x47 0x49          DC8 47H, 49H, 20H, 3DH, 20H, 0DH, 0AH, 0
   \              0x20 0x3D    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Calibration Info:\\r\\n">`:
   \   00000000   0x43 0x61          DC8 "Calibration Info:\015\012"
   \              0x6C 0x69    
   \              0x62 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x3A 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "status = %s\\r\\n">`:
   \   00000000   0x73 0x74          DC8 "status = %s\015\012"
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SUCCESS">`:
   \   00000000   0x53 0x55          DC8 "SUCCESS"
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FAIL">`:
   \   00000000   0x46 0x41          DC8 "FAIL"
   \              0x49 0x4C    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Length = %d\\r\\n">`:
   \   00000000   0x4C 0x65          DC8 "Length = %d\015\012"
   \              0x6E 0x67    
   \              0x74 0x68    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Data:\\r\\n\\r\\n">`:
   \   00000000   0x44 0x61          DC8 "Data:\015\012\015\012"
   \              0x74 0x61    
   \              0x3A 0x0D    
   \              0x0A 0x0D    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160:
   \   00000000   0x40160200         DC32     0x40160200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160_1:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160_2:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable160_3:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n ModType:%d\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 ModType:%d\015\012"
   \              0x20 0x4D    
   \              0x6F 0x64    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161:
   \   00000000   0x25 0x78          DC8      "%x "
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161_1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161_2:
   \   00000000   0x........         DC32     App_XmlParserCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable161_3:
   \   00000000   0x8000000C         DC32     0x8000000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162:
   \   00000000   0x80000004         DC32     0x80000004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_1:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_2:
   \   00000000   0x........         DC32     AppS2w_XmlRxBufferMgmtCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_3:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_4:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_5:
   \   00000000   0x........         DC32     `?<Constant "%c%c%x%04d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_6:
   \   00000000   0x........         DC32     appCtx+0xEE0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable162_7:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_CA">`:
   \   00000000   0x53 0x53          DC8 "SSL_CA"
   \              0x4C 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCertificate %s Not ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Certificate %s Not Found"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x46    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_SERVER">`:
   \   00000000   0x53 0x53          DC8 "SSL_SERVER"
   \              0x4C 0x5F    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_KEY">`:
   \   00000000   0x53 0x53          DC8 "SSL_KEY"
   \              0x4C 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "index.html">`:
   \   00000000   0x69 0x6E          DC8 "index.html"
   \              0x64 0x65    
   \              0x78 0x2E    
   \              0x68 0x74    
   \              0x6D 0x6C    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable164:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable164_1:
   \   00000000   0x2F 0x00          DC8      "/",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Generic MCU Profile">`:
   \   00000000   0x47 0x65          DC8 "Generic MCU Profile"
   \              0x6E 0x65    
   \              0x72 0x69    
   \              0x63 0x20    
   \              0x4D 0x43    
   \              0x55 0x20    
   \              0x50 0x72    
   \              0x6F 0x66    
   \              0x69 0x6C    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DEFAULT">`:
   \   00000000   0x44 0x45          DC8 "DEFAULT"
   \              0x46 0x41    
   \              0x55 0x4C    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "api=gs_sys_prov:1.0.0...">`:
   \   00000000   0x61 0x70          DC8 "api=gs_sys_prov:1.0.0:/gainspan/system/api"
   \              0x69 0x3D    
   \              0x67 0x73    
   \              0x5F 0x73    
   \              0x79 0x73    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x76 0x3A    
   \              0x31 0x2E    
   \              0x30 0x2E    
   \              0x30 0x3A    
   \              0x2F 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x61    
   \              0x70 0x69    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable173:
   \   00000000   0x........         DC32     s2wWlanOpSyncSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable173_1:
   \   00000000   0x........         DC32     S2w_Wlan_Cal_Cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable173_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable173_3:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000044   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x ">`:
   \   00000000   0x25 0x78          DC8 "%x "
   \              0x20 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "/">`:
   \   00000000   0x2F 0x00          DC8 "/"

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\"">`:
   \   00000000   0x22 0x00          DC8 "\""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%cD">`:
   \   00000000   0x25 0x63          DC8 "%cD"
   \              0x44 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ":">`:
   \   00000000   0x3A 0x00          DC8 ":"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {103, 97, 105, 110, 115, 112, 97, 1`:
   \   00000000   0x67 0x61          DC8 103, 97, 105, 110, 115, 112, 97, 110, 95, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x69 0x6E    
   \              0x73 0x70    
   \              0x61 0x6E    
   \              0x5F 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s,%s,%d,%d,%d,%d">`:
   \   00000000   0x25 0x73          DC8 "%s,%s,%d,%d,%d,%d"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "gainspan">`:
   \   00000000   0x67 0x61          DC8 "gainspan"
   \              0x69 0x6E    
   \              0x73 0x70    
   \              0x61 0x6E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "local">`:
   \   00000000   0x6C 0x6F          DC8 "local"
   \              0x63 0x61    
   \              0x6C 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s,%s,%s,%s,%s,%d,%d,%s">`:
   \   00000000   0x25 0x73          DC8 "%s,%s,%s,%s,%s,%d,%d,%s"
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x73 0x2C    
   \              0x25 0x73    
   \              0x2C 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "_http">`:
   \   00000000   0x5F 0x68          DC8 "_http"
   \              0x74 0x74    
   \              0x70 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "_tcp">`:
   \   00000000   0x5F 0x74          DC8 "_tcp"
   \              0x63 0x70    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "api=gs_sys_prov:1.0.1...">`:
   \   00000000   0x61 0x70          DC8 "api=gs_sys_prov:1.0.1:/gainspan/system/api"
   \              0x69 0x3D    
   \              0x67 0x73    
   \              0x5F 0x73    
   \              0x79 0x73    
   \              0x5F 0x70    
   \              0x72 0x6F    
   \              0x76 0x3A    
   \              0x31 0x2E    
   \              0x30 0x2E    
   \              0x31 0x3A    
   \              0x2F 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x61    
   \              0x70 0x69    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "_guid">`:
   \   00000000   0x5F 0x67          DC8 "_guid"
   \              0x75 0x69    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable174:
   \   00000000   0x........         DC32     s2wCurrent+0x2E8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable175:
   \   00000000   0x........         DC32     s2wCurrent+0x308

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable175_1:
   \   00000000   0x00 0x00          DC8      "",0x0,0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable175_2:
   \   00000000   0x........         DC32     pS2wHttpdTaskStack

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WEP (SHARED)">`:
   \   00000000   0x57 0x45          DC8 "WEP (SHARED)"
   \              0x50 0x20    
   \              0x28 0x53    
   \              0x48 0x41    
   \              0x52 0x45    
   \              0x44 0x29    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WEP (OPEN)">`:
   \   00000000   0x57 0x45          DC8 "WEP (OPEN)"
   \              0x50 0x20    
   \              0x28 0x4F    
   \              0x50 0x45    
   \              0x4E 0x29    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA-PERSONAL">`:
   \   00000000   0x57 0x50          DC8 "WPA-PERSONAL"
   \              0x41 0x2D    
   \              0x50 0x45    
   \              0x52 0x53    
   \              0x4F 0x4E    
   \              0x41 0x4C    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA2-PERSONAL">`:
   \   00000000   0x57 0x50          DC8 "WPA2-PERSONAL"
   \              0x41 0x32    
   \              0x2D 0x50    
   \              0x45 0x52    
   \              0x53 0x4F    
   \              0x4E 0x41    
   \              0x4C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA-ENTERPRISE">`:
   \   00000000   0x57 0x50          DC8 "WPA-ENTERPRISE"
   \              0x41 0x2D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x52 0x50    
   \              0x52 0x49    
   \              0x53 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA2-ENTERPRISE">`:
   \   00000000   0x57 0x50          DC8 "WPA2-ENTERPRISE"
   \              0x41 0x32    
   \              0x2D 0x45    
   \              0x4E 0x54    
   \              0x45 0x52    
   \              0x50 0x52    
   \              0x49 0x53    
   \              0x45 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable176:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NONE">`:
   \   00000000   0x4E 0x4F          DC8 "NONE"
   \              0x4E 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNOT ASSOCIATED\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012NOT ASSOCIATED\015\012"
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x41 0x53    
   \              0x53 0x4F    
   \              0x43 0x49    
   \              0x41 0x54    
   \              0x45 0x44    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nMODE:%d CHANNEL:%d ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012MODE:%d CHANNEL:%d SSID:\""
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3A 0x25    
   \              0x64 0x20    
   \              0x43 0x48    
   \              0x41 0x4E    
   \              0x4E 0x45    
   \              0x4C 0x3A    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x53 0x49    
   \              0x44 0x3A    
   \              0x22 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBSSID:%02x:%02x:%02...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012BSSID:%02x:%02x:%02x:%02x:%02x:%02x"
   \              0x42 0x53    
   \              0x53 0x49    
   \              0x44 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " SECURITY:%s">`:
   \   00000000   0x20 0x53          DC8 " SECURITY:%s"
   \              0x45 0x43    
   \              0x55 0x52    
   \              0x49 0x54    
   \              0x59 0x3A    
   \              0x25 0x73    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable178:
   \   00000000   0x........         DC32     McuHttpCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable178_1:
   \   00000000   0x22 0x00          DC8      "\"",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable178_2:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c%x%04d">`:
   \   00000000   0x25 0x63          DC8 "%c%c%x%04d"
   \              0x25 0x63    
   \              0x25 0x78    
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable179:
   \   00000000   0x........         DC32     mdnsv6Enable

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable179_1:
   \   00000000   0x........         DC32     mdnsFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable179_2:
   \   00000000   0x........         DC32     mdnsHnParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable179_3:
   \   00000000   0x........         DC32     mdnsParamBuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable179_4:
   \   00000000   0x........         DC32     s2wCurrent+0x1DC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable181:
   \   00000000   0x........         DC32     mdnsSrvcParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable185:
   \   00000000   0x4101009C         DC32     0x4101009c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable189:
   \   00000000   0x25 0x63          DC8      "%cD"
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable189_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNo.Of Stations Conn...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012No.Of Stations Connected=%d\015\012"
   \              0x4E 0x6F    
   \              0x2E 0x4F    
   \              0x66 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x73    
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No     MacAddr       ...">`:
   \   00000000   0x4E 0x6F          DC8 "No     MacAddr                   IP\015\012"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x4D    
   \              0x61 0x63    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x49    
   \              0x50 0x0D    
   \              0x0A 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "         ****">`:
   \   00000000   0x20 0x20          DC8 "         ****"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x2A    
   \              0x2A 0x2A    
   \              0x2A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d      ">`:
   \   00000000   0x25 0x64          DC8 "%d      "
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "         %d.%d.%d.%d">`:
   \   00000000   0x20 0x20          DC8 "         %d.%d.%d.%d"
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d.%d.%d.%d">`:
   \   00000000   0x25 0x64          DC8 "%d.%d.%d.%d"
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x:%02x:%02x:%02x:%02x:%02x : "
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x20    
   \              0x3A 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable193:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable193_1:
   \   00000000   0x3A 0x00          DC8      ":",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable193_2:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable194:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable195:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable196:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable196_1:
   \   00000000   0x8000000B         DC32     0x8000000b

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCONFIG MAP:%02x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012CONFIG MAP:%02x\015\012"
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x49 0x47    
   \              0x20 0x4D    
   \              0x41 0x50    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable197:
   \   00000000   0x80000004         DC32     0x80000004

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nERROR: PWM open fai...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ERROR: PWM open failed \015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x50    
   \              0x57 0x4D    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x66 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nERROR: PWM start fa...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ERROR: PWM start failed \015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x50    
   \              0x57 0x4D    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x72 0x74    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable199:
   \   00000000   0x........         DC32     AppMcu_RespTimeoutCb

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "0x%08x:%08x\\r\\n">`:
   \   00000000   0x30 0x78          DC8 "0x%08x:%08x\015\012"
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x3A 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable203:
   \   00000000   0x........         DC32     uamRxInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable203_1:
   \   00000000   0x........         DC32     s2wNetQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206_1:
   \   00000000   0x........         DC32     S2W_UnassocDataIndCB

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206_2:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206_3:
   \   00000000   0x........         DC32     ncmAutoMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206_4:
   \   00000000   0x........         DC32     dhcpSrvr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable206_5:
   \   00000000   0x........         DC32     `?<Constant "%02x">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable207:
   \   00000000   0x41010194         DC32     0x41010194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable207_1:
   \   00000000   0x41010164         DC32     0x41010164

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable207_2:
   \   00000000   0x........         DC32     appCtx+0xEE0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable210:
   \   00000000   0x........         DC32     pwmInit

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable210_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable210_2:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable210_3:
   \   00000000   0x41010018         DC32     0x41010018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable210_4:
   \   00000000   0x........         DC32     s2wSslConf

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x">`:
   \   00000000   0x25 0x30          DC8 "%02x"
   \              0x32 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBatt.Measure Freq:%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Batt.Measure Freq:%d"
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x2E 0x4D    
   \              0x65 0x61    
   \              0x73 0x75    
   \              0x72 0x65    
   \              0x20 0x46    
   \              0x72 0x65    
   \              0x71 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBattery Value:%d.%0...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Battery Value:%d.%03d V\015\012"
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x56 0x61    
   \              0x6C 0x75    
   \              0x65 0x3A    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x30 0x33    
   \              0x64 0x20    
   \              0x56 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nitxs=%d\\r\\nitxto=%d\\r\\n...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012itxs=%d\015\012itxto=%d\015\012itxf=%d"
   \              0x69 0x74    
   \              0x78 0x73    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x69    
   \              0x74 0x78    
   \              0x74 0x6F    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x69    
   \              0x74 0x78    
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nwep40=%d\\r\\nwep104=%d...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 77H, 65H, 70H, 34H, 30H, 3DH
   \              0x77 0x65    
   \              0x70 0x34    
   \              0x30 0x3D    
   \   00000008   0x25 0x64          DC8 25H, 64H, 0DH, 0AH, 77H, 65H, 70H, 31H
   \              0x0D 0x0A    
   \              0x77 0x65    
   \              0x70 0x31    
   \   00000010   0x30 0x34          DC8 30H, 34H, 3DH, 25H, 64H, 0DH, 0AH, 74H
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x74    
   \   00000018   0x6B 0x69          DC8 6BH, 69H, 70H, 3DH, 25H, 64H, 0DH, 0AH
   \              0x70 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \   00000020   0x63 0x63          DC8 63H, 63H, 6DH, 70H, 3DH, 25H, 64H, 0DH
   \              0x6D 0x70    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \   00000028   0x0A 0x75          DC8 0AH, 75H, 6EH, 65H, 6EH, 63H, 72H, 79H
   \              0x6E 0x65    
   \              0x6E 0x63    
   \              0x72 0x79    
   \   00000030   0x70 0x3D          DC8 70H, 3DH, 25H, 64H, 0DH, 0AH, 75H, 6BH
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x75 0x6B    
   \   00000038   0x65 0x6E          DC8 65H, 6EH, 63H, 72H, 79H, 70H, 3DH, 25H
   \              0x63 0x72    
   \              0x79 0x70    
   \              0x3D 0x25    
   \   00000040   0x64 0x00          DC8 64H, 0
   \   00000042   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nleg=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012leg="
   \              0x6C 0x65    
   \              0x67 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d,%d:">`:
   \   00000000   0x25 0x64          DC8 "%d,%d:"
   \              0x2C 0x25    
   \              0x64 0x3A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d,%d">`:
   \   00000000   0x25 0x64          DC8 "%d,%d"
   \              0x2C 0x25    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nht20l=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ht20l="
   \              0x68 0x74    
   \              0x32 0x30    
   \              0x6C 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nht40l=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ht40l="
   \              0x68 0x74    
   \              0x34 0x30    
   \              0x6C 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nht40s=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ht40s="
   \              0x68 0x74    
   \              0x34 0x30    
   \              0x73 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nht20s=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ht20s="
   \              0x68 0x74    
   \              0x32 0x30    
   \              0x73 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nmcs32s=%d,%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012mcs32s=%d,%d"
   \              0x6D 0x63    
   \              0x73 0x33    
   \              0x32 0x73    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nmcs32l=%d,%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012mcs32l=%d,%d"
   \              0x6D 0x63    
   \              0x73 0x33    
   \              0x32 0x6C    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nprobersp=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012probersp=%d"
   \              0x70 0x72    
   \              0x6F 0x62    
   \              0x65 0x72    
   \              0x73 0x70    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nprobereq=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012probereq=%d"
   \              0x70 0x72    
   \              0x6F 0x62    
   \              0x65 0x72    
   \              0x65 0x71    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nmc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012mc_data=%d"
   \              0x6D 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nuc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012uc_data=%d"
   \              0x75 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nqos_uc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012qos_uc_data=%d"
   \              0x71 0x6F    
   \              0x73 0x5F    
   \              0x75 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nqos_mc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012qos_mc_data=%d"
   \              0x71 0x6F    
   \              0x73 0x5F    
   \              0x6D 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\namsdu_uc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012amsdu_uc_data=%d"
   \              0x61 0x6D    
   \              0x73 0x64    
   \              0x75 0x5F    
   \              0x75 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\namsdu_mc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012amsdu_mc_data=%d"
   \              0x61 0x6D    
   \              0x73 0x64    
   \              0x75 0x5F    
   \              0x6D 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nampdu_uc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ampdu_uc_data=%d"
   \              0x61 0x6D    
   \              0x70 0x64    
   \              0x75 0x5F    
   \              0x75 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nampdu_mc_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ampdu_mc_data=%d"
   \              0x61 0x6D    
   \              0x70 0x64    
   \              0x75 0x5F    
   \              0x6D 0x63    
   \              0x5F 0x64    
   \              0x61 0x74    
   \              0x61 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\noth_mgmt=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012oth_mgmt=%d"
   \              0x6F 0x74    
   \              0x68 0x5F    
   \              0x6D 0x67    
   \              0x6D 0x74    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\noth=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012oth=%d"
   \              0x6F 0x74    
   \              0x68 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nctrl=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ctrl=%d"
   \              0x63 0x74    
   \              0x72 0x6C    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nretries=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012retries=%d"
   \              0x72 0x65    
   \              0x74 0x72    
   \              0x69 0x65    
   \              0x73 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nmultiple_retries=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012multiple_retries=%d"
   \              0x6D 0x75    
   \              0x6C 0x74    
   \              0x69 0x70    
   \              0x6C 0x65    
   \              0x5F 0x72    
   \              0x65 0x74    
   \              0x72 0x69    
   \              0x65 0x73    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nfragments=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012fragments=%d"
   \              0x66 0x72    
   \              0x61 0x67    
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x73 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirx0=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irx0=%d"
   \              0x69 0x72    
   \              0x78 0x30    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxf=%d"
   \              0x69 0x72    
   \              0x78 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxs=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxs=%d"
   \              0x69 0x72    
   \              0x78 0x73    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxd=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxd=%d"
   \              0x69 0x72    
   \              0x78 0x64    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxmf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxmf=%d"
   \              0x69 0x72    
   \              0x78 0x6D    
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxkf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxkf=%d"
   \              0x69 0x72    
   \              0x78 0x6B    
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxicvf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxicvf=%d"
   \              0x69 0x72    
   \              0x78 0x69    
   \              0x63 0x76    
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nirxtkipicvf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012irxtkipicvf=%d"
   \              0x69 0x72    
   \              0x78 0x74    
   \              0x6B 0x69    
   \              0x70 0x69    
   \              0x63 0x76    
   \              0x66 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxtkipmf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxtkipmf=%d"
   \              0x72 0x78    
   \              0x74 0x6B    
   \              0x69 0x70    
   \              0x6D 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxrf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxrf=%d"
   \              0x72 0x78    
   \              0x72 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxtkiprf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxtkiprf=%d"
   \              0x72 0x78    
   \              0x74 0x6B    
   \              0x69 0x70    
   \              0x72 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxdip=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxdip=%d"
   \              0x72 0x78    
   \              0x64 0x69    
   \              0x70 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxdf=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxdf=%d"
   \              0x72 0x78    
   \              0x64 0x66    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrxex=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rxex=%d"
   \              0x72 0x78    
   \              0x65 0x78    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "wep40=%d\\r\\nwep104=%d\\r\\n...">`:
   \   00000000   0x77 0x65          DC8 77H, 65H, 70H, 34H, 30H, 3DH, 25H, 64H
   \              0x70 0x34    
   \              0x30 0x3D    
   \              0x25 0x64    
   \   00000008   0x0D 0x0A          DC8 0DH, 0AH, 77H, 65H, 70H, 31H, 30H, 34H
   \              0x77 0x65    
   \              0x70 0x31    
   \              0x30 0x34    
   \   00000010   0x3D 0x25          DC8 3DH, 25H, 64H, 0DH, 0AH, 74H, 6BH, 69H
   \              0x64 0x0D    
   \              0x0A 0x74    
   \              0x6B 0x69    
   \   00000018   0x70 0x3D          DC8 70H, 3DH, 25H, 64H, 0DH, 0AH, 63H, 63H
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x63 0x63    
   \   00000020   0x6D 0x70          DC8 6DH, 70H, 3AH, 25H, 64H, 0DH, 0AH, 75H
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x75    
   \   00000028   0x6E 0x65          DC8 6EH, 65H, 6EH, 63H, 72H, 79H, 70H, 3DH
   \              0x6E 0x63    
   \              0x72 0x79    
   \              0x70 0x3D    
   \   00000030   0x25 0x64          DC8 25H, 64H, 0DH, 0AH, 75H, 6BH, 65H, 6EH
   \              0x0D 0x0A    
   \              0x75 0x6B    
   \              0x65 0x6E    
   \   00000038   0x63 0x72          DC8 63H, 72H, 79H, 70H, 3DH, 25H, 64H, 0
   \              0x79 0x70    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nbcn=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012bcn=%d"
   \              0x62 0x63    
   \              0x6E 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nrts=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012rts=%d"
   \              0x72 0x74    
   \              0x73 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\ncts=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012cts=%d"
   \              0x63 0x74    
   \              0x73 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nack=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ack=%d"
   \              0x61 0x63    
   \              0x6B 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\natim=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012atim=%d"
   \              0x61 0x74    
   \              0x69 0x6D    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\ncfend=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012cfend=%d"
   \              0x63 0x66    
   \              0x65 0x6E    
   \              0x64 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nback=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012back=%d"
   \              0x62 0x61    
   \              0x63 0x6B    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nbar=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012bar=%d"
   \              0x62 0x61    
   \              0x72 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\noth_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012oth_data=%d"
   \              0x6F 0x74    
   \              0x68 0x5F    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nqos_oth_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012qos_oth_data=%d"
   \              0x71 0x6F    
   \              0x73 0x5F    
   \              0x6F 0x74    
   \              0x68 0x5F    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3D 0x25    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\namsdu_oth_data=%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012amsdu_oth_data=%d"
   \              0x61 0x6D    
   \              0x73 0x64    
   \              0x75 0x5F    
   \              0x6F 0x74    
   \              0x68 0x5F    
   \              0x64 0x61    
   \              0x74 0x61    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n0x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\0120x"
   \              0x30 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   6674          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   APPS2wCmd_AddRedirURI
        16   -> GsnHttpd_AddRedirURI
        16   -> GsnHttpd_IsRunning
        16   -> memcpy
        16   -> memset
        16   -> strlen
      56   APPS2wCmd_WebProv
        56   -- Indirect call
        56   -> AppS2wParse_Boolean
        56   -> AppS2wParse_Int
        56   -> AppS2wParse_NextParamGet
        56   -> GsnOsal_SemAcquire
        56   -> memset
        56   -> strcmp
        56   -> strcpy
        56   -> strlen
        56   -> toupper
       8   APPS2wCmd_WebProvStop
         8   -- Indirect call
         8   -> GsnHttpd_IsRunning
         8   -> GsnOsal_SemAcquire
       8   AppArp_Invalidate
         8   -> _nxe_arp_dynamic_entries_invalidate
         0   -> memset
    1456   AppS2wCmd_ApClientInfoGet
      1456   -> GsnDhcpSrvr_ClientQuery
      1456   -> GsnWdd_ConctedStaListGet
      1456   -> S2w_Printf
      1456   -> memcmp
     296   AppS2wCmd_AppOtpRead
       296   -> AppS2wParse_Int
       296   -> AppS2wParse_NextParamGet
       296   -> GsnOtpMm_Read
       296   -> S2w_Printf
       296   -> __aeabi_memclr4
      16   AppS2wCmd_ArpAutoSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> _nx_arp_auto_arp_entry_enable
       8   AppS2wCmd_ArpCacheDel
         8   -> AppArp_Invalidate
       8   AppS2wCmd_ArpCacheEn
         8   -> AppS2wParse_Boolean
      32   AppS2wCmd_ArpEntryDelete
        32   -> AppS2wParse_Ip
        32   -> AppS2wParse_Mac
        32   -> AppS2wParse_NextParamGet
        32   -> _nxe_arp_static_entry_delete
        32   -> memcpy
      40   AppS2wCmd_ArpEntryGet
        40   -> FREE
        40   -> MALLOC
        40   -> S2w_Printf
        40   -> nx_arp_table_get
      32   AppS2wCmd_ArpEntrySet
        32   -> AppS2wParse_Ip
        32   -> AppS2wParse_Mac
        32   -> AppS2wParse_NextParamGet
        32   -> _nxe_arp_static_entry_create
        32   -> memcpy
      16   AppS2wCmd_AsyncMsgFmt
        16   -> AppS2wParse_Boolean
        16   -> S2w_AsyncMsgGpioInit
        16   -> S2w_AsyncMsgGpioOp
      16   AppS2wCmd_BattCheckSet
        16   -> AppS2wHal_BattChkParam
        16   -> AppS2wHal_BattChkSet
        16   -> AppS2wHal_BattChkStart
        16   -> AppS2wHal_BattChkStop
        16   -> AppS2wParse_Int
        16   -> S2w_Printf
       8   AppS2wCmd_BattCheckStart
         8   -> AppS2wHal_BattChkStart
         8   -> AppS2wParse_Int
      16   AppS2wCmd_BattCheckStop
        16   -> AppS2wHal_BattChkStop
      24   AppS2wCmd_BattLvlSet
        24   -> AppS2wHal_BattChkLvlSet
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
      16   AppS2wCmd_BattValueGet
        16   -> AppS2wHal_BattChkValueGet
        16   -> S2w_Printf
      32   AppS2wCmd_CfgUri
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnHttpd_IsRunning
        32   -> GsnHttpd_UriHandlerConfig
        32   -> memcpy
        32   -> memset
        32   -> strlen
       0   AppS2wCmd_GetSecurityString
       8   AppS2wCmd_GratArpSend
         8   -> _nxe_arp_gratuitous_send
      16   AppS2wCmd_HwCryptoEn
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_NextParamGet
        16   -> GsnHeIf_DriverInit
        16   -> GsnHeIf_DriverSuspend
      16   AppS2wCmd_LogLevelSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      56   AppS2wCmd_MdnsAnnounce
        56   -> AppS2wHal_MdnsAnnounce
        56   -> AppS2wParse_Int
        56   -> AppS2wParse_NextParamGet
        56   -> strcpy
        56   -> strlen
     336   AppS2wCmd_MdnsAnnounceAll
       336   -> AppS2wCmd_MdnsHostNameReg
       336   -> AppS2wCmd_MdnsServiceReg
       336   -> AppS2wParse_IntToStr
       336   -> GsnMdns_AnnounceAll
       336   -> S2w_macAddrRTCGet
       336   -> __aeabi_memcpy4
       336   -> memset
       336   -> sprintf
       8   AppS2wCmd_MdnsDeInit
         8   -> AppS2wHal_MdnsDeInit
      32   AppS2wCmd_MdnsHostNameReg
        32   -> AppS2wHal_MdnsHostNameReg
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> strcpy
        32   -> strlen
      24   AppS2wCmd_MdnsHostNmDeReg
        24   -> AppS2wHal_MdnsHostNameDereg
        24   -> AppS2wParse_NextParamGet
        24   -> strcpy
        24   -> strlen
       8   AppS2wCmd_MdnsInit
         8   -> AppS2wHal_MdnsInit
      40   AppS2wCmd_MdnsServiceReg
        40   -> AppS2wHal_MdnsServiceReg
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_MdnsKeyValidate
        40   -> AppS2wParse_NextParamGet
        40   -> strcpy
        40   -> strlen
      32   AppS2wCmd_MdnsSrvDeReg
        32   -> AppS2wHal_MdnsServiceDereg
        32   -> AppS2wParse_NextParamGet
        32   -> strcpy
        32   -> strlen
      48   AppS2wCmd_MdnsSrvcDiscover
        48   -> AppS2wHal_MdnsSrvcDiscover
        48   -> AppS2wParse_Int
        48   -> AppS2wParse_NextParamGet
        48   -> strcpy
        48   -> strlen
     176   AppS2wCmd_MemRead
       176   -> AppS2wParse_Boolean
       176   -> AppS2wParse_Hex
       176   -> AppS2wParse_Int
       176   -> AppS2wParse_NextParamGet
       176   -> GsnSysCtl_MemReadReq
       176   -> S2w_Printf
      80   AppS2wCmd_MemWrite
        80   -> AppS2wParse_Boolean
        80   -> AppS2wParse_Hex
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> GsnSysCtl_MemWriteReq
        80   -> memcpy
      24   AppS2wCmd_PwmCtrl
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnPwm_PatternUpdate
      80   AppS2wCmd_PwmStart
        80   -> AppS2wParse_Boolean
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> GsnIoMux_PullDownDisable
        80   -> GsnIoMux_Sel
        80   -> GsnPwm_Open
        80   -> GsnPwm_Start
        80   -> S2w_Printf
        80   -> memset
      16   AppS2wCmd_PwmStop
        16   -> AppS2wParse_Int
        16   -> GsnPwm_Stop
      56   AppS2wCmd_RfTestCarrierWaveStart
        56   -> AppS2wParse_Int
        56   -> AppS2wParse_NextParamGet
        56   -> GsnSysCtl_AppTempSend
        56   -> GsnWdd_RfTestCarrierWaveStart
      72   AppS2wCmd_RfTestRxStart
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_Mac
        72   -> AppS2wParse_NextParamGet
        72   -> GsnSysCtl_AppTempSend
        72   -> GsnWdd_RfTestRxStart
        72   -> memcpy
     176   AppS2wCmd_RfTestRxStop
       176   -> GsnSysCtl_AppTempSend
       176   -> GsnWdd_RfTestRxStop
       176   -> S2w_Printf
       8   AppS2wCmd_RfTestStart
         8   -> GsnSysCtl_AppTempSend
         8   -> GsnWdd_RfTestModeStart
       8   AppS2wCmd_RfTestStop
         8   -> GsnWdd_RfTestModeStop
      96   AppS2wCmd_RfTestTx100Start
        96   -> AppS2wParse_Int
        96   -> AppS2wParse_NextParamGet
        96   -> GsnSysCtl_AppTempSend
        96   -> GsnWdd_RfTestTx100Start
     160   AppS2wCmd_RfTestTx99Start
       160   -> AppS2wParse_Int
       160   -> AppS2wParse_Mac
       160   -> AppS2wParse_NextParamGet
       160   -> GsnSysCtl_AppTempSend
       160   -> GsnWdd_RfTestTx99Start
       160   -> memcpy
     152   AppS2wCmd_RfTestTxStart
       152   -> AppS2wParse_Int
       152   -> AppS2wParse_Mac
       152   -> AppS2wParse_NextParamGet
       152   -> GsnSysCtl_AppTempSend
       152   -> GsnWdd_RfTestTxStart
       152   -> __aeabi_memclr4
       152   -> memcpy
       0   AppS2wCmd_RfTestTxStop
      16   AppS2wCmd_SetAssocTimeout
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      16   AppS2wCmd_SslConfig
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      56   AppS2wCmd_WebServer
        56   -- Indirect call
        56   -> AppS2wParse_Boolean
        56   -> AppS2wParse_Int
        56   -> AppS2wParse_NextParamGet
        56   -> GsnHttpd_IsRunning
        56   -> GsnOsal_SemAcquire
        56   -> GsnSoftTmr_Stop
        56   -> memset
        56   -> strcmp
        56   -> strcpy
        56   -> strlen
        56   -> toupper
      24   AppS2wCmd_WlanApPsCfg
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_ApPowerSaveCfgSet
      32   AppS2wCmd_WlanCalib
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnOsal_SemAcquire
        32   -> GsnWdd_CalibrnRun
        32   -> S2w_Printf
     304   AppS2wCmd_WlanOtpRead
       304   -> AppS2wParse_Int
       304   -> AppS2wParse_NextParamGet
       304   -> GsnSysCtl_OtpReadReq
       304   -> S2w_Printf
       304   -> __aeabi_memclr4
      32   AppS2wCmd_WlanStaPsCfg
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnWdd_RadioPowerSaveCfgSet
      48   AppS2wCmd_WlanStatsGet
        48   -> GsnDynMemMgmt_Alloc
        48   -> GsnWdd_WlanStatsGet
        48   -> S2w_Printf
        48   -> free
        48   -> memset
       8   AppS2wCmd_Wrssi
         8   -> AppS2wHal_RssiGet
         8   -> S2w_Printf
      80   AppS2wCmd_Wstatus
        80   -> AppS2wCmd_GetSecurityString
        80   -> AppS2wHal_CharNPut
        80   -> AppS2wHal_InfoGet
        80   -> GsnWdd_PhyAddrGet
        80   -> S2w_Printf
      16   AppS2wCmd_XmlParseEnable
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      64   AppS2wCmd_XmlSend
        64   -> AppS2wHal_HttpHandleGet
        64   -> AppS2wParse_Int
        64   -> AppS2wParse_NextParamGet
        64   -> AppS2w_CidValidate
        64   -> AppS2w_GslinkDeInit
        64   -> AppS2w_GslinkInit
        64   -> AppS2w_HttpdCtxInit
        64   -> AppS2w_HttpdMethodSet
        64   -> AppS2w_HttpdSetTimeOut
        64   -> GsnDynMemMgmt_Alloc
        64   -> GsnDynMemMgmt_Free
        64   -> GsnHttpd_IsRunning
        64   -> GsnOsal_SemAcquire
        64   -> GsnOsal_SemRelease
        64   -> GsnSoftTmr_Start
        64   -> GsnSoftTmr_Stop
        64   -> GsnXMLStr_SetRootTag
        64   -> GsnXMLStr_SetTagCount
        64   -> S2wHttp_XmlSend
        64   -> strcmp
        64   -> strlen
        64   -> strncpy
      24   AppS2wHal_GetStausCode
        24   -> __iar_Strstr
        24   -> memcmp
        24   -> memcpy
      32   AppS2wHal_RawhttpContentGet
        32   -> AppS2wHal_CharNGet
        32   -> AppS2w_HttpSemRelease
        32   -> GsnOsal_SemAcquire
      16   AppS2wHal_XmlPost
        16   -> S2wHttp_XmlSend
      24   AppS2wHelp_Print
         0   -> AppS2wHal_CharNPut
        24   -> AppS2wHal_CharNPut
        24   -> S2w_PutChar
        24   -> strlen
      32   AppS2w_CmdL2ConfigSet
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> S2w_Printf
       0   AppS2w_HttpdBodyLenSet
       8   AppS2w_HttpdCtxDeInit
         8   -> GsnHttpd_ReleaseBuffer
         0   -> _tx_semaphore_delete
       8   AppS2w_HttpdCtxInit
         8   -> GsnHttpd_GetBuffer
         8   -> _tx_semaphore_create
       0   AppS2w_HttpdMethodSet
      40   AppS2w_RawDataSend
        40   -> AppS2wHal_CharNPut
        40   -> GsnOsal_SemAcquire
        40   -> GsnOsal_SemRelease
        40   -> s2wSpiFs_Flush
        40   -> sprintf
     528   AppS2w_WebServerStart
       512   -> App_FsInit
       512   -> App_McuHttpApiInit
       512   -> GsnDynMemMgmt_Free
       512   -> GsnHttpd_IsRunning
       512   -> GsnHttpd_Start
       512   -> GsnNwIf_IpConfigGet
       512   -> GsnNw_PktPoolHndlGet
       512   -> GsnOsal_SemRelease
       512   -> S2wApp_WebserverStackSize_Get
       512   -> S2wApp_WebserverStack_Free
       512   -> S2wApp_WebserverStack_Get
       512   -> S2wCert_FlashFileLoad
       512   -> S2wCert_SearchRamTable
       512   -> S2w_Printf
       528   -> __aeabi_memcpy4
       512   -> fsm_enterFS
       512   -> memset
       512   -> strcpy
       8   AppS2w_WebServerStop
         8   -> App_McuHttpApiDeInit
      72   AppS2w_XmlDataProcess
        72   -> AppS2wHal_HttpHandleGet
        72   -> AppS2wHal_XmlPost
        72   -> AppS2wProcess_StatusNotify
        72   -> AppS2w_GslinkDeInit
        72   -> AppS2w_HttpSemRelease
        72   -> AppS2w_HttpdCtxInit
        72   -> GsnOsal_SemAcquire
        72   -> GsnOsal_SemRelease
        72   -> GsnSoftTmr_Start
        72   -> GsnXMLStr_Encode
      56   AppS2w_XmlRxBufferMgmtCb
        56   -> AppS2wHal_CharNPut
        56   -> AppS2wHal_CidFind
        56   -> AppS2wHal_GetStausCode
        56   -> GsnXMLStr_Decode
        56   -> s2wSpiFs_Flush
        56   -> sprintf
       8   GsnIoMux_PullDownDisable
         8   -> GsnOsal_IntrDisable
         0   -> GsnOsal_IntrEnable
       0   GsnIoMux_Sel
       0   GsnOsal_IntrDisable
         0   -> _tx_thread_interrupt_control
       0   GsnOsal_IntrEnable
         0   -> _tx_thread_interrupt_control
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      32   S2W_UnassocDataIndCB
        32   -> GsnRingBuf_Get
        32   -> GsnRingBuf_Put
        32   -> _tx_queue_send
        32   -> memcpy
      56   S2wHttp_XmlSend
        56   -> AppS2wHal_CharNPut
        56   -> AppS2wHal_GetStausCode
        56   -> AppS2wHal_HttpHandleGet
        56   -> GsnDynMemMgmt_Alloc
        56   -> GsnDynMemMgmt_Free
        56   -> GsnHttp_Send
        56   -> GsnXMLStr_Decode
        56   -> s2wSpiFs_Flush
        56   -> sprintf
       8   S2w_AsyncMsgGpioInit
         0   -> GsnGpio_Init
         8   -> GsnIoMux_Sel
         8   -> GsnOsal_IntrDisable
         8   -> GsnOsal_IntrEnable
       0   S2w_AsyncMsgGpioOp
         0   -> GsnGpio_OutClear
         0   -> GsnGpio_OutIndvidualSet
      16   S2w_CmdPsPollIntervelset
        16   -> AppS2wHal_PsPollIntervelset
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      24   S2w_CmdUnSolicitedCcaConf
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
      72   S2w_CmdUnSolicitedRx
        72   -> AppS2wParse_Boolean
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> GsnWdd_UAMDataRxConfig
        72   -> GsnWdd_UAMStart
        72   -> GsnWdd_UamDataRxStart
        72   -> memset
        72   -> s2wUamRx_Init
      24   S2w_CmdUnSolicitedRxstop
        24   -> GsnWdd_UAMDataRxStop
        24   -> GsnWdd_UAMStop
      24   S2w_CmdUnSolicitedTx
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_Mac
        24   -> AppS2wParse_NextParamGet
        24   -> S2w_macAddrRTCGet
        24   -> memset
      16   S2w_UamRx
        16   -> AppS2wHal_CharNPut
        16   -> GsnOsal_IntrDisable
        16   -> GsnOsal_IntrEnable
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> GsnRingBuf_Put
        16   -> S2w_Printf
        16   -> s2wSpiFs_Flush
      16   S2w_Wlan_Cal_Cb
         0   -> GsnOsal_SemRelease
        16   -> S2w_Printf
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
      24   s2wUamRx_Init
        24   -> GsnRingBuf_Init
        24   -> GsnRingBuf_Put


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "         %d.%d.%d.%d">
      16  ?<Constant "         ****">
       2  ?<Constant " ">
      56  ?<Constant " No of packets receiv...">
      56  ?<Constant " No of packets receiv...">_1
      16  ?<Constant " SECURITY:%s">
       1  ?<Constant "">
       8  ?<Constant "%02x">
      12  ?<Constant "%c%c%x%04d">
       4  ?<Constant "%cD">
      12  ?<Constant "%d      ">
       8  ?<Constant "%d,%d">
       8  ?<Constant "%d,%d:">
      12  ?<Constant "%d.%d.%d.%d">
      20  ?<Constant "%s,%s,%d,%d,%d,%d">
      24  ?<Constant "%s,%s,%s,%s,%s,%d,%d,%s">
       4  ?<Constant "%x ">
       2  ?<Constant "/">
      16  ?<Constant "0x%08x:%08x\r\n">
       4  ?<Constant "200">
       2  ?<Constant ":">
      44  ?<Constant "Average RSSI of the r...">
      20  ?<Constant "Calibration Info:\r\n">
       8  ?<Constant "DEFAULT">
      12  ?<Constant "Data:\r\n\r\n">
       8  ?<Constant "FAIL">
      20  ?<Constant "Generic MCU Profile">
      16  ?<Constant "Length = %d\r\n">
       8  ?<Constant "NONE">
      40  ?<Constant "No     MacAddr       ...">
      28  ?<Constant "No of bytes received ...">
      40  ?<Constant "No of duplicate packe...">
      36  ?<Constant "No of header errors r...">
      48  ?<Constant "No of packets receive...">
      52  ?<Constant "No of packets receive...">_1
      40  ?<Constant "No of packets receive...">_10
      40  ?<Constant "No of packets receive...">_11
      40  ?<Constant "No of packets receive...">_12
      40  ?<Constant "No of packets receive...">_13
      40  ?<Constant "No of packets receive...">_14
      64  ?<Constant "No of packets receive...">_15
      64  ?<Constant "No of packets receive...">_16
      56  ?<Constant "No of packets receive...">_2
      56  ?<Constant "No of packets receive...">_3
      56  ?<Constant "No of packets receive...">_4
      56  ?<Constant "No of packets receive...">_5
      56  ?<Constant "No of packets receive...">_6
      36  ?<Constant "No of packets receive...">_7
      36  ?<Constant "No of packets receive...">_8
      40  ?<Constant "No of packets receive...">_9
       8  ?<Constant "SSL_CA">
       8  ?<Constant "SSL_KEY">
      12  ?<Constant "SSL_SERVER">
       8  ?<Constant "SUCCESS">
      12  ?<Constant "WEP (OPEN)">
      16  ?<Constant "WEP (SHARED)">
      16  ?<Constant "WPA-ENTERPRISE">
      16  ?<Constant "WPA-PERSONAL">
      16  ?<Constant "WPA2-ENTERPRISE">
      16  ?<Constant "WPA2-PERSONAL">
       2  ?<Constant "\"">
       2  ?<Constant "\n">
      28  ?<Constant "\n\rCertificate %s Not ...">
      16  ?<Constant "\r\n ModType:%d\r\n">
       4  ?<Constant "\r\n">
      36  ?<Constant "\r\n%02x:%02x:%02x:%02x...">
       8  ?<Constant "\r\n%d">
       8  ?<Constant "\r\n0x">
      40  ?<Constant "\r\nBSSID:%02x:%02x:%02...">
      24  ?<Constant "\r\nBatt.Measure Freq:%d">
      28  ?<Constant "\r\nBattery Value:%d.%0...">
      20  ?<Constant "\r\nCONFIG MAP:%02x\r\n">
      28  ?<Constant "\r\nERROR: PWM open fai...">
      32  ?<Constant "\r\nERROR: PWM start fa...">
      28  ?<Constant "\r\nMODE:%d CHANNEL:%d ...">
      20  ?<Constant "\r\nNOT ASSOCIATED\r\n">
      32  ?<Constant "\r\nNo of packets recei...">
      32  ?<Constant "\r\nNo.Of Stations Conn...">
      12  ?<Constant "\r\nack=%d">
      20  ?<Constant "\r\nampdu_mc_data=%d">
      20  ?<Constant "\r\nampdu_uc_data=%d">
      20  ?<Constant "\r\namsdu_mc_data=%d">
      20  ?<Constant "\r\namsdu_oth_data=%d">
      20  ?<Constant "\r\namsdu_uc_data=%d">
      12  ?<Constant "\r\natim=%d">
      12  ?<Constant "\r\nback=%d">
      12  ?<Constant "\r\nbar=%d">
      12  ?<Constant "\r\nbcn=%d">
      12  ?<Constant "\r\ncfend=%d">
      12  ?<Constant "\r\nctrl=%d">
      12  ?<Constant "\r\ncts=%d">
      16  ?<Constant "\r\nfragments=%d">
      12  ?<Constant "\r\nht20l=">
      12  ?<Constant "\r\nht20s=">
      12  ?<Constant "\r\nht40l=">
      12  ?<Constant "\r\nht40s=">
      12  ?<Constant "\r\nirx0=%d">
      12  ?<Constant "\r\nirxd=%d">
      12  ?<Constant "\r\nirxf=%d">
      16  ?<Constant "\r\nirxicvf=%d">
      12  ?<Constant "\r\nirxkf=%d">
      12  ?<Constant "\r\nirxmf=%d">
      12  ?<Constant "\r\nirxs=%d">
      20  ?<Constant "\r\nirxtkipicvf=%d">
      32  ?<Constant "\r\nitxs=%d\r\nitxto=%d\r\n...">
       8  ?<Constant "\r\nleg=">
      16  ?<Constant "\r\nmc_data=%d">
      16  ?<Constant "\r\nmcs32l=%d,%d">
      16  ?<Constant "\r\nmcs32s=%d,%d">
      24  ?<Constant "\r\nmultiple_retries=%d">
      12  ?<Constant "\r\noth=%d">
      16  ?<Constant "\r\noth_data=%d">
      16  ?<Constant "\r\noth_mgmt=%d">
      16  ?<Constant "\r\nprobereq=%d">
      16  ?<Constant "\r\nprobersp=%d">
      20  ?<Constant "\r\nqos_mc_data=%d">
      20  ?<Constant "\r\nqos_oth_data=%d">
      20  ?<Constant "\r\nqos_uc_data=%d">
      16  ?<Constant "\r\nretries=%d">
      12  ?<Constant "\r\nrts=%d">
      12  ?<Constant "\r\nrxdf=%d">
      12  ?<Constant "\r\nrxdip=%d">
      12  ?<Constant "\r\nrxex=%d">
      12  ?<Constant "\r\nrxrf=%d">
      16  ?<Constant "\r\nrxtkipmf=%d">
      16  ?<Constant "\r\nrxtkiprf=%d">
      16  ?<Constant "\r\nuc_data=%d">
      68  ?<Constant "\r\nwep40=%d\r\nwep104=%d...">
       8  ?<Constant "_guid">
       8  ?<Constant "_http">
       8  ?<Constant "_tcp">
      44  ?<Constant "api=gs_sys_prov:1.0.0...">
      44  ?<Constant "api=gs_sys_prov:1.0.1...">
      12  ?<Constant "gainspan">
      12  ?<Constant "index.html">
       8  ?<Constant "local">
      16  ?<Constant "status = %s\r\n">
      64  ?<Constant "wep40=%d\r\nwep104=%d\r\n...">
      76  ?<Constant {0}>
     256  ?<Constant {0}>_1
     256  ?<Constant {0}>_2
      20  ?<Constant {103, 97, 105, 110, 115, 112, 97, 1
       4  ??DataTable147
       4  ??DataTable149
       4  ??DataTable152
       4  ??DataTable153
       4  ??DataTable158
       4  ??DataTable158_1
       4  ??DataTable160
       4  ??DataTable160_1
       4  ??DataTable160_2
       4  ??DataTable160_3
       4  ??DataTable161
       4  ??DataTable161_1
       4  ??DataTable161_2
       4  ??DataTable161_3
       4  ??DataTable162
       4  ??DataTable162_1
       4  ??DataTable162_2
       4  ??DataTable162_3
       4  ??DataTable162_4
       4  ??DataTable162_5
       4  ??DataTable162_6
       4  ??DataTable162_7
       4  ??DataTable164
       4  ??DataTable164_1
       4  ??DataTable173
       4  ??DataTable173_1
       4  ??DataTable173_2
       4  ??DataTable173_3
       4  ??DataTable174
       4  ??DataTable175
       4  ??DataTable175_1
       4  ??DataTable175_2
       4  ??DataTable176
       4  ??DataTable178
       4  ??DataTable178_1
       4  ??DataTable178_2
       4  ??DataTable179
       4  ??DataTable179_1
       4  ??DataTable179_2
       4  ??DataTable179_3
       4  ??DataTable179_4
       4  ??DataTable181
       4  ??DataTable185
       4  ??DataTable189
       4  ??DataTable189_1
       4  ??DataTable193
       4  ??DataTable193_1
       4  ??DataTable193_2
       4  ??DataTable194
       4  ??DataTable195
       4  ??DataTable196
       4  ??DataTable196_1
       4  ??DataTable197
       4  ??DataTable199
       4  ??DataTable203
       4  ??DataTable203_1
       4  ??DataTable206
       4  ??DataTable206_1
       4  ??DataTable206_2
       4  ??DataTable206_3
       4  ??DataTable206_4
       4  ??DataTable206_5
       4  ??DataTable207
       4  ??DataTable207_1
       4  ??DataTable207_2
       4  ??DataTable210
       4  ??DataTable210_1
       4  ??DataTable210_2
       4  ??DataTable210_3
       4  ??DataTable210_4
       6  ?Subroutine0
       6  ?Subroutine1
      12  ?Subroutine10
      10  ?Subroutine11
       6  ?Subroutine12
      10  ?Subroutine13
       6  ?Subroutine14
       6  ?Subroutine15
       6  ?Subroutine16
       6  ?Subroutine17
       8  ?Subroutine18
       6  ?Subroutine19
       6  ?Subroutine2
      12  ?Subroutine20
       8  ?Subroutine21
      10  ?Subroutine22
      14  ?Subroutine23
      12  ?Subroutine24
       8  ?Subroutine25
      12  ?Subroutine26
      10  ?Subroutine27
      92  ?Subroutine28
      16  ?Subroutine29
      14  ?Subroutine3
       8  ?Subroutine30
      10  ?Subroutine31
      10  ?Subroutine32
      10  ?Subroutine33
       8  ?Subroutine34
       8  ?Subroutine35
      12  ?Subroutine36
      12  ?Subroutine37
      12  ?Subroutine38
       6  ?Subroutine39
      14  ?Subroutine4
      16  ?Subroutine40
       8  ?Subroutine41
      10  ?Subroutine42
       6  ?Subroutine43
       8  ?Subroutine44
      10  ?Subroutine45
      10  ?Subroutine46
      12  ?Subroutine47
       6  ?Subroutine48
       8  ?Subroutine49
       8  ?Subroutine5
      12  ?Subroutine50
       6  ?Subroutine51
      10  ?Subroutine52
      14  ?Subroutine53
      14  ?Subroutine54
       6  ?Subroutine6
      12  ?Subroutine7
      12  ?Subroutine8
      10  ?Subroutine9
      50  APPS2wCmd_AddRedirURI
     460  APPS2wCmd_WebProv
      50  APPS2wCmd_WebProvStop
      30  AppArp_Invalidate
     286  AppS2wCmd_ApClientInfoGet
     172  AppS2wCmd_AppOtpRead
      30  AppS2wCmd_ArpAutoSet
      18  AppS2wCmd_ArpCacheDel
      24  AppS2wCmd_ArpCacheEn
      70  AppS2wCmd_ArpEntryDelete
     144  AppS2wCmd_ArpEntryGet
      70  AppS2wCmd_ArpEntrySet
      44  AppS2wCmd_AsyncMsgFmt
     102  AppS2wCmd_BattCheckSet
      46  AppS2wCmd_BattCheckStart
      38  AppS2wCmd_BattCheckStop
      86  AppS2wCmd_BattLvlSet
      80  AppS2wCmd_BattValueGet
     140  AppS2wCmd_CfgUri
      76  AppS2wCmd_GetSecurityString
      20  AppS2wCmd_GratArpSend
      46  AppS2wCmd_HwCryptoEn
      32  AppS2wCmd_LogLevelSet
     154  AppS2wCmd_MdnsAnnounce
     278  AppS2wCmd_MdnsAnnounceAll
      38  AppS2wCmd_MdnsDeInit
     172  AppS2wCmd_MdnsHostNameReg
      88  AppS2wCmd_MdnsHostNmDeReg
      32  AppS2wCmd_MdnsInit
     340  AppS2wCmd_MdnsServiceReg
     162  AppS2wCmd_MdnsSrvDeReg
     142  AppS2wCmd_MdnsSrvcDiscover
     158  AppS2wCmd_MemRead
     180  AppS2wCmd_MemWrite
      94  AppS2wCmd_PwmCtrl
     488  AppS2wCmd_PwmStart
      52  AppS2wCmd_PwmStop
      94  AppS2wCmd_RfTestCarrierWaveStart
     122  AppS2wCmd_RfTestRxStart
     322  AppS2wCmd_RfTestRxStop
      22  AppS2wCmd_RfTestStart
      14  AppS2wCmd_RfTestStop
     148  AppS2wCmd_RfTestTx100Start
     204  AppS2wCmd_RfTestTx99Start
     202  AppS2wCmd_RfTestTxStart
       4  AppS2wCmd_RfTestTxStop
      66  AppS2wCmd_SetAssocTimeout
      54  AppS2wCmd_SslConfig
     430  AppS2wCmd_WebServer
     100  AppS2wCmd_WlanApPsCfg
     144  AppS2wCmd_WlanCalib
     182  AppS2wCmd_WlanOtpRead
     162  AppS2wCmd_WlanStaPsCfg
    1222  AppS2wCmd_WlanStatsGet
      36  AppS2wCmd_Wrssi
     200  AppS2wCmd_Wstatus
      40  AppS2wCmd_XmlParseEnable
     568  AppS2wCmd_XmlSend
      52  AppS2wHal_GetStausCode
     108  AppS2wHal_RawhttpContentGet
      68  AppS2wHal_XmlPost
      90  AppS2wHelp_Print
     106  AppS2w_CmdL2ConfigSet
       6  AppS2w_HttpdBodyLenSet
      34  AppS2w_HttpdCtxDeInit
      62  AppS2w_HttpdCtxInit
       8  AppS2w_HttpdMethodSet
      90  AppS2w_RawDataSend
     546  AppS2w_WebServerStart
      22  AppS2w_WebServerStop
     436  AppS2w_XmlDataProcess
     178  AppS2w_XmlRxBufferMgmtCb
      48  GsnIoMux_PullDownDisable
      12  GsnIoMux_Sel
       6  GsnOsal_IntrDisable
       4  GsnOsal_IntrEnable
      18  GsnOsal_SemAcquire
      18  GsnOsal_SemRelease
      86  S2W_UnassocDataIndCB
     282  S2wHttp_XmlSend
      52  S2w_AsyncMsgGpioInit
      20  S2w_AsyncMsgGpioOp
      32  S2w_CmdPsPollIntervelset
      82  S2w_CmdUnSolicitedCcaConf
     172  S2w_CmdUnSolicitedRx
      48  S2w_CmdUnSolicitedRxstop
     466  S2w_CmdUnSolicitedTx
      88  S2w_UamRx
      92  S2w_Wlan_Cal_Cb
      36  frame
       1  frameTransmissionType
      24  mdnsAnnceParam
     256  mdnsParamBuff
      56  mdnsSrvcParam
       8  mdnsv6Enable
          mdnsATConfig
          mdnsStarted
      12  memcpy
      20  memset
       8  pS2wHttpdTaskStack
          s2wHttpdPktPtr
      92  pwmInit
          pattern
          pwm_handle
       4  s2wErrorCode
       8  s2wSslConf
      74  s2wUamRx_Init
      60  trPktPoolHndl
    4504  uamRxInit
          s2wUamBufs

 
  4 801 bytes in section .bss
    256 bytes in section .noinit
    615 bytes in section .rodata
 16 104 bytes in section .text
 
 15 966 bytes of CODE  memory (+ 138 bytes shared)
    615 bytes of CONST memory
  5 057 bytes of DATA  memory

Errors: none
Warnings: none
