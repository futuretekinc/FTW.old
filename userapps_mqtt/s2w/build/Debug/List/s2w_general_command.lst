###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:23:27 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_general_command.c              #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_general_command.c -D           #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_general_command.lst      #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_general_command.o         #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\parser\s2w_general_command.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 20012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_general_command.c,v $
     28          *
     29          * Description : s2w command interprter file
     30          ******************************************************************/
     31          
     32          
     33          /*****************************************************************
     34            * File Inclusions
     35            *****************************************************************/
     36          #include "time.h"
     37          #include <ctype.h>
     38          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     39          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnOsal_IntrDisable(void)
   \                     GsnOsal_IntrDisable:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnOsal_IntrEnable(int)
   \                     GsnOsal_IntrEnable:
   \   00000000   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9205             STR      R2,[SP, #+20]
   \   00000010   0x461D             MOV      R5,R3
   \   00000012   0x9B0C             LDR      R3,[SP, #+48]
   \   00000014   0x9303             STR      R3,[SP, #+12]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9302             STR      R3,[SP, #+8]
   \   0000001A   0x9204             STR      R2,[SP, #+16]
   \   0000001C   0x460B             MOV      R3,R1
   \   0000001E   0x9701             STR      R7,[SP, #+4]
   \   00000020   0x9600             STR      R6,[SP, #+0]
   \   00000022   0x4622             MOV      R2,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _tx_thread_create
   \   0000002A   0xB118             CBZ.N    R0,??GsnOsal_ThreadCreate_0
   \   0000002C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000030   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_Sel(UINT32, UINT32)
   \                     GsnIoMux_Sel:
   \   00000000   0x4A01             LDR.N    R2,??GsnIoMux_Sel_0  ;; 0x40160000
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??GsnIoMux_Sel_0:
   \   00000008   0x40160000         DC32     0x40160000

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_PullDownEnable(UINT32)
   \                     GsnIoMux_PullDownEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x4909             LDR.N    R1,??GsnIoMux_PullDownEnable_0  ;; 0x40160200
   \   0000000C   0x2C20             CMP      R4,#+32
   \   0000000E   0xD205             BCS.N    ??GsnIoMux_PullDownEnable_1
   \   00000010   0x680B             LDR      R3,[R1, #+0]
   \   00000012   0x40A2             LSLS     R2,R2,R4
   \   00000014   0xEA23 0x0202      BIC      R2,R3,R2
   \   00000018   0x600A             STR      R2,[R1, #+0]
   \   0000001A   0xE005             B.N      ??GsnIoMux_PullDownEnable_2
   \                     ??GsnIoMux_PullDownEnable_1:
   \   0000001C   0x3C20             SUBS     R4,R4,#+32
   \   0000001E   0x684B             LDR      R3,[R1, #+4]
   \   00000020   0x40A2             LSLS     R2,R2,R4
   \   00000022   0xEA23 0x0202      BIC      R2,R3,R2
   \   00000026   0x604A             STR      R2,[R1, #+4]
   \                     ??GsnIoMux_PullDownEnable_2:
   \   00000028   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002C   0x.... 0x....      B.W      GsnOsal_IntrEnable
   \                     ??GsnIoMux_PullDownEnable_0:
   \   00000030   0x40160200         DC32     0x40160200

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_PullDownDisable(UINT32)
   \                     GsnIoMux_PullDownDisable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000008   0x2201             MOVS     R2,#+1
   \   0000000A   0x4908             LDR.N    R1,??GsnIoMux_PullDownDisable_0  ;; 0x40160200
   \   0000000C   0x2C20             CMP      R4,#+32
   \   0000000E   0xD204             BCS.N    ??GsnIoMux_PullDownDisable_1
   \   00000010   0x680B             LDR      R3,[R1, #+0]
   \   00000012   0x40A2             LSLS     R2,R2,R4
   \   00000014   0x431A             ORRS     R2,R2,R3
   \   00000016   0x600A             STR      R2,[R1, #+0]
   \   00000018   0xE004             B.N      ??GsnIoMux_PullDownDisable_2
   \                     ??GsnIoMux_PullDownDisable_1:
   \   0000001A   0x3C20             SUBS     R4,R4,#+32
   \   0000001C   0x684B             LDR      R3,[R1, #+4]
   \   0000001E   0x40A2             LSLS     R2,R2,R4
   \   00000020   0x431A             ORRS     R2,R2,R3
   \   00000022   0x604A             STR      R2,[R1, #+4]
   \                     ??GsnIoMux_PullDownDisable_2:
   \   00000024   0xE8BD 0x4010      POP      {R4,LR}
   \   00000028   0x.... 0x....      B.W      GsnOsal_IntrEnable
   \                     ??GsnIoMux_PullDownDisable_0:
   \   0000002C   0x40160200         DC32     0x40160200

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioTxFifoWrite(UINT32)
   \                     GsnFlashIf_PioTxFifoWrite:
   \   00000000   0x4903             LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0  ;; 0x400e0004
   \                     ??GsnFlashIf_PioTxFifoWrite_1:
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000008   0xD0FB             BEQ.N    ??GsnFlashIf_PioTxFifoWrite_1
   \   0000000A   0x4902             LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0+0x4  ;; 0x400e0400
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return
   \                     ??GsnFlashIf_PioTxFifoWrite_0:
   \   00000010   0x400E0004         DC32     0x400e0004
   \   00000014   0x400E0400         DC32     0x400e0400
     40          #include "gsn_version.h"
     41          #include "hal/s2w.h"
     42          #include "hal/s2w_types.h"
     43          #include "hal/s2w_hal.h"
     44          #include "hal/s2w_timer.h"
     45          #include "parser/s2w_parse.h"
     46          #include "parser/s2w_process.h"
     47          #include "parser/s2w_command.h"
     48          #include "hal/s2w_net.h"
     49          #include "main/app_main_ctx.h"
     50          
     51          #include "config/app_ncm_config.h"
     52          #include "config/app_resource_config.h"
     53          #include "main/app_main_ctx.h"
     54          #include "hal/s2w_cert_mgmt.h"
     55          #include "modules/http/gsn_httpc.h"
     56          
     57          #include "config/app_stat_config.h"
     58          #include "app_rtc_mem.h"
     59          #include "app_events.h"
     60          #include "app_defines_builder.h"
     61          #include "fs/api/api_safe.h"
     62          
     63          #include "hal/s2w_config.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_GRP_PROV_WEP_KEY[5]
   \                     S2W_DEFAULT_GRP_PROV_WEP_KEY:
   \   00000000   0x12 0x34          DC8 18, 52, 86, 120, 144, 0, 0, 0
   \              0x56 0x78    
   \              0x90 0x00    
   \              0x00 0x00    
     64          
     65          #include "fs/api/api_safe.h"
     66          #include "fs/safe-flash/nor/flashdrv.h"
     67          
     68          #include "gslink\app_mcu_def.h"
     69          
     70          #include "app_rtc_mem.h"
     71          #include "emu/app_emu.h"
     72          
     73          #include "gsn_ncm.h"
     74          #include "gsn_ncm_roam.h"
     75          #include "modules/pwr_mgmt/gsn_pwr_mgmt.h"
     76          
     77          #include "modules/coap/gsn_coap.h"
     78          #include "modules/coap/gsn_coap_impl.h"
     79          
     80          #include "clk_tune/app_clk_tune.h"
     81          #ifdef S2W_IPv6_SUPPORT
     82          #include "modules/dhcpv6_server/gsn_dhcpv6_server.h"
     83          #endif
     84          #include "ext_app/app_ext_flash.h"
     85          #include "main/gsn_br_flashldr.h"
     86          #include "modules/fwup/gsn_fwup.h"
     87          
     88          #include "mqtt_main/mqtt_main.h"
     89          //#include "mqtt/libmqtt.h"
     90          //#include "linked_list/linked_list.h"
     91          //#include "one_wire/one_wire.h"
     92          /**
     93           ******************************************************************************
     94           * @file s2w_general_command.c
     95           * @brief s2w Application command file.
     96           *    This file contains the function implementation for each AT command.
     97           ******************************************************************************/
     98          
     99          /*****************************************************************************
    100            *  Public Variables
    101            ****************************************************************************/
    102          //#define EXTFLASH_DRIVER_TEST
    103          //#define EXT_FLASH_CMD_ENABLE
    104          extern S2W_PROFILE_PARAMS_T profile_params;

   \                                 In section .bss, align 1
    105          UINT8 s2wWepKeyAscii =0;
   \                     s2wWepKeyAscii:
   \   00000000                      DS8 1
    106          extern S2W_EXTFLASH_CMD_T s2wExtFlashCmdTable[6];
    107          #ifdef S2W_SECURITY_WPS_ENABLE
    108          extern UINT32 wpsConnDone;
    109          #endif
    110          extern UINT8 curCid;
    111          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;

   \                                 In section .data, align 4
    112          UINT32 certIndex = S2W_INVALID_CERT_INDEX, certFormat, certFileSize;
   \                     certIndex:
   \   00000000   0xFFFFFFFF         DC32 4294967295
   \                     certFormat:
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     certFileSize:
   \   00000008   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    113          F_FILE *certFile;
   \                     certFile:
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
    114          
    115          
    116          extern GSN_OSAL_SEM_T s2wL2L3ConnectSemaphore;
    117          
    118          extern S2W_CID_T s2wCidList[];
    119          
    120          #ifdef S2W_PING_TRACE
    121          UINT8 s2wPingStarted;
    122          #endif
    123          extern UINT8 s2wUserInitNetOpen;
    124          extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[];
    125          extern S2W_LINK_STATE_T s2wLinkState ;
    126          extern S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle;
    127          extern S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle1;
    128          
    129          extern GSN_OSAL_SEM_T stbyDelaySemaphore;
    130          #ifdef S2W_NCM_SUPPORT_ENABLE
    131          extern S2W_TIMER_T acNcmTimer;
    132          #endif
    133          
    134          
    135          NXD_ADDRESS             DNSv6ServerAddr[2];
    136          UINT32                  DNSv4ServerAddr[2];
    137          UINT8                   S2W_DNS_CLIENT_FALGS;
    138          
    139          #define S2W_DNS_CLIENT_ENABLED          0x01
    140          #define S2W_DNSv6_SERVER_SET            0x02
    141          #define S2W_DNSv4_SERVER_SET            0x04
    142          #define S2W_DNS_REQ_DEF_TIME_OUT        5
    143          #define S2W_DNS_REQ_DEF_RETRIES         3
    144          
    145          
    146          UINT8 stbySuccess=0;

   \                                 In section .data, align 4
    147          UINT32 apModeBeaconIntrl=100;
   \                     apModeBeaconIntrl:
   \   00000000   0x00000064         DC32 100
    148          UINT8 globalUseHRssi=0;
    149          /*__no_init*/ S2W_PROFILE_T s2wCurrent;
    150          
    151          #ifdef S2W_DNS_SERVER_ENABLE
    152          GSN_DNS_SERVER_T dnsServer;
    153          #endif
    154          
    155          #ifdef S2W_DHCP_SERVER_ENABLE
    156          
    157          
    158          UINT8 dhcpServerFlags;

   \                                 In section .noinit, align 8
    159          __no_init GSN_DHCP_SRVR_T dhcpSrvr;
    160          __no_init GSN_DHCP_SRVR_CFG_T dhcpSrvrCfg;
   \                     dhcpSrvrCfg:
   \   00000000                      DS8 48
   \                     dhcpSrvr:
   \   00000030                      DS8 1136

   \                                 In section .bss, align 4
   \                     s2wPingStarted:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
    161          
    162          #endif
    163          
    164          #ifdef S2W_IPv6_SUPPORT
    165          GSN_DHCPv6_SERVER_T serverId;
    166          #endif
    167          
    168          UINT32 S2wL3Wait;
    169          extern GSN_OSAL_SEM_T s2wL2L3ConnectSemaphore;
    170          
    171          
    172          #define HTTP_SEND_CHUNK_SIZE    1000
    173          
    174          /* data structure to hold current wireless info
    175           */
    176          S2W_WLANINFO_T current_wlan_info;
    177          
    178          #ifdef S2W_EMU
    179          /*buffers to for emu*/
    180          __no_init UINT16 s2w_emu_buf1[1000],s2w_emu_buf2[1000],s2w_emu_buf3[1000],s2w_emu_buf4[1000];
    181          UINT32 adcSize = 1000;
    182          
    183          #endif
    184          
    185          #ifdef S2W_PING_TRACE
    186          
    187          PUBLIC GSN_OSAL_QUEUE_T pingThreadMsgQueue;
    188          UINT8 * pingThreadMsgQueueBuf;
    189          
    190          PRIVATE GSN_OSAL_THREAD_TCB_T pingThread;
    191          
    192          UINT8 * pingThreadStack;
    193          UINT32 pingThreadCreated = 0;
   \                     pingThreadCreated:
   \   00000004                      DS8 4

   \                                 In section .bss, align 4
   \                     DNSv6ServerAddr:
   \   00000000                      DS8 40

   \                                 In section .bss, align 4
   \                     S2W_DNS_CLIENT_FALGS:
   \   00000000                      DS8 1
   \                     dhcpServerFlags:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     DNSv4ServerAddr:
   \   00000004                      DS8 8

   \                                 In section .bss, align 1
   \                     stbySuccess:
   \   00000000                      DS8 1

   \                                 In section .bss, align 8
   \                     s2wCurrent:
   \   00000000                      DS8 1016
   \                     current_wlan_info:
   \   000003F8                      DS8 44
   \                     dnsServer:
   \   00000424                      DS8 96

   \                                 In section .bss, align 4
   \                     pingThreadMsgQueueBuf:
   \   00000000                      DS8 4
   \                     pingThreadStack:
   \   00000004                      DS8 4
   \                     pingThreadMsgQueue:
   \   00000008                      DS8 56
   \   00000040                      DS8 180
    194          
    195          #endif
    196          
    197          /*****************************************************************************
    198            *  Private Variables
    199            ****************************************************************************/
    200          
    201          /*   Structure definitions for command table   */
    202          struct S2W_CMD
    203          {
    204              const char *cmd;                /**< Command string */
    205              UINT8 (*process) (UINT8 *ptr);  /**< Command handler */
    206          };
    207          
    208          
    209          /*****************************************************************************
    210            *  Private Definitions
    211            ****************************************************************************/
    212          
    213          
    214              
    215          #define S2W_MAX_CH 11   
    216          extern GSN_OSAL_SEM_T stScanSemaphore;
    217          extern UINT8 s2wAutoConnState ;
    218          
    219          extern VOID
    220          AppMcu_RespTimeoutCb( VOID* context,GSN_SOFT_TMR_HANDLE_T timerHandle );
    221          extern VOID
    222          App_InterfaceStop(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    223          extern VOID
    224          App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    225          extern VOID
    226          App_IfReinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    227          
    228          extern S2W_SCAN_DISPLAY_INFO_T scanDisplayInfo[20];
    229          

   \                                 In section .bss, align 1
    230          UINT8 scanDisplayInfoCount=0,scanDisplayAllCount=0;
   \                     scanDisplayInfoCount:
   \   00000000                      DS8 1
   \                     scanDisplayAllCount:
   \   00000001                      DS8 1
    231          

   \                                 In section .noinit, align 4
    232          __no_init GSN_WDD_SCAN_ENTRY_T s2wScanUserEntryBuff[2];
   \                     s2wScanUserEntryBuff:
   \   00000000                      DS8 1116
    233          
    234          void S2w_getDhcpv6Clientconfig(GSN_NWIF_DHCP_PARAMS_T *dhcpv6Params);
    235          
    236          VOID AppS2w_ConctCbProcess(VOID* ctext,INT32 status);
    237          extern void nx_dns_retry_count_set(NX_DNS *dns_ptr,UINT retries);
    238          
    239          void GsnHeIf_DriverSuspend();
    240          extern INT8 GsnIntTempSen_Get();
    241          
    242          /*****************************************************************************
    243            *  Private Functions
    244            ****************************************************************************/
    245          
    246          
    247          VOID
    248          AppS2wRegisters_Display(const S2W_PROFILE_T *profile);
    249          PRIVATE UINT8
    250          AppS2wCmd_Wmode(UINT8 *ptr);
    251          
    252          PRIVATE UINT8
    253          AppS2wCmd_Wscan(UINT8 *ptr);
    254          
    255          PRIVATE UINT8
    256          AppS2wCmd_Wassoc(UINT8 *ptr);
    257          
    258          
    259          PRIVATE UINT8
    260          AppS2wCmd_Write(UINT8 *ptr);
    261          
    262          PRIVATE UINT8
    263          AppS2wCmd_read(UINT8 *ptr);
    264          
    265          PRIVATE UINT8
    266          AppS2wCmd_Nset(UINT8 *ptr);
    267          
    268          PRIVATE UINT8
    269          AppS2wCmd_Nmac(UINT8 *ptr);
    270          
    271          UINT8
    272          AppS2wCmd_OtaFwupConf(UINT8* ptr);
    273          
    274          UINT8
    275          AppS2wCmd_OtaFwupExtFlashStart(UINT8* ptr);
    276          
    277          UINT8
    278          AppS2wCmd_OtaFwupRollBack(UINT8* ptr);
    279          
    280          #ifdef S2W_UART_ENABLE
    281          PRIVATE UINT8
    282          AppS2wCmd_BaudRate(UINT8 *ptr);
    283          PRIVATE UINT8
    284          AppS2wCmd_UartFifoLevel(UINT8 * ptr);
    285          
    286          #endif
    287          
    288          PRIVATE UINT8
    289          AppS2wCmd_SetDefaultProfile(UINT8 *ptr);
    290          
    291          PRIVATE UINT8
    292          AppS2wCmd_Disconnect(UINT8 *ptr);
    293          
    294          PRIVATE UINT8
    295          AppS2wCmd_Factory(UINT8 *ptr);
    296          
    297          PRIVATE UINT8
    298          AppS2wCmd_Wradio(UINT8 *ptr);
    299          
    300          #ifndef S2W_IP2WIFI_SUPPORT
    301          PRIVATE UINT8
    302          AppS2wCmd_Ndhcp(UINT8 *ptr);
    303          
    304          PRIVATE UINT8
    305          AppS2wCmd_Nstat(UINT8 *ptr);
    306          #endif
    307          UINT8
    308          
    309          
    310          
    311          
    312          AppS2wCmd_FsTest(UINT8 * ptr);
    313          
    314          #if 0
    315          PRIVATE UINT8
    316          AppS2wCmd_SslCertificateOpen(UINT8 *ptr);
    317          #endif
    318          
    319          #ifdef S2W_UART_ENABLE
    320          PRIVATE UINT8
    321          AppS2wCmd_HardFlow(UINT8 *ptr);
    322          #endif
    323          
    324          PUBLIC UINT8
    325          AppS2wCmd_Dgpio(UINT8 *ptr);
    326          
    327          UINT8
    328          AppS2wCmd_reset(UINT8* ptr);
    329          
    330          PUBLIC UINT8
    331          AppS2wCmd_SetSockOp(UINT8 *ptr);
    332          
    333          PUBLIC UINT8
    334          AppS2wCmd_AsyncMsgFmt(UINT8 *ptr);
    335          
    336          extern APP_MAIN_CTX_T appCtx;
    337          extern UINT32 nwConfigSuccess;
    338          
    339          PUBLIC UINT8
    340          AppS2wCmd_RfTestStop (UINT8 *ptr);
    341          PUBLIC UINT8
    342          AppS2wCmd_RfTestStart (UINT8 *ptr);
    343          PUBLIC UINT8
    344          AppS2wCmd_RfTestTxStart(UINT8 *ptr);
    345          PUBLIC UINT8
    346          AppS2wCmd_RfTestTx99Start(UINT8 *ptr);
    347          PUBLIC UINT8
    348          AppS2wCmd_RfTestTx100Start(UINT8 *ptr);
    349          PUBLIC UINT8
    350          AppS2wCmd_RfTestCarrierWaveStart(UINT8 *ptr);
    351          PUBLIC UINT8
    352          AppS2wCmd_RfTestRxStart(UINT8 *ptr);
    353          PUBLIC UINT8
    354          AppS2wCmd_RfTestTxStop (UINT8 *ptr);
    355          PUBLIC UINT8
    356          AppS2wCmd_RfTestRxStop (UINT8 *ptr);
    357          PUBLIC UINT8 AppS2wCmd_WlanCalib (UINT8 *ptr);
    358          
    359          #ifdef S2W_OTP_RDWR_SUPPORT
    360          UINT8
    361          AppS2wCmd_WlanOtpWrite (UINT8 *ptr);
    362          #endif
    363          UINT8
    364          AppS2wCmd_WlanOtpRead (UINT8 *ptr);
    365          
    366          /* private functions used for call back
    367           */
    368          
    369          VOID PRIVATE
    370          s2wApp_ConnectCb(VOID* ctext, INT32 status);
    371          
    372          VOID
    373          AppS2w_WlanRespTmrCb(VOID * context,GSN_SOFT_TMR_HANDLE_T timerHandle);
    374          
    375          VOID DHCP_notify(INT32 status,void *ctx);
    376          
    377          #ifdef S2W_SNTP
    378          UINT8
    379          AppS2wCmd_ntpTimeSet(UINT8 *ptr);
    380          #endif
    381          
    382          PRIVATE UINT8
    383          AppS2wCmd_Weap(UINT8 *ptr);
    384          
    385          PRIVATE UINT8
    386          AppS2wCmd_WeapConf(UINT8 *ptr);
    387          
    388          UINT8
    389          AppS2wCmd_BeaconMissThresholdSet(UINT8 *ptr);
    390          
    391          UINT8
    392          AppS2wCmd_TkipContrMsrStart(UINT8 *ptr);
    393          
    394          UINT8
    395          AppS2wCmd_TkipSeqNumGet(UINT8 *ptr);
    396          
    397          UINT8
    398          AppS2wCmd_WlanStatsGet(UINT8 *ptr);
    399          
    400          UINT8
    401          AppS2wCmd_WlanRecvFiltrSet(UINT8 *ptr);
    402          
    403          UINT8
    404          AppS2wCmd_RtsEnable(UINT8 *ptr);
    405          
    406          UINT8
    407          AppS2wCmd_BlockAckReq(UINT8 *ptr);
    408          
    409          UINT8
    410          AppS2wCmd_AmsduReqt(UINT8 *ptr);
    411          
    412          UINT8
    413          AppS2wCmd_AmpduReq(UINT8 *ptr);
    414          
    415          UINT8
    416          AppS2wCmd_FrameTxFailCntLmitSet(UINT8 *ptr);
    417          
    418          UINT8
    419          AppS2wCmd_SecuritySet(UINT8 *ptr);
    420          
    421          UINT8
    422          AppS2wCmd_Wauth(UINT8 *ptr);
    423          
    424          UINT8
    425          AppS2wCmd_Wwpa(UINT8 *ptr);
    426          
    427          UINT8
    428          AppS2wCmd_WpaPsk(UINT8 *ptr);
    429          
    430          UINT8
    431          AppS2wCmd_Psk(UINT8 *ptr);
    432          
    433          UINT8
    434          AppS2wCmd_Wwep(UINT8 *ptr);
    435          UINT8
    436          AppS2wCmd_WwepConf(UINT8 *ptr);
    437          
    438          UINT8
    439          AppS2wCmad_WsrvrValidationEn(UINT8 *ptr);
    440          
    441          UINT8
    442          AppS2wCmad_WeapTimeChk(UINT8 *ptr);
    443          
    444          VOID
    445          AppS2wHal_PsHibernateRequest(S2W_ALARM_INFO_T *alarm);
    446          
    447          UINT8 AppS2wCmd_Hibernate(UINT8 *ptr);
    448          
    449          #ifdef S2W_COAP_SUPPORT
    450          
    451          typedef struct S2W_COAP_OPTION
    452          {
    453          	UINT8 optionKey;
    454          	char *optionValue;
    455          	struct S2W_COAP_OPTION * next;
    456          }S2W_COAP_OPTION_T;
    457          

   \                                 In section .bss, align 4
    458          S2W_COAP_OPTION_T * optionHead;
   \                     optionHead:
   \   00000000                      DS8 4
    459          
    460          #define COAP_POST "POST"
    461          #define COAP_GET "GET"
    462          #define COAP_CON "CON"
    463          #define COAP_NON "NON"
    464          #define COAP_MAX_RESPONSE_TIMEOUT 60
    465          PRIVATE UINT8
    466          AppS2wCmd_CoapOpen(UINT8 *ptr);
    467          
    468          PRIVATE UINT8
    469          AppS2wCmd_CoapClose(UINT8 *ptr);
    470          
    471          PRIVATE UINT8
    472          AppS2wCmd_CoapSetOption(UINT8 *ptr);
    473          
    474          PRIVATE UINT8
    475          AppS2wCmd_CoapRemoveOption(UINT8 *ptr);
    476          
    477          PRIVATE UINT8
    478          AppS2wCmd_CoapSend(UINT8 *ptr);
    479          
    480          GSN_COAP_CONTEXT_T*
    481          AppS2wHal_CoapHandleGet(UINT8 cid);
    482          
    483          PUBLIC GSN_COAP_CONN_PARAMS_T*
    484          AppS2wHal_CoapParamsGet(UINT8 cid);
    485          #endif
    486          
    487          extern UINT8
    488          AppS2wCmd_MdnsInit(UINT8 *ptr);
    489          #ifdef S2W_IPv6_SUPPORT
    490          extern UINT8
    491          AppS2wCmd_MdnsInitv6(UINT8 *ptr);
    492          #endif
    493          extern UINT8
    494          AppS2wCmd_MdnsDeInit(UINT8 *ptr);
    495          extern UINT8
    496          AppS2wCmd_MdnsHostNameReg(UINT8 *ptr);
    497          extern UINT8
    498          AppS2wCmd_MdnsServiceReg(UINT8 *ptr);
    499          extern UINT8
    500          AppS2wCmd_MdnsHostNmDeReg(UINT8 *ptr);
    501          extern UINT8
    502          AppS2wCmd_MdnsSrvDeReg(UINT8 *ptr);
    503          extern  UINT8
    504          AppS2wCmd_MdnsAnnounce(UINT8 *ptr);
    505          extern UINT8
    506          AppS2wCmd_MdnsAnnounceAll(UINT8 *ptr);
    507          extern UINT8
    508          AppS2wCmd_MdnsSrvcDiscover(UINT8 *ptr);
    509          #if defined (S2W_GSLINK) && defined (S2W_WEB_SERVER)
    510          extern UINT8
    511          AppS2wCmd_WebServer(UINT8* ptr);
    512          #endif
    513          
    514          UINT8
    515          AppS2wCmd_Wphymode(UINT8* ptr);
    516          
    517          #ifdef S2W_IPv6_SUPPORT
    518          
    519          UINT8
    520          AppS2wCmd_Nsetv6(UINT8* ptr);
    521          
    522          UINT8
    523          AppS2wCmd_Ndhcpv6(UINT8 *ptr);
    524          
    525          #ifdef S2W_PING_TRACE
    526          UINT8
    527          AppS2wCmd_Ping(UINT8* ptr);
    528          #endif
    529          UINT8
    530          AppS2wCmd_Ncudpv6(UINT8* ptr);
    531          
    532          UINT8
    533          AppS2wCmd_Nsudpv6(UINT8* ptr);
    534          
    535          UINT8
    536          AppS2wCmd_Nctcpv6(UINT8* ptr);
    537          
    538          UINT8
    539          AppS2wCmd_Nstcpv6(UINT8* ptr);
    540          
    541          UINT8
    542          AppS2wCmd_Dhcpv6Server(UINT8 *ptr);
    543          #endif //S2W_IPv6_SUPPORT
    544          
    545          #ifdef S2W_DNS_CLIENT
    546          
    547          UINT8
    548          AppS2wCmd_DnsLookup(UINT8 *ptr);
    549          
    550          #ifdef S2W_IPv6_SUPPORT
    551          UINT8
    552          AppS2wCmd_DnsLookupv6(UINT8 *ptr);
    553          #endif
    554          UINT8
    555          AppS2wCmd_DnsServerSet(UINT8 *ptr);
    556          
    557          #endif //S2W_DNS_CLIENT
    558          
    559          #ifdef S2W_HTTP_CUSTOM_SUPPORT
    560          extern UINT8
    561          AppS2wCmd_RecvConf(UINT8 *ptr);
    562          #endif
    563          
    564          #ifdef S2W_GSLINK
    565          VOID
    566          AppS2w_HttpdBodyLenSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT32 len);
    567          
    568          VOID
    569          AppS2w_HttpdMethodSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 method);
    570          #endif
    571          
    572          PUBLIC GSN_STATUS
    573          APPS2w_ExtFlashStart( S2W_OTA_FWUP_CONF_T *pOtaFwupConf);
    574          
    575          UINT8
    576          AppS2wCmd_PowerSaveStby(UINT8 *ptr);
    577          
    578          PUBLIC UINT8
    579          AppS2wCmd_NwConnRestore();
    580          
    581          
    582          
    583          extern VOID
    584          AppS2wCmd_GetSecurityString(GSN_WDD_WLAN_CFG_T *WddConf,const char **security );
    585          UINT8
    586          AppS2wCmd_Wauto(UINT8* ptr);
    587          UINT8
    588          AppS2wCmd_Nauto(UINT8* ptr);
    589          
    590          #ifdef S2W_DHCP_SERVER_ENABLE
    591          PUBLIC UINT8
    592          AppS2wCmd_DhcpSrvrConfig(UINT8 *ptr);
    593          
    594          PUBLIC UINT8
    595          AppS2wCmd_DhcpSrvr(UINT8 *ptr);
    596          #endif //S2W_DHCP_SERVER_ENABLE
    597          
    598          
    599          PUBLIC UINT8
    600          AppS2wCmd_IpMulticastJoin(UINT8 *ptr);
    601          
    602          PUBLIC UINT8
    603          AppS2wCmd_IpMulticastLeave(UINT8 *ptr);
    604          
    605          UINT8
    606          AppS2wCmd_SoftFlow(UINT8 *ptr);
    607          
    608          UINT8
    609          AppS2wCmd_ApClientInfoGet(UINT8 *ptr);
    610          
    611          #ifdef S2W_THROUGHPUT_TEST
    612          UINT8
    613          AppS2wCmd_SockTpTest(UINT8 *ptr);
    614          UINT8
    615          AppS2wCmd_SockTpTestStat(UINT8 * ptr);
    616          #endif
    617          
    618          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
    619          
    620          
    621          #ifdef S2W_SECURITY_WPS_ENABLE
    622          PRIVATE UINT8
    623          AppS2wCmd_Wwps(UINT8 *ptr);
    624          #endif
    625          
    626          #ifdef S2W_EMU
    627          PRIVATE UINT8
    628          AppS2wCmd_EmuVer(UINT8 *ptr);
    629          
    630          PRIVATE UINT8
    631          AppS2wCmd_SupportedModules(UINT8 *ptr);
    632          
    633          PRIVATE UINT8
    634          AppS2wCmd_EmuStart(UINT8 *ptr);
    635          
    636          PRIVATE UINT8
    637          AppS2wCmd_EmuStop(UINT8 *ptr);
    638          
    639          PRIVATE UINT8
    640          AppS2wCmd_EmuGetValues(UINT8 *ptr);
    641          
    642          PRIVATE UINT8
    643          AppS2wCmd_EmuGetConf(UINT8 *ptr);
    644          
    645          PRIVATE UINT8
    646          AppS2wCmd_EmuSetConf(UINT8 *ptr);
    647          
    648          PRIVATE UINT8
    649          AppS2wCmd_EmuLoadCtl(UINT8 *ptr);
    650          
    651          PRIVATE UINT8
    652          AppS2wCmd_EmuResetEnergy(UINT8 *ptr);
    653          
    654          PRIVATE UINT8
    655          AppS2wCmd_EmuGetStatus(UINT8 *ptr);
    656          
    657          PRIVATE UINT8
    658          AppS2wCmd_EmuGetInstValues(UINT8 *ptr);
    659          
    660          PRIVATE UINT8
    661          AppS2wCmd_EmuLoadStatus(UINT8 *ptr);
    662          
    663          PRIVATE UINT8
    664          AppS2wCmd_EmuPrint(UINT8 *ptr);
    665          
    666          #endif
    667          
    668          /*Commands for adc*/
    669          
    670          #ifdef S2W_ADC_SUPPORT
    671          #ifndef GS2100 // adc is not there in 2100
    672          PRIVATE UINT8
    673          AppS2wCmd_AdcConf(UINT8 *ptr);
    674          
    675          PRIVATE UINT8
    676          AppS2wCmd_AdcStart(UINT8 *ptr);
    677          
    678          PRIVATE UINT8
    679          AppS2wCmd_AdcRead(UINT8 *ptr);
    680          
    681          PRIVATE UINT8
    682          AppS2wCmd_AdcStop(UINT8 *ptr);
    683          #endif
    684          #endif
    685          
    686          PUBLIC UINT8 
    687          AppS2wCmd_PerstTmrStart(UINT8 *ptr);
    688          PUBLIC UINT8
    689          AppS2wCmd_PerstTmrStop(UINT8 *ptr);
    690          PUBLIC UINT8
    691          AppS2wCmd_PerstTmrDelete(UINT8 *ptr);
    692          PUBLIC UINT8
    693          AppS2wCmd_PerstTmrReStart(UINT8 *ptr);
    694          
    695          #ifdef S2W_ISOTX_SUPPORT
    696          UINT8
    697          AppS2wCmd_IsoTxStart(UINT8 *ptr);
    698          UINT8
    699          AppS2wCmd_IsoTxStop(UINT8 *ptr);
    700          UINT8
    701          AppS2wCmd_IsoTxConfig(UINT8 *ptr);
    702          #endif
    703          
    704          #ifdef S2W_UNASSOC_TXRX_SUPPORT
    705          UINT8
    706          S2w_CmdUnSolicitedTx(UINT8 *ptr);
    707          UINT8
    708          S2w_CmdUnSolicitedRx(UINT8 *ptr);
    709          UINT8
    710          S2w_CmdUnSolicitedRxstop(UINT8 *ptr);
    711          #endif
    712          #ifdef S2W_SNTP
    713          PRIVATE VOID
    714          S2wApp_TimeSyncDoneCb(INT32 msg, VOID* context);
    715          
    716          PRIVATE VOID
    717          AppS2w_sntpTimerCb( VOID* context,
    718              GSN_SOFT_TMR_HANDLE_T timerHandle );
    719          #endif
    720          #ifdef S2W_15DOT4_SUPPORT
    721          UINT8
    722          AppS2wCmd_154Channel(UINT8 *ptr);
    723          
    724          UINT8
    725          AppS2wCmd_154PanId(UINT8 *ptr);
    726          
    727          UINT8
    728          AppS2wCmd_154ShortAddr(UINT8 *ptr);
    729          
    730          UINT8
    731          AppS2wCmd_154ExtendedAddr(UINT8 *ptr);
    732          
    733          UINT8
    734          AppS2wCmd_154RetryCount(UINT8 *ptr);
    735          
    736          UINT8
    737          AppS2wCmd_154JoinPermit(UINT8 *ptr);
    738          
    739          UINT8
    740          AppS2wCmd_154SupreFrmCfg(UINT8 *ptr);
    741          UINT8
    742          AppS2wCmd_154CoordExtndedAddr(UINT8 *ptr);
    743          UINT8
    744          AppS2wCmd_154CoordShortAddr(UINT8 *ptr);
    745          
    746          UINT8
    747          AppS2wCmd_154ScanNetwork(UINT8 *ptr);
    748          
    749          UINT8
    750          AppS2wCmd_154JoinNetwork(UINT8 *ptr);
    751          
    752          UINT8
    753          AppS2wCmd_154AddNode(UINT8 *ptr);
    754          
    755          UINT8
    756          AppS2wCmd_154StartNetwork(UINT8 *ptr);
    757          
    758          UINT8
    759          AppS2wCmd_154LeaveNetwork(UINT8 *ptr);
    760          
    761          UINT8
    762          AppS2wCmd_154PollData(UINT8 *ptr);
    763          
    764          UINT8
    765          AppS2wCmd_154DataSend(UINT8 *ptr);
    766          
    767          UINT8
    768          AppS2wCmd_154DataPurge(UINT8 *ptr);
    769          UINT8
    770          AppS2wCmd_154RxEnable(UINT8 *ptr);
    771          PUBLIC UINT8 AppS2wCmd_I154RxTest (UINT8 *ptr);
    772          PUBLIC UINT8 AppS2wCmd_I154RxTestStop (UINT8 *ptr);
    773          PUBLIC UINT8 AppS2wCmd_I154TxTest (UINT8 *ptr);
    774          UINT8
    775          AppS2wCmd_154GTSReq(UINT8 *ptr);
    776          UINT8
    777          AppS2wCmd_154SetReq(UINT8 *ptr);
    778          UINT8
    779          AppS2wCmd_154GetReq(UINT8 *ptr);
    780          UINT8
    781          AppS2wCmd_154SyncReq(UINT8 *ptr);
    782          #ifdef GSN_802_15_4_TEST_SUPPORT
    783          UINT8 AppS2wCmd_154TmrReq(UINT8 *ptr);
    784          UINT8
    785          AppS2wCmd_154GenericTest(UINT8 *ptr);
    786          #endif
    787          #endif
    788          
    789          #ifdef S2W_EXTFLASH_DRIVER_TEST
    790          UINT8
    791          AppS2wCmd_ExtFlashInit(UINT8* ptr);
    792          
    793          UINT8
    794          AppS2wCmd_ExtFlashWrite(UINT8* ptr);
    795          
    796          UINT8
    797          AppS2wCmd_ExtFlashRead(UINT8* ptr);
    798          
    799          UINT8
    800          AppS2wCmd_ExtFlashErase(UINT8* ptr);
    801          
    802          UINT8
    803          AppS2wCmd_ExtFlashChipErase(UINT8* ptr);
    804          
    805          UINT8
    806          AppS2wCmd_ExtFlashSpiConf(UINT8* ptr);
    807          
    808          #endif
    809          
    810          #if defined(S2W_DTLS_CLIENT_SUPPORT)
    811          UINT8
    812          AppS2wCmd_DTSLClose(UINT8 *ptr);
    813          
    814          UINT8
    815          AppS2wCmd_DTSLOpen(UINT8 *ptr);
    816          #endif
    817          
    818          UINT8
    819          S2wRateValidation(UINT32 value);
    820          
    821          extern UINT8
    822          AppS2wCmd_WlanStaPsCfg(UINT8 *ptr);
    823          
    824          extern  UINT8
    825          AppS2wCmd_WlanApPsCfg(UINT8 *ptr);
    826          
    827          UINT8
    828          AppS2wCmd_ieeePsPollSet(UINT8 *ptr);
    829          UINT8
    830          S2w_CmdPsPollIntervelset(UINT8 *ptr);
    831          
    832          UINT8
    833          AppS2wCmd_ArpEntrySet(UINT8 *ptr);
    834          
    835          UINT8
    836          AppS2wCmd_ArpEntryDelete(UINT8 *ptr);
    837          
    838          UINT8
    839          AppS2wCmd_ArpAutoSet(UINT8 *ptr);
    840          
    841          #ifdef S2W_I2C_SUPPORT
    842          /*Commands to test I2C*/
    843          PRIVATE UINT8
    844          AppS2wCmd_I2cConf(UINT8 *ptr);
    845          
    846          PRIVATE UINT8
    847          AppS2wCmd_I2cStart(UINT8 *ptr);
    848          
    849          PRIVATE UINT8
    850          AppS2wCmd_I2cWrite(UINT8 *ptr);
    851          
    852          PRIVATE UINT8
    853          AppS2wCmd_I2cRead(UINT8 *ptr);
    854          
    855          PRIVATE UINT8
    856          AppS2wCmd_I2cStop(UINT8 *ptr);
    857          #endif
    858          UINT8
    859          AppS2wCmd_BaBitMapSet(UINT8* ptr);
    860          
    861          UINT8
    862          AppS2wCmd_RadioStateGet(UINT8* ptr);
    863          
    864          UINT8 AppS2wCmd_ZipScan( UINT8 *ptr );
    865          UINT8 AppS2wCmd_ZipStart( UINT8 *ptr );
    866          UINT8 AppS2wCmd_ZipStop( UINT8 *ptr );
    867          UINT8 AppS2wCmd_ZipSetMacAddr( UINT8 *ptr );
    868          
    869          #ifdef S2W_ADC_SUPPORT
    870          UINT8 App_ClkTuneCmd(UINT8 *ptr);
    871          #endif
    872          
    873          #ifdef GSN_MEM_TRACE
    874          PUBLIC UINT8
    875          AppS2wCmd_memTraceGet(UINT8 *ptr);
    876          #endif
    877          
    878          UINT8
    879          AppS2wCmd_SetAssocTimeout(UINT8 *ptr);
    880          
    881          INT32
    882          App_TemperatureGet();
    883          
    884          UINT8 
    885          AppS2wCmd_TempGet(UINT8 *ptr);
    886          
    887          UINT8 
    888          AppS2wCmd_TempReadStart(UINT8 *ptr);
    889          
    890          UINT8
    891          AppS2wCmd_HwCryptoEn(UINT8 *ptr);
    892          
    893          UINT8
    894          AppS2wCmd_GratArpSend(UINT8 *ptr);
    895          
    896          PUBLIC GSN_STATUS_T
    897          AppTls_TempOrLightGet(UINT32* tlsTempSensorData);
    898          
    899          typedef enum S2W_ERROR_CODE
    900          {
    901          	S2W_ERROR_CODE_AP_NOT_FOUND = 1,
    902          	S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT = 2,
    903          	S2W_ERROR_CODE_WPA_AUTH_FAILURE = 3,
    904          }S2W_ERROR_CODE_T;
    905          const char *S2WError_List[] =
    906          {
    907          	"\r\nNO ERROR",
    908          	"\r\nSSID NOT FOUND",
    909          	"\r\nWLAN CONNECT ERROR",
    910          	"\r\nWPA AUTH FAIL",
    911          };
    912          
    913          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
    914          
    915          UINT8
    916          AppS2wCmd_SslConfig(UINT8 *ptr);
    917          
    918          #endif
    919          /**
    920           ******************************************************************
    921           * @ingroup S2w-Application
    922           * @brief Table contains all the Serial2WiFi Host commands and
    923           *        corresponding call backs to process the command.This array
    924           *        can be exteded to add more host commands.
    925           ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    926          PRIVATE const struct S2W_CMD s2wCmdTable[] =
   \                     s2wCmdTable:
   \   00000000   0x........         DC32 `?<Constant "+WA=">`, AppS2wCmd_Wassoc, `?<Constant "+WPHYMODE=">`
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 AppS2wCmd_Wphymode, `?<Constant "+BCONMISSTHRHLD=">`
   \              0x........   
   \   00000014   0x........         DC32 AppS2wCmd_BeaconMissThresholdSet, `?<Constant "+TKIPCNTRMSR=">`
   \              0x........   
   \   0000001C   0x........         DC32 AppS2wCmd_TkipContrMsrStart, `?<Constant "+TKIPSEQSET=">`
   \              0x........   
   \   00000024   0x........         DC32 AppS2wCmd_TkipSeqNumGet, `?<Constant "+WLANSTATS">`
   \              0x........   
   \   0000002C   0x........         DC32 AppS2wCmd_WlanStatsGet, `?<Constant "+RXFILTER=">`
   \              0x........   
   \   00000034   0x........         DC32 AppS2wCmd_WlanRecvFiltrSet, `?<Constant "+WRTS=">`
   \              0x........   
   \   0000003C   0x........         DC32 AppS2wCmd_RtsEnable, `?<Constant "+WBLOCKACK=">`
   \              0x........   
   \   00000044   0x........         DC32 AppS2wCmd_BlockAckReq, `?<Constant "+WAMSDU=">`
   \              0x........   
   \   0000004C   0x........         DC32 AppS2wCmd_AmsduReqt, `?<Constant "+WAMPDU=">`, AppS2wCmd_AmpduReq
   \              0x........   
   \              0x........   
   \   00000058   0x........         DC32 `?<Constant "+TXFAILLMT=">`, AppS2wCmd_FrameTxFailCntLmitSet
   \              0x........   
   \   00000060   0x........         DC32 `?<Constant "+NDHCP=">`, AppS2wCmd_Ndhcp, `?<Constant "+NSTAT=">`
   \              0x........   
   \              0x........   
   \   0000006C   0x........         DC32 AppS2wCmd_Nstat, `?<Constant "+CID=">`, AppS2wCmd_CidInfo
   \              0x........   
   \              0x........   
   \   00000078   0x........         DC32 `?<Constant "+NCLOSEALL">`, AppS2wCmd_Ncloseall
   \              0x........   
   \   00000080   0x........         DC32 `?<Constant "+NCLOSE=">`, AppS2wCmd_Nclose
   \              0x........   
   \   00000088   0x........         DC32 `?<Constant "+WRXACTIVE=">`, AppS2wCmd_Wradio
   \              0x........   
   \   00000090   0x........         DC32 `?<Constant "+WRETRY=">`, AppS2wCmd_Wretry
   \              0x........   
   \   00000098   0x........         DC32 `?<Constant "+NCTCP=">`, AppS2wCmd_Nctcp, `?<Constant "+NCUDP=">`
   \              0x........   
   \              0x........   
   \   000000A4   0x........         DC32 AppS2wCmd_Ncudp, `?<Constant "+NSTCP=">`, AppS2wCmd_Nstcp
   \              0x........   
   \              0x........   
   \   000000B0   0x........         DC32 `?<Constant "+NSUDP=">`, AppS2wCmd_Nsudp
   \              0x........   
   \   000000B8   0x........         DC32 `?<Constant "+MDNSSTART">`, AppS2wCmd_MdnsInit
   \              0x........   
   \   000000C0   0x........         DC32 `?<Constant "+MDNSSTOP">`, AppS2wCmd_MdnsDeInit
   \              0x........   
   \   000000C8   0x........         DC32 `?<Constant "+MDNSANNOUNCE">`, AppS2wCmd_MdnsAnnounceAll
   \              0x........   
   \   000000D0   0x........         DC32 `?<Constant "+MDNSHNREG=">`, AppS2wCmd_MdnsHostNameReg
   \              0x........   
   \   000000D8   0x........         DC32 `?<Constant "+MDNSSRVREG=">`, AppS2wCmd_MdnsServiceReg
   \              0x........   
   \   000000E0   0x........         DC32 `?<Constant "+MDNSSD=">`, AppS2wCmd_MdnsSrvcDiscover
   \              0x........   
   \   000000E8   0x........         DC32 `?<Constant "+MDNSHNDEREG=">`, AppS2wCmd_MdnsHostNmDeReg
   \              0x........   
   \   000000F0   0x........         DC32 `?<Constant "+MDNSSRVDEREG=">`, AppS2wCmd_MdnsSrvDeReg
   \              0x........   
   \   000000F8   0x........         DC32 `?<Constant "+NXSETSOCKOPT=">`, AppS2wCmd_SetSockOp
   \              0x........   
   \   00000100   0x........         DC32 `?<Constant "+NMAC=">`, AppS2wCmd_Nmac, `?<Constant "+WSEC=">`
   \              0x........   
   \              0x........   
   \   0000010C   0x........         DC32 AppS2wCmd_SecuritySet, `?<Constant "+WAUTH=">`, AppS2wCmd_Wauth
   \              0x........   
   \              0x........   
   \   00000118   0x........         DC32 `?<Constant "+WWPA=">`, AppS2wCmd_Wwpa, `?<Constant "+WPAPSK=">`
   \              0x........   
   \              0x........   
   \   00000124   0x........         DC32 AppS2wCmd_WpaPsk, `?<Constant "+WPSK=">`, AppS2wCmd_Psk
   \              0x........   
   \              0x........   
   \   00000130   0x........         DC32 `?<Constant "+WWEPCONF=">`, AppS2wCmd_WwepConf
   \              0x........   
   \   00000138   0x........         DC32 `?<Constant "+WWEP">`, AppS2wCmd_Wwep
   \              0x........   
   \   00000140   0x........         DC32 `?<Constant "+WSYNCINTRL=">`, S2w_CmdSyncLossIntrvlSet
   \              0x........   
   \   00000148   0x........         DC32 `?<Constant "+WSTATUS">`, AppS2wCmd_Wstatus, `?<Constant "+WST=">`
   \              0x........   
   \              0x........   
   \   00000154   0x........         DC32 AppS2wCmd_scanTimeSet, `?<Constant "+WS">`, AppS2wCmd_Wscan
   \              0x........   
   \              0x........   
   \   00000160   0x........         DC32 `?<Constant "+NSET=">`, AppS2wCmd_Nset, `?<Constant "+WM=">`
   \              0x........   
   \              0x........   
   \   0000016C   0x........         DC32 AppS2wCmd_Wmode, `?<Constant "+WRXPS=">`, AppS2wCmd_PowerSave
   \              0x........   
   \              0x........   
   \   00000178   0x........         DC32 `?<Constant "+WIEEEPSPOLL=">`, AppS2wCmd_ieeePsPollSet
   \              0x........   
   \   00000180   0x........         DC32 `?<Constant "+WP=">`, AppS2wCmd_Wpower, `?<Constant "+WD">`
   \              0x........   
   \              0x........   
   \   0000018C   0x........         DC32 AppS2wCmd_Disconnect, `?<Constant "+WRSSI=">`, AppS2wCmd_Wrssi
   \              0x........   
   \              0x........   
   \   00000198   0x........         DC32 `?<Constant "+WRATE=">`, AppS2wCmd_Wrate, `?<Constant "+WAPSM=">`
   \              0x........   
   \              0x........   
   \   000001A4   0x........         DC32 AppS2wCmd_AssocPSModeSet, `?<Constant "+MCSTSET=">`
   \              0x........   
   \   000001AC   0x........         DC32 AppS2wCmd_McastRecvSet, `?<Constant "+WIEEEPSPOLL=">`
   \              0x........   
   \   000001B4   0x........         DC32 AppS2wCmd_ieeePsPollSet, `?<Constant "+NARP=">`
   \              0x........   
   \   000001BC   0x........         DC32 AppS2wCmd_ArpEntryGet, `?<Constant "+NARPCHACHEEN=">`
   \              0x........   
   \   000001C4   0x........         DC32 AppS2wCmd_ArpCacheEn, `?<Constant "+NARPCHACHEDEL">`
   \              0x........   
   \   000001CC   0x........         DC32 AppS2wCmd_ArpCacheDel, `?<Constant "+NARPSET=">`
   \              0x........   
   \   000001D4   0x........         DC32 AppS2wCmd_ArpEntrySet, `?<Constant "+NARPDELETE=">`
   \              0x........   
   \   000001DC   0x........         DC32 AppS2wCmd_ArpEntryDelete, `?<Constant "+NARPAUTO=">`
   \              0x........   
   \   000001E4   0x........         DC32 AppS2wCmd_ArpAutoSet, `?<Constant "+srvvalidationen=">`
   \              0x........   
   \   000001EC   0x........         DC32 AppS2wCmad_WsrvrValidationEn, `?<Constant "+WEAPTIMECHK=">`
   \              0x........   
   \   000001F4   0x........         DC32 AppS2wCmad_WeapTimeChk, `?<Constant "B=">`, AppS2wCmd_BaudRate
   \              0x........   
   \              0x........   
   \   00000200   0x........         DC32 `?<Constant "+UARTFLVL=">`, AppS2wCmd_UartFifoLevel
   \              0x........   
   \   00000208   0x........         DC32 `?<Constant "&R">`, AppS2wCmd_HardFlow, `?<Constant "&K">`
   \              0x........   
   \              0x........   
   \   00000214   0x........         DC32 AppS2wCmd_SoftFlow, `?<Constant "&F">`, AppS2wCmd_Factory
   \              0x........   
   \              0x........   
   \   00000220   0x........         DC32 `?<Constant "&V">`, AppS2wCmd_ConfigOutput, `?<Constant "&W">`
   \              0x........   
   \              0x........   
   \   0000022C   0x........         DC32 AppS2wCmd_Write, `?<Constant "Z">`, AppS2wCmd_read
   \              0x........   
   \              0x........   
   \   00000238   0x........         DC32 `?<Constant "&Y">`, AppS2wCmd_SetDefaultProfile, `?<Constant "S">`
   \              0x........   
   \              0x........   
   \   00000244   0x........         DC32 AppS2wCmd_Settings, `?<Constant "E">`, AppS2wCmd_Echo
   \              0x........   
   \              0x........   
   \   00000250   0x........         DC32 `?<Constant "V">`, AppS2wCmd_Verbose, `?<Constant "I">`
   \              0x........   
   \              0x........   
   \   0000025C   0x........         DC32 AppS2wCmd_IdOutput, `?<Constant "A">`, AppS2wCmd_AutoConnect
   \              0x........   
   \              0x........   
   \   00000268   0x........         DC32 `?<Constant "H">`, AppS2wCmd_Disconnect, `?<Constant "C">`
   \              0x........   
   \              0x........   
   \   00000274   0x........         DC32 AppS2wCmd_Acmode, `?<Constant "O">`, AppS2wCmd_GoOnline
   \              0x........   
   \              0x........   
   \   00000280   0x........         DC32 `?<Constant "+VER=">`, App2wCmd_Version, `?<Constant "+MCSTSET=">`
   \              0x........   
   \              0x........   
   \   0000028C   0x........         DC32 AppS2wCmd_McastRecvSet, `?<Constant "+BDATA=">`
   \              0x........   
   \   00000294   0x........         DC32 S2w_CmdBulkDataState, `?<Constant "+RESET">`, AppS2wCmd_reset
   \              0x........   
   \              0x........   
   \   000002A0   0x........         DC32 `?<Constant "+APCONF=">`, AppS2wCmd_ApConf
   \              0x........   
   \   000002A8   0x........         DC32 `?<Constant "+APCLIENTINFO=">`, AppS2wCmd_ApClientInfoGet
   \              0x........   
   \   000002B0   0x........         DC32 `?<Constant "+L2CONFIG=">`, AppS2w_CmdL2ConfigSet
   \              0x........   
   \   000002B8   0x........         DC32 `?<Constant "+NTIMESYNC=">`, AppS2wCmd_ntpTimeSet
   \              0x........   
   \   000002C0   0x........         DC32 `?<Constant "+DNS=">`, AppS2wCmd_Dns, `?<Constant "+DHCPSRVR=">`
   \              0x........   
   \              0x........   
   \   000002CC   0x........         DC32 AppS2wCmd_DhcpSrvr, `?<Constant "+DHCPSRVRCFG=">`
   \              0x........   
   \   000002D4   0x........         DC32 AppS2wCmd_DhcpSrvrConfig, `?<Constant "+SETTIME=">`
   \              0x........   
   \   000002DC   0x........         DC32 AppS2wCmd_SystemTimeSet, `?<Constant "+GETTIME=">`
   \              0x........   
   \   000002E4   0x........         DC32 AppS2wCmd_SystemTimeGet, `?<Constant "+WWPS=">`, AppS2wCmd_Wwps
   \              0x........   
   \              0x........   
   \   000002F0   0x........         DC32 `?<Constant "+TCERTADD=">`, AppS2wCmd_SslCertificateAdd
   \              0x........   
   \   000002F8   0x........         DC32 `?<Constant "+TCERTDEL=">`, AppS2wCmd_SslCertificateDelete
   \              0x........   
   \   00000300   0x........         DC32 `?<Constant "+WEAP=">`, AppS2wCmd_Weap, `?<Constant "+WEAPCONF=">`
   \              0x........   
   \              0x........   
   \   0000030C   0x........         DC32 AppS2wCmd_WeapConf, `?<Constant "+HTTPOPEN=">`
   \              0x........   
   \   00000314   0x........         DC32 AppS2wCmd_HttpClientOpen, `?<Constant "+HTTPCLOSE=">`
   \              0x........   
   \   0000031C   0x........         DC32 AppS2wCmd_HttpClientClose, `?<Constant "+HTTPCONF=">`
   \              0x........   
   \   00000324   0x........         DC32 AppS2wCmd_HttpClientConfig, `?<Constant "+HTTPCONFDEL=">`
   \              0x........   
   \   0000032C   0x........         DC32 AppS2wCmd_HttpClientConfigDel, `?<Constant "+HTTPSEND=">`
   \              0x........   
   \   00000334   0x........         DC32 AppS2wCmd_HttpClientSend, `?<Constant "+SOTAFWUPCONF=">`
   \              0x........   
   \   0000033C   0x........         DC32 AppS2wCmd_OtaFwupConf, `?<Constant "+SOTAFWUPSTART">`
   \              0x........   
   \   00000344   0x........         DC32 AppS2wCmd_OtaFwupExtFlashStart, `?<Constant "+SOTAFWUPROLLBACK">`
   \              0x........   
   \   0000034C   0x........         DC32 AppS2wCmd_OtaFwupRollBack, `?<Constant "+WAUTO=">`
   \              0x........   
   \   00000354   0x........         DC32 AppS2wCmd_Wauto, `?<Constant "+NAUTO=">`, AppS2wCmd_Nauto
   \              0x........   
   \              0x........   
   \   00000360   0x........         DC32 `?<Constant "+PSDPSLEEP">`, AppS2wCmd_PowerSaveDpsleep
   \              0x........   
   \   00000368   0x........         DC32 `?<Constant "+PING=">`, AppS2wCmd_Ping
   \              0x........   
   \   00000370   0x........         DC32 `?<Constant "+MQTT_PUBLISH">`, App2wCmd_mqtt_publish
   \              0x........   
   \   00000378   0x........         DC32 `?<Constant "+DNSSET=">`, AppS2wCmd_DnsServerSet
   \              0x........   
   \   00000380   0x........         DC32 `?<Constant "+DNSLOOKUP=">`, AppS2wCmd_DnsLookup
   \              0x........   
   \   00000388   0x........         DC32 `?<Constant "+WREGDOMAIN=">`, AppS2wCmd_RegDomainSet
   \              0x........   
   \   00000390   0x........         DC32 `?<Constant "+SSLOPEN=">`, AppS2wCmd_SSLOpen
   \              0x........   
   \   00000398   0x........         DC32 `?<Constant "+SSLCLOSE=">`, AppS2wCmd_SSLClose
   \              0x........   
   \   000003A0   0x........         DC32 `?<Constant "+SSLCONF=">`, AppS2wCmd_SslConfig
   \              0x........   
   \   000003A8   0x........         DC32 `?<Constant "+WRFTESTSTART">`, AppS2wCmd_RfTestStart
   \              0x........   
   \   000003B0   0x........         DC32 `?<Constant "+WRFTESTSTOP">`, AppS2wCmd_RfTestStop
   \              0x........   
   \   000003B8   0x........         DC32 `?<Constant "+WFRAMETXTEST=">`, AppS2wCmd_RfTestTxStart
   \              0x........   
   \   000003C0   0x........         DC32 `?<Constant "+WTX99TEST=">`, AppS2wCmd_RfTestTx99Start
   \              0x........   
   \   000003C8   0x........         DC32 `?<Constant "+WTX100TEST=">`, AppS2wCmd_RfTestTx100Start
   \              0x........   
   \   000003D0   0x........         DC32 `?<Constant "+WCARWAVTEST=">`, AppS2wCmd_RfTestCarrierWaveStart
   \              0x........   
   \   000003D8   0x........         DC32 `?<Constant "+WTXSTOP=">`, AppS2wCmd_RfTestTxStop
   \              0x........   
   \   000003E0   0x........         DC32 `?<Constant "+WRXTEST=">`, AppS2wCmd_RfTestRxStart
   \              0x........   
   \   000003E8   0x........         DC32 `?<Constant "+WRXSTOP">`, AppS2wCmd_RfTestRxStop
   \              0x........   
   \   000003F0   0x........         DC32 `?<Constant "+WCALIB=">`, AppS2wCmd_WlanCalib
   \              0x........   
   \   000003F8   0x........         DC32 `?<Constant "+WOTPRD=">`, AppS2wCmd_WlanOtpRead
   \              0x........   
   \   00000400   0x........         DC32 `?<Constant "+AOTPRD=">`, AppS2wCmd_AppOtpRead
   \              0x........   
   \   00000408   0x........         DC32 `?<Constant "+WEBPROV=">`, APPS2wCmd_WebProv
   \              0x........   
   \   00000410   0x........         DC32 `?<Constant "+WEBPROVSTOP">`, APPS2wCmd_WebProvStop
   \              0x........   
   \   00000418   0x........         DC32 `?<Constant "+NURIREDIR=">`, APPS2wCmd_AddRedirURI
   \              0x........   
   \   00000420   0x........         DC32 `?<Constant "+WEBSERVER=">`, AppS2wCmd_WebServer
   \              0x........   
   \   00000428   0x........         DC32 `?<Constant "+URIRECV=">`, AppS2wCmd_CfgUri
   \              0x........   
   \   00000430   0x........         DC32 `?<Constant "+XMLSEND=">`, AppS2wCmd_XmlSend
   \              0x........   
   \   00000438   0x........         DC32 `?<Constant "+XMLPARSE=">`, AppS2wCmd_XmlParseEnable
   \              0x........   
   \   00000440   0x........         DC32 `?<Constant "+PSSTBY=">`, AppS2wCmd_PowerSaveStby
   \              0x........   
   \   00000448   0x........         DC32 `?<Constant "+STORENWCONN">`, AppS2wCmd_NwConnStore
   \              0x........   
   \   00000450   0x........         DC32 `?<Constant "+RESTORENWCONN">`, AppS2wCmd_NwConnRestore
   \              0x........   
   \   00000458   0x........         DC32 `?<Constant "+HIBERNATE=">`, AppS2wCmd_Hibernate
   \              0x........   
   \   00000460   0x........         DC32 `?<Constant "+NCMAUTO=">`, AppS2wCmd_NcmAuto
   \              0x........   
   \   00000468   0x........         DC32 `?<Constant "+NCMAUTOCONF=">`, AppS2wCmd_NcmAutoConf
   \              0x........   
   \   00000470   0x........         DC32 `?<Constant "+ASYNCMSGFMT=">`, AppS2wCmd_AsyncMsgFmt
   \              0x........   
   \   00000478   0x........         DC32 `?<Constant "+NIPMULTICASTJOIN=">`, AppS2wCmd_IpMulticastJoin
   \              0x........   
   \   00000480   0x........         DC32 `?<Constant "+NIPMULTICASTLEAVE=">`, AppS2wCmd_IpMulticastLeave
   \              0x........   
   \   00000488   0x........         DC32 `?<Constant "+DGPIO=">`, AppS2wCmd_Dgpio
   \              0x........   
   \   00000490   0x........         DC32 `?<Constant "+UNSOLICITEDTX=">`, S2w_CmdUnSolicitedTx
   \              0x........   
   \   00000498   0x........         DC32 `?<Constant "+UNSOLICITEDRX=">`, S2w_CmdUnSolicitedRx
   \              0x........   
   \   000004A0   0x........         DC32 `?<Constant "+UNSOLICITEDRXSTOP">`, S2w_CmdUnSolicitedRxstop
   \              0x........   
   \   000004A8   0x........         DC32 `?<Constant "+UAMCCA=">`, S2w_CmdUnSolicitedCcaConf
   \              0x........   
   \   000004B0   0x........         DC32 `?<Constant "+adcconf=">`, AppS2wCmd_AdcConf
   \              0x........   
   \   000004B8   0x........         DC32 `?<Constant "+adcstart">`, AppS2wCmd_AdcStart
   \              0x........   
   \   000004C0   0x........         DC32 `?<Constant "+adcread=">`, AppS2wCmd_AdcRead
   \              0x........   
   \   000004C8   0x........         DC32 `?<Constant "+adcstop">`, AppS2wCmd_AdcStop
   \              0x........   
   \   000004D0   0x........         DC32 `?<Constant "+EXFLASHINIT=">`, AppS2wCmd_ExtFlashInit
   \              0x........   
   \   000004D8   0x........         DC32 `?<Constant "+EXFLASHWRITE=">`, AppS2wCmd_ExtFlashWrite
   \              0x........   
   \   000004E0   0x........         DC32 `?<Constant "+EXFLASHREAD=">`, AppS2wCmd_ExtFlashRead
   \              0x........   
   \   000004E8   0x........         DC32 `?<Constant "+EXFLASHERASE=">`, AppS2wCmd_ExtFlashErase
   \              0x........   
   \   000004F0   0x........         DC32 `?<Constant "+EXFLASHCERASE">`, AppS2wCmd_ExtFlashChipErase
   \              0x........   
   \   000004F8   0x........         DC32 `?<Constant "+EXFLASHSPICONF=">`, AppS2wCmd_ExtFlashSpiConf
   \              0x........   
   \   00000500   0x........         DC32 `?<Constant "+WSTAPSCFG=">`, AppS2wCmd_WlanStaPsCfg
   \              0x........   
   \   00000508   0x........         DC32 `?<Constant "+WAPPSCFG=">`, AppS2wCmd_WlanApPsCfg
   \              0x........   
   \   00000510   0x........         DC32 `?<Constant "+PSPOLLINTRL=">`, S2w_CmdPsPollIntervelset
   \              0x........   
   \   00000518   0x........         DC32 `?<Constant "+WKEEPALIVE=">`, S2w_CmdPsPollIntervelset
   \              0x........   
   \   00000520   0x........         DC32 `?<Constant "+PWMSTART=">`, AppS2wCmd_PwmStart
   \              0x........   
   \   00000528   0x........         DC32 `?<Constant "+PWMSTOP=">`, AppS2wCmd_PwmStop
   \              0x........   
   \   00000530   0x........         DC32 `?<Constant "+PWMCNTRL=">`, AppS2wCmd_PwmCtrl
   \              0x........   
   \   00000538   0x........         DC32 `?<Constant "+MEMREAD=">`, AppS2wCmd_MemRead
   \              0x........   
   \   00000540   0x........         DC32 `?<Constant "+MEMWRITE=">`, AppS2wCmd_MemWrite
   \              0x........   
   \   00000548   0x........         DC32 `?<Constant "+LOGLVL=">`, AppS2wCmd_LogLevelSet
   \              0x........   
   \   00000550   0x........         DC32 `?<Constant "+BCHKSTRT=">`, AppS2wCmd_BattCheckStart
   \              0x........   
   \   00000558   0x........         DC32 `?<Constant "+BATTVALGET">`, AppS2wCmd_BattValueGet
   \              0x........   
   \   00000560   0x........         DC32 `?<Constant "+BCHK=">`, AppS2wCmd_BattCheckSet
   \              0x........   
   \   00000568   0x........         DC32 `?<Constant "+BCHKSTOP">`, AppS2wCmd_BattCheckStop
   \              0x........   
   \   00000570   0x........         DC32 `?<Constant "+BATTLVLSET=">`, AppS2wCmd_BattLvlSet
   \              0x........   
   \   00000578   0x........         DC32 `?<Constant "+CLKTUNE=">`, App_ClkTuneCmd
   \              0x........   
   \   00000580   0x........         DC32 `?<Constant "+COAPOPEN=">`, AppS2wCmd_CoapOpen
   \              0x........   
   \   00000588   0x........         DC32 `?<Constant "+COAPSENDRECIEVE=">`, AppS2wCmd_CoapSend
   \              0x........   
   \   00000590   0x........         DC32 `?<Constant "+COAPCLOSE=">`, AppS2wCmd_CoapClose
   \              0x........   
   \   00000598   0x........         DC32 `?<Constant "+COAPOPTCONF=">`, AppS2wCmd_CoapSetOption
   \              0x........   
   \   000005A0   0x........         DC32 `?<Constant "+COAPOPTCONFDEL=">`, AppS2wCmd_CoapRemoveOption
   \              0x........   
   \   000005A8   0x........         DC32 `?<Constant "+WBACKEN=">`, AppS2wCmd_BaBitMapSet
   \              0x........   
   \   000005B0   0x........         DC32 `?<Constant "+WRADIOSTATE=">`, AppS2wCmd_RadioStateGet
   \              0x........   
   \   000005B8   0x........         DC32 `?<Constant "+WASSOCCONF=">`, AppS2wCmd_SetAssocTimeout
   \              0x........   
   \   000005C0   0x........         DC32 `?<Constant "+TEMPVALGET=">`, AppS2wCmd_TempGet
   \              0x........   
   \   000005C8   0x........         DC32 `?<Constant "+WTEMPREAD=">`, AppS2wCmd_TempReadStart
   \              0x........   
   \   000005D0   0x........         DC32 `?<Constant "+CRYPTOEN=">`, AppS2wCmd_HwCryptoEn
   \              0x........   
   \   000005D8   0x........         DC32 `?<Constant "+GRATARP">`, AppS2wCmd_GratArpSend
   \              0x........   
    927          {
    928              {"+WA=",        AppS2wCmd_Wassoc},
    929              {"+WPHYMODE=", AppS2wCmd_Wphymode},
    930              {"+BCONMISSTHRHLD=",   AppS2wCmd_BeaconMissThresholdSet},
    931              {"+TKIPCNTRMSR=",      AppS2wCmd_TkipContrMsrStart},
    932              {"+TKIPSEQSET=",   AppS2wCmd_TkipSeqNumGet},
    933              {"+WLANSTATS", AppS2wCmd_WlanStatsGet},
    934              {"+RXFILTER=",  AppS2wCmd_WlanRecvFiltrSet},
    935              {"+WRTS=",      AppS2wCmd_RtsEnable},
    936              {"+WBLOCKACK=",   AppS2wCmd_BlockAckReq},
    937              {"+WAMSDU=",     AppS2wCmd_AmsduReqt},
    938              {"+WAMPDU=",     AppS2wCmd_AmpduReq},
    939              {"+TXFAILLMT=", AppS2wCmd_FrameTxFailCntLmitSet},
    940          #ifndef S2W_IP2WIFI_SUPPORT
    941              {"+NDHCP=",     AppS2wCmd_Ndhcp},
    942              {"+NSTAT=",     AppS2wCmd_Nstat},
    943              {"+CID=",       AppS2wCmd_CidInfo},
    944              {"+NCLOSEALL",  AppS2wCmd_Ncloseall},
    945              {"+NCLOSE=",    AppS2wCmd_Nclose},
    946          #endif
    947              {"+WRXACTIVE=", AppS2wCmd_Wradio},
    948              {"+WRETRY=",    AppS2wCmd_Wretry},
    949          #ifndef S2W_IP2WIFI_SUPPORT
    950              {"+NCTCP=",     AppS2wCmd_Nctcp},
    951              {"+NCUDP=",     AppS2wCmd_Ncudp},
    952              {"+NSTCP=",     AppS2wCmd_Nstcp},
    953              {"+NSUDP=",     AppS2wCmd_Nsudp},
    954          #ifdef S2W_MDNS_ENABLE
    955              {"+MDNSSTART", AppS2wCmd_MdnsInit},
    956          #ifdef S2W_IPv6_SUPPORT
    957              {"+MDNSv6START", AppS2wCmd_MdnsInitv6},
    958          #endif
    959              {"+MDNSSTOP", AppS2wCmd_MdnsDeInit},
    960          //    {"+MDNSANNOUNCE=", AppS2wCmd_MdnsAnnounceAll},
    961              {"+MDNSANNOUNCE",  AppS2wCmd_MdnsAnnounceAll},
    962              {"+MDNSHNREG=", AppS2wCmd_MdnsHostNameReg},
    963              {"+MDNSSRVREG=", AppS2wCmd_MdnsServiceReg},
    964              {"+MDNSSD=", AppS2wCmd_MdnsSrvcDiscover},
    965              {"+MDNSHNDEREG=", AppS2wCmd_MdnsHostNmDeReg},
    966              {"+MDNSSRVDEREG=", AppS2wCmd_MdnsSrvDeReg},
    967          #endif
    968              {"+NXSETSOCKOPT=",  AppS2wCmd_SetSockOp},
    969          #endif
    970              {"+NMAC=",      AppS2wCmd_Nmac},
    971              {"+WSEC=", AppS2wCmd_SecuritySet},
    972              {"+WAUTH=",     AppS2wCmd_Wauth},
    973              {"+WWPA=",  AppS2wCmd_Wwpa},
    974              {"+WPAPSK=", AppS2wCmd_WpaPsk},
    975              {"+WPSK=",   AppS2wCmd_Psk},
    976              {"+WWEPCONF=",   AppS2wCmd_WwepConf},
    977              {"+WWEP",   AppS2wCmd_Wwep},    
    978              {"+WSYNCINTRL=", S2w_CmdSyncLossIntrvlSet},
    979              {"+WSTATUS",	  AppS2wCmd_Wstatus},
    980              {"+WST=", AppS2wCmd_scanTimeSet},
    981              {"+WS",         AppS2wCmd_Wscan},
    982              {"+NSET=",  AppS2wCmd_Nset},
    983              {"+WM=",    AppS2wCmd_Wmode},
    984              {"+WRXPS=", AppS2wCmd_PowerSave},
    985              {"+WIEEEPSPOLL=", AppS2wCmd_ieeePsPollSet},
    986              {"+WP=",    AppS2wCmd_Wpower},
    987              {"+WD",     AppS2wCmd_Disconnect},
    988              {"+WRSSI=", AppS2wCmd_Wrssi},
    989              {"+WRATE=",    AppS2wCmd_Wrate},
    990              {"+WAPSM=",  AppS2wCmd_AssocPSModeSet},
    991              {"+MCSTSET=",   AppS2wCmd_McastRecvSet},
    992              {"+WIEEEPSPOLL=", AppS2wCmd_ieeePsPollSet},
    993          	{"+NARP=",		AppS2wCmd_ArpEntryGet},
    994          	{"+NARPCHACHEEN=",	AppS2wCmd_ArpCacheEn},
    995          	{"+NARPCHACHEDEL", AppS2wCmd_ArpCacheDel},
    996              {"+NARPSET=",		AppS2wCmd_ArpEntrySet},
    997              {"+NARPDELETE=",	AppS2wCmd_ArpEntryDelete},
    998              {"+NARPAUTO=",	AppS2wCmd_ArpAutoSet},
    999              {"+srvvalidationen=",AppS2wCmad_WsrvrValidationEn},
   1000          	{"+WEAPTIMECHK=",AppS2wCmad_WeapTimeChk},
   1001          #ifdef S2W_UART_ENABLE    
   1002              {"B=",      AppS2wCmd_BaudRate},
   1003              {"+UARTFLVL=",AppS2wCmd_UartFifoLevel},
   1004              {"&R",      AppS2wCmd_HardFlow},
   1005              {"&K",      AppS2wCmd_SoftFlow},
   1006          #endif
   1007              {"&F",      AppS2wCmd_Factory},
   1008              {"&V",      AppS2wCmd_ConfigOutput},
   1009              {"&W",      AppS2wCmd_Write},
   1010              {"Z",       AppS2wCmd_read},
   1011              {"&Y",      AppS2wCmd_SetDefaultProfile},
   1012              {"S",       AppS2wCmd_Settings},
   1013              {"E",       AppS2wCmd_Echo},
   1014              {"V",       AppS2wCmd_Verbose},
   1015              {"I",       AppS2wCmd_IdOutput},
   1016              //{"?",		AppS2wCmd_Help},
   1017          #ifdef  S2W_NCM_SUPPORT_ENABLE
   1018              {"A",       AppS2wCmd_AutoConnect},
   1019          #endif
   1020              {"H",       AppS2wCmd_Disconnect},
   1021              {"C",       AppS2wCmd_Acmode},
   1022              {"O",       AppS2wCmd_GoOnline},
   1023              {"+VER=",    App2wCmd_Version},
   1024              {"+MCSTSET=",   AppS2wCmd_McastRecvSet},
   1025              {"+BDATA=",  S2w_CmdBulkDataState},
   1026              {"+RESET", AppS2wCmd_reset},
   1027              {"+APCONF=",AppS2wCmd_ApConf},
   1028              {"+APCLIENTINFO=", AppS2wCmd_ApClientInfoGet},
   1029          	{"+L2CONFIG=",	AppS2w_CmdL2ConfigSet},
   1030          #ifdef S2W_SNTP
   1031              {"+NTIMESYNC=",   AppS2wCmd_ntpTimeSet},
   1032          #endif
   1033          #ifdef S2W_DNS_SERVER_ENABLE    
   1034          	{"+DNS=",       AppS2wCmd_Dns},
   1035          #endif        
   1036          #ifdef S2W_DHCP_SERVER_ENABLE        
   1037          	{"+DHCPSRVR=",  AppS2wCmd_DhcpSrvr},
   1038                  {"+DHCPSRVRCFG=",  AppS2wCmd_DhcpSrvrConfig},
   1039          #endif         
   1040              {"+SETTIME=",  AppS2wCmd_SystemTimeSet},
   1041              {"+GETTIME=",  AppS2wCmd_SystemTimeGet},
   1042          #ifdef S2W_SECURITY_WPS_ENABLE
   1043          
   1044             {"+WWPS=",  AppS2wCmd_Wwps},
   1045          #endif /* GSN_SECURITY_WPS_ENABLE */
   1046          	{"+TCERTADD=", AppS2wCmd_SslCertificateAdd},
   1047              {"+TCERTDEL=", AppS2wCmd_SslCertificateDelete},
   1048              {"+WEAP=",   AppS2wCmd_Weap},
   1049              {"+WEAPCONF=",	AppS2wCmd_WeapConf},
   1050          #ifdef S2W_HTTPC_SUPPORT    
   1051              {"+HTTPOPEN=", AppS2wCmd_HttpClientOpen},
   1052              {"+HTTPCLOSE=", AppS2wCmd_HttpClientClose},
   1053              {"+HTTPCONF=", AppS2wCmd_HttpClientConfig},
   1054              {"+HTTPCONFDEL=", AppS2wCmd_HttpClientConfigDel},
   1055              {"+HTTPSEND=", AppS2wCmd_HttpClientSend},
   1056          #endif    
   1057          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD    
   1058              {"+SOTAFWUPCONF=", AppS2wCmd_OtaFwupConf},
   1059              {"+SOTAFWUPSTART", AppS2wCmd_OtaFwupExtFlashStart},
   1060              {"+SOTAFWUPROLLBACK", AppS2wCmd_OtaFwupRollBack},
   1061          #endif    
   1062              //{"+FSTEST=", AppS2wCmd_FsTest},
   1063              {"+WAUTO=",     AppS2wCmd_Wauto},
   1064              {"+NAUTO=",     AppS2wCmd_Nauto},
   1065              {"+PSDPSLEEP", AppS2wCmd_PowerSaveDpsleep},
   1066          #ifdef S2W_PING_TRACE
   1067              {"+PING=",      AppS2wCmd_Ping},
   1068          #endif
   1069          #ifdef S2W_IPv6_SUPPORT
   1070              {"+NSETv6=",     AppS2wCmd_Nsetv6},
   1071              {"+NDHCPv6=",    AppS2wCmd_Ndhcpv6},
   1072              {"+NCUDPv6=",    AppS2wCmd_Ncudpv6},
   1073              {"+NSUDPv6=",    AppS2wCmd_Nsudpv6},
   1074              {"+NCTCPv6=",    AppS2wCmd_Nctcpv6},
   1075              {"+NSTCPv6=",    AppS2wCmd_Nstcpv6},
   1076              {"+DHCPSERVERv6=",AppS2wCmd_Dhcpv6Server},
   1077          #endif
   1078              {"+MQTT_PUBLISH", App2wCmd_mqtt_publish},
   1079          #ifdef S2W_DNS_CLIENT
   1080              {"+DNSSET=",AppS2wCmd_DnsServerSet},
   1081              {"+DNSLOOKUP=",AppS2wCmd_DnsLookup},
   1082          #ifdef S2W_IPv6_SUPPORT
   1083              {"+DNSLOOKUPv6=",     AppS2wCmd_DnsLookupv6},
   1084          #endif
   1085          #endif
   1086          
   1087              {"+WREGDOMAIN=", AppS2wCmd_RegDomainSet},
   1088          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1089              {"+SSLOPEN=",   AppS2wCmd_SSLOpen},
   1090              {"+SSLCLOSE=",   AppS2wCmd_SSLClose},
   1091          	{"+SSLCONF=", AppS2wCmd_SslConfig},
   1092          #endif
   1093          #ifdef S2W_RF_TEST
   1094          	{"+WRFTESTSTART",  AppS2wCmd_RfTestStart},
   1095          	{"+WRFTESTSTOP",  AppS2wCmd_RfTestStop},
   1096              {"+WFRAMETXTEST=",  AppS2wCmd_RfTestTxStart},
   1097              {"+WTX99TEST=",  AppS2wCmd_RfTestTx99Start},
   1098              {"+WTX100TEST=",  AppS2wCmd_RfTestTx100Start},
   1099              {"+WCARWAVTEST=",  AppS2wCmd_RfTestCarrierWaveStart},
   1100          	{"+WTXSTOP=", AppS2wCmd_RfTestTxStop},
   1101              {"+WRXTEST=",  AppS2wCmd_RfTestRxStart},
   1102              {"+WRXSTOP",  AppS2wCmd_RfTestRxStop},
   1103          	{"+WCALIB=",  AppS2wCmd_WlanCalib},
   1104          #ifdef S2W_15DOT4_SUPPORT        
   1105              {"+I154RXTEST=",AppS2wCmd_I154RxTest},
   1106              {"+I154RXSTOP=",AppS2wCmd_I154RxTestStop},
   1107              {"+I154TXTEST=",AppS2wCmd_I154TxTest},  
   1108          #endif    
   1109          #endif
   1110          #ifdef S2W_OTP_RDWR_SUPPORT
   1111              {"+WOTPWR=",AppS2wCmd_WlanOtpWrite},
   1112              {"+AOTPWR=",AppS2wCmd_AppOtpWrite},
   1113          #endif
   1114              {"+WOTPRD=",AppS2wCmd_WlanOtpRead},
   1115              {"+AOTPRD=",AppS2wCmd_AppOtpRead},
   1116          
   1117          #ifdef S2W_WEB_PROV
   1118          	{"+WEBPROV=", APPS2wCmd_WebProv},
   1119              {"+WEBPROVSTOP", APPS2wCmd_WebProvStop},    
   1120              {"+NURIREDIR=", APPS2wCmd_AddRedirURI},
   1121          #endif
   1122          #if defined(S2W_GSLINK) && defined (S2W_WEB_SERVER)
   1123              {"+WEBSERVER=", AppS2wCmd_WebServer},  
   1124              {"+URIRECV=",AppS2wCmd_CfgUri},
   1125          #endif
   1126          #ifdef S2W_GSLINK_XML
   1127              {"+XMLSEND=",   AppS2wCmd_XmlSend},
   1128              {"+XMLPARSE=",   AppS2wCmd_XmlParseEnable},    
   1129          
   1130          #endif   
   1131          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   1132              {"+HTTPRECVCONF=",   AppS2wCmd_RecvConf},
   1133          #endif
   1134          	{"+PSSTBY="   , AppS2wCmd_PowerSaveStby},
   1135              {"+STORENWCONN",  AppS2wCmd_NwConnStore},
   1136              {"+RESTORENWCONN",AppS2wCmd_NwConnRestore},
   1137              {"+HIBERNATE=", AppS2wCmd_Hibernate},
   1138          #ifdef  S2W_NCM_SUPPORT_ENABLE
   1139              {"+NCMAUTO=",AppS2wCmd_NcmAuto},
   1140              {"+NCMAUTOCONF=",AppS2wCmd_NcmAutoConf},
   1141          #endif 
   1142              {"+ASYNCMSGFMT=", AppS2wCmd_AsyncMsgFmt},
   1143          #ifdef S2W_THROUGHPUT_TEST
   1144          	{"+SOCKTPTEST=",   AppS2wCmd_SockTpTest},
   1145          	{"+SOCKTPTESTSTAT=",   AppS2wCmd_SockTpTestStat},
   1146          #endif
   1147          
   1148               {"+NIPMULTICASTJOIN=", AppS2wCmd_IpMulticastJoin},
   1149               {"+NIPMULTICASTLEAVE=", AppS2wCmd_IpMulticastLeave},
   1150               {"+DGPIO=",  AppS2wCmd_Dgpio},
   1151          #if S2W_PERSISTENT_TMR_SUPPORT     
   1152               {"+PRSTMRSTART=", AppS2wCmd_PerstTmrStart},
   1153               {"+PRSTMRSTOP=", AppS2wCmd_PerstTmrStop},
   1154               {"+PRSTMRDEL=", AppS2wCmd_PerstTmrDelete},
   1155               {"+PRSTMRRESTART=", AppS2wCmd_PerstTmrReStart},
   1156          #endif     
   1157          
   1158          #ifdef S2W_ISOTX_SUPPORT
   1159          
   1160               {"+ISOTXSTART=", AppS2wCmd_IsoTxStart},
   1161               {"+ISOTXSTOP", AppS2wCmd_IsoTxStop},
   1162               {"+ISOTXREGWR=", AppS2wCmd_IsoTxConfig},
   1163          #endif
   1164          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   1165               {"+UNSOLICITEDTX=", S2w_CmdUnSolicitedTx},
   1166               {"+UNSOLICITEDRX=", S2w_CmdUnSolicitedRx},
   1167               {"+UNSOLICITEDRXSTOP", S2w_CmdUnSolicitedRxstop},
   1168               {"+UAMCCA=", S2w_CmdUnSolicitedCcaConf},
   1169          #endif
   1170          #ifdef S2W_EMU  
   1171                /*Commands for EMU*/
   1172              {"+emuver=", AppS2wCmd_EmuVer}, 
   1173              {"+emusupmod=",AppS2wCmd_SupportedModules},
   1174              {"+emustart",AppS2wCmd_EmuStart},  
   1175              {"+emustop",AppS2wCmd_EmuStop},
   1176              {"+emusetconf=",AppS2wCmd_EmuSetConf},
   1177              {"+emugetvalues",AppS2wCmd_EmuGetValues},
   1178              {"+emugetconf=",AppS2wCmd_EmuGetConf},
   1179              {"+emuloadctrl=",AppS2wCmd_EmuLoadCtl}, 
   1180              {"+emugetinstvalues",AppS2wCmd_EmuGetInstValues},
   1181              {"+emuresetenergy",AppS2wCmd_EmuResetEnergy},
   1182              {"+emugetstatus",AppS2wCmd_EmuGetStatus},
   1183              {"+emuloadstatus",AppS2wCmd_EmuLoadStatus},
   1184              {"+emuprint",AppS2wCmd_EmuPrint},
   1185          #endif
   1186          #ifdef S2W_ADC_SUPPORT
   1187          #ifndef GS2100
   1188              {"+adcconf=",AppS2wCmd_AdcConf},
   1189              {"+adcstart",AppS2wCmd_AdcStart},
   1190              {"+adcread=",AppS2wCmd_AdcRead},
   1191              {"+adcstop",AppS2wCmd_AdcStop},
   1192          #endif
   1193          #endif
   1194          #ifdef S2W_I2C_SUPPORT
   1195              /*Commands for I2C*/
   1196              {"+i2cconf=",AppS2wCmd_I2cConf},
   1197              {"+i2cstart",AppS2wCmd_I2cStart},
   1198              {"+i2cwrite=",AppS2wCmd_I2cWrite},
   1199              {"+i2cread=",AppS2wCmd_I2cRead},
   1200              {"+i2cstop",AppS2wCmd_I2cStop},
   1201          #endif    
   1202          #ifdef S2W_15DOT4_SUPPORT
   1203              {"+PCH="   , AppS2wCmd_154Channel},
   1204              {"+PPID="  , AppS2wCmd_154PanId},
   1205              {"+PSA="   , AppS2wCmd_154ShortAddr},
   1206              {"+PLA="   , AppS2wCmd_154ExtendedAddr},   
   1207              {"+PMR="   , AppS2wCmd_154RetryCount},
   1208              {"+PJP="   , AppS2wCmd_154JoinPermit},
   1209              {"+PSC="   , AppS2wCmd_154SupreFrmCfg},
   1210              {"+PCE="   , AppS2wCmd_154CoordExtndedAddr},   
   1211              {"+PCA="   , AppS2wCmd_154CoordShortAddr},
   1212              {"+PSN="   , AppS2wCmd_154ScanNetwork},
   1213              {"+PJN="   , AppS2wCmd_154JoinNetwork},
   1214              {"+PAN="   , AppS2wCmd_154AddNode},   
   1215              {"+PFN="   , AppS2wCmd_154StartNetwork},
   1216              {"+PLN="   , AppS2wCmd_154LeaveNetwork},
   1217              {"+PPL="   , AppS2wCmd_154PollData},
   1218              {"+PDS="   , AppS2wCmd_154DataSend}, 
   1219              {"+PDP="   , AppS2wCmd_154DataPurge},
   1220              {"+PRXEN="  , AppS2wCmd_154RxEnable},
   1221              {"+PSR="    , AppS2wCmd_154SetReq},
   1222              {"+PGR="    , AppS2wCmd_154GetReq},
   1223              {"+PGTS=", AppS2wCmd_154GTSReq},
   1224              {"+PSYNCR=", AppS2wCmd_154SyncReq},
   1225          
   1226          #endif
   1227          #ifdef S2W_EXTFLASH_DRIVER_TEST
   1228          	 {"+EXFLASHINIT=", AppS2wCmd_ExtFlashInit},
   1229          	 {"+EXFLASHWRITE=", AppS2wCmd_ExtFlashWrite},
   1230          	 {"+EXFLASHREAD=", AppS2wCmd_ExtFlashRead},
   1231          	 {"+EXFLASHERASE=", AppS2wCmd_ExtFlashErase},
   1232          	 {"+EXFLASHCERASE", AppS2wCmd_ExtFlashChipErase},
   1233          	 {"+EXFLASHSPICONF=", AppS2wCmd_ExtFlashSpiConf},
   1234          #endif
   1235          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1236          	    {"+DTLSOPEN=",   AppS2wCmd_DTSLOpen},
   1237          	    {"+DTLSCLOSE=",   AppS2wCmd_DTSLClose},
   1238          #endif
   1239          
   1240          	{"+WSTAPSCFG=", AppS2wCmd_WlanStaPsCfg},
   1241          	{"+WAPPSCFG=", AppS2wCmd_WlanApPsCfg},
   1242          	{"+PSPOLLINTRL=", S2w_CmdPsPollIntervelset},
   1243          	{"+WKEEPALIVE=", S2w_CmdPsPollIntervelset},
   1244          #ifdef S2W_PWM_SUPPORT
   1245                  {"+PWMSTART=", AppS2wCmd_PwmStart},
   1246                  {"+PWMSTOP=", AppS2wCmd_PwmStop},
   1247                  {"+PWMCNTRL=", AppS2wCmd_PwmCtrl},
   1248          #endif
   1249          
   1250          #ifdef S2W_MEM_ACCESS
   1251              {"+MEMREAD=", AppS2wCmd_MemRead},
   1252              {"+MEMWRITE=", AppS2wCmd_MemWrite},
   1253          
   1254          #endif
   1255              {"+LOGLVL=", AppS2wCmd_LogLevelSet},
   1256          	{"+BCHKSTRT=",	AppS2wCmd_BattCheckStart},
   1257          	{"+BATTVALGET", AppS2wCmd_BattValueGet},
   1258          	{"+BCHK=",		AppS2wCmd_BattCheckSet},
   1259          	{"+BCHKSTOP",	AppS2wCmd_BattCheckStop},
   1260          	{"+BATTLVLSET=", AppS2wCmd_BattLvlSet},
   1261          #ifdef S2W_ADC_SUPPORT        
   1262          	{"+CLKTUNE=", App_ClkTuneCmd},
   1263          #endif        
   1264          #ifdef S2W_COAP_SUPPORT
   1265              {"+COAPOPEN=", AppS2wCmd_CoapOpen},
   1266              {"+COAPSENDRECIEVE=", AppS2wCmd_CoapSend},
   1267              {"+COAPCLOSE=", AppS2wCmd_CoapClose},
   1268              {"+COAPOPTCONF=", AppS2wCmd_CoapSetOption},
   1269              {"+COAPOPTCONFDEL=", AppS2wCmd_CoapRemoveOption},
   1270          #endif
   1271          	{"+WBACKEN=",AppS2wCmd_BaBitMapSet},
   1272          
   1273          	{"+WRADIOSTATE=",AppS2wCmd_RadioStateGet},
   1274          #ifdef S2W_15DOT4_SUPPORT
   1275              {"+ZSC=",AppS2wCmd_ZipScan},
   1276              {"+ZST=",AppS2wCmd_ZipStart},
   1277              {"+ZSP=",AppS2wCmd_ZipStop},
   1278              {"+ZMS=",AppS2wCmd_ZipSetMacAddr},
   1279          #endif    
   1280          
   1281          #ifdef GSN_MEM_TRACE
   1282              {"+MEMTRACE", AppS2wCmd_memTraceGet},
   1283          #endif    
   1284          #if defined(S2W_FS_SPI_ENABLE) || defined(S2W_FS_SPI_HI_ENABLE)
   1285              {"+SPICONF=", AppS2wCmd_SpiConfig},
   1286          #endif /* S2W_FS_SPI_ENABLE */
   1287          #ifdef S2W_FTC
   1288          	{"+FTCSDADC", AppS2wCmd_FtcSdAdc},
   1289          	{"+FTCSARADC", AppS2wCmd_FtcSarAdc},
   1290          	{"+FTCEXFLID", AppS2wCmd_FtcExtFlashID},	
   1291          	{"+RFTCEXFLID", AppS2wCmd_rftcExtFlashID},
   1292          	{"+RFTCSARADC" , AppS2wCmd_rFtcSarAdc},
   1293          	{"+RFTCSDADC"   ,AppS2wCmd_rFtcSdAdc},
   1294          #endif
   1295              {"+WASSOCCONF=",AppS2wCmd_SetAssocTimeout},
   1296              {"+TEMPVALGET=", AppS2wCmd_TempGet},
   1297              {"+WTEMPREAD=", AppS2wCmd_TempReadStart},
   1298              {"+CRYPTOEN=", AppS2wCmd_HwCryptoEn},
   1299              {"+GRATARP", AppS2wCmd_GratArpSend}
   1300          };
   1301          
   1302          /**
   1303           ******************************************************************
   1304           * @ingroup S2w-Application
   1305           * @brief Process the AT+PSDPSLEEP command
   1306           * @param ptr Pointer to the user input string.
   1307           * @return status.
   1308           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1309          PUBLIC UINT8
   1310          AppS2wCmd_PowerSaveDpsleep(UINT8 *ptr)
   1311          {
   \                     AppS2wCmd_PowerSaveDpsleep:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   1312              UINT32 timeout = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9002             STR      R0,[SP, #+8]
   1313              S2W_ALARM_INFO_T alarm;
   1314              UINT8 status;
   1315              UINT8 *p, pwrMeasure = 0;
   \   00000008   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1316              memset(&alarm,0,sizeof(alarm));
   \   0000000C   0x.... 0x....      BL       ?Subroutine9
   1317              if (*ptr)
   \                     ??CrossCallReturnLabel_14:
   \   00000010   0x9804             LDR      R0,[SP, #+16]
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD033             BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_0
   1318              {
   1319                  if(ptr[0] == '=')
   \   00000018   0x283D             CMP      R0,#+61
   \   0000001A   0xD12F             BNE.N    ??AppS2wCmd_PowerSaveDpsleep_1
   1320                  {
   1321                      ptr++;
   \   0000001C   0x9804             LDR      R0,[SP, #+16]
   \   0000001E   0x1C40             ADDS     R0,R0,#+1
   \   00000020   0x9004             STR      R0,[SP, #+16]
   1322                      p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ?Subroutine30
   1323                      if (p)
   \                     ??CrossCallReturnLabel_99:
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xBF1C             ITT      NE 
   \   0000002A   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000002C   0x2900             CMPNE    R1,#+0
   1324                      {
   1325                          if (*p != '\0')
   \   0000002E   0xD002             BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_2
   1326                          {
   1327                              status = AppS2wParse_Int(p, &timeout);
   \   00000030   0x.... 0x....      BL       ?Subroutine50
   1328                              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_262:
   \   00000034   0xBB50             CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
   1329                              {
   1330                                  return status;
   1331                              }
   1332                          }
   1333                      }
   1334                      p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_PowerSaveDpsleep_2:
   \   00000036   0x.... 0x....      BL       ?Subroutine30
   1335                      if (p)
   \                     ??CrossCallReturnLabel_98:
   \   0000003A   0xB308             CBZ.N    R0,??AppS2wCmd_PowerSaveDpsleep_0
   1336                      {
   1337                          if (*p != '\0')
   \   0000003C   0x7801             LDRB     R1,[R0, #+0]
   \   0000003E   0xB129             CBZ.N    R1,??AppS2wCmd_PowerSaveDpsleep_4
   1338                          {
   1339                              status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
   \   00000040   0x.... 0x....      BL       ?Subroutine59
   1340                              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_369:
   \   00000044   0xBB10             CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
   1341                              {
   1342                                  return status;
   1343                              }
   1344                              alarm.alarm1Valid = 1;
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1345                          }
   1346                          p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_PowerSaveDpsleep_4:
   \   0000004C   0x.... 0x....      BL       ?Subroutine30
   1347                          if (p)
   \                     ??CrossCallReturnLabel_97:
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xBF1C             ITT      NE 
   \   00000054   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000056   0x2900             CMPNE    R1,#+0
   1348                          {
   1349                              if (*p != '\0')
   \   00000058   0xD005             BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_5
   1350                              {
   1351                                  status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
   \   0000005A   0x.... 0x....      BL       ?Subroutine61
   1352                                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_388:
   \   0000005E   0xB9A8             CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
   1353                                  {
   1354                                      return status;
   1355                                  }
   1356                                  alarm.alarm2Valid = 1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0xF88D 0x0002      STRB     R0,[SP, #+2]
   1357                              }
   1358                          }
   1359                          p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_PowerSaveDpsleep_5:
   \   00000066   0x.... 0x....      BL       ?Subroutine30
   1360                          if (p)
   \                     ??CrossCallReturnLabel_96:
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xBF1C             ITT      NE 
   \   0000006E   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000070   0x2900             CMPNE    R1,#+0
   1361                          {
   1362                              if (*p != '\0')
   \   00000072   0xD005             BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_0
   1363                              {
   1364                                  status = AppS2wParse_Boolean(p, &pwrMeasure);
   \   00000074   0x.... 0x....      BL       ?Subroutine62
   1365                                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_393:
   \   00000078   0xB110             CBZ.N    R0,??AppS2wCmd_PowerSaveDpsleep_0
   1366                                  {
   1367                                      return status;
   \   0000007A   0xE007             B.N      ??AppS2wCmd_PowerSaveDpsleep_3
   1368                                  }
   1369                              }
   1370                          }
   1371                      }
   1372                  }
   1373              else
   1374                  {
   1375                 return S2W_EINVAL;
   \                     ??AppS2wCmd_PowerSaveDpsleep_1:
   \   0000007C   0x2002             MOVS     R0,#+2
   \   0000007E   0xE005             B.N      ??AppS2wCmd_PowerSaveDpsleep_3
   1376                  }
   1377              }
   1378          
   1379              return AppS2wHal_PsDpSleepStart(timeout, &alarm, pwrMeasure);
   \                     ??AppS2wCmd_PowerSaveDpsleep_0:
   \   00000080   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   00000084   0x9802             LDR      R0,[SP, #+8]
   \   00000086   0xA900             ADD      R1,SP,#+0
   \   00000088   0x.... 0x....      BL       AppS2wHal_PsDpSleepStart
   \                     ??AppS2wCmd_PowerSaveDpsleep_3:
   \   0000008C   0xB005             ADD      SP,SP,#+20
   \   0000008E   0xBD00             POP      {PC}             ;; return
   1380          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine62:
   \   00000000   0xA901             ADD      R1,SP,#+4
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Boolean

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0xA804             ADD      R0,SP,#+16
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine50:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine61:
   \   00000000   0xF10D 0x0103      ADD      R1,SP,#+3
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Boolean

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine59:
   \   00000000   0xF10D 0x0101      ADD      R1,SP,#+1
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Boolean

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      memset
   1381          
   1382          #ifdef S2W_HTTPC_SUPPORT
   1383          
   1384          void
   1385          AppS2w_HttpRxBufferMgmtCb(GSN_HTTPC_CONN_HANDLE conHandle,
   1386                               INT8 *httpRxDataBuf,
   1387                               INT32 httpRxDataLen,
   1388                               INT32* rxBufferMgmtstatus);
   1389          GSN_HTTPC_CONF_INFO_T httpConfInfo;
   1390          INT8 *headerValues[S2W_HTTPC_MAX_HDR_SUPPORTED];
   1391          GSN_HTTP_USER_HEADER_TYPE_T headerTypes[S2W_HTTPC_MAX_HDR_SUPPORTED];
   1392          GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[S2W_HTTPC_MAX_HDR_SUPPORTED];
   1393          UINT8 httpConfAtCmd=0;
   1394          
   1395          
   1396          /**
   1397           ******************************************************************
   1398           * @ingroup S2w-Application
   1399           * @brief Process AT+HTTPOPEN command
   1400           *   This function open a new http client connection.
   1401           * @param ptr Pointer to the user input string.
   1402           *
   1403           * @return S2W_SUCCESS - operation successful.
   1404           * @return S2W_FAILURE - operation Failed.
   1405           * @return S2W_EINVAL - operation Failed-invalid input
   1406           ******************************************************************/
   1407          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1408          
   1409          extern S2W_SSL_CONF_T s2wSslConf;
   1410          #endif

   \                                 In section .text, align 2, keep-with-next
   1411           UINT8
   1412          AppS2wCmd_HttpClientOpen(UINT8 *ptr)
   1413          {
   \                     AppS2wCmd_HttpClientOpen:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   1414              S2W_HTTP_DATA_T *pHttpData;
   1415              UINT8 *p, i=0, status = S2W_EINVAL, /*ret,*/ endParam = 0, *tmp = NULL;
   1416              UINT32 cid = -1, httpType, portNumber,len;
   \   00000006   0xF04F 0x30FF      MOV      R0,#-1
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x2402             MOVS     R4,#+2
   \   00000010   0x46B1             MOV      R9,R6
   1417              INT32 certID;
   1418              ULONG hostIpAddress;
   1419              pHttpData = gsn_malloc(sizeof(S2W_HTTP_DATA_T));
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0xF240 0x518B      MOVW     R1,#+1419
   \   00000018   0x2068             MOVS     R0,#+104
   \   0000001A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000001E   0xEA5F 0x0800      MOVS     R8,R0
   1420              if(NULL == pHttpData)
   \   00000022   0xD044             BEQ.N    ??AppS2wCmd_HttpClientOpen_0
   1421              {
   1422                  return S2W_FAILURE;
   1423              }
   1424              memset(pHttpData,0,sizeof(S2W_HTTP_DATA_T));
   \   00000024   0x2268             MOVS     R2,#+104
   \   00000026   0x.... 0x....      BL       ??Subroutine18_0
   1425              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_37:
   \   0000002A   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_135:
   \   0000002E   0x0007             MOVS     R7,R0
   1426          
   1427              if (!p)
   \   00000030   0x.... 0x....      LDR.W    R5,??DataTable378
   \   00000034   0xF000 0x8083      BEQ.W    ??AppS2wCmd_HttpClientOpen_1
   1428              {
   1429                  status = S2W_EINVAL;
   1430                  goto AppS2wCmd_HttpClientOpenExit;
   1431              }
   1432              len = strlen((const char *)p);
   \   00000038   0x.... 0x....      BL       strlen
   1433              tmp = gsn_malloc(len+1);
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0xF240 0x5199      MOVW     R1,#+1433
   \   00000042   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_69:
   \   00000046   0xEA5F 0x0900      MOVS     R9,R0
   1434              if(NULL != tmp)
   \   0000004A   0xBF1C             ITT      NE 
   \   0000004C   0x4639             MOVNE    R1,R7
   \   0000004E   0x.... 0x....      BLNE     strcpy
   1435              {
   1436                  strcpy((char *)tmp, (char *)p);
   1437              }
   1438              if(inet_pton(AF_INET, (char const*)p, &pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr) == 1)
   \   00000052   0xF108 0x0B08      ADD      R11,R8,#+8
   \   00000056   0xF108 0x0214      ADD      R2,R8,#+20
   \   0000005A   0x4639             MOV      R1,R7
   \   0000005C   0x.... 0x....      BL       ??Subroutine71_0
   \                     ??CrossCallReturnLabel_427:
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD031             BEQ.N    ??AppS2wCmd_HttpClientOpen_2
   1439              {
   1440                  pHttpData->sockAddr.addr.ipv4.sin_family = AF_INET;
   1441              }
   1442              else if(inet_pton(AF_INET6, (char const*)p, pHttpData->sockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
   \   00000064   0xF108 0x0218      ADD      R2,R8,#+24
   \   00000068   0x4639             MOV      R1,R7
   \   0000006A   0x.... 0x....      BL       ??Subroutine72_0
   \                     ??CrossCallReturnLabel_430:
   \   0000006E   0x2801             CMP      R0,#+1
   \   00000070   0xD103             BNE.N    ??AppS2wCmd_HttpClientOpen_3
   1443              {
   1444              	pHttpData->sockAddr.addr.ipv6.sin6_family = AF_INET6;
   \   00000072   0x2003             MOVS     R0,#+3
   \   00000074   0xF8AB 0x0008      STRH     R0,[R11, #+8]
   \   00000078   0xE028             B.N      ??AppS2wCmd_HttpClientOpen_4
   1445              }
   1446              else
   1447              {
   1448           	   /*Dns look up */
   1449          		status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx, (UINT8*)p,\
   1450          										 &hostIpAddress, 5);
   \                     ??AppS2wCmd_HttpClientOpen_3:
   \   0000007A   0x2305             MOVS     R3,#+5
   \   0000007C   0x.... 0x....      BL       ?Subroutine75
   \                     ??CrossCallReturnLabel_441:
   \   00000080   0xAA01             ADD      R2,SP,#+4
   \   00000082   0x4639             MOV      R1,R7
   \   00000084   0x3050             ADDS     R0,R0,#+80
   \   00000086   0x.... 0x....      BL       GsnNwIf_DnsHostByNameGet
   1451          		pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr = ntohl(hostIpAddress);
   \   0000008A   0x9801             LDR      R0,[SP, #+4]
   \   0000008C   0x0A01             LSRS     R1,R0,#+8
   \   0000008E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000092   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   00000096   0x9901             LDR      R1,[SP, #+4]
   \   00000098   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000009C   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   000000A0   0x9901             LDR      R1,[SP, #+4]
   \   000000A2   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   000000A6   0xF8CB 0x000C      STR      R0,[R11, #+12]
   1452          		if (hostIpAddress == 0)
   \   000000AA   0x9901             LDR      R1,[SP, #+4]
   \   000000AC   0x2900             CMP      R1,#+0
   \                     ??AppS2wCmd_HttpClientOpen_0:
   \   000000AE   0xF000 0x80CF      BEQ.W    ??AppS2wCmd_HttpClientOpen_5
   1453          			return S2W_FAILURE;
   1454          		
   1455                  /* Send IP address back to host */
   1456          		S2w_Printf("\r\nIP:%d.%d.%d.%d",(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x000000ff),
   1457          										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x0000ff00)>>8,
   1458          										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x00ff0000)>>16,
   1459          										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0xff000000)>>24);		
   \   000000B2   0x0E01             LSRS     R1,R0,#+24
   \   000000B4   0x9100             STR      R1,[SP, #+0]
   \   000000B6   0xF3C0 0x4307      UBFX     R3,R0,#+16,#+8
   \   000000BA   0xF3C0 0x2207      UBFX     R2,R0,#+8,#+8
   \   000000BE   0xB2C1             UXTB     R1,R0
   \   000000C0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nIP:%d.%d.%d.%d">`
   \   000000C4   0x.... 0x....      BL       S2w_Printf
   1460          		pHttpData->sockAddr.addr.ipv4.sin_family = AF_INET;
   \                     ??AppS2wCmd_HttpClientOpen_2:
   \   000000C8   0xF8AB 0x4008      STRH     R4,[R11, #+8]
   1461              }
   1462              /* port Number */
   1463              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_HttpClientOpen_4:
   \   000000CC   0x.... 0x....      BL       ?Subroutine33
   1464              if (!p)
   \                     ??CrossCallReturnLabel_134:
   \   000000D0   0x.... 0x....      LDR.W    R4,??DataTable378_1
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD02B             BEQ.N    ??AppS2wCmd_HttpClientOpen_6
   1465              {
   1466                  endParam = 1;
   1467              }
   1468              else
   1469              {
   1470                  AppS2wParse_Int(p, &portNumber);
   \   000000D8   0x.... 0x....      BL       ?Subroutine53
   1471                  pHttpData->sockAddr.ss_port = portNumber;
   \                     ??CrossCallReturnLabel_341:
   \   000000DC   0x9803             LDR      R0,[SP, #+12]
   \   000000DE   0xF8AB 0x000A      STRH     R0,[R11, #+10]
   1472          
   1473              }
   1474          
   1475              /* security */
   1476              if(!endParam)
   1477              {
   1478                  p = AppS2wParse_NextParamGet(&ptr);
   \   000000E2   0x.... 0x....      BL       ?Subroutine33
   1479                  if (!p)
   \                     ??CrossCallReturnLabel_133:
   \   000000E6   0xB318             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_6
   1480                  {
   1481                      endParam = 1;
   1482                  }
   1483                  else
   1484                  {
   1485                      AppS2wParse_Int(p, &httpType);
   \   000000E8   0x.... 0x....      BL       ?Subroutine54
   1486                      pHttpData->httpType = (GSN_HTTP_TYPE_T)httpType;
   \                     ??CrossCallReturnLabel_349:
   \   000000EC   0x9804             LDR      R0,[SP, #+16]
   \   000000EE   0xF88B 0x0004      STRB     R0,[R11, #+4]
   1487                  }
   1488              }
   1489          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1490              /* certificate name */
   1491              if(!endParam)
   1492              {
   1493                  p = AppS2wParse_NextParamGet(&ptr);
   \   000000F2   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_132:
   \   000000F6   0x0007             MOVS     R7,R0
   1494                  if (!p)
   \   000000F8   0xD01A             BEQ.N    ??AppS2wCmd_HttpClientOpen_6
   1495                  {
   1496                      endParam = 1;
   1497                  }
   1498                  else
   1499                  {
   1500                      if(0 != strlen((const INT8 *)p))
   \   000000FA   0x.... 0x....      BL       strlen
   \   000000FE   0xB198             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_7
   1501                      {
   1502          //				certID = S2wCert_Get((INT8 *)p);
   1503                  		certID = S2wCert_SearchRamTable((INT8*)p);
   \   00000100   0x4638             MOV      R0,R7
   \   00000102   0x.... 0x....      BL       S2wCert_SearchRamTable
   1504          		        if(certID == -1)
   \   00000106   0xF110 0x0F01      CMN      R0,#+1
   \   0000010A   0xBF04             ITT      EQ 
   \   0000010C   0x4638             MOVEQ    R0,R7
   \   0000010E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   1505                  		{
   1506                  			certID = S2wCert_FlashFileLoad((INT8*)p);
   1507                  		}
   1508          
   1509                          if(certID != -1)
   \   00000112   0xF110 0x0F01      CMN      R0,#+1
   \   00000116   0xD00D             BEQ.N    ??AppS2wCmd_HttpClientOpen_8
   1510                          {
   1511                              pHttpData->caCertLen = *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
   \   00000118   0x.... 0x....      BL       ?Subroutine88
   \                     ??CrossCallReturnLabel_475:
   \   0000011C   0xF8A8 0x1006      STRH     R1,[R8, #+6]
   1512                              pHttpData->pCaCert = s2w_ssl_cert_table[certID].certAddress + 2;
   \   00000120   0x5900             LDR      R0,[R0, R4]
   \   00000122   0x1C80             ADDS     R0,R0,#+2
   \   00000124   0xF8C8 0x0008      STR      R0,[R8, #+8]
   1513                          }
   1514                          else
   1515                          {
   1516                              S2w_Printf("\n\rCA certificate not found");
   1517                              status = S2W_FAILURE;
   1518                              goto AppS2wCmd_HttpClientOpenExit;
   1519                          }
   1520                      }
   1521                  }
   1522              }
   1523          #endif
   1524              /* proxy server */
   1525              if(!endParam)
   1526              {
   1527                  UINT32 proxy = 0;
   \                     ??AppS2wCmd_HttpClientOpen_7:
   \   00000128   0x9600             STR      R6,[SP, #+0]
   1528                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000012A   0x.... 0x....      BL       ?Subroutine33
   1529                  if (!p)
   \                     ??CrossCallReturnLabel_131:
   \   0000012E   0xB9D0             CBNZ.N   R0,??AppS2wCmd_HttpClientOpen_9
   1530                  {
   1531                      endParam = 1;
   \                     ??AppS2wCmd_HttpClientOpen_6:
   \   00000130   0x2601             MOVS     R6,#+1
   \   00000132   0xE01D             B.N      ??AppS2wCmd_HttpClientOpen_10
   1532                  }
   \                     ??AppS2wCmd_HttpClientOpen_8:
   \   00000134   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rCA certificate not ...">`
   \                     ??AppS2wCmd_HttpClientOpen_11:
   \   00000138   0x.... 0x....      BL       S2w_Printf
   \   0000013C   0x2401             MOVS     R4,#+1
   1533                  else
   1534                  {
   1535                      AppS2wParse_Int(p, &proxy);
   1536                      pHttpData->proxyServer = proxy;
   1537                  }
   1538              }
   1539          	pHttpData->connTimeOut=25;
   1540              if(!endParam)
   1541              {
   1542                  UINT32 connTimeout = 0;
   1543                  p = AppS2wParse_NextParamGet(&ptr);
   1544                  if (!p)
   1545                  {
   1546                      endParam = 1;
   1547                  }
   1548                  else
   1549                  {
   1550                      AppS2wParse_Int(p, &connTimeout);
   1551          			if(connTimeout != 0)
   1552          	            pHttpData->connTimeOut = connTimeout;
   1553                  }
   1554              }
   1555          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1556              if(!endParam)
   1557              {
   1558                  p = AppS2wParse_NextParamGet(&ptr);
   1559                  if (!p)
   1560                  {
   1561                      endParam = 1;
   1562                  }
   1563                  else
   1564                  {
   1565                      if(0 != strlen((const INT8 *)p))
   1566                      {
   1567                          //certID = S2wCert_Get((INT8 *)p);
   1568                  		certID = S2wCert_SearchRamTable((INT8*)p);
   1569                  		if(certID == -1)
   1570                  		{
   1571                  			certID = S2wCert_FlashFileLoad((INT8*)p);
   1572                  		}
   1573                          if(certID != -1)
   1574                          {
   1575                              pHttpData->clientCertLen= *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
   1576                              pHttpData->pClientCert= s2w_ssl_cert_table[certID].certAddress + 2;
   1577                          }
   1578                          else
   1579                          {
   1580                              S2w_Printf("\n\r client certificate not found");
   1581                              status = S2W_FAILURE;
   1582                              goto AppS2wCmd_HttpClientOpenExit;
   1583                          }
   1584                      }
   1585                  }
   1586              }
   1587          
   1588              if(!endParam)
   1589              {
   1590                  p = AppS2wParse_NextParamGet(&ptr);
   1591                  if (!p)
   1592                  {
   1593                      endParam = 1;
   1594                  }
   1595                  else
   1596                  {
   1597                      if(0 != strlen((const INT8 *)p))
   1598                      {
   1599                          //certID = S2wCert_Get((INT8 *)p);
   1600                  		certID = S2wCert_SearchRamTable((INT8*)p);
   1601                  		if(certID == -1)
   1602          		        {
   1603                  			certID = S2wCert_FlashFileLoad((INT8*)p);
   1604                  		}
   1605                  		if(certID != -1)
   1606                          {
   1607                              pHttpData->clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
   1608                              pHttpData->pClientKey = s2w_ssl_cert_table[certID].certAddress + 2;
   1609                          }
   1610                          
   1611                          else
   1612                          {
   1613                              S2w_Printf("\n\rclient Key not found");
   1614                              status = S2W_FAILURE;
   1615                              goto AppS2wCmd_HttpClientOpenExit;
   1616                          }
   1617                      }
   1618                  }
   1619              }
   1620          #endif
   1621              // check the default paramters are configured
   1622              if((httpConfAtCmd != 1) &&(!httpConfInfo.reqHeaderCount))
   1623              {
   1624                  memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
   1625                  memset(&headerValues[0], 0, sizeof(headerValues));
   1626                  httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
   1627                  httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
   1628                  httpConfInfo.reqHeaderValues = headerValues;
   1629                  httpConfInfo.reqHeaderCount = 0;
   1630          
   1631                  // configure the header
   1632          #if defined(S2W_DFLT_HTTPC_AUTH) || defined(S2W_DFLT_HTTPC_HOST_IP)					
   1633                  INT8 *pValue;
   1634                  UINT32 len;
   1635          #endif		
   1636          #ifdef S2W_DFLT_HTTPC_AUTH					
   1637                  len= sizeof(S2W_DFLT_HTTPC_AUTH);
   1638                  pValue = gsn_malloc(len+1);
   1639                  if(pValue == NULL)
   1640                  {
   1641                      return S2W_FAILURE;
   1642                  }
   1643                  memset(pValue, 0 , len+1);
   1644                  memcpy(pValue, S2W_DFLT_HTTPC_AUTH, len);
   1645                  pValue[len] = '\0';
   1646                  headerValues[i] = pValue;
   1647          	    headerTypes[i++] = GSN_HTTP_HEADER_AUTHORIZATION;
   1648                  httpConfInfo.reqHeaderCount +=1;
   1649          #endif
   1650          
   1651          #ifdef S2W_DFLT_HTTPC_HOST_IP			
   1652                  len= sizeof(S2W_DFLT_HTTPC_HOST_IP);
   1653                  pValue = gsn_malloc(len+1);
   1654                  if(pValue == NULL)
   1655                  {
   1656                      return S2W_FAILURE;
   1657                  }
   1658                  memset(pValue, 0 , len+1);
   1659                  memcpy(pValue, (UINT8*)S2W_DFLT_HTTPC_HOST_IP, len);
   1660                  pValue[len] = '\0';
   1661                  headerValues[i] = pValue;
   1662          	    headerTypes[i++] = (GSN_HTTP_USER_HEADER_TYPE_T)(GSN_HTTP_HEADER_HOST);
   1663                  httpConfInfo.reqHeaderCount +=1;
   1664          #endif		
   1665           	}
   1666          	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
   1667          	compiled with header type array being defined as array of UINT8 */
   1668          	{
   1669          		
   1670          		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   1671                  {
   1672                  	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)GSN_HTTP_HEADER_CUSTOM)
   1673          			{
   1674          				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)GSN_HTTP_HEADER_CUSTOM;
   1675          			}
   1676          			else
   1677          			{
   1678                  		headerTypesModified[i] = headerTypes[i];
   1679          			}
   1680                  }
   1681          	}
   1682              status = AppS2wHal_HttpOpen(pHttpData, &cid);
   1683          
   1684          AppS2wCmd_HttpClientOpenExit:
   1685              if(status == S2W_SUCCESS)
   1686              {
   1687                  S2w_Printf("\n\r%x", cid);
   1688          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1689                  if((NULL != tmp) && (GSN_HTTPS == pHttpData->httpType) && (NULL != s2wSslConf.dnsNameBuf))
   1690                  {
   1691                      status = AppS2wHal_HttpCheckDns(tmp);
   1692                  }
   1693          #endif		
   1694                  if(NULL != tmp)
   1695                  {
   1696                      gsn_free(tmp);
   1697                      tmp = NULL;
   1698                  }
   1699          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1700                  if(NULL != s2wSslConf.dnsNameBuf)
   1701                  {
   1702                  	gsn_free(s2wSslConf.dnsNameBuf);
   1703                  	s2wSslConf.dnsNameBuf = NULL;
   1704                  	s2wSslConf.dnsBufferLen = 0;
   1705                  }
   1706          #endif		
   1707                  return S2W_SUCCESS;
   1708              }
   1709              else
   1710              {
   1711                  if(NULL != pHttpData)
   1712                      gsn_free(pHttpData);
   \                     ??AppS2wCmd_HttpClientOpen_1:
   \   0000013E   0x4640             MOV      R0,R8
   \   00000140   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1713                  if(NULL != tmp)
   \   00000144   0xF1B9 0x0F00      CMP      R9,#+0
   \   00000148   0xBF1C             ITT      NE 
   \   0000014A   0x4648             MOVNE    R0,R9
   \   0000014C   0x.... 0x....      BLNE     GsnDynMemMgmt_Free
   1714                  {
   1715                      gsn_free(tmp);
   1716                      tmp = NULL;
   1717                  }
   1718          #if defined(S2W_SSL_CLIENT_SUPPORT)
   1719                  if(NULL != s2wSslConf.dnsNameBuf)
   \   00000150   0x6868             LDR      R0,[R5, #+4]
   \   00000152   0xB120             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_12
   1720                  {
   1721                  	gsn_free(s2wSslConf.dnsNameBuf);
   \   00000154   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1722                  	s2wSslConf.dnsNameBuf = NULL;
   \   00000158   0x2000             MOVS     R0,#+0
   \   0000015A   0x6068             STR      R0,[R5, #+4]
   1723                  	s2wSslConf.dnsBufferLen = 0;
   \   0000015C   0x6028             STR      R0,[R5, #+0]
   1724                  }
   1725          #endif		
   1726                  return status;
   \                     ??AppS2wCmd_HttpClientOpen_12:
   \   0000015E   0x4620             MOV      R0,R4
   \                     ??AppS2wCmd_HttpClientOpen_13:
   \   00000160   0xB007             ADD      SP,SP,#+28
   \   00000162   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1727              }
   \                     ??AppS2wCmd_HttpClientOpen_9:
   \   00000166   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_313:
   \   0000016A   0x9800             LDR      R0,[SP, #+0]
   \   0000016C   0xF888 0x002C      STRB     R0,[R8, #+44]
   \                     ??AppS2wCmd_HttpClientOpen_10:
   \   00000170   0xF108 0x072C      ADD      R7,R8,#+44
   \   00000174   0x2019             MOVS     R0,#+25
   \   00000176   0x6238             STR      R0,[R7, #+32]
   \   00000178   0x2E00             CMP      R6,#+0
   \   0000017A   0xD13C             BNE.N    ??AppS2wCmd_HttpClientOpen_14
   \   0000017C   0x2000             MOVS     R0,#+0
   \   0000017E   0x9000             STR      R0,[SP, #+0]
   \   00000180   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_130:
   \   00000184   0x2800             CMP      R0,#+0
   \   00000186   0xD036             BEQ.N    ??AppS2wCmd_HttpClientOpen_14
   \   00000188   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_312:
   \   0000018C   0x9800             LDR      R0,[SP, #+0]
   \   0000018E   0xB100             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_15
   \   00000190   0x6238             STR      R0,[R7, #+32]
   \                     ??AppS2wCmd_HttpClientOpen_15:
   \   00000192   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_129:
   \   00000196   0x0006             MOVS     R6,R0
   \   00000198   0xD02D             BEQ.N    ??AppS2wCmd_HttpClientOpen_14
   \   0000019A   0x.... 0x....      BL       strlen
   \   0000019E   0xB188             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_16
   \   000001A0   0x4630             MOV      R0,R6
   \   000001A2   0x.... 0x....      BL       S2wCert_SearchRamTable
   \   000001A6   0xF110 0x0F01      CMN      R0,#+1
   \   000001AA   0xBF04             ITT      EQ 
   \   000001AC   0x4630             MOVEQ    R0,R6
   \   000001AE   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   \   000001B2   0xF110 0x0F01      CMN      R0,#+1
   \   000001B6   0xD04D             BEQ.N    ??AppS2wCmd_HttpClientOpen_17
   \   000001B8   0x.... 0x....      BL       ?Subroutine88
   \                     ??CrossCallReturnLabel_476:
   \   000001BC   0x84B9             STRH     R1,[R7, #+36]
   \   000001BE   0x5900             LDR      R0,[R0, R4]
   \   000001C0   0x1C80             ADDS     R0,R0,#+2
   \   000001C2   0x62B8             STR      R0,[R7, #+40]
   \                     ??AppS2wCmd_HttpClientOpen_16:
   \   000001C4   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_128:
   \   000001C8   0x0006             MOVS     R6,R0
   \   000001CA   0xD014             BEQ.N    ??AppS2wCmd_HttpClientOpen_14
   \   000001CC   0x.... 0x....      BL       strlen
   \   000001D0   0xB188             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_14
   \   000001D2   0x4630             MOV      R0,R6
   \   000001D4   0x.... 0x....      BL       S2wCert_SearchRamTable
   \   000001D8   0xF110 0x0F01      CMN      R0,#+1
   \   000001DC   0xBF04             ITT      EQ 
   \   000001DE   0x4630             MOVEQ    R0,R6
   \   000001E0   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   \   000001E4   0xF110 0x0F01      CMN      R0,#+1
   \   000001E8   0xD037             BEQ.N    ??AppS2wCmd_HttpClientOpen_18
   \   000001EA   0x.... 0x....      BL       ?Subroutine88
   \                     ??CrossCallReturnLabel_477:
   \   000001EE   0x85B9             STRH     R1,[R7, #+44]
   \   000001F0   0x5900             LDR      R0,[R0, R4]
   \   000001F2   0x1C80             ADDS     R0,R0,#+2
   \   000001F4   0x6338             STR      R0,[R7, #+48]
   \                     ??AppS2wCmd_HttpClientOpen_14:
   \   000001F6   0x.... 0x....      LDR.W    R6,??DataTable378_2
   \   000001FA   0x.... 0x....      LDR.W    R4,??DataTable378_3
   \   000001FE   0x7830             LDRB     R0,[R6, #+0]
   \   00000200   0x2801             CMP      R0,#+1
   \   00000202   0xD03E             BEQ.N    ??AppS2wCmd_HttpClientOpen_19
   \   00000204   0x.... 0x....      LDR.W    R7,??DataTable378_4
   \   00000208   0xF107 0x0A64      ADD      R10,R7,#+100
   \   0000020C   0xF8DA 0x0010      LDR      R0,[R10, #+16]
   \   00000210   0x2800             CMP      R0,#+0
   \   00000212   0xD136             BNE.N    ??AppS2wCmd_HttpClientOpen_19
   \   00000214   0x2264             MOVS     R2,#+100
   \   00000216   0x2100             MOVS     R1,#+0
   \   00000218   0x.... 0x....      LDR.W    R0,??DataTable378_5
   \   0000021C   0x.... 0x....      BL       memset
   \   00000220   0x2264             MOVS     R2,#+100
   \   00000222   0x2100             MOVS     R1,#+0
   \   00000224   0x1D30             ADDS     R0,R6,#+4
   \   00000226   0x.... 0x....      BL       memset
   \   0000022A   0x2003             MOVS     R0,#+3
   \   0000022C   0xF887 0x0064      STRB     R0,[R7, #+100]
   \   00000230   0xF8CA 0x4008      STR      R4,[R10, #+8]
   \   00000234   0x1D30             ADDS     R0,R6,#+4
   \   00000236   0xF8CA 0x000C      STR      R0,[R10, #+12]
   \   0000023A   0x2200             MOVS     R2,#+0
   \   0000023C   0x2000             MOVS     R0,#+0
   \   0000023E   0xF8CA 0x0010      STR      R0,[R10, #+16]
   \   00000242   0xF240 0x6175      MOVW     R1,#+1653
   \   00000246   0x200F             MOVS     R0,#+15
   \   00000248   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000024C   0x0007             MOVS     R7,R0
   \   0000024E   0xD107             BNE.N    ??AppS2wCmd_HttpClientOpen_20
   \                     ??AppS2wCmd_HttpClientOpen_5:
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0xE785             B.N      ??AppS2wCmd_HttpClientOpen_13
   \                     ??AppS2wCmd_HttpClientOpen_17:
   \   00000254   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\r client certificate...">`
   \   00000258   0xE76E             B.N      ??AppS2wCmd_HttpClientOpen_11
   \                     ??AppS2wCmd_HttpClientOpen_18:
   \   0000025A   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rclient Key not found">`
   \   0000025E   0xE76B             B.N      ??AppS2wCmd_HttpClientOpen_11
   \                     ??AppS2wCmd_HttpClientOpen_20:
   \   00000260   0x220F             MOVS     R2,#+15
   \   00000262   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_36:
   \   00000266   0x.... 0x....      BL       ?Subroutine96
   \                     ??CrossCallReturnLabel_506:
   \   0000026A   0x2000             MOVS     R0,#+0
   \   0000026C   0x73B8             STRB     R0,[R7, #+14]
   \   0000026E   0x6077             STR      R7,[R6, #+4]
   \   00000270   0x210D             MOVS     R1,#+13
   \   00000272   0x.... 0x....      LDR.W    R0,??DataTable378_5
   \   00000276   0x6001             STR      R1,[R0, #+0]
   \   00000278   0xF8DA 0x0010      LDR      R0,[R10, #+16]
   \   0000027C   0x1C40             ADDS     R0,R0,#+1
   \   0000027E   0xF8CA 0x0010      STR      R0,[R10, #+16]
   \                     ??AppS2wCmd_HttpClientOpen_19:
   \   00000282   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_HttpClientOpen_21:
   \   00000284   0x.... 0x....      LDR.W    R1,??DataTable378_5
   \   00000288   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000028C   0x29FF             CMP      R1,#+255
   \   0000028E   0xBF28             IT       CS 
   \   00000290   0x21FF             MOVCS    R1,#+255
   \   00000292   0xF844 0x1020      STR      R1,[R4, R0, LSL #+2]
   \   00000296   0x1C40             ADDS     R0,R0,#+1
   \   00000298   0x2819             CMP      R0,#+25
   \   0000029A   0xD3F3             BCC.N    ??AppS2wCmd_HttpClientOpen_21
   \   0000029C   0xA902             ADD      R1,SP,#+8
   \   0000029E   0x4640             MOV      R0,R8
   \   000002A0   0x.... 0x....      BL       AppS2wHal_HttpOpen
   \   000002A4   0x0004             MOVS     R4,R0
   \   000002A6   0xF47F 0xAF4A      BNE.W    ??AppS2wCmd_HttpClientOpen_1
   \   000002AA   0x9902             LDR      R1,[SP, #+8]
   \   000002AC   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\r%x">`
   \   000002B0   0x.... 0x....      BL       S2w_Printf
   \   000002B4   0xF1B9 0x0F00      CMP      R9,#+0
   \   000002B8   0xD00B             BEQ.N    ??AppS2wCmd_HttpClientOpen_22
   \   000002BA   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   000002BE   0x2801             CMP      R0,#+1
   \   000002C0   0xD104             BNE.N    ??AppS2wCmd_HttpClientOpen_23
   \   000002C2   0x6868             LDR      R0,[R5, #+4]
   \   000002C4   0xB110             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_23
   \   000002C6   0x4648             MOV      R0,R9
   \   000002C8   0x.... 0x....      BL       AppS2wHal_HttpCheckDns
   \                     ??AppS2wCmd_HttpClientOpen_23:
   \   000002CC   0x4648             MOV      R0,R9
   \   000002CE   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_HttpClientOpen_22:
   \   000002D2   0x6868             LDR      R0,[R5, #+4]
   \   000002D4   0xB120             CBZ.N    R0,??AppS2wCmd_HttpClientOpen_24
   \   000002D6   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   000002DA   0x2000             MOVS     R0,#+0
   \   000002DC   0x6068             STR      R0,[R5, #+4]
   \   000002DE   0x6028             STR      R0,[R5, #+0]
   \                     ??AppS2wCmd_HttpClientOpen_24:
   \   000002E0   0x2000             MOVS     R0,#+0
   \   000002E2   0xE73D             B.N      ??AppS2wCmd_HttpClientOpen_13
   1728          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine88:
   \   00000000   0x210C             MOVS     R1,#+12
   \   00000002   0x4348             MULS     R0,R1,R0
   \   00000004   0x5901             LDR      R1,[R0, R4]
   \   00000006   0x8809             LDRH     R1,[R1, #+0]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine54:
   \   00000000   0xA904             ADD      R1,SP,#+16
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine51:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0xA806             ADD      R0,SP,#+24
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine75:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable448
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine72:
   \   00000000   0x4629             MOV      R1,R5
   \                     ??Subroutine72_0:
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      B.W      inet_pton

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine71:
   \   00000000   0x4629             MOV      R1,R5
   \                     ??Subroutine71_0:
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      B.W      inet_pton

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0x1C40             ADDS     R0,R0,#+1
   \   00000002   0x.... 0x....      B.W      GsnDynMemMgmt_Alloc

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine96:
   \   00000000   0x220E             MOVS     R2,#+14
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "192.168.240.1">`
   \   00000006   0x4638             MOV      R0,R7
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x4606             MOV      R6,R0
   \   00000002   0x2224             MOVS     R2,#+36
   \                     ??Subroutine18_0:
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine53:
   \   00000000   0xA903             ADD      R1,SP,#+12
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int
   1729          
   1730          
   1731          /**
   1732           ******************************************************************
   1733           * @ingroup S2w-Application
   1734           * @brief Process AT+HTTPCLOSE command
   1735           *   This function close the http connection opened.
   1736           * @param ptr Pointer to the user input string.
   1737           *
   1738           * @return S2W_SUCCESS - operation successful.
   1739           * @return S2W_FAILURE - operation Failed.
   1740           * @return S2W_EINVAL - operation Failed-invalid input
   1741           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1742           UINT8
   1743          AppS2wCmd_HttpClientClose(UINT8 *ptr)
   1744          {
   \                     AppS2wCmd_HttpClientClose:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   1745              UINT8 status;
   1746              UINT8 *p ;
   1747              UINT32 cid;
   1748          
   1749              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_177:
   \   00000008   0x0004             MOVS     R4,R0
   1750              if (!p)
   \   0000000A   0xD101             BNE.N    ??AppS2wCmd_HttpClientClose_0
   1751              {
   1752                  return S2W_EINVAL;
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0xBD16             POP      {R1,R2,R4,PC}
   1753              }
   1754              else
   1755              {
   1756                  if(AppS2w_CidValidate(*p) == INVALID_CID)
   \                     ??AppS2wCmd_HttpClientClose_0:
   \   00000010   0x7820             LDRB     R0,[R4, #+0]
   \   00000012   0x.... 0x....      BL       AppS2w_CidValidate
   \   00000016   0x28FF             CMP      R0,#+255
   \   00000018   0xD101             BNE.N    ??AppS2wCmd_HttpClientClose_1
   1757                      return S2W_EBADCID;
   \   0000001A   0x2005             MOVS     R0,#+5
   \   0000001C   0xBD16             POP      {R1,R2,R4,PC}
   1758                  status = AppS2wParse_Hex(p, &cid);
   \                     ??AppS2wCmd_HttpClientClose_1:
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       AppS2wParse_Hex
   1759                  if (status != S2W_SUCCESS)
   \   00000026   0xB910             CBNZ.N   R0,??AppS2wCmd_HttpClientClose_2
   1760                  {
   1761                  	return status;
   1762                  }
   1763                  return AppS2wHal_HttpClose(cid);
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x.... 0x....      BL       AppS2wHal_HttpClose
   \                     ??AppS2wCmd_HttpClientClose_2:
   \   0000002E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   1764              }
   1765          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0xA801             ADD      R0,SP,#+4
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   1766          
   1767          /**
   1768           ******************************************************************
   1769           * @ingroup S2w-Application
   1770           * @brief Process AT+HTTPCONF command
   1771           *   This function configures the http client paramters.
   1772           * @param ptr Pointer to the user input string.
   1773           *
   1774           * @return S2W_SUCCESS - operation successful.
   1775           * @return S2W_FAILURE - operation Failed.
   1776           * @return S2W_EINVAL - operation Failed-invalid input
   1777           ******************************************************************/
   1778          

   \                                 In section .text, align 2, keep-with-next
   1779           UINT8
   1780           AppS2wCmd_HttpClientConfig(UINT8 *ptr)
   1781           {
   \                     AppS2wCmd_HttpClientConfig:
   \   00000000   0xE92D 0x47F1      PUSH     {R0,R4-R10,LR}
   1782               UINT32 param, len,Userparam/*, index = 0*/;
   1783               static UINT8 initDone;
   1784               UINT8 *p, i, newParam = 0;
   1785               INT8 *pValue;
   1786          
   1787              if(!initDone)
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable378_2
   \   00000008   0x.... 0x....      LDR.W    R7,??DataTable378_4
   \   0000000C   0x7868             LDRB     R0,[R5, #+1]
   \   0000000E   0x.... 0x....      LDR.W    R8,??DataTable378_5
   \   00000012   0xB081             SUB      SP,SP,#+4
   \   00000014   0x2600             MOVS     R6,#+0
   \   00000016   0xF107 0x0464      ADD      R4,R7,#+100
   \   0000001A   0xB990             CBNZ.N   R0,??AppS2wCmd_HttpClientConfig_0
   1788              {
   1789                  memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
   \   0000001C   0x2264             MOVS     R2,#+100
   \   0000001E   0x.... 0x....      BL       ??Subroutine141_0
   1790                  memset(&headerValues[0], 0, sizeof(headerValues));
   \                     ??CrossCallReturnLabel_639:
   \   00000022   0x2264             MOVS     R2,#+100
   \   00000024   0x4631             MOV      R1,R6
   \   00000026   0x1D28             ADDS     R0,R5,#+4
   \   00000028   0x.... 0x....      BL       memset
   1791                  httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
   \   0000002C   0x2003             MOVS     R0,#+3
   \   0000002E   0xF887 0x0064      STRB     R0,[R7, #+100]
   1792                  httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
   1793                  httpConfInfo.reqHeaderValues = headerValues;
   1794                  httpConfInfo.reqHeaderCount = 0;
   \   00000032   0x6126             STR      R6,[R4, #+16]
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable378_3
   \   00000038   0x60A0             STR      R0,[R4, #+8]
   \   0000003A   0x1D28             ADDS     R0,R5,#+4
   \   0000003C   0x60E0             STR      R0,[R4, #+12]
   1795          
   1796                  initDone = 1;
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x7068             STRB     R0,[R5, #+1]
   1797              }
   1798          
   1799               p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_HttpClientConfig_0:
   \   00000042   0x.... 0x....      BL       ?Subroutine35
   1800               if (!p)
   \                     ??CrossCallReturnLabel_176:
   \   00000046   0x2800             CMP      R0,#+0
   \   00000048   0xD07A             BEQ.N    ??AppS2wCmd_HttpClientConfig_1
   1801               {
   1802                   return S2W_EINVAL;
   1803               }
   1804               AppS2wParse_Int(p, &param);
   \   0000004A   0x.... 0x....      BL       ?Subroutine51
   1805          
   1806          	 Userparam = param;
   \                     ??CrossCallReturnLabel_311:
   \   0000004E   0xF8DD 0x9000      LDR      R9,[SP, #+0]
   1807          
   1808               len = strlen((INT8 *)ptr);
   \   00000052   0x9801             LDR      R0,[SP, #+4]
   \   00000054   0x.... 0x....      BL       strlen
   \   00000058   0x0007             MOVS     R7,R0
   1809               if(len == 0)
   \   0000005A   0xD071             BEQ.N    ??AppS2wCmd_HttpClientConfig_1
   1810               {
   1811                   return S2W_EINVAL;
   1812               }
   1813          	if((GSN_HTTP_USER_HEADER_TYPE_T)param >= GSN_HTTP_HEADER_DATE &&  Userparam < GSN_HTTP_HEADER_COUNT )
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x280A             CMP      R0,#+10
   \   00000060   0xD304             BCC.N    ??AppS2wCmd_HttpClientConfig_2
   \   00000062   0xF1B9 0x0F19      CMP      R9,#+25
   \   00000066   0xBF3C             ITT      CC 
   \   00000068   0x1C80             ADDCC    R0,R0,#+2
   \   0000006A   0x9000             STRCC    R0,[SP, #+0]
   1814          	{
   1815          	   param = param + 2;
   1816          	}
   1817          	if((GSN_HTTP_USER_HEADER_TYPE_T)param > GSN_HTTP_HEADER_SERVER &&  Userparam < GSN_HTTP_HEADER_COUNT)
   \                     ??AppS2wCmd_HttpClientConfig_2:
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   \   0000006E   0x2815             CMP      R0,#+21
   \   00000070   0xD304             BCC.N    ??AppS2wCmd_HttpClientConfig_3
   \   00000072   0xF1B9 0x0F19      CMP      R9,#+25
   \   00000076   0xBF3C             ITT      CC 
   \   00000078   0x1C40             ADDCC    R0,R0,#+1
   \   0000007A   0x9000             STRCC    R0,[SP, #+0]
   1818          	{
   1819          	   param = param + 1;
   1820          	}
   1821              if(param == S2W_HTTPC_CFG_PARAM_REQUEST_URL)
   \                     ??AppS2wCmd_HttpClientConfig_3:
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x281A             CMP      R0,#+26
   \   00000080   0xD120             BNE.N    ??AppS2wCmd_HttpClientConfig_4
   1822              {
   1823                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000082   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_175:
   \   00000086   0x0006             MOVS     R6,R0
   1824                  if (!p)
   \   00000088   0xD05A             BEQ.N    ??AppS2wCmd_HttpClientConfig_1
   1825                  {
   1826                      return S2W_EINVAL;
   1827                  }
   1828                  len = strlen((const char *)p);
   \   0000008A   0x.... 0x....      BL       strlen
   \   0000008E   0x4607             MOV      R7,R0
   1829                  if(NULL != httpConfInfo.reqPathPtr)
   \   00000090   0x6860             LDR      R0,[R4, #+4]
   \   00000092   0xB118             CBZ.N    R0,??AppS2wCmd_HttpClientConfig_5
   1830                  {
   1831                      gsn_free(httpConfInfo.reqPathPtr);
   \   00000094   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1832                      httpConfInfo.reqPathPtr = NULL;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x6060             STR      R0,[R4, #+4]
   1833                  }
   1834                  httpConfInfo.reqPathPtr = gsn_malloc(len+1);
   \                     ??AppS2wCmd_HttpClientConfig_5:
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0xF240 0x712A      MOVW     R1,#+1834
   \   000000A2   0x1C78             ADDS     R0,R7,#+1
   \   000000A4   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000A8   0x6060             STR      R0,[R4, #+4]
   1835                  if(NULL == httpConfInfo.reqPathPtr)
   \   000000AA   0xB1D8             CBZ.N    R0,??AppS2wCmd_HttpClientConfig_6
   1836                  {
   1837                      return S2W_FAILURE;
   1838                  }
   1839                  strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
   \   000000AC   0x463A             MOV      R2,R7
   \   000000AE   0x4631             MOV      R1,R6
   \   000000B0   0x.... 0x....      BL       strncpy
   1840                  httpConfInfo.reqPathPtr[len] ='\0';
   \   000000B4   0x6860             LDR      R0,[R4, #+4]
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x5439             STRB     R1,[R7, R0]
   1841          
   1842              }
   1843              else if((param > S2W_HTTPC_CFG_PARAM_INV && param < S2W_HTTPC_CFG_PARAM_HEADER_COUNT1)
   1844                  || (param >= S2W_HTTPC_CFG_PARAM_HEADER_CUSTOM))
   1845              {
   1846                  pValue = gsn_malloc(len+1);
   1847          
   1848                  if(pValue == NULL)
   1849                  {
   1850                      return S2W_FAILURE;
   1851                  }
   1852          
   1853                  memset(pValue, 0 , len+1);
   1854                  strncpy(pValue, (const INT8 *)ptr, len);
   1855                  pValue[len] = '\0';
   1856          
   1857                  for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   1858                  {
   1859                      if((headerValues[i] == NULL) || (headerTypes[i] == param))
   1860                      {
   1861                          if(headerValues[i])
   1862                          {
   1863                           gsn_free(headerValues[i]);
   1864                          }
   1865                          else
   1866                          {
   1867                           newParam = 1;
   1868                          }
   1869                          break;
   1870                     }
   1871                 }
   1872               if( i < S2W_HTTPC_MAX_HDR_SUPPORTED)
   1873               {
   1874          	     headerValues[i] = pValue;
   1875          	     headerTypes[i] = (GSN_HTTP_USER_HEADER_TYPE_T)param;
   1876               }
   1877               if(newParam)
   1878                   httpConfInfo.reqHeaderCount++;
   1879              }
   1880              else
   1881              {
   1882                  return S2W_EINVAL;
   1883              }
   1884               httpConfAtCmd =1;
   \                     ??AppS2wCmd_HttpClientConfig_7:
   \   000000BA   0x2001             MOVS     R0,#+1
   \   000000BC   0x7028             STRB     R0,[R5, #+0]
   1885               return S2W_SUCCESS;
   \   000000BE   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_HttpClientConfig_8:
   \   000000C0   0xE8BD 0x87F6      POP      {R1,R2,R4-R10,PC}  ;; return
   \                     ??AppS2wCmd_HttpClientConfig_4:
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD03B             BEQ.N    ??AppS2wCmd_HttpClientConfig_1
   \   000000C8   0x3819             SUBS     R0,R0,#+25
   \   000000CA   0x28E6             CMP      R0,#+230
   \   000000CC   0xD338             BCC.N    ??AppS2wCmd_HttpClientConfig_1
   \   000000CE   0xF107 0x0A01      ADD      R10,R7,#+1
   \   000000D2   0x2200             MOVS     R2,#+0
   \   000000D4   0xF240 0x7136      MOVW     R1,#+1846
   \   000000D8   0x4650             MOV      R0,R10
   \   000000DA   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000DE   0xEA5F 0x0900      MOVS     R9,R0
   \   000000E2   0xD101             BNE.N    ??AppS2wCmd_HttpClientConfig_9
   \                     ??AppS2wCmd_HttpClientConfig_6:
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0xE7EB             B.N      ??AppS2wCmd_HttpClientConfig_8
   \                     ??AppS2wCmd_HttpClientConfig_9:
   \   000000E8   0x4652             MOV      R2,R10
   \   000000EA   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_35:
   \   000000EE   0x9901             LDR      R1,[SP, #+4]
   \   000000F0   0x463A             MOV      R2,R7
   \   000000F2   0x4648             MOV      R0,R9
   \   000000F4   0x.... 0x....      BL       strncpy
   \   000000F8   0xF807 0x6009      STRB     R6,[R7, R9]
   \   000000FC   0x4637             MOV      R7,R6
   \                     ??AppS2wCmd_HttpClientConfig_10:
   \   000000FE   0xEB05 0x0087      ADD      R0,R5,R7, LSL #+2
   \   00000102   0x6840             LDR      R0,[R0, #+4]
   \   00000104   0xB138             CBZ.N    R0,??AppS2wCmd_HttpClientConfig_11
   \   00000106   0xF858 0x1027      LDR      R1,[R8, R7, LSL #+2]
   \   0000010A   0x9A00             LDR      R2,[SP, #+0]
   \   0000010C   0x4291             CMP      R1,R2
   \   0000010E   0xD104             BNE.N    ??AppS2wCmd_HttpClientConfig_12
   \   00000110   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000114   0xE005             B.N      ??AppS2wCmd_HttpClientConfig_13
   \                     ??AppS2wCmd_HttpClientConfig_11:
   \   00000116   0x2601             MOVS     R6,#+1
   \   00000118   0xE003             B.N      ??AppS2wCmd_HttpClientConfig_13
   \                     ??AppS2wCmd_HttpClientConfig_12:
   \   0000011A   0x1C78             ADDS     R0,R7,#+1
   \   0000011C   0xB2C7             UXTB     R7,R0
   \   0000011E   0x2F19             CMP      R7,#+25
   \   00000120   0xD3ED             BCC.N    ??AppS2wCmd_HttpClientConfig_10
   \                     ??AppS2wCmd_HttpClientConfig_13:
   \   00000122   0x2F19             CMP      R7,#+25
   \   00000124   0xD206             BCS.N    ??AppS2wCmd_HttpClientConfig_14
   \   00000126   0xEB05 0x0087      ADD      R0,R5,R7, LSL #+2
   \   0000012A   0xF8C0 0x9004      STR      R9,[R0, #+4]
   \   0000012E   0x9800             LDR      R0,[SP, #+0]
   \   00000130   0xF848 0x0027      STR      R0,[R8, R7, LSL #+2]
   \                     ??AppS2wCmd_HttpClientConfig_14:
   \   00000134   0x2E00             CMP      R6,#+0
   \   00000136   0xD0C0             BEQ.N    ??AppS2wCmd_HttpClientConfig_7
   \   00000138   0x6920             LDR      R0,[R4, #+16]
   \   0000013A   0x1C40             ADDS     R0,R0,#+1
   \   0000013C   0x6120             STR      R0,[R4, #+16]
   \   0000013E   0xE7BC             B.N      ??AppS2wCmd_HttpClientConfig_7
   \                     ??AppS2wCmd_HttpClientConfig_1:
   \   00000140   0x2002             MOVS     R0,#+2
   \   00000142   0xE7BD             B.N      ??AppS2wCmd_HttpClientConfig_8
   1886          
   1887           }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine141_0:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x4640             MOV      R0,R8
   \   00000004   0x.... 0x....      B.W      memset
   1888          /**
   1889           ******************************************************************
   1890           * @ingroup S2w-Application
   1891           * @brief Process AT+HTTPCONFDEL command
   1892           *   This function delete the particular http configuration
   1893           * @param ptr Pointer to the user input string.
   1894           *
   1895           * @return S2W_SUCCESS - operation successful.
   1896           * @return S2W_FAILURE - operation Failed.
   1897           * @return S2W_EINVAL - operation Failed-invalid input
   1898           ******************************************************************/
   1899          

   \                                 In section .text, align 2, keep-with-next
   1900           UINT8
   1901          AppS2wCmd_HttpClientConfigDel(UINT8 *ptr)
   1902          {
   \                     AppS2wCmd_HttpClientConfigDel:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1903              UINT32 param, i;
   1904              //static UINT8 initDone;
   1905              UINT8 *p;
   1906          
   1907              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
   1908              if (!p)
   \                     ??CrossCallReturnLabel_156:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD049             BEQ.N    ??AppS2wCmd_HttpClientConfigDel_0
   1909              {
   1910                  return S2W_EINVAL;
   1911              }
   1912              AppS2wParse_Int(p, &param);
   \   0000000C   0x.... 0x....      BL       ?Subroutine51
   1913          
   1914          	if((GSN_HTTP_USER_HEADER_TYPE_T)param >= GSN_HTTP_HEADER_DATE)
   \                     ??CrossCallReturnLabel_310:
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0xBF24             ITT      CS 
   \   00000016   0x1C80             ADDCS    R0,R0,#+2
   \   00000018   0x9000             STRCS    R0,[SP, #+0]
   1915          	{
   1916          	   param = param + 2;
   1917          	}
   1918          	if((GSN_HTTP_USER_HEADER_TYPE_T)param > GSN_HTTP_HEADER_SERVER)
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x2815             CMP      R0,#+21
   \   0000001E   0xBF24             ITT      CS 
   \   00000020   0x1C40             ADDCS    R0,R0,#+1
   \   00000022   0x9000             STRCS    R0,[SP, #+0]
   1919          	{
   1920          	   param = param + 1;
   1921          	}
   1922              if(param == S2W_HTTPC_CFG_PARAM_REQUEST_URL)
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0x.... 0x....      LDR.W    R4,??DataTable378_4
   \   0000002A   0x281A             CMP      R0,#+26
   \   0000002C   0xD107             BNE.N    ??AppS2wCmd_HttpClientConfigDel_1
   1923              {
   1924                  if(NULL != httpConfInfo.reqPathPtr)
   \   0000002E   0x6EA0             LDR      R0,[R4, #+104]
   \   00000030   0xB118             CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_2
   1925                  {
   1926                      gsn_free(httpConfInfo.reqPathPtr);
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1927                      httpConfInfo.reqPathPtr = NULL;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x66A0             STR      R0,[R4, #+104]
   1928                  }
   1929                  return S2W_SUCCESS;
   \                     ??AppS2wCmd_HttpClientConfigDel_2:
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xBDFE             POP      {R1-R7,PC}
   1930              }
   1931          
   1932              if((param > S2W_HTTPC_CFG_PARAM_INV && param < S2W_HTTPC_CFG_PARAM_HEADER_COUNT1)
   1933                  || (param >= S2W_HTTPC_CFG_PARAM_HEADER_CUSTOM))
   \                     ??AppS2wCmd_HttpClientConfigDel_1:
   \   0000003E   0xB378             CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_0
   \   00000040   0x3819             SUBS     R0,R0,#+25
   \   00000042   0x28E6             CMP      R0,#+230
   \   00000044   0xD32C             BCC.N    ??AppS2wCmd_HttpClientConfigDel_0
   1934              {/*delete Header Configuration*/
   1935          
   1936                  for( i = 0; i < httpConfInfo.reqHeaderCount; i++)
   \   00000046   0x2600             MOVS     R6,#+0
   \   00000048   0x.... 0x....      LDR.W    R5,??DataTable378_5
   \   0000004C   0x.... 0x....      LDR.W    R7,??DataTable378_2
   \   00000050   0xE000             B.N      ??AppS2wCmd_HttpClientConfigDel_3
   \                     ??AppS2wCmd_HttpClientConfigDel_4:
   \   00000052   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wCmd_HttpClientConfigDel_3:
   \   00000054   0x6F60             LDR      R0,[R4, #+116]
   \   00000056   0x4286             CMP      R6,R0
   \   00000058   0xD20A             BCS.N    ??AppS2wCmd_HttpClientConfigDel_5
   1937                  {
   1938                      if(headerTypes[i] == param)
   \   0000005A   0xF855 0x0026      LDR      R0,[R5, R6, LSL #+2]
   \   0000005E   0x9900             LDR      R1,[SP, #+0]
   \   00000060   0x4288             CMP      R0,R1
   \   00000062   0xD1F6             BNE.N    ??AppS2wCmd_HttpClientConfigDel_4
   \   00000064   0xEB07 0x0086      ADD      R0,R7,R6, LSL #+2
   \   00000068   0x6840             LDR      R0,[R0, #+4]
   \   0000006A   0xB108             CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_5
   1939                      {
   1940                          if(headerValues[i])
   1941                              gsn_free(headerValues[i]);
   \   0000006C   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1942                          break;
   1943                      }
   1944                  }
   1945          
   1946                  if(i == httpConfInfo.reqHeaderCount)
   \                     ??AppS2wCmd_HttpClientConfigDel_5:
   \   00000070   0x6F60             LDR      R0,[R4, #+116]
   \   00000072   0x4286             CMP      R6,R0
   \   00000074   0xD109             BNE.N    ??AppS2wCmd_HttpClientConfigDel_6
   1947                      return S2W_FAILURE;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xBDFE             POP      {R1-R7,PC}
   1948          
   1949                  for( ; i < (httpConfInfo.reqHeaderCount - 1); i++)
   1950                  {
   1951                      headerTypes[i] = headerTypes[i+1];
   \                     ??AppS2wCmd_HttpClientConfigDel_7:
   \   0000007A   0xEB05 0x0286      ADD      R2,R5,R6, LSL #+2
   \   0000007E   0x6852             LDR      R2,[R2, #+4]
   \   00000080   0xF845 0x2026      STR      R2,[R5, R6, LSL #+2]
   1952                      headerValues[i] = headerValues[i+1];
   1953                  }
   \   00000084   0x1C76             ADDS     R6,R6,#+1
   \   00000086   0x688A             LDR      R2,[R1, #+8]
   \   00000088   0x604A             STR      R2,[R1, #+4]
   \                     ??AppS2wCmd_HttpClientConfigDel_6:
   \   0000008A   0x1E42             SUBS     R2,R0,#+1
   \   0000008C   0xEB07 0x0186      ADD      R1,R7,R6, LSL #+2
   \   00000090   0x4296             CMP      R6,R2
   \   00000092   0xD3F2             BCC.N    ??AppS2wCmd_HttpClientConfigDel_7
   1954                  headerValues[i] = NULL;
   \   00000094   0x2000             MOVS     R0,#+0
   \   00000096   0x6048             STR      R0,[R1, #+4]
   1955                  headerTypes[i] = GSN_HTTP_HEADER_INVAL;
   \   00000098   0xF845 0x0026      STR      R0,[R5, R6, LSL #+2]
   1956                  httpConfInfo.reqHeaderCount--;
   \   0000009C   0x6762             STR      R2,[R4, #+116]
   1957              }
   1958              else
   1959              {
   1960                  return S2W_EINVAL;
   1961              }
   1962          
   1963              return S2W_SUCCESS;
   \   0000009E   0xBDFE             POP      {R1-R7,PC}
   \                     ??AppS2wCmd_HttpClientConfigDel_0:
   \   000000A0   0x2002             MOVS     R0,#+2
   \   000000A2   0xBDFE             POP      {R1-R7,PC}       ;; return
   1964          
   1965          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   0x9001             STR      R0,[SP, #+4]
   \                     ??Subroutine34_0:
   \   00000002   0xA802             ADD      R0,SP,#+8
   \   00000004   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   1966          
   1967          
   1968          /**
   1969           ******************************************************************
   1970           * @ingroup S2w-Application
   1971           * @brief Process the http data from the serial interface.
   1972           *   This function reads the http data and sends to wifi.
   1973           * @param dataLen the input data length.
   1974           * @param hCid the cid of the http connection.
   1975           * @return S2W_SUCCESS - operation successful.
   1976           * @return S2W_FAILURE - operation Failed.
   1977           ******************************************************************/
   1978          

   \                                 In section .text, align 2, keep-with-next
   1979          PUBLIC UINT8
   1980          AppS2wHal_httpContentDataGet(UINT32 dataLen, UINT8 hCid)
   1981          {
   \                     AppS2wHal_httpContentDataGet:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   1982              GSN_STATUS status = S2W_SUCCESS;
   1983              S2W_HTTP_DATA_T *pHttpData;
   1984              httpConfInfo.reqBodyLen = 0;
   \   00000004   0x.... 0x....      LDR.W    R6,??DataTable378_4
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xF106 0x0778      ADD      R7,R6,#+120
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x6078             STR      R0,[R7, #+4]
   \   00000012   0x4688             MOV      R8,R1
   1985              httpConfInfo.moredata = 1;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0xF886 0x00AC      STRB     R0,[R6, #+172]
   \   0000001A   0x2500             MOVS     R5,#+0
   1986              httpConfInfo.reqBodyPtr = (INT8 *)gsn_malloc(1022);
   \   0000001C   0x462A             MOV      R2,R5
   \   0000001E   0xF240 0x71C2      MOVW     R1,#+1986
   \   00000022   0xF240 0x30FE      MOVW     R0,#+1022
   \   00000026   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000002A   0x67B0             STR      R0,[R6, #+120]
   1987              if(NULL ==  httpConfInfo.reqBodyPtr)
   \   0000002C   0xB198             CBZ.N    R0,??AppS2wHal_httpContentDataGet_0
   1988              {
   1989                  status = S2W_FAILURE;
   1990                  goto AppS2wHal_httpContentDataGetExit;
   1991              }
   1992              pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(hCid);
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   00000034   0xEA5F 0x0900      MOVS     R9,R0
   1993              if(pHttpData != NULL)
   \   00000038   0xD00D             BEQ.N    ??AppS2wHal_httpContentDataGet_0
   1994              {
   1995                  GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   \   0000003A   0xF04F 0x31FF      MOV      R1,#-1
   \   0000003E   0xF109 0x0030      ADD      R0,R9,#+48
   \   00000042   0x.... 0x....      BL       GsnOsal_SemAcquire
   1996              }
   1997              else
   1998              {
   1999                  status = S2W_FAILURE;
   2000                  goto AppS2wHal_httpContentDataGetExit;
   2001              }
   2002              while(dataLen)
   \                     ??AppS2wHal_httpContentDataGet_1:
   \   00000046   0xB32C             CBZ.N    R4,??AppS2wHal_httpContentDataGet_2
   2003              {
   2004          
   2005                  httpConfInfo.reqBodyLen = dataLen >= HTTP_SEND_CHUNK_SIZE?
   2006                                                          HTTP_SEND_CHUNK_SIZE:dataLen;
   \   00000048   0xF5B4 0x7F7A      CMP      R4,#+1000
   \   0000004C   0xBF2C             ITE      CS 
   \   0000004E   0xF44F 0x707A      MOVCS    R0,#+1000
   \   00000052   0x4620             MOVCC    R0,R4
   \   00000054   0xE001             B.N      ??AppS2wHal_httpContentDataGet_3
   \                     ??AppS2wHal_httpContentDataGet_0:
   \   00000056   0x2501             MOVS     R5,#+1
   \   00000058   0xE026             B.N      ??AppS2wHal_httpContentDataGet_4
   \                     ??AppS2wHal_httpContentDataGet_3:
   \   0000005A   0x6078             STR      R0,[R7, #+4]
   2007          
   2008                  if(s2wCidList[hCid].sd != INVALID_CID)
   \   0000005C   0xF44F 0x7094      MOV      R0,#+296
   \   00000060   0x.... 0x....      LDR.W    R1,??DataTable381
   \   00000064   0xFB00 0x1008      MLA      R0,R0,R8,R1
   \   00000068   0x69C0             LDR      R0,[R0, #+28]
   \   0000006A   0x28FF             CMP      R0,#+255
   \   0000006C   0xD011             BEQ.N    ??AppS2wHal_httpContentDataGet_5
   2009                  {
   2010          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   2011          			AppS2wHal_CharNGet((UINT8 *)httpConfInfo.reqBodyPtr,httpConfInfo.reqBodyLen);
   \   0000006E   0x6879             LDR      R1,[R7, #+4]
   \   00000070   0x6FB0             LDR      R0,[R6, #+120]
   \   00000072   0x.... 0x....      BL       AppS2wHal_CharNGet
   2012          #else
   2013                      AppS2wHal_CharNGet1((UINT8 *)httpConfInfo.reqBodyPtr,httpConfInfo.reqBodyLen);
   2014          #endif
   2015          			
   2016                  	dataLen -= httpConfInfo.reqBodyLen;
   \   00000076   0x6878             LDR      R0,[R7, #+4]
   \   00000078   0x1A24             SUBS     R4,R4,R0
   2017          
   2018                 		if(0 == dataLen )
   \   0000007A   0xBF04             ITT      EQ 
   \   0000007C   0x2000             MOVEQ    R0,#+0
   \   0000007E   0xF886 0x00AC      STRBEQ   R0,[R6, #+172]
   2019                  	{
   2020                      	httpConfInfo.moredata = 0;
   2021                  	}
   2022          	        status = S2wHttp_Send(hCid);
   \   00000082   0x4640             MOV      R0,R8
   \   00000084   0x.... 0x....      BL       S2wHttp_Send
   \   00000088   0x4605             MOV      R5,R0
   2023                  	httpConfInfo.reqBodyLen = 0;
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x6078             STR      R0,[R7, #+4]
   2024                  }
   2025          		else
   2026          			status = S2W_FAILURE;
   2027                  if(status != S2W_SUCCESS)
   \   0000008E   0x2D00             CMP      R5,#+0
   \   00000090   0xD0D9             BEQ.N    ??AppS2wHal_httpContentDataGet_1
   \                     ??AppS2wHal_httpContentDataGet_5:
   \   00000092   0x2501             MOVS     R5,#+1
   2028                  {
   2029                      status = S2W_FAILURE;
   2030                      break;
   2031                  }
   2032              }
   2033              if(pHttpData != NULL)
   2034              {
   2035                  GsnOsal_SemRelease(&pHttpData->opInProgress);
   \                     ??AppS2wHal_httpContentDataGet_2:
   \   00000094   0xF109 0x0030      ADD      R0,R9,#+48
   \   00000098   0x.... 0x....      BL       GsnOsal_SemRelease
   2036              }
   2037              if(NULL != httpConfInfo.reqBodyPtr)
   \   0000009C   0x6FB0             LDR      R0,[R6, #+120]
   \   0000009E   0xB118             CBZ.N    R0,??AppS2wHal_httpContentDataGet_4
   2038              {
   2039                  gsn_free(httpConfInfo.reqBodyPtr);
   \   000000A0   0x.... 0x....      BL       GsnDynMemMgmt_Free
   2040                  httpConfInfo.reqBodyPtr = NULL;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x67B0             STR      R0,[R6, #+120]
   2041              }
   2042          AppS2wHal_httpContentDataGetExit:
   2043          	httpConfInfo.moredata = 0;
   \                     ??AppS2wHal_httpContentDataGet_4:
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xF886 0x00AC      STRB     R0,[R6, #+172]
   2044             return status;
   \   000000AE   0xB2E8             UXTB     R0,R5
   \   000000B0   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   2045          }
   2046          

   \                                 In section .text, align 2, keep-with-next
   2047          UINT8
   2048          AppS2wCmd_HttpClientSend(UINT8 *ptr)
   2049          {
   \                     AppS2wCmd_HttpClientSend:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   2050          	UINT8 cid;
   2051              UINT32  method;
   2052              UINT8 *p;//,*page, *content,  *httpRxDataBuf;
   2053              UINT32 /*httpRxDataLen = 0, temp, ret,*/ timeOut,dataLen=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9006             STR      R0,[SP, #+24]
   2054          #ifdef S2W_HTTPC_SUPPORT
   2055          	S2W_HTTP_DATA_T *pHttpData;
   2056          	UINT32 len;
   2057          #endif
   2058              UINT8 status = S2W_SUCCESS;
   \   0000000A   0x4681             MOV      R9,R0
   2059          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2060              UINT8 statusline;
   2061              UINT32 headercount;
   2062              UINT32 size;
   2063          #endif
   2064              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ?Subroutine37
   2065              if (!p)
   \                     ??CrossCallReturnLabel_200:
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD035             BEQ.N    ??AppS2wCmd_HttpClientSend_0
   2066              {
   2067                  return S2W_EINVAL;
   2068              }
   2069          	cid = AppS2w_CidValidate(*p);
   \   00000014   0x.... 0x....      BL       ?Subroutine101
   \                     ??CrossCallReturnLabel_519:
   \   00000018   0x4606             MOV      R6,R0
   2070              if(cid == INVALID_CID)
   \   0000001A   0x2EFF             CMP      R6,#+255
   \   0000001C   0xBF08             IT       EQ 
   \   0000001E   0x2005             MOVEQ    R0,#+5
   2071                  return S2W_EBADCID;
   \   00000020   0xD02F             BEQ.N    ??AppS2wCmd_HttpClientSend_1
   2072              p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ?Subroutine37
   2073              if (!p)
   \                     ??CrossCallReturnLabel_199:
   \   00000026   0xB358             CBZ.N    R0,??AppS2wCmd_HttpClientSend_0
   2074              {
   2075                  return S2W_EINVAL;
   2076              }
   2077              AppS2wParse_Int(p, &method);
   \   00000028   0x.... 0x....      BL       ?Subroutine54
   2078              if(method == S2W_HTTP_METHOD_GETRESP)
   \                     ??CrossCallReturnLabel_348:
   \   0000002C   0x9804             LDR      R0,[SP, #+16]
   \   0000002E   0x2806             CMP      R0,#+6
   \   00000030   0xBF08             IT       EQ 
   \   00000032   0x2008             MOVEQ    R0,#+8
   2079              {
   2080              	method = GSN_HTTP_METHOD_GETRESP;
   \   00000034   0xD002             BEQ.N    ??AppS2wCmd_HttpClientSend_2
   2081              }
   2082              else if(method == S2W_HTTP_METHOD_POSTRESP)
   \   00000036   0x2807             CMP      R0,#+7
   \   00000038   0xD101             BNE.N    ??AppS2wCmd_HttpClientSend_3
   2083              {
   2084              	method = GSN_HTTP_METHOD_POSTRESP;
   \   0000003A   0x2009             MOVS     R0,#+9
   \                     ??AppS2wCmd_HttpClientSend_2:
   \   0000003C   0x9004             STR      R0,[SP, #+16]
   2085              }
   2086          #ifdef S2W_HTTPC_SUPPORT
   2087              httpConfInfo.reqMethod = (GSN_HTTP_USER_METHOD_T)method;
   \                     ??AppS2wCmd_HttpClientSend_3:
   \   0000003E   0x.... 0x....      LDR.W    R4,??DataTable378_4
   \   00000042   0x9804             LDR      R0,[SP, #+16]
   \   00000044   0xF104 0x0764      ADD      R7,R4,#+100
   \   00000048   0x7078             STRB     R0,[R7, #+1]
   2088          #endif
   2089              p = AppS2wParse_NextParamGet(&ptr);
   \   0000004A   0x.... 0x....      BL       ?Subroutine37
   2090              if (!p)
   \                     ??CrossCallReturnLabel_198:
   \   0000004E   0xB1B8             CBZ.N    R0,??AppS2wCmd_HttpClientSend_0
   2091              {
   2092                  return S2W_EINVAL;
   2093              }
   2094              AppS2wParse_Int(p, &timeOut);
   \   00000050   0x.... 0x....      BL       ?Subroutine56
   2095              if(timeOut == 0)
   \                     ??CrossCallReturnLabel_359:
   \   00000054   0x9805             LDR      R0,[SP, #+20]
   \   00000056   0xB908             CBNZ.N   R0,??AppS2wCmd_HttpClientSend_4
   2096                  timeOut = 5;
   \   00000058   0x2005             MOVS     R0,#+5
   \   0000005A   0x9005             STR      R0,[SP, #+20]
   2097          #ifdef S2W_WEB_SERVER
   2098          	if(TRUE == GsnHttpd_IsRunning())
   \                     ??AppS2wCmd_HttpClientSend_4:
   \   0000005C   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD106             BNE.N    ??AppS2wCmd_HttpClientSend_5
   2099          	{
   2100          		status = AppS2w_HttpdSetTimeOut(cid,timeOut);
   \   00000064   0x4630             MOV      R0,R6
   \   00000066   0x9905             LDR      R1,[SP, #+20]
   \   00000068   0x.... 0x....      BL       AppS2w_HttpdSetTimeOut
   \   0000006C   0xEA5F 0x0900      MOVS     R9,R0
   2101          		if(status != S2W_SUCCESS)
   \   00000070   0xD153             BNE.N    ??AppS2wCmd_HttpClientSend_6
   2102          			return	status;
   2103          	}
   2104          #endif
   2105          #ifdef S2W_HTTPC_SUPPORT
   2106          	httpConfInfo.httpTimeOut = timeOut;
   \                     ??AppS2wCmd_HttpClientSend_5:
   \   00000072   0x9805             LDR      R0,[SP, #+20]
   \   00000074   0x6478             STR      R0,[R7, #+68]
   2107          #endif
   2108              p = AppS2wParse_NextParamGet(&ptr);
   \   00000076   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_197:
   \   0000007A   0xEA5F 0x0800      MOVS     R8,R0
   2109              if (!p)
   \   0000007E   0xD101             BNE.N    ??AppS2wCmd_HttpClientSend_7
   2110              {
   2111                  return S2W_EINVAL;
   \                     ??AppS2wCmd_HttpClientSend_0:
   \   00000080   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_HttpClientSend_1:
   \   00000082   0xE093             B.N      ??AppS2wCmd_HttpClientSend_8
   2112              }
   2113          
   2114          #ifdef S2W_HTTPC_SUPPORT
   2115           	len = strlen((const char *)p);
   \                     ??AppS2wCmd_HttpClientSend_7:
   \   00000084   0x.... 0x....      BL       strlen
   \   00000088   0x4605             MOV      R5,R0
   2116              if(NULL != httpConfInfo.reqPathPtr)
   \   0000008A   0x6878             LDR      R0,[R7, #+4]
   \   0000008C   0xB118             CBZ.N    R0,??AppS2wCmd_HttpClientSend_9
   2117              {
   2118                  gsn_free(httpConfInfo.reqPathPtr);
   \   0000008E   0x.... 0x....      BL       GsnDynMemMgmt_Free
   2119                  httpConfInfo.reqPathPtr = NULL;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x6078             STR      R0,[R7, #+4]
   2120              }
   2121              httpConfInfo.reqPathPtr = gsn_malloc(len+1);
   \                     ??AppS2wCmd_HttpClientSend_9:
   \   00000096   0x2200             MOVS     R2,#+0
   \   00000098   0xF640 0x0149      MOVW     R1,#+2121
   \   0000009C   0x1C68             ADDS     R0,R5,#+1
   \   0000009E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000A2   0x6078             STR      R0,[R7, #+4]
   2122              if(NULL == httpConfInfo.reqPathPtr)
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD039             BEQ.N    ??AppS2wCmd_HttpClientSend_10
   2123              {
   2124                  return S2W_FAILURE;
   2125              }
   2126              strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
   \   000000A8   0x462A             MOV      R2,R5
   \   000000AA   0x4641             MOV      R1,R8
   \   000000AC   0x.... 0x....      BL       strncpy
   2127              httpConfInfo.reqPathPtr[len] ='\0';
   \   000000B0   0x6878             LDR      R0,[R7, #+4]
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x5429             STRB     R1,[R5, R0]
   2128              httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
   \   000000B6   0x2003             MOVS     R0,#+3
   \   000000B8   0xF884 0x0064      STRB     R0,[R4, #+100]
   2129          #endif
   2130          #if (defined(S2W_GSLINK_XML) || defined(S2W_GSLINK_RAW )) &&  defined(S2W_WEB_SERVER)
   2131          	if((method == GSN_HTTP_METHOD_GETRESP || method == GSN_HTTP_METHOD_POSTRESP ) &&
   2132          		(strcmp((const char *)s2wappMainTaskCtxt->currenturi,(const INT8 *)p) != 0))
   \   000000BC   0x.... 0x....      LDR.W    R4,??DataTable382
   \   000000C0   0x9804             LDR      R0,[SP, #+16]
   \   000000C2   0x2808             CMP      R0,#+8
   \   000000C4   0xBF18             IT       NE 
   \   000000C6   0x2809             CMPNE    R0,#+9
   \   000000C8   0xD107             BNE.N    ??AppS2wCmd_HttpClientSend_11
   \   000000CA   0x6820             LDR      R0,[R4, #+0]
   \   000000CC   0xF500 0x40D6      ADD      R0,R0,#+27392
   \   000000D0   0x4641             MOV      R1,R8
   \   000000D2   0x3014             ADDS     R0,R0,#+20
   \   000000D4   0x.... 0x....      BL       strcmp
   \   000000D8   0xBB00             CBNZ.N   R0,??AppS2wCmd_HttpClientSend_10
   2133          	{
   2134          		return S2W_FAILURE;
   2135          	}
   2136          #endif
   2137              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_HttpClientSend_11:
   \   000000DA   0x.... 0x....      BL       ?Subroutine37
   2138          	if (!p)
   \                     ??CrossCallReturnLabel_196:
   \   000000DE   0xB9F8             CBNZ.N   R0,??AppS2wCmd_HttpClientSend_12
   2139              {
   2140          #ifdef S2W_HTTPC_SUPPORT
   2141          		if(GSN_HTTP_METHOD_POST == method)
   \   000000E0   0x9804             LDR      R0,[SP, #+16]
   \   000000E2   0x2803             CMP      R0,#+3
   \   000000E4   0xD103             BNE.N    ??AppS2wCmd_HttpClientSend_13
   2142                  {
   2143                      gsn_free(httpConfInfo.reqPathPtr);
   \   000000E6   0x6878             LDR      R0,[R7, #+4]
   \   000000E8   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   000000EC   0xE7C8             B.N      ??AppS2wCmd_HttpClientSend_0
   2144                      return S2W_EINVAL;
   2145                  }
   2146                  httpConfInfo.reqBodyTotalLen = 0;
   \                     ??AppS2wCmd_HttpClientSend_13:
   \   000000EE   0x2000             MOVS     R0,#+0
   \   000000F0   0x61F8             STR      R0,[R7, #+28]
   2147                  httpConfInfo.reqBodyLen = 0;
   \   000000F2   0x61B8             STR      R0,[R7, #+24]
   2148                  pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   \   000000F4   0x4630             MOV      R0,R6
   \   000000F6   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   000000FA   0x0004             MOVS     R4,R0
   2149                  if(pHttpData != NULL)
   \   000000FC   0xD00E             BEQ.N    ??AppS2wCmd_HttpClientSend_10
   2150                  {
   2151                      GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   \   000000FE   0xF04F 0x31FF      MOV      R1,#-1
   \   00000102   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000106   0x.... 0x....      BL       GsnOsal_SemAcquire
   2152                      status = S2wHttp_Send(cid);
   \   0000010A   0x4630             MOV      R0,R6
   \   0000010C   0x.... 0x....      BL       S2wHttp_Send
   \   00000110   0x4681             MOV      R9,R0
   2153                  }
   2154                  else
   2155                  {
   2156                      return S2W_FAILURE;
   2157                  }
   2158                  if(pHttpData != NULL)
   2159                  {
   2160                      GsnOsal_SemRelease(&pHttpData->opInProgress);
   \   00000112   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000116   0x.... 0x....      BL       GsnOsal_SemRelease
   \                     ??AppS2wCmd_HttpClientSend_6:
   \   0000011A   0xE045             B.N      ??AppS2wCmd_HttpClientSend_14
   2161                  }
   \                     ??AppS2wCmd_HttpClientSend_10:
   \   0000011C   0x2001             MOVS     R0,#+1
   \   0000011E   0xE045             B.N      ??AppS2wCmd_HttpClientSend_8
   2162          #endif
   2163              }
   2164              else
   2165              {
   2166                   AppS2wParse_Int(p, &dataLen);
   \                     ??AppS2wCmd_HttpClientSend_12:
   \   00000120   0xA906             ADD      R1,SP,#+24
   \   00000122   0x.... 0x....      BL       AppS2wParse_Int
   2167          #ifdef S2W_HTTPC_SUPPORT
   2168          		httpConfInfo.reqBodyTotalLen = dataLen;
   \   00000126   0x9806             LDR      R0,[SP, #+24]
   \   00000128   0x61F8             STR      R0,[R7, #+28]
   2169          #endif
   2170          #if defined(S2W_GSLINK) && defined(S2W_GSLINK_RAW )&& defined(S2W_WEB_SERVER)
   2171          		if((method == GSN_HTTP_METHOD_GETRESP || method == GSN_HTTP_METHOD_POSTRESP))
   \   0000012A   0x9804             LDR      R0,[SP, #+16]
   \   0000012C   0x2808             CMP      R0,#+8
   \   0000012E   0xBF18             IT       NE 
   \   00000130   0x2809             CMPNE    R0,#+9
   \   00000132   0xD139             BNE.N    ??AppS2wCmd_HttpClientSend_14
   2172          		{
   2173          			status = AppS2w_HttpdCtxInit(&s2wCidList[cid].httpdCtx,1);
   \   00000134   0xF44F 0x7094      MOV      R0,#+296
   \   00000138   0x.... 0x....      LDR.W    R1,??DataTable381
   \   0000013C   0xFB00 0x1706      MLA      R7,R0,R6,R1
   \   00000140   0xF107 0x0694      ADD      R6,R7,#+148
   \   00000144   0x2101             MOVS     R1,#+1
   \   00000146   0x4630             MOV      R0,R6
   \   00000148   0x.... 0x....      BL       AppS2w_HttpdCtxInit
   \   0000014C   0x4681             MOV      R9,R0
   2174          			AppS2w_HttpdBodyLenSet(&s2wCidList[cid].httpdCtx,dataLen);
   \   0000014E   0x9906             LDR      R1,[SP, #+24]
   \   00000150   0x4630             MOV      R0,R6
   \   00000152   0x.... 0x....      BL       AppS2w_HttpdBodyLenSet
   2175          			AppS2w_HttpdMethodSet(&s2wCidList[cid].httpdCtx,(UINT8)method);
   \   00000156   0x9904             LDR      R1,[SP, #+16]
   \   00000158   0xB2C9             UXTB     R1,R1
   \   0000015A   0x4630             MOV      R0,R6
   \   0000015C   0x.... 0x....      BL       AppS2w_HttpdMethodSet
   2176          			if(s2wappMainTaskCtxt->respTimeOut !=0)
   \   00000160   0x6820             LDR      R0,[R4, #+0]
   \   00000162   0xF646 0x31BC      MOVW     R1,#+27580
   \   00000166   0x180A             ADDS     R2,R1,R0
   \   00000168   0x6852             LDR      R2,[R2, #+4]
   \   0000016A   0xB1EA             CBZ.N    R2,??AppS2wCmd_HttpClientSend_14
   2177          			{
   2178          				s2wappMainTaskCtxt->responseInprogress=1;
   \   0000016C   0x2201             MOVS     R2,#+1
   \   0000016E   0x540A             STRB     R2,[R1, R0]
   2179          			GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl);
   \   00000170   0xF646 0x36E8      MOVW     R6,#+27624
   \   00000174   0x6820             LDR      R0,[R4, #+0]
   \   00000176   0x5830             LDR      R0,[R6, R0]
   \   00000178   0x.... 0x....      BL       GsnSoftTmr_Stop
   2180          			s2wappMainTaskCtxt->respTimeOutTmrHndl = GsnSoftTmr_Start(&s2wappMainTaskCtxt->respTimeOutTmr, GSN_SOFT_TMR_ONESHOT,0, (ULONG64)(s2wappMainTaskCtxt->respTimeOut),
   2181          							  ( GSN_SOFT_TMR_CBR_T )AppMcu_RespTimeoutCb, &s2wCidList[cid].sd );
   \   0000017C   0x6825             LDR      R5,[R4, #+0]
   \   0000017E   0xF107 0x001C      ADD      R0,R7,#+28
   \   00000182   0x9003             STR      R0,[SP, #+12]
   \   00000184   0x2100             MOVS     R1,#+0
   \   00000186   0x.... 0x....      LDR.W    R0,??DataTable384_1
   \   0000018A   0x9002             STR      R0,[SP, #+8]
   \   0000018C   0x2200             MOVS     R2,#+0
   \   0000018E   0xF646 0x30C0      MOVW     R0,#+27584
   \   00000192   0x460B             MOV      R3,R1
   \   00000194   0x5940             LDR      R0,[R0, R5]
   \   00000196   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000019A   0xF505 0x40D6      ADD      R0,R5,#+27392
   \   0000019E   0x30C8             ADDS     R0,R0,#+200
   \   000001A0   0x.... 0x....      BL       GsnSoftTmr_Start
   \   000001A4   0x6821             LDR      R1,[R4, #+0]
   \   000001A6   0x5070             STR      R0,[R6, R1]
   2182          			}
   2183          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2184                      /* check if custom headers has to be added */
   2185                      p = NULL;
   2186                      len = 0;
   2187          
   2188                      p = AppS2wParse_NextParamGet(&ptr);
   2189                      if (NULL != p)
   2190                      {
   2191                          status = AppS2wParse_Boolean(p, &statusline);
   2192                          if (status != S2W_SUCCESS)
   2193                          {
   2194                              return status;
   2195                          }
   2196                          p = NULL;
   2197                          p = AppS2wParse_NextParamGet(&ptr);
   2198                          AppS2wParse_Int(p,  &size);
   2199                          if(size != 0)
   2200                          {
   2201                              headercount = size;
   2202                          }
   2203                          AppS2w_HttpStatusLineSet(&s2wCidList[cid].httpdCtx, statusline);
   2204                          AppS2w_HttpHdrCountSet(&s2wCidList[cid].httpdCtx, headercount);
   2205                      }
   2206          #endif
   2207          		}
   2208          #endif
   2209              }
   2210              return status;
   \                     ??AppS2wCmd_HttpClientSend_14:
   \   000001A8   0xFA5F 0xF089      UXTB     R0,R9
   \                     ??AppS2wCmd_HttpClientSend_8:
   \   000001AC   0xB009             ADD      SP,SP,#+36
   \   000001AE   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   2211          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine56:
   \   00000000   0xA905             ADD      R1,SP,#+20
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0xA808             ADD      R0,SP,#+32
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine101:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x.... 0x....      B.W      AppS2w_CidValidate
   2212          
   2213          #endif
   2214          
   2215          #if 0
   2216          UINT8
   2217          AppS2wCmd_SslCertificateAdd(UINT8 *ptr)
   2218          {
   2219              UINT8 *p, *name;
   2220              INT32 len, i = 0;
   2221              UINT32 certStore;
   2222          
   2223              name = AppS2wParse_NextParamGet(&ptr);     //get cert name
   2224              if (!name)
   2225              {
   2226                  return S2W_EINVAL;
   2227              }
   2228              len = strlen((const char *)name);
   2229              if( len > 32)
   2230                  return S2W_EINVAL;
   2231              p = AppS2wParse_NextParamGet(&ptr);
   2232              if (!p)
   2233              {
   2234                  return S2W_EINVAL;
   2235              }
   2236              AppS2wParse_Int(p, &certFormat);
   2237              if(certFormat > 1)
   2238                  return S2W_EINVAL;
   2239          
   2240              p = AppS2wParse_NextParamGet(&ptr);
   2241              if (!p)
   2242              {
   2243                  return S2W_EINVAL;
   2244              }
   2245          
   2246              AppS2wParse_Int(p, &certFileSize);
   2247          
   2248              certFileSize = certFileSize >> certFormat;
   2249              //S2w_Printf("\n\rfile size %d", certFileSize);
   2250          
   2251              p = AppS2wParse_NextParamGet(&ptr);     //get wehre to store SRAM/FLASH
   2252              if (!p)
   2253              {
   2254                  return S2W_EINVAL;
   2255              }
   2256              AppS2wParse_Int(p, &certStore);
   2257          
   2258              if(certStore > 1)
   2259                  return S2W_EINVAL;
   2260          
   2261          	if(S2wCert_findFile(name) == -1)
   2262          	{
   2263          		S2w_Printf("\n\rFILE EXISTS\n\r");
   2264          		return S2W_FAILURE;
   2265          	}
   2266              if(certStore)
   2267              {
   2268              	i = S2wCert_MemAlloc(certFileSize);
   2269          	    //S2w_Printf("\nmem-alloc :%d\n",i);
   2270          	    if(i == -1)
   2271          	    	return S2W_FAILURE;
   2272                  p = gsn_malloc(len+1); //allocate memory for storing name
   2273                  if(p == NULL)
   2274                      return S2W_FAILURE;
   2275                  strcpy((INT8 *)p, (const char *)name);
   2276                  s2w_ssl_cert_table[i].name = p; //copy pointer to SRAM entry
   2277                  s2w_ssl_cert_table[i].location = CERT_IN_RAM;
   2278                  certIndex = i;
   2279              }
   2280              else
   2281              {
   2282                  certFile = f_open(name, "w");
   2283                  if(certFile == NULL)
   2284                  	return S2W_FAILURE;
   2285                  certIndex = S2W_INVALID_CERT_INDEX;
   2286              }
   2287          
   2288              /* Store the Cert Index in a global. This is used when the actual certificate
   2289                is received in the next escape sequence */
   2290          
   2291              return S2W_SUCCESS;
   2292          }
   2293          
   2294          PUBLIC UINT32
   2295          AppS2wCertificateData(UINT8 ch1)
   2296          {
   2297              UINT8 *buf, ch;
   2298              UINT16 i = 2, index = 2;
   2299          
   2300              if ( (certIndex == S2W_INVALID_CERT_INDEX) && (certFile == NULL))
   2301                      return S2W_FAILURE;
   2302          
   2303              if( certFileSize == 0)
   2304                      return S2W_FAILURE;
   2305          
   2306              buf = gsn_malloc((certFileSize << certFormat) + 2);
   2307          
   2308              if(buf == NULL)
   2309                  return S2W_FAILURE;
   2310          
   2311              *buf = certFileSize & 0x00FF;
   2312              *(buf + 1) = (certFileSize & 0xFF00) >> 8;
   2313              /* if format is hex size will be double */
   2314              certFileSize = certFileSize << certFormat;
   2315          
   2316              /* store incoming byte in temparory bufer */
   2317              AppS2wHal_CharNGet((buf+2), certFileSize);
   2318          
   2319              if(certFormat)
   2320              {
   2321                  for(i = 2; i < (certFileSize + 2);)
   2322                  {
   2323                      buf[index] = (AppS2wParse_ToHex(buf[i]) << 4) | (AppS2wParse_ToHex(buf[i + 1]) & 0x0F);
   2324                      i = i + 2;
   2325                      index++;
   2326                  }
   2327              }
   2328          
   2329          
   2330              /* recieving file is complete. If the Cert Address is in the 0x8000000
   2331              range store it in flash else store it in SRAM (0x4000000 range) */
   2332              if ( certIndex !=  S2W_INVALID_CERT_INDEX)
   2333              {
   2334                  /* store in SRAM */
   2335                  memcpy((UINT8 *) s2w_ssl_cert_table[certIndex].certAddress, buf,
   2336                      ((certFileSize >> certFormat) + 2));
   2337          
   2338              }
   2339              else
   2340              {
   2341                  /* store in flash */
   2342                  f_write(buf, 1, (certFileSize >> certFormat) + 2, certFile);
   2343          		f_close(certFile);
   2344              }
   2345              /* reset variables */
   2346              certIndex = S2W_INVALID_CERT_INDEX;
   2347              certFileSize = 0;
   2348          	certFile = NULL;
   2349              gsn_free(buf);
   2350              S2w_Printf("\r\nOK\r\n");
   2351              return S2W_SUCCESS;
   2352          }
   2353          
   2354          UINT8
   2355          AppS2wCmd_SslCertificateDelete(UINT8 *ptr)
   2356          {
   2357              UINT8 *p;
   2358              INT32 certIndex, retVal =0;
   2359          
   2360              p = AppS2wParse_NextParamGet(&ptr);     //get cert name
   2361              if (!p)
   2362              {
   2363                   return S2W_EINVAL;
   2364              }
   2365              certIndex = S2wCert_SearchRamTable(p);
   2366              if(certIndex != -1)
   2367              {
   2368              	gsn_free (s2w_ssl_cert_table[certIndex].certAddress);
   2369                  gsn_free(s2w_ssl_cert_table[certIndex].name);
   2370                  s2w_ssl_cert_table[certIndex].name = NULL;
   2371                  s2w_ssl_cert_table[certIndex].certAddress = NULL;
   2372                  if( s2w_ssl_cert_table[certIndex].location == CERT_IN_FLASH )
   2373              	{
   2374              		retVal = f_delete(p);
   2375              	}
   2376              }
   2377              else
   2378              {
   2379              	retVal = f_delete(p);
   2380              }
   2381          
   2382              if(!retVal)
   2383              {
   2384              	if(strcmp((const char*)p,S2W_CERT_NAME_CA) == 0)
   2385              	{
   2386          			s2wCurrent.security.eap.useCaCert=0;
   2387              	}
   2388                  return S2W_SUCCESS;
   2389              }
   2390              else
   2391                  return S2W_FAILURE;
   2392          }
   2393          
   2394          PRIVATE UINT8
   2395          AppS2wCmd_Weap(UINT8 *ptr)
   2396          {
   2397              UINT8 *name, *p;
   2398              INT32 i = 0;
   2399              UINT32 certStore, certType;
   2400          
   2401              p = AppS2wParse_NextParamGet(&ptr);
   2402              if (!p)
   2403              {
   2404                  return S2W_EINVAL;
   2405              }
   2406              AppS2wParse_Int(p, &certType);
   2407          
   2408              if(certType > 2)
   2409                  return S2W_EINVAL;
   2410          
   2411              p = AppS2wParse_NextParamGet(&ptr);
   2412              if (!p)
   2413              {
   2414                  return S2W_EINVAL;
   2415              }
   2416          
   2417              AppS2wParse_Int(p, &certFormat);
   2418          
   2419              if(certFormat > 1)
   2420                  return S2W_EINVAL;
   2421          
   2422              p = AppS2wParse_NextParamGet(&ptr);
   2423              if (!p)
   2424              {
   2425                  return S2W_EINVAL;
   2426              }
   2427              AppS2wParse_Int(p, &certFileSize);
   2428              certFileSize = certFileSize >> certFormat;
   2429              p = AppS2wParse_NextParamGet(&ptr);
   2430              if (!p)
   2431              {
   2432                  return S2W_EINVAL;
   2433              }
   2434              AppS2wParse_Int(p, &certStore);
   2435          
   2436              if(certStore > 1)
   2437                  return S2W_EINVAL;
   2438          
   2439              if(certStore)
   2440              {
   2441              	i = S2wCert_MemAlloc(certStore, certFileSize);
   2442          
   2443          	    if(i == -1)
   2444          	        return S2W_FAILURE;
   2445          
   2446                  name = gsn_malloc(32);
   2447                  if(certType == 0)
   2448                      strcpy((INT8 *)name, S2W_CERT_NAME_CA);
   2449                  else if(certType == 1)
   2450                      strcpy((INT8 *)name, S2W_CERT_NAME_CLIENT);
   2451                  else
   2452                      strcpy((INT8 *)name, S2W_CERT_NAME_KEY);
   2453                  s2w_ssl_cert_table[i].name = name;
   2454                  s2w_ssl_cert_table[i].location = CERT_IN_RAM;
   2455          		certIndex = i;
   2456              }
   2457              else
   2458              {
   2459                  /* write certificate name in flash */
   2460                  if(certType == 0)
   2461                      certFile = f_open(S2W_CERT_NAME_CA, "w");
   2462                  else if(certType == 1)
   2463                      certFile = f_open(S2W_CERT_NAME_CLIENT, "w");
   2464                  else
   2465                      certFile = f_open(S2W_CERT_NAME_KEY, "w");
   2466          
   2467                  if(certFile == NULL)
   2468                  	return S2W_FAILURE;
   2469                  certIndex = S2W_INVALID_CERT_INDEX;
   2470              }
   2471              /* Store the Cert Index in a global. This is used when the actual certificate
   2472                is received in the next escape sequence */
   2473              return S2W_SUCCESS;
   2474          }
   2475          #endif
   2476          
   2477          /**
   2478           ******************************************************************
   2479           * @ingroup S2w-Application
   2480           * @brief Process the AT+SETTIME Command.
   2481           *   This function set the system time. The input time in dd/mm/yyyy and
   2482           *   HH:MM:SS format
   2483           * @param ptr Pointer to the user input string.
   2484           *
   2485           * @return S2W_SUCCESS - operation successful.
   2486           * @retval S2W_EINVAL  - operation failure-invalid command.
   2487           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2488          PUBLIC UINT8
   2489          AppS2wCmd_SystemTimeSet(UINT8 *ptr)
   2490          {
   \                     AppS2wCmd_SystemTimeSet:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB08F             SUB      SP,SP,#+60
   2491              GSN_SYSTEM_TIME_T currentTime, newTime, timeDifference;
   2492              UINT8 i, *p, len, j,flag=0;
   \   00000004   0x2500             MOVS     R5,#+0
   2493              struct tm time;
   2494              BOOL diffNegative;
   2495              ULONG64 time64=0;
   \   00000006   0xE9CD 0x5500      STRD     R5,R5,[SP, #+0]
   2496              
   2497              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000A   0xA80F             ADD      R0,SP,#+60
   \   0000000C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000010   0x0004             MOVS     R4,R0
   2498              if(p && *p)
   \   00000012   0xBF1C             ITT      NE 
   \   00000014   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000016   0x2800             CMPNE    R0,#+0
   \   00000018   0xD079             BEQ.N    ??AppS2wCmd_SystemTimeSet_0
   2499              {
   2500              len = strlen((char *)p);
   \   0000001A   0x.... 0x....      BL       ?Subroutine70
   \                     ??CrossCallReturnLabel_426:
   \   0000001E   0xB2C5             UXTB     R5,R0
   2501          
   2502              i = 0;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xE000             B.N      ??AppS2wCmd_SystemTimeSet_1
   2503              while(i < len)
   2504              {
   2505                  if(p[i] == '/')
   2506                      {
   2507                      break;
   2508                      }
   2509                  i++;
   \                     ??AppS2wCmd_SystemTimeSet_2:
   \   00000024   0x4630             MOV      R0,R6
   \                     ??AppS2wCmd_SystemTimeSet_1:
   \   00000026   0x1C46             ADDS     R6,R0,#+1
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x42A8             CMP      R0,R5
   \   0000002C   0xDA02             BGE.N    ??AppS2wCmd_SystemTimeSet_3
   \   0000002E   0x5D01             LDRB     R1,[R0, R4]
   \   00000030   0x292F             CMP      R1,#+47
   \   00000032   0xD1F7             BNE.N    ??AppS2wCmd_SystemTimeSet_2
   2510              }
   2511          
   2512              if( i >= len )
   \                     ??AppS2wCmd_SystemTimeSet_3:
   \   00000034   0x42A8             CMP      R0,R5
   \   00000036   0xDA73             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2513              {
   2514                  return S2W_EINVAL;
   2515              }
   2516              p[i] = '\0';
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x5501             STRB     R1,[R0, R4]
   2517          
   2518              AppS2wParse_Int(p, (UINT32 *)&time.tm_mday);
   \   0000003C   0x4620             MOV      R0,R4
   \   0000003E   0x.... 0x....      BL       ?Subroutine56
   2519                  //S2w_Printf("\n\r%d", time.tm_mday);
   2520              if(time.tm_mday > 31)
   \                     ??CrossCallReturnLabel_358:
   \   00000042   0x9805             LDR      R0,[SP, #+20]
   \   00000044   0x2820             CMP      R0,#+32
   \   00000046   0xDA6B             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2521                  {
   2522                  return S2W_EINVAL;
   2523                  }
   2524              j = ++i;
   \   00000048   0x4630             MOV      R0,R6
   \   0000004A   0x4602             MOV      R2,R0
   \   0000004C   0xE000             B.N      ??AppS2wCmd_SystemTimeSet_5
   2525              while(i < len)
   2526              {
   2527                  if(p[i] == '/')
   2528                      {
   2529                      break;
   2530                      }
   2531                  i++;
   \                     ??AppS2wCmd_SystemTimeSet_6:
   \   0000004E   0x4630             MOV      R0,R6
   \                     ??AppS2wCmd_SystemTimeSet_5:
   \   00000050   0x1C46             ADDS     R6,R0,#+1
   \   00000052   0xB2C0             UXTB     R0,R0
   \   00000054   0x42A8             CMP      R0,R5
   \   00000056   0xDA02             BGE.N    ??AppS2wCmd_SystemTimeSet_7
   \   00000058   0x5D01             LDRB     R1,[R0, R4]
   \   0000005A   0x292F             CMP      R1,#+47
   \   0000005C   0xD1F7             BNE.N    ??AppS2wCmd_SystemTimeSet_6
   2532              }
   2533          
   2534              if( i >= len )
   \                     ??AppS2wCmd_SystemTimeSet_7:
   \   0000005E   0x42A8             CMP      R0,R5
   \   00000060   0xDA5E             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2535              {
   2536                  return S2W_EINVAL;
   2537              }
   2538              p[i] = '\0';
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0x5501             STRB     R1,[R0, R4]
   2539          
   2540              AppS2wParse_Int(&p[j], (UINT32 *)&time.tm_mon);
   \   00000066   0xB2D2             UXTB     R2,R2
   \   00000068   0xA906             ADD      R1,SP,#+24
   \   0000006A   0x1910             ADDS     R0,R2,R4
   \   0000006C   0x.... 0x....      BL       AppS2wParse_Int
   2541                  //S2w_Printf(":%d", time.tm_mon);
   2542              if(time.tm_mon > 12)
   \   00000070   0x9806             LDR      R0,[SP, #+24]
   \   00000072   0x280D             CMP      R0,#+13
   \   00000074   0xBFBF             ITTTT    LT 
   \   00000076   0x1E40             SUBLT    R0,R0,#+1
   \   00000078   0x9006             STRLT    R0,[SP, #+24]
   \   0000007A   0xB2F0             UXTBLT   R0,R6
   \   0000007C   0x42A8             CMPLT    R0,R5
   2543                  {
   2544                  return S2W_EINVAL;
   2545                  }
   2546              time.tm_mon--;
   2547              ++i;
   2548          
   2549              if( i >= len )
   \   0000007E   0xDA4F             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2550              {
   2551                  return S2W_EINVAL;
   2552              }
   2553          
   2554              AppS2wParse_Int(&p[i], (UINT32 *)&time.tm_year);
   \   00000080   0xA907             ADD      R1,SP,#+28
   \   00000082   0x1900             ADDS     R0,R0,R4
   \   00000084   0x.... 0x....      BL       AppS2wParse_Int
   2555                  //S2w_Printf(":%d", time.tm_year);
   2556              if(time.tm_year < 1900)
   \   00000088   0x9807             LDR      R0,[SP, #+28]
   \   0000008A   0xF240 0x716C      MOVW     R1,#+1900
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xDB46             BLT.N    ??AppS2wCmd_SystemTimeSet_4
   2557                  {
   2558                  return S2W_EINVAL;
   2559                  }
   2560          
   2561              p = AppS2wParse_NextParamGet(&ptr);
   \   00000092   0xA80F             ADD      R0,SP,#+60
   \   00000094   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000098   0x0004             MOVS     R4,R0
   2562          
   2563              if (!p)
   \   0000009A   0xD041             BEQ.N    ??AppS2wCmd_SystemTimeSet_4
   2564              {
   2565                  return S2W_EINVAL;
   2566              }
   2567              len = strlen((char *)p);
   \   0000009C   0x.... 0x....      BL       strlen
   \   000000A0   0xB2C5             UXTB     R5,R0
   2568          
   2569              i = 0;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xE000             B.N      ??AppS2wCmd_SystemTimeSet_8
   2570              while(i < len)
   2571              {
   2572                  if(p[i] == ':')
   2573                      {
   2574                      break;
   2575                      }
   2576                  i++;
   \                     ??AppS2wCmd_SystemTimeSet_9:
   \   000000A6   0x4630             MOV      R0,R6
   \                     ??AppS2wCmd_SystemTimeSet_8:
   \   000000A8   0x1C46             ADDS     R6,R0,#+1
   \   000000AA   0xB2C0             UXTB     R0,R0
   \   000000AC   0x42A8             CMP      R0,R5
   \   000000AE   0xDA02             BGE.N    ??AppS2wCmd_SystemTimeSet_10
   \   000000B0   0x5D01             LDRB     R1,[R0, R4]
   \   000000B2   0x293A             CMP      R1,#+58
   \   000000B4   0xD1F7             BNE.N    ??AppS2wCmd_SystemTimeSet_9
   2577              }
   2578          
   2579              if( i >= len )
   \                     ??AppS2wCmd_SystemTimeSet_10:
   \   000000B6   0x42A8             CMP      R0,R5
   \   000000B8   0xDA32             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2580              {
   2581                  return S2W_EINVAL;
   2582              }
   2583              p[i] = '\0';
   \   000000BA   0x2100             MOVS     R1,#+0
   \   000000BC   0x5501             STRB     R1,[R0, R4]
   2584          
   2585              AppS2wParse_Int(p, (UINT32 *)&time.tm_hour);
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       ?Subroutine54
   2586                  //S2w_Printf(" %d:", time.tm_hour);
   2587              if(time.tm_hour > 23)
   \                     ??CrossCallReturnLabel_347:
   \   000000C4   0x9804             LDR      R0,[SP, #+16]
   \   000000C6   0x2818             CMP      R0,#+24
   \   000000C8   0xDA2A             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2588                  {
   2589                  return S2W_EINVAL;
   2590                  }
   2591              j = ++i;
   \   000000CA   0x4630             MOV      R0,R6
   \   000000CC   0x4602             MOV      R2,R0
   \   000000CE   0xE000             B.N      ??AppS2wCmd_SystemTimeSet_11
   2592              while(i < len)
   2593              {
   2594                  if(p[i] == ':')
   2595                      {
   2596                      break;
   2597                      }
   2598                  i++;
   \                     ??AppS2wCmd_SystemTimeSet_12:
   \   000000D0   0x4630             MOV      R0,R6
   \                     ??AppS2wCmd_SystemTimeSet_11:
   \   000000D2   0x1C46             ADDS     R6,R0,#+1
   \   000000D4   0xB2C0             UXTB     R0,R0
   \   000000D6   0x42A8             CMP      R0,R5
   \   000000D8   0xDA02             BGE.N    ??AppS2wCmd_SystemTimeSet_13
   \   000000DA   0x5D01             LDRB     R1,[R0, R4]
   \   000000DC   0x293A             CMP      R1,#+58
   \   000000DE   0xD1F7             BNE.N    ??AppS2wCmd_SystemTimeSet_12
   2599              }
   2600          
   2601              if( i >= len )
   \                     ??AppS2wCmd_SystemTimeSet_13:
   \   000000E0   0x42A8             CMP      R0,R5
   \   000000E2   0xDA1D             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2602              {
   2603                  return S2W_EINVAL;
   2604              }
   2605              p[i] = '\0';
   \   000000E4   0x2100             MOVS     R1,#+0
   \   000000E6   0x5501             STRB     R1,[R0, R4]
   2606          
   2607              AppS2wParse_Int(&p[j], (UINT32 *)&time.tm_min);
   \   000000E8   0xB2D2             UXTB     R2,R2
   \   000000EA   0xA903             ADD      R1,SP,#+12
   \   000000EC   0x1910             ADDS     R0,R2,R4
   \   000000EE   0x.... 0x....      BL       AppS2wParse_Int
   2608                  //S2w_Printf("%d:", time.tm_min);
   2609              if(time.tm_min > 59)
   \   000000F2   0x9803             LDR      R0,[SP, #+12]
   \   000000F4   0x283C             CMP      R0,#+60
   \   000000F6   0xBFBC             ITT      LT 
   \   000000F8   0xB2F0             UXTBLT   R0,R6
   \   000000FA   0x42A8             CMPLT    R0,R5
   2610                  {
   2611                  return S2W_EINVAL;
   2612                  }
   2613          
   2614              ++i;
   2615              if( i >= len )
   \   000000FC   0xDA10             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2616              {
   2617                  return S2W_EINVAL;
   2618              }
   2619          
   2620              AppS2wParse_Int(&p[i], (UINT32 *)&time.tm_sec);
   \   000000FE   0xA902             ADD      R1,SP,#+8
   \   00000100   0x1900             ADDS     R0,R0,R4
   \   00000102   0x.... 0x....      BL       AppS2wParse_Int
   2621                  if(time.tm_sec > 60)
   \   00000106   0x9802             LDR      R0,[SP, #+8]
   \   00000108   0x283D             CMP      R0,#+61
   \   0000010A   0xDA09             BGE.N    ??AppS2wCmd_SystemTimeSet_4
   2622                  {
   2623                      return S2W_EINVAL;
   2624                  }
   2625                  flag =1;
   \   0000010C   0x2501             MOVS     R5,#+1
   2626              }
   2627              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_SystemTimeSet_0:
   \   0000010E   0xA80F             ADD      R0,SP,#+60
   \   00000110   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000114   0x0004             MOVS     R4,R0
   2628              if(p && *p)
   \   00000116   0xBF1C             ITT      NE 
   \   00000118   0x7820             LDRBNE   R0,[R4, #+0]
   \   0000011A   0x2800             CMPNE    R0,#+0
   \   0000011C   0xD020             BEQ.N    ??AppS2wCmd_SystemTimeSet_14
   2629              {
   2630                  if(flag)
   \   0000011E   0xB10D             CBZ.N    R5,??AppS2wCmd_SystemTimeSet_15
   2631                  {
   2632                  return S2W_EINVAL;
   \                     ??AppS2wCmd_SystemTimeSet_4:
   \   00000120   0x2002             MOVS     R0,#+2
   \   00000122   0xE032             B.N      ??AppS2wCmd_SystemTimeSet_16
   2633                  }
   2634                  AppS2wParse_64BitNumber(p,&time64);
   \                     ??AppS2wCmd_SystemTimeSet_15:
   \   00000124   0xA900             ADD      R1,SP,#+0
   \   00000126   0x4620             MOV      R0,R4
   \   00000128   0x.... 0x....      BL       AppS2wParse_64BitNumber
   2635              }
   2636          	if(flag)
   2637          	{
   2638                  time.tm_year = time.tm_year - 1900;
   2639                  time.tm_isdst = 0;
   2640                   
   2641              
   2642              	newTime = mktime(&time);    /* time in seconds*/
   2643          	}
   2644          	else
   2645          		newTime = time64/1000;
   \                     ??AppS2wCmd_SystemTimeSet_17:
   \   0000012C   0xE9DD 0x0100      LDRD     R0,R1,[SP, #+0]
   \   00000130   0xF44F 0x727A      MOV      R2,#+1000
   \   00000134   0x2300             MOVS     R3,#+0
   \   00000136   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000013A   0x4604             MOV      R4,R0
   \   0000013C   0x460D             MOV      R5,R1
   2646              newTime = (newTime <<15);      /*time in ticks*/
   \                     ??AppS2wCmd_SystemTimeSet_18:
   \   0000013E   0x03ED             LSLS     R5,R5,#+15
   \   00000140   0xEA45 0x4554      ORR      R5,R5,R4, LSR #+17
   \   00000144   0x03E4             LSLS     R4,R4,#+15
   2647          	/* calculate the difference*/
   2648              currentTime = GsnTod_Get();
   \   00000146   0x.... 0x....      BL       GsnTod_Get
   \   0000014A   0x460B             MOV      R3,R1
   \   0000014C   0x4602             MOV      R2,R0
   2649          
   2650              if (currentTime > newTime)
   \   0000014E   0x429D             CMP      R5,R3
   \   00000150   0xD814             BHI.N    ??AppS2wCmd_SystemTimeSet_19
   \   00000152   0xBF28             IT       CS 
   \   00000154   0x4294             CMPCS    R4,R2
   \   00000156   0xD211             BCS.N    ??AppS2wCmd_SystemTimeSet_19
   2651              {
   2652                  diffNegative = TRUE;
   \   00000158   0x2001             MOVS     R0,#+1
   2653                  timeDifference = currentTime - newTime;
   \   0000015A   0x1B12             SUBS     R2,R2,R4
   \   0000015C   0x41AB             SBCS     R3,R3,R5
   \   0000015E   0xE011             B.N      ??AppS2wCmd_SystemTimeSet_20
   2654              }
   \                     ??AppS2wCmd_SystemTimeSet_14:
   \   00000160   0x2D00             CMP      R5,#+0
   \   00000162   0xD0E3             BEQ.N    ??AppS2wCmd_SystemTimeSet_17
   \   00000164   0x9807             LDR      R0,[SP, #+28]
   \   00000166   0xF2A0 0x706C      SUBW     R0,R0,#+1900
   \   0000016A   0x9007             STR      R0,[SP, #+28]
   \   0000016C   0x2000             MOVS     R0,#+0
   \   0000016E   0x900A             STR      R0,[SP, #+40]
   \   00000170   0xA802             ADD      R0,SP,#+8
   \   00000172   0x.... 0x....      BL       __mktime32
   \   00000176   0x4604             MOV      R4,R0
   \   00000178   0x2500             MOVS     R5,#+0
   \   0000017A   0xE7E0             B.N      ??AppS2wCmd_SystemTimeSet_18
   2655              else
   2656              {
   2657                  diffNegative = FALSE;
   \                     ??AppS2wCmd_SystemTimeSet_19:
   \   0000017C   0x2000             MOVS     R0,#+0
   2658                  timeDifference = newTime - currentTime;
   \   0000017E   0x1AA2             SUBS     R2,R4,R2
   \   00000180   0xEB65 0x0303      SBC      R3,R5,R3
   2659              }
   2660          
   2661              GsnTod_AdjustOffset(diffNegative, timeDifference);
   \                     ??AppS2wCmd_SystemTimeSet_20:
   \   00000184   0x.... 0x....      BL       GsnTod_AdjustOffset
   2662             
   2663              return S2W_SUCCESS;
   \   00000188   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_SystemTimeSet_16:
   \   0000018A   0xB010             ADD      SP,SP,#+64
   \   0000018C   0xBD70             POP      {R4-R6,PC}       ;; return
   2664          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine70:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      strlen
   2665          

   \                                 In section .text, align 2, keep-with-next
   2666          PUBLIC UINT8
   2667          AppS2wCmd_SystemTimeGet(UINT8 *ptr)
   2668          {
   \                     AppS2wCmd_SystemTimeGet:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   2669              GSN_SYSTEM_TIME_T currentTime,mSeconds=0,seconds;
   2670          
   2671              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xD129             BNE.N    ??AppS2wCmd_SystemTimeGet_0
   2672              {
   2673                  struct tm *time_local;
   2674                  currentTime = GsnTod_Get();
   2675          		mSeconds = SYSTIME_TO_MSEC(currentTime);
   \   00000010   0x.... 0x....      BL       GsnTod_Get
   \   00000014   0xF44F 0x727A      MOV      R2,#+1000
   \   00000018   0xFBA2 0x4500      UMULL    R4,R5,R2,R0
   \   0000001C   0xFB02 0x5501      MLA      R5,R2,R1,R5
   \   00000020   0x0BE4             LSRS     R4,R4,#+15
   \   00000022   0xEA44 0x4445      ORR      R4,R4,R5, LSL #+17
   \   00000026   0x0BED             LSRS     R5,R5,#+15
   \   00000028   0x2300             MOVS     R3,#+0
   2676          		seconds = mSeconds / 1000;
   \   0000002A   0x4620             MOV      R0,R4
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x.... 0x....      BL       __aeabi_uldivmod
   \   00000032   0xE9CD 0x0106      STRD     R0,R1,[SP, #+24]
   2677                  time_local = gmtime((time_t*)&seconds);
   \   00000036   0xA806             ADD      R0,SP,#+24
   \   00000038   0x.... 0x....      BL       __gmtime32
   2678                  S2w_Printf("\r\n%d/%d/%d,%d:%d:%d,%lld\r\n",time_local->tm_mday,
   2679                  time_local->tm_mon+1,time_local->tm_year+1900,time_local->tm_hour,
   2680                  time_local->tm_min,time_local->tm_sec,(mSeconds));
   \   0000003C   0xE9CD 0x4504      STRD     R4,R5,[SP, #+16]
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0x9102             STR      R1,[SP, #+8]
   \   00000044   0x6841             LDR      R1,[R0, #+4]
   \   00000046   0x9101             STR      R1,[SP, #+4]
   \   00000048   0x6881             LDR      R1,[R0, #+8]
   \   0000004A   0x9100             STR      R1,[SP, #+0]
   \   0000004C   0x6941             LDR      R1,[R0, #+20]
   \   0000004E   0xF201 0x736C      ADDW     R3,R1,#+1900
   \   00000052   0x6901             LDR      R1,[R0, #+16]
   \   00000054   0x1C4A             ADDS     R2,R1,#+1
   \   00000056   0x68C1             LDR      R1,[R0, #+12]
   \   00000058   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%d/%d/%d,%d:%d:%d,%...">`
   \   0000005C   0x.... 0x....      BL       S2w_Printf
   2681              }
   2682              else
   2683              {
   2684                  return S2W_EINVAL;
   2685              }
   2686              return S2W_SUCCESS;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0xE000             B.N      ??AppS2wCmd_SystemTimeGet_1
   \                     ??AppS2wCmd_SystemTimeGet_0:
   \   00000064   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_SystemTimeGet_1:
   \   00000066   0xB009             ADD      SP,SP,#+36
   \   00000068   0xBD30             POP      {R4,R5,PC}       ;; return
   2687          }
   2688          
   2689          #ifdef S2W_IPv6_SUPPORT
   2690          VOID
   2691          AppS2wHdrAndIpv6_Print()
   2692          {
   2693              INT8 ipv6str[INET6_ADDRSTRLEN];
   2694              INT8 routerStr[INET6_ADDRSTRLEN]={0};
   2695              GSN_NWIF_IP_CONFIG_T nwParams;
   2696              ULONG ipv6Router[4]={0};
   2697               
   2698              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   2699              if((s2wLinkState != S2W_LINK_STATE_DISCONNECTED)  && (GsnNwif_Ipv6RouterGet(&s2wappMainTaskCtxt->if0.nwifCtx,ipv6Router) == GSN_SUCCESS))
   2700              {
   2701                    S2w_ntop(ipv6Router,routerStr);
   2702              }
   2703              S2w_ntop(nwParams.ipv6.linkLocalAddr,ipv6str);
   2704              S2w_Printf("\r\nIPv6-Linklocal=%s  Prefix=%d  Router=%s\r\n",ipv6str,64,routerStr );
   2705              S2w_ntop(nwParams.ipv6.globalAddr,ipv6str);
   2706              S2w_Printf("\nIPv6-Global=%s  Prefix=%d  Router=%s\r\n",ipv6str,64,routerStr);
   2707          }
   2708          #endif
   2709          
   2710          
   2711          
   2712          /**
   2713           ******************************************************************
   2714           * @ingroup S2w-Application
   2715           * @brief S2w Ip address display function
   2716           *   This function prints the ip address,sunbet and gateway address to
   2717           *   the serial input.
   2718           * @retval none.
   2719           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2720          VOID
   2721          AppS2wHdrAndIpv4_Print()
   2722          {
   \                     AppS2wHdrAndIpv4_Print:
   \   00000000   0xB510             PUSH     {R4,LR}
   2723              GSN_NWIF_IP_CONFIG_T nwParams;
   2724              UINT8 ipaddr[4];
   2725              UINT8 subaddr[4];
   2726              UINT8 gateaddr[4];
   2727          
   2728          
   2729              /* get the ip address by calling the geps API
   2730               */
   2731              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable382
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xB0B2             SUB      SP,SP,#+200
   \   0000000A   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   0000000E   0xA90C             ADD      R1,SP,#+48
   \   00000010   0x3050             ADDS     R0,R0,#+80
   \   00000012   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   2732          
   2733              memcpy(ipaddr,(UINT8*)&(nwParams.ipv4.ipAddr),4);
   \   00000016   0x2204             MOVS     R2,#+4
   \   00000018   0xA90F             ADD      R1,SP,#+60
   \   0000001A   0xA80B             ADD      R0,SP,#+44
   \   0000001C   0x.... 0x....      BL       memcpy
   2734              memcpy(subaddr,(UINT8*)&(nwParams.ipv4.subnetMask),4);
   \   00000020   0x2204             MOVS     R2,#+4
   \   00000022   0xA910             ADD      R1,SP,#+64
   \   00000024   0xA80A             ADD      R0,SP,#+40
   \   00000026   0x.... 0x....      BL       memcpy
   2735              memcpy(gateaddr,(UINT8*)&(nwParams.ipv4.gatewayIpAddr),4);
   \   0000002A   0x2204             MOVS     R2,#+4
   \   0000002C   0xA911             ADD      R1,SP,#+68
   \   0000002E   0xA809             ADD      R0,SP,#+36
   \   00000030   0x.... 0x....      BL       memcpy
   2736          
   2737          	{
   2738          		//s2wCurrent.netConf.dhcp = 1;
   2739          #if 0		
   2740                  memcpy(&s2wCurrent.netConf.ipAddr,(UINT8*)&(nwParams.ipv4.ipAddr),4);
   2741                  memcpy(&s2wCurrent.netConf.netMask,(UINT8*)&(nwParams.ipv4.subnetMask),4);
   2742                  memcpy(&s2wCurrent.netConf.gateway,(UINT8*)&(nwParams.ipv4.gatewayIpAddr),4);
   2743                  memcpy(&s2wCurrent.dns1,(UINT8*)&(nwParams.ipv4.dnsPriSrvrIp),4);
   2744                  memcpy(&s2wCurrent.dns2,(UINT8*)&(nwParams.ipv4.dnsSecSrvrIp),4);
   2745          #endif		
   2746          	}
   2747              s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0x9A0F             LDR      R2,[SP, #+60]
   \   00000038   0xF247 0x5124      MOVW     R1,#+29988
   \   0000003C   0x500A             STR      R2,[R1, R0]
   2748              s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
   \   0000003E   0x1808             ADDS     R0,R1,R0
   \   00000040   0x9910             LDR      R1,[SP, #+64]
   \   00000042   0x6041             STR      R1,[R0, #+4]
   2749              /* print on the uart
   2750               */
   2751              S2w_Printf("\n    IP              SubNet         Gateway   \r\n ");
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "\\n    IP              ...">`
   \   00000048   0x.... 0x....      BL       S2w_Printf
   2752              S2w_Printf("%d.%d.%d.%d:%d.%d.%d.%d:%d.%d.%d.%d ",ipaddr[3],ipaddr[2],ipaddr[1],ipaddr[0],
   2753                         subaddr[3],subaddr[2],subaddr[1],subaddr[0],
   2754                         gateaddr[3],gateaddr[2],gateaddr[1],gateaddr[0]);
   \   0000004C   0xF89D 0x2024      LDRB     R2,[SP, #+36]
   \   00000050   0x9208             STR      R2,[SP, #+32]
   \   00000052   0xA809             ADD      R0,SP,#+36
   \   00000054   0xA90A             ADD      R1,SP,#+40
   \   00000056   0x7842             LDRB     R2,[R0, #+1]
   \   00000058   0x9207             STR      R2,[SP, #+28]
   \   0000005A   0xAC0B             ADD      R4,SP,#+44
   \   0000005C   0x7882             LDRB     R2,[R0, #+2]
   \   0000005E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000060   0x7863             LDRB     R3,[R4, #+1]
   \   00000062   0x9005             STR      R0,[SP, #+20]
   \   00000064   0x9206             STR      R2,[SP, #+24]
   \   00000066   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   0000006A   0x78A2             LDRB     R2,[R4, #+2]
   \   0000006C   0x9004             STR      R0,[SP, #+16]
   \   0000006E   0x7848             LDRB     R0,[R1, #+1]
   \   00000070   0x9003             STR      R0,[SP, #+12]
   \   00000072   0x7888             LDRB     R0,[R1, #+2]
   \   00000074   0x9002             STR      R0,[SP, #+8]
   \   00000076   0x78C8             LDRB     R0,[R1, #+3]
   \   00000078   0x78E1             LDRB     R1,[R4, #+3]
   \   0000007A   0x9001             STR      R0,[SP, #+4]
   \   0000007C   0xF89D 0x002C      LDRB     R0,[SP, #+44]
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x.... 0x....      ADR.W    R0,`?<Constant "%d.%d.%d.%d:%d.%d.%d....">`
   \   00000086   0x.... 0x....      BL       S2w_Printf
   2755          
   2756          }
   \   0000008A   0xB032             ADD      SP,SP,#+200
   \   0000008C   0xBD10             POP      {R4,PC}          ;; return
   2757          
   2758          
   2759          
   2760          
   2761          /**
   2762           ******************************************************************
   2763           * @ingroup S2w-Application
   2764           * @brief serial input process function
   2765           *    This function process each serial input command(AT) and call
   2766           *    the corresponding function to process the command. This function
   2767           *    also check the validity of each AT commands.
   2768           * @param cmd - IN  command string.
   2769           * @retval S2W_SUCCESS - operation successful.
   2770           * @retval S2W_EINVAL  - operation failure-invalid command.
   2771           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2772          PUBLIC UINT8
   2773          AppS2wCommand_Process(UINT8 *cmd)
   2774          {
   \                     AppS2wCommand_Process:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4606             MOV      R6,R0
   2775              UINT8 status = S2W_EINVAL;
   2776              UINT8 *ptr;
   2777              UINT8 *cmdptr;
   2778          
   2779              UINT32 i;
   2780              UINT32 j=0;
   2781          
   2782              /* this semaphore takes care of not mixing the command response
   2783                 and incomming data
   2784               */
   2785              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000006   0x.... 0x....      LDR.W    R9,??DataTable386
   \   0000000A   0xF04F 0x0802      MOV      R8,#+2
   \   0000000E   0x2500             MOVS     R5,#+0
   \   00000010   0xF04F 0x31FF      MOV      R1,#-1
   \   00000014   0x4648             MOV      R0,R9
   \   00000016   0x.... 0x....      BL       GsnOsal_SemAcquire
   2786          
   2787              /* Validate the AT sequence. */
   2788              if (toupper(cmd[0]) != 'A' || toupper(cmd[1]) != 'T')
   \   0000001A   0x7830             LDRB     R0,[R6, #+0]
   \   0000001C   0xF646 0x2AF8      MOVW     R10,#+27384
   \   00000020   0x.... 0x....      BL       toupper
   \   00000024   0x2841             CMP      R0,#+65
   \   00000026   0xD104             BNE.N    ??AppS2wCommand_Process_0
   \   00000028   0x7870             LDRB     R0,[R6, #+1]
   \   0000002A   0x.... 0x....      BL       toupper
   \   0000002E   0x2854             CMP      R0,#+84
   \   00000030   0xD00E             BEQ.N    ??AppS2wCommand_Process_1
   2789              {
   2790          		if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_SDIO)
   \                     ??AppS2wCommand_Process_0:
   \   00000032   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_452:
   \   00000036   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   0000003A   0x2803             CMP      R0,#+3
   \   0000003C   0xD103             BNE.N    ??AppS2wCommand_Process_2
   2791                  {
   2792              		UINT32 msg = APP_EVENT_S2W_EINVAL;
   2793          		    AppMainCtx_TaskNotify(msg);
   \   0000003E   0x202E             MOVS     R0,#+46
   \   00000040   0x.... 0x....      BL       AppMainCtx_TaskNotify
   2794          		    GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000044   0xE07A             B.N      ??AppS2wCommand_Process_3
   2795          		}
   2796          		else
   2797          		{
   2798                  AppS2wProcess_StatusNotify(S2W_EINVAL, 0);
   \                     ??AppS2wCommand_Process_2:
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2799                  GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000004E   0xE075             B.N      ??AppS2wCommand_Process_3
   2800          		}
   2801                  return status;
   2802              }
   2803          
   2804              if (cmd[2] == '\0')
   \                     ??AppS2wCommand_Process_1:
   \   00000050   0x78B0             LDRB     R0,[R6, #+2]
   \   00000052   0xB918             CBNZ.N   R0,??AppS2wCommand_Process_4
   2805              {
   2806                  AppS2wProcess_StatusNotify(S2W_SUCCESS, 0);
   \   00000054   0x2100             MOVS     R1,#+0
   \   00000056   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2807                  GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000005A   0xE06F             B.N      ??AppS2wCommand_Process_3
   2808                  return status;
   2809              }
   2810              ptr = (cmd + 2);
   \                     ??AppS2wCommand_Process_4:
   \   0000005C   0x1CB4             ADDS     R4,R6,#+2
   2811              {
   2812          
   2813                 cmdptr =(cmd + 2);
   \   0000005E   0x1CB0             ADDS     R0,R6,#+2
   \   00000060   0xE000             B.N      ??AppS2wCommand_Process_5
   2814          
   2815                 while((cmdptr[j]) != '\0')
   2816          
   2817                 {
   2818          
   2819                  if((cmdptr[j]) == '=')
   2820          
   2821                  {
   2822          		
   2823          			/* Bug Fix 5886 - Command to configure max recv/recvfrom on socket is not working */
   2824                     if(((cmdptr[j-1] >='0') && (cmdptr[j-1] <='9') ) && !((cmdptr[j-2] == 'c') || (cmdptr[j-2] == 'C')))
   2825                     {
   2826                         j--;
   2827                     }
   2828                     else
   2829                     {
   2830                         j++;
   2831                     }
   2832                     break;
   2833                  }
   2834                    j++;
   \                     ??AppS2wCommand_Process_6:
   \   00000062   0x460D             MOV      R5,R1
   \                     ??AppS2wCommand_Process_5:
   \   00000064   0x5C2A             LDRB     R2,[R5, R0]
   \   00000066   0xB182             CBZ.N    R2,??AppS2wCommand_Process_7
   \   00000068   0x1C69             ADDS     R1,R5,#+1
   \   0000006A   0x2A3D             CMP      R2,#+61
   \   0000006C   0xD1F9             BNE.N    ??AppS2wCommand_Process_6
   \   0000006E   0x182A             ADDS     R2,R5,R0
   \   00000070   0xF812 0x3C01      LDRB     R3,[R2, #-1]
   \   00000074   0x3B30             SUBS     R3,R3,#+48
   \   00000076   0x2B0A             CMP      R3,#+10
   \   00000078   0xD206             BCS.N    ??AppS2wCommand_Process_8
   \   0000007A   0xF812 0x2C02      LDRB     R2,[R2, #-2]
   \   0000007E   0x2A63             CMP      R2,#+99
   \   00000080   0xBF1C             ITT      NE 
   \   00000082   0x2A43             CMPNE    R2,#+67
   \   00000084   0x1E6D             SUBNE    R5,R5,#+1
   \   00000086   0xD100             BNE.N    ??AppS2wCommand_Process_7
   \                     ??AppS2wCommand_Process_8:
   \   00000088   0x460D             MOV      R5,R1
   2835          
   2836                }
   2837          
   2838                if(((cmdptr[0] == '&') && (j > 2)) || (((cmdptr[1] >= '0')&&(cmdptr[1] <= '3')) &&(j == 2)))
   \                     ??AppS2wCommand_Process_7:
   \   0000008A   0x7801             LDRB     R1,[R0, #+0]
   \   0000008C   0x2926             CMP      R1,#+38
   \   0000008E   0xD101             BNE.N    ??AppS2wCommand_Process_9
   \   00000090   0x2D03             CMP      R5,#+3
   \   00000092   0xD205             BCS.N    ??AppS2wCommand_Process_10
   \                     ??AppS2wCommand_Process_9:
   \   00000094   0x7840             LDRB     R0,[R0, #+1]
   \   00000096   0x3830             SUBS     R0,R0,#+48
   \   00000098   0x2804             CMP      R0,#+4
   \   0000009A   0xD205             BCS.N    ??AppS2wCommand_Process_11
   \   0000009C   0x2D02             CMP      R5,#+2
   \   0000009E   0xD103             BNE.N    ??AppS2wCommand_Process_11
   2839          
   2840                {
   2841                   if( !((cmdptr[0] == 'a') || (cmdptr[0] == 'A')))
   \                     ??AppS2wCommand_Process_10:
   \   000000A0   0x2961             CMP      R1,#+97
   \   000000A2   0xBF1C             ITT      NE 
   \   000000A4   0x2941             CMPNE    R1,#+65
   \   000000A6   0x1E6D             SUBNE    R5,R5,#+1
   2842                   j--;
   2843          
   2844                }
   2845          
   2846          
   2847             }
   2848          
   2849          
   2850              /* Call the call back function corresponding to the command. */
   2851              for (i = 0; i < sizeof(s2wCmdTable) / sizeof(s2wCmdTable[0]); i++)
   \                     ??AppS2wCommand_Process_11:
   \   000000A8   0x2600             MOVS     R6,#+0
   2852              {
   2853                  UINT32  len = strlen(s2wCmdTable[i].cmd);
   \                     ??AppS2wCommand_Process_12:
   \   000000AA   0x.... 0x....      ADR.W    R0,s2wCmdTable
   \   000000AE   0xF850 0xB036      LDR      R11,[R0, R6, LSL #+3]
   \   000000B2   0x4658             MOV      R0,R11
   \   000000B4   0x.... 0x....      BL       strlen
   \   000000B8   0x4607             MOV      R7,R0
   2854          
   2855                  if (!AppS2wParse_StrnCaseCmp((char *)ptr, s2wCmdTable[i].cmd, len))
   \   000000BA   0x463A             MOV      R2,R7
   \   000000BC   0x4659             MOV      R1,R11
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       AppS2wParse_StrnCaseCmp
   \   000000C4   0xB9E8             CBNZ.N   R0,??AppS2wCommand_Process_13
   2856                  {
   2857                   if(len != j)
   \   000000C6   0x42AF             CMP      R7,R5
   \   000000C8   0xD012             BEQ.N    ??AppS2wCommand_Process_14
   2858          
   2859                   {
   2860          
   2861                       if(!((len == 3) && ((ptr[2] == 's') || (ptr[2] == 'S')))   /* AT+WS */
   2862                          && !((len == 10) && ((ptr[9] == 'p') || (ptr[9] == 'P')))  /* AT+PSDPSLEEP */
   2863                          && !((len == 10) && ((ptr[9] == 'k') || (ptr[9] == 'K'))) /* AT+P2PPROVOK */
   2864          #ifdef S2W_IPv6_SUPPORT
   2865                          && !((ptr[len-2] == '6') && ((ptr[len-3] == 'v') || ptr[len-3] == 'V'))/* IPv6 */
   2866          #endif //S2W_IPv6_SUPPORT
   2867                          )
   \   000000CA   0x2F03             CMP      R7,#+3
   \   000000CC   0xD105             BNE.N    ??AppS2wCommand_Process_15
   \   000000CE   0x78A0             LDRB     R0,[R4, #+2]
   \   000000D0   0x2873             CMP      R0,#+115
   \   000000D2   0xD00D             BEQ.N    ??AppS2wCommand_Process_14
   \   000000D4   0x2853             CMP      R0,#+83
   \   000000D6   0xD117             BNE.N    ??AppS2wCommand_Process_16
   \   000000D8   0xE00A             B.N      ??AppS2wCommand_Process_14
   \                     ??AppS2wCommand_Process_15:
   \   000000DA   0x2F0A             CMP      R7,#+10
   \   000000DC   0xD114             BNE.N    ??AppS2wCommand_Process_16
   \   000000DE   0x7A60             LDRB     R0,[R4, #+9]
   \   000000E0   0x2870             CMP      R0,#+112
   \   000000E2   0xBF18             IT       NE 
   \   000000E4   0x2850             CMPNE    R0,#+80
   \   000000E6   0xD003             BEQ.N    ??AppS2wCommand_Process_14
   \   000000E8   0x286B             CMP      R0,#+107
   \   000000EA   0xBF18             IT       NE 
   \   000000EC   0x284B             CMPNE    R0,#+75
   \   000000EE   0xD10B             BNE.N    ??AppS2wCommand_Process_16
   2868                       {
   2869                           status = S2W_EINVAL;
   2870                           break;
   2871                       }
   2872          
   2873                   }
   2874          
   2875                      status = s2wCmdTable[i].process(ptr + len);
   \                     ??AppS2wCommand_Process_14:
   \   000000F0   0x.... 0x....      ADR.W    R1,s2wCmdTable
   \   000000F4   0xEB01 0x01C6      ADD      R1,R1,R6, LSL #+3
   \   000000F8   0x1938             ADDS     R0,R7,R4
   \   000000FA   0x6849             LDR      R1,[R1, #+4]
   \   000000FC   0x4788             BLX      R1
   \   000000FE   0x4680             MOV      R8,R0
   2876                      break;
   \   00000100   0xE002             B.N      ??AppS2wCommand_Process_16
   2877                  }
   2878              }
   \                     ??AppS2wCommand_Process_13:
   \   00000102   0x1C76             ADDS     R6,R6,#+1
   \   00000104   0x2EBC             CMP      R6,#+188
   \   00000106   0xD3D0             BCC.N    ??AppS2wCommand_Process_12
   2879          	
   2880          #ifdef S2W_EXT_FLASH_FS_SUPPORT	
   2881              for (i = 0; i < sizeof(s2wExtFlashCmdTable) / sizeof(s2wExtFlashCmdTable[0]); i++)
   2882          	{
   2883                  UINT32  len = strlen(s2wExtFlashCmdTable[i].cmd);
   2884          
   2885                  if (!AppS2wParse_StrnCaseCmp((char *)ptr, s2wExtFlashCmdTable[i].cmd, len))
   2886                  {
   2887                      status = s2wExtFlashCmdTable[i].process(ptr + len);
   2888                      break;
   2889                  }
   2890              }
   2891          #endif
   2892              /* Notify the status to the host
   2893               */
   2894              if((0 == s2wappMainTaskCtxt->dpSleep ) && (stbySuccess == 0))
   \                     ??AppS2wCommand_Process_16:
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable382
   \   0000010C   0x6809             LDR      R1,[R1, #+0]
   \   0000010E   0xF646 0x20FC      MOVW     R0,#+27388
   \   00000112   0x5840             LDR      R0,[R0, R1]
   \   00000114   0x2800             CMP      R0,#+0
   \   00000116   0xBF02             ITTT     EQ 
   \   00000118   0x.... 0x....      LDREQ.W  R0,??DataTable388_1
   \   0000011C   0x7800             LDRBEQ   R0,[R0, #+0]
   \   0000011E   0x2800             CMPEQ    R0,#+0
   \   00000120   0xD103             BNE.N    ??AppS2wCommand_Process_17
   2895              {
   2896                  AppS2wProcess_StatusNotify(status, 0);
   \   00000122   0x2100             MOVS     R1,#+0
   \   00000124   0x4640             MOV      R0,R8
   \   00000126   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2897              }
   2898          
   2899              // flush out all response for spi DMA
   2900                 if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wCommand_Process_17:
   \   0000012A   0x.... 0x....      LDR.W    R0,??DataTable382
   \   0000012E   0x6800             LDR      R0,[R0, #+0]
   \   00000130   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   00000134   0x2802             CMP      R0,#+2
   \   00000136   0xBF08             IT       EQ 
   \   00000138   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   2901                 {
   2902                     s2wSpiFs_Flush();
   2903                 }
   2904          
   2905              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wCommand_Process_3:
   \   0000013C   0x4648             MOV      R0,R9
   \   0000013E   0x.... 0x....      BL       GsnOsal_SemRelease
   2906              return status;
   \   00000142   0x4640             MOV      R0,R8
   \   00000144   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   2907          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine80:
   \   00000000   0x....             LDR.N    R0,??DataTable470_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x4770             BX       LR
   2908          
   2909          /**
   2910           ******************************************************************
   2911           * @ingroup S2w-Application
   2912           * @brief Process the AT+CID command
   2913           * @param ptr Pointer to the user input string.
   2914           * @return status.
   2915           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2916          PUBLIC UINT8
   2917          AppS2wCmd_CidInfo(UINT8 *ptr)
   2918          {
   \                     AppS2wCmd_CidInfo:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0B5             SUB      SP,SP,#+212
   2919              UINT32 cidnos =0,i=0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x9103             STR      R1,[SP, #+12]
   \   0000000A   0x2400             MOVS     R4,#+0
   2920              UINT8 status = S2W_EINVAL;
   2921              if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x2502             MOVS     R5,#+2
   \   00000010   0x293F             CMP      R1,#+63
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000016   0x2800             CMPEQ    R0,#+0
   \   00000018   0xD10F             BNE.N    ??AppS2wCmd_CidInfo_0
   2922              {
   2923                  S2W_CID_INFO_T cidinfo[16];
   2924                  memset(cidinfo,0,sizeof(cidinfo));
   \   0000001A   0x22C0             MOVS     R2,#+192
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA804             ADD      R0,SP,#+16
   \   00000020   0x.... 0x....      BL       memset
   2925                  status = AppS2wHal_CidInfoGet(cidinfo,&cidnos);
   \   00000024   0xA903             ADD      R1,SP,#+12
   \   00000026   0xA804             ADD      R0,SP,#+16
   \   00000028   0x.... 0x....      BL       AppS2wHal_CidInfoGet
   \   0000002C   0x4605             MOV      R5,R0
   2926                  if (cidnos == 0)
   \   0000002E   0x9803             LDR      R0,[SP, #+12]
   \   00000030   0xB938             CBNZ.N   R0,??AppS2wCmd_CidInfo_1
   2927                  {
   2928                      S2w_Printf("\r\n No valid Cids\r\n");
   \   00000032   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n No valid Cids\\r\\n">`
   \   00000036   0x.... 0x....      BL       S2w_Printf
   2929                  }
   2930                  else
   2931                  {
   2932                      S2w_Printf("\r\nCID\tTYPE\tMODE\tLOCAL PORT\tREMOTE PORT\tREMOTE IP\r\n");
   2933                      for(i=0;i<cidnos;i++)
   2934                      {
   2935                      	// fix for issue 5884 added-cid in hex not in decimal
   2936                          S2w_Printf("%x\t",cidinfo[i].cid);
   2937                          if( cidinfo[i].conType ==1)
   2938                          {
   2939                              S2w_Printf("UDP\t");
   2940                          }
   2941                          else
   2942                          {
   2943          					if (1 == AppS2w_ConnStateGet(cidinfo[i].cid))
   2944          					{
   2945          						S2w_Printf("TCP-SSL ");
   2946          					}
   2947          					else if(AppS2w_ConnHttpStateGet(cidinfo[i].cid) == 1)
   2948          					{
   2949          						S2w_Printf("HTTP\t");
   2950          					}
   2951          					else
   2952                              {
   2953                                  S2w_Printf("TCP\t");
   2954                              }
   2955                          }
   2956                          cidinfo[i].conMode?S2w_Printf("SERVER\t"):
   2957                                             S2w_Printf("CLIENT\t");
   2958          #ifdef S2W_IPv6_SUPPORT
   2959                      if(s2wCidList[i].addrType & ADDR_TYPE_IPv6)
   2960                      {
   2961                        INT8 ipv6str[INET6_ADDRSTRLEN];
   2962                        S2w_ntop((ULONG*)s2wCidList[i].remoteIpv6,ipv6str);
   2963                        S2w_Printf("%4d\t\t%4d\t\t %s \r\n",cidinfo[i].localPort,cidinfo[i].remotePort,ipv6str);  
   2964                        
   2965                       }
   2966                      else
   2967          #endif 
   2968                      
   2969                          S2w_Printf("%4d\t\t%4d\t\t%3d.%3d.%3d.%3d\r\n",cidinfo[i].localPort,
   2970                                    cidinfo[i].remotePort,cidinfo[i].remoteIp[0],cidinfo[i].remoteIp[1],
   2971                                     cidinfo[i].remoteIp[2],cidinfo[i].remoteIp[3]);
   2972                      }
   2973                  }
   2974          
   2975              }
   2976              return status;
   \                     ??AppS2wCmd_CidInfo_0:
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0xB035             ADD      SP,SP,#+212
   \   0000003E   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??AppS2wCmd_CidInfo_1:
   \   00000042   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCID\\tTYPE\\tMODE\\tLOCAL...">`
   \   00000046   0x.... 0x....      BL       S2w_Printf
   \   0000004A   0x.... 0x....      ADR.W    R10,`?<Constant "HTTP\\t">`
   \   0000004E   0x.... 0x....      ADR.W    R11,`?<Constant "TCP-SSL ">`
   \   00000052   0x.... 0x....      ADR.W    R8,`?<Constant "UDP\\t">`
   \   00000056   0x.... 0x....      ADR.W    R9,??DataTable384  ;; "%x\t"
   \   0000005A   0xE00F             B.N      ??AppS2wCmd_CidInfo_2
   \                     ??AppS2wCmd_CidInfo_3:
   \   0000005C   0x.... 0x....      BL       S2w_Printf
   \   00000060   0x7A70             LDRB     R0,[R6, #+9]
   \   00000062   0x9002             STR      R0,[SP, #+8]
   \   00000064   0x7A30             LDRB     R0,[R6, #+8]
   \   00000066   0x9001             STR      R0,[SP, #+4]
   \   00000068   0x79F0             LDRB     R0,[R6, #+7]
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0x79B3             LDRB     R3,[R6, #+6]
   \   0000006E   0x88B2             LDRH     R2,[R6, #+4]
   \   00000070   0x8871             LDRH     R1,[R6, #+2]
   \   00000072   0x.... 0x....      ADR.W    R0,`?<Constant "%4d\\t\\t%4d\\t\\t%3d.%3d.%3d...">`
   \   00000076   0x.... 0x....      BL       S2w_Printf
   \   0000007A   0x1C64             ADDS     R4,R4,#+1
   \                     ??AppS2wCmd_CidInfo_2:
   \   0000007C   0x9803             LDR      R0,[SP, #+12]
   \   0000007E   0x4284             CMP      R4,R0
   \   00000080   0xD2DB             BCS.N    ??AppS2wCmd_CidInfo_0
   \   00000082   0x200C             MOVS     R0,#+12
   \   00000084   0xFB00 0xF704      MUL      R7,R0,R4
   \   00000088   0xA804             ADD      R0,SP,#+16
   \   0000008A   0x183E             ADDS     R6,R7,R0
   \   0000008C   0x4648             MOV      R0,R9
   \   0000008E   0x7AB1             LDRB     R1,[R6, #+10]
   \   00000090   0x.... 0x....      BL       S2w_Printf
   \   00000094   0xA804             ADD      R0,SP,#+16
   \   00000096   0x5C38             LDRB     R0,[R7, R0]
   \   00000098   0x2801             CMP      R0,#+1
   \   0000009A   0xBF08             IT       EQ 
   \   0000009C   0x4640             MOVEQ    R0,R8
   \   0000009E   0xD00E             BEQ.N    ??AppS2wCmd_CidInfo_4
   \   000000A0   0x7AB0             LDRB     R0,[R6, #+10]
   \   000000A2   0x.... 0x....      BL       AppS2w_ConnStateGet
   \   000000A6   0x2801             CMP      R0,#+1
   \   000000A8   0xBF08             IT       EQ 
   \   000000AA   0x4658             MOVEQ    R0,R11
   \   000000AC   0xD007             BEQ.N    ??AppS2wCmd_CidInfo_4
   \   000000AE   0x7AB0             LDRB     R0,[R6, #+10]
   \   000000B0   0x.... 0x....      BL       AppS2w_ConnHttpStateGet
   \   000000B4   0x2801             CMP      R0,#+1
   \   000000B6   0xBF0C             ITE      EQ 
   \   000000B8   0x4650             MOVEQ    R0,R10
   \   000000BA   0x.... 0x....      ADRNE.W  R0,`?<Constant "TCP\\t">`
   \                     ??AppS2wCmd_CidInfo_4:
   \   000000BE   0x.... 0x....      BL       S2w_Printf
   \   000000C2   0x7870             LDRB     R0,[R6, #+1]
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xBF14             ITE      NE 
   \   000000C8   0x.... 0x....      ADRNE.W  R0,`?<Constant "SERVER\\t">`
   \   000000CC   0x.... 0x....      ADREQ.W  R0,`?<Constant "CLIENT\\t">`
   \   000000D0   0xE7C4             B.N      ??AppS2wCmd_CidInfo_3
   2977          }
   2978          
   2979          /**
   2980           ******************************************************************
   2981           * @ingroup S2w-Application
   2982           * @brief Process the AT+BDATA command
   2983           *      This function set/reset bulk mode.
   2984           * @param ptr Pointer to the user input string.
   2985           * @retval S2W_SUCCESS - operation successful.
   2986           * @retval S2W_EINVAL  - operation failure-invalid command.
   2987           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2988          UINT8
   2989          S2w_CmdBulkDataState(UINT8 *ptr)
   2990          {
   \                     S2w_CmdBulkDataState:
   \   00000000   0xB580             PUSH     {R7,LR}
   2991              UINT8 status;
   2992              UINT8 mode;
   2993          
   2994              status = AppS2wParse_Boolean(ptr, &mode);
   \   00000002   0x.... 0x....      BL       ?Subroutine60
   2995              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_385:
   \   00000006   0xB930             CBNZ.N   R0,??S2w_CmdBulkDataState_0
   2996              {
   2997                  return status;
   2998              }
   2999              s2wCurrent.bulkTxEnable = mode;
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable393
   \   0000000C   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000010   0xF880 0x11D4      STRB     R1,[R0, #+468]
   3000              return status;
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??S2w_CmdBulkDataState_0:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   3001          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine60:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Boolean
   3002          
   3003          /**
   3004           ******************************************************************
   3005           * @ingroup S2w-Application
   3006           * @brief Process the AT+NCTCP Command.
   3007           * @param ptr Pointer to the user input string.
   3008           * @return status.
   3009           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3010          PUBLIC UINT8
   3011          AppS2wCmd_Nctcp(UINT8 *ptr)
   3012          {
   \                     AppS2wCmd_Nctcp:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   3013              S2W_NETDATA_T peerData;
   3014              UINT8 *temp = ptr;
   \   00000004   0x9001             STR      R0,[SP, #+4]
   3015              UINT32 status;
   3016              UINT8 cid;
   3017          
   3018              if (s2wIsAutoconnected)
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable393_1
   \   0000000A   0x7800             LDRB     R0,[R0, #+0]
   \   0000000C   0xB108             CBZ.N    R0,??AppS2wCmd_Nctcp_0
   3019              {
   3020                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE01A             B.N      ??AppS2wCmd_Nctcp_1
   3021              }
   3022              if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
   \                     ??AppS2wCmd_Nctcp_0:
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable393_2
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0xB908             CBNZ.N   R0,??AppS2wCmd_Nctcp_2
   3023              {
   3024                  return S2W_LINK_LOST_EVT;
   \   0000001A   0x2009             MOVS     R0,#+9
   \   0000001C   0xE014             B.N      ??AppS2wCmd_Nctcp_1
   3025              }
   3026              status = AppS2wParse_AddrPort(&temp, &peerData);
   \                     ??AppS2wCmd_Nctcp_2:
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0xA801             ADD      R0,SP,#+4
   \   00000022   0x.... 0x....      BL       AppS2wParse_AddrPort
   3027              if (status != S2W_SUCCESS)
   \   00000026   0xB978             CBNZ.N   R0,??AppS2wCmd_Nctcp_1
   3028              {
   3029                  return status;
   3030              }
   3031          
   3032              peerData.proto = S2W_NETDATA_PROTO_TCP;
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0xF88D 0x0009      STRB     R0,[SP, #+9]
   3033              peerData.mode = S2W_NETDATA_MODE_CLIENT;
   3034          
   3035              status = AppS2wHal_NetTcpClient(&peerData, &cid);
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000036   0xA802             ADD      R0,SP,#+8
   \   00000038   0x.... 0x....      BL       AppS2wHal_NetTcpClient
   3036              if (status != S2W_SUCCESS)
   \   0000003C   0xB920             CBNZ.N   R0,??AppS2wCmd_Nctcp_1
   3037              {
   3038                  return status;
   3039              }
   3040          
   3041              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   \   0000003E   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000042   0x.... 0x....      BL       ??Subroutine119_0
   3042              return status;
   \                     ??CrossCallReturnLabel_567:
   \   00000046   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nctcp_1:
   \   00000048   0xB011             ADD      SP,SP,#+68
   \   0000004A   0xBD00             POP      {PC}             ;; return
   3043          
   3044          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine119:
   \   00000000   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \                     ??Subroutine119_0:
   \   00000004   0x2007             MOVS     R0,#+7
   \   00000006   0x.... 0x....      B.W      AppS2wProcess_StatusNotify
   3045          

   \                                 In section .text, align 2, keep-with-next
   3046          PUBLIC UINT8
   3047          AppS2wCmd_scanTimeSet(UINT8 *ptr)
   3048          {
   \                     AppS2wCmd_scanTimeSet:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   3049              UINT8 status = S2W_SUCCESS;
   3050              UINT8 *p;
   3051              UINT32 minTime=0,maxTime=0,passiveTime=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   3052          
   3053              if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable393
   \   00000010   0x9804             LDR      R0,[SP, #+16]
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0xF204 0x15CE      ADDW     R5,R4,#+462
   \   00000018   0x283F             CMP      R0,#+63
   \   0000001A   0xBF02             ITTT     EQ 
   \   0000001C   0x9804             LDREQ    R0,[SP, #+16]
   \   0000001E   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000020   0x2800             CMPEQ    R0,#+0
   \   00000022   0xD108             BNE.N    ??AppS2wCmd_scanTimeSet_0
   3054              {
   3055                  S2w_Printf("\r\nMinScanTime=%d\r\nMaxScanTime=%d\r\n", s2wCurrent.minScanTime,
   3056                              s2wCurrent.registers[S2W_REG_SCAN_TIME]);
   \   00000024   0xF8B4 0x21CE      LDRH     R2,[R4, #+462]
   \   00000028   0x8929             LDRH     R1,[R5, #+8]
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nMinScanTime=%d\\r\\nMax...">`
   \   0000002E   0x.... 0x....      BL       S2w_Printf
   3057                  return S2W_SUCCESS;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xE029             B.N      ??AppS2wCmd_scanTimeSet_1
   3058              }
   3059              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_scanTimeSet_0:
   \   00000036   0x.... 0x....      BL       ?Subroutine30
   3060              if (!p)
   \                     ??CrossCallReturnLabel_95:
   \   0000003A   0xB160             CBZ.N    R0,??AppS2wCmd_scanTimeSet_2
   3061              {
   3062                  return S2W_EINVAL;
   3063              }
   3064              status = AppS2wParse_Int(p, &minTime);
   \   0000003C   0x.... 0x....      BL       ?Subroutine52
   3065              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_332:
   \   00000040   0xBB18             CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
   3066              {
   3067                  return status;
   3068              }
   3069              p = AppS2wParse_NextParamGet(&ptr);
   \   00000042   0x.... 0x....      BL       ?Subroutine30
   3070              if (!p)
   \                     ??CrossCallReturnLabel_94:
   \   00000046   0xB130             CBZ.N    R0,??AppS2wCmd_scanTimeSet_2
   3071              {
   3072                  return S2W_EINVAL;
   3073              }
   3074              status = AppS2wParse_Int(p, &maxTime);
   \   00000048   0x.... 0x....      BL       ?Subroutine51
   3075              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_309:
   \   0000004C   0xB9E8             CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
   3076              {
   3077                  return status;
   3078              }
   3079              if(maxTime < minTime)
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x9901             LDR      R1,[SP, #+4]
   \   00000052   0x4288             CMP      R0,R1
   \   00000054   0xD201             BCS.N    ??AppS2wCmd_scanTimeSet_3
   3080              {
   3081                  return S2W_EINVAL;
   \                     ??AppS2wCmd_scanTimeSet_2:
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE017             B.N      ??AppS2wCmd_scanTimeSet_1
   3082              }
   3083              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_scanTimeSet_3:
   \   0000005A   0x.... 0x....      BL       ?Subroutine30
   3084              if(p)
   \                     ??CrossCallReturnLabel_93:
   \   0000005E   0xB110             CBZ.N    R0,??AppS2wCmd_scanTimeSet_4
   3085              {
   3086                  status = AppS2wParse_Int(p, &passiveTime);
   \   00000060   0x.... 0x....      BL       ?Subroutine50
   3087                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_261:
   \   00000064   0xB988             CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
   3088                  {
   3089                      return status;
   3090                  }
   3091              }
   3092              
   3093             status = GsnWdd_ScanParamSet(&s2wappMainTaskCtxt->if0.wddCtx,minTime,maxTime,passiveTime);
   \                     ??AppS2wCmd_scanTimeSet_4:
   \   00000066   0x....             LDR.N    R0,??DataTable382
   \   00000068   0x9B02             LDR      R3,[SP, #+8]
   \   0000006A   0x9A00             LDR      R2,[SP, #+0]
   \   0000006C   0x9901             LDR      R1,[SP, #+4]
   \   0000006E   0x6800             LDR      R0,[R0, #+0]
   \   00000070   0xB29B             UXTH     R3,R3
   \   00000072   0xB292             UXTH     R2,R2
   \   00000074   0xB289             UXTH     R1,R1
   \   00000076   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000007A   0x.... 0x....      BL       GsnWdd_ScanParamSet
   3094          
   3095             /* update the default in profile */
   3096              s2wCurrent.registers[S2W_REG_SCAN_TIME] = maxTime;
   \   0000007E   0x9900             LDR      R1,[SP, #+0]
   \   00000080   0xF8A4 0x11CE      STRH     R1,[R4, #+462]
   3097              s2wCurrent.minScanTime = (UINT16)minTime;
   3098          
   3099              return  status;
   \   00000084   0xB2C0             UXTB     R0,R0
   \   00000086   0x9901             LDR      R1,[SP, #+4]
   \   00000088   0x8129             STRH     R1,[R5, #+8]
   \                     ??AppS2wCmd_scanTimeSet_1:
   \   0000008A   0xB005             ADD      SP,SP,#+20
   \   0000008C   0xBD30             POP      {R4,R5,PC}       ;; return
   3100          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine52:
   \   00000000   0xA901             ADD      R1,SP,#+4
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int
   3101          /**
   3102           ******************************************************************
   3103           * @ingroup S2w-Application
   3104           * @brief Process AT+NSTCP command.
   3105           * @param ptr Pointer to the user input string.
   3106           * @return status, S2W_SUCCESS or S2W_FAILURE.
   3107           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3108          PUBLIC UINT8
   3109          AppS2wCmd_Nstcp(UINT8 *ptr)
   3110          {
   \                     AppS2wCmd_Nstcp:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB092             SUB      SP,SP,#+72
   3111              S2W_NETDATA_T peerData;
   3112              UINT8 status;
   3113              UINT32 port;
   3114              UINT8 cid;
   3115          	UINT32 maxConn=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   3116              UINT8 *p;
   3117          
   3118              if (s2wIsAutoconnected)
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable393_1
   \   0000000C   0x7800             LDRB     R0,[R0, #+0]
   \   0000000E   0xB9D8             CBNZ.N   R0,??AppS2wCmd_Nstcp_0
   3119              {
   3120                  return S2W_EINVAL;
   3121              }
   3122              if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
   \   00000010   0x.... 0x....      LDR.W    R0,??DataTable393_2
   \   00000014   0x7800             LDRB     R0,[R0, #+0]
   \   00000016   0xB908             CBNZ.N   R0,??AppS2wCmd_Nstcp_1
   3123              {
   3124                  return S2W_LINK_LOST_EVT;
   \   00000018   0x2009             MOVS     R0,#+9
   \   0000001A   0xE02C             B.N      ??AppS2wCmd_Nstcp_2
   3125              }
   3126          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Nstcp_1:
   \   0000001C   0xA812             ADD      R0,SP,#+72
   \   0000001E   0x.... 0x....      BL       AppS2wParse_NextParamGet
   3127          	if (*p == 0)
   \   00000022   0x7801             LDRB     R1,[R0, #+0]
   \   00000024   0xB181             CBZ.N    R1,??AppS2wCmd_Nstcp_0
   3128          	{
   3129          	  return S2W_EINVAL;
   3130          	}
   3131              status = AppS2wParse_Int(p, &port);
   3132              if (status != S2W_SUCCESS || !is_valid_port(port))
   \   00000026   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_308:
   \   0000002A   0xB968             CBNZ.N   R0,??AppS2wCmd_Nstcp_0
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0xB158             CBZ.N    R0,??AppS2wCmd_Nstcp_0
   \   00000030   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000034   0xD208             BCS.N    ??AppS2wCmd_Nstcp_0
   3133              {
   3134                  return S2W_EINVAL;
   3135              }
   3136          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000036   0xA812             ADD      R0,SP,#+72
   \   00000038   0x.... 0x....      BL       AppS2wParse_NextParamGet
   3137          	maxConn = 15;
   \   0000003C   0x210F             MOVS     R1,#+15
   \   0000003E   0x9101             STR      R1,[SP, #+4]
   3138          	if (p != NULL)
   \   00000040   0xB120             CBZ.N    R0,??AppS2wCmd_Nstcp_3
   3139          	{
   3140          		status = AppS2wParse_Int(p, &maxConn);
   3141          		if (status != S2W_SUCCESS )
   \   00000042   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_331:
   \   00000046   0xB108             CBZ.N    R0,??AppS2wCmd_Nstcp_3
   3142          		{
   3143          			return S2W_EINVAL;
   \                     ??AppS2wCmd_Nstcp_0:
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0xE014             B.N      ??AppS2wCmd_Nstcp_2
   3144          		}
   3145              }
   3146          
   3147              peerData.port = port;
   3148              peerData.proto = S2W_NETDATA_PROTO_TCP;
   3149              peerData.mode = S2W_NETDATA_MODE_SERVER;
   3150          
   3151          
   3152              status = AppS2wHal_NetTcpServer(&peerData, &cid);
   \                     ??AppS2wCmd_Nstcp_3:
   \   0000004C   0xA902             ADD      R1,SP,#+8
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   0000005A   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   0000005E   0xA803             ADD      R0,SP,#+12
   \   00000060   0x.... 0x....      BL       AppS2wHal_NetTcpServer
   3153              if (status != S2W_SUCCESS)
   \   00000064   0xB938             CBNZ.N   R0,??AppS2wCmd_Nstcp_2
   3154              {
   3155                  return status;
   3156              }
   3157          	AppS2wHal_TcpSrvMaxConSet(cid,maxConn);
   \   00000066   0x9901             LDR      R1,[SP, #+4]
   \   00000068   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000006C   0x.... 0x....      BL       AppS2wHal_TcpSrvMaxConSet
   3158          
   3159              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   \   00000070   0x.... 0x....      BL       ?Subroutine119
   3160              return status;
   \                     ??CrossCallReturnLabel_569:
   \   00000074   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nstcp_2:
   \   00000076   0xB013             ADD      SP,SP,#+76
   \   00000078   0xBD00             POP      {PC}             ;; return
   3161          }
   3162          
   3163          /**
   3164           ******************************************************************
   3165           * @ingroup S2w-Application
   3166           * Process AT+NSUDP command.
   3167           * @param ptr Pointer to the user input string.
   3168           * @return status, S2W_SUCCESS or S2W_FAILURE.
   3169           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3170          PUBLIC UINT8
   3171          AppS2wCmd_Nsudp(UINT8 *ptr)
   3172          {
   \                     AppS2wCmd_Nsudp:
   \   00000000   0xB500             PUSH     {LR}
   3173              S2W_NETDATA_T peerData;
   3174              UINT8 status;
   3175              UINT32 port;
   3176              UINT8 cid;
   3177          
   3178              if (s2wIsAutoconnected)
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable393_1
   \   00000006   0x7809             LDRB     R1,[R1, #+0]
   \   00000008   0xB091             SUB      SP,SP,#+68
   \   0000000A   0xB969             CBNZ.N   R1,??AppS2wCmd_Nsudp_0
   3179              {
   3180                  return S2W_EINVAL;
   3181              }
   3182              if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable393_2
   \   00000010   0x7809             LDRB     R1,[R1, #+0]
   \   00000012   0xB909             CBNZ.N   R1,??AppS2wCmd_Nsudp_1
   3183              {
   3184                  return S2W_LINK_LOST_EVT;
   \   00000014   0x2009             MOVS     R0,#+9
   \   00000016   0xE01B             B.N      ??AppS2wCmd_Nsudp_2
   3185              }
   3186          
   3187              status = AppS2wParse_Int(ptr, &port);
   3188              if (status != S2W_SUCCESS || !is_valid_port(port))
   \                     ??AppS2wCmd_Nsudp_1:
   \   00000018   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_307:
   \   0000001C   0xB920             CBNZ.N   R0,??AppS2wCmd_Nsudp_0
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0xB110             CBZ.N    R0,??AppS2wCmd_Nsudp_0
   \   00000022   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000026   0xD301             BCC.N    ??AppS2wCmd_Nsudp_3
   3189              {
   3190                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Nsudp_0:
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xE011             B.N      ??AppS2wCmd_Nsudp_2
   3191              }
   3192              peerData.port = port;
   \                     ??AppS2wCmd_Nsudp_3:
   \   0000002C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   3193              peerData.proto = S2W_NETDATA_PROTO_UDP;
   3194              peerData.mode = S2W_NETDATA_MODE_SERVER;
   3195          
   3196              status = AppS2wHal_NetUdpServer(&peerData, &cid);
   \   00000030   0xA901             ADD      R1,SP,#+4
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xF88D 0x0009      STRB     R0,[SP, #+9]
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000003E   0xA802             ADD      R0,SP,#+8
   \   00000040   0x.... 0x....      BL       AppS2wHal_NetUdpServer
   3197              if (status != S2W_SUCCESS)
   \   00000044   0xB920             CBNZ.N   R0,??AppS2wCmd_Nsudp_2
   3198              {
   3199                  return status;
   3200              }
   3201          
   3202              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   \   00000046   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004A   0x.... 0x....      BL       ??Subroutine119_0
   3203              return status;
   \                     ??CrossCallReturnLabel_566:
   \   0000004E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nsudp_2:
   \   00000050   0xB011             ADD      SP,SP,#+68
   \   00000052   0xBD00             POP      {PC}             ;; return
   3204          }
   3205          
   3206          /**
   3207           ******************************************************************
   3208           * @ingroup S2w-Application
   3209           * Process AT+SETSOCKOPT command.
   3210           * @param ptr Pointer to the user input string.
   3211           * @return status, S2W_SUCCESS ,S2W_FAILURE or S2W_EINVAL.
   3212           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3213          PUBLIC UINT8
   3214          AppS2wCmd_SetSockOp(UINT8 *ptr)
   3215          {
   \                     AppS2wCmd_SetSockOp:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   3216              UINT8 status;
   3217              S2W_SOCK_OP_T params;
   3218              UINT8 *p;
   3219          
   3220          
   3221              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine33
   3222              if (!p)
   \                     ??CrossCallReturnLabel_127:
   \   00000008   0xB1A8             CBZ.N    R0,??AppS2wCmd_SetSockOp_0
   3223              {
   3224                  return S2W_EINVAL;
   3225              }
   3226              AppS2wParse_Int(p, &params.cid);
   \   0000000A   0x.... 0x....      BL       ?Subroutine51
   3227          
   3228              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_306:
   \   0000000E   0x.... 0x....      BL       ?Subroutine33
   3229              if (!p)
   \                     ??CrossCallReturnLabel_126:
   \   00000012   0xB180             CBZ.N    R0,??AppS2wCmd_SetSockOp_0
   3230              {
   3231                  return S2W_EINVAL;
   3232              }
   3233              AppS2wParse_Int(p, &params.type);
   \   00000014   0x.... 0x....      BL       ?Subroutine52
   3234          
   3235              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_330:
   \   00000018   0x.... 0x....      BL       ?Subroutine33
   3236              if (!p)
   \                     ??CrossCallReturnLabel_125:
   \   0000001C   0xB158             CBZ.N    R0,??AppS2wCmd_SetSockOp_0
   3237              {
   3238                  return S2W_EINVAL;
   3239              }
   3240          
   3241              status = AppS2wParse_Hex(p, &params.param);
   \   0000001E   0xA902             ADD      R1,SP,#+8
   \   00000020   0x.... 0x....      BL       AppS2wParse_Hex
   3242              if (status != S2W_SUCCESS)
   \   00000024   0xB970             CBNZ.N   R0,??AppS2wCmd_SetSockOp_1
   3243              {
   3244              	return status;
   3245              }
   3246          
   3247              p = AppS2wParse_NextParamGet(&ptr);
   \   00000026   0x.... 0x....      BL       ?Subroutine33
   3248              if (!p)
   \                     ??CrossCallReturnLabel_124:
   \   0000002A   0xB120             CBZ.N    R0,??AppS2wCmd_SetSockOp_0
   3249              {
   3250                  return S2W_EINVAL;
   3251              }
   3252              AppS2wParse_Int(p, &params.paramValue);
   \   0000002C   0x.... 0x....      BL       ?Subroutine53
   3253          
   3254              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_340:
   \   00000030   0x.... 0x....      BL       ?Subroutine33
   3255              if (!p)
   \                     ??CrossCallReturnLabel_123:
   \   00000034   0xB908             CBNZ.N   R0,??AppS2wCmd_SetSockOp_2
   3256              {
   3257                  return S2W_EINVAL;
   \                     ??AppS2wCmd_SetSockOp_0:
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xE004             B.N      ??AppS2wCmd_SetSockOp_1
   3258              }
   3259              AppS2wParse_Int(p, &params.paramSize);
   \                     ??AppS2wCmd_SetSockOp_2:
   \   0000003A   0x.... 0x....      BL       ?Subroutine54
   3260          
   3261              status = AppS2wHal_SockOpSet(&params);
   3262          
   3263              return status;
   \                     ??CrossCallReturnLabel_346:
   \   0000003E   0xA800             ADD      R0,SP,#+0
   \   00000040   0x.... 0x....      BL       AppS2wHal_SockOpSet
   \                     ??AppS2wCmd_SetSockOp_1:
   \   00000044   0xB007             ADD      SP,SP,#+28
   \   00000046   0xBD00             POP      {PC}             ;; return
   3264          }
   3265          
   3266          
   3267          
   3268          
   3269          
   3270          /**
   3271           ******************************************************************
   3272           * @ingroup S2w-Application
   3273           * @brief Process the AT+ERRCOUNT command
   3274           * @param ptr Pointer to the user input string.
   3275           * @return status.
   3276           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3277          PUBLIC UINT8
   3278          AppS2wCmd_ErrorCount(UINT8 *ptr)
   3279          {
   3280              UINT8 status = S2W_EINVAL;
   3281              //S2W_ERROR_COUNT_T errorParam;
   3282          
   3283          
   3284              if (ptr[0] == '?' && ptr[1] == '\0')
   \                     AppS2wCmd_ErrorCount:
   \   00000000   0x7802             LDRB     R2,[R0, #+0]
   \   00000002   0x2102             MOVS     R1,#+2
   \   00000004   0x2A3F             CMP      R2,#+63
   \   00000006   0xBF02             ITTT     EQ 
   \   00000008   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000A   0x2800             CMPEQ    R0,#+0
   \   0000000C   0x2100             MOVEQ    R1,#+0
   3285              {
   3286                  /* print the error counts */
   3287                  //S2w_Printf("\r\nAPP-WD     :%d\r\nWLAN-WD    :%d\r\nWLAN-ABORT :%d\r\nWLAN-ASSERT:%d\r\nAPP-SW-RST :%d\r\nWLAN-SW-RST:%d\r\n",
   3288                    //         appRtcMemData.err.appWdCount,appRtcMemData.err.wlanWdCount,
   3289                      //       appRtcMemData.err.wlanAbortCount,appRtcMemData.err.wlanAssertCount,
   3290                        //     appRtcMemData.err.appSwResetCount,appRtcMemData.err.wlanSwResetCount);
   3291                  status = S2W_SUCCESS;
   3292              }
   3293              return status;
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x4770             BX       LR               ;; return
   3294          }
   3295          
   3296          
   3297          
   3298          /**
   3299           ******************************************************************
   3300           * @ingroup S2w-Application
   3301           * @brief Close all connections and disassociate.
   3302           * @retval S2W_SUCCESS - operation successful.
   3303           * @retval S2W_EINVAL  - operation failure-invalid command.
   3304           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3305          PUBLIC UINT8
   3306          AppS2w_HangUp(VOID)
   3307          {
   \                     AppS2w_HangUp:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   3308          	UINT8 status=S2W_FAILURE;
   3309              s2wIsAutoconnected = 0;
   \   00000002   0x.... 0x....      BL       ?Subroutine23
   3310          
   3311              /* close all connections
   3312               */
   3313              AppS2wHal_NetCloseAll(0);
   3314              curCid = INVALID_CID;
   \                     ??CrossCallReturnLabel_52:
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable395
   3315              /* call the hal disassociate function
   3316               */
   3317          	s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
   3318          					   GSN_SOFT_TMR_ONESHOT,0,
   3319          						SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
   3320          					  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable395_1
   \   0000000E   0x21FF             MOVS     R1,#+255
   \   00000010   0x7001             STRB     R1,[R0, #+0]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9003             STR      R0,[SP, #+12]
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable398
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x460A             MOV      R2,R1
   \   00000020   0xF44F 0x0096      MOV      R0,#+4915200
   \   00000024   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000028   0x460B             MOV      R3,R1
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0xF500 0x4001      ADD      R0,R0,#+33024
   \   00000030   0x30A0             ADDS     R0,R0,#+160
   \   00000032   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000036   0x6821             LDR      R1,[R4, #+0]
   \   00000038   0xF248 0x15C0      MOVW     R5,#+33216
   \   0000003C   0x5068             STR      R0,[R5, R1]
   3321              status=AppS2wHal_Disassociate(0);	
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       AppS2wHal_Disassociate
   \   00000044   0x4606             MOV      R6,R0
   3322          	GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
   \   00000046   0x6820             LDR      R0,[R4, #+0]
   \   00000048   0x5828             LDR      R0,[R5, R0]
   \   0000004A   0x.... 0x....      BL       GsnSoftTmr_Stop
   3323          	return status;
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0xB004             ADD      SP,SP,#+16
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
   3324          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable413_8
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7001             STRB     R1,[R0, #+0]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      B.W      AppS2wHal_NetCloseAll
   3325          
   3326          
   3327          /**
   3328           ******************************************************************
   3329           * @ingroup S2w-Application
   3330           * @brief Display the scan result in the format, "SSID,BSSID,Channel,RSSI,Mode".
   3331           *   This function should be called from HAL function for scan,
   3332           *   after finishing the scan.
   3333           * @param ssid    - IN SSID of network.
   3334           * @param ssidLen - IN SSID length.
   3335           * @param bssid   - IN BSSID of network.
   3336           * @param channel - IN Channel.
   3337           * @param rssi    - IN RSSI.
   3338           * @param adhoc   - IN 802.11 operating mode.
   3339           * @return None.
   3340           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3341          PUBLIC VOID
   3342          AppS2wScanResult_Print(UINT8 *ssid, UINT8 ssidLen, UINT8 *bssid,
   3343                  UINT8 channel, UINT8 rssi,  UINT8 adhoc)
   3344          {
   \                     AppS2wScanResult_Print:
   \   00000000   0xE92D 0x43FE      PUSH     {R1-R9,LR}
   \   00000004   0x4607             MOV      R7,R0
   \   00000006   0x4688             MOV      R8,R1
   \   00000008   0x9C0A             LDR      R4,[SP, #+40]
   \   0000000A   0x9D0B             LDR      R5,[SP, #+44]
   3345              UINT8 len=0;
   3346              static const char prefix[] = "\r\n";
   3347          
   3348              /*print format --> bssid  ssid  channel  type   Security  RSSI
   3349               */
   3350              AppS2wHal_CharNPut(prefix, sizeof(prefix) - 1);
   \   0000000C   0x.... 0x....      ADR.W    R0,??prefix
   \   00000010   0x4616             MOV      R6,R2
   \   00000012   0x4699             MOV      R9,R3
   \   00000014   0x2102             MOVS     R1,#+2
   \   00000016   0x.... 0x....      BL       AppS2wHal_CharNPut
   3351              S2w_Printf(" %02x:%02x:%02x:%02x:%02x:%02x, ",
   3352                     bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]);
   \   0000001A   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_15:
   \   0000001E   0x7831             LDRB     R1,[R6, #+0]
   \   00000020   0x.... 0x....      ADR.W    R0,`?<Constant " %02x:%02x:%02x:%02x:...">`
   \   00000024   0x.... 0x....      BL       S2w_Printf
   3353          
   3354              AppS2wHal_CharNPut(ssid, ssidLen);
   \   00000028   0x4641             MOV      R1,R8
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       AppS2wHal_CharNPut
   3355          
   3356              for(len = (32- ssidLen);len>0;len--)
   \   00000030   0xF1C8 0x0720      RSB      R7,R8,#+32
   \   00000034   0x.... 0x....      ADR.W    R8,??DataTable388  ;; " "
   \   00000038   0xE003             B.N      ??AppS2wScanResult_Print_0
   3357              {
   3358                  S2w_Printf(" ");
   \                     ??AppS2wScanResult_Print_1:
   \   0000003A   0x4640             MOV      R0,R8
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   3359              }
   \   00000040   0x1E7F             SUBS     R7,R7,#+1
   \                     ??AppS2wScanResult_Print_0:
   \   00000042   0xB2FF             UXTB     R7,R7
   \   00000044   0x2F00             CMP      R7,#+0
   \   00000046   0xD1F8             BNE.N    ??AppS2wScanResult_Print_1
   3360              S2w_Printf(", %02d", channel);
   \   00000048   0x4649             MOV      R1,R9
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant ", %02d">`
   \   0000004E   0x.... 0x....      BL       S2w_Printf
   3361              if(adhoc)
   \   00000052   0x2D00             CMP      R5,#+0
   \   00000054   0xBF14             ITE      NE 
   \   00000056   0x.... 0x....      ADRNE.W  R0,`?<Constant ",  ADHOC ">`
   \   0000005A   0x.... 0x....      ADREQ.W  R0,`?<Constant ",  INFRA ">`
   3362              {
   3363                  S2w_Printf(",  ADHOC ");
   3364              }
   3365              else
   3366              {
   3367                  S2w_Printf(",  INFRA ");
   \   0000005E   0x.... 0x....      BL       S2w_Printf
   3368              }
   3369          
   3370              S2w_Printf(", %d ,",(signed char)rssi);
   \   00000062   0xB261             SXTB     R1,R4
   \   00000064   0xB003             ADD      SP,SP,#+12
   \   00000066   0xE8BD 0x43F0      POP      {R4-R9,LR}
   \   0000006A   0x.... 0x....      ADR.W    R0,`?<Constant ", %d ,">`
   \   0000006E   0x.... 0x....      B.W      S2w_Printf
   3371          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x7970             LDRB     R0,[R6, #+5]
   \   00000002   0x9002             STR      R0,[SP, #+8]
   \   00000004   0x7930             LDRB     R0,[R6, #+4]
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x78F0             LDRB     R0,[R6, #+3]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x78B3             LDRB     R3,[R6, #+2]
   \   0000000E   0x7872             LDRB     R2,[R6, #+1]
   \   00000010   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??prefix:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   3372          
   3373          
   3374          
   3375          
   3376          
   3377          
   3378          #ifndef IOT_APP_ENABLE
   3379          
   3380          /**
   3381           ******************************************************************
   3382           * @ingroup S2w-Application
   3383           * @brief Process the AT+WM Command.
   3384           *   This function check the validy of the parameter passed and set the
   3385           *   wireless mode as per the parameter.
   3386           * @param ptr Pointer to the user input string.
   3387           * @return S2W_SUCCESS - operation successful.
   3388           * @retval S2W_EINVAL  - operation failure-invalid command.
   3389           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3390          PRIVATE UINT8
   3391          AppS2wCmd_Wmode(UINT8 *ptr)
   3392          {
   \                     AppS2wCmd_Wmode:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   3393              UINT8 status;
   3394              UINT32 mode,interval,noStations,dtimPeriod;
   3395          	UINT32 inactivityTimeoutInSec,grpKeyUpdtIntrvl;
   3396              UINT8 *p;
   3397              GSN_WIF_WLAN_NW_TYPE_T prevWlanNwType;
   3398          
   3399          
   3400              /* check the validity of the parameter passed
   3401               */
   3402              p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ?Subroutine37
   3403              if (!p)
   \                     ??CrossCallReturnLabel_195:
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD007             BEQ.N    ??AppS2wCmd_Wmode_0
   3404              {
   3405                  return S2W_EINVAL;
   3406              }
   3407          
   3408              status = AppS2wParse_Int(p, &mode);
   \   0000000E   0x.... 0x....      BL       ?Subroutine51
   3409              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_305:
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD15F             BNE.N    ??AppS2wCmd_Wmode_1
   3410              {
   3411                  return status;
   3412              }
   3413              if(mode > S2W_WLANDATA_MODE_PROV_AP || S2W_WLANDATA_MODE_ADHOC == mode )
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x2807             CMP      R0,#+7
   \   0000001A   0xD24B             BCS.N    ??AppS2wCmd_Wmode_2
   \   0000001C   0x2803             CMP      R0,#+3
   \                     ??AppS2wCmd_Wmode_0:
   \   0000001E   0xF000 0x80F3      BEQ.W    ??AppS2wCmd_Wmode_3
   3414              {
   3415                  return S2W_EINVAL;
   3416              }
   3417              // remap the mode
   3418              if(mode == 0)
   \   00000022   0xB908             CBNZ.N   R0,??AppS2wCmd_Wmode_4
   3419              {
   3420                  mode = S2W_WLANDATA_MODE_INFRA;
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \                     ??AppS2wCmd_Wmode_4:
   \   00000028   0xF248 0x14C8      MOVW     R4,#+33224
   \   0000002C   0x.... 0x....      LDR.W    R7,??DataTable393
   \   00000030   0x9800             LDR      R0,[SP, #+0]
   \   00000032   0x7939             LDRB     R1,[R7, #+4]
   \   00000034   0x.... 0x....      LDR.W    R6,??DataTable395_1
   \   00000038   0xF248 0x15C5      MOVW     R5,#+33221
   \   0000003C   0xF248 0x19C6      MOVW     R9,#+33222
   \   00000040   0xF44F 0x7AB4      MOV      R10,#+360
   \   00000044   0xF248 0x18C4      MOVW     R8,#+33220
   \   00000048   0x4288             CMP      R0,R1
   \   0000004A   0xD114             BNE.N    ??AppS2wCmd_Wmode_5
   3421              }
   3422          	if(mode == s2wCurrent.mode)
   3423          	{			
   3424          		if((mode == S2W_WLANDATA_MODE_AP) || (mode == S2W_WLANDATA_MODE_PROV_AP))
   \   0000004C   0x2802             CMP      R0,#+2
   \   0000004E   0xBF18             IT       NE 
   \   00000050   0x2806             CMPNE    R0,#+6
   \   00000052   0xD110             BNE.N    ??AppS2wCmd_Wmode_5
   3425          		{
   3426          			s2wappMainTaskCtxt->bcastSsid = S2W_DEFAULT_AP_SSID_BROADCAST;
   \   00000054   0x6830             LDR      R0,[R6, #+0]
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0xF808 0x1000      STRB     R1,[R8, R0]
   3427          			s2wappMainTaskCtxt->inactivityTimeoutInSec= 360;
   3428          			s2wappMainTaskCtxt->dtimPeriod = 3;
   \   0000005C   0x2103             MOVS     R1,#+3
   \   0000005E   0x6830             LDR      R0,[R6, #+0]
   \   00000060   0xF829 0xA000      STRH     R10,[R9, R0]
   \   00000064   0x5429             STRB     R1,[R5, R0]
   3429          		    s2wappMainTaskCtxt->grpKeyUpdtIntrvl= 3600;
   \   00000066   0xF44F 0x6161      MOV      R1,#+3600
   \   0000006A   0x6830             LDR      R0,[R6, #+0]
   \   0000006C   0x5221             STRH     R1,[R4, R0]
   3430          		    GsnWdd_SetGrpKeyUpdateTime(&s2wappMainTaskCtxt->if0.wddCtx, s2wappMainTaskCtxt->grpKeyUpdtIntrvl);
   \   0000006E   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000072   0x.... 0x....      BL       GsnWdd_SetGrpKeyUpdateTime
   3431          		}
   3432          	}
   3433          
   3434              /* if the mode selected is 2(AP) accept the next param(beacon interval )also */
   3435              prevWlanNwType = s2wappMainTaskCtxt->if0.macIfType;
   \                     ??AppS2wCmd_Wmode_5:
   \   00000076   0x6830             LDR      R0,[R6, #+0]
   3436              if((mode == S2W_WLANDATA_MODE_AP) || (mode == S2W_WLANDATA_MODE_PROV_AP))
   \   00000078   0x9900             LDR      R1,[SP, #+0]
   \   0000007A   0xF890 0xB9CC      LDRB     R11,[R0, #+2508]
   \   0000007E   0x2902             CMP      R1,#+2
   \   00000080   0xBF18             IT       NE 
   \   00000082   0x2906             CMPNE    R1,#+6
   \   00000084   0xF040 0x809C      BNE.W    ??AppS2wCmd_Wmode_6
   3437              {
   3438                  s2wappMainTaskCtxt->bcastSsid = S2W_DEFAULT_AP_SSID_BROADCAST;
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0xF808 0x1000      STRB     R1,[R8, R0]
   3439          		s2wCurrent.lmtdApConf.noStations = S2W_DEFAULT_AP_SUPPORTED_STATIONS;
   \   0000008E   0x2040             MOVS     R0,#+64
   \   00000090   0xF887 0x0287      STRB     R0,[R7, #+647]
   3440                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000094   0x.... 0x....      BL       ?Subroutine37
   3441                  if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_194:
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xBF1C             ITT      NE 
   \   0000009C   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000009E   0x2900             CMPNE    R1,#+0
   \   000000A0   0xD00D             BEQ.N    ??AppS2wCmd_Wmode_7
   3442                  {
   3443                      status = AppS2wParse_Int(p, &interval);
   \   000000A2   0x.... 0x....      BL       ?Subroutine56
   3444                      if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_357:
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD115             BNE.N    ??AppS2wCmd_Wmode_1
   3445                      {
   3446                          return status;
   3447                      }
   3448                      if((interval < 50) || (interval > 1500))
   \   000000AA   0x9805             LDR      R0,[SP, #+20]
   \   000000AC   0x3832             SUBS     R0,R0,#+50
   \   000000AE   0xF240 0x51AB      MOVW     R1,#+1451
   \   000000B2   0x4288             CMP      R0,R1
   \                     ??AppS2wCmd_Wmode_2:
   \   000000B4   0xF080 0x80A8      BCS.W    ??AppS2wCmd_Wmode_3
   3449                      {
   3450                          return S2W_EINVAL;
   3451                      }
   3452                      s2wCurrent.lmtdApConf.beaconInterval = interval;
   \   000000B8   0x9805             LDR      R0,[SP, #+20]
   \   000000BA   0xF8A7 0x028A      STRH     R0,[R7, #+650]
   3453                  }
   3454                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wmode_7:
   \   000000BE   0x.... 0x....      BL       ?Subroutine37
   3455                  if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_193:
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xBF1C             ITT      NE 
   \   000000C6   0x7801             LDRBNE   R1,[R0, #+0]
   \   000000C8   0x2900             CMPNE    R1,#+0
   \   000000CA   0xD006             BEQ.N    ??AppS2wCmd_Wmode_8
   3456                  {
   3457                      status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->bcastSsid);
   \   000000CC   0x6831             LDR      R1,[R6, #+0]
   \   000000CE   0x4441             ADD      R1,R8,R1
   \   000000D0   0x.... 0x....      BL       AppS2wParse_Boolean
   3458                      if (status != S2W_SUCCESS)
   \   000000D4   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_Wmode_1:
   \   000000D6   0xF040 0x80A6      BNE.W    ??AppS2wCmd_Wmode_9
   3459                      {
   3460                          return status;
   3461                      }
   3462                  }
   3463          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wmode_8:
   \   000000DA   0x.... 0x....      BL       ?Subroutine37
   3464                  if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_192:
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xBF1C             ITT      NE 
   \   000000E2   0x7801             LDRBNE   R1,[R0, #+0]
   \   000000E4   0x2900             CMPNE    R1,#+0
   \   000000E6   0xD008             BEQ.N    ??AppS2wCmd_Wmode_10
   3465                  {
   3466                      status = AppS2wParse_Int(p, &noStations);
   3467                      if (status != S2W_SUCCESS || noStations == 0)
   \   000000E8   0x.... 0x....      BL       ?Subroutine54
   \                     ??CrossCallReturnLabel_345:
   \   000000EC   0x2800             CMP      R0,#+0
   \   000000EE   0xD111             BNE.N    ??AppS2wCmd_Wmode_11
   \   000000F0   0x9804             LDR      R0,[SP, #+16]
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD011             BEQ.N    ??AppS2wCmd_Wmode_12
   3468                      {
   3469                          return S2W_EINVAL;
   3470                      }
   3471          			s2wCurrent.lmtdApConf.noStations = (UINT8)noStations;
   \   000000F6   0xF887 0x0287      STRB     R0,[R7, #+647]
   3472                  }
   3473          		s2wappMainTaskCtxt->dtimPeriod = 3;
   \                     ??AppS2wCmd_Wmode_10:
   \   000000FA   0x6830             LDR      R0,[R6, #+0]
   \   000000FC   0x2103             MOVS     R1,#+3
   \   000000FE   0x5429             STRB     R1,[R5, R0]
   3474          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000100   0x.... 0x....      BL       ?Subroutine37
   3475          		if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_191:
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xBF1C             ITT      NE 
   \   00000108   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000010A   0x2900             CMPNE    R1,#+0
   \   0000010C   0xD009             BEQ.N    ??AppS2wCmd_Wmode_13
   3476          		{
   3477          			status = AppS2wParse_Int(p, &dtimPeriod);
   3478          			if (status != S2W_SUCCESS || dtimPeriod == 0)
   \   0000010E   0x.... 0x....      BL       ?Subroutine53
   \                     ??CrossCallReturnLabel_339:
   \   00000112   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_Wmode_11:
   \   00000114   0xD178             BNE.N    ??AppS2wCmd_Wmode_3
   \   00000116   0x9803             LDR      R0,[SP, #+12]
   \   00000118   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_Wmode_12:
   \   0000011A   0xD075             BEQ.N    ??AppS2wCmd_Wmode_3
   3479          			{
   3480          				return S2W_EINVAL;
   3481          			}
   3482          			s2wappMainTaskCtxt->dtimPeriod= (UINT8)dtimPeriod;
   \   0000011C   0x6830             LDR      R0,[R6, #+0]
   \   0000011E   0x9903             LDR      R1,[SP, #+12]
   \   00000120   0x5429             STRB     R1,[R5, R0]
   3483          		}
   3484          		s2wappMainTaskCtxt->inactivityTimeoutInSec= 360;
   \                     ??AppS2wCmd_Wmode_13:
   \   00000122   0x6830             LDR      R0,[R6, #+0]
   \   00000124   0xF829 0xA000      STRH     R10,[R9, R0]
   3485          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000128   0x.... 0x....      BL       ?Subroutine37
   3486          		if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_190:
   \   0000012C   0x2800             CMP      R0,#+0
   \   0000012E   0xBF1C             ITT      NE 
   \   00000130   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000132   0x2900             CMPNE    R1,#+0
   \   00000134   0xD00A             BEQ.N    ??AppS2wCmd_Wmode_14
   3487          		{
   3488          			status = AppS2wParse_Int(p, &inactivityTimeoutInSec);
   3489          			if (status != S2W_SUCCESS || inactivityTimeoutInSec == 0)
   \   00000136   0x.... 0x....      BL       ?Subroutine50
   \                     ??CrossCallReturnLabel_260:
   \   0000013A   0x2800             CMP      R0,#+0
   \   0000013C   0xD164             BNE.N    ??AppS2wCmd_Wmode_3
   \   0000013E   0x9802             LDR      R0,[SP, #+8]
   \   00000140   0x2800             CMP      R0,#+0
   \   00000142   0xD061             BEQ.N    ??AppS2wCmd_Wmode_3
   3490          			{
   3491          				return S2W_EINVAL;
   3492          			}
   3493          			s2wappMainTaskCtxt->inactivityTimeoutInSec= (UINT16)inactivityTimeoutInSec;
   \   00000144   0x6830             LDR      R0,[R6, #+0]
   \   00000146   0x9902             LDR      R1,[SP, #+8]
   \   00000148   0xF829 0x1000      STRH     R1,[R9, R0]
   3494          		}
   3495          	
   3496          		s2wappMainTaskCtxt->grpKeyUpdtIntrvl= 3600;
   \                     ??AppS2wCmd_Wmode_14:
   \   0000014C   0xF44F 0x6161      MOV      R1,#+3600
   \   00000150   0x6830             LDR      R0,[R6, #+0]
   \   00000152   0x5221             STRH     R1,[R4, R0]
   3497          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000154   0x.... 0x....      BL       ?Subroutine37
   3498          		if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_189:
   \   00000158   0x2800             CMP      R0,#+0
   \   0000015A   0xBF1C             ITT      NE 
   \   0000015C   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000015E   0x2900             CMPNE    R1,#+0
   \   00000160   0xD009             BEQ.N    ??AppS2wCmd_Wmode_15
   3499          		{
   3500          			status = AppS2wParse_Int(p, &grpKeyUpdtIntrvl);
   3501          			if (status != S2W_SUCCESS || grpKeyUpdtIntrvl == 0)
   \   00000162   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_329:
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD14E             BNE.N    ??AppS2wCmd_Wmode_3
   \   0000016A   0x9801             LDR      R0,[SP, #+4]
   \   0000016C   0x2800             CMP      R0,#+0
   \   0000016E   0xD04B             BEQ.N    ??AppS2wCmd_Wmode_3
   3502          			{
   3503          				return S2W_EINVAL;
   3504          			}
   3505          			s2wappMainTaskCtxt->grpKeyUpdtIntrvl= (UINT16)grpKeyUpdtIntrvl;
   \   00000170   0x6830             LDR      R0,[R6, #+0]
   \   00000172   0x9901             LDR      R1,[SP, #+4]
   \   00000174   0x5221             STRH     R1,[R4, R0]
   3506          		}
   3507          		if(mode == s2wCurrent.mode)
   \                     ??AppS2wCmd_Wmode_15:
   \   00000176   0x9800             LDR      R0,[SP, #+0]
   \   00000178   0x7939             LDRB     R1,[R7, #+4]
   \   0000017A   0x4288             CMP      R0,R1
   \   0000017C   0xD052             BEQ.N    ??AppS2wCmd_Wmode_16
   3508          			return S2W_SUCCESS;
   3509          		App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   \   0000017E   0x6830             LDR      R0,[R6, #+0]
   \   00000180   0xF600 0x11C8      ADDW     R1,R0,#+2504
   \   00000184   0x.... 0x....      BL       App_InterfaceStop
   3510          		
   3511          		s2wappMainTaskCtxt->if0.macIfNum = 0;
   \   00000188   0x6830             LDR      R0,[R6, #+0]
   \   0000018A   0x2100             MOVS     R1,#+0
   \   0000018C   0xF8C0 0x19C8      STR      R1,[R0, #+2504]
   3512          		s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_AP;
   \   00000190   0x2202             MOVS     R2,#+2
   \   00000192   0x.... 0x....      BL       ?Subroutine127
   3513          
   3514                  if(prevWlanNwType == S2W_WLANDATA_MODE_ISOTX)
   \                     ??CrossCallReturnLabel_596:
   \   00000196   0xD104             BNE.N    ??AppS2wCmd_Wmode_17
   3515                  {
   3516                      App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
   \   00000198   0x.... 0x....      BL       App_IfInit
   3517                      /*Open the interface*/
   3518                      App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   \   0000019C   0x.... 0x....      BL       ?Subroutine126
   3519                  }
   \                     ??CrossCallReturnLabel_595:
   \   000001A0   0xE001             B.N      ??AppS2wCmd_Wmode_18
   3520                  else
   3521                  {
   3522                      App_IfReinit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   \                     ??AppS2wCmd_Wmode_17:
   \   000001A2   0x.... 0x....      BL       App_IfReinit
   3523                  }
   3524          		
   3525          
   3526          	    GsnWdd_SetGrpKeyUpdateTime(&s2wappMainTaskCtxt->if0.wddCtx, s2wappMainTaskCtxt->grpKeyUpdtIntrvl);
   \                     ??AppS2wCmd_Wmode_18:
   \   000001A6   0x6830             LDR      R0,[R6, #+0]
   \   000001A8   0x5A21             LDRH     R1,[R4, R0]
   \   000001AA   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000001AE   0x.... 0x....      BL       GsnWdd_SetGrpKeyUpdateTime
   3527          
   3528          	}
   3529              else if (S2W_WLANDATA_MODE_INFRA == mode)/*STA Mode*/
   3530              {
   3531                 
   3532          	   App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   3533          	   
   3534          	   s2wappMainTaskCtxt->if0.macIfNum = 0;
   3535          	   s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_STA;
   3536          
   3537                  if(prevWlanNwType == S2W_WLANDATA_MODE_ISOTX)
   3538                  {
   3539                      App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
   3540                      /*Open the interface*/
   3541                      App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   3542                  }
   3543                  else
   3544                  {
   3545          	        App_IfReinit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   3546                  }
   3547                  
   3548                 AppS2w_SetWlanDfltParams(profile_params.defaultProfile);
   3549                 GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,0,S2W_DEFAULT_SYNCLOSS_INTERVAL);
   3550          
   3551              }
   3552              else if (S2W_WLANDATA_MODE_ISOTX == mode)/*STA Mode*/
   3553              {
   3554          #ifdef S2W_ISOTX_SUPPORT       
   3555          	   App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   3556          	   
   3557          	   s2wappMainTaskCtxt->if0.macIfNum = 0;
   3558          	   s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_ISOTX;
   3559          	   
   3560                 App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
   3561                 /*Open the interface*/
   3562                 App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
   3563          #else
   3564          	   return S2W_EINVAL;
   3565          #endif
   3566          
   3567              }
   3568              // update the mac address after switching the mode
   3569              {
   3570                  UINT8 macAddr[6];
   3571                  // depends on mode the mac changes
   3572                  if(mode == S2W_WLANDATA_MODE_INFRA)
   \                     ??AppS2wCmd_Wmode_19:
   \   000001B2   0x9800             LDR      R0,[SP, #+0]
   \   000001B4   0x2801             CMP      R0,#+1
   \   000001B6   0xD129             BNE.N    ??AppS2wCmd_Wmode_20
   3573                  {
   3574                  //S2w_LoadMacAddr(macAddr);
   3575                  S2w_macAddrRTCGet(macAddr);
   \   000001B8   0xA806             ADD      R0,SP,#+24
   \   000001BA   0x.... 0x....      BL       S2w_macAddrRTCGet
   \   000001BE   0xE02B             B.N      ??AppS2wCmd_Wmode_21
   3576          		}
   \                     ??AppS2wCmd_Wmode_6:
   \   000001C0   0x2901             CMP      R1,#+1
   \   000001C2   0xD11F             BNE.N    ??AppS2wCmd_Wmode_22
   \   000001C4   0xF600 0x11C8      ADDW     R1,R0,#+2504
   \   000001C8   0x.... 0x....      BL       App_InterfaceStop
   \   000001CC   0x6830             LDR      R0,[R6, #+0]
   \   000001CE   0x2100             MOVS     R1,#+0
   \   000001D0   0xF8C0 0x19C8      STR      R1,[R0, #+2504]
   \   000001D4   0x2201             MOVS     R2,#+1
   \   000001D6   0x.... 0x....      BL       ?Subroutine127
   \                     ??CrossCallReturnLabel_597:
   \   000001DA   0xD104             BNE.N    ??AppS2wCmd_Wmode_23
   \   000001DC   0x.... 0x....      BL       App_IfInit
   \   000001E0   0x.... 0x....      BL       ?Subroutine126
   \                     ??CrossCallReturnLabel_594:
   \   000001E4   0xE001             B.N      ??AppS2wCmd_Wmode_24
   \                     ??AppS2wCmd_Wmode_23:
   \   000001E6   0x.... 0x....      BL       App_IfReinit
   \                     ??AppS2wCmd_Wmode_24:
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable400
   \   000001EE   0x7940             LDRB     R0,[R0, #+5]
   \   000001F0   0x.... 0x....      BL       AppS2w_SetWlanDfltParams
   \   000001F4   0x6830             LDR      R0,[R6, #+0]
   \   000001F6   0x2264             MOVS     R2,#+100
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000001FE   0x.... 0x....      BL       GsnWdd_BeaconMissThresholdSet
   \   00000202   0xE7D6             B.N      ??AppS2wCmd_Wmode_19
   \                     ??AppS2wCmd_Wmode_22:
   \   00000204   0x2905             CMP      R1,#+5
   \   00000206   0xD1D4             BNE.N    ??AppS2wCmd_Wmode_19
   \                     ??AppS2wCmd_Wmode_3:
   \   00000208   0x2002             MOVS     R0,#+2
   \   0000020A   0xE00C             B.N      ??AppS2wCmd_Wmode_9
   3577          		else
   3578          		{
   3579          			memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array , 6);
   \                     ??AppS2wCmd_Wmode_20:
   \   0000020C   0x2206             MOVS     R2,#+6
   \   0000020E   0xF207 0x210D      ADDW     R1,R7,#+525
   \   00000212   0xA806             ADD      R0,SP,#+24
   \   00000214   0x.... 0x....      BL       memcpy
   3580          		}
   3581          
   3582                  AppS2wHal_MacAddrSet(macAddr, TRUE);
   \                     ??AppS2wCmd_Wmode_21:
   \   00000218   0x2101             MOVS     R1,#+1
   \   0000021A   0xA806             ADD      R0,SP,#+24
   \   0000021C   0x.... 0x....      BL       AppS2wHal_MacAddrSet
   3583              }
   3584              /* update the mode in active profile
   3585               */
   3586              s2wCurrent.mode = mode;
   \   00000220   0x9800             LDR      R0,[SP, #+0]
   \   00000222   0x7138             STRB     R0,[R7, #+4]
   3587              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Wmode_16:
   \   00000224   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wmode_9:
   \   00000226   0xB009             ADD      SP,SP,#+36
   \   00000228   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3588          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine127:
   \   00000000   0xF600 0x11C8      ADDW     R1,R0,#+2504
   \   00000004   0xF1BB 0x0F05      CMP      R11,#+5
   \   00000008   0x710A             STRB     R2,[R1, #+4]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine126:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0xF600 0x11C8      ADDW     R1,R0,#+2504
   \   00000006   0x.... 0x....      B.W      App_InterfaceStart
   3589          
   3590          
   3591          /**
   3592           ******************************************************************
   3593           * @ingroup S2w-Application
   3594           * Process AT+WRXPS command.
   3595           *   This funcion validates the parameter passed  and call the hal function
   3596           *   to configure the PS-POLL mode.
   3597           * @param ptr Pointer to the user input string.
   3598           * @return S2W_SUCCESS - operation successful.
   3599           * @retval S2W_EINVAL  - operation failure-invalid command.
   3600           * @retval S2W_FAILURE - operation failure-Power save configuration failed.
   3601           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3602          UINT8
   3603          AppS2wCmd_PowerSave(UINT8 *ptr)
   3604          {
   \                     AppS2wCmd_PowerSave:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   3605              UINT8 enable;
   3606              UINT8 status;
   3607          	UINT8 *p;
   3608          	UINT32 beaconWaitDur = 10;
   \   00000004   0x200A             MOVS     R0,#+10
   \   00000006   0x.... 0x....      BL       ?Subroutine34
   3609              /* valiadate the parameter as TRUE or FALSE
   3610               */
   3611              p = AppS2wParse_NextParamGet(&ptr);
   3612              status = AppS2wParse_Boolean(p, &enable);
   \                     ??CrossCallReturnLabel_158:
   \   0000000A   0x.... 0x....      BL       ?Subroutine60
   3613              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_384:
   \   0000000E   0xB9C0             CBNZ.N   R0,??AppS2wCmd_PowerSave_0
   3614              {
   3615                  return status;
   3616              }
   3617          
   3618          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000010   0x.... 0x....      BL       ??Subroutine34_0
   3619          	if (p)
   \                     ??CrossCallReturnLabel_155:
   \   00000014   0xB150             CBZ.N    R0,??AppS2wCmd_PowerSave_1
   3620          	{
   3621          		status = AppS2wParse_Int(p, &beaconWaitDur);
   \   00000016   0x.... 0x....      BL       ?Subroutine52
   3622          		if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_328:
   \   0000001A   0xB990             CBNZ.N   R0,??AppS2wCmd_PowerSave_0
   3623          		{
   3624          			return status;
   3625          		}
   3626          		
   3627          		GsnWdd_PsCfgBeaconWaitDurSet(&s2wappMainTaskCtxt->if0.wddCtx, beaconWaitDur);
   \   0000001C   0x.... 0x....      BL       ?Subroutine128
   \                     ??CrossCallReturnLabel_598:
   \   00000020   0xF241 0x00F0      MOVW     R0,#+4336
   \   00000024   0x5840             LDR      R0,[R0, R1]
   \   00000026   0x9901             LDR      R1,[SP, #+4]
   \   00000028   0xF8C0 0x1090      STR      R1,[R0, #+144]
   3628          	}
   3629              /* call the hal function to configure the PS-POLL mode
   3630               */
   3631              status = AppS2wHal_PowerSaveConfig(enable);
   \                     ??AppS2wCmd_PowerSave_1:
   \   0000002C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000030   0x.... 0x....      BL       AppS2wHal_PowerSaveConfig
   3632              if (status != S2W_SUCCESS)
   \   00000034   0xB928             CBNZ.N   R0,??AppS2wCmd_PowerSave_0
   3633              {
   3634                  return status;
   3635              }
   3636              s2wCurrent.powerSave = enable;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable393
   \   0000003A   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000003E   0x71C1             STRB     R1,[R0, #+7]
   3637              return status;
   \   00000040   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_PowerSave_0:
   \   00000042   0xBD0E             POP      {R1-R3,PC}       ;; return
   3638          }
   3639          

   \                                 In section .text, align 2, keep-with-next
   3640          PUBLIC VOID
   3641          AppS2wScan_Notification( VOID* cText,INT32 status, INT8 *rsltBuff,
   3642             	                     UINT32 rsltCount )
   3643          {
   \                     AppS2wScan_Notification:
   \   00000000   0xE92D 0x4FF4      PUSH     {R2,R4-R11,LR}
   \   00000004   0x4688             MOV      R8,R1
   \   00000006   0x469A             MOV      R10,R3
   3644          	/* copy the data to user buffer and return
   3645          	 */
   3646              UINT8 i=0;
   \   00000008   0x2600             MOVS     R6,#+0
   3647          
   3648              for(i=0;i<rsltCount;i++)
   \   0000000A   0xF04F 0x0B2E      MOV      R11,#+46
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable400_1
   \   00000012   0x.... 0x....      LDR.W    R9,??DataTable400_2
   \   00000016   0xE036             B.N      ??AppS2wScan_Notification_0
   3649              {
   3650                  
   3651                  GSN_WDD_SCAN_ENTRY_T* scanEntryBuff = (GSN_WDD_SCAN_ENTRY_T*)(rsltBuff + (i*sizeof(GSN_WDD_SCAN_ENTRY_T))) ;
   \                     ??AppS2wScan_Notification_1:
   \   00000018   0x9A00             LDR      R2,[SP, #+0]
   \   0000001A   0xF240 0x212E      MOVW     R1,#+558
   \   0000001E   0xFB01 0x2506      MLA      R5,R1,R6,R2
   3652                  if(scanEntryBuff->channel > 0)
   \   00000022   0xF105 0x0728      ADD      R7,R5,#+40
   \   00000026   0x78B8             LDRB     R0,[R7, #+2]
   \   00000028   0xB360             CBZ.N    R0,??AppS2wScan_Notification_2
   3653                  {
   3654                  scanDisplayInfo[scanDisplayInfoCount].channel = scanEntryBuff->channel;
   \   0000002A   0x7821             LDRB     R1,[R4, #+0]
   \   0000002C   0xFB0B 0x9301      MLA      R3,R11,R1,R9
   3655                  scanDisplayInfo[scanDisplayInfoCount].rssi = scanEntryBuff->rssi;
   3656                  memcpy(scanDisplayInfo[scanDisplayInfoCount].bssid.array,scanEntryBuff->bssid,6);
   \   00000030   0x2206             MOVS     R2,#+6
   \   00000032   0xF883 0x0027      STRB     R0,[R3, #+39]
   \   00000036   0xF105 0x0122      ADD      R1,R5,#+34
   \   0000003A   0x8D28             LDRH     R0,[R5, #+40]
   \   0000003C   0x8518             STRH     R0,[R3, #+40]
   \   0000003E   0xF103 0x0021      ADD      R0,R3,#+33
   \   00000042   0x.... 0x....      BL       memcpy
   3657                  memcpy(&scanDisplayInfo[scanDisplayInfoCount].ssid,&scanEntryBuff->ssid,sizeof(GSN_WLAN_MAC_SSID_T));
   \   00000046   0x7820             LDRB     R0,[R4, #+0]
   \   00000048   0x2221             MOVS     R2,#+33
   \   0000004A   0x1C69             ADDS     R1,R5,#+1
   \   0000004C   0xFB0B 0x9000      MLA      R0,R11,R0,R9
   \   00000050   0x.... 0x....      BL       memcpy
   3658                  scanDisplayInfo[scanDisplayInfoCount].capability = GsnMacUtil_ExtractCapaInfo((GSN_MAC_FRAME_T*)scanEntryBuff->frame);
   \   00000054   0xF105 0x002E      ADD      R0,R5,#+46
   \   00000058   0x.... 0x....      BL       GsnMacUtil_ExtractCapaInfo
   \   0000005C   0x7821             LDRB     R1,[R4, #+0]
   \   0000005E   0xFB0B 0x9101      MLA      R1,R11,R1,R9
   3659          
   3660                  scanDisplayInfo[scanDisplayInfoCount].encryptionType = GsnMacUtil_ExtractEncryptionStatus((GSN_MAC_FRAME_T*)scanEntryBuff->frame,scanEntryBuff->frameLen,GSN_MAC_BEACON_SSID_OFT,&scanDisplayInfo[scanDisplayInfoCount].authType);
   \   00000062   0xF101 0x032C      ADD      R3,R1,#+44
   \   00000066   0xF881 0x002A      STRB     R0,[R1, #+42]
   \   0000006A   0x220C             MOVS     R2,#+12
   \   0000006C   0x88B9             LDRH     R1,[R7, #+4]
   \   0000006E   0xF105 0x002E      ADD      R0,R5,#+46
   \   00000072   0x.... 0x....      BL       GsnMacUtil_ExtractEncryptionStatus
   \   00000076   0x7821             LDRB     R1,[R4, #+0]
   \   00000078   0xFB0B 0x9201      MLA      R2,R11,R1,R9
   \   0000007C   0xF882 0x002B      STRB     R0,[R2, #+43]
   3661                  scanDisplayInfoCount++;
   \   00000080   0x1C48             ADDS     R0,R1,#+1
   \   00000082   0x7020             STRB     R0,[R4, #+0]
   3662                  }
   3663               
   3664              }
   \                     ??AppS2wScan_Notification_2:
   \   00000084   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wScan_Notification_0:
   \   00000086   0xB2F6             UXTB     R6,R6
   \   00000088   0x4556             CMP      R6,R10
   \   0000008A   0xD3C5             BCC.N    ??AppS2wScan_Notification_1
   3665          
   3666              // if the scan finished release the scan wait semaphore
   3667              if(status == GSN_WDD_SCAN_COMPLETE)
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable400_3  ;; 0xb000010d
   \   00000090   0x4580             CMP      R8,R0
   \   00000092   0xD105             BNE.N    ??AppS2wScan_Notification_3
   3668              {
   3669                          //UINT8 ret;
   3670          		 /*ret = */GsnOsal_SemRelease ( &stScanSemaphore );
   \   00000094   0xE8BD 0x4FF2      POP      {R1,R4-R11,LR}
   \   00000098   0x.... 0x....      LDR.W    R0,??DataTable401_1
   \   0000009C   0x.... 0x....      B.W      GsnOsal_SemRelease
   3671                           
   3672          	}
   3673          }
   \                     ??AppS2wScan_Notification_3:
   \   000000A0   0xE8BD 0x8FF1      POP      {R0,R4-R11,PC}   ;; return
   3674          
   3675          
   3676          
   3677          

   \                                 In section .text, align 2, keep-with-next
   3678          PUBLIC VOID
   3679          s2wScanResult_Print(S2W_SCAN_DISPLAY_INFO_T scanDisplayInfo[],UINT8 count)
   3680          {
   \                     s2wScanResult_Print:
   \   00000000   0xE92D 0x4FF2      PUSH     {R1,R4-R11,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   3681              UINT8 len=0,i=0;
   3682              for(i=0;i<count;i++)
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0x.... 0x....      ADR.W    R8,`?<Constant ", %02d">`
   \   0000000E   0x.... 0x....      ADR.W    R11,`?<Constant "\\r\\n %02x:%02x:%02x:%02...">`
   \   00000012   0x.... 0x....      ADR.W    R10,??DataTable391  ;; " "
   \   00000016   0xE004             B.N      ??s2wScanResult_Print_0
   3683              {
   3684                  /*print format --> bssid  ssid  channel  type   Security  RSSI
   3685                   */
   3686                   S2w_Printf("\r\n %02x:%02x:%02x:%02x:%02x:%02x, ",
   3687                     scanDisplayInfo[i].bssid.array[0], scanDisplayInfo[i].bssid.array[1], scanDisplayInfo[i].bssid.array[2],
   3688                     scanDisplayInfo[i].bssid.array[3], scanDisplayInfo[i].bssid.array[4], scanDisplayInfo[i].bssid.array[5]);
   3689          
   3690                   AppS2wHal_CharNPut(scanDisplayInfo[i].ssid.array, scanDisplayInfo[i].ssid.length);
   3691          
   3692                   for(len = (32- scanDisplayInfo[i].ssid.length);len>0;len--)
   3693                   {
   3694                       S2w_Printf(" ");
   3695                   }
   3696                   S2w_Printf(", %02d", scanDisplayInfo[i].channel);
   3697          
   3698                   if((scanDisplayInfo[i].capability & GSN_MAC_CAPA_IBSS) )
   3699                   {
   3700                       S2w_Printf(",  ADHOC ");
   3701                   }
   3702                   else
   3703                   {
   3704                       S2w_Printf(",  INFRA ");
   3705                   }
   3706                   S2w_Printf(", %d ,",(signed char)scanDisplayInfo[i].rssi);
   3707          
   3708                   /* print the security info
   3709                    */
   3710                   {
   3711                       UINT8* security = "NONE";
   3712                       if(scanDisplayInfo[i].capability & GSN_MAC_CAPA_PRIVA)
   3713                       {
   3714                           if (scanDisplayInfo[i].encryptionType & GSN_MAC_ENC_WPA2)
   3715                           {
   3716                               if (GSN_MAC_RSNIE_KEYMGT_PSK  == scanDisplayInfo[i].authType)
   3717                               {
   3718                                   security = "WPA2-PERSONAL";
   3719                               }
   3720                               else if (scanDisplayInfo[i].authType == GSN_MAC_RSNIE_KEYMGT_8021X)
   3721                               {
   3722                                   security = "WPA2-ENTERPRISE";
   3723                               }
   3724                           }
   3725                           else if (scanDisplayInfo[i].encryptionType & GSN_MAC_ENC_WPA)
   3726                           {
   3727                               if (GSN_MAC_RSNIE_KEYMGT_PSK  == scanDisplayInfo[i].authType)
   3728                               {
   3729                                   security = "WPA-PERSONAL";
   3730                               }
   3731                               else if (scanDisplayInfo[i].authType == GSN_MAC_RSNIE_KEYMGT_8021X)
   3732                               {
   3733                                   security = "WPA-ENTERPRISE";
   3734                               }
   3735                           }
   3736                           else
   3737                           {
   3738                               /* Open with WEP cannot be identified from capabilities
   3739                                */
   3740                               security = "WEP";
   \                     ??s2wScanResult_Print_1:
   \   00000018   0x....             ADR.N    R1,??DataTable391_1  ;; "WEP"
   3741                           }
   3742                       }
   3743                       S2w_Printf(" %s", security);
   \                     ??s2wScanResult_Print_2:
   \   0000001A   0x....             ADR.N    R0,??DataTable391_2  ;; " %s"
   \   0000001C   0x.... 0x....      BL       S2w_Printf
   \   00000020   0x1C6D             ADDS     R5,R5,#+1
   \                     ??s2wScanResult_Print_0:
   \   00000022   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000026   0x4285             CMP      R5,R0
   \   00000028   0xDA52             BGE.N    ??s2wScanResult_Print_3
   \   0000002A   0x202E             MOVS     R0,#+46
   \   0000002C   0xFB00 0xF705      MUL      R7,R0,R5
   \   00000030   0xEB07 0x0904      ADD      R9,R7,R4
   \   00000034   0xF209 0x0621      ADDW     R6,R9,#+33
   \   00000038   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_16:
   \   0000003C   0xF899 0x1021      LDRB     R1,[R9, #+33]
   \   00000040   0x4658             MOV      R0,R11
   \   00000042   0x.... 0x....      BL       S2w_Printf
   \   00000046   0x5D39             LDRB     R1,[R7, R4]
   \   00000048   0xF109 0x0001      ADD      R0,R9,#+1
   \   0000004C   0x.... 0x....      BL       AppS2wHal_CharNPut
   \   00000050   0x5D38             LDRB     R0,[R7, R4]
   \   00000052   0xF1C0 0x0720      RSB      R7,R0,#+32
   \   00000056   0xE003             B.N      ??s2wScanResult_Print_4
   \                     ??s2wScanResult_Print_5:
   \   00000058   0x4650             MOV      R0,R10
   \   0000005A   0x.... 0x....      BL       S2w_Printf
   \   0000005E   0x1E7F             SUBS     R7,R7,#+1
   \                     ??s2wScanResult_Print_4:
   \   00000060   0xB2FF             UXTB     R7,R7
   \   00000062   0x2F00             CMP      R7,#+0
   \   00000064   0xD1F8             BNE.N    ??s2wScanResult_Print_5
   \   00000066   0x79B1             LDRB     R1,[R6, #+6]
   \   00000068   0x4640             MOV      R0,R8
   \   0000006A   0x.... 0x....      BL       S2w_Printf
   \   0000006E   0xF109 0x0628      ADD      R6,R9,#+40
   \   00000072   0x78B0             LDRB     R0,[R6, #+2]
   \   00000074   0x0780             LSLS     R0,R0,#+30
   \   00000076   0xBF4C             ITE      MI 
   \   00000078   0x.... 0x....      ADRMI.W  R0,`?<Constant ",  ADHOC ">`
   \   0000007C   0x.... 0x....      ADRPL.W  R0,`?<Constant ",  INFRA ">`
   \   00000080   0x.... 0x....      BL       S2w_Printf
   \   00000084   0xF999 0x1028      LDRSB    R1,[R9, #+40]
   \   00000088   0x.... 0x....      ADR.W    R0,`?<Constant ", %d ,">`
   \   0000008C   0x.... 0x....      BL       S2w_Printf
   \   00000090   0x78B0             LDRB     R0,[R6, #+2]
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable402
   \   00000096   0x06C0             LSLS     R0,R0,#+27
   \   00000098   0xD5BF             BPL.N    ??s2wScanResult_Print_2
   \   0000009A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000009C   0x06C2             LSLS     R2,R0,#+27
   \   0000009E   0xD50A             BPL.N    ??s2wScanResult_Print_6
   \   000000A0   0x7930             LDRB     R0,[R6, #+4]
   \   000000A2   0x2802             CMP      R0,#+2
   \   000000A4   0xBF08             IT       EQ 
   \   000000A6   0x.... 0x....      ADREQ.W  R1,`?<Constant "WPA2-PERSONAL">`
   \   000000AA   0xD0B6             BEQ.N    ??s2wScanResult_Print_2
   \   000000AC   0x2801             CMP      R0,#+1
   \   000000AE   0xD1B4             BNE.N    ??s2wScanResult_Print_2
   \   000000B0   0x.... 0x....      ADR.W    R1,`?<Constant "WPA2-ENTERPRISE">`
   \   000000B4   0xE7B1             B.N      ??s2wScanResult_Print_2
   \                     ??s2wScanResult_Print_6:
   \   000000B6   0x0780             LSLS     R0,R0,#+30
   \   000000B8   0xD5AE             BPL.N    ??s2wScanResult_Print_1
   \   000000BA   0x7930             LDRB     R0,[R6, #+4]
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xBF08             IT       EQ 
   \   000000C0   0x.... 0x....      ADREQ.W  R1,`?<Constant "WPA-PERSONAL">`
   \   000000C4   0xD0A9             BEQ.N    ??s2wScanResult_Print_2
   \   000000C6   0x2801             CMP      R0,#+1
   \   000000C8   0xD1A7             BNE.N    ??s2wScanResult_Print_2
   \   000000CA   0x.... 0x....      ADR.W    R1,`?<Constant "WPA-ENTERPRISE">`
   \   000000CE   0xE7A4             B.N      ??s2wScanResult_Print_2
   3744             		 }
   3745          	 }
   3746          }
   \                     ??s2wScanResult_Print_3:
   \   000000D0   0xB005             ADD      SP,SP,#+20
   \   000000D2   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3747          
   3748          
   3749          
   3750          /**
   3751           ******************************************************************
   3752           * @ingroup S2w-Application
   3753           * @brief Process the AT+WS Command.
   3754           *   This function check the validy of the parameter passed and call the
   3755           *   hal function to start the scan.
   3756           *
   3757           * @param ptr Pointer to the user input string.
   3758           *
   3759           * @return S2W_SUCCESS - operation successful.
   3760           * @retval S2W_EINVAL  - operation failure-invalid command.
   3761           * @retval S2W_FAILURE - operation failure-scan failed.
   3762           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3763          PRIVATE UINT8
   3764          AppS2wCmd_Wscan(UINT8 *ptr)
   3765          {
   \                     AppS2wCmd_Wscan:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   3766              UINT32 status = S2W_SUCCESS;
   3767              UINT8 allChScan=0,i=0;
   3768              S2W_WLANDATA_T params;
   3769              GSN_WDD_SCAN_PARAMS_T scanParams;
   3770              
   3771              scanDisplayAllCount = 0;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable400_1
   \   00000008   0xB09D             SUB      SP,SP,#+116
   \   0000000A   0x4605             MOV      R5,R0
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x7066             STRB     R6,[R4, #+1]
   3772              memset(&params, 0, sizeof(params));
   \   00000010   0x2230             MOVS     R2,#+48
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA810             ADD      R0,SP,#+64
   \   00000016   0x.... 0x....      BL       memset
   \   0000001A   0x4601             MOV      R1,R0
   3773          
   3774          
   3775              if (*ptr == '=')
   \   0000001C   0x7828             LDRB     R0,[R5, #+0]
   \   0000001E   0x283D             CMP      R0,#+61
   \   00000020   0xD13F             BNE.N    ??AppS2wCmd_Wscan_0
   3776              {
   3777                  /* check the parameter passed is valid
   3778                   */
   3779                  status = AppS2wParse_Wcmd(ptr + 1, &params, pwc_scan);
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x1C68             ADDS     R0,R5,#+1
   \   00000026   0x.... 0x....      BL       AppS2wParse_Wcmd
   3780              }
   3781              else if (*ptr)
   3782              {
   3783                  status = S2W_FAILURE;
   3784              }
   3785          
   3786              if (status != S2W_SUCCESS)
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD13C             BNE.N    ??AppS2wCmd_Wscan_1
   3787              {
   3788                  return status;
   3789              }
   3790          
   3791              params.mode = s2wCurrent.mode;
   \                     ??AppS2wCmd_Wscan_2:
   \   0000002E   0x.... 0x....      LDR.W    R5,??DataTable393
   \   00000032   0x7928             LDRB     R0,[R5, #+4]
   \   00000034   0xF88D 0x0040      STRB     R0,[SP, #+64]
   3792          
   3793              /* start the scan
   3794               */
   3795              if(!params.channel)  //scan all the channels
   \   00000038   0xF89D 0x0041      LDRB     R0,[SP, #+65]
   \   0000003C   0xB900             CBNZ.N   R0,??AppS2wCmd_Wscan_3
   3796              {
   3797          		allChScan=1;
   \   0000003E   0x2601             MOVS     R6,#+1
   3798              }
   3799              memset(&scanParams,0,sizeof(GSN_WDD_SCAN_PARAMS_T));
   \                     ??AppS2wCmd_Wscan_3:
   \   00000040   0x2238             MOVS     R2,#+56
   \   00000042   0x.... 0x....      BL       ?Subroutine16
   3800              scanParams.scanType = GSN_MAC_SCAN_TYPE_ACTIVE;
   \                     ??CrossCallReturnLabel_32:
   \   00000046   0x2001             MOVS     R0,#+1
   \   00000048   0xF88D 0x0009      STRB     R0,[SP, #+9]
   3801              scanParams.ssid.length = params.ssidLen;
   \   0000004C   0xF10D 0x0009      ADD      R0,SP,#+9
   \   00000050   0xF89D 0x1042      LDRB     R1,[SP, #+66]
   \   00000054   0x7041             STRB     R1,[R0, #+1]
   3802              scanParams.channel[1] = 0;
   \   00000056   0x2100             MOVS     R1,#+0
   3803              if(scanParams.ssid.length)
   \   00000058   0x7842             LDRB     R2,[R0, #+1]
   \   0000005A   0xF88D 0x1032      STRB     R1,[SP, #+50]
   \   0000005E   0xB12A             CBZ.N    R2,??AppS2wCmd_Wscan_4
   3804              {
   3805                  memcpy(scanParams.ssid.array, params.ssid, scanParams.ssid.length);
   \   00000060   0xF10D 0x014A      ADD      R1,SP,#+74
   \   00000064   0xF10D 0x000B      ADD      R0,SP,#+11
   \   00000068   0x.... 0x....      BL       memcpy
   3806              }
   3807          	
   3808              if(params.validBssid)
   \                     ??AppS2wCmd_Wscan_4:
   \   0000006C   0xF89D 0x0043      LDRB     R0,[SP, #+67]
   \   00000070   0xB128             CBZ.N    R0,??AppS2wCmd_Wscan_5
   3809              {
   3810                  memcpy(scanParams.bssid.array, params.bssid,S2W_MAC_ADDR_SIZE);
   \   00000072   0x2206             MOVS     R2,#+6
   \   00000074   0xA911             ADD      R1,SP,#+68
   \   00000076   0xF10D 0x002B      ADD      R0,SP,#+43
   \   0000007A   0x.... 0x....      BL       memcpy
   3811              }    
   3812              
   3813               S2w_Printf("\r\n       BSSID              SSID                     Channel  Type  RSSI Security");
   \                     ??AppS2wCmd_Wscan_5:
   \   0000007E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n       BSSID       ...">`
   \   00000082   0x.... 0x....      BL       S2w_Printf
   3814              for(i=1;i<15;i++)
   \   00000086   0x2701             MOVS     R7,#+1
   \   00000088   0x.... 0x....      LDR.W    R8,??DataTable400_2
   \   0000008C   0x.... 0x....      LDR.W    R9,??DataTable403
   3815              {
   3816                  if(!params.channel)  //scan all the channels
   \                     ??AppS2wCmd_Wscan_6:
   \   00000090   0xF89D 0x0041      LDRB     R0,[SP, #+65]
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xBF0C             ITE      EQ 
   \   00000098   0xF88D 0x7031      STRBEQ   R7,[SP, #+49]
   \   0000009C   0xF88D 0x0031      STRBNE   R0,[SP, #+49]
   3817                  {
   3818                      /* fill the channels in the scanParams structure
   3819                       */
   3820                      scanParams.channel[0] = i;
   \   000000A0   0xE003             B.N      ??AppS2wCmd_Wscan_7
   3821          		}
   \                     ??AppS2wCmd_Wscan_0:
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD0C3             BEQ.N    ??AppS2wCmd_Wscan_2
   \   000000A6   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_Wscan_1:
   \   000000A8   0xE062             B.N      ??AppS2wCmd_Wscan_8
   3822                  else
   3823                  {
   3824                      scanParams.channel[0] = params.channel;
   3825          
   3826                  }
   3827                 
   3828                  scanDisplayInfoCount = 0;
   \                     ??AppS2wCmd_Wscan_7:
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x7020             STRB     R0,[R4, #+0]
   3829          
   3830                  status = GsnWdd_Scan(&s2wappMainTaskCtxt->if0.wddCtx,&scanParams,(INT8 *)s2wScanUserEntryBuff,
   3831          		                 (2 * sizeof(GSN_WDD_SCAN_ENTRY_T)),(GSN_WDD_SCAN_NOTIF_CB_T)AppS2wScan_Notification,s2wappMainTaskCtxt);
   3832          		if(status == GSN_OPERATION_IN_PROGRESS)
   \   000000AE   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   000000B2   0xF240 0x435C      MOVW     R3,#+1116
   \   000000B6   0x.... 0x....      LDR.W    R0,??DataTable395_1
   \   000000BA   0x.... 0x....      LDR.W    R2,??DataTable403_1
   \   000000BE   0x6800             LDR      R0,[R0, #+0]
   \   000000C0   0x9001             STR      R0,[SP, #+4]
   \   000000C2   0xA902             ADD      R1,SP,#+8
   \   000000C4   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000000C8   0x.... 0x....      BL       GsnWdd_Scan
   \   000000CC   0x.... 0x....      LDR.W    R1,??DataTable403_2  ;; 0x80000001
   \   000000D0   0x4288             CMP      R0,R1
   \   000000D2   0xD105             BNE.N    ??AppS2wCmd_Wscan_9
   3833          		{
   3834          			// wait on a semaphore to finish the scan
   3835          			GsnOsal_SemAcquire ( &stScanSemaphore, GSN_OSAL_WAIT_FOREVER );
   \   000000D4   0xF04F 0x31FF      MOV      R1,#-1
   \   000000D8   0x.... 0x....      LDR.W    R0,??DataTable401_1
   \   000000DC   0x.... 0x....      BL       GsnOsal_SemAcquire
   3836          		}
   3837          			if(params.ssid[0])
   \                     ??AppS2wCmd_Wscan_9:
   \   000000E0   0xF89D 0x004A      LDRB     R0,[SP, #+74]
   \   000000E4   0xB1E0             CBZ.N    R0,??AppS2wCmd_Wscan_10
   3838                                  {
   3839                                    for(UINT index=0;index<scanDisplayInfoCount;index++)
   \   000000E6   0xF04F 0x0A00      MOV      R10,#+0
   \                     ??AppS2wCmd_Wscan_11:
   \   000000EA   0x7820             LDRB     R0,[R4, #+0]
   \   000000EC   0x4582             CMP      R10,R0
   \   000000EE   0xD21F             BCS.N    ??AppS2wCmd_Wscan_12
   3840                                    {
   3841                                      if(!memcmp(&scanDisplayInfo[index].ssid.array,&params.ssid,scanDisplayInfo[index].ssid.length))
   \   000000F0   0x202E             MOVS     R0,#+46
   \   000000F2   0xFB00 0xF00A      MUL      R0,R0,R10
   \   000000F6   0xEB00 0x0B08      ADD      R11,R0,R8
   \   000000FA   0xF810 0x2008      LDRB     R2,[R0, R8]
   \   000000FE   0xF10D 0x014A      ADD      R1,SP,#+74
   \   00000102   0xF10B 0x0001      ADD      R0,R11,#+1
   \   00000106   0x.... 0x....      BL       memcmp
   \   0000010A   0xB930             CBNZ.N   R0,??AppS2wCmd_Wscan_13
   3842                            {
   3843                                        s2wScanResult_Print(&scanDisplayInfo[index],1); 
   \   0000010C   0x2101             MOVS     R1,#+1
   \   0000010E   0x4658             MOV      R0,R11
   \   00000110   0x.... 0x....      BL       s2wScanResult_Print
   3844                                 scanDisplayAllCount++;
   \   00000114   0x7860             LDRB     R0,[R4, #+1]
   \   00000116   0x1C40             ADDS     R0,R0,#+1
   \   00000118   0x7060             STRB     R0,[R4, #+1]
   3845                            }
   3846                                    }  
   \                     ??AppS2wCmd_Wscan_13:
   \   0000011A   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   0000011E   0xE7E4             B.N      ??AppS2wCmd_Wscan_11
   3847                                    
   3848                                  }
   3849                                    
   3850                                   else
   3851          		{
   3852                                  /* get the scanned info which is stored in the buffer and print it on serial
   3853          			   then contimue.
   3854          			 */
   3855          			s2wScanResult_Print(scanDisplayInfo,scanDisplayInfoCount);
   \                     ??AppS2wCmd_Wscan_10:
   \   00000120   0x7821             LDRB     R1,[R4, #+0]
   \   00000122   0x4640             MOV      R0,R8
   \   00000124   0x.... 0x....      BL       s2wScanResult_Print
   3856          			scanDisplayAllCount +=scanDisplayInfoCount;
   \   00000128   0x7860             LDRB     R0,[R4, #+1]
   \   0000012A   0x7821             LDRB     R1,[R4, #+0]
   \   0000012C   0x1808             ADDS     R0,R1,R0
   \   0000012E   0x7060             STRB     R0,[R4, #+1]
   3857          		}
   3858          			// break the loop if scan for only one channel or finished
   3859          		if((allChScan !=1) || ((scanParams.channel[0] == S2W_MAX_CH) && (s2wCurrent.regDomain == S2W_DOMAIN_FCC))
   3860          		   ||((scanParams.channel[0] == (S2W_MAX_CH+2)) && (s2wCurrent.regDomain == S2W_DOMAIN_ETSI)) ||
   3861          		     ((scanParams.channel[0] == (S2W_MAX_CH+3)) && (s2wCurrent.regDomain == S2W_DOMAIN_TELEC)))
   \                     ??AppS2wCmd_Wscan_12:
   \   00000130   0xB1C6             CBZ.N    R6,??AppS2wCmd_Wscan_14
   \   00000132   0xF89D 0x0031      LDRB     R0,[SP, #+49]
   \   00000136   0x280B             CMP      R0,#+11
   \   00000138   0xD103             BNE.N    ??AppS2wCmd_Wscan_15
   \   0000013A   0xF895 0x0395      LDRB     R0,[R5, #+917]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xE004             B.N      ??AppS2wCmd_Wscan_16
   \                     ??AppS2wCmd_Wscan_15:
   \   00000142   0x280D             CMP      R0,#+13
   \   00000144   0xD104             BNE.N    ??AppS2wCmd_Wscan_17
   \   00000146   0xF895 0x0395      LDRB     R0,[R5, #+917]
   \   0000014A   0x2801             CMP      R0,#+1
   \                     ??AppS2wCmd_Wscan_16:
   \   0000014C   0xD106             BNE.N    ??AppS2wCmd_Wscan_18
   \   0000014E   0xE009             B.N      ??AppS2wCmd_Wscan_14
   \                     ??AppS2wCmd_Wscan_17:
   \   00000150   0x280E             CMP      R0,#+14
   \   00000152   0xBF04             ITT      EQ 
   \   00000154   0xF895 0x0395      LDRBEQ   R0,[R5, #+917]
   \   00000158   0x2802             CMPEQ    R0,#+2
   \   0000015A   0xD003             BEQ.N    ??AppS2wCmd_Wscan_14
   3862          			{
   3863          				break;
   3864          		}
   3865          
   3866          	}
   \                     ??AppS2wCmd_Wscan_18:
   \   0000015C   0x1C7F             ADDS     R7,R7,#+1
   \   0000015E   0xB2FF             UXTB     R7,R7
   \   00000160   0x2F0F             CMP      R7,#+15
   \   00000162   0xDB95             BLT.N    ??AppS2wCmd_Wscan_6
   3867          	    S2w_Printf("\r\nNo.Of AP Found:%d\r\n",scanDisplayAllCount);
   \                     ??AppS2wCmd_Wscan_14:
   \   00000164   0x7861             LDRB     R1,[R4, #+1]
   \   00000166   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNo.Of AP Found:%d\\r\\n">`
   \   0000016A   0x.... 0x....      BL       S2w_Printf
   3868          
   3869              status = S2W_SUCCESS;
   3870              return status;
   \   0000016E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wscan_8:
   \   00000170   0xB01D             ADD      SP,SP,#+116
   \   00000172   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   3871          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xA802             ADD      R0,SP,#+8
   \   00000004   0x.... 0x....      B.W      memset
   3872          

   \                                 In section .text, align 2, keep-with-next
   3873          VOID
   3874          S2w_getApSecurityConfig(GSN_WDD_WLAN_CFG_T *pWlanConfig, UINT8 securityType)
   3875          {
   \                     S2w_getApSecurityConfig:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4680             MOV      R8,R0
   \   00000006   0x460D             MOV      R5,R1
   3876          	switch(securityType)
   \   00000008   0x....             LDR.N    R6,??DataTable393
   \   0000000A   0xF206 0x2755      ADDW     R7,R6,#+597
   \   0000000E   0xF108 0x0440      ADD      R4,R8,#+64
   \   00000012   0x0028             MOVS     R0,R5
   \   00000014   0xD00A             BEQ.N    ??S2w_getApSecurityConfig_0
   \   00000016   0x2D01             CMP      R5,#+1
   \   00000018   0xD037             BEQ.N    ??S2w_getApSecurityConfig_1
   \   0000001A   0x2D02             CMP      R5,#+2
   \   0000001C   0xD00A             BEQ.N    ??S2w_getApSecurityConfig_2
   \   0000001E   0x2D04             CMP      R5,#+4
   \   00000020   0xD036             BEQ.N    ??S2w_getApSecurityConfig_3
   \   00000022   0x2D08             CMP      R5,#+8
   \   00000024   0xD039             BEQ.N    ??S2w_getApSecurityConfig_4
   \   00000026   0x2D40             CMP      R5,#+64
   \   00000028   0xD03C             BEQ.N    ??S2w_getApSecurityConfig_5
   \   0000002A   0xE040             B.N      ??S2w_getApSecurityConfig_6
   3877              {
   3878              	case SECTYPE_AUTO:
   3879                	{
   3880                		pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
   \                     ??S2w_getApSecurityConfig_0:
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xF888 0x0040      STRB     R0,[R8, #+64]
   3881                  	pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   \   00000032   0xE03B             B.N      ??S2w_getApSecurityConfig_7
   3882              	}
   3883              	break;
   3884              	case SECTYPE_WEP:
   3885              	{
   3886          			pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WEP;
   \                     ??S2w_getApSecurityConfig_2:
   \   00000034   0x2004             MOVS     R0,#+4
   \   00000036   0xF888 0x0040      STRB     R0,[R8, #+64]
   3887                      if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
   \   0000003A   0x7930             LDRB     R0,[R6, #+4]
   \   0000003C   0x2806             CMP      R0,#+6
   \   0000003E   0xD10B             BNE.N    ??S2w_getApSecurityConfig_8
   3888                      {
   3889                          pWlanConfig->securityCfg.wepConfig.KeyId = S2W_DEFAULT_GRP_PROV_WEP_KEY_ID -1  ;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x70E0             STRB     R0,[R4, #+3]
   3890                          pWlanConfig->securityCfg.wepConfig.KeyLen = (GSN_WDD_WEP_KEY_LEN_T)S2W_DEFAULT_GRP_PROV_WEP_KEY_LEN ; /**< Key len, 5 or 13 */
   3891                          memcpy(&pWlanConfig->securityCfg.wepConfig.Key,S2W_DEFAULT_GRP_PROV_WEP_KEY,
   3892                                  S2W_DEFAULT_GRP_PROV_WEP_KEY_LEN);
   \   00000044   0x2205             MOVS     R2,#+5
   \   00000046   0x2005             MOVS     R0,#+5
   \   00000048   0x70A0             STRB     R0,[R4, #+2]
   \   0000004A   0xF108 0x0044      ADD      R0,R8,#+68
   \   0000004E   0x.... 0x....      ADR.W    R1,S2W_DEFAULT_GRP_PROV_WEP_KEY
   \   00000052   0x.... 0x....      BL       memcpy
   3893                          if(S2W_DEFAULT_GRP_PROV_WEP_AUTH == GSN_MAC_AUTH_SHARED)
   3894                          {
   3895                              pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
   3896                          }
   3897                          else // open
   3898                          {
   3899                              pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
   \   00000056   0xE015             B.N      ??S2w_getApSecurityConfig_9
   3900                          }
   3901                      }
   3902                      else
   3903                      {
   3904          			pWlanConfig->securityCfg.wepConfig.KeyId = s2wCurrent.lmtdApConf.wepKeyConfig.KeyId -1  ;
   \                     ??S2w_getApSecurityConfig_8:
   \   00000058   0x78B8             LDRB     R0,[R7, #+2]
   \   0000005A   0x1E40             SUBS     R0,R0,#+1
   \   0000005C   0x70E0             STRB     R0,[R4, #+3]
   3905          			pWlanConfig->securityCfg.wepConfig.KeyLen = s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen ; /**< Key len, 5 or 13 */
   3906          			memcpy(&pWlanConfig->securityCfg.wepConfig.Key,&s2wCurrent.lmtdApConf.wepKeyConfig.Key,
   3907          					s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen); 
   \   0000005E   0xF506 0x7116      ADD      R1,R6,#+600
   \   00000062   0x7878             LDRB     R0,[R7, #+1]
   \   00000064   0x70A0             STRB     R0,[R4, #+2]
   \   00000066   0xF108 0x0044      ADD      R0,R8,#+68
   \   0000006A   0x787A             LDRB     R2,[R7, #+1]
   \   0000006C   0x.... 0x....      BL       memcpy
   3908          			if(s2wCurrent.lmtdApConf.wepKeyConfig.authType== GSN_MAC_AUTH_SHARED)
   \   00000070   0xF896 0x0255      LDRB     R0,[R6, #+597]
   \   00000074   0x2802             CMP      R0,#+2
   \   00000076   0xBF04             ITT      EQ 
   \   00000078   0x2001             MOVEQ    R0,#+1
   \   0000007A   0x7060             STRBEQ   R0,[R4, #+1]
   3909          			{
   3910          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
   3911          			}
   3912          			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
   \   0000007C   0xF896 0x0078      LDRB     R0,[R6, #+120]
   \   00000080   0x2801             CMP      R0,#+1
   \   00000082   0xD114             BNE.N    ??S2w_getApSecurityConfig_6
   3913          			{
   3914          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
   \                     ??S2w_getApSecurityConfig_9:
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x7060             STRB     R0,[R4, #+1]
   \   00000088   0xE011             B.N      ??S2w_getApSecurityConfig_6
   3915          			}
   3916              	}
   3917              	}
   3918              	break;
   3919              	case SECTYPE_NONE:
   3920              	{
   3921                  	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_DISABLE;
   \                     ??S2w_getApSecurityConfig_1:
   \   0000008A   0xF888 0x5040      STRB     R5,[R8, #+64]
   3922              	}
   3923             		break;
   \   0000008E   0xE00E             B.N      ??S2w_getApSecurityConfig_6
   3924          
   3925          		case SECTYPE_WPAPSK:
   3926              	{
   3927                  	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_PERSONAL;
   \                     ??S2w_getApSecurityConfig_3:
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0xF888 0x0040      STRB     R0,[R8, #+64]
   3928                  	pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_TKIP;
   \   00000096   0x2001             MOVS     R0,#+1
   \   00000098   0xE008             B.N      ??S2w_getApSecurityConfig_7
   3929              	}
   3930              	break;
   3931             		case SECTYPE_WPA2PSK:
   3932             		{
   3933                 		pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
   \                     ??S2w_getApSecurityConfig_4:
   \   0000009A   0x2020             MOVS     R0,#+32
   \   0000009C   0xF888 0x0040      STRB     R0,[R8, #+64]
   3934                 		pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_AES;
   \   000000A0   0x2000             MOVS     R0,#+0
   \   000000A2   0xE003             B.N      ??S2w_getApSecurityConfig_7
   3935             		}
   3936          	    break;
   3937                  case SECTYPE_WPA2PSK_TKIP:
   3938          	    {
   3939              	   	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
   \                     ??S2w_getApSecurityConfig_5:
   \   000000A4   0x2020             MOVS     R0,#+32
   \   000000A6   0xF888 0x0040      STRB     R0,[R8, #+64]
   3940                 		pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   \   000000AA   0x2002             MOVS     R0,#+2
   \                     ??S2w_getApSecurityConfig_7:
   \   000000AC   0x74A0             STRB     R0,[R4, #+18]
   3941             		}
   3942             		break;
   3943          	}
   3944              if((securityType == SECTYPE_WPAPSK) || \
   3945                 (securityType == SECTYPE_WPA2PSK) || \
   3946                 (securityType == SECTYPE_WPA2PSK_TKIP))
   \                     ??S2w_getApSecurityConfig_6:
   \   000000AE   0x2D04             CMP      R5,#+4
   \   000000B0   0xBF1C             ITT      NE 
   \   000000B2   0x2D08             CMPNE    R5,#+8
   \   000000B4   0x2D40             CMPNE    R5,#+64
   \   000000B6   0xD127             BNE.N    ??S2w_getApSecurityConfig_10
   3947              {
   3948                 if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
   \   000000B8   0x7930             LDRB     R0,[R6, #+4]
   \   000000BA   0x2806             CMP      R0,#+6
   \   000000BC   0xD10B             BNE.N    ??S2w_getApSecurityConfig_11
   3949                 {
   3950                     pWlanConfig->securityCfg.pskConfig.passPhrase.Len = sizeof (S2W_DEFAULT_GRP_PROV_WPA_PASSPHRASE)- 1 ;
   \   000000BE   0x200B             MOVS     R0,#+11
   \   000000C0   0x74E0             STRB     R0,[R4, #+19]
   3951                     memcpy( pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase, S2W_DEFAULT_GRP_PROV_WPA_PASSPHRASE,
   3952                             pWlanConfig->securityCfg.pskConfig.passPhrase.Len);
   \   000000C2   0x220B             MOVS     R2,#+11
   \   000000C4   0x.... 0x....      ADR.W    R1,`?<Constant "Serial2Wifi">`
   \   000000C8   0xF108 0x0054      ADD      R0,R8,#+84
   \   000000CC   0x.... 0x....      BL       memcpy
   3953                     pWlanConfig->securityCfg.pskConfig.pskValid = 0;
   \   000000D0   0x2000             MOVS     R0,#+0
   \   000000D2   0x7460             STRB     R0,[R4, #+17]
   \   000000D4   0xE018             B.N      ??S2w_getApSecurityConfig_10
   3954          
   3955                 }
   3956                 else
   3957          	{
   3958          		pWlanConfig->securityCfg.pskConfig.passPhrase.Len = s2wCurrent.lmtdApConf.passphrase.Len ;
   3959          		memcpy( pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase, s2wCurrent.lmtdApConf.passphrase.Passphrase,
   3960          				 s2wCurrent.lmtdApConf.passphrase.Len);
   \                     ??S2w_getApSecurityConfig_11:
   \   000000D6   0xF506 0x7105      ADD      R1,R6,#+532
   \   000000DA   0xF896 0x0213      LDRB     R0,[R6, #+531]
   \   000000DE   0x74E0             STRB     R0,[R4, #+19]
   \   000000E0   0xF108 0x0054      ADD      R0,R8,#+84
   \   000000E4   0xF896 0x2213      LDRB     R2,[R6, #+531]
   \   000000E8   0x.... 0x....      BL       memcpy
   3961          		pWlanConfig->securityCfg.pskConfig.pskValid = s2wCurrent.lmtdApConf.lmtdApPskValid;
   \   000000EC   0x7C38             LDRB     R0,[R7, #+16]
   \   000000EE   0x7460             STRB     R0,[R4, #+17]
   3962          		if(s2wCurrent.lmtdApConf.lmtdApPskValid == 1)
   \   000000F0   0x7C38             LDRB     R0,[R7, #+16]
   \   000000F2   0x2801             CMP      R0,#+1
   \   000000F4   0xD108             BNE.N    ??S2w_getApSecurityConfig_10
   3963          		{
   3964          			memcpy( pWlanConfig->securityCfg.pskConfig.psk, s2wCurrent.lmtdApConf.lmtdApPsk,
   3965          				 S2W_PSK_LEN);
   \   000000F6   0xF206 0x2166      ADDW     R1,R6,#+614
   \   000000FA   0xF108 0x0094      ADD      R0,R8,#+148
   \   000000FE   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000102   0x2220             MOVS     R2,#+32
   \   00000104   0x.... 0x....      B.W      memcpy
   3966          		 }
   3967          	}
   3968          }
   3969          }
   \                     ??S2w_getApSecurityConfig_10:
   \   00000108   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   3970          VOID
   3971          S2w_getSecurityConfig(GSN_WDD_WLAN_CFG_T *pWlanConfig)
   3972          {
   \                     S2w_getSecurityConfig:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   3973              /* copy the security parameter passed
   3974               */
   3975              pWlanConfig->securityCfg.wepConfig.KeyId =
   3976                                                      s2wCurrent.security.wep.keyIdx-1;
   \   00000004   0x....             LDR.N    R5,??DataTable393
   \   00000006   0xF105 0x0078      ADD      R0,R5,#+120
   \   0000000A   0x7881             LDRB     R1,[R0, #+2]
   \   0000000C   0x1E49             SUBS     R1,R1,#+1
   \   0000000E   0xF884 0x1043      STRB     R1,[R4, #+67]
   3977              pWlanConfig->securityCfg.wepConfig.KeyLen =
   3978                      (GSN_WDD_WEP_KEY_LEN_T)s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx-1];
   \   00000012   0x7881             LDRB     R1,[R0, #+2]
   \   00000014   0x1949             ADDS     R1,R1,R5
   \   00000016   0xF891 0x107A      LDRB     R1,[R1, #+122]
   \   0000001A   0xF884 0x1042      STRB     R1,[R4, #+66]
   \   0000001E   0x7880             LDRB     R0,[R0, #+2]
   \   00000020   0x1941             ADDS     R1,R0,R5
   \   00000022   0xF891 0x207A      LDRB     R2,[R1, #+122]
   \   00000026   0x210D             MOVS     R1,#+13
   \   00000028   0xFB01 0x5000      MLA      R0,R1,R0,R5
   \   0000002C   0xF100 0x0172      ADD      R1,R0,#+114
   \   00000030   0xF104 0x0044      ADD      R0,R4,#+68
   3979              memcpy(pWlanConfig->securityCfg.wepConfig.Key,
   3980                      s2wCurrent.security.wep.key[s2wCurrent.security.wep.keyIdx-1],
   3981                      s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx-1]);
   \   00000034   0x.... 0x....      BL       memcpy
   3982          
   3983              pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0xF884 0x0040      STRB     R0,[R4, #+64]
   3984              pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   \   0000003E   0xF884 0x0052      STRB     R0,[R4, #+82]
   3985          
   3986              switch(s2wCurrent.securityType)
   \   00000042   0xF895 0x01D5      LDRB     R0,[R5, #+469]
   \   00000046   0xB188             CBZ.N    R0,??S2w_getSecurityConfig_0
   \   00000048   0x2801             CMP      R0,#+1
   \   0000004A   0xD02D             BEQ.N    ??S2w_getSecurityConfig_1
   \   0000004C   0x2802             CMP      R0,#+2
   \   0000004E   0xD00A             BEQ.N    ??S2w_getSecurityConfig_2
   \   00000050   0x2804             CMP      R0,#+4
   \   00000052   0xD01A             BEQ.N    ??S2w_getSecurityConfig_3
   \   00000054   0x2808             CMP      R0,#+8
   \   00000056   0xD01D             BEQ.N    ??S2w_getSecurityConfig_4
   \   00000058   0x2810             CMP      R0,#+16
   \   0000005A   0xD017             BEQ.N    ??S2w_getSecurityConfig_5
   \   0000005C   0x2820             CMP      R0,#+32
   \   0000005E   0xD020             BEQ.N    ??S2w_getSecurityConfig_6
   \   00000060   0x2840             CMP      R0,#+64
   \   00000062   0xD020             BEQ.N    ??S2w_getSecurityConfig_7
   \   00000064   0xE022             B.N      ??S2w_getSecurityConfig_8
   3987              {
   3988                  case SECTYPE_AUTO:
   3989                  {
   3990                      pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
   3991                      pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   3992          			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_SHARED)
   3993          			{
   3994          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
   3995          			}
   3996          			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
   3997          			{
   3998          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
   3999          			}
   4000                  }
   4001                  break;
   4002                  case SECTYPE_WEP:
   4003                  {
   4004          			pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WEP;
   \                     ??S2w_getSecurityConfig_2:
   \   00000066   0x2004             MOVS     R0,#+4
   \   00000068   0xF884 0x0040      STRB     R0,[R4, #+64]
   4005          			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_SHARED)
   \                     ??S2w_getSecurityConfig_0:
   \   0000006C   0xF895 0x0078      LDRB     R0,[R5, #+120]
   \   00000070   0x2802             CMP      R0,#+2
   \   00000072   0xBF04             ITT      EQ 
   \   00000074   0x2001             MOVEQ    R0,#+1
   \   00000076   0xF884 0x0041      STRBEQ   R0,[R4, #+65]
   4006          			{
   4007          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
   4008          			}
   4009          			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
   \   0000007A   0xF895 0x0078      LDRB     R0,[R5, #+120]
   \   0000007E   0x2801             CMP      R0,#+1
   \   00000080   0xD114             BNE.N    ??S2w_getSecurityConfig_8
   4010          			{
   4011          				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF884 0x0041      STRB     R0,[R4, #+65]
   \   00000088   0xE010             B.N      ??S2w_getSecurityConfig_8
   4012          			}
   4013                  }
   4014                  break;
   4015                  case SECTYPE_NONE:
   4016                  {
   4017                      pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_DISABLE;
   4018                  }
   4019                  break;
   4020                  case SECTYPE_WPAPSK:
   4021                  {
   4022                      pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_PERSONAL;
   \                     ??S2w_getSecurityConfig_3:
   \   0000008A   0x2008             MOVS     R0,#+8
   4023                      pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_TKIP;
   4024                  }
   4025                  break;
   4026                  case SECTYPE_WPA:
   4027                  {
   4028                      pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_ENTERPRISE;
   \                     ??S2w_getSecurityConfig_5:
   \   0000008C   0xF884 0x0040      STRB     R0,[R4, #+64]
   4029          			pWlanConfig->securityCfg.pskConfig.wpaAlgo =GSN_WDD_WPA_ALGO_TKIP	;
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0xE003             B.N      ??S2w_getSecurityConfig_9
   4030                      break;
   4031                  }
   4032                 case SECTYPE_WPA2PSK:
   4033                 {
   4034                     pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
   \                     ??S2w_getSecurityConfig_4:
   \   00000094   0x2020             MOVS     R0,#+32
   \   00000096   0xF884 0x0040      STRB     R0,[R4, #+64]
   4035                     pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_AES;
   \   0000009A   0x2000             MOVS     R0,#+0
   \                     ??S2w_getSecurityConfig_9:
   \   0000009C   0xF884 0x0052      STRB     R0,[R4, #+82]
   4036                 }
   4037                 break;
   \   000000A0   0xE004             B.N      ??S2w_getSecurityConfig_8
   4038          	   case SECTYPE_WPA2:
   4039          	   {
   4040          		   pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_ENTERPRISE;
   \                     ??S2w_getSecurityConfig_6:
   \   000000A2   0x2040             MOVS     R0,#+64
   \   000000A4   0xE000             B.N      ??S2w_getSecurityConfig_1
   4041          		   pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   4042          		   break;
   4043          	   }
   4044                 case SECTYPE_WPA2PSK_TKIP:
   4045                 {
   4046                     pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
   \                     ??S2w_getSecurityConfig_7:
   \   000000A6   0x2020             MOVS     R0,#+32
   \                     ??S2w_getSecurityConfig_1:
   \   000000A8   0xF884 0x0040      STRB     R0,[R4, #+64]
   4047                     pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
   4048                 }
   4049                 break;
   4050              }
   4051          
   4052          
   4053              /* if psk key is valid copy that to wlan structure
   4054               */
   4055              if(s2wCurrent.security.wpa.pskValid) // copy the psk
   \                     ??S2w_getSecurityConfig_8:
   \   000000AC   0xF205 0x06F3      ADDW     R6,R5,#+243
   \   000000B0   0x7870             LDRB     R0,[R6, #+1]
   \   000000B2   0xB338             CBZ.N    R0,??CrossCallReturnLabel_406
   4056              {
   4057                  memcpy(&pWlanConfig->securityCfg.pskConfig.psk,
   4058                                s2wCurrent.security.wpa.psk, 32);
   \   000000B4   0x2220             MOVS     R2,#+32
   \   000000B6   0xF105 0x01F5      ADD      R1,R5,#+245
   \   000000BA   0xF104 0x0094      ADD      R0,R4,#+148
   \   000000BE   0x.... 0x....      BL       memcpy
   4059                  /* if psk is valid check the profile ssid matches with ssid passed else make it false
   4060                   */
   4061                  if((memcmp(s2wCurrent.security.wpa.ssid, pWlanConfig->ssid.array,pWlanConfig->ssid.length) != 0) &&
   4062                      (s2wCurrent.security.wpa.ssidLen > 0))
   \   000000C2   0xF205 0x1715      ADDW     R7,R5,#+277
   \   000000C6   0x7822             LDRB     R2,[R4, #+0]
   \   000000C8   0x1C61             ADDS     R1,R4,#+1
   \   000000CA   0x4638             MOV      R0,R7
   \   000000CC   0x.... 0x....      BL       memcmp
   \   000000D0   0x2800             CMP      R0,#+0
   \   000000D2   0xBF1C             ITT      NE 
   \   000000D4   0xF895 0x0135      LDRBNE   R0,[R5, #+309]
   \   000000D8   0x2800             CMPNE    R0,#+0
   \   000000DA   0xD002             BEQ.N    ??S2w_getSecurityConfig_10
   4063                  {
   4064                      s2wCurrent.security.wpa.pskValid = 0;
   \   000000DC   0x2000             MOVS     R0,#+0
   \   000000DE   0x7070             STRB     R0,[R6, #+1]
   \   000000E0   0xE010             B.N      ??CrossCallReturnLabel_406
   4065                  }
   4066                  else if((memcmp(s2wCurrent.security.wpa.ssid,pWlanConfig->ssid.array,pWlanConfig->ssid.length) == 0) &&
   4067                         (pWlanConfig->ssid.length != s2wCurrent.security.wpa.ssidLen) &&
   4068                         (s2wCurrent.security.wpa.ssidLen > 0))
   \                     ??S2w_getSecurityConfig_10:
   \   000000E2   0x1C61             ADDS     R1,R4,#+1
   \   000000E4   0x7822             LDRB     R2,[R4, #+0]
   \   000000E6   0x4638             MOV      R0,R7
   \   000000E8   0x.... 0x....      BL       memcmp
   \   000000EC   0xB950             CBNZ.N   R0,??CrossCallReturnLabel_406
   \   000000EE   0xF895 0x0135      LDRB     R0,[R5, #+309]
   \   000000F2   0x7821             LDRB     R1,[R4, #+0]
   \   000000F4   0x4281             CMP      R1,R0
   \   000000F6   0xBF18             IT       NE 
   \   000000F8   0x2800             CMPNE    R0,#+0
   \   000000FA   0xD003             BEQ.N    ??CrossCallReturnLabel_406
   4069                  {
   4070                      s2wCurrent.security.wpa.pskValid = 0;
   \   000000FC   0x2000             MOVS     R0,#+0
   \   000000FE   0x7070             STRB     R0,[R6, #+1]
   4071                      memset(s2wCurrent.security.wpa.ssid,0,sizeof(s2wCurrent.security.wpa.ssid));
   \   00000100   0x.... 0x....      BL       ?Subroutine67
   4072                  }
   4073              }
   4074              pWlanConfig->securityCfg.pskConfig.pskValid =
   4075                                                         s2wCurrent.security.wpa.pskValid;
   \                     ??CrossCallReturnLabel_406:
   \   00000104   0x7870             LDRB     R0,[R6, #+1]
   \   00000106   0xF884 0x0051      STRB     R0,[R4, #+81]
   4076          
   4077              memcpy(pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase,
   4078                     s2wCurrent.security.wpa.wpaPassPhrase,
   4079                     s2wCurrent.security.wpa.passPhraseLen);
   \   0000010A   0xF105 0x01B3      ADD      R1,R5,#+179
   \   0000010E   0xF895 0x20F3      LDRB     R2,[R5, #+243]
   \   00000112   0xF104 0x0054      ADD      R0,R4,#+84
   \   00000116   0x.... 0x....      BL       memcpy
   4080              pWlanConfig->securityCfg.pskConfig.passPhrase.Len =
   4081                                                 s2wCurrent.security.wpa.passPhraseLen;
   \   0000011A   0xF895 0x00F3      LDRB     R0,[R5, #+243]
   \   0000011E   0xF884 0x0053      STRB     R0,[R4, #+83]
   4082          
   4083          }
   \   00000122   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine67:
   \   00000000   0x2220             MOVS     R2,#+32
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x4638             MOV      R0,R7
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .data, align 4
   \                     globalUseHRssi:
   \   00000000   0x00               DC8 0
   4084          
   4085          
   4086          
   4087          
   4088          #define APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE  2048
   4089          INT32 L2ConnectStatus = 0;
   4090          UINT8 L3ConnectStatus=0;
   \                     L3ConnectStatus:
   \   00000001   0x00               DC8 0
   4091          UINT8 L3ConnectStatus_v6=0;
   \                     L3ConnectStatus_v6:
   \   00000002   0x00               DC8 0
   \   00000003   0x00               DC8 0
   \                     S2wL3Wait:
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     S2WError_List:
   \   00000008   0x........         DC32 `?<Constant "\\r\\nNO ERROR">`
   \   0000000C   0x........         DC32 `?<Constant "\\r\\nSSID NOT FOUND">`
   \   00000010   0x........         DC32 `?<Constant "\\r\\nWLAN CONNECT ERROR">`
   \   00000014   0x........         DC32 `?<Constant "\\r\\nWPA AUTH FAIL">`
   \                     L2ConnectStatus:
   \   00000018   0x00000000         DC32 0
   4092          UINT8 L3Dhcpv6Status=0;
   4093          INT8 dhcpv6ClientStack[APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE];
   4094          
   4095          /**
   4096           ******************************************************************
   4097           * @ingroup S2w-Application
   4098           * @brief Process the AT+WA Command.
   4099           *   This command check the validity of parameters passed and call the
   4100           *   hal association function.
   4101           * @param ptr pointer to the user input string.
   4102           *
   4103           * @return S2W_SUCCESS - operation successful.
   4104           * @retval S2W_EINVAL  - operation failure-invalid command.
   4105           * @retval S2W_FAILURE - operation failure-scan failed.
   4106           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4107          PRIVATE UINT8
   4108          AppS2wCmd_Wassoc(UINT8 *ptr)
   4109          {
   \                     AppS2wCmd_Wassoc:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0D1             SUB      SP,SP,#+324
   \   00000006   0x.... 0x....      BL       ?Subroutine28
   4110              S2W_WLANDATA_T params;
   4111          #ifndef S2W_IP2WIFI_SUPPORT
   4112              GSN_NWIF_DHCP_PARAMS_T dhcpParams;
   4113              GSN_NWIF_IP_CONFIG_T ipConfig;
   4114          #endif
   4115          #ifdef S2W_IPv6_SUPPORT
   4116              GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
   4117              GSN_NWIF_IPv6_CONFIG_T userIpv6Config;
   4118          
   4119          
   4120          #endif
   4121              INT32  index;
   4122          	UINT8 mac[6],macStr[25];
   4123          
   4124              UINT32 status;
   4125              GSN_WDD_CONNECT_FLAG_T conctflags=GSN_WDD_CONNECT_FLAG_NONE;
   4126              GSN_STATUS retVal = GSN_SUCCESS;
   4127              UINT8 eapFastRetryCnt = 0;
   4128              memset(&params, 0, sizeof(params));
   \                     ??CrossCallReturnLabel_75:
   \   0000000A   0x.... 0x....      BL       ?Subroutine99
   4129              globalUseHRssi = 0;
   4130          	L3ConnectStatus=0;
   4131                  L3ConnectStatus_v6=0;
   4132              /* check the validity of the parameters passed
   4133               */
   4134              status = AppS2wParse_Wcmd(ptr, &params, pwc_assoc);
   4135              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_512:
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xF040 0x8111      BNE.W    ??AppS2wCmd_Wassoc_0
   4136              {
   4137                  return status;
   4138              }
   4139          #ifdef S2W_SECURITY_WPS_ENABLE
   4140              wpsConnDone = FALSE;
   \   00000014   0x.... 0x....      BL       ?Subroutine20
   4141          #endif
   4142              if ((s2wLinkState != S2W_LINK_STATE_DISCONNECTED) || (GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE))
   \                     ??CrossCallReturnLabel_44:
   \   00000018   0xB918             CBNZ.N   R0,??AppS2wCmd_Wassoc_1
   \   0000001A   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_579:
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD107             BNE.N    ??CrossCallReturnLabel_589
   4143              {
   4144                  //S2w_Debug("disconnecting\n\n");
   4145          		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
   4146          						   GSN_SOFT_TMR_ONESHOT,0,
   4147          							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
   4148          						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
   \                     ??AppS2wCmd_Wassoc_1:
   \   00000022   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_5:
   \   00000026   0x.... 0x....      BL       ?Subroutine121
   4149                  retVal = AppS2wHal_Disassociate(0);
   4150          		GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
   \                     ??CrossCallReturnLabel_581:
   \   0000002A   0x.... 0x....      BL       ?Subroutine110
   4151          #ifndef S2W_IP2WIFI_SUPPORT
   4152                  if(retVal != GSN_FAILURE)
   4153                  {
   4154                      GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     ??CrossCallReturnLabel_545:
   \   0000002E   0x.... 0x....      BL       ?Subroutine123
   4155          		}
   4156          #endif
   4157              }
   4158          
   4159              /* Copy the mode.
   4160               */
   4161              params.mode = s2wCurrent.mode;
   \                     ??CrossCallReturnLabel_589:
   \   00000032   0x.... 0x....      BL       ?Subroutine17
   4162              /* execute the wdd part for connection
   4163               */
   4164          
   4165                  GSN_WDD_WLAN_CFG_T *pWlanConfig;
   4166                //  GsnOsal_SemCreate  ( &s2wConnectSemaphore, 0 );
   4167                  pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   4168                  memset(pWlanConfig, 0, sizeof(*pWlanConfig));
   4169                  pWlanConfig->ssid.length = params.ssidLen;
   \                     ??CrossCallReturnLabel_641:
   \   00000036   0x.... 0x....      BL       ?Subroutine112
   4170                  memcpy((INT8 *)pWlanConfig->ssid.array, params.ssid, pWlanConfig->ssid.length);
   4171          		if(params.validBssid)
   \                     ??CrossCallReturnLabel_549:
   \   0000003A   0xF89D 0x0037      LDRB     R0,[SP, #+55]
   \   0000003E   0xB118             CBZ.N    R0,??AppS2wCmd_Wassoc_2
   4172          		{
   4173          			memcpy((INT8 *)pWlanConfig->bssid.array,params.bssid,S2W_MAC_ADDR_SIZE);
   \   00000040   0x.... 0x....      BL       ?Subroutine114
   4174          			conctflags = GSN_WDD_CONNECT_FLAG_USE_BSSID;
   \                     ??CrossCallReturnLabel_554:
   \   00000044   0xF04F 0x0A10      MOV      R10,#+16
   4175          		}
   4176          
   4177                  if(params.channel)
   \                     ??AppS2wCmd_Wassoc_2:
   \   00000048   0xF89D 0x0035      LDRB     R0,[SP, #+53]
   \   0000004C   0xB120             CBZ.N    R0,??AppS2wCmd_Wassoc_3
   4178                  {
   4179                  pWlanConfig->channel[0] = params.channel;
   \   0000004E   0xF888 0x0027      STRB     R0,[R8, #+39]
   4180                  pWlanConfig->channel[1] = 0;
   \   00000052   0xF888 0x9028      STRB     R9,[R8, #+40]
   \   00000056   0xE001             B.N      ??CrossCallReturnLabel_247
   4181          		}
   4182          		else
   4183          		{
   4184          			pWlanConfig->channel[0] = 1;
   \                     ??AppS2wCmd_Wassoc_3:
   \   00000058   0x.... 0x....      BL       ?Subroutine46
   4185                      pWlanConfig->channel[1] = 2;
   4186                      pWlanConfig->channel[2] = 3;
   4187                      pWlanConfig->channel[3] = 4;
   4188                      pWlanConfig->channel[4] = 5;
   4189                      pWlanConfig->channel[5] = 6;
   4190                      pWlanConfig->channel[6] = 7;
   4191                      pWlanConfig->channel[7] = 8;
   4192                      pWlanConfig->channel[8] = 9;
   4193                      pWlanConfig->channel[9] = 10;
   4194                      pWlanConfig->channel[10] = 11;
   4195                      switch(s2wCurrent.regDomain)
   4196                      {
   4197          				case S2W_DOMAIN_FCC:
   4198                      pWlanConfig->channel[11] = 0;
   4199          				break;
   4200          				case S2W_DOMAIN_ETSI:
   4201          				pWlanConfig->channel[11] = 12;
   4202          				pWlanConfig->channel[12] = 13;
   4203          				pWlanConfig->channel[13] = 0;
   4204          				break;
   4205          				case S2W_DOMAIN_TELEC:
   4206          				pWlanConfig->channel[11] = 12;
   4207          				pWlanConfig->channel[12] = 13;
   4208          				pWlanConfig->channel[13] = 14;
   4209          				pWlanConfig->channel[14] = 0;
   4210          				break;
   4211          				default:
   4212          				pWlanConfig->channel[11] = 0;
   4213          				break;
   4214          			}
   4215          		}
   4216                  
   4217                  S2w_getSecurityConfig(pWlanConfig);
   \                     ??CrossCallReturnLabel_247:
   \   0000005C   0x4640             MOV      R0,R8
   \   0000005E   0x.... 0x....      BL       S2w_getSecurityConfig
   4218          		if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_STA)
   \   00000062   0x6830             LDR      R0,[R6, #+0]
   \   00000064   0xF890 0x19CC      LDRB     R1,[R0, #+2508]
   \   00000068   0x2901             CMP      R1,#+1
   \   0000006A   0xBF08             IT       EQ 
   \   0000006C   0xF04A 0x0A07      ORREQ    R10,R10,#0x7
   4219          		{
   4220          			conctflags = (GSN_WDD_CONNECT_FLAG_T) (conctflags | (GSN_WDD_CONNECT_FLAG_SCAN_BEFORE_CONNECT | GSN_WDD_CONNECT_FLAG_ACTIVE_SCAN | GSN_WDD_CONNECT_FLAG_HIGHEST_RSSI_NW));
   \   00000070   0xD008             BEQ.N    ??AppS2wCmd_Wassoc_4
   4221          		}
   4222          		else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
   \   00000072   0x2902             CMP      R1,#+2
   \   00000074   0xD106             BNE.N    ??AppS2wCmd_Wassoc_4
   4223          		{
   4224          			conctflags = GSN_WDD_CONNECT_FLAG_NONE;
   4225          			pWlanConfig->apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
   \   00000076   0x.... 0x....      BL       ?Subroutine124
   4226          			pWlanConfig->apSpecificCfg.hiddenSsid = s2wappMainTaskCtxt->bcastSsid;
   4227          			pWlanConfig->apSpecificCfg.dtimPeriod = s2wappMainTaskCtxt->dtimPeriod;
   4228          			s2wappMainTaskCtxt->if0.wddCtx.wlanConfigExtn.inactivityTimeoutInSec =s2wappMainTaskCtxt->inactivityTimeoutInSec;
   \                     ??CrossCallReturnLabel_590:
   \   0000007A   0xBF12             ITEE     NE 
   \   0000007C   0x2801             CMPNE    R0,#+1
   \   0000007E   0x2004             MOVEQ    R0,#+4
   \   00000080   0xF888 0x0040      STRBEQ   R0,[R8, #+64]
   4229          			if( (GSN_MAC_AUTH_SHARED == s2wCurrent.security.authMode ) ||
   4230          				(GSN_MAC_AUTH_OPEN == s2wCurrent.security.authMode))
   4231          			{
   4232          				pWlanConfig->securityCfg.mode= GSN_WDD_SEC_MODE_WEP;
   4233          			}
   4234                  }
   4235                          
   4236                  /*AppS2wHal_MacAddrSet(s2wCurrent.macAddr);*/
   4237          		L2ConnectStatus = 0;
   \                     ??AppS2wCmd_Wassoc_4:
   \   00000084   0x.... 0x....      BL       ?Subroutine3
   4238          		pWlanConfig->securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
   4239          		pWlanConfig->securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
   4240          		memcpy(pWlanConfig->securityCfg.eapConfig.userName.Name, s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
   4241          		pWlanConfig->securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
   \                     ??CrossCallReturnLabel_1:
   \   00000088   0x.... 0x....      BL       ?Subroutine93
   4242          		memcpy(pWlanConfig->securityCfg.eapConfig.password.Pwd, s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
   4243          		pWlanConfig->securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
   \                     ??CrossCallReturnLabel_496:
   \   0000008C   0x.... 0x....      BL       ?Subroutine58
   4244          
   4245                  if(s2wCurrent.eapCertTimeValidChkDisbl)
   4246                  {
   4247          	        pWlanConfig->securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
   \                     ??CrossCallReturnLabel_364:
   \   00000090   0xB938             CBNZ.N   R0,??AppS2wCmd_Wassoc_5
   \   00000092   0xF8DB 0x0138      LDR      R0,[R11, #+312]
   \   00000096   0x280D             CMP      R0,#+13
   \   00000098   0xBF02             ITTT     EQ 
   \   0000009A   0x9800             LDREQ    R0,[SP, #+0]
   \   0000009C   0x6840             LDREQ    R0,[R0, #+4]
   \   0000009E   0x281A             CMPEQ    R0,#+26
   \   000000A0   0xD10A             BNE.N    ??CrossCallReturnLabel_251
   \                     ??AppS2wCmd_Wassoc_5:
   \   000000A2   0x.... 0x....      BL       ?Subroutine89
   4248                  }
   4249          #if 1
   4250          		if( s2wCurrent.security.eap.useCaCert ||
   4251          			(( 13 == s2wCurrent.security.eap.outerAuth)&&
   4252          			( 26 == s2wCurrent.security.eap.innerAuth )))
   4253          		{
   4254                      index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
   4255                      if(index == -1)
   \                     ??CrossCallReturnLabel_480:
   \   000000A6   0xF110 0x0F01      CMN      R0,#+1
   \   000000AA   0xBF04             ITT      EQ 
   \   000000AC   0x.... 0x....      LDREQ.W  R0,??DataTable409
   \   000000B0   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   4256                      {
   4257                          index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
   4258                      }
   4259          	    if(index != -1)
   \   000000B4   0x.... 0x....      BL       ?Subroutine48
   4260          	    {
   4261                          pWlanConfig->securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
   4262                          pWlanConfig->securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4263          	    }
   4264          		}
   \                     ??CrossCallReturnLabel_251:
   \   000000B8   0x.... 0x....      BL       ?Subroutine90
   4265                  index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
   4266                  if(index == -1)
   \                     ??CrossCallReturnLabel_483:
   \   000000BC   0xF110 0x0F01      CMN      R0,#+1
   \   000000C0   0xBF04             ITT      EQ 
   \   000000C2   0x.... 0x....      LDREQ.W  R0,??DataTable409_1
   \   000000C6   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   4267                  {
   4268                      index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
   4269                  }
   4270          	    if(index != -1)
   \   000000CA   0x.... 0x....      BL       ?Subroutine47
   4271          	    {
   4272          	    	pWlanConfig->securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
   4273                      pWlanConfig->securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4274          	    }
   4275                  index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
   4276                  if(index == -1)
   \                     ??CrossCallReturnLabel_250:
   \   000000CE   0xF110 0x0F01      CMN      R0,#+1
   \   000000D2   0xBF04             ITT      EQ 
   \   000000D4   0x.... 0x....      LDREQ.W  R0,??DataTable409_2
   \   000000D8   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   4277                  {
   4278                      index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
   4279          	    }
   4280          	    if(index != -1)
   \   000000DC   0xF110 0x0F01      CMN      R0,#+1
   \   000000E0   0xD004             BEQ.N    ??AppS2wCmd_Wassoc_6
   4281          	    {
   4282          	        pWlanConfig->securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
   \   000000E2   0x.... 0x....      BL       ?Subroutine86
   4283                      pWlanConfig->securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4284          	    }
   \                     ??CrossCallReturnLabel_468:
   \   000000E6   0xE001             B.N      ??AppS2wCmd_Wassoc_6
   4285          #endif
   4286          TRY_AGAIN:
   4287          		/* start the timer*/
   4288          		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
   4289          						   GSN_SOFT_TMR_ONESHOT,0,
   4290          							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
   4291          						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
   4292          
   4293          		/* Enable crypto */
   4294          		GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
   4295          		
   4296                  status = GsnWdd_Connect(&s2wappMainTaskCtxt->if0.wddCtx, conctflags, pWlanConfig, NULL,
   4297                                 s2wApp_ConnectCb, s2wappMainTaskCtxt);
   4298                  if (GSN_OPERATION_IN_PROGRESS != status)
   4299                  {
   4300                      s2wApp_ConnectCb( NULL,status);
   4301                  }
   4302                  else
   4303                  {
   4304                      status = GSN_SUCCESS;
   4305                  }
   4306          
   4307                  /* wait on a semaphore to finish the asociation
   4308                   */
   4309                  GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
   4310                  
   4311                 AppS2w_ConctCbProcess(s2wappMainTaskCtxt, L2ConnectStatus);
   4312                 
   4313                 
   4314                 if(0 == eapFastRetryCnt && s2wLinkState == S2W_LINK_STATE_DISCONNECTED &&
   4315                      s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST)
   4316                 {
   4317                      eapFastRetryCnt++;
   \                     ??AppS2wCmd_Wassoc_7:
   \   000000E8   0xF04F 0x0901      MOV      R9,#+1
   4318                      goto TRY_AGAIN;
   4319                 }
   \                     ??AppS2wCmd_Wassoc_6:
   \   000000EC   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   000000F0   0x.... 0x....      BL       ?Subroutine82
   \                     ??CrossCallReturnLabel_636:
   \   000000F4   0x.... 0x....      BL       ?Subroutine83
   \                     ??CrossCallReturnLabel_463:
   \   000000F8   0x.... 0x....      BL       ?Subroutine102
   \                     ??CrossCallReturnLabel_522:
   \   000000FC   0xD004             BEQ.N    ??AppS2wCmd_Wassoc_8
   \   000000FE   0x4639             MOV      R1,R7
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x.... 0x....      BL       s2wApp_ConnectCb
   \   00000106   0xE000             B.N      ??AppS2wCmd_Wassoc_9
   \                     ??AppS2wCmd_Wassoc_8:
   \   00000108   0x2700             MOVS     R7,#+0
   \                     ??AppS2wCmd_Wassoc_9:
   \   0000010A   0x.... 0x....      BL       ?Subroutine106
   \                     ??CrossCallReturnLabel_533:
   \   0000010E   0x69A1             LDR      R1,[R4, #+24]
   \   00000110   0x6830             LDR      R0,[R6, #+0]
   \   00000112   0x.... 0x....      BL       AppS2w_ConctCbProcess
   \   00000116   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000011A   0xBF02             ITTT     EQ 
   \   0000011C   0x.... 0x....      LDREQ.W  R0,??DataTable409_4
   \   00000120   0x7800             LDRBEQ   R0,[R0, #+0]
   \   00000122   0x2800             CMPEQ    R0,#+0
   \   00000124   0xBF04             ITT      EQ 
   \   00000126   0xF8DB 0x0138      LDREQ    R0,[R11, #+312]
   \   0000012A   0x282B             CMPEQ    R0,#+43
   \   0000012C   0xD0DC             BEQ.N    ??AppS2wCmd_Wassoc_7
   4320                 
   4321                 
   4322                  if(params.mode == 2)
   \   0000012E   0xF89D 0x0034      LDRB     R0,[SP, #+52]
   \   00000132   0x2802             CMP      R0,#+2
   \   00000134   0xD002             BEQ.N    ??AppS2wCmd_Wassoc_10
   4323                  {
   4324                      current_wlan_info.mode = S2W_WLANDATA_MODE_AP;
   4325          	    }
   4326          	    else
   4327          	    {
   4328          	        GsnHeIf_DriverSuspend();
   \   00000136   0x.... 0x....      BL       GsnHeIf_DriverSuspend
   4329                      current_wlan_info.mode = S2W_WLANDATA_MODE_INFRA;
   \   0000013A   0x2001             MOVS     R0,#+1
   4330          		}
   \                     ??AppS2wCmd_Wassoc_10:
   \   0000013C   0x.... 0x....      BL       ?Subroutine129
   4331          #ifdef S2W_IP2WIFI_SUPPORT  // ip2wifi
   4332                  if((status == GSN_SUCCESS) &&(L2ConnectStatus == GSN_SUCCESS ))  
   4333                  {
   4334                      return S2W_SUCCESS;
   4335                  }
   4336                  else
   4337                  {
   4338                      return S2W_FAILURE;
   4339                  }
   4340                  
   4341          #else // s2w 
   4342                  if((status == GSN_SUCCESS) && (TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx)))
   \                     ??CrossCallReturnLabel_602:
   \   00000140   0xD13D             BNE.N    ??AppS2wCmd_Wassoc_11
   \   00000142   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_578:
   \   00000146   0x2801             CMP      R0,#+1
   \   00000148   0xD139             BNE.N    ??AppS2wCmd_Wassoc_11
   4343          
   4344                  {
   4345                      
   4346                      memset(&ipConfig,0,sizeof(ipConfig));
   \   0000014A   0x.... 0x....      BL       ?Subroutine29
   4347                      GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     ??CrossCallReturnLabel_77:
   \   0000014E   0x.... 0x....      BL       ?Subroutine123
   4348                      ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
   \                     ??CrossCallReturnLabel_588:
   \   00000152   0x.... 0x....      BL       ?Subroutine63
   4349                      
   4350                      ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
   4351                      if(ipConfig.ipv4.staticIp) // static ip
   \                     ??CrossCallReturnLabel_394:
   \   00000156   0xD00B             BEQ.N    ??AppS2wCmd_Wassoc_12
   4352                      {
   4353                          memcpy((UINT8*)&ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4);
   \   00000158   0x.... 0x....      BL       ?Subroutine11
   4354                          memcpy((UINT8*)&ipConfig.ipv4.subnetMask, s2wCurrent.netConf.netMask, 4);
   \                     ??CrossCallReturnLabel_18:
   \   0000015C   0x.... 0x....      BL       ?Subroutine12
   4355                          memcpy((UINT8*)&ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4);
   \                     ??CrossCallReturnLabel_20:
   \   00000160   0x.... 0x....      BL       ?Subroutine13
   4356                          memcpy((UINT8*)&ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
   \                     ??CrossCallReturnLabel_22:
   \   00000164   0x.... 0x....      BL       ?Subroutine14
   4357                          memcpy((UINT8*)&ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
   \                     ??CrossCallReturnLabel_24:
   \   00000168   0x.... 0x....      BL       ?Subroutine15
   4358                          S2wL3Wait = TRUE;
   \                     ??CrossCallReturnLabel_26:
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x6060             STR      R0,[R4, #+4]
   4359                      }
   4360                       if(strlen((const char *)s2wCurrent.hostName) != 0)
   \                     ??AppS2wCmd_Wassoc_12:
   \   00000170   0x.... 0x....      BL       ?Subroutine69
   \                     ??CrossCallReturnLabel_421:
   \   00000174   0xB940             CBNZ.N   R0,??CrossCallReturnLabel_547
   4361          			 {
   4362          				 memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
   4363          					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
   4364          			 }
   4365          			else
   4366          			{     
   4367               			S2w_macAddrRTCGet(mac);
   \   00000176   0x.... 0x....      BL       ?Subroutine32
   4368          		      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
   \                     ??CrossCallReturnLabel_105:
   \   0000017A   0x.... 0x....      BL       ?Subroutine31
   4369          			    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
   \                     ??CrossCallReturnLabel_101:
   \   0000017E   0xA806             ADD      R0,SP,#+24
   \   00000180   0x.... 0x....      BL       strlen
   \   00000184   0x.... 0x....      BL       ?Subroutine111
   4370          				memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
   4371          					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
   4372              		}
   \                     ??CrossCallReturnLabel_547:
   \   00000188   0x.... 0x....      BL       ?Subroutine116
   4373                      s2wappMainTaskCtxt->if0.nwifCtx.notifyCb = DHCP_notify;
   \                     ??CrossCallReturnLabel_559:
   \   0000018C   0x.... 0x....      BL       ?Subroutine24
   4374                      memset(&dhcpParams,0,sizeof(dhcpParams));
   4375                      dhcpParams.dhcpMaxRetryCnt = S2W_DHCP_MAX_RETRY_COUNT;
   \                     ??CrossCallReturnLabel_54:
   \   00000190   0x.... 0x....      BL       ?Subroutine108
   4376                      dhcpParams.radioMode = s2wCurrent.netConf.dhcpRadioMode;
   4377                      dhcpParams.requestLeaseTime = s2wCurrent.dhcpRequestLeaseTime;            
   4378                      dhcpParams.dhcpRetryTimeout = s2wCurrent.dhcpRetryTimeout;
   4379                        S2wL3Wait = TRUE;
   4380                     
   4381                      status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, &dhcpParams);
   \                     ??CrossCallReturnLabel_540:
   \   00000194   0x.... 0x....      BL       ?Subroutine102
   4382          
   4383                       if((status != GSN_OPERATION_IN_PROGRESS) && !ipConfig.ipv4.staticIp)
   \                     ??CrossCallReturnLabel_520:
   \   00000198   0xD005             BEQ.N    ??AppS2wCmd_Wassoc_13
   \   0000019A   0x981C             LDR      R0,[SP, #+112]
   \   0000019C   0xB918             CBNZ.N   R0,??AppS2wCmd_Wassoc_13
   4384                          {
   4385                              DHCP_notify(status,NULL);
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x4638             MOV      R0,R7
   \   000001A2   0x.... 0x....      BL       DHCP_notify
   4386                          }
   4387                      if(ipConfig.ipv4.staticIp)
   \                     ??AppS2wCmd_Wassoc_13:
   \   000001A6   0x981C             LDR      R0,[SP, #+112]
   \   000001A8   0xB118             CBZ.N    R0,??AppS2wCmd_Wassoc_14
   4388                      {
   4389                          if(GSN_SUCCESS == status)
   \   000001AA   0xB927             CBNZ.N   R7,??CrossCallReturnLabel_532
   4390                          {
   4391                              L3ConnectStatus = TRUE;
   \   000001AC   0x2001             MOVS     R0,#+1
   \   000001AE   0x7060             STRB     R0,[R4, #+1]
   \   000001B0   0xE003             B.N      ??AppS2wCmd_Wassoc_15
   4392                      	}
   4393                      }
   4394                      else
   4395                      {
   4396                      	GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
   \                     ??AppS2wCmd_Wassoc_14:
   \   000001B2   0x.... 0x....      BL       ?Subroutine106
   4397                      }
   4398                      
   4399          #ifdef S2W_IPv6_SUPPORT
   4400                      memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
   4401                      memset(&userIpv6Config,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
   4402                      S2w_getDhcpv6Clientconfig(&dhcpParams); 
   4403                      if(s2wCurrent.netConf.dhcpv6)
   4404                      {
   4405                      	userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)(GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR | GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG );
   4406                      }
   4407                      else
   4408                      {
   4409                        userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR;
   4410                      }
   4411                      S2wL3Wait = TRUE;
   4412                      status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Config, &dhcpParams);
   4413                      if(status != GSN_OPERATION_IN_PROGRESS)
   4414                          {
   4415                              DHCP_notify(status,NULL);
   4416                          }
   4417                      GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
   4418          #endif
   4419                      
   4420                      if(L3ConnectStatus)
   \                     ??CrossCallReturnLabel_532:
   \   000001B6   0x7860             LDRB     R0,[R4, #+1]
   \   000001B8   0xB108             CBZ.N    R0,??AppS2wCmd_Wassoc_11
   4421                      {
   4422                          AppS2wHdrAndIpv4_Print();
   \                     ??AppS2wCmd_Wassoc_15:
   \   000001BA   0x.... 0x....      BL       AppS2wHdrAndIpv4_Print
   4423          #ifdef S2W_IPv6_SUPPORT
   4424                          if(L3ConnectStatus_v6)
   4425                          AppS2wHdrAndIpv6_Print();
   4426          #endif                
   4427          			}
   4428          
   4429                  }
   4430          
   4431          	if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==1))
   \                     ??AppS2wCmd_Wassoc_11:
   \   000001BE   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_577:
   \   000001C2   0x2801             CMP      R0,#+1
   \   000001C4   0xBF04             ITT      EQ 
   \   000001C6   0x7860             LDRBEQ   R0,[R4, #+1]
   \   000001C8   0x2801             CMPEQ    R0,#+1
   \   000001CA   0xD10B             BNE.N    ??AppS2wCmd_Wassoc_16
   4432                  {
   4433                          S2wL3Wait = FALSE;
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0x6060             STR      R0,[R4, #+4]
   4434                         if(ipConfig.ipv4.staticIp)
   \   000001D0   0x981C             LDR      R0,[SP, #+112]
   \   000001D2   0xB108             CBZ.N    R0,??CrossCallReturnLabel_593
   4435                         {
   4436                          nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
   \   000001D4   0x.... 0x....      BL       ?Subroutine125
   4437                         }
   4438                          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
   \                     ??CrossCallReturnLabel_593:
   \   000001D8   0x.... 0x....      BL       ?Subroutine66
   4439                          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
   \                     ??CrossCallReturnLabel_404:
   \   000001DC   0x.... 0x....      BL       ?Subroutine109
   4440           
   4441          		return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_542:
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0xE028             B.N      ??AppS2wCmd_Wassoc_0
   4442                  }
   4443                  else if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==0))
   \                     ??AppS2wCmd_Wassoc_16:
   \   000001E4   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_576:
   \   000001E8   0x2801             CMP      R0,#+1
   \   000001EA   0xBF04             ITT      EQ 
   \   000001EC   0x7860             LDRBEQ   R0,[R4, #+1]
   \   000001EE   0x2800             CMPEQ    R0,#+0
   \   000001F0   0xD105             BNE.N    ??AppS2wCmd_Wassoc_17
   4444                  {
   4445                          GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \   000001F2   0x.... 0x....      BL       ?Subroutine123
   4446                          S2wL3Wait = FALSE;
   \                     ??CrossCallReturnLabel_587:
   \   000001F6   0x2000             MOVS     R0,#+0
   \   000001F8   0x6060             STR      R0,[R4, #+4]
   4447                     // AppS2wProcess_DhcpFailNotify();
   4448          			return S2W_ENOIP;
   \   000001FA   0x200F             MOVS     R0,#+15
   \   000001FC   0xE01B             B.N      ??AppS2wCmd_Wassoc_0
   4449                  }
   4450                  else
   4451                  {
   4452          			// failure case so check the log level and depends on it print info
   4453          			//if(s2wappMainTaskCtxt->logLevel > 0)s2wCurrent.logLevel
   4454                  	if(s2wCurrent.logLevel > 0)
   \                     ??AppS2wCmd_Wassoc_17:
   \   000001FE   0xF89B 0x03A8      LDRB     R0,[R11, #+936]
   \   00000202   0xB1B8             CBZ.N    R0,??AppS2wCmd_Wassoc_18
   4455          			{
   4456          				 UINT32 errorCode=0;
   4457          				 GSN_WDD_ERROR_T *logInfo = GsnWdd_ErrorGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000204   0x.... 0x....      BL       ?Subroutine104
   \                     ??CrossCallReturnLabel_527:
   \   00000208   0x4606             MOV      R6,R0
   4458                           if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_AP_NOT_FOUND)
   \   0000020A   0x6830             LDR      R0,[R6, #+0]
   \   0000020C   0x07C1             LSLS     R1,R0,#+31
   \   0000020E   0xBF48             IT       MI 
   \   00000210   0x2501             MOVMI    R5,#+1
   4459                           {
   4460                                errorCode = S2W_ERROR_CODE_AP_NOT_FOUND;
   \   00000212   0xD406             BMI.N    ??AppS2wCmd_Wassoc_19
   4461          				 }
   4462          				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WLAN_FAIL_TO_CONCT)
   \   00000214   0x0781             LSLS     R1,R0,#+30
   \   00000216   0xBF48             IT       MI 
   \   00000218   0x2502             MOVMI    R5,#+2
   4463          				 {
   4464          					  errorCode = S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT;
   \   0000021A   0xD402             BMI.N    ??AppS2wCmd_Wassoc_19
   4465          				 }
   4466          				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WPA_AUTH_FAILURE)
   \   0000021C   0x0740             LSLS     R0,R0,#+29
   \   0000021E   0xBF48             IT       MI 
   \   00000220   0x2503             MOVMI    R5,#+3
   4467          				 {
   4468          					  errorCode = S2W_ERROR_CODE_WPA_AUTH_FAILURE;
   4469          				 }
   4470          				 S2w_Printf(S2WError_List[errorCode]);
   \                     ??AppS2wCmd_Wassoc_19:
   \   00000222   0x.... 0x....      BL       ?Subroutine92
   4471          				 if(logInfo->reasonString != NULL)
   \                     ??CrossCallReturnLabel_494:
   \   00000226   0x68B0             LDR      R0,[R6, #+8]
   \   00000228   0xB120             CBZ.N    R0,??AppS2wCmd_Wassoc_18
   4472          				 {
   4473          					 S2w_Printf("\r\n");
   \   0000022A   0x.... 0x....      BL       ?Subroutine91
   4474                               S2w_Printf(logInfo->reasonString);
   \                     ??CrossCallReturnLabel_492:
   \   0000022E   0x68B0             LDR      R0,[R6, #+8]
   \   00000230   0x.... 0x....      BL       S2w_Printf
   4475          				 }
   4476          
   4477          			}
   4478                    return S2W_FAILURE;
   \                     ??AppS2wCmd_Wassoc_18:
   \   00000234   0x2001             MOVS     R0,#+1
   4479                  }
   \                     ??AppS2wCmd_Wassoc_0:
   \   00000236   0x.... 0x....      B.W      ?Subroutine0
   4480          //return S2W_SUCCESS;
   4481          #endif // ip2wifi
   4482          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine110:
   \   00000000   0x6831             LDR      R1,[R6, #+0]
   \                     ??Subroutine110_0:
   \   00000002   0xF248 0x10C0      MOVW     R0,#+33216
   \   00000006   0x5840             LDR      R0,[R0, R1]
   \   00000008   0x.... 0x....      B.W      GsnSoftTmr_Stop

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine82:
   \   00000000   0x6832             LDR      R2,[R6, #+0]
   \   00000002   0xF248 0x11C0      MOVW     R1,#+33216
   \   00000006   0x5088             STR      R0,[R1, R2]
   \   00000008                      REQUIRE ??Subroutine140_0
   \   00000008                      ;; // Fall through to label ??Subroutine140_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine140_0:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable413  ;; 0x41010018
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      B.W      GsnHeIf_DriverInit

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x.... 0x....      LDR.W    R11,??DataTable413_1
   \   00000004   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   00000008   0xF88D 0x0034      STRB     R0,[SP, #+52]
   \   0000000C   0xF44F 0x72AE      MOV      R2,#+348
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0xF600 0x7894      ADDW     R8,R0,#+3988
   \   00000016                      REQUIRE ??Subroutine141_0
   \   00000016                      ;; // Fall through to label ??Subroutine141_0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine120:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \                     ??Subroutine120_0:
   \   00000002   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000006   0x.... 0x....      B.W      GsnWdd_AssocStatusGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine90:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable484_1
   \   00000004   0x.... 0x....      B.W      S2wCert_SearchRamTable

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine89:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable484
   \   00000004   0x.... 0x....      B.W      S2wCert_SearchRamTable

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0xA804             ADD      R0,SP,#+16
   \   00000002   0x.... 0x....      B.W      S2w_macAddrRTCGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine91:
   \   00000000   0x....             ADR.N    R0,??DataTable492_1  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000002   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine69:
   \   00000000   0xF50B 0x77EE      ADD      R7,R11,#+476
   \                     ??Subroutine69_0:
   \   00000004   0x4638             MOV      R0,R7
   \   00000006   0x.... 0x....      B.W      strlen

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB051             ADD      SP,SP,#+324
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine129:
   \   00000000   0xF88B 0x03F8      STRB     R0,[R11, #+1016]
   \   00000004   0xF50B 0x78D6      ADD      R8,R11,#+428
   \   00000008   0xF50B 0x79D4      ADD      R9,R11,#+424
   \   0000000C   0x2F00             CMP      R7,#+0
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine125:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable515_9
   \   00000004   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   00000008   0x.... 0x....      B.W      _nxe_arp_gratuitous_send

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine124:
   \   00000000   0xF8BB 0x128A      LDRH     R1,[R11, #+650]
   \   00000004   0xF8A8 0x103A      STRH     R1,[R8, #+58]
   \   00000008   0xF248 0x12C6      MOVW     R2,#+33222
   \   0000000C   0xF248 0x11C4      MOVW     R1,#+33220
   \   00000010   0x46CA             MOV      R10,R9
   \   00000012   0x5C08             LDRB     R0,[R1, R0]
   \   00000014   0xF888 0x0038      STRB     R0,[R8, #+56]
   \   00000018   0xF248 0x10C5      MOVW     R0,#+33221
   \   0000001C   0x6831             LDR      R1,[R6, #+0]
   \   0000001E   0x5C40             LDRB     R0,[R0, R1]
   \   00000020   0xF888 0x003C      STRB     R0,[R8, #+60]
   \   00000024   0xF241 0x412E      MOVW     R1,#+5166
   \   00000028   0x6830             LDR      R0,[R6, #+0]
   \   0000002A   0x5A12             LDRH     R2,[R2, R0]
   \   0000002C   0x520A             STRH     R2,[R1, R0]
   \   0000002E   0xF89B 0x0078      LDRB     R0,[R11, #+120]
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine123:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x1828             ADDS     R0,R5,R0
   \   00000004   0x.... 0x....      B.W      GsnNwIf_Close

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine121:
   \   00000000   0x6832             LDR      R2,[R6, #+0]
   \   00000002   0xF248 0x11C0      MOVW     R1,#+33216
   \   00000006   0x5088             STR      R0,[R1, R2]
   \   00000008   0x4648             MOV      R0,R9
   \   0000000A   0x.... 0x....      B.W      AppS2wHal_Disassociate

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine116:
   \   00000000   0x2210             MOVS     R2,#+16
   \   00000002   0x4639             MOV      R1,R7
   \   00000004   0xA824             ADD      R0,SP,#+144
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine114:
   \   00000000   0x2206             MOVS     R2,#+6
   \   00000002   0xA90E             ADD      R1,SP,#+56
   \   00000004   0xF108 0x0021      ADD      R0,R8,#+33
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine112:
   \   00000000   0xF89D 0x2036      LDRB     R2,[SP, #+54]
   \   00000004   0xF888 0x2000      STRB     R2,[R8, #+0]
   \   00000008   0xF10D 0x013E      ADD      R1,SP,#+62
   \   0000000C   0xF108 0x0001      ADD      R0,R8,#+1
   \   00000010   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine111:
   \   00000000   0x4602             MOV      R2,R0
   \   00000002   0xA906             ADD      R1,SP,#+24
   \   00000004   0x4638             MOV      R0,R7
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine109:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x2201             MOVS     R2,#+1
   \   00000004   0x4641             MOV      R1,R8
   \   00000006   0x1828             ADDS     R0,R5,R0
   \   00000008   0x.... 0x....      B.W      GsnNwif_DnsServerGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine108:
   \   00000000   0x2105             MOVS     R1,#+5
   \   00000002   0x9141             STR      R1,[SP, #+260]
   \   00000004   0xF89B 0x1189      LDRB     R1,[R11, #+393]
   \   00000008   0xF88D 0x1138      STRB     R1,[SP, #+312]
   \   0000000C   0xF50B 0x716F      ADD      R1,R11,#+956
   \   00000010   0x68CA             LDR      R2,[R1, #+12]
   \   00000012   0x6909             LDR      R1,[R1, #+16]
   \   00000014   0x924F             STR      R2,[SP, #+316]
   \   00000016   0x9140             STR      R1,[SP, #+256]
   \   00000018   0x4602             MOV      R2,R0
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x6061             STR      R1,[R4, #+4]
   \   0000001E   0xA91A             ADD      R1,SP,#+104
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x1828             ADDS     R0,R5,R0
   \   00000024   0x.... 0x....      B.W      GsnNwIf_Open

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine106:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x....             LDR.N    R0,??DataTable515_10
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine104:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x2500             MOVS     R5,#+0
   \   00000004   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000008   0x.... 0x....      B.W      GsnWdd_ErrorGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine102:
   \   00000000   0x4607             MOV      R7,R0
   \   00000002   0x....             LDR.N    R0,??DataTable515_11  ;; 0x80000001
   \   00000004   0x4287             CMP      R7,R0
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine99:
   \   00000000   0x4601             MOV      R1,R0
   \   00000002   0x....             LDR.N    R4,??DataTable515_12
   \   00000004   0x4648             MOV      R0,R9
   \   00000006   0x7020             STRB     R0,[R4, #+0]
   \   00000008   0x7060             STRB     R0,[R4, #+1]
   \   0000000A   0x70A0             STRB     R0,[R4, #+2]
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x4628             MOV      R0,R5
   \   00000010   0x.... 0x....      B.W      AppS2wParse_Wcmd

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine93:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x7A40             LDRB     R0,[R0, #+9]
   \   00000004   0xF888 0x00B6      STRB     R0,[R8, #+182]
   \   00000008   0xF20B 0x1163      ADDW     R1,R11,#+355
   \   0000000C   0xF89B 0x2162      LDRB     R2,[R11, #+354]
   \   00000010   0xF108 0x00D8      ADD      R0,R8,#+216
   \   00000014   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine92:
   \   00000000   0xEB04 0x0085      ADD      R0,R4,R5, LSL #+2
   \   00000004   0x6880             LDR      R0,[R0, #+8]
   \   00000006   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine86:
   \   00000000   0x210C             MOVS     R1,#+12
   \   00000002   0x4348             MULS     R0,R1,R0
   \   00000004   0x59C1             LDR      R1,[R0, R7]
   \   00000006   0x1C89             ADDS     R1,R1,#+2
   \   00000008   0xF8C8 0x1118      STR      R1,[R8, #+280]
   \   0000000C   0x59C0             LDR      R0,[R0, R7]
   \   0000000E   0x8800             LDRH     R0,[R0, #+0]
   \   00000010   0xF8C8 0x011C      STR      R0,[R8, #+284]
   \   00000014   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine83:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x....             LDR.N    R1,??DataTable515_13
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x4642             MOV      R2,R8
   \   0000000C   0x4651             MOV      R1,R10
   \   0000000E   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000012   0x.... 0x....      B.W      GsnWdd_Connect

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine66:
   \   00000000   0x6830             LDR      R0,[R6, #+0]
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x4649             MOV      R1,R9
   \   00000006   0x1828             ADDS     R0,R5,R0
   \   00000008   0x.... 0x....      B.W      GsnNwif_DnsServerGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine63:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xF88D 0x0068      STRB     R0,[SP, #+104]
   \   00000006   0xF89B 0x1188      LDRB     R1,[R11, #+392]
   \   0000000A   0x1E48             SUBS     R0,R1,#+1
   \   0000000C   0x4180             SBCS     R0,R0,R0
   \   0000000E   0x0FC0             LSRS     R0,R0,#+31
   \   00000010   0x901C             STR      R0,[SP, #+112]
   \   00000012   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine58:
   \   00000000   0xF89B 0x0162      LDRB     R0,[R11, #+354]
   \   00000004   0xF888 0x00D7      STRB     R0,[R8, #+215]
   \   00000008   0xF89B 0x03BC      LDRB     R0,[R11, #+956]
   \   0000000C   0xB128             CBZ.N    R0,??Subroutine58_0
   \   0000000E   0xF898 0x00F8      LDRB     R0,[R8, #+248]
   \   00000012   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000016   0xF888 0x00F8      STRB     R0,[R8, #+248]
   \                     ??Subroutine58_0:
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x....             LDR.N    R7,??DataTable515_14
   \   0000001E   0x7A00             LDRB     R0,[R0, #+8]
   \   00000020   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   0xF110 0x0F01      CMN      R0,#+1
   \   00000004   0xD009             BEQ.N    ??Subroutine48_0
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0x59C1             LDR      R1,[R0, R7]
   \   0000000C   0x1C89             ADDS     R1,R1,#+2
   \   0000000E   0xF8C8 0x1108      STR      R1,[R8, #+264]
   \   00000012   0x59C0             LDR      R0,[R0, R7]
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0xF8C8 0x010C      STR      R0,[R8, #+268]
   \                     ??Subroutine48_0:
   \   0000001A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   0xF110 0x0F01      CMN      R0,#+1
   \   00000004   0xD009             BEQ.N    ??Subroutine47_0
   \   00000006   0x210C             MOVS     R1,#+12
   \   00000008   0x4348             MULS     R0,R1,R0
   \   0000000A   0x59C1             LDR      R1,[R0, R7]
   \   0000000C   0x1C89             ADDS     R1,R1,#+2
   \   0000000E   0xF8C8 0x1110      STR      R1,[R8, #+272]
   \   00000012   0x59C0             LDR      R0,[R0, R7]
   \   00000014   0x8800             LDRH     R0,[R0, #+0]
   \   00000016   0xF8C8 0x0114      STR      R0,[R8, #+276]
   \                     ??Subroutine47_0:
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "TLS_KEY">`
   \   0000001E   0x.... 0x....      B.W      S2wCert_SearchRamTable

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0xF888 0x0027      STRB     R0,[R8, #+39]
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xF888 0x0028      STRB     R0,[R8, #+40]
   \   0000000C   0x2003             MOVS     R0,#+3
   \   0000000E   0xF888 0x0029      STRB     R0,[R8, #+41]
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0xF888 0x002A      STRB     R0,[R8, #+42]
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0xF888 0x002B      STRB     R0,[R8, #+43]
   \   0000001E   0x2006             MOVS     R0,#+6
   \   00000020   0xF888 0x002C      STRB     R0,[R8, #+44]
   \   00000024   0x2007             MOVS     R0,#+7
   \   00000026   0xF888 0x002D      STRB     R0,[R8, #+45]
   \   0000002A   0x2008             MOVS     R0,#+8
   \   0000002C   0xF888 0x002E      STRB     R0,[R8, #+46]
   \   00000030   0x2009             MOVS     R0,#+9
   \   00000032   0xF888 0x002F      STRB     R0,[R8, #+47]
   \   00000036   0x200A             MOVS     R0,#+10
   \   00000038   0xF888 0x0030      STRB     R0,[R8, #+48]
   \   0000003C   0x200B             MOVS     R0,#+11
   \   0000003E   0xF888 0x0031      STRB     R0,[R8, #+49]
   \   00000042   0xF89B 0x0395      LDRB     R0,[R11, #+917]
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xD002             BEQ.N    ??Subroutine46_0
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xD009             BEQ.N    ??Subroutine46_1
   \   0000004E   0xE014             B.N      ??Subroutine46_2
   \                     ??Subroutine46_0:
   \   00000050   0x200C             MOVS     R0,#+12
   \   00000052   0xF888 0x0032      STRB     R0,[R8, #+50]
   \   00000056   0x200D             MOVS     R0,#+13
   \   00000058   0xF888 0x0033      STRB     R0,[R8, #+51]
   \   0000005C   0xF888 0x9034      STRB     R9,[R8, #+52]
   \   00000060   0x4770             BX       LR
   \                     ??Subroutine46_1:
   \   00000062   0x200C             MOVS     R0,#+12
   \   00000064   0xF888 0x0032      STRB     R0,[R8, #+50]
   \   00000068   0x200D             MOVS     R0,#+13
   \   0000006A   0xF888 0x0033      STRB     R0,[R8, #+51]
   \   0000006E   0x200E             MOVS     R0,#+14
   \   00000070   0xF888 0x0034      STRB     R0,[R8, #+52]
   \   00000074   0xF888 0x9035      STRB     R9,[R8, #+53]
   \   00000078   0x4770             BX       LR
   \                     ??Subroutine46_2:
   \   0000007A   0xF888 0x9032      STRB     R9,[R8, #+50]
   \                     ??Subroutine46_3:
   \   0000007E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0xA804             ADD      R0,SP,#+16
   \   00000002   0x....             ADR.N    R2,??DataTable515_2  ;; "GS_"
   \   00000004   0x7941             LDRB     R1,[R0, #+5]
   \   00000006   0x78C3             LDRB     R3,[R0, #+3]
   \   00000008   0x9101             STR      R1,[SP, #+4]
   \   0000000A   0x7901             LDRB     R1,[R0, #+4]
   \   0000000C   0x9100             STR      R1,[SP, #+0]
   \   0000000E   0xA806             ADD      R0,SP,#+24
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant "%s%2.2x%2.2x%2.2x">`
   \   00000014   0x.... 0x....      B.W      sprintf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0x2298             MOVS     R2,#+152
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA81A             ADD      R0,SP,#+104
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0x4605             MOV      R5,R0
   \   00000002   0xF04F 0x0A00      MOV      R10,#+0
   \   00000006   0x46D1             MOV      R9,R10
   \   00000008   0x2230             MOVS     R2,#+48
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xA80D             ADD      R0,SP,#+52
   \   0000000E   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0x6831             LDR      R1,[R6, #+0]
   \   00000002   0x....             LDR.N    R2,??DataTable515_15
   \   00000004   0xF246 0x60D0      MOVW     R0,#+26320
   \   00000008   0x5042             STR      R2,[R0, R1]
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2240             MOVS     R2,#+64
   \   0000000E   0xA840             ADD      R0,SP,#+256
   \   00000010   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x....             LDR.N    R0,??DataTable515_16
   \   00000002   0x....             LDR.N    R6,??DataTable515_3
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x6001             STR      R1,[R0, #+0]
   \   00000008   0xF241 0x4550      MOVW     R5,#+5200
   \   0000000C   0x....             LDR.N    R0,??DataTable515_8
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0x4641             MOV      R1,R8
   \   00000004   0xA823             ADD      R0,SP,#+140
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0x4649             MOV      R1,R9
   \   00000004   0xA822             ADD      R0,SP,#+136
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0xF50B 0x71CA      ADD      R1,R11,#+404
   \   00000006   0xA81F             ADD      R0,SP,#+124
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0xF50B 0x71C8      ADD      R1,R11,#+400
   \   00000006   0xA81E             ADD      R0,SP,#+120
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0xF50B 0x71C6      ADD      R1,R11,#+396
   \   00000006   0xA81D             ADD      R0,SP,#+116
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9003             STR      R0,[SP, #+12]
   \   00000004   0x4649             MOV      R1,R9
   \   00000006   0x....             LDR.N    R0,??DataTable515_17
   \   00000008   0x9002             STR      R0,[SP, #+8]
   \   0000000A   0x460A             MOV      R2,R1
   \   0000000C   0xF44F 0x0096      MOV      R0,#+4915200
   \   00000010   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000014   0x460B             MOV      R3,R1
   \   00000016   0x6830             LDR      R0,[R6, #+0]
   \   00000018   0xF500 0x4001      ADD      R0,R0,#+33024
   \   0000001C   0x30A0             ADDS     R0,R0,#+160
   \   0000001E   0x.... 0x....      B.W      GsnSoftTmr_Start

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9003             STR      R0,[SP, #+12]
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x....             LDR.N    R0,??DataTable515_17
   \   00000008   0x9002             STR      R0,[SP, #+8]
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF44F 0x0096      MOV      R0,#+4915200
   \   00000010   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000014   0x460B             MOV      R3,R1
   \   00000016   0x6830             LDR      R0,[R6, #+0]
   \   00000018   0xF500 0x4001      ADD      R0,R0,#+33024
   \   0000001C   0x30A0             ADDS     R0,R0,#+160
   \   0000001E   0x.... 0x....      B.W      GsnSoftTmr_Start

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x61A0             STR      R0,[R4, #+24]
   \   00000004   0xF50B 0x71A1      ADD      R1,R11,#+322
   \   00000008   0xF8DB 0x0138      LDR      R0,[R11, #+312]
   \   0000000C   0xF888 0x00B4      STRB     R0,[R8, #+180]
   \   00000010   0xF50B 0x709C      ADD      R0,R11,#+312
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x6840             LDR      R0,[R0, #+4]
   \   00000018   0xF888 0x00B5      STRB     R0,[R8, #+181]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x7A42             LDRB     R2,[R0, #+9]
   \   00000020   0xF108 0x00B7      ADD      R0,R8,#+183
   \   00000024   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   4483          VOID DHCP_notify(INT32 status,void *ctx)
   4484          {
   \                     DHCP_notify:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0A7             SUB      SP,SP,#+156
   4485          	if (GSN_SUCCESS == status)
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable413_2
   \   00000008   0x.... 0x....      LDR.W    R7,??DataTable413_3
   \   0000000C   0xB948             CBNZ.N   R0,??DHCP_notify_0
   4486          	{
   4487                  L3ConnectStatus = TRUE;
   4488          #ifdef S2W_IPv6_SUPPORT
   4489                  L3Dhcpv6Status = TRUE;
   4490                   L3ConnectStatus_v6 = TRUE;
   4491          #endif       
   4492                   nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable413_4
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7078             STRB     R0,[R7, #+1]
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000001C   0x.... 0x....      BL       _nxe_arp_gratuitous_send
   \   00000020   0xE009             B.N      ??DHCP_notify_1
   4493          	}
   4494          	else if(GSN_NW_DHCP_LEASE_EXPIRED == status)
   \                     ??DHCP_notify_0:
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable413_5  ;; 0xb0000206
   \   00000026   0x4288             CMP      R0,R1
   \   00000028   0xD103             BNE.N    ??DHCP_notify_2
   4495          	{
   4496          		AppMainCtx_TaskNotify(APP_EVENT_DHCP_LEASETIME_EXPIRED);
   \   0000002A   0x2021             MOVS     R0,#+33
   \   0000002C   0x.... 0x....      BL       AppMainCtx_TaskNotify
   4497          		return;
   \   00000030   0xE039             B.N      ??DHCP_notify_3
   4498          	}
   4499          
   4500              else
   4501              {
   4502                  L3ConnectStatus = FALSE;
   \                     ??DHCP_notify_2:
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x7078             STRB     R0,[R7, #+1]
   4503          #ifdef S2W_IPv6_SUPPORT
   4504                  /* Link local is present by default */
   4505                   L3ConnectStatus_v6 = TRUE;
   4506          #endif        
   4507          	}
   4508          
   4509              if(S2wL3Wait)
   \                     ??DHCP_notify_1:
   \   00000036   0x6878             LDR      R0,[R7, #+4]
   \   00000038   0xB130             CBZ.N    R0,??DHCP_notify_4
   4510              {
   4511                  S2wL3Wait =0;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0x6078             STR      R0,[R7, #+4]
   4512              	GsnOsal_SemRelease(&s2wL2L3ConnectSemaphore);
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable413_6
   \   00000042   0x.... 0x....      BL       GsnOsal_SemRelease
   \   00000046   0xE02E             B.N      ??DHCP_notify_3
   4513              }
   4514              else // dgcp renew case
   4515              {
   4516                  UINT32 message;
   4517                  if((L3ConnectStatus == FALSE) && (s2wLinkState != S2W_LINK_STATE_DISCONNECTED))
   \                     ??DHCP_notify_4:
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable409_4
   \   0000004C   0x7879             LDRB     R1,[R7, #+1]
   \   0000004E   0x7800             LDRB     R0,[R0, #+0]
   \   00000050   0x.... 0x....      LDR.W    R5,??DataTable413_7
   \   00000054   0x.... 0x....      LDR.W    R6,??DataTable413_8
   \   00000058   0xB941             CBNZ.N   R1,??DHCP_notify_5
   \   0000005A   0xB320             CBZ.N    R0,??DHCP_notify_3
   4518                  {
   4519                      message = APP_EVENT_DHCP_RENEW_FAILURE;
   4520                      /* for auto connection (data pipe make the async gpio low-so that host will not send data)
   4521                       */
   4522                      if(s2wIsAutoconnected)
   \   0000005C   0x7830             LDRB     R0,[R6, #+0]
   \   0000005E   0xB110             CBZ.N    R0,??DHCP_notify_6
   4523          	        {
   4524          		        S2w_AsyncMsgGpioOp(0);
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   4525                      }
   4526                      (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     ??DHCP_notify_6:
   \   00000066   0x6821             LDR      R1,[R4, #+0]
   \   00000068   0x2008             MOVS     R0,#+8
   \   0000006A   0xE01A             B.N      ??DHCP_notify_7
   4527          
   4528                  }
   4529                  else if(s2wLinkState != S2W_LINK_STATE_DISCONNECTED)
   \                     ??DHCP_notify_5:
   \   0000006C   0xB1D8             CBZ.N    R0,??DHCP_notify_3
   4530                  {
   4531                      // check the ip address got is same as previous one if not post a msg else do nothing
   4532                      GSN_NWIF_IP_CONFIG_T nwParams;
   4533                      /* get the ip address by calling the geps API
   4534                       */
   4535                      GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   \   0000006E   0x6820             LDR      R0,[R4, #+0]
   \   00000070   0x.... 0x....      BL       ?Subroutine77
   4536          
   4537                      if((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
   4538                         (s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
   \                     ??CrossCallReturnLabel_447:
   \   00000074   0x6821             LDR      R1,[R4, #+0]
   \   00000076   0x9803             LDR      R0,[SP, #+12]
   \   00000078   0xF247 0x5224      MOVW     R2,#+29988
   \   0000007C   0x1853             ADDS     R3,R2,R1
   \   0000007E   0x5857             LDR      R7,[R2, R1]
   \   00000080   0x4287             CMP      R7,R0
   \   00000082   0xBF02             ITTT     EQ 
   \   00000084   0x685F             LDREQ    R7,[R3, #+4]
   \   00000086   0xF8DD 0xC010      LDREQ    R12,[SP, #+16]
   \   0000008A   0x4567             CMPEQ    R7,R12
   \   0000008C   0xD00B             BEQ.N    ??DHCP_notify_3
   4539                      {
   4540                          // update the values first
   4541                          s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
   \   0000008E   0x5050             STR      R0,[R2, R1]
   4542                          s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
   \   00000090   0x9804             LDR      R0,[SP, #+16]
   \   00000092   0x6058             STR      R0,[R3, #+4]
   4543          
   4544                          message = APP_EVENT_DHCP_RENEW_IP_CHANGED;
   4545                          /* for auto connection (data pipe make the async gpio low-so that host will not send data)
   4546                           */
   4547                          if(s2wIsAutoconnected)
   \   00000094   0x7830             LDRB     R0,[R6, #+0]
   \   00000096   0xB110             CBZ.N    R0,??DHCP_notify_8
   4548          		        {
   4549          		            S2w_AsyncMsgGpioOp(0);
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   4550                          }
   4551                          (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     ??DHCP_notify_8:
   \   0000009E   0x6821             LDR      R1,[R4, #+0]
   \   000000A0   0x201F             MOVS     R0,#+31
   \                     ??DHCP_notify_7:
   \   000000A2   0x682A             LDR      R2,[R5, #+0]
   \   000000A4   0x4790             BLX      R2
   4552                      }
   4553                 }
   4554              }
   4555            // AppMainCtx_TaskNotify(APP_EVENT_DHCP_STOP_REQUEST);
   4556          #ifdef S2W_IPv6_SUPPORT
   4557             AppMainCtx_TaskNotify(APP_EVENT_DHCPv6_STOP_REQUEST);
   4558          #endif
   4559          	return;
   \                     ??DHCP_notify_3:
   \   000000A6   0xB027             ADD      SP,SP,#+156
   \   000000A8   0xBDF0             POP      {R4-R7,PC}       ;; return
   4560          
   4561          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine77:
   \   00000000   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x3050             ADDS     R0,R0,#+80
   \   00000008   0x.... 0x....      B.W      GsnNwIf_IpConfigGet
   4562          
   4563          

   \                                 In section .text, align 2, keep-with-next
   4564          void s2wDhcpv6Stop()
   4565          {
   4566            GsnNwIf_DhcpV6Stop(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     s2wDhcpv6Stop:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable413_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   0000000A   0x3050             ADDS     R0,R0,#+80
   \   0000000C   0x.... 0x....      B.W      GsnNwIf_DhcpV6Stop
   4567            
   4568          }
   4569          
   4570          
   4571          /**
   4572           ******************************************************************
   4573           * @ingroup S2w-Application
   4574           * @brief Process the ATZ Command. ATZ command reads the profile
   4575           *        from the flash.This function check the validity of the profile
   4576           *        id and update the flash.
   4577           * @param ptr Pointer to the user string.
   4578           * @return S2W_SUCCESS - operation successful.
   4579           * @retval S2W_EINVAL  - operation failure-invalid command.
   4580           * @retval S2W_FAILURE - operation failure-flash write failed.
   4581           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4582          PRIVATE UINT8
   4583          AppS2wCmd_read(UINT8 *ptr)
   4584          {
   \                     AppS2wCmd_read:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   4585              UINT8 profileNum;
   4586              UINT8 status;
   4587              
   4588              /* check the validity of parameter
   4589               */
   4590              status = AppS2wParse_Boolean(ptr, &profileNum);
   \   00000002   0x.... 0x....      BL       ?Subroutine60
   4591              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_383:
   \   00000006   0xB9A8             CBNZ.N   R0,??AppS2wCmd_read_0
   4592              {
   4593                  return status;
   4594              }
   4595              if(!s2wappMainTaskCtxt->fsInit)
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable413_2
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0xF248 0x1470      MOVW     R4,#+33136
   \   00000012   0x5C20             LDRB     R0,[R4, R0]
   \   00000014   0xB930             CBNZ.N   R0,??AppS2wCmd_read_1
   4596              {
   4597          		App_FsInit();
   \   00000016   0x.... 0x....      BL       App_FsInit
   4598          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   0000001A   0x6828             LDR      R0,[R5, #+0]
   \   0000001C   0x2101             MOVS     R1,#+1
   \   0000001E   0x5421             STRB     R1,[R4, R0]
   4599                  f_enterFS();
   \   00000020   0x.... 0x....      BL       fsm_enterFS
   4600          	}
   4601              status = S2w_LoadS2wProfile(&s2wCurrent,profileNum);
   \                     ??AppS2wCmd_read_1:
   \   00000024   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable413_1
   \   0000002C   0x.... 0x....      BL       S2w_LoadS2wProfile
   4602              
   4603               if(status != S2W_SUCCESS)
   \   00000030   0xB100             CBZ.N    R0,??AppS2wCmd_read_0
   4604                  status = S2W_FAILURE;
   \   00000032   0x2001             MOVS     R0,#+1
   4605                
   4606                return status;
   \                     ??AppS2wCmd_read_0:
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   4607          }
   4608          
   4609          
   4610          /**
   4611           ******************************************************************
   4612           * @ingroup S2w-Application
   4613           * @brief Process the AT&W Command. AT&W command writes the profile
   4614           *        to the flash.This function check the validity of the profile
   4615           *        id and update the flash.
   4616           * @param ptr Pointer to the user string.
   4617           * @return S2W_SUCCESS - operation successful.
   4618           * @retval S2W_EINVAL  - operation failure-invalid command.
   4619           * @retval S2W_FAILURE - operation failure-flash write failed.
   4620           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4621          PRIVATE UINT8
   4622          AppS2wCmd_Write(UINT8 *ptr)
   4623          {
   \                     AppS2wCmd_Write:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   4624              S2W_PROFILE_T *profile;
   4625              //UINT32 whatChanged;
   4626              UINT8 profileNum;
   4627              UINT8 status;
   4628          
   4629          
   4630              /* check the validity of parameter
   4631               */
   4632              status = AppS2wParse_Boolean(ptr, &profileNum);
   \   00000004   0x.... 0x....      BL       ?Subroutine60
   4633              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_382:
   \   00000008   0xBB60             CBNZ.N   R0,??AppS2wCmd_Write_0
   4634              {
   4635                  return status;
   4636              }
   4637          
   4638              profile = &s2wFlashParams->profile[profileNum];
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable413_9
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000012   0x6822             LDR      R2,[R4, #+0]
   \   00000014   0xF44F 0x717E      MOV      R1,#+1016
   \   00000018   0xFB01 0x2600      MLA      R6,R1,R0,R2
   4639              memcpy(profile, &s2wCurrent, sizeof(S2W_PROFILE_T));
   \   0000001C   0x460A             MOV      R2,R1
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable413_1
   \   00000022   0x.... 0x....      BL       ?Subroutine95
   4640          #ifdef S2W_NCM_SUPPORT_ENABLE
   4641          	if(profile->ncmAutoMgr)
   \                     ??CrossCallReturnLabel_504:
   \   00000026   0xF896 0x032A      LDRB     R0,[R6, #+810]
   \   0000002A   0x.... 0x....      LDR.W    R5,??DataTable413_2
   \   0000002E   0xB140             CBZ.N    R0,??AppS2wCmd_Write_1
   4642          	{
   4643          		profile->ncmAutoMgr = (s2wappMainTaskCtxt->ncmAutoConStoreProfile)?0:1;
   \   00000030   0x6829             LDR      R1,[R5, #+0]
   \   00000032   0xF247 0x5004      MOVW     R0,#+29956
   \   00000036   0x5C41             LDRB     R1,[R0, R1]
   \   00000038   0x1E48             SUBS     R0,R1,#+1
   \   0000003A   0x4180             SBCS     R0,R0,R0
   \   0000003C   0x0FC0             LSRS     R0,R0,#+31
   \   0000003E   0xF886 0x032A      STRB     R0,[R6, #+810]
   4644          	}
   4645          #endif
   4646              /* call the hal function to update the flash
   4647               */
   4648              // if it is a warm boot check the file system is initialized else initialize it...
   4649              if(!s2wappMainTaskCtxt->fsInit)
   \                     ??AppS2wCmd_Write_1:
   \   00000042   0xF248 0x1670      MOVW     R6,#+33136
   \   00000046   0x6828             LDR      R0,[R5, #+0]
   \   00000048   0x5C30             LDRB     R0,[R6, R0]
   \   0000004A   0xB920             CBNZ.N   R0,??CrossCallReturnLabel_534
   4650              {
   4651          		App_FsInit();
   \   0000004C   0x.... 0x....      BL       App_FsInit
   4652          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000050   0x6828             LDR      R0,[R5, #+0]
   \   00000052   0x.... 0x....      BL       ??Subroutine107_0
   4653                          f_enterFS();
   4654          	}
   4655                status = S2w_SaveS2wProfile(s2wFlashParams, profileNum);
   \                     ??CrossCallReturnLabel_534:
   \   00000056   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000005A   0x6820             LDR      R0,[R4, #+0]
   \   0000005C   0x.... 0x....      BL       S2w_SaveS2wProfile
   4656                if(status != S2W_SUCCESS)
   \   00000060   0xB100             CBZ.N    R0,??AppS2wCmd_Write_0
   4657                  status = S2W_FAILURE;
   \   00000062   0x2001             MOVS     R0,#+1
   4658                
   4659                return status;
   \                     ??AppS2wCmd_Write_0:
   \   00000064   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   4660          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine95:
   \   00000000   0x4630             MOV      R0,R6
   \   00000002   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine107:
   \   00000000   0x6838             LDR      R0,[R7, #+0]
   \                     ??Subroutine107_0:
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x5431             STRB     R1,[R6, R0]
   \   00000006   0x.... 0x....      B.W      fsm_enterFS
   4661          
   4662          #ifndef S2W_IP2WIFI_SUPPORT
   4663          /**
   4664           ******************************************************************
   4665           * @ingroup S2w-Application
   4666           * @brief Process the AT+NDHCP command
   4667           *   This function validate the parameter passed and call the hal function
   4668           *   to do ip configuration(DHCP or static ip).This function also updates the
   4669           *   dhcp flag of the active profile.
   4670           * @param ptr Pointer to the user input string.
   4671          
   4672           * @return S2W_SUCCESS - operation successful.
   4673           * @retval S2W_EINVAL  - operation failure-invalid command.
   4674           * @retval S2W_FAILURE - operation failure-ip config failed.
   4675           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4676          PRIVATE UINT8
   4677          AppS2wCmd_Ndhcp(UINT8 *ptr)
   4678          {
   \                     AppS2wCmd_Ndhcp:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   4679              UINT8 status;
   4680              UINT8 mode, *p, len,mac[6],macStr[GSN_NWIF_HOST_NAME_MAX_LEN + 1];
   4681              UINT32 radioMode;
   4682          
   4683              /* check the validity of parameter passed     */
   4684              p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_238:
   \   0000000A   0x0007             MOVS     R7,R0
   4685              if (!p)
   \   0000000C   0xD056             BEQ.N    ??AppS2wCmd_Ndhcp_0
   4686              {
   4687                  return S2W_EINVAL;
   4688              }
   4689              status = AppS2wParse_Boolean(p, &mode);
   \   0000000E   0xA902             ADD      R1,SP,#+8
   \   00000010   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000014   0x0007             MOVS     R7,R0
   4690              if (status != S2W_SUCCESS)
   \   00000016   0xD14C             BNE.N    ??AppS2wCmd_Ndhcp_1
   4691              {
   4692                  return status;
   4693              }
   4694              if(mode == 0)
   \   00000018   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable413_2
   \   00000020   0xF241 0x4450      MOVW     R4,#+5200
   \   00000024   0xB918             CBNZ.N   R0,??AppS2wCmd_Ndhcp_2
   4695              {
   4696                GsnNwIf_DhcpStop(&s2wappMainTaskCtxt->if0.nwifCtx);
   \   00000026   0x6828             LDR      R0,[R5, #+0]
   \   00000028   0x1820             ADDS     R0,R4,R0
   \   0000002A   0x.... 0x....      BL       GsnNwIf_DhcpStop
   4697              }
   4698              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ndhcp_2:
   \   0000002E   0x.... 0x....      BL       ?Subroutine43
   4699              if(p && (0 != strlen((const char *)p)))
   \                     ??CrossCallReturnLabel_237:
   \   00000032   0x.... 0x....      LDR.W    R8,??DataTable413_1
   \   00000036   0x0007             MOVS     R7,R0
   \   00000038   0xF508 0x76EE      ADD      R6,R8,#+476
   \   0000003C   0xD010             BEQ.N    ??AppS2wCmd_Ndhcp_3
   \   0000003E   0x.... 0x....      BL       strlen
   \   00000042   0xB168             CBZ.N    R0,??AppS2wCmd_Ndhcp_3
   4700              {
   4701                  len = strlen((const char *)p);
   \   00000044   0x.... 0x....      BL       ??Subroutine69_0
   \                     ??CrossCallReturnLabel_419:
   \   00000048   0xB2C0             UXTB     R0,R0
   4702                  if(len > GSN_NWIF_HOST_NAME_MAX_LEN)
   \   0000004A   0x2810             CMP      R0,#+16
   \   0000004C   0xDB03             BLT.N    ??AppS2wCmd_Ndhcp_4
   4703                  {
   4704                      return S2W_FAILURE;
   \   0000004E   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_Ndhcp_5:
   \   00000050   0xB00C             ADD      SP,SP,#+48
   \   00000052   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   4705                  }
   4706                  memcpy(s2wCurrent.hostName, p, (len + 1));
   \                     ??AppS2wCmd_Ndhcp_4:
   \   00000056   0x1C42             ADDS     R2,R0,#+1
   \   00000058   0x4639             MOV      R1,R7
   \   0000005A   0x.... 0x....      BL       ?Subroutine95
   4707              }
   \                     ??CrossCallReturnLabel_503:
   \   0000005E   0xE017             B.N      ??AppS2wCmd_Ndhcp_6
   4708               else
   4709              {
   4710                //S2w_LoadMacAddr(mac);
   4711                S2w_macAddrRTCGet(mac);
   \                     ??AppS2wCmd_Ndhcp_3:
   \   00000060   0x.... 0x....      BL       ?Subroutine32
   4712                sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
   \                     ??CrossCallReturnLabel_104:
   \   00000064   0xF89D 0x0015      LDRB     R0,[SP, #+21]
   \   00000068   0xF89D 0x3013      LDRB     R3,[SP, #+19]
   \   0000006C   0x.... 0x....      LDR.W    R1,??DataTable414
   \   00000070   0x9001             STR      R0,[SP, #+4]
   \   00000072   0x....             ADR.N    R2,??DataTable401  ;; "GS_"
   \   00000074   0xF89D 0x0014      LDRB     R0,[SP, #+20]
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0xA806             ADD      R0,SP,#+24
   \   0000007C   0x.... 0x....      BL       sprintf
   4713                memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
   \   00000080   0xA806             ADD      R0,SP,#+24
   \   00000082   0x.... 0x....      BL       strlen
   \   00000086   0x4602             MOV      R2,R0
   \   00000088   0xA906             ADD      R1,SP,#+24
   \   0000008A   0x4630             MOV      R0,R6
   \   0000008C   0x.... 0x....      BL       memcpy
   4714              }
   4715              
   4716              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ndhcp_6:
   \   00000090   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_236:
   \   00000094   0x4607             MOV      R7,R0
   4717              s2wCurrent.netConf.dhcpRadioMode = 0;/* Default mode - PS POLL*/
   \   00000096   0xF508 0x76C4      ADD      R6,R8,#+392
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x7070             STRB     R0,[R6, #+1]
   4718              if(p && (0 != strlen((const char *)p)))
   \   0000009E   0xB187             CBZ.N    R7,??AppS2wCmd_Ndhcp_7
   \   000000A0   0x.... 0x....      BL       ??Subroutine69_0
   \                     ??CrossCallReturnLabel_418:
   \   000000A4   0xB168             CBZ.N    R0,??AppS2wCmd_Ndhcp_7
   4719              {
   4720                  
   4721                  status = AppS2wParse_Int(p, &radioMode);
   \   000000A6   0xA903             ADD      R1,SP,#+12
   \   000000A8   0x4638             MOV      R0,R7
   \   000000AA   0x.... 0x....      BL       AppS2wParse_Int
   \   000000AE   0x0007             MOVS     R7,R0
   4722                  if (status != S2W_SUCCESS)
   \   000000B0   0xD001             BEQ.N    ??AppS2wCmd_Ndhcp_8
   4723                  {
   4724                      return status;
   \                     ??AppS2wCmd_Ndhcp_1:
   \   000000B2   0x4638             MOV      R0,R7
   \   000000B4   0xE7CC             B.N      ??AppS2wCmd_Ndhcp_5
   4725                  }
   4726                  if(radioMode >= 4)
   \                     ??AppS2wCmd_Ndhcp_8:
   \   000000B6   0x9803             LDR      R0,[SP, #+12]
   \   000000B8   0x2804             CMP      R0,#+4
   \   000000BA   0xD301             BCC.N    ??AppS2wCmd_Ndhcp_9
   4727                  {
   4728                      return S2W_EINVAL;
   \                     ??AppS2wCmd_Ndhcp_0:
   \   000000BC   0x2002             MOVS     R0,#+2
   \   000000BE   0xE7C7             B.N      ??AppS2wCmd_Ndhcp_5
   4729                  }
   4730                  s2wCurrent.netConf.dhcpRadioMode = (UINT8)radioMode;
   \                     ??AppS2wCmd_Ndhcp_9:
   \   000000C0   0x7070             STRB     R0,[R6, #+1]
   4731              } 
   4732              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ndhcp_7:
   \   000000C2   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_235:
   \   000000C6   0x0007             MOVS     R7,R0
   4733              if(p && (0 != strlen((const char *)p)))
   \   000000C8   0xD009             BEQ.N    ??AppS2wCmd_Ndhcp_10
   \   000000CA   0x.... 0x....      BL       strlen
   \   000000CE   0xB130             CBZ.N    R0,??AppS2wCmd_Ndhcp_10
   4734              {
   4735                  UINT32 leaseTime = 0;
   \   000000D0   0x.... 0x....      BL       ?Subroutine6
   4736                  status = AppS2wParse_Int(p, &leaseTime);
   \                     ??CrossCallReturnLabel_7:
   \   000000D4   0x0007             MOVS     R7,R0
   4737                  if (status != S2W_SUCCESS)
   \   000000D6   0xD10D             BNE.N    ??AppS2wCmd_Ndhcp_11
   4738                  {
   4739                      s2wCurrent.dhcpRequestLeaseTime = 0;
   4740                      return status;
   4741                  }
   4742                  s2wCurrent.dhcpRequestLeaseTime = leaseTime;
   \   000000D8   0x9800             LDR      R0,[SP, #+0]
   \   000000DA   0xF8C8 0x03C8      STR      R0,[R8, #+968]
   4743              }    
   4744              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ndhcp_10:
   \   000000DE   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_234:
   \   000000E2   0x0007             MOVS     R7,R0
   4745              if(p && (0 != strlen((const char *)p)))
   \   000000E4   0xD00D             BEQ.N    ??AppS2wCmd_Ndhcp_12
   \   000000E6   0x.... 0x....      BL       strlen
   \   000000EA   0xB150             CBZ.N    R0,??AppS2wCmd_Ndhcp_12
   4746              {
   4747                  UINT32 retransInterval = 0;
   \   000000EC   0x.... 0x....      BL       ?Subroutine6
   4748                  status = AppS2wParse_Int(p, &retransInterval);
   \                     ??CrossCallReturnLabel_6:
   \   000000F0   0x0007             MOVS     R7,R0
   4749                  if (status != S2W_SUCCESS)
   \   000000F2   0xD003             BEQ.N    ??AppS2wCmd_Ndhcp_13
   4750                  {
   4751                      s2wCurrent.dhcpRequestLeaseTime = 0;
   \                     ??AppS2wCmd_Ndhcp_11:
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0xF8C8 0x03C8      STR      R0,[R8, #+968]
   \   000000FA   0xE7DA             B.N      ??AppS2wCmd_Ndhcp_1
   4752                      return status;
   4753                  }
   4754                  s2wCurrent.dhcpRetryTimeout = retransInterval;
   \                     ??AppS2wCmd_Ndhcp_13:
   \   000000FC   0x9800             LDR      R0,[SP, #+0]
   \   000000FE   0xF8C8 0x03CC      STR      R0,[R8, #+972]
   4755              }
   4756              /* update the active profile
   4757               */
   4758              s2wCurrent.netConf.dhcp = mode;
   \                     ??AppS2wCmd_Ndhcp_12:
   \   00000102   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000106   0xF888 0x0188      STRB     R0,[R8, #+392]
   4759          
   4760          	status = AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
   \   0000010A   0xF508 0x70C4      ADD      R0,R8,#+392
   \   0000010E   0x.... 0x....      BL       AppS2wHal_NetworkConfig
   \   00000112   0x4607             MOV      R7,R0
   4761                   GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
   \   00000114   0x6828             LDR      R0,[R5, #+0]
   \   00000116   0x2200             MOVS     R2,#+0
   \   00000118   0xF508 0x71D4      ADD      R1,R8,#+424
   \   0000011C   0x1820             ADDS     R0,R4,R0
   \   0000011E   0x.... 0x....      BL       GsnNwif_DnsServerGet
   4762                   GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
   \   00000122   0x6828             LDR      R0,[R5, #+0]
   \   00000124   0x2201             MOVS     R2,#+1
   \   00000126   0xF508 0x71D6      ADD      R1,R8,#+428
   \   0000012A   0x1820             ADDS     R0,R4,R0
   \   0000012C   0x.... 0x....      BL       GsnNwif_DnsServerGet
   4763                if((status == S2W_SUCCESS) && (mode == 0))
   \   00000130   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   00000134   0x4338             ORRS     R0,R0,R7
   \   00000136   0xD101             BNE.N    ??CrossCallReturnLabel_605
   4764                {
   4765                   nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
   \   00000138   0x.... 0x....      BL       ?Subroutine130
   4766                }
   4767              
   4768           
   4769              //return status;
   4770          
   4771          		
   4772          #if 0
   4773              if (!L3ConnectStatus && (mode == 1))
   4774              {
   4775                  s2wCurrent.netConf.dhcp = oldDhcp;
   4776                  S2wL3Wait = FALSE;
   4777                  GsnNwIf_DhcpStop(&s2wappMainTaskCtxt->if0.nwifCtx);
   4778                  //GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   4779                  L3ConnectStatus = L3OldStatus;
   4780                  retVal = GsnNwif_IPv4Configure(&s2wappMainTaskCtxt->if0.nwifCtx,&DefaultConfig,NULL);
   4781                  return S2W_FAILURE;
   4782              }
   4783          #endif
   4784              S2wL3Wait = FALSE;
   \                     ??CrossCallReturnLabel_605:
   \   0000013C   0x.... 0x....      LDR.W    R0,??DataTable413_3
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x6041             STR      R1,[R0, #+4]
   \   00000144   0xE7B5             B.N      ??AppS2wCmd_Ndhcp_1
   4785              return status;
   4786          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0xA80B             ADD      R0,SP,#+44
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x4638             MOV      R0,R7
   \   00000008   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine130:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable476_1
   \   00000006   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000000A   0x.... 0x....      B.W      _nxe_arp_gratuitous_send
   4787          
   4788          #endif
   4789          
   4790          
   4791          /**
   4792           ******************************************************************
   4793           * @ingroup S2w-Application
   4794           * @brief Process the AT+NSET command parameters.
   4795           *   This function check the validty if input parameters(ip addres,
   4796           *   subnet mask,gateway) and call the hal ip config function to configure
   4797           *   the static IP.
   4798           * @param ptr pointer to the char string which holds the arguments.
   4799          
   4800           * @return S2W_SUCCESS - operation successful.
   4801           * @retval S2W_EINVAL  - operation failure-invalid command.
   4802           * @retval S2W_FAILURE - operation failure-Ip config failed.
   4803           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4804          PRIVATE UINT8
   4805          AppS2wCmd_Nset(UINT8 *ptr)
   4806          {
   \                     AppS2wCmd_Nset:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB0B5             SUB      SP,SP,#+212
   4807              UINT8 *p;
   4808              UINT8 status;
   4809              GSN_STATUS  retval;
   4810              GSN_NWIF_IPv4_CONFIG_T UsrIPv4Cfg;
   4811              S2W_IPADDR_T ipAddr;
   4812              S2W_IPADDR_T subNetmask;
   4813              GSN_NWIF_IP_CONFIG_T ipConfig;
   4814              
   4815              memset(&UsrIPv4Cfg,0,sizeof(GSN_NWIF_IPv4_CONFIG_T));
   \   00000004   0x2230             MOVS     R2,#+48
   \   00000006   0x.... 0x....      BL       ?Subroutine16
   4816             
   4817              UsrIPv4Cfg.staticIp = 1;
   \                     ??CrossCallReturnLabel_31:
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9002             STR      R0,[SP, #+8]
   4818              
   4819               if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000000E   0xA835             ADD      R0,SP,#+212
   \   00000010   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD052             BEQ.N    ??AppS2wCmd_Nset_0
   4820            {
   4821                status = AppS2wParse_Ip(p,ipAddr);
   \   00000018   0x.... 0x....      BL       ?Subroutine64
   4822                
   4823          	if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_400:
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD14F             BNE.N    ??AppS2wCmd_Nset_1
   4824          	{
   4825                    return status;
   4826          	}
   4827          
   4828                  UsrIPv4Cfg.ipAddr = (ipAddr[0] << 24 | ipAddr[1] << 16 | ipAddr[2] << 8 | ipAddr[3] );
   \   00000020   0xAC00             ADD      R4,SP,#+0
   \   00000022   0x7861             LDRB     R1,[R4, #+1]
   \   00000024   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000028   0x0409             LSLS     R1,R1,#+16
   \   0000002A   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000002E   0x78A1             LDRB     R1,[R4, #+2]
   \   00000030   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000034   0x78E1             LDRB     R1,[R4, #+3]
   \   00000036   0x4308             ORRS     R0,R1,R0
   \   00000038   0x9003             STR      R0,[SP, #+12]
   4829                  
   4830            }
   4831            else
   4832              return S2W_EINVAL;
   4833          
   4834             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000003A   0xA835             ADD      R0,SP,#+212
   \   0000003C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xD03C             BEQ.N    ??AppS2wCmd_Nset_0
   4835            {
   4836              
   4837              status = AppS2wParse_Ip(p,subNetmask);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x.... 0x....      BL       AppS2wParse_Ip
   4838          	if (status != S2W_SUCCESS)
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD138             BNE.N    ??AppS2wCmd_Nset_1
   4839          	{
   4840                    return status;
   4841          	}
   4842              
   4843                   UsrIPv4Cfg.subnetMask = (subNetmask[0] << 24 | subNetmask[1] << 16 | subNetmask[2] << 8 | subNetmask[3] );
   \   0000004E   0xA801             ADD      R0,SP,#+4
   \   00000050   0x7842             LDRB     R2,[R0, #+1]
   \   00000052   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000056   0x0412             LSLS     R2,R2,#+16
   \   00000058   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   0000005C   0x7882             LDRB     R2,[R0, #+2]
   \   0000005E   0x78C0             LDRB     R0,[R0, #+3]
   \   00000060   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000064   0x4308             ORRS     R0,R0,R1
   \   00000066   0x9004             STR      R0,[SP, #+16]
   4844          
   4845            }
   4846              else
   4847              return S2W_EINVAL;
   4848            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000068   0xA835             ADD      R0,SP,#+212
   \   0000006A   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000006E   0xB330             CBZ.N    R0,??AppS2wCmd_Nset_0
   4849            {
   4850              
   4851                  status = AppS2wParse_Ip(p,ipAddr);
   \   00000070   0x.... 0x....      BL       ?Subroutine64
   4852          
   4853          	if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_399:
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD123             BNE.N    ??AppS2wCmd_Nset_1
   4854          	{
   4855                    return status;
   4856          	}
   4857                  
   4858                  UsrIPv4Cfg.gatewayIpAddr = (ipAddr[0] << 24 | ipAddr[1] << 16 | ipAddr[2] << 8 | ipAddr[3] );
   \   00000078   0x7861             LDRB     R1,[R4, #+1]
   \   0000007A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000007E   0x0409             LSLS     R1,R1,#+16
   \   00000080   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000084   0x78A1             LDRB     R1,[R4, #+2]
   \   00000086   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   0000008A   0x78E1             LDRB     R1,[R4, #+3]
   \   0000008C   0x4308             ORRS     R0,R1,R0
   \   0000008E   0x9005             STR      R0,[SP, #+20]
   4859            }
   4860            else
   4861              return S2W_EINVAL;
   4862            
   4863                /* Check for valid IP address */
   4864              if(((UsrIPv4Cfg.ipAddr & 0xFFFFFF00) == 0xFFFFFF00) || (UsrIPv4Cfg.ipAddr == 0x00000000))
   \   00000090   0xF06F 0x01FF      MVN      R1,#+255
   \   00000094   0x9803             LDR      R0,[SP, #+12]
   \   00000096   0x0A02             LSRS     R2,R0,#+8
   \   00000098   0x0212             LSLS     R2,R2,#+8
   \   0000009A   0x428A             CMP      R2,R1
   \   0000009C   0xBF18             IT       NE 
   \   0000009E   0x2800             CMPNE    R0,#+0
   \   000000A0   0xD00D             BEQ.N    ??AppS2wCmd_Nset_0
   4865              {
   4866                  return S2W_EINVAL;
   4867              }
   4868              
   4869                /*check for valid broadcast address */
   4870              if(((UsrIPv4Cfg.subnetMask & 0xFF000000) != 0xFF000000) || (UsrIPv4Cfg.subnetMask == 0x00000000))
   \   000000A2   0x9804             LDR      R0,[SP, #+16]
   \   000000A4   0xF000 0x427F      AND      R2,R0,#0xFF000000
   \   000000A8   0xF112 0x7F80      CMN      R2,#+16777216
   \   000000AC   0xD107             BNE.N    ??AppS2wCmd_Nset_0
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xBF1F             ITTTT    NE 
   \   000000B2   0x9805             LDRNE    R0,[SP, #+20]
   \   000000B4   0x0A02             LSRNE    R2,R0,#+8
   \   000000B6   0x0212             LSLNE    R2,R2,#+8
   \   000000B8   0x428A             CMPNE    R2,R1
   4871                  return S2W_EINVAL;
   4872          
   4873              /*  check for valid gateway Address  */
   4874              if(((UsrIPv4Cfg.gatewayIpAddr & 0xFFFFFF00) == 0xFFFFFF00 ) || (UsrIPv4Cfg.gatewayIpAddr == 0x00000000))
   \   000000BA   0xD000             BEQ.N    ??AppS2wCmd_Nset_0
   \   000000BC   0xB908             CBNZ.N   R0,??AppS2wCmd_Nset_2
   4875                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Nset_0:
   \   000000BE   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_Nset_1:
   \   000000C0   0xE07F             B.N      ??AppS2wCmd_Nset_3
   4876          
   4877              
   4878              ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
   \                     ??AppS2wCmd_Nset_2:
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xF88D 0x0038      STRB     R0,[SP, #+56]
   4879              /* call GSN ip config function to configure the static IP
   4880               */
   4881                ipConfig.ipv4 = UsrIPv4Cfg;
   \   000000C8   0xA902             ADD      R1,SP,#+8
   \   000000CA   0xA810             ADD      R0,SP,#+64
   \   000000CC   0x2230             MOVS     R2,#+48
   \   000000CE   0x.... 0x....      BL       __aeabi_memcpy4
   4882                retval = GsnNwif_IPv4Configure(&s2wappMainTaskCtxt->if0.nwifCtx, &UsrIPv4Cfg, NULL);
   \   000000D2   0x.... 0x....      LDR.W    R5,??DataTable413_2
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xF241 0x4450      MOVW     R4,#+5200
   \   000000DC   0x2200             MOVS     R2,#+0
   \   000000DE   0xA902             ADD      R1,SP,#+8
   \   000000E0   0x1820             ADDS     R0,R4,R0
   \   000000E2   0x.... 0x....      BL       GsnNwif_IPv4Configure
   4883                if(GSN_NW_IF_CLOSED == retval)
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable416  ;; 0xc0000203
   \   000000EA   0x4288             CMP      R0,R1
   \   000000EC   0xD105             BNE.N    ??AppS2wCmd_Nset_4
   4884                {
   4885                    retval = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, NULL);
   \   000000EE   0x6828             LDR      R0,[R5, #+0]
   \   000000F0   0x2200             MOVS     R2,#+0
   \   000000F2   0xA90E             ADD      R1,SP,#+56
   \   000000F4   0x1820             ADDS     R0,R4,R0
   \   000000F6   0x.... 0x....      BL       GsnNwIf_Open
   4886                }	
   4887                if(retval != GSN_SUCCESS )
   \                     ??AppS2wCmd_Nset_4:
   \   000000FA   0xB108             CBZ.N    R0,??AppS2wCmd_Nset_5
   4888          	    return S2W_FAILURE;
   \   000000FC   0x2001             MOVS     R0,#+1
   \   000000FE   0xE060             B.N      ??AppS2wCmd_Nset_3
   4889               
   4890          	if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
   \                     ??AppS2wCmd_Nset_5:
   \   00000100   0x6828             LDR      R0,[R5, #+0]
   \   00000102   0x.... 0x....      LDR.W    R6,??DataTable413_1
   \   00000106   0xF500 0x40ED      ADD      R0,R0,#+30336
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0xB358             CBZ.N    R0,??AppS2wCmd_Nset_6
   4891          	{
   4892          		UINT32 ipaddr=0;
   4893          		memcpy((UINT8*)&s2wCurrent.lmtdApConf.ipAddress,&UsrIPv4Cfg.ipAddr,4);
   \   0000010E   0xF506 0x7423      ADD      R4,R6,#+652
   \   00000112   0x2204             MOVS     R2,#+4
   \   00000114   0x.... 0x....      BL       ?Subroutine117
   4894          		memcpy((UINT8*)&s2wCurrent.lmtdApConf.subnetmask,&UsrIPv4Cfg.subnetMask,4);
   \                     ??CrossCallReturnLabel_562:
   \   00000118   0x2204             MOVS     R2,#+4
   \   0000011A   0xA904             ADD      R1,SP,#+16
   \   0000011C   0xF506 0x7024      ADD      R0,R6,#+656
   \   00000120   0x.... 0x....      BL       memcpy
   4895          		memcpy((UINT8*)&s2wCurrent.lmtdApConf.gateway,&UsrIPv4Cfg.gatewayIpAddr,4);
   \   00000124   0x2204             MOVS     R2,#+4
   \   00000126   0xA905             ADD      R1,SP,#+20
   \   00000128   0xF506 0x7025      ADD      R0,R6,#+660
   \   0000012C   0x.... 0x....      BL       memcpy
   4896          		ipaddr = htonl(s2wCurrent.lmtdApConf.ipAddress) + 1;
   \   00000130   0xF8D6 0x028C      LDR      R0,[R6, #+652]
   \   00000134   0x0A01             LSRS     R1,R0,#+8
   \   00000136   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000013A   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000013E   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000142   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000146   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000014A   0x1C40             ADDS     R0,R0,#+1
   4897          		s2wCurrent.lmtdApConf.dhcpAddressStart = ntohl(ipaddr);//s2wCurrent.lmtdApConf.ipAddress + 1;
   \   0000014C   0x0A01             LSRS     R1,R0,#+8
   \   0000014E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000152   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000156   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   0000015A   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000015E   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000162   0x6120             STR      R0,[R4, #+16]
   \   00000164   0xE022             B.N      ??AppS2wCmd_Nset_7
   4898          	}
   4899          	else
   4900          	{
   4901                 /* update the active profile paramater  */
   4902          
   4903                  s2wCurrent.netConf.dhcp = 0;
   \                     ??AppS2wCmd_Nset_6:
   \   00000166   0xF886 0x0188      STRB     R0,[R6, #+392]
   4904                  
   4905                  memcpy(&s2wCurrent.netConf.ipAddr,&UsrIPv4Cfg.ipAddr,4);
   \   0000016A   0x2204             MOVS     R2,#+4
   \   0000016C   0xA903             ADD      R1,SP,#+12
   \   0000016E   0xF506 0x70C6      ADD      R0,R6,#+396
   \   00000172   0x.... 0x....      BL       memcpy
   4906                  memcpy(&s2wCurrent.netConf.netMask,&UsrIPv4Cfg.subnetMask,4);
   \   00000176   0x2204             MOVS     R2,#+4
   \   00000178   0xA904             ADD      R1,SP,#+16
   \   0000017A   0xF506 0x70C8      ADD      R0,R6,#+400
   \   0000017E   0x.... 0x....      BL       memcpy
   4907                  memcpy(&s2wCurrent.netConf.gateway,&UsrIPv4Cfg.gatewayIpAddr,4);
   \   00000182   0x2204             MOVS     R2,#+4
   \   00000184   0xA905             ADD      R1,SP,#+20
   \   00000186   0xF506 0x70CA      ADD      R0,R6,#+404
   \   0000018A   0x.... 0x....      BL       memcpy
   4908          		if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
   \   0000018E   0x7930             LDRB     R0,[R6, #+4]
   \   00000190   0x2802             CMP      R0,#+2
   \   00000192   0xD10B             BNE.N    ??AppS2wCmd_Nset_7
   4909          		{
   4910          			memset(&s2wCurrent.dns1,0,sizeof(S2W_IPADDR_T));
   \   00000194   0x2204             MOVS     R2,#+4
   \   00000196   0x2100             MOVS     R1,#+0
   \   00000198   0xF506 0x70D4      ADD      R0,R6,#+424
   \   0000019C   0x.... 0x....      BL       memset
   4911          			memset(&s2wCurrent.dns2,0,sizeof(S2W_IPADDR_T));
   \   000001A0   0x2204             MOVS     R2,#+4
   \   000001A2   0x2100             MOVS     R1,#+0
   \   000001A4   0xF506 0x70D6      ADD      R0,R6,#+428
   \   000001A8   0x.... 0x....      BL       memset
   4912          		}
   4913              
   4914          	}   
   4915                  if(s2wLinkState != S2W_LINK_STATE_DISCONNECTED)
   \                     ??AppS2wCmd_Nset_7:
   \   000001AC   0x.... 0x....      LDR.W    R0,??DataTable409_4
   \   000001B0   0x7800             LDRB     R0,[R0, #+0]
   \   000001B2   0xB128             CBZ.N    R0,??AppS2wCmd_Nset_8
   4916                  {
   4917                    L3ConnectStatus = TRUE;
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable413_3
   \   000001B8   0x2101             MOVS     R1,#+1
   \   000001BA   0x7041             STRB     R1,[R0, #+1]
   4918                    AppS2wHdrAndIpv4_Print();
   \   000001BC   0x.... 0x....      BL       AppS2wHdrAndIpv4_Print
   4919                  }
   4920                return S2W_SUCCESS;
   \                     ??AppS2wCmd_Nset_8:
   \   000001C0   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nset_3:
   \   000001C2   0xB036             ADD      SP,SP,#+216
   \   000001C4   0xBD70             POP      {R4-R6,PC}       ;; return
   4921          
   4922          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine117:
   \   00000000   0xA903             ADD      R1,SP,#+12
   \                     ??Subroutine117_0:
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine64:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Ip
   4923          
   4924          
   4925          /**
   4926           ******************************************************************
   4927           * @ingroup S2w-Application
   4928           * @brief Process the AT+NMAC command
   4929           *   This function check the validity of the mac address passed and
   4930           *   call the hal function to configure the mac address.
   4931           *   This function returns the mac address configured if the parameter
   4932           *   is '?'.
   4933           * @param ptr pointer to the char string which holds the arguments.
   4934           *
   4935           * @return S2W_SUCCESS - operation successful.
   4936           * @retval S2W_EINVAL  - operation failure-invalid command.
   4937           * @retval S2W_FAILURE - operation failure-MAC configuration failed.
   4938           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   4939          PRIVATE UINT8
   4940          AppS2wCmd_Nmac(UINT8 *ptr)
   4941          {
   \                     AppS2wCmd_Nmac:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   4942              UINT8 macAddr[S2W_MAC_ADDR_SIZE];
   4943              UINT8 status;
   4944          
   4945              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable413_1
   \   0000000A   0xF205 0x240D      ADDW     R4,R5,#+525
   \   0000000E   0x293F             CMP      R1,#+63
   \   00000010   0xBF04             ITT      EQ 
   \   00000012   0x7841             LDRBEQ   R1,[R0, #+1]
   \   00000014   0x2900             CMPEQ    R1,#+0
   \   00000016   0xD11C             BNE.N    ??AppS2wCmd_Nmac_0
   4946              {
   4947                  /* get the mac address and send it on serial interface
   4948                   */
   4949                  if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
   \   00000018   0x7928             LDRB     R0,[R5, #+4]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD103             BNE.N    ??AppS2wCmd_Nmac_1
   4950                  {
   4951                    //status = S2w_LoadMacAddr(macAddr);
   4952                    S2w_macAddrRTCGet(macAddr);
   \   0000001E   0xA803             ADD      R0,SP,#+12
   \   00000020   0x.... 0x....      BL       S2w_macAddrRTCGet
   \   00000024   0xE002             B.N      ??CrossCallReturnLabel_565
   4953          
   4954          		}
   4955          		else
   4956          		{
   4957          			memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array, 6);
   \                     ??AppS2wCmd_Nmac_1:
   \   00000026   0x2206             MOVS     R2,#+6
   \   00000028   0x.... 0x....      BL       ?Subroutine118
   4958          		}
   4959          
   4960                  S2w_Printf("\r\n%02x:%02x:%02x:%02x:%02x:%02x",
   4961                          macAddr[0], macAddr[1],
   4962                          macAddr[2], macAddr[3],
   4963                          macAddr[4], macAddr[5]);
   \                     ??CrossCallReturnLabel_565:
   \   0000002C   0xF89D 0x1011      LDRB     R1,[SP, #+17]
   \   00000030   0x9102             STR      R1,[SP, #+8]
   \   00000032   0xA803             ADD      R0,SP,#+12
   \   00000034   0x7901             LDRB     R1,[R0, #+4]
   \   00000036   0xF89D 0x300E      LDRB     R3,[SP, #+14]
   \   0000003A   0x7842             LDRB     R2,[R0, #+1]
   \   0000003C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`
   \   00000040   0x9101             STR      R1,[SP, #+4]
   \   00000042   0xF89D 0x100F      LDRB     R1,[SP, #+15]
   \   00000046   0x9100             STR      R1,[SP, #+0]
   \   00000048   0xF89D 0x100C      LDRB     R1,[SP, #+12]
   \   0000004C   0x.... 0x....      BL       S2w_Printf
   4964          
   4965                   return S2W_SUCCESS;
   \   00000050   0xE032             B.N      ??AppS2wCmd_Nmac_2
   4966              }
   4967          
   4968              /* check the mac address passed is valid
   4969               */
   4970              status = AppS2wParse_Mac(ptr, macAddr);
   \                     ??AppS2wCmd_Nmac_0:
   \   00000052   0xA903             ADD      R1,SP,#+12
   \   00000054   0x.... 0x....      BL       AppS2wParse_Mac
   4971              if (status != S2W_SUCCESS)
   \   00000058   0xBB78             CBNZ.N   R0,??AppS2wCmd_Nmac_3
   4972              {
   4973                  return status;
   4974              }
   4975          
   4976              /* Call the hal function to configure the mac address
   4977               */
   4978              status = AppS2wHal_MacAddrSet(macAddr, TRUE);
   4979              if (status != S2W_SUCCESS)
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0xA803             ADD      R0,SP,#+12
   \   0000005E   0x.... 0x....      BL       AppS2wHal_MacAddrSet
   \   00000062   0xB108             CBZ.N    R0,??AppS2wCmd_Nmac_4
   4980              {
   4981                  return S2W_FAILURE;
   \   00000064   0x2001             MOVS     R0,#+1
   \   00000066   0xE028             B.N      ??AppS2wCmd_Nmac_3
   4982              }
   4983              // depends on the mode configured store to the sta/ap mac
   4984              if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
   \                     ??AppS2wCmd_Nmac_4:
   \   00000068   0x.... 0x....      LDR.W    R7,??DataTable413_2
   \   0000006C   0x7929             LDRB     R1,[R5, #+4]
   \   0000006E   0x6838             LDR      R0,[R7, #+0]
   \   00000070   0xF248 0x1670      MOVW     R6,#+33136
   \   00000074   0x2901             CMP      R1,#+1
   \   00000076   0x5C30             LDRB     R0,[R6, R0]
   \   00000078   0xD10B             BNE.N    ??AppS2wCmd_Nmac_5
   4985              {
   4986                  if(!s2wappMainTaskCtxt->fsInit)
   \   0000007A   0xB918             CBNZ.N   R0,??CrossCallReturnLabel_538
   4987                  {
   4988                     App_FsInit();
   \   0000007C   0x.... 0x....      BL       App_FsInit
   4989                     s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000080   0x.... 0x....      BL       ?Subroutine107
   4990                     f_enterFS();
   4991                  }
   4992            S2w_SaveMacAddr(macAddr);
   \                     ??CrossCallReturnLabel_538:
   \   00000084   0xA803             ADD      R0,SP,#+12
   \   00000086   0x.... 0x....      BL       S2w_SaveMacAddr
   4993                  S2w_macAddrRTCSet(macAddr); // set in the rtc also
   \   0000008A   0xA803             ADD      R0,SP,#+12
   \   0000008C   0x.... 0x....      BL       S2w_macAddrRTCSet
   \   00000090   0xE00D             B.N      ??CrossCallReturnLabel_561
   4994          	}
   4995          	else
   4996          	{
   4997                  if(!s2wappMainTaskCtxt->fsInit)
   \                     ??AppS2wCmd_Nmac_5:
   \   00000092   0xB930             CBNZ.N   R0,??AppS2wCmd_Nmac_6
   4998                  {
   4999                     App_FsInit();
   \   00000094   0x.... 0x....      BL       App_FsInit
   5000                     s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000098   0x2101             MOVS     R1,#+1
   \   0000009A   0x6838             LDR      R0,[R7, #+0]
   \   0000009C   0x5431             STRB     R1,[R6, R0]
   5001                     f_enterFS();
   \   0000009E   0x.... 0x....      BL       fsm_enterFS
   5002                  }
   5003          		 S2w_SaveApMacAddr(macAddr);
   \                     ??AppS2wCmd_Nmac_6:
   \   000000A2   0xA803             ADD      R0,SP,#+12
   \   000000A4   0x.... 0x....      BL       S2w_SaveApMacAddr
   5004          		 memcpy(s2wCurrent.lmtdApConf.macAddr.array, macAddr,6);
   \   000000A8   0x2206             MOVS     R2,#+6
   \   000000AA   0x.... 0x....      BL       ?Subroutine117
   5005          	}
   5006                
   5007              /* after mac configuration disassociate in case of station mode
   5008               */
   5009              if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
   \                     ??CrossCallReturnLabel_561:
   \   000000AE   0x7928             LDRB     R0,[R5, #+4]
   \   000000B0   0x2801             CMP      R0,#+1
   \   000000B2   0xBF08             IT       EQ 
   \   000000B4   0x.... 0x....      BLEQ     AppS2w_HangUp
   5010          	{
   5011              AppS2w_HangUp();
   5012          	}
   5013              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Nmac_2:
   \   000000B8   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nmac_3:
   \   000000BA   0xB005             ADD      SP,SP,#+20
   \   000000BC   0xBDF0             POP      {R4-R7,PC}       ;; return
   5014          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine118:
   \   00000000   0x4621             MOV      R1,R4
   \                     ??Subroutine118_0:
   \   00000002   0xA803             ADD      R0,SP,#+12
   \   00000004   0x.... 0x....      B.W      memcpy
   5015          
   5016          
   5017          
   5018          
   5019          #ifdef S2W_UART_ENABLE
   5020          /**
   5021           ******************************************************************
   5022           * @ingroup S2w-Application
   5023           * @brief Process the ATB Command.
   5024           *   This function validate the parameter passed and call the hal uart
   5025           *   configuration function to configure the uart with the valid parameters
   5026           *   passed.
   5027           * @param ptr Pointer to the user input string.
   5028           * @return S2W_SUCCESS - operation successful.
   5029           * @retval S2W_EINVAL  - operation failure-invalid command.
   5030           * @retval S2W_FAILURE - operation failure-uart configuration failed.
   5031           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5032          PRIVATE UINT8
   5033          AppS2wCmd_BaudRate(UINT8 *ptr)
   5034          {
   \                     AppS2wCmd_BaudRate:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   5035          
   5036              S2W_SERIAL_PORT_CONF_T params;
   5037              UINT32 temp;
   5038              UINT8 status;
   5039              UINT8 *p;
   5040          
   5041          
   5042              memcpy(&params, &s2wCurrent.serialPortConf, sizeof(params));
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable417
   \   00000008   0x2214             MOVS     R2,#+20
   \   0000000A   0x4621             MOV      R1,R4
   \   0000000C   0xA801             ADD      R0,SP,#+4
   \   0000000E   0x.... 0x....      BL       memcpy
   5043          
   5044              /* Get the first parameter- baud rate
   5045               */
   5046              p = AppS2wParse_NextParamGet(&ptr);
   \   00000012   0x.... 0x....      BL       ?Subroutine42
   5047              if (!p)
   \                     ??CrossCallReturnLabel_233:
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xD048             BEQ.N    ??AppS2wCmd_BaudRate_0
   5048              {
   5049                  return S2W_EINVAL;
   5050              }
   5051          
   5052              /* validate the baude rate
   5053               */
   5054              status = AppS2wParse_Int(p, &temp);
   \   0000001A   0x.... 0x....      BL       ?Subroutine51
   5055              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_304:
   \   0000001E   0x2800             CMP      R0,#+0
   \   00000020   0xD158             BNE.N    ??AppS2wCmd_BaudRate_1
   5056              {
   5057                  return status;
   5058              }
   5059          
   5060              if (!temp)
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD041             BEQ.N    ??AppS2wCmd_BaudRate_0
   5061              {
   5062                  return S2W_EINVAL;
   5063              }
   5064          
   5065              params.conf.uart.baudrate= temp;
   \   00000028   0x9003             STR      R0,[SP, #+12]
   5066          
   5067              /* get the 2nd parameter-bits per char
   5068               */
   5069              p = AppS2wParse_NextParamGet(&ptr);
   \   0000002A   0x.... 0x....      BL       ?Subroutine42
   5070              if (p && *p)
   \                     ??CrossCallReturnLabel_232:
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xBF1C             ITT      NE 
   \   00000032   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000034   0x2900             CMPNE    R1,#+0
   \   00000036   0xD00B             BEQ.N    ??AppS2wCmd_BaudRate_2
   5071              {
   5072                  status = AppS2wParse_Int(p, &temp);
   \   00000038   0x.... 0x....      BL       ?Subroutine51
   5073                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_303:
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD149             BNE.N    ??AppS2wCmd_BaudRate_1
   5074                  {
   5075                      return status;
   5076                  }
   5077          
   5078          #if (S2W_UARTCONF_BITS_5 != 0) || (S2W_UARTCONF_BITS_8 != 3)
   5079          #error Fix bits macros
   5080          #endif
   5081          
   5082                  if (temp < 5 || temp > 8)
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0x1F40             SUBS     R0,R0,#+5
   \   00000044   0x2804             CMP      R0,#+4
   \   00000046   0xD231             BCS.N    ??AppS2wCmd_BaudRate_0
   5083                  {
   5084                      return S2W_EINVAL;
   5085                  }
   5086          
   5087                  params.conf.uart.bits = temp - 5;
   \   00000048   0x9902             LDR      R1,[SP, #+8]
   \   0000004A   0xF360 0x0101      BFI      R1,R0,#+0,#+2
   \   0000004E   0x9102             STR      R1,[SP, #+8]
   5088              }
   5089          
   5090              /* get the 3rd parameter-parity
   5091               */
   5092              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_BaudRate_2:
   \   00000050   0x.... 0x....      BL       ?Subroutine42
   5093              if (p && *p)
   \                     ??CrossCallReturnLabel_231:
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xBF1C             ITT      NE 
   \   00000058   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000005A   0x2900             CMPNE    R1,#+0
   \   0000005C   0xD017             BEQ.N    ??AppS2wCmd_BaudRate_3
   5094              {
   5095                  if (p[1] != '\0')
   \   0000005E   0x7840             LDRB     R0,[R0, #+1]
   \   00000060   0xBB20             CBNZ.N   R0,??AppS2wCmd_BaudRate_0
   5096                  {
   5097                      return S2W_EINVAL;
   5098                  }
   5099          
   5100                  switch (toupper(*p))
   \   00000062   0x4608             MOV      R0,R1
   \   00000064   0x.... 0x....      BL       toupper
   \   00000068   0x2845             CMP      R0,#+69
   \   0000006A   0xD00B             BEQ.N    ??AppS2wCmd_BaudRate_4
   \   0000006C   0x284E             CMP      R0,#+78
   \   0000006E   0xD002             BEQ.N    ??AppS2wCmd_BaudRate_5
   \   00000070   0x284F             CMP      R0,#+79
   \   00000072   0xD005             BEQ.N    ??AppS2wCmd_BaudRate_6
   \   00000074   0xE01A             B.N      ??AppS2wCmd_BaudRate_0
   5101                  {
   5102                      case 'N':
   5103                      params.conf.uart.parity= S2W_UARTCONF_PARITY_NONE;
   \                     ??AppS2wCmd_BaudRate_5:
   \   00000076   0x9802             LDR      R0,[SP, #+8]
   \   00000078   0xF020 0x0038      BIC      R0,R0,#0x38
   \   0000007C   0x9002             STR      R0,[SP, #+8]
   5104                      break;
   \   0000007E   0xE006             B.N      ??AppS2wCmd_BaudRate_3
   5105          
   5106                      case 'O':
   5107                      params.conf.uart.parity = S2W_UARTCONF_PARITY_ODD;
   \                     ??AppS2wCmd_BaudRate_6:
   \   00000080   0x2001             MOVS     R0,#+1
   \   00000082   0xE000             B.N      ??AppS2wCmd_BaudRate_7
   5108                      break;
   5109          
   5110                      case 'E':
   5111                      params.conf.uart.parity = S2W_UARTCONF_PARITY_EVEN;
   \                     ??AppS2wCmd_BaudRate_4:
   \   00000084   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_BaudRate_7:
   \   00000086   0x9902             LDR      R1,[SP, #+8]
   \   00000088   0xF360 0x01C5      BFI      R1,R0,#+3,#+3
   \   0000008C   0x9102             STR      R1,[SP, #+8]
   5112                      break;
   5113          
   5114                      default:
   5115                      return S2W_EINVAL;
   5116                  }
   5117              }
   5118          
   5119              /* get the 4th parameter- stop bits
   5120               */
   5121              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_BaudRate_3:
   \   0000008E   0x.... 0x....      BL       ?Subroutine42
   5122              if (p && *p)
   \                     ??CrossCallReturnLabel_230:
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xBF1C             ITT      NE 
   \   00000096   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000098   0x2900             CMPNE    R1,#+0
   \   0000009A   0xD012             BEQ.N    ??AppS2wCmd_BaudRate_8
   5123              {
   5124                  status = AppS2wParse_Int(p, &temp);
   \   0000009C   0x.... 0x....      BL       ?Subroutine51
   5125                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_302:
   \   000000A0   0xB9C0             CBNZ.N   R0,??AppS2wCmd_BaudRate_1
   5126                  {
   5127                      return status;
   5128                  }
   5129          
   5130                  if (temp != 1 && temp != 2)
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x2801             CMP      R0,#+1
   \   000000A6   0xD003             BEQ.N    ??AppS2wCmd_BaudRate_9
   \   000000A8   0x2802             CMP      R0,#+2
   \   000000AA   0xD003             BEQ.N    ??AppS2wCmd_BaudRate_10
   5131                  {
   5132                      return S2W_EINVAL;
   \                     ??AppS2wCmd_BaudRate_0:
   \   000000AC   0x2002             MOVS     R0,#+2
   \   000000AE   0xE011             B.N      ??AppS2wCmd_BaudRate_1
   5133                  }
   5134          
   5135                  params.conf.uart.stop = temp == 1 ?
   5136                            S2W_UARTCONF_STOP_1 : S2W_UARTCONF_STOP_2;
   5137              }
   \                     ??AppS2wCmd_BaudRate_9:
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xE000             B.N      ??AppS2wCmd_BaudRate_11
   \                     ??AppS2wCmd_BaudRate_10:
   \   000000B4   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_BaudRate_11:
   \   000000B6   0x9902             LDR      R1,[SP, #+8]
   \   000000B8   0xF021 0x0104      BIC      R1,R1,#0x4
   \   000000BC   0xEA41 0x0080      ORR      R0,R1,R0, LSL #+2
   \   000000C0   0x9002             STR      R0,[SP, #+8]
   5138          
   5139              /* call the hal uart configuration function
   5140               */
   5141              status = AppS2wHal_UartConfig(&params);
   \                     ??AppS2wCmd_BaudRate_8:
   \   000000C2   0xA801             ADD      R0,SP,#+4
   \   000000C4   0x.... 0x....      BL       AppS2wHal_UartConfig
   5142              if (status != S2W_SUCCESS)
   \   000000C8   0xB920             CBNZ.N   R0,??AppS2wCmd_BaudRate_1
   5143              {
   5144                  return status;
   5145              }
   5146          
   5147              /* update the current active profile
   5148               */
   5149              memcpy(&s2wCurrent.serialPortConf, &params, sizeof(s2wCurrent.serialPortConf));
   \   000000CA   0x2214             MOVS     R2,#+20
   \   000000CC   0xA901             ADD      R1,SP,#+4
   \   000000CE   0x.... 0x....      BL       ??Subroutine117_0
   5150          
   5151              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_560:
   \   000000D2   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_BaudRate_1:
   \   000000D4   0xB008             ADD      SP,SP,#+32
   \   000000D6   0xBD10             POP      {R4,PC}          ;; return
   5152          
   5153          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   0xA807             ADD      R0,SP,#+28
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   5154          
   5155          
   5156          

   \                                 In section .text, align 2, keep-with-next
   5157          PRIVATE UINT8
   5158          AppS2wCmd_UartFifoLevel(UINT8 *ptr)
   5159          {
   \                     AppS2wCmd_UartFifoLevel:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5160              UINT32 txLevel=0,rxLevel=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   5161              UINT8 status;
   5162              UINT8 *p;
   5163              if((ptr[0] =='?') &&(ptr[1] =='\0'))
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable417_3
   \   0000000E   0x9802             LDR      R0,[SP, #+8]
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x283F             CMP      R0,#+63
   \   00000014   0xBF02             ITTT     EQ 
   \   00000016   0x9802             LDREQ    R0,[SP, #+8]
   \   00000018   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000001A   0x2800             CMPEQ    R0,#+0
   \   0000001C   0xD10D             BNE.N    ??AppS2wCmd_UartFifoLevel_0
   5164              {
   5165                  S2w_Printf("\r\nRXLEVEL=%02x,TXLEVEL=%02x\r\n",GsnUart_IntrFifoRxLevelGet(&s2wSerialPortHandle.uartHandle),
   5166                             GsnUart_IntrFifoTxLevelGet(&s2wSerialPortHandle.uartHandle));
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       GsnUart_IntrFifoTxLevelGet
   \   00000024   0x4605             MOV      R5,R0
   \   00000026   0x4620             MOV      R0,R4
   \   00000028   0x.... 0x....      BL       GsnUart_IntrFifoRxLevelGet
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x462A             MOV      R2,R5
   \   00000030   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nRXLEVEL=%02x,TXLEVE...">`
   \   00000034   0x.... 0x....      BL       S2w_Printf
   \   00000038   0xE020             B.N      ??AppS2wCmd_UartFifoLevel_1
   5167              }
   5168              else
   5169              {
   5170                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_UartFifoLevel_0:
   \   0000003A   0x.... 0x....      BL       ??Subroutine34_0
   5171                  if (!p)
   \                     ??CrossCallReturnLabel_154:
   \   0000003E   0xB1B8             CBZ.N    R0,??AppS2wCmd_UartFifoLevel_2
   5172                  {
   5173                      return S2W_EINVAL;
   5174                  }
   5175                  status = AppS2wParse_Int(p, &rxLevel);
   5176                  if ((status != S2W_SUCCESS) || (rxLevel < 1) || (rxLevel > 15))
   \   00000040   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_301:
   \   00000044   0xB9A0             CBNZ.N   R0,??AppS2wCmd_UartFifoLevel_2
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0xB190             CBZ.N    R0,??AppS2wCmd_UartFifoLevel_2
   \   0000004A   0x2810             CMP      R0,#+16
   \   0000004C   0xD210             BCS.N    ??AppS2wCmd_UartFifoLevel_2
   5177                  {
   5178                      return S2W_EINVAL;
   5179                  }
   5180                  GsnUart_IntrFifoRxLevelSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_IFL_T)rxLevel);
   \   0000004E   0xB2C1             UXTB     R1,R0
   \   00000050   0x4620             MOV      R0,R4
   \   00000052   0x.... 0x....      BL       GsnUart_IntrFifoRxLevelSet
   5181                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000056   0x.... 0x....      BL       ??Subroutine34_0
   5182                  if (p && *p)
   \                     ??CrossCallReturnLabel_153:
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xBF1C             ITT      NE 
   \   0000005E   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000060   0x2900             CMPNE    R1,#+0
   \   00000062   0xD00B             BEQ.N    ??AppS2wCmd_UartFifoLevel_1
   5183                  {
   5184                      status = AppS2wParse_Int(p, &txLevel);
   5185                      if ((status != S2W_SUCCESS) || (txLevel > 15))
   \   00000064   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_327:
   \   00000068   0xB910             CBNZ.N   R0,??AppS2wCmd_UartFifoLevel_2
   \   0000006A   0x9801             LDR      R0,[SP, #+4]
   \   0000006C   0x2810             CMP      R0,#+16
   \   0000006E   0xD301             BCC.N    ??AppS2wCmd_UartFifoLevel_3
   5186                      {
   5187                          return S2W_EINVAL;
   \                     ??AppS2wCmd_UartFifoLevel_2:
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0xBD3E             POP      {R1-R5,PC}
   5188                      }
   5189                      GsnUart_IntrFifoTxLevelSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_IFL_T)txLevel);
   \                     ??AppS2wCmd_UartFifoLevel_3:
   \   00000074   0xB2C1             UXTB     R1,R0
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       GsnUart_IntrFifoTxLevelSet
   5190          		}
   5191              }
   5192              return S2W_SUCCESS;
   \                     ??AppS2wCmd_UartFifoLevel_1:
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0xBD3E             POP      {R1-R5,PC}       ;; return
   5193          }
   5194          #endif
   5195          
   5196          /**
   5197           ******************************************************************
   5198           * @ingroup S2w-Application
   5199           * @brief Process the AT&Y Command. AT&Y configures the power on
   5200           *        profile identifier.This function calls the hal flash write API
   5201                    to update the parameter.
   5202           * @param ptr Pointer to the user string.
   5203           * @return S2W_SUCCESS - operation successful.
   5204           * @retval S2W_EINVAL  - operation failure-invalid command.
   5205           * @retval S2W_FAILURE - operation failure- profile setting failed.
   5206           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5207          PRIVATE UINT8
   5208          AppS2wCmd_SetDefaultProfile(UINT8 *ptr)
   5209          {
   \                     AppS2wCmd_SetDefaultProfile:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5210              UINT8 profile;
   5211              UINT8 status;
   5212              /* validate the input parameter as a vlaid identifier
   5213               */
   5214              status = AppS2wParse_Boolean(ptr, &profile);
   \   00000004   0x.... 0x....      BL       ?Subroutine60
   5215              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_381:
   \   00000008   0xB9A8             CBNZ.N   R0,??AppS2wCmd_SetDefaultProfile_0
   5216              {
   5217                  return status;
   5218              }
   5219          
   5220              profile_params.defaultProfile = profile;
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable417_4
   \   0000000E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   5221              if(!s2wappMainTaskCtxt->fsInit)
   \   00000012   0x.... 0x....      LDR.W    R6,??DataTable413_2
   \   00000016   0x7160             STRB     R0,[R4, #+5]
   \   00000018   0xF248 0x1570      MOVW     R5,#+33136
   \   0000001C   0x6830             LDR      R0,[R6, #+0]
   \   0000001E   0x5C28             LDRB     R0,[R5, R0]
   \   00000020   0xB930             CBNZ.N   R0,??AppS2wCmd_SetDefaultProfile_1
   5222              {
   5223          		App_FsInit();
   \   00000022   0x.... 0x....      BL       App_FsInit
   5224          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000026   0x6830             LDR      R0,[R6, #+0]
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0x5429             STRB     R1,[R5, R0]
   5225                          f_enterFS();
   \   0000002C   0x.... 0x....      BL       fsm_enterFS
   5226          	}
   5227              return S2w_SaveS2wProfileParams(&profile_params);
   \                     ??AppS2wCmd_SetDefaultProfile_1:
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       S2w_SaveS2wProfileParams
   \                     ??AppS2wCmd_SetDefaultProfile_0:
   \   00000036   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   5228          }
   5229          
   5230          
   5231          
   5232          
   5233          /**
   5234           ******************************************************************
   5235           * @ingroup S2w-Application
   5236           * @brief Process the ATH Command.
   5237               This function call the hal function function to disconnect the network
   5238               association.
   5239           * @param ptr Pointer to the user string.
   5240           * @return S2W_SUCCESS - operation successful.
   5241           * @retval S2W_EINVAL  - operation failure-invalid command.
   5242           * @retval S2W_FAILURE - operation failure- disconnect failed.
   5243           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5244          PRIVATE UINT8
   5245          AppS2wCmd_Disconnect(UINT8 *ptr)
   5246          {
   5247              if (*ptr)
   \                     AppS2wCmd_Disconnect:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x.... 0x....      BEQ.W    AppS2w_HangUp
   5248              {
   5249                  return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x4770             BX       LR
   5250              }
   5251              
   5252              return AppS2w_HangUp();
   5253          }
   5254          
   5255          

   \                                 In section .text, align 2, keep-with-next
   5256          UINT8
   5257          AppS2wCmd_AssocPSModeSet( UINT8* ptr)
   5258          {
   \                     AppS2wCmd_AssocPSModeSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5259              UINT32 temp;
   5260              UINT8 status;
   5261              UINT8 *p;
   5262              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
   5263              if (!p)
   \                     ??CrossCallReturnLabel_152:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_AssocPSModeSet_0
   5264              {
   5265                  return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD0E             POP      {R1-R3,PC}
   5266              }
   5267              status = AppS2wParse_Int(p, &temp);
   \                     ??AppS2wCmd_AssocPSModeSet_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine51
   5268              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_300:
   \   00000012   0xBD0E             POP      {R1-R3,PC}       ;; return
   5269              {
   5270                  return status;
   5271              }
   5272              return S2W_SUCCESS;
   5273          /*
   5274              if( temp <= GSN_WDD_ASSOC_PS_MODE_RX_PS_POLL_CONSERVE )
   5275              {
   5276                 GsnWdd_Ioctl( &s2wappMainTaskCtxt->wdd,
   5277                 GSN_L2DEV_IOCTL_PS_MODE_RX_STATE_SET, &temp );
   5278                 return S2W_SUCCESS;
   5279             }
   5280             else
   5281             {
   5282                 return S2W_EINVAL;
   5283             }
   5284          */
   5285          }
   5286          
   5287          /**
   5288           ******************************************************************
   5289           * @ingroup S2w-Application
   5290           * @brief Process the AT&F Command. AT&F command restores the configuration
   5291           *        to the factory settings.
   5292           * @param ptr Pointer to the user input string.
   5293          
   5294           * @return S2W_SUCCESS - operation successful.
   5295           * @retval S2W_EINVAL  - operation failure-invalid command.
   5296           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5297          PRIVATE UINT8
   5298          AppS2wCmd_Factory(UINT8 *ptr)
   5299          {
   \                     AppS2wCmd_Factory:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   5300          
   5301              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB108             CBZ.N    R0,??AppS2wCmd_Factory_0
   5302              {
   5303                  return S2W_EINVAL;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xBD70             POP      {R4-R6,PC}
   5304              }
   5305          
   5306              /* get the default profile stored in flash
   5307               */
   5308              AppS2wProcess_DefaulConfigtLoad(s2wFlashParams);
   \                     ??AppS2wCmd_Factory_0:
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable413_9
   \   0000000E   0x6828             LDR      R0,[R5, #+0]
   \   00000010   0x.... 0x....      BL       AppS2wProcess_DefaulConfigtLoad
   5309          
   5310              /* Load the profile values to the current active profile
   5311               */
   5312              S2W_PROFILE_T *profile = &s2wFlashParams->profile[profile_params.defaultProfile];
   \   00000014   0x.... 0x....      LDR.W    R4,??DataTable417_4
   \   00000018   0x682A             LDR      R2,[R5, #+0]
   \   0000001A   0x7960             LDRB     R0,[R4, #+5]
   \   0000001C   0xF44F 0x717E      MOV      R1,#+1016
   \   00000020   0xFB01 0x2500      MLA      R5,R1,R0,R2
   5313          
   5314              s2wIsAutoconnected = 0;
   \   00000024   0x.... 0x....      BL       ?Subroutine23
   5315          
   5316              /* close all cids
   5317               */
   5318              AppS2wHal_NetCloseAll(0);
   5319              memcpy(&s2wCurrent, profile, sizeof(s2wCurrent));
   \                     ??CrossCallReturnLabel_51:
   \   00000028   0x.... 0x....      LDR.W    R6,??DataTable413_1
   \   0000002C   0xF44F 0x727E      MOV      R2,#+1016
   \   00000030   0x4629             MOV      R1,R5
   \   00000032   0x.... 0x....      BL       ?Subroutine95
   5320          
   5321              /* configure the ip parameters
   5322               */
   5323              AppS2w_SetWlanDfltParams(profile_params.defaultProfile);
   \                     ??CrossCallReturnLabel_502:
   \   00000036   0x7960             LDRB     R0,[R4, #+5]
   \   00000038   0x.... 0x....      BL       AppS2w_SetWlanDfltParams
   5324              AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
   \   0000003C   0xF506 0x70C4      ADD      R0,R6,#+392
   \   00000040   0x.... 0x....      BL       AppS2wHal_NetworkConfig
   5325          
   5326              return S2W_SUCCESS;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
   5327          }
   5328          
   5329          
   5330          /**
   5331           ******************************************************************
   5332           * @ingroup S2w-Application
   5333           * @brief Process the AT+WRXACTIVE Command.
   5334               This function validate the input parameter as enable or disable
   5335               and call the hal function to switch ON/OF the active radio.
   5336           * @param ptr Pointer to the user input string.
   5337           * @return S2W_SUCCESS - operation successful.
   5338           * @retval S2W_EINVAL  - operation failure-invalid command.
   5339           * @retval S2W_FAILURE - operation failure- radio configuration failed.
   5340           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5341          PRIVATE UINT8
   5342          AppS2wCmd_Wradio(UINT8 *ptr)
   5343          {
   \                     AppS2wCmd_Wradio:
   \   00000000   0xB580             PUSH     {R7,LR}
   5344              UINT8   status;
   5345              UINT8   mode;
   5346          
   5347              /* validate the parameter as enable/disable
   5348               */
   5349              status = AppS2wParse_Boolean(ptr, &mode);
   \   00000002   0x.... 0x....      BL       ?Subroutine60
   5350              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_380:
   \   00000006   0xB950             CBNZ.N   R0,??AppS2wCmd_Wradio_0
   5351              {
   5352                  return status;
   5353              }
   5354          
   5355              /* call the hal function to switch ON/OFF radio
   5356               */
   5357              status = AppS2wHal_RadioModeConfig(mode);
   \   00000008   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000C   0x.... 0x....      BL       AppS2wHal_RadioModeConfig
   5358              if (status != S2W_SUCCESS)
   \   00000010   0xB928             CBNZ.N   R0,??AppS2wCmd_Wradio_0
   5359              {
   5360                  return status;
   5361              }
   5362          
   5363              /* update the active profile parameter
   5364               */
   5365              s2wCurrent.radio = mode;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable413_1
   \   00000016   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   0000001A   0x7201             STRB     R1,[R0, #+8]
   5366              return status;
   \   0000001C   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wradio_0:
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
   5367          }
   5368          
   5369          
   5370          
   5371          #ifndef S2W_IP2WIFI_SUPPORT
   5372          
   5373          /**
   5374           ******************************************************************
   5375           * @ingroup S2w-Application
   5376           * @brief Process the AT+NSTAT command.
   5377           *   This function display the current network status information.
   5378           *   It displays the connection status,ip address,AP information,
   5379           *   RSSI,DNS address etc
   5380           * @param ptr Pointer to the user input string.
   5381           *
   5382           * @return S2W_SUCCESS - operation successful.
   5383           * @retval S2W_EINVAL  - operation failure-invalid command.
   5384           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5385          PRIVATE UINT8
   5386          AppS2wCmd_Nstat(UINT8 *ptr)
   5387          {
   \                     AppS2wCmd_Nstat:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C3             SUB      SP,SP,#+268
   5388              S2W_STATUS_INFO_T statusInfo;
   5389              const char *security = "NONE";
   \   00000006   0x.... 0x....      ADR.W    R4,`?<Constant "NONE">`
   \   0000000A   0x9407             STR      R4,[SP, #+28]
   5390              GSN_WIF_WLAN_RSSI_T    wRssi;
   5391          
   5392              if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x293F             CMP      R1,#+63
   \   00000010   0xBF04             ITT      EQ 
   \   00000012   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000014   0x2800             CMPEQ    R0,#+0
   \   00000016   0xF040 0x80D6      BNE.W    ??AppS2wCmd_Nstat_0
   5393              {
   5394                  memset(&statusInfo,0,sizeof(S2W_STATUS_INFO_T));
   \   0000001A   0x22E0             MOVS     R2,#+224
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA80A             ADD      R0,SP,#+40
   \   00000020   0x.... 0x....      BL       memset
   5395                  statusInfo.wlanInfo.mode = current_wlan_info.mode;
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable413_1
   \   00000028   0xF890 0x03F8      LDRB     R0,[R0, #+1016]
   \   0000002C   0xF88D 0x0028      STRB     R0,[SP, #+40]
   5396                  AppS2wHal_MacAddrGet(statusInfo.macAddr);
   \   00000030   0xA840             ADD      R0,SP,#+256
   \   00000032   0x.... 0x....      BL       AppS2wHal_MacAddrGet
   5397                  statusInfo.wstate = s2wLinkState;
   \   00000036   0x....             LDR.N    R0,??DataTable409_4
   5398          
   5399                  statusInfo.wstate = GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000038   0x.... 0x....      LDR.W    R6,??DataTable413_2
   \   0000003C   0x7800             LDRB     R0,[R0, #+0]
   \   0000003E   0xAD15             ADD      R5,SP,#+84
   \   00000040   0x60E8             STR      R0,[R5, #+12]
   \   00000042   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_575:
   \   00000046   0x60E8             STR      R0,[R5, #+12]
   5400                  
   5401                  /* display mac address,network connection status and mode */
   5402                  
   5403                  S2w_Printf("\nMAC=%02x:%02x:%02x:%02x:%02x:%02x\r\n",
   5404                              statusInfo.macAddr[0],statusInfo.macAddr[1],
   5405                              statusInfo.macAddr[2],statusInfo.macAddr[3],
   5406                              statusInfo.macAddr[4],statusInfo.macAddr[5]);
   \   00000048   0xA840             ADD      R0,SP,#+256
   \   0000004A   0x7941             LDRB     R1,[R0, #+5]
   \   0000004C   0x7883             LDRB     R3,[R0, #+2]
   \   0000004E   0x7842             LDRB     R2,[R0, #+1]
   \   00000050   0x9102             STR      R1,[SP, #+8]
   \   00000052   0x7901             LDRB     R1,[R0, #+4]
   \   00000054   0x9101             STR      R1,[SP, #+4]
   \   00000056   0x78C1             LDRB     R1,[R0, #+3]
   \   00000058   0x.... 0x....      ADR.W    R0,`?<Constant "\\nMAC=%02x:%02x:%02x:%...">`
   \   0000005C   0x9100             STR      R1,[SP, #+0]
   \   0000005E   0xF89D 0x1100      LDRB     R1,[SP, #+256]
   \   00000062   0x.... 0x....      BL       S2w_Printf
   5407                  statusInfo.wstate?(S2w_Printf("WSTATE=CONNECTED   ")):
   5408                                    (S2w_Printf("WSTATE=NOT CONNECTED  "));
   \   00000066   0x68E8             LDR      R0,[R5, #+12]
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xBF14             ITE      NE 
   \   0000006C   0x.... 0x....      ADRNE.W  R0,`?<Constant "WSTATE=CONNECTED   ">`
   \   00000070   0x.... 0x....      ADREQ.W  R0,`?<Constant "WSTATE=NOT CONNECTED  ">`
   \   00000074   0x.... 0x....      BL       S2w_Printf
   5409          
   5410                  if(statusInfo.wstate == 0)
   \   00000078   0x68E8             LDR      R0,[R5, #+12]
   \   0000007A   0xB910             CBNZ.N   R0,??AppS2wCmd_Nstat_1
   5411                  {
   5412                      S2w_Printf("  MODE=NONE \r\n");
   \   0000007C   0x.... 0x....      ADR.W    R0,`?<Constant "  MODE=NONE \\r\\n">`
   \   00000080   0xE00D             B.N      ??AppS2wCmd_Nstat_2
   5413          
   5414                  }
   \                     ??AppS2wCmd_Nstat_1:
   \   00000082   0x6830             LDR      R0,[R6, #+0]
   \   00000084   0xF890 0x09CC      LDRB     R0,[R0, #+2508]
   \   00000088   0x2803             CMP      R0,#+3
   \   0000008A   0xBF08             IT       EQ 
   \   0000008C   0x.... 0x....      ADREQ.W  R0,`?<Constant "  MODE=IBSS \\r\\n">`
   5415                  else
   5416                  {
   5417                      if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_IBSS)
   5418                      {
   5419                        S2w_Printf("  MODE=IBSS \r\n");
   \   00000090   0xD005             BEQ.N    ??AppS2wCmd_Nstat_2
   5420          			}
   5421                      else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
   \   00000092   0x2802             CMP      R0,#+2
   \   00000094   0xBF0C             ITE      EQ 
   \   00000096   0x.... 0x....      ADREQ.W  R0,`?<Constant "  MODE=AP \\r\\n">`
   \   0000009A   0x.... 0x....      ADRNE.W  R0,`?<Constant "  MODE=STA \\r\\n">`
   5422                      {
   5423                         S2w_Printf("  MODE=AP \r\n");
   5424                  }
   5425          		    else
   5426          		    {
   5427          				S2w_Printf("  MODE=STA \r\n");
   \                     ??AppS2wCmd_Nstat_2:
   \   0000009E   0x.... 0x....      BL       S2w_Printf
   5428          			}
   5429                  }
   5430          
   5431                  
   5432                  if(statusInfo.wstate)
   \   000000A2   0x68E8             LDR      R0,[R5, #+12]
   \   000000A4   0x.... 0x....      ADR.W    R9,`?<Constant " SECURITY=%s\\r\\nRSSI=%d\\r\\n">`
   \   000000A8   0x.... 0x....      ADR.W    R8,`?<Constant " CHANNEL=NONE  ">`
   \   000000AC   0x....             ADR.N    R7,??DataTable409_3  ;; "\""
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD03B             BEQ.N    ??AppS2wCmd_Nstat_3
   5433                  {
   5434                    GSN_WDD_WLAN_CFG_T *WddConf;
   5435          		  GSN_WLAN_MAC_ADDR_T *pBssid;
   5436          		  GSN_WLAN_MAC_ADDR_T bssid;
   5437          
   5438                      WddConf = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   000000B2   0x6830             LDR      R0,[R6, #+0]
   5439          			pBssid = &WddConf->bssid;
   5440          			if(GSN_WIF_WLAN_NW_TYPE_AP == s2wappMainTaskCtxt->if0.wddCtx.wlanNwType)
   \   000000B4   0xF890 0x2F08      LDRB     R2,[R0, #+3848]
   \   000000B8   0xF600 0x7494      ADDW     R4,R0,#+3988
   \   000000BC   0xF204 0x0121      ADDW     R1,R4,#+33
   \   000000C0   0x2A02             CMP      R2,#+2
   \   000000C2   0xD105             BNE.N    ??AppS2wCmd_Nstat_4
   5441          			{					
   5442          				GsnWdd_PhyAddrGet(&s2wappMainTaskCtxt->if0.wddCtx,(INT8 *)&bssid);
   \   000000C4   0xA903             ADD      R1,SP,#+12
   \   000000C6   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000000CA   0x.... 0x....      BL       GsnWdd_PhyAddrGet
   5443          				pBssid = &bssid;
   \   000000CE   0xA903             ADD      R1,SP,#+12
   5444          			}
   5445          			
   5446          			S2w_Printf("BSSID=%02x:%02x:%02x:%02x:%02x:%02x   SSID=\"",
   5447          			pBssid->array[0], pBssid->array[1],
   5448          			pBssid->array[2],pBssid->array[3],
   5449          			pBssid->array[4],pBssid->array[5]);
   \                     ??AppS2wCmd_Nstat_4:
   \   000000D0   0x7948             LDRB     R0,[R1, #+5]
   \   000000D2   0x9002             STR      R0,[SP, #+8]
   \   000000D4   0x7908             LDRB     R0,[R1, #+4]
   \   000000D6   0x9001             STR      R0,[SP, #+4]
   \   000000D8   0x78C8             LDRB     R0,[R1, #+3]
   \   000000DA   0x9000             STR      R0,[SP, #+0]
   \   000000DC   0x788B             LDRB     R3,[R1, #+2]
   \   000000DE   0x784A             LDRB     R2,[R1, #+1]
   \   000000E0   0x7809             LDRB     R1,[R1, #+0]
   \   000000E2   0x.... 0x....      ADR.W    R0,`?<Constant "BSSID=%02x:%02x:%02x:...">`
   \   000000E6   0x.... 0x....      BL       S2w_Printf
   5450                    
   5451                     AppS2wHal_CharNPut(WddConf->ssid.array,(WddConf->ssid.length));
   \   000000EA   0x7821             LDRB     R1,[R4, #+0]
   \   000000EC   0x1C60             ADDS     R0,R4,#+1
   \   000000EE   0x.... 0x....      BL       AppS2wHal_CharNPut
   5452                     S2w_Printf("\"");
   \   000000F2   0x.... 0x....      BL       ?Subroutine87
   5453          
   5454                  if( WddConf->channel[0] == 0)
   \                     ??CrossCallReturnLabel_474:
   \   000000F6   0xF894 0x1027      LDRB     R1,[R4, #+39]
   \   000000FA   0xB919             CBNZ.N   R1,??AppS2wCmd_Nstat_5
   5455                  {
   5456                      S2w_Printf(" CHANNEL=NONE  ");
   \   000000FC   0x4640             MOV      R0,R8
   \   000000FE   0x.... 0x....      BL       S2w_Printf
   \   00000102   0xE003             B.N      ??AppS2wCmd_Nstat_6
   5457                  }
   5458                  else
   5459                  {
   5460                      S2w_Printf(" CHANNEL=%d  ", WddConf->channel[0]);
   \                     ??AppS2wCmd_Nstat_5:
   \   00000104   0x.... 0x....      ADR.W    R0,`?<Constant " CHANNEL=%d  ">`
   \   00000108   0x.... 0x....      BL       S2w_Printf
   5461                  }
   5462                  AppS2wCmd_GetSecurityString(WddConf, &security);
   \                     ??AppS2wCmd_Nstat_6:
   \   0000010C   0xA907             ADD      R1,SP,#+28
   \   0000010E   0x4620             MOV      R0,R4
   \   00000110   0x.... 0x....      BL       AppS2wCmd_GetSecurityString
   5463          
   5464                  GsnWdd_RSSIGet(&s2wappMainTaskCtxt->if0.wddCtx, (INT8*)&wRssi, sizeof(GSN_WIF_WLAN_RSSI_T));
   \   00000114   0x6830             LDR      R0,[R6, #+0]
   \   00000116   0x2201             MOVS     R2,#+1
   \   00000118   0xA908             ADD      R1,SP,#+32
   \   0000011A   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000011E   0x.... 0x....      BL       GsnWdd_RSSIGet
   5465                  S2w_Printf(" SECURITY=%s\r\nRSSI=%d\r\n", security, (signed char)wRssi.rssi);
   \   00000122   0xF99D 0x2020      LDRSB    R2,[SP, #+32]
   \   00000126   0x9907             LDR      R1,[SP, #+28]
   \   00000128   0xE00D             B.N      ??AppS2wCmd_Nstat_7
   5466                    
   5467                  }
   5468                  /* display bssid,ssid,channel
   5469                   */
   5470                  else
   5471                  {
   5472                      S2w_Printf("BSSID=00:00:00:00:00:00   SSID=\"");
   \                     ??AppS2wCmd_Nstat_3:
   \   0000012A   0x.... 0x....      ADR.W    R0,`?<Constant "BSSID=00:00:00:00:00:...">`
   \   0000012E   0x.... 0x....      BL       S2w_Printf
   5473          
   5474                  S2w_Printf("\"");
   \   00000132   0x.... 0x....      BL       ?Subroutine87
   5475          
   5476                      S2w_Printf(" CHANNEL=NONE  ");
   \                     ??CrossCallReturnLabel_473:
   \   00000136   0x4640             MOV      R0,R8
   \   00000138   0x.... 0x....      BL       S2w_Printf
   5477                  /* display security information
   5478                   */
   5479          
   5480                      security ="NONE";
   \   0000013C   0x9407             STR      R4,[SP, #+28]
   5481                  S2w_Printf(" SECURITY=%s\r\nRSSI=%d\r\n", security,(signed char) statusInfo.rssi);
   \   0000013E   0xA815             ADD      R0,SP,#+84
   \   00000140   0x4621             MOV      R1,R4
   \   00000142   0xF990 0x2000      LDRSB    R2,[R0, #+0]
   \                     ??AppS2wCmd_Nstat_7:
   \   00000146   0x4648             MOV      R0,R9
   \   00000148   0x.... 0x....      BL       S2w_Printf
   5482                  }
   5483                  /* display ip address,subnet,gateway  */
   5484          
   5485                  if(statusInfo.wstate)
   \   0000014C   0x68E8             LDR      R0,[R5, #+12]
   \   0000014E   0xB130             CBZ.N    R0,??AppS2wCmd_Nstat_8
   5486                     GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&statusInfo.nwParams);
   \   00000150   0x6830             LDR      R0,[R6, #+0]
   \   00000152   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000156   0xA91A             ADD      R1,SP,#+104
   \   00000158   0x3050             ADDS     R0,R0,#+80
   \   0000015A   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   5487                   
   5488                  S2w_Printf("IP addr=%d.%d.%d.%d   SubNet=%d.%d.%d.%d ",(statusInfo.nwParams.ipv4.ipAddr& 0xff000000)>>24,(statusInfo.nwParams.ipv4.ipAddr& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.ipAddr & 0x0000ff00)>>8,
   5489                              (statusInfo.nwParams.ipv4.ipAddr& 0x000000ff),
   5490                              (statusInfo.nwParams.ipv4.subnetMask& 0xff000000)>>24,(statusInfo.nwParams.ipv4.subnetMask& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.subnetMask & 0x0000ff00)>>8,
   5491                              (statusInfo.nwParams.ipv4.subnetMask& 0x000000ff));
   \                     ??AppS2wCmd_Nstat_8:
   \   0000015E   0x6A69             LDR      R1,[R5, #+36]
   \   00000160   0x6A28             LDR      R0,[R5, #+32]
   \   00000162   0xB2CA             UXTB     R2,R1
   \   00000164   0x9204             STR      R2,[SP, #+16]
   \   00000166   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   0000016A   0x.... 0x....      BL       ?Subroutine85
   \                     ??CrossCallReturnLabel_466:
   \   0000016E   0x.... 0x....      ADR.W    R0,`?<Constant "IP addr=%d.%d.%d.%d  ...">`
   \   00000172   0x.... 0x....      BL       S2w_Printf
   5492                  S2w_Printf(" Gateway=%d.%d.%d.%d\r\n",(statusInfo.nwParams.ipv4.gatewayIpAddr& 0xff000000)>>24,(statusInfo.nwParams.ipv4.gatewayIpAddr& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.gatewayIpAddr & 0x0000ff00)>>8,
   5493                              (statusInfo.nwParams.ipv4.gatewayIpAddr& 0x000000ff));
   \   00000176   0x6AA8             LDR      R0,[R5, #+40]
   \   00000178   0xB2C1             UXTB     R1,R0
   \   0000017A   0x9100             STR      R1,[SP, #+0]
   \   0000017C   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000180   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   00000184   0x0E01             LSRS     R1,R0,#+24
   \   00000186   0x.... 0x....      ADR.W    R0,`?<Constant " Gateway=%d.%d.%d.%d\\r\\n">`
   \   0000018A   0x.... 0x....      BL       S2w_Printf
   5494                          
   5495                    /* display Dns1, Dns2 address,Rx and Tx counts  */
   5496                  S2w_Printf("DNS1=%d.%d.%d.%d       DNS2=%d.%d.%d.%d\r\nRx Count=%d     Tx Count=%d \r\n",
   5497                              (statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0xff000000)>>24,(statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.dnsPriSrvrIp & 0x0000ff00)>>8,
   5498                              (statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0x000000ff),(statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0xff000000)>>24,
   5499                              (statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x00ff0000)>>16, (statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x0000ff00)>>8,(statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x000000ff),
   5500                              s2wappMainTaskCtxt->if0.nwifCtx.pStats->totalPktsRcvd,
   5501                              (s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent + \
   5502          					 s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpRequestSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpResponseSent));
   \   0000018E   0x6833             LDR      R3,[R6, #+0]
   \   00000190   0x6B68             LDR      R0,[R5, #+52]
   \   00000192   0x6BA9             LDR      R1,[R5, #+56]
   \   00000194   0xF246 0x62DC      MOVW     R2,#+26332
   \   00000198   0x58D2             LDR      R2,[R2, R3]
   \   0000019A   0x6913             LDR      R3,[R2, #+16]
   \   0000019C   0x6954             LDR      R4,[R2, #+20]
   \   0000019E   0x18E3             ADDS     R3,R4,R3
   \   000001A0   0x69D4             LDR      R4,[R2, #+28]
   \   000001A2   0x18E3             ADDS     R3,R4,R3
   \   000001A4   0x6A14             LDR      R4,[R2, #+32]
   \   000001A6   0x18E3             ADDS     R3,R4,R3
   \   000001A8   0x9306             STR      R3,[SP, #+24]
   \   000001AA   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   000001AE   0x6812             LDR      R2,[R2, #+0]
   \   000001B0   0x9205             STR      R2,[SP, #+20]
   \   000001B2   0xB2CA             UXTB     R2,R1
   \   000001B4   0x9204             STR      R2,[SP, #+16]
   \   000001B6   0x.... 0x....      BL       ?Subroutine85
   \                     ??CrossCallReturnLabel_467:
   \   000001BA   0x.... 0x....      ADR.W    R0,`?<Constant "DNS1=%d.%d.%d.%d     ...">`
   \   000001BE   0x.... 0x....      BL       S2w_Printf
   5503          #ifdef S2W_IPv6_SUPPORT
   5504                      AppS2wHdrAndIpv6_Print();
   5505          #endif  // S2W_IPv6_SUPPORT
   5506                  return S2W_SUCCESS;        
   \   000001C2   0x2000             MOVS     R0,#+0
   \   000001C4   0xE000             B.N      ??AppS2wCmd_Nstat_9
   5507          
   5508              }
   5509          
   5510              return S2W_EINVAL;
   \                     ??AppS2wCmd_Nstat_0:
   \   000001C6   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_Nstat_9:
   \   000001C8   0x.... 0x....      B.W      ?Subroutine1
   5511          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine85:
   \   00000000   0xF3C1 0x2207      UBFX     R2,R1,#+8,#+8
   \   00000004   0x9203             STR      R2,[SP, #+12]
   \   00000006   0xF3C1 0x4207      UBFX     R2,R1,#+16,#+8
   \   0000000A   0x0E09             LSRS     R1,R1,#+24
   \   0000000C   0x9101             STR      R1,[SP, #+4]
   \   0000000E   0x9202             STR      R2,[SP, #+8]
   \   00000010   0xB2C1             UXTB     R1,R0
   \   00000012   0x9100             STR      R1,[SP, #+0]
   \   00000014   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   00000018   0x0E01             LSRS     R1,R0,#+24
   \   0000001A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine87:
   \   00000000   0x4638             MOV      R0,R7
   \   00000002   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xB043             ADD      SP,SP,#+268
   \   00000002   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   5512          #endif
   5513          
   5514          
   5515          
   5516          #ifdef S2W_UART_ENABLE
   5517          /**
   5518           ******************************************************************
   5519           * @ingroup S2w-Application
   5520           * @brief Process the AT&R Command.
   5521           * @param ptr Pointer to the user input string.
   5522           * @return status.
   5523           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5524          PRIVATE UINT8
   5525          AppS2wCmd_HardFlow(UINT8 *ptr)
   5526          {
   \                     AppS2wCmd_HardFlow:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   5527              UINT8 enable;
   5528              UINT8 status;
   5529              UINT8 oldflow;
   5530          
   5531              status = AppS2wParse_Boolean(ptr, &enable);
   \   00000004   0x.... 0x....      BL       ?Subroutine60
   \                     ??CrossCallReturnLabel_379:
   \   00000008   0x0006             MOVS     R6,R0
   5532              if (status != S2W_SUCCESS)
   \   0000000A   0xD14A             BNE.N    ??AppS2wCmd_HardFlow_0
   5533              {
   5534                  return status;
   5535              }
   5536          
   5537              oldflow = s2wCurrent.serialPortConf.conf.uart.hardflow;
   \   0000000C   0x....             LDR.N    R4,??DataTable413_1
   \   0000000E   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   5538              s2wCurrent.serialPortConf.conf.uart.hardflow = !!enable;
   \   00000012   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000016   0xF3C0 0x15C0      UBFX     R5,R0,#+7,#+1
   \   0000001A   0xB101             CBZ.N    R1,??AppS2wCmd_HardFlow_1
   \   0000001C   0x2101             MOVS     R1,#+1
   \                     ??AppS2wCmd_HardFlow_1:
   \   0000001E   0xF020 0x0080      BIC      R0,R0,#0x80
   \   00000022   0xEA40 0x10C1      ORR      R0,R0,R1, LSL #+7
   \   00000026   0xF8C4 0x01B4      STR      R0,[R4, #+436]
   5539          
   5540              if(s2wCurrent.serialPortConf.conf.uart.hardflow)
   \   0000002A   0xF3C0 0x10C0      UBFX     R0,R0,#+7,#+1
   \   0000002E   0xB138             CBZ.N    R0,??AppS2wCmd_HardFlow_2
   5541              {
   5542                  GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AUART0_CTS_N);
   \   00000030   0x.... 0x....      BL       ?Subroutine132
   5543                  GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AUART0_RTS_N);
   \                     ??CrossCallReturnLabel_611:
   \   00000034   0x.... 0x....      BL       ?Subroutine94
   5544                  GsnIoMux_PullDownDisable(25);		// uart rts. These together consume 125uA
   \                     ??CrossCallReturnLabel_500:
   \   00000038   0x2019             MOVS     R0,#+25
   \   0000003A   0x.... 0x....      BL       GsnIoMux_PullDownDisable
   \   0000003E   0xE009             B.N      ??AppS2wCmd_HardFlow_3
   5545                  //GsnIoMux_PullDownDisable(24);      // CTS
   5546              }
   5547              else
   5548              {
   5549                  if(oldflow == GSN_UART_HW_SUPPORT)
   \                     ??AppS2wCmd_HardFlow_2:
   \   00000040   0xB145             CBZ.N    R5,??AppS2wCmd_HardFlow_3
   5550                  {
   5551                      GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AGPIO_24);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x.... 0x....      BL       ??Subroutine132_0
   5552                      GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AGPIO_25);
   \                     ??CrossCallReturnLabel_609:
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x.... 0x....      BL       ??Subroutine94_0
   5553                      GsnIoMux_PullDownEnable(25);
   \                     ??CrossCallReturnLabel_498:
   \   0000004E   0x2019             MOVS     R0,#+25
   \   00000050   0x.... 0x....      BL       GsnIoMux_PullDownEnable
   5554                  }
   5555              }
   5556          
   5557              status = AppS2wHal_UartConfig(&s2wCurrent.serialPortConf);
   \                     ??AppS2wCmd_HardFlow_3:
   \   00000054   0xF504 0x70D8      ADD      R0,R4,#+432
   \   00000058   0x.... 0x....      BL       AppS2wHal_UartConfig
   \   0000005C   0x0006             MOVS     R6,R0
   5558          
   5559              if (status != S2W_SUCCESS)
   \   0000005E   0xD020             BEQ.N    ??AppS2wCmd_HardFlow_0
   5560              {
   5561                  if((s2wCurrent.serialPortConf.conf.uart.hardflow == GSN_UART_HW_SUPPORT) && (oldflow == GSN_UART_HW_NO_SUPPORT))
   \   00000060   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000064   0x0601             LSLS     R1,R0,#+24
   \   00000066   0xD50A             BPL.N    ??AppS2wCmd_HardFlow_4
   \   00000068   0xB94D             CBNZ.N   R5,??AppS2wCmd_HardFlow_4
   5562                  {
   5563                      GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AGPIO_24);
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x.... 0x....      BL       ??Subroutine132_0
   5564                      GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AGPIO_25);
   \                     ??CrossCallReturnLabel_608:
   \   00000070   0x2100             MOVS     R1,#+0
   \   00000072   0x.... 0x....      BL       ??Subroutine94_0
   5565                      GsnIoMux_PullDownEnable(25);
   \                     ??CrossCallReturnLabel_497:
   \   00000076   0x2019             MOVS     R0,#+25
   \   00000078   0x.... 0x....      BL       GsnIoMux_PullDownEnable
   \   0000007C   0xE009             B.N      ??AppS2wCmd_HardFlow_5
   5566                  }
   5567                  else if((s2wCurrent.serialPortConf.conf.uart.hardflow == GSN_UART_HW_NO_SUPPORT) && (oldflow == GSN_UART_HW_SUPPORT))
   \                     ??AppS2wCmd_HardFlow_4:
   \   0000007E   0x0600             LSLS     R0,R0,#+24
   \   00000080   0xD407             BMI.N    ??AppS2wCmd_HardFlow_5
   \   00000082   0xB135             CBZ.N    R5,??AppS2wCmd_HardFlow_5
   5568                  {
   5569                      GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AUART0_CTS_N);
   \   00000084   0x.... 0x....      BL       ?Subroutine132
   5570                      GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AUART0_RTS_N);
   \                     ??CrossCallReturnLabel_610:
   \   00000088   0x.... 0x....      BL       ?Subroutine94
   5571                      GsnIoMux_PullDownDisable(25);
   \                     ??CrossCallReturnLabel_499:
   \   0000008C   0x2019             MOVS     R0,#+25
   \   0000008E   0x.... 0x....      BL       GsnIoMux_PullDownDisable
   5572                  }
   5573                  s2wCurrent.serialPortConf.conf.uart.hardflow = oldflow;
   \                     ??AppS2wCmd_HardFlow_5:
   \   00000092   0xF8D4 0x01B4      LDR      R0,[R4, #+436]
   \   00000096   0xF020 0x0080      BIC      R0,R0,#0x80
   \   0000009A   0xEA40 0x10C5      ORR      R0,R0,R5, LSL #+7
   \   0000009E   0xF8C4 0x01B4      STR      R0,[R4, #+436]
   5574              }
   5575          
   5576              return status;
   \                     ??AppS2wCmd_HardFlow_0:
   \   000000A2   0x4630             MOV      R0,R6
   \   000000A4   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   5577          
   5578          
   5579          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine132:
   \   00000000   0x2103             MOVS     R1,#+3
   \                     ??Subroutine132_0:
   \   00000002   0x2018             MOVS     R0,#+24
   \   00000004   0x.... 0x....      B.W      GsnIoMux_Sel

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine94:
   \   00000000   0x2103             MOVS     R1,#+3
   \                     ??Subroutine94_0:
   \   00000002   0x2019             MOVS     R0,#+25
   \   00000004   0x.... 0x....      B.W      GsnIoMux_Sel
   5580          
   5581          /**
   5582           ******************************************************************
   5583           * @ingroup S2w-Application
   5584           * @brief Process the AT&K Command.
   5585           * @param ptr Pointer to the user input string.
   5586           * @return status.
   5587           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5588          UINT8
   5589          AppS2wCmd_SoftFlow(UINT8 *ptr)
   5590          {
   \                     AppS2wCmd_SoftFlow:
   \   00000000   0xB580             PUSH     {R7,LR}
   5591          
   5592              UINT8 enable;
   5593              UINT8 status = S2W_SUCCESS;
   5594          
   5595              status = AppS2wParse_Boolean(ptr, &enable);
   \   00000002   0x.... 0x....      BL       ?Subroutine60
   5596              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_378:
   \   00000006   0xB998             CBNZ.N   R0,??AppS2wCmd_SoftFlow_0
   5597              {
   5598                  return status;
   5599              }
   5600          
   5601             s2wCurrent.serialPortConf.conf.uart.softflow = !!enable;
   \   00000008   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000C   0xB100             CBZ.N    R0,??AppS2wCmd_SoftFlow_1
   \   0000000E   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_SoftFlow_1:
   \   00000010   0x....             LDR.N    R1,??DataTable413_1
   \   00000012   0xF8D1 0x21B4      LDR      R2,[R1, #+436]
   \   00000016   0xF022 0x0240      BIC      R2,R2,#0x40
   \   0000001A   0xEA42 0x1080      ORR      R0,R2,R0, LSL #+6
   \   0000001E   0xF8C1 0x01B4      STR      R0,[R1, #+436]
   5602             GsnUart_SwFlowSupportSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_SWFLOW_T)enable);
   \   00000022   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable417_3
   \   0000002A   0x.... 0x....      BL       GsnUart_SwFlowSupportSet
   5603             return status;
   \   0000002E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_SoftFlow_0:
   \   00000030   0xBD02             POP      {R1,PC}          ;; return
   5604          
   5605          
   5606          }
   5607          
   5608          
   5609          
   5610          #endif
   5611          /**
   5612           ******************************************************************
   5613           * @ingroup S2w-Application
   5614           * @brief Process the ATVn Command.
   5615           * @param ptr Pointer to the user input string.
   5616           * @return status.
   5617           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5618          UINT8
   5619          AppS2wCmd_Verbose(UINT8 *ptr)
   5620          {
   5621              return AppS2wParse_Boolean(ptr, &(s2wCurrent.serialPortConf.commonConf.verbose));
   \                     AppS2wCmd_Verbose:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable423
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Boolean
   5622          }
   5623          
   5624          
   5625          /**
   5626           ******************************************************************
   5627           * @ingroup S2w-Application
   5628           * @brief Process the ATEn Command.
   5629           * @param ptr Pointer to the user input string.
   5630           * @return status.
   5631           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5632          UINT8
   5633          AppS2wCmd_Echo(UINT8 *ptr)
   5634          {
   5635             return AppS2wParse_Boolean(ptr,&(s2wCurrent.serialPortConf.commonConf.echo));
   \                     AppS2wCmd_Echo:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable417
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Boolean
   5636          }
   5637          
   5638          
   5639          
   5640          
   5641          
   5642          /**
   5643           ******************************************************************
   5644           * @ingroup S2w-Application
   5645           * @brief Hex print function
   5646           *   This function print the value in hex  passed.
   5647           * @param data - IN  Pointer to the data
   5648           * @param len - IN the length of the data .
   5649           *
   5650           * @return none.
   5651           ******************************************************************/
   5652          

   \                                 In section .text, align 2, keep-with-next
   5653          PUBLIC VOID
   5654          AppS2wHex_Print(UINT8 *data, UINT32 len)
   5655          {
   \                     AppS2wHex_Print:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   5656              static const char hex_asc[] = "0123456789abcdef";
   5657              UINT32 i;
   5658          
   5659              for (i = 0; i < len; i++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x.... 0x....      ADR.W    R7,??hex_asc
   \   0000000C   0xE00B             B.N      ??AppS2wHex_Print_0
   5660              {
   5661                  S2w_PutChar(hex_asc[(data[i] & 0xf0) >> 4]);
   \                     ??AppS2wHex_Print_1:
   \   0000000E   0x5D30             LDRB     R0,[R6, R4]
   \   00000010   0x0900             LSRS     R0,R0,#+4
   \   00000012   0x5DC0             LDRB     R0,[R0, R7]
   \   00000014   0x.... 0x....      BL       S2w_PutChar
   5662                  S2w_PutChar(hex_asc[(data[i] & 0x0f)]);
   \   00000018   0x5D30             LDRB     R0,[R6, R4]
   \   0000001A   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000001E   0x5DC0             LDRB     R0,[R0, R7]
   \   00000020   0x.... 0x....      BL       S2w_PutChar
   5663              }
   \   00000024   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wHex_Print_0:
   \   00000026   0x42AE             CMP      R6,R5
   \   00000028   0xD3F1             BCC.N    ??AppS2wHex_Print_1
   5664          
   5665          }
   \   0000002A   0xBDF1             POP      {R0,R4-R7,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??hex_asc:
   \   00000000   0x30 0x31          DC8 "0123456789abcdef"
   \              0x32 0x33    
   \              0x34 0x35    
   \              0x36 0x37    
   \              0x38 0x39    
   \              0x61 0x62    
   \              0x63 0x64    
   \              0x65 0x66    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         
   5666          
   5667          
   5668          /**
   5669           ******************************************************************
   5670           * @ingroup S2w-Application
   5671           * @brief Process the AT+VER command
   5672           * @param ptr Pointer to the user input string.
   5673           * @return status.
   5674           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5675          PUBLIC UINT8
   5676          App2wCmd_Version(UINT8* ptr)
   5677          {
   \                     App2wCmd_Version:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   \   00000002   0x4605             MOV      R5,R0
   5678              UINT32 wlanVer=0;
   \   00000004   0x2000             MOVS     R0,#+0
   5679              ULONG64 featurebmap = 0;
   \   00000006   0xE9CD 0x0002      STRD     R0,R0,[SP, #+8]
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   5680              UINT8 status = S2W_EINVAL;
   \   0000000C   0x2402             MOVS     R4,#+2
   5681          	UINT32 pltVersion;
   5682          
   5683              if (ptr[0] == '?' && ( ptr[1] == '\0') || (ptr[1] == '?'))
   \   0000000E   0x7829             LDRB     R1,[R5, #+0]
   \   00000010   0x7868             LDRB     R0,[R5, #+1]
   \   00000012   0x293F             CMP      R1,#+63
   \   00000014   0xBF0C             ITE      EQ 
   \   00000016   0x2800             CMPEQ    R0,#+0
   \   00000018   0x283F             CMPNE    R0,#+63
   \   0000001A   0xD123             BNE.N    ??App2wCmd_Version_0
   5684              {
   5685                  pltVersion = GsnVersion_Get();
   \   0000001C   0x.... 0x....      BL       GsnVersion_Get
   5686                  status = GsnSysCtl_WlanFwVerGet(&s2wappMainTaskCtxt->sysCtlCtx,&wlanVer);
   \   00000020   0x.... 0x....      LDR.W    R4,??DataTable423_1
   \   00000024   0x4606             MOV      R6,R0
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0xA901             ADD      R1,SP,#+4
   \   0000002A   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000002E   0x.... 0x....      BL       GsnSysCtl_WlanFwVerGet
   5687          
   5688                  status = GsnSysCtl_WlanFeatureBmapGet(&s2wappMainTaskCtxt->sysCtlCtx,&featurebmap);
   \   00000032   0x6820             LDR      R0,[R4, #+0]
   \   00000034   0xA902             ADD      R1,SP,#+8
   \   00000036   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000003A   0x.... 0x....      BL       GsnSysCtl_WlanFeatureBmapGet
   \   0000003E   0x4604             MOV      R4,R0
   5689          
   5690          #ifndef S2W_IP2WIFI_SUPPORT
   5691                  S2w_Printf("\r\nS2W APP VERSION=%s\r\nS2W GEPS VERSION=%d.%d.%d",
   5692                              S2W_SW_VERSION,(pltVersion >>24),
   5693                         ((pltVersion >>16) & 0xff),((pltVersion>>8) & 0xff));
   \   00000040   0xF3C6 0x2007      UBFX     R0,R6,#+8,#+8
   \   00000044   0x9000             STR      R0,[SP, #+0]
   \   00000046   0xF3C6 0x4307      UBFX     R3,R6,#+16,#+8
   \   0000004A   0x0E32             LSRS     R2,R6,#+24
   \   0000004C   0x.... 0x....      LDR.W    R1,??DataTable424
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nS2W APP VERSION=%s\\r...">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   5694          
   5695                  S2w_Printf("\r\nS2W WLAN VERSION=%d.%d.%d\r\n",((wlanVer >> 24) & 0xff),
   5696                               ((wlanVer >>16) & 0xff),((wlanVer>> 8 ) & 0xff));
   \   00000058   0x.... 0x....      BL       ?Subroutine103
   5697          #else
   5698                  S2w_Printf("\r\nIP2WIFI APP VERSION=%s\r\nIP2WIFI GEPS VERSION=%d.%d.%d",
   5699                              S2W_SW_VERSION,(pltVersion >>24),
   5700                              ((pltVersion >>16) & 0xff),((pltVersion>>8) & 0xff));
   5701          
   5702                  S2w_Printf("\r\nIP2WIFI WLAN VERSION=%d.%d.%d\r\n",((wlanVer >> 24) & 0xff),
   5703                               ((wlanVer >>16) & 0xff),((wlanVer>> 8 ) & 0xff));
   5704                  status = S2W_SUCCESS;
   5705          #endif
   5706              }
   \                     ??CrossCallReturnLabel_524:
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nS2W WLAN VERSION=%d...">`
   \   00000060   0x.... 0x....      BL       S2w_Printf
   5707          
   5708              if((ptr[0] == '?') && (ptr[1] == '?') && (ptr[2] == '\0'))
   \                     ??App2wCmd_Version_0:
   \   00000064   0x7828             LDRB     R0,[R5, #+0]
   \   00000066   0x283F             CMP      R0,#+63
   \   00000068   0xBF01             ITTTT    EQ 
   \   0000006A   0x7868             LDRBEQ   R0,[R5, #+1]
   \   0000006C   0x283F             CMPEQ    R0,#+63
   \   0000006E   0x78A8             LDRBEQ   R0,[R5, #+2]
   \   00000070   0x2800             CMPEQ    R0,#+0
   \   00000072   0xF040 0x8086      BNE.W    ??App2wCmd_Version_1
   5709              {
   5710          #ifndef S2W_IP2WIFI_SUPPORT
   5711                  S2w_Printf("S2W BIN TYPE=%s\r\nS2W RELEASE TYPE=%s\r\n",
   5712                             S2W_BIN_TYPE,S2W_RELEASE_TYPE);
   \   00000076   0x....             ADR.N    R2,??DataTable415  ;; 0x47, 0x41, 0x00, 0x00
   \   00000078   0x.... 0x....      ADR.W    R1,`?<Constant "GS2K_DEFAULT">`
   \   0000007C   0x.... 0x....      ADR.W    R0,`?<Constant "S2W BIN TYPE=%s\\r\\nS2W ...">`
   \   00000080   0x.... 0x....      BL       S2w_Printf
   5713          #else
   5714                  S2w_Printf("IP2WIFI BIN TYPE=%s\r\nIP2WIFI RELEASE TYPE=%s\r\n",
   5715                             S2W_BIN_TYPE,S2W_RELEASE_TYPE);
   5716          #endif
   5717                  S2w_Printf("BUILD TIME=%s\r\n",__TIME__);
   \   00000084   0x.... 0x....      ADR.W    R1,`?<Constant "15:23:23">`
   \   00000088   0x.... 0x....      ADR.W    R0,`?<Constant "BUILD TIME=%s\\r\\n">`
   \   0000008C   0x.... 0x....      BL       S2w_Printf
   5718                  S2w_Printf("BUILD DATE=%s\r\n",__DATE__);
   \   00000090   0x.... 0x....      ADR.W    R1,`?<Constant "Nov 19 2015">`
   \   00000094   0x.... 0x....      ADR.W    R0,`?<Constant "BUILD DATE=%s\\r\\n">`
   \   00000098   0x.... 0x....      BL       S2w_Printf
   5719                  S2w_Printf("WLAN EXT VERSION=%d\r\n",((wlanVer) & 0xff));
   \   0000009C   0x9801             LDR      R0,[SP, #+4]
   \   0000009E   0xB2C1             UXTB     R1,R0
   \   000000A0   0x.... 0x....      ADR.W    R0,`?<Constant "WLAN EXT VERSION=%d\\r\\n">`
   \   000000A4   0x.... 0x....      BL       S2w_Printf
   5720          
   5721          #ifndef S2W_IP2WIFI_SUPPORT
   5722                  S2w_Printf("S2W APP EXT VERSION=%s\r\n",S2W_SW_EXT_VERSION);
   \   000000A8   0x.... 0x....      ADR.W    R0,`?<Constant "S2W APP EXT VERSION=%s\\r\\n">`
   \   000000AC   0x....             ADR.N    R1,??DataTable415_1  ;; 0x31, 0x30, 0x00, 0x00
   \   000000AE   0x.... 0x....      BL       S2w_Printf
   5723          #else
   5724                  S2w_Printf("IP2WIFI APP EXT VERSION=%s\r\n",S2W_SW_EXT_VERSION);
   5725          #endif
   5726                  S2w_Printf("WLAN FEAT BMAP=%016llx\r\n",featurebmap);
   \   000000B2   0xE9DD 0x2302      LDRD     R2,R3,[SP, #+8]
   \   000000B6   0x.... 0x....      ADR.W    R0,`?<Constant "WLAN FEAT BMAP=%016llx\\r\\n">`
   \   000000BA   0x.... 0x....      BL       S2w_Printf
   5727                  S2w_Printf("GEPS EXT VERSION=%d\r\n",(pltVersion&0xff));
   \   000000BE   0x.... 0x....      ADR.W    R0,`?<Constant "GEPS EXT VERSION=%d\\r\\n">`
   \   000000C2   0xB2F1             UXTB     R1,R6
   \   000000C4   0x.... 0x....      BL       S2w_Printf
   5728                  // get the flash connected details
   5729                  {
   5730          			UINT32 flashId = 0;
   5731          			UINT8* des=NULL;
   5732          			/* request PIO control */
   5733                      GsnFlashIf_PioReq();
   \   000000C8   0x.... 0x....      LDR.W    R5,??DataTable424_1  ;; 0x400e0408
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x60A8             STR      R0,[R5, #+8]
   \                     ??App2wCmd_Version_2:
   \   000000D0   0x68E8             LDR      R0,[R5, #+12]
   \   000000D2   0x07C0             LSLS     R0,R0,#+31
   \   000000D4   0xD5FC             BPL.N    ??App2wCmd_Version_2
   5734                      flashId = GsnFlashIf_FlashIdRead() & 0xFFFF;
   \   000000D6   0x2002             MOVS     R0,#+2
   \   000000D8   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   000000DC   0x2003             MOVS     R0,#+3
   \   000000DE   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   000000E2   0x209F             MOVS     R0,#+159
   \   000000E4   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable424_2  ;; 0x400e0004
   \                     ??App2wCmd_Version_3:
   \   000000EC   0x6801             LDR      R1,[R0, #+0]
   \   000000EE   0xF3C1 0x0180      UBFX     R1,R1,#+2,#+1
   \   000000F2   0x2900             CMP      R1,#+0
   \   000000F4   0xD1FA             BNE.N    ??App2wCmd_Version_3
   \   000000F6   0x6828             LDR      R0,[R5, #+0]
   \   000000F8   0xB286             UXTH     R6,R0
   5735                      if(flashId ==0x0000)
   \   000000FA   0xB926             CBNZ.N   R6,??App2wCmd_Version_4
   5736                      {
   5737          				S2w_Printf("No Flash");
   \   000000FC   0x.... 0x....      ADR.W    R0,`?<Constant "No Flash">`
   \   00000100   0x.... 0x....      BL       S2w_Printf
   \   00000104   0xE038             B.N      ??App2wCmd_Version_5
   5738          			}
   5739          			else
   5740          			{
   5741          				S2w_Printf("FLASH ID=0x%08x",flashId);
   \                     ??App2wCmd_Version_4:
   \   00000106   0x4631             MOV      R1,R6
   \   00000108   0x.... 0x....      ADR.W    R0,`?<Constant "FLASH ID=0x%08x">`
   \   0000010C   0x.... 0x....      BL       S2w_Printf
   5742          				switch(flashId)
   \   00000110   0xF241 0x501C      MOVW     R0,#+5404
   \   00000114   0x4286             CMP      R6,R0
   \   00000116   0xD024             BEQ.N    ??App2wCmd_Version_6
   \   00000118   0xF242 0x00C2      MOVW     R0,#+8386
   \   0000011C   0x4286             CMP      R6,R0
   \   0000011E   0xD017             BEQ.N    ??App2wCmd_Version_7
   \   00000120   0xF242 0x40C2      MOVW     R0,#+9410
   \   00000124   0x4286             CMP      R6,R0
   \   00000126   0xD010             BEQ.N    ??App2wCmd_Version_8
   \   00000128   0xF242 0x50C2      MOVW     R0,#+9666
   \   0000012C   0x4286             CMP      R6,R0
   \   0000012E   0xD00F             BEQ.N    ??App2wCmd_Version_7
   \   00000130   0xF243 0x001C      MOVW     R0,#+12316
   \   00000134   0x4286             CMP      R6,R0
   \   00000136   0xD017             BEQ.N    ??App2wCmd_Version_9
   \   00000138   0xF244 0x00C8      MOVW     R0,#+16584
   \   0000013C   0x4286             CMP      R6,R0
   \   0000013E   0xD00D             BEQ.N    ??App2wCmd_Version_10
   \   00000140   0xF246 0x00C8      MOVW     R0,#+24776
   \   00000144   0x4286             CMP      R6,R0
   \   00000146   0xD006             BEQ.N    ??App2wCmd_Version_11
   \   00000148   0xE011             B.N      ??App2wCmd_Version_12
   5743          				{
   5744          					case 0x20c2:
   5745          					   des = "MICRONIX-4MB";
   5746          					break;
   5747          					case 0x24c2:
   5748          					   des = "MICRONIX-2MB";
   \                     ??App2wCmd_Version_8:
   \   0000014A   0x.... 0x....      ADR.W    R1,`?<Constant "MICRONIX-2MB">`
   5749          					break;
   \   0000014E   0xE010             B.N      ??App2wCmd_Version_13
   5750          					case 0x25c2:
   5751          					   des = "MICRONIX-4MB";
   \                     ??App2wCmd_Version_7:
   \   00000150   0x.... 0x....      ADR.W    R1,`?<Constant "MICRONIX-4MB">`
   5752          					break;
   \   00000154   0xE00D             B.N      ??App2wCmd_Version_13
   5753          					case 0x60c8:
   5754          					   des = "GIGA-4MB";
   \                     ??App2wCmd_Version_11:
   \   00000156   0x.... 0x....      ADR.W    R1,`?<Constant "GIGA-4MB">`
   5755          					break;
   \   0000015A   0xE00A             B.N      ??App2wCmd_Version_13
   5756          					case 0x40c8:
   5757          					   des = "GIGA-2MB";
   \                     ??App2wCmd_Version_10:
   \   0000015C   0x.... 0x....      ADR.W    R1,`?<Constant "GIGA-2MB">`
   5758          					break;
   \   00000160   0xE007             B.N      ??App2wCmd_Version_13
   5759          					case 0x151c:
   5760          					   des = "EON-2MB";
   \                     ??App2wCmd_Version_6:
   \   00000162   0x.... 0x....      ADR.W    R1,`?<Constant "EON-2MB">`
   5761          					break;
   \   00000166   0xE004             B.N      ??App2wCmd_Version_13
   5762          					case 0x301c:
   5763          					   des = "EON-4MB";
   \                     ??App2wCmd_Version_9:
   \   00000168   0x.... 0x....      ADR.W    R1,`?<Constant "EON-4MB">`
   5764          					break;
   \   0000016C   0xE001             B.N      ??App2wCmd_Version_13
   5765          					default:
   5766          					   des = "UNKNOWN";
   \                     ??App2wCmd_Version_12:
   \   0000016E   0x.... 0x....      ADR.W    R1,`?<Constant "UNKNOWN">`
   5767          					break;
   5768          
   5769          				}
   5770          				S2w_Printf(":%s",des);
   \                     ??App2wCmd_Version_13:
   \   00000172   0x....             ADR.N    R0,??DataTable416_1  ;; ":%s"
   \   00000174   0x.... 0x....      BL       S2w_Printf
   5771          			}
   5772          			/* release PIO control */
   5773          			GsnFlashIf_PioRelease();
   \                     ??App2wCmd_Version_5:
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x60A8             STR      R0,[R5, #+8]
   \                     ??App2wCmd_Version_14:
   \   0000017C   0x68E8             LDR      R0,[R5, #+12]
   \   0000017E   0x07C0             LSLS     R0,R0,#+31
   \   00000180   0xD4FC             BMI.N    ??App2wCmd_Version_14
   5774          
   5775          
   5776          		}
   5777          	}
   5778              return status;
   \                     ??App2wCmd_Version_1:
   \   00000182   0xB2E0             UXTB     R0,R4
   \   00000184   0xB004             ADD      SP,SP,#+16
   \   00000186   0xBD70             POP      {R4-R6,PC}       ;; return
   5779          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine103:
   \   00000000   0x9801             LDR      R0,[SP, #+4]
   \   00000002   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000006   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000000A   0x0E01             LSRS     R1,R0,#+24
   \   0000000C   0x4770             BX       LR
   5780          
   5781          /**
   5782           ******************************************************************
   5783           * @ingroup S2w-Application
   5784           * @brief Process the AT+RESET command
   5785           * @param ptr Pointer to the user input string.
   5786           * @return status.
   5787           ******************************************************************/
   5788          

   \                                 In section .text, align 2, keep-with-next
   5789          UINT8
   5790          AppS2wCmd_reset(UINT8* ptr)
   5791          {
   \                     AppS2wCmd_reset:
   \   00000000   0xB580             PUSH     {R7,LR}
   5792          	// make sure spi-Dma gpio goes low
   5793          	if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   00000002   0x.... 0x....      BL       ?Subroutine128
   \                     ??CrossCallReturnLabel_599:
   \   00000006   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000000A   0x5C40             LDRB     R0,[R0, R1]
   \   0000000C   0x2802             CMP      R0,#+2
   \   0000000E   0xD104             BNE.N    ??AppS2wCmd_reset_0
   5794          	{
   5795          	    GsnGpio_OutClear(s2wSerialPortHandle.spiFsHandle.spi.spiGpioBitMap);
   \   00000010   0x....             LDR.N    R2,??DataTable417_3
   \   00000012   0xE9D2 0x013A      LDRD     R0,R1,[R2, #+232]
   \   00000016   0x.... 0x....      BL       GsnGpio_OutClear
   5796          	}
   5797              GsnSys_Reset(GSN_RESET_REASON_APP_ASSERT);
   \                     ??AppS2wCmd_reset_0:
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C                      REQUIRE ?Subroutine2
   \   0000001C                      ;; // Fall through to label ?Subroutine2
   5798              return S2W_SUCCESS;
   5799          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      BL       GsnSys_Reset
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine128:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable448
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0x4770             BX       LR
   5800          
   5801          /**
   5802           ******************************************************************
   5803           * @ingroup S2w-Application
   5804           * @brief Process the AT+apconf command
   5805           * @param ptr Pointer to the user input string.
   5806           * @return status.
   5807           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5808          UINT8
   5809          AppS2wCmd_ApConf(UINT8* ptr)
   5810          {
   \                     AppS2wCmd_ApConf:
   \   00000000   0xB580             PUSH     {R7,LR}
   5811              UINT8 status;
   5812              BOOL init=0;
   \   00000002   0x.... 0x....      BL       ?Subroutine21
   5813              status = AppS2wParse_Boolean(ptr, &init);
   5814              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_47:
   \   00000006   0xB108             CBZ.N    R0,??AppS2wCmd_ApConf_0
   5815              {
   5816                  return S2W_EINVAL;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0xBD02             POP      {R1,PC}
   5817              }
   5818              s2wappMainTaskCtxt->apConf = init;
   \                     ??AppS2wCmd_ApConf_0:
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable423_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000016   0xF500 0x40ED      ADD      R0,R0,#+30336
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   5819              return S2W_SUCCESS;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return
   5820          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   00000006   0xA900             ADD      R1,SP,#+0
   \   00000008   0x.... 0x....      B.W      AppS2wParse_Boolean
   5821          /**
   5822           ******************************************************************
   5823           * @ingroup S2w-Application
   5824           * @brief Process the AT+WSYNCINTRL command
   5825           * This function validate the input parameter passed and set the
   5826           * syncloss interval as the value passed. The paramter value in number
   5827           * beacons.
   5828           * @param ptr Pointer to the user input string.
   5829           * @return status.
   5830           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5831          UINT8
   5832          S2w_CmdSyncLossIntrvlSet(UINT8 *ptr)
   5833          {
   \                     S2w_CmdSyncLossIntrvlSet:
   \   00000000   0xB580             PUSH     {R7,LR}
   5834              UINT32 interval;
   5835              UINT8 status = S2W_EINVAL;
   5836          
   5837              status = AppS2wParse_Int(ptr, &interval);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   5838              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_299:
   \   00000006   0xB940             CBNZ.N   R0,??S2w_CmdSyncLossIntrvlSet_0
   5839              {
   5840                  return status;
   5841              }
   5842              if((interval < 1) || (interval > 65535))
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0xB110             CBZ.N    R0,??S2w_CmdSyncLossIntrvlSet_1
   \   0000000C   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000010   0xD301             BCC.N    ??S2w_CmdSyncLossIntrvlSet_2
   5843              {
   5844                  return S2W_EINVAL;
   \                     ??S2w_CmdSyncLossIntrvlSet_1:
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xBD02             POP      {R1,PC}
   5845              }
   5846              status = AppS2wHal_SyncLossIntrvlSet(interval);
   5847          
   5848              return status;
   \                     ??S2w_CmdSyncLossIntrvlSet_2:
   \   00000016   0x.... 0x....      BL       AppS2wHal_SyncLossIntrvlSet
   \                     ??S2w_CmdSyncLossIntrvlSet_0:
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
   5849          }
   5850          
   5851          
   5852          
   5853          /**
   5854           ******************************************************************
   5855           * @ingroup S2w-Application
   5856           * @brief Process the AT+NCLOSEALL Command.
   5857           *   This function call the hal function to close all the tcp/udp socket
   5858           *   opened.
   5859           * @param ptr Pointer to the user input string.
   5860           * @return S2W_SUCCESS - operation successful.
   5861           * @retval S2W_FAILURE - operation failure.
   5862           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5863          PUBLIC UINT8
   5864          AppS2wCmd_Ncloseall(UINT8 *ptr)
   5865          {
   5866              /* call the hal function which close all the tcp/udp sockets
   5867               */
   5868              if (*ptr)
   \                     AppS2wCmd_Ncloseall:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x.... 0x....      BEQ.W    AppS2wHal_NetCloseAll
   5869                  return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x4770             BX       LR
   5870              else
   5871                  return AppS2wHal_NetCloseAll(0);
   5872          }
   5873          
   5874          
   5875          /**
   5876           ******************************************************************
   5877           * @ingroup S2w-Application
   5878           * @brief Process the AT+NCLOSE Command.
   5879           * @param ptr Pointer to the user input string.
   5880           *
   5881           * @return S2W_SUCCESS - operation successful.
   5882           * @retval S2W_EINVAL  - operation failure-invalid command.
   5883           * @retval S2W_FAILURE - operation failure-socket close failed.
   5884           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5885          PUBLIC UINT8
   5886          AppS2wCmd_Nclose(UINT8 *ptr)
   5887          {
   \                     AppS2wCmd_Nclose:
   \   00000000   0xB580             PUSH     {R7,LR}
   5888              UINT8 status;
   5889              UINT32 cid;
   5890          
   5891              /* parse the parameter-cid
   5892               */
   5893              status = AppS2wParse_Hex(ptr, &cid);
   \   00000002   0xA900             ADD      R1,SP,#+0
   \   00000004   0x.... 0x....      BL       AppS2wParse_Hex
   5894              if (status != S2W_SUCCESS)
   \   00000008   0xB918             CBNZ.N   R0,??AppS2wCmd_Nclose_0
   5895              {
   5896                  return status;
   5897              }
   5898              /* call the hal function to close a particular cid created
   5899               */
   5900              return AppS2wHal_NetClose(cid);
   \   0000000A   0x9800             LDR      R0,[SP, #+0]
   \   0000000C   0xB2C0             UXTB     R0,R0
   \   0000000E   0x.... 0x....      BL       AppS2wHal_NetClose
   \                     ??AppS2wCmd_Nclose_0:
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
   5901          }
   5902          

   \                                 In section .text, align 2, keep-with-next
   5903          VOID
   5904          AppS2wSecurity_Display(S2W_SECURITY_T *sec)
   5905          {
   \                     AppS2wSecurity_Display:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   5906              INT32 i;
   5907          
   5908              S2w_Printf("+WAUTH=%d +WWPA=\"%s\"", sec->authMode,
   5909                     sec->wpa.wpaPassPhrase);
   \   00000006   0xF104 0x023B      ADD      R2,R4,#+59
   \   0000000A   0x7821             LDRB     R1,[R4, #+0]
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "+WAUTH=%d +WWPA=\\"%s\\"">`
   \   00000010   0x.... 0x....      BL       S2w_Printf
   5910              S2w_Printf("+PSK-valid=%d +SSID=%s",sec->wpa.pskValid,sec->wpa.ssid);
   \   00000014   0xF894 0x107C      LDRB     R1,[R4, #+124]
   \   00000018   0x.... 0x....      ADR.W    R0,`?<Constant "+PSK-valid=%d +SSID=%s">`
   \   0000001C   0xF104 0x029D      ADD      R2,R4,#+157
   \   00000020   0x.... 0x....      BL       S2w_Printf
   5911              for (i = 0; i < 4; i++)
   \   00000024   0x2500             MOVS     R5,#+0
   \   00000026   0x.... 0x....      ADR.W    R8,`?<Constant "%s+WWEP%d=">`
   \   0000002A   0x....             ADR.N    R6,??DataTable417_1  ;; " "
   \   0000002C   0x....             ADR.N    R7,??DataTable417_2  ;; 0x0D, 0x0A, 0x00, 0x00
   5912              {
   5913                  S2w_Printf("%s+WWEP%d=", !(i & 1) ? "\r\n" : " ", i + 1);
   \                     ??AppS2wSecurity_Display_0:
   \   0000002E   0x07E8             LSLS     R0,R5,#+31
   \   00000030   0xBF54             ITE      PL 
   \   00000032   0x4639             MOVPL    R1,R7
   \   00000034   0x4631             MOVMI    R1,R6
   \   00000036   0xF105 0x0901      ADD      R9,R5,#+1
   \   0000003A   0x464A             MOV      R2,R9
   \   0000003C   0x4640             MOV      R0,R8
   \   0000003E   0x.... 0x....      BL       S2w_Printf
   5914                  AppS2wHex_Print(sec->wep.key[i], sec->wep.keyLen[i]);
   \   00000042   0x1928             ADDS     R0,R5,R4
   \   00000044   0x78C1             LDRB     R1,[R0, #+3]
   \   00000046   0x200D             MOVS     R0,#+13
   \   00000048   0xFB00 0x4005      MLA      R0,R0,R5,R4
   \   0000004C   0x1DC0             ADDS     R0,R0,#+7
   \   0000004E   0x.... 0x....      BL       AppS2wHex_Print
   5915              }
   \   00000052   0x464D             MOV      R5,R9
   \   00000054   0x2D04             CMP      R5,#+4
   \   00000056   0xDBEA             BLT.N    ??AppS2wSecurity_Display_0
   5916          
   5917          }
   \   00000058   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
   5918          
   5919          
   5920          /**
   5921           ******************************************************************
   5922           * @ingroup S2w-Application
   5923           * @brief Ip address print function
   5924           *   This function display Ip address passed.
   5925           * @param ip - IN ptr Pointer to the user input ip string.
   5926           *
   5927           * @return none.
   5928           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5929          PUBLIC VOID
   5930          AppS2wIp_Print(S2W_IPADDR_T ip)
   5931          {
   \                     AppS2wIp_Print:
   \   00000000   0xB580             PUSH     {R7,LR}
   5932              S2w_Printf("%d.%d.%d.%d", ip[3], ip[2], ip[1], ip[0]);
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x7843             LDRB     R3,[R0, #+1]
   \   00000008   0x7882             LDRB     R2,[R0, #+2]
   \   0000000A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "%d.%d.%d.%d">`
   \   00000010   0x.... 0x....      BL       S2w_Printf
   5933          }
   \   00000014   0xBD01             POP      {R0,PC}          ;; return
   5934          
   5935          /**
   5936           ******************************************************************
   5937           * @ingroup S2w-Application
   5938           * @brief profile display function.
   5939           *   This function dispaly active and stored profile parameters.
   5940           * @param profile of the profile to display
   5941          
   5942           * @return S2W_SUCCESS - operation successful.
   5943           * @retval S2W_EINVAL  - operation failure-invalid command.
   5944           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   5945          PUBLIC VOID
   5946          AppS2wProfile_Display(S2W_PROFILE_T *profile)
   5947          {
   \                     AppS2wProfile_Display:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   5948          #ifndef S2W_IP2WIFI_SUPPORT
   5949              UINT8 vBuff[4]={"\","};
   \   00000002   0x.... 0x....      ADR.W    R1,`?<Constant "\\",">`
   \   00000006   0x680A             LDR      R2,[R1, #0]
   \   00000008   0x4604             MOV      R4,R0
   \   0000000A   0xA803             ADD      R0,SP,#+12
   \   0000000C   0x6002             STR      R2,[R0, #+0]
   5950          #endif
   5951          #ifdef S2W_UART_ENABLE
   5952              INT8 c;
   5953          #endif
   5954              if (profile == &s2wCurrent)
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable430_1
   \   00000012   0x4284             CMP      R4,R0
   \   00000014   0xD106             BNE.N    ??AppS2wProfile_Display_0
   5955              {
   5956                  /* C and Y are common settings */
   5957                  S2w_Printf("C%d " "&Y%d ",
   5958                          profile_params.autoConnect,
   5959                          profile_params.defaultProfile);
   \   00000016   0x....             LDR.N    R0,??DataTable417_4
   \   00000018   0x7942             LDRB     R2,[R0, #+5]
   \   0000001A   0x7901             LDRB     R1,[R0, #+4]
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "C%d &Y%d ">`
   \   00000020   0x.... 0x....      BL       S2w_Printf
   5960              }
   5961          
   5962          #if  0  //GSN_FS_SPI_ENABLE
   5963          if(APP_S2W_GET_SERIAL_DEVICE_ID())
   5964          {//S2W_PORT_SPI
   5965          
   5966          /* Dispaly SPI configurations
   5967              */
   5968             S2w_Printf("E%d V%d",
   5969                   profile->serialPortConf.commonConf.echo,
   5970                   profile->serialPortConf.commonConf.verbose);
   5971          
   5972             S2w_Printf(" &K%d CPL%d CPH%d\r\n",
   5973                   profile->serialPortConf.conf.spi.flowCtrl,
   5974                   profile->serialPortConf.conf.spi.clockPolarity,
   5975                   profile->serialPortConf.conf.spi.clockPhase);
   5976          
   5977          }else
   5978          #endif
   5979          {
   5980          
   5981          #ifdef S2W_UART_ENABLE
   5982              /* Dispaly uart configurations
   5983                */
   5984              S2w_Printf("E%d V%d B=%u,%d,",
   5985                      profile->serialPortConf.commonConf.echo,
   5986                      profile->serialPortConf.commonConf.verbose,
   5987                      profile->serialPortConf.conf.uart.baudrate, profile->serialPortConf.conf.uart.bits + 5);
   \                     ??AppS2wProfile_Display_0:
   \   00000024   0xF504 0x75D8      ADD      R5,R4,#+432
   \   00000028   0x7928             LDRB     R0,[R5, #+4]
   \   0000002A   0xF000 0x0003      AND      R0,R0,#0x3
   \   0000002E   0x1D40             ADDS     R0,R0,#+5
   \   00000030   0x9000             STR      R0,[SP, #+0]
   \   00000032   0x68AB             LDR      R3,[R5, #+8]
   \   00000034   0x786A             LDRB     R2,[R5, #+1]
   \   00000036   0xF894 0x11B0      LDRB     R1,[R4, #+432]
   \   0000003A   0x.... 0x....      ADR.W    R0,`?<Constant "E%d V%d B=%u,%d,">`
   \   0000003E   0x.... 0x....      BL       S2w_Printf
   5988          
   5989              switch (profile->serialPortConf.conf.uart.parity)
   \   00000042   0x6868             LDR      R0,[R5, #+4]
   \   00000044   0x08C1             LSRS     R1,R0,#+3
   \   00000046   0xF001 0x0107      AND      R1,R1,#0x7
   \   0000004A   0x2901             CMP      R1,#+1
   \   0000004C   0xD002             BEQ.N    ??AppS2wProfile_Display_1
   \   0000004E   0x2902             CMP      R1,#+2
   \   00000050   0xD002             BEQ.N    ??AppS2wProfile_Display_2
   \   00000052   0xE003             B.N      ??AppS2wProfile_Display_3
   5990              {
   5991                  case S2W_UARTCONF_PARITY_ODD:
   5992                  c = 'O';
   \                     ??AppS2wProfile_Display_1:
   \   00000054   0x214F             MOVS     R1,#+79
   5993                  break;
   \   00000056   0xE002             B.N      ??AppS2wProfile_Display_4
   5994          
   5995                 case S2W_UARTCONF_PARITY_EVEN:
   5996                  c = 'E';
   \                     ??AppS2wProfile_Display_2:
   \   00000058   0x2145             MOVS     R1,#+69
   5997                  break;
   \   0000005A   0xE000             B.N      ??AppS2wProfile_Display_4
   5998          
   5999                  default:
   6000                  c = 'N';
   \                     ??AppS2wProfile_Display_3:
   \   0000005C   0x214E             MOVS     R1,#+78
   6001              }
   6002          
   6003              S2w_Printf("%c,%d", c,
   6004                     profile->serialPortConf.conf.uart.stop == S2W_UARTCONF_STOP_2 ? 2 : 1);
   \                     ??AppS2wProfile_Display_4:
   \   0000005E   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000062   0x2800             CMP      R0,#+0
   \   00000064   0xBF14             ITE      NE 
   \   00000066   0x2202             MOVNE    R2,#+2
   \   00000068   0x2201             MOVEQ    R2,#+1
   \   0000006A   0x.... 0x....      ADR.W    R0,`?<Constant "%c,%d">`
   \   0000006E   0x.... 0x....      BL       S2w_Printf
   6005          
   6006              S2w_Printf(" &K%d &R%d\r\n",
   6007                     profile->serialPortConf.conf.uart.softflow, profile->serialPortConf.conf.uart.hardflow);
   \   00000072   0x6868             LDR      R0,[R5, #+4]
   \   00000074   0xF3C0 0x12C0      UBFX     R2,R0,#+7,#+1
   \   00000078   0xF3C0 0x1180      UBFX     R1,R0,#+6,#+1
   \   0000007C   0x.... 0x....      ADR.W    R0,`?<Constant " &K%d &R%d\\r\\n">`
   \   00000080   0x.... 0x....      BL       S2w_Printf
   6008          #endif
   6009          
   6010          }
   6011          
   6012              /* Display Ip settings
   6013               */
   6014          
   6015              S2w_Printf("+NDHCP=%d +NSET=", profile->netConf.dhcp);
   \   00000084   0x.... 0x....      BL       ?Subroutine100
   6016              AppS2wIp_Print(profile->netConf.ipAddr);
   \                     ??CrossCallReturnLabel_514:
   \   00000088   0xF504 0x70C6      ADD      R0,R4,#+396
   \   0000008C   0x.... 0x....      BL       AppS2wIp_Print
   6017              S2w_PutChar(',');
   \   00000090   0x.... 0x....      BL       ?Subroutine133
   6018          
   6019              AppS2wIp_Print(profile->netConf.netMask);
   \                     ??CrossCallReturnLabel_617:
   \   00000094   0xF504 0x70C8      ADD      R0,R4,#+400
   \   00000098   0x.... 0x....      BL       AppS2wIp_Print
   6020              S2w_PutChar(',');
   \   0000009C   0x.... 0x....      BL       ?Subroutine133
   6021              AppS2wIp_Print(profile->netConf.gateway);
   \                     ??CrossCallReturnLabel_616:
   \   000000A0   0xF504 0x70CA      ADD      R0,R4,#+404
   \   000000A4   0x.... 0x....      BL       AppS2wIp_Print
   6022              
   6023              S2w_Printf("\r\n+DNS1=");
   \   000000A8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+DNS1=">`
   \   000000AC   0x.... 0x....      BL       S2w_Printf
   6024              AppS2wIp_Print(profile->dns1);
   \   000000B0   0xF504 0x70D4      ADD      R0,R4,#+424
   \   000000B4   0x.... 0x....      BL       AppS2wIp_Print
   6025              S2w_Printf(", +DNS2=");
   \   000000B8   0x.... 0x....      ADR.W    R0,`?<Constant ", +DNS2=">`
   \   000000BC   0x.... 0x....      BL       S2w_Printf
   6026              AppS2wIp_Print(profile->dns2);
   \   000000C0   0xF504 0x70D6      ADD      R0,R4,#+428
   \   000000C4   0x.... 0x....      BL       AppS2wIp_Print
   \   000000C8   0x7921             LDRB     R1,[R4, #+4]
   \   000000CA   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+WM=%d ">`
   \   000000CE   0x2901             CMP      R1,#+1
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x2100             MOVEQ    R1,#+0
   6027              
   6028              if(profile->mode == S2W_WLANDATA_MODE_INFRA)
   6029              {
   6030                  S2w_Printf("\r\n+WM=%d ", 0);
   6031              }
   6032              else
   6033              {
   6034                  S2w_Printf("\r\n+WM=%d ", profile->mode);
   \   000000D4   0x.... 0x....      BL       S2w_Printf
   6035              }
   6036          #ifndef S2W_IP2WIFI_SUPPORT
   6037              if(profile->autoWlandata.mode == S2W_WLANDATA_MODE_INFRA)
   \   000000D8   0x.... 0x....      BL       ?Subroutine134
   \                     ??CrossCallReturnLabel_618:
   \   000000DC   0xBF08             IT       EQ 
   \   000000DE   0x2100             MOVEQ    R1,#+0
   6038              {
   6039                  S2w_Printf("+WAUTO=%d,\"", 0);
   6040          	}
   6041          	else
   6042          	{
   6043              S2w_Printf("+WAUTO=%d,\"", profile->autoWlandata.mode);
   \   000000E0   0x.... 0x....      BL       S2w_Printf
   6044          	}
   6045              AppS2wHal_CharNPut(profile->autoWlandata.ssid,
   6046                      profile->autoWlandata.ssidLen);
   \   000000E4   0x.... 0x....      BL       ?Subroutine122
   6047              if (profile->autoWlandata.validBssid)
   \                     ??CrossCallReturnLabel_583:
   \   000000E8   0x7AE8             LDRB     R0,[R5, #+11]
   \   000000EA   0xB110             CBZ.N    R0,??AppS2wProfile_Display_5
   6048              {
   6049                  S2w_Printf("\",%02x:%02x:%02x:%02x:%02x:%02x",
   6050                          profile->autoWlandata.bssid[0],
   6051                          profile->autoWlandata.bssid[1],
   6052                          profile->autoWlandata.bssid[2],
   6053                          profile->autoWlandata.bssid[3],
   6054                          profile->autoWlandata.bssid[4],
   6055                          profile->autoWlandata.bssid[5]);
   \   000000EC   0x.... 0x....      BL       ?Subroutine8
   6056              }
   \                     ??CrossCallReturnLabel_11:
   \   000000F0   0xE003             B.N      ??AppS2wProfile_Display_6
   6057              else
   6058              {
   6059                  AppS2wHal_CharNPut(vBuff,2);
   \                     ??AppS2wProfile_Display_5:
   \   000000F2   0x2102             MOVS     R1,#+2
   \   000000F4   0xA803             ADD      R0,SP,#+12
   \   000000F6   0x.... 0x....      BL       AppS2wHal_CharNPut
   6060              }
   6061          
   6062              if(0 == profile->autoWlandata.channel)
   \                     ??AppS2wProfile_Display_6:
   \   000000FA   0x7A69             LDRB     R1,[R5, #+9]
   \   000000FC   0xB919             CBNZ.N   R1,??AppS2wProfile_Display_7
   6063              {
   6064                  S2w_Printf(",\r\n");
   \   000000FE   0x....             ADR.N    R0,??DataTable418  ;; ",\r\n"
   \   00000100   0x.... 0x....      BL       S2w_Printf
   \   00000104   0xE003             B.N      ??AppS2wProfile_Display_8
   6065              }
   6066              else
   6067              {
   6068                  S2w_Printf(",%d\r\n", profile->autoWlandata.channel);
   \                     ??AppS2wProfile_Display_7:
   \   00000106   0x.... 0x....      ADR.W    R0,`?<Constant ",%d\\r\\n">`
   \   0000010A   0x.... 0x....      BL       S2w_Printf
   6069              }
   6070          #endif
   6071              S2w_Printf("+WRETRY=%u +WP=%d +WRXPS=%d +WRXACTIVE=%d\r\n",
   6072                      profile->retryCount, profile->txPower,
   6073                      profile->powerSave, profile->radio);
   \                     ??AppS2wProfile_Display_8:
   \   0000010E   0x7928             LDRB     R0,[R5, #+4]
   \   00000110   0x9000             STR      R0,[SP, #+0]
   \   00000112   0x78EB             LDRB     R3,[R5, #+3]
   \   00000114   0x786A             LDRB     R2,[R5, #+1]
   \   00000116   0x78A9             LDRB     R1,[R5, #+2]
   \   00000118   0x.... 0x....      ADR.W    R0,`?<Constant "+WRETRY=%u +WP=%d +WR...">`
   \   0000011C   0x.... 0x....      BL       S2w_Printf
   6074          #ifndef S2W_IP2WIFI_SUPPORT
   6075              S2w_Printf("+NAUTO="
   6076                      "%d,"
   6077                      "%d,",
   6078                      profile->autoNetdata.mode,
   6079                      profile->autoNetdata.proto);
   \   00000120   0xF894 0x103C      LDRB     R1,[R4, #+60]
   \   00000124   0x.... 0x....      ADR.W    R0,`?<Constant "+NAUTO=%d,%d,">`
   \   00000128   0xF104 0x053C      ADD      R5,R4,#+60
   \   0000012C   0x786A             LDRB     R2,[R5, #+1]
   \   0000012E   0x.... 0x....      BL       S2w_Printf
   6080              *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
   \   00000132   0x.... 0x....      BL       ?Subroutine98
   6081              AppS2wIp_Print(profile->autoNetdata.ipAddr);
   \                     ??CrossCallReturnLabel_509:
   \   00000136   0xF104 0x0040      ADD      R0,R4,#+64
   \   0000013A   0x.... 0x....      BL       AppS2wIp_Print
   6082              *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
   \   0000013E   0x.... 0x....      BL       ?Subroutine98
   6083              S2w_Printf(",%d", profile->autoNetdata.port);
   \                     ??CrossCallReturnLabel_510:
   \   00000142   0x....             ADR.N    R6,??DataTable418_1  ;; ",%d"
   \   00000144   0x8869             LDRH     R1,[R5, #+2]
   \   00000146   0x4630             MOV      R0,R6
   \   00000148   0x.... 0x....      BL       S2w_Printf
   6084              if((profile->autoNetdata.mode == 0) &&(profile->autoNetdata.proto == S2W_NETDATA_PROTO_UDP))
   \   0000014C   0xF894 0x003C      LDRB     R0,[R4, #+60]
   \   00000150   0x2800             CMP      R0,#+0
   \   00000152   0xBF04             ITT      EQ 
   \   00000154   0x7868             LDRBEQ   R0,[R5, #+1]
   \   00000156   0x2800             CMPEQ    R0,#+0
   \   00000158   0xD104             BNE.N    ??AppS2wProfile_Display_9
   6085              {
   6086          		S2w_Printf(",%d", profile->udpSrcPort);
   \   0000015A   0xF8B4 0x13A6      LDRH     R1,[R4, #+934]
   \   0000015E   0x4630             MOV      R0,R6
   \   00000160   0x.... 0x....      BL       S2w_Printf
   6087          	}
   6088          	S2w_Printf("\r\n");
   \                     ??AppS2wProfile_Display_9:
   \   00000164   0x.... 0x....      BL       ?Subroutine91
   6089          	
   6090          #endif
   6091              /* display security parameters
   6092               */
   6093              AppS2wSecurity_Display(&profile->security);
   \                     ??CrossCallReturnLabel_491:
   \   00000168   0xF104 0x0078      ADD      R0,R4,#+120
   \   0000016C   0x.... 0x....      BL       AppS2wSecurity_Display
   6094          
   6095              /* Display registers
   6096               */
   6097          #ifndef S2W_IP2WIFI_SUPPORT
   6098              AppS2wRegisters_Display(profile);
   \   00000170   0x4620             MOV      R0,R4
   \   00000172   0x.... 0x....      BL       AppS2wRegisters_Display
   6099          #endif
   6100              S2w_Printf("\r\n+BDATA=%d  +WSEC=%d  +ASYNCMSG=%d ", profile->bulkTxEnable,
   6101                         profile->securityType,profile->asyncMsgFormat);
   \   00000176   0xF504 0x70EA      ADD      R0,R4,#+468
   \   0000017A   0x7903             LDRB     R3,[R0, #+4]
   \   0000017C   0x7842             LDRB     R2,[R0, #+1]
   \   0000017E   0xF894 0x11D4      LDRB     R1,[R4, #+468]
   \   00000182   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+BDATA=%d  +WSEC=%d...">`
   \   00000186   0x.... 0x....      BL       S2w_Printf
   6102          }
   \   0000018A   0xBD7F             POP      {R0-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine98:
   \   00000000   0x6868             LDR      R0,[R5, #+4]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x6869             LDR      R1,[R5, #+4]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x6869             LDR      R1,[R5, #+4]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x6068             STR      R0,[R5, #+4]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine134:
   \   00000000   0x1D25             ADDS     R5,R4,#+4
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "+WAUTO=%d,\\"">`
   \   00000006   0x7A29             LDRB     R1,[R5, #+8]
   \   00000008   0x2901             CMP      R1,#+1
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine133:
   \   00000000   0x202C             MOVS     R0,#+44
   \   00000002   0x.... 0x....      B.W      S2w_PutChar

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine122:
   \   00000000   0x7AA9             LDRB     R1,[R5, #+10]
   \   00000002   0xF104 0x0016      ADD      R0,R4,#+22
   \   00000006   0x.... 0x....      B.W      AppS2wHal_CharNPut

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine100:
   \   00000000   0xF894 0x1188      LDRB     R1,[R4, #+392]
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "+NDHCP=%d +NSET=">`
   \   00000008   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x7C68             LDRB     R0,[R5, #+17]
   \   00000002   0x9002             STR      R0,[SP, #+8]
   \   00000004   0x7C28             LDRB     R0,[R5, #+16]
   \   00000006   0x9001             STR      R0,[SP, #+4]
   \   00000008   0x7BE8             LDRB     R0,[R5, #+15]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
   \   0000000C   0x7BAB             LDRB     R3,[R5, #+14]
   \   0000000E   0x7B6A             LDRB     R2,[R5, #+13]
   \   00000010   0x7B29             LDRB     R1,[R5, #+12]
   \   00000012   0x.... 0x....      ADR.W    R0,`?<Constant "\\",%02x:%02x:%02x:%02x...">`
   \   00000016   0x.... 0x....      B.W      S2w_Printf
   6103          
   6104          
   6105          

   \                                 In section .text, align 2, keep-with-next
   6106          PUBLIC VOID
   6107          AppS2wNcmProfile_Display(S2W_PROFILE_T *profile)
   6108          {
   \                     AppS2wNcmProfile_Display:
   \   00000000   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   6109          	#ifndef S2W_IP2WIFI_SUPPORT
   6110          	    UINT8 vBuff[4]={"\","};
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant "\\",">_1`
   \   00000008   0x680A             LDR      R2,[R1, #0]
   \   0000000A   0x4604             MOV      R4,R0
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x6002             STR      R2,[R0, #+0]
   6111              #endif
   6112          	S2w_Printf("\r\nACTIVE CLIENT PROFILE\r\n");
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nACTIVE CLIENT PROFI...">`
   \   00000014   0x.... 0x....      BL       S2w_Printf
   6113          
   6114              S2w_Printf("+NDHCP=%d +NSET=", profile->netConf.dhcp);
   \   00000018   0x.... 0x....      BL       ?Subroutine100
   6115              AppS2wIp_Print(profile->netConf.ipAddr);
   \                     ??CrossCallReturnLabel_513:
   \   0000001C   0xF504 0x70C6      ADD      R0,R4,#+396
   \   00000020   0x.... 0x....      BL       AppS2wIp_Print
   6116              S2w_PutChar(',');
   \   00000024   0x.... 0x....      BL       ?Subroutine133
   6117          
   6118              AppS2wIp_Print(profile->netConf.netMask);
   \                     ??CrossCallReturnLabel_615:
   \   00000028   0xF504 0x70C8      ADD      R0,R4,#+400
   \   0000002C   0x.... 0x....      BL       AppS2wIp_Print
   6119              S2w_PutChar(',');
   \   00000030   0x.... 0x....      BL       ?Subroutine133
   6120              AppS2wIp_Print(profile->netConf.gateway);
   \                     ??CrossCallReturnLabel_614:
   \   00000034   0xF504 0x70CA      ADD      R0,R4,#+404
   \   00000038   0x.... 0x....      BL       AppS2wIp_Print
   6121          
   6122              S2w_Printf("\r\n+DNS1=");
   \   0000003C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+DNS1=">`
   \   00000040   0x.... 0x....      BL       S2w_Printf
   6123              AppS2wIp_Print(profile->dns1);
   \   00000044   0xF504 0x70D4      ADD      R0,R4,#+424
   \   00000048   0x.... 0x....      BL       AppS2wIp_Print
   6124              S2w_Printf(", +DNS2=");
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant ", +DNS2=">`
   \   00000050   0x.... 0x....      BL       S2w_Printf
   6125              AppS2wIp_Print(profile->dns2);
   \   00000054   0xF504 0x70D6      ADD      R0,R4,#+428
   \   00000058   0x.... 0x....      BL       AppS2wIp_Print
   \   0000005C   0x7921             LDRB     R1,[R4, #+4]
   \   0000005E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+WM=%d ">`
   \   00000062   0x2901             CMP      R1,#+1
   \   00000064   0xBF08             IT       EQ 
   \   00000066   0x2100             MOVEQ    R1,#+0
   6126          
   6127              if(profile->mode == S2W_WLANDATA_MODE_INFRA)
   6128              {
   6129                  S2w_Printf("\r\n+WM=%d ", 0);
   6130              }
   6131              else
   6132              {
   6133                  S2w_Printf("\r\n+WM=%d ", profile->mode);
   \   00000068   0x.... 0x....      BL       S2w_Printf
   6134              }
   6135          #ifndef S2W_IP2WIFI_SUPPORT
   6136              if(profile->autoWlandata.mode == S2W_WLANDATA_MODE_INFRA)
   \   0000006C   0x.... 0x....      BL       ?Subroutine134
   \                     ??CrossCallReturnLabel_619:
   \   00000070   0xBF08             IT       EQ 
   \   00000072   0x2100             MOVEQ    R1,#+0
   6137              {
   6138                  S2w_Printf("+WAUTO=%d,\"", 0);
   6139          	}
   6140          	else
   6141          	{
   6142          		S2w_Printf("+WAUTO=%d,\"", profile->autoWlandata.mode);
   \   00000074   0x.... 0x....      BL       S2w_Printf
   6143          	}
   6144              AppS2wHal_CharNPut(profile->autoWlandata.ssid,
   6145                      profile->autoWlandata.ssidLen);
   \   00000078   0x.... 0x....      BL       ?Subroutine122
   6146              if (profile->autoWlandata.validBssid)
   \                     ??CrossCallReturnLabel_582:
   \   0000007C   0x7AE8             LDRB     R0,[R5, #+11]
   \   0000007E   0xB110             CBZ.N    R0,??AppS2wNcmProfile_Display_0
   6147              {
   6148                  S2w_Printf("\",%02x:%02x:%02x:%02x:%02x:%02x",
   6149                          profile->autoWlandata.bssid[0],
   6150                          profile->autoWlandata.bssid[1],
   6151                          profile->autoWlandata.bssid[2],
   6152                          profile->autoWlandata.bssid[3],
   6153                          profile->autoWlandata.bssid[4],
   6154                          profile->autoWlandata.bssid[5]);
   \   00000080   0x.... 0x....      BL       ?Subroutine8
   6155              }
   \                     ??CrossCallReturnLabel_10:
   \   00000084   0xE003             B.N      ??AppS2wNcmProfile_Display_1
   6156              else
   6157              {
   6158                  AppS2wHal_CharNPut(vBuff,2);
   \                     ??AppS2wNcmProfile_Display_0:
   \   00000086   0x2102             MOVS     R1,#+2
   \   00000088   0xA803             ADD      R0,SP,#+12
   \   0000008A   0x.... 0x....      BL       AppS2wHal_CharNPut
   6159              }
   6160          
   6161              if(0 == profile->autoWlandata.channel)
   \                     ??AppS2wNcmProfile_Display_1:
   \   0000008E   0x7A69             LDRB     R1,[R5, #+9]
   \   00000090   0x.... 0x....      ADR.W    R5,`?<Constant ",%d\\r\\n">`
   \   00000094   0x....             ADR.N    R6,??DataTable418  ;; ",\r\n"
   \   00000096   0xB919             CBNZ.N   R1,??AppS2wNcmProfile_Display_2
   6162              {
   6163                  S2w_Printf(",\r\n");
   \   00000098   0x4630             MOV      R0,R6
   \   0000009A   0x.... 0x....      BL       S2w_Printf
   \   0000009E   0xE002             B.N      ??AppS2wNcmProfile_Display_3
   6164              }
   6165              else
   6166              {
   6167                  S2w_Printf(",%d\r\n", profile->autoWlandata.channel);
   \                     ??AppS2wNcmProfile_Display_2:
   \   000000A0   0x4628             MOV      R0,R5
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   6168              }
   6169          #endif
   6170          #ifndef S2W_IP2WIFI_SUPPORT
   6171              S2w_Printf("+NAUTO="
   6172                      "%d,"
   6173                      "%d,",
   6174                      profile->autoNetdata.mode,
   6175                      profile->autoNetdata.proto);
   \                     ??AppS2wNcmProfile_Display_3:
   \   000000A6   0xF104 0x073C      ADD      R7,R4,#+60
   \   000000AA   0xF894 0x103C      LDRB     R1,[R4, #+60]
   \   000000AE   0x787A             LDRB     R2,[R7, #+1]
   \   000000B0   0x.... 0x....      ADR.W    R0,`?<Constant "+NAUTO=%d,%d,">`
   \   000000B4   0x.... 0x....      BL       S2w_Printf
   6176              *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
   \   000000B8   0x.... 0x....      BL       ?Subroutine105
   6177              AppS2wIp_Print(profile->autoNetdata.ipAddr);
   \                     ??CrossCallReturnLabel_528:
   \   000000BC   0xF104 0x0040      ADD      R0,R4,#+64
   \   000000C0   0x.... 0x....      BL       AppS2wIp_Print
   6178              *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
   \   000000C4   0x.... 0x....      BL       ?Subroutine105
   6179              S2w_Printf(",%d", profile->autoNetdata.port);
   \                     ??CrossCallReturnLabel_529:
   \   000000C8   0x.... 0x....      ADR.W    R8,??DataTable418_1  ;; ",%d"
   \   000000CC   0x8879             LDRH     R1,[R7, #+2]
   \   000000CE   0x4640             MOV      R0,R8
   \   000000D0   0x.... 0x....      BL       S2w_Printf
   6180              if((profile->autoNetdata.mode == 0) &&(profile->autoNetdata.proto == S2W_NETDATA_PROTO_UDP))
   \   000000D4   0xF894 0x003C      LDRB     R0,[R4, #+60]
   \   000000D8   0x2800             CMP      R0,#+0
   \   000000DA   0xBF04             ITT      EQ 
   \   000000DC   0x7878             LDRBEQ   R0,[R7, #+1]
   \   000000DE   0x2800             CMPEQ    R0,#+0
   \   000000E0   0xD104             BNE.N    ??AppS2wNcmProfile_Display_4
   6181              {
   6182          		S2w_Printf(",%d", profile->udpSrcPort);
   \   000000E2   0xF8B4 0x13A6      LDRH     R1,[R4, #+934]
   \   000000E6   0x4640             MOV      R0,R8
   \   000000E8   0x.... 0x....      BL       S2w_Printf
   6183          	}
   6184          	S2w_Printf("\r\n");
   \                     ??AppS2wNcmProfile_Display_4:
   \   000000EC   0x....             ADR.N    R7,??DataTable420  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000EE   0x.... 0x....      BL       ?Subroutine87
   6185          
   6186          #endif
   6187              /* display security parameters
   6188               */
   6189              AppS2wSecurity_Display(&profile->security);
   \                     ??CrossCallReturnLabel_472:
   \   000000F2   0xF104 0x0078      ADD      R0,R4,#+120
   \   000000F6   0x.... 0x....      BL       AppS2wSecurity_Display
   6190              S2w_Printf("\r\n");
   \   000000FA   0x.... 0x....      BL       ?Subroutine87
   6191          
   6192          	S2w_Printf("\r\nACTIVE LIMITED-AP PROFILE\r\n+NSET=");
   \                     ??CrossCallReturnLabel_471:
   \   000000FE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nACTIVE LIMITED-AP P...">`
   \   00000102   0x.... 0x....      BL       S2w_Printf
   6193              AppS2wIp_Print((UINT8*)&profile->lmtdApConf.ipAddress);
   \   00000106   0xF504 0x7023      ADD      R0,R4,#+652
   \   0000010A   0x.... 0x....      BL       AppS2wIp_Print
   6194              S2w_PutChar(',');
   \   0000010E   0x.... 0x....      BL       ?Subroutine133
   6195          
   6196              AppS2wIp_Print((UINT8*)&profile->lmtdApConf.subnetmask);
   \                     ??CrossCallReturnLabel_613:
   \   00000112   0xF504 0x7024      ADD      R0,R4,#+656
   \   00000116   0x.... 0x....      BL       AppS2wIp_Print
   6197              S2w_PutChar(',');
   \   0000011A   0x.... 0x....      BL       ?Subroutine133
   6198              AppS2wIp_Print((UINT8*)&profile->lmtdApConf.gateway);
   \                     ??CrossCallReturnLabel_612:
   \   0000011E   0xF504 0x7025      ADD      R0,R4,#+660
   \   00000122   0x.... 0x....      BL       AppS2wIp_Print
   6199              S2w_Printf("\r\n+WAUTO=%d,\"", 2);
   \   00000126   0x2102             MOVS     R1,#+2
   \   00000128   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+WAUTO=%d,\\"">`
   \   0000012C   0x.... 0x....      BL       S2w_Printf
   6200              AppS2wHal_CharNPut(profile->lmtdApConf.ssid.array,
   6201                      profile->lmtdApConf.ssid.length);
   \   00000130   0xF894 0x11EC      LDRB     R1,[R4, #+492]
   \   00000134   0xF204 0x10ED      ADDW     R0,R4,#+493
   \   00000138   0x.... 0x....      BL       AppS2wHal_CharNPut
   6202              S2w_Printf("\"");
   \   0000013C   0x....             ADR.N    R0,??DataTable421  ;; "\""
   \   0000013E   0x.... 0x....      BL       S2w_Printf
   6203              if(0 == profile->lmtdApConf.channel)
   \   00000142   0xF894 0x1286      LDRB     R1,[R4, #+646]
   \   00000146   0xB919             CBNZ.N   R1,??AppS2wNcmProfile_Display_5
   6204              {
   6205                  S2w_Printf(",\r\n");
   \   00000148   0x4630             MOV      R0,R6
   \   0000014A   0x.... 0x....      BL       S2w_Printf
   \   0000014E   0xE002             B.N      ??AppS2wNcmProfile_Display_6
   6206              }
   6207              else
   6208              {
   6209                  S2w_Printf(",%d\r\n", profile->lmtdApConf.channel);
   \                     ??AppS2wNcmProfile_Display_5:
   \   00000150   0x4628             MOV      R0,R5
   \   00000152   0x.... 0x....      BL       S2w_Printf
   6210              }
   6211              S2w_Printf("+STATIONS=%d  +REGDOMAIN=%d  +BEACONINTRL=%d ", profile->lmtdApConf.noStations,
   6212                         profile->lmtdApConf.regDomain,profile->lmtdApConf.beaconInterval);
   \                     ??AppS2wNcmProfile_Display_6:
   \   00000156   0xF204 0x2586      ADDW     R5,R4,#+646
   \   0000015A   0x88AB             LDRH     R3,[R5, #+4]
   \   0000015C   0x78AA             LDRB     R2,[R5, #+2]
   \   0000015E   0x7869             LDRB     R1,[R5, #+1]
   \   00000160   0x.... 0x....      ADR.W    R0,`?<Constant "+STATIONS=%d  +REGDOM...">`
   \   00000164   0x.... 0x....      BL       S2w_Printf
   6213              S2w_Printf("\r\n+DHCPSRVR=%d  +DHCPCLIENTS=%d  +DHCPLEASE=%d ", profile->lmtdApConf.dhcpServerEnable,
   6214                         profile->lmtdApConf.dhcpNumAddresses,(ntohl(profile->lmtdApConf.dhcpLeaseTime)));
   \   00000168   0xF8D4 0x02E4      LDR      R0,[R4, #+740]
   \   0000016C   0x0A01             LSRS     R1,R0,#+8
   \   0000016E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000172   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000176   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   0000017A   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000017E   0xEA41 0x6300      ORR      R3,R1,R0, LSL #+24
   \   00000182   0x7CEA             LDRB     R2,[R5, #+19]
   \   00000184   0x7CA9             LDRB     R1,[R5, #+18]
   \   00000186   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+DHCPSRVR=%d  +DHCP...">`
   \   0000018A   0x.... 0x....      BL       S2w_Printf
   6215              S2w_Printf("\r\n+DNSSRVR=%d  +DNSDOMAIN=%s", profile->lmtdApConf.dnsServerEnable,
   6216                         profile->lmtdApConf.dnsDomainName);
   \   0000018E   0x7EA9             LDRB     R1,[R5, #+26]
   \   00000190   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n+DNSSRVR=%d  +DNSDO...">`
   \   00000194   0xF204 0x22A1      ADDW     R2,R4,#+673
   \   00000198   0x.... 0x....      BL       S2w_Printf
   6217          }
   \   0000019C   0xE8BD 0x81FF      POP      {R0-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine105:
   \   00000000   0x6878             LDR      R0,[R7, #+4]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x6879             LDR      R1,[R7, #+4]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x6879             LDR      R1,[R7, #+4]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x6078             STR      R0,[R7, #+4]
   \   0000001E   0x4770             BX       LR
   6218          
   6219          
   6220          /**
   6221           ******************************************************************
   6222           * @ingroup S2w-Application
   6223           * @brief Process the AT&V Command.
   6224               This function displays the current configuration.It displays the
   6225               current active profile,profile1 and profile2.
   6226           * @param ptr Pointer to the user input string.
   6227          
   6228           * @return S2W_SUCCESS - operation successful.
   6229           * @retval S2W_EINVAL  - operation failure-invalid command.
   6230           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6231          PUBLIC UINT8
   6232          AppS2wCmd_ConfigOutput(UINT8 *ptr)
   6233          {
   \                     AppS2wCmd_ConfigOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
   6234          
   6235              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB108             CBZ.N    R0,??AppS2wCmd_ConfigOutput_0
   6236                  return S2W_EINVAL;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xBD10             POP      {R4,PC}
   6237          
   6238              S2w_Printf("\r\nACTIVE PROFILE\r\n");
   \                     ??AppS2wCmd_ConfigOutput_0:
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nACTIVE PROFILE\\r\\n">`
   \   0000000E   0x.... 0x....      BL       S2w_Printf
   6239              AppS2wProfile_Display(&s2wCurrent);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable430_1
   \   00000016   0x.... 0x....      BL       AppS2wProfile_Display
   6240          
   6241              S2w_Printf("\r\n\r\nSTORED PROFILE 0\r\n");
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n\\r\\nSTORED PROFILE 0\\r\\n">`
   \   0000001E   0x.... 0x....      BL       S2w_Printf
   6242              AppS2wProfile_Display(&s2wFlashParams->profile[0]);
   \   00000022   0x.... 0x....      LDR.W    R4,??DataTable440
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x.... 0x....      BL       AppS2wProfile_Display
   6243          
   6244              S2w_Printf("\r\n\r\nSTORED PROFILE 1\r\n");
   \   0000002C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n\\r\\nSTORED PROFILE 1\\r\\n">`
   \   00000030   0x.... 0x....      BL       S2w_Printf
   6245              AppS2wProfile_Display(&s2wFlashParams->profile[1]);
   \   00000034   0x6820             LDR      R0,[R4, #+0]
   \   00000036   0xF500 0x707E      ADD      R0,R0,#+1016
   \   0000003A   0x.... 0x....      BL       AppS2wProfile_Display
   6246              S2w_Printf("\r\n");
   \   0000003E   0x.... 0x....      BL       ?Subroutine91
   6247          
   6248              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_490:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
   6249          }
   6250          
   6251          
   6252          /**
   6253           ******************************************************************
   6254           * @ingroup S2w-Application
   6255           * @brief Process the AT+WRETRY Command.
   6256           *   Thif function check the validity of the retry parameter and call the
   6257           *   hal function to configure the wlan retry.
   6258           * @param ptr Pointer to the user input string.
   6259           *
   6260           * @return S2W_SUCCESS - operation successful.
   6261           * @retval S2W_EINVAL  - operation failure-invalid command.
   6262           * @retval S2W_FAILURE - operation failure-Retry configuration failed.
   6263           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6264          UINT8
   6265          AppS2wCmd_Wretry(UINT8 *ptr)
   6266          {
   \                     AppS2wCmd_Wretry:
   \   00000000   0xB580             PUSH     {R7,LR}
   6267              UINT8 status;
   6268              UINT32 retryCount;
   6269          
   6270              /* check the retry count is valid
   6271               */
   6272              status = AppS2wParse_Int(ptr, &retryCount);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   6273              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_298:
   \   00000006   0xB980             CBNZ.N   R0,??AppS2wCmd_Wretry_0
   6274              {
   6275                  return status;
   6276              }
   6277              /* retry_count is a UINT32 but wlan limited to 255*/
   6278              if (retryCount > 255)
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x28FF             CMP      R0,#+255
   \   0000000C   0xD901             BLS.N    ??AppS2wCmd_Wretry_1
   6279              {
   6280                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD02             POP      {R1,PC}
   6281              }
   6282          
   6283              /* call the wdd API function to configure the wlan retry count
   6284               */
   6285          
   6286              status = GsnWdd_TxNumRetrySet(&s2wappMainTaskCtxt->if0.wddCtx, (UINT16)retryCount);
   \                     ??AppS2wCmd_Wretry_1:
   \   00000012   0xB281             UXTH     R1,R0
   \   00000014   0x.... 0x....      BL       ?Subroutine74
   \                     ??CrossCallReturnLabel_436:
   \   00000018   0x.... 0x....      BL       GsnWdd_TxNumRetrySet
   6287              if (status != S2W_SUCCESS)
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0xB920             CBNZ.N   R0,??AppS2wCmd_Wretry_0
   6288              {
   6289                  return status;
   6290              }
   6291          
   6292              /* update the active profile retry parameter
   6293               */
   6294              s2wCurrent.retryCount = retryCount;
   \   00000020   0x.... 0x....      LDR.W    R0,??DataTable430_1
   \   00000024   0x9900             LDR      R1,[SP, #+0]
   \   00000026   0x7181             STRB     R1,[R0, #+6]
   6295          
   6296              return S2W_SUCCESS;
   \   00000028   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wretry_0:
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
   6297          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine74:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable464_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x4770             BX       LR
   6298          
   6299          
   6300          /**
   6301           ******************************************************************
   6302           * @ingroup S2w-Application
   6303           * @brief Process the AT+WP Command.
   6304           *   This function check the validity of the power number passed and call
   6305               the hal function to configure the wlan radio power.
   6306           * @param ptr Pointer to the user input string.
   6307           * @return S2W_SUCCESS - operation successful.
   6308           * @retval S2W_EINVAL  - operation failure-invalid command.
   6309           * @retval S2W_FAILURE - operation failure-power configuration failed.
   6310           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6311          UINT8
   6312          AppS2wCmd_Wpower(UINT8 *ptr)
   6313          {
   \                     AppS2wCmd_Wpower:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   6314              UINT8 status;
   6315              UINT32 power[5],i=0;
   6316              UINT8 *p;
   6317              GSN_WDD_TX_POW_SET_PARAM_T param;
   6318          
   6319              /* check the power number passed is valid
   6320               */
   6321              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_188:
   \   00000008   0x0004             MOVS     R4,R0
   6322              if (!p)
   \   0000000A   0xD01D             BEQ.N    ??AppS2wCmd_Wpower_0
   6323              {
   6324          		return S2W_EINVAL;
   6325          	}
   6326          	memset(&param,0,sizeof(GSN_WDD_TX_POW_SET_PARAM_T));
   \   0000000C   0x2205             MOVS     R2,#+5
   \   0000000E   0x.... 0x....      BL       ?Subroutine22
   6327              status = AppS2wParse_Int(p, &power[0]);
   6328              if ((status != S2W_SUCCESS) || (power[0] > 15))
   \                     ??CrossCallReturnLabel_50:
   \   00000012   0x.... 0x....      BL       ?Subroutine57
   \                     ??CrossCallReturnLabel_363:
   \   00000016   0xB9B8             CBNZ.N   R0,??AppS2wCmd_Wpower_0
   \   00000018   0x9802             LDR      R0,[SP, #+8]
   \   0000001A   0x2810             CMP      R0,#+16
   \   0000001C   0xD214             BCS.N    ??AppS2wCmd_Wpower_0
   6329              {
   6330                  return S2W_EINVAL;
   6331              }
   6332              param.txPow[0]= power[0];
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
   6333              for(i=1;i<5;i++)
   \   00000022   0x2501             MOVS     R5,#+1
   6334              {
   6335          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wpower_1:
   \   00000024   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_187:
   \   00000028   0x0004             MOVS     R4,R0
   6336          		if (p && *p)
   \   0000002A   0xBF1C             ITT      NE 
   \   0000002C   0x7820             LDRBNE   R0,[R4, #+0]
   \   0000002E   0x2800             CMPNE    R0,#+0
   \   00000030   0xD00E             BEQ.N    ??AppS2wCmd_Wpower_2
   6337                  {
   6338          		    status = AppS2wParse_Int(p, &power[i]);
   6339          		    if ((status != S2W_SUCCESS) || (power[i] > 15))
   \   00000032   0xA802             ADD      R0,SP,#+8
   \   00000034   0xEB00 0x0185      ADD      R1,R0,R5, LSL #+2
   \   00000038   0x.... 0x....      BL       ??Subroutine57_0
   \                     ??CrossCallReturnLabel_361:
   \   0000003C   0xB920             CBNZ.N   R0,??AppS2wCmd_Wpower_0
   \   0000003E   0xA802             ADD      R0,SP,#+8
   \   00000040   0xF850 0x0025      LDR      R0,[R0, R5, LSL #+2]
   \   00000044   0x2810             CMP      R0,#+16
   \   00000046   0xD301             BCC.N    ??AppS2wCmd_Wpower_3
   6340              {
   6341                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Wpower_0:
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0xE00F             B.N      ??AppS2wCmd_Wpower_4
   6342              }
   6343                      param.txPow[i]= power[i];
   \                     ??AppS2wCmd_Wpower_3:
   \   0000004C   0xA900             ADD      R1,SP,#+0
   \   0000004E   0x5468             STRB     R0,[R5, R1]
   6344          		}
   6345          	}
   \                     ??AppS2wCmd_Wpower_2:
   \   00000050   0x1C6D             ADDS     R5,R5,#+1
   \   00000052   0x2D05             CMP      R5,#+5
   \   00000054   0xD3E6             BCC.N    ??AppS2wCmd_Wpower_1
   6346              status = GsnWdd_TxPowerSet(&s2wappMainTaskCtxt->if0.wddCtx, &param);
   \   00000056   0x.... 0x....      BL       ?Subroutine78
   \                     ??CrossCallReturnLabel_448:
   \   0000005A   0x.... 0x....      BL       GsnWdd_TxPowerSet
   6347              /* call the wdd function to set the wlan radio power
   6348               */
   6349              if (status != S2W_SUCCESS)
   \   0000005E   0xB2C0             UXTB     R0,R0
   \   00000060   0xB920             CBNZ.N   R0,??AppS2wCmd_Wpower_4
   6350              {
   6351                  return status;
   6352              }
   6353          
   6354              /* update the active profile power number
   6355               */
   6356              s2wCurrent.txPower = power[0];
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable430_1
   \   00000066   0x9902             LDR      R1,[SP, #+8]
   \   00000068   0x7141             STRB     R1,[R0, #+5]
   6357              return S2W_SUCCESS;
   \   0000006A   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wpower_4:
   \   0000006C   0xB009             ADD      SP,SP,#+36
   \   0000006E   0xBD30             POP      {R4,R5,PC}       ;; return
   6358          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine57:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \                     ??Subroutine57_0:
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine78:
   \   00000000   0x....             LDR.N    R0,??DataTable448
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0xA800             ADD      R0,SP,#+0
   \   00000004   0x.... 0x....      B.W      memset
   6359          
   6360          
   6361          
   6362          #ifdef S2W_IPv6_SUPPORT
   6363          
   6364          
   6365          UINT8
   6366          AppS2wCmd_Nsetv6(UINT8* ptr)
   6367          {
   6368            GSN_NWIF_IPv6_CONFIG_T Ipv6Params;
   6369            UINT8 *p;
   6370            UINT32 IPv6Addr[4],IPv6AddrType,status;
   6371          
   6372            memset(&Ipv6Params,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
   6373            
   6374            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6375            
   6376            if(p == NULL)
   6377              return S2W_FAILURE;
   6378          
   6379            status = inet_pton(AF_INET6, (const char*)p, (VOID*)IPv6Addr);
   6380             if(status != TRUE)
   6381              return S2W_EINVAL;
   6382          
   6383            GSN_IPv6_CHANGE_ENDIAN(IPv6Addr);
   6384          
   6385          
   6386            IPv6AddrType = GSN_IPv6_ADDR_TYPE(IPv6Addr);
   6387          
   6388            switch(IPv6AddrType)
   6389            {
   6390          
   6391          
   6392                /* Set LinkLocal IPv6 address    */
   6393              case GSN_IPv6_LINK_LOCAL:
   6394          
   6395                Ipv6Params.flags |= GSN_NWIF_IP6_FLG_MANUAL_LINK_LOCAL_ADDR;
   6396                memcpy(Ipv6Params.linkLocalAddr,IPv6Addr,S2W_IPv6_ADDR_LENGTH);
   6397                break;
   6398          
   6399              /* Set Global address   */
   6400              case GSN_IPv6_GLOBAL:
   6401          
   6402                Ipv6Params.flags |= GSN_NWIF_IP6_FLG_MANUAL_GLOBAL_ADDR;
   6403                memcpy(Ipv6Params.globalAddr,IPv6Addr,S2W_IPv6_ADDR_LENGTH);
   6404                break;
   6405              /* Can not set these as interface ipv6 address */
   6406              case GSN_IPv6_INVALID:
   6407              case GSN_IPv6_MULTICAST:
   6408              case GSN_IPv6_LOOPBACK:
   6409              case GSN_IPv6_UNSPECIFIED:
   6410                return S2W_EINVAL;
   6411          
   6412          
   6413              default:
   6414                return S2W_EINVAL;
   6415            }
   6416          
   6417          
   6418             p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6419          
   6420            if(!p)
   6421              Ipv6Params.prefixLen = S2W_IPv6_DEFAULT_PREFIX_LENGTH;
   6422            else
   6423            {
   6424              status = AppS2wParse_Int(p, (UINT32*)&Ipv6Params.prefixLen);
   6425              if (status != S2W_SUCCESS)
   6426              {
   6427                return S2W_EINVAL;
   6428              }
   6429          
   6430            }
   6431          
   6432            status = GsnNwif_IPv6Configure(&s2wappMainTaskCtxt->if0.nwifCtx,&Ipv6Params,NULL);
   6433          
   6434             if(GSN_NW_IF_CLOSED == status)
   6435          	{
   6436          		GSN_NWIF_IP_CONFIG_T ipCfg = {0};
   6437          
   6438          		ipCfg .flag = GSN_NWIF_IPCONFIG_FLAG_IPV6_INIT;
   6439          
   6440          		memcpy((UINT8 *)&ipCfg.ipv6, (UINT8 *)&Ipv6Params, sizeof(Ipv6Params));
   6441          		
   6442          		status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipCfg, NULL);
   6443          	}	
   6444          	if(status != GSN_SUCCESS )
   6445          	{
   6446          		return S2W_FAILURE;
   6447          	}
   6448          
   6449              return S2W_SUCCESS;
   6450          }
   6451          
   6452          void S2w_getDhcpv6Clientconfig(GSN_NWIF_DHCP_PARAMS_T *dhcpv6Params)
   6453          {
   6454                dhcpv6Params->ianaID = 0x12345678;
   6455                dhcpv6Params->T1 = 0x11111111;
   6456                dhcpv6Params->T2 = 0x11111111;
   6457                dhcpv6Params->preferredLifeTime = 0x0000ffff;
   6458                dhcpv6Params->validLifeTime = 0x0000ffff;
   6459            
   6460                s2wappMainTaskCtxt->if0.nwifCtx.notifyIpv6Cb = DHCP_notify;
   6461                dhcpv6Params->pStack =  (UINT8 *)dhcpv6ClientStack;
   6462                dhcpv6Params->stackSize = APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE;
   6463                dhcpv6Params->pPktPoolHndl = GsnNw_PktPoolHndlGet(&s2wappMainTaskCtxt->nwCtx, GSN_NW_LBUF_PKT_POOL);
   6464           
   6465          }
   6466          
   6467          
   6468          
   6469          /**
   6470           ******************************************************************
   6471           * @ingroup S2w-Application
   6472           * @brief Process the AT+NDHCPv6 Command.
   6473           * @param ptr Pointer to the user input string.
   6474           * @return status.
   6475           ******************************************************************/
   6476          UINT8
   6477          AppS2wCmd_Ndhcpv6(UINT8 *ptr)
   6478          {
   6479            UINT8 *p,enable,oldStatus;
   6480            UINT32 status;
   6481            GSN_NWIF_IPv6_CONFIG_T userIpv6Conf;
   6482            S2W_STATUS_INFO_T currentConfig;
   6483            GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
   6484            
   6485            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6486            status = AppS2wParse_Boolean(p, &enable);
   6487              if (status != S2W_SUCCESS)
   6488              {
   6489                  return status;
   6490              }
   6491              oldStatus = s2wCurrent.netConf.dhcpv6;
   6492              if(enable)
   6493              {
   6494                if(GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE)
   6495                {
   6496                    memset(&userIpv6Conf,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
   6497                    memset(&currentConfig,0,sizeof(S2W_STATUS_INFO_T));
   6498                    memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
   6499                
   6500             
   6501                    userIpv6Conf.flags = GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG;
   6502          
   6503                    S2w_getDhcpv6Clientconfig(&dhcpv6Params);
   6504          
   6505                    /* stop if dhcpv6 thread is already running */
   6506                    GsnNwIf_DhcpV6Stop(&s2wappMainTaskCtxt->if0.nwifCtx);
   6507                
   6508                    status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Conf, &dhcpv6Params);
   6509                    S2wL3Wait = TRUE;
   6510                    if(status != GSN_OPERATION_IN_PROGRESS)
   6511                    DHCP_notify(GSN_FAILURE, &s2wappMainTaskCtxt->if0.nwifCtx);
   6512                
   6513                    GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
   6514                    if(L3Dhcpv6Status)
   6515                    {
   6516                    AppS2wHdrAndIpv6_Print();
   6517                    L3Dhcpv6Status = FALSE;
   6518                    s2wCurrent.netConf.dhcpv6 = TRUE;
   6519                    return S2W_SUCCESS;
   6520                    }
   6521                    else
   6522                    {
   6523                    L3Dhcpv6Status = FALSE;
   6524                    s2wCurrent.netConf.dhcpv6 = oldStatus;
   6525                    return S2W_FAILURE;
   6526                    }
   6527               
   6528              }
   6529              else
   6530              {
   6531                /* No L2 connection */
   6532                s2wCurrent.netConf.dhcpv6 = TRUE;
   6533                return S2W_SUCCESS;
   6534              }
   6535              
   6536              }
   6537              
   6538              else
   6539              {
   6540                s2wCurrent.netConf.dhcpv6 = FALSE;
   6541              }
   6542              return S2W_SUCCESS;
   6543            
   6544          }
   6545          
   6546          
   6547          
   6548          
   6549          
   6550          
   6551          
   6552          
   6553          
   6554          
   6555          
   6556          
   6557          
   6558          /**
   6559           ******************************************************************
   6560           * @ingroup S2w-Application
   6561           * @brief Process the AT+NCUDPv6 Command.
   6562           * @param ptr Pointer to the user input string.
   6563           * @return status.
   6564           ******************************************************************/
   6565          PUBLIC UINT8
   6566          AppS2wCmd_Ncudpv6(UINT8 *ptr)
   6567          {
   6568            UINT8 status;
   6569            UINT8 cid;
   6570            UINT8 *p;
   6571            UINT32 remotePort,sourcePort=0;
   6572            S2W_NETDATA_T remoteServerData;
   6573            
   6574            memset(&remoteServerData,0,sizeof(S2W_NETDATA_T));
   6575            
   6576            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6577            
   6578            if(p == NULL)
   6579              return S2W_FAILURE;
   6580            
   6581          
   6582            
   6583             status = inet_pton(AF_INET6, (const char*)p, (VOID*)remoteServerData.ipv6Addr);
   6584             
   6585               if(status != TRUE)
   6586                  return S2W_EINVAL;
   6587          
   6588                GSN_IPv6_CHANGE_ENDIAN(remoteServerData.ipv6Addr);
   6589          
   6590          
   6591          
   6592            
   6593            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6594            
   6595            if(p == NULL)
   6596              return S2W_FAILURE;
   6597           
   6598            status = AppS2wParse_Int(p, &remotePort);
   6599          
   6600            if (status != S2W_SUCCESS || !is_valid_port(remotePort))
   6601            {
   6602              return S2W_EINVAL;
   6603            }
   6604            
   6605            remoteServerData.port = remotePort;
   6606            
   6607            /* If source port is specified */
   6608            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6609            
   6610            if(p != NULL)
   6611            {
   6612              status = AppS2wParse_Int(p, &sourcePort);
   6613           
   6614              if (status != S2W_SUCCESS || !is_valid_port(sourcePort))
   6615              {
   6616                return S2W_EINVAL;
   6617              }
   6618              
   6619              if (AppS2wParse_NextParamGet(&ptr))
   6620                return S2W_EINVAL;
   6621            }
   6622              
   6623              remoteServerData.proto = S2W_NETDATA_PROTO_UDP;
   6624              remoteServerData.mode  = S2W_NETDATA_MODE_CLIENT;
   6625            
   6626            status = AppS2wHal_NetUdpClientv6(&remoteServerData, &cid,(UINT16)sourcePort);
   6627              
   6628                  return status;
   6629              
   6630              
   6631               
   6632          }
   6633          /**
   6634           ******************************************************************
   6635           * @ingroup S2w-Application
   6636           * @brief Process the AT+NSUDPv6 Command.
   6637           * @param ptr Pointer to the user input string.
   6638           * @return status.
   6639           ******************************************************************/
   6640          UINT8
   6641          AppS2wCmd_Nsudpv6(UINT8* ptr)
   6642          {
   6643              S2W_NETDATA_T serverData;
   6644              UINT8 status;
   6645              UINT32 port;
   6646              UINT8 cid;
   6647              
   6648              status = AppS2wParse_Int(ptr, &port);
   6649              if (status != S2W_SUCCESS || !is_valid_port(port))
   6650              {
   6651                  return S2W_EINVAL;
   6652              }
   6653              serverData.port = port;
   6654              serverData.proto = S2W_NETDATA_PROTO_UDP;
   6655              serverData.mode = S2W_NETDATA_MODE_SERVER;
   6656              
   6657              status = AppS2wHal_NetUdpServerv6(&serverData, &cid);
   6658              if (status != S2W_SUCCESS)
   6659              {
   6660                  return status;
   6661              }
   6662          
   6663              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   6664              return status;
   6665           
   6666          }
   6667          /**
   6668           ******************************************************************
   6669           * @ingroup S2w-Application
   6670           * @brief Process the AT+NCTCPv Command.
   6671           * @param ptr Pointer to the user input string.
   6672           * @return status.
   6673           ******************************************************************/
   6674          UINT8
   6675          AppS2wCmd_Nctcpv6(UINT8* ptr)
   6676          {
   6677              UINT32 status;
   6678              UINT8 cid;
   6679              UINT8 *p;
   6680              UINT32 remotePort;
   6681              S2W_NETDATA_T remoteServerData;
   6682            
   6683            memset(&remoteServerData,0,sizeof(S2W_NETDATA_T));
   6684            
   6685            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6686            
   6687            if(p == NULL)
   6688              return S2W_FAILURE;
   6689            
   6690            
   6691             status = inet_pton(AF_INET6, (const char*)p, (VOID*)remoteServerData.ipv6Addr);
   6692              if(status != TRUE)
   6693                return S2W_EINVAL;
   6694          
   6695                GSN_IPv6_CHANGE_ENDIAN(remoteServerData.ipv6Addr);
   6696          
   6697            
   6698            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   6699            
   6700            if(p == NULL)
   6701              return S2W_FAILURE;
   6702           
   6703            status = AppS2wParse_Int(p, &remotePort);
   6704            
   6705            if (status != S2W_SUCCESS || !is_valid_port(remotePort))
   6706            {
   6707              return S2W_EINVAL;
   6708            }
   6709            
   6710            remoteServerData.port = remotePort;
   6711            
   6712            remoteServerData.proto = S2W_NETDATA_PROTO_TCP;
   6713            remoteServerData.mode  = S2W_NETDATA_MODE_CLIENT;
   6714            
   6715            status = AppS2wHal_NetTcpClientv6(&remoteServerData, &cid);
   6716              if (status != S2W_SUCCESS)
   6717              {
   6718                  return status;
   6719              } 
   6720              
   6721            AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   6722            
   6723            return status;
   6724            
   6725          }
   6726          /**
   6727           ******************************************************************
   6728           * @ingroup S2w-Application
   6729           * @brief Process the AT+NSTCPv6 Command.
   6730           * @param ptr Pointer to the user input string.
   6731           * @return status.
   6732           ******************************************************************/
   6733          UINT8
   6734          AppS2wCmd_Nstcpv6(UINT8* ptr)
   6735          {
   6736              S2W_NETDATA_T serverData;
   6737              UINT8 status;
   6738              UINT32 port;
   6739              UINT8 cid;
   6740          
   6741              status = AppS2wParse_Int(ptr, &port);
   6742              if (status != S2W_SUCCESS || !is_valid_port(port))
   6743              {
   6744                  return S2W_EINVAL;
   6745              }
   6746          
   6747              serverData.port = port;
   6748              serverData.proto = S2W_NETDATA_PROTO_TCP;
   6749              serverData.mode = S2W_NETDATA_MODE_SERVER;
   6750          
   6751              status = AppS2wHal_NetTcpServerv6(&serverData, &cid);
   6752              if (status != S2W_SUCCESS)
   6753              {
   6754                  return status;
   6755              }
   6756          
   6757              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   6758          
   6759              return status;
   6760          }
   6761          
   6762          /**
   6763           ******************************************************************
   6764          * @ingroup S2w-Application
   6765           * @brief Process the AT+DHCPvSERVER command
   6766           *   This function validate the parameter passed and call the dhcpv6 server start function.
   6767           * @param ptr Pointer to the user input string.
   6768          
   6769           * @return S2W_SUCCESS - operation successful.
   6770           * @retval S2W_EINVAL  - operation failure-invalid command.
   6771           * @retval S2W_FAILURE - operation failure-ip config failed.
   6772           ******************************************************************/
   6773          
   6774          UINT8 AppS2wCmd_Dhcpv6Server(UINT8 *ptr)
   6775          {
   6776          
   6777            UINT8 status;
   6778            UINT8 enable, *p;
   6779            GSN_DHCPV6_SRVR_INIT_PARAM_T dhcpv6ServerInitParams;
   6780            UINT8 macAddr[6];
   6781            GSN_NWIF_IP_CONFIG_T nwParams;
   6782          
   6783          
   6784            p = AppS2wParse_NextParamGet(&ptr);
   6785              if (!p)
   6786              {
   6787                  return S2W_EINVAL;
   6788              }
   6789              status = AppS2wParse_Boolean(p, &enable);
   6790              if (status != S2W_SUCCESS)
   6791              {
   6792                  return status;
   6793              }
   6794          
   6795                  if(enable)
   6796                  {
   6797                    GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   6798                    memcpy(dhcpv6ServerInitParams.startAddr,nwParams.ipv6.globalAddr,16);
   6799                    dhcpv6ServerInitParams.serverId.opCode = OPTION_SERVERID;  /* DHCPV6_SERVER_DUID_TYPE_LINK_ONLY  is  only supported. */
   6800                    dhcpv6ServerInitParams.serverId.optionLength = 0x000A;
   6801                    dhcpv6ServerInitParams.serverId.duidType = DHCPV6_SERVER_DUID_TYPE_LINK_ONLY;
   6802                    dhcpv6ServerInitParams.serverId.hardwareType = DHCPV6_HW_TYPE_IEEE_802;
   6803          		  //status = S2w_LoadMacAddr(macAddr);
   6804          		  S2w_macAddrRTCGet(macAddr);
   6805          		  //if (status != S2W_SUCCESS)
   6806          			//return S2W_FAILURE;
   6807          
   6808          		  macAddr[0] += macAddr[1];
   6809                    macAddr[1] = macAddr[0]-macAddr[1];
   6810                    macAddr[0] -= macAddr[1];
   6811                    *(ULONG*)(macAddr+2) = htonl(*(ULONG*)(macAddr+2));
   6812                    memcpy((VOID*)&dhcpv6ServerInitParams.serverId.linkLayerAddressMsw,(VOID*)macAddr,2);
   6813                    memcpy((VOID*)&dhcpv6ServerInitParams.serverId.linkLayerAddressLsw,(VOID*)(macAddr+2),4);
   6814          
   6815                    serverId.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
   6816          
   6817                    status = GsnDhcpv6Srvr_start(&serverId,&dhcpv6ServerInitParams);
   6818                    
   6819                    if(status != S2W_SUCCESS)
   6820                      return S2W_FAILURE;
   6821                  }
   6822                else
   6823                {
   6824                  status = GsnDhcpv6Srvr_Stop(&serverId);
   6825                  return status;
   6826                }
   6827                  return status;
   6828          
   6829          }
   6830          
   6831          
   6832          #endif
   6833          
   6834          
   6835          /**
   6836           ******************************************************************
   6837           * @ingroup S2w-Application
   6838           * @brief Process the AT+NCUDP Command.
   6839           * @param ptr Pointer to the user input string.
   6840           * @return status.
   6841           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6842          PUBLIC UINT8
   6843          AppS2wCmd_Ncudp(UINT8 *ptr)
   6844          {
   \                     AppS2wCmd_Ncudp:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB093             SUB      SP,SP,#+76
   6845              S2W_NETDATA_T peerData;
   6846              UINT8 *temp = ptr;
   \   00000004   0x9001             STR      R0,[SP, #+4]
   6847              UINT32 status;
   6848              UINT8 cid;
   6849              UINT32 srcPort=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9000             STR      R0,[SP, #+0]
   6850              UINT8 *p;
   6851          
   6852              if (s2wIsAutoconnected)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable440_1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xB9E0             CBNZ.N   R0,??AppS2wCmd_Ncudp_0
   6853              {
   6854                  return S2W_EINVAL;
   6855              }
   6856              if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable442
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0xB908             CBNZ.N   R0,??AppS2wCmd_Ncudp_1
   6857              {
   6858                  return S2W_LINK_LOST_EVT;
   \   0000001A   0x2009             MOVS     R0,#+9
   \   0000001C   0xE022             B.N      ??AppS2wCmd_Ncudp_2
   6859              }
   6860          
   6861              status = AppS2wParse_AddrPort(&temp, &peerData);
   \                     ??AppS2wCmd_Ncudp_1:
   \   0000001E   0xA903             ADD      R1,SP,#+12
   \   00000020   0xA801             ADD      R0,SP,#+4
   \   00000022   0x.... 0x....      BL       AppS2wParse_AddrPort
   6862              if (status != S2W_SUCCESS)
   \   00000026   0xB9E8             CBNZ.N   R0,??AppS2wCmd_Ncudp_2
   6863              {
   6864                  return status;
   6865              }
   6866          
   6867              peerData.proto = S2W_NETDATA_PROTO_UDP;
   \   00000028   0xF88D 0x000D      STRB     R0,[SP, #+13]
   6868              peerData.mode = S2W_NETDATA_MODE_CLIENT;
   \   0000002C   0xF88D 0x000C      STRB     R0,[SP, #+12]
   6869          
   6870              /* check the srs port given */
   6871              p = AppS2wParse_NextParamGet(&temp);
   \   00000030   0x.... 0x....      BL       ?Subroutine35
   6872              if (p)
   \                     ??CrossCallReturnLabel_174:
   \   00000034   0xB160             CBZ.N    R0,??AppS2wCmd_Ncudp_3
   6873              {
   6874                  status = AppS2wParse_Int(p, &srcPort);
   6875                  if (status != S2W_SUCCESS || !is_valid_port(srcPort))
   \   00000036   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_297:
   \   0000003A   0xB938             CBNZ.N   R0,??AppS2wCmd_Ncudp_0
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0xB128             CBZ.N    R0,??AppS2wCmd_Ncudp_0
   \   00000040   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000044   0xD202             BCS.N    ??AppS2wCmd_Ncudp_0
   6876                  {
   6877                      return S2W_EINVAL;
   6878                  }
   6879                  if (AppS2wParse_NextParamGet(&temp))
   \   00000046   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_173:
   \   0000004A   0xB108             CBZ.N    R0,??AppS2wCmd_Ncudp_3
   6880                      return S2W_EINVAL;
   \                     ??AppS2wCmd_Ncudp_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0xE009             B.N      ??AppS2wCmd_Ncudp_2
   6881          
   6882          
   6883              }
   6884              status = AppS2wHal_NetUdpClient(&peerData, &cid,(UINT16)srcPort);
   \                     ??AppS2wCmd_Ncudp_3:
   \   00000050   0x9A00             LDR      R2,[SP, #+0]
   \   00000052   0xB292             UXTH     R2,R2
   \   00000054   0xA902             ADD      R1,SP,#+8
   \   00000056   0xA803             ADD      R0,SP,#+12
   \   00000058   0x.... 0x....      BL       AppS2wHal_NetUdpClient
   6885              if (status != S2W_SUCCESS)
   \   0000005C   0xB910             CBNZ.N   R0,??AppS2wCmd_Ncudp_2
   6886              {
   6887                  return status;
   6888              }
   6889          
   6890              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   \   0000005E   0x.... 0x....      BL       ?Subroutine119
   6891          
   6892              return status;
   \                     ??CrossCallReturnLabel_568:
   \   00000062   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Ncudp_2:
   \   00000064   0xB013             ADD      SP,SP,#+76
   \   00000066   0xBD00             POP      {PC}             ;; return
   6893          
   6894          }
   6895          
   6896          
   6897          /**
   6898           ******************************************************************
   6899           * @ingroup S2w-Application
   6900           * @brief Process the ATS Command.
   6901           *   This function updates the register setting of S2W.
   6902           * @param ptr Pointer to the user input string.
   6903           * @return S2W_SUCCESS - operation successful.
   6904           * @retval S2W_EINVAL  - operation failure-invalid command.
   6905           * @retval S2W_FAILURE - operation failure- Register setting failed.
   6906           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6907          UINT8
   6908          AppS2wCmd_Settings(UINT8 *ptr)
   6909          {
   \                     AppS2wCmd_Settings:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   \   00000004   0x4604             MOV      R4,R0
   6910              UINT8 status = S2W_EINVAL;
   \   00000006   0x2502             MOVS     R5,#+2
   6911              UINT32 value;
   6912              UINT8 which;
   6913          
   6914          	/* Bug Fix 5886 - Command to configure max recv/recvfrom on socket is not working */
   6915              if (*ptr < '0' || *ptr > '9' || *(ptr + 1) != '=')
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0xF1A0 0x0130      SUB      R1,R0,#+48
   \   0000000E   0x290A             CMP      R1,#+10
   \   00000010   0xD238             BCS.N    ??AppS2wCmd_Settings_0
   \   00000012   0x7861             LDRB     R1,[R4, #+1]
   \   00000014   0x293D             CMP      R1,#+61
   \   00000016   0xD135             BNE.N    ??AppS2wCmd_Settings_0
   6916              {
   6917                 return S2W_EINVAL;
   6918              }
   6919          	
   6920              which = *ptr - '0';
   \   00000018   0xF1A0 0x0630      SUB      R6,R0,#+48
   \   0000001C   0xB2F6             UXTB     R6,R6
   6921          
   6922          	if (which > (S2W_NUM_TIMEOUTS + 2))
   \   0000001E   0x2E0B             CMP      R6,#+11
   \   00000020   0xDA30             BGE.N    ??AppS2wCmd_Settings_0
   6923              {
   6924                  return S2W_EINVAL;
   6925              }
   6926          
   6927              ptr += 2;
   \   00000022   0x1CA4             ADDS     R4,R4,#+2
   \   00000024   0xE000             B.N      ??AppS2wCmd_Settings_1
   6928              while (isspace(*ptr))
   6929              {
   6930                  ptr++;
   \                     ??AppS2wCmd_Settings_2:
   \   00000026   0x1C64             ADDS     R4,R4,#+1
   6931              }
   \                     ??AppS2wCmd_Settings_1:
   \   00000028   0x7820             LDRB     R0,[R4, #+0]
   \   0000002A   0x.... 0x....      BL       isspace
   \   0000002E   0x2800             CMP      R0,#+0
   \   00000030   0xD1F9             BNE.N    ??AppS2wCmd_Settings_2
   6932          
   6933              if (*ptr == '?')
   \   00000032   0x7820             LDRB     R0,[R4, #+0]
   \   00000034   0x.... 0x....      LDR.W    R9,??DataTable430_1
   \   00000038   0xEB09 0x0846      ADD      R8,R9,R6, LSL #+1
   \   0000003C   0xF509 0x7770      ADD      R7,R9,#+960
   \   00000040   0x283F             CMP      R0,#+63
   \   00000042   0xD113             BNE.N    ??AppS2wCmd_Settings_3
   6934              {
   6935          		UINT32 localValue=0;
   \   00000044   0x2100             MOVS     R1,#+0
   6936                  status = S2W_SUCCESS;
   \   00000046   0x2500             MOVS     R5,#+0
   6937          		switch(which)
   \   00000048   0x2E08             CMP      R6,#+8
   \   0000004A   0xD004             BEQ.N    ??AppS2wCmd_Settings_4
   \   0000004C   0x2E09             CMP      R6,#+9
   \   0000004E   0xD104             BNE.N    ??AppS2wCmd_Settings_5
   6938          		{
   6939          			case 9:
   6940          			localValue = s2wCurrent.socRdCnt;
   \   00000050   0xF899 0x13C0      LDRB     R1,[R9, #+960]
   6941          			break;
   \   00000054   0xE005             B.N      ??AppS2wCmd_Settings_6
   6942          			case 8:
   6943          			localValue = s2wCurrent.autoExitTimeout;
   \                     ??AppS2wCmd_Settings_4:
   \   00000056   0x6879             LDR      R1,[R7, #+4]
   6944          			break;
   \   00000058   0xE003             B.N      ??AppS2wCmd_Settings_6
   6945          			default:
   6946          			if(which < S2W_NUM_TIMEOUTS)
   \                     ??AppS2wCmd_Settings_5:
   \   0000005A   0x2E08             CMP      R6,#+8
   \   0000005C   0xBFB8             IT       LT 
   \   0000005E   0xF8B8 0x11C4      LDRHLT   R1,[R8, #+452]
   6947          				localValue = s2wCurrent.registers[which];
   6948          			break;
   6949              }
   6950          		S2w_Printf("\r\n%u", localValue);
   \                     ??AppS2wCmd_Settings_6:
   \   00000062   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%u">`
   \   00000066   0x.... 0x....      BL       S2w_Printf
   \   0000006A   0xE021             B.N      ??AppS2wCmd_Settings_7
   6951          	}
   6952              else if (isdigit(*ptr))
   \                     ??AppS2wCmd_Settings_3:
   \   0000006C   0x3830             SUBS     R0,R0,#+48
   \   0000006E   0x280A             CMP      R0,#+10
   \   00000070   0xD21E             BCS.N    ??AppS2wCmd_Settings_7
   6953              {
   6954                  /* validate the input string
   6955                   */
   6956                  status = AppS2wParse_Int(ptr, &value);
   \   00000072   0xA900             ADD      R1,SP,#+0
   \   00000074   0x.... 0x....      BL       ??Subroutine57_0
   \                     ??CrossCallReturnLabel_360:
   \   00000078   0x0005             MOVS     R5,R0
   6957                  if (status != S2W_SUCCESS || value > 65535)
   \   0000007A   0xD103             BNE.N    ??AppS2wCmd_Settings_0
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000082   0xD301             BCC.N    ??AppS2wCmd_Settings_8
   6958                  {
   6959                      return S2W_EINVAL;
   \                     ??AppS2wCmd_Settings_0:
   \   00000084   0x2002             MOVS     R0,#+2
   \   00000086   0xE014             B.N      ??AppS2wCmd_Settings_9
   6960                  }
   6961          
   6962                  /* update the current active profile
   6963                   */
   6964          		if(which < S2W_NUM_TIMEOUTS)
   \                     ??AppS2wCmd_Settings_8:
   \   00000088   0x2E08             CMP      R6,#+8
   \   0000008A   0xDA14             BGE.N    ??AppS2wCmd_Settings_10
   6965                  s2wCurrent.registers[which] = value;
   \   0000008C   0xF8A8 0x01C4      STRH     R0,[R8, #+452]
   6966          
   6967          		if(which == 9)
   6968          		{
   6969          			s2wCurrent.socRdCnt=value;
   6970          		}
   6971          		else if(which == 8)
   6972          		{
   6973          			s2wCurrent.autoExitTimeout = value;
   6974          		}
   6975                  if(S2W_REG_SCAN_TIME == which)/* scan time in mSec. Set it in wlan Fw too*/
   \   00000090   0x2E05             CMP      R6,#+5
   \   00000092   0xD10D             BNE.N    ??AppS2wCmd_Settings_7
   6976                  {
   6977                      /* set the scan time
   6978                      */
   6979                      s2wCurrent.minScanTime = value;
   \   00000094   0x9800             LDR      R0,[SP, #+0]
   \   00000096   0xF8A9 0x01D6      STRH     R0,[R9, #+470]
   6980                      status = GsnWdd_ScanParamSet(&s2wappMainTaskCtxt->if0.wddCtx,s2wCurrent.minScanTime,s2wCurrent.minScanTime,0);
   \   0000009A   0x2300             MOVS     R3,#+0
   \   0000009C   0x....             LDR.N    R0,??DataTable423_1
   \   0000009E   0xF8B9 0x21D6      LDRH     R2,[R9, #+470]
   \   000000A2   0x6800             LDR      R0,[R0, #+0]
   \   000000A4   0x4611             MOV      R1,R2
   \   000000A6   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000000AA   0x.... 0x....      BL       GsnWdd_ScanParamSet
   \   000000AE   0x4605             MOV      R5,R0
   6981                  }
   6982              }
   6983              return status;
   \                     ??AppS2wCmd_Settings_7:
   \   000000B0   0xB2E8             UXTB     R0,R5
   \                     ??AppS2wCmd_Settings_9:
   \   000000B2   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   \                     ??AppS2wCmd_Settings_10:
   \   000000B6   0x2E09             CMP      R6,#+9
   \   000000B8   0xBF08             IT       EQ 
   \   000000BA   0xF889 0x03C0      STRBEQ   R0,[R9, #+960]
   \   000000BE   0xD0F7             BEQ.N    ??AppS2wCmd_Settings_7
   \   000000C0   0x2E08             CMP      R6,#+8
   \   000000C2   0xD1F5             BNE.N    ??AppS2wCmd_Settings_7
   \   000000C4   0x6078             STR      R0,[R7, #+4]
   \   000000C6   0xE7F3             B.N      ??AppS2wCmd_Settings_7
   6984          }
   6985          
   6986          /**
   6987           ******************************************************************
   6988           * @ingroup S2w-Application
   6989           * @brief Process the AT+MCSTSET command
   6990           * @param ptr Pointer to the user input string.
   6991           * @return status.
   6992           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   6993          UINT8
   6994          AppS2wCmd_McastRecvSet(UINT8 *ptr)
   6995          {
   \                     AppS2wCmd_McastRecvSet:
   \   00000000   0xB580             PUSH     {R7,LR}
   6996              UINT8 status = S2W_EINVAL;
   6997              UINT8 set=0;
   \   00000002   0x.... 0x....      BL       ?Subroutine21
   6998          
   6999              status = AppS2wParse_Boolean(ptr,&set);
   7000              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_46:
   \   00000006   0xB918             CBNZ.N   R0,??AppS2wCmd_McastRecvSet_0
   7001              {
   7002                  return status;
   7003              }
   7004              return AppS2wHal_McastRecvSet(set);
   \   00000008   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000000C   0x.... 0x....      BL       AppS2wHal_McastRecvSet
   \                     ??AppS2wCmd_McastRecvSet_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
   7005          
   7006          }
   7007          
   7008          

   \                                 In section .text, align 2, keep-with-next
   7009          PUBLIC UINT8
   7010          AppS2wCmd_ieeePsPollSet(UINT8 *ptr)
   7011          {
   \                     AppS2wCmd_ieeePsPollSet:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   7012              UINT8 *p,status;
   7013              UINT32 enable=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   7014          	UINT32 val = 0;
   \   00000008   0x9000             STR      R0,[SP, #+0]
   7015          	GSN_WDD_STA_PS_CFG_SET_PARAM_T psCfg ;
   7016          	GSN_STATUS retVal=GSN_FAILURE;
   7017              memset(&psCfg,0,sizeof(psCfg));
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0x.... 0x....      BL       ?Subroutine16
   7018              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_30:
   \   00000010   0x.... 0x....      BL       ?Subroutine33
   7019              if (!p)
   \                     ??CrossCallReturnLabel_122:
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD054             BEQ.N    ??AppS2wCmd_ieeePsPollSet_0
   7020              {
   7021                  return S2W_EINVAL;
   7022              }
   7023              status = AppS2wParse_Int(p, &enable);
   7024              if(status != S2W_SUCCESS)
   \   00000018   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_326:
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD150             BNE.N    ??AppS2wCmd_ieeePsPollSet_0
   7025              {
   7026                  return S2W_EINVAL;
   7027              }
   7028              if(enable)
   \   00000020   0x9801             LDR      R0,[SP, #+4]
   \   00000022   0x.... 0x....      LDR.W    R4,??DataTable430_1
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable444
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD070             BEQ.N    ??AppS2wCmd_ieeePsPollSet_1
   7029              {
   7030          		p = AppS2wParse_NextParamGet(&ptr);
   \   0000002E   0x.... 0x....      BL       ?Subroutine33
   7031          		if(p)
   \                     ??CrossCallReturnLabel_121:
   \   00000032   0xB140             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_2
   7032          		{
   7033          			/*[listenInterval]. This the listen interval that will be advertised in the association request*/
   7034          			val = 0;
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x9100             STR      R1,[SP, #+0]
   7035          			status = AppS2wParse_Int(p, &val);
   7036          			if(status != S2W_SUCCESS)
   \   00000038   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_296:
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD140             BNE.N    ??AppS2wCmd_ieeePsPollSet_0
   7037          			{
   7038          				return S2W_EINVAL;
   7039          			}
   7040          			psCfg.listenIntervalAssoc = val;
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   7041          		}
   7042          		
   7043          		/*[wakeupType]*/
   7044          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_ieeePsPollSet_2:
   \   00000046   0x.... 0x....      BL       ?Subroutine33
   7045          		if(p)
   \                     ??CrossCallReturnLabel_120:
   \   0000004A   0xB140             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_3
   7046          		{			
   7047          			status = AppS2wParse_Int(p, &val);
   7048          			if(status != S2W_SUCCESS)
   \   0000004C   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_295:
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD136             BNE.N    ??AppS2wCmd_ieeePsPollSet_0
   7049          			{
   7050          				return S2W_EINVAL;
   7051          			}
   7052          			val++;/*Mapping to GSN_WIF_WLAN_STA_PS_WAKEUP_T*/
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0x1C40             ADDS     R0,R0,#+1
   \   00000058   0x9000             STR      R0,[SP, #+0]
   7053          			psCfg.wakeupType = (GSN_WIF_WLAN_STA_PS_WAKEUP_T)val;
   \   0000005A   0xF88D 0x0008      STRB     R0,[SP, #+8]
   7054          		}
   7055          		/*[wakeupInterval]*/
   7056          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_ieeePsPollSet_3:
   \   0000005E   0x.... 0x....      BL       ?Subroutine33
   7057          		if(p)
   \                     ??CrossCallReturnLabel_119:
   \   00000062   0xB130             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_4
   7058          		{
   7059          			status = AppS2wParse_Int(p, &val);
   7060          			if(status != S2W_SUCCESS)
   \   00000064   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_294:
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD12A             BNE.N    ??AppS2wCmd_ieeePsPollSet_0
   7061          			{
   7062          				return S2W_EINVAL;
   7063          			}
   7064          			psCfg.wakeupInterval = val;
   \   0000006C   0x9800             LDR      R0,[SP, #+0]
   \   0000006E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   7065          		}
   7066          		/* Set default beacon Wait Duration to 10 mSec*/
   7067          		psCfg.beaconWaitTimeout = 10;/* Default for 
   \                     ??AppS2wCmd_ieeePsPollSet_4:
   \   00000072   0x200A             MOVS     R0,#+10
   \   00000074   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   7068          										PS Poll is 10 MSec*/
   7069          		/*[the beacon Wait Duration ]*/
   7070          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000078   0x.... 0x....      BL       ?Subroutine33
   7071          		if(p)
   \                     ??CrossCallReturnLabel_118:
   \   0000007C   0xB128             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_5
   7072          		{
   7073          			status = AppS2wParse_Int(p, &val);
   7074          			if(status != S2W_SUCCESS)
   \   0000007E   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_293:
   \   00000082   0xB9F0             CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
   7075          			{
   7076          				return S2W_EINVAL;
   7077          			}
   7078          			psCfg.beaconWaitTimeout = val;/**/
   \   00000084   0x9800             LDR      R0,[SP, #+0]
   \   00000086   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   7079          		}
   7080                  
   7081                  /*[data Rx type - GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_T ]*/
   7082          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_ieeePsPollSet_5:
   \   0000008A   0x.... 0x....      BL       ?Subroutine33
   7083          		if(p)
   \                     ??CrossCallReturnLabel_117:
   \   0000008E   0xB148             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_6
   7084          		{
   7085          			status = AppS2wParse_Boolean(p, (UINT8 *)&val);
   7086          			if(status != S2W_SUCCESS)
   \   00000090   0x.... 0x....      BL       ?Subroutine60
   \                     ??CrossCallReturnLabel_377:
   \   00000094   0xB9A8             CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
   7087          			{
   7088          				return S2W_EINVAL;
   7089          			}
   7090          			if(val)
   \   00000096   0x9800             LDR      R0,[SP, #+0]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xBF14             ITE      NE 
   \   0000009C   0x2002             MOVNE    R0,#+2
   \   0000009E   0x2001             MOVEQ    R0,#+1
   7091          			{
   7092          			    psCfg.dataRxType = GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_SWITCH_TO_ACTIVE;/* */
   7093          			}
   7094          			else 
   7095          			{
   7096          			    psCfg.dataRxType = GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_PS_POLL;/* */
   \   000000A0   0xF88D 0x000E      STRB     R0,[SP, #+14]
   7097          			}
   7098          		}
   7099                  /*[Active to off switch timeout offset in ms ]*/
   7100          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_ieeePsPollSet_6:
   \   000000A4   0x.... 0x....      BL       ?Subroutine33
   7101          		if(p)
   \                     ??CrossCallReturnLabel_116:
   \   000000A8   0xB128             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_7
   7102          		{
   7103          			status = AppS2wParse_Int(p, &val);
   7104          			if(status != S2W_SUCCESS)
   \   000000AA   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_292:
   \   000000AE   0xB940             CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
   7105          			{
   7106          				return S2W_EINVAL;
   7107          			}
   7108          			psCfg.activeToOffTimeout = val;/**/
   \   000000B0   0x9800             LDR      R0,[SP, #+0]
   \   000000B2   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   7109          		}
   7110          		/*[Periodicity to switch to Active in ms ]*/
   7111          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_ieeePsPollSet_7:
   \   000000B6   0x.... 0x....      BL       ?Subroutine33
   7112          		if(p)
   \                     ??CrossCallReturnLabel_115:
   \   000000BA   0xB138             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_8
   7113          		{
   7114          			status = AppS2wParse_Int(p, &val);
   7115          			if(status != S2W_SUCCESS)
   \   000000BC   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_291:
   \   000000C0   0xB108             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_9
   7116          			{
   7117          				return S2W_EINVAL;
   \                     ??AppS2wCmd_ieeePsPollSet_0:
   \   000000C2   0x2002             MOVS     R0,#+2
   \   000000C4   0xE02F             B.N      ??AppS2wCmd_ieeePsPollSet_10
   7118          			}
   7119          			psCfg.switchToActivePeriod= val;/**/
   \                     ??AppS2wCmd_ieeePsPollSet_9:
   \   000000C6   0x9800             LDR      R0,[SP, #+0]
   \   000000C8   0xF8AD 0x0016      STRH     R0,[SP, #+22]
   7120          		}
   7121              }
   7122          
   7123              if(enable)
   \                     ??AppS2wCmd_ieeePsPollSet_8:
   \   000000CC   0x9801             LDR      R0,[SP, #+4]
   \   000000CE   0xB1F8             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_1
   7124              {
   7125              	if(2 == enable)/* Just set the IEEE PS configuration*/
   \   000000D0   0x6828             LDR      R0,[R5, #+0]
   \   000000D2   0x9901             LDR      R1,[SP, #+4]
   \   000000D4   0xF600 0x60E0      ADDW     R0,R0,#+3808
   \   000000D8   0x2902             CMP      R1,#+2
   \   000000DA   0xD10F             BNE.N    ??AppS2wCmd_ieeePsPollSet_11
   7126          		{
   7127          			psCfg.uapsdEnable = 0x00;
   \   000000DC   0x2100             MOVS     R1,#+0
   \   000000DE   0xF88D 0x100F      STRB     R1,[SP, #+15]
   7128              		retVal = GsnWdd_RadioPowerSaveCfgSet(&s2wappMainTaskCtxt->if0.wddCtx, &psCfg);
   7129          			if(retVal != GSN_SUCCESS)
   \   000000E2   0xA902             ADD      R1,SP,#+8
   \   000000E4   0x.... 0x....      BL       GsnWdd_RadioPowerSaveCfgSet
   \   000000E8   0xB108             CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_12
   7130          				return S2W_FAILURE;				
   \   000000EA   0x2001             MOVS     R0,#+1
   \   000000EC   0xE01B             B.N      ??AppS2wCmd_ieeePsPollSet_10
   7131          			memcpy(&s2wCurrent.ieeePScfg,&psCfg,sizeof(GSN_WDD_STA_PS_CFG_SET_PARAM_T));			
   \                     ??AppS2wCmd_ieeePsPollSet_12:
   \   000000EE   0x2210             MOVS     R2,#+16
   \   000000F0   0xA902             ADD      R1,SP,#+8
   \   000000F2   0xF204 0x3096      ADDW     R0,R4,#+918
   \   000000F6   0x.... 0x....      BL       memcpy
   \   000000FA   0xE013             B.N      ??AppS2wCmd_ieeePsPollSet_13
   7132          		}
   7133                 	else if(1 == enable)
   \                     ??AppS2wCmd_ieeePsPollSet_11:
   \   000000FC   0x2901             CMP      R1,#+1
   \   000000FE   0xD111             BNE.N    ??AppS2wCmd_ieeePsPollSet_13
   7134          		{
   7135                  	GsnWdd_Ioctl(&s2wappMainTaskCtxt->if0.wddCtx,GSN_WDD_IOCTL_RX_IEEEPS_MODE_ON,NULL);			
   \   00000100   0x2200             MOVS     R2,#+0
   \   00000102   0x2109             MOVS     R1,#+9
   \   00000104   0x.... 0x....      BL       GsnWdd_Ioctl
   7136          			s2wCurrent.powerSave = 0;
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x71E0             STRB     R0,[R4, #+7]
   7137          			s2wCurrent.ieeePScfgEn=1;
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0xE007             B.N      ??AppS2wCmd_ieeePsPollSet_14
   7138          		}
   7139              }
   7140              else
   7141              {
   7142                  GsnWdd_Ioctl(&s2wappMainTaskCtxt->if0.wddCtx,GSN_WDD_IOCTL_RX_IEEEPS_MODE_OFF,NULL);
   \                     ??AppS2wCmd_ieeePsPollSet_1:
   \   00000110   0x6828             LDR      R0,[R5, #+0]
   \   00000112   0x2200             MOVS     R2,#+0
   \   00000114   0x210A             MOVS     R1,#+10
   \   00000116   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000011A   0x.... 0x....      BL       GsnWdd_Ioctl
   7143          		//s2wCurrent.powerSave = 0;
   7144          		s2wCurrent.ieeePScfgEn=0;
   \   0000011E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_ieeePsPollSet_14:
   \   00000120   0xF884 0x03B0      STRB     R0,[R4, #+944]
   7145              }
   7146              return S2W_SUCCESS;
   \                     ??AppS2wCmd_ieeePsPollSet_13:
   \   00000124   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_ieeePsPollSet_10:
   \   00000126   0xB007             ADD      SP,SP,#+28
   \   00000128   0xBD30             POP      {R4,R5,PC}       ;; return
   7147          }
   7148          
   7149          
   7150          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   7151          /**
   7152           ******************************************************************
   7153           * @ingroup S2w-Application
   7154           * @brief Process AT+SSLOPEN command.
   7155           * @param ptr Pointer to the user input string.
   7156           * @return status, S2W_SUCCESS or S2W_FAILURE.
   7157           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   7158          UINT8
   7159          AppS2wCmd_SSLOpen(UINT8 *ptr)
   7160          {
   \                     AppS2wCmd_SSLOpen:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
   7161              UINT8 status = S2W_EINVAL;
   \   00000006   0x2402             MOVS     R4,#+2
   7162              UINT8 cid;
   7163              UINT8 valCid;
   7164              UINT8 *p;
   7165              UINT8 endParam = 1;
   7166          
   7167              p = AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ?Subroutine35
   7168              if (!p)
   \                     ??CrossCallReturnLabel_172:
   \   0000000C   0xB908             CBNZ.N   R0,??AppS2wCmd_SSLOpen_0
   7169              {
   7170                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xE02B             B.N      ??AppS2wCmd_SSLOpen_1
   7171              }
   7172          
   7173              cid = *p;
   7174          
   7175              valCid = AppS2w_CidValidate(cid);
   \                     ??AppS2wCmd_SSLOpen_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine101
   \                     ??CrossCallReturnLabel_518:
   \   00000016   0x4605             MOV      R5,R0
   7176          
   7177              if (valCid != INVALID_CID)
   \   00000018   0x2DFF             CMP      R5,#+255
   \   0000001A   0xD025             BEQ.N    ??AppS2wCmd_SSLOpen_2
   7178              {
   7179                  UINT8 *pCertName = NULL;
   \   0000001C   0x2600             MOVS     R6,#+0
   7180                  UINT8 *pClientCertName = NULL;
   \   0000001E   0x2700             MOVS     R7,#+0
   7181                  UINT8 *pClientKeyName = NULL;
   \   00000020   0x46B0             MOV      R8,R6
   7182          
   7183                  (VOID)pClientCertName;
   7184                  (VOID)pClientKeyName;
   7185          
   7186                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ?Subroutine35
   7187          
   7188                  if (p != NULL)
   \                     ??CrossCallReturnLabel_171:
   \   00000026   0xB140             CBZ.N    R0,??AppS2wCmd_SSLOpen_3
   7189                  {
   7190                      pCertName = p;
   \   00000028   0x4606             MOV      R6,R0
   7191                      endParam = 0;
   7192          
   7193                  }
   7194          
   7195                  if(!endParam)
   7196                  {
   7197                      endParam = 1;
   7198                      p = AppS2wParse_NextParamGet(&ptr);
   \   0000002A   0x.... 0x....      BL       ?Subroutine35
   7199                      if(NULL != p)
   \                     ??CrossCallReturnLabel_170:
   \   0000002E   0xB120             CBZ.N    R0,??AppS2wCmd_SSLOpen_3
   7200                      {
   7201                          endParam = 0;
   7202                          pClientCertName = p;
   \   00000030   0x4607             MOV      R7,R0
   7203                      }
   7204                  }
   7205          
   7206                  if(!endParam)
   7207                  {
   7208                      endParam = 1;
   7209                      p = AppS2wParse_NextParamGet(&ptr);
   \   00000032   0x.... 0x....      BL       ?Subroutine35
   7210                      if(NULL != p)
   \                     ??CrossCallReturnLabel_169:
   \   00000036   0xB100             CBZ.N    R0,??AppS2wCmd_SSLOpen_3
   7211                      {
   7212                          endParam = 0;
   7213                          pClientKeyName = p;
   \   00000038   0x4680             MOV      R8,R0
   7214                      }
   7215                  }
   7216          #ifdef S2W_SSL_CLIENT_SUPPORT
   7217                  if( S2W_NETDATA_MODE_CLIENT == AppS2w_ConnModeGet(valCid))
   \                     ??AppS2wCmd_SSLOpen_3:
   \   0000003A   0x4628             MOV      R0,R5
   \   0000003C   0x.... 0x....      BL       AppS2w_ConnModeGet
   \   00000040   0xB930             CBNZ.N   R0,??AppS2wCmd_SSLOpen_4
   7218                  {
   7219                      status = AppS2w_SslClientOpen(valCid, (INT8*)pCertName, pClientCertName,
   7220                                                    pClientKeyName);
   \   00000042   0x4643             MOV      R3,R8
   \   00000044   0x463A             MOV      R2,R7
   \   00000046   0x4631             MOV      R1,R6
   \   00000048   0x4628             MOV      R0,R5
   \   0000004A   0x.... 0x....      BL       AppS2w_SslClientOpen
   \   0000004E   0x4604             MOV      R4,R0
   7221                  }
   7222          #endif
   7223          #ifdef S2W_SSL_SERVER_SUPPORT
   7224                  if( S2W_NETDATA_MODE_SERVER == AppS2w_ConnModeGet(valCid))
   \                     ??AppS2wCmd_SSLOpen_4:
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       AppS2w_ConnModeGet
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD104             BNE.N    ??AppS2wCmd_SSLOpen_5
   7225                  {
   7226                      status = AppS2w_SslServerOpen(valCid, (char*)pCertName);
   \   0000005A   0x4631             MOV      R1,R6
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0x.... 0x....      BL       AppS2w_SslServerOpen
   \   00000062   0x4604             MOV      R4,R0
   7227                  }
   7228          #endif
   7229                  return status;
   \                     ??AppS2wCmd_SSLOpen_5:
   \   00000064   0xB2E0             UXTB     R0,R4
   \   00000066   0xE000             B.N      ??AppS2wCmd_SSLOpen_1
   7230              }
   7231              else
   7232                  return S2W_EBADCID;
   \                     ??AppS2wCmd_SSLOpen_2:
   \   00000068   0x2005             MOVS     R0,#+5
   \                     ??AppS2wCmd_SSLOpen_1:
   \   0000006A   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
   7233          }
   7234          
   7235          /*UINT8
   7236          AppS2wCmd_SSLOpen_test(UINT8 CID)
   7237          {
   7238              UINT8 status = S2W_EINVAL;
   7239              UINT8 valCid;
   7240              UINT8 endParam = 1;
   7241          
   7242              valCid = CID;
   7243          
   7244              if (valCid != INVALID_CID)
   7245              {
   7246                  UINT8 *pCertName = NULL;
   7247                  UINT8 *pClientCertName = NULL;
   7248                  UINT8 *pClientKeyName = NULL;
   7249          
   7250                  (VOID)pClientCertName;
   7251                  (VOID)pClientKeyName;
   7252          
   7253          #ifdef S2W_SSL_CLIENT_SUPPORT
   7254                  if( S2W_NETDATA_MODE_CLIENT == AppS2w_ConnModeGet(valCid))
   7255                  {
   7256                      status = AppS2w_SslClientOpen(valCid, (INT8*)pCertName, pClientCertName,
   7257                                                    pClientKeyName);
   7258                  }
   7259          #endif
   7260          #ifdef S2W_SSL_SERVER_SUPPORT
   7261                  if( S2W_NETDATA_MODE_SERVER == AppS2w_ConnModeGet(valCid))
   7262                  {
   7263                      status = AppS2w_SslServerOpen(valCid, (char*)pCertName);
   7264                  }
   7265          #endif
   7266                  return status;
   7267              }
   7268              else
   7269                  return S2W_EBADCID;
   7270          }*/
   7271          
   7272          
   7273          
   7274          
   7275          
   7276          /**
   7277           ******************************************************************
   7278           * @ingroup S2w-Application
   7279           * @brief Process AT+SSLOPEN command.
   7280           * @param ptr Pointer to the user input string.
   7281           * @return status, S2W_SUCCESS or S2W_FAILURE.
   7282           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   7283          UINT8
   7284          AppS2wCmd_SSLClose(UINT8 *ptr)
   7285          {
   \                     AppS2wCmd_SSLClose:
   \   00000000   0xB580             PUSH     {R7,LR}
   7286              //UINT8 status;
   7287              UINT8 cid = *ptr;
   7288              UINT8 valCid;
   7289          
   7290              if ((valCid = AppS2w_CidValidate(cid)) != INVALID_CID)
   \   00000002   0x.... 0x....      BL       ?Subroutine101
   \                     ??CrossCallReturnLabel_517:
   \   00000006   0x28FF             CMP      R0,#+255
   \   00000008   0xD003             BEQ.N    ??AppS2wCmd_SSLClose_0
   7291              {
   7292                  return AppS2w_SslClose(valCid);
   \   0000000A   0x.... 0x....      BL       AppS2w_SslClose
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0xBD02             POP      {R1,PC}
   7293              }
   7294              else
   7295              {
   7296                  return S2W_EBADCID;
   \                     ??AppS2wCmd_SSLClose_0:
   \   00000012   0x2005             MOVS     R0,#+5
   \   00000014   0xBD02             POP      {R1,PC}          ;; return
   7297          	}
   7298          }
   7299          
   7300          #endif
   7301          
   7302          
   7303          /**
   7304           ******************************************************************
   7305           * @ingroup S2w-Application
   7306           * @brief s2w rigister info display function
   7307           *   This function print s2w register inforamtion passed.
   7308           * @param profile - IN  Pointer to the profile data
   7309           *
   7310           * @return none.
   7311           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   7312          VOID
   7313          AppS2wRegisters_Display(const S2W_PROFILE_T *profile)
   7314          {
   \                     AppS2wRegisters_Display:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   7315              INT32 i;
   7316          
   7317              for (i = 0; i < S2W_NUM_TIMEOUTS; i++)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0x....             ADR.N    R6,??DataTable430  ;; " "
   \   0000000A   0x.... 0x....      ADR.W    R8,`?<Constant "%sS%d=%05u">`
   \   0000000E   0x....             ADR.N    R7,??DataTable431  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000010   0xE000             B.N      ??AppS2wRegisters_Display_0
   7318              {
   7319                  S2w_Printf("%sS%d=%05u", !i ? "\r\n" : " ",
   7320                          i, profile->registers[i]);
   \                     ??AppS2wRegisters_Display_1:
   \   00000012   0xB90D             CBNZ.N   R5,??AppS2wRegisters_Display_2
   \                     ??AppS2wRegisters_Display_0:
   \   00000014   0x4639             MOV      R1,R7
   \   00000016   0xE000             B.N      ??AppS2wRegisters_Display_3
   \                     ??AppS2wRegisters_Display_2:
   \   00000018   0x4631             MOV      R1,R6
   \                     ??AppS2wRegisters_Display_3:
   \   0000001A   0x.... 0x....      BL       ?Subroutine135
   \                     ??CrossCallReturnLabel_620:
   \   0000001E   0x4640             MOV      R0,R8
   \   00000020   0x.... 0x....      BL       S2w_Printf
   \   00000024   0x1C6D             ADDS     R5,R5,#+1
   \   00000026   0x2D01             CMP      R5,#+1
   \   00000028   0xDBF3             BLT.N    ??AppS2wRegisters_Display_1
   \   0000002A   0x2501             MOVS     R5,#+1
   \                     ??AppS2wRegisters_Display_4:
   \   0000002C   0x.... 0x....      BL       ?Subroutine135
   7321              }
   \                     ??CrossCallReturnLabel_621:
   \   00000030   0x4631             MOV      R1,R6
   \   00000032   0x4640             MOV      R0,R8
   \   00000034   0x.... 0x....      BL       S2w_Printf
   \   00000038   0x1C6D             ADDS     R5,R5,#+1
   \   0000003A   0x2D08             CMP      R5,#+8
   \   0000003C   0xDBF6             BLT.N    ??AppS2wRegisters_Display_4
   7322          }
   \   0000003E   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine135:
   \   00000000   0xEB04 0x0045      ADD      R0,R4,R5, LSL #+1
   \   00000004   0x462A             MOV      R2,R5
   \   00000006   0xF8B0 0x31C4      LDRH     R3,[R0, #+452]
   \   0000000A   0x4770             BX       LR
   7323          

   \                                 In section .text, align 2, keep-with-next
   7324          VOID AppS2w_ConctCbProcess(VOID* ctext,INT32 status)
   7325          {
   \                     AppS2w_ConctCbProcess:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   7326          	GSN_WDD_WLAN_CFG_T *pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable444
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF600 0x7594      ADDW     R5,R0,#+3988
   7327              if(status == GSN_SUCCESS)
   \   0000000E   0xB909             CBNZ.N   R1,??AppS2w_ConctCbProcess_0
   7328              {
   7329                  s2wLinkState = S2W_LINK_STATE_CONNECTED;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xE004             B.N      ??AppS2w_ConctCbProcess_1
   7330              }
   7331              else
   7332              {
   7333                  /* get the association status by calling geps API
   7334                   */
   7335                  if(GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE)
   \                     ??AppS2w_ConctCbProcess_0:
   \   00000014   0x.... 0x....      BL       ??Subroutine120_0
   \                     ??CrossCallReturnLabel_570:
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xBF18             IT       NE 
   \   0000001C   0x2000             MOVNE    R0,#+0
   7336                  {
   7337                      s2wLinkState = S2W_LINK_STATE_CONNECTED;
   7338                  }
   7339                  else
   7340                  {
   7341                      s2wLinkState = S2W_LINK_STATE_DISCONNECTED;
   \                     ??AppS2w_ConctCbProcess_1:
   \   0000001E   0x.... 0x....      LDR.W    R1,??DataTable442
   \   00000022   0x7008             STRB     R0,[R1, #+0]
   7342                  }
   7343          
   7344              }
   7345              
   7346              if(s2wLinkState == S2W_LINK_STATE_CONNECTED)
   \   00000024   0x7808             LDRB     R0,[R1, #+0]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD144             BNE.N    ??AppS2w_ConctCbProcess_2
   7347              {
   7348          		s2wCurrent.security.wpa.pskValid = pWlanConfig->securityCfg.pskConfig.pskValid;
   \   0000002A   0x....             LDR.N    R6,??DataTable430_1
   \   0000002C   0xF895 0x0051      LDRB     R0,[R5, #+81]
   \   00000030   0xF886 0x00F4      STRB     R0,[R6, #+244]
   7349          
   7350          		if(pWlanConfig->securityCfg.pskConfig.pskValid)
   \   00000034   0xF895 0x0051      LDRB     R0,[R5, #+81]
   \   00000038   0xB190             CBZ.N    R0,??AppS2w_ConctCbProcess_3
   7351          		{
   7352          			 memcpy(s2wCurrent.security.wpa.psk,
   7353          					pWlanConfig->securityCfg.pskConfig.psk, 32);			 
   \   0000003A   0x2220             MOVS     R2,#+32
   \   0000003C   0xF105 0x0194      ADD      R1,R5,#+148
   \   00000040   0xF106 0x00F5      ADD      R0,R6,#+245
   \   00000044   0x.... 0x....      BL       memcpy
   7354          			 memset(s2wCurrent.security.wpa.ssid,0,S2W_MAX_SSID_LEN);
   \   00000048   0xF206 0x1715      ADDW     R7,R6,#+277
   \   0000004C   0x.... 0x....      BL       ?Subroutine67
   7355          			 memcpy(s2wCurrent.security.wpa.ssid,pWlanConfig->ssid.array,
   7356          						 pWlanConfig->ssid.length );
   \                     ??CrossCallReturnLabel_405:
   \   00000050   0x782A             LDRB     R2,[R5, #+0]
   \   00000052   0x1C69             ADDS     R1,R5,#+1
   \   00000054   0x4638             MOV      R0,R7
   \   00000056   0x.... 0x....      BL       memcpy
   7357          					 s2wCurrent.security.wpa.ssidLen = pWlanConfig->ssid.length;
   \   0000005A   0x7828             LDRB     R0,[R5, #+0]
   \   0000005C   0xF886 0x0135      STRB     R0,[R6, #+309]
   7358          		 }
   7359                  /* copy the ssid and len  and channel       */
   7360                  memcpy(current_wlan_info.ssid,pWlanConfig->ssid.array,
   7361                         pWlanConfig->ssid.length );
   \                     ??AppS2w_ConctCbProcess_3:
   \   00000060   0x1C69             ADDS     R1,R5,#+1
   \   00000062   0x782A             LDRB     R2,[R5, #+0]
   \   00000064   0xF206 0x4002      ADDW     R0,R6,#+1026
   \   00000068   0x.... 0x....      BL       memcpy
   7362                  current_wlan_info.ssidLen = pWlanConfig->ssid.length;
   \   0000006C   0xF506 0x777E      ADD      R7,R6,#+1016
   \   00000070   0x7828             LDRB     R0,[R5, #+0]
   \   00000072   0x70B8             STRB     R0,[R7, #+2]
   7363          
   7364                  /* associated ch will be at 0 index
   7365                   */
   7366                  current_wlan_info.channel = pWlanConfig->channel[0];
   7367          
   7368                  memcpy(current_wlan_info.bssid, pWlanConfig->bssid.array,6);
   \   00000074   0x2206             MOVS     R2,#+6
   \   00000076   0xF895 0x0027      LDRB     R0,[R5, #+39]
   \   0000007A   0x7078             STRB     R0,[R7, #+1]
   \   0000007C   0xF105 0x0121      ADD      R1,R5,#+33
   \   00000080   0xF506 0x707F      ADD      R0,R6,#+1020
   \   00000084   0x.... 0x....      BL       memcpy
   7369                  current_wlan_info.validBssid = 1;
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0x70F8             STRB     R0,[R7, #+3]
   7370                  current_wlan_info.mode = ((APP_MAIN_CTX_T*)ctext)->if0.wddCtx.wlanNwType;
   \   0000008C   0xF894 0x0F08      LDRB     R0,[R4, #+3848]
   \   00000090   0xF886 0x03F8      STRB     R0,[R6, #+1016]
   7371                  // update the security info
   7372                  current_wlan_info.authMode = pWlanConfig->securityCfg.mode;
   \   00000094   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   00000098   0xF886 0x0422      STRB     R0,[R6, #+1058]
   7373                  if(pWlanConfig->securityCfg.mode == GSN_WDD_SEC_MODE_WEP)
   \   0000009C   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   000000A0   0x2804             CMP      R0,#+4
   \   000000A2   0xD107             BNE.N    ??AppS2w_ConctCbProcess_2
   7374                  {
   7375                      if(pWlanConfig->securityCfg.wepConfig.authType == GSN_WDD_SEC_WEP_SHARED)
   \   000000A4   0xF895 0x0041      LDRB     R0,[R5, #+65]
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xBF0C             ITE      EQ 
   \   000000AC   0x2002             MOVEQ    R0,#+2
   \   000000AE   0x2001             MOVNE    R0,#+1
   7376                      {
   7377                          current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_SHARED;
   7378                      }
   7379                      else
   7380                      {
   7381                          current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_OPEN;
   \   000000B0   0xF886 0x0422      STRB     R0,[R6, #+1058]
   7382                      }
   7383                  }
   7384              }
   7385          }
   \                     ??AppS2w_ConctCbProcess_2:
   \   000000B4   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   7386          

   \                                 In section .text, align 2, keep-with-next
   7387          VOID
   7388          AppS2w_WlanRespTmrCb( VOID* context, GSN_SOFT_TMR_HANDLE_T timerHandle )
   7389          {
   \                     AppS2w_WlanRespTmrCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   7390          	GSN_ASSERT(FALSE);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable449  ;; 0x41010010
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`+0x43
   \   0000000A   0x6804             LDR      R4,[R0, #+0]
   \   0000000C   0x2220             MOVS     R2,#+32
   \   0000000E   0x1D20             ADDS     R0,R4,#+4
   \   00000010   0x.... 0x....      BL       memcpy
   \   00000014   0xF641 0x40DE      MOVW     R0,#+7390
   \   00000018   0x6260             STR      R0,[R4, #+36]
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
   \   0000001E   0x7060             STRB     R0,[R4, #+1]
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0x70A0             STRB     R0,[R4, #+2]
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      GsnSys_Reset
   7391          }

   \                                 In section .text, align 2, keep-with-next
   7392          VOID
   7393          s2wApp_ConnectCb( VOID* ctext, INT32 status)
   7394          {	
   \                     s2wApp_ConnectCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x460C             MOV      R4,R1
   7395          	/*stop timer*/
   7396          	GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
   \   00000004   0x.... 0x....      BL       ?Subroutine128
   \                     ??CrossCallReturnLabel_600:
   \   00000008   0x.... 0x....      BL       ??Subroutine110_0
   7397          	L2ConnectStatus = status;
   \                     ??CrossCallReturnLabel_543:
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable449_1
   \   00000010   0x6184             STR      R4,[R0, #+24]
   7398              GsnOsal_SemRelease ( &s2wL2L3ConnectSemaphore);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable450
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      B.W      GsnOsal_SemRelease
   7399          }
   7400          
   7401          #ifdef S2W_SNTP
   7402          
   7403          
   7404          

   \                                 In section .text, align 2, keep-with-next
   7405          PUBLIC VOID AppS2wProcess_SntpTimerNotify()
   7406          {
   \                     AppS2wProcess_SntpTimerNotify:
   \   00000000   0xB510             PUSH     {R4,LR}
   7407              GsnSntp_TimeSync(&s2wappMainTaskCtxt->sntpCtx, s2wappMainTaskCtxt->sntpSrvIp,
   7408                                s2wappMainTaskCtxt->sntpSrvTimeout ,
   7409                                S2wApp_TimeSyncDoneCb, &s2wappMainTaskCtxt->sntpCtx);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable448
   \   00000006   0x.... 0x....      ADR.W    R3,S2wApp_TimeSyncDoneCb
   \   0000000A   0x6801             LDR      R1,[R0, #+0]
   \   0000000C   0xB082             SUB      SP,SP,#+8
   \   0000000E   0xF501 0x40EC      ADD      R0,R1,#+30208
   \   00000012   0xF247 0x6454      MOVW     R4,#+30292
   \   00000016   0x3008             ADDS     R0,R0,#+8
   \   00000018   0x1862             ADDS     R2,R4,R1
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x6852             LDR      R2,[R2, #+4]
   \   0000001E   0x5861             LDR      R1,[R4, R1]
   \   00000020   0x.... 0x....      BL       GsnSntp_TimeSync
   7410          }
   \   00000024   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   7411          
   7412          

   \                                 In section .text, align 2, keep-with-next
   7413          UINT8
   7414          AppS2wCmd_ntpTimeSet(UINT8 *ptr)
   7415          {
   \                     AppS2wCmd_ntpTimeSet:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   7416              BOOL enable=0, periodic=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   7417              UINT8 *p,status;
   7418              S2W_IPADDR_T srvIp;
   7419          	GSN_STATUS ret;
   7420          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000000A   0x.... 0x....      BL       ?Subroutine33
   7421              if (!p)
   \                     ??CrossCallReturnLabel_114:
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD028             BEQ.N    ??AppS2wCmd_ntpTimeSet_0
   7422              {
   7423                  return S2W_EINVAL;
   7424              }
   7425              status = AppS2wParse_Boolean(p, &enable);
   7426              if(status != GSN_SUCCESS)
   \   00000012   0xF10D 0x0111      ADD      R1,SP,#+17
   \   00000016   0x.... 0x....      BL       AppS2wParse_Boolean
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xF040 0x808B      BNE.W    ??AppS2wCmd_ntpTimeSet_1
   7427              {
   7428                  return S2W_EINVAL;
   7429              }
   7430          
   7431              if(enable)
   \   00000020   0xF89D 0x0011      LDRB     R0,[SP, #+17]
   \   00000024   0x.... 0x....      LDR.W    R5,??DataTable444
   \   00000028   0xF247 0x6460      MOVW     R4,#+30304
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xF000 0x807F      BEQ.W    ??AppS2wCmd_ntpTimeSet_2
   7432              {
   7433                  p = AppS2wParse_NextParamGet(&ptr); // serv ip
   \   00000032   0x.... 0x....      BL       ?Subroutine33
   7434                  if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_113:
   \   00000036   0xF247 0x6650      MOVW     R6,#+30288
   \   0000003A   0xF247 0x6754      MOVW     R7,#+30292
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xBF1C             ITT      NE 
   \   00000042   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000044   0x2900             CMPNE    R1,#+0
   \   00000046   0xD032             BEQ.N    ??AppS2wCmd_ntpTimeSet_3
   7435                  {
   7436                      status = AppS2wParse_Ip(p, srvIp );
   \   00000048   0xA905             ADD      R1,SP,#+20
   \   0000004A   0x.... 0x....      BL       AppS2wParse_Ip
   7437                      if (status != S2W_SUCCESS)
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xD178             BNE.N    ??AppS2wCmd_ntpTimeSet_4
   7438                      {
   7439                          return status;
   7440                      }
   7441                      memcpy((UINT8*)&s2wappMainTaskCtxt->sntpSrvIp,srvIp,4);
   \   00000052   0x6828             LDR      R0,[R5, #+0]
   \   00000054   0x2204             MOVS     R2,#+4
   \   00000056   0xA905             ADD      R1,SP,#+20
   \   00000058   0x1838             ADDS     R0,R7,R0
   \   0000005A   0x.... 0x....      BL       memcpy
   7442          
   7443                      p = AppS2wParse_NextParamGet(&ptr);  // srv timeout
   \   0000005E   0x.... 0x....      BL       ?Subroutine33
   7444                      if (!p)
   \                     ??CrossCallReturnLabel_112:
   \   00000062   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_ntpTimeSet_0:
   \   00000064   0xD067             BEQ.N    ??AppS2wCmd_ntpTimeSet_1
   7445                      {
   7446                          return S2W_EINVAL;
   7447                      }
   7448                      status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->sntpSrvTimeout );
   \   00000066   0x6829             LDR      R1,[R5, #+0]
   \   00000068   0xF501 0x41EC      ADD      R1,R1,#+30208
   \   0000006C   0x3158             ADDS     R1,R1,#+88
   \   0000006E   0x.... 0x....      BL       AppS2wParse_Int
   7449                      if (status != S2W_SUCCESS)
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD166             BNE.N    ??AppS2wCmd_ntpTimeSet_4
   7450                      {
   7451                          return status;
   7452                      }
   7453                      p = AppS2wParse_NextParamGet(&ptr);  // periodic/oneshot
   \   00000076   0x.... 0x....      BL       ?Subroutine33
   7454                      if (!p)
   \                     ??CrossCallReturnLabel_111:
   \   0000007A   0x2800             CMP      R0,#+0
   \   0000007C   0xD05B             BEQ.N    ??AppS2wCmd_ntpTimeSet_1
   7455                      {
   7456                          return S2W_EINVAL;
   7457                      }
   7458                      status = AppS2wParse_Boolean(p,&periodic );
   \   0000007E   0xA904             ADD      R1,SP,#+16
   \   00000080   0x.... 0x....      BL       AppS2wParse_Boolean
   7459                      if (status != S2W_SUCCESS)
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD15D             BNE.N    ??AppS2wCmd_ntpTimeSet_4
   7460                      {
   7461                          return status;
   7462                      }
   7463          
   7464                      if(periodic)
   \   00000088   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000008C   0xB148             CBZ.N    R0,??AppS2wCmd_ntpTimeSet_5
   7465                      {
   7466                          p = AppS2wParse_NextParamGet(&ptr);  // timer period
   \   0000008E   0x.... 0x....      BL       ?Subroutine33
   7467                          if (!p)
   \                     ??CrossCallReturnLabel_110:
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xD04F             BEQ.N    ??AppS2wCmd_ntpTimeSet_1
   7468                          {
   7469                              return S2W_EINVAL;
   7470                          }
   7471                          status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->sntpTimerPeriod );
   \   00000096   0x6829             LDR      R1,[R5, #+0]
   \   00000098   0x1871             ADDS     R1,R6,R1
   \   0000009A   0x.... 0x....      BL       AppS2wParse_Int
   7472                          if (status != S2W_SUCCESS)
   \   0000009E   0xB188             CBZ.N    R0,??AppS2wCmd_ntpTimeSet_6
   7473                          {
   7474                              return status;
   \   000000A0   0xE050             B.N      ??AppS2wCmd_ntpTimeSet_4
   7475                          }
   7476                          // start a timer
   7477                      }
   7478                      else
   7479                      {
   7480                          if(s2wLinkState != S2W_LINK_STATE_CONNECTED)
   \                     ??AppS2wCmd_ntpTimeSet_5:
   \   000000A2   0x.... 0x....      LDR.W    R0,??DataTable442
   \   000000A6   0x7800             LDRB     R0,[R0, #+0]
   \   000000A8   0x2801             CMP      R0,#+1
   \   000000AA   0xD129             BNE.N    ??AppS2wCmd_ntpTimeSet_7
   \   000000AC   0xE00A             B.N      ??AppS2wCmd_ntpTimeSet_6
   7481                            return S2W_FAILURE;
   7482                      }
   7483          	    }
   7484          	    else // with default values
   7485          	    {
   7486                      if(S2W_DFLT_SNTP_PERIODIC)
   7487                      {
   7488                          periodic=1;
   7489                          s2wappMainTaskCtxt->sntpTimerPeriod = S2W_DFLT_SNTP_PERIODIC_PERIOD;
   7490          			}
   7491          			else
   7492          			{
   7493          				periodic=0;
   \                     ??AppS2wCmd_ntpTimeSet_3:
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0xF88D 0x0010      STRB     R0,[SP, #+16]
   7494          			}
   7495                      s2wappMainTaskCtxt->sntpSrvIp = ntohl(S2W_DFLT_SNTP_SVR_IP);
   \   000000B4   0x.... 0x....      LDR.W    R1,??DataTable451  ;; 0x1f0a8c0
   \   000000B8   0x6828             LDR      R0,[R5, #+0]
   \   000000BA   0x5039             STR      R1,[R7, R0]
   7496                      s2wappMainTaskCtxt->sntpSrvTimeout = S2W_DFLT_SNTP_TIMEOUT;
   \   000000BC   0x1838             ADDS     R0,R7,R0
   \   000000BE   0xF44F 0x717A      MOV      R1,#+1000
   \   000000C2   0x6041             STR      R1,[R0, #+4]
   7497          		}
   7498                  s2wappMainTaskCtxt->sntpCtx.pWdd = &s2wappMainTaskCtxt->if0.wddCtx;
   \                     ??AppS2wCmd_ntpTimeSet_6:
   \   000000C4   0xF247 0x624C      MOVW     R2,#+30284
   \   000000C8   0x6829             LDR      R1,[R5, #+0]
   7499                  	ret = GsnSntp_TimeSync(&s2wappMainTaskCtxt->sntpCtx, s2wappMainTaskCtxt->sntpSrvIp,
   7500                                                              s2wappMainTaskCtxt->sntpSrvTimeout ,
   7501                                                              S2wApp_TimeSyncDoneCb, &s2wappMainTaskCtxt->sntpCtx);
   \   000000CA   0x.... 0x....      ADR.W    R3,S2wApp_TimeSyncDoneCb
   \   000000CE   0xF601 0x60E0      ADDW     R0,R1,#+3808
   \   000000D2   0x5050             STR      R0,[R2, R1]
   \   000000D4   0xF501 0x40EC      ADD      R0,R1,#+30208
   \   000000D8   0x3008             ADDS     R0,R0,#+8
   \   000000DA   0x1851             ADDS     R1,R2,R1
   \   000000DC   0x9000             STR      R0,[SP, #+0]
   \   000000DE   0x68CA             LDR      R2,[R1, #+12]
   \   000000E0   0x6889             LDR      R1,[R1, #+8]
   \   000000E2   0x.... 0x....      BL       GsnSntp_TimeSync
   7502                      if (GSN_SNTP_BUSY== ret)
   \   000000E6   0x.... 0x....      LDR.W    R1,??DataTable452  ;; 0xc0000400
   \   000000EA   0x4288             CMP      R0,R1
   \   000000EC   0xD104             BNE.N    ??AppS2wCmd_ntpTimeSet_8
   7503                      {
   7504          				S2w_Printf("\r\n\r\nSNTP busy\r\n");			
   \   000000EE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n\\r\\nSNTP busy\\r\\n">`
   \   000000F2   0x.... 0x....      BL       S2w_Printf
   \   000000F6   0xE003             B.N      ??AppS2wCmd_ntpTimeSet_7
   7505                          return S2W_FAILURE;
   7506                      }
   7507          			else if(GSN_OPERATION_IN_PROGRESS != ret)
   \                     ??AppS2wCmd_ntpTimeSet_8:
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable453  ;; 0x80000001
   \   000000FC   0x4288             CMP      R0,R1
   \   000000FE   0xD001             BEQ.N    ??AppS2wCmd_ntpTimeSet_9
   7508                          return S2W_FAILURE;
   \                     ??AppS2wCmd_ntpTimeSet_7:
   \   00000100   0x2001             MOVS     R0,#+1
   \   00000102   0xE01F             B.N      ??AppS2wCmd_ntpTimeSet_4
   7509          
   7510                  if(1 == periodic)
   \                     ??AppS2wCmd_ntpTimeSet_9:
   \   00000104   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000108   0x2801             CMP      R0,#+1
   \   0000010A   0xD11A             BNE.N    ??AppS2wCmd_ntpTimeSet_10
   7511          		{
   7512                      GsnSoftTmr_Start (&s2wappMainTaskCtxt->appSntpTimer, GSN_SOFT_TMR_PERIODIC,
   7513                                                0,((TIMER_INTERRUPT_1_S * s2wappMainTaskCtxt->sntpTimerPeriod)),
   7514                                                ( GSN_SOFT_TMR_CBR_T )AppS2w_sntpTimerCb,
   7515                                            NULL );
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x9003             STR      R0,[SP, #+12]
   \   00000110   0x2200             MOVS     R2,#+0
   \   00000112   0x682D             LDR      R5,[R5, #+0]
   \   00000114   0x.... 0x....      ADR.W    R0,AppS2w_sntpTimerCb
   \   00000118   0x9002             STR      R0,[SP, #+8]
   \   0000011A   0x2300             MOVS     R3,#+0
   \   0000011C   0x5970             LDR      R0,[R6, R5]
   \   0000011E   0x0C41             LSRS     R1,R0,#+17
   \   00000120   0x03C0             LSLS     R0,R0,#+15
   \   00000122   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000126   0x2101             MOVS     R1,#+1
   \   00000128   0x1960             ADDS     R0,R4,R5
   \   0000012A   0x.... 0x....      BL       GsnSoftTmr_Start
   \   0000012E   0xE008             B.N      ??AppS2wCmd_ntpTimeSet_10
   7516          		}
   7517              }
   7518              else // disable
   7519              {
   7520                  if(*ptr)
   \                     ??AppS2wCmd_ntpTimeSet_2:
   \   00000130   0x9806             LDR      R0,[SP, #+24]
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0xB108             CBZ.N    R0,??AppS2wCmd_ntpTimeSet_11
   7521                  {
   7522                      return S2W_EINVAL;
   \                     ??AppS2wCmd_ntpTimeSet_1:
   \   00000136   0x2002             MOVS     R0,#+2
   \   00000138   0xE004             B.N      ??AppS2wCmd_ntpTimeSet_4
   7523                  }
   7524                  GsnSoftTmr_Stop (&s2wappMainTaskCtxt->appSntpTimer);
   \                     ??AppS2wCmd_ntpTimeSet_11:
   \   0000013A   0x6828             LDR      R0,[R5, #+0]
   \   0000013C   0x1820             ADDS     R0,R4,R0
   \   0000013E   0x.... 0x....      BL       GsnSoftTmr_Stop
   7525              }
   7526              return S2W_SUCCESS;
   \                     ??AppS2wCmd_ntpTimeSet_10:
   \   00000142   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_ntpTimeSet_4:
   \   00000144   0xB007             ADD      SP,SP,#+28
   \   00000146   0xBDF0             POP      {R4-R7,PC}       ;; return
   7527          
   7528          }
   7529          

   \                                 In section .text, align 4, keep-with-next
   7530          PRIVATE VOID
   7531          S2wApp_TimeSyncDoneCb(INT32 status, VOID* context)
   7532          {
   7533          	GSN_SNTP_CTX_T *pSntpCtx = (GSN_SNTP_CTX_T *)context;
   7534          	if(status == GSN_SUCCESS)
   \                     S2wApp_TimeSyncDoneCb:
   \   00000000   0xB928             CBNZ.N   R0,??S2wApp_TimeSyncDoneCb_0
   7535          	{
   7536          		GsnTod_AdjustOffset(pSntpCtx->diffNegative, pSntpCtx->timeDiff);
   \   00000002   0xE9D1 0x230E      LDRD     R2,R3,[R1, #+56]
   \   00000006   0xF891 0x0040      LDRB     R0,[R1, #+64]
   \   0000000A   0x.... 0x....      B.W      GsnTod_AdjustOffset
   7537          	}
   7538          }
   \                     ??S2wApp_TimeSyncDoneCb_0:
   \   0000000E   0x4770             BX       LR               ;; return
   7539          
   7540          

   \                                 In section .text, align 4, keep-with-next
   7541          PRIVATE VOID
   7542          AppS2w_sntpTimerCb( VOID* context,
   7543              GSN_SOFT_TMR_HANDLE_T timerHandle )
   7544          {
   7545               UINT32 message = APP_TIME_SYNC_TIMER_INDICATION;
   7546              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     AppS2w_sntpTimerCb:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable444
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable454
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x2015             MOVS     R0,#+21
   \   0000000E   0x4710             BX       R2
   7547          
   7548          }
   7549          #endif
   7550          
   7551          #ifdef S2W_DHCP_SERVER_ENABLE
   7552          

   \                                 In section .text, align 2, keep-with-next
   7553          PUBLIC UINT8
   7554          AppS2wCmd_DhcpSrvrConfig(UINT8 *ptr)
   7555          {
   \                     AppS2wCmd_DhcpSrvrConfig:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   7556              UINT8 status;
   7557              UINT8 * p;
   7558            
   7559              /* can only be set before starting DHCP server */ 
   7560              if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable453_1
   \   00000006   0x7860             LDRB     R0,[R4, #+1]
   \   00000008   0xB081             SUB      SP,SP,#+4
   \   0000000A   0x07C0             LSLS     R0,R0,#+31
   \   0000000C   0xD425             BMI.N    ??AppS2wCmd_DhcpSrvrConfig_0
   7561               {
   7562                 return S2W_EINVAL;
   7563               }
   7564              memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
   \   0000000E   0x.... 0x....      LDR.W    R5,??DataTable453_2
   \   00000012   0x2230             MOVS     R2,#+48
   \   00000014   0x2100             MOVS     R1,#+0
   \   00000016   0x4628             MOV      R0,R5
   \   00000018   0x.... 0x....      BL       memset
   7565              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001C   0x.... 0x....      BL       ?Subroutine35
   7566              if (!p)
   \                     ??CrossCallReturnLabel_168:
   \   00000020   0xB1D8             CBZ.N    R0,??AppS2wCmd_DhcpSrvrConfig_0
   7567              {
   7568                  return S2W_EINVAL;
   7569              }
   7570             status = AppS2wParse_Ip(p, (UINT8 *)&dhcpSrvrCfg.startIpAddr); 
   \   00000022   0x1D29             ADDS     R1,R5,#+4
   \   00000024   0x.... 0x....      BL       AppS2wParse_Ip
   7571             
   7572             dhcpSrvrCfg.startIpAddr = ntohl(dhcpSrvrCfg.startIpAddr);
   \   00000028   0x6869             LDR      R1,[R5, #+4]
   \   0000002A   0x0A0A             LSRS     R2,R1,#+8
   \   0000002C   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   00000030   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   00000034   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   00000038   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   0000003C   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   00000040   0x6069             STR      R1,[R5, #+4]
   7573              
   7574              if (status != S2W_SUCCESS)
   \   00000042   0xBB08             CBNZ.N   R0,??AppS2wCmd_DhcpSrvrConfig_1
   7575              {
   7576                  return status;
   7577              }
   7578              
   7579              p = AppS2wParse_NextParamGet(&ptr);
   \   00000044   0x.... 0x....      BL       ?Subroutine35
   7580              if (!p)
   \                     ??CrossCallReturnLabel_167:
   \   00000048   0xB138             CBZ.N    R0,??AppS2wCmd_DhcpSrvrConfig_0
   7581              {
   7582                  return S2W_EINVAL;
   7583              }
   7584              status = AppS2wParse_Int(p,&dhcpSrvrCfg.numOfClients);
   \   0000004A   0xF105 0x0120      ADD      R1,R5,#+32
   \   0000004E   0x.... 0x....      BL       AppS2wParse_Int
   7585              if (status != S2W_SUCCESS)
   \   00000052   0xB9C8             CBNZ.N   R0,??AppS2wCmd_DhcpSrvrConfig_1
   7586              {
   7587                  return status;
   7588              }
   7589              
   7590              if(dhcpSrvrCfg.numOfClients > S2W_DHCP_SRVR_MAX_CLIENTS)
   \   00000054   0x6A28             LDR      R0,[R5, #+32]
   \   00000056   0x2841             CMP      R0,#+65
   \   00000058   0xD301             BCC.N    ??AppS2wCmd_DhcpSrvrConfig_2
   7591              {
   7592                 return S2W_EINVAL;
   \                     ??AppS2wCmd_DhcpSrvrConfig_0:
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0xBD76             POP      {R1,R2,R4-R6,PC}
   7593              }
   7594              
   7595              memcpy(&dhcpSrvrCfg.subnetMask, s2wCurrent.netConf.netMask, 4);
   \                     ??AppS2wCmd_DhcpSrvrConfig_2:
   \   0000005E   0x.... 0x....      LDR.W    R6,??DataTable455
   \   00000062   0x2204             MOVS     R2,#+4
   \   00000064   0xF506 0x71C8      ADD      R1,R6,#+400
   \   00000068   0xF105 0x0008      ADD      R0,R5,#+8
   \   0000006C   0x.... 0x....      BL       memcpy
   7596              memcpy(&dhcpSrvrCfg.gateway, s2wCurrent.netConf.gateway, 4);
   \   00000070   0x2204             MOVS     R2,#+4
   \   00000072   0xF506 0x71CA      ADD      R1,R6,#+404
   \   00000076   0xF105 0x000C      ADD      R0,R5,#+12
   \   0000007A   0x.... 0x....      BL       memcpy
   7597              dhcpServerFlags |= S2W_DHCP_SRVR_CFG_DONE;
   \   0000007E   0x7860             LDRB     R0,[R4, #+1]
   \   00000080   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000084   0x7060             STRB     R0,[R4, #+1]
   7598              
   7599               return S2W_SUCCESS;
   \   00000086   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_DhcpSrvrConfig_1:
   \   00000088   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
   7600          }
   7601          

   \                                 In section .text, align 2, keep-with-next
   7602          PUBLIC UINT8
   7603          AppS2wCmd_DhcpSrvr(UINT8 *ptr)
   7604          {
   \                     AppS2wCmd_DhcpSrvr:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB0A9             SUB      SP,SP,#+164
   7605              UINT8 status;
   7606              UINT32 mode;
   7607              UINT8 dns=0,gateway=0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   7608              INT32 retVal, ipAddr;
   7609              UINT8 * p;
   7610              GSN_NWIF_IP_CONFIG_T  ipconfig;
   7611          
   7612              /* check the validity of parameter passed */
   7613              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0xA829             ADD      R0,SP,#+164
   \   0000000E   0x.... 0x....      BL       AppS2wParse_NextParamGet
   7614              if (!p)
   \   00000012   0xB908             CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_0
   7615              {
   7616                  return S2W_EINVAL;
   \   00000014   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_DhcpSrvr_1:
   \   00000016   0xE095             B.N      ??AppS2wCmd_DhcpSrvr_2
   7617              }
   7618              status = AppS2wParse_Int(p, &mode);
   \                     ??AppS2wCmd_DhcpSrvr_0:
   \   00000018   0x.... 0x....      BL       ?Subroutine52
   7619              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_325:
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD1FA             BNE.N    ??AppS2wCmd_DhcpSrvr_1
   7620              {
   7621                  return status;
   7622              }
   7623              if(mode != 0)
   \   00000020   0x9801             LDR      R0,[SP, #+4]
   \   00000022   0x.... 0x....      LDR.W    R4,??DataTable453_2
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable453_1
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD079             BEQ.N    ??AppS2wCmd_DhcpSrvr_3
   7624              {
   7625          		if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
   \   0000002E   0x7868             LDRB     R0,[R5, #+1]
   \   00000030   0x07C1             LSLS     R1,R0,#+31
   \   00000032   0xD47C             BMI.N    ??AppS2wCmd_DhcpSrvr_4
   7626          		return S2W_FAILURE;
   7627                 if(!(dhcpServerFlags & S2W_DHCP_SRVR_CFG_DONE))
   \   00000034   0x.... 0x....      LDR.W    R6,??DataTable455
   \   00000038   0x0780             LSLS     R0,R0,#+30
   \   0000003A   0xD407             BMI.N    ??AppS2wCmd_DhcpSrvr_5
   7628                 {
   7629                  memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
   \   0000003C   0x2230             MOVS     R2,#+48
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0x.... 0x....      BL       memset
   7630                  dhcpSrvrCfg.numOfClients = s2wCurrent.lmtdApConf.dhcpNumAddresses;
   \   00000046   0xF896 0x0299      LDRB     R0,[R6, #+665]
   \   0000004A   0x6220             STR      R0,[R4, #+32]
   7631                 }
   7632                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_DhcpSrvr_5:
   \   0000004C   0xA829             ADD      R0,SP,#+164
   \   0000004E   0x.... 0x....      BL       AppS2wParse_NextParamGet
   7633                  if ((p) && (*p != '\0'))
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xBF1C             ITT      NE 
   \   00000056   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000058   0x2900             CMPNE    R1,#+0
   \   0000005A   0xD003             BEQ.N    ??AppS2wCmd_DhcpSrvr_6
   7634                  {
   7635                      status = AppS2wParse_Boolean(p, &dns);
   \   0000005C   0x.... 0x....      BL       ?Subroutine59
   7636          		    if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_368:
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD16F             BNE.N    ??AppS2wCmd_DhcpSrvr_2
   7637          		    {
   7638          		        return status;
   7639          		    }
   7640                  }
   7641                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_DhcpSrvr_6:
   \   00000064   0xA829             ADD      R0,SP,#+164
   \   00000066   0x.... 0x....      BL       AppS2wParse_NextParamGet
   7642                  if ((p) && (*p != '\0'))
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xBF1C             ITT      NE 
   \   0000006E   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000070   0x2900             CMPNE    R1,#+0
   \   00000072   0xD003             BEQ.N    ??AppS2wCmd_DhcpSrvr_7
   7643                  {
   7644                      status = AppS2wParse_Boolean(p, &gateway);
   \   00000074   0x.... 0x....      BL       ?Subroutine60
   7645                      if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_376:
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD163             BNE.N    ??AppS2wCmd_DhcpSrvr_2
   7646                      {
   7647                          return status;
   7648                      }
   7649                  }
   7650          
   7651                  
   7652                  GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&ipconfig);
   \                     ??AppS2wCmd_DhcpSrvr_7:
   \   0000007C   0xF241 0x4850      MOVW     R8,#+5200
   \   00000080   0x.... 0x....      LDR.W    R7,??DataTable444
   \   00000084   0x6838             LDR      R0,[R7, #+0]
   \   00000086   0xA902             ADD      R1,SP,#+8
   \   00000088   0x4440             ADD      R0,R8,R0
   \   0000008A   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   7653                  memcpy(&ipAddr,&ipconfig.ipv4.ipAddr, 4);
   \   0000008E   0x9805             LDR      R0,[SP, #+20]
   7654                  dhcpSrvrCfg.serverIpAddr = ipAddr;
   7655                  if(!dns)
   \   00000090   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000094   0x6020             STR      R0,[R4, #+0]
   \   00000096   0xB931             CBNZ.N   R1,??AppS2wCmd_DhcpSrvr_8
   7656                  {
   7657                    dhcpSrvrCfg.dns1 = ipAddr;
   \   00000098   0x6120             STR      R0,[R4, #+16]
   7658                    if(S2W_DNS_CLIENT_FALGS & S2W_DNSv4_SERVER_SET)
   \   0000009A   0x7829             LDRB     R1,[R5, #+0]
   \   0000009C   0x0749             LSLS     R1,R1,#+29
   \   0000009E   0xD505             BPL.N    ??AppS2wCmd_DhcpSrvr_9
   7659                    {
   7660                      dhcpSrvrCfg.dns1 = *(ULONG*)s2wCurrent.dns1;
   \   000000A0   0xF8D6 0x11A8      LDR      R1,[R6, #+424]
   \   000000A4   0xE000             B.N      ??AppS2wCmd_DhcpSrvr_10
   7661                      dhcpSrvrCfg.dns2 = *(ULONG*)s2wCurrent.dns1;
   7662                    }
   7663                  }
   7664                  else
   7665                  {
   7666                      dhcpSrvrCfg.dns1 = 0;
   \                     ??AppS2wCmd_DhcpSrvr_8:
   \   000000A6   0x2100             MOVS     R1,#+0
   \                     ??AppS2wCmd_DhcpSrvr_10:
   \   000000A8   0x6121             STR      R1,[R4, #+16]
   7667                      dhcpSrvrCfg.dns2 = 0;
   \   000000AA   0x6161             STR      R1,[R4, #+20]
   7668                  }
   7669                  
   7670                  if(!(dhcpServerFlags & S2W_DHCP_SRVR_CFG_DONE))
   \                     ??AppS2wCmd_DhcpSrvr_9:
   \   000000AC   0x7869             LDRB     R1,[R5, #+1]
   \   000000AE   0x0789             LSLS     R1,R1,#+30
   \   000000B0   0xD408             BMI.N    ??AppS2wCmd_DhcpSrvr_11
   7671                  {
   7672                 
   7673                  dhcpSrvrCfg.startIpAddr = ipAddr + 1;
   \   000000B2   0x1C40             ADDS     R0,R0,#+1
   \   000000B4   0x6060             STR      R0,[R4, #+4]
   7674                  
   7675                  memcpy(&dhcpSrvrCfg.subnetMask, s2wCurrent.netConf.netMask, 4);
   \   000000B6   0x2204             MOVS     R2,#+4
   \   000000B8   0xF506 0x71C8      ADD      R1,R6,#+400
   \   000000BC   0xF104 0x0008      ADD      R0,R4,#+8
   \   000000C0   0x.... 0x....      BL       memcpy
   7676                  }
   7677                  
   7678                  dhcpSrvrCfg.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
   \                     ??AppS2wCmd_DhcpSrvr_11:
   \   000000C4   0x6838             LDR      R0,[R7, #+0]
   \   000000C6   0xEB08 0x0100      ADD      R1,R8,R0
   7679                  dhcpSrvrCfg.pWdd = &s2wappMainTaskCtxt->if0.wddCtx;
   \   000000CA   0xF600 0x60E0      ADDW     R0,R0,#+3808
   \   000000CE   0x61E0             STR      R0,[R4, #+28]
   \   000000D0   0x61A1             STR      R1,[R4, #+24]
   7680                  if(!gateway)
   \   000000D2   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000000D6   0xB988             CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_12
   \   000000D8   0x7930             LDRB     R0,[R6, #+4]
   \   000000DA   0x2806             CMP      R0,#+6
   \   000000DC   0xBF08             IT       EQ 
   \   000000DE   0x.... 0x....      LDREQ.W  R0,??DataTable455_1  ;; 0xc0a8f001
   7681                  {
   7682                   	/* Bug Fix 5676 - LimitedAP is offering Default gateway even when it is 
   7683                   	          configured to different gateway with NCM */
   7684                  	if(S2W_WLANDATA_MODE_PROV_AP == s2wCurrent.mode )
   7685                  	{
   7686          				dhcpSrvrCfg.gateway = S2W_DEFAULT_GRP_PROV_GATE_ADDRESS;
   \   000000E2   0xD00C             BEQ.N    ??AppS2wCmd_DhcpSrvr_13
   7687                  	}
   7688          			else if(S2W_WLANDATA_MODE_AP == s2wCurrent.mode )
   \   000000E4   0x2802             CMP      R0,#+2
   \   000000E6   0xBF18             IT       NE 
   \   000000E8   0x2801             CMPNE    R0,#+1
   7689          			{			
   7690          	            memcpy(&dhcpSrvrCfg.gateway, &s2wCurrent.netConf.gateway, 4);
   7691          			}
   7692          			else if(S2W_WLANDATA_MODE_INFRA == s2wCurrent.mode )
   \   000000EA   0xD109             BNE.N    ??AppS2wCmd_DhcpSrvr_14
   7693          			{
   7694          				 memcpy(&dhcpSrvrCfg.gateway, &s2wCurrent.netConf.gateway, 4);
   \   000000EC   0x2204             MOVS     R2,#+4
   \   000000EE   0xF506 0x71CA      ADD      R1,R6,#+404
   \   000000F2   0xF104 0x000C      ADD      R0,R4,#+12
   \   000000F6   0x.... 0x....      BL       memcpy
   \   000000FA   0xE001             B.N      ??AppS2wCmd_DhcpSrvr_14
   7695          			}
   7696          			
   7697                  }
   7698                  else
   7699                  {
   7700                      dhcpSrvrCfg.gateway = 0;
   \                     ??AppS2wCmd_DhcpSrvr_12:
   \   000000FC   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_DhcpSrvr_13:
   \   000000FE   0x60E0             STR      R0,[R4, #+12]
   7701                  }
   7702          		dhcpSrvrCfg.leaseTime	 = s2wCurrent.lmtdApConf.dhcpLeaseTime;
   \                     ??AppS2wCmd_DhcpSrvr_14:
   \   00000100   0xF8D6 0x02E4      LDR      R0,[R6, #+740]
   7703          		if(0 == dhcpSrvrCfg.leaseTime)
   \   00000104   0xB908             CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_15
   7704          		{
   7705                                  dhcpSrvrCfg.leaseTime = htonl((UINT32)(S2W_DFLT_AP_DHCPSRVR_LEASE_TIME));
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable455_2  ;; 0x80510100
   \                     ??AppS2wCmd_DhcpSrvr_15:
   \   0000010A   0x6260             STR      R0,[R4, #+36]
   7706                                
   7707          		}
   7708                   
   7709                  /* Client connect/Disconnect notification callbacks */        
   7710                  GsnDhcpSrvr_ClientConnectNotify(&dhcpSrvrCfg,NULL);
   7711                  GsnDhcpSrvr_ClientDisconnectNotify(&dhcpSrvrCfg,NULL);   
   7712                  
   7713                  retVal = GsnDhcpSrvr_Start(&dhcpSrvr, &dhcpSrvrCfg);
   7714              }
   7715              else
   7716              {
   7717                  retVal = GsnDhcpSrvr_Stop(&dhcpSrvr);
   7718                  if(retVal < 0)
   7719                  {
   7720                    return S2W_FAILURE;
   7721                  }
   7722                  else
   7723                  {
   7724                   dhcpServerFlags &= 0xfe;
   7725                   return S2W_SUCCESS;
   7726                  }
   7727              }
   7728          
   7729              if(retVal < 0)
   \   0000010C   0x4621             MOV      R1,R4
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x62A0             STR      R0,[R4, #+40]
   \   00000112   0x62E0             STR      R0,[R4, #+44]
   \   00000114   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000118   0x.... 0x....      BL       GsnDhcpSrvr_Start
   \   0000011C   0x2800             CMP      R0,#+0
   \   0000011E   0xD50C             BPL.N    ??AppS2wCmd_DhcpSrvr_16
   7730              {
   7731                  return S2W_FAILURE;
   \   00000120   0xE005             B.N      ??AppS2wCmd_DhcpSrvr_4
   7732              }
   \                     ??AppS2wCmd_DhcpSrvr_3:
   \   00000122   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000126   0x.... 0x....      BL       GsnDhcpSrvr_Stop
   \   0000012A   0x2800             CMP      R0,#+0
   \   0000012C   0xD501             BPL.N    ??AppS2wCmd_DhcpSrvr_17
   \                     ??AppS2wCmd_DhcpSrvr_4:
   \   0000012E   0x2001             MOVS     R0,#+1
   \   00000130   0xE008             B.N      ??AppS2wCmd_DhcpSrvr_2
   \                     ??AppS2wCmd_DhcpSrvr_17:
   \   00000132   0x7868             LDRB     R0,[R5, #+1]
   \   00000134   0xF000 0x00FE      AND      R0,R0,#0xFE
   \   00000138   0xE002             B.N      ??AppS2wCmd_DhcpSrvr_18
   7733              else
   7734              {
   7735                  dhcpServerFlags |= S2W_DHCP_SRVR_ENABLED;
   \                     ??AppS2wCmd_DhcpSrvr_16:
   \   0000013A   0x7868             LDRB     R0,[R5, #+1]
   \   0000013C   0xF040 0x0001      ORR      R0,R0,#0x1
   \                     ??AppS2wCmd_DhcpSrvr_18:
   \   00000140   0x7068             STRB     R0,[R5, #+1]
   7736                  return S2W_SUCCESS;
   \   00000142   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_DhcpSrvr_2:
   \   00000144   0xB02A             ADD      SP,SP,#+168
   \   00000146   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   7737              }
   7738          }
   7739          
   7740          #endif //S2W_DHCP_SERVER_ENABLE
   7741          
   7742          #ifdef S2W_DNS_SERVER_ENABLE
   7743          

   \                                 In section .text, align 2, keep-with-next
   7744          VOID S2wDnsConfigGet(GSN_DNS_INIT_PARAM_T *gsnDnsInitParams)
   7745          {
   \                     S2wDnsConfigGet:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB0A8             SUB      SP,SP,#+160
   \   00000004   0x4604             MOV      R4,R0
   7746              INT32 ip;
   7747              GSN_NWIF_IP_CONFIG_T  ipconfig;
   7748              memcpy(&ip, s2wCurrent.netConf.ipAddr, sizeof(S2W_IPADDR_T));
   \   00000006   0x2204             MOVS     R2,#+4
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable455_3
   \   0000000C   0x.... 0x....      BL       ?Subroutine27
   7749            
   7750              gsnDnsInitParams->flags = IP_VERSION_V4
   7751              #ifdef S2W_IPv6_SUPPORT
   7752                //| IP_VERSION_V6
   7753              #endif
   7754                  ;
   \                     ??CrossCallReturnLabel_73:
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x8020             STRH     R0,[R4, #+0]
   7755               memset(&ipconfig,0,sizeof(GSN_NWIF_IP_CONFIG_T));
   \   00000014   0x2298             MOVS     R2,#+152
   \   00000016   0x.... 0x....      BL       ?Subroutine16
   7756          
   7757              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&ipconfig);
   \                     ??CrossCallReturnLabel_29:
   \   0000001A   0x4601             MOV      R1,R0
   \   0000001C   0x.... 0x....      BL       ?Subroutine75
   \                     ??CrossCallReturnLabel_442:
   \   00000020   0x3050             ADDS     R0,R0,#+80
   \   00000022   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   7758              if(ipconfig.ipv4.ipAddr)
   \   00000026   0x9805             LDR      R0,[SP, #+20]
   \   00000028   0xB100             CBZ.N    R0,??S2wDnsConfigGet_0
   7759              memcpy(&ip, &ipconfig.ipv4.ipAddr, sizeof(S2W_IPADDR_T)); 
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   7760          #ifdef S2W_IPv6_SUPPORT    
   7761              if(ipconfig.ipv6.globalAddr)
   7762              memcpy(gsnDnsInitParams->serverIpv6Addr,ipconfig.ipv6.globalAddr,16);
   7763              else
   7764              memcpy(gsnDnsInitParams->serverIpv6Addr,ipconfig.ipv6.linkLocalAddr,16);
   7765          #endif    
   7766              
   7767              gsnDnsInitParams->serverIpAddr = ip;
   \                     ??S2wDnsConfigGet_0:
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0x6060             STR      R0,[R4, #+4]
   7768          }
   \   00000030   0xB028             ADD      SP,SP,#+160
   \   00000032   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0xA800             ADD      R0,SP,#+0
   \   00000002   0x.... 0x....      B.W      memcpy
   7769          
   7770          

   \                                 In section .text, align 2, keep-with-next
   7771          PUBLIC UINT8
   7772          AppS2wCmd_Dns(UINT8 *ptr)
   7773          {
   \                     AppS2wCmd_Dns:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   7774              UINT8 status;
   7775              UINT8 mode, *p;
   7776              INT32 retVal;
   7777          
   7778              GSN_DNS_INIT_PARAM_T gsnDnsInitParams;
   7779          
   7780              /* check the validity of parameter passed */
   7781              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_186:
   \   00000008   0x0004             MOVS     R4,R0
   7782              if (!p)
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x2002             MOVEQ    R0,#+2
   7783              {
   7784                  return S2W_EINVAL;
   \   0000000E   0xD026             BEQ.N    ??AppS2wCmd_Dns_0
   7785              }
   7786              status = AppS2wParse_Boolean(p, &mode);
   \   00000010   0x.... 0x....      BL       ?Subroutine60
   7787              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_375:
   \   00000014   0xBB18             CBNZ.N   R0,??AppS2wCmd_Dns_0
   7788              {
   7789                  return status;
   7790              }
   7791           // dnsServer.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
   7792             memset(&gsnDnsInitParams,0,sizeof(GSN_DNS_INIT_PARAM_T));
   \   00000016   0x2218             MOVS     R2,#+24
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       memset
   7793             S2wDnsConfigGet(&gsnDnsInitParams);
   \   00000020   0x.... 0x....      BL       S2wDnsConfigGet
   7794          
   7795               if(mode)
   \   00000024   0x.... 0x....      LDR.W    R5,??DataTable455
   \   00000028   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000002C   0xF205 0x26A1      ADDW     R6,R5,#+673
   \   00000030   0xF205 0x4724      ADDW     R7,R5,#+1060
   \   00000034   0xB1A8             CBZ.N    R0,??AppS2wCmd_Dns_1
   7796              {
   7797                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000036   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_185:
   \   0000003A   0x4604             MOV      R4,R0
   7798                  /*if (!p)
   7799                  	{
   7800                     		 return S2W_EINVAL;
   7801                 		 }*/
   7802                  retVal = GsnDnsSrvr_Start(&dnsServer, p,&gsnDnsInitParams);
   \   0000003C   0xAA01             ADD      R2,SP,#+4
   \   0000003E   0x4621             MOV      R1,R4
   \   00000040   0x4638             MOV      R0,R7
   \   00000042   0x.... 0x....      BL       GsnDnsSrvr_Start
   7803          		if(retVal == GSN_SUCCESS)
   \   00000046   0xB998             CBNZ.N   R0,??AppS2wCmd_Dns_2
   7804          		{
   7805          			s2wCurrent.lmtdApConf.dnsServerEnable=1;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       ?Subroutine19
   7806          			memset(s2wCurrent.lmtdApConf.dnsDomainName,0,MAX_DNS_DOMAIN_LEN);
   7807          			if(p != NULL)
   \                     ??CrossCallReturnLabel_43:
   \   0000004E   0xB12C             CBZ.N    R4,??CrossCallReturnLabel_501
   7808          				memcpy(s2wCurrent.lmtdApConf.dnsDomainName,p,strlen((const char *)p));
   \   00000050   0x.... 0x....      BL       ?Subroutine70
   7809              	}
   7810              }
   \                     ??CrossCallReturnLabel_425:
   \   00000054   0x4602             MOV      R2,R0
   \   00000056   0x4621             MOV      R1,R4
   \   00000058   0x.... 0x....      BL       ?Subroutine95
   7811              else
   7812              {
   7813                  retVal = GsnDnsSrvr_Stop(&dnsServer);
   7814          		if(retVal == GSN_SUCCESS)
   7815          		{
   7816          			s2wCurrent.lmtdApConf.dnsServerEnable=0;			
   7817          			memset(s2wCurrent.lmtdApConf.dnsDomainName,0,MAX_DNS_DOMAIN_LEN);
   7818          		}
   7819              }
   7820              if(retVal < 0)
   7821                  return S2W_FAILURE;
   7822              else
   7823                  return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_501:
   \   0000005C   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Dns_0:
   \   0000005E   0xB009             ADD      SP,SP,#+36
   \   00000060   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??AppS2wCmd_Dns_1:
   \   00000062   0x4638             MOV      R0,R7
   \   00000064   0x.... 0x....      BL       GsnDnsSrvr_Stop
   \   00000068   0xB910             CBNZ.N   R0,??AppS2wCmd_Dns_2
   \   0000006A   0x.... 0x....      BL       ?Subroutine19
   \                     ??CrossCallReturnLabel_42:
   \   0000006E   0xE7F5             B.N      ??CrossCallReturnLabel_501
   \                     ??AppS2wCmd_Dns_2:
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD5F3             BPL.N    ??CrossCallReturnLabel_501
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE7F2             B.N      ??AppS2wCmd_Dns_0
   7824          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0xF885 0x02A0      STRB     R0,[R5, #+672]
   \   00000004   0x2240             MOVS     R2,#+64
   \                     ??Subroutine19_0:
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x4630             MOV      R0,R6
   \   0000000A   0x.... 0x....      B.W      memset
   7825          
   7826          #endif //S2W_DNS_SERVER_ENABLE
   7827          

   \                                 In section .text, align 2, keep-with-next
   7828          UINT8
   7829          AppS2wCmd_SslCertificateAdd(UINT8 *ptr)
   7830          {
   \                     AppS2wCmd_SslCertificateAdd:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   7831              UINT8 *p, *name;
   7832              INT32 len,fileLen ,i = 0;
   7833              UINT32 certStore;
   7834          	INT32 status;
   7835          	UINT8 buf[38]={0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2128             MOVS     R1,#+40
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
   7836              name = AppS2wParse_NextParamGet(&ptr);     //get cert name
   \   0000000C   0x.... 0x....      BL       ??Subroutine142_0
   \                     ??CrossCallReturnLabel_647:
   \   00000010   0x0005             MOVS     R5,R0
   7837              if (!name)
   \   00000012   0xD01B             BEQ.N    ??AppS2wCmd_SslCertificateAdd_0
   7838              {
   7839                  return S2W_EINVAL;
   7840              }
   7841              len = strlen((const char *)name);
   \   00000014   0x.... 0x....      BL       strlen
   \   00000018   0x4606             MOV      R6,R0
   7842              if( len > 32)
   \   0000001A   0x2E21             CMP      R6,#+33
   \   0000001C   0xDA16             BGE.N    ??AppS2wCmd_SslCertificateAdd_0
   7843                  return S2W_EINVAL;
   7844              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001E   0x.... 0x....      BL       ??Subroutine142_0
   7845              if (!p)
   \                     ??CrossCallReturnLabel_646:
   \   00000022   0xB198             CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
   7846              {
   7847                  return S2W_EINVAL;
   7848              }
   7849              AppS2wParse_Int(p, &certFormat);
   \   00000024   0x.... 0x....      BL       ?Subroutine136
   7850              if(certFormat > 1)
   \                     ??CrossCallReturnLabel_623:
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD20E             BCS.N    ??AppS2wCmd_SslCertificateAdd_0
   7851                  return S2W_EINVAL;
   7852              //S2w_Printf("\n\rfile format %d", certFormat);
   7853          
   7854              p = AppS2wParse_NextParamGet(&ptr);
   \   0000002E   0x.... 0x....      BL       ??Subroutine142_0
   7855              if (!p)
   \                     ??CrossCallReturnLabel_645:
   \   00000032   0xB158             CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
   7856              {
   7857                  return S2W_EINVAL;
   7858              }
   7859          
   7860              AppS2wParse_Int(p, &certFileSize);
   \   00000034   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000038   0x.... 0x....      BL       AppS2wParse_Int
   7861          
   7862              certFileSize = certFileSize >> certFormat;
   \   0000003C   0x.... 0x....      BL       ?Subroutine38
   7863              //S2w_Printf("\n\rfile size %d", certFileSize);
   7864          
   7865              p = AppS2wParse_NextParamGet(&ptr);     //get wehre to store SRAM/FLASH
   7866              if (!p)
   \                     ??CrossCallReturnLabel_649:
   \   00000040   0xB120             CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
   7867              {
   7868                  return S2W_EINVAL;
   7869              }
   7870              AppS2wParse_Int(p, &certStore);
   \   00000042   0x.... 0x....      BL       ?Subroutine51
   7871          
   7872              if(certStore > 1)
   \                     ??CrossCallReturnLabel_290:
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD301             BCC.N    ??AppS2wCmd_SslCertificateAdd_1
   7873                  return S2W_EINVAL;
   \                     ??AppS2wCmd_SslCertificateAdd_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0xE043             B.N      ??AppS2wCmd_SslCertificateAdd_2
   7874          
   7875          	if(S2wCert_findFile((char*)name) == -1)
   \                     ??AppS2wCmd_SslCertificateAdd_1:
   \   00000050   0x4628             MOV      R0,R5
   \   00000052   0x.... 0x....      BL       S2wCert_findFile
   \   00000056   0xF110 0x0F01      CMN      R0,#+1
   \   0000005A   0xD104             BNE.N    ??AppS2wCmd_SslCertificateAdd_3
   7876          	{
   7877          		S2w_Printf("\n\rFILE EXISTS\n\r");
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rFILE EXISTS\\n\\r">`
   \   00000060   0x.... 0x....      BL       S2w_Printf
   \   00000064   0xE032             B.N      ??AppS2wCmd_SslCertificateAdd_4
   7878          		return S2W_FAILURE;
   7879          	}
   7880              if(certStore)
   \                     ??AppS2wCmd_SslCertificateAdd_3:
   \   00000066   0x9800             LDR      R0,[SP, #+0]
   \   00000068   0xB1D8             CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_5
   7881              {
   7882              	i = S2wCert_MemAlloc(certFileSize);
   \   0000006A   0x68A0             LDR      R0,[R4, #+8]
   \   0000006C   0xB280             UXTH     R0,R0
   \   0000006E   0x.... 0x....      BL       S2wCert_MemAlloc
   \   00000072   0x4607             MOV      R7,R0
   7883          	    //S2w_Printf("\nmem-alloc :%d\n",i);
   7884          	    if(i == -1)
   \   00000074   0xF117 0x0F01      CMN      R7,#+1
   \   00000078   0xD028             BEQ.N    ??AppS2wCmd_SslCertificateAdd_4
   7885          	    	return S2W_FAILURE;
   7886                  p = gsn_malloc(len+1); //allocate memory for storing name
   \   0000007A   0x2200             MOVS     R2,#+0
   \   0000007C   0xF641 0x61CE      MOVW     R1,#+7886
   \   00000080   0x1C70             ADDS     R0,R6,#+1
   \   00000082   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000086   0x0006             MOVS     R6,R0
   7887                  if(p == NULL)
   \   00000088   0xD020             BEQ.N    ??AppS2wCmd_SslCertificateAdd_4
   7888                      return S2W_FAILURE;
   7889                  strcpy((INT8 *)p, (const char *)name);
   \   0000008A   0x4629             MOV      R1,R5
   \   0000008C   0x.... 0x....      BL       strcpy
   7890                  s2w_ssl_cert_table[i].name = p; //copy pointer to SRAM entry
   \   00000090   0x200C             MOVS     R0,#+12
   \   00000092   0x.... 0x....      LDR.W    R1,??DataTable456_1
   \   00000096   0xFB00 0x1007      MLA      R0,R0,R7,R1
   7891                  s2w_ssl_cert_table[i].location = CERT_IN_RAM;
   \   0000009A   0x2101             MOVS     R1,#+1
   \   0000009C   0x6046             STR      R6,[R0, #+4]
   \   0000009E   0x7201             STRB     R1,[R0, #+8]
   7892                  certIndex = i;
   \   000000A0   0xE018             B.N      ??AppS2wCmd_SslCertificateAdd_6
   7893              }
   7894              else
   7895              {
   7896          	    status = f_mkdir("certs");
   \                     ??AppS2wCmd_SslCertificateAdd_5:
   \   000000A2   0x.... 0x....      ADR.W    R0,`?<Constant "certs">`
   \   000000A6   0x.... 0x....      BL       fsm_mkdir
   7897          		if(status != F_NO_ERROR || status != F_ERR_DUPLICATED )
   7898          		{
   7899          			fileLen= sprintf((char*)buf,"certs/");
   \   000000AA   0xA801             ADD      R0,SP,#+4
   \   000000AC   0x.... 0x....      ADR.W    R1,`?<Constant "certs/">`
   \   000000B0   0x.... 0x....      BL       sprintf
   7900          			memcpy(buf + fileLen, name, len);
   \   000000B4   0xAB01             ADD      R3,SP,#+4
   \   000000B6   0x4632             MOV      R2,R6
   \   000000B8   0x4629             MOV      R1,R5
   \   000000BA   0x18C0             ADDS     R0,R0,R3
   \   000000BC   0x.... 0x....      BL       memcpy
   7901          	        certFile = f_open((const char *)buf, "w");
   \   000000C0   0x....             ADR.N    R1,??DataTable443  ;; "w"
   \   000000C2   0xA801             ADD      R0,SP,#+4
   \   000000C4   0x.... 0x....      BL       fsm_open
   \   000000C8   0x60E0             STR      R0,[R4, #+12]
   7902                  if(certFile == NULL)
   \   000000CA   0xB908             CBNZ.N   R0,??AppS2wCmd_SslCertificateAdd_7
   7903                  	return S2W_FAILURE;
   \                     ??AppS2wCmd_SslCertificateAdd_4:
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0xE003             B.N      ??AppS2wCmd_SslCertificateAdd_2
   7904          		}
   7905                  certIndex = S2W_INVALID_CERT_INDEX;
   \                     ??AppS2wCmd_SslCertificateAdd_7:
   \   000000D0   0xF04F 0x37FF      MOV      R7,#-1
   \                     ??AppS2wCmd_SslCertificateAdd_6:
   \   000000D4   0x6027             STR      R7,[R4, #+0]
   7906              }
   7907          
   7908              /* Store the Cert Index in a global. This is used when the actual certificate
   7909                is received in the next escape sequence */
   7910          
   7911              return S2W_SUCCESS;
   \   000000D6   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_SslCertificateAdd_2:
   \   000000D8   0xB00D             ADD      SP,SP,#+52
   \   000000DA   0xBDF0             POP      {R4-R7,PC}       ;; return
   7912          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine136:
   \   00000000   0x.... 0x....      LDR.W    R4,??DataTable457
   \   00000004   0x1D21             ADDS     R1,R4,#+4
   \   00000006   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0x68A0             LDR      R0,[R4, #+8]
   \   00000002   0x6861             LDR      R1,[R4, #+4]
   \   00000004   0x40C8             LSRS     R0,R0,R1
   \   00000006   0x60A0             STR      R0,[R4, #+8]
   \   00000008                      REQUIRE ??Subroutine142_0
   \   00000008                      ;; // Fall through to label ??Subroutine142_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine142_0:
   \   00000000   0xA80C             ADD      R0,SP,#+48
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   7913          

   \                                 In section .text, align 2, keep-with-next
   7914          PUBLIC UINT32
   7915          AppS2wCertificateData(UINT8 ch1)
   7916          {
   \                     AppS2wCertificateData:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   7917              UINT8 *buf,*tempBuff;//, ch;
   7918              UINT16 i = 2, index = 0;
   7919          	UINT8 certInRam=0;
   7920          
   7921              if ( (certIndex == S2W_INVALID_CERT_INDEX) && (certFile == NULL))
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable457
   \   00000008   0x6829             LDR      R1,[R5, #+0]
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x2700             MOVS     R7,#+0
   \   0000000E   0xF111 0x0F01      CMN      R1,#+1
   \   00000012   0xBF04             ITT      EQ 
   \   00000014   0x68E8             LDREQ    R0,[R5, #+12]
   \   00000016   0x2800             CMPEQ    R0,#+0
   \   00000018   0xD01F             BEQ.N    ??AppS2wCertificateData_0
   7922                      return S2W_FAILURE;
   7923          
   7924              if( certFileSize == 0)
   \   0000001A   0x68A8             LDR      R0,[R5, #+8]
   \   0000001C   0xB1E8             CBZ.N    R0,??AppS2wCertificateData_0
   \   0000001E   0x686A             LDR      R2,[R5, #+4]
   \   00000020   0x.... 0x....      LDR.W    R8,??DataTable456_1
   \   00000024   0x4090             LSLS     R0,R0,R2
   \   00000026   0xF04F 0x0A0C      MOV      R10,#+12
   \   0000002A   0xF111 0x0F01      CMN      R1,#+1
   \   0000002E   0xD00D             BEQ.N    ??AppS2wCertificateData_1
   \   00000030   0xFB0A 0x8101      MLA      R1,R10,R1,R8
   \   00000034   0x7A09             LDRB     R1,[R1, #+8]
   \   00000036   0x2901             CMP      R1,#+1
   \   00000038   0xD108             BNE.N    ??AppS2wCertificateData_1
   7925                      return S2W_FAILURE;
   7926          
   7927          	if((certIndex != S2W_INVALID_CERT_INDEX) && (CERT_IN_RAM == s2w_ssl_cert_table[certIndex].location ) )
   7928          	{
   7929          		buf = gsn_malloc((certFileSize << certFormat) + 2 );
   \   0000003A   0x2200             MOVS     R2,#+0
   \   0000003C   0xF641 0x61F9      MOVW     R1,#+7929
   \   00000040   0x1C80             ADDS     R0,R0,#+2
   \   00000042   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000046   0x4606             MOV      R6,R0
   7930          		certInRam=1;
   \   00000048   0x2701             MOVS     R7,#+1
   \   0000004A   0xE005             B.N      ??AppS2wCertificateData_2
   7931              }
   7932          	else
   7933              buf = gsn_malloc((certFileSize << certFormat) );
   \                     ??AppS2wCertificateData_1:
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0xF641 0x61FD      MOVW     R1,#+7933
   \   00000052   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000056   0x4606             MOV      R6,R0
   7934          
   7935              if(buf == NULL)
   \                     ??AppS2wCertificateData_2:
   \   00000058   0xB90E             CBNZ.N   R6,??AppS2wCertificateData_3
   7936                  return S2W_FAILURE;
   \                     ??AppS2wCertificateData_0:
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xE04E             B.N      ??AppS2wCertificateData_4
   7937          	tempBuff = buf;
   \                     ??AppS2wCertificateData_3:
   \   0000005E   0x46B1             MOV      R9,R6
   7938          
   7939          	if(certInRam)
   \   00000060   0xB137             CBZ.N    R7,??AppS2wCertificateData_5
   7940          	{
   7941              	*buf = certFileSize & 0x00FF;
   \   00000062   0x68A8             LDR      R0,[R5, #+8]
   \   00000064   0xF806 0x0B01      STRB     R0,[R6], #+1
   7942          	    *(buf + 1) = (certFileSize & 0xFF00) >> 8;
   \   00000068   0x68A8             LDR      R0,[R5, #+8]
   \   0000006A   0x0A00             LSRS     R0,R0,#+8
   \   0000006C   0xF806 0x0B01      STRB     R0,[R6], #+1
   7943          		buf+=2;
   7944          	}
   7945              certFileSize = certFileSize << certFormat;
   \                     ??AppS2wCertificateData_5:
   \   00000070   0x68A8             LDR      R0,[R5, #+8]
   \   00000072   0x6869             LDR      R1,[R5, #+4]
   \   00000074   0xFA00 0xF101      LSL      R1,R0,R1
   \   00000078   0x60A9             STR      R1,[R5, #+8]
   7946          
   7947              /* store incoming byte in temparory bufer */
   7948              AppS2wHal_CharNGet((buf), certFileSize);
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       AppS2wHal_CharNGet
   7949          
   7950              if(certFormat)
   \   00000080   0x6868             LDR      R0,[R5, #+4]
   \   00000082   0xB1A8             CBZ.N    R0,??AppS2wCertificateData_6
   7951              {
   7952                  for(i = 0; i < certFileSize ;)
   \   00000084   0x2700             MOVS     R7,#+0
   \   00000086   0xE010             B.N      ??AppS2wCertificateData_7
   7953                  {
   7954                      buf[index] = (AppS2wParse_ToHex(buf[i]) << 4) | (AppS2wParse_ToHex(buf[i + 1]) & 0x0F);
   \                     ??AppS2wCertificateData_8:
   \   00000088   0x5DB8             LDRB     R0,[R7, R6]
   \   0000008A   0x.... 0x....      BL       AppS2wParse_ToHex
   \   0000008E   0x4683             MOV      R11,R0
   \   00000090   0x19B8             ADDS     R0,R7,R6
   \   00000092   0x7840             LDRB     R0,[R0, #+1]
   \   00000094   0x.... 0x....      BL       AppS2wParse_ToHex
   \   00000098   0xF000 0x000F      AND      R0,R0,#0xF
   \   0000009C   0xB2A4             UXTH     R4,R4
   \   0000009E   0xEA40 0x100B      ORR      R0,R0,R11, LSL #+4
   \   000000A2   0x55A0             STRB     R0,[R4, R6]
   7955                      i = i + 2;
   7956                      index++;
   \   000000A4   0x1C64             ADDS     R4,R4,#+1
   \   000000A6   0x1CB8             ADDS     R0,R7,#+2
   \   000000A8   0xB287             UXTH     R7,R0
   7957                  }
   \                     ??AppS2wCertificateData_7:
   \   000000AA   0x68A8             LDR      R0,[R5, #+8]
   \   000000AC   0x4287             CMP      R7,R0
   \   000000AE   0xD3EB             BCC.N    ??AppS2wCertificateData_8
   \                     ??AppS2wCertificateData_6:
   \   000000B0   0x68A8             LDR      R0,[R5, #+8]
   \   000000B2   0x6869             LDR      R1,[R5, #+4]
   \   000000B4   0xFA20 0xF201      LSR      R2,R0,R1
   \   000000B8   0x6828             LDR      R0,[R5, #+0]
   \   000000BA   0xF110 0x0F01      CMN      R0,#+1
   \   000000BE   0xD007             BEQ.N    ??AppS2wCertificateData_9
   7958              }
   7959          
   7960          
   7961              /* recieving file is complete. If the Cert Address is in the 0x8000000
   7962              range store it in flash else store it in SRAM (0x4000000 range) */
   7963              if ( certIndex !=  S2W_INVALID_CERT_INDEX)
   7964              {
   7965                  /* store in SRAM */
   7966                  memcpy((UINT8 *) s2w_ssl_cert_table[certIndex].certAddress, tempBuff,
   7967                      ((certFileSize >> certFormat) + 2));
   \   000000C0   0xFB0A 0x8000      MLA      R0,R10,R0,R8
   \   000000C4   0x1C92             ADDS     R2,R2,#+2
   \   000000C6   0x6800             LDR      R0,[R0, #+0]
   \   000000C8   0x4649             MOV      R1,R9
   \   000000CA   0x.... 0x....      BL       memcpy
   \   000000CE   0xE007             B.N      ??AppS2wCertificateData_10
   7968          
   7969              }
   7970              else
   7971              {
   7972                  /* store in flash */
   7973                  f_write(tempBuff, 1, (certFileSize >> certFormat) , certFile);
   \                     ??AppS2wCertificateData_9:
   \   000000D0   0x68EB             LDR      R3,[R5, #+12]
   \   000000D2   0x2101             MOVS     R1,#+1
   \   000000D4   0x4648             MOV      R0,R9
   \   000000D6   0x.... 0x....      BL       fsm_write
   7974          		f_close(certFile);
   \   000000DA   0x68E8             LDR      R0,[R5, #+12]
   \   000000DC   0x.... 0x....      BL       fsm_close
   7975              }
   7976              /* reset variables */
   7977              certIndex = S2W_INVALID_CERT_INDEX;
   \                     ??AppS2wCertificateData_10:
   \   000000E0   0xF04F 0x30FF      MOV      R0,#-1
   \   000000E4   0x6028             STR      R0,[R5, #+0]
   7978              certFileSize = 0;
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0x60A8             STR      R0,[R5, #+8]
   7979          	certFile = NULL;
   \   000000EA   0x60E8             STR      R0,[R5, #+12]
   7980              gsn_free(tempBuff);
   \   000000EC   0x4648             MOV      R0,R9
   \   000000EE   0x.... 0x....      BL       GsnDynMemMgmt_Free
   7981              S2w_Printf("\r\nOK\r\n");
   \   000000F2   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nOK\\r\\n">`
   \   000000F6   0x.... 0x....      BL       S2w_Printf
   7982              return S2W_SUCCESS;
   \   000000FA   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCertificateData_4:
   \   000000FC   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   7983          }
   7984          

   \                                 In section .text, align 2, keep-with-next
   7985          UINT8
   7986          AppS2wCmd_SslCertificateDelete(UINT8 *ptr)
   7987          {
   \                     AppS2wCmd_SslCertificateDelete:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   7988              UINT8 *p, retVal =0;;
   7989              INT32 certIndex;
   7990          
   7991              p = AppS2wParse_NextParamGet(&ptr);     //get cert name
   \   00000002   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_63:
   \   00000006   0x0004             MOVS     R4,R0
   7992              if (!p)
   \   00000008   0xD101             BNE.N    ??AppS2wCmd_SslCertificateDelete_0
   7993              {
   7994                   return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBDF2             POP      {R1,R4-R7,PC}
   7995              }
   7996              certIndex = S2wCert_SearchRamTable((char*)p);
   \                     ??AppS2wCmd_SslCertificateDelete_0:
   \   0000000E   0x.... 0x....      BL       S2wCert_SearchRamTable
   7997              if(certIndex != -1)
   \   00000012   0xF110 0x0F01      CMN      R0,#+1
   \   00000016   0xD010             BEQ.N    ??AppS2wCmd_SslCertificateDelete_1
   7998              {
   7999              	gsn_free (s2w_ssl_cert_table[certIndex].certAddress);
   \   00000018   0x210C             MOVS     R1,#+12
   \   0000001A   0xFB01 0xF500      MUL      R5,R1,R0
   \   0000001E   0x.... 0x....      LDR.W    R6,??DataTable456_1
   \   00000022   0x59A8             LDR      R0,[R5, R6]
   \   00000024   0x.... 0x....      BL       GsnDynMemMgmt_Free
   8000                  gsn_free(s2w_ssl_cert_table[certIndex].name);
   \   00000028   0x19AF             ADDS     R7,R5,R6
   \   0000002A   0x6878             LDR      R0,[R7, #+4]
   \   0000002C   0x.... 0x....      BL       GsnDynMemMgmt_Free
   8001                  s2w_ssl_cert_table[certIndex].name = NULL;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x6078             STR      R0,[R7, #+4]
   8002                  s2w_ssl_cert_table[certIndex].certAddress = NULL;
   \   00000034   0x51A8             STR      R0,[R5, R6]
   8003                  if( s2w_ssl_cert_table[certIndex].location == CERT_IN_FLASH )
   \   00000036   0x7A38             LDRB     R0,[R7, #+8]
   \   00000038   0xB918             CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_2
   8004              	{
   8005          			retVal = AppS2w_CertDelete(p);
   8006              	}
   8007              }
   8008              else
   8009              {
   8010              	retVal = AppS2w_CertDelete(p);
   8011              }
   8012          
   8013              if(retVal == S2W_SUCCESS)
   \                     ??AppS2wCmd_SslCertificateDelete_1:
   \   0000003A   0x4620             MOV      R0,R4
   \   0000003C   0x.... 0x....      BL       AppS2w_CertDelete
   \   00000040   0xB960             CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_3
   8014              {
   8015              	if(strcmp((const char*)p,S2W_CERT_NAME_CA) == 0)
   \                     ??AppS2wCmd_SslCertificateDelete_2:
   \   00000042   0x.... 0x....      LDR.W    R1,??DataTable458
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       strcmp
   \   0000004C   0xB920             CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_4
   8016              	{
   8017          			s2wCurrent.security.eap.useCaCert=0;
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable455
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0xF880 0x1140      STRB     R1,[R0, #+320]
   8018              	}
   8019                  return S2W_SUCCESS;
   \                     ??AppS2wCmd_SslCertificateDelete_4:
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xBDF2             POP      {R1,R4-R7,PC}
   8020              }
   8021              else
   8022                  return S2W_FAILURE;
   \                     ??AppS2wCmd_SslCertificateDelete_3:
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   8023          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0xA800             ADD      R0,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   8024          

   \                                 In section .text, align 2, keep-with-next
   8025          PRIVATE UINT8
   8026          AppS2wCmd_Weap(UINT8 *ptr)
   8027          {
   \                     AppS2wCmd_Weap:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
   8028              UINT8 *name, *p;
   8029              INT32 i = 0;
   8030              UINT32 certStore, certType;
   8031          	INT32 status;
   8032          	INT32 fileLen;
   8033          	UINT8 buf[38]={0};
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x2128             MOVS     R1,#+40
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
   8034          
   8035              p = AppS2wParse_NextParamGet(&ptr);
   \   0000000E   0x.... 0x....      BL       ??Subroutine142_0
   8036              if (!p)
   \                     ??CrossCallReturnLabel_644:
   \   00000012   0xB1D8             CBZ.N    R0,??AppS2wCmd_Weap_0
   8037              {
   8038                  return S2W_EINVAL;
   8039              }
   8040              AppS2wParse_Int(p, &certType);
   \   00000014   0x.... 0x....      BL       ?Subroutine51
   8041          
   8042              if(certType > 2)
   \                     ??CrossCallReturnLabel_289:
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x2803             CMP      R0,#+3
   \   0000001C   0xD216             BCS.N    ??AppS2wCmd_Weap_0
   8043                  return S2W_EINVAL;
   8044          
   8045              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001E   0x.... 0x....      BL       ??Subroutine142_0
   8046              if (!p)
   \                     ??CrossCallReturnLabel_643:
   \   00000022   0xB198             CBZ.N    R0,??AppS2wCmd_Weap_0
   8047              {
   8048                  return S2W_EINVAL;
   8049              }
   8050          
   8051              AppS2wParse_Int(p, &certFormat);
   \   00000024   0x.... 0x....      BL       ?Subroutine136
   8052          
   8053              if(certFormat > 1)
   \                     ??CrossCallReturnLabel_622:
   \   00000028   0x6860             LDR      R0,[R4, #+4]
   \   0000002A   0x2802             CMP      R0,#+2
   \   0000002C   0xD20E             BCS.N    ??AppS2wCmd_Weap_0
   8054                  return S2W_EINVAL;
   8055          
   8056              p = AppS2wParse_NextParamGet(&ptr);
   \   0000002E   0x.... 0x....      BL       ??Subroutine142_0
   8057              if (!p)
   \                     ??CrossCallReturnLabel_642:
   \   00000032   0xB158             CBZ.N    R0,??AppS2wCmd_Weap_0
   8058              {
   8059                  return S2W_EINVAL;
   8060              }
   8061              AppS2wParse_Int(p, &certFileSize);
   \   00000034   0xF104 0x0108      ADD      R1,R4,#+8
   \   00000038   0x.... 0x....      BL       AppS2wParse_Int
   8062              certFileSize = certFileSize >> certFormat;
   \   0000003C   0x.... 0x....      BL       ?Subroutine38
   8063              p = AppS2wParse_NextParamGet(&ptr);
   8064              if (!p)
   \                     ??CrossCallReturnLabel_648:
   \   00000040   0xB120             CBZ.N    R0,??AppS2wCmd_Weap_0
   8065              {
   8066                  return S2W_EINVAL;
   8067              }
   8068              AppS2wParse_Int(p, &certStore);
   \   00000042   0x.... 0x....      BL       ?Subroutine52
   8069          
   8070              if(certStore > 1)
   \                     ??CrossCallReturnLabel_324:
   \   00000046   0x9801             LDR      R0,[SP, #+4]
   \   00000048   0x2802             CMP      R0,#+2
   \   0000004A   0xD301             BCC.N    ??AppS2wCmd_Weap_1
   8071                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Weap_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0xE050             B.N      ??AppS2wCmd_Weap_2
   8072          
   8073              if(certStore)
   \                     ??AppS2wCmd_Weap_1:
   \   00000050   0x.... 0x....      LDR.W    R5,??DataTable459
   \   00000054   0x.... 0x....      LDR.W    R8,??DataTable459_1
   \   00000058   0x.... 0x....      LDR.W    R9,??DataTable458
   \   0000005C   0xB328             CBZ.N    R0,??AppS2wCmd_Weap_3
   8074              {
   8075              	i = S2wCert_MemAlloc(certFileSize);
   \   0000005E   0x68A0             LDR      R0,[R4, #+8]
   \   00000060   0xB280             UXTH     R0,R0
   \   00000062   0x.... 0x....      BL       S2wCert_MemAlloc
   \   00000066   0x4606             MOV      R6,R0
   8076          
   8077          	    if(i == -1)
   \   00000068   0xF116 0x0F01      CMN      R6,#+1
   \   0000006C   0xD03B             BEQ.N    ??AppS2wCmd_Weap_4
   8078          	        return S2W_FAILURE;
   8079          
   8080                  name = gsn_malloc(32);
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0xF641 0x7190      MOVW     R1,#+8080
   \   00000074   0x2020             MOVS     R0,#+32
   \   00000076   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000007A   0x4607             MOV      R7,R0
   8081                  if(certType == 0)
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0xB910             CBNZ.N   R0,??AppS2wCmd_Weap_5
   8082                      strcpy((INT8 *)name, S2W_CERT_NAME_CA);
   \   00000080   0x2207             MOVS     R2,#+7
   \   00000082   0x4649             MOV      R1,R9
   \   00000084   0xE005             B.N      ??AppS2wCmd_Weap_6
   8083                  else if(certType == 1)
   \                     ??AppS2wCmd_Weap_5:
   \   00000086   0x2801             CMP      R0,#+1
   \   00000088   0xBF07             ITTEE    EQ 
   \   0000008A   0x220B             MOVEQ    R2,#+11
   \   0000008C   0x4641             MOVEQ    R1,R8
   \   0000008E   0x2208             MOVNE    R2,#+8
   \   00000090   0x4629             MOVNE    R1,R5
   8084                      strcpy((INT8 *)name, S2W_CERT_NAME_CLIENT);
   8085                  else
   8086                      strcpy((INT8 *)name, S2W_CERT_NAME_KEY);
   \                     ??AppS2wCmd_Weap_6:
   \   00000092   0x4638             MOV      R0,R7
   \   00000094   0x.... 0x....      BL       __aeabi_memcpy
   8087                  s2w_ssl_cert_table[i].name = name;
   \   00000098   0x200C             MOVS     R0,#+12
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable456_1
   \   0000009E   0xFB00 0x1006      MLA      R0,R0,R6,R1
   8088                  s2w_ssl_cert_table[i].location = CERT_IN_RAM;
   \   000000A2   0x2101             MOVS     R1,#+1
   \   000000A4   0x6047             STR      R7,[R0, #+4]
   \   000000A6   0x7201             STRB     R1,[R0, #+8]
   8089          		certIndex = i;
   \   000000A8   0xE021             B.N      ??AppS2wCmd_Weap_7
   8090              }
   8091              else
   8092              {
   8093                  /* write certificate name in flash */
   8094          		status = f_mkdir("certs");
   \                     ??AppS2wCmd_Weap_3:
   \   000000AA   0x.... 0x....      ADR.W    R0,`?<Constant "certs">`
   \   000000AE   0x.... 0x....      BL       fsm_mkdir
   8095          		if(status != F_NO_ERROR || status != F_ERR_DUPLICATED )
   8096          		{
   8097          			fileLen= sprintf((char*)buf,"certs/");
   \   000000B2   0xA802             ADD      R0,SP,#+8
   \   000000B4   0x.... 0x....      ADR.W    R1,`?<Constant "certs/">`
   \   000000B8   0x.... 0x....      BL       sprintf
   8098                  if(certType == 0)
   \   000000BC   0xA902             ADD      R1,SP,#+8
   \   000000BE   0x1840             ADDS     R0,R0,R1
   \   000000C0   0x9900             LDR      R1,[SP, #+0]
   \   000000C2   0xB911             CBNZ.N   R1,??AppS2wCmd_Weap_8
   8099          				memcpy(buf + fileLen, S2W_CERT_NAME_CA, strlen(S2W_CERT_NAME_CA));	           
   \   000000C4   0x2206             MOVS     R2,#+6
   \   000000C6   0x4649             MOV      R1,R9
   \   000000C8   0xE005             B.N      ??AppS2wCmd_Weap_9
   8100                  else if(certType == 1)
   \                     ??AppS2wCmd_Weap_8:
   \   000000CA   0x2901             CMP      R1,#+1
   \   000000CC   0xBF07             ITTEE    EQ 
   \   000000CE   0x220A             MOVEQ    R2,#+10
   \   000000D0   0x4641             MOVEQ    R1,R8
   \   000000D2   0x2207             MOVNE    R2,#+7
   \   000000D4   0x4629             MOVNE    R1,R5
   8101          				memcpy(buf + fileLen, S2W_CERT_NAME_CLIENT, strlen(S2W_CERT_NAME_CLIENT));
   8102                  else
   8103          				memcpy(buf + fileLen, S2W_CERT_NAME_KEY, strlen(S2W_CERT_NAME_KEY));
   \                     ??AppS2wCmd_Weap_9:
   \   000000D6   0x.... 0x....      BL       memcpy
   8104          			certFile = f_open((const char *)buf, "w");
   \   000000DA   0x....             ADR.N    R1,??DataTable443  ;; "w"
   \   000000DC   0xA802             ADD      R0,SP,#+8
   \   000000DE   0x.... 0x....      BL       fsm_open
   \   000000E2   0x60E0             STR      R0,[R4, #+12]
   8105          
   8106                  if(certFile == NULL)
   \   000000E4   0xB908             CBNZ.N   R0,??AppS2wCmd_Weap_10
   8107                  	return S2W_FAILURE;
   \                     ??AppS2wCmd_Weap_4:
   \   000000E6   0x2001             MOVS     R0,#+1
   \   000000E8   0xE003             B.N      ??AppS2wCmd_Weap_2
   8108                  certIndex = S2W_INVALID_CERT_INDEX;
   \                     ??AppS2wCmd_Weap_10:
   \   000000EA   0xF04F 0x36FF      MOV      R6,#-1
   \                     ??AppS2wCmd_Weap_7:
   \   000000EE   0x6026             STR      R6,[R4, #+0]
   8109              	}
   8110              }
   8111              /* Store the Cert Index in a global. This is used when the actual certificate
   8112                is received in the next escape sequence */
   8113              return S2W_SUCCESS;
   \   000000F0   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Weap_2:
   \   000000F2   0xB00D             ADD      SP,SP,#+52
   \   000000F4   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
   8114          }
   8115          
   8116          #endif /* IOT_APP_ENABLE */
   8117          

   \                                 In section .text, align 2, keep-with-next
   8118          UINT8 AppS2wCmd_BeaconMissThresholdSet(UINT8 *ptr)
   8119          {
   \                     AppS2wCmd_BeaconMissThresholdSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   8120            UINT8 status;
   8121            UINT32 beaconMissThresholdTime=0;
   \   00000004   0x.... 0x....      BL       ?Subroutine7
   8122            UINT32 beaconMissThresholdNo=0;
   8123            UINT8 *p;
   8124          
   8125            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??CrossCallReturnLabel_9:
   \   00000008   0xB110             CBZ.N    R0,??AppS2wCmd_BeaconMissThresholdSet_0
   8126            {
   8127              status = AppS2wParse_Int(p, &beaconMissThresholdTime);
   \   0000000A   0x.... 0x....      BL       ?Subroutine52
   8128                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_323:
   \   0000000E   0xB970             CBNZ.N   R0,??AppS2wCmd_BeaconMissThresholdSet_1
   8129                {
   8130                    return status;
   8131                }
   8132             }
   8133          
   8134            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_BeaconMissThresholdSet_0:
   \   00000010   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_151:
   \   00000014   0xB110             CBZ.N    R0,??AppS2wCmd_BeaconMissThresholdSet_2
   8135            {
   8136              status = AppS2wParse_Int(p, &beaconMissThresholdNo);
   \   00000016   0x.... 0x....      BL       ?Subroutine51
   8137                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_288:
   \   0000001A   0xB940             CBNZ.N   R0,??AppS2wCmd_BeaconMissThresholdSet_1
   8138                {
   8139                    return status;
   8140                }
   8141             }
   8142          
   8143            status = GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,beaconMissThresholdTime,beaconMissThresholdNo);
   8144          
   8145               return status;
   \                     ??AppS2wCmd_BeaconMissThresholdSet_2:
   \   0000001C   0x....             LDR.N    R0,??DataTable448
   \   0000001E   0x9A00             LDR      R2,[SP, #+0]
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x9901             LDR      R1,[SP, #+4]
   \   00000024   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000028   0x.... 0x....      BL       GsnWdd_BeaconMissThresholdSet
   \   0000002C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_BeaconMissThresholdSet_1:
   \   0000002E   0xBD0E             POP      {R1-R3,PC}       ;; return
   8146          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x9001             STR      R0,[SP, #+4]
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0xA802             ADD      R0,SP,#+8
   \   00000008   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   8147          
   8148          
   8149          

   \                                 In section .text, align 2, keep-with-next
   8150          UINT8 AppS2wCmd_TkipContrMsrStart(UINT8 *ptr)
   8151          {
   \                     AppS2wCmd_TkipContrMsrStart:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   8152            UINT8 status = S2W_FAILURE, enable = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000000A   0x2401             MOVS     R4,#+1
   8153            UINT8 *p;
   8154          
   8155            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000000C   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_166:
   \   00000010   0xB118             CBZ.N    R0,??AppS2wCmd_TkipContrMsrStart_0
   8156            {
   8157              status = AppS2wParse_Boolean(p, &enable);
   \   00000012   0x.... 0x....      BL       ?Subroutine60
   \                     ??CrossCallReturnLabel_374:
   \   00000016   0x0004             MOVS     R4,R0
   8158                if (status != S2W_SUCCESS)
   \   00000018   0xD107             BNE.N    ??AppS2wCmd_TkipContrMsrStart_1
   8159                {
   8160                    return status;
   8161                }
   8162             }
   8163          
   8164            if(enable)
   \                     ??AppS2wCmd_TkipContrMsrStart_0:
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xB120             CBZ.N    R0,??AppS2wCmd_TkipContrMsrStart_1
   8165            status =  GsnWdd_TkipContrMsrStart(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000020   0x.... 0x....      BL       ?Subroutine74
   \                     ??CrossCallReturnLabel_437:
   \   00000024   0x.... 0x....      BL       GsnWdd_TkipContrMsrStart
   \   00000028   0x4604             MOV      R4,R0
   8166          
   8167            return status;
   \                     ??AppS2wCmd_TkipContrMsrStart_1:
   \   0000002A   0xB2E0             UXTB     R0,R4
   \   0000002C   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   8168          
   8169          }
   8170          
   8171          

   \                                 In section .text, align 2, keep-with-next
   8172          UINT8 AppS2wCmd_TkipSeqNumGet(UINT8 *ptr)
   8173          {
   \                     AppS2wCmd_TkipSeqNumGet:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   8174            UINT8 status = S2W_FAILURE,enable = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000000A   0x2401             MOVS     R4,#+1
   8175            UINT8 *p;
   8176            GSN_WIF_WLAN_TKIP_COUNTER_GET_RSP_T Resp;
   8177          
   8178            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000000C   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_212:
   \   00000010   0xB118             CBZ.N    R0,??AppS2wCmd_TkipSeqNumGet_0
   8179            {
   8180              status = AppS2wParse_Boolean(p, &enable);
   \   00000012   0x.... 0x....      BL       ?Subroutine60
   \                     ??CrossCallReturnLabel_373:
   \   00000016   0x0004             MOVS     R4,R0
   8181                if (status != S2W_SUCCESS)
   \   00000018   0xD112             BNE.N    ??AppS2wCmd_TkipSeqNumGet_1
   8182                {
   8183                    return status;
   8184                }
   8185             }
   8186          
   8187            if(enable)
   \                     ??AppS2wCmd_TkipSeqNumGet_0:
   \   0000001A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000001E   0xB138             CBZ.N    R0,??AppS2wCmd_TkipSeqNumGet_2
   8188              status =  GsnWdd_TkipSeqNumGet(&s2wappMainTaskCtxt->if0.wddCtx,&Resp);
   \   00000020   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_453:
   \   00000024   0xA901             ADD      R1,SP,#+4
   \   00000026   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000002A   0x.... 0x....      BL       GsnWdd_TkipSeqNumGet
   \   0000002E   0x4604             MOV      R4,R0
   8189          
   8190            if(status == S2W_SUCCESS)
   \                     ??AppS2wCmd_TkipSeqNumGet_2:
   \   00000030   0xB2E4             UXTB     R4,R4
   \   00000032   0xB92C             CBNZ.N   R4,??AppS2wCmd_TkipSeqNumGet_1
   8191              S2w_Printf("\r\nTKIP Sequence Number:%x %x\r\n",&Resp.msb,&Resp.lsb);
   \   00000034   0xAA02             ADD      R2,SP,#+8
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nTKIP Sequence Numbe...">`
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   8192          
   8193            return status;
   \                     ??AppS2wCmd_TkipSeqNumGet_1:
   \   00000040   0x4620             MOV      R0,R4
   \   00000042   0xB004             ADD      SP,SP,#+16
   \   00000044   0xBD10             POP      {R4,PC}          ;; return
   8194          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0xA803             ADD      R0,SP,#+12
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   8195          
   8196          
   8197          

   \                                 In section .text, align 2, keep-with-next
   8198          UINT8 AppS2wCmd_WlanRecvFiltrSet(UINT8 *ptr)
   8199          {
   \                     AppS2wCmd_WlanRecvFiltrSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   8200            UINT8 status;
   8201            UINT8 *p;
   8202            GSN_WDD_WLAN_RECV_FILTR_SET_PARAM_T RecvFiltrParams;
   8203          
   8204             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_150:
   \   00000008   0xB110             CBZ.N    R0,??AppS2wCmd_WlanRecvFiltrSet_0
   8205            {
   8206              status = AppS2wParse_Int(p,&RecvFiltrParams.filter);
   \   0000000A   0x.... 0x....      BL       ?Subroutine51
   8207                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_287:
   \   0000000E   0xB920             CBNZ.N   R0,??AppS2wCmd_WlanRecvFiltrSet_1
   8208                {
   8209                    return status;
   8210                }
   8211             }
   8212          
   8213            status = GsnWdd_WlanRecvFiltrSet(&s2wappMainTaskCtxt->if0.wddCtx,&RecvFiltrParams);
   8214          
   8215            return status;
   \                     ??AppS2wCmd_WlanRecvFiltrSet_0:
   \   00000010   0x.... 0x....      BL       ?Subroutine78
   \                     ??CrossCallReturnLabel_449:
   \   00000014   0x.... 0x....      BL       GsnWdd_WlanRecvFiltrSet
   \   00000018   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_WlanRecvFiltrSet_1:
   \   0000001A   0xBD0E             POP      {R1-R3,PC}       ;; return
   8216          
   8217          }
   8218          
   8219          

   \                                 In section .text, align 2, keep-with-next
   8220          UINT8 AppS2wCmd_RtsEnable(UINT8 *ptr)
   8221          {
   \                     AppS2wCmd_RtsEnable:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   8222            UINT8 status;
   8223            UINT32 temp;
   8224            UINT8 *p;
   8225            GSN_WDD_RTS_ENBL_PARAM_T RstParams;
   8226          
   8227             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_149:
   \   00000008   0xB128             CBZ.N    R0,??AppS2wCmd_RtsEnable_0
   8228            {
   8229              status = AppS2wParse_Int(p,&temp);
   \   0000000A   0x.... 0x....      BL       ?Subroutine52
   8230                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_322:
   \   0000000E   0xB968             CBNZ.N   R0,??AppS2wCmd_RtsEnable_1
   8231                {
   8232                    return status;
   8233                }
   8234          
   8235                RstParams.threshold = temp;
   \   00000010   0x9801             LDR      R0,[SP, #+4]
   \   00000012   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   8236             }
   8237          
   8238             if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_RtsEnable_0:
   \   00000016   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_148:
   \   0000001A   0xB110             CBZ.N    R0,??AppS2wCmd_RtsEnable_2
   8239            {
   8240              status = AppS2wParse_Boolean(p,&RstParams.txOpEnable);
   \   0000001C   0x.... 0x....      BL       ?Subroutine60
   8241                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_372:
   \   00000020   0xB920             CBNZ.N   R0,??AppS2wCmd_RtsEnable_1
   8242                {
   8243                    return status;
   8244                }
   8245             }
   8246          
   8247             status = GsnWdd_RtsEnable(&s2wappMainTaskCtxt->if0.wddCtx,&RstParams);
   8248          
   8249            return status;
   \                     ??AppS2wCmd_RtsEnable_2:
   \   00000022   0x.... 0x....      BL       ?Subroutine65
   \                     ??CrossCallReturnLabel_401:
   \   00000026   0x.... 0x....      BL       GsnWdd_RtsEnable
   \   0000002A   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_RtsEnable_1:
   \   0000002C   0xBD0E             POP      {R1-R3,PC}       ;; return
   8250          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine65:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x....             LDR.N    R0,??DataTable448
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x4770             BX       LR
   8251          

   \                                 In section .text, align 2, keep-with-next
   8252          UINT8 AppS2wCmd_BlockAckReq(UINT8 *ptr)
   8253          {
   \                     AppS2wCmd_BlockAckReq:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   8254            UINT8 status,action;
   8255            UINT8 *p;
   8256            UINT32 temp;
   8257            GSN_WDD_BLOCKACK_REQ_T BlockAckReq;
   8258          
   8259            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_92:
   \   00000008   0xB118             CBZ.N    R0,??AppS2wCmd_BlockAckReq_0
   8260            {
   8261                status = AppS2wParse_Mac(p, BlockAckReq.ra);
   \   0000000A   0xA902             ADD      R1,SP,#+8
   \   0000000C   0x.... 0x....      BL       AppS2wParse_Mac
   8262                if (status != S2W_SUCCESS)
   \   00000010   0xB9A8             CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
   8263          	{
   8264                    return status;
   8265          	}
   8266            }
   8267          
   8268            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_BlockAckReq_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_91:
   \   00000016   0xB128             CBZ.N    R0,??AppS2wCmd_BlockAckReq_2
   8269            {
   8270                status = AppS2wParse_Int(p, &temp);
   \   00000018   0x.... 0x....      BL       ?Subroutine51
   8271                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_286:
   \   0000001C   0xB978             CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
   8272          	{
   8273                    return status;
   8274          	}
   8275                BlockAckReq.tid = temp;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0xF88D 0x000E      STRB     R0,[SP, #+14]
   8276            }
   8277          
   8278          
   8279            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_BlockAckReq_2:
   \   00000024   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_90:
   \   00000028   0xB120             CBZ.N    R0,??CrossCallReturnLabel_627
   8280            {
   8281               status = AppS2wParse_Boolean(p, &action);
   \   0000002A   0x.... 0x....      BL       ?Subroutine62
   8282                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_392:
   \   0000002E   0xB930             CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
   8283                {
   8284                    return status;
   8285                }
   8286          
   8287                BlockAckReq.action = action;
   \   00000030   0x.... 0x....      BL       ?Subroutine138
   8288             }
   8289          
   8290          
   8291            status = GsnWdd_BlockAckReq(&s2wappMainTaskCtxt->if0.wddCtx,&BlockAckReq);
   8292          
   8293            return status;
   \                     ??CrossCallReturnLabel_627:
   \   00000034   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_253:
   \   00000038   0x.... 0x....      BL       GsnWdd_BlockAckReq
   \   0000003C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_BlockAckReq_1:
   \   0000003E   0xB005             ADD      SP,SP,#+20
   \   00000040   0xBD00             POP      {PC}             ;; return
   8294          
   8295          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine138:
   \   00000000   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000004   0xF88D 0x000F      STRB     R0,[SP, #+15]
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \   00000002   0x....             LDR.N    R0,??DataTable448
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x4770             BX       LR
   8296          

   \                                 In section .text, align 2, keep-with-next
   8297          UINT8 AppS2wCmd_AmsduReqt(UINT8 *ptr)
   8298          {
   \                     AppS2wCmd_AmsduReqt:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   8299            UINT8 status,action;
   8300            UINT8 *p;
   8301            UINT32 temp;
   8302            GSN_WDD_AMSDU_REQ_T AmsduReq;
   8303          
   8304            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_89:
   \   00000008   0xB118             CBZ.N    R0,??AppS2wCmd_AmsduReqt_0
   8305            {
   8306                status = AppS2wParse_Mac(p, AmsduReq.ra);
   \   0000000A   0xA902             ADD      R1,SP,#+8
   \   0000000C   0x.... 0x....      BL       AppS2wParse_Mac
   8307                if (status != S2W_SUCCESS)
   \   00000010   0xB9A8             CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
   8308          	{
   8309                    return status;
   8310          	}
   8311            }
   8312          
   8313            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_AmsduReqt_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_88:
   \   00000016   0xB128             CBZ.N    R0,??AppS2wCmd_AmsduReqt_2
   8314            {
   8315                status = AppS2wParse_Int(p, &temp);
   \   00000018   0x.... 0x....      BL       ?Subroutine51
   8316                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_285:
   \   0000001C   0xB978             CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
   8317          	{
   8318                    return status;
   8319          	}
   8320                AmsduReq.tid = temp;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0xF88D 0x000E      STRB     R0,[SP, #+14]
   8321            }
   8322          
   8323          
   8324            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_AmsduReqt_2:
   \   00000024   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_87:
   \   00000028   0xB120             CBZ.N    R0,??CrossCallReturnLabel_628
   8325            {
   8326               status = AppS2wParse_Boolean(p, &action);
   \   0000002A   0x.... 0x....      BL       ?Subroutine62
   8327                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_391:
   \   0000002E   0xB930             CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
   8328                {
   8329                    return status;
   8330                }
   8331          
   8332                AmsduReq.action = action;
   \   00000030   0x.... 0x....      BL       ?Subroutine138
   8333             }
   8334          
   8335            status =GsnWdd_AmsduReq(&s2wappMainTaskCtxt->if0.wddCtx,&AmsduReq);
   8336          
   8337            return status;
   \                     ??CrossCallReturnLabel_628:
   \   00000034   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_254:
   \   00000038   0x.... 0x....      BL       GsnWdd_AmsduReq
   \   0000003C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_AmsduReqt_1:
   \   0000003E   0xB005             ADD      SP,SP,#+20
   \   00000040   0xBD00             POP      {PC}             ;; return
   8338          }
   8339          
   8340          

   \                                 In section .text, align 2, keep-with-next
   8341          UINT8 AppS2wCmd_AmpduReq(UINT8 *ptr)
   8342          {
   \                     AppS2wCmd_AmpduReq:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   8343            UINT8 status,action;
   8344            UINT8 *p;
   8345            UINT32 temp;
   8346            GSN_WDD_AMSDU_REQ_T AmpduReq;
   8347          
   8348            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_86:
   \   00000008   0xB118             CBZ.N    R0,??AppS2wCmd_AmpduReq_0
   8349            {
   8350                status = AppS2wParse_Mac(p, AmpduReq.ra);
   \   0000000A   0xA902             ADD      R1,SP,#+8
   \   0000000C   0x.... 0x....      BL       AppS2wParse_Mac
   8351                if (status != S2W_SUCCESS)
   \   00000010   0xB9A8             CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
   8352          	{
   8353                    return status;
   8354          	}
   8355            }
   8356          
   8357            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_AmpduReq_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_85:
   \   00000016   0xB128             CBZ.N    R0,??AppS2wCmd_AmpduReq_2
   8358            {
   8359                status = AppS2wParse_Int(p, &temp);
   \   00000018   0x.... 0x....      BL       ?Subroutine51
   8360                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_284:
   \   0000001C   0xB978             CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
   8361          	{
   8362                    return status;
   8363          	}
   8364                AmpduReq.tid = temp;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0xF88D 0x000E      STRB     R0,[SP, #+14]
   8365            }
   8366          
   8367          
   8368            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_AmpduReq_2:
   \   00000024   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_84:
   \   00000028   0xB120             CBZ.N    R0,??CrossCallReturnLabel_629
   8369            {
   8370               status = AppS2wParse_Boolean(p, &action);
   \   0000002A   0x.... 0x....      BL       ?Subroutine62
   8371                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_390:
   \   0000002E   0xB930             CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
   8372                {
   8373                    return status;
   8374                }
   8375          
   8376                AmpduReq.action = action;
   \   00000030   0x.... 0x....      BL       ?Subroutine138
   8377             }
   8378          
   8379            status =GsnWdd_AmpduReq(&s2wappMainTaskCtxt->if0.wddCtx,(GSN_WDD_AMPDU_REQ_T *)&AmpduReq);
   8380          
   8381            return status;
   \                     ??CrossCallReturnLabel_629:
   \   00000034   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_255:
   \   00000038   0x.... 0x....      BL       GsnWdd_AmpduReq
   \   0000003C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_AmpduReq_1:
   \   0000003E   0xB005             ADD      SP,SP,#+20
   \   00000040   0xBD00             POP      {PC}             ;; return
   8382          
   8383          }
   8384          
   8385          
   8386          

   \                                 In section .text, align 2, keep-with-next
   8387          UINT8 AppS2wCmd_FrameTxFailCntLmitSet(UINT8 *ptr)
   8388          {
   \                     AppS2wCmd_FrameTxFailCntLmitSet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   8389            UINT8 status;
   8390            UINT8 *p;
   8391            UINT32 temp;
   8392            GSN_WDD_FRAME_TX_FAIL_CNT_LIMIT_SET_T TxFailLmt;
   8393          
   8394            if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_147:
   \   00000008   0xB128             CBZ.N    R0,??AppS2wCmd_FrameTxFailCntLmitSet_0
   8395            {
   8396                status = AppS2wParse_Int(p, &temp);
   \   0000000A   0x.... 0x....      BL       ?Subroutine52
   8397                if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_321:
   \   0000000E   0xB938             CBNZ.N   R0,??AppS2wCmd_FrameTxFailCntLmitSet_1
   8398          	{
   8399                    return status;
   8400          	}
   8401                TxFailLmt.frameTxFailCountThreshold = temp;
   \   00000010   0x9801             LDR      R0,[SP, #+4]
   \   00000012   0xF88D 0x0000      STRB     R0,[SP, #+0]
   8402            }
   8403          
   8404            status = GsnWdd_FrameTxFailCntLmitSet(&s2wappMainTaskCtxt->if0.wddCtx,&TxFailLmt);
   8405          
   8406            return status;
   \                     ??AppS2wCmd_FrameTxFailCntLmitSet_0:
   \   00000016   0x.... 0x....      BL       ?Subroutine65
   \                     ??CrossCallReturnLabel_402:
   \   0000001A   0x.... 0x....      BL       GsnWdd_FrameTxFailCntLmitSet
   \   0000001E   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_FrameTxFailCntLmitSet_1:
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
   8407          
   8408          }
   8409          
   8410          /**
   8411           ******************************************************************
   8412           * @ingroup S2w-Application
   8413           * @brief Process the AT+WSEC command. This function set the strict
   8414           * security feature.
   8415           * @param ptr Pointer to the user input string.
   8416           * @return S2W_SUCCESS - operation successful.
   8417           * @retval S2W_EINVAL  - operation failure-invalid command.
   8418           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8419          UINT8
   8420          AppS2wCmd_SecuritySet(UINT8 *ptr)
   8421          {
   \                     AppS2wCmd_SecuritySet:
   \   00000000   0xB580             PUSH     {R7,LR}
   8422              UINT8 status;
   8423              UINT32 SecMode;
   8424          
   8425              /* check the validity of parameter passed
   8426               */
   8427              status = AppS2wParse_Int(ptr, &SecMode);
   8428              if (status != S2W_SUCCESS)
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_283:
   \   00000006   0xB980             CBNZ.N   R0,??AppS2wCmd_SecuritySet_0
   8429              {
   8430                  return S2W_EINVAL;
   8431              }
   8432              /*  allowed values are upto 32(0x40) and or'd values also other than 0
   8433              0-->auto
   8434              1-->none
   8435              2-->wep
   8436              4-->wpapsk
   8437              8-->wpa2psk
   8438              16-->wpaE
   8439              32-->wpa2E
   8440              */
   8441              if(!((SecMode == SECTYPE_AUTO) || (SecMode == SECTYPE_NONE) ||(SecMode == SECTYPE_WEP)
   8442                   ||(SecMode == SECTYPE_WPAPSK)||(SecMode == SECTYPE_WPA2PSK)||(SecMode == SECTYPE_WPA)
   8443                   ||(SecMode == SECTYPE_WPA2)||(SecMode == SECTYPE_WPA2PSK_TKIP)))
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xBF18             IT       NE 
   \   0000000E   0x2801             CMPNE    R0,#+1
   \   00000010   0xD00D             BEQ.N    ??AppS2wCmd_SecuritySet_1
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x2804             CMPNE    R0,#+4
   \   00000018   0xD009             BEQ.N    ??AppS2wCmd_SecuritySet_1
   \   0000001A   0x2808             CMP      R0,#+8
   \   0000001C   0xBF18             IT       NE 
   \   0000001E   0x2810             CMPNE    R0,#+16
   \   00000020   0xD005             BEQ.N    ??AppS2wCmd_SecuritySet_1
   \   00000022   0x2820             CMP      R0,#+32
   \   00000024   0xBF18             IT       NE 
   \   00000026   0x2840             CMPNE    R0,#+64
   \   00000028   0xD001             BEQ.N    ??AppS2wCmd_SecuritySet_1
   8444              {
   8445                  return S2W_EINVAL;
   \                     ??AppS2wCmd_SecuritySet_0:
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0xBD02             POP      {R1,PC}
   8446              }
   8447          
   8448              /* update the active profile parameter
   8449               */
   8450              if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
   \                     ??AppS2wCmd_SecuritySet_1:
   \   0000002E   0x....             LDR.N    R1,??DataTable448
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable455
   \   00000034   0x6809             LDR      R1,[R1, #+0]
   \   00000036   0xF501 0x41ED      ADD      R1,R1,#+30336
   \   0000003A   0x7809             LDRB     R1,[R1, #+0]
   \   0000003C   0x2900             CMP      R1,#+0
   \   0000003E   0x9900             LDR      R1,[SP, #+0]
   \   00000040   0xBF14             ITE      NE 
   \   00000042   0xF880 0x1254      STRBNE   R1,[R0, #+596]
   \   00000046   0xF880 0x11D5      STRBEQ   R1,[R0, #+469]
   8451              {
   8452                  s2wCurrent.lmtdApConf.securityType = SecMode;
   8453              }
   8454              else
   8455              {
   8456                  s2wCurrent.securityType = SecMode;
   8457              }
   8458          
   8459              return S2W_SUCCESS;
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0xBD02             POP      {R1,PC}          ;; return
   8460          }
   8461          
   8462          /**
   8463           ******************************************************************
   8464           * @ingroup S2w-Application
   8465           * @brief Process the AT+WAUTH command
   8466           *   This function check the validity of the parameters passed and
   8467           *   update the active profile authentication with the same.
   8468           * @param ptr Pointer to the user input string.
   8469           *
   8470           * @return S2W_SUCCESS - operation successful.
   8471           * @retval S2W_EINVAL  - operation failure-invalid command.
   8472           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8473          UINT8
   8474          AppS2wCmd_Wauth(UINT8 *ptr)
   8475          {
   \                     AppS2wCmd_Wauth:
   \   00000000   0xB580             PUSH     {R7,LR}
   8476              UINT8 status;
   8477              UINT32 mode;
   8478          
   8479              /* check the validity of parameter passed
   8480               */
   8481              status = AppS2wParse_Int(ptr, &mode);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   8482              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_282:
   \   00000006   0xB9D8             CBNZ.N   R0,??AppS2wCmd_Wauth_0
   8483              {
   8484                  return status;
   8485              }
   8486          
   8487              if(mode > S2W_AUTH_MODE_SHARED)
   \   00000008   0x9900             LDR      R1,[SP, #+0]
   \   0000000A   0x2903             CMP      R1,#+3
   \   0000000C   0xD301             BCC.N    ??AppS2wCmd_Wauth_1
   8488              {
   8489                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD02             POP      {R1,PC}
   8490              }
   8491              /* update the active profile parameter   */
   8492              if(s2wappMainTaskCtxt->apConf)
   \                     ??AppS2wCmd_Wauth_1:
   \   00000012   0x....             LDR.N    R2,??DataTable448
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable455
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0xF502 0x42ED      ADD      R2,R2,#+30336
   \   0000001E   0x7812             LDRB     R2,[R2, #+0]
   \   00000020   0x2A00             CMP      R2,#+0
   \   00000022   0x9A00             LDR      R2,[SP, #+0]
   \   00000024   0xD00A             BEQ.N    ??AppS2wCmd_Wauth_2
   8493              {
   8494          		if((mode == S2W_AUTH_MODE_SHARED) ||
   8495          		   (mode == S2W_AUTH_MODE_OPEN))
   \   00000026   0x2A02             CMP      R2,#+2
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0x2A01             CMPNE    R2,#+1
   \   0000002C   0xD108             BNE.N    ??AppS2wCmd_Wauth_0
   8496          		{
   8497          		    s2wCurrent.lmtdApConf.securityType = SECTYPE_WEP;
   \   0000002E   0x2202             MOVS     R2,#+2
   \   00000030   0xF881 0x2254      STRB     R2,[R1, #+596]
   8498          			s2wCurrent.lmtdApConf.wepKeyConfig.authType= (GSN_WDD_WEP_AUTH_TYPE_T)mode;
   \   00000034   0x9A00             LDR      R2,[SP, #+0]
   \   00000036   0xF881 0x2255      STRB     R2,[R1, #+597]
   \   0000003A   0xBD02             POP      {R1,PC}
   8499          		}
   8500          	}
   8501          	else
   8502          	{
   8503              	s2wCurrent.security.authMode = mode;
   \                     ??AppS2wCmd_Wauth_2:
   \   0000003C   0xF881 0x2078      STRB     R2,[R1, #+120]
   8504          	}
   8505          
   8506              return status;
   \                     ??AppS2wCmd_Wauth_0:
   \   00000040   0xBD02             POP      {R1,PC}          ;; return
   8507          }
   8508          
   8509          /**
   8510           ******************************************************************
   8511           * @ingroup S2w-Application
   8512           * @brief Process the AT+WPA command.
   8513           *   This function check the validity of the parameter passed and update
   8514           *   the active profile wpa passphrase.
   8515           * @param ptr Pointer to the user input string.
   8516          
   8517           * @return S2W_SUCCESS - operation successful.
   8518           * @retval S2W_EINVAL  - operation failure-invalid command.
   8519           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8520          UINT8
   8521          AppS2wCmd_Wwpa(UINT8 *ptr)
   8522          {
   \                     AppS2wCmd_Wwpa:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB0C3             SUB      SP,SP,#+268
   8523              S2W_SECURITY_T params;
   8524              UINT32 len;
   8525              UINT8 *p;
   8526              memcpy(&params, &s2wCurrent.security, sizeof(params));
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable455
   \   00000008   0xF44F 0x7286      MOV      R2,#+268
   \   0000000C   0xF104 0x0178      ADD      R1,R4,#+120
   \   00000010   0x.... 0x....      BL       ?Subroutine27
   8527          
   8528              /* Validate the input string.
   8529               */
   8530              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_72:
   \   00000014   0xA843             ADD      R0,SP,#+268
   \   00000016   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000001A   0x0005             MOVS     R5,R0
   8531              if (!p)
   \   0000001C   0xD006             BEQ.N    ??AppS2wCmd_Wwpa_0
   8532              {
   8533                  return S2W_EINVAL;
   8534              }
   8535          
   8536              len = strlen((char *)p);
   \   0000001E   0x.... 0x....      BL       strlen
   \   00000022   0x4606             MOV      R6,R0
   8537              if ((len > S2W_PSK_PASSPHRASE_LEN_MAX - 1) ||
   8538                  (len < S2W_PSK_PASSPHRASE_LEN_MIN))
   \   00000024   0xF1A6 0x0008      SUB      R0,R6,#+8
   \   00000028   0x2838             CMP      R0,#+56
   \   0000002A   0xD301             BCC.N    ??AppS2wCmd_Wwpa_1
   8539              {
   8540                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Wwpa_0:
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xE02C             B.N      ??AppS2wCmd_Wwpa_2
   8541              }
   8542          
   8543              memset(params.wpa.wpaPassPhrase, 0, S2W_PSK_PASSPHRASE_LEN_MAX);
   \                     ??AppS2wCmd_Wwpa_1:
   \   00000030   0x2240             MOVS     R2,#+64
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xF10D 0x003B      ADD      R0,SP,#+59
   \   00000038   0x.... 0x....      BL       memset
   8544              memcpy(params.wpa.wpaPassPhrase, p, len);
   \   0000003C   0x4632             MOV      R2,R6
   \   0000003E   0x4629             MOV      R1,R5
   \   00000040   0xF10D 0x003B      ADD      R0,SP,#+59
   \   00000044   0x.... 0x....      BL       memcpy
   8545              params.wpa.passPhraseLen = len;
   8546              params.validKeys |= S2W_SECURITY_VALID_WPA;
   \   00000048   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000004C   0xF88D 0x607B      STRB     R6,[SP, #+123]
   \   00000050   0xF040 0x0002      ORR      R0,R0,#0x2
   \   00000054   0x.... 0x....      BL       ?Subroutine79
   8547          
   8548              /* update the active profile parameter */
   8549              if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
   \                     ??CrossCallReturnLabel_450:
   \   00000058   0xB160             CBZ.N    R0,??AppS2wCmd_Wwpa_3
   8550              {
   8551                  s2wCurrent.lmtdApConf.passphrase.Len = params.wpa.passPhraseLen;
   \   0000005A   0xF89D 0x007B      LDRB     R0,[SP, #+123]
   8552                  memcpy(s2wCurrent.lmtdApConf.passphrase.Passphrase, params.wpa.wpaPassPhrase,
   8553                         params.wpa.passPhraseLen);
   \   0000005E   0xF89D 0x207B      LDRB     R2,[SP, #+123]
   \   00000062   0xF884 0x0213      STRB     R0,[R4, #+531]
   \   00000066   0xF10D 0x013B      ADD      R1,SP,#+59
   \   0000006A   0xF504 0x7005      ADD      R0,R4,#+532
   \   0000006E   0x.... 0x....      BL       memcpy
   \   00000072   0xE009             B.N      ??AppS2wCmd_Wwpa_4
   8554              }
   8555              else
   8556              {
   8557                  memcpy(&s2wCurrent.security, &params, sizeof(s2wCurrent.security));
   \                     ??AppS2wCmd_Wwpa_3:
   \   00000074   0xF44F 0x7286      MOV      R2,#+268
   \   00000078   0xA900             ADD      R1,SP,#+0
   \   0000007A   0xF104 0x0078      ADD      R0,R4,#+120
   \   0000007E   0x.... 0x....      BL       memcpy
   8558                  s2wCurrent.security.wpa.pskValid =0;
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF884 0x00F4      STRB     R0,[R4, #+244]
   8559              }
   8560                  return S2W_SUCCESS;
   \                     ??AppS2wCmd_Wwpa_4:
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wwpa_2:
   \   0000008A   0xB044             ADD      SP,SP,#+272
   \   0000008C   0xBD70             POP      {R4-R6,PC}       ;; return
   8561          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine79:
   \   00000000   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable464_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF500 0x40ED      ADD      R0,R0,#+30336
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x4770             BX       LR
   8562          
   8563          
   8564          /**
   8565           ******************************************************************
   8566           * @ingroup S2w-Application
   8567           * @brief Process the AT+WPAPSK command.
   8568           *   This function validate the parameters passed and call the hal
   8569           *   function to calculate the psk key.
   8570           * @param ptr Pointer to the user input string.
   8571           *
   8572           * @return S2W_SUCCESS - operation successful.
   8573           * @retval S2W_EINVAL  - operation failure-invalid command.
   8574           * @retval S2W_FAILURE - operation failure- psk key calculation failed.
   8575           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8576          UINT8
   8577          AppS2wCmd_WpaPsk(UINT8 *ptr)
   8578          {
   \                     AppS2wCmd_WpaPsk:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB0A2             SUB      SP,SP,#+136
   8579              UINT8 status;
   8580              UINT8 *p;
   8581              S2W_WPAPSK_T wpaPsk;
   8582              UINT8 len=0;
   8583          
   8584          
   8585              
   8586              /* get the 1st parameter-ssid
   8587               */
   8588              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0xA822             ADD      R0,SP,#+136
   \   00000006   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000000A   0x0004             MOVS     R4,R0
   8589              if (!p)
   \   0000000C   0xD017             BEQ.N    ??AppS2wCmd_WpaPsk_0
   8590              {
   8591                  return S2W_EINVAL;
   8592              }
   8593              memset(&wpaPsk,0,sizeof(wpaPsk));
   \   0000000E   0x2283             MOVS     R2,#+131
   \   00000010   0x.... 0x....      BL       ?Subroutine22
   8594          
   8595              /* Validate the 1st parameter-ssid.
   8596               */
   8597              status = AppS2wParse_Ssid(p,(unsigned char*)wpaPsk.ssid,&wpaPsk.ssidLen );
   \                     ??CrossCallReturnLabel_49:
   \   00000014   0xF10D 0x0282      ADD      R2,SP,#+130
   \   00000018   0xF10D 0x0162      ADD      R1,SP,#+98
   \   0000001C   0x4620             MOV      R0,R4
   \   0000001E   0x.... 0x....      BL       AppS2wParse_Ssid
   8598              if (status != S2W_SUCCESS)
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD141             BNE.N    ??AppS2wCmd_WpaPsk_1
   8599              {
   8600                  return status;
   8601              }
   8602          
   8603              /* get the 2nd parameter-passphrase
   8604               */
   8605              p = AppS2wParse_NextParamGet(&ptr);
   \   00000026   0xA822             ADD      R0,SP,#+136
   \   00000028   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000002C   0x0004             MOVS     R4,R0
   8606              if (!p)
   \   0000002E   0xD006             BEQ.N    ??AppS2wCmd_WpaPsk_0
   8607              {
   8608                  return S2W_EINVAL;
   8609              }
   8610          
   8611              len = strlen((char *)p);
   \   00000030   0x.... 0x....      BL       strlen
   \   00000034   0xB2C5             UXTB     R5,R0
   8612              if ((len > S2W_PSK_PASSPHRASE_LEN_MAX - 1) ||(len < S2W_PSK_PASSPHRASE_LEN_MIN))
   \   00000036   0xF1A5 0x0008      SUB      R0,R5,#+8
   \   0000003A   0x2838             CMP      R0,#+56
   \   0000003C   0xD301             BCC.N    ??AppS2wCmd_WpaPsk_2
   8613              {
   8614                  return S2W_EINVAL;
   \                     ??AppS2wCmd_WpaPsk_0:
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0xE033             B.N      ??AppS2wCmd_WpaPsk_1
   8615              }
   8616          
   8617              memcpy(wpaPsk.wpaPassPhrase, p, len);
   \                     ??AppS2wCmd_WpaPsk_2:
   \   00000042   0x462A             MOV      R2,R5
   \   00000044   0x4621             MOV      R1,R4
   \   00000046   0x.... 0x....      BL       ?Subroutine27
   8618              wpaPsk.passPhraseLen = len;
   \                     ??CrossCallReturnLabel_71:
   \   0000004A   0xF88D 0x5040      STRB     R5,[SP, #+64]
   8619              S2w_Printf("\nComputing PSK from SSID and PassPhrase...\r\n");
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant "\\nComputing PSK from S...">`
   \   00000052   0x.... 0x....      BL       S2w_Printf
   8620          
   8621              /* call the hal function to calculate the psk key from
   8622                 ssid and passphrase
   8623               */
   8624              /* Init crypto engine */
   8625              GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
   \   00000056   0x.... 0x....      BL       ??Subroutine140_0
   8626              
   8627              AppS2wHal_WpaPskCompute(&wpaPsk );
   \                     ??CrossCallReturnLabel_634:
   \   0000005A   0xA800             ADD      R0,SP,#+0
   \   0000005C   0x.... 0x....      BL       AppS2wHal_WpaPskCompute
   8628              wpaPsk.pskValid =1;
   \   00000060   0x2001             MOVS     R0,#+1
   \   00000062   0xF88D 0x0041      STRB     R0,[SP, #+65]
   8629          
   8630              /*Disable crypto */
   8631              GsnHeIf_DriverSuspend();
   \   00000066   0x.... 0x....      BL       GsnHeIf_DriverSuspend
   8632          
   8633              
   8634              /* update the current active profile
   8635               */
   8636              if(s2wappMainTaskCtxt->apConf)
   \   0000006A   0x.... 0x....      BL       ?Subroutine76
   \                     ??CrossCallReturnLabel_444:
   \   0000006E   0xB1A8             CBZ.N    R0,??AppS2wCmd_WpaPsk_3
   8637              {
   8638              	s2wCurrent.lmtdApConf.lmtdApPskValid =1;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xF884 0x0265      STRB     R0,[R4, #+613]
   8639          	    memcpy(&(s2wCurrent.lmtdApConf.lmtdApPsk), &wpaPsk.psk,S2W_PSK_LEN);		
   \   00000076   0x2220             MOVS     R2,#+32
   \   00000078   0xF10D 0x0142      ADD      R1,SP,#+66
   \   0000007C   0xF204 0x2066      ADDW     R0,R4,#+614
   \   00000080   0x.... 0x....      BL       memcpy
   8640          	    memcpy(&(s2wCurrent.lmtdApConf.passphrase.Passphrase), &wpaPsk.wpaPassPhrase,wpaPsk.passPhraseLen);		
   \   00000084   0xF89D 0x2040      LDRB     R2,[SP, #+64]
   \   00000088   0xA900             ADD      R1,SP,#+0
   \   0000008A   0xF504 0x7005      ADD      R0,R4,#+532
   \   0000008E   0x.... 0x....      BL       memcpy
   8641          		s2wCurrent.lmtdApConf.passphrase.Len=wpaPsk.passPhraseLen;
   \   00000092   0xF89D 0x0040      LDRB     R0,[SP, #+64]
   \   00000096   0xF884 0x0213      STRB     R0,[R4, #+531]
   \   0000009A   0xE005             B.N      ??AppS2wCmd_WpaPsk_4
   8642          	}
   8643          	else
   8644          	{
   8645              memcpy(&(s2wCurrent.security.wpa), &wpaPsk,sizeof(wpaPsk));
   \                     ??AppS2wCmd_WpaPsk_3:
   \   0000009C   0x2283             MOVS     R2,#+131
   \   0000009E   0xA900             ADD      R1,SP,#+0
   \   000000A0   0xF104 0x00B3      ADD      R0,R4,#+179
   \   000000A4   0x.... 0x....      BL       memcpy
   8646          	}
   8647            
   8648              return S2W_SUCCESS;
   \                     ??AppS2wCmd_WpaPsk_4:
   \   000000A8   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_WpaPsk_1:
   \   000000AA   0xB023             ADD      SP,SP,#+140
   \   000000AC   0xBD30             POP      {R4,R5,PC}       ;; return
   8649          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine76:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable490
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable491
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF500 0x40ED      ADD      R0,R0,#+30336
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x4770             BX       LR
   8650          
   8651          
   8652          
   8653          /**
   8654           ******************************************************************
   8655           * @ingroup S2w-Application
   8656           * @brief Process the AT+WPSK command
   8657           * @param ptr Pointer to the user input string.
   8658           * @return status.
   8659           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8660          UINT8
   8661          AppS2wCmd_Psk(UINT8 *ptr)
   8662          {
   \                     AppS2wCmd_Psk:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   8663              UINT8 status;
   8664              UINT8 psk[32];
   8665              //GSN_WDD_WLAN_CFG_T *pWlanConfig;
   8666          
   8667              //pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   8668              
   8669              
   8670              status = AppS2wParse_Psk(ptr,psk);
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      BL       AppS2wParse_Psk
   8671              if(status != S2W_SUCCESS)
   \   0000000A   0xB958             CBNZ.N   R0,??AppS2wCmd_Psk_0
   8672              {
   8673                  return status;
   8674              }
   8675              
   8676              //pWlanConfig->securityCfg.pskConfig.pskValid = 1;
   8677              //memcpy(pWlanConfig->securityCfg.pskConfig.psk,psk,GSN_WDD_SEC_PMK_LEN);
   8678              
   8679              s2wCurrent.security.wpa.pskValid = 1;
   \   0000000C   0x....             LDR.N    R0,??DataTable455
   \   0000000E   0x2101             MOVS     R1,#+1
   \   00000010   0xF880 0x10F4      STRB     R1,[R0, #+244]
   8680              memcpy(s2wCurrent.security.wpa.psk,psk,GSN_WDD_SEC_PMK_LEN);
   \   00000014   0x2220             MOVS     R2,#+32
   \   00000016   0xA900             ADD      R1,SP,#+0
   \   00000018   0x30F5             ADDS     R0,R0,#+245
   \   0000001A   0x.... 0x....      BL       memcpy
   8681          
   8682              return AppS2wHal_PskKeyStore(psk);
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       AppS2wHal_PskKeyStore
   \                     ??AppS2wCmd_Psk_0:
   \   00000024   0xB009             ADD      SP,SP,#+36
   \   00000026   0xBD00             POP      {PC}             ;; return
   8683          }
   8684          
   8685          
   8686          /**
   8687           ******************************************************************
   8688           * @ingroup S2w-Application
   8689           * @brief Process the AT+WWEP Command.
   8690           *   This function check the validity of parameter passed and
   8691           *   update the active profile wep key.
   8692           * @param ptr Pointer to the user input string.
   8693           *
   8694           * @return S2W_SUCCESS - operation successful.
   8695           * @retval S2W_EINVAL  - operation failure-invalid command.
   8696           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8697          PRIVATE UINT8
   8698          AppS2wCmd_Wwep(UINT8 *ptr)
   8699          {
   \                     AppS2wCmd_Wwep:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0C3             SUB      SP,SP,#+268
   \   00000006   0x4606             MOV      R6,R0
   8700              S2W_SECURITY_T params;
   8701              UINT8 status;
   8702              UINT8 idx,len=0;
   8703          
   8704              memcpy(&params, &s2wCurrent.security, sizeof(params));
   \   00000008   0x.... 0x....      LDR.W    R8,??DataTable455
   \   0000000C   0xF44F 0x7286      MOV      R2,#+268
   \   00000010   0xF108 0x0178      ADD      R1,R8,#+120
   \   00000014   0x.... 0x....      BL       ?Subroutine27
   8705          
   8706              if (*ptr < '1' || *ptr > '4' || *(ptr + 1) != '=')
   \                     ??CrossCallReturnLabel_70:
   \   00000018   0x7830             LDRB     R0,[R6, #+0]
   \   0000001A   0xF1A0 0x0131      SUB      R1,R0,#+49
   \   0000001E   0x2904             CMP      R1,#+4
   \   00000020   0xD219             BCS.N    ??AppS2wCmd_Wwep_0
   \   00000022   0x7871             LDRB     R1,[R6, #+1]
   \   00000024   0x293D             CMP      R1,#+61
   \   00000026   0xD116             BNE.N    ??AppS2wCmd_Wwep_0
   8707              {
   8708                  return S2W_EINVAL;
   8709              }
   8710          
   8711              idx = *ptr - '0';
   \   00000028   0xF1A0 0x0930      SUB      R9,R0,#+48
   8712          
   8713              /* Parse and validate the wep key.
   8714               */
   8715              // if the wep key set for ascii then parse it as ascii
   8716              if(s2wWepKeyAscii)
   \   0000002C   0xFA5F 0xF489      UXTB     R4,R9
   \   00000030   0x200D             MOVS     R0,#+13
   \   00000032   0xA900             ADD      R1,SP,#+0
   \   00000034   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000038   0x1F85             SUBS     R5,R0,#+6
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x1827             ADDS     R7,R4,R0
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable464
   \   00000042   0x7800             LDRB     R0,[R0, #+0]
   \   00000044   0xB310             CBZ.N    R0,??AppS2wCmd_Wwep_1
   8717              {
   8718          		len = strlen((char *)ptr+2);
   \   00000046   0x1CB0             ADDS     R0,R6,#+2
   \   00000048   0x.... 0x....      BL       strlen
   \   0000004C   0xB2C2             UXTB     R2,R0
   8719          		if ((len != 5) && (len != 13))
   \   0000004E   0x2A05             CMP      R2,#+5
   \   00000050   0xBF18             IT       NE 
   \   00000052   0x2A0D             CMPNE    R2,#+13
   \   00000054   0xD001             BEQ.N    ??AppS2wCmd_Wwep_2
   8720          	    {
   8721          		    return S2W_EINVAL;
   \                     ??AppS2wCmd_Wwep_0:
   \   00000056   0x2002             MOVS     R0,#+2
   \   00000058   0xE029             B.N      ??AppS2wCmd_Wwep_3
   8722          		}
   8723          		params.wep.keyLen[idx-1] = len;
   \                     ??AppS2wCmd_Wwep_2:
   \   0000005A   0x70BA             STRB     R2,[R7, #+2]
   8724                  memcpy(params.wep.key[idx-1],ptr+2,len);
   \   0000005C   0x1CB1             ADDS     R1,R6,#+2
   \   0000005E   0x4628             MOV      R0,R5
   \   00000060   0x.... 0x....      BL       memcpy
   8725          	}
   8726          	else
   8727          	{
   8728                  status = AppS2wParse_WepKey(ptr + 2, &params.wep, idx);
   8729                  if (status != S2W_SUCCESS)
   8730                  {
   8731                      return status;
   8732                  }
   8733          	}
   8734          
   8735              params.wep.keyIdx = idx;
   8736              params.validKeys |= S2W_SECURITY_VALID_WEP;
   \                     ??AppS2wCmd_Wwep_4:
   \   00000064   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000068   0xF88D 0x4002      STRB     R4,[SP, #+2]
   \   0000006C   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000070   0x.... 0x....      BL       ?Subroutine79
   8737          
   8738              if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
   \                     ??CrossCallReturnLabel_451:
   \   00000074   0xB198             CBZ.N    R0,??AppS2wCmd_Wwep_5
   8739              {
   8740                  s2wCurrent.lmtdApConf.wepKeyConfig.KeyId = (params.wep.keyIdx);
   \   00000076   0xF888 0x9257      STRB     R9,[R8, #+599]
   8741                  s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen =(GSN_WDD_WEP_KEY_LEN_T) params.wep.keyLen[params.wep.keyIdx-1];
   8742                  memcpy(&s2wCurrent.lmtdApConf.wepKeyConfig.Key, params.wep.key[params.wep.keyIdx-1],
   8743                         params.wep.keyLen[params.wep.keyIdx-1]);
   \   0000007A   0x4629             MOV      R1,R5
   \   0000007C   0x78BA             LDRB     R2,[R7, #+2]
   \   0000007E   0xF888 0x2256      STRB     R2,[R8, #+598]
   \   00000082   0xF508 0x7016      ADD      R0,R8,#+600
   \   00000086   0x.... 0x....      BL       memcpy
   \   0000008A   0xE00F             B.N      ??AppS2wCmd_Wwep_6
   8744              }
   \                     ??AppS2wCmd_Wwep_1:
   \   0000008C   0x4622             MOV      R2,R4
   \   0000008E   0xF10D 0x0102      ADD      R1,SP,#+2
   \   00000092   0x1CB0             ADDS     R0,R6,#+2
   \   00000094   0x.... 0x....      BL       AppS2wParse_WepKey
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD0E3             BEQ.N    ??AppS2wCmd_Wwep_4
   \   0000009C   0xE007             B.N      ??AppS2wCmd_Wwep_3
   8745              else
   8746              {
   8747                  memcpy(&s2wCurrent.security, &params, sizeof(s2wCurrent.security));
   \                     ??AppS2wCmd_Wwep_5:
   \   0000009E   0xF44F 0x7286      MOV      R2,#+268
   \   000000A2   0xA900             ADD      R1,SP,#+0
   \   000000A4   0xF108 0x0078      ADD      R0,R8,#+120
   \   000000A8   0x.... 0x....      BL       memcpy
   8748              }
   8749              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Wwep_6:
   \   000000AC   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wwep_3:
   \   000000AE                      REQUIRE ?Subroutine1
   \   000000AE                      ;; // Fall through to label ?Subroutine1
   8750          }
   8751          

   \                                 In section .text, align 2, keep-with-next
   8752          UINT8
   8753          AppS2wCmad_WsrvrValidationEn(UINT8 *ptr)
   8754          {
   \                     AppS2wCmad_WsrvrValidationEn:
   \   00000000   0xB580             PUSH     {R7,LR}
   8755              UINT8 status;
   8756              UINT32 val;
   8757              BOOL skipValidation = 0;
   8758              /* check the validity of parameter passed
   8759               */
   8760              status = AppS2wParse_Int(ptr, &val);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   8761              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_281:
   \   00000006   0xB930             CBNZ.N   R0,??AppS2wCmad_WsrvrValidationEn_0
   8762              {
   8763                  return status;
   8764              }
   8765              skipValidation = !val;
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x1E40             SUBS     R0,R0,#+1
   \   0000000C   0x4180             SBCS     R0,R0,R0
   \   0000000E   0x0FC0             LSRS     R0,R0,#+31
   8766          
   8767              GsnWdd_SkipSuppSrvValidation(skipValidation);
   \   00000010   0x.... 0x....      BL       GsnWdd_SkipSuppSrvValidation
   8768          
   8769              return S2W_SUCCESS;
   \   00000014   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmad_WsrvrValidationEn_0:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   8770          }
   8771          
   8772              

   \                                 In section .text, align 2, keep-with-next
   8773          UINT8
   8774          AppS2wCmad_WeapTimeChk(UINT8 *ptr)
   8775          {
   \                     AppS2wCmad_WeapTimeChk:
   \   00000000   0xB580             PUSH     {R7,LR}
   8776              UINT8 status;
   8777              UINT32 val;
   8778              /* check the validity of parameter passed
   8779               */
   8780              status = AppS2wParse_Int(ptr, &val);
   \   00000002   0x.... 0x....      BL       ?Subroutine51
   8781              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_280:
   \   00000006   0xB938             CBNZ.N   R0,??AppS2wCmad_WeapTimeChk_0
   8782              {
   8783                  return status;
   8784              }
   8785          
   8786              s2wCurrent.eapCertTimeValidChkDisbl = !val;
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x....             LDR.N    R1,??DataTable455
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \   0000000E   0x4180             SBCS     R0,R0,R0
   \   00000010   0x0FC0             LSRS     R0,R0,#+31
   \   00000012   0xF881 0x03BC      STRB     R0,[R1, #+956]
   8787          
   8788              return S2W_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmad_WeapTimeChk_0:
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
   8789          }
   8790          

   \                                 In section .text, align 2, keep-with-next
   8791          UINT8
   8792          AppS2wCmd_WwepConf(UINT8 *ptr)
   8793          {
   8794          
   8795          	if(*ptr == '1')
   \                     AppS2wCmd_WwepConf:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x2831             CMP      R0,#+49
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x2001             MOVEQ    R0,#+1
   8796          	{
   8797          		s2wWepKeyAscii=1;
   \   00000008   0xD002             BEQ.N    ??AppS2wCmd_WwepConf_0
   8798          	}
   8799          	else if(*ptr == '0')
   \   0000000A   0x2830             CMP      R0,#+48
   \   0000000C   0xD105             BNE.N    ??AppS2wCmd_WwepConf_1
   8800          	{
   8801          		s2wWepKeyAscii=0;
   \   0000000E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_WwepConf_0:
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable464
   \   00000014   0x7008             STRB     R0,[R1, #+0]
   8802          	}
   8803          	else
   8804          	{
   8805          		return S2W_EINVAL;
   8806          	}
   8807          	return S2W_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x4770             BX       LR
   \                     ??AppS2wCmd_WwepConf_1:
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x4770             BX       LR               ;; return
   8808          
   8809          
   8810          }
   8811          /**
   8812           ******************************************************************
   8813           * @ingroup S2w-Application
   8814           * @brief Process the AT+RFFWREGDOMAIN Command.
   8815           *   This function set the region information .
   8816           * @param ptr Pointer to the user input string.
   8817           * @return S2W_SUCCESS - operation successful.
   8818           * @retval S2W_EINVAL  - operation failure-invalid command.
   8819           * @retval S2W_FAILURE - operation failure.
   8820           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   8821          PUBLIC UINT8
   8822          AppS2wCmd_RegDomainSet(UINT8 *ptr)
   8823          {
   \                     AppS2wCmd_RegDomainSet:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xF2AD 0x7DFC      SUBW     SP,SP,#+2044
   8824              const char *region = "FCC";
   8825              UINT32 domainId=0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x9100             STR      R1,[SP, #+0]
   \   0000000A   0x....             ADR.N    R4,??DataTable456  ;; "FCC"
   8826              UINT8 status = S2W_EINVAL,domain=0;
   8827              S2W_FLASH_PARAMS_T s2wProfile;
   8828              
   8829              if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x....             LDR.N    R5,??DataTable455
   \   00000010   0x.... 0x....      LDR.W    R7,??DataTable464_1
   \   00000014   0xF248 0x1670      MOVW     R6,#+33136
   \   00000018   0x293F             CMP      R1,#+63
   \   0000001A   0xBF04             ITT      EQ 
   \   0000001C   0x7841             LDRBEQ   R1,[R0, #+1]
   \   0000001E   0x2900             CMPEQ    R1,#+0
   \   00000020   0xD11D             BNE.N    ??AppS2wCmd_RegDomainSet_0
   8830              {
   8831                  /* get the reg domain send it on serial interface
   8832                   */
   8833                  //status = AppS2wHal_RegDomainGet(&domain);
   8834              //    AppCfg_Get( APP_CFG_REG_DOMAIN_ID, &domain );
   8835          	    if(!s2wappMainTaskCtxt->fsInit)
   \   00000022   0x6838             LDR      R0,[R7, #+0]
   \   00000024   0x5C30             LDRB     R0,[R6, R0]
   \   00000026   0xB918             CBNZ.N   R0,??CrossCallReturnLabel_537
   8836          	    {
   8837          			App_FsInit();
   \   00000028   0x.... 0x....      BL       App_FsInit
   8838          			s2wappMainTaskCtxt->fsInit = TRUE;
   \   0000002C   0x.... 0x....      BL       ?Subroutine107
   8839          	        f_enterFS();
   8840          		}
   8841          		if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
   \                     ??CrossCallReturnLabel_537:
   \   00000030   0x7928             LDRB     R0,[R5, #+4]
   \   00000032   0x2802             CMP      R0,#+2
   \   00000034   0xBF0C             ITE      EQ 
   \   00000036   0xF895 0x0288      LDRBEQ   R0,[R5, #+648]
   \   0000003A   0xF895 0x0395      LDRBNE   R0,[R5, #+917]
   8842          		{
   8843          			domain = s2wCurrent.lmtdApConf.regDomain;
   8844          		}
   8845          		else
   8846          		{
   8847          	    	domain = s2wCurrent.regDomain;
   8848          		}
   8849          
   8850                  switch (domain)
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD004             BEQ.N    ??AppS2wCmd_RegDomainSet_1
   \   00000042   0x2802             CMP      R0,#+2
   \   00000044   0xBF08             IT       EQ 
   \   00000046   0x.... 0x....      ADREQ.W  R4,`?<Constant "TELEC ">`
   \   0000004A   0xE001             B.N      ??AppS2wCmd_RegDomainSet_2
   8851                  {
   8852                      case S2W_DOMAIN_FCC:
   8853                          region = "FCC";
   8854                      break;
   8855          
   8856                      case S2W_DOMAIN_ETSI:
   8857                          region = "ETSI";
   \                     ??AppS2wCmd_RegDomainSet_1:
   \   0000004C   0x.... 0x....      ADR.W    R4,`?<Constant "ETSI">`
   8858                      break;
   8859          
   8860                      case S2W_DOMAIN_TELEC:
   8861                          region = "TELEC ";
   8862                      break;
   8863          
   8864                      default:
   8865                      break;
   8866                  }
   8867                  S2w_Printf("\r\nREG_DOMAIN=%s\n",region);
   \                     ??AppS2wCmd_RegDomainSet_2:
   \   00000050   0x4621             MOV      R1,R4
   \   00000052   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nREG_DOMAIN=%s\\n">`
   \   00000056   0x.... 0x....      BL       S2w_Printf
   8868                  return S2W_SUCCESS;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xE021             B.N      ??AppS2wCmd_RegDomainSet_3
   8869              }
   8870              status = AppS2wParse_Int(ptr, &domainId);
   \                     ??AppS2wCmd_RegDomainSet_0:
   \   0000005E   0x.... 0x....      BL       ?Subroutine51
   8871              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_279:
   \   00000062   0xB9F0             CBNZ.N   R0,??AppS2wCmd_RegDomainSet_3
   8872              {
   8873                  return status;
   8874              }
   8875              if(domainId >= S2W_MAX_REG_DOMAIN)
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x2803             CMP      R0,#+3
   \   00000068   0xBF28             IT       CS 
   \   0000006A   0x2002             MOVCS    R0,#+2
   8876              {
   8877                 return S2W_EINVAL;
   \   0000006C   0xD219             BCS.N    ??AppS2wCmd_RegDomainSet_3
   8878              }
   8879              domain = (UINT8)domainId;
   8880          	if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
   \   0000006E   0x7929             LDRB     R1,[R5, #+4]
   \   00000070   0x2902             CMP      R1,#+2
   \   00000072   0xBF0C             ITE      EQ 
   \   00000074   0xF885 0x0288      STRBEQ   R0,[R5, #+648]
   \   00000078   0xF885 0x0395      STRBNE   R0,[R5, #+917]
   8881          	{
   8882          		s2wCurrent.lmtdApConf.regDomain=domain;
   8883          	}
   8884          	else
   8885          	{
   8886              	s2wCurrent.regDomain = domain;
   8887          	}
   8888              
   8889              s2wProfile.profile[0] =  s2wCurrent;
   \   0000007C   0xA802             ADD      R0,SP,#+8
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0xF44F 0x727E      MOV      R2,#+1016
   \   00000084   0x.... 0x....      BL       __aeabi_memcpy4
   8890              if(!s2wappMainTaskCtxt->fsInit)
   \   00000088   0x6838             LDR      R0,[R7, #+0]
   \   0000008A   0x5C30             LDRB     R0,[R6, R0]
   \   0000008C   0xB918             CBNZ.N   R0,??CrossCallReturnLabel_536
   8891              {
   8892          		App_FsInit();
   \   0000008E   0x.... 0x....      BL       App_FsInit
   8893          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000092   0x.... 0x....      BL       ?Subroutine107
   8894                          f_enterFS();
   8895          	}
   8896              status = S2w_SaveS2wProfile(&s2wProfile,0);
   8897              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_536:
   \   00000096   0x2100             MOVS     R1,#+0
   \   00000098   0xA802             ADD      R0,SP,#+8
   \   0000009A   0x.... 0x....      BL       S2w_SaveS2wProfile
   \   0000009E   0xB100             CBZ.N    R0,??AppS2wCmd_RegDomainSet_3
   8898                return S2W_FAILURE;
   \   000000A0   0x2001             MOVS     R0,#+1
   8899              
   8900              return S2W_SUCCESS;
   \                     ??AppS2wCmd_RegDomainSet_3:
   \   000000A2   0xF20D 0x7DFC      ADDW     SP,SP,#+2044
   \   000000A6   0xBDF0             POP      {R4-R7,PC}       ;; return
   8901          }
   8902          
   8903          

   \                                 In section .text, align 2, keep-with-next
   8904          UINT8 AppS2wCmd_Wphymode(UINT8* ptr)
   8905          {
   \                     AppS2wCmd_Wphymode:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   8906             UINT8 status = S2W_FAILURE;
   8907             UINT8 *p;
   8908             UINT32 temp;
   8909             
   8910          
   8911              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x283F             CMP      R0,#+63
   \   00000008   0xBF02             ITTT     EQ 
   \   0000000A   0x9802             LDREQ    R0,[SP, #+8]
   \   0000000C   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000E   0x2800             CMPEQ    R0,#+0
   \   00000010   0xD101             BNE.N    ??AppS2wCmd_Wphymode_0
   8912              {
   8913                
   8914                /* Call WDD API to get PHY mode */
   8915                
   8916                return status;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0xBD0E             POP      {R1-R3,PC}
   8917              }
   8918              
   8919                /* Set the PHY mode  */
   8920              
   8921              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wphymode_0:
   \   00000016   0x.... 0x....      BL       ??Subroutine34_0
   8922              if (!p)
   \                     ??CrossCallReturnLabel_146:
   \   0000001A   0xB128             CBZ.N    R0,??AppS2wCmd_Wphymode_1
   8923              {
   8924                  return S2W_EINVAL;
   8925              }
   8926            
   8927              status = AppS2wParse_Int(p, &temp);
   \   0000001C   0x.... 0x....      BL       ?Subroutine51
   8928              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_278:
   \   00000020   0xB950             CBNZ.N   R0,??AppS2wCmd_Wphymode_2
   8929              {
   8930                  return status;
   8931              }
   8932              if(temp >= 256)
   \   00000022   0x9800             LDR      R0,[SP, #+0]
   \   00000024   0x28FF             CMP      R0,#+255
   \   00000026   0xD901             BLS.N    ??AppS2wCmd_Wphymode_3
   8933              {
   8934                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Wphymode_1:
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xBD0E             POP      {R1-R3,PC}
   8935              }
   8936              /* Call WDD API to set PHY mode  */
   8937              GsnWdd_PhyModeSet(&s2wappMainTaskCtxt->if0.wddCtx, (UINT8 )temp);
   \                     ??AppS2wCmd_Wphymode_3:
   \   0000002C   0xB2C1             UXTB     R1,R0
   \   0000002E   0x.... 0x....      BL       ?Subroutine74
   \                     ??CrossCallReturnLabel_438:
   \   00000032   0x.... 0x....      BL       GsnWdd_PhyModeSet
   8938              return status;
   \   00000036   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wphymode_2:
   \   00000038   0xBD0E             POP      {R1-R3,PC}       ;; return
   8939              
   8940          }

   \                                 In section .bss, align 4
   8941          
   8942          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
   8943          S2W_OTA_FWUP_CONF_T OtaFwupConfParam;
   \                     OtaFwupConfParam:
   \   00000000                      DS8 100
   \                     httpConfInfo:
   \   00000064                      DS8 76

   \                                 In section .bss, align 4
   \                     httpConfAtCmd:
   \   00000000                      DS8 1
   \   00000001                      DS8 1
   \   00000002                      DS8 2
   \                     headerValues:
   \   00000004                      DS8 100

   \                                 In section .bss, align 4
   \                     headerTypes:
   \   00000000                      DS8 100

   \                                 In section .bss, align 4
   \                     headerTypesModified:
   \   00000000                      DS8 100

   \                                 In section .bss, align 1
   \                     L3Dhcpv6Status:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
   \                     dhcpv6ClientStack:
   \   00000000                      DS8 2048

   \                                 In section .text, align 4, keep-with-next
   8944          UINT8
   8945          AppS2wCmd_OtaFwupConf(UINT8* ptr)
   8946          {
   \                     AppS2wCmd_OtaFwupConf:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   8947              UINT8* p;
   8948              UINT32 id=0,port,flag=0, dnsErr = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   8949               UINT8 status = S2W_EINVAL;
   8950               INT32 certID=-1;
   8951               /* get the 1st parameter ID
   8952               */
   8953               p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_220:
   \   00000010   0x0005             MOVS     R5,R0
   8954               if (!p)
   \   00000012   0xD063             BEQ.N    ??AppS2wCmd_OtaFwupConf_1
   8955               {
   8956                   return S2W_EINVAL;
   8957               }
   8958               status = AppS2wParse_Int(p, &id);
   \   00000014   0x.... 0x....      BL       ?Subroutine53
   \                     ??CrossCallReturnLabel_338:
   \   00000018   0x0004             MOVS     R4,R0
   8959               if (status != S2W_SUCCESS)
   \   0000001A   0xD117             BNE.N    ??AppS2wCmd_OtaFwupConf_2
   8960               {
   8961                   return status;
   8962               }
   8963               p = AppS2wParse_NextParamGet(&ptr);
   \   0000001C   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_219:
   \   00000020   0x0005             MOVS     R5,R0
   8964               if (!p)
   \   00000022   0xD05B             BEQ.N    ??AppS2wCmd_OtaFwupConf_1
   8965               {
   8966                   return S2W_EINVAL;
   8967               }
   8968               switch(id)
   \   00000024   0x9803             LDR      R0,[SP, #+12]
   \   00000026   0x.... 0x....      LDR.W    R6,??DataTable464_2
   \   0000002A   0x280B             CMP      R0,#+11
   \   0000002C   0xD83B             BHI.N    ??AppS2wCmd_OtaFwupConf_3
   \   0000002E   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??AppS2wCmd_OtaFwupConf_0:
   \   00000032   0x06 0x18          DC8      0x6,0x18,0x1F,0x28
   \              0x1F 0x28    
   \   00000036   0x3E 0x49          DC8      0x3E,0x49,0x52,0x73
   \              0x52 0x73    
   \   0000003A   0x98 0xA9          DC8      0x98,0xA9,0x87,0xC0
   \              0x87 0xC0    
   8969               {
   8970                  case S2W_OTAFWUP_SRVRIP:
   8971                     //status = AppS2wParse_Ip(p, (UINT8 *) &OtaFwupConfParam.fwSrvIp);
   8972                     	if(inet_pton(AF_INET, (const char*)p, &OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr) == 1)
   \                     ??AppS2wCmd_OtaFwupConf_4:
   \   0000003E   0x1D32             ADDS     R2,R6,#+4
   \   00000040   0x.... 0x....      BL       ?Subroutine71
   \                     ??CrossCallReturnLabel_429:
   \   00000044   0x2801             CMP      R0,#+1
   \   00000046   0xD104             BNE.N    ??AppS2wCmd_OtaFwupConf_5
   8973          		    {
   8974          		        OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET;
   \   00000048   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_OtaFwupConf_6:
   \   0000004A   0x8030             STRH     R0,[R6, #+0]
   8975          		    }
   8976          		    else if(inet_pton(AF_INET6, (const char*)p, &OtaFwupConfParam.sockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
   8977          		    {
   8978          		    	OtaFwupConfParam.sockAddr.addr.ipv6.sin6_family = AF_INET6;
   8979          		    }
   8980          		    else
   8981          		    {
   8982                         return S2W_EINVAL;
   8983                     	}
   8984                     break;
   8985                  case S2W_OTAFWUP_SRVRPORT:
   8986                     status = AppS2wParse_Int(p,(UINT32 *)&port);
   8987                     if (status != S2W_SUCCESS)
   8988                     {
   8989                         return status;
   8990                     }
   8991                     OtaFwupConfParam.sockAddr.ss_port = (UINT16)port;
   8992                     break;
   8993                  case S2W_OTAFWUP_PROXY_PRESENT:
   8994                     status = AppS2wParse_Int(p,&flag);
   8995                     if (status != S2W_SUCCESS)
   8996                     {
   8997                         return status;
   8998                     }
   8999                     OtaFwupConfParam.proxyFlag = flag;
   9000                     break;
   9001                  case S2W_OTAFWUP_PROXY_SRVRIP:
   9002                      if(! OtaFwupConfParam.proxyFlag)
   9003                      {
   9004                          return S2W_EINVAL;
   9005                      }
   9006                      //status = AppS2wParse_Ip(p, (UINT8 *) &OtaFwupConfParam.proxyIp);
   9007                      if(inet_pton(AF_INET, (const char*)p, &OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr) == 1)
   9008                      {
   9009          		        OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET;
   9010          		    }
   9011          		    else if(inet_pton(AF_INET6, (const char*)p, &OtaFwupConfParam.proxySockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
   9012          		    {
   9013          		    	OtaFwupConfParam.proxySockAddr.addr.ipv6.sin6_family = AF_INET6;
   9014          		    }
   9015          		    else
   9016          		    {
   9017                         return S2W_EINVAL;
   9018                      }
   9019                      break;
   9020                  case S2W_OTAFWUP_PROXY_SRVRPORT:
   9021                      if(! OtaFwupConfParam.proxyFlag)
   9022                      {
   9023                          return S2W_EINVAL;
   9024                      }
   9025                      status = AppS2wParse_Int(p, (UINT32 *) &port);
   9026                      if (status != S2W_SUCCESS)
   9027                      {
   9028                          return status;
   9029                      }
   9030                      OtaFwupConfParam.proxySockAddr.ss_port = (UINT16)port;
   9031                      break;
   9032                  case S2W_OTAFWUP_SSL_ENABLED:
   9033                      status = AppS2wParse_Int(p,&flag);
   9034                      if (status != S2W_SUCCESS)
   9035                      {
   9036                          return status;
   9037                      }
   9038                      OtaFwupConfParam.sslFlag = flag;
   9039                      break;
   9040                  case S2W_OTAFWUP_CERT_NAME:
   9041                      if(! OtaFwupConfParam.sslFlag)
   9042                      {
   9043                          return S2W_EINVAL;
   9044                      }
   9045                      if(strlen((const char *)p) == 0)
   9046                      {
   9047                          OtaFwupConfParam.certAddr = NULL;
   9048                          return S2W_SUCCESS;
   9049                      }
   9050                      certID = S2wCert_SearchRamTable((INT8*)p);
   9051                      if(certID == -1)
   9052                      {
   9053                          certID = S2wCert_FlashFileLoad((INT8*)p);
   9054                      }
   9055                      if(certID != -1)
   9056                      {
   9057                          OtaFwupConfParam.certAddr = s2w_ssl_cert_table[certID].certAddress;
   9058                      }
   9059                      else
   9060                      {
   9061                          S2w_Printf("\n\rCertificate Not Found\n\r");
   9062                      }
   9063                  break;
   9064                  case S2W_OTAFWUP_APP_IMAGE_URL:
   9065          			/* Configure wlan url */
   9066                      if(OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE] != NULL)
   9067                          gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]);
   9068                      OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]= gsn_malloc(strlen((const char *)p)+1);
   9069                      strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE],(const char *)p,strlen((const char *)p)+1);
   9070                  break;
   9071          		case S2W_OTAFWUP_APP_SIGN_URL:
   9072          			/* Configure wlan url */
   9073                      if(OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE] != NULL)
   9074                          gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE]);
   9075                      OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE]= gsn_malloc(strlen((const char *)p)+1);
   9076                      strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE],(const char *)p,strlen((const char *)p)+1);
   9077                  break;
   9078          		case S2W_OTAFWUP_INFO_URL:
   9079          			/* Configure informational xml url */
   9080          			if(OtaFwupConfParam.urls[S2W_OTAFU_URL_XML] != NULL)
   9081                          gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_XML]);
   9082                      OtaFwupConfParam.urls[S2W_OTAFU_URL_XML]= gsn_malloc(strlen((const char *)p)+1);
   9083                      strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_XML],(const char *)p,strlen((const char *)p)+1);
   9084          			break;
   9085          		case S2W_OTAFWUP_SRVR_HOST_NAME:
   9086          			/* Configure FWUP srver hostname */
   9087          			if(OtaFwupConfParam.fwSrvHostName != NULL)
   9088          				gsn_free(OtaFwupConfParam.fwSrvHostName);
   9089          			OtaFwupConfParam.fwSrvHostName = gsn_malloc(strlen((const char *)p)+1);
   9090          			memset(OtaFwupConfParam.fwSrvHostName, 0, strlen((const char *)p)+1);
   9091          			strcpy((INT8 *)OtaFwupConfParam.fwSrvHostName,(const char *)p);
   9092          			break;
   9093          		case S2W_OTAFWUP_APP_ENABLE_DNS_ERR:
   9094                      status = AppS2wParse_Int(p, &dnsErr);
   9095                      if (status != S2W_SUCCESS)
   9096                      {
   9097                          return status;
   9098                      }
   9099                      OtaFwupConfParam.dnsError = dnsErr;
   9100                      break;
   9101                 default:
   9102                      return S2W_EINVAL;
   9103               }
   9104               return status;
   \                     ??AppS2wCmd_OtaFwupConf_2:
   \   0000004C   0x4620             MOV      R0,R4
   \                     ??AppS2wCmd_OtaFwupConf_7:
   \   0000004E   0xB006             ADD      SP,SP,#+24
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??AppS2wCmd_OtaFwupConf_5:
   \   00000052   0xF106 0x0208      ADD      R2,R6,#+8
   \   00000056   0x.... 0x....      BL       ?Subroutine72
   \                     ??CrossCallReturnLabel_432:
   \   0000005A   0x2801             CMP      R0,#+1
   \   0000005C   0xD123             BNE.N    ??AppS2wCmd_OtaFwupConf_3
   \   0000005E   0x2003             MOVS     R0,#+3
   \   00000060   0xE7F3             B.N      ??AppS2wCmd_OtaFwupConf_6
   \                     ??AppS2wCmd_OtaFwupConf_8:
   \   00000062   0x.... 0x....      BL       ?Subroutine55
   \                     ??CrossCallReturnLabel_354:
   \   00000066   0x0004             MOVS     R4,R0
   \   00000068   0xD1F0             BNE.N    ??AppS2wCmd_OtaFwupConf_2
   \   0000006A   0x9801             LDR      R0,[SP, #+4]
   \   0000006C   0x8070             STRH     R0,[R6, #+2]
   \   0000006E   0xE7ED             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_9:
   \   00000070   0xA900             ADD      R1,SP,#+0
   \   00000072   0x.... 0x....      BL       ??Subroutine55_0
   \                     ??CrossCallReturnLabel_352:
   \   00000076   0x0004             MOVS     R4,R0
   \   00000078   0xD1E8             BNE.N    ??AppS2wCmd_OtaFwupConf_2
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0xF886 0x0038      STRB     R0,[R6, #+56]
   \   00000080   0xE7E4             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_10:
   \   00000082   0xF896 0x0038      LDRB     R0,[R6, #+56]
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xD028             BEQ.N    ??AppS2wCmd_OtaFwupConf_1
   \   0000008A   0xF106 0x0220      ADD      R2,R6,#+32
   \   0000008E   0x.... 0x....      BL       ?Subroutine71
   \                     ??CrossCallReturnLabel_428:
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xD102             BNE.N    ??AppS2wCmd_OtaFwupConf_11
   \   00000096   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_OtaFwupConf_12:
   \   00000098   0x83B0             STRH     R0,[R6, #+28]
   \   0000009A   0xE7D7             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_11:
   \   0000009C   0xF106 0x0224      ADD      R2,R6,#+36
   \   000000A0   0x.... 0x....      BL       ?Subroutine72
   \                     ??CrossCallReturnLabel_431:
   \   000000A4   0x2801             CMP      R0,#+1
   \                     ??AppS2wCmd_OtaFwupConf_3:
   \   000000A6   0xF040 0x808D      BNE.W    ??AppS2wCmd_OtaFwupConf_13
   \   000000AA   0x2003             MOVS     R0,#+3
   \   000000AC   0xE7F4             B.N      ??AppS2wCmd_OtaFwupConf_12
   \                     ??AppS2wCmd_OtaFwupConf_14:
   \   000000AE   0xF896 0x0038      LDRB     R0,[R6, #+56]
   \   000000B2   0x2800             CMP      R0,#+0
   \   000000B4   0xD012             BEQ.N    ??AppS2wCmd_OtaFwupConf_1
   \   000000B6   0x.... 0x....      BL       ?Subroutine55
   \                     ??CrossCallReturnLabel_353:
   \   000000BA   0x0004             MOVS     R4,R0
   \   000000BC   0xD1C6             BNE.N    ??AppS2wCmd_OtaFwupConf_2
   \   000000BE   0x9801             LDR      R0,[SP, #+4]
   \   000000C0   0x83F0             STRH     R0,[R6, #+30]
   \   000000C2   0xE7C3             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_15:
   \   000000C4   0xA900             ADD      R1,SP,#+0
   \   000000C6   0x.... 0x....      BL       ??Subroutine55_0
   \                     ??CrossCallReturnLabel_351:
   \   000000CA   0x0004             MOVS     R4,R0
   \   000000CC   0xD1BE             BNE.N    ??AppS2wCmd_OtaFwupConf_2
   \   000000CE   0x9800             LDR      R0,[SP, #+0]
   \   000000D0   0xF886 0x0039      STRB     R0,[R6, #+57]
   \   000000D4   0xE7BA             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_16:
   \   000000D6   0xF896 0x0039      LDRB     R0,[R6, #+57]
   \   000000DA   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_OtaFwupConf_1:
   \   000000DC   0xD072             BEQ.N    ??AppS2wCmd_OtaFwupConf_13
   \   000000DE   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_415:
   \   000000E2   0xB908             CBNZ.N   R0,??AppS2wCmd_OtaFwupConf_17
   \   000000E4   0x63F0             STR      R0,[R6, #+60]
   \   000000E6   0xE7B2             B.N      ??AppS2wCmd_OtaFwupConf_7
   \                     ??AppS2wCmd_OtaFwupConf_17:
   \   000000E8   0x4628             MOV      R0,R5
   \   000000EA   0x.... 0x....      BL       S2wCert_SearchRamTable
   \   000000EE   0xF110 0x0F01      CMN      R0,#+1
   \   000000F2   0xBF04             ITT      EQ 
   \   000000F4   0x4628             MOVEQ    R0,R5
   \   000000F6   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   \   000000FA   0xF110 0x0F01      CMN      R0,#+1
   \   000000FE   0xD006             BEQ.N    ??AppS2wCmd_OtaFwupConf_18
   \   00000100   0x210C             MOVS     R1,#+12
   \   00000102   0x....             LDR.N    R2,??DataTable456_1
   \   00000104   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000108   0x6800             LDR      R0,[R0, #+0]
   \   0000010A   0x63F0             STR      R0,[R6, #+60]
   \   0000010C   0xE79E             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_18:
   \   0000010E   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rCertificate Not Fou...">`
   \   00000112   0x.... 0x....      BL       S2w_Printf
   \   00000116   0xE799             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_19:
   \   00000118   0x6C30             LDR      R0,[R6, #+64]
   \   0000011A   0xB108             CBZ.N    R0,??AppS2wCmd_OtaFwupConf_20
   \   0000011C   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_OtaFwupConf_20:
   \   00000120   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_414:
   \   00000124   0x2200             MOVS     R2,#+0
   \   00000126   0xF242 0x316C      MOVW     R1,#+9068
   \   0000012A   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_68:
   \   0000012E   0x6430             STR      R0,[R6, #+64]
   \   00000130   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_413:
   \   00000134   0x1C42             ADDS     R2,R0,#+1
   \   00000136   0x6C30             LDR      R0,[R6, #+64]
   \                     ??AppS2wCmd_OtaFwupConf_21:
   \   00000138   0x4629             MOV      R1,R5
   \   0000013A   0x.... 0x....      BL       strncpy
   \   0000013E   0xE785             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_22:
   \   00000140   0x6CB0             LDR      R0,[R6, #+72]
   \   00000142   0xB108             CBZ.N    R0,??AppS2wCmd_OtaFwupConf_23
   \   00000144   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_OtaFwupConf_23:
   \   00000148   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_412:
   \   0000014C   0x2200             MOVS     R2,#+0
   \   0000014E   0xF242 0x3173      MOVW     R1,#+9075
   \   00000152   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_67:
   \   00000156   0x64B0             STR      R0,[R6, #+72]
   \   00000158   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_411:
   \   0000015C   0x1C42             ADDS     R2,R0,#+1
   \   0000015E   0x6CB0             LDR      R0,[R6, #+72]
   \   00000160   0xE7EA             B.N      ??AppS2wCmd_OtaFwupConf_21
   \                     ??AppS2wCmd_OtaFwupConf_24:
   \   00000162   0x6C70             LDR      R0,[R6, #+68]
   \   00000164   0xB108             CBZ.N    R0,??AppS2wCmd_OtaFwupConf_25
   \   00000166   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_OtaFwupConf_25:
   \   0000016A   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_410:
   \   0000016E   0x2200             MOVS     R2,#+0
   \   00000170   0xF242 0x317A      MOVW     R1,#+9082
   \   00000174   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_66:
   \   00000178   0x6470             STR      R0,[R6, #+68]
   \   0000017A   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_409:
   \   0000017E   0x1C42             ADDS     R2,R0,#+1
   \   00000180   0x6C70             LDR      R0,[R6, #+68]
   \   00000182   0xE7D9             B.N      ??AppS2wCmd_OtaFwupConf_21
   \                     ??AppS2wCmd_OtaFwupConf_26:
   \   00000184   0x6DF0             LDR      R0,[R6, #+92]
   \   00000186   0xB108             CBZ.N    R0,??AppS2wCmd_OtaFwupConf_27
   \   00000188   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_OtaFwupConf_27:
   \   0000018C   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_408:
   \   00000190   0x2200             MOVS     R2,#+0
   \   00000192   0xF242 0x3181      MOVW     R1,#+9089
   \   00000196   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_65:
   \   0000019A   0x65F0             STR      R0,[R6, #+92]
   \   0000019C   0x.... 0x....      BL       ?Subroutine68
   \                     ??CrossCallReturnLabel_407:
   \   000001A0   0x1C42             ADDS     R2,R0,#+1
   \   000001A2   0x6DF0             LDR      R0,[R6, #+92]
   \   000001A4   0x.... 0x....      BL       ??Subroutine18_0
   \                     ??CrossCallReturnLabel_34:
   \   000001A8   0x6DF0             LDR      R0,[R6, #+92]
   \   000001AA   0x4629             MOV      R1,R5
   \   000001AC   0x.... 0x....      BL       strcpy
   \                     ??AppS2wCmd_OtaFwupConf_28:
   \   000001B0   0xE74C             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_29:
   \   000001B2   0xA902             ADD      R1,SP,#+8
   \   000001B4   0x.... 0x....      BL       ??Subroutine55_0
   \                     ??CrossCallReturnLabel_350:
   \   000001B8   0x0004             MOVS     R4,R0
   \   000001BA   0xD1F9             BNE.N    ??AppS2wCmd_OtaFwupConf_28
   \   000001BC   0x9802             LDR      R0,[SP, #+8]
   \   000001BE   0xF886 0x0060      STRB     R0,[R6, #+96]
   \   000001C2   0xE743             B.N      ??AppS2wCmd_OtaFwupConf_2
   \                     ??AppS2wCmd_OtaFwupConf_13:
   \   000001C4   0x2002             MOVS     R0,#+2
   \   000001C6   0xE742             B.N      ??AppS2wCmd_OtaFwupConf_7
   9105          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine68:
   \   00000000   0x4628             MOV      R0,R5
   \   00000002   0x.... 0x....      B.W      strlen

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine55:
   \   00000000   0xA901             ADD      R1,SP,#+4
   \                     ??Subroutine55_0:
   \   00000002   0x4628             MOV      R0,R5
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Int

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0xA805             ADD      R0,SP,#+20
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   9106          

   \                                 In section .text, align 2, keep-with-next
   9107          UINT8
   9108          AppS2wCmd_OtaFwupExtFlashStart(UINT8* ptr)
   9109          {
   \                     AppS2wCmd_OtaFwupExtFlashStart:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   9110               UINT32 status;
   9111          #if defined(S2W_DFLT_HTTPC_AUTH) || defined(S2W_DFLT_HTTPC_HOST_IP)					
   9112          	 INT8 *pValue;
   9113          	 UINT32 len,i=0;
   9114          #endif		
   9115               // check the fwup parameters are configured via cmd if not update with default
   9116               if((OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr == 0) && (OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr == 0)
   9117                        && (OtaFwupConfParam.fwSrvHostName == NULL))
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable464_2
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xBF01             ITTTT    EQ 
   \   0000000C   0x6A20             LDREQ    R0,[R4, #+32]
   \   0000000E   0x2800             CMPEQ    R0,#+0
   \   00000010   0x6DE0             LDREQ    R0,[R4, #+92]
   \   00000012   0x2800             CMPEQ    R0,#+0
   \   00000014   0xD151             BNE.N    ??AppS2wCmd_OtaFwupExtFlashStart_0
   9118               {
   9119                   // update the deafult parameter
   9120                   OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr = htonl(S2W_DFLT_OTAFU_PULL_SRVR_IP);
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable465  ;; 0x1f0a8c0
   \   0000001A   0x6060             STR      R0,[R4, #+4]
   9121          #ifdef S2W_IPv6_SUPPORT
   9122          		OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET6;
   9123          #else
   9124          		OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET;
   9125          #endif
   9126                  OtaFwupConfParam.sockAddr.ss_port = S2W_DFLT_OTAFU_PULL_SRVR_PORT;
   9127                  OtaFwupConfParam.proxyFlag = S2W_DFLT_OTAFU_PULL_PROXY_SRVR;
   9128          #ifdef S2W_IPv6_SUPPORT		
   9129          		OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET6;
   9130          #else
   9131          		OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET;
   9132          #endif
   9133          
   9134                   OtaFwupConfParam.sslFlag = S2W_DFLT_OTAFU_PULL_SSL;
   9135                  OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr = htonl(S2W_DFLT_OTAFU_PULL_PROXY_SRVR_IP);
   9136                   OtaFwupConfParam.proxySockAddr.ss_port = S2W_DFLT_OTAFU_PULL_PROXY_SRVR_PORT;
   9137                   OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]= gsn_malloc(sizeof(S2W_DFLT_OTAFU_PULL_BIN_URL)+1);
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0x8020             STRH     R0,[R4, #+0]
   \   00000022   0xF242 0x31B1      MOVW     R1,#+9137
   \   00000026   0xF242 0x3028      MOVW     R0,#+9000
   \   0000002A   0x8060             STRH     R0,[R4, #+2]
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0xF884 0x0038      STRB     R0,[R4, #+56]
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0x83A0             STRH     R0,[R4, #+28]
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF884 0x0039      STRB     R0,[R4, #+57]
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable466  ;; 0x101a8c0
   \   00000040   0x6220             STR      R0,[R4, #+32]
   \   00000042   0xF44F 0x50FA      MOV      R0,#+8000
   \   00000046   0x83E0             STRH     R0,[R4, #+30]
   \   00000048   0x200E             MOVS     R0,#+14
   \   0000004A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000004E   0x6420             STR      R0,[R4, #+64]
   9138                   memcpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE],S2W_DFLT_OTAFU_PULL_BIN_URL,sizeof(S2W_DFLT_OTAFU_PULL_BIN_URL));
   \   00000050   0x220D             MOVS     R2,#+13
   \   00000052   0x.... 0x....      ADR.W    R1,`?<Constant "gainspan.lan">`
   \   00000056   0x.... 0x....      BL       memcpy
   9139          		if((httpConfAtCmd != 1) &&(!httpConfInfo.reqHeaderCount))
   \   0000005A   0x.... 0x....      LDR.W    R5,??DataTable468
   \   0000005E   0x7828             LDRB     R0,[R5, #+0]
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD02A             BEQ.N    ??AppS2wCmd_OtaFwupExtFlashStart_0
   \   00000064   0x6F60             LDR      R0,[R4, #+116]
   \   00000066   0xBB40             CBNZ.N   R0,??AppS2wCmd_OtaFwupExtFlashStart_0
   9140          		{
   9141          			memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
   \   00000068   0x.... 0x....      LDR.W    R6,??DataTable469
   \   0000006C   0x2264             MOVS     R2,#+100
   \   0000006E   0x.... 0x....      BL       ??Subroutine19_0
   9142          			memset(&headerValues[0], 0, sizeof(headerValues));
   \                     ??CrossCallReturnLabel_41:
   \   00000072   0x2264             MOVS     R2,#+100
   \   00000074   0x2100             MOVS     R1,#+0
   \   00000076   0x1D28             ADDS     R0,R5,#+4
   \   00000078   0x.... 0x....      BL       memset
   9143          			httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
   \   0000007C   0x2003             MOVS     R0,#+3
   \   0000007E   0xF884 0x0064      STRB     R0,[R4, #+100]
   9144          			httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
   9145          			httpConfInfo.reqHeaderValues = headerValues;
   9146          			httpConfInfo.reqHeaderCount = 0;
   9147          			// configure the header
   9148          #ifdef S2W_DFLT_HTTPC_AUTH			
   9149          			len= sizeof(S2W_DFLT_HTTPC_AUTH);
   9150          			pValue = gsn_malloc(len+1);
   9151          			if(pValue == NULL)
   9152          			{
   9153          				return S2W_FAILURE;
   9154          			}
   9155          			memset(pValue, 0 , len+1);
   9156          			memcpy(pValue, S2W_DFLT_HTTPC_AUTH, len);
   9157          			pValue[len] = '\0';
   9158          			headerValues[i] = pValue;
   9159          			headerTypes[i++] = GSN_HTTP_HEADER_AUTHORIZATION;
   9160          			httpConfInfo.reqHeaderCount++;
   9161          #endif
   9162          #ifdef S2W_DFLT_HTTPC_HOST_IP			
   9163          			len= sizeof(S2W_DFLT_HTTPC_HOST_IP);
   9164          			pValue = gsn_malloc(len+1);
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable471
   \   00000088   0x66E0             STR      R0,[R4, #+108]
   \   0000008A   0xF242 0x31CC      MOVW     R1,#+9164
   \   0000008E   0x1D28             ADDS     R0,R5,#+4
   \   00000090   0x6720             STR      R0,[R4, #+112]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x6760             STR      R0,[R4, #+116]
   \   00000096   0x200F             MOVS     R0,#+15
   \   00000098   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000009C   0x0007             MOVS     R7,R0
   9165          			if(pValue == NULL)
   \   0000009E   0xD010             BEQ.N    ??AppS2wCmd_OtaFwupExtFlashStart_1
   9166          			{
   9167          				return S2W_FAILURE;
   9168          			}
   9169          			memset(pValue, 0 , len+1);
   \   000000A0   0x220F             MOVS     R2,#+15
   \   000000A2   0x.... 0x....      BL       ??Subroutine18_0
   9170          			memcpy(pValue, (UINT8*)S2W_DFLT_HTTPC_HOST_IP, len);
   \                     ??CrossCallReturnLabel_33:
   \   000000A6   0x.... 0x....      BL       ?Subroutine96
   9171          			pValue[len] = '\0';
   \                     ??CrossCallReturnLabel_505:
   \   000000AA   0x2000             MOVS     R0,#+0
   \   000000AC   0x73B8             STRB     R0,[R7, #+14]
   9172          			headerValues[i] = pValue;
   \   000000AE   0x606F             STR      R7,[R5, #+4]
   9173          			headerTypes[i++] = (GSN_HTTP_USER_HEADER_TYPE_T)(GSN_HTTP_HEADER_HOST);
   \   000000B0   0x200D             MOVS     R0,#+13
   \   000000B2   0x6030             STR      R0,[R6, #+0]
   9174          			httpConfInfo.reqHeaderCount++;
   \   000000B4   0x6F60             LDR      R0,[R4, #+116]
   \   000000B6   0x1C40             ADDS     R0,R0,#+1
   \   000000B8   0x6760             STR      R0,[R4, #+116]
   9175          #endif			
   9176          		}
   9177               
   9178               }
   9179               status = APPS2w_ExtFlashStart(&OtaFwupConfParam);
   9180          
   9181               if(status != GSN_SUCCESS)
   \                     ??AppS2wCmd_OtaFwupExtFlashStart_0:
   \   000000BA   0x4620             MOV      R0,R4
   \   000000BC   0x.... 0x....      BL       APPS2w_ExtFlashStart
   \   000000C0   0xB100             CBZ.N    R0,??AppS2wCmd_OtaFwupExtFlashStart_2
   9182                  return S2W_FAILURE;
   \                     ??AppS2wCmd_OtaFwupExtFlashStart_1:
   \   000000C2   0x2001             MOVS     R0,#+1
   9183               else
   9184                  return S2W_SUCCESS;
   \                     ??AppS2wCmd_OtaFwupExtFlashStart_2:
   \   000000C4   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   9185          }
   9186          #endif
   9187          
   9188          #ifdef S2W_DNS_CLIENT

   \                                 In section .text, align 2, keep-with-next
   9189          UINT8
   9190          AppS2wCmd_DnsServerSet(UINT8 *ptr)
   9191          {
   \                     AppS2wCmd_DnsServerSet:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   9192            
   9193            UINT8 *p,status,index=0;
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable464_1
   \   0000000C   0x.... 0x....      LDR.W    R6,??DataTable470
   \   00000010   0xAF00             ADD      R7,SP,#+0
   \   00000012   0xF241 0x4850      MOVW     R8,#+5200
   \   00000016   0xE01C             B.N      ??AppS2wCmd_DnsServerSet_0
   9194          #ifdef S2W_IPv6_SUPPORT
   9195            UINT32 IPv6[4],IPv6AddrType;
   9196          #endif
   9197            S2W_IPADDR_T IPv4;
   9198             
   9199           while(((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL) && (index < 2))
   9200           {
   9201              status = AppS2wParse_Ip(p,IPv4);
   9202                
   9203              if (status == S2W_SUCCESS)
   \                     ??AppS2wCmd_DnsServerSet_1:
   \   00000018   0x.... 0x....      BL       ?Subroutine64
   \                     ??CrossCallReturnLabel_398:
   \   0000001C   0xB9B8             CBNZ.N   R0,??AppS2wCmd_DnsServerSet_2
   9204              {
   9205                DNSv4ServerAddr[index] = (IPv4[0] << 24 | IPv4[1] << 16 | IPv4[2] << 8 | IPv4[3]);
   \   0000001E   0x787A             LDRB     R2,[R7, #+1]
   \   00000020   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   00000024   0x0412             LSLS     R2,R2,#+16
   \   00000026   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   0000002A   0x78BA             LDRB     R2,[R7, #+2]
   \   0000002C   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000030   0x78FA             LDRB     R2,[R7, #+3]
   \   00000032   0xEB06 0x0084      ADD      R0,R6,R4, LSL #+2
   \   00000036   0x4311             ORRS     R1,R2,R1
   \   00000038   0x6041             STR      R1,[R0, #+4]
   9206          
   9207                GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx,DNSv4ServerAddr[index],index);
   \   0000003A   0x4622             MOV      R2,R4
   \   0000003C   0x6841             LDR      R1,[R0, #+4]
   \   0000003E   0x6828             LDR      R0,[R5, #+0]
   \   00000040   0x4440             ADD      R0,R8,R0
   \   00000042   0x.... 0x....      BL       GsnNwif_DnsServerAdd
   9208          
   9209                S2W_DNS_CLIENT_FALGS |= S2W_DNSv4_SERVER_SET;
   \   00000046   0x7830             LDRB     R0,[R6, #+0]
   \   00000048   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000004C   0x7030             STRB     R0,[R6, #+0]
   9210              }
   9211          
   9212          #ifdef S2W_IPv6_SUPPORT
   9213              else   /* Check for IPv6 address  */
   9214              {
   9215                status = inet_pton(AF_INET6, (const char*)p, (VOID*)IPv6);
   9216                  if(status != TRUE)
   9217                  return S2W_EINVAL;
   9218          
   9219                  GSN_IPv6_CHANGE_ENDIAN(IPv6);
   9220          
   9221          
   9222                IPv6AddrType = GSN_IPv6_ADDR_TYPE(IPv6);
   9223            
   9224                switch(IPv6AddrType)
   9225                {
   9226              
   9227              
   9228                  case GSN_IPv6_LINK_LOCAL:
   9229                  case GSN_IPv6_GLOBAL:
   9230                    
   9231                     /* Clear the previous DNSv6 server */
   9232                      nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[index]);
   9233          
   9234                      DNSv6ServerAddr[index].nxd_ip_version = 0x6;
   9235                      DNSv6ServerAddr[index].nxd_ip_address.v6[0] = IPv6[0];
   9236                      DNSv6ServerAddr[index].nxd_ip_address.v6[1] = IPv6[1];
   9237                      DNSv6ServerAddr[index].nxd_ip_address.v6[2] = IPv6[2];
   9238                      DNSv6ServerAddr[index].nxd_ip_address.v6[3] = IPv6[3];
   9239          
   9240                      status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[index]);
   9241                      if (status != S2W_SUCCESS)
   9242                        return S2W_FAILURE;
   9243                      S2W_DNS_CLIENT_FALGS |= S2W_DNSv6_SERVER_SET;
   9244                      break;
   9245                    
   9246                  default:
   9247                      return S2W_EINVAL;
   9248                }
   9249              }
   9250          #endif //S2W_IPv6_SUPPORT   
   9251              index++;
   \                     ??AppS2wCmd_DnsServerSet_2:
   \   0000004E   0x1C64             ADDS     R4,R4,#+1
   \   00000050   0xB2E4             UXTB     R4,R4
   9252           }
   \                     ??AppS2wCmd_DnsServerSet_0:
   \   00000052   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_211:
   \   00000056   0xB108             CBZ.N    R0,??AppS2wCmd_DnsServerSet_3
   \   00000058   0x2C02             CMP      R4,#+2
   \   0000005A   0xDBDD             BLT.N    ??AppS2wCmd_DnsServerSet_1
   9253          
   9254              GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
   \                     ??AppS2wCmd_DnsServerSet_3:
   \   0000005C   0x6828             LDR      R0,[R5, #+0]
   \   0000005E   0x.... 0x....      LDR.W    R7,??DataTable470_1
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0xF507 0x71D4      ADD      R1,R7,#+424
   \   00000068   0x4440             ADD      R0,R8,R0
   \   0000006A   0x.... 0x....      BL       GsnNwif_DnsServerGet
   9255              GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
   \   0000006E   0x6828             LDR      R0,[R5, #+0]
   \   00000070   0x2201             MOVS     R2,#+1
   \   00000072   0xF507 0x71D6      ADD      R1,R7,#+428
   \   00000076   0x4440             ADD      R0,R8,R0
   \   00000078   0x.... 0x....      BL       GsnNwif_DnsServerGet
   9256          
   9257              S2W_DNS_CLIENT_FALGS |= S2W_DNS_CLIENT_ENABLED;
   \   0000007C   0x7830             LDRB     R0,[R6, #+0]
   \   0000007E   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000082   0x7030             STRB     R0,[R6, #+0]
   9258          #ifdef S2W_DHCP_SERVER_ENABLE
   9259              /* Restart DHCP server */
   9260              if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
   \   00000084   0x7870             LDRB     R0,[R6, #+1]
   \   00000086   0x07C0             LSLS     R0,R0,#+31
   \   00000088   0xD511             BPL.N    ??AppS2wCmd_DnsServerSet_4
   9261              {
   9262                UINT8 buff[8]={0};
   \   0000008A   0xA801             ADD      R0,SP,#+4
   \   0000008C   0x2100             MOVS     R1,#+0
   \   0000008E   0x2200             MOVS     R2,#+0
   \   00000090   0xC006             STM      R0!,{R1,R2}
   9263                sprintf((char*)buff,"%d",1);
   \   00000092   0x2201             MOVS     R2,#+1
   \   00000094   0x....             ADR.N    R1,??DataTable462  ;; 0x25, 0x64, 0x00, 0x00
   \   00000096   0xA801             ADD      R0,SP,#+4
   \   00000098   0x.... 0x....      BL       sprintf
   9264                GsnDhcpSrvr_Stop(&dhcpSrvr);
   \   0000009C   0x.... 0x....      BL       ?Subroutine137
   9265                dhcpServerFlags &= 0xfe;
   \                     ??CrossCallReturnLabel_626:
   \   000000A0   0x7870             LDRB     R0,[R6, #+1]
   \   000000A2   0xF000 0x00FE      AND      R0,R0,#0xFE
   \   000000A6   0x7070             STRB     R0,[R6, #+1]
   9266                AppS2wCmd_DhcpSrvr(buff);
   \   000000A8   0xA801             ADD      R0,SP,#+4
   \   000000AA   0x.... 0x....      BL       AppS2wCmd_DhcpSrvr
   9267              }
   9268          #endif
   9269              if(index > 2)
   \                     ??AppS2wCmd_DnsServerSet_4:
   \   000000AE   0x2C03             CMP      R4,#+3
   \   000000B0   0xBFAC             ITE      GE 
   \   000000B2   0x2001             MOVGE    R0,#+1
   \   000000B4   0x2000             MOVLT    R0,#+0
   9270                return S2W_FAILURE;
   9271              
   9272              return S2W_SUCCESS;
   \   000000B6   0xB004             ADD      SP,SP,#+16
   \   000000B8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   9273          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine137:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable477
   \   00000004   0x.... 0x....      B.W      GsnDhcpSrvr_Stop
   9274          
   9275          

   \                                 In section .text, align 2, keep-with-next
   9276          UINT8
   9277          AppS2wCmd_DnsLookup(UINT8 *ptr)
   9278          {
   \                     AppS2wCmd_DnsLookup:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   9279             UINT8 *p,status,*temp;
   9280             ULONG hostIpAddress;
   9281             UINT32 retries=0,timeout=0,clearCache;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x9002             STR      R0,[SP, #+8]
   9282          
   9283             if(s2wLinkState != S2W_LINK_STATE_CONNECTED)
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable471_2
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xD12F             BNE.N    ??AppS2wCmd_DnsLookup_0
   9284               return S2W_FAILURE;
   9285            
   9286             
   9287             p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000014   0x.... 0x....      BL       ?Subroutine33
   9288                if(p == NULL)
   \                     ??CrossCallReturnLabel_109:
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD02B             BEQ.N    ??AppS2wCmd_DnsLookup_0
   9289                return S2W_FAILURE;
   9290          	temp = p;
   \   0000001C   0x4604             MOV      R4,R0
   9291            
   9292              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   0000001E   0x.... 0x....      BL       ?Subroutine33
   9293              if(p != NULL)
   \                     ??CrossCallReturnLabel_108:
   \   00000022   0xB110             CBZ.N    R0,??AppS2wCmd_DnsLookup_1
   9294              {
   9295            
   9296                status = AppS2wParse_Int(p, &retries);
   9297                if (status != S2W_SUCCESS)
   \   00000024   0x.... 0x....      BL       ?Subroutine53
   9298                  return S2W_EINVAL;
   9299              }
   \                     ??CrossCallReturnLabel_337:
   \   00000028   0xB998             CBNZ.N   R0,??AppS2wCmd_DnsLookup_2
   9300              
   9301              retries = (retries) ? retries : S2W_DNS_REQ_DEF_RETRIES;
   \                     ??AppS2wCmd_DnsLookup_1:
   \   0000002A   0x9803             LDR      R0,[SP, #+12]
   \   0000002C   0xB908             CBNZ.N   R0,??AppS2wCmd_DnsLookup_3
   \   0000002E   0x2003             MOVS     R0,#+3
   \   00000030   0x9003             STR      R0,[SP, #+12]
   9302              
   9303              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_DnsLookup_3:
   \   00000032   0x.... 0x....      BL       ?Subroutine33
   9304              if(p != NULL)
   \                     ??CrossCallReturnLabel_107:
   \   00000036   0xB110             CBZ.N    R0,??AppS2wCmd_DnsLookup_4
   9305              {  
   9306                status = AppS2wParse_Int(p, &timeout);
   9307                if (status != S2W_SUCCESS)
   \   00000038   0x.... 0x....      BL       ?Subroutine50
   9308                  return S2W_EINVAL;
   9309              }
   \                     ??CrossCallReturnLabel_259:
   \   0000003C   0xB948             CBNZ.N   R0,??AppS2wCmd_DnsLookup_2
   9310              
   9311              timeout = (timeout) ? timeout : S2W_DNS_REQ_DEF_TIME_OUT;
   \                     ??AppS2wCmd_DnsLookup_4:
   \   0000003E   0x9802             LDR      R0,[SP, #+8]
   \   00000040   0xB908             CBNZ.N   R0,??AppS2wCmd_DnsLookup_5
   \   00000042   0x2005             MOVS     R0,#+5
   \   00000044   0x9002             STR      R0,[SP, #+8]
   9312              
   9313              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_DnsLookup_5:
   \   00000046   0x.... 0x....      BL       ?Subroutine33
   9314              if(p != NULL)
   \                     ??CrossCallReturnLabel_106:
   \   0000004A   0xB120             CBZ.N    R0,??AppS2wCmd_DnsLookup_6
   9315              {
   9316                /* Netx Doesnt have any cache */
   9317                status = AppS2wParse_Int(p, &clearCache);
   9318                if (status != S2W_SUCCESS)
   \   0000004C   0x.... 0x....      BL       ?Subroutine54
   \                     ??CrossCallReturnLabel_344:
   \   00000050   0xB108             CBZ.N    R0,??AppS2wCmd_DnsLookup_6
   9319                  return S2W_EINVAL;
   \                     ??AppS2wCmd_DnsLookup_2:
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0xE019             B.N      ??AppS2wCmd_DnsLookup_7
   9320              }
   9321              GsnNwIf_DnsRetryCountSet(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,retries);
   \                     ??AppS2wCmd_DnsLookup_6:
   \   00000056   0x.... 0x....      LDR.W    R5,??DataTable470_2
   \   0000005A   0x9903             LDR      R1,[SP, #+12]
   \   0000005C   0x.... 0x....      BL       ?Subroutine131
   9322             status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx, (UINT8*)temp, &hostIpAddress, timeout);
   9323          
   9324              if (status != S2W_SUCCESS || hostIpAddress == 0)
   \                     ??CrossCallReturnLabel_607:
   \   00000060   0x6828             LDR      R0,[R5, #+0]
   \   00000062   0x9B02             LDR      R3,[SP, #+8]
   \   00000064   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000068   0x.... 0x....      BL       ?Subroutine84
   \                     ??CrossCallReturnLabel_465:
   \   0000006C   0xB2C0             UXTB     R0,R0
   \   0000006E   0xB908             CBNZ.N   R0,??AppS2wCmd_DnsLookup_0
   \   00000070   0x9801             LDR      R0,[SP, #+4]
   \   00000072   0xB908             CBNZ.N   R0,??AppS2wCmd_DnsLookup_8
   9325                return S2W_FAILURE;
   \                     ??AppS2wCmd_DnsLookup_0:
   \   00000074   0x2001             MOVS     R0,#+1
   \   00000076   0xE008             B.N      ??AppS2wCmd_DnsLookup_7
   9326          
   9327            
   9328              S2w_Printf("\r\nIP:%d.%d.%d.%d\r",(hostIpAddress & 0xff000000)>>24,(hostIpAddress & 0x00ff0000)>>16,(hostIpAddress & 0x0000ff00)>>8,(hostIpAddress & 0x000000ff));
   \                     ??AppS2wCmd_DnsLookup_8:
   \   00000078   0xB2C0             UXTB     R0,R0
   \   0000007A   0x9000             STR      R0,[SP, #+0]
   \   0000007C   0x.... 0x....      BL       ?Subroutine103
   \                     ??CrossCallReturnLabel_525:
   \   00000080   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nIP:%d.%d.%d.%d\\r">`
   \   00000084   0x.... 0x....      BL       S2w_Printf
   9329              
   9330              return S2W_SUCCESS;
   \   00000088   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_DnsLookup_7:
   \   0000008A   0xB007             ADD      SP,SP,#+28
   \   0000008C   0xBD30             POP      {R4,R5,PC}       ;; return
   9331          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine84:
   \   00000000   0xAA01             ADD      R2,SP,#+4
   \   00000002   0x4621             MOV      R1,R4
   \   00000004   0x3050             ADDS     R0,R0,#+80
   \   00000006   0x.... 0x....      B.W      GsnNwIf_DnsHostByNameGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine131:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0xF500 0x5068      ADD      R0,R0,#+14848
   \   00000006   0x303C             ADDS     R0,R0,#+60
   \   00000008   0x.... 0x....      B.W      nx_dns_retry_count_set
   9332          
   9333          
   9334          #ifdef S2W_IPv6_SUPPORT
   9335          UINT8
   9336          AppS2wCmd_DnsLookupv6(UINT8 *ptr)
   9337          {
   9338             UINT8 *p,status,*temp;
   9339             //ULONG hostIpAddress;
   9340             UINT32 retry,timeout,clearCache;
   9341             GSN_NWIF_IP_CONFIG_T nwParams;
   9342             NXD_ADDRESS     host_ipduo_address;
   9343          
   9344             
   9345             
   9346              if(!(S2W_DNS_CLIENT_FALGS & S2W_DNS_CLIENT_ENABLED))
   9347              {
   9348          
   9349                S2W_DNS_CLIENT_FALGS |= S2W_DNS_CLIENT_ENABLED;
   9350              }
   9351              
   9352              if(!(S2W_DNS_CLIENT_FALGS & S2W_DNSv6_SERVER_SET))
   9353              {
   9354                
   9355                GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   9356          
   9357                 nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[0]);
   9358                 nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[1]);
   9359          
   9360                      DNSv6ServerAddr[0].nxd_ip_version = 0x6;
   9361                      DNSv6ServerAddr[0].nxd_ip_address.v6[0] = nwParams.ipv6.primaryDnsSrvrAddr[0];
   9362                      DNSv6ServerAddr[0].nxd_ip_address.v6[1] = nwParams.ipv6.primaryDnsSrvrAddr[1];
   9363                      DNSv6ServerAddr[0].nxd_ip_address.v6[2] = nwParams.ipv6.primaryDnsSrvrAddr[2];
   9364                      DNSv6ServerAddr[0].nxd_ip_address.v6[3] = nwParams.ipv6.primaryDnsSrvrAddr[3];
   9365                      
   9366                      
   9367                      DNSv6ServerAddr[1].nxd_ip_version = 0x6;
   9368                      DNSv6ServerAddr[1].nxd_ip_address.v6[0] = nwParams.ipv6.secndryDnsSrvrAddr[0];
   9369                      DNSv6ServerAddr[1].nxd_ip_address.v6[1] = nwParams.ipv6.secndryDnsSrvrAddr[1];
   9370                      DNSv6ServerAddr[1].nxd_ip_address.v6[2] = nwParams.ipv6.secndryDnsSrvrAddr[2];
   9371                      DNSv6ServerAddr[1].nxd_ip_address.v6[3] = nwParams.ipv6.secndryDnsSrvrAddr[3];
   9372          
   9373                      status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[0]);
   9374                      status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[1]);
   9375          
   9376                  S2W_DNS_CLIENT_FALGS |= S2W_DNSv6_SERVER_SET;
   9377              }
   9378              
   9379             
   9380             temp = ptr;
   9381             p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   9382            
   9383            
   9384              if(p == NULL)
   9385                return S2W_FAILURE;
   9386            
   9387              if(!(S2W_DNS_CLIENT_FALGS & S2W_DNSv4_SERVER_SET))
   9388               return S2W_FAILURE;
   9389            
   9390              
   9391              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   9392              if(p != NULL)
   9393              {
   9394            
   9395                /* Netx API doesnt support this. Use this when available. */
   9396                status = AppS2wParse_Int(p, &retry);
   9397                if (status != S2W_SUCCESS)
   9398                  return S2W_EINVAL;
   9399              }
   9400              
   9401              timeout = S2W_DNS_REQ_DEF_TIME_OUT;
   9402              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   9403              if(p != NULL)
   9404              {  
   9405                status = AppS2wParse_Int(p, &timeout);
   9406                if (status != S2W_SUCCESS)
   9407                  return S2W_EINVAL;
   9408              }
   9409              
   9410              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   9411              if(p != NULL)
   9412              {
   9413                /* Netx Doesnt have any cache */
   9414                status = AppS2wParse_Int(p, &clearCache);
   9415                if (status != S2W_SUCCESS)
   9416                  return S2W_EINVAL;
   9417              }
   9418          
   9419          
   9420              status = nxd_dns_host_by_name_get(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,(UINT8*)temp, &host_ipduo_address, timeout*100, 0x6);
   9421              if (status != S2W_SUCCESS)
   9422              return S2W_FAILURE;
   9423          
   9424              S2w_Printf("\r\n%x:%x:%x:%x:%x:%x:%x:%x\r\n",*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+1),*((UINT16*)host_ipduo_address.nxd_ip_address.v6),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+3),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+2),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+5),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+4),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+7),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+6));    
   9425              
   9426              return S2W_SUCCESS;
   9427          }
   9428          
   9429          #endif
   9430          #endif //S2W_DNS_CLIENT
   9431          

   \                                 In section .text, align 2, keep-with-next
   9432          UINT8
   9433          AppS2wCmd_PowerSaveStby(UINT8 *ptr)
   9434          {
   \                     AppS2wCmd_PowerSaveStby:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   9435              UINT8 status;
   9436              UINT32 dtime=0;
   \   00000004   0x2000             MOVS     R0,#+0
   9437              ULONG64 time=0;
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xE9CD 0x0102      STRD     R0,R1,[SP, #+8]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   9438              S2W_ALARM_INFO_T alarm;
   9439              UINT8 *p;
   9440              memset(&alarm,0,sizeof(S2W_ALARM_INFO_T));
   \   0000000E   0x2204             MOVS     R2,#+4
   \   00000010   0xA800             ADD      R0,SP,#+0
   \   00000012   0x.... 0x....      BL       memset
   9441              p = AppS2wParse_NextParamGet(&ptr);
   \   00000016   0x.... 0x....      BL       ?Subroutine30
   9442              if (!p)
   \                     ??CrossCallReturnLabel_83:
   \   0000001A   0xB908             CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_0
   9443              {
   9444                  return S2W_EINVAL;
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xE031             B.N      ??AppS2wCmd_PowerSaveStby_1
   9445              }
   9446          
   9447              status = AppS2wParse_64BitNumber(p, &time);
   \                     ??AppS2wCmd_PowerSaveStby_0:
   \   00000020   0xA902             ADD      R1,SP,#+8
   \   00000022   0x.... 0x....      BL       AppS2wParse_64BitNumber
   9448              if (status != S2W_SUCCESS)
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD12C             BNE.N    ??AppS2wCmd_PowerSaveStby_1
   9449              {
   9450                  return status;
   9451              }
   9452              memset(&alarm,0,sizeof(alarm));
   \   0000002A   0x.... 0x....      BL       ?Subroutine9
   9453              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_13:
   \   0000002E   0x.... 0x....      BL       ?Subroutine30
   9454              if (p)
   \                     ??CrossCallReturnLabel_82:
   \   00000032   0xB1E0             CBZ.N    R0,??AppS2wCmd_PowerSaveStby_2
   9455              {
   9456                  if (*p != '\0')
   \   00000034   0x7801             LDRB     R1,[R0, #+0]
   \   00000036   0xB111             CBZ.N    R1,??AppS2wCmd_PowerSaveStby_3
   9457                  {
   9458                      status = AppS2wParse_Int(p, &dtime);
   \   00000038   0x.... 0x....      BL       ?Subroutine52
   9459                      if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_320:
   \   0000003C   0xBB10             CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
   9460                      {
   9461                          return status;
   9462                      }
   9463                  }
   9464          
   9465                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_PowerSaveStby_3:
   \   0000003E   0x.... 0x....      BL       ?Subroutine30
   9466                  if (p)
   \                     ??CrossCallReturnLabel_81:
   \   00000042   0xB1A0             CBZ.N    R0,??AppS2wCmd_PowerSaveStby_2
   9467                  {
   9468                      if (*p != '\0')
   \   00000044   0x7801             LDRB     R1,[R0, #+0]
   \   00000046   0xB129             CBZ.N    R1,??AppS2wCmd_PowerSaveStby_4
   9469                      {
   9470                          status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
   \   00000048   0x.... 0x....      BL       ?Subroutine59
   9471                          if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_367:
   \   0000004C   0xB9D0             CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
   9472                          {
   9473                              return status;
   9474                          }
   9475                          alarm.alarm1Valid = 1;
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xF88D 0x0000      STRB     R0,[SP, #+0]
   9476          
   9477                      }
   9478                      p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_PowerSaveStby_4:
   \   00000054   0x.... 0x....      BL       ?Subroutine30
   9479                      if (p)
   \                     ??CrossCallReturnLabel_80:
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xBF1C             ITT      NE 
   \   0000005C   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000005E   0x2900             CMPNE    R1,#+0
   9480                      {
   9481                          if (*p != '\0')
   \   00000060   0xD005             BEQ.N    ??AppS2wCmd_PowerSaveStby_2
   9482                          {
   9483                              status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
   \   00000062   0x.... 0x....      BL       ?Subroutine61
   9484                              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_387:
   \   00000066   0xB968             CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
   9485                              {
   9486                                  return status;
   9487                              }
   9488                              alarm.alarm2Valid = 1;
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0xF88D 0x0002      STRB     R0,[SP, #+2]
   9489                          }
   9490                      }
   9491          
   9492                  }
   9493          
   9494              }
   9495              status = AppS2wHal_PsStbyRequest(time, dtime, &alarm);
   \                     ??AppS2wCmd_PowerSaveStby_2:
   \   0000006E   0xE9DD 0x0102      LDRD     R0,R1,[SP, #+8]
   \   00000072   0x9A01             LDR      R2,[SP, #+4]
   \   00000074   0xAB00             ADD      R3,SP,#+0
   \   00000076   0x.... 0x....      BL       AppS2wHal_PsStbyRequest
   9496              if(status == S2W_SUCCESS)
   \   0000007A   0xB918             CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
   9497              {
   9498                  stbySuccess =1;
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable473
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x700A             STRB     R2,[R1, #+0]
   9499              }
   9500              return status;
   \                     ??AppS2wCmd_PowerSaveStby_1:
   \   00000084   0xB005             ADD      SP,SP,#+20
   \   00000086   0xBD00             POP      {PC}             ;; return
   9501          
   9502          }
   9503          
   9504          
   9505          
   9506          /**
   9507           ******************************************************************
   9508           * @ingroup S2w-Application
   9509           * @brief S2w nw context store function.
   9510           *    This function sores the nw context to the flash Basically this
   9511                function stores both L2 and L3 layer information..
   9512           * @retval S2W_SUCCESS - operation successful.
   9513           * @retval S2W_LINK_LOST_EVT - operation failure- not connected to wlan.
   9514           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   9515          PUBLIC UINT8
   9516          AppS2wCmd_NwConnStore(UINT8 *ptr)
   9517          {
   9518          	if (*ptr)
   \                     AppS2wCmd_NwConnStore:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x.... 0x....      BEQ.W    AppS2wHal_NwContextStore
   9519          		 return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x4770             BX       LR
   9520          	else 
   9521          		 return AppS2wHal_NwContextStore();
   9522          
   9523          }
   9524          
   9525          /**
   9526           ******************************************************************
   9527           * @ingroup S2w-Application
   9528           * @brief S2w nw context restore function.
   9529           *    This function restore the nw connection. This function initialize the
   9530           *    L3 layer with the parameter stored in the flash by store function.
   9531           *    This function is useful to connect to the wlan without association after
   9532                the system comes out from standby.
   9533           * @retval S2W_SUCCESS - operation successful.
   9534           * @retval S2W_FAILURE - operation failure.
   9535           ******************************************************************/
   9536           

   \                                 In section .text, align 2, keep-with-next
   9537          PUBLIC UINT8
   9538          AppS2wCmd_NwConnRestore(UINT8 *ptr)
   9539          {
   9540          	if (*ptr)
   \                     AppS2wCmd_NwConnRestore:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x2800             CMP      R0,#+0
   \   00000004   0xBF08             IT       EQ 
   \   00000006   0x.... 0x....      BEQ.W    AppS2wHal_NwContextRestore
   9541          		 return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0x4770             BX       LR
   9542          	 else
   9543          		 return AppS2wHal_NwContextRestore();
   9544          
   9545                  }
   9546          
   9547          
   9548          
   9549          #ifdef  S2W_NCM_SUPPORT_ENABLE

   \                                 In section .bss, align 4
   9550          UINT32 ncmautoconnectcount=0;
   9551          BOOL ncmAutoMode=0;
   \                     ncmAutoMode:
   \   00000000                      DS8 1
   \   00000001                      DS8 3
   \                     ncmautoconnectcount:
   \   00000004                      DS8 4

   \                                 In section .text, align 2, keep-with-next
   9552          VOID 
   9553          AppS2w_NcmL3ConnProcess()
   9554          	
   9555          {
   \                     AppS2w_NcmL3ConnProcess:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   9556          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   9557          	GSN_NWIF_IP_CONFIG_T nwParams;
   9558          	UINT32 message;
   9559          	GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   \   00000004   0x....             LDR.N    R5,??DataTable464_1
   \   00000006   0x6828             LDR      R0,[R5, #+0]
   \   00000008   0xB0A6             SUB      SP,SP,#+152
   \   0000000A   0xF241 0x4850      MOVW     R8,#+5200
   \   0000000E   0xA900             ADD      R1,SP,#+0
   \   00000010   0x4440             ADD      R0,R8,R0
   \   00000012   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   9560          	/* 
   9561          	 	check the ip  is same as old one . And current ip address is not zero 
   9562          	*/
   9563          	if(((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
   9564          		(s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
   9565          		 &&((s2wappMainTaskCtxt->ipaddr != 0) && (s2wappMainTaskCtxt->subnetMask != 0))   
   9566          	)
   \   00000016   0x6828             LDR      R0,[R5, #+0]
   \   00000018   0x9B03             LDR      R3,[SP, #+12]
   \   0000001A   0x.... 0x....      LDR.W    R9,??DataTable470_1
   \   0000001E   0x.... 0x....      LDR.W    R7,??DataTable472
   \   00000022   0xF247 0x5124      MOVW     R1,#+29988
   \   00000026   0x180E             ADDS     R6,R1,R0
   \   00000028   0x580A             LDR      R2,[R1, R0]
   \   0000002A   0x429A             CMP      R2,R3
   \   0000002C   0xBF02             ITTT     EQ 
   \   0000002E   0xF8D6 0xE004      LDREQ    LR,[R6, #+4]
   \   00000032   0x9C04             LDREQ    R4,[SP, #+16]
   \   00000034   0x45A6             CMPEQ    LR,R4
   \   00000036   0xD010             BEQ.N    ??AppS2w_NcmL3ConnProcess_0
   \   00000038   0x2A00             CMP      R2,#+0
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x6872             LDRNE    R2,[R6, #+4]
   \   0000003E   0x2A00             CMPNE    R2,#+0
   \   00000040   0xD00B             BEQ.N    ??AppS2w_NcmL3ConnProcess_0
   9567          	{
   9568          		// update the values first
   9569          		s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
   \   00000042   0x500B             STR      R3,[R1, R0]
   9570          		s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
   \   00000044   0x9904             LDR      R1,[SP, #+16]
   \   00000046   0x6071             STR      R1,[R6, #+4]
   9571          		if(s2wappMainTaskCtxt->dpSleep )
   \   00000048   0xF646 0x21FC      MOVW     R1,#+27388
   \   0000004C   0x5808             LDR      R0,[R1, R0]
   \   0000004E   0xB108             CBZ.N    R0,??AppS2w_NcmL3ConnProcess_1
   9572          		{
   9573          			AppS2w_ExitDpSleep();
   \   00000050   0x.... 0x....      BL       AppS2w_ExitDpSleep
   9574          		}
   9575          		/*
   9576          			if roaming cfg is to keep L4 connection , then invoke seperate status notify API
   9577          		*/
   9578          #ifdef S2W_NCM_ROAMING_SUPPORT 
   9579          		if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
   9580             	 		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	\
   9581          			AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
   9582          		else		
   9583          #endif
   9584          			AppS2wProcess_DhcpIpChangeNotify();
   \                     ??AppS2w_NcmL3ConnProcess_1:
   \   00000054   0x.... 0x....      BL       AppS2wProcess_DhcpIpChangeNotify
   \   00000058   0xE034             B.N      ??AppS2w_NcmL3ConnProcess_2
   9585          	 }
   9586          	 else 
   9587          	 {	
   9588               	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2w_NcmL3ConnProcess_0:
   \   0000005A   0x.... 0x....      LDR.W    R4,??DataTable472_1
   \   0000005E   0xF04F 0x31FF      MOV      R1,#-1
   \   00000062   0x4620             MOV      R0,R4
   \   00000064   0x.... 0x....      BL       GsnOsal_SemAcquire
   9589          		if(!s2wAutoConnState )
   \   00000068   0x.... 0x....      LDR.W    R6,??DataTable473_1
   \   0000006C   0x7830             LDRB     R0,[R6, #+0]
   \   0000006E   0xB908             CBNZ.N   R0,??AppS2w_NcmL3ConnProcess_3
   9590              	{
   9591          			AppS2wHdrAndIpv4_Print();
   \   00000070   0x.... 0x....      BL       AppS2wHdrAndIpv4_Print
   9592              	}			
   9593          		if(pAppRtcLtchInfo->arpCacheEn && pAppRtcLtchInfo->arpRecCount != 0 )
   \                     ??AppS2w_NcmL3ConnProcess_3:
   \   00000074   0x.... 0x....      LDR.W    R0,??DataTable473_2  ;; 0x41010194
   \   00000078   0x7801             LDRB     R1,[R0, #+0]
   \   0000007A   0x2900             CMP      R1,#+0
   \   0000007C   0xBF1C             ITT      NE 
   \   0000007E   0x7882             LDRBNE   R2,[R0, #+2]
   \   00000080   0x2A00             CMPNE    R2,#+0
   \   00000082   0xD006             BEQ.N    ??AppS2w_NcmL3ConnProcess_4
   9594          			nx_arp_table_set(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl, &pAppRtcLtchInfo->arpTablebuf[0], 
   9595          							pAppRtcLtchInfo->arpRecCount);
   \   00000084   0x6828             LDR      R0,[R5, #+0]
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable473_3  ;; 0x41010164
   \   0000008A   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000008E   0x.... 0x....      BL       nx_arp_table_set
   9596              	 nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
   \                     ??AppS2w_NcmL3ConnProcess_4:
   \   00000092   0x.... 0x....      BL       ?Subroutine130
   9597          		 
   9598             	 	if((!s2wAutoConnState ) &&( !profile_params.autoConnect))
   \                     ??CrossCallReturnLabel_604:
   \   00000096   0x7830             LDRB     R0,[R6, #+0]
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xBF04             ITT      EQ 
   \   0000009C   0x7938             LDRBEQ   R0,[R7, #+4]
   \   0000009E   0x2800             CMPEQ    R0,#+0
   \   000000A0   0xD10D             BNE.N    ??AppS2w_NcmL3ConnProcess_5
   9599              	{
   9600             	 
   9601          #ifdef S2W_ASYNC_MSG           
   9602                      if(s2wCurrent.asyncMsgFormat)
   \   000000A2   0xF899 0x01D8      LDRB     R0,[R9, #+472]
   \   000000A6   0xB130             CBZ.N    R0,??AppS2w_NcmL3ConnProcess_6
   9603                      {
   9604                           S2w_Printf("\r\n");
   \   000000A8   0x.... 0x....      BL       ?Subroutine91
   9605                           AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ASSO_SUCCESS_MSG, 0);
   \                     ??CrossCallReturnLabel_489:
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x200C             MOVS     R0,#+12
   \   000000B0   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   000000B4   0xE003             B.N      ??AppS2w_NcmL3ConnProcess_5
   9606                      }
   9607                      else
   9608          #endif
   9609                      {
   9610                           AppS2wProcess_StatusNotify(S2W_ASSO_SUCCESS_MSG, 0);
   \                     ??AppS2w_NcmL3ConnProcess_6:
   \   000000B6   0x2100             MOVS     R1,#+0
   \   000000B8   0x2012             MOVS     R0,#+18
   \   000000BA   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   9611                  	}
   9612          		}
   9613          		GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2w_NcmL3ConnProcess_5:
   \   000000BE   0x4620             MOV      R0,R4
   \   000000C0   0x.... 0x....      BL       GsnOsal_SemRelease
   9614          	}
   9615                      
   9616              // before start the L4 connection for AP mode start the dhcp/dns server
   9617              if(ncmAutoMode)// AP mode
   \                     ??AppS2w_NcmL3ConnProcess_2:
   \   000000C4   0x.... 0x....      LDR.W    R4,??DataTable473_4
   \   000000C8   0x7820             LDRB     R0,[R4, #+0]
   \   000000CA   0xB108             CBZ.N    R0,??AppS2w_NcmL3ConnProcess_7
   9618              {
   9619                   s2w_StartDhcpDnsServer();
   \   000000CC   0x.... 0x....      BL       s2w_StartDhcpDnsServer
   9620          	}
   9621          	if(s2wCurrent.ncmAutoLvl)
   \                     ??AppS2w_NcmL3ConnProcess_7:
   \   000000D0   0xF899 0x032B      LDRB     R0,[R9, #+811]
   \   000000D4   0x.... 0x....      LDR.W    R10,??DataTable474
   \   000000D8   0xF509 0x76D4      ADD      R6,R9,#+424
   \   000000DC   0xB158             CBZ.N    R0,??AppS2w_NcmL3ConnProcess_8
   9622          	{
   9623                 message = APP_EVENT_NCM_L4CONNECT;
   9624          	   /*
   9625          	   		Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
   9626          	   		Made auto connection l4 connection retey count to infinite  and never decremts the counter
   9627          
   9628          	   */
   9629          	   if(1 == profile_params.autoConnect)
   \   000000DE   0x7938             LDRB     R0,[R7, #+4]
   \   000000E0   0x2801             CMP      R0,#+1
   \   000000E2   0xBF0C             ITE      EQ 
   \   000000E4   0xF04F 0x30FF      MOVEQ    R0,#-1
   \   000000E8   0x8D70             LDRHNE   R0,[R6, #+42]
   9630          	   {
   9631          		   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
   9632          	   }
   9633          	   else
   9634          	   {
   9635                 ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
   \   000000EA   0x6060             STR      R0,[R4, #+4]
   9636          	   }
   9637                 (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   000000EC   0x6829             LDR      R1,[R5, #+0]
   \   000000EE   0xF8DA 0x2000      LDR      R2,[R10, #+0]
   \   000000F2   0x2018             MOVS     R0,#+24
   \   000000F4   0x4790             BLX      R2
   9638          	}
   9639          
   9640          #ifdef S2W_NCM_ROAMING_SUPPORT 
   9641          	if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable)
   9642            	{	    
   9643          		GsnNcm_RoamStart(&s2wappMainTaskCtxt->appNwConnMgrCtx,s2wCurrent.regDomain);
   9644            	}
   9645          #endif /* S2W_NCM_ROAMING_SUPPORT */
   9646          	if(pAppRtcLtchInfo->grpProvVerify == 1)
   \                     ??AppS2w_NcmL3ConnProcess_8:
   \   000000F6   0x.... 0x....      LDR.W    R0,??DataTable476  ;; 0x4101009c
   \   000000FA   0x7800             LDRB     R0,[R0, #+0]
   \   000000FC   0x2801             CMP      R0,#+1
   \   000000FE   0xD104             BNE.N    ??AppS2w_NcmL3ConnProcess_9
   9647          	{
   9648          		message = APP_EVENT_GRPPROV_VERIFICATION;
   9649          		(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000100   0x6829             LDR      R1,[R5, #+0]
   \   00000102   0xF8DA 0x2000      LDR      R2,[R10, #+0]
   \   00000106   0x2029             MOVS     R0,#+41
   \   00000108   0x4790             BLX      R2
   9650          	}
   9651          	/*Set dns server ip*/
   9652          	if((0 == ncmAutoMode) && (1 == nwParams.ipv4.staticIp))
   \                     ??AppS2w_NcmL3ConnProcess_9:
   \   0000010A   0x7820             LDRB     R0,[R4, #+0]
   \   0000010C   0x2800             CMP      R0,#+0
   \   0000010E   0xBF04             ITT      EQ 
   \   00000110   0x9802             LDREQ    R0,[SP, #+8]
   \   00000112   0x2801             CMPEQ    R0,#+1
   \   00000114   0xD11E             BNE.N    ??AppS2w_NcmL3ConnProcess_10
   9653          	{
   9654          		UINT32 dnsSrvrAddr;
   9655          
   9656          		dnsSrvrAddr  = s2wCurrent.dns1[3] << 24 | s2wCurrent.dns1[2] << 16 |
   9657          						s2wCurrent.dns1[1] << 8 | s2wCurrent.dns1[0];
   9658          		
   9659          		GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx, dnsSrvrAddr , 0);
   \   00000116   0x78B1             LDRB     R1,[R6, #+2]
   \   00000118   0x78F0             LDRB     R0,[R6, #+3]
   \   0000011A   0x0409             LSLS     R1,R1,#+16
   \   0000011C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000120   0x7871             LDRB     R1,[R6, #+1]
   \   00000122   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000126   0xF899 0x11A8      LDRB     R1,[R9, #+424]
   \   0000012A   0x4301             ORRS     R1,R1,R0
   \   0000012C   0x6828             LDR      R0,[R5, #+0]
   \   0000012E   0x2200             MOVS     R2,#+0
   \   00000130   0x4440             ADD      R0,R8,R0
   \   00000132   0x.... 0x....      BL       GsnNwif_DnsServerAdd
   9660          
   9661          		dnsSrvrAddr  = s2wCurrent.dns2[3] << 24 | s2wCurrent.dns2[2] << 16 |
   9662          						s2wCurrent.dns2[1] << 8 | s2wCurrent.dns2[0];
   9663          
   9664          		GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx, dnsSrvrAddr , 1);
   \   00000136   0x79B1             LDRB     R1,[R6, #+6]
   \   00000138   0x79F0             LDRB     R0,[R6, #+7]
   \   0000013A   0x0409             LSLS     R1,R1,#+16
   \   0000013C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000140   0x7971             LDRB     R1,[R6, #+5]
   \   00000142   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000146   0x7931             LDRB     R1,[R6, #+4]
   \   00000148   0x4301             ORRS     R1,R1,R0
   \   0000014A   0x6828             LDR      R0,[R5, #+0]
   \   0000014C   0x2201             MOVS     R2,#+1
   \   0000014E   0x4440             ADD      R0,R8,R0
   \   00000150   0x.... 0x....      BL       GsnNwif_DnsServerAdd
   9665          	}
   9666          }	
   \                     ??AppS2w_NcmL3ConnProcess_10:
   \   00000154   0xB026             ADD      SP,SP,#+152
   \   00000156   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   9667          

   \                                 In section .text, align 4, keep-with-next
   9668          VOID
   9669          AppS2wNetConnMgr_Cb(VOID* ctext, VOID* pNcm, GSN_NCM_NOTIF_ID_T status)
   9670          {
   \                     AppS2wNetConnMgr_Cb:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   9671          	//APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   9672              switch(status)
   \   00000004   0x....             LDR.N    R4,??DataTable464_1
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable471_2
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x.... 0x....      LDR.W    R9,??DataTable474
   \   00000010   0x.... 0x....      LDR.W    R10,??DataTable473_4
   \   00000014   0x.... 0x....      LDR.W    R11,??DataTable470_1
   \   00000018   0x.... 0x....      LDR.W    R8,??DataTable476_2
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable473_1
   \   00000020   0xB0A7             SUB      SP,SP,#+156
   \   00000022   0xF247 0x5624      MOVW     R6,#+29988
   \   00000026   0xF646 0x27FC      MOVW     R7,#+27388
   \   0000002A   0x2A08             CMP      R2,#+8
   \   0000002C   0xD834             BHI.N    ??AppS2wNetConnMgr_Cb_1
   \   0000002E   0xE8DF 0xF002      TBB      [PC, R2]
   \                     ??AppS2wNetConnMgr_Cb_0:
   \   00000032   0x05 0x0A          DC8      0x5,0xA,0x34,0x37
   \              0x34 0x37    
   \   00000036   0x93 0x8E          DC8      0x93,0x8E,0x93,0x43
   \              0x93 0x43    
   \   0000003A   0x79 0x00          DC8      0x79,0x0
   9673              {
   9674                  case GSN_NCM_NOTIF_ID_L2_CONNECTED:
   9675                  {
   9676                      s2wLinkState = S2W_LINK_STATE_CONNECTED;
   \                     ??AppS2wNetConnMgr_Cb_2:
   \   0000003C   0x2201             MOVS     R2,#+1
   \   0000003E   0x700A             STRB     R2,[R1, #+0]
   9677          #if 0
   9678                      if(ncmAutoMode == 0) // client case only
   9679                      {
   9680                          if(appRtcMemData.KeepAliveIntrvl == 0)
   9681                          {
   9682                              appRtcMemData.KeepAliveIntrvl = S2W_DEFAULT_KEEP_ALIVE_INTRVL;
   9683                          }
   9684                          AppS2wHal_PsPollIntervelset(appRtcMemData.KeepAliveIntrvl);
   9685                      }
   9686          #endif
   9687          			UINT32 message = APP_EVENT_NCM_L2CONNECT;
   9688          			(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000040   0x4601             MOV      R1,R0
   \   00000042   0x2017             MOVS     R0,#+23
   \   00000044   0xE06A             B.N      ??AppS2wNetConnMgr_Cb_3
   9689                  }
   9690                  break;
   9691                  case GSN_NCM_NOTIF_ID_L2_CONNECT_FAIL:
   9692                  break;
   9693                  case GSN_NCM_NOTIF_ID_L2_DISCONNECTED:
   9694          
   9695                  {
   9696          			s2wLinkState = S2W_LINK_STATE_DISCONNECTED;
   \                     ??AppS2wNetConnMgr_Cb_4:
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x700A             STRB     R2,[R1, #+0]
   9697                     	if(s2wappMainTaskCtxt->dpSleep )
   \   0000004A   0x5838             LDR      R0,[R7, R0]
   \   0000004C   0xB108             CBZ.N    R0,??AppS2wNetConnMgr_Cb_5
   9698                     	{
   9699                     		AppS2w_ExitDpSleep();
   \   0000004E   0x.... 0x....      BL       AppS2w_ExitDpSleep
   9700                     	}
   9701                     	if(s2wCurrent.ncmAutoLvl == 1)
   \                     ??AppS2wNetConnMgr_Cb_5:
   \   00000052   0xF89B 0x032B      LDRB     R0,[R11, #+811]
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xBF04             ITT      EQ 
   \   0000005A   0x.... 0x....      LDREQ.W  R0,??DataTable476_3
   \   0000005E   0x.... 0x....      BLEQ     AppS2wHal_TimerStop
   9702                     		AppS2wHal_TimerStop(&acNcmTimer);
   9703                     // if auto connection is up then make the gpio 19 low
   9704                      if((s2wAutoConnState ) && (s2wIsAutoconnected))
   \   00000062   0x7828             LDRB     R0,[R5, #+0]
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xBF1F             ITTTT    NE 
   \   00000068   0xF898 0x0000      LDRBNE   R0,[R8, #+0]
   \   0000006C   0x2800             CMPNE    R0,#+0
   \   0000006E   0x2000             MOVNE    R0,#+0
   \   00000070   0x.... 0x....      BLNE     S2w_AsyncMsgGpioOp
   9705                      {
   9706                           S2w_AsyncMsgGpioOp(0);
   9707          			}
   9708          		   	/*
   9709          		   		if roaming is enable and l4 maintain flag is set then donot close l4 connections,
   9710          		   	*/
   9711          #ifdef S2W_NCM_ROAMING_SUPPORT            
   9712          		  	if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
   9713          		   	  s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
   9714          		  	{	
   9715          				AppS2wRoam_SatusNotify(S2W_DISASSO_EVT,S2W_ASYNC_DISASSO_EVT);
   9716          		 	}
   9717          		  	else
   9718          #endif                          
   9719          			{
   9720          	           AppS2wProcess_EventNotify(0);
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0x.... 0x....      BL       AppS2wProcess_EventNotify
   9721          			}	
   9722          			s2wappMainTaskCtxt->ipaddr =0;
   \   0000007A   0x6820             LDR      R0,[R4, #+0]
   \   0000007C   0x2100             MOVS     R1,#+0
   \   0000007E   0x5031             STR      R1,[R6, R0]
   9723          			s2wappMainTaskCtxt->subnetMask=0;
   \   00000080   0x1830             ADDS     R0,R6,R0
   \   00000082   0x6041             STR      R1,[R0, #+4]
   9724          			/* in Limites Ap mode stop the dhcp/dns servers
   9725          			 */
   9726          			if(ncmAutoMode)// AP mode
   \   00000084   0xF89A 0x0000      LDRB     R0,[R10, #+0]
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD065             BEQ.N    ??AppS2wNetConnMgr_Cb_6
   9727          			{
   9728          #ifdef S2W_DHCP_SERVER_ENABLE
   9729                          GsnDhcpSrvr_Stop(&dhcpSrvr);
   \   0000008C   0x.... 0x....      BL       ?Subroutine137
   9730          #ifdef S2W_DNS_SERVER_ENABLE
   9731                          GsnDnsSrvr_Stop(&dnsServer);
   \                     ??CrossCallReturnLabel_625:
   \   00000090   0xF20B 0x4024      ADDW     R0,R11,#+1060
   \   00000094   0x.... 0x....      BL       GsnDnsSrvr_Stop
   \                     ??AppS2wNetConnMgr_Cb_1:
   \   00000098   0xE05E             B.N      ??AppS2wNetConnMgr_Cb_6
   9732          #endif
   9733          #endif
   9734          	        }
   9735                  }
   9736          
   9737                  break;
   9738                  
   9739                  case GSN_NCM_NOTIF_ID_DHCP_STOP:
   9740                    {
   9741                    
   9742                     //AppMainCtx_TaskNotify(APP_EVENT_DHCP_STOP_REQUEST);
   9743                    }          
   9744                    break;
   9745                  case GSN_NCM_NOTIF_ID_L3_CONNECTED:
   9746          	        AppS2w_NcmL3ConnProcess();
   \                     ??AppS2wNetConnMgr_Cb_7:
   \   0000009A   0x.... 0x....      BL       AppS2w_NcmL3ConnProcess
   9747              	    break;
   \   0000009E   0xE05B             B.N      ??AppS2wNetConnMgr_Cb_6
   9748                  case GSN_NCM_NOTIF_ID_L3_DISCONNECTED:
   9749              	{
   9750                      if(s2wappMainTaskCtxt->dpSleep )
   \                     ??AppS2wNetConnMgr_Cb_8:
   \   000000A0   0x5838             LDR      R0,[R7, R0]
   \   000000A2   0xB108             CBZ.N    R0,??AppS2wNetConnMgr_Cb_9
   9751                      {
   9752                      	AppS2w_ExitDpSleep();
   \   000000A4   0x.... 0x....      BL       AppS2w_ExitDpSleep
   9753                      }
   9754          #ifdef S2W_NCM_ROAMING_SUPPORT             
   9755          			if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
   9756          		   		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
   9757          		  	{
   9758          		  		AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
   9759          		  	}
   9760          		  	else	
   9761          #endif                          
   9762          			{
   9763          	            AppS2wProcess_DhcpFailNotify();
   \                     ??AppS2wNetConnMgr_Cb_9:
   \   000000A8   0x.... 0x....      BL       AppS2wProcess_DhcpFailNotify
   9764          				s2wappMainTaskCtxt->ipaddr=0;
   \   000000AC   0x6820             LDR      R0,[R4, #+0]
   \   000000AE   0x2100             MOVS     R1,#+0
   \   000000B0   0x5031             STR      R1,[R6, R0]
   9765          				s2wappMainTaskCtxt->subnetMask=0;
   \   000000B2   0x1830             ADDS     R0,R6,R0
   \   000000B4   0x6041             STR      R1,[R0, #+4]
   9766          			}
   9767          		}
   9768                  break;
   \   000000B6   0xE04F             B.N      ??AppS2wNetConnMgr_Cb_6
   9769          		case GSN_NCM_NOTIF_ID_L3_RENEWSUCCESS :
   9770                  {
   9771          			GSN_NWIF_IP_CONFIG_T nwParams;
   9772          			GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
   \                     ??AppS2wNetConnMgr_Cb_10:
   \   000000B8   0x.... 0x....      BL       ?Subroutine77
   9773          			/* 
   9774          			 	check the ip  is same as old one . And current ip address is not zero 
   9775          			*/
   9776          			if(s2wappMainTaskCtxt->dpSleep )
   \                     ??CrossCallReturnLabel_446:
   \   000000BC   0x6820             LDR      R0,[R4, #+0]
   \   000000BE   0x5838             LDR      R0,[R7, R0]
   \   000000C0   0xB108             CBZ.N    R0,??AppS2wNetConnMgr_Cb_11
   9777          			{
   9778          				AppS2w_ExitDpSleep();
   \   000000C2   0x.... 0x....      BL       AppS2w_ExitDpSleep
   9779          			}
   9780          		
   9781          			if(((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
   9782          				(s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
   9783          				 &&((s2wappMainTaskCtxt->ipaddr != 0) && (s2wappMainTaskCtxt->subnetMask != 0))   
   9784          			)
   \                     ??AppS2wNetConnMgr_Cb_11:
   \   000000C6   0x6821             LDR      R1,[R4, #+0]
   \   000000C8   0x9A03             LDR      R2,[SP, #+12]
   \   000000CA   0x5873             LDR      R3,[R6, R1]
   \   000000CC   0x.... 0x....      LDR.W    R5,??DataTable472
   \   000000D0   0x1870             ADDS     R0,R6,R1
   \   000000D2   0xF04F 0x38FF      MOV      R8,#-1
   \   000000D6   0x4293             CMP      R3,R2
   \   000000D8   0xBF02             ITTT     EQ 
   \   000000DA   0x6847             LDREQ    R7,[R0, #+4]
   \   000000DC   0xF8DD 0xE010      LDREQ    LR,[SP, #+16]
   \   000000E0   0x4577             CMPEQ    R7,LR
   \   000000E2   0xD009             BEQ.N    ??AppS2wNetConnMgr_Cb_12
   \   000000E4   0xB14B             CBZ.N    R3,??AppS2wNetConnMgr_Cb_13
   \   000000E6   0x6843             LDR      R3,[R0, #+4]
   \   000000E8   0x2B00             CMP      R3,#+0
   \   000000EA   0xD035             BEQ.N    ??AppS2wNetConnMgr_Cb_6
   9785          			{
   9786          				// update the values first
   9787          				s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
   \   000000EC   0x5072             STR      R2,[R6, R1]
   9788          				s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
   \   000000EE   0x9904             LDR      R1,[SP, #+16]
   \   000000F0   0x6041             STR      R1,[R0, #+4]
   9789          				/*
   9790          					if roaming cfg is to keep L4 connection , then invoke seperate status notify API
   9791          				*/
   9792          #ifdef S2W_NCM_ROAMING_SUPPORT 
   9793          				if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
   9794          		   	 		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	\
   9795          					AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
   9796          				else		
   9797          #endif
   9798          					AppS2wProcess_DhcpIpChangeNotify();
   \   000000F2   0x.... 0x....      BL       AppS2wProcess_DhcpIpChangeNotify
   9799          			 
   9800          				 
   9801          				if(s2wCurrent.ncmAutoLvl)
   \   000000F6   0xE005             B.N      ??AppS2wNetConnMgr_Cb_14
   9802          				{
   9803                             UINT32 message = APP_EVENT_NCM_L4CONNECT;
   9804          					/*
   9805          						 Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
   9806          						 Made auto connection l4 connection retey count to infinite  and never decremts the counter
   9807          					
   9808          					*/
   9809          				   	if(1 == profile_params.autoConnect)
   9810          				   	{
   9811          					   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
   9812          				   	}
   9813          				   	else
   9814          				   	{
   9815                             		ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
   9816          				   	}
   9817                              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   9818          				}
   9819          				break;
   9820                        }
   9821          			  /*
   9822          			  	incase of previous renew were failure , start the L4 connect process.
   9823          			   */	
   9824          			  else if((s2wappMainTaskCtxt->ipaddr == 0) && (s2wappMainTaskCtxt->subnetMask == 0))
   \                     ??AppS2wNetConnMgr_Cb_12:
   \   000000F8   0xBB73             CBNZ.N   R3,??AppS2wNetConnMgr_Cb_6
   \                     ??AppS2wNetConnMgr_Cb_13:
   \   000000FA   0x6843             LDR      R3,[R0, #+4]
   \   000000FC   0xBB63             CBNZ.N   R3,??AppS2wNetConnMgr_Cb_6
   9825          			  {
   9826          				  s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
   \   000000FE   0x5072             STR      R2,[R6, R1]
   9827          				  s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
   \   00000100   0x9904             LDR      R1,[SP, #+16]
   \   00000102   0x6041             STR      R1,[R0, #+4]
   9828          				  if(s2wCurrent.ncmAutoLvl)
   \                     ??AppS2wNetConnMgr_Cb_14:
   \   00000104   0xF89B 0x032B      LDRB     R0,[R11, #+811]
   \   00000108   0xB330             CBZ.N    R0,??AppS2wNetConnMgr_Cb_6
   9829          			  	  {
   9830          				 	UINT32 message = APP_EVENT_NCM_L4CONNECT;
   9831          						/*
   9832          							 Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
   9833          							 Made auto connection l4 connection retey count to infinite  and never decremts the counter
   9834          						
   9835          						*/
   9836          						
   9837          					   	if(1 == profile_params.autoConnect)
   \   0000010A   0x7928             LDRB     R0,[R5, #+4]
   \   0000010C   0x2801             CMP      R0,#+1
   \   0000010E   0xBF18             IT       NE 
   \   00000110   0xF8BB 0x81D2      LDRHNE   R8,[R11, #+466]
   9838          					   	{
   9839          						   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
   9840          					   	}
   9841          					   	else
   9842          				   		{
   9843                             			ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
   9844          				   		}
   9845                              	(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000114   0x6821             LDR      R1,[R4, #+0]
   \   00000116   0xF8CA 0x8004      STR      R8,[R10, #+4]
   \   0000011A   0x2018             MOVS     R0,#+24
   \                     ??AppS2wNetConnMgr_Cb_3:
   \   0000011C   0xF8D9 0x2000      LDR      R2,[R9, #+0]
   \   00000120   0x4790             BLX      R2
   \   00000122   0xE019             B.N      ??AppS2wNetConnMgr_Cb_6
   9846          				  }
   9847          			  }
   9848          		}
   9849                  break;
   9850          		case GSN_NCM_NOTIF_ID_L3_CONNECT_FAIL:
   9851              	{
   9852                      if(s2wappMainTaskCtxt->dpSleep )
   \                     ??AppS2wNetConnMgr_Cb_15:
   \   00000124   0x5838             LDR      R0,[R7, R0]
   \   00000126   0xB108             CBZ.N    R0,??AppS2wNetConnMgr_Cb_16
   9853                      {
   9854                      	AppS2w_ExitDpSleep();
   \   00000128   0x.... 0x....      BL       AppS2w_ExitDpSleep
   9855                      }
   9856          		   	/*
   9857          		   		if roaming is enable and l4 maintain flag is set then donot close l4 connections,
   9858          		   	*/
   9859          #ifdef S2W_NCM_ROAMING_SUPPORT             
   9860          			if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
   9861          		   		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
   9862          		  	{
   9863          				AppS2wRoam_SatusNotify(S2W_ENOIP,S2W_ASYNC_DHCP_FAIL_EVT);			
   9864          		  	}
   9865          		  	else	
   9866          #endif                          
   9867          			{
   9868          				s2wappMainTaskCtxt->ipaddr=0;
   \                     ??AppS2wNetConnMgr_Cb_16:
   \   0000012C   0x6820             LDR      R0,[R4, #+0]
   \   0000012E   0x2100             MOVS     R1,#+0
   \   00000130   0x5031             STR      R1,[R6, R0]
   9869          				s2wappMainTaskCtxt->subnetMask=0;
   \   00000132   0x1830             ADDS     R0,R6,R0
   \   00000134   0x6041             STR      R1,[R0, #+4]
   9870          				// fix for issue no:5051, make the gpio 19 low for auto mode
   9871          				if((s2wAutoConnState ) && (s2wIsAutoconnected))
   \   00000136   0x7828             LDRB     R0,[R5, #+0]
   \   00000138   0x2800             CMP      R0,#+0
   \   0000013A   0xBF1F             ITTTT    NE 
   \   0000013C   0xF898 0x0000      LDRBNE   R0,[R8, #+0]
   \   00000140   0x2800             CMPNE    R0,#+0
   \   00000142   0x2000             MOVNE    R0,#+0
   \   00000144   0x.... 0x....      BLNE     S2w_AsyncMsgGpioOp
   9872          			    {
   9873          				    S2w_AsyncMsgGpioOp(0);
   9874          			    }
   9875          	            AppS2wProcess_DhcpFailNotify();
   \   00000148   0x.... 0x....      BL       AppS2wProcess_DhcpFailNotify
   9876          			}
   9877          		break;
   \   0000014C   0xE004             B.N      ??AppS2wNetConnMgr_Cb_6
   9878          		}
   9879          		case GSN_NCM_NOTIF_ID_STOP:
   9880          			GsnOsal_SemRelease(&s2wappMainTaskCtxt->ncmOpsync);
   \                     ??AppS2wNetConnMgr_Cb_17:
   \   0000014E   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   00000152   0x3008             ADDS     R0,R0,#+8
   \   00000154   0x.... 0x....      BL       GsnOsal_SemRelease
   9881                  break;
   9882          #if 0
   9883                  case GSN_NCM_L3CONNECT_FAILURE:
   9884                  break;
   9885                  case GSN_NCM_L3RENEW_SUCCESS:
   9886                       GsnNwIf_GratArpSend(&s2wappMainTaskCtxt->nwIf);
   9887                  break;
   9888                  case GSN_NCM_CPU_WAIT_DELAY:
   9889                  break;
   9890                  case GSN_NCM_GO_PS_MODE:
   9891                  break;
   9892                  case GSN_NCM_PROVISIONING:
   9893                  break;
   9894          #endif
   9895              }
   9896          }
   \                     ??AppS2wNetConnMgr_Cb_6:
   \   00000158   0xB027             ADD      SP,SP,#+156
   \   0000015A   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   9897          UINT8
   9898          AppS2wCmd_NcmAuto(UINT8* ptr)
   9899          {
   \                     AppS2wCmd_NcmAuto:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xF5AD 0x6DA3      SUB      SP,SP,#+1304
   9900              UINT8 status;
   9901              UINT8 *p,macStr[GSN_NWIF_HOST_NAME_MAX_LEN + 1];;
   9902              BOOL  enable=0,value =0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   9903              GSN_NCM_CONFIG_T gNwConnConfig;
   9904              UINT8 mac[6],macAddr[6];
   9905          	INT32 index;
   9906          	GSN_STATUS retVal; 
   9907          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();	
   9908          	//APP_RTC_SECNDRY_MEM_INFO_T *pAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   9909          
   9910              // to get the current status
   9911              if (ptr[0] == '?' && ptr[1] == '\0')
   \   0000000E   0xF646 0x5A50      MOVW     R10,#+27984
   \   00000012   0xF8DD 0x0518      LDR      R0,[SP, #+1304]
   \   00000016   0x.... 0x....      LDR.W    R8,??DataTable470_1
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0x283F             CMP      R0,#+63
   \   0000001E   0xD11F             BNE.N    ??AppS2wCmd_NcmAuto_0
   \   00000020   0xF8DD 0x0518      LDR      R0,[SP, #+1304]
   \   00000024   0x7840             LDRB     R0,[R0, #+1]
   \   00000026   0xB978             CBNZ.N   R0,??AppS2wCmd_NcmAuto_1
   \   00000028   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_454:
   \   0000002C   0xF81A 0x1000      LDRB     R1,[R10, R0]
   \   00000030   0x2901             CMP      R1,#+1
   \   00000032   0xD004             BEQ.N    ??AppS2wCmd_NcmAuto_2
   9912              {
   9913                   if(s2wappMainTaskCtxt->appNwConnMgrCtx.state != GSN_NCM_STATE_INITIALISED)// ncm started
   9914                   {
   9915                       S2w_Printf("\r\nNCM STARTED:%d\r\n",s2wappMainTaskCtxt->appNwConnMgrCtx.state);
   \   00000034   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNCM STARTED:%d\\r\\n">`
   \   00000038   0x.... 0x....      BL       S2w_Printf
   \   0000003C   0xE00E             B.N      ??AppS2wCmd_NcmAuto_3
   9916                   }
   9917                   else
   9918                   {
   9919                       S2w_Printf("\r\nNCM NOT STARTED\r\n");
   \                     ??AppS2wCmd_NcmAuto_2:
   \   0000003E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNCM NOT STARTED\\r\\n">`
   \   00000042   0x.... 0x....      BL       S2w_Printf
   9920                   }
   9921                   return S2W_SUCCESS;
   \   00000046   0xE009             B.N      ??AppS2wCmd_NcmAuto_3
   9922              }
   \                     ??AppS2wCmd_NcmAuto_1:
   \   00000048   0x283F             CMP      R0,#+63
   \   0000004A   0xBF02             ITTT     EQ 
   \   0000004C   0xF8DD 0x0518      LDREQ    R0,[SP, #+1304]
   \   00000050   0x7880             LDRBEQ   R0,[R0, #+2]
   \   00000052   0x2800             CMPEQ    R0,#+0
   \   00000054   0xD104             BNE.N    ??AppS2wCmd_NcmAuto_0
   9923              else if(ptr[0] == '?' &&( ptr[1] == '?') && ptr[2] == '\0')
   9924              {
   9925          		AppS2wNcmProfile_Display( &s2wCurrent);
   \   00000056   0x4640             MOV      R0,R8
   \   00000058   0x.... 0x....      BL       AppS2wNcmProfile_Display
   9926          		return S2W_SUCCESS;
   \                     ??AppS2wCmd_NcmAuto_3:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xE2DE             B.N      ??AppS2wCmd_NcmAuto_4
   9927          	}
   9928          
   9929              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_NcmAuto_0:
   \   00000060   0x.... 0x....      BL       ?Subroutine44
   9930              if (!p)
   \                     ??CrossCallReturnLabel_241:
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD008             BEQ.N    ??AppS2wCmd_NcmAuto_5
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable473_4
   9931              {
   9932                  return S2W_EINVAL;
   9933              }
   9934              status = AppS2wParse_Boolean(p, &ncmAutoMode);
   9935              if (status != S2W_SUCCESS)
   \   0000006C   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000070   0x2800             CMP      R0,#+0
   \   00000072   0xD10A             BNE.N    ??AppS2wCmd_NcmAuto_6
   9936              {
   9937                  return S2W_EINVAL;
   9938              }
   9939              p = AppS2wParse_NextParamGet(&ptr);
   \   00000074   0x.... 0x....      BL       ?Subroutine44
   9940              if (!p)
   \                     ??CrossCallReturnLabel_240:
   \   00000078   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_NcmAuto_5:
   \   0000007A   0xF000 0x8107      BEQ.W    ??AppS2wCmd_NcmAuto_7
   9941              {
   9942                  return S2W_EINVAL;
   9943              }
   9944              status = AppS2wParse_Boolean(p, &enable);
   \   0000007E   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000082   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000086   0xEA5F 0x0B00      MOVS     R11,R0
   9945              if (status != S2W_SUCCESS)
   \                     ??AppS2wCmd_NcmAuto_6:
   \   0000008A   0xF040 0x80FF      BNE.W    ??AppS2wCmd_NcmAuto_7
   9946              {
   9947                  return S2W_EINVAL;
   9948              }
   9949              s2wCurrent.ncmAutoMgr = enable;
   \   0000008E   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   00000092   0xF888 0x032A      STRB     R0,[R8, #+810]
   9950          	
   9951              if(enable == 0)//disable the connection mgr and disconnect if it connected
   \   00000096   0xF208 0x352A      ADDW     R5,R8,#+810
   \   0000009A   0xF89D 0x0009      LDRB     R0,[SP, #+9]
   \   0000009E   0x2800             CMP      R0,#+0
   \   000000A0   0xD144             BNE.N    ??AppS2wCmd_NcmAuto_8
   9952              {
   9953          		s2wappMainTaskCtxt->ipaddr =0;
   \   000000A2   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_455:
   \   000000A6   0xF247 0x5124      MOVW     R1,#+29988
   \   000000AA   0x2200             MOVS     R2,#+0
   \   000000AC   0x500A             STR      R2,[R1, R0]
   9954          		s2wappMainTaskCtxt->subnetMask=0;
   \   000000AE   0x1809             ADDS     R1,R1,R0
   9955                  s2wCurrent.ncmAutoMgr = 0;
   9956                  s2wCurrent.ncmAutoLvl = 0;
   9957                  s2wAutoConnState = 0;
   9958                  retVal = GsnNcm_Stop(&s2wappMainTaskCtxt->appNwConnMgrCtx,NULL);
   9959          		if (GSN_OPERATION_IN_PROGRESS == retVal)
   \   000000B0   0x4450             ADD      R0,R10,R0
   \   000000B2   0x604A             STR      R2,[R1, #+4]
   \   000000B4   0xF888 0x232A      STRB     R2,[R8, #+810]
   \   000000B8   0x706A             STRB     R2,[R5, #+1]
   \   000000BA   0x.... 0x....      LDR.W    R1,??DataTable473_1
   \   000000BE   0x700A             STRB     R2,[R1, #+0]
   \   000000C0   0x2100             MOVS     R1,#+0
   \   000000C2   0x.... 0x....      BL       GsnNcm_Stop
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable478  ;; 0x80000001
   \   000000CA   0x4288             CMP      R0,R1
   \   000000CC   0xD108             BNE.N    ??AppS2wCmd_NcmAuto_9
   9960          		{
   9961          			GsnOsal_SemAcquire(&s2wappMainTaskCtxt->ncmOpsync,GSN_OSAL_WAIT_FOREVER);
   \   000000CE   0x.... 0x....      BL       ?Subroutine80
   9962          		}
   \                     ??CrossCallReturnLabel_456:
   \   000000D2   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   000000D6   0xF04F 0x31FF      MOV      R1,#-1
   \   000000DA   0x3008             ADDS     R0,R0,#+8
   \   000000DC   0x.... 0x....      BL       GsnOsal_SemAcquire
   9963                  // stop the s2w ncm timer
   9964                  AppS2wHal_TimerStop(&acNcmTimer);
   \                     ??AppS2wCmd_NcmAuto_9:
   \   000000E0   0x.... 0x....      LDR.W    R0,??DataTable476_3
   \   000000E4   0x.... 0x....      BL       AppS2wHal_TimerStop
   9965                  //AppS2wHal_Register(s2wappMainTaskCtxt->taskNotifier, s2wappMainTaskCtxt);
   9966                  // register the normal CB for disso-event and syncloss
   9967                  GsnWdd_DisassocIndCbReg(&s2wappMainTaskCtxt->if0.wddCtx, s2wDisassocCb, s2wappMainTaskCtxt);
   \   000000E8   0x.... 0x....      LDR.W    R0,??DataTable470_2
   \   000000EC   0x.... 0x....      LDR.W    R2,??DataTable479
   \   000000F0   0x6801             LDR      R1,[R0, #+0]
   \   000000F2   0xF601 0x60E0      ADDW     R0,R1,#+3808
   \   000000F6   0x6342             STR      R2,[R0, #+52]
   \   000000F8   0x6381             STR      R1,[R0, #+56]
   9968                  GsnWdd_BeaconMissCbReg(&s2wappMainTaskCtxt->if0.wddCtx, s2wDisassocSyncLossCb, s2wappMainTaskCtxt);
   \   000000FA   0x.... 0x....      LDR.W    R2,??DataTable479_1
   \   000000FE   0x63C2             STR      R2,[R0, #+60]
   \   00000100   0x6401             STR      R1,[R0, #+64]
   9969                  GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,0,S2W_DEFAULT_SYNCLOSS_INTERVAL);
   \   00000102   0x2264             MOVS     R2,#+100
   \   00000104   0x2100             MOVS     R1,#+0
   \   00000106   0x.... 0x....      BL       GsnWdd_BeaconMissThresholdSet
   9970                  AppS2w_HangUp();
   \   0000010A   0x.... 0x....      BL       AppS2w_HangUp
   9971                  S2w_AsyncMsgGpioOp(0);
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   9972                  if(ncmAutoMode)// ap mode stop the dhcp srvr
   \   00000114   0x.... 0x....      LDR.W    R0,??DataTable473_4
   \   00000118   0x7800             LDRB     R0,[R0, #+0]
   \   0000011A   0x2800             CMP      R0,#+0
   \   0000011C   0xD005             BEQ.N    ??AppS2wCmd_NcmAuto_10
   9973                  {
   9974          #ifdef S2W_DHCP_SERVER_ENABLE
   9975                      GsnDhcpSrvr_Stop(&dhcpSrvr);
   \   0000011E   0x.... 0x....      BL       ?Subroutine137
   9976          #ifdef S2W_DNS_SERVER_ENABLE
   9977                      GsnDnsSrvr_Stop(&dnsServer);
   \                     ??CrossCallReturnLabel_624:
   \   00000122   0xF208 0x4024      ADDW     R0,R8,#+1060
   \   00000126   0x.... 0x....      BL       GsnDnsSrvr_Stop
   \                     ??AppS2wCmd_NcmAuto_10:
   \   0000012A   0xE0CB             B.N      ??AppS2wCmd_NcmAuto_11
   9978          #endif
   9979          #endif
   9980                  }
   9981                  return status;
   9982              }
   9983              memset(&gNwConnConfig,0, sizeof(gNwConnConfig));
   \                     ??AppS2wCmd_NcmAuto_8:
   \   0000012C   0xF44F 0x629D      MOV      R2,#+1256
   \   00000130   0x2100             MOVS     R1,#+0
   \   00000132   0xA80C             ADD      R0,SP,#+48
   \   00000134   0x.... 0x....      BL       memset
   9984          
   9985              if(ncmAutoMode) // start the AP with the nvds info..
   \   00000138   0xF208 0x200D      ADDW     R0,R8,#+525
   \   0000013C   0x9003             STR      R0,[SP, #+12]
   \   0000013E   0xF508 0x774B      ADD      R7,R8,#+812
   \   00000142   0x.... 0x....      LDR.W    R0,??DataTable473_4
   \   00000146   0x7800             LDRB     R0,[R0, #+0]
   \   00000148   0x2800             CMP      R0,#+0
   \   0000014A   0xAC64             ADD      R4,SP,#+400
   \   0000014C   0xF10D 0x0657      ADD      R6,SP,#+87
   \   00000150   0xF10D 0x096A      ADD      R9,SP,#+106
   \   00000154   0xF50D 0x60A3      ADD      R0,SP,#+1304
   \   00000158   0xF000 0x8095      BEQ.W    ??AppS2wCmd_NcmAuto_12
   9986              {
   9987          		/* next param(level) is an optional for AP mode
   9988          		 */
   9989                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000015C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   9990          	    if ((p) && (*p != '\0'))
   \   00000160   0x2800             CMP      R0,#+0
   \   00000162   0xBF1C             ITT      NE 
   \   00000164   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000166   0x2900             CMPNE    R1,#+0
   \   00000168   0xD008             BEQ.N    ??AppS2wCmd_NcmAuto_13
   9991          	    {
   9992          	        status = AppS2wParse_Boolean(p, &value);
   \   0000016A   0xA902             ADD      R1,SP,#+8
   \   0000016C   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000170   0xEA5F 0x0B00      MOVS     R11,R0
   9993          	        if (status != S2W_SUCCESS)
   \   00000174   0xD1D9             BNE.N    ??AppS2wCmd_NcmAuto_10
   9994          	        {
   9995          	            return status;
   9996          	        }
   9997                      s2wCurrent.ncmAutoLvl = value;
   \   00000176   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   0000017A   0x7068             STRB     R0,[R5, #+1]
   9998          		}
   9999                  // for grp provisioning the following code get executed
  10000                  if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
   \                     ??AppS2wCmd_NcmAuto_13:
   \   0000017C   0xF241 0x4550      MOVW     R5,#+5200
   \   00000180   0xF898 0x0004      LDRB     R0,[R8, #+4]
   \   00000184   0x2806             CMP      R0,#+6
   \   00000186   0xD136             BNE.N    ??AppS2wCmd_NcmAuto_14
  10001                  {
  10002                       gNwConnConfig.wlanCfg.apSpecificCfg.beaconInterval = S2W_DEFAULT_GRP_PROV_BEACON_INTERVAL;
   \   00000188   0x2064             MOVS     R0,#+100
   \   0000018A   0xF8AD 0x006A      STRH     R0,[SP, #+106]
  10003                       gNwConnConfig.wlanCfg.ssid.length = sizeof(S2W_DEFAULT_GRP_PROV_SSID) - 1;;
  10004                       memcpy(gNwConnConfig.wlanCfg.ssid.array, S2W_DEFAULT_GRP_PROV_SSID,
  10005                               gNwConnConfig.wlanCfg.ssid.length);
   \   0000018E   0x2208             MOVS     R2,#+8
   \   00000190   0x2008             MOVS     R0,#+8
   \   00000192   0xF88D 0x0030      STRB     R0,[SP, #+48]
   \   00000196   0xF10D 0x0031      ADD      R0,SP,#+49
   \   0000019A   0x.... 0x....      ADR.W    R1,`?<Constant "GS_PROV_">`
   \   0000019E   0x.... 0x....      BL       memcpy
  10006          
  10007                       sprintf((char*)gNwConnConfig.wlanCfg.ssid.array+gNwConnConfig.wlanCfg.ssid.length, "_%02x%02x%02x",
  10008                      		s2wCurrent.lmtdApConf.macAddr.array[3],
  10009                      		s2wCurrent.lmtdApConf.macAddr.array[4],
  10010                      		s2wCurrent.lmtdApConf.macAddr.array[5]);
   \   000001A2   0xF898 0x2210      LDRB     R2,[R8, #+528]
   \   000001A6   0xF508 0x7004      ADD      R0,R8,#+528
   \   000001AA   0x7881             LDRB     R1,[R0, #+2]
   \   000001AC   0x7843             LDRB     R3,[R0, #+1]
   \   000001AE   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   000001B2   0x9100             STR      R1,[SP, #+0]
   \   000001B4   0xAF0C             ADD      R7,SP,#+48
   \   000001B6   0x19C0             ADDS     R0,R0,R7
   \   000001B8   0x.... 0x....      ADR.W    R1,`?<Constant "_%02x%02x%02x">`
   \   000001BC   0x1C40             ADDS     R0,R0,#+1
   \   000001BE   0x.... 0x....      BL       sprintf
  10011          
  10012                       gNwConnConfig.wlanCfg.ssid.length += 7;
   \   000001C2   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   000001C6   0x1DC0             ADDS     R0,R0,#+7
   \   000001C8   0xF88D 0x0030      STRB     R0,[SP, #+48]
  10013          
  10014                       gNwConnConfig.wlanCfg.channel[0] = S2W_DEFAULT_GRP_PROV_CHANNEL;
   \   000001CC   0x2006             MOVS     R0,#+6
   \   000001CE   0xF88D 0x0057      STRB     R0,[SP, #+87]
  10015                       gNwConnConfig.wlanCfg.channel[1] = 0;
   \   000001D2   0x2000             MOVS     R0,#+0
   \   000001D4   0x7070             STRB     R0,[R6, #+1]
  10016                       S2w_getApSecurityConfig(&gNwConnConfig.wlanCfg,S2W_DEFAULT_GRP_PROV_SECURITY);
   \   000001D6   0x4601             MOV      R1,R0
   \   000001D8   0xA80C             ADD      R0,SP,#+48
   \   000001DA   0x.... 0x....      BL       S2w_getApSecurityConfig
  10017          
  10018                       gNwConnConfig.ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
   \   000001DE   0x2001             MOVS     R0,#+1
   \   000001E0   0xF88D 0x0190      STRB     R0,[SP, #+400]
  10019                       gNwConnConfig.ipConfig.ipv4.staticIp = 1;//nwMib.staticIp;
   \   000001E4   0x60A0             STR      R0,[R4, #+8]
  10020                       gNwConnConfig.ipConfig.ipv4.ipAddr = S2W_DEFAULT_GRP_PROV_IP_ADDRESS;
  10021                       gNwConnConfig.ipConfig.ipv4.subnetMask = S2W_DEFAULT_GRP_PROV_SUBNET_ADDRESS;
   \   000001E6   0xF06F 0x01FF      MVN      R1,#+255
   \   000001EA   0x.... 0x....      LDR.W    R0,??DataTable481  ;; 0xc0a8f001
   \   000001EE   0x60E0             STR      R0,[R4, #+12]
   \   000001F0   0x6121             STR      R1,[R4, #+16]
  10022                       gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = S2W_DEFAULT_GRP_PROV_GATE_ADDRESS;
   \   000001F2   0x6160             STR      R0,[R4, #+20]
  10023                       memcpy(gNwConnConfig.wlanCfg.bssid.array, s2wCurrent.lmtdApConf.macAddr.array,6);
   \   000001F4   0xE03D             B.N      ??AppS2wCmd_NcmAuto_15
  10024                       GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
  10025                  }
  10026                  else
  10027                  {
  10028          			gNwConnConfig.wlanCfg.apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
   \                     ??AppS2wCmd_NcmAuto_14:
   \   000001F6   0xF8B8 0x028A      LDRH     R0,[R8, #+650]
   \   000001FA   0xF8AD 0x006A      STRH     R0,[SP, #+106]
  10029          				gNwConnConfig.wlanCfg.apSpecificCfg.hiddenSsid = s2wCurrent.ncmAutoConf[S2W_NCM_HIDDENSSID_VALUE];
   \   000001FE   0x6B38             LDR      R0,[R7, #+48]
   \   00000200   0x7470             STRB     R0,[R6, #+17]
  10030          			
  10031          			if(s2wCurrent.ncmAutoConf[S2W_NCM_DTIMPERIOD_VALUE])
   \   00000202   0x6B78             LDR      R0,[R7, #+52]
   \   00000204   0xB900             CBNZ.N   R0,??AppS2wCmd_NcmAuto_16
  10032          			{
  10033          				gNwConnConfig.wlanCfg.apSpecificCfg.dtimPeriod= s2wCurrent.ncmAutoConf[S2W_NCM_DTIMPERIOD_VALUE];
  10034          			}
  10035          			else
  10036          			{
  10037          				gNwConnConfig.wlanCfg.apSpecificCfg.dtimPeriod= S2W_NCM_DFLT_DTIMPERIOD_VALUE;
   \   00000206   0x2003             MOVS     R0,#+3
   \                     ??AppS2wCmd_NcmAuto_16:
   \   00000208   0xF889 0x0002      STRB     R0,[R9, #+2]
  10038          			}
  10039          			
  10040          			if(s2wCurrent.ncmAutoConf[S2W_NCM_INACTIVITY_TMEOUT_VALUE])
   \   0000020C   0x6BB8             LDR      R0,[R7, #+56]
   \   0000020E   0xB908             CBNZ.N   R0,??AppS2wCmd_NcmAuto_17
  10041          			{
  10042          				gNwConnConfig.inactivityTimeoutInSec= s2wCurrent.ncmAutoConf[S2W_NCM_INACTIVITY_TMEOUT_VALUE];
  10043          			}
  10044          			else
  10045          			{
  10046          				gNwConnConfig.inactivityTimeoutInSec= S2W_NCM_DFLT_INACTIVITY_TMEOUT_VALUE;
   \   00000210   0xF44F 0x70B4      MOV      R0,#+360
   \                     ??AppS2wCmd_NcmAuto_17:
   \   00000214   0xF8AD 0x050E      STRH     R0,[SP, #+1294]
  10047          			}			
  10048          			if(s2wCurrent.ncmAutoConf[S2W_NCM_GRP_KEY_UPDATE_INTERVAL])
   \   00000218   0x6BF8             LDR      R0,[R7, #+60]
   \   0000021A   0xB908             CBNZ.N   R0,??AppS2wCmd_NcmAuto_18
  10049          			{
  10050          				gNwConnConfig.groupKeyUpdateTime= s2wCurrent.ncmAutoConf[S2W_NCM_GRP_KEY_UPDATE_INTERVAL];
  10051          			}
  10052          			else
  10053          			{
  10054          				gNwConnConfig.groupKeyUpdateTime = S2W_NCM_DFLT_GRP_KEY_UPDATE_INTERVAL;
   \   0000021C   0xF44F 0x6061      MOV      R0,#+3600
  10055          			}
  10056          			gNwConnConfig.wlanCfg.ssid.length = s2wCurrent.lmtdApConf.ssid.length;
  10057          			memcpy(gNwConnConfig.wlanCfg.ssid.array, s2wCurrent.lmtdApConf.ssid.array,
  10058          			  s2wCurrent.lmtdApConf.ssid.length);
   \                     ??AppS2wCmd_NcmAuto_18:
   \   00000220   0xF898 0x21EC      LDRB     R2,[R8, #+492]
   \   00000224   0xF8CD 0x0510      STR      R0,[SP, #+1296]
   \   00000228   0xF208 0x11ED      ADDW     R1,R8,#+493
   \   0000022C   0xF898 0x01EC      LDRB     R0,[R8, #+492]
   \   00000230   0x.... 0x....      BL       ?Subroutine113
  10059          			gNwConnConfig.wlanCfg.channel[0] = s2wCurrent.lmtdApConf.channel;
   \                     ??CrossCallReturnLabel_552:
   \   00000234   0xF898 0x0286      LDRB     R0,[R8, #+646]
  10060          			S2w_getApSecurityConfig(&gNwConnConfig.wlanCfg,s2wCurrent.lmtdApConf.securityType);
   \   00000238   0xF898 0x1254      LDRB     R1,[R8, #+596]
   \   0000023C   0xF88D 0x0057      STRB     R0,[SP, #+87]
   \   00000240   0xA80C             ADD      R0,SP,#+48
   \   00000242   0x.... 0x....      BL       S2w_getApSecurityConfig
  10061          
  10062          			gNwConnConfig.ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
   \   00000246   0x2001             MOVS     R0,#+1
   \   00000248   0xF88D 0x0190      STRB     R0,[SP, #+400]
  10063          			gNwConnConfig.ipConfig.ipv4.staticIp = 1;//nwMib.staticIp;
   \   0000024C   0x60A0             STR      R0,[R4, #+8]
  10064          			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.ipAddr,&s2wCurrent.lmtdApConf.ipAddress,4 );
   \   0000024E   0x2204             MOVS     R2,#+4
   \   00000250   0xF508 0x7123      ADD      R1,R8,#+652
   \   00000254   0xA867             ADD      R0,SP,#+412
   \   00000256   0x.... 0x....      BL       memcpy
  10065          			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.subnetMask,&s2wCurrent.lmtdApConf.subnetmask,4 );
   \   0000025A   0x2204             MOVS     R2,#+4
   \   0000025C   0xF508 0x7124      ADD      R1,R8,#+656
   \   00000260   0xA868             ADD      R0,SP,#+416
   \   00000262   0x.... 0x....      BL       memcpy
  10066          			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.gatewayIpAddr,&s2wCurrent.lmtdApConf.gateway,4 );
   \   00000266   0x2204             MOVS     R2,#+4
   \   00000268   0xF508 0x7125      ADD      R1,R8,#+660
   \   0000026C   0xA869             ADD      R0,SP,#+420
   \   0000026E   0x.... 0x....      BL       memcpy
  10067          			memcpy(gNwConnConfig.wlanCfg.bssid.array, s2wCurrent.lmtdApConf.macAddr.array,6);
   \                     ??AppS2wCmd_NcmAuto_15:
   \   00000272   0x9903             LDR      R1,[SP, #+12]
   \   00000274   0x2206             MOVS     R2,#+6
   \   00000276   0x.... 0x....      BL       ?Subroutine115
  10068          			GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     ??CrossCallReturnLabel_557:
   \   0000027A   0x.... 0x....      BL       ?Subroutine80
  10069              	}
  10070              }
   \                     ??CrossCallReturnLabel_457:
   \   0000027E   0x1828             ADDS     R0,R5,R0
   \   00000280   0x.... 0x....      BL       GsnNwIf_Close
   \   00000284   0xE1AE             B.N      ??AppS2wCmd_NcmAuto_19
  10071              else
  10072              {
  10073              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_NcmAuto_12:
   \   00000286   0x.... 0x....      BL       AppS2wParse_NextParamGet
  10074              if (!p)
   \   0000028A   0xB908             CBNZ.N   R0,??AppS2wCmd_NcmAuto_20
  10075              {
  10076                  return S2W_EINVAL;
   \                     ??AppS2wCmd_NcmAuto_7:
   \   0000028C   0x2002             MOVS     R0,#+2
   \   0000028E   0xE1C6             B.N      ??AppS2wCmd_NcmAuto_4
  10077              }
  10078              status = AppS2wParse_Boolean(p, &value);
   \                     ??AppS2wCmd_NcmAuto_20:
   \   00000290   0xA902             ADD      R1,SP,#+8
   \   00000292   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000296   0xEA5F 0x0B00      MOVS     R11,R0
  10079              if (status != S2W_SUCCESS)
   \   0000029A   0xD113             BNE.N    ??AppS2wCmd_NcmAuto_11
  10080              {
  10081                  return status;
  10082              }
  10083              s2wCurrent.ncmAutoLvl = value;
   \   0000029C   0xF89D 0x0008      LDRB     R0,[SP, #+8]
   \   000002A0   0x7068             STRB     R0,[R5, #+1]
  10084          		// new optional parameter to save the ncm to profile or not..default is yes but by setting this to 1 user can disable it
  10085             		p = AppS2wParse_NextParamGet(&ptr);
   \   000002A2   0x.... 0x....      BL       ?Subroutine44
  10086              	if ((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_239:
   \   000002A6   0x2800             CMP      R0,#+0
   \   000002A8   0xBF1C             ITT      NE 
   \   000002AA   0x7801             LDRBNE   R1,[R0, #+0]
   \   000002AC   0x2900             CMPNE    R1,#+0
   \   000002AE   0xD00B             BEQ.N    ??AppS2wCmd_NcmAuto_21
  10087              	{
  10088                  	status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->ncmAutoConStoreProfile);
   \   000002B0   0x.... 0x....      BL       ?Subroutine128
   \                     ??CrossCallReturnLabel_601:
   \   000002B4   0xF501 0x41EA      ADD      R1,R1,#+29952
   \   000002B8   0x1D09             ADDS     R1,R1,#+4
   \   000002BA   0x.... 0x....      BL       AppS2wParse_Boolean
   \   000002BE   0xEA5F 0x0B00      MOVS     R11,R0
  10089                  	if (status != S2W_SUCCESS)
   \   000002C2   0xD001             BEQ.N    ??AppS2wCmd_NcmAuto_21
  10090                  	{
  10091                     		return status;
   \                     ??AppS2wCmd_NcmAuto_11:
   \   000002C4   0x4658             MOV      R0,R11
   \   000002C6   0xE1AA             B.N      ??AppS2wCmd_NcmAuto_4
  10092                  	}
  10093          		}
  10094              gNwConnConfig.wlanCfg.ssid.length = s2wCurrent.autoWlandata.ssidLen;
   \                     ??AppS2wCmd_NcmAuto_21:
   \   000002C8   0xF108 0x0B04      ADD      R11,R8,#+4
  10095              memcpy(gNwConnConfig.wlanCfg.ssid.array,s2wCurrent.autoWlandata.ssid,s2wCurrent.autoWlandata.ssidLen);
   \   000002CC   0xF108 0x0116      ADD      R1,R8,#+22
   \   000002D0   0xF89B 0x000A      LDRB     R0,[R11, #+10]
   \   000002D4   0xF89B 0x200A      LDRB     R2,[R11, #+10]
   \   000002D8   0x.... 0x....      BL       ?Subroutine113
  10096              gNwConnConfig.regDomain =  s2wCurrent.regDomain; 
   \                     ??CrossCallReturnLabel_551:
   \   000002DC   0xADB3             ADD      R5,SP,#+716
   \   000002DE   0xF898 0x0395      LDRB     R0,[R8, #+917]
   \   000002E2   0x7468             STRB     R0,[R5, #+17]
  10097          	if(s2wCurrent.autoWlandata.validBssid)
   \   000002E4   0xF89B 0x000B      LDRB     R0,[R11, #+11]
   \   000002E8   0xB120             CBZ.N    R0,??CrossCallReturnLabel_556
  10098          	{
  10099          			memcpy((INT8 *)gNwConnConfig.wlanCfg.bssid.array,s2wCurrent.autoWlandata.bssid,S2W_MAC_ADDR_SIZE);
   \   000002EA   0x2206             MOVS     R2,#+6
   \   000002EC   0xF108 0x0110      ADD      R1,R8,#+16
   \   000002F0   0x.... 0x....      BL       ?Subroutine115
  10100          					
  10101          	}
  10102          		
  10103              if(s2wCurrent.autoWlandata.channel)
   \                     ??CrossCallReturnLabel_556:
   \   000002F4   0xF89B 0x0009      LDRB     R0,[R11, #+9]
   \   000002F8   0xB110             CBZ.N    R0,??AppS2wCmd_NcmAuto_22
  10104                gNwConnConfig.wlanCfg.channel[0] = s2wCurrent.autoWlandata.channel;
   \   000002FA   0xF88D 0x0057      STRB     R0,[SP, #+87]
   \   000002FE   0xE02F             B.N      ??AppS2wCmd_NcmAuto_23
  10105              else
  10106                {
  10107                      gNwConnConfig.wlanCfg.channel[0] = 1;
   \                     ??AppS2wCmd_NcmAuto_22:
   \   00000300   0x2001             MOVS     R0,#+1
   \   00000302   0xF88D 0x0057      STRB     R0,[SP, #+87]
  10108                      gNwConnConfig.wlanCfg.channel[1] = 2;
   \   00000306   0x2002             MOVS     R0,#+2
   \   00000308   0x7070             STRB     R0,[R6, #+1]
  10109                      gNwConnConfig.wlanCfg.channel[2] = 3;
   \   0000030A   0x2003             MOVS     R0,#+3
   \   0000030C   0x70B0             STRB     R0,[R6, #+2]
  10110                      gNwConnConfig.wlanCfg.channel[3] = 4;
   \   0000030E   0x2004             MOVS     R0,#+4
   \   00000310   0x70F0             STRB     R0,[R6, #+3]
  10111                      gNwConnConfig.wlanCfg.channel[4] = 5;
   \   00000312   0x2005             MOVS     R0,#+5
   \   00000314   0x7130             STRB     R0,[R6, #+4]
  10112                      gNwConnConfig.wlanCfg.channel[5] = 6;
   \   00000316   0x2006             MOVS     R0,#+6
   \   00000318   0x7170             STRB     R0,[R6, #+5]
  10113                      gNwConnConfig.wlanCfg.channel[6] = 7;
   \   0000031A   0x2007             MOVS     R0,#+7
   \   0000031C   0x71B0             STRB     R0,[R6, #+6]
  10114                      gNwConnConfig.wlanCfg.channel[7] = 8;
   \   0000031E   0x2008             MOVS     R0,#+8
   \   00000320   0x71F0             STRB     R0,[R6, #+7]
  10115                      gNwConnConfig.wlanCfg.channel[8] = 9;
   \   00000322   0x2009             MOVS     R0,#+9
   \   00000324   0x7230             STRB     R0,[R6, #+8]
  10116                      gNwConnConfig.wlanCfg.channel[9] = 10;
   \   00000326   0x200A             MOVS     R0,#+10
   \   00000328   0x7270             STRB     R0,[R6, #+9]
  10117                      gNwConnConfig.wlanCfg.channel[10] = 11;
   \   0000032A   0x200B             MOVS     R0,#+11
   \   0000032C   0x72B0             STRB     R0,[R6, #+10]
  10118                      switch(s2wCurrent.regDomain)
   \   0000032E   0xF898 0x0395      LDRB     R0,[R8, #+917]
   \   00000332   0x2801             CMP      R0,#+1
   \   00000334   0xD002             BEQ.N    ??AppS2wCmd_NcmAuto_24
   \   00000336   0x2802             CMP      R0,#+2
   \   00000338   0xD007             BEQ.N    ??AppS2wCmd_NcmAuto_25
   \   0000033A   0xE00F             B.N      ??AppS2wCmd_NcmAuto_26
  10119                      {
  10120          		case S2W_DOMAIN_FCC:
  10121                            gNwConnConfig.wlanCfg.channel[11] = 0;
  10122                            break;
  10123          		case S2W_DOMAIN_ETSI:
  10124                            gNwConnConfig.wlanCfg.channel[11] = 12;
   \                     ??AppS2wCmd_NcmAuto_24:
   \   0000033C   0x200C             MOVS     R0,#+12
   \   0000033E   0x72F0             STRB     R0,[R6, #+11]
  10125                            gNwConnConfig.wlanCfg.channel[12] = 13;
   \   00000340   0x200D             MOVS     R0,#+13
   \   00000342   0x7330             STRB     R0,[R6, #+12]
  10126                            gNwConnConfig.wlanCfg.channel[13] = 0;
   \   00000344   0x2000             MOVS     R0,#+0
   \   00000346   0x7370             STRB     R0,[R6, #+13]
  10127                            break;
   \   00000348   0xE00A             B.N      ??AppS2wCmd_NcmAuto_23
  10128          		case S2W_DOMAIN_TELEC:
  10129                            gNwConnConfig.wlanCfg.channel[11] = 12;
   \                     ??AppS2wCmd_NcmAuto_25:
   \   0000034A   0x200C             MOVS     R0,#+12
   \   0000034C   0x72F0             STRB     R0,[R6, #+11]
  10130                            gNwConnConfig.wlanCfg.channel[12] = 13;
   \   0000034E   0x200D             MOVS     R0,#+13
   \   00000350   0x7330             STRB     R0,[R6, #+12]
  10131                            gNwConnConfig.wlanCfg.channel[13] = 14;
   \   00000352   0x200E             MOVS     R0,#+14
   \   00000354   0x7370             STRB     R0,[R6, #+13]
  10132                            gNwConnConfig.wlanCfg.channel[14] = 0;
   \   00000356   0x2000             MOVS     R0,#+0
   \   00000358   0x73B0             STRB     R0,[R6, #+14]
  10133                            break;
   \   0000035A   0xE001             B.N      ??AppS2wCmd_NcmAuto_23
  10134          		default:
  10135                            gNwConnConfig.wlanCfg.channel[11] = 0;
   \                     ??AppS2wCmd_NcmAuto_26:
   \   0000035C   0x2000             MOVS     R0,#+0
   \   0000035E   0x72F0             STRB     R0,[R6, #+11]
  10136                            break;
  10137                      }
  10138              }
  10139          	gNwConnConfig.specificChnlList[0] = 1;
   \                     ??AppS2wCmd_NcmAuto_23:
   \   00000360   0x2001             MOVS     R0,#+1
   \   00000362   0x7068             STRB     R0,[R5, #+1]
  10140          	gNwConnConfig.specificChnlList[1] = 6;
   \   00000364   0x2006             MOVS     R0,#+6
   \   00000366   0x70A8             STRB     R0,[R5, #+2]
  10141          	gNwConnConfig.specificChnlList[2] = 11;
   \   00000368   0x200B             MOVS     R0,#+11
   \   0000036A   0x70E8             STRB     R0,[R5, #+3]
  10142          	gNwConnConfig.specificChnlList[3] = 0;
   \   0000036C   0x2000             MOVS     R0,#+0
   \   0000036E   0x7128             STRB     R0,[R5, #+4]
  10143          
  10144              S2w_getSecurityConfig(&gNwConnConfig.wlanCfg);
   \   00000370   0xA80C             ADD      R0,SP,#+48
   \   00000372   0x.... 0x....      BL       S2w_getSecurityConfig
  10145          		
  10146          	    memcpy(gNwConnConfig.wlanCfg.securityCfg.eapConfig.userName.Name,
  10147                              s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
   \   00000376   0xF508 0x709C      ADD      R0,R8,#+312
   \   0000037A   0x9000             STR      R0,[SP, #+0]
   \   0000037C   0xF508 0x71A1      ADD      R1,R8,#+322
   \   00000380   0x7A42             LDRB     R2,[R0, #+9]
   \   00000382   0xF10D 0x00E7      ADD      R0,SP,#+231
   \   00000386   0x.... 0x....      BL       memcpy
  10148          	    memcpy(gNwConnConfig.wlanCfg.securityCfg.eapConfig.password.Pwd,
  10149                              s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
   \   0000038A   0xF898 0x2162      LDRB     R2,[R8, #+354]
   \   0000038E   0xF208 0x1163      ADDW     R1,R8,#+355
   \   00000392   0xA842             ADD      R0,SP,#+264
   \   00000394   0x.... 0x....      BL       memcpy
  10150          	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
   \   00000398   0xF898 0x0162      LDRB     R0,[R8, #+354]
  10151          	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
   \   0000039C   0x9900             LDR      R1,[SP, #+0]
   \   0000039E   0xF88D 0x0107      STRB     R0,[SP, #+263]
   \   000003A2   0xA839             ADD      R0,SP,#+228
   \   000003A4   0x7A49             LDRB     R1,[R1, #+9]
   \   000003A6   0x7081             STRB     R1,[R0, #+2]
  10152          
  10153          	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
   \   000003A8   0xF8D8 0x1138      LDR      R1,[R8, #+312]
   \   000003AC   0xF88D 0x10E4      STRB     R1,[SP, #+228]
  10154          	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
   \   000003B0   0x9900             LDR      R1,[SP, #+0]
   \   000003B2   0x6849             LDR      R1,[R1, #+4]
   \   000003B4   0x7041             STRB     R1,[R0, #+1]
  10155          
  10156          	  //  gNwConnConfig.wlanCfg.securityCfg.eapConfig.fastProvisioningStatus= APP_NCM_CFG_DFLT_FAST_PROVISIONING_STATUS;
  10157          	   // gNwConnConfig.wlanCfg.securityCfg.eapConfig.pacOverWrite= APP_NCM_CFG_DFLT_FLASH_PAC_OVER_WRITE;
  10158          	    //gNwConnConfig.wlanCfg.securityCfg.eapConfig.pac.pac_opaque_len = 0;
  10159          
  10160          
  10161          #if 0
  10162              if( s2wCurrent.security.eap.useCaCert ||
  10163                (( 13 == s2wCurrent.security.eap.outerAuth)&&
  10164                ( 26 == s2wCurrent.security.eap.innerAuth )))
  10165              {
  10166          			index = S2wCert_findFile(S2W_CERT_NAME_CA);
  10167                  if(index != -1)
  10168                  {
  10169          		  		gNwConnConfig.wlanCfg.securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress;
  10170                  }
  10171              }
  10172          		index = S2wCert_findFile(S2W_CERT_NAME_CLIENT);
  10173              if(index != -1)
  10174              {
  10175          		  gNwConnConfig.wlanCfg.securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress;
  10176              }
  10177          		index = S2wCert_findFile(S2W_CERT_NAME_KEY);
  10178              if(index != -1)
  10179              {
  10180          		  gNwConnConfig.wlanCfg.securityCfg.eapConfig.pPrivateKey =(char*) s2w_ssl_cert_table[index].certAddress;
  10181              }
  10182          #else
  10183          	if(s2wCurrent.eapCertTimeValidChkDisbl)
   \   000003B6   0xF898 0x03BC      LDRB     R0,[R8, #+956]
   \   000003BA   0xB128             CBZ.N    R0,??AppS2wCmd_NcmAuto_27
  10184          	{
  10185          		gNwConnConfig.wlanCfg.securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
   \   000003BC   0xF89D 0x0128      LDRB     R0,[SP, #+296]
   \   000003C0   0xF040 0x0002      ORR      R0,R0,#0x2
   \   000003C4   0xF88D 0x0128      STRB     R0,[SP, #+296]
  10186          	}
  10187              if( s2wCurrent.security.eap.useCaCert ||
  10188                (( 13 == s2wCurrent.security.eap.outerAuth)&&
  10189                ( 26 == s2wCurrent.security.eap.innerAuth )))
   \                     ??AppS2wCmd_NcmAuto_27:
   \   000003C8   0xAE4A             ADD      R6,SP,#+296
   \   000003CA   0x9800             LDR      R0,[SP, #+0]
   \   000003CC   0x7A00             LDRB     R0,[R0, #+8]
   \   000003CE   0xF04F 0x0B0C      MOV      R11,#+12
   \   000003D2   0xB938             CBNZ.N   R0,??AppS2wCmd_NcmAuto_28
   \   000003D4   0xF8D8 0x0138      LDR      R0,[R8, #+312]
   \   000003D8   0x280D             CMP      R0,#+13
   \   000003DA   0xBF02             ITTT     EQ 
   \   000003DC   0x9800             LDREQ    R0,[SP, #+0]
   \   000003DE   0x6840             LDREQ    R0,[R0, #+4]
   \   000003E0   0x281A             CMPEQ    R0,#+26
   \   000003E2   0xD110             BNE.N    ??AppS2wCmd_NcmAuto_29
   \                     ??AppS2wCmd_NcmAuto_28:
   \   000003E4   0x.... 0x....      BL       ?Subroutine89
  10190              {
  10191                  index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
  10192                  if(index == -1)
   \                     ??CrossCallReturnLabel_479:
   \   000003E8   0xF110 0x0F01      CMN      R0,#+1
   \   000003EC   0xBF04             ITT      EQ 
   \   000003EE   0x.... 0x....      LDREQ.W  R0,??DataTable484
   \   000003F2   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  10193                  {
  10194                      index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
  10195                  }
  10196                  if(index != -1)
   \   000003F6   0xF110 0x0F01      CMN      R0,#+1
   \   000003FA   0xD004             BEQ.N    ??AppS2wCmd_NcmAuto_29
   \   000003FC   0x.... 0x....      BL       ?Subroutine139
   \                     ??CrossCallReturnLabel_630:
   \   00000400   0x6131             STR      R1,[R6, #+16]
  10197                  {
  10198                      gNwConnConfig.wlanCfg.securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
  10199                      gNwConnConfig.wlanCfg.securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   \   00000402   0x8800             LDRH     R0,[R0, #+0]
   \   00000404   0x6170             STR      R0,[R6, #+20]
  10200                  }
  10201              }
   \                     ??AppS2wCmd_NcmAuto_29:
   \   00000406   0x.... 0x....      BL       ?Subroutine90
  10202              index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
  10203              if(index == -1)
   \                     ??CrossCallReturnLabel_482:
   \   0000040A   0xF110 0x0F01      CMN      R0,#+1
   \   0000040E   0xBF04             ITT      EQ 
   \   00000410   0x.... 0x....      LDREQ.W  R0,??DataTable484_1
   \   00000414   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  10204              {
  10205                  index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
  10206              }
  10207              if(index != -1)
   \   00000418   0xF110 0x0F01      CMN      R0,#+1
   \   0000041C   0xD004             BEQ.N    ??AppS2wCmd_NcmAuto_30
   \   0000041E   0x.... 0x....      BL       ?Subroutine139
   \                     ??CrossCallReturnLabel_631:
   \   00000422   0x61B1             STR      R1,[R6, #+24]
  10208              {
  10209                  gNwConnConfig.wlanCfg.securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
  10210                  gNwConnConfig.wlanCfg.securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   \   00000424   0x8800             LDRH     R0,[R0, #+0]
   \   00000426   0x61F0             STR      R0,[R6, #+28]
   \                     ??AppS2wCmd_NcmAuto_30:
   \   00000428   0x.... 0x....      LDR.W    R0,??DataTable482
  10211              }
  10212              index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
   \   0000042C   0x.... 0x....      BL       S2wCert_SearchRamTable
  10213              if(index == -1)
   \   00000430   0xF110 0x0F01      CMN      R0,#+1
   \   00000434   0xBF04             ITT      EQ 
   \   00000436   0x.... 0x....      LDREQ.W  R0,??DataTable482
   \   0000043A   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  10214              {
  10215                  index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
  10216              }
  10217              if(index != -1)
   \   0000043E   0xF110 0x0F01      CMN      R0,#+1
   \   00000442   0xD004             BEQ.N    ??AppS2wCmd_NcmAuto_31
   \   00000444   0x.... 0x....      BL       ?Subroutine139
   \                     ??CrossCallReturnLabel_632:
   \   00000448   0x6231             STR      R1,[R6, #+32]
  10218              {
  10219          	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
  10220                  gNwConnConfig.wlanCfg.securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   \   0000044A   0x8800             LDRH     R0,[R0, #+0]
   \   0000044C   0x6270             STR      R0,[R6, #+36]
  10221              }
  10222          #endif
  10223              if(s2wCurrent.ncmAutoConf[S2W_NCM_CPUWAIT_PERIOD])
   \                     ??AppS2wCmd_NcmAuto_31:
   \   0000044E   0xA898             ADD      R0,SP,#+608
   \   00000450   0xF8D8 0x132C      LDR      R1,[R8, #+812]
   \   00000454   0xF44F 0x727A      MOV      R2,#+1000
   \   00000458   0x2900             CMP      R1,#+0
   \   0000045A   0xBF14             ITE      NE 
   \   0000045C   0x6581             STRNE    R1,[R0, #+88]
   \   0000045E   0x6582             STREQ    R2,[R0, #+88]
  10224              {
  10225                  gNwConnConfig.retryPeriodConfig.cpuWaitPeriod = s2wCurrent.ncmAutoConf[S2W_NCM_CPUWAIT_PERIOD];
  10226              }
  10227              else
  10228              {
  10229                  gNwConnConfig.retryPeriodConfig.cpuWaitPeriod = S2W_NCM_DFLT_CPUWAIT_PERIOD;
  10230              }
  10231              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_PERIOD])
   \   00000460   0x68B9             LDR      R1,[R7, #+8]
   \   00000462   0x2900             CMP      R1,#+0
   \   00000464   0xBF14             ITE      NE 
   \   00000466   0x65C1             STRNE    R1,[R0, #+92]
   \   00000468   0x65C2             STREQ    R2,[R0, #+92]
  10232              {
  10233                  gNwConnConfig.retryPeriodConfig.scanKnownChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_PERIOD];
  10234              }
  10235              else
  10236              {
  10237                  gNwConnConfig.retryPeriodConfig.scanKnownChRetryIntrvl = S2W_NCM_DFLT_KNOWNCH_SCAN_PERIOD;
  10238              }
  10239              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_PERIOD])
   \   0000046A   0x68F9             LDR      R1,[R7, #+12]
   \   0000046C   0x2900             CMP      R1,#+0
   \   0000046E   0xBF14             ITE      NE 
   \   00000470   0x6601             STRNE    R1,[R0, #+96]
   \   00000472   0x6602             STREQ    R2,[R0, #+96]
  10240              {
  10241                  gNwConnConfig.retryPeriodConfig.scanSpecChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_PERIOD];
  10242              }
  10243              else
  10244              {
  10245                  gNwConnConfig.retryPeriodConfig.scanSpecChRetryIntrvl = S2W_NCM_DFLT_SPECCH_SCAN_PERIOD;
  10246              }
  10247              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_PERIOD])
   \   00000474   0x6939             LDR      R1,[R7, #+16]
   \   00000476   0x2900             CMP      R1,#+0
   \   00000478   0xBF14             ITE      NE 
   \   0000047A   0x6641             STRNE    R1,[R0, #+100]
   \   0000047C   0x6642             STREQ    R2,[R0, #+100]
  10248              {
  10249                  gNwConnConfig.retryPeriodConfig.scanAllChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_PERIOD];
  10250              }
  10251              else
  10252              {
  10253                  gNwConnConfig.retryPeriodConfig.scanAllChRetryIntrvl = S2W_NCM_DFLT_ALLCH_SCAN_PERIOD;
  10254              }
  10255              if(s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_PERIOD])
   \   0000047E   0x6979             LDR      R1,[R7, #+20]
   \   00000480   0x2900             CMP      R1,#+0
   \   00000482   0xBF14             ITE      NE 
   \   00000484   0x6681             STRNE    R1,[R0, #+104]
   \   00000486   0x6682             STREQ    R2,[R0, #+104]
  10256              {
  10257                  gNwConnConfig.retryPeriodConfig.l3ConnectRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_PERIOD];
  10258              }
  10259              else
  10260              {
  10261                  gNwConnConfig.retryPeriodConfig.l3ConnectRetryIntrvl = S2W_NCM_DFLT_L3CONNECT_PERIOD;
  10262              }
  10263              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_COUNT])
   \   00000488   0x6A39             LDR      R1,[R7, #+32]
   \   0000048A   0xB901             CBNZ.N   R1,??AppS2wCmd_NcmAuto_32
  10264              {
  10265                  gNwConnConfig.retryCountsConfig.maxScanKnownChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_COUNT];
  10266              }
  10267              else
  10268              {
  10269                  gNwConnConfig.retryCountsConfig.maxScanKnownChCnt = S2W_NCM_DFLT_KNOWNCH_SCAN_COUNT;
   \   0000048C   0x210A             MOVS     R1,#+10
   \                     ??AppS2wCmd_NcmAuto_32:
   \   0000048E   0x6481             STR      R1,[R0, #+72]
  10270              }
  10271              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_COUNT])
   \   00000490   0x6A79             LDR      R1,[R7, #+36]
   \   00000492   0xB901             CBNZ.N   R1,??AppS2wCmd_NcmAuto_33
  10272              {
  10273                  gNwConnConfig.retryCountsConfig.maxScanSpecChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_COUNT];
  10274              }
  10275              else
  10276              {
  10277                  gNwConnConfig.retryCountsConfig.maxScanSpecChCnt = S2W_NCM_DFLT_SPECCH_SCAN_COUNT;
   \   00000494   0x2101             MOVS     R1,#+1
   \                     ??AppS2wCmd_NcmAuto_33:
   \   00000496   0x64C1             STR      R1,[R0, #+76]
  10278              }
  10279              if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_COUNT])
   \   00000498   0x6AB9             LDR      R1,[R7, #+40]
   \   0000049A   0xB901             CBNZ.N   R1,??AppS2wCmd_NcmAuto_34
  10280              {
  10281                  gNwConnConfig.retryCountsConfig.maxScanAllChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_COUNT];
  10282              }
  10283              else
  10284              {
  10285                  gNwConnConfig.retryCountsConfig.maxScanAllChCnt = S2W_NCM_DFLT_ALLCH_SCAN_COUNT;
   \   0000049C   0x210A             MOVS     R1,#+10
  10286              }
  10287              if(s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT])
   \                     ??AppS2wCmd_NcmAuto_34:
   \   0000049E   0x6AFA             LDR      R2,[R7, #+44]
   \   000004A0   0x6501             STR      R1,[R0, #+80]
   \   000004A2   0xAE8A             ADD      R6,SP,#+552
   \   000004A4   0xF508 0x716F      ADD      R1,R8,#+956
   \   000004A8   0xB902             CBNZ.N   R2,??AppS2wCmd_NcmAuto_35
  10288              {
  10289                  gNwConnConfig.retryCountsConfig.maxL3ConnectCnt = s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT];
  10290                  gNwConnConfig.dhcpV4Cfg.dhcpMaxRetryCnt = 6;
  10291                  gNwConnConfig.dhcpV4Cfg.radioMode= s2wCurrent.ncmAutoConf[S2W_NCM_DHCP_RADIO_MODE];
  10292                  gNwConnConfig.dhcpV4Cfg.requestLeaseTime = 
  10293                      s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RQST_LEASE - S2W_NCM_EXTN_EXTN_BASE];
  10294                  gNwConnConfig.dhcpV4Cfg.dhcpRetryTimeout= 
  10295                      s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RETRANS_TIMEOUT - S2W_NCM_EXTN_EXTN_BASE];
  10296          
  10297              }
  10298              else
  10299              {
  10300                  gNwConnConfig.retryCountsConfig.maxL3ConnectCnt = S2W_NCM_DFLT_L3CONNECT_COUNT;
   \   000004AA   0x2264             MOVS     R2,#+100
   \                     ??AppS2wCmd_NcmAuto_35:
   \   000004AC   0x6542             STR      R2,[R0, #+84]
  10301                  gNwConnConfig.dhcpV4Cfg.dhcpMaxRetryCnt = 6; //s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT];         
   \   000004AE   0x2206             MOVS     R2,#+6
   \   000004B0   0x6072             STR      R2,[R6, #+4]
  10302                  gNwConnConfig.dhcpV4Cfg.radioMode= s2wCurrent.ncmAutoConf[S2W_NCM_DHCP_RADIO_MODE];         
   \   000004B2   0x6E7A             LDR      R2,[R7, #+100]
   \   000004B4   0xF88D 0x2260      STRB     R2,[SP, #+608]
  10303                  gNwConnConfig.dhcpV4Cfg.requestLeaseTime = 
  10304                      s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RQST_LEASE - S2W_NCM_EXTN_EXTN_BASE];        
   \   000004B8   0x694A             LDR      R2,[R1, #+20]
   \   000004BA   0x6042             STR      R2,[R0, #+4]
  10305                  gNwConnConfig.dhcpV4Cfg.dhcpRetryTimeout= 
  10306                      s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RETRANS_TIMEOUT - S2W_NCM_EXTN_EXTN_BASE];
   \   000004BC   0x6988             LDR      R0,[R1, #+24]
   \   000004BE   0x908A             STR      R0,[SP, #+552]
  10307              }
  10308          #ifdef S2W_NCM_ROAMING_SUPPORT 
  10309          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_ENABLE_ID])
  10310          		gNwConnConfig.roamingCfgParams.roamEnable = S2W_NCM_ROAM_DFLT_ROAMEN;	
  10311          	else
  10312          		gNwConnConfig.roamingCfgParams.roamEnable = S2W_NCM_ROAM_DFLT_ROAMDIS;
  10313          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_LOWER_THID] )
  10314          		gNwConnConfig.roamingCfgParams.rssiLowerTh = s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_LOWER_THID];
  10315          	else
  10316          		gNwConnConfig.roamingCfgParams.rssiLowerTh = S2W_NCM_ROAM_DFLT_RSSILOWERTH;
  10317              if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_HIGHER_THID]  )
  10318          		gNwConnConfig.roamingCfgParams.rssiHigherTh = s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_HIGHER_THID];
  10319          	else
  10320          		gNwConnConfig.roamingCfgParams.rssiHigherTh = S2W_NCM_ROAM_DFLT_RSSIHIGHERTH;
  10321              if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_RSSICHKINTERVAL_ID])
  10322          		gNwConnConfig.roamingCfgParams.rssiLevelChkInterval= (s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_RSSICHKINTERVAL_ID] * TIMER_INTERRUPT_1_MS);
  10323          	else
  10324          		gNwConnConfig.roamingCfgParams.rssiLevelChkInterval = S2W_NCM_ROAM_DFLT_RSSICHKINTERVAL;
  10325          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_THCROSSEDCNT_ID])
  10326          		gNwConnConfig.roamingCfgParams.thresholdCrossedCnt= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_THCROSSEDCNT_ID];
  10327          	else
  10328          	   gNwConnConfig.roamingCfgParams.thresholdCrossedCnt = S2W_NCM_ROAM_DFLT_THCROSSEDCNT;
  10329          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL3CON_ID] == 0 )
  10330          		gNwConnConfig.roamingCfgParams.maintainL3Con= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL3CON_ID];
  10331          	else
  10332          	   gNwConnConfig.roamingCfgParams.maintainL3Con = S2W_NCM_ROAM_DFLT_MAINTAINL3CON;
  10333          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL4CON_ID])
  10334          		gNwConnConfig.roamingCfgParams.maintainL4Con= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL4CON_ID];
  10335          	else
  10336          	   gNwConnConfig.roamingCfgParams.maintainL4Con = S2W_NCM_ROAM_DFLT_MAINTAINL4CON;
  10337          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANRETRYCNT_ID])
  10338          		gNwConnConfig.roamingCfgParams.scanRetryCnt= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANRETRYCNT_ID];
  10339          	else
  10340          	   gNwConnConfig.roamingCfgParams.scanRetryCnt = S2W_NCM_ROAM_DFLT_SCANRETRYCOUNT;
  10341          	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANPAUSETIME_ID])
  10342          		gNwConnConfig.roamingCfgParams.scanPauseTimeMs= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANPAUSETIME_ID];
  10343          	else
  10344          	   gNwConnConfig.roamingCfgParams.scanPauseTimeMs = S2W_NCM_ROAM_DFLT_SCANPUASETIME;
  10345          #endif /*GSN_NCM_ROAMING_SUPPORT */
  10346              
  10347              gNwConnConfig.scanMode = 2;
   \   000004C0   0x2002             MOVS     R0,#+2
   \   000004C2   0xF88D 0x02CC      STRB     R0,[SP, #+716]
  10348              gNwConnConfig.powersaveMode = 0;
   \   000004C6   0x2000             MOVS     R0,#+0
   \   000004C8   0x7428             STRB     R0,[R5, #+16]
  10349              gNwConnConfig.ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
   \   000004CA   0xF898 0x1188      LDRB     R1,[R8, #+392]
   \   000004CE   0x1E48             SUBS     R0,R1,#+1
   \   000004D0   0x4180             SBCS     R0,R0,R0
   \   000004D2   0x0FC0             LSRS     R0,R0,#+31
   \   000004D4   0x60A0             STR      R0,[R4, #+8]
  10350              gNwConnConfig.ipConfig.flag = GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT
  10351          #ifdef S2W_IPv6_SUPPORT  
  10352          #endif
  10353                                      ;
   \   000004D6   0x2101             MOVS     R1,#+1
   \   000004D8   0xF88D 0x1190      STRB     R1,[SP, #+400]
  10354              if(gNwConnConfig.ipConfig.ipv4.staticIp)
   \   000004DC   0xB1E0             CBZ.N    R0,??AppS2wCmd_NcmAuto_36
  10355              {
  10356                  memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4 );
   \   000004DE   0x2204             MOVS     R2,#+4
   \   000004E0   0xF508 0x71C6      ADD      R1,R8,#+396
   \   000004E4   0xA867             ADD      R0,SP,#+412
   \   000004E6   0x.... 0x....      BL       memcpy
  10357                  memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.subnetMask,s2wCurrent.netConf.netMask,4 );
   \   000004EA   0x2204             MOVS     R2,#+4
   \   000004EC   0xF508 0x71C8      ADD      R1,R8,#+400
   \   000004F0   0xA868             ADD      R0,SP,#+416
   \   000004F2   0x.... 0x....      BL       memcpy
  10358                  memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4 );
   \   000004F6   0x2204             MOVS     R2,#+4
   \   000004F8   0xF508 0x71CA      ADD      R1,R8,#+404
   \   000004FC   0xA869             ADD      R0,SP,#+420
   \   000004FE   0x.... 0x....      BL       memcpy
  10359                  memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
   \   00000502   0x2204             MOVS     R2,#+4
   \   00000504   0xF508 0x71D4      ADD      R1,R8,#+424
   \   00000508   0xA86C             ADD      R0,SP,#+432
   \   0000050A   0x.... 0x....      BL       memcpy
  10360                  memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
   \   0000050E   0x2204             MOVS     R2,#+4
   \   00000510   0xF508 0x71D6      ADD      R1,R8,#+428
   \   00000514   0xA86D             ADD      R0,SP,#+436
   \   00000516   0xE01E             B.N      ??AppS2wCmd_NcmAuto_37
  10361              }
  10362              else // store the host name
  10363              {
  10364                  if(strlen((const char *)s2wCurrent.hostName) != 0)
   \                     ??AppS2wCmd_NcmAuto_36:
   \   00000518   0xF508 0x77EE      ADD      R7,R8,#+476
   \   0000051C   0x.... 0x....      BL       ??Subroutine69_0
   \                     ??CrossCallReturnLabel_417:
   \   00000520   0xB9B0             CBNZ.N   R0,??AppS2wCmd_NcmAuto_38
  10365                  {
  10366                      memcpy(gNwConnConfig.ipConfig.ipv4.hostName, s2wCurrent.hostName,
  10367                              (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
  10368                  }
  10369          		else
  10370          		{     
  10371           			S2w_macAddrRTCGet(mac);
   \   00000522   0xA806             ADD      R0,SP,#+24
   \   00000524   0x.... 0x....      BL       S2w_macAddrRTCGet
  10372          	      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
   \   00000528   0xA806             ADD      R0,SP,#+24
   \   0000052A   0x....             ADR.N    R2,??DataTable471_1  ;; "GS_"
   \   0000052C   0x7941             LDRB     R1,[R0, #+5]
   \   0000052E   0x78C3             LDRB     R3,[R0, #+3]
   \   00000530   0x9101             STR      R1,[SP, #+4]
   \   00000532   0x7901             LDRB     R1,[R0, #+4]
   \   00000534   0x9100             STR      R1,[SP, #+0]
   \   00000536   0xA808             ADD      R0,SP,#+32
   \   00000538   0x.... 0x....      LDR.W    R1,??DataTable484_2
   \   0000053C   0x.... 0x....      BL       sprintf
  10373          		    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
   \   00000540   0xA808             ADD      R0,SP,#+32
   \   00000542   0x.... 0x....      BL       strlen
   \   00000546   0x4602             MOV      R2,R0
   \   00000548   0xA908             ADD      R1,SP,#+32
   \   0000054A   0x4638             MOV      R0,R7
   \   0000054C   0x.... 0x....      BL       memcpy
  10374          			memcpy(gNwConnConfig.ipConfig.ipv4.hostName, s2wCurrent.hostName,
  10375          				 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
   \                     ??AppS2wCmd_NcmAuto_38:
   \   00000550   0x2210             MOVS     R2,#+16
   \   00000552   0x4639             MOV      R1,R7
   \   00000554   0xA86E             ADD      R0,SP,#+440
   \                     ??AppS2wCmd_NcmAuto_37:
   \   00000556   0x.... 0x....      BL       memcpy
  10376          		}
  10377          	}
  10378          	if(TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   \   0000055A   0x.... 0x....      BL       ?Subroutine74
   \                     ??CrossCallReturnLabel_439:
   \   0000055E   0x.... 0x....      BL       GsnWdd_AssocStatusGet
   \   00000562   0x2801             CMP      R0,#+1
   \   00000564   0xD13E             BNE.N    ??AppS2wCmd_NcmAuto_19
  10379          	{
  10380          	    gNwConnConfig.ipConfig.ipv4.staticIp = pAppRtcLtchInfo->ipConfig.ipv4.staticIp;
   \   00000566   0x.... 0x....      LDR.W    R7,??DataTable486  ;; 0x41010159
   \   0000056A   0xF8D7 0x004F      LDR      R0,[R7, #+79]
   \   0000056E   0x60A0             STR      R0,[R4, #+8]
  10381                  gNwConnConfig.ipConfig.ipv4.ipAddr = pAppRtcLtchInfo->ipConfig.ipv4.ipAddr;
  10382                  gNwConnConfig.ipConfig.ipv4.subnetMask = pAppRtcLtchInfo->ipConfig.ipv4.subnetMask;
  10383                  gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = pAppRtcLtchInfo->ipConfig.ipv4.gatewayIpAddr;
  10384                  gNwConnConfig.ipConfig.ipv4.dhcpLeaseExpireTime =
  10385                                    pAppRtcLtchInfo->ipConfig.ipv4.dhcpLeaseExpireTime;
   \   00000570   0xF107 0x025F      ADD      R2,R7,#+95
   \   00000574   0xF8D7 0x0053      LDR      R0,[R7, #+83]
   \   00000578   0x60E0             STR      R0,[R4, #+12]
   \   0000057A   0xF8D7 0x0057      LDR      R0,[R7, #+87]
   \   0000057E   0x6120             STR      R0,[R4, #+16]
   \   00000580   0xF8D7 0x005B      LDR      R0,[R7, #+91]
   \   00000584   0x6160             STR      R0,[R4, #+20]
   \   00000586   0xE9D2 0x0100      LDRD     R0,R1,[R2, #+0]
   \   0000058A   0xE9C4 0x0106      STRD     R0,R1,[R4, #+24]
  10386          		gNwConnConfig.ipConfig.ipv4.dnsPriSrvrIp = pAppRtcLtchInfo->ipConfig.ipv4.dnsPriSrvrIp;
   \   0000058E   0xF8D7 0x0067      LDR      R0,[R7, #+103]
  10387                  gNwConnConfig.ipConfig.ipv4.dnsSecSrvrIp = pAppRtcLtchInfo->ipConfig.ipv4.dnsSecSrvrIp;
  10388          		memcpy(gNwConnConfig.wlanCfg.ssid.array,pAppRtcLtchInfo->ssid.array,
  10389          		   pAppRtcLtchInfo->ssid.length);
   \   00000592   0x.... 0x....      LDR.W    R1,??DataTable487  ;; 0x41010139
   \   00000596   0x6220             STR      R0,[R4, #+32]
   \   00000598   0xF8D7 0x006B      LDR      R0,[R7, #+107]
   \   0000059C   0x6260             STR      R0,[R4, #+36]
   \   0000059E   0xF10D 0x0031      ADD      R0,SP,#+49
   \   000005A2   0x.... 0x....      LDR.W    R4,??DataTable487_1  ;; 0x41010138
   \   000005A6   0x7822             LDRB     R2,[R4, #+0]
   \   000005A8   0x.... 0x....      BL       memcpy
  10390          		gNwConnConfig.wlanCfg.ssid.length= pAppRtcLtchInfo->ssid.length;
   \   000005AC   0x7820             LDRB     R0,[R4, #+0]
   \   000005AE   0xF88D 0x0030      STRB     R0,[SP, #+48]
  10391          		memcpy(gNwConnConfig.wlanCfg.bssid.array,pAppRtcLtchInfo->bssid.array, 6);
   \   000005B2   0x2206             MOVS     R2,#+6
   \   000005B4   0x4639             MOV      R1,R7
   \   000005B6   0x.... 0x....      BL       ?Subroutine115
  10392                  gNwConnConfig.wlanCfg.channel[0] = pAppRtcLtchInfo->channel;
   \                     ??CrossCallReturnLabel_555:
   \   000005BA   0x7A38             LDRB     R0,[R7, #+8]
   \   000005BC   0xF88D 0x0057      STRB     R0,[SP, #+87]
  10393          		gNwConnConfig.wlanCfg.securityCfg.mode = pAppRtcLtchInfo->wsec;
  10394          		gNwConnConfig.dhcpV4Cfg.pDhcpCliRecord = &pAppRtcLtchInfo->dhcpClientParams;
  10395          		gNwConnConfig.dhcpV4Cfg.timeElapsed = pAppRtcLtchInfo->sleepTime/10;
   \   000005C0   0x220A             MOVS     R2,#+10
   \   000005C2   0x79B8             LDRB     R0,[R7, #+6]
   \   000005C4   0x.... 0x....      LDR.W    R7,??DataTable487_2  ;; 0x41010258
   \   000005C8   0xF889 0x0006      STRB     R0,[R9, #+6]
   \   000005CC   0x2300             MOVS     R3,#+0
   \   000005CE   0xF107 0x0008      ADD      R0,R7,#+8
   \   000005D2   0x6330             STR      R0,[R6, #+48]
   \   000005D4   0xE9D7 0x0100      LDRD     R0,R1,[R7, #+0]
   \   000005D8   0x.... 0x....      BL       __aeabi_uldivmod
   \   000005DC   0x6370             STR      R0,[R6, #+52]
  10396          		pAppRtcLtchInfo->sleepTime = 0;
   \   000005DE   0x2000             MOVS     R0,#+0
   \   000005E0   0xE9C7 0x0000      STRD     R0,R0,[R7, #+0]
  10397          	}
  10398          #if 0
  10399              if(appRtcMemData.ncmState == GSN_NCM_STATE_L3_CONNECTED)
  10400              {
  10401                  gNwConnConfig.ipConfig.ipv4.staticIp = appRtcMemData.staticIp;
  10402                  gNwConnConfig.ipConfig.ipv4.ipAddr = appRtcMemData.ipAddr;
  10403                  gNwConnConfig.ipConfig.ipv4.subnetMask = appRtcMemData.subnetAddr;
  10404                  gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = appRtcMemData.gatewayIpAddr;
  10405                  if(appRtcMemData.staticIp == 0)
  10406                  {
  10407                      gNwConnConfig.clientConfig.ipConfig.dhcpLeaseExpireTime =
  10408                                    appRtcMemData.connectionInfo.dhcpLeaseTime;
  10409                  }
  10410                  gNwConnConfig.clientConfig.ipConfig.dnsPriSrvrIp = appRtcMemData.dns1;
  10411                  gNwConnConfig.clientConfig.ipConfig.dnsSecSrvrIp = appRtcMemData.dns2;
  10412                  memcpy(gNwConnConfig.clientConfig.ssid.array,appRtcMemData.ssid.array,
  10413                         appRtcMemData.ssid.length);
  10414                  gNwConnConfig.clientConfig.ssid.length = appRtcMemData.ssid.length;
  10415                  memcpy(gNwConnConfig.clientConfig.bssid.array,appRtcMemData.bssid, 6);
  10416                 gNwConnConfig.clientConfig.validBssid = 1;
  10417                  gNwConnConfig.clientConfig.channel = appRtcMemData.channel;
  10418                  if(appRtcMemData.encryptionType == GSN_MAC_ENC_NONE)
  10419                  {
  10420                  }
  10421                  else if(appRtcMemData.encryptionType == GSN_MAC_ENC_WEP)
  10422                  {
  10423                        gNwConnConfig.clientConfig.wepConfig.KeyId =
  10424                                          appRtcMemData.securityKey.wepKey.keyId;
  10425                        gNwConnConfig.clientConfig.wepConfig.KeyLen =
  10426                                          appRtcMemData.securityKey.wepKey.keyLen;
  10427                        memcpy(&gNwConnConfig.clientConfig.wepConfig.Key,
  10428                               appRtcMemData.securityKey.wepKey.key,
  10429                               appRtcMemData.securityKey.wepKey.keyLen);
  10430                  }
  10431                  else
  10432                  {
  10433                      if(appRtcMemData.pskValid )
  10434                      {
  10435                          memcpy(&gNwConnConfig.clientConfig.pskConfig.psk,
  10436                                 appRtcMemData.securityKey.psk,32);
  10437                          gNwConnConfig.clientConfig.pskConfig.pskValid = 1;
  10438                          memcpy(s2wCurrent.security.wpa.psk,
  10439                             appRtcMemData.securityKey.psk,32);
  10440                          s2wCurrent.security.wpa.pskValid = 1;
  10441                      }
  10442                  }
  10443                  gNwConnConfig.clientConfig.encryptionType =
  10444                                                             appRtcMemData.encryptionType;
  10445                  if(appRtcMemData.authMode == GSN_MAC_AUTH_SHARED)
  10446                  {
  10447                      gNwConnConfig.clientConfig.authType = appRtcMemData.authMode;
  10448                  }
  10449                  else
  10450                  {
  10451                      gNwConnConfig.clientConfig.authType = GSN_MAC_AUTH_AUTO;
  10452                  }
  10453              }
  10454          #endif
  10455              }
  10456          
  10457              //s2wCurrent.mode = s2wappMainTaskCtxt->if0.macIfType;
  10458              
  10459              // set the mac
  10460              if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
   \                     ??AppS2wCmd_NcmAuto_19:
   \   000005E4   0xF898 0x0004      LDRB     R0,[R8, #+4]
   \   000005E8   0x2801             CMP      R0,#+1
   \   000005EA   0xD102             BNE.N    ??AppS2wCmd_NcmAuto_39
  10461              {
  10462                 //S2w_LoadMacAddr(macAddr);
  10463                  S2w_macAddrRTCGet(macAddr);
   \   000005EC   0x.... 0x....      BL       ?Subroutine32
  10464              }
   \                     ??CrossCallReturnLabel_103:
   \   000005F0   0xE004             B.N      ??AppS2wCmd_NcmAuto_40
  10465              else
  10466              {
  10467                  memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array , 6);
   \                     ??AppS2wCmd_NcmAuto_39:
   \   000005F2   0x9903             LDR      R1,[SP, #+12]
   \   000005F4   0x2206             MOVS     R2,#+6
   \   000005F6   0xA804             ADD      R0,SP,#+16
   \   000005F8   0x.... 0x....      BL       memcpy
  10468              }
  10469          
  10470              //AppS2wHal_MacAddrSet(macAddr, FALSE);
  10471              
  10472              /* Init crypto engine */
  10473              GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
   \                     ??AppS2wCmd_NcmAuto_40:
   \   000005FC   0x.... 0x....      BL       ??Subroutine140_0
  10474          	
  10475              GsnNcm_ConfigSet(&s2wappMainTaskCtxt->appNwConnMgrCtx,  &gNwConnConfig);
   \                     ??CrossCallReturnLabel_633:
   \   00000600   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_458:
   \   00000604   0xA90C             ADD      R1,SP,#+48
   \   00000606   0x4450             ADD      R0,R10,R0
   \   00000608   0x.... 0x....      BL       GsnNcm_ConfigSet
  10476              status = GsnNcm_Start(&s2wappMainTaskCtxt->appNwConnMgrCtx,  AppS2wNetConnMgr_Cb, NULL);
  10477              return status;
   \   0000060C   0x....             LDR.N    R0,??DataTable470_2
   \   0000060E   0x.... 0x....      LDR.W    R1,??DataTable488
   \   00000612   0x6800             LDR      R0,[R0, #+0]
   \   00000614   0x2200             MOVS     R2,#+0
   \   00000616   0x4450             ADD      R0,R10,R0
   \   00000618   0x.... 0x....      BL       GsnNcm_Start
   \   0000061C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_NcmAuto_4:
   \   0000061E   0xF20D 0x5D1C      ADDW     SP,SP,#+1308
   \   00000622   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
  10478          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine139:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable488_1
   \   00000004   0xFB0B 0x1000      MLA      R0,R11,R0,R1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x1C81             ADDS     R1,R0,#+2
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine115:
   \   00000000   0xF10D 0x0051      ADD      R0,SP,#+81
   \   00000004   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine113:
   \   00000000   0xF88D 0x0030      STRB     R0,[SP, #+48]
   \                     ??Subroutine113_0:
   \   00000004   0xF10D 0x0031      ADD      R0,SP,#+49
   \   00000008   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0xF50D 0x60A3      ADD      R0,SP,#+1304
   \   00000004   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
  10479          UINT8
  10480          AppS2wCmd_NcmAutoConf(UINT8* ptr)
  10481          {
   \                     AppS2wCmd_NcmAutoConf:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
  10482              UINT8 status;
  10483              UINT8 *p;
  10484              UINT32 id=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
  10485          
  10486              UINT32 value;
  10487          
  10488               p = AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ?Subroutine39
  10489               if (!p)
   \                     ??CrossCallReturnLabel_210:
   \   0000000C   0xB178             CBZ.N    R0,??AppS2wCmd_NcmAutoConf_0
  10490               {
  10491                   return S2W_EINVAL;
  10492               }
  10493               status = AppS2wParse_Int(p, &id);
  10494               if ((status != S2W_SUCCESS)||((id > 5)&&(id < 8))
  10495          #ifdef S2W_NCM_ROAMING_SUPPORT 				 
  10496                   || (id > 27)
  10497          #else
  10498                   || (id > 15 && (id < 25 || id > 27))
  10499          #endif
  10500                     )
   \   0000000E   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_277:
   \   00000012   0xB960             CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_0
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x1F80             SUBS     R0,R0,#+6
   \   00000018   0x2802             CMP      R0,#+2
   \   0000001A   0xD308             BCC.N    ??AppS2wCmd_NcmAutoConf_0
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xBF24             ITT      CS 
   \   00000022   0x3819             SUBCS    R0,R0,#+25
   \   00000024   0x2803             CMPCS    R0,#+3
   \   00000026   0xD202             BCS.N    ??AppS2wCmd_NcmAutoConf_0
  10501               {
  10502                   return S2W_EINVAL;
  10503               }
  10504               p = AppS2wParse_NextParamGet(&ptr);
   \   00000028   0x.... 0x....      BL       ?Subroutine39
  10505               if (!p)
   \                     ??CrossCallReturnLabel_209:
   \   0000002C   0xB908             CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_1
  10506               {
  10507                   return S2W_EINVAL;
   \                     ??AppS2wCmd_NcmAutoConf_0:
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xE017             B.N      ??AppS2wCmd_NcmAutoConf_2
  10508               }
  10509          #ifdef S2W_NCM_ROAMING_SUPPORT 				 
  10510          	 if((id == S2W_NCM_ROAM_HIGHER_THID || id == S2W_NCM_ROAM_LOWER_THID) && (*p == '-'))
  10511          	 {
  10512          		status = AppS2wParse_Int(p+1, &value);
  10513          		s2wCurrent.ncmAutoConf[id] = (unsigned char)(value * -1);
  10514          	 }
  10515          	 else if((id == S2W_NCM_ROAM_HIGHER_THID || S2W_NCM_ROAM_LOWER_THID == 3) && (*p != '-'))		
  10516          	 {
  10517          		return S2W_EINVAL;
  10518          	 }
  10519          	else
  10520          #endif		/*GSN_NCM_ROAMING_SUPPORT */  
  10521               if(id >= 26  && id <= 27)
   \                     ??AppS2wCmd_NcmAutoConf_1:
   \   00000032   0x9900             LDR      R1,[SP, #+0]
   \   00000034   0x....             LDR.N    R4,??DataTable470_1
   \   00000036   0x391A             SUBS     R1,R1,#+26
   \   00000038   0x2902             CMP      R1,#+2
   \   0000003A   0xD20B             BCS.N    ??AppS2wCmd_NcmAutoConf_3
  10522               {
  10523                  value = 0;
   \   0000003C   0x2100             MOVS     R1,#+0
   \   0000003E   0x9101             STR      R1,[SP, #+4]
  10524                  status = AppS2wParse_Int(p, &value);
   \   00000040   0x.... 0x....      BL       ?Subroutine52
  10525                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_319:
   \   00000044   0xB968             CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_2
  10526                  {
  10527                      return status;
  10528                  }
  10529                  s2wCurrent.ncmAutoConf_extn[id - S2W_NCM_EXTN_EXTN_BASE] = value;        
   \   00000046   0x9900             LDR      R1,[SP, #+0]
   \   00000048   0x9A01             LDR      R2,[SP, #+4]
   \   0000004A   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \   0000004E   0xF8C1 0x2368      STR      R2,[R1, #+872]
   \   00000052   0xE006             B.N      ??AppS2wCmd_NcmAutoConf_2
  10530               }
  10531               else 
  10532               {
  10533                   status = AppS2wParse_Int(p, &s2wCurrent.ncmAutoConf[id]);
   \                     ??AppS2wCmd_NcmAutoConf_3:
   \   00000054   0x9900             LDR      R1,[SP, #+0]
   \   00000056   0xEB04 0x0181      ADD      R1,R4,R1, LSL #+2
   \   0000005A   0xF501 0x714B      ADD      R1,R1,#+812
   \   0000005E   0x.... 0x....      BL       AppS2wParse_Int
  10534                   if (status != S2W_SUCCESS)
  10535                   {
  10536                       return status;
  10537                   }
  10538               }
  10539               return status;
   \                     ??AppS2wCmd_NcmAutoConf_2:
   \   00000062   0xB004             ADD      SP,SP,#+16
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
  10540          }
  10541          #endif // #ifdef  NCM_SUPPORT_ENABLE 
  10542          
  10543          
  10544          /**
  10545           ******************************************************************
  10546           * @ingroup S2w-Application
  10547           * @brief Process the AT+WAUTO command.
  10548           *   This function Parse and Store the WiFi auto connect settings.
  10549           * @param ptr Pointer to the user input string.
  10550           *
  10551           * @return S2W_SUCCESS - operation successful.
  10552           * @retval S2W_EINVAL  - operation failure-invalid command.
  10553           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  10554          PUBLIC UINT8
  10555          AppS2wCmd_Wauto(UINT8 *ptr)
  10556          {
   \                     AppS2wCmd_Wauto:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x4604             MOV      R4,R0
  10557              S2W_WLANDATA_T autoparams;
  10558              UINT8 status;
  10559              memset(&autoparams, 0, sizeof(autoparams));
   \   00000006   0x2230             MOVS     R2,#+48
   \   00000008   0x.... 0x....      BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_48:
   \   0000000C   0x4601             MOV      R1,R0
  10560              status = AppS2wParse_Wcmd(ptr, &autoparams, pwc_wauto);
   \   0000000E   0x2202             MOVS     R2,#+2
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       AppS2wParse_Wcmd
  10561              if (status != S2W_SUCCESS)
   \   00000016   0xBB18             CBNZ.N   R0,??AppS2wCmd_Wauto_0
  10562              {
  10563                  return status;
  10564              }
  10565          
  10566              if(s2wappMainTaskCtxt->apConf &&  autoparams.mode == 2) // if ncm enabled and mode is AP then store in Ap conf
   \   00000018   0x.... 0x....      BL       ?Subroutine76
   \                     ??CrossCallReturnLabel_445:
   \   0000001C   0xB1C8             CBZ.N    R0,??AppS2wCmd_Wauto_1
   \   0000001E   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xD115             BNE.N    ??AppS2wCmd_Wauto_1
  10567              {
  10568                  s2wCurrent.lmtdApConf.ssid.length = autoparams.ssidLen;
   \   00000026   0xF89D 0x0002      LDRB     R0,[SP, #+2]
  10569                  memcpy(s2wCurrent.lmtdApConf.ssid.array,autoparams.ssid,autoparams.ssidLen);
   \   0000002A   0xF89D 0x2002      LDRB     R2,[SP, #+2]
   \   0000002E   0xF884 0x01EC      STRB     R0,[R4, #+492]
   \   00000032   0xF10D 0x010A      ADD      R1,SP,#+10
   \   00000036   0xF204 0x10ED      ADDW     R0,R4,#+493
   \   0000003A   0x.... 0x....      BL       memcpy
  10570                  if(autoparams.channel)
   \   0000003E   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000042   0xB900             CBNZ.N   R0,??AppS2wCmd_Wauto_2
  10571                  {
  10572                      s2wCurrent.lmtdApConf.channel = autoparams.channel;
  10573                  }
  10574                  else
  10575                  {
  10576          			s2wCurrent.lmtdApConf.channel = 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \                     ??AppS2wCmd_Wauto_2:
   \   00000046   0xF884 0x0286      STRB     R0,[R4, #+646]
  10577          		}
  10578          		s2wCurrent.autoWlandata.mode = autoparams.mode;
   \   0000004A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000004E   0x7320             STRB     R0,[R4, #+12]
   \   00000050   0xE005             B.N      ??AppS2wCmd_Wauto_3
  10579              }
  10580              else
  10581              {
  10582                  memcpy(&s2wCurrent.autoWlandata, &autoparams,
  10583                     sizeof(s2wCurrent.autoWlandata));
   \                     ??AppS2wCmd_Wauto_1:
   \   00000052   0x2230             MOVS     R2,#+48
   \   00000054   0xA900             ADD      R1,SP,#+0
   \   00000056   0xF104 0x000C      ADD      R0,R4,#+12
   \   0000005A   0x.... 0x....      BL       memcpy
  10584              }
  10585              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Wauto_3:
   \   0000005E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Wauto_0:
   \   00000060   0xB00C             ADD      SP,SP,#+48
   \   00000062   0xBD10             POP      {R4,PC}          ;; return
  10586          }
  10587          /**
  10588           ******************************************************************
  10589           * @ingroup S2w-Application
  10590           * @brief Process the AT+WRATE Command.
  10591           * @param ptr Pointer to the user input string.
  10592           * @return status.
  10593           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  10594          PUBLIC UINT8
  10595          AppS2wCmd_Wrate(UINT8 *ptr)
  10596          {
   \                     AppS2wCmd_Wrate:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
  10597              GSN_WDD_TX_RATE_SET_PARAM_T param;
  10598          	GSN_WDD_TX_RATE_GET_RESP txRate;
  10599              UINT8 status=S2W_SUCCESS;
  10600          	UINT32 val;
  10601          	UINT8 *p;
  10602          	INT32 retVal;
  10603              if (ptr[0] == '?' && ptr[1] == '\0')
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable490
   \   0000000A   0x283F             CMP      R0,#+63
   \   0000000C   0xBF02             ITTT     EQ 
   \   0000000E   0x9803             LDREQ    R0,[SP, #+12]
   \   00000010   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000012   0x2800             CMPEQ    R0,#+0
   \   00000014   0xD110             BNE.N    ??AppS2wCmd_Wrate_0
  10604              {
  10605                  retVal= GsnWdd_TxRateGet(&s2wappMainTaskCtxt->if0.wddCtx,&txRate);
  10606                  if(retVal == GSN_SUCCESS)
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xA902             ADD      R1,SP,#+8
   \   0000001A   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000001E   0x.... 0x....      BL       GsnWdd_TxRateGet
   \   00000022   0xB938             CBNZ.N   R0,??AppS2wCmd_Wrate_1
  10607                  {
  10608          			S2w_Printf("\r\n%d", txRate.dataFrameRate);
   \   00000024   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   00000028   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%d">`
   \   0000002C   0x.... 0x....      BL       S2w_Printf
  10609                  	return S2W_SUCCESS;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xE040             B.N      ??AppS2wCmd_Wrate_2
  10610                  }
  10611          		else
  10612          			return S2W_FAILURE;
   \                     ??AppS2wCmd_Wrate_1:
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0xE03E             B.N      ??AppS2wCmd_Wrate_2
  10613              }
  10614              else
  10615              {
  10616          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wrate_0:
   \   00000038   0x.... 0x....      BL       ?Subroutine39
  10617                  if (!p)
   \                     ??CrossCallReturnLabel_208:
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD03A             BEQ.N    ??AppS2wCmd_Wrate_2
  10618                  {
  10619                      return status;
  10620                  }
  10621          		status = AppS2wParse_Int(p, &val);
  10622                  if((status != S2W_SUCCESS)||( S2W_SUCCESS != S2wRateValidation(val)))
   \   00000040   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_276:
   \   00000044   0xBB58             CBNZ.N   R0,??AppS2wCmd_Wrate_3
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x.... 0x....      BL       S2wRateValidation
   \   0000004C   0xBB38             CBNZ.N   R0,??AppS2wCmd_Wrate_3
  10623                      {
  10624          			return S2W_EINVAL;
  10625          			    }
  10626                  param.dataFrameRate = val;
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0xF88D 0x0004      STRB     R0,[SP, #+4]
  10627                  // update the default the mgmt and ctl rate
  10628                  param.mgmtFrameRate = val;
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0xF88D 0x0005      STRB     R0,[SP, #+5]
  10629                  param.ctlFrameRate = val;
   \   0000005A   0x9800             LDR      R0,[SP, #+0]
   \   0000005C   0xF88D 0x0006      STRB     R0,[SP, #+6]
  10630          
  10631          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000060   0x.... 0x....      BL       ?Subroutine39
  10632                  if (p && *p)
   \                     ??CrossCallReturnLabel_207:
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xBF1C             ITT      NE 
   \   00000068   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000006A   0x2900             CMPNE    R1,#+0
   \   0000006C   0xD009             BEQ.N    ??AppS2wCmd_Wrate_4
  10633          				{
  10634                      status = AppS2wParse_Int(p, &val);
  10635          			if((status != S2W_SUCCESS) ||( S2W_SUCCESS != S2wRateValidation(val)))
   \   0000006E   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_275:
   \   00000072   0xB9A0             CBNZ.N   R0,??AppS2wCmd_Wrate_3
   \   00000074   0x9800             LDR      R0,[SP, #+0]
   \   00000076   0x.... 0x....      BL       S2wRateValidation
   \   0000007A   0xB980             CBNZ.N   R0,??AppS2wCmd_Wrate_3
  10636                      {
  10637                     		return S2W_EINVAL;
  10638                      }
  10639          		    param.mgmtFrameRate = val;
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0xF88D 0x0005      STRB     R0,[SP, #+5]
  10640                  }
  10641          		p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wrate_4:
   \   00000082   0x.... 0x....      BL       ?Subroutine39
  10642                  if (p && *p)
   \                     ??CrossCallReturnLabel_206:
   \   00000086   0x2800             CMP      R0,#+0
   \   00000088   0xBF1C             ITT      NE 
   \   0000008A   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000008C   0x2900             CMPNE    R1,#+0
   \   0000008E   0xD00B             BEQ.N    ??AppS2wCmd_Wrate_5
  10643                  {
  10644                      status = AppS2wParse_Int(p, &val);
  10645          			if((status != S2W_SUCCESS)||( S2W_SUCCESS != S2wRateValidation(val)))
   \   00000090   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_274:
   \   00000094   0xB918             CBNZ.N   R0,??AppS2wCmd_Wrate_3
   \   00000096   0x9800             LDR      R0,[SP, #+0]
   \   00000098   0x.... 0x....      BL       S2wRateValidation
   \   0000009C   0xB108             CBZ.N    R0,??AppS2wCmd_Wrate_6
  10646                  {
  10647              		return S2W_EINVAL;        
   \                     ??AppS2wCmd_Wrate_3:
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0xE009             B.N      ??AppS2wCmd_Wrate_2
  10648              	}
  10649          		    param.ctlFrameRate = val;
   \                     ??AppS2wCmd_Wrate_6:
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0xF88D 0x0006      STRB     R0,[SP, #+6]
  10650                  }
  10651          
  10652                  status= GsnWdd_TxRateSet(&s2wappMainTaskCtxt->if0.wddCtx,&param);
  10653          
  10654              }
  10655              return status;
   \                     ??AppS2wCmd_Wrate_5:
   \   000000A8   0xA901             ADD      R1,SP,#+4
   \   000000AA   0x6820             LDR      R0,[R4, #+0]
   \   000000AC   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000000B0   0x.... 0x....      BL       GsnWdd_TxRateSet
   \   000000B4   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_Wrate_2:
   \   000000B6   0xB004             ADD      SP,SP,#+16
   \   000000B8   0xBD10             POP      {R4,PC}          ;; return
  10656          }
  10657          
  10658          /**
  10659           ******************************************************************
  10660           * @ingroup S2w-Application
  10661           * @brief Process the AT+NAUTO Command .
  10662           *       AT+NAUTO command stores the settings for network auto connect.
  10663           * @param ptr Pointer to the user string.
  10664           * @return S2W_SUCCESS - operation successful.
  10665           * @retval S2W_EINVAL  - operation failure-invalid command.
  10666           * @retval S2W_FAILURE - operation failure
  10667           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  10668          PUBLIC UINT8
  10669          AppS2wCmd_Nauto(UINT8 *ptr)
  10670          {
   \                     AppS2wCmd_Nauto:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
  10671              S2W_NETDATA_T params;
  10672              UINT8 *temp = ptr;
  10673              UINT8 status = S2W_EINVAL;
  10674              UINT8 *p;
  10675              UINT32 port,srcPort=0;
  10676          	ULONG ipAddress;
  10677              UINT8 ipmaskH[4] = {0xff,0xff,0xff,0xff};
   \   00000004   0x.... 0x....      ADR.W    R1,`?<Constant {255, 255, 255, 255}>`
   \   00000008   0x680A             LDR      R2,[R1, #0]
   \   0000000A   0x9000             STR      R0,[SP, #+0]
  10678              UINT8 ipmaskL[4] = {0x00,0x00,0x00,0x00};
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9002             STR      R0,[SP, #+8]
   \   00000012   0xA805             ADD      R0,SP,#+20
   \   00000014   0x6002             STR      R2,[R0, #+0]
   \   00000016   0xA804             ADD      R0,SP,#+16
  10679              memset(&params, 0, sizeof(params));
   \   00000018   0x223C             MOVS     R2,#+60
   \   0000001A   0x6001             STR      R1,[R0, #+0]
   \   0000001C   0xA806             ADD      R0,SP,#+24
   \   0000001E   0x.... 0x....      BL       memset
  10680              p = AppS2wParse_NextParamGet(&temp);
   \   00000022   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   00000026   0x0004             MOVS     R4,R0
  10681              if (!p)
   \   00000028   0xD026             BEQ.N    ??AppS2wCmd_Nauto_0
  10682              {
  10683                  return status;
  10684              }
  10685              status = AppS2wParse_Boolean(p, &params.mode);
   \   0000002A   0xA906             ADD      R1,SP,#+24
   \   0000002C   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000030   0x0005             MOVS     R5,R0
  10686              if (status != S2W_SUCCESS)
   \   00000032   0xD109             BNE.N    ??AppS2wCmd_Nauto_1
  10687              {
  10688                  return status;
  10689              }
  10690              p = AppS2wParse_NextParamGet(&temp);
   \   00000034   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   00000038   0x0004             MOVS     R4,R0
  10691              if (!p)
   \   0000003A   0xF000 0x8082      BEQ.W    ??AppS2wCmd_Nauto_2
  10692              {
  10693                  return status;
  10694              }
  10695              status = AppS2wParse_Boolean(p, &params.proto);
   \   0000003E   0xF10D 0x0119      ADD      R1,SP,#+25
   \   00000042   0x.... 0x....      BL       AppS2wParse_Boolean
   \   00000046   0x0005             MOVS     R5,R0
  10696              if (status != S2W_SUCCESS)
   \                     ??AppS2wCmd_Nauto_1:
   \   00000048   0xD17B             BNE.N    ??AppS2wCmd_Nauto_2
  10697              {
  10698                  return status;
  10699              }
  10700              if(params.mode == 0)//client-tcp/udp
   \   0000004A   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0xA800             ADD      R0,SP,#+0
   \   00000052   0xD169             BNE.N    ??AppS2wCmd_Nauto_3
  10701              {
  10702                  //status = AppS2wParse_AddrPort(&temp, &params);
  10703               
  10704                 p = AppS2wParse_NextParamGet(&temp);
   \   00000054   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   00000058   0x0004             MOVS     R4,R0
  10705                  if (!p)
   \   0000005A   0xD00D             BEQ.N    ??AppS2wCmd_Nauto_0
  10706                  {
  10707                    return S2W_EINVAL;
  10708                  }
  10709                   if(inet_addr((const char *)p) != -1)
   \   0000005C   0x.... 0x....      BL       inet_addr
   \   00000060   0xF110 0x0F01      CMN      R0,#+1
   \   00000064   0xD035             BEQ.N    ??AppS2wCmd_Nauto_4
  10710                   {
  10711                        status = AppS2wParse_Ip(p, params.ipAddr );
  10712                        if(status != S2W_SUCCESS)
   \   00000066   0xA907             ADD      R1,SP,#+28
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       AppS2wParse_Ip
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD106             BNE.N    ??AppS2wCmd_Nauto_5
  10713                        {
  10714          
  10715                            return S2W_EINVAL;
  10716                      }
  10717                      p = AppS2wParse_NextParamGet(&temp);
  10718                      if (!p)
  10719                      {
  10720                        return S2W_EINVAL;
  10721                      }
  10722                      else
  10723                      {
  10724                         status = AppS2wParse_Int(p, &port);
  10725                        if (status != S2W_SUCCESS || !is_valid_port(port))
  10726                        {
  10727                          return S2W_EINVAL;
  10728                        }
  10729                        params.port = port;
  10730                      }
  10731                   }
  10732                  else
  10733                  {
  10734                     /* Can be URL  */
  10735                    if((s2wLinkState != S2W_LINK_STATE_DISCONNECTED)  && (L3ConnectStatus == TRUE))
  10736                    {
  10737                      	status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx,(UINT8*)p,&ipAddress,5);
  10738                      if(status != GSN_SUCCESS)
  10739                       return S2W_EINVAL;
  10740          				params.ipAddr[0] = (ipAddress & 0xff000000)>>24 ;			
  10741          				params.ipAddr[1] = (ipAddress & 0x00ff0000)>>16;
  10742          				params.ipAddr[2] = (ipAddress & 0x0000ff00)>>8;
  10743          				params.ipAddr[3] = (ipAddress & 0x000000ff);
  10744                    }
  10745                    else
  10746                      {
  10747                        params.isFqdn = TRUE;
  10748                        /* resolve it during NCM L4 connection */
  10749                        memcpy(params.fqdn,p,strlen((const char*)p));
  10750                      }
  10751                      
  10752                      p = AppS2wParse_NextParamGet(&temp);
  10753                      if (!p)
  10754                      {
  10755                        return S2W_EINVAL;
  10756                      }
  10757                      else
  10758                      {
  10759                         status = AppS2wParse_Int(p, &port);
  10760                        if (status != S2W_SUCCESS || !is_valid_port(port))
  10761                        {
  10762                          return S2W_EINVAL;
  10763                        }
  10764                        params.port = port;
  10765                      }
  10766                  }
  10767              }
  10768              else //server -tcp/udp no need of ip address
  10769              {
  10770                  p = AppS2wParse_NextParamGet(&temp);
  10771                  if (!p)
  10772                  {
  10773                      return S2W_EINVAL;
  10774                  }
  10775                  else
  10776                  {
  10777                      if(*p != '\0')
  10778                      {
  10779                          status = AppS2wParse_Ip(p, params.ipAddr );
  10780                          if (status != S2W_SUCCESS)
  10781                          {
  10782                              return status;
  10783                          }
  10784                      }
  10785                  }
  10786                  p = AppS2wParse_NextParamGet(&temp);
   \                     ??AppS2wCmd_Nauto_6:
   \   00000072   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   00000076   0x0004             MOVS     R4,R0
  10787                  if (!p)
   \                     ??AppS2wCmd_Nauto_0:
   \   00000078   0xD07D             BEQ.N    ??AppS2wCmd_Nauto_7
  10788                  {
  10789                      return S2W_EINVAL;
  10790                  }
  10791                  status = AppS2wParse_Int(p, &port);
  10792                  if (status != S2W_SUCCESS || !is_valid_port(port))
   \   0000007A   0x.... 0x....      BL       ?Subroutine53
   \                     ??CrossCallReturnLabel_336:
   \   0000007E   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_Nauto_5:
   \   00000080   0xD179             BNE.N    ??AppS2wCmd_Nauto_7
   \   00000082   0x9803             LDR      R0,[SP, #+12]
   \   00000084   0x2800             CMP      R0,#+0
   \   00000086   0xD076             BEQ.N    ??AppS2wCmd_Nauto_7
   \   00000088   0xF5B0 0x3F80      CMP      R0,#+65536
   \   0000008C   0xD273             BCS.N    ??AppS2wCmd_Nauto_7
  10793                  {
  10794                      return S2W_EINVAL;
  10795                  }
  10796                  params.port = port;
   \   0000008E   0xF8AD 0x001A      STRH     R0,[SP, #+26]
  10797              }
  10798              if((params.mode == 0) &&(params.proto == S2W_NETDATA_PROTO_UDP))//client-/udp
   \   00000092   0x.... 0x....      LDR.W    R5,??DataTable491
   \   00000096   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD158             BNE.N    ??AppS2wCmd_Nauto_8
   \   0000009E   0xF89D 0x0019      LDRB     R0,[SP, #+25]
   \   000000A2   0x2800             CMP      R0,#+0
   \   000000A4   0xD157             BNE.N    ??AppS2wCmd_Nauto_9
  10799              {
  10800          	    p = AppS2wParse_NextParamGet(&temp);
   \   000000A6   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_59:
   \   000000AA   0x0004             MOVS     R4,R0
  10801          	    if ( (p) &&(*p != '\0'))
   \   000000AC   0xBF1C             ITT      NE 
   \   000000AE   0x7820             LDRBNE   R0,[R4, #+0]
   \   000000B0   0x2800             CMPNE    R0,#+0
   \   000000B2   0xD048             BEQ.N    ??AppS2wCmd_Nauto_10
  10802          	    {
  10803          	        status = AppS2wParse_Int(p, &srcPort);
  10804          	        if (status != S2W_SUCCESS || !is_valid_port(srcPort))
   \   000000B4   0x.... 0x....      BL       ?Subroutine57
   \                     ??CrossCallReturnLabel_362:
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD15C             BNE.N    ??AppS2wCmd_Nauto_7
   \   000000BC   0x9802             LDR      R0,[SP, #+8]
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD059             BEQ.N    ??AppS2wCmd_Nauto_7
   \   000000C2   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000000C6   0xD256             BCS.N    ??AppS2wCmd_Nauto_7
  10805          	        {
  10806          	            return S2W_EINVAL;
  10807          	        }
  10808          	        if (AppS2wParse_NextParamGet(&temp))
   \   000000C8   0x.... 0x....      BL       ?Subroutine25
  10809          	            return S2W_EINVAL;
  10810                  }
   \                     ??CrossCallReturnLabel_58:
   \   000000CC   0x2800             CMP      R0,#+0
   \   000000CE   0xD03C             BEQ.N    ??AppS2wCmd_Nauto_11
   \   000000D0   0xE051             B.N      ??AppS2wCmd_Nauto_7
   \                     ??AppS2wCmd_Nauto_4:
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable494
   \   000000D6   0x7800             LDRB     R0,[R0, #+0]
   \   000000D8   0xB1E0             CBZ.N    R0,??AppS2wCmd_Nauto_12
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable494_1
   \   000000DE   0x7840             LDRB     R0,[R0, #+1]
   \   000000E0   0x2801             CMP      R0,#+1
   \   000000E2   0xD117             BNE.N    ??AppS2wCmd_Nauto_12
   \   000000E4   0x.... 0x....      BL       ?Subroutine75
   \                     ??CrossCallReturnLabel_443:
   \   000000E8   0x2305             MOVS     R3,#+5
   \   000000EA   0x.... 0x....      BL       ?Subroutine84
   \                     ??CrossCallReturnLabel_464:
   \   000000EE   0xB2C0             UXTB     R0,R0
   \   000000F0   0x2800             CMP      R0,#+0
   \   000000F2   0xD140             BNE.N    ??AppS2wCmd_Nauto_7
   \   000000F4   0x9801             LDR      R0,[SP, #+4]
   \   000000F6   0x0E00             LSRS     R0,R0,#+24
   \   000000F8   0xF88D 0x001C      STRB     R0,[SP, #+28]
   \   000000FC   0x9801             LDR      R0,[SP, #+4]
   \   000000FE   0x0C00             LSRS     R0,R0,#+16
   \   00000100   0xF88D 0x001D      STRB     R0,[SP, #+29]
   \   00000104   0x9801             LDR      R0,[SP, #+4]
   \   00000106   0x0A00             LSRS     R0,R0,#+8
   \   00000108   0xF88D 0x001E      STRB     R0,[SP, #+30]
   \   0000010C   0x9801             LDR      R0,[SP, #+4]
   \   0000010E   0xF88D 0x001F      STRB     R0,[SP, #+31]
   \   00000112   0xE7AE             B.N      ??AppS2wCmd_Nauto_6
   \                     ??AppS2wCmd_Nauto_12:
   \   00000114   0x2001             MOVS     R0,#+1
   \   00000116   0xF88D 0x0030      STRB     R0,[SP, #+48]
   \   0000011A   0x.... 0x....      BL       ?Subroutine70
   \                     ??CrossCallReturnLabel_424:
   \   0000011E   0x4602             MOV      R2,R0
   \   00000120   0x4621             MOV      R1,R4
   \   00000122   0x.... 0x....      BL       ??Subroutine113_0
   \                     ??CrossCallReturnLabel_550:
   \   00000126   0xE7A4             B.N      ??AppS2wCmd_Nauto_6
   \                     ??AppS2wCmd_Nauto_3:
   \   00000128   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000012C   0x0004             MOVS     R4,R0
   \   0000012E   0xD022             BEQ.N    ??AppS2wCmd_Nauto_7
   \   00000130   0x7820             LDRB     R0,[R4, #+0]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD09D             BEQ.N    ??AppS2wCmd_Nauto_6
   \   00000136   0xA907             ADD      R1,SP,#+28
   \   00000138   0x4620             MOV      R0,R4
   \   0000013A   0x.... 0x....      BL       AppS2wParse_Ip
   \   0000013E   0x0005             MOVS     R5,R0
   \   00000140   0xD097             BEQ.N    ??AppS2wCmd_Nauto_6
   \                     ??AppS2wCmd_Nauto_2:
   \   00000142   0x4628             MOV      R0,R5
   \   00000144   0xE020             B.N      ??AppS2wCmd_Nauto_13
  10811                  else
  10812                  {
  10813          			srcPort = 0;
   \                     ??AppS2wCmd_Nauto_10:
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0x9002             STR      R0,[SP, #+8]
  10814          		}
  10815          		s2wCurrent.udpSrcPort = srcPort;
   \                     ??AppS2wCmd_Nauto_11:
   \   0000014A   0x9802             LDR      R0,[SP, #+8]
   \   0000014C   0xF8A5 0x03A6      STRH     R0,[R5, #+934]
  10816          	}
  10817              if(params.mode == 0  &&  params.isFqdn != TRUE) // check only in case of client
   \                     ??AppS2wCmd_Nauto_8:
   \   00000150   0xF89D 0x0018      LDRB     R0,[SP, #+24]
   \   00000154   0xB988             CBNZ.N   R0,??AppS2wCmd_Nauto_14
   \                     ??AppS2wCmd_Nauto_9:
   \   00000156   0xF89D 0x0030      LDRB     R0,[SP, #+48]
   \   0000015A   0x2801             CMP      R0,#+1
   \   0000015C   0xD00D             BEQ.N    ??AppS2wCmd_Nauto_14
  10818              {
  10819                  if((memcmp((UINT8*)params.ipAddr,ipmaskH,3) ==0) ||
  10820                     (memcmp((UINT8*)params.ipAddr,ipmaskL,4) ==0))
   \   0000015E   0x2203             MOVS     R2,#+3
   \   00000160   0xA905             ADD      R1,SP,#+20
   \   00000162   0xA807             ADD      R0,SP,#+28
   \   00000164   0x.... 0x....      BL       memcmp
   \   00000168   0xB128             CBZ.N    R0,??AppS2wCmd_Nauto_7
   \   0000016A   0x2204             MOVS     R2,#+4
   \   0000016C   0xA904             ADD      R1,SP,#+16
   \   0000016E   0xA807             ADD      R0,SP,#+28
   \   00000170   0x.... 0x....      BL       memcmp
   \   00000174   0xB908             CBNZ.N   R0,??AppS2wCmd_Nauto_14
  10821                  {
  10822                      return S2W_EINVAL;
   \                     ??AppS2wCmd_Nauto_7:
   \   00000176   0x2002             MOVS     R0,#+2
   \   00000178   0xE006             B.N      ??AppS2wCmd_Nauto_13
  10823                  }
  10824              }
  10825              memcpy(&s2wCurrent.autoNetdata, &params,
  10826                     sizeof(s2wCurrent.autoNetdata));
   \                     ??AppS2wCmd_Nauto_14:
   \   0000017A   0x223C             MOVS     R2,#+60
   \   0000017C   0xA906             ADD      R1,SP,#+24
   \   0000017E   0xF105 0x003C      ADD      R0,R5,#+60
   \   00000182   0x.... 0x....      BL       memcpy
  10827              return S2W_SUCCESS;
   \   00000186   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Nauto_13:
   \   00000188   0xB015             ADD      SP,SP,#+84
   \   0000018A   0xBD30             POP      {R4,R5,PC}       ;; return
  10828          }

   \                                 In section .text, align 2, keep-with-next
  10829          UINT8
  10830          AppS2wCmd_IdOutput(UINT8 *ptr)
  10831          {
   \                     AppS2wCmd_IdOutput:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  10832              UINT32 which;
  10833              UINT8 status;
  10834          
  10835              status = AppS2wParse_Int(ptr, &which);
   \   00000004   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_273:
   \   00000008   0x0004             MOVS     R4,R0
  10836              if (status != S2W_SUCCESS)
   \   0000000A   0xD113             BNE.N    ??AppS2wCmd_IdOutput_0
  10837              {
  10838                  return status;
  10839              }
  10840          
  10841              switch (which)
   \   0000000C   0x9900             LDR      R1,[SP, #+0]
   \   0000000E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%s">`
   \   00000012   0xB119             CBZ.N    R1,??AppS2wCmd_IdOutput_1
   \   00000014   0x2902             CMP      R1,#+2
   \   00000016   0xD007             BEQ.N    ??AppS2wCmd_IdOutput_2
   \   00000018   0xD303             BCC.N    ??AppS2wCmd_IdOutput_3
   \   0000001A   0xE00A             B.N      ??AppS2wCmd_IdOutput_4
  10842              {
  10843                  case S2W_ID_OEM:
  10844                      S2w_Printf("\r\n%s", S2W_OEM_ID);
   \                     ??AppS2wCmd_IdOutput_1:
   \   0000001C   0x.... 0x....      ADR.W    R1,`?<Constant "GainSpan">`
   \   00000020   0xE004             B.N      ??AppS2wCmd_IdOutput_5
  10845                      break;
  10846          
  10847                  case S2W_ID_HW_VERSION:
  10848                      {
  10849                          S2w_Printf("\r\n%s", S2W_HW_VERSION);
   \                     ??AppS2wCmd_IdOutput_3:
   \   00000022   0x.... 0x....      ADR.W    R1,`?<Constant "GS2011">`
   \   00000026   0xE001             B.N      ??AppS2wCmd_IdOutput_5
  10850                      }
  10851                      break;
  10852          
  10853                  case S2W_ID_SW_VERSION:
  10854                      S2w_Printf("\r\n%s", S2W_SW_VERSION);
   \                     ??AppS2wCmd_IdOutput_2:
   \   00000028   0x.... 0x....      ADR.W    R1,`?<Constant "5.1.5">`
   \                     ??AppS2wCmd_IdOutput_5:
   \   0000002C   0x.... 0x....      BL       S2w_Printf
  10855                      break;
   \   00000030   0xE000             B.N      ??AppS2wCmd_IdOutput_0
  10856          
  10857                  default:
  10858                      status = S2W_EINVAL;
   \                     ??AppS2wCmd_IdOutput_4:
   \   00000032   0x2402             MOVS     R4,#+2
  10859              }
  10860              return status;
   \                     ??AppS2wCmd_IdOutput_0:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0xBD16             POP      {R1,R2,R4,PC}    ;; return
  10861          }
  10862          
  10863          #ifdef S2W_PING_TRACE
  10864          

   \                                 In section .text, align 2, keep-with-next
  10865          PUBLIC VOID
  10866          AppS2w_PingTaskNotify(INT32 msg)
  10867          {
   \                     AppS2w_PingTaskNotify:
   \   00000000   0xB501             PUSH     {R0,LR}
  10868              /**< Signal APP */
  10869              GsnOsal_QueuePut(&pingThreadMsgQueue, (UINT8 *)&msg);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable496
   \   0000000A   0x.... 0x....      BL       _tx_queue_send
  10870          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
  10871          

   \                                 In section .text, align 2, keep-with-next
  10872          PRIVATE VOID
  10873          AppS2w_PingThreadEntry(UINT32 ctx)
  10874          {	
   \                     AppS2w_PingThreadEntry:
   \   00000000   0xB580             PUSH     {R7,LR}
  10875              UINT32 msg = 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0xE001             B.N      ??AppS2w_PingThreadEntry_0
  10876              /**< Handle events forever */
  10877              while( TRUE )
  10878              {
  10879                  /**< wait on message queue */
  10880                  GsnOsal_QueueGet( &pingThreadMsgQueue, ( UINT8* )&msg, GSN_OSAL_WAIT_FOREVER );
  10881          		
  10882          		if(	APP_EVENT_PING_REQUEST == msg)
  10883          		{
  10884          			s2wPingStart();
   \                     ??AppS2w_PingThreadEntry_1:
   \   00000008   0x.... 0x....      BL       s2wPingStart
  10885          		}
   \                     ??AppS2w_PingThreadEntry_0:
   \   0000000C   0xF04F 0x32FF      MOV      R2,#-1
   \   00000010   0xA900             ADD      R1,SP,#+0
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable496
   \   00000016   0x.... 0x....      BL       _tx_queue_receive
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x2822             CMP      R0,#+34
   \   0000001E   0xD0F3             BEQ.N    ??AppS2w_PingThreadEntry_1
  10886          		else if(APP_EVENT_PING_STOP == msg)
   \   00000020   0x2823             CMP      R0,#+35
   \   00000022   0xD1F3             BNE.N    ??AppS2w_PingThreadEntry_0
  10887          		{
  10888                  	s2wPingStop();
   \   00000024   0x.... 0x....      BL       s2wPingStop
   \   00000028   0xE7F0             B.N      ??AppS2w_PingThreadEntry_0
  10889          		}
  10890              }
  10891          	
  10892          }

   \                                 In section .text, align 2, keep-with-next
  10893          VOID AppS2w_PingThreadCreate()
  10894          {
   \                     AppS2w_PingThreadCreate:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
  10895          	UINT32 pingMsgQueSize = APP_CFG_PING_MAX_MSG_IN_MBOX * sizeof(UINT32);
  10896          	
  10897          	pingThreadMsgQueueBuf = (UINT8 *)MALLOC(pingMsgQueSize);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable496_2
   \   00000006   0x2020             MOVS     R0,#+32
   \   00000008   0x.... 0x....      BL       MALLOC
   \   0000000C   0x6020             STR      R0,[R4, #+0]
  10898          	
  10899          	/**< Creating the Mailbox to receive messages */
  10900          		GsnOsal_QueueCreate( &pingThreadMsgQueue, 1,
  10901          								( UINT8* )pingThreadMsgQueueBuf,
  10902          								pingMsgQueSize);
   \   0000000E   0x2020             MOVS     R0,#+32
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x2201             MOVS     R2,#+1
   \   00000014   0x6823             LDR      R3,[R4, #+0]
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0xF104 0x0008      ADD      R0,R4,#+8
   \   0000001C   0x.... 0x....      BL       _tx_queue_create
  10903          	
  10904          	pingThreadStack = (UINT8 *)MALLOC(PING_THRAED_STACK_SIZE);
   \   00000020   0xF44F 0x6080      MOV      R0,#+1024
   \   00000024   0x.... 0x....      BL       MALLOC
   \   00000028   0x6060             STR      R0,[R4, #+4]
  10905          	
  10906          	GsnOsal_ThreadCreate(AppS2w_PingThreadEntry, &appCtx, &pingThread,
  10907          							"Ping Thread", APP_PING_THREAD_PRI, (UINT8 *)pingThreadStack,
  10908          							PING_THRAED_STACK_SIZE, GSN_OSAL_THREAD_INITIAL_READY);
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x9003             STR      R0,[SP, #+12]
   \   0000002E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000032   0x9002             STR      R0,[SP, #+8]
   \   00000034   0xF104 0x0240      ADD      R2,R4,#+64
   \   00000038   0x6860             LDR      R0,[R4, #+4]
   \   0000003A   0x.... 0x....      ADR.W    R3,`?<Constant "Ping Thread">`
   \   0000003E   0x.... 0x....      LDR.W    R1,??DataTable496_3
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x2018             MOVS     R0,#+24
   \   00000046   0x9000             STR      R0,[SP, #+0]
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable496_4
   \   0000004C   0x.... 0x....      BL       GsnOsal_ThreadCreate
  10909          
  10910          }
   \   00000050   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
  10911          UINT8
  10912          AppS2wCmd_Ping(UINT8* ptr)
  10913          {
   \                     AppS2wCmd_Ping:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
  10914            UINT8 *p,status=S2W_FAILURE;
  10915            S2W_PINGDATA_T pingParams;
  10916            
  10917          	if(0 == pingThreadCreated)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable496_5
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0xB08D             SUB      SP,SP,#+52
   \   0000000A   0xB918             CBNZ.N   R0,??AppS2wCmd_Ping_0
  10918          	{
  10919          		AppS2w_PingThreadCreate();
   \   0000000C   0x.... 0x....      BL       AppS2w_PingThreadCreate
  10920          		pingThreadCreated = 1;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x6060             STR      R0,[R4, #+4]
  10921          	}
  10922              s2wPingStarted = FALSE;
   \                     ??AppS2wCmd_Ping_0:
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0x7020             STRB     R0,[R4, #+0]
  10923              memset (&pingParams, 0, sizeof (S2W_PINGDATA_T));
   \   00000018   0x2228             MOVS     R2,#+40
   \   0000001A   0x.... 0x....      BL       ?Subroutine16
  10924              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_28:
   \   0000001E   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_227:
   \   00000022   0x0006             MOVS     R6,R0
  10925              if (!p)
   \   00000024   0xD019             BEQ.N    ??AppS2wCmd_Ping_1
  10926              {
  10927                  return status;
  10928              }
  10929              status = AppS2wParse_Ip(p, (UINT8*)&pingParams.Ipv4Addr);
  10930              if (status != S2W_SUCCESS)
   \   00000026   0x.... 0x....      LDR.W    R5,??DataTable490
   \   0000002A   0xA902             ADD      R1,SP,#+8
   \   0000002C   0x.... 0x....      BL       AppS2wParse_Ip
   \   00000030   0xB318             CBZ.N    R0,??AppS2wCmd_Ping_2
  10931              {
  10932          #ifdef S2W_IPv6_SUPPORT
  10933                  status =  inet_pton(AF_INET6, (const char*)p, (VOID*) pingParams.ip_address.nxd_ip_address.v6);
  10934                  if(status != TRUE)
  10935                    return S2W_EINVAL;
  10936                GSN_IPv6_CHANGE_ENDIAN( (UINT32*)pingParams.ip_address.nxd_ip_address.v6);
  10937                pingParams.ip_address.nxd_ip_version = NX_IP_VERSION_V6;
  10938                pingParams.IpVersion |= ADDR_TYPE_IPv6;
  10939          #else     
  10940                  /* Can be FQDN */
  10941                pingParams.Ipv4Addr = 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x9002             STR      R0,[SP, #+8]
  10942                GsnNwIf_DnsRetryCountSet(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,10);
   \   00000036   0x210A             MOVS     R1,#+10
   \   00000038   0x.... 0x....      BL       ?Subroutine131
  10943                status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx,(UINT8*)p,(ULONG*)&pingParams.Ipv4Addr,5);
  10944                      if(status != GSN_SUCCESS  || pingParams.Ipv4Addr == 0)
   \                     ??CrossCallReturnLabel_606:
   \   0000003C   0x6828             LDR      R0,[R5, #+0]
   \   0000003E   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000042   0x2305             MOVS     R3,#+5
   \   00000044   0xAA02             ADD      R2,SP,#+8
   \   00000046   0x4631             MOV      R1,R6
   \   00000048   0x3050             ADDS     R0,R0,#+80
   \   0000004A   0x.... 0x....      BL       GsnNwIf_DnsHostByNameGet
   \   0000004E   0xB2C0             UXTB     R0,R0
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xF040 0x808B      BNE.W    ??AppS2wCmd_Ping_3
   \   00000056   0x9802             LDR      R0,[SP, #+8]
   \   00000058   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_Ping_1:
   \   0000005A   0xF000 0x8087      BEQ.W    ??AppS2wCmd_Ping_3
  10945                  return S2W_FAILURE;
  10946                  pingParams.Ipv4Addr = htonl(pingParams.Ipv4Addr);
   \   0000005E   0x0A01             LSRS     R1,R0,#+8
   \   00000060   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000064   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   00000068   0x9902             LDR      R1,[SP, #+8]
   \   0000006A   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000006E   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000072   0x9902             LDR      R1,[SP, #+8]
   \   00000074   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   00000078   0x9002             STR      R0,[SP, #+8]
  10947          #endif
  10948             }
  10949              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_2:
   \   0000007A   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_226:
   \   0000007E   0x0006             MOVS     R6,R0
  10950              if (p)
   \   00000080   0xD004             BEQ.N    ??AppS2wCmd_Ping_4
  10951              {
  10952              status = AppS2wParse_Int(p, &pingParams.trails);
   \   00000082   0xA907             ADD      R1,SP,#+28
   \   00000084   0x.... 0x....      BL       AppS2wParse_Int
  10953              if (status != S2W_SUCCESS)
   \   00000088   0x2800             CMP      R0,#+0
   \   0000008A   0xD177             BNE.N    ??AppS2wCmd_Ping_5
  10954              {
  10955                  return status;
  10956              }
  10957              }
  10958          
  10959              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_4:
   \   0000008C   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_225:
   \   00000090   0x0006             MOVS     R6,R0
  10960              if (p)
   \   00000092   0xD00B             BEQ.N    ??AppS2wCmd_Ping_6
  10961              {
  10962              status = AppS2wParse_Int(p, &pingParams.interval);
   \   00000094   0x.... 0x....      BL       ?Subroutine53
  10963              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_335:
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD16F             BNE.N    ??AppS2wCmd_Ping_5
  10964              {
  10965                  return status;
  10966              }
  10967          
  10968              if (pingParams.interval &&
  10969                  ((pingParams.interval < 1000) || (pingParams.interval > 99000)))
   \   0000009C   0x9803             LDR      R0,[SP, #+12]
   \   0000009E   0xB128             CBZ.N    R0,??AppS2wCmd_Ping_6
   \   000000A0   0xF5A0 0x707A      SUB      R0,R0,#+1000
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable497  ;; 0x17ed1
   \   000000A8   0x4288             CMP      R0,R1
   \   000000AA   0xD22D             BCS.N    ??AppS2wCmd_Ping_7
  10970              {
  10971                  return S2W_EINVAL;
  10972              }
  10973              }
  10974              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_6:
   \   000000AC   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_224:
   \   000000B0   0x0006             MOVS     R6,R0
  10975              if (p)
   \   000000B2   0xD008             BEQ.N    ??AppS2wCmd_Ping_8
  10976                      {
  10977              status = AppS2wParse_Int(p, &pingParams.dataLen);
   \   000000B4   0x.... 0x....      BL       ?Subroutine54
  10978              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_343:
   \   000000B8   0x2800             CMP      R0,#+0
   \   000000BA   0xD15F             BNE.N    ??AppS2wCmd_Ping_5
  10979              {
  10980                  return status;
  10981                      }
  10982          
  10983              if (pingParams.dataLen > 1024)
   \   000000BC   0x9804             LDR      R0,[SP, #+16]
   \   000000BE   0xF5B0 0x6F80      CMP      R0,#+1024
   \   000000C2   0xD902             BLS.N    ??AppS2wCmd_Ping_9
   \   000000C4   0xE020             B.N      ??AppS2wCmd_Ping_7
  10984              {
  10985                  return S2W_EINVAL;
  10986              }
  10987              }
  10988              else
  10989              {
  10990                pingParams.dataLen = 56;
   \                     ??AppS2wCmd_Ping_8:
   \   000000C6   0x2038             MOVS     R0,#+56
   \   000000C8   0x9004             STR      R0,[SP, #+16]
  10991              }
  10992              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_9:
   \   000000CA   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_223:
   \   000000CE   0x0006             MOVS     R6,R0
  10993              if (p)
   \   000000D0   0xD006             BEQ.N    ??AppS2wCmd_Ping_10
  10994              {
  10995          
  10996              status = AppS2wParse_Int(p, &pingParams.tos);
   \   000000D2   0x.... 0x....      BL       ?Subroutine56
  10997              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_356:
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xD150             BNE.N    ??AppS2wCmd_Ping_5
  10998              {
  10999                  return status;
  11000              }
  11001          
  11002              if (pingParams.tos>99)
   \   000000DA   0x9805             LDR      R0,[SP, #+20]
   \   000000DC   0x2864             CMP      R0,#+100
   \   000000DE   0xD213             BCS.N    ??AppS2wCmd_Ping_7
  11003              {
  11004                  return S2W_EINVAL;
  11005              }
  11006              }
  11007              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_10:
   \   000000E0   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_222:
   \   000000E4   0x0006             MOVS     R6,R0
  11008              if (p)
   \   000000E6   0xD007             BEQ.N    ??AppS2wCmd_Ping_11
  11009              {
  11010              status = AppS2wParse_Int(p, &pingParams.ttl);
   \   000000E8   0xA906             ADD      R1,SP,#+24
   \   000000EA   0x.... 0x....      BL       AppS2wParse_Int
  11011              if (status != S2W_SUCCESS)
   \   000000EE   0x2800             CMP      R0,#+0
   \   000000F0   0xD144             BNE.N    ??AppS2wCmd_Ping_5
  11012              {
  11013              return status;
  11014              }
  11015              if (pingParams.ttl>255)
   \   000000F2   0x9806             LDR      R0,[SP, #+24]
   \   000000F4   0x28FF             CMP      R0,#+255
   \   000000F6   0xD807             BHI.N    ??AppS2wCmd_Ping_7
  11016              {
  11017                  return S2W_EINVAL;
  11018              }
  11019              }
  11020              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Ping_11:
   \   000000F8   0x.... 0x....      BL       ?Subroutine41
   \                     ??CrossCallReturnLabel_221:
   \   000000FC   0x0006             MOVS     R6,R0
  11021              if (p)
   \   000000FE   0xD009             BEQ.N    ??AppS2wCmd_Ping_12
  11022              {
  11023              if (strlen ((const INT8*)p) > 16)
   \   00000100   0x.... 0x....      BL       strlen
   \   00000104   0x2811             CMP      R0,#+17
   \   00000106   0xD301             BCC.N    ??AppS2wCmd_Ping_13
  11024              {
  11025                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Ping_7:
   \   00000108   0x2002             MOVS     R0,#+2
   \   0000010A   0xE037             B.N      ??AppS2wCmd_Ping_5
  11026              }
  11027              strcpy (pingParams.payload, (const INT8*)p);
   \                     ??AppS2wCmd_Ping_13:
   \   0000010C   0x4631             MOV      R1,R6
   \   0000010E   0xA808             ADD      R0,SP,#+32
   \   00000110   0x.... 0x....      BL       strcpy
  11028             } 
  11029              memcpy(&s2wappMainTaskCtxt->pingParams,&pingParams,sizeof(S2W_PINGDATA_T));
   \                     ??AppS2wCmd_Ping_12:
   \   00000114   0x6828             LDR      R0,[R5, #+0]
   \   00000116   0xF247 0x562C      MOVW     R6,#+29996
   \   0000011A   0x2228             MOVS     R2,#+40
   \   0000011C   0xA902             ADD      R1,SP,#+8
   \   0000011E   0x1830             ADDS     R0,R6,R0
   \   00000120   0x.... 0x....      BL       memcpy
  11030              s2wappMainTaskCtxt->pingParams.Ipv4Addr = htonl(s2wappMainTaskCtxt->pingParams.Ipv4Addr);
   \   00000124   0x6828             LDR      R0,[R5, #+0]
   \   00000126   0x5831             LDR      R1,[R6, R0]
   \   00000128   0x0A0A             LSRS     R2,R1,#+8
   \   0000012A   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   0000012E   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   00000132   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   00000136   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   0000013A   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   0000013E   0x5031             STR      R1,[R6, R0]
  11031          #ifdef S2W_IPv6_SUPPORT    
  11032                   if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
  11033                   {
  11034                      INT8 ipv6str[INET6_ADDRSTRLEN];
  11035                      S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
  11036                  S2w_Printf("\r\nPinging for %s with %d bytes of data\r\n",ipv6str,s2wappMainTaskCtxt->pingParams.dataLen );
  11037                   }
  11038                   else
  11039          #endif         
  11040              S2w_Printf("\r\nPinging for %d.%d.%d.%d with %d bytes of data\r\n",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff),s2wappMainTaskCtxt->pingParams.dataLen);
   \   00000140   0x1830             ADDS     R0,R6,R0
   \   00000142   0xF3C1 0x2307      UBFX     R3,R1,#+8,#+8
   \   00000146   0x6880             LDR      R0,[R0, #+8]
   \   00000148   0x9001             STR      R0,[SP, #+4]
   \   0000014A   0xF3C1 0x4207      UBFX     R2,R1,#+16,#+8
   \   0000014E   0xB2C8             UXTB     R0,R1
   \   00000150   0x9000             STR      R0,[SP, #+0]
   \   00000152   0x0E09             LSRS     R1,R1,#+24
   \   00000154   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPinging for %d.%d.%...">`
   \   00000158   0x.... 0x....      BL       S2w_Printf
  11041              if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
   \   0000015C   0x.... 0x....      LDR.W    R0,??DataTable494
   \   00000160   0x7800             LDRB     R0,[R0, #+0]
   \   00000162   0xB928             CBNZ.N   R0,??AppS2wCmd_Ping_14
  11042              {
  11043                  S2w_Printf("\r\nNo Route to Host\r\n");
   \   00000164   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nNo Route to Host\\r\\n">`
   \   00000168   0x.... 0x....      BL       S2w_Printf
  11044                  return S2W_FAILURE;
   \                     ??AppS2wCmd_Ping_3:
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0xE005             B.N      ??AppS2wCmd_Ping_5
  11045              }
  11046              s2wPingStarted = TRUE;
   \                     ??AppS2wCmd_Ping_14:
   \   00000170   0x2001             MOVS     R0,#+1
   \   00000172   0x7020             STRB     R0,[R4, #+0]
  11047          	AppS2w_PingTaskNotify(APP_EVENT_PING_REQUEST);
   \   00000174   0x2022             MOVS     R0,#+34
   \   00000176   0x.... 0x....      BL       AppS2w_PingTaskNotify
  11048              return S2W_SUCCESS;
   \   0000017A   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Ping_5:
   \   0000017C   0xB00E             ADD      SP,SP,#+56
   \   0000017E   0xBD70             POP      {R4-R6,PC}       ;; return
  11049          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0xA80D             ADD      R0,SP,#+52
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
  11050          
  11051          #endif //S2W_PING_TRACE
  11052          

   \                                 In section .text, align 2, keep-with-next
  11053          UINT8
  11054          AppS2wCmd_Acmode(UINT8 *ptr)
  11055          {
   \                     AppS2wCmd_Acmode:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
  11056              UINT8 autocon;
  11057              UINT8 status;
  11058              S2W_PROFILE_T *profile;
  11059          
  11060              status = AppS2wParse_Boolean(ptr, &autocon);
   \   00000002   0x.... 0x....      BL       ?Subroutine60
  11061              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_371:
   \   00000006   0xBB38             CBNZ.N   R0,??AppS2wCmd_Acmode_0
  11062              {
  11063                  return status;
  11064              }
  11065              profile_params.autoConnect = autocon;
   \   00000008   0x.... 0x....      LDR.W    R4,??DataTable498
   \   0000000C   0xF89D 0x0000      LDRB     R0,[SP, #+0]
  11066              profile = &s2wFlashParams->profile[profile_params.defaultProfile];
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable498_1
   \   00000014   0x682A             LDR      R2,[R5, #+0]
   \   00000016   0x7120             STRB     R0,[R4, #+4]
   \   00000018   0xF44F 0x717E      MOV      R1,#+1016
   \   0000001C   0x7960             LDRB     R0,[R4, #+5]
   \   0000001E   0xFB01 0x2000      MLA      R0,R1,R0,R2
  11067              // should disable the ncm
  11068          	s2wCurrent.ncmAutoMgr = 0;
   \   00000022   0x.... 0x....      LDR.W    R1,??DataTable491
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xF881 0x232A      STRB     R2,[R1, #+810]
  11069              memcpy(profile, &s2wCurrent, sizeof(S2W_PROFILE_T));
   \   0000002C   0xF44F 0x727E      MOV      R2,#+1016
   \   00000030   0x.... 0x....      BL       memcpy
  11070              // update the profile
  11071              if(!s2wappMainTaskCtxt->fsInit)
   \   00000034   0x.... 0x....      LDR.W    R7,??DataTable490
   \   00000038   0x6838             LDR      R0,[R7, #+0]
   \   0000003A   0xF248 0x1670      MOVW     R6,#+33136
   \   0000003E   0x5C30             LDRB     R0,[R6, R0]
   \   00000040   0xB918             CBNZ.N   R0,??CrossCallReturnLabel_535
  11072              {
  11073          		App_FsInit();
   \   00000042   0x.... 0x....      BL       App_FsInit
  11074          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   00000046   0x.... 0x....      BL       ?Subroutine107
  11075                  f_enterFS();
  11076          	}
  11077              status = S2w_SaveS2wProfile(s2wFlashParams, profile_params.defaultProfile);
   \                     ??CrossCallReturnLabel_535:
   \   0000004A   0x7961             LDRB     R1,[R4, #+5]
   \   0000004C   0x6828             LDR      R0,[R5, #+0]
   \   0000004E   0x.... 0x....      BL       S2w_SaveS2wProfile
  11078              if(status != S2W_SUCCESS)
  11079              {
  11080                  status = S2W_FAILURE;
  11081          	}
  11082          
  11083              // update the nvds
  11084              return S2w_SaveS2wProfileParams(&profile_params);
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       S2w_SaveS2wProfileParams
   \                     ??AppS2wCmd_Acmode_0:
   \   00000058   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
  11085          
  11086          }
  11087          #ifdef  S2W_NCM_SUPPORT_ENABLE

   \                                 In section .text, align 2, keep-with-next
  11088          UINT8
  11089          AppS2wCmd_AutoConnect(UINT8 *ptr)
  11090          {
   \                     AppS2wCmd_AutoConnect:
   \   00000000   0xB510             PUSH     {R4,LR}
  11091          	UINT8 status;
  11092              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB108             CBZ.N    R0,??AppS2wCmd_AutoConnect_0
  11093              {
  11094                  return S2W_EINVAL;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xBD10             POP      {R4,PC}
  11095              }
  11096              /* call the auto connect start function
  11097               */
  11098              profile_params.autoConnect = 1;
   \                     ??AppS2wCmd_AutoConnect_0:
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable498
  11099              // if it is connected disconnect and connect it back
  11100              if(s2wIsAutoconnected)
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable491
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x7101             STRB     R1,[R0, #+4]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable500_1
   \   0000001A   0x7800             LDRB     R0,[R0, #+0]
   \   0000001C   0xB110             CBZ.N    R0,??AppS2wCmd_AutoConnect_1
  11101              {
  11102          		AppS2wProcess_AutoConnectStop(&s2wCurrent);
   \   0000001E   0x4620             MOV      R0,R4
   \   00000020   0x.... 0x....      BL       AppS2wProcess_AutoConnectStop
  11103          	}
  11104              status = AppS2wProcess_AutoConnectStart(&s2wCurrent);
   \                     ??AppS2wCmd_AutoConnect_1:
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       AppS2wProcess_AutoConnectStart
  11105              if(status == S2W_SUCCESS)
   \   0000002A   0xB900             CBNZ.N   R0,??AppS2wCmd_AutoConnect_2
  11106              {
  11107          		return S2W_CMD_INPROCESS;
   \   0000002C   0x2032             MOVS     R0,#+50
  11108          	}
  11109          	return status;
   \                     ??AppS2wCmd_AutoConnect_2:
   \   0000002E   0xBD10             POP      {R4,PC}          ;; return
  11110          }
  11111          
  11112          #endif

   \                                 In section .text, align 2, keep-with-next
  11113          UINT8
  11114          AppS2wCmd_GoOnline(UINT8 *ptr)
  11115          {
   \                     AppS2wCmd_GoOnline:
   \   00000000   0xB580             PUSH     {R7,LR}
  11116              if (*ptr)
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xB108             CBZ.N    R0,??AppS2wCmd_GoOnline_0
  11117              {
  11118                  return S2W_EINVAL;
   \   00000006   0x2002             MOVS     R0,#+2
   \   00000008   0xBD02             POP      {R1,PC}
  11119              }
  11120          
  11121              if (!s2wIsAutoconnected)
   \                     ??AppS2wCmd_GoOnline_0:
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable500_1
   \   0000000E   0x7800             LDRB     R0,[R0, #+0]
   \   00000010   0xB178             CBZ.N    R0,??AppS2wCmd_GoOnline_1
  11122              {
  11123                  return S2W_FAILURE;
  11124              }
  11125          
  11126              /* If the cid is not open, we could be a TCP server
  11127               */
  11128              if (!AppS2wHal_NetIsCidOpen(curCid)
  11129                  && (s2wCurrent.autoNetdata.proto != S2W_NETDATA_PROTO_TCP
  11130                      || s2wCurrent.autoNetdata.mode != S2W_NETDATA_MODE_SERVER))
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable500_4
   \   00000016   0x7800             LDRB     R0,[R0, #+0]
   \   00000018   0x.... 0x....      BL       AppS2wHal_NetIsCidOpen
   \   0000001C   0xB958             CBNZ.N   R0,??AppS2wCmd_GoOnline_2
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable491
   \   00000022   0xF890 0x103D      LDRB     R1,[R0, #+61]
   \   00000026   0x2901             CMP      R1,#+1
   \   00000028   0xBF04             ITT      EQ 
   \   0000002A   0xF890 0x003C      LDRBEQ   R0,[R0, #+60]
   \   0000002E   0x2801             CMPEQ    R0,#+1
   \   00000030   0xD001             BEQ.N    ??AppS2wCmd_GoOnline_2
  11131              {
  11132          
  11133                  return S2W_FAILURE;
   \                     ??AppS2wCmd_GoOnline_1:
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0xBD02             POP      {R1,PC}
  11134              }
  11135              /* change the state to auto
  11136               */
  11137              s2wState = S2W_STATE_DATA_AUTO;
   \                     ??AppS2wCmd_GoOnline_2:
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable500_5
   \   0000003A   0x210D             MOVS     R1,#+13
   \   0000003C   0x7001             STRB     R1,[R0, #+0]
  11138              /* reregister the auto exit gpio */
  11139          	// start a gpio cb for auto mode exit
  11140          	GsnGpio_Init(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP , APP_S2W_AUTO_EXIT_GPIO_BIT_MAP );
   \   0000003E   0xF44F 0x7280      MOV      R2,#+256
   \   00000042   0x2300             MOVS     R3,#+0
   \   00000044   0x4610             MOV      R0,R2
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x.... 0x....      BL       GsnGpio_Init
  11141              /* register callback for GPIO interrupt */
  11142          	GsnGpio_IntCbRegister(APP_S2W_AUTO_EXIT_GPIO_NUM,s2wAutoExit_CB,NULL);
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable500_6
   \   00000052   0x2008             MOVS     R0,#+8
   \   00000054   0x.... 0x....      BL       GsnGpio_IntCbRegister
  11143          	/*enable interrupt*/
  11144          	GsnGpio_NEIntEnable(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP);
   \   00000058   0xF44F 0x7080      MOV      R0,#+256
   \   0000005C   0x2100             MOVS     R1,#+0
   \   0000005E   0x.... 0x....      BL       GsnGpio_NEIntEnable
  11145          	// make the data ready gpio as high..
  11146              S2w_AsyncMsgGpioOp(1);
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
  11147              return S2W_SUCCESS;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0xBD02             POP      {R1,PC}          ;; return
  11148          }
  11149          
  11150          
  11151          #ifdef S2W_THROUGHPUT_TEST
  11152          extern GSN_OSAL_SEM_T dSendSem;  
  11153          UINT8 tpTestBuff[1460];
  11154          UINT8
  11155          AppS2w_HttpTpTest(UINT8 cid,ULONG64 pktLen, UINT8 *ptr)
  11156          {
  11157          	UINT8 *p;
  11158          	GSN_SYSTEM_TIME_T startTime,endTime,totalTime;	
  11159          	UINT32 len,wddTxCnt0,wddTxCnt1,txBufAllocFail,getReqCnt=0;
  11160          	ULONG64 tp;
  11161           #ifdef S2W_HTTPC_SUPPORT
  11162          	S2W_HTTP_DATA_T *pHttpData;
  11163          #endif
  11164              UINT8 status = S2W_SUCCESS;
  11165            	if(s2wCidList[cid].testMode== 0)
  11166            	{		
  11167          #ifdef S2W_HTTPC_SUPPORT
  11168          	    httpConfInfo.reqMethod = GSN_HTTP_METHOD_POST;
  11169          #endif
  11170            	}
  11171          	else
  11172          	{		
  11173          #ifdef S2W_HTTPC_SUPPORT
  11174          		httpConfInfo.reqMethod = GSN_HTTP_METHOD_GET;
  11175          #endif
  11176          	}
  11177          #ifdef S2W_HTTPC_SUPPORT
  11178          	httpConfInfo.httpTimeOut = 100 ;
  11179          #endif
  11180              p = AppS2wParse_NextParamGet(&ptr);
  11181              if (!p)
  11182              {
  11183                  return S2W_EINVAL;
  11184              }
  11185          #ifdef S2W_HTTPC_SUPPORT
  11186           	len = strlen((const char *)p);
  11187              if(NULL != httpConfInfo.reqPathPtr)
  11188              {
  11189                  gsn_free(httpConfInfo.reqPathPtr);
  11190                  httpConfInfo.reqPathPtr = NULL;
  11191              }
  11192              httpConfInfo.reqPathPtr = gsn_malloc(len+1);
  11193              if(NULL == httpConfInfo.reqPathPtr)
  11194              {
  11195                  return S2W_FAILURE;
  11196              }
  11197              strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
  11198              httpConfInfo.reqPathPtr[len] ='\0';
  11199              httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;	
  11200              httpConfInfo.reqBodyTotalLen = 0;
  11201              httpConfInfo.reqBodyLen = 0;
  11202          	if(GSN_HTTP_METHOD_POST== httpConfInfo.reqMethod)
  11203              {
  11204          	    httpConfInfo.reqBodyTotalLen = pktLen;
  11205          		httpConfInfo.reqBodyPtr = (INT8 *)tpTestBuff;
  11206          		memset(tpTestBuff ,0xA5A5A5A5,10);
  11207          		httpConfInfo.reqBodyLen = pktLen;
  11208          	}
  11209              pHttpData = AppS2wHal_HttpHandleGet(cid);
  11210          	txBufAllocFail = s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail;
  11211          	wddTxCnt0 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent+ s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;
  11212          	startTime = GsnTod_Get();	
  11213          	do
  11214          	{
  11215                  if(pHttpData != NULL)
  11216                  {
  11217                      GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
  11218                      status = S2wHttp_Send(cid);
  11219          			if(status != GSN_SUCCESS)
  11220          				s2wCidList[cid].stats.txErr++;
  11221                  }
  11222                  else
  11223                  {
  11224                      return S2W_FAILURE;
  11225                  }
  11226                  if(pHttpData != NULL)
  11227                  {
  11228                      GsnOsal_SemRelease(&pHttpData->opInProgress);
  11229                  }
  11230          		getReqCnt++;
  11231          		if(GSN_HTTP_METHOD_POST== httpConfInfo.reqMethod)
  11232              	{
  11233          			httpConfInfo.reqBodyPtr = (INT8 *)tpTestBuff;
  11234          			httpConfInfo.reqBodyLen = pktLen;
  11235          		}
  11236          	}while(getReqCnt < s2wCidList[cid].iteration);
  11237          	endTime = GsnTod_Get();
  11238          	totalTime = SYSTIME_TO_MSEC(endTime)-SYSTIME_TO_MSEC(startTime); 
  11239          	wddTxCnt1 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;
  11240          	S2w_Printf("\r\n Total Requests Send     : %d",getReqCnt);		
  11241          	S2w_Printf("\r\n Packet Send From WDD    : %d",(wddTxCnt1-wddTxCnt0));
  11242          	S2w_Printf("\r\n Packet Lost From APP    : %d",s2wCidList[cid].stats.txErr);		
  11243          	S2w_Printf("\r\n Wdd Tx Buff Fail Cnt    : %d", s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail-txBufAllocFail); 
  11244          	S2w_Printf("\r\n Bytes Received  	 : %lld",s2wCidList[cid].stats.bytesReceived); 
  11245              S2w_Printf("\r\n Total Time Taken        : %lld usec",(SYSTIME_TO_USEC(endTime)-SYSTIME_TO_USEC(startTime)));									
  11246          	tp = (((s2wCidList[cid].stats.bytesReceived*8*1000))/(totalTime));
  11247              S2w_Printf("\r\n Throuhput               : %lld bps",tp);	
  11248          	tp =(((s2wCidList[cid].stats.bytesReceived*8*1000))/(totalTime*1024));
  11249              S2w_Printf("\r\n Throuhput               : %lld kbps ",tp);
  11250          	s2wCidList[cid].tpTestInProgress=0;
  11251          	if(NULL != httpConfInfo.reqPathPtr)
  11252          	{
  11253                  gsn_free(httpConfInfo.reqPathPtr);
  11254                  httpConfInfo.reqPathPtr = NULL;
  11255          	}
  11256          	httpConfInfo.reqBodyPtr = NULL;
  11257          #endif
  11258          	return status;
  11259          
  11260          }
  11261          UINT8
  11262          AppS2wCmd_SockTpTestStat(UINT8 *ptr)
  11263          {
  11264          	UINT8 cid,validCid;
  11265          	UINT8 *p;	
  11266          	p = AppS2wParse_NextParamGet(&ptr);
  11267              if (!p)
  11268              {
  11269           		   return S2W_EINVAL;
  11270              }
  11271              cid = *p;
  11272          	validCid = AppS2w_CidValidate(cid);
  11273              if (INVALID_CID == validCid )
  11274          		return S2W_FAILURE;
  11275          	S2w_Printf("\r\n Packet Received  : %d",s2wCidList[validCid].stats.packetsReceived);
  11276          	S2w_Printf("\r\n Packet Lost      : %d",s2wCidList[validCid].stats.rxErr);
  11277          	S2w_Printf("\r\n Bytes Received   : %lld",s2wCidList[validCid].stats.bytesReceived); 
  11278          	S2w_Printf("\r\n Nwif Packets dropped  : %d" ,s2wappMainTaskCtxt->if0.nwifCtx.pStats->pktsDroppedNoMem);
  11279          	S2w_Printf("\r\n Nwif Packets filtered : %d" ,s2wappMainTaskCtxt->if0.nwifCtx.pStats->pktFilteredOut);
  11280          	S2w_Printf("\r\n Nwif Packets Received : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->totalPktsRcvd);
  11281          	S2w_Printf("\r\n ARP Packets Received  : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpRequestRcvd);		
  11282          	S2w_Printf("\r\n IP Packets Received   : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipPktsRcvd);
  11283          	S2w_Printf("\r\n Bytes Received   	   : %lld",s2wCidList[validCid].stats.bytesReceived);
  11284          	S2w_Printf("\r\n Total Time Taken	   : %lld sec",s2wCidList[validCid].stats.totalTime);																		
  11285          	S2w_Printf("\r\n Throuhput        	   : %lld Kbps",((s2wCidList[validCid].stats.bytesReceived*8)/(1024*s2wCidList[validCid].stats.totalTime)));										
  11286          	s2wCidList[validCid].tpTestInProgress=0; 
  11287          	return S2W_SUCCESS;
  11288          }
  11289          UINT8
  11290          AppS2wCmd_SockTpTest(UINT8 *ptr)
  11291          {
  11292              UINT8 status,cid,validCid;
  11293              UINT32 mode=0;
  11294          	UINT8 *p;
  11295          	UINT32 wddTxCnt0,wddTxCnt1,txBufAllocFail,seqNo=0;
  11296          	GSN_SYSTEM_TIME_T startTime,endTime,totalTime,currTime,diffTime;	
  11297          	ULONG64 tp,cnt=0,pktLen;
  11298          	
  11299          	/* CID */	
  11300          	p = AppS2wParse_NextParamGet(&ptr);
  11301              if (!p)
  11302              {
  11303           		   return S2W_EINVAL;
  11304              }
  11305              cid = *p;
  11306          	validCid = AppS2w_CidValidate(cid);
  11307          
  11308              if (INVALID_CID == validCid )
  11309          		return S2W_FAILURE;
  11310          
  11311          	/* mode txtest->0,rxtest->1,both ->2*/
  11312              p = AppS2wParse_NextParamGet(&ptr);
  11313          	
  11314              if (!p)
  11315              {
  11316                  return S2W_EINVAL;
  11317              }
  11318          	
  11319              status = AppS2wParse_Int(p, &mode);
  11320              if (status != S2W_SUCCESS)
  11321              {
  11322                  return status;
  11323              }	
  11324          	if(mode == 4)
  11325          		goto skipArgument;
  11326          	/* iteration*/
  11327          	p = AppS2wParse_NextParamGet(&ptr);
  11328          	s2wCidList[validCid].iteration = 10;
  11329          	if (p)
  11330          	{
  11331          		status = AppS2wParse_Int(p, &s2wCidList[validCid].iteration);
  11332          		if (status != S2W_SUCCESS)
  11333          		{
  11334          			return status;
  11335          		}	
  11336          		
  11337          	}		
  11338          	p = AppS2wParse_NextParamGet(&ptr);
  11339          	if (p)
  11340          	{
  11341          		status = AppS2wParse_64BitNumber(p,&pktLen);
  11342          		if (status != S2W_SUCCESS)
  11343          		{
  11344          			return status;
  11345          		}	
  11346          	}
  11347          	else
  11348              {
  11349          		pktLen = 1460;
  11350              }
  11351          	s2wCidList[validCid].bytesToReceive = (ULONG64)(s2wCidList[validCid].iteration * pktLen);
  11352          skipArgument:	
  11353          	memset(&s2wCidList[validCid].stats,0,sizeof(S2W_TPSTATS_T));	
  11354          	s2wCidList[validCid].testMode=mode;		
  11355          	s2wCidList[validCid].tpTestInProgress=1;	
  11356          	if(s2wCidList[validCid].httpflag && mode < 2)
  11357          		return AppS2w_HttpTpTest(validCid,pktLen,ptr);
  11358              if(mode == 3) 
  11359                  {
  11360                      pktLen=0;
  11361                  }
  11362          	s2wCidList[validCid].testMode=mode;		
  11363          	s2wCidList[validCid].tpTestInProgress=1;	
  11364          	memset(&s2wCidList[validCid].stats,0,sizeof(S2W_TPSTATS_T));
  11365          	if(mode == 0 || mode == 2 || mode == 3)
  11366          	{	seqNo=0;
  11367          	
  11368          		memset(tpTestBuff ,0xA5A5A5A5,10);
  11369          		s2wCidList[validCid].tpTestInProgress=1;			
  11370          		wddTxCnt0 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;	
  11371          		txBufAllocFail = s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail;
  11372          		startTime = GsnTod_Get();	
  11373          		do
  11374          		{
  11375          			tpTestBuff[0] = seqNo & 0xff;			
  11376          			tpTestBuff[1] = (seqNo >> 8)& 0xff;			
  11377          			tpTestBuff[2] = (seqNo>> 16)& 0xff;			
  11378          			tpTestBuff[3] = (seqNo>> 24)& 0xff;			
  11379          			/*send*/			
  11380          			if(mode == 3) 
  11381          			{
  11382          				if(pktLen >= 1460)
  11383          				{
  11384          					pktLen =1;
  11385                                       }
  11386          				else					
  11387          				  pktLen++;
  11388          			}
  11389          			s2wCidList[validCid].stats.lastPktSndTime = SYSTIME_TO_USEC(GsnTod_Get());	
  11390                      GsnOsal_SemAcquire ( &dSendSem,GSN_OSAL_WAIT_FOREVER );
  11391          #ifdef S2W_IPv6_SUPPORT
  11392                     if(s2wCidList[validCid].addrType & ADDR_TYPE_IPv6)
  11393          				AppS2wHal_NetTx(validCid, s2wCidList[validCid].remoteIpv6,s2wCidList[validCid].remotePort,
  11394          								(VOID *)tpTestBuff, (UINT32)pktLen);
  11395          			else
  11396          #endif				
  11397          			status = AppS2wHal_NetTx(validCid, s2wCidList[validCid].remoteIp,s2wCidList[validCid].remotePort,
  11398          									(VOID *)tpTestBuff, (UINT32)pktLen);
  11399                      GsnOsal_SemRelease(&dSendSem);                 
  11400          			currTime = SYSTIME_TO_USEC(GsnTod_Get());	
  11401          			if(status == S2W_FAILURE)
  11402          			{
  11403          
  11404                   	if(s2wCidList[validCid].conType == TCP)
  11405                             break;
  11406          
  11407          			 s2wCidList[validCid].stats.txErr++;
  11408          			 
  11409          			}
  11410          			else
  11411          				cnt++;
  11412          			seqNo++;
  11413          			diffTime = currTime - s2wCidList[validCid].stats.lastPktSndTime ;
  11414                      if(diffTime <= 1000)
  11415          				s2wCidList[validCid].stats.less1MsCnt++;
  11416                      else if(diffTime > 20000)			
  11417          				s2wCidList[validCid].stats.more20MsCnt++;
  11418                      else if(diffTime > 10000)			
  11419          				s2wCidList[validCid].stats.more10MsCnt++;
  11420                      else if(diffTime > 5000)			
  11421          				s2wCidList[validCid].stats.more5MsCnt++;
  11422                      else if(diffTime > 3000)				
  11423          				s2wCidList[validCid].stats.more3MsCnt++;
  11424          			else if(diffTime > 2000)
  11425          				s2wCidList[validCid].stats.more2MsCnt++;
  11426          			else if(diffTime > 1000)
  11427          				s2wCidList[validCid].stats.more1MsCnt++;
  11428          
  11429          		}while(seqNo < s2wCidList[validCid].iteration);
  11430          		endTime = GsnTod_Get();
  11431          		totalTime = SYSTIME_TO_MSEC(endTime)-SYSTIME_TO_MSEC(startTime); 
  11432          		wddTxCnt1 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;	
  11433          		if(s2wCidList[validCid].conType == UDP)
  11434          		{
  11435          			S2w_Printf("\r\n Packet send From App  : %d",seqNo);
  11436          			S2w_Printf("\r\n Packet send From WDD  : %d",(wddTxCnt1-wddTxCnt0));
  11437          			S2w_Printf("\r\n Packet Lost From APP  : %d",s2wCidList[validCid].stats.txErr);		
  11438          			S2w_Printf("\r\n Wdd Tx Buff Fail Cnt  : %d", s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail-txBufAllocFail); 
  11439          			S2w_Printf("\r\n Delay More Than 20 Ms : %d",s2wCidList[validCid].stats.more20MsCnt);
  11440          			S2w_Printf("\r\n Delay More Than 10 Ms : %d",s2wCidList[validCid].stats.more10MsCnt);
  11441          			S2w_Printf("\r\n Delay More Than  5 Ms : %d",s2wCidList[validCid].stats.more5MsCnt);
  11442          			S2w_Printf("\r\n Delay More Than  3 Ms : %d",s2wCidList[validCid].stats.more3MsCnt);
  11443          			S2w_Printf("\r\n Delay More Than  2 Ms : %d",s2wCidList[validCid].stats.more2MsCnt);							
  11444          			S2w_Printf("\r\n Delay More Than  1 Ms : %d",s2wCidList[validCid].stats.more1MsCnt);
  11445          			S2w_Printf("\r\n Delay Less Than  1 Ms : %d",s2wCidList[validCid].stats.less1MsCnt);
  11446          		}
  11447          		else if(mode != 3)
  11448          		{
  11449          			S2w_Printf("\r\n Bytes send  	       : %lld",cnt *pktLen); 
  11450          
  11451          		}			
  11452          		if(mode != 3)
  11453          		{
  11454          		    S2w_Printf("\r\n Total Time Taken      : %lld usec",(SYSTIME_TO_USEC(endTime)-SYSTIME_TO_USEC(startTime)));									
  11455          			tp = (((cnt *pktLen*8*1000))/(totalTime));
  11456          		    S2w_Printf("\r\n Throuhput             : %lld bps",tp);	
  11457          			tp =(((cnt *pktLen*8*1000))/(totalTime*1024));
  11458                      S2w_Printf("\r\n Throuhput             : %lld kbps ",tp);	
  11459          		}
  11460          		if(mode == 0 || mode == 3 )s2wCidList[validCid].tpTestInProgress=0; 
  11461          	}
  11462           	return S2W_SUCCESS;
  11463          }
  11464          #endif
  11465          
  11466          

   \                                 In section .text, align 2, keep-with-next
  11467          PUBLIC UINT8
  11468          AppS2wCmd_IpMulticastJoin(UINT8 *ptr)
  11469          {
   \                     AppS2wCmd_IpMulticastJoin:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  11470            UINT8 *p;
  11471            UINT8 status;
  11472            ULONG ip;
  11473          
  11474            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
  11475          	if(!p)
   \                     ??CrossCallReturnLabel_145:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_IpMulticastJoin_0
  11476            		return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD0E             POP      {R1-R3,PC}
  11477          
  11478            status = AppS2wParse_Ip(p, (UINT8 *)&ip);
   \                     ??AppS2wCmd_IpMulticastJoin_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine64
  11479          
  11480             if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_397:
   \   00000012   0xB928             CBNZ.N   R0,??AppS2wCmd_IpMulticastJoin_1
  11481              {
  11482                  return status;
  11483              }
  11484          
  11485             ip = ntohl(ip);
   \   00000014   0x.... 0x....      BL       ?Subroutine81
  11486          
  11487             if(nx_igmp_multicast_join(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ip) != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_460:
   \   00000018   0x.... 0x....      BL       _nxe_igmp_multicast_join
   \   0000001C   0xB100             CBZ.N    R0,??AppS2wCmd_IpMulticastJoin_1
  11488               return S2W_FAILURE;
   \   0000001E   0x2001             MOVS     R0,#+1
  11489          
  11490             return S2W_SUCCESS;
   \                     ??AppS2wCmd_IpMulticastJoin_1:
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
  11491          
  11492          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine81:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9900             LDR      R1,[SP, #+0]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9900             LDR      R1,[SP, #+0]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9000             STR      R0,[SP, #+0]
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable490
   \   00000022   0x9900             LDR      R1,[SP, #+0]
   \   00000024   0x6800             LDR      R0,[R0, #+0]
   \   00000026   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   0000002A   0x4770             BX       LR
  11493          

   \                                 In section .text, align 2, keep-with-next
  11494          PUBLIC UINT8
  11495          AppS2wCmd_IpMulticastLeave(UINT8 *ptr)
  11496          {
   \                     AppS2wCmd_IpMulticastLeave:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  11497          
  11498            UINT8 *p;
  11499            UINT8 status;
  11500            ULONG ip;
  11501          
  11502            p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
  11503          	if(!p)
   \                     ??CrossCallReturnLabel_144:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_IpMulticastLeave_0
  11504            		return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD0E             POP      {R1-R3,PC}
  11505          
  11506            status = AppS2wParse_Ip(p, (UINT8 *)&ip);
   \                     ??AppS2wCmd_IpMulticastLeave_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine64
  11507          
  11508             if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_396:
   \   00000012   0xB928             CBNZ.N   R0,??AppS2wCmd_IpMulticastLeave_1
  11509              {
  11510                  return status;
  11511              }
  11512          
  11513             ip = ntohl(ip);
   \   00000014   0x.... 0x....      BL       ?Subroutine81
  11514          
  11515             if(nx_igmp_multicast_leave(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ip) != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_461:
   \   00000018   0x.... 0x....      BL       _nxe_igmp_multicast_leave
   \   0000001C   0xB100             CBZ.N    R0,??AppS2wCmd_IpMulticastLeave_1
  11516               return S2W_FAILURE;
   \   0000001E   0x2001             MOVS     R0,#+1
  11517          
  11518             return S2W_SUCCESS;
   \                     ??AppS2wCmd_IpMulticastLeave_1:
   \   00000020   0xBD0E             POP      {R1-R3,PC}       ;; return
  11519          }
  11520          
  11521          
  11522          /**
  11523           ******************************************************************
  11524           * @ingroup S2w-Application
  11525           * @brief Process the AT+DGPIO command
  11526           *      This function sets or resets the specified GPIO pin
  11527           * @param ptr Pointer to the user input string.
  11528           * @retval S2W_SUCCESS - operation successful.
  11529           * @retval S2W_EINVAL  - operation failure-invalid command.
  11530           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  11531          PUBLIC UINT8
  11532          AppS2wCmd_Dgpio(UINT8 *ptr)
  11533          {
   \                     AppS2wCmd_Dgpio:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
  11534              UINT32 bit, operation;
  11535              UINT8 *p, status;
  11536              static UINT8 enableGpio=0;
  11537              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine39
  11538              if (!p)
   \                     ??CrossCallReturnLabel_205:
   \   00000008   0xB198             CBZ.N    R0,??AppS2wCmd_Dgpio_0
  11539              {
  11540                  return S2W_EINVAL;
  11541              }
  11542          
  11543              status = AppS2wParse_Int(p, &bit);
   \   0000000A   0x.... 0x....      BL       ?Subroutine51
  11544              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_272:
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD14E             BNE.N    ??AppS2wCmd_Dgpio_1
  11545              {
  11546                  return status;
  11547              }
  11548          
  11549              if(!((S2W_GPIO_UNDER_USE) & (1 << bit)))
   \   00000012   0x9900             LDR      R1,[SP, #+0]
   \   00000014   0x.... 0x....      LDR.W    R0,??DataTable501  ;; 0xe03003f0
   \   00000018   0x40C8             LSRS     R0,R0,R1
   \   0000001A   0x07C0             LSLS     R0,R0,#+31
   \   0000001C   0xD509             BPL.N    ??AppS2wCmd_Dgpio_0
  11550              {/* This GPIO can not be used for testing - currently its used as peripheral pin  */
  11551                  return S2W_EINVAL;
  11552              }
  11553          
  11554              p = AppS2wParse_NextParamGet(&ptr);
   \   0000001E   0x.... 0x....      BL       ?Subroutine39
  11555              if (!p)
   \                     ??CrossCallReturnLabel_204:
   \   00000022   0xB130             CBZ.N    R0,??AppS2wCmd_Dgpio_0
  11556              {
  11557                  return S2W_EINVAL;
  11558              }
  11559          
  11560              status = AppS2wParse_Int(p, &operation);
   \   00000024   0x.... 0x....      BL       ?Subroutine52
  11561              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_318:
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD141             BNE.N    ??AppS2wCmd_Dgpio_1
  11562              {
  11563                  return status;
  11564              }
  11565          
  11566              if(operation > 1)
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0x2802             CMP      R0,#+2
   \   00000030   0xD301             BCC.N    ??AppS2wCmd_Dgpio_2
  11567              {
  11568                  return S2W_EINVAL;
   \                     ??AppS2wCmd_Dgpio_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xE03C             B.N      ??AppS2wCmd_Dgpio_1
  11569              }
  11570              if(!enableGpio)
  11571              {
  11572                  // eanble all gpios available only once for first command
  11573                  GsnIoMux_Sel(4, GSN_IOMUX_GPIO_4_AGPIO_4);
   \                     ??AppS2wCmd_Dgpio_2:
   \   00000036   0x2100             MOVS     R1,#+0
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x.... 0x....      BL       GsnIoMux_Sel
  11574                  GsnIoMux_Sel(5, GSN_IOMUX_GPIO_5_AGPIO_5);
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x2005             MOVS     R0,#+5
   \   00000042   0x.... 0x....      BL       GsnIoMux_Sel
  11575                  GsnIoMux_Sel(6, GSN_IOMUX_GPIO_6_AGPIO_6);
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x2006             MOVS     R0,#+6
   \   0000004A   0x.... 0x....      BL       GsnIoMux_Sel
  11576                  GsnIoMux_Sel(7, GSN_IOMUX_GPIO_7_AGPIO_7);
   \   0000004E   0x2100             MOVS     R1,#+0
   \   00000050   0x2007             MOVS     R0,#+7
   \   00000052   0x.... 0x....      BL       GsnIoMux_Sel
  11577          #ifndef GS2100
  11578                  GsnIoMux_Sel(9, GSN_IOMUX_GPIO_9_AGPIO_9);
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x2009             MOVS     R0,#+9
   \   0000005A   0x.... 0x....      BL       GsnIoMux_Sel
  11579          #endif
  11580                  GsnIoMux_Sel(20, GSN_IOMUX_GPIO_20_AGPIO_20);
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2014             MOVS     R0,#+20
   \   00000062   0x.... 0x....      BL       GsnIoMux_Sel
  11581                  GsnIoMux_Sel(21, GSN_IOMUX_GPIO_21_AGPIO_21);
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x2015             MOVS     R0,#+21
   \   0000006A   0x.... 0x....      BL       GsnIoMux_Sel
  11582                  GsnIoMux_Sel(29, GSN_IOMUX_GPIO_29_AGPIO_29);
   \   0000006E   0x2100             MOVS     R1,#+0
   \   00000070   0x201D             MOVS     R0,#+29
   \   00000072   0x.... 0x....      BL       GsnIoMux_Sel
  11583                  GsnIoMux_Sel(30, GSN_IOMUX_GPIO_30_AGPIO_30);
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x201E             MOVS     R0,#+30
   \   0000007A   0x.... 0x....      BL       GsnIoMux_Sel
  11584                  GsnIoMux_Sel(31, GSN_IOMUX_GPIO_31_AGPIO_31);
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x201F             MOVS     R0,#+31
   \   00000082   0x.... 0x....      BL       GsnIoMux_Sel
  11585              }
  11586          
  11587              /* Call GPIO Init as out direction  */
  11588              GsnGpio_Init((1 << bit), ~(1 << bit));
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x2401             MOVS     R4,#+1
   \   0000008A   0xFA04 0xF000      LSL      R0,R4,R0
   \   0000008E   0x43C2             MVNS     R2,R0
   \   00000090   0x17D3             ASRS     R3,R2,#+31
   \   00000092   0x17C1             ASRS     R1,R0,#+31
   \   00000094   0x.... 0x....      BL       GsnGpio_Init
  11589          
  11590              if(operation)
   \   00000098   0x9800             LDR      R0,[SP, #+0]
   \   0000009A   0x9A01             LDR      R2,[SP, #+4]
   \   0000009C   0xFA04 0xF000      LSL      R0,R4,R0
   \   000000A0   0x17C1             ASRS     R1,R0,#+31
   \   000000A2   0xB112             CBZ.N    R2,??AppS2wCmd_Dgpio_3
  11591              {
  11592                  GsnGpio_OutIndvidualSet(1 << bit);
   \   000000A4   0x.... 0x....      BL       GsnGpio_OutIndvidualSet
   \   000000A8   0xE001             B.N      ??AppS2wCmd_Dgpio_4
  11593              }
  11594              else
  11595              {
  11596                  GsnGpio_OutClear(1 << bit);
   \                     ??AppS2wCmd_Dgpio_3:
   \   000000AA   0x.... 0x....      BL       GsnGpio_OutClear
  11597              }
  11598              return S2W_SUCCESS;
   \                     ??AppS2wCmd_Dgpio_4:
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Dgpio_1:
   \   000000B0   0xB004             ADD      SP,SP,#+16
   \   000000B2   0xBD10             POP      {R4,PC}          ;; return
  11599          }

   \                                 In section .bss, align 1
   \   00000000                      DS8 1
  11600          
  11601          #ifdef S2W_SECURITY_WPS_ENABLE
  11602          
  11603          /**
  11604           ******************************************************************
  11605           * @ingroup S2w-Application
  11606           * @brief Process the AT+WWPS Command.
  11607           *   This command check the validity of parameters passed and call the
  11608           *   hal association function.
  11609           * @param ptr pointer to the user input string.
  11610           *
  11611           * @return S2W_SUCCESS - operation successful.
  11612           * @retval S2W_EINVAL  - operation failure-invalid command.
  11613           * @retval S2W_FAILURE - operation failure-scan failed.
  11614           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  11615          PRIVATE UINT8
  11616          AppS2wCmd_Wwps(UINT8 *ptr)
  11617          {
   \                     AppS2wCmd_Wwps:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
  11618          #if 1
  11619              S2W_WPS_T params;
  11620              GSN_MAC_SSID_T ap_ssid;
  11621              UINT8 *p;
  11622              UINT8 status;
  11623              UINT8 zeroPin[GSN_WDD_SEC_WPS_PIN_LEN] = {0};
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xC006             STM      R0!,{R1,R2}
  11624              UINT8 i;
  11625          #ifdef GSN_P2P
  11626              UINT8 method=0;
  11627          #endif
  11628          
  11629              ap_ssid.length = 0;
   \   0000000C   0xF88D 0x1030      STRB     R1,[SP, #+48]
  11630              p = AppS2wParse_NextParamGet(&ptr);
   \   00000010   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_246:
   \   00000014   0x0004             MOVS     R4,R0
  11631              if (!p)
   \   00000016   0xD015             BEQ.N    ??AppS2wCmd_Wwps_0
  11632              {
  11633                  return S2W_EINVAL;
  11634              }
  11635              AppS2wParse_Int(p, &params.type);
   \   00000018   0x.... 0x....      BL       ?Subroutine50
  11636              if(!(params.type == APP_WPS_TYPE_PB || params.type == APP_WPS_TYPE_PIN || params.type == APP_WPS_TYPE_DFLT_PIN) )
   \                     ??CrossCallReturnLabel_258:
   \   0000001C   0x9802             LDR      R0,[SP, #+8]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD023             BEQ.N    ??AppS2wCmd_Wwps_1
   \   00000022   0x2802             CMP      R0,#+2
   \   00000024   0xBF18             IT       NE 
   \   00000026   0x2803             CMPNE    R0,#+3
   \   00000028   0xD10C             BNE.N    ??AppS2wCmd_Wwps_0
  11637              {
  11638                  return S2W_EINVAL;
  11639              }
  11640          
  11641              if(params.type == APP_WPS_TYPE_PIN || params.type == APP_WPS_TYPE_DFLT_PIN)
  11642              {
  11643                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000002A   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_245:
   \   0000002E   0x0004             MOVS     R4,R0
  11644                  if (!p)
   \   00000030   0xD008             BEQ.N    ??AppS2wCmd_Wwps_0
  11645                  {
  11646                      return S2W_EINVAL;
  11647                  }
  11648                  if(GSN_WDD_SEC_WPS_PIN_LEN != strlen((const char*)p))
   \   00000032   0x.... 0x....      BL       strlen
   \   00000036   0x2808             CMP      R0,#+8
   \   00000038   0xD104             BNE.N    ??AppS2wCmd_Wwps_0
  11649                  {
  11650                      return S2W_EINVAL;
  11651                  }
  11652                  for(i=0; i< GSN_WDD_SEC_WPS_PIN_LEN; i++)
   \   0000003A   0x2000             MOVS     R0,#+0
  11653                  {
  11654                      if( *(p+i) < '0' || *(p+i) > '9')
   \                     ??AppS2wCmd_Wwps_2:
   \   0000003C   0x5D01             LDRB     R1,[R0, R4]
   \   0000003E   0x3930             SUBS     R1,R1,#+48
   \   00000040   0x290A             CMP      R1,#+10
   \   00000042   0xD301             BCC.N    ??AppS2wCmd_Wwps_3
  11655                      {
  11656                          return S2W_EINVAL;
   \                     ??AppS2wCmd_Wwps_0:
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xE025             B.N      ??AppS2wCmd_Wwps_4
  11657                      }
  11658                      //*(p+i)= *(p+i)-'0'; /* convert to integer */
  11659                      //*(p+i)= *(p+i);
  11660                  }
   \                     ??AppS2wCmd_Wwps_3:
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0xB2C0             UXTB     R0,R0
   \   0000004C   0x2808             CMP      R0,#+8
   \   0000004E   0xDBF5             BLT.N    ??AppS2wCmd_Wwps_2
  11661                  memcpy(params.pin, p, GSN_WDD_SEC_WPS_PIN_LEN);
   \   00000050   0x2208             MOVS     R2,#+8
   \   00000052   0x.... 0x....      BL       ?Subroutine118
  11662          #ifdef GSN_P2P
  11663                  method = 0;
  11664          #endif
  11665                  p = AppS2wParse_NextParamGet( &ptr );
   \                     ??CrossCallReturnLabel_564:
   \   00000056   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_244:
   \   0000005A   0x0004             MOVS     R4,R0
  11666                  if (p)
   \   0000005C   0xD00B             BEQ.N    ??CrossCallReturnLabel_563
  11667                  {
  11668                      status = AppS2wParse_Ssid(p, ap_ssid.array, &ap_ssid.length );
   \   0000005E   0xAA0C             ADD      R2,SP,#+48
   \   00000060   0xF10D 0x0131      ADD      R1,SP,#+49
   \   00000064   0x.... 0x....      BL       AppS2wParse_Ssid
   \   00000068   0xE005             B.N      ??CrossCallReturnLabel_563
  11669                  }
  11670              }
  11671              else
  11672              {
  11673                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Wwps_1:
   \   0000006A   0x.... 0x....      BL       ?Subroutine45
  11674                  if (p)
  11675                  {/* we donot expect a pin in case of PB mathod*/
  11676                      /*return S2W_EINVAL;*/
  11677                  }
  11678                  memcpy(params.pin, zeroPin, GSN_WDD_SEC_WPS_PIN_LEN);
   \                     ??CrossCallReturnLabel_243:
   \   0000006E   0x2208             MOVS     R2,#+8
   \   00000070   0xA900             ADD      R1,SP,#+0
   \   00000072   0x.... 0x....      BL       ??Subroutine118_0
  11679          #ifdef GSN_P2P
  11680                  method=1;
  11681          #endif
  11682              }
  11683          	params.storeL2ConInfo = 0;
   \                     ??CrossCallReturnLabel_563:
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xF88D 0x002C      STRB     R0,[SP, #+44]
  11684          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000007C   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_242:
   \   00000080   0x0004             MOVS     R4,R0
  11685              if (p)
   \   00000082   0xBF1C             ITT      NE 
   \   00000084   0xA90B             ADDNE    R1,SP,#+44
   \   00000086   0x.... 0x....      BLNE     AppS2wParse_Boolean
  11686              {/* we donot expect a pin in case of PB mathod*/
  11687                  AppS2wParse_Boolean(p, &params.storeL2ConInfo);
  11688              }
  11689          #ifdef GSN_P2P
  11690              if(s2wCurrent.mode == 3)
  11691              {
  11692                  GSN_WDD_P2P_CONF_T* p2pConf;
  11693          
  11694                  /* get the P2P info */
  11695                  p2pConf = GsnWdd_P2pConfPtrGet(&s2wappMainTaskCtxt->wdd);
  11696          
  11697                  if(p2pConf->roleGo == P2P_ROLE_GO)
  11698                  {
  11699                      status = GsnWdd_P2pProvStart(&s2wappMainTaskCtxt->wdd,method,params.pin);
  11700                  }
  11701                  else
  11702                  {
  11703                      status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
  11704                  }
  11705              }
  11706              else
  11707          #endif
  11708              {
  11709                  status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
  11710              }
  11711          
  11712              return status;
   \   0000008A   0x2200             MOVS     R2,#+0
   \   0000008C   0xA90C             ADD      R1,SP,#+48
   \   0000008E   0xA802             ADD      R0,SP,#+8
   \   00000090   0x.... 0x....      BL       AppS2wHal_WpsAssociate
   \                     ??AppS2wCmd_Wwps_4:
   \   00000094   0xB016             ADD      SP,SP,#+88
   \   00000096   0xBD10             POP      {R4,PC}          ;; return
  11713          
  11714          
  11715          #else
  11716              S2W_WPS_T params;
  11717              GSN_MAC_SSID_T ap_ssid;
  11718              UINT8 *p;
  11719              UINT8 status;
  11720              UINT8 zeroPin[GSN_WDD_SEC_WPS_PIN_LEN] = {0};
  11721              UINT8 i;
  11722          #ifdef GSN_P2P
  11723              UINT8 method=0;
  11724          #endif
  11725          
  11726              ap_ssid.length = 0;
  11727              p = AppS2wParse_NextParamGet(&ptr);
  11728              if (!p)
  11729              {
  11730                  return S2W_EINVAL;
  11731              }
  11732              AppS2wParse_Int(p, &params.type);
  11733              if(!(params.type == APP_WPS_TYPE_PB || params.type == APP_WPS_TYPE_PIN))
  11734              {
  11735                  return S2W_EINVAL;
  11736              }
  11737          
  11738              if(params.type == APP_WPS_TYPE_PIN)
  11739              {
  11740                  p = AppS2wParse_NextParamGet(&ptr);
  11741                  if (!p)
  11742                  {
  11743                      return S2W_EINVAL;
  11744                  }
  11745                  if(GSN_WDD_SEC_WPS_PIN_LEN != strlen((const char*)p))
  11746                  {
  11747                      return S2W_EINVAL;
  11748                  }
  11749                  for(i=0; i< GSN_WDD_SEC_WPS_PIN_LEN; i++)
  11750                  {
  11751                      if( *(p+i) < '0' || *(p+i) > '9')
  11752                      {
  11753                          return S2W_EINVAL;
  11754                      }
  11755                      *(p+i)= *(p+i)-'0'; /* convert to integer */
  11756                  }
  11757                  memcpy(params.pin, p, GSN_WDD_SEC_WPS_PIN_LEN);
  11758          #ifdef GSN_P2P
  11759                  method = 0;
  11760          #endif
  11761                  p = AppS2wParse_NextParamGet( &ptr );
  11762                  if (p)
  11763                  {
  11764                      status = AppS2wParse_Ssid(p, ap_ssid.array, &ap_ssid.length );
  11765                  }
  11766              }
  11767              else
  11768              {
  11769                  p = AppS2wParse_NextParamGet(&ptr);
  11770                  if (p)
  11771                  {/* we donot expect a pin in case of PB mathod*/
  11772                      /*return S2W_EINVAL;*/
  11773                  }
  11774                  memcpy(params.pin, zeroPin, GSN_WDD_SEC_WPS_PIN_LEN);
  11775          #ifdef GSN_P2P
  11776                  method=1;
  11777          #endif
  11778              }
  11779          	params.storeL2ConInfo = 0;
  11780          	p = AppS2wParse_NextParamGet(&ptr);
  11781              if (p)
  11782              {/* we donot expect a pin in case of PB mathod*/
  11783                  AppS2wParse_Boolean(p, &params.storeL2ConInfo);
  11784              }
  11785          #ifdef GSN_P2P
  11786              if(s2wCurrent.mode == 3)
  11787              {
  11788                  GSN_WDD_P2P_CONF_T* p2pConf;
  11789          
  11790                  /* get the P2P info */
  11791                  p2pConf = GsnWdd_P2pConfPtrGet(&s2wappMainTaskCtxt->wdd);
  11792          
  11793                  if(p2pConf->roleGo == P2P_ROLE_GO)
  11794                  {
  11795                      status = GsnWdd_P2pProvStart(&s2wappMainTaskCtxt->wdd,method,params.pin);
  11796                  }
  11797                  else
  11798                  {
  11799                      status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
  11800                  }
  11801              }
  11802              else
  11803          #endif
  11804              {
  11805                  status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
  11806              }
  11807          
  11808              return status;
  11809          #endif
  11810          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0xA815             ADD      R0,SP,#+84
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
  11811          #endif /* GSN_SECURITY_WPS_ENABLE */
  11812          
  11813          #ifdef S2W_PERSISTENT_TMR_SUPPORT
  11814          
  11815          VOID
  11816          AppS2w_PersistentTmrCb(void *ptr, GSN_SOFT_TMR_HANDLE_T handle)
  11817          {
  11818              switch ((UINT32)ptr)
  11819              {
  11820                  case 0:
  11821                      AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_0_TIMEOUT);
  11822                      break;
  11823                  case 1:
  11824                      AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_1_TIMEOUT);
  11825                      break;
  11826                  case 2:
  11827                      AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_2_TIMEOUT);
  11828                      break; 
  11829                  case 3:
  11830                      AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_3_TIMEOUT);
  11831                      break;
  11832                  case 4:
  11833                      AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_4_TIMEOUT);
  11834                      break;    
  11835              }
  11836          }
  11837          
  11838          PUBLIC UINT8 
  11839          AppS2wCmd_PerstTmrStart(UINT8 *ptr)
  11840          {
  11841          	UINT8 *p;
  11842          	UINT32 time, status, id, type;
  11843          	p = AppS2wParse_NextParamGet(&ptr);
  11844              if (!p)
  11845              {
  11846                  return S2W_EINVAL;
  11847              }
  11848              AppS2wParse_Int(p, &id);
  11849              if(id > APP_NUM_OF_PERSIST_TMR)
  11850              {
  11851                  return S2W_EINVAL;
  11852              }
  11853              p = AppS2wParse_NextParamGet(&ptr);
  11854              if (!p)
  11855              {
  11856                  return S2W_EINVAL;
  11857              }
  11858              AppS2wParse_Int(p, &type);
  11859              if(type > GSN_TIMER_TYPE_PERSISTENT_VARIABLE )
  11860              {
  11861                  return S2W_EINVAL;
  11862              }
  11863              p = AppS2wParse_NextParamGet(&ptr);
  11864              if (!p)
  11865              {
  11866                  return S2W_EINVAL;
  11867              }
  11868              if(AppS2wParse_Int(p, &time))
  11869              {
  11870                  return S2W_EINVAL;
  11871              }
  11872              if(GsnPersistTmr_IsActive(id))
  11873              {
  11874                  return S2W_FAILURE;
  11875              }
  11876              
  11877              status = GsnPersistTmr_Create( id, type, MSEC_TO_SYSTIME(time) , 
  11878                  AppS2w_PersistentTmrCb, (void *)id, TRUE);
  11879              if(status == GSN_SUCCESS)
  11880                  return S2W_SUCCESS;
  11881              else
  11882                  return S2W_FAILURE;
  11883          }
  11884          PUBLIC UINT8
  11885          AppS2wCmd_PerstTmrStop(UINT8 *ptr)
  11886          {
  11887              UINT32 id, status;
  11888              UINT8 *p;
  11889              p = AppS2wParse_NextParamGet(&ptr);
  11890              if (!p)
  11891              {
  11892                  return S2W_EINVAL;
  11893              }
  11894              AppS2wParse_Int(p, &id);
  11895              if(id > APP_NUM_OF_PERSIST_TMR)
  11896              {
  11897                  return S2W_EINVAL;
  11898              }
  11899              status = GsnPersistTmr_Stop(id);
  11900              if(status == GSN_SUCCESS)
  11901                  return S2W_SUCCESS;
  11902              else
  11903                  return S2W_FAILURE;
  11904          }
  11905          PUBLIC UINT8
  11906          AppS2wCmd_PerstTmrDelete(UINT8 *ptr)
  11907          {
  11908          	UINT32 id, status;
  11909          	UINT8 *p;
  11910          	p = AppS2wParse_NextParamGet(&ptr);
  11911          	if (!p)
  11912              {
  11913                  return S2W_EINVAL;
  11914              }
  11915          	AppS2wParse_Int(p, &id);
  11916          	if(id > APP_NUM_OF_PERSIST_TMR)
  11917          	{
  11918          		return S2W_EINVAL;
  11919          	}
  11920          	status = GsnPersistTmr_Delete(id);
  11921          	if(status == GSN_SUCCESS)
  11922          		return S2W_SUCCESS;
  11923          	else
  11924          		return S2W_FAILURE;
  11925          
  11926          }
  11927          PUBLIC UINT8
  11928          AppS2wCmd_PerstTmrReStart(UINT8 *ptr)
  11929          {
  11930          	UINT32 id, status, period;
  11931          	UINT8 *p;
  11932          	p = AppS2wParse_NextParamGet(&ptr);
  11933          	if (!p)
  11934              {
  11935                  return S2W_EINVAL;
  11936              }
  11937          	AppS2wParse_Int(p, &id);
  11938          	if(id > APP_NUM_OF_PERSIST_TMR)
  11939          	{
  11940          		return S2W_EINVAL;
  11941          	}
  11942          	p = AppS2wParse_NextParamGet(&ptr);
  11943          	if (!p)
  11944              {
  11945                  return S2W_EINVAL;
  11946              }
  11947          	AppS2wParse_Int(p, &period);
  11948          	if(id > APP_NUM_OF_PERSIST_TMR)
  11949          	{
  11950          		return S2W_EINVAL;
  11951          	}
  11952          	status = GsnPersistTmr_ReStart(id, period, GSN_P_TMR_PREV_EXP_TIME);
  11953          	if(status == GSN_SUCCESS)
  11954          		return S2W_SUCCESS;
  11955          	else
  11956          		return S2W_SUCCESS;
  11957          }
  11958          #endif
  11959          #ifdef S2W_EMU
  11960          /* Commands for EMU */
  11961          /**
  11962           ******************************************************************
  11963           * @ingroup S2w-Application
  11964           * @brief Process the AT+EMUVER=? command
  11965           *   This function gives the version of EMU.
  11966           *   
  11967           * @param ptr Pointer to the user input string.
  11968           *
  11969           * @return S2W_SUCCESS - operation successful.
  11970           * 
  11971           ******************************************************************/
  11972          PRIVATE UINT8
  11973          AppS2wCmd_EmuVer(UINT8 *ptr)
  11974          {
  11975              UINT8 buf[20];
  11976          
  11977              if (ptr[0] == '?' && ( ptr[1] == '\0') )
  11978              {
  11979          	GsnEmu_GetVersion(buf);
  11980          	S2w_Printf("\r\n%s\r\n",&buf);
  11981                  return S2W_SUCCESS;
  11982              }   
  11983              else
  11984              {
  11985                  return S2W_FAILURE;
  11986              }
  11987          } 
  11988          
  11989          /**
  11990           ******************************************************************
  11991           * @ingroup S2w-Application
  11992           * @brief Process the AT+EMUSUPMOD=? command
  11993           *   This function tells  EMU supported modules
  11994           *   
  11995           * @param ptr Pointer to the user input string.
  11996           * @return (OR'ed value of the modules)
  11997           *         1 - Sigma Delta ADC 
  11998           *         2 - PL7223 
  11999           * @return S2W_SUCCESS - operation successful.
  12000           *
  12001           ******************************************************************/
  12002          PRIVATE UINT8
  12003          AppS2wCmd_SupportedModules(UINT8 *ptr)
  12004          {
  12005              UINT32 value;
  12006          	
  12007              if (ptr[0] == '?' && ( ptr[1] == '\0') )
  12008              {
  12009              	value = GsnEmu_GetSupportedModules();
  12010          	S2w_Printf("\r\n%02x\r\n",value); 
  12011                  return S2W_SUCCESS; 
  12012              }
  12013              else
  12014              {
  12015                  return S2W_FAILURE;
  12016              }       
  12017          } 
  12018          
  12019          /**
  12020           ******************************************************************
  12021           * @ingroup S2w-Application
  12022           * @brief Process the AT+EMULOADCTRL=<action>(ON or OFF) command
  12023           *   This function loads the EMU control when it is in Running state.
  12024           *   
  12025           * @param ptr Pointer to the user input string.
  12026           *                      1 - ON , 0 - OFF
  12027           * @return S2W_SUCCESS - operation successful.
  12028           * @return EMU STATUS   
  12029           * @return S2W_EINVAL   - invalid input
  12030           ******************************************************************/
  12031          
  12032          PRIVATE UINT8
  12033          AppS2wCmd_EmuLoadCtl(UINT8 *ptr)
  12034          {
  12035          
  12036              GSN_EMU_STATUS_T status;
  12037              UINT8 estatus;
  12038              BOOL mode;
  12039          
  12040              estatus = AppS2wParse_Boolean(ptr, (UINT8 *)&mode);
  12041              
  12042              if (estatus != S2W_SUCCESS)
  12043              {
  12044                  return estatus;
  12045              }  
  12046              
  12047              status = GsnEmu_LoadControl(&(appCtx.appEmuCtx.emu),mode);
  12048            
  12049              if (GSN_EMU_STATUS_SUCCESS == status )
  12050              {    
  12051                  return S2W_SUCCESS; 
  12052              }
  12053              else
  12054              {
  12055                  return S2W_FAILURE;
  12056              }
  12057          }
  12058          
  12059          /**
  12060           ******************************************************************
  12061           * @ingroup S2w-Application
  12062           * @brief Process the AT+EMULOADSTATUS command
  12063           *   This function loads the  EMU status.
  12064           *   
  12065           * @param ptr Pointer to the user input string.
  12066           * @return S2W_SUCCESS   - operation successful.
  12067           * @return S2W_EINVAL    - invalid input
  12068           ******************************************************************/
  12069          PRIVATE UINT8
  12070          AppS2wCmd_EmuLoadStatus(UINT8 *ptr)
  12071          {	 
  12072              GSN_EMU_STATUS_T status;
  12073              BOOL mode;
  12074              
  12075              if (ptr[0] == '\0')
  12076              {
  12077                  status = GsnEmu_GetLoadStatus(&(appCtx.appEmuCtx.emu), &mode);
  12078                    
  12079                  if(GSN_EMU_STATUS_SUCCESS == status)
  12080                  {
  12081                      if(1 == mode)
  12082                      {
  12083                          S2w_Printf("\r\nON\r\n");	
  12084                      }
  12085                      else if(0 == mode)
  12086                      {
  12087                          S2w_Printf("\r\nOFF\r\n"); 
  12088                      }
  12089                      return S2W_SUCCESS;
  12090                  }
  12091                  else
  12092                  {
  12093                      return S2W_FAILURE;
  12094                  }
  12095              }
  12096              else 
  12097              {
  12098          	return S2W_EINVAL;
  12099              }
  12100          		
  12101          }
  12102          
  12103          /**
  12104           ******************************************************************
  12105           * @ingroup S2w-Application
  12106           * @brief Process the AT+EMUSTART command
  12107           *   This function starts the EMU
  12108           *   
  12109           * @param ptr Pointer to the user input string.
  12110           * @return S2W_SUCCESS   - operation successful.
  12111           * @return EMU STATUS   
  12112            * @return S2W_EINVAL   - invalid input
  12113           ******************************************************************/
  12114          PRIVATE UINT8
  12115          AppS2wCmd_EmuStart(UINT8 *ptr)
  12116          {
  12117              GSN_EMU_STATUS_T status = GSN_EMU_STATUS_FAILURE;
  12118              GSN_EMU_SDADC_PINGPONG_BUFF_T buff;
  12119              
  12120              GSN_EMU_STATE_T state;
  12121          
  12122              /* Configurations can't be set when the system is RUNNING */
  12123              GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state); 
  12124              
  12125              if( state == GSN_EMU_STATE_RUNNING )
  12126              {
  12127                 return S2W_FAILURE;      
  12128              }
  12129              
  12130              if (ptr[0] == '\0')
  12131              {   
  12132                  if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_SIGMADELTA_ADC )
  12133                  {
  12134                      if(GSN_EMU_STATUS_SUCCESS == AppEmu_BuffAllocate())
  12135                      {
  12136                          buff.vPriBuff = appCtx.appEmuCtx.appEmuSdadcPbuf1;
  12137                          buff.iPriBuff = appCtx.appEmuCtx.appEmuSdadcPbuf2;
  12138                          buff.vSecBuff = appCtx.appEmuCtx.appEmuSdadcPbuf3;
  12139                          buff.iSecBuff = appCtx.appEmuCtx.appEmuSdadcPbuf4;
  12140                          buff.size = APP_EMU_SDADC_BUF_SIZE;
  12141                      }
  12142                      else
  12143                      {
  12144                        return S2W_FAILURE;
  12145                      }
  12146                      status = GsnEmu_Start(&(appCtx.appEmuCtx.emu),&(appCtx.appEmuCtx.confValue),&buff);
  12147                  }
  12148                  else if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_PL722X )
  12149                  {
  12150                      status = GsnEmu_Start(&(appCtx.appEmuCtx.emu),&(appCtx.appEmuCtx.confValue),NULL);
  12151                  }
  12152                  
  12153                  if(GSN_EMU_STATUS_SUCCESS == status)
  12154                  {
  12155                      return S2W_SUCCESS;
  12156                  }
  12157                  else
  12158                  {
  12159                    return S2W_FAILURE;
  12160                  }
  12161              }
  12162              else 
  12163              {
  12164          	return S2W_EINVAL;
  12165              }
  12166          		
  12167          }
  12168          
  12169          /**
  12170           ******************************************************************
  12171           * @ingroup S2w-Application
  12172           * @brief Process the AT+EMUSTOP command
  12173           *   This function stops the EMU
  12174           *   
  12175           * @param ptr Pointer to the user input string.
  12176           * @return S2W_SUCCESS   - operation successful.
  12177           * @return EMU STATUS   
  12178            * @return S2W_EINVAL   - invalid input
  12179           ******************************************************************/
  12180          PRIVATE UINT8
  12181          AppS2wCmd_EmuStop(UINT8 *ptr)
  12182          {
  12183              GSN_EMU_STATUS_T status;   
  12184              
  12185              if (ptr[0] == '\0')
  12186              {
  12187                  status =  GsnEmu_Stop(&(appCtx.appEmuCtx.emu));
  12188                  if(GSN_EMU_STATUS_SUCCESS == status)
  12189                  {
  12190                      if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_SIGMADELTA_ADC)
  12191                      {
  12192                          if(GSN_EMU_STATUS_SUCCESS == AppEmu_BuffDeallocate())
  12193                          {     
  12194                               return S2W_SUCCESS;
  12195                          }
  12196                          else 
  12197                          {
  12198                              return S2W_FAILURE;
  12199                          }
  12200                      }
  12201                      return S2W_SUCCESS;
  12202                  }
  12203                  else
  12204                  {
  12205                      return S2W_FAILURE;
  12206                  }
  12207              }
  12208              else 
  12209              {
  12210          	return S2W_EINVAL;
  12211              }
  12212          		
  12213          }
  12214          
  12215          /**
  12216           ******************************************************************
  12217           * @ingroup S2w-Application
  12218           * @brief Process the AT+EMUGETVALUES command
  12219           *   This function returns the various values associated with EMU.
  12220           *   
  12221           * @param ptr Pointer to the user input string.
  12222           * @return EMU VALUES    - Voltage,Current,Power,Energy,Frequency & 
  12223           *                          Power factor 
  12224           * @return S2W_SUCCESS   - operation successful.
  12225           * @return S2W_EINVAL    - invalid input
  12226           ******************************************************************/
  12227          PRIVATE UINT8
  12228          AppS2wCmd_EmuGetValues(UINT8 *ptr)
  12229          {
  12230              GSN_EMU_ELECTRIC_PARAMS_T eparam;
  12231              GSN_EMU_STATUS_T status;
  12232              
  12233              if (ptr[0] == '\0')
  12234              {
  12235                  status = GsnEmu_GetElectricParams(&(appCtx.appEmuCtx.emu),&eparam);
  12236                  
  12237            	if(GSN_EMU_STATUS_SUCCESS == status )
  12238                  {
  12239                      S2w_Printf("\r\nV=%07.3fV\r\n",eparam.vrms);                    
  12240                      S2w_Printf("I=%07.3fA\r\n",eparam.irms);	
  12241                      S2w_Printf("AP=%07.3fW\r\n",eparam.activePower);
  12242                      S2w_Printf("PF=%07.3f\r\n",eparam.powerfactor);
  12243                      S2w_Printf("F=%07.3fHz\r\n",eparam.frequency);
  12244                      S2w_Printf("E=%07.3fKWH\r\n",eparam.accumulateEnergy);
  12245                      return S2W_SUCCESS;
  12246                  }
  12247                  else
  12248                  {
  12249                      return S2W_FAILURE;
  12250                  }
  12251              }
  12252              else
  12253              {
  12254                  return S2W_EINVAL;
  12255              }    
  12256          }
  12257          
  12258          /**
  12259           ******************************************************************
  12260           * @ingroup S2w-Application
  12261           * @brief Process the AT+EMUGETINTSVALUES command
  12262           *   This function returns the various values associated with EMU.
  12263           *   
  12264           * @param ptr Pointer to the user input string.
  12265           * @return EMU INSTANTVALUES    - Voltage,Current,Power,Energy,
  12266           *                                 Frequency & Power factor 
  12267           *                          
  12268           * @return S2W_SUCCESS   - operation successful.
  12269           * @return S2W_EINVAL    - invalid input
  12270           ******************************************************************/
  12271          PRIVATE UINT8
  12272          AppS2wCmd_EmuGetInstValues(UINT8 *ptr)
  12273          {
  12274              GSN_EMU_ELECTRIC_PARAMS_T eparam;
  12275              GSN_EMU_STATUS_T status;
  12276              
  12277              if (ptr[0] == '\0')
  12278              {
  12279                  status = GsnEmu_GetInstantElectricParams(&(appCtx.appEmuCtx.emu),&eparam);
  12280                  
  12281            	if(GSN_EMU_STATUS_SUCCESS == status )
  12282                  {
  12283                      S2w_Printf("\r\nV=%07.3fV\r\n",eparam.vrms);                    
  12284                      S2w_Printf("I=%07.3fA\r\n",eparam.irms);	
  12285                      S2w_Printf("AP=%07.3fW\r\n",eparam.activePower);
  12286                      S2w_Printf("PF=%07.3f\r\n",eparam.powerfactor);
  12287                      S2w_Printf("F=%07.3fHz\r\n",eparam.frequency);
  12288                      S2w_Printf("E=%07.3fKWH\r\n",eparam.accumulateEnergy);
  12289                      return S2W_SUCCESS;
  12290                  }
  12291                  else
  12292                  {
  12293                      return S2W_FAILURE;
  12294                  }
  12295              }
  12296              else
  12297              {
  12298                  return S2W_EINVAL;
  12299              }    
  12300          }
  12301          
  12302          /**
  12303           ******************************************************************
  12304           * @ingroup S2w-Application
  12305           * @brief Process the AT+EMUSETCONF = 'param','value' command
  12306           *   This function sets the various parameters of EMU.
  12307           *   
  12308           * @param ptr Pointer to the user input string.
  12309           * @return S2W_SUCCESS - operation successful.
  12310           * @return S2W_EINVAL    - invalid input
  12311           ******************************************************************/
  12312          
  12313          PRIVATE UINT8
  12314          AppS2wCmd_EmuSetConf(UINT8 *ptr)
  12315          {
  12316              UINT8 *p;
  12317              APP_EMU_CONFS_T conf;
  12318              UINT32 value;
  12319              UINT32 param;
  12320              UINT32 modcheck;
  12321              UINT32 modvalue;
  12322              
  12323              GSN_EMU_STATE_T state;
  12324          
  12325              /* Configurations can't be set when the system is RUNNING */
  12326              GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state); 
  12327              
  12328             if( state == GSN_EMU_STATE_RUNNING )
  12329             {
  12330                return S2W_EINVAL;      
  12331             }
  12332              
  12333              p = AppS2wParse_NextParamGet(&ptr);
  12334              if(!p)
  12335              {
  12336                  return S2W_EINVAL;
  12337              }
  12338              AppS2wParse_Int(p, &param);
  12339              
  12340              conf = ( APP_EMU_CONFS_T )param;
  12341          
  12342              if(param >APP_EMU_END)
  12343              {
  12344           	return S2W_FAILURE;
  12345              }
  12346          
  12347              p = AppS2wParse_NextParamGet(&ptr);
  12348              if(!p)
  12349              {
  12350                  return S2W_EINVAL;
  12351              }
  12352              AppS2wParse_Int(p,&value); 
  12353              
  12354              if( NULL == p)
  12355              {
  12356                  return S2W_EINVAL;
  12357              
  12358              }
  12359                
  12360              switch(conf)
  12361              {
  12362                  case APP_EMU_CONF_MODULE : 
  12363                          modcheck = GsnEmu_GetSupportedModules();
  12364                         
  12365                          if((value < modcheck) && (((value)&(value-1)) == 0 ) && (value!= 0))
  12366                          {
  12367                              appCtx.appEmuCtx.confValue.module = (GSN_EMU_MODULE_T)value;
  12368                          }
  12369                          else
  12370                          {
  12371                             return S2W_EINVAL;
  12372                          }
  12373                      break;
  12374                  case APP_EMU_CONF_SDADC_VCC :        
  12375          		appCtx.appEmuCtx.confValue.sdadc_vcc = value;
  12376                      
  12377                      break;          
  12378                  case APP_EMU_CONF_SDADC_ICC:
  12379          		appCtx.appEmuCtx.confValue.sdadc_icc = value;
  12380                    
  12381                      break;
  12382                  case APP_EMU_CONF_SDADC_VDCOFFSET:     
  12383          		appCtx.appEmuCtx.confValue.sdadc_vdcoffset = value;
  12384                     
  12385                      break;
  12386                  case APP_EMU_CONF_SDADC_IDCOFFSET:     
  12387                  	appCtx.appEmuCtx.confValue.sdadc_idcoffset = value;
  12388                      
  12389                      break;
  12390                  case APP_EMU_CONF_SDADC_VSF:     
  12391                      	appCtx.appEmuCtx.confValue.sdadc_vsf = value;
  12392                      
  12393                      break;
  12394                  case APP_EMU_CONF_SDADC_ISF:     
  12395                      	appCtx.appEmuCtx.confValue.sdadc_isf = value;
  12396                      
  12397                      break;
  12398                  case APP_EMU_CONF_SDADC_SF:     
  12399          		appCtx.appEmuCtx.confValue.sdadc_samplingFreq = value;
  12400                
  12401                          
  12402                      break;    
  12403                  case APP_EMU_CONF_SDADC_LCG:
  12404                      /*valid gpio numbers are 0 - 37*/
  12405                      if((value < 38))
  12406                      {
  12407                          appCtx.appEmuCtx.confValue.sdadc_load_gpio = value;
  12408                      }
  12409                      else 
  12410                      return S2W_EINVAL;
  12411          
  12412                      break;
  12413                  case APP_EMU_CONF_SDADC_VUT:     
  12414                          appCtx.appEmuCtx.confValue.sdadc_vut = value;
  12415                      
  12416                      break;
  12417                  case APP_EMU_CONF_SDADC_IUT:     
  12418                      	appCtx.appEmuCtx.confValue.sdadc_iut = value;
  12419                      
  12420                      break;
  12421                  case APP_EMU_CONF_SDADC_FUT:     
  12422                    	appCtx.appEmuCtx.confValue.sdadc_fut =value;	
  12423                      
  12424                      break;
  12425                  case APP_EMU_CONF_SDADC_VLT:     
  12426                 		appCtx.appEmuCtx.confValue.sdadc_vlt = value;
  12427                      
  12428                      break;
  12429                  case APP_EMU_CONF_SDADC_ILT:     
  12430                 		appCtx.appEmuCtx.confValue.sdadc_ilt = value;
  12431                      
  12432                      break;
  12433                  case APP_EMU_CONF_SDADC_FLT:     
  12434                 		appCtx.appEmuCtx.confValue.sdadc_flt = value;
  12435                      
  12436                      break;
  12437                  case APP_EMU_CONF_SDADC_VAC:     
  12438                   
  12439                        if(0 == value  )
  12440                        {
  12441                            /* 0 refers to adc channel zero */
  12442                            appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_0;
  12443                        }
  12444                        else if( 1 == value )
  12445                        {
  12446                            /* 1 refers to adc channel one */
  12447                            appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_1;
  12448                        }
  12449                        else if(2 == value )
  12450                        {
  12451                            /* 2 refers to adc channel two */
  12452                            appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_2;
  12453                        }
  12454                        else
  12455                          return S2W_EINVAL;
  12456                        break;
  12457                      
  12458                  case APP_EMU_CONF_SDADC_IAC: 
  12459                    
  12460                        if( 0 == value  )
  12461                        {
  12462                            /* 0 refers to adc channel zero */
  12463                            appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_0;
  12464                        }
  12465                        else if( 1 == value )
  12466                        {
  12467                             /* 1 refers to adc channel one */
  12468                            appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_1;
  12469                        }
  12470                        else if( 2 == value )
  12471                        {
  12472                            /* 2 refers to adc channel two */
  12473                            appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_2;
  12474                        }
  12475                        else
  12476                          return S2W_EINVAL;
  12477                        break;
  12478                        
  12479                   case APP_EMU_CONF_SDADC_G0: 
  12480                     
  12481                        p = AppS2wParse_NextParamGet(&ptr);
  12482                        AppS2wParse_Int(p,&modvalue);
  12483                             
  12484                        if((1 == value ) && (NULL != p))
  12485                        {
  12486                            /* Gain value can be 0,1,2 or 3 */
  12487                            if(0 == modvalue )
  12488                            {     
  12489                                /*enables the gain*/
  12490                                appCtx.appEmuCtx.confValue.gain_flag0 = value;
  12491                                appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN0;
  12492                            }
  12493                            else if( 1 == modvalue )
  12494                            {
  12495                              /*enables the gain*/
  12496                                appCtx.appEmuCtx.confValue.gain_flag0 = value;
  12497                                appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN1;
  12498                            }
  12499                            else if( 2 == modvalue )
  12500                            {
  12501                              /*enables the gain*/
  12502                                appCtx.appEmuCtx.confValue.gain_flag0 = value;
  12503                                appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN2;
  12504                            }
  12505                            else if( 3 == modvalue )
  12506                            {
  12507                                /*enables the gain*/
  12508                                appCtx.appEmuCtx.confValue.gain_flag0 = value;
  12509                                appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN3;
  12510                            }
  12511                            else 
  12512                              return S2W_EINVAL;
  12513                            break;
  12514                        }
  12515              
  12516                       else if (( 0 == value ) && (NULL == p))
  12517                        {
  12518                            appCtx.appEmuCtx.confValue.gain_flag0 = value;
  12519                        }
  12520                        
  12521                        else
  12522                        {
  12523                            return S2W_EINVAL;
  12524                        }
  12525                         break;
  12526                        
  12527                   case APP_EMU_CONF_SDADC_G1: 
  12528                             
  12529                      p = AppS2wParse_NextParamGet(&ptr);
  12530                      AppS2wParse_Int(p,&modvalue); 
  12531                      
  12532                      if((1 == value ) && (NULL != p))
  12533                        {
  12534          
  12535                            /* Gain value can be 0,1,2 or 3 */
  12536                            if(0 == modvalue )
  12537                            {
  12538                                /*enables the gain*/
  12539                                appCtx.appEmuCtx.confValue.gain_flag1 = value;
  12540                                appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN0;
  12541                            }
  12542                            else if( 1 == modvalue )
  12543                            {
  12544                                /*enables the gain*/
  12545                                appCtx.appEmuCtx.confValue.gain_flag1 = value;
  12546                                appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN1;
  12547                            }
  12548                            else if( 2 == modvalue )
  12549                            {
  12550                                /*enables the gain*/
  12551                                appCtx.appEmuCtx.confValue.gain_flag1 = value;
  12552                                appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN2;
  12553                            }
  12554                            else if( 3 == modvalue )
  12555                            {
  12556                                /*enables the gain*/
  12557                                appCtx.appEmuCtx.confValue.gain_flag1 = value;
  12558                                appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN3;
  12559                            }
  12560                            else 
  12561                              return S2W_EINVAL;
  12562                            break;
  12563                        }
  12564              
  12565                       else if (( 0 == value ) && (NULL == p))
  12566                        {
  12567                            appCtx.appEmuCtx.confValue.gain_flag1 = value;
  12568                        }
  12569                        
  12570                        else
  12571                        {
  12572                            return S2W_EINVAL;
  12573                        }
  12574                         break;
  12575                      
  12576                   case APP_EMU_CONF_SDADC_G2: 
  12577                     
  12578                        p = AppS2wParse_NextParamGet(&ptr);
  12579                        AppS2wParse_Int(p,&modvalue);
  12580                     
  12581                       if((1 == value ) && (NULL != p))
  12582                        {
  12583          
  12584                            /* Gain value can be 0,1,2 or 3 */
  12585                            if(0 == modvalue )
  12586                            {
  12587                                /*enables the gain*/
  12588                                appCtx.appEmuCtx.confValue.gain_flag2 = value;
  12589                                appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN0;
  12590                            }
  12591                            else if( 1 == modvalue )
  12592                            {
  12593                                /*enables the gain*/
  12594                                appCtx.appEmuCtx.confValue.gain_flag2 = value;
  12595                                appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN1;
  12596                            }
  12597                            else if( 2 == modvalue )
  12598                            {
  12599                                /*enables the gain*/
  12600                                appCtx.appEmuCtx.confValue.gain_flag2 = value;
  12601                                appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN2;
  12602                            }
  12603                            else if( 3 == modvalue )
  12604                            {
  12605                                /*enables the gain*/
  12606                                appCtx.appEmuCtx.confValue.gain_flag2 = value;
  12607                                appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN3;
  12608                            }
  12609                            else 
  12610                              return S2W_EINVAL;
  12611                            break;
  12612                        }
  12613              
  12614                        else if (( 0 == value ) && (NULL == p))
  12615                        {
  12616                            appCtx.appEmuCtx.confValue.gain_flag2 = value;
  12617                        }
  12618                        
  12619                        else
  12620                        {
  12621                            return S2W_EINVAL;
  12622                        }
  12623                       break;
  12624                     
  12625          			 
  12626          		case APP_EMU_CONF_SDADC_ATTENCONST:
  12627          		{
  12628                      //appCtx.appEmuCtx.emu.attenuationConstFp = value;
  12629          		    break;
  12630          		}
  12631          
  12632                  case APP_EMU_CONF_PL722X_SPI_CHANNEL:   
  12633                    
  12634                        if( (1 == value) || (0 == value))
  12635                        {
  12636                            appCtx.appEmuCtx.confValue.pl722x_spi_channel = value;
  12637                        }
  12638                        else 
  12639                        return S2W_EINVAL;
  12640                      
  12641                      break;
  12642                  case APP_EMU_CONF_PL722X_SET_FREQ_MS:     
  12643                   	appCtx.appEmuCtx.confValue.pl722x_readFreq_ms = value;
  12644                          
  12645                      break;
  12646          	case APP_EMU_CONF_PL722X_CS_GPIO:
  12647                    /*valid gpio numbers are 0 - 37*/
  12648                      if((value < 38))
  12649                      {
  12650          		appCtx.appEmuCtx.confValue.pl722x_gpio_cs = value;
  12651                      }
  12652                      else 
  12653                      return S2W_EINVAL;
  12654                          
  12655                      break;
  12656          	case APP_EMU_CONF_PL722X_RST_GPIO:
  12657                    /*valid gpio numbers are 0 - 37*/
  12658                      if((value < 38))
  12659                      {
  12660          		appCtx.appEmuCtx.confValue.pl722x_gpio_rst = value;
  12661                      }
  12662                      else 
  12663                      return S2W_EINVAL;
  12664                          
  12665                      break;
  12666                  default:
  12667                       return S2W_EINVAL;
  12668                      break;
  12669                     
  12670              }
  12671               return S2W_SUCCESS;
  12672          }
  12673          
  12674          /**
  12675           ******************************************************************
  12676           * @ingroup S2w-Application
  12677           * @brief Process the AT+EMUGETCONF = 'value' command
  12678           *   This function returns the various parameters of EMU .
  12679           *   
  12680           * @param ptr Pointer to the user input string.
  12681           * @return S2W_SUCCESS   - operation successful.
  12682           * @return S2W_EINVAL    - invalid input
  12683           ******************************************************************/
  12684          PRIVATE UINT8
  12685          AppS2wCmd_EmuGetConf(UINT8 *ptr)
  12686          {
  12687              UINT8 *p;
  12688              UINT32 param;
  12689              APP_EMU_CONFS_T conf;
  12690              
  12691              p = AppS2wParse_NextParamGet(&ptr);
  12692              if(!p)
  12693              {
  12694                  return S2W_EINVAL;
  12695              }
  12696              AppS2wParse_Int(p, &param);
  12697              
  12698              conf = (APP_EMU_CONFS_T) param;   
  12699              GsnEmu_GetConfPtr(&(appCtx.appEmuCtx.emu), &(appCtx.appEmuCtx.confValue));
  12700              
  12701              if((param > APP_EMU_END))
  12702              {
  12703           	return S2W_EINVAL;
  12704              }
  12705          	
  12706             	switch(conf)
  12707                  {
  12708                      case APP_EMU_CONF_MODULE:
  12709                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.module);  
  12710                           
  12711                           break;
  12712                      case APP_EMU_CONF_SDADC_VCC :
  12713                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vcc);    
  12714                           
  12715                           break;
  12716                      case APP_EMU_CONF_SDADC_ICC:
  12717                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_icc);          
  12718                           
  12719                           break;
  12720                      case APP_EMU_CONF_SDADC_VDCOFFSET:     
  12721                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vdcoffset);          
  12722                           
  12723                           break;
  12724                      case APP_EMU_CONF_SDADC_IDCOFFSET:     
  12725                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_idcoffset);          
  12726                           
  12727                           break;
  12728                      case APP_EMU_CONF_SDADC_VSF:     
  12729                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_vsf);          
  12730                           
  12731                           break;
  12732                      case APP_EMU_CONF_SDADC_ISF:     
  12733                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_isf);          
  12734                           
  12735                           break;
  12736                      case APP_EMU_CONF_SDADC_SF:     
  12737                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_samplingFreq);          
  12738                           
  12739                           break;
  12740                      case APP_EMU_CONF_SDADC_LCG:     
  12741                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_load_gpio);          
  12742                           
  12743                           break;
  12744                      case APP_EMU_CONF_SDADC_VUT:     
  12745                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vut);          
  12746                           
  12747                           break;
  12748                      case APP_EMU_CONF_SDADC_IUT:     
  12749                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_iut);          
  12750                           
  12751                           break;
  12752                      case APP_EMU_CONF_SDADC_FUT:     
  12753                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_fut);          
  12754                           
  12755                           break;
  12756                      case APP_EMU_CONF_SDADC_VLT:     
  12757                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vlt);          
  12758                           
  12759                           break;
  12760                      case APP_EMU_CONF_SDADC_ILT:     
  12761                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_ilt);          
  12762                           
  12763                           break;
  12764                      case APP_EMU_CONF_SDADC_FLT:     
  12765                           S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_flt);          
  12766                           
  12767                           break;
  12768                      case APP_EMU_CONF_SDADC_VAC:       
  12769                           
  12770                           if(GSN_EMU_SDADC_CHANNEL_0 == appCtx.appEmuCtx.confValue.sdadc_vac)
  12771                           {
  12772                               S2w_Printf("\r\n0\r\n");  
  12773                           }
  12774                           else if(GSN_EMU_SDADC_CHANNEL_1 == appCtx.appEmuCtx.confValue.sdadc_vac)
  12775                           {
  12776                               S2w_Printf("\r\n1\r\n");  
  12777                           }
  12778                           else if(GSN_EMU_SDADC_CHANNEL_2 == appCtx.appEmuCtx.confValue.sdadc_vac)
  12779                           {
  12780                               S2w_Printf("\r\n2\r\n");  
  12781                           }
  12782                           
  12783                           break;
  12784                      case APP_EMU_CONF_SDADC_IAC:      
  12785                           
  12786                           if(GSN_EMU_SDADC_CHANNEL_0 == appCtx.appEmuCtx.confValue.sdadc_iac)
  12787                           {
  12788                               S2w_Printf("\r\n0\r\n");  
  12789                           }
  12790                           else if(GSN_EMU_SDADC_CHANNEL_1 == appCtx.appEmuCtx.confValue.sdadc_iac)
  12791                           {
  12792                               S2w_Printf("\r\n1\r\n");  
  12793                           }
  12794                           else if(GSN_EMU_SDADC_CHANNEL_2 == appCtx.appEmuCtx.confValue.sdadc_iac)
  12795                           {
  12796                               S2w_Printf("\r\n2\r\n");  
  12797                           }
  12798                           
  12799                           break;
  12800                      case APP_EMU_CONF_SDADC_G0:
  12801                        
  12802                          /*check for verbose or nonverbose mode*/
  12803                          if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
  12804                          {
  12805                               if ( appCtx.appEmuCtx.confValue.gain_flag0 == 0)
  12806                               {
  12807                                  S2w_Printf("\r\n0\r\n");
  12808                                  break;
  12809                               }
  12810                               else if( appCtx.appEmuCtx.confValue.gain_flag0 == 1)
  12811                               {
  12812                                   if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain0 )
  12813                                   {
  12814                                     S2w_Printf("\r\n1:0\r\n");  
  12815                                   }
  12816                                   else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain0)
  12817                                   {
  12818                                     S2w_Printf("\r\n1:1\r\n");  
  12819                                   }
  12820                                   else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain0)
  12821                                   {
  12822                                     S2w_Printf("\r\n1:2\r\n");  
  12823                                   }
  12824                                   else if(GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain0)
  12825                                   {
  12826                                     S2w_Printf("\r\n1:3\r\n");  
  12827                                   }
  12828                                   
  12829                                   break;
  12830                               }
  12831                          }
  12832                          else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
  12833                          {
  12834                              if ( appCtx.appEmuCtx.confValue.gain_flag0 == 0)
  12835                              {
  12836                                 S2w_Printf("\r\ndisabled\r\n");
  12837                                 break;
  12838                              }
  12839                              else if( appCtx.appEmuCtx.confValue.gain_flag0 == 1)
  12840                              {
  12841                                  if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain0  )
  12842                                  {
  12843                                    S2w_Printf("\r\nenabled:06db\r\n");  
  12844                                  }
  12845                                  else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain0)
  12846                                  {
  12847                                    S2w_Printf("\r\nenabled:12db\r\n");  
  12848                                  }
  12849                                  else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain0 )
  12850                                  {
  12851                                    S2w_Printf("\r\nenabled:18db\r\n");  
  12852                                  }
  12853                                  else if(GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain0)
  12854                                  {
  12855                                    S2w_Printf("\r\nenabled:24db\r\n");  
  12856                                  }
  12857                                 
  12858                                  break;
  12859                               }
  12860                          }
  12861                           
  12862                     case APP_EMU_CONF_SDADC_G1:
  12863                       
  12864                       /*check for verbose or nonverbose mode*/
  12865                          if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
  12866                          {
  12867                               if ( appCtx.appEmuCtx.confValue.gain_flag1 == 0)
  12868                               {
  12869                                  S2w_Printf("\r\n0\r\n");
  12870                                  break;
  12871                               }
  12872                               else if( appCtx.appEmuCtx.confValue.gain_flag1 == 1)
  12873                               {
  12874                                   if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12875                                   {
  12876                                     S2w_Printf("\r\n1:0\r\n");  
  12877                                   }
  12878                                   else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12879                                   {
  12880                                     S2w_Printf("\r\n1:1\r\n");  
  12881                                   }
  12882                                   else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12883                                   {
  12884                                     S2w_Printf("\r\n1:2\r\n");  
  12885                                   }
  12886                                   else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12887                                   {
  12888                                     S2w_Printf("\r\n1:3\r\n");  
  12889                                   }
  12890                                   
  12891                                   break;
  12892                               }
  12893                          }
  12894                          else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
  12895                          {
  12896                              if ( appCtx.appEmuCtx.confValue.gain_flag1 == 0)
  12897                              {
  12898                                 S2w_Printf("\r\ndisabled\r\n");
  12899                                 break;
  12900                              }
  12901                              else if( appCtx.appEmuCtx.confValue.gain_flag1 == 1)
  12902                              {
  12903                                  if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12904                                  {
  12905                                    S2w_Printf("\r\nenabled:06db\r\n");  
  12906                                  }
  12907                                  else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12908                                  {
  12909                                    S2w_Printf("\r\nenabled:12db\r\n");  
  12910                                  }
  12911                                  else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12912                                  {
  12913                                    S2w_Printf("\r\nenabled:18db\r\n");  
  12914                                  }
  12915                                  else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain1)
  12916                                  {
  12917                                    S2w_Printf("\r\nenabled:24db\r\n");  
  12918                                  }
  12919                                 
  12920                                  break;
  12921                               }
  12922                          }
  12923                        
  12924          
  12925                     case APP_EMU_CONF_SDADC_G2:
  12926                       
  12927                          /*check for verbose or nonverbose mode*/
  12928                          if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
  12929                          {
  12930                               if ( appCtx.appEmuCtx.confValue.gain_flag2 == 0)
  12931                               {
  12932                                  S2w_Printf("\r\n0\r\n");
  12933                                  break;
  12934                               }
  12935                               else if( appCtx.appEmuCtx.confValue.gain_flag2 == 1)
  12936                               {
  12937                                   if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12938                                   {
  12939                                     S2w_Printf("\r\n1:0\r\n");  
  12940                                   }
  12941                                   else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12942                                   {
  12943                                     S2w_Printf("\r\n1:1\r\n");  
  12944                                   }
  12945                                   else if( GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain2 )
  12946                                   {
  12947                                     S2w_Printf("\r\n1:2\r\n");  
  12948                                   }
  12949                                   else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12950                                   {
  12951                                     S2w_Printf("\r\n1:3\r\n");  
  12952                                   }
  12953                                   
  12954                                   break;
  12955                               }
  12956                          }
  12957                          else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
  12958                          {
  12959                              if ( appCtx.appEmuCtx.confValue.gain_flag2 == 0)
  12960                              {
  12961                                 S2w_Printf("\r\ndisabled\r\n");
  12962                                 break;
  12963                              }
  12964                              else if( appCtx.appEmuCtx.confValue.gain_flag2 == 1)
  12965                              {
  12966                                  if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12967                                  {
  12968                                    S2w_Printf("\r\nenabled:06db\r\n");  
  12969                                  }
  12970                                  else if( GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12971                                  {
  12972                                    S2w_Printf("\r\nenabled:12db\r\n");  
  12973                                  }
  12974                                  else if( GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12975                                  {
  12976                                    S2w_Printf("\r\nenabled:18db\r\n");  
  12977                                  }
  12978                                  else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain2)
  12979                                  {
  12980                                    S2w_Printf("\r\nenabled:24db\r\n");  
  12981                                  }
  12982                                 
  12983                                  break;
  12984                               }
  12985                          }
  12986          				
  12987          				case APP_EMU_CONF_SDADC_ATTENCONST:
  12988          				{
  12989                              //S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.emu.attenuationConstFp);  
  12990          					break;
  12991          				}
  12992          
  12993          				
  12994                      case APP_EMU_CONF_PL722X_SPI_CHANNEL:     
  12995                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_spi_channel);          
  12996                           
  12997                           break;
  12998                      case APP_EMU_CONF_PL722X_SET_FREQ_MS:     
  12999                           S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_readFreq_ms);          
  13000                           
  13001                           break;
  13002                      case APP_EMU_CONF_PL722X_CS_GPIO:
  13003          		S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_gpio_cs);          
  13004          			
  13005          	        break;
  13006                     case APP_EMU_CONF_PL722X_RST_GPIO:
  13007                          S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_gpio_rst);  
  13008          			
  13009               	        break;
  13010                      default:
  13011                           return S2W_EINVAL;
  13012                           break;
  13013                           
  13014              	}
  13015                  return S2W_SUCCESS;
  13016          	
  13017          }
  13018          
  13019          /**
  13020           ******************************************************************
  13021           * @ingroup S2w-Application
  13022           * @brief Process the AT+EMURESETENERGY command
  13023           *   This function resets the energy .
  13024           *   
  13025           * @param ptr Pointer to the user input string.
  13026           * @return S2W_SUCCESS - operation successful.
  13027            * @return S2W_EINVAL   - invalid input
  13028           ******************************************************************/
  13029          PRIVATE UINT8
  13030          AppS2wCmd_EmuResetEnergy(UINT8 *ptr)
  13031          {
  13032              
  13033              GSN_EMU_STATUS_T status;
  13034              
  13035              if (ptr[0] == '\0')
  13036              {
  13037                  status = GsnEmu_ResetEnergy(&(appCtx.appEmuCtx.emu));
  13038                  if(GSN_EMU_STATUS_SUCCESS == status)
  13039                  {
  13040                      return S2W_SUCCESS;
  13041                  }
  13042                  else
  13043                  {
  13044                      return S2W_FAILURE;
  13045                  }
  13046              }
  13047              else 
  13048              {
  13049          	return S2W_EINVAL;
  13050              }
  13051          }
  13052          
  13053          /**
  13054          * This is just debugging
  13055          */
  13056          PRIVATE UINT8
  13057          AppS2wCmd_EmuPrint(UINT8 *ptr)
  13058          {
  13059              UINT32 i=0;
  13060          
  13061              if (1 == appCtx.appEmuCtx.emu.moduleCtx.sdAdcCtx.pingPongState)
  13062              {
  13063                  S2w_Printf("\r\nV: \r\n");
  13064                  for(i=0;i<(1000);i++)
  13065                  {
  13066                    S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf3[i] );
  13067                  }
  13068                  
  13069                  S2w_Printf("\r\nI: \r\n");
  13070                  for(i=0;i<(1000);i++)
  13071                  {
  13072                    S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf4[i] );        
  13073                  }
  13074              }  
  13075              else if (2 == appCtx.appEmuCtx.emu.moduleCtx.sdAdcCtx.pingPongState)
  13076              {
  13077                  S2w_Printf("\r\nV: \r\n");
  13078                  for(i=0;i<(1000);i++)
  13079                  {
  13080                    S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf1[i] );        
  13081                  }
  13082                 
  13083                  S2w_Printf("\r\nI: \r\n");
  13084                  for(i=0;i<(1000);i++)
  13085                  {
  13086                    S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf2[i] );        
  13087                  } 
  13088              }
  13089          	
  13090              //S2w_Printf("\r\nLastInput:%f\r\n",appCtx.appEmuCtx.emu.lastinputFp);
  13091              //S2w_Printf("\r\nLastOutput:%f\r\n",appCtx.appEmuCtx.emu.lastoutputFp);
  13092          	   
  13093              return S2W_SUCCESS;
  13094          }
  13095          
  13096          #if 0 /*Commands to be implemented*/
  13097          /**
  13098           ******************************************************************
  13099           * @ingroup S2w-Application
  13100           * @brief Process the AT+EMUPAUSE command
  13101           *   This function pauses the EMU is in running state.
  13102           *   
  13103           * @param ptr Pointer to the user input string.
  13104           * @return S2W_SUCCESS - operation successful.
  13105           * @return EMU STATUS   
  13106            * @return S2W_EINVAL   - invalid input
  13107           ******************************************************************/
  13108          PRIVATE UINT8
  13109          AppS2wCmd_EmuPause(UINT8 *ptr)
  13110          {
  13111          	
  13112              GSN_EMU_ELECTRIC_PARAMS_T param;
  13113              GSN_EMU_STATUS_T status;
  13114          	   
  13115              S2w_Printf("\r\n");
  13116              
  13117              if (ptr[0] == '\0')
  13118              {
  13119                  status = GsnEmu_Pause(&(appCtx.appEmuCtx.emu), &param);
  13120                  if(GSN_EMU_STATUS_SUCCESS == status)
  13121                  {
  13122                      return S2W_SUCCESS;
  13123                  }
  13124                  else
  13125                    return S2W_FAILURE;
  13126              }
  13127              else 
  13128              {
  13129          	return S2W_EINVAL;
  13130              }	
  13131          }		
  13132          
  13133          /**
  13134           ******************************************************************
  13135           * @ingroup S2w-Application
  13136           * @brief Process the AT+EMURESUME command
  13137           *   This function resumes the EMU operation which is Pause state.
  13138           *   
  13139           * @param ptr Pointer to the user input string.
  13140           * @return S2W_SUCCESS - operation successful.
  13141           * @return EMU STATUS   
  13142           * @return S2W_EINVAL   - invalid input
  13143           ******************************************************************/
  13144          PRIVATE UINT8
  13145          AppS2wCmd_EmuResume(UINT8 *ptr)
  13146          {
  13147          	
  13148              GSN_EMU_ELECTRIC_PARAMS_T param;   
  13149              GSN_EMU_STATUS_T status;
  13150              
  13151              if (ptr[0] == '\0')
  13152              {
  13153                  status = GsnEmu_Resume(&(appCtx.appEmuCtx.emu),&param,
  13154                                         &(appCtx.appEmuCtx.confValue));
  13155                  if(GSN_EMU_STATUS_SUCCESS == status)
  13156                  {
  13157                      return S2W_SUCCESS;
  13158                  }
  13159                  else
  13160                    return S2W_FAILURE;
  13161              }
  13162              else 
  13163              {
  13164          	return S2W_EINVAL;
  13165              }
  13166          }
  13167          
  13168          #endif
  13169          
  13170          /**
  13171           ******************************************************************
  13172           * @ingroup S2w-Application
  13173           * @brief Process the AT+EMUGETSTATUS command
  13174           *   This function returns the current state EMU.
  13175           *   
  13176           * @param ptr Pointer to the user input string.
  13177           * @return ENU STATUS
  13178           * @return S2W_SUCCESS - operation successful.
  13179           * @return S2W_EINVAL   - invalid input
  13180           ******************************************************************/
  13181          
  13182          PRIVATE UINT8
  13183          AppS2wCmd_EmuGetStatus(UINT8 *ptr)
  13184          {
  13185               
  13186              GSN_EMU_STATE_T state;
  13187              GSN_EMU_STATUS_T status;
  13188                 
  13189              if (ptr[0] == '\0')
  13190              {
  13191                  status = GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state);
  13192                  if(GSN_EMU_STATUS_SUCCESS == status)
  13193                  {
  13194                      if( state == GSN_EMU_STATE_RUNNING )
  13195                      {
  13196                          S2w_Printf("\r\nRunning\r\n");         
  13197                      }
  13198                      else if( state == GSN_EMU_STATE_PAUSED)
  13199                      {
  13200                          S2w_Printf("\r\nPaused\r\n");
  13201                      }
  13202                      else if( state == GSN_EMU_STATE_STOPPED )
  13203                      {
  13204                          S2w_Printf("\r\nStopped\r\n");
  13205                      }
  13206                     status =( GSN_EMU_STATUS_T )S2W_SUCCESS;
  13207                  }
  13208              }
  13209              else 
  13210              {
  13211                  status = (GSN_EMU_STATUS_T) S2W_EINVAL;
  13212              }
  13213              return status ;
  13214               
  13215          }
  13216          #endif /*S2W_EMU*/
  13217          
  13218          #ifdef S2W_ADC_SUPPORT
  13219          
  13220          #ifndef GS2100

   \                                 In section .noinit, align 4
  13221          __no_init UINT32 app_adc_data[256];
   \                     app_adc_data:
   \   00000000                      DS8 1024
  13222          #define S2W_ADC_SINGLE 1
  13223          #define S2W_ADC_CONTI  0
  13224          #define S2W_ADC_PERIODIC 2
  13225          
  13226          /*Commands for adc*/
  13227          
  13228          /**
  13229           ******************************************************************
  13230           * @ingroup S2w-Application
  13231           * @brief Process the AT+AADCCONF Command.
  13232           *   This function sets the required configurations for aadc.
  13233           * @param ptr Pointer to the user input string.
  13234           *
  13235           * @return S2W_SUCCESS - operation successful.
  13236           * @retval S2W_EINVAL  - oeration failure-invalid command.
  13237           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  13238          PRIVATE UINT8
  13239          AppS2wCmd_AdcConf(UINT8 *ptr)
  13240          {
   \                     AppS2wCmd_AdcConf:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  13241              UINT8 *p, status;
  13242              UINT32 conf = 0;
   \   00000004   0x.... 0x....      BL       ?Subroutine7
  13243              UINT32 value = 0;
  13244          
  13245              p = AppS2wParse_NextParamGet(&ptr);
  13246              if (!p)
   \                     ??CrossCallReturnLabel_8:
   \   00000008   0xB308             CBZ.N    R0,??AppS2wCmd_AdcConf_0
  13247              {
  13248                  return S2W_EINVAL;
  13249              }
  13250              status = AppS2wParse_Int(p, &conf);
  13251              if (status != S2W_SUCCESS || (conf >5))
   \   0000000A   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_317:
   \   0000000E   0xB9F0             CBNZ.N   R0,??AppS2wCmd_AdcConf_0
   \   00000010   0x9801             LDR      R0,[SP, #+4]
   \   00000012   0x2806             CMP      R0,#+6
   \   00000014   0xD21B             BCS.N    ??AppS2wCmd_AdcConf_0
  13252              {
  13253                  return S2W_EINVAL;
  13254              }
  13255          
  13256              p = AppS2wParse_NextParamGet(&ptr);
   \   00000016   0x.... 0x....      BL       ??Subroutine34_0
  13257              if (!p)
   \                     ??CrossCallReturnLabel_143:
   \   0000001A   0xB1C0             CBZ.N    R0,??AppS2wCmd_AdcConf_0
  13258              {
  13259                  return S2W_EINVAL;
  13260              }
  13261              status = AppS2wParse_Int(p,&value);
   \   0000001C   0x.... 0x....      BL       ?Subroutine51
  13262              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_271:
   \   00000020   0xB9D8             CBNZ.N   R0,??AppS2wCmd_AdcConf_1
  13263              {
  13264                  return status;
  13265              }
  13266          
  13267              switch(conf)
   \   00000022   0xF248 0x0270      MOVW     R2,#+32880
   \   00000026   0x.... 0x....      LDR.W    R3,??DataTable496_3
   \   0000002A   0x9D01             LDR      R5,[SP, #+4]
   \   0000002C   0xF248 0x0450      MOVW     R4,#+32848
   \   00000030   0x18D1             ADDS     R1,R2,R3
   \   00000032   0x18E0             ADDS     R0,R4,R3
   \   00000034   0x2D01             CMP      R5,#+1
   \   00000036   0xD007             BEQ.N    ??AppS2wCmd_AdcConf_2
   \   00000038   0xD349             BCC.N    ??AppS2wCmd_AdcConf_3
   \   0000003A   0x2D03             CMP      R5,#+3
   \   0000003C   0xD01D             BEQ.N    ??AppS2wCmd_AdcConf_4
   \   0000003E   0xD30D             BCC.N    ??AppS2wCmd_AdcConf_5
   \   00000040   0x2D05             CMP      R5,#+5
   \   00000042   0xD03C             BEQ.N    ??AppS2wCmd_AdcConf_6
   \   00000044   0xD328             BCC.N    ??AppS2wCmd_AdcConf_7
   \   00000046   0xE042             B.N      ??AppS2wCmd_AdcConf_3
  13268              {
  13269                  case 1 :
  13270                    /* select mode for reading */
  13271                    if(S2W_ADC_CONTI == value)
   \                     ??AppS2wCmd_AdcConf_2:
   \   00000048   0x9900             LDR      R1,[SP, #+0]
   \   0000004A   0xB911             CBNZ.N   R1,??AppS2wCmd_AdcConf_8
   \   0000004C   0x7041             STRB     R1,[R0, #+1]
  13272                    {
  13273                      appCtx.appadcconfig.readMode = GSN_ADC_MODE_CONTINUOUS ;
  13274                    }
  13275                    if (S2W_ADC_SINGLE == value)
  13276                    {
  13277                       appCtx.appadcconfig.readMode = GSN_ADC_MODE_SINGLE ;
  13278                    }
  13279                    else
  13280                    {
  13281                        return S2W_EINVAL;
  13282                    }
  13283                    break;
  13284          
  13285                  case 2 :
  13286          
  13287                       /*set the slave address*/
  13288                       appCtx.appadcconfig.samplingfreq = value ;
  13289                    if(value > 2000000)
  13290                    {
  13291                       return S2W_EINVAL;
  13292                    }
  13293          
  13294                       if(value >= 100000)
  13295                       {
  13296                           appCtx.appadcconfig.en100kHz = GSN_ADC_EN100K_ENABLE ;
  13297          
  13298                       }
  13299                       else
  13300                       {
  13301                           appCtx.appadcconfig.en100kHz = GSN_ADC_EN100K_DISABLE ;
  13302          
  13303                       }
  13304                       break;
  13305          
  13306                  case 3:
  13307                    if( 0 == value )
  13308                    {
  13309                        appCtx.appadcconfig.threshselect = GSN_ADC_NO_THRESH_SEL;
  13310                        appCtx.appadcconfig.thresh0.lower = 0 ;
  13311                        appCtx.appadcconfig.thresh0.upper = 0 ;
  13312                    }
  13313                    else if( 1 == value )
  13314                    {
  13315                        appCtx.appadcconfig.threshselect = GSN_ADC_SET0_THRESH_SEL;
  13316                    }
  13317                    else if( 2 == value )
  13318                    {
  13319                        appCtx.appadcconfig.threshselect = GSN_ADC_SET1_THRESH_SEL;
  13320                    }
  13321                    else if( 3 == value )
  13322                    {
  13323                        appCtx.appadcconfig.threshselect = GSN_ADC_SET2_THRESH_SEL;
  13324                    }
  13325                    else
  13326                    {
  13327                        return S2W_EINVAL;
  13328                    }
  13329                    break;
  13330          
  13331                  case 4:
  13332                    /*set all the default configurations*/
  13333                    if( 0 == value )
  13334                    {
  13335                        appCtx.appadcconfig.refVoltage = GSN_ADC_REF_EXTERNAL ;
  13336                        appCtx.appadcconfig.pdPolarity = GSN_ADC_PDPOLARITY_H;
  13337                        appCtx.appadcconfig.sup1p8     = GSN_ADC_AVDD_3Vrange;
  13338                        appCtx.appadcconfig.enlvl =  GSN_ADC_LVL_ENABLE ;
  13339                        appCtx.appadcconfig.enDvdd = GSN_ADC_DVDD_ENABLE ;
  13340                        appCtx.appadcconfig.enTrim = GSN_ADC_TRIM_DISABLE ;
  13341                        appCtx.appadcconfig.startPolarity = GSN_ADC_STARTPOLARITY_L ;
  13342                        appCtx.appadcconfig.adcClk = GSN_ADC_CLK_SEL_XTAL ;
  13343                        appCtx.appadcconfig.startCycles = 1 ;
  13344                        appCtx.appadcconfig.powerCycles = 200 ;
  13345                        appCtx.appadcconfig.fifoThr = 0x8;
  13346          
  13347                    }
  13348                    else
  13349                    {
  13350                       return S2W_EINVAL;
  13351                    }
  13352                    break;
  13353                  case 5:
  13354                    /*Set the flag only when using at+aadcpollread command*/
  13355                    if(1 == value )
  13356                    {
  13357                       appCtx.appadcconfig.singlePolling = TRUE;
  13358                    }
  13359                    else if (0 == value)
  13360                    {
  13361                       appCtx.appadcconfig.singlePolling = FALSE;
  13362                    }
  13363                    else
  13364                    {
  13365                       return S2W_EINVAL;
   \                     ??AppS2wCmd_AdcConf_0:
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0xBD3E             POP      {R1-R5,PC}
  13366                    }
   \                     ??AppS2wCmd_AdcConf_8:
   \   00000052   0x2901             CMP      R1,#+1
   \   00000054   0xD1FB             BNE.N    ??AppS2wCmd_AdcConf_0
   \   00000056   0x7041             STRB     R1,[R0, #+1]
  13367                    break;
  13368                  default:
  13369                    return S2W_FAILURE;
  13370              }
  13371              return S2W_SUCCESS;
   \                     ??AppS2wCmd_AdcConf_9:
   \   00000058   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_AdcConf_1:
   \   0000005A   0xBD3E             POP      {R1-R5,PC}       ;; return
   \                     ??AppS2wCmd_AdcConf_5:
   \   0000005C   0x9A00             LDR      R2,[SP, #+0]
   \   0000005E   0x610A             STR      R2,[R1, #+16]
   \   00000060   0x9900             LDR      R1,[SP, #+0]
   \   00000062   0x.... 0x....      LDR.W    R2,??DataTable503  ;; 0x1e8481
   \   00000066   0x4291             CMP      R1,R2
   \   00000068   0xD2F1             BCS.N    ??AppS2wCmd_AdcConf_0
   \   0000006A   0x.... 0x....      LDR.W    R2,??DataTable503_1  ;; 0x186a0
   \   0000006E   0x4291             CMP      R1,R2
   \   00000070   0x4189             SBCS     R1,R1,R1
   \   00000072   0x43C9             MVNS     R1,R1
   \   00000074   0x0FC9             LSRS     R1,R1,#+31
   \   00000076   0x7181             STRB     R1,[R0, #+6]
   \   00000078   0xE7EE             B.N      ??AppS2wCmd_AdcConf_9
   \                     ??AppS2wCmd_AdcConf_4:
   \   0000007A   0x9900             LDR      R1,[SP, #+0]
   \   0000007C   0xB919             CBNZ.N   R1,??AppS2wCmd_AdcConf_10
   \   0000007E   0x7281             STRB     R1,[R0, #+10]
   \   00000080   0x8181             STRH     R1,[R0, #+12]
   \   00000082   0x81C1             STRH     R1,[R0, #+14]
   \   00000084   0xE7E8             B.N      ??AppS2wCmd_AdcConf_9
   \                     ??AppS2wCmd_AdcConf_10:
   \   00000086   0x2901             CMP      R1,#+1
   \   00000088   0xD101             BNE.N    ??AppS2wCmd_AdcConf_11
   \                     ??AppS2wCmd_AdcConf_12:
   \   0000008A   0x7281             STRB     R1,[R0, #+10]
   \   0000008C   0xE7E4             B.N      ??AppS2wCmd_AdcConf_9
   \                     ??AppS2wCmd_AdcConf_11:
   \   0000008E   0x2902             CMP      R1,#+2
   \   00000090   0xD0FB             BEQ.N    ??AppS2wCmd_AdcConf_12
   \   00000092   0x2903             CMP      R1,#+3
   \   00000094   0xD1DB             BNE.N    ??AppS2wCmd_AdcConf_0
   \   00000096   0xE7F8             B.N      ??AppS2wCmd_AdcConf_12
   \                     ??AppS2wCmd_AdcConf_7:
   \   00000098   0x9D00             LDR      R5,[SP, #+0]
   \   0000009A   0x2D00             CMP      R5,#+0
   \   0000009C   0xD1D7             BNE.N    ??AppS2wCmd_AdcConf_0
   \   0000009E   0x2501             MOVS     R5,#+1
   \   000000A0   0x54E5             STRB     R5,[R4, R3]
   \   000000A2   0x2400             MOVS     R4,#+0
   \   000000A4   0x750C             STRB     R4,[R1, #+20]
   \   000000A6   0x21C8             MOVS     R1,#+200
   \   000000A8   0x7681             STRB     R1,[R0, #+26]
   \   000000AA   0x54D5             STRB     R5,[R2, R3]
   \   000000AC   0x2108             MOVS     R1,#+8
   \   000000AE   0x7085             STRB     R5,[R0, #+2]
   \   000000B0   0x70C4             STRB     R4,[R0, #+3]
   \   000000B2   0x7105             STRB     R5,[R0, #+4]
   \   000000B4   0x7145             STRB     R5,[R0, #+5]
   \   000000B6   0x71C4             STRB     R4,[R0, #+7]
   \   000000B8   0x7645             STRB     R5,[R0, #+25]
   \   000000BA   0x7601             STRB     R1,[R0, #+24]
   \   000000BC   0xE7CC             B.N      ??AppS2wCmd_AdcConf_9
   \                     ??AppS2wCmd_AdcConf_6:
   \   000000BE   0x9800             LDR      R0,[SP, #+0]
   \   000000C0   0x2801             CMP      R0,#+1
   \   000000C2   0xD101             BNE.N    ??AppS2wCmd_AdcConf_13
   \                     ??AppS2wCmd_AdcConf_14:
   \   000000C4   0x7548             STRB     R0,[R1, #+21]
   \   000000C6   0xE7C7             B.N      ??AppS2wCmd_AdcConf_9
   \                     ??AppS2wCmd_AdcConf_13:
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0xD1C0             BNE.N    ??AppS2wCmd_AdcConf_0
   \   000000CC   0xE7FA             B.N      ??AppS2wCmd_AdcConf_14
   \                     ??AppS2wCmd_AdcConf_3:
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xBD3E             POP      {R1-R5,PC}
  13372          
  13373          
  13374          }
  13375          
  13376          /**
  13377           ******************************************************************
  13378           * @ingroup S2w-Application
  13379           * @brief Process the AT+AADCSTART Command.
  13380           *   This function starts aadc as configured .
  13381           * @param ptr Pointer to the user input string.
  13382           *
  13383           * @return S2W_SUCCESS - operation successful.
  13384           * @retval S2W_EINVAL  - oeration failure-invalid command.
  13385           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  13386          PRIVATE UINT8
  13387          AppS2wCmd_AdcStart(UINT8 *ptr)
  13388          
  13389          {
   \                     AppS2wCmd_AdcStart:
   \   00000000   0xB510             PUSH     {R4,LR}
  13390              GSN_STATUS status;
  13391              status = GsnADC_Open(&appCtx.appadchandle,&appCtx.appadcconfig);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable496_3
   \   00000006   0xF504 0x4100      ADD      R1,R4,#+32768
   \   0000000A   0xF504 0x40FE      ADD      R0,R4,#+32512
   \   0000000E   0x3150             ADDS     R1,R1,#+80
   \   00000010   0x30F8             ADDS     R0,R0,#+248
   \   00000012   0x.... 0x....      BL       GsnADC_Open
  13392              if(status == GSN_SUCCESS)
   \   00000016   0xB918             CBNZ.N   R0,??AppS2wCmd_AdcStart_0
  13393              {
  13394                  appCtx.adcStartStatus = TRUE;
   \   00000018   0xF248 0x0198      MOVW     R1,#+32920
   \   0000001C   0x2201             MOVS     R2,#+1
   \   0000001E   0x550A             STRB     R2,[R1, R4]
  13395              }
  13396              return status;
   \                     ??AppS2wCmd_AdcStart_0:
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0xBD10             POP      {R4,PC}          ;; return
  13397          
  13398          }
  13399          
  13400          
  13401          /**
  13402           ******************************************************************
  13403           * @ingroup S2w-Application
  13404           * @brief Process the AT+AADCREAD Command.
  13405           *   This function reads the values from aadc as configured .
  13406           * @param ptr Pointer to the user input string.
  13407           *
  13408           * @return S2W_SUCCESS - operation successful.
  13409           * @retval S2W_EINVAL  - oeration failure-invalid command.
  13410           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  13411          PRIVATE UINT8
  13412          AppS2wCmd_AdcRead(UINT8 *ptr)
  13413          {
   \                     AppS2wCmd_AdcRead:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
  13414              UINT8  *p, status;
  13415              UINT32 size=0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9002             STR      R0,[SP, #+8]
  13416              UINT32 channel=0;
   \   00000008   0x9001             STR      R0,[SP, #+4]
  13417              UINT32 k =0 ;
   \   0000000A   0x2400             MOVS     R4,#+0
  13418          
  13419              p = AppS2wParse_NextParamGet(&ptr);	    /* size */
   \   0000000C   0x.... 0x....      BL       ?Subroutine30
  13420              if (!p)
   \                     ??CrossCallReturnLabel_79:
   \   00000010   0xB178             CBZ.N    R0,??AppS2wCmd_AdcRead_0
  13421              {
  13422                  return S2W_EINVAL;
  13423              }
  13424          
  13425              status = AppS2wParse_Int(p, &size);
  13426              if (status != S2W_SUCCESS || (size >256))
   \   00000012   0x.... 0x....      BL       ?Subroutine50
   \                     ??CrossCallReturnLabel_257:
   \   00000016   0xB960             CBNZ.N   R0,??AppS2wCmd_AdcRead_0
   \   00000018   0x9802             LDR      R0,[SP, #+8]
   \   0000001A   0xF5B0 0x7F80      CMP      R0,#+256
   \   0000001E   0xD808             BHI.N    ??AppS2wCmd_AdcRead_0
  13427              {
  13428                  return S2W_EINVAL;
  13429              }
  13430          
  13431          
  13432              p = AppS2wParse_NextParamGet(&ptr);    /* channel no */
   \   00000020   0x.... 0x....      BL       ?Subroutine30
  13433              if (!p)
   \                     ??CrossCallReturnLabel_78:
   \   00000024   0xB128             CBZ.N    R0,??AppS2wCmd_AdcRead_0
  13434              {
  13435                  return S2W_EINVAL;
  13436              }
  13437              status = AppS2wParse_Int(p,&channel);
  13438              if (status != S2W_SUCCESS || (channel > 7))
   \   00000026   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_316:
   \   0000002A   0xB910             CBNZ.N   R0,??AppS2wCmd_AdcRead_0
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0x2808             CMP      R0,#+8
   \   00000030   0xD301             BCC.N    ??AppS2wCmd_AdcRead_1
  13439              {
  13440                  return S2W_EINVAL;
   \                     ??AppS2wCmd_AdcRead_0:
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xE033             B.N      ??AppS2wCmd_AdcRead_2
  13441              }
  13442          
  13443              if(!appCtx.adcStartStatus)
   \                     ??AppS2wCmd_AdcRead_1:
   \   00000036   0xF248 0x0188      MOVW     R1,#+32904
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable496_3
   \   0000003E   0x180A             ADDS     R2,R1,R0
   \   00000040   0x7C13             LDRB     R3,[R2, #+16]
   \   00000042   0xB1C3             CBZ.N    R3,??AppS2wCmd_AdcRead_3
  13444              {
  13445                  return S2W_FAILURE;
  13446              }
  13447              channel |= 0xf0;
   \   00000044   0x9B01             LDR      R3,[SP, #+4]
  13448              
  13449              appCtx.appadcrw.buffer.pData = app_adc_data;
   \   00000046   0x.... 0x....      LDR.W    R5,??DataTable504
   \   0000004A   0x6055             STR      R5,[R2, #+4]
   \   0000004C   0xF043 0x03F0      ORR      R3,R3,#0xF0
   \   00000050   0x9301             STR      R3,[SP, #+4]
  13450          
  13451              appCtx.appadcrw.buffer.size  = size ;
  13452          
  13453              appCtx.appadcrw.funcCB = NULL ;
   \   00000052   0x60D4             STR      R4,[R2, #+12]
  13454          
  13455              appCtx.appadcrw.contextCB = NULL ;
   \   00000054   0x6094             STR      R4,[R2, #+8]
  13456          
  13457              status = GsnADC_PollRead(&appCtx.appadchandle,
  13458                                 appCtx.appadcconfig.readMode,
  13459                                 channel,
  13460                                 &appCtx.appadcrw,
  13461                                 GSN_ADC_REF_EXTERNAL);
  13462              if(status != GSN_SUCCESS)
   \   00000056   0x2201             MOVS     R2,#+1
   \   00000058   0x9B02             LDR      R3,[SP, #+8]
   \   0000005A   0x500B             STR      R3,[R1, R0]
   \   0000005C   0x9200             STR      R2,[SP, #+0]
   \   0000005E   0x180B             ADDS     R3,R1,R0
   \   00000060   0xF248 0x0151      MOVW     R1,#+32849
   \   00000064   0x5C09             LDRB     R1,[R1, R0]
   \   00000066   0x9A01             LDR      R2,[SP, #+4]
   \   00000068   0xF500 0x40FE      ADD      R0,R0,#+32512
   \   0000006C   0x30F8             ADDS     R0,R0,#+248
   \   0000006E   0x.... 0x....      BL       GsnADC_PollRead
   \   00000072   0xB2C0             UXTB     R0,R0
   \   00000074   0xB108             CBZ.N    R0,??AppS2wCmd_AdcRead_4
  13463              {
  13464                  return S2W_FAILURE;
   \                     ??AppS2wCmd_AdcRead_3:
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0xE011             B.N      ??AppS2wCmd_AdcRead_2
  13465              }
  13466          
  13467              S2w_Printf("\r\n");
   \                     ??AppS2wCmd_AdcRead_4:
   \   0000007A   0x.... 0x....      BL       ?Subroutine91
  13468              for(k = 0 ; k < size ; k++)
   \                     ??CrossCallReturnLabel_488:
   \   0000007E   0x.... 0x....      ADR.W    R6,`?<Constant "%x\\r\\n">`
   \   00000082   0x....             ADR.N    R7,??DataTable492  ;; 0x30, 0x78, 0x00, 0x00
   \   00000084   0xE007             B.N      ??AppS2wCmd_AdcRead_5
  13469              {
  13470                 S2w_Printf("0x");
   \                     ??AppS2wCmd_AdcRead_6:
   \   00000086   0x.... 0x....      BL       ?Subroutine87
  13471                 S2w_Printf("%x\r\n",app_adc_data[k] );
   \                     ??CrossCallReturnLabel_470:
   \   0000008A   0xF855 0x1024      LDR      R1,[R5, R4, LSL #+2]
   \   0000008E   0x4630             MOV      R0,R6
   \   00000090   0x.... 0x....      BL       S2w_Printf
  13472              }
   \   00000094   0x1C64             ADDS     R4,R4,#+1
   \                     ??AppS2wCmd_AdcRead_5:
   \   00000096   0x9802             LDR      R0,[SP, #+8]
   \   00000098   0x4284             CMP      R4,R0
   \   0000009A   0xD3F4             BCC.N    ??AppS2wCmd_AdcRead_6
  13473          
  13474              return S2W_SUCCESS ;
   \   0000009C   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_AdcRead_2:
   \   0000009E   0xB005             ADD      SP,SP,#+20
   \   000000A0   0xBDF0             POP      {R4-R7,PC}       ;; return
  13475          
  13476          }
  13477          
  13478          /**
  13479           ******************************************************************
  13480           * @ingroup S2w-Application
  13481           * @brief Process the AT+AADCSTOP Command.
  13482           *   This function Stops aadc operation.
  13483           * @param ptr Pointer to the user input string.
  13484           *
  13485           * @return S2W_SUCCESS - operation successful.
  13486           * @retval S2W_EINVAL  - oeration failure-invalid command.
  13487           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  13488          PRIVATE UINT8
  13489          AppS2wCmd_AdcStop(UINT8 *ptr)
  13490          {
   \                     AppS2wCmd_AdcStop:
   \   00000000   0xB510             PUSH     {R4,LR}
  13491              GSN_STATUS status;
  13492          
  13493              status = GsnADC_Close(&appCtx.appadchandle);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable496_3
   \   00000006   0xF504 0x40FE      ADD      R0,R4,#+32512
   \   0000000A   0x30F8             ADDS     R0,R0,#+248
   \   0000000C   0x.... 0x....      BL       GsnADC_Close
  13494              if(status == GSN_SUCCESS)
   \   00000010   0xB918             CBNZ.N   R0,??AppS2wCmd_AdcStop_0
  13495              {
  13496                  appCtx.adcStartStatus = FALSE;
   \   00000012   0xF248 0x0198      MOVW     R1,#+32920
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x550A             STRB     R2,[R1, R4]
  13497              }
  13498              return status;
   \                     ??AppS2wCmd_AdcStop_0:
   \   0000001A   0xB2C0             UXTB     R0,R0
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
  13499          }
  13500          
  13501          #endif
  13502          #endif
  13503          
  13504          #ifdef S2W_I2C_SUPPORT
  13505          /*Commands for i2c*/
  13506          
  13507          /**
  13508           ******************************************************************
  13509           * @ingroup S2w-Application
  13510           * @brief Process the AT+I2CCONF command
  13511           *   This function sets the configurations for I2C
  13512           *   
  13513           * @param ptr Pointer to the user input string.
  13514           * 
  13515           * @return S2W_SUCCESS - operation successful.
  13516           * @return S2W_EINVAL   - invalid input
  13517           ******************************************************************/
  13518          /*clock context for i2c*/
  13519          GSN_CLK_CTL_CTX_T GsnS2wClkCtx;
  13520          /*set the configurations for I2C*/
  13521          PRIVATE UINT8
  13522          AppS2wCmd_I2cConf(UINT8 *ptr)
  13523          {
  13524              UINT8 *p, status;
  13525              UINT32 conf;
  13526              UINT32 value;
  13527              UINT32 param;
  13528           
  13529              p = AppS2wParse_NextParamGet(&ptr);	
  13530              if (!p)
  13531              {
  13532                  return S2W_EINVAL;
  13533              }
  13534              status = AppS2wParse_Int(p, &param);
  13535              if (status != S2W_SUCCESS )
  13536              {
  13537                  return S2W_EINVAL;
  13538              }
  13539              conf = param;
  13540          
  13541              p = AppS2wParse_NextParamGet(&ptr);
  13542              if (!p)
  13543              {
  13544                  return S2W_EINVAL;
  13545              }
  13546              AppS2wParse_Hex(p,&value); 
  13547              if (status != S2W_SUCCESS )
  13548              {
  13549                  return S2W_EINVAL;
  13550              }
  13551              
  13552              switch(conf)
  13553              {
  13554                  case 1 : 
  13555                    /* select master or slave*/
  13556                    if(0 == value)
  13557                    {
  13558                      //GsnClkCtl_Init(&GsnS2wClkCtx); fix for issue no:5917
  13559                      appCtx.app_i2cConf.gsnI2cMode = GSN_I2C_MNS_SLAVE;
  13560                    }
  13561                    else if(1 == value )
  13562                    {
  13563                        appCtx.app_i2cConf.gsnI2cMode = GSN_I2C_MNS_MASTER;
  13564                    }
  13565                      break;
  13566                  case 2 :
  13567                       /*set the slave address. when we are master than this is the address of slave device 
  13568                        but when we are slave this is the address of our device slave address.*/
  13569                      AppS2wParse_Hex(p,&value);
  13570                      appCtx.app_i2cConf.gsnI2cSlaveAddr = value ;
  13571                      break;
  13572                  case 3:
  13573                    /*select the address mode*/
  13574                    if(0 == value)
  13575                    {
  13576                       appCtx.app_i2cConf.gsnI2cAddrMode = GSN_I2C_ADMOD_7BITS ;
  13577                    }
  13578                    else if(1 == value )
  13579                    {
  13580                        appCtx.app_i2cConf.gsnI2cAddrMode = GSN_I2C_ADMOD_10BITS;
  13581                    }
  13582                    break;
  13583                 case 4:
  13584                   /*select the rate 100K/400K/3.4M*/
  13585                   if(0 == value)
  13586                   {
  13587                       appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_100KBITS;
  13588                   }
  13589                   else if(1 == value)
  13590                   {
  13591                       appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_400KBITS;
  13592                   }
  13593                   else if(2 == value )
  13594                   {
  13595                       appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_HSE;
  13596                   }
  13597                   else
  13598                   {
  13599                      AppS2wParse_Int(p,&value); 
  13600                      appCtx.app_i2cConf.gsnI2cRate = value;
  13601                   }
  13602                    break;
  13603                case 5:
  13604                  /*select the address mode*/
  13605                  if(0 == value)
  13606                  {
  13607                      appCtx.app_i2cConf.gsnI2cRandomCurrentAddr = GSN_I2C_RCAS_CURRENTADD;
  13608                  }
  13609                  else if(1 == value )
  13610                  {
  13611                      appCtx.app_i2cConf.gsnI2cRandomCurrentAddr = GSN_I2C_RCAS_RANDOMADD;
  13612                  }
  13613                  break;
  13614                      
  13615                  case 6 :
  13616                  /*set address in slave device whrere we want to read in case of random read*/
  13617                  appCtx.app_i2cConf.gsnI2cSlaveLocAddr = value ;
  13618                  break;
  13619                      
  13620                  case 7 :
  13621                  /*set the slave address*/
  13622                  appCtx.app_i2cConf.gsnI2cAddrLocInSlave = value;
  13623                  break;        
  13624                  
  13625                  case 8 :
  13626                  /* Memory Address Selection (Single byte or Double byte)*/
  13627                  if(0 == value)
  13628                  {
  13629                  appCtx.app_i2cConf.gsnI2cMemAddSel=GSN_I2C_MEMADD_SINGLE;
  13630                  }  
  13631                  else if(1 == value)
  13632                  {
  13633                  appCtx.app_i2cConf.gsnI2cMemAddSel=GSN_I2C_MEMADD_DOUBLE;
  13634                  }
  13635                  break;
  13636                  
  13637                  case 9 :
  13638                  /* Set the clock for slave to maintain data hold time */ 
  13639                  if(0==value) 
  13640                  {
  13641                  appCtx.app_i2cConf.gsnI2cSlaveDataHoldClkCnt=GSN_I2C_DATA_HOLD_CLOCK_COUNT;
  13642                  }
  13643                  break;
  13644                  
  13645                  case 10:
  13646                  /* Set Source Clock*/ 
  13647                  if(0==value)  
  13648                  {
  13649                  appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_HSRC;
  13650                  }
  13651                  
  13652                  else if(1==value)
  13653                  {
  13654                  appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_XTAL;      
  13655                  }
  13656                  
  13657                  else if(2==value)
  13658                  {
  13659                  /* Enable PLL */
  13660                  GsnClkCtl_SysPllEn(GSN_CLK_CTL_PLL_FREQ_120MHZ);  
  13661                  appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_PLL;       
  13662                  }
  13663          
  13664                  else
  13665                  {
  13666                  appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_HSRC;      
  13667                  }
  13668                  break;
  13669                  
  13670                 default:
  13671                       return S2W_FAILURE;
  13672              }
  13673              return S2W_SUCCESS;
  13674          
  13675          }
  13676          
  13677          /**
  13678           ******************************************************************
  13679           * @ingroup S2w-Application
  13680           * @brief Process the AT+I2CSTART command
  13681           *   This function initialises the I2C 
  13682           *   
  13683           * @param ptr Pointer to the user input string.
  13684           * 
  13685           * @return S2W_SUCCESS - operation successful.
  13686           * @return S2W_EINVAL   - invalid input
  13687           ******************************************************************/
  13688          PRIVATE UINT8
  13689          AppS2wCmd_I2cStart(UINT8 *ptr)
  13690          {
  13691            
  13692              GSN_STATUS status;
  13693              
  13694              /* select the mux for I2C */
  13695              
  13696              GsnIoMux_Sel(8,GSN_IOMUX_GPIO_8_AI2C_SDA);
  13697              GsnIoMux_PullDownEnable (8);   
  13698              GsnIoMux_Sel(9,GSN_IOMUX_GPIO_9_AI2C_SCL);
  13699              GsnIoMux_PullDownEnable (9);
  13700          
  13701          
  13702              status = GsnI2c_Open(&appCtx.app_i2cHandle,&appCtx.app_i2cConf, NULL);
  13703              if(status != GSN_SUCCESS)
  13704              {
  13705          		return S2W_FAILURE;
  13706          	}
  13707          	appCtx.i2cStatus = S2W_I2C_STARTED;
  13708              return status;
  13709          
  13710          }
  13711          
  13712          /**
  13713           ******************************************************************
  13714           * @ingroup S2w-Application
  13715           * @brief Process the AT+I2CWRITE command
  13716           *   This function initiates I2C data write
  13717           *   
  13718           * @param ptr Pointer to the user input string.
  13719           * @input - number of bytes to write
  13720           * @return S2W_SUCCESS - operation successful.
  13721           * @return S2W_EINVAL   - invalid input
  13722           ******************************************************************/
  13723          PRIVATE UINT8
  13724          AppS2wCmd_I2cWrite(UINT8 *ptr)
  13725          {
  13726              UINT8 *p,status;
  13727              UINT32 write_count;
  13728              UINT8 write_msg[128];
  13729              
  13730              if(appCtx.i2cStatus != S2W_I2C_STARTED)
  13731              {
  13732          		return S2W_EINVAL;
  13733          	}
  13734              p = AppS2wParse_NextParamGet(&ptr);
  13735              if (!p)
  13736              {
  13737                  return S2W_EINVAL;
  13738              }
  13739              status = AppS2wParse_Int(p, &write_count);
  13740              if (status != S2W_SUCCESS )
  13741              {
  13742                  return S2W_EINVAL;
  13743              }
  13744              p = AppS2wParse_NextParamGet(&ptr);
  13745              if (!p)
  13746              {
  13747                  return S2W_EINVAL;
  13748              }
  13749              //strcpy ((char*)write_msg, (char*)p);
  13750          	// data comming as hex so convert it
  13751          	{
  13752                  UINT32 val = 0, i,j;
  13753          	    while (isspace(*p))
  13754          	    {
  13755          	        p++;
  13756          	    }
  13757              
  13758          	    for (j = 0; *p != '\0'; j++)
  13759          	    {
  13760          	        for (val = 0, i = 0; i < 2 && *p != '\0'; p++, i++)
  13761          	        {
  13762          	            if (!isxdigit(*p))
  13763          	            {
  13764          	                break;
  13765          	            }
  13766          		        val = val * 16 + AppS2wParse_ToHex(*p);
  13767          		     }
  13768          	         if (i != 2)
  13769          	         {
  13770          	             break;
  13771          	         }
  13772             
  13773          	         write_msg[j] = val;
  13774          	    }
  13775          	    if(j != write_count)
  13776              {
  13777          		    return S2W_EINVAL;
  13778          	    }
  13779              }
  13780                 
  13781              
  13782              status = GsnI2c_Write(&appCtx.app_i2cHandle,write_msg,write_count,NULL,NULL);
  13783              if(status == 0)
  13784              {
  13785                  return S2W_FAILURE;
  13786              }
  13787             return S2W_SUCCESS;
  13788            
  13789          }
  13790          
  13791          
  13792          /**
  13793           ******************************************************************
  13794           * @ingroup S2w-Application
  13795           * @brief Process the AT+I2CREAD command
  13796           *   This function initiates I2C data read 
  13797           *   
  13798           * @param ptr Pointer to the user input string.
  13799           * @input - number of bytes to read
  13800           * @return prints the data recieved by I2C
  13801           * @return S2W_SUCCESS - operation successful.
  13802           * @return S2W_EINVAL   - invalid input
  13803           ******************************************************************/
  13804          PRIVATE UINT8
  13805          AppS2wCmd_I2cRead(UINT8 *ptr)
  13806          {
  13807              UINT8 *p;
  13808              UINT32 read_count;
  13809              UINT8 p_read = 0;
  13810               UINT8 read_msg[128];
  13811              if(appCtx.i2cStatus != S2W_I2C_STARTED)
  13812              {
  13813          		return S2W_EINVAL;
  13814          	}
  13815              p = AppS2wParse_NextParamGet(&ptr);	
  13816              if (!p)
  13817              {
  13818                  return S2W_EINVAL;
  13819              }
  13820              AppS2wParse_Int(p, &read_count);
  13821              if (!p)
  13822              {
  13823                  return S2W_EINVAL;
  13824              }
  13825              memset(read_msg,0,128);
  13826              GsnI2c_Read( &(appCtx.app_i2cHandle),read_msg,read_count,TRUE,NULL,NULL);
  13827              
  13828              for(p_read =0;p_read < read_count; p_read++ )
  13829              {
  13830                  S2w_Printf("\r\n%02x",read_msg[p_read]);
  13831              }
  13832          
  13833              return S2W_SUCCESS;
  13834          }
  13835          
  13836           /******************************************************************
  13837           * @ingroup S2w-Application
  13838           * @brief Process the AT+I2CWRITE command
  13839           *   This function stops I2C operation
  13840           *   
  13841           * @param ptr Pointer to the user input string.
  13842           * @return S2W_SUCCESS - operation successful.
  13843           * @return S2W_EINVAL   - invalid input
  13844           ******************************************************************/
  13845          PRIVATE UINT8
  13846          AppS2wCmd_I2cStop(UINT8 *ptr)
  13847          {
  13848              GSN_STATUS status;
  13849              if(appCtx.i2cStatus != S2W_I2C_STARTED)
  13850              {
  13851          		return S2W_EINVAL;
  13852          	}
  13853              status = GsnI2c_Close(&(appCtx.app_i2cHandle));
  13854              appCtx.i2cStatus = S2W_I2C_STOPPED;
  13855              return status;
  13856          }
  13857          
  13858          #endif
  13859          /**
  13860           ******************************************************************
  13861           * @ingroup S2w-Application
  13862           * @brief Process the AT+WEAPFAST Command.
  13863           *   This function check the validity of parameter passed and
  13864           *   update the active profile username and password for EAP methods.
  13865           * @param ptr Pointer to the user input string.
  13866           *
  13867           * @return S2W_SUCCESS - operation successful.
  13868           * @retval S2W_EINVAL  - operation failure-invalid command.
  13869           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
  13870          PRIVATE UINT8
  13871          AppS2wCmd_WeapConf(UINT8 *ptr)
  13872          {
   \                     AppS2wCmd_WeapConf:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB081             SUB      SP,SP,#+4
  13873              UINT32 prevAuthType=0;
  13874              UINT32 len;
  13875              UINT8 *p;
  13876          
  13877              //memcpy(&params, &s2wCurrent.security, sizeof(params));
  13878          
  13879              /* Validate the input string.
  13880               */
  13881              p = AppS2wParse_NextParamGet(&ptr);     //get outer auth
   \   00000006   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_165:
   \   0000000A   0x0005             MOVS     R5,R0
  13882              if (!p)
   \   0000000C   0xD05F             BEQ.N    ??AppS2wCmd_WeapConf_0
  13883              {
  13884                  return S2W_EINVAL;
  13885              }
  13886              prevAuthType = s2wCurrent.security.eap.outerAuth;
   \   0000000E   0x....             LDR.N    R4,??DataTable493
   \   00000010   0xF8D4 0x7138      LDR      R7,[R4, #+312]
  13887              s2wCurrent.security.eap.outerAuth = 0;
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xF8C4 0x0138      STR      R0,[R4, #+312]
  13888              AppS2wParse_Int(p, &s2wCurrent.security.eap.outerAuth);
   \   0000001A   0xF504 0x719C      ADD      R1,R4,#+312
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       AppS2wParse_Int
  13889          
  13890                 if(!( FALSE
  13891          #if defined(S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE)
  13892                    || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST
  13893          #endif
  13894          #ifdef S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE
  13895                    || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_TTLS
  13896             #endif
  13897          #if defined(S2W_SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILABLE)
  13898                    || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_PEAP
  13899             #endif
  13900          #if defined(S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE)
  13901                     || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_TLS 
  13902          #endif
  13903                    || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_NONE  ))
   \   00000024   0xF8D4 0x0138      LDR      R0,[R4, #+312]
   \   00000028   0x282B             CMP      R0,#+43
   \   0000002A   0xBF18             IT       NE 
   \   0000002C   0x2815             CMPNE    R0,#+21
   \   0000002E   0xD007             BEQ.N    ??AppS2wCmd_WeapConf_1
   \   00000030   0x2819             CMP      R0,#+25
   \   00000032   0xBF18             IT       NE 
   \   00000034   0x280D             CMPNE    R0,#+13
   \   00000036   0xD003             BEQ.N    ??AppS2wCmd_WeapConf_1
   \   00000038   0xB110             CBZ.N    R0,??AppS2wCmd_WeapConf_1
  13904              {
  13905                s2wCurrent.security.eap.outerAuth = prevAuthType;
   \   0000003A   0xF8C4 0x7138      STR      R7,[R4, #+312]
   \   0000003E   0xE046             B.N      ??AppS2wCmd_WeapConf_0
  13906                  return S2W_EINVAL;
  13907              }
  13908              p = AppS2wParse_NextParamGet(&ptr);     //get outer auth
   \                     ??AppS2wCmd_WeapConf_1:
   \   00000040   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_164:
   \   00000044   0x0005             MOVS     R5,R0
  13909              if (!p)
   \   00000046   0xD042             BEQ.N    ??AppS2wCmd_WeapConf_0
  13910              {
  13911                  return S2W_EINVAL;
  13912              }
  13913              prevAuthType = s2wCurrent.security.eap.innerAuth;
   \   00000048   0xF504 0x769C      ADD      R6,R4,#+312
  13914              s2wCurrent.security.eap.innerAuth= 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x6877             LDR      R7,[R6, #+4]
   \   00000050   0x6070             STR      R0,[R6, #+4]
  13915              AppS2wParse_Int(p, &s2wCurrent.security.eap.innerAuth);
   \   00000052   0xF504 0x719E      ADD      R1,R4,#+316
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       AppS2wParse_Int
  13916              if(s2wCurrent.security.eap.innerAuth == 253)
   \   0000005C   0x6870             LDR      R0,[R6, #+4]
   \   0000005E   0x28FD             CMP      R0,#+253
   \   00000060   0xD137             BNE.N    ??AppS2wCmd_WeapConf_2
  13917              {
  13918                  s2wCurrent.security.eap.innerAuth = GSN_EAP_TYPE_NONE;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x6070             STR      R0,[R6, #+4]
  13919              }
  13920          
  13921                  if(!(FALSE
  13922             #if defined(S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE)
  13923          //#ifdef  GSN_SECURITY_ENTERPRISE_TTLS_AVAILABLE
  13924                     || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_MSCHAPV2
  13925          #endif
  13926             #if defined(S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILABLE)
  13927                      || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_GTC 
  13928          #endif
  13929                      || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_NONE
  13930                  ))
  13931              {
  13932                s2wCurrent.security.eap.innerAuth = prevAuthType;
  13933                  return S2W_EINVAL;
  13934              }
  13935          //        s2wCurrent.security.eap.innerAuth = GSN_EAP_TYPE_MSCHAPV2;
  13936              p = AppS2wParse_NextParamGet(&ptr);     //get usr name
   \                     ??AppS2wCmd_WeapConf_3:
   \   00000066   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_163:
   \   0000006A   0x0005             MOVS     R5,R0
  13937              if (!p)
   \   0000006C   0xD02F             BEQ.N    ??AppS2wCmd_WeapConf_0
  13938              {
  13939                  return S2W_EINVAL;
  13940              }
  13941          
  13942              len = strlen((char *)p);
   \   0000006E   0x.... 0x....      BL       strlen
   \   00000072   0x4607             MOV      R7,R0
  13943              if(len > S2W_MAX_EAP_USR_NAME_LEN)
   \   00000074   0x2F21             CMP      R7,#+33
   \   00000076   0xD22A             BCS.N    ??AppS2wCmd_WeapConf_0
  13944              {
  13945                  return S2W_EINVAL;
  13946              }
  13947              memset(s2wCurrent.security.eap.usrName, 0, S2W_MAX_EAP_USR_NAME_LEN);
   \   00000078   0xF204 0x1842      ADDW     R8,R4,#+322
   \   0000007C   0x2220             MOVS     R2,#+32
   \   0000007E   0x.... 0x....      BL       ??Subroutine141_0
  13948              memcpy(s2wCurrent.security.eap.usrName, p, len);
   \                     ??CrossCallReturnLabel_638:
   \   00000082   0x.... 0x....      BL       ?Subroutine97
  13949              s2wCurrent.security.eap.usrNameLen = len;
   \                     ??CrossCallReturnLabel_508:
   \   00000086   0x7277             STRB     R7,[R6, #+9]
  13950          
  13951              p = AppS2wParse_NextParamGet(&ptr);     //get password
   \   00000088   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_162:
   \   0000008C   0x0005             MOVS     R5,R0
  13952              if (!p)
   \   0000008E   0xD01E             BEQ.N    ??AppS2wCmd_WeapConf_0
  13953              {
  13954                  return S2W_EINVAL;
  13955              }
  13956              len = strlen((char *)p);
   \   00000090   0x.... 0x....      BL       strlen
   \   00000094   0x4607             MOV      R7,R0
  13957              if(len > S2W_MAX_EAP_PASSWORD_LEN)
   \   00000096   0x2F21             CMP      R7,#+33
   \   00000098   0xD219             BCS.N    ??AppS2wCmd_WeapConf_0
  13958              {
  13959                  return S2W_EINVAL;
  13960              }
  13961              memset(s2wCurrent.security.eap.password, 0, S2W_MAX_EAP_PASSWORD_LEN);
   \   0000009A   0xF204 0x1863      ADDW     R8,R4,#+355
   \   0000009E   0x2220             MOVS     R2,#+32
   \   000000A0   0x.... 0x....      BL       ??Subroutine141_0
  13962              memcpy(s2wCurrent.security.eap.password, p, len);
   \                     ??CrossCallReturnLabel_637:
   \   000000A4   0x.... 0x....      BL       ?Subroutine97
  13963              s2wCurrent.security.eap.passwordLen = len;
  13964              s2wCurrent.security.validKeys |= S2W_SECURITY_VALID_EAP;
   \                     ??CrossCallReturnLabel_507:
   \   000000A8   0xF894 0x0079      LDRB     R0,[R4, #+121]
   \   000000AC   0xF884 0x7162      STRB     R7,[R4, #+354]
   \   000000B0   0xF040 0x0004      ORR      R0,R0,#0x4
   \   000000B4   0xF884 0x0079      STRB     R0,[R4, #+121]
  13965          
  13966              s2wCurrent.security.eap.useCaCert = FALSE;
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x7230             STRB     R0,[R6, #+8]
  13967              p = AppS2wParse_NextParamGet(&ptr);//get use CA CERT. If it has to be used
   \   000000BC   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_161:
   \   000000C0   0x0005             MOVS     R5,R0
  13968              if (p)
   \   000000C2   0xD00D             BEQ.N    ??AppS2wCmd_WeapConf_4
  13969              {
  13970                  if( S2W_SUCCESS != AppS2wParse_Boolean(p,
  13971                      &s2wCurrent.security.eap.useCaCert))
   \   000000C4   0xF504 0x71A0      ADD      R1,R4,#+320
   \   000000C8   0x.... 0x....      BL       AppS2wParse_Boolean
   \   000000CC   0xB140             CBZ.N    R0,??AppS2wCmd_WeapConf_4
  13972                  {
  13973                      return S2W_EINVAL;
   \                     ??AppS2wCmd_WeapConf_0:
   \   000000CE   0x2002             MOVS     R0,#+2
   \   000000D0   0xE007             B.N      ??AppS2wCmd_WeapConf_5
  13974                  }
  13975              }
   \                     ??AppS2wCmd_WeapConf_2:
   \   000000D2   0x281A             CMP      R0,#+26
   \   000000D4   0xBF1C             ITT      NE 
   \   000000D6   0x2806             CMPNE    R0,#+6
   \   000000D8   0x2800             CMPNE    R0,#+0
   \   000000DA   0xD0C4             BEQ.N    ??AppS2wCmd_WeapConf_3
   \   000000DC   0x6077             STR      R7,[R6, #+4]
   \   000000DE   0xE7F6             B.N      ??AppS2wCmd_WeapConf_0
  13976              return S2W_SUCCESS;
   \                     ??AppS2wCmd_WeapConf_4:
   \   000000E0   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_WeapConf_5:
   \   000000E2   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
  13977          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine97:
   \   00000000   0x463A             MOV      R2,R7
   \   00000002   0x4629             MOV      R1,R5
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      memcpy
  13978          
  13979          
  13980          #ifdef S2W_EXTFLASH_DRIVER_TEST

   \                                 In section .bss, align 4
  13981          UINT8 readBuffer[1024];
   \                     readBuffer:
   \   00000000                      DS8 1024

   \                                 In section .bss, align 4
  13982          UINT32 extFlashFileSize;
   \                     extFlashFileSize:
   \   00000000                      DS8 4
  13983          UINT8 extFlashGetDatabuf[1024];
  13984          UINT32 writeAddr;
   \                     writeAddr:
   \   00000004                      DS8 4
  13985          UINT32 spiFlag;
   \                     spiFlag:
   \   00000008                      DS8 4
   \                     extFlashGetDatabuf:
   \   0000000C                      DS8 1024
  13986          

   \                                 In section .text, align 2, keep-with-next
  13987          PUBLIC UINT32
  13988          AppS2wExternalFlashData(UINT8 ch1)
  13989          {
   \                     AppS2wExternalFlashData:
   \   00000000   0xB53E             PUSH     {R1-R5,LR}
  13990          
  13991              UINT32 rwSize=0;
  13992          
  13993              if( extFlashFileSize == 0)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable504_1
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wExternalFlashData_0
  13994                      return S2W_FAILURE;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0xBD3E             POP      {R1-R5,PC}
  13995          
  13996                while(extFlashFileSize)
  13997                {
  13998                    memset(extFlashGetDatabuf, 0, sizeof(extFlashGetDatabuf));
   \                     ??AppS2wExternalFlashData_0:
   \   0000000E   0xF44F 0x6280      MOV      R2,#+1024
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xF104 0x000C      ADD      R0,R4,#+12
   \   00000018   0x.... 0x....      BL       memset
  13999                    if(extFlashFileSize<1024)
   \   0000001C   0x6825             LDR      R5,[R4, #+0]
   \   0000001E   0xF5B5 0x6F80      CMP      R5,#+1024
   \   00000022   0xBF28             IT       CS 
   \   00000024   0xF44F 0x6580      MOVCS    R5,#+1024
  14000                    {
  14001                      rwSize = extFlashFileSize;
  14002                    }
  14003                    if(extFlashFileSize>=1024)
  14004                    {
  14005                      rwSize = 1024;
  14006                    }
  14007                    /* store incoming byte in temparory bufer */
  14008                    AppS2wHal_CharNGet(extFlashGetDatabuf, rwSize);
   \   00000028   0x4629             MOV      R1,R5
   \   0000002A   0xF104 0x000C      ADD      R0,R4,#+12
   \   0000002E   0x.... 0x....      BL       AppS2wHal_CharNGet
  14009          		  
  14010          		  if(spiFlag)
   \   00000032   0x.... 0x....      BL       ?Subroutine80
   \                     ??CrossCallReturnLabel_459:
   \   00000036   0x6862             LDR      R2,[R4, #+4]
   \   00000038   0x68A1             LDR      R1,[R4, #+8]
   \   0000003A   0xF500 0x40EC      ADD      R0,R0,#+30208
   \   0000003E   0x3088             ADDS     R0,R0,#+136
   \   00000040   0xB121             CBZ.N    R1,??AppS2wExternalFlashData_1
  14011          		  {
  14012                                 GsnExtFlash_Write (&s2wappMainTaskCtxt->extFlashCtx,rwSize,writeAddr,extFlashGetDatabuf,GSN_FLASH_SPI_DMA, NULL, NULL);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x9102             STR      R1,[SP, #+8]
   \   00000046   0x9101             STR      R1,[SP, #+4]
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0xE001             B.N      ??AppS2wExternalFlashData_2
  14013          		  }
  14014          		  else
  14015          		  {
  14016          			GsnExtFlash_Write (&s2wappMainTaskCtxt->extFlashCtx,rwSize,writeAddr,extFlashGetDatabuf,GSN_FLASH_SPI_POLL, NULL, NULL);
   \                     ??AppS2wExternalFlashData_1:
   \   0000004C   0x9102             STR      R1,[SP, #+8]
   \   0000004E   0x9101             STR      R1,[SP, #+4]
   \                     ??AppS2wExternalFlashData_2:
   \   00000050   0x9100             STR      R1,[SP, #+0]
   \   00000052   0xF104 0x030C      ADD      R3,R4,#+12
   \   00000056   0x4629             MOV      R1,R5
   \   00000058   0x.... 0x....      BL       GsnExtFlash_Write
  14017          		  }
  14018                    extFlashFileSize -= rwSize;
   \   0000005C   0x6820             LDR      R0,[R4, #+0]
  14019                    writeAddr += rwSize;
   \   0000005E   0x6861             LDR      R1,[R4, #+4]
   \   00000060   0x1B40             SUBS     R0,R0,R5
   \   00000062   0x1869             ADDS     R1,R5,R1
   \   00000064   0x6020             STR      R0,[R4, #+0]
   \   00000066   0x6061             STR      R1,[R4, #+4]
  14020          		
  14021                }
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1D0             BNE.N    ??AppS2wExternalFlashData_0
  14022          	  
  14023                S2w_Printf("\r\nLoading file successfull\r\n");
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nLoading file succes...">`
   \   00000070   0x.... 0x....      BL       S2w_Printf
  14024          
  14025              return S2W_SUCCESS;
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xBD3E             POP      {R1-R5,PC}       ;; return
  14026          }
  14027          

   \                                 In section .text, align 2, keep-with-next
  14028          UINT8
  14029          AppS2wCmd_ExtFlashInit(UINT8* ptr)
  14030          {
   \                     AppS2wCmd_ExtFlashInit:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
  14031          
  14032              UINT8 status = S2W_SUCCESS;
  14033              UINT8 *p;
  14034          
  14035          	if(s2wappMainTaskCtxt->extFlashCtx.extFlashStatus == EXTFLASH_NOT_INITIALIZED)
   \   00000002   0x....             LDR.N    R1,??DataTable490
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF647 0x30D0      MOVW     R0,#+31696
   \   0000000A   0x2400             MOVS     R4,#+0
   \   0000000C   0x5C40             LDRB     R0,[R0, R1]
   \   0000000E   0xB970             CBNZ.N   R0,??AppS2wCmd_ExtFlashInit_0
  14036          	{
  14037          		if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000010   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_57:
   \   00000014   0x.... 0x....      LDR.W    R5,??DataTable504_1
   \   00000018   0xB128             CBZ.N    R0,??AppS2wCmd_ExtFlashInit_1
  14038          	  	{
  14039          			status = AppS2wParse_Int(p, &spiFlag);
   \   0000001A   0xF105 0x0108      ADD      R1,R5,#+8
   \   0000001E   0x.... 0x....      BL       AppS2wParse_Int
   \   00000022   0x0004             MOVS     R4,R0
  14040          	      	if (status != S2W_SUCCESS)
   \   00000024   0xD103             BNE.N    ??AppS2wCmd_ExtFlashInit_0
  14041          	      	{
  14042          	          	return status;
  14043          	      	}
  14044          	   	}
  14045          		
  14046          		AppExtFlash_Init((GSN_FLASH_SPI_FLAG_T)spiFlag);
   \                     ??AppS2wCmd_ExtFlashInit_1:
   \   00000026   0x68A8             LDR      R0,[R5, #+8]
   \   00000028   0xB2C0             UXTB     R0,R0
   \   0000002A   0x.... 0x....      BL       AppExtFlash_Init
  14047          	}
  14048          	return status;
   \                     ??AppS2wCmd_ExtFlashInit_0:
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
  14049          }
  14050          

   \                                 In section .text, align 2, keep-with-next
  14051          UINT8
  14052          AppS2wCmd_ExtFlashSpiConf(UINT8* ptr)
  14053          {
   \                     AppS2wCmd_ExtFlashSpiConf:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
  14054          	UINT8 status = S2W_SUCCESS;	
   \   00000004   0x2400             MOVS     R4,#+0
  14055          	UINT8 *p;
  14056          	UINT32 spiPin, gpioNumb, muxVal, pulldown;
  14057          
  14058          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000006   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_218:
   \   0000000A   0xB118             CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_0
  14059            	{
  14060              	status = AppS2wParse_Int(p, &spiPin);
   \   0000000C   0x.... 0x....      BL       ?Subroutine53
   \                     ??CrossCallReturnLabel_334:
   \   00000010   0x0004             MOVS     R4,R0
  14061                	if (status != S2W_SUCCESS)
   \   00000012   0xD114             BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
  14062                	{
  14063                    	return status;
  14064                	}
  14065             	}
  14066          
  14067          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_ExtFlashSpiConf_0:
   \   00000014   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_217:
   \   00000018   0xB118             CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_2
  14068            	{
  14069              	status = AppS2wParse_Int(p, &gpioNumb);
   \   0000001A   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_270:
   \   0000001E   0x0004             MOVS     R4,R0
  14070                	if (status != S2W_SUCCESS)
   \   00000020   0xD10D             BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
  14071                	{
  14072                    	return status;
  14073                	}
  14074             	}
  14075          		
  14076          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_ExtFlashSpiConf_2:
   \   00000022   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_216:
   \   00000026   0xB118             CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_3
  14077            	{
  14078              	status = AppS2wParse_Int(p, &muxVal);
   \   00000028   0x.... 0x....      BL       ?Subroutine52
   \                     ??CrossCallReturnLabel_315:
   \   0000002C   0x0004             MOVS     R4,R0
  14079                	if (status != S2W_SUCCESS)
   \   0000002E   0xD106             BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
  14080                	{
  14081                    	return status;
  14082                	}
  14083             	}
  14084          
  14085          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_ExtFlashSpiConf_3:
   \   00000030   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_215:
   \   00000034   0xB130             CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_4
  14086            	{
  14087              	status = AppS2wParse_Int(p, &pulldown);
   \   00000036   0x.... 0x....      BL       ?Subroutine50
   \                     ??CrossCallReturnLabel_256:
   \   0000003A   0x0004             MOVS     R4,R0
  14088                	if (status != S2W_SUCCESS)
   \   0000003C   0xD002             BEQ.N    ??AppS2wCmd_ExtFlashSpiConf_4
  14089                	{
  14090                    	return status;
   \                     ??AppS2wCmd_ExtFlashSpiConf_1:
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0xB006             ADD      SP,SP,#+24
   \   00000042   0xBD70             POP      {R4-R6,PC}       ;; return
  14091                	}
  14092             	}
  14093          	
  14094          	/*	  GPIO Mux enable for SPI Port-1	   */
  14095          	GsnIoMux_Sel(gpioNumb, muxVal);
   \                     ??AppS2wCmd_ExtFlashSpiConf_4:
   \   00000044   0x9901             LDR      R1,[SP, #+4]
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x.... 0x....      BL       GsnIoMux_Sel
  14096          
  14097          	if(pulldown)
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x2800             CMP      R0,#+0
   \   00000050   0x9800             LDR      R0,[SP, #+0]
   \   00000052   0xD002             BEQ.N    ??AppS2wCmd_ExtFlashSpiConf_5
  14098          		GsnIoMux_PullDownEnable (gpioNumb);
   \   00000054   0x.... 0x....      BL       GsnIoMux_PullDownEnable
   \   00000058   0xE001             B.N      ??AppS2wCmd_ExtFlashSpiConf_6
  14099          	else		
  14100          		GsnIoMux_PullDownDisable (gpioNumb);
   \                     ??AppS2wCmd_ExtFlashSpiConf_5:
   \   0000005A   0x.... 0x....      BL       GsnIoMux_PullDownDisable
  14101          
  14102          	if(!muxVal)
   \                     ??AppS2wCmd_ExtFlashSpiConf_6:
   \   0000005E   0x9801             LDR      R0,[SP, #+4]
   \   00000060   0x.... 0x....      LDR.W    R5,??DataTable508
   \   00000064   0xB990             CBNZ.N   R0,??AppS2wCmd_ExtFlashSpiConf_7
  14103          	{
  14104          		/* Use SPI CS pin10 as GPIO to control from driver */
  14105          		GsnGpio_Init((~APP_ALL_GPIO_SET) | (1<<gpioNumb), APP_ALL_GPIO_SET & (~(1<<gpioNumb))); 
   \   00000066   0x9800             LDR      R0,[SP, #+0]
   \   00000068   0x2601             MOVS     R6,#+1
   \   0000006A   0xFA06 0xF000      LSL      R0,R6,R0
   \   0000006E   0x43C2             MVNS     R2,R0
   \   00000070   0x2300             MOVS     R3,#+0
   \   00000072   0x2100             MOVS     R1,#+0
   \   00000074   0x.... 0x....      BL       GsnGpio_Init
  14106          		s2wappMainTaskCtxt->extFlashCtx.spiCsGpio = ((~APP_ALL_GPIO_SET) | (1<<gpioNumb));
   \   00000078   0x682A             LDR      R2,[R5, #+0]
   \   0000007A   0x9800             LDR      R0,[SP, #+0]
   \   0000007C   0xF502 0x42F6      ADD      R2,R2,#+31488
   \   00000080   0x32C8             ADDS     R2,R2,#+200
   \   00000082   0xFA06 0xF000      LSL      R0,R6,R0
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0xE9C2 0x0100      STRD     R0,R1,[R2, #+0]
  14107          	}
  14108          	
  14109          	s2wappMainTaskCtxt->extFlashCtx.spiPinConf |= spiPin;
   \                     ??AppS2wCmd_ExtFlashSpiConf_7:
   \   0000008C   0x6828             LDR      R0,[R5, #+0]
   \   0000008E   0x9B03             LDR      R3,[SP, #+12]
   \   00000090   0xF647 0x31D1      MOVW     R1,#+31697
   \   00000094   0x5C0A             LDRB     R2,[R1, R0]
   \   00000096   0x431A             ORRS     R2,R3,R2
   \   00000098   0x540A             STRB     R2,[R1, R0]
   \   0000009A   0xE7D0             B.N      ??AppS2wCmd_ExtFlashSpiConf_1
  14110          	return status;
  14111          }
  14112          

   \                                 In section .text, align 2, keep-with-next
  14113          UINT8
  14114          AppS2wCmd_ExtFlashWrite(UINT8* ptr)
  14115          {
   \                     AppS2wCmd_ExtFlashWrite:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
  14116          	//UINT32 retVal=0;
  14117          	UINT8 *p;
  14118          	UINT8 status = S2W_SUCCESS;
  14119          
  14120          	writeAddr = 0x00000000;
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable504_1
   \   00000006   0x2400             MOVS     R4,#+0
   \   00000008   0x606C             STR      R4,[R5, #+4]
  14121          
  14122          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   0000000A   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_56:
   \   0000000E   0xB120             CBZ.N    R0,??AppS2wCmd_ExtFlashWrite_0
  14123            	{
  14124              	status = AppS2wParse_Hex(p, &writeAddr);
   \   00000010   0x1D29             ADDS     R1,R5,#+4
   \   00000012   0x.... 0x....      BL       AppS2wParse_Hex
   \   00000016   0x0004             MOVS     R4,R0
  14125                	if (status != S2W_SUCCESS)
   \   00000018   0xD106             BNE.N    ??AppS2wCmd_ExtFlashWrite_1
  14126                	{
  14127                    	return status;
  14128                	}
  14129             	}
  14130          	
  14131          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \                     ??AppS2wCmd_ExtFlashWrite_0:
   \   0000001A   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_55:
   \   0000001E   0xB118             CBZ.N    R0,??AppS2wCmd_ExtFlashWrite_1
  14132            	{
  14133              	status = AppS2wParse_Int(p, &extFlashFileSize);
   \   00000020   0x4629             MOV      R1,R5
   \   00000022   0x.... 0x....      BL       AppS2wParse_Int
   \   00000026   0x4604             MOV      R4,R0
  14134                	if (status != S2W_SUCCESS)
  14135                	{
  14136                    	return status;
  14137                	}
  14138             	}
  14139          
  14140          	return status;
   \                     ??AppS2wCmd_ExtFlashWrite_1:
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
  14141          }
  14142          
  14143          

   \                                 In section .text, align 2, keep-with-next
  14144          UINT8
  14145          AppS2wCmd_ExtFlashRead(UINT8* ptr)
  14146          {
   \                     AppS2wCmd_ExtFlashRead:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
   \   00000004   0xB085             SUB      SP,SP,#+20
  14147          	UINT8 status = S2W_SUCCESS;	
  14148          	UINT8 *p;
  14149          	UINT32 readAddr;
  14150          	UINT32 i=0, dataLen;
  14151          	//GSN_SPI_CONFIG_T *spiConfig;
  14152          	//GSN_SPI_HANDLE_T *spiHandle;
  14153          	//spiConfig = &s2wappMainTaskCtxt->extFlashCtx.spiConfig;
  14154          	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
  14155          
  14156          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000006   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_214:
   \   0000000A   0xB330             CBZ.N    R0,??AppS2wCmd_ExtFlashRead_0
  14157            	{
  14158              	status = AppS2wParse_Hex(p, &readAddr);
   \   0000000C   0xA904             ADD      R1,SP,#+16
   \   0000000E   0x.... 0x....      BL       AppS2wParse_Hex
   \   00000012   0xEA5F 0x0800      MOVS     R8,R0
  14159                	if (status != S2W_SUCCESS)
   \   00000016   0xD139             BNE.N    ??AppS2wCmd_ExtFlashRead_1
  14160                	{
  14161                    	return status;
  14162                	}
  14163             	}
  14164             	else
  14165             	{
  14166             	    return S2W_EINVAL;
  14167             	}
  14168          		
  14169          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000018   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_213:
   \   0000001C   0xB1E8             CBZ.N    R0,??AppS2wCmd_ExtFlashRead_0
  14170            	{
  14171              	status = AppS2wParse_Int(p, &dataLen);
   \   0000001E   0x.... 0x....      BL       ?Subroutine53
   \                     ??CrossCallReturnLabel_333:
   \   00000022   0xEA5F 0x0800      MOVS     R8,R0
  14172                	if (status != S2W_SUCCESS)
   \   00000026   0xD131             BNE.N    ??AppS2wCmd_ExtFlashRead_1
  14173                	{
  14174                    	return status;
  14175                	}
  14176             	}
  14177             	else
  14178             	{
  14179             	    return S2W_EINVAL;
  14180             	}
  14181          
  14182                  S2w_Printf("\r\n");
   \   00000028   0x.... 0x....      BL       ?Subroutine91
  14183          
  14184          
  14185          	UINT32 rwSize = 0;
   \                     ??CrossCallReturnLabel_487:
   \   0000002C   0x....             ADR.N    R5,??DataTable496_1  ;; 0x25, 0x63, 0x00, 0x00
   \   0000002E   0x.... 0x....      LDR.W    R6,??DataTable510
  14186          	while(dataLen)
   \                     ??AppS2wCmd_ExtFlashRead_2:
   \   00000032   0x9803             LDR      R0,[SP, #+12]
   \   00000034   0xB350             CBZ.N    R0,??AppS2wCmd_ExtFlashRead_1
  14187                {
  14188                  memset(readBuffer, 0, sizeof(readBuffer));
   \   00000036   0xF44F 0x6280      MOV      R2,#+1024
   \   0000003A   0x.... 0x....      BL       ??Subroutine19_0
  14189                  if(dataLen<1024)
   \                     ??CrossCallReturnLabel_40:
   \   0000003E   0x9F03             LDR      R7,[SP, #+12]
   \   00000040   0xF5B7 0x6F80      CMP      R7,#+1024
   \   00000044   0xBF88             IT       HI 
   \   00000046   0xF44F 0x6780      MOVHI    R7,#+1024
  14190                  {
  14191                    rwSize = dataLen;
  14192                  }
  14193                  if(dataLen>=1024)
  14194                  {
  14195                    rwSize = 1024;
  14196                  }
  14197          		if(spiFlag)
   \   0000004A   0x.... 0x....      BL       ?Subroutine73
   \                     ??CrossCallReturnLabel_433:
   \   0000004E   0xB131             CBZ.N    R1,??AppS2wCmd_ExtFlashRead_3
  14198          		{
  14199          			GsnExtFlash_Read(&s2wappMainTaskCtxt->extFlashCtx,rwSize,readAddr,readBuffer,GSN_FLASH_SPI_DMA, NULL, NULL); //GSN_FLASH_SPI_DMA , GSN_FLASH_SPI_POLL
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0x9102             STR      R1,[SP, #+8]
   \   00000054   0x9101             STR      R1,[SP, #+4]
   \   00000056   0x2101             MOVS     R1,#+1
   \   00000058   0xE003             B.N      ??AppS2wCmd_ExtFlashRead_4
  14200          		}
   \                     ??AppS2wCmd_ExtFlashRead_0:
   \   0000005A   0x2002             MOVS     R0,#+2
   \   0000005C   0xE017             B.N      ??AppS2wCmd_ExtFlashRead_5
  14201          		else
  14202          		{			
  14203          			GsnExtFlash_Read(&s2wappMainTaskCtxt->extFlashCtx,rwSize,readAddr,readBuffer,GSN_FLASH_SPI_POLL, NULL, NULL); //GSN_FLASH_SPI_DMA , GSN_FLASH_SPI_POLL
   \                     ??AppS2wCmd_ExtFlashRead_3:
   \   0000005E   0x9102             STR      R1,[SP, #+8]
   \   00000060   0x9101             STR      R1,[SP, #+4]
   \                     ??AppS2wCmd_ExtFlashRead_4:
   \   00000062   0x9100             STR      R1,[SP, #+0]
   \   00000064   0x4633             MOV      R3,R6
   \   00000066   0x9A04             LDR      R2,[SP, #+16]
   \   00000068   0x4639             MOV      R1,R7
   \   0000006A   0x.... 0x....      BL       GsnExtFlash_Read
  14204          		}
  14205                  dataLen -= rwSize;
   \   0000006E   0x9803             LDR      R0,[SP, #+12]
   \   00000070   0x1BC0             SUBS     R0,R0,R7
   \   00000072   0x9003             STR      R0,[SP, #+12]
  14206                  readAddr += rwSize;
  14207                
  14208          		for(i=0;i<rwSize;i++)
   \   00000074   0x2400             MOVS     R4,#+0
   \   00000076   0x9804             LDR      R0,[SP, #+16]
   \   00000078   0x1838             ADDS     R0,R7,R0
   \   0000007A   0x9004             STR      R0,[SP, #+16]
   \                     ??AppS2wCmd_ExtFlashRead_6:
   \   0000007C   0x42BC             CMP      R4,R7
   \   0000007E   0xD2D8             BCS.N    ??AppS2wCmd_ExtFlashRead_2
  14209          		{
  14210          			S2w_Printf("%c",readBuffer[i]);
   \   00000080   0x5DA1             LDRB     R1,[R4, R6]
   \   00000082   0x4628             MOV      R0,R5
   \   00000084   0x.... 0x....      BL       S2w_Printf
  14211          		}         
   \   00000088   0x1C64             ADDS     R4,R4,#+1
   \   0000008A   0xE7F7             B.N      ??AppS2wCmd_ExtFlashRead_6
  14212                }
  14213          
  14214          	return status;
   \                     ??AppS2wCmd_ExtFlashRead_1:
   \   0000008C   0x4640             MOV      R0,R8
   \                     ??AppS2wCmd_ExtFlashRead_5:
   \   0000008E   0xB006             ADD      SP,SP,#+24
   \   00000090   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
  14215          
  14216          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine73:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable508
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable504_1
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0x6889             LDR      R1,[R1, #+8]
   \   0000000C   0xF500 0x40EC      ADD      R0,R0,#+30208
   \   00000010   0x3088             ADDS     R0,R0,#+136
   \   00000012   0x4770             BX       LR
  14217          

   \                                 In section .text, align 2, keep-with-next
  14218          UINT8
  14219          AppS2wCmd_ExtFlashErase(UINT8* ptr)
  14220          {
   \                     AppS2wCmd_ExtFlashErase:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
  14221          	UINT8 status = S2W_SUCCESS;
  14222                  UINT8 *p;
  14223          	UINT32 eraseSectorAddr;
  14224          	//GSN_SPI_HANDLE_T *spiHandle;
  14225          	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
  14226          
  14227          	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000004   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_203:
   \   00000008   0xB180             CBZ.N    R0,??AppS2wCmd_ExtFlashErase_0
  14228            	{
  14229              	status = AppS2wParse_Hex(p, &eraseSectorAddr);
   \   0000000A   0xA901             ADD      R1,SP,#+4
   \   0000000C   0x.... 0x....      BL       AppS2wParse_Hex
   \   00000010   0x0004             MOVS     R4,R0
  14230                	if (status != S2W_SUCCESS)
   \   00000012   0xD108             BNE.N    ??AppS2wCmd_ExtFlashErase_1
  14231                	{
  14232                    	return status;
  14233                	}
  14234             	}
  14235             	else
  14236             	{
  14237             	    return S2W_EINVAL;
  14238             	}
  14239          	
  14240          	if(spiFlag)
   \   00000014   0x.... 0x....      BL       ?Subroutine73
   \                     ??CrossCallReturnLabel_434:
   \   00000018   0xB951             CBNZ.N   R1,??AppS2wCmd_ExtFlashErase_2
  14241          	{
  14242          		GsnExtFlash_Erase(&s2wappMainTaskCtxt->extFlashCtx,eraseSectorAddr,GSN_FLASH_SPI_DMA,NULL,NULL);
  14243          	}
  14244          	else
  14245          	{
  14246          		GsnExtFlash_Erase(&s2wappMainTaskCtxt->extFlashCtx,eraseSectorAddr,GSN_FLASH_SPI_POLL,NULL,NULL);
   \   0000001A   0x9100             STR      R1,[SP, #+0]
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x2200             MOVS     R2,#+0
   \                     ??AppS2wCmd_ExtFlashErase_3:
   \   00000020   0x9901             LDR      R1,[SP, #+4]
   \   00000022   0x.... 0x....      BL       GsnExtFlash_Erase
  14247          	}
  14248          	
  14249          	return status;
   \                     ??AppS2wCmd_ExtFlashErase_1:
   \   00000026   0x4620             MOV      R0,R4
   \                     ??AppS2wCmd_ExtFlashErase_4:
   \   00000028   0xB004             ADD      SP,SP,#+16
   \   0000002A   0xBD10             POP      {R4,PC}          ;; return
   \                     ??AppS2wCmd_ExtFlashErase_0:
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xE7FB             B.N      ??AppS2wCmd_ExtFlashErase_4
   \                     ??AppS2wCmd_ExtFlashErase_2:
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x9100             STR      R1,[SP, #+0]
   \   00000034   0x2300             MOVS     R3,#+0
   \   00000036   0x2201             MOVS     R2,#+1
   \   00000038   0xE7F2             B.N      ??AppS2wCmd_ExtFlashErase_3
  14250          }
  14251          

   \                                 In section .text, align 2, keep-with-next
  14252          UINT8
  14253          AppS2wCmd_ExtFlashChipErase(UINT8* ptr)
  14254          {
   \                     AppS2wCmd_ExtFlashChipErase:
   \   00000000   0xB580             PUSH     {R7,LR}
  14255          	UINT8 status = S2W_SUCCESS;
  14256          
  14257          	//GSN_SPI_HANDLE_T *spiHandle;
  14258          	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
  14259          
  14260          	if(spiFlag)
   \   00000002   0x.... 0x....      BL       ?Subroutine73
   \                     ??CrossCallReturnLabel_435:
   \   00000006   0xB119             CBZ.N    R1,??AppS2wCmd_ExtFlashChipErase_0
  14261          	{
  14262          		GsnExtFlash_ChipErase(&s2wappMainTaskCtxt->extFlashCtx,GSN_FLASH_SPI_DMA,NULL,NULL);
   \   00000008   0x2300             MOVS     R3,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0xE001             B.N      ??AppS2wCmd_ExtFlashChipErase_1
  14263          	}
  14264          	else
  14265          	{
  14266          		GsnExtFlash_ChipErase(&s2wappMainTaskCtxt->extFlashCtx,GSN_FLASH_SPI_POLL,NULL,NULL);
   \                     ??AppS2wCmd_ExtFlashChipErase_0:
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x2200             MOVS     R2,#+0
   \                     ??AppS2wCmd_ExtFlashChipErase_1:
   \   00000014   0x.... 0x....      BL       GsnExtFlash_ChipErase
  14267          	}
  14268          	return status;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
  14269          }
  14270          #endif
  14271          
  14272          

   \                                 In section .text, align 2, keep-with-next
  14273          UINT8
  14274          S2wRateValidation(UINT32 value)
  14275          {
  14276          	 if((value == GSN_MAC_RATE_1MBPS) || (value == GSN_MAC_RATE_2MBPS)|| (value == GSN_MAC_RATE_5_5MBPS)||
  14277          	    (value == GSN_MAC_RATE_6_5MBPS)||(value == GSN_MAC_RATE_6MBPS) ||(value == GSN_MAC_RATE_9MBPS) ||
  14278          	    (value == GSN_MAC_RATE_11MBPS) ||(value == GSN_MAC_RATE_12MBPS) || (value == GSN_MAC_RATE_13MBPS) ||
  14279          	    (value == GSN_MAC_RATE_18MBPS) || (value == GSN_MAC_RATE_19_5MBPS) ||(value == GSN_MAC_RATE_24MBPS) ||
  14280                  (value == GSN_MAC_RATE_26MBPS) || (value == GSN_MAC_RATE_36MBPS) || (value == GSN_MAC_RATE_39MBPS) ||
  14281                  (value == GSN_MAC_RATE_48MBPS)|| (value == GSN_MAC_RATE_52MBPS) || (value == GSN_MAC_RATE_54MBPS) ||
  14282          	    (value == GSN_MAC_RATE_58_5MBPS) || (value == GSN_MAC_RATE_65MBPS))
   \                     S2wRateValidation:
   \   00000000   0x2802             CMP      R0,#+2
   \   00000002   0xBF18             IT       NE 
   \   00000004   0x2804             CMPNE    R0,#+4
   \   00000006   0xD023             BEQ.N    ??S2wRateValidation_0
   \   00000008   0x280B             CMP      R0,#+11
   \   0000000A   0xBF18             IT       NE 
   \   0000000C   0x280D             CMPNE    R0,#+13
   \   0000000E   0xD01F             BEQ.N    ??S2wRateValidation_0
   \   00000010   0x280C             CMP      R0,#+12
   \   00000012   0xBF18             IT       NE 
   \   00000014   0x2812             CMPNE    R0,#+18
   \   00000016   0xD01B             BEQ.N    ??S2wRateValidation_0
   \   00000018   0x2816             CMP      R0,#+22
   \   0000001A   0xBF18             IT       NE 
   \   0000001C   0x2818             CMPNE    R0,#+24
   \   0000001E   0xD017             BEQ.N    ??S2wRateValidation_0
   \   00000020   0x281A             CMP      R0,#+26
   \   00000022   0xBF18             IT       NE 
   \   00000024   0x2824             CMPNE    R0,#+36
   \   00000026   0xD013             BEQ.N    ??S2wRateValidation_0
   \   00000028   0x2827             CMP      R0,#+39
   \   0000002A   0xBF18             IT       NE 
   \   0000002C   0x2830             CMPNE    R0,#+48
   \   0000002E   0xD00F             BEQ.N    ??S2wRateValidation_0
   \   00000030   0x2834             CMP      R0,#+52
   \   00000032   0xBF18             IT       NE 
   \   00000034   0x2848             CMPNE    R0,#+72
   \   00000036   0xD00B             BEQ.N    ??S2wRateValidation_0
   \   00000038   0x284E             CMP      R0,#+78
   \   0000003A   0xBF18             IT       NE 
   \   0000003C   0x2860             CMPNE    R0,#+96
   \   0000003E   0xD007             BEQ.N    ??S2wRateValidation_0
   \   00000040   0x2868             CMP      R0,#+104
   \   00000042   0xBF18             IT       NE 
   \   00000044   0x286C             CMPNE    R0,#+108
   \   00000046   0xD003             BEQ.N    ??S2wRateValidation_0
   \   00000048   0x2875             CMP      R0,#+117
   \   0000004A   0xBF18             IT       NE 
   \   0000004C   0x2882             CMPNE    R0,#+130
   \   0000004E   0xD101             BNE.N    ??S2wRateValidation_1
  14283          	 {
  14284          		  return 0;
   \                     ??S2wRateValidation_0:
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4770             BX       LR
  14285          	 }
  14286          	  return 1;
   \                     ??S2wRateValidation_1:
   \   00000054   0x2001             MOVS     R0,#+1
   \   00000056   0x4770             BX       LR               ;; return
  14287          }
  14288          
  14289          #ifdef S2W_COAP_SUPPORT

   \                                 In section .text, align 2, keep-with-next
  14290          PRIVATE UINT8
  14291          AppS2wCmd_CoapClose(UINT8* ptr)
  14292          {
   \                     AppS2wCmd_CoapClose:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
  14293          	UINT8 cid;
  14294                  UINT8 *p;
  14295          	GSN_COAP_CONN_PARAMS_T * coapConnParams;
  14296          	GSN_COAP_CONTEXT_T * coapContext;
  14297          	// parse for cid
  14298          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine35
  14299          	if(!p)
   \                     ??CrossCallReturnLabel_160:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapClose_0
  14300          	{
  14301          		return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD76             POP      {R1,R2,R4-R6,PC}
  14302          	}
  14303          	cid = AppS2w_CidValidate(*p);
   \                     ??AppS2wCmd_CoapClose_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine101
   \                     ??CrossCallReturnLabel_516:
   \   00000012   0x4604             MOV      R4,R0
  14304              if(cid == INVALID_CID)
   \   00000014   0x4625             MOV      R5,R4
   \   00000016   0x2DFF             CMP      R5,#+255
   \   00000018   0xD101             BNE.N    ??AppS2wCmd_CoapClose_1
  14305                  return S2W_EBADCID;
   \   0000001A   0x2005             MOVS     R0,#+5
   \   0000001C   0xBD76             POP      {R1,R2,R4-R6,PC}
  14306          
  14307              coapContext = AppS2wHal_CoapHandleGet(cid);
   \                     ??AppS2wCmd_CoapClose_1:
   \   0000001E   0x.... 0x....      BL       AppS2wHal_CoapHandleGet
   \   00000022   0x4606             MOV      R6,R0
  14308              coapConnParams = AppS2wHal_CoapParamsGet(cid);
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0x.... 0x....      BL       AppS2wHal_CoapParamsGet
   \   0000002A   0x4604             MOV      R4,R0
  14309          
  14310          	GsnCoap_DeInit(coapContext);
   \   0000002C   0x4630             MOV      R0,R6
   \   0000002E   0x.... 0x....      BL       GsnCoap_DeInit
  14311                  coapContext = NULL;
  14312          	s2wCidList[cid].s2wUsrCloseFlag = 1;
   \   00000032   0xF44F 0x7094      MOV      R0,#+296
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable515
   \   0000003A   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0xF880 0x1090      STRB     R1,[R0, #+144]
  14313          	s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000044   0xF04F 0x31FF      MOV      R1,#-1
   \   00000048   0x61C1             STR      R1,[R0, #+28]
  14314          
  14315          	if(coapConnParams)
   \   0000004A   0xB114             CBZ.N    R4,??AppS2wCmd_CoapClose_2
  14316          	{
  14317          		gsn_free(coapConnParams);
   \   0000004C   0x4620             MOV      R0,R4
   \   0000004E   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14318          		coapConnParams = NULL;
  14319          	}
  14320              return S2W_SUCCESS;
   \                     ??AppS2wCmd_CoapClose_2:
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
  14321          }
  14322          

   \                                 In section .text, align 2, keep-with-next
  14323          PRIVATE UINT8
  14324          AppS2wCmd_CoapOpen(UINT8* ptr)
  14325          {
   \                     AppS2wCmd_CoapOpen:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
  14326          	//S2w_Printf("AppS2wCmd_CoapOpen \r\n");
  14327          	// parse the ptr for the parameters
  14328          	// if dtls is set to 1, then do dtls connection
  14329          	// else create coap context and return cid
  14330          	UINT8 *p,  status;
  14331          	UINT32 dtlsflag;
  14332          	UINT8 cid;
  14333          	GSN_COAP_CONN_PARAMS_T * connParams;
  14334          	GSN_COAP_CONTEXT_T * coapContext;
  14335          
  14336          
  14337          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine35
  14338              if (!p)
   \                     ??CrossCallReturnLabel_159:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapOpen_0
  14339              {
  14340                  status = S2W_EINVAL;
  14341                  return status;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD76             POP      {R1,R2,R4-R6,PC}
  14342              }
  14343          
  14344              /* dtls flag */
  14345              AppS2wParse_Int(p, &dtlsflag);
   \                     ??AppS2wCmd_CoapOpen_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine51
  14346              if(dtlsflag == 1)
   \                     ??CrossCallReturnLabel_269:
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x2801             CMP      R0,#+1
   \   00000016   0xD02A             BEQ.N    ??AppS2wCmd_CoapOpen_1
  14347              {
  14348              	// parse the input string further
  14349              }
  14350              else
  14351              {
  14352              	// open a coap context and return cid
  14353              	coapContext = GsnCoap_Init(NULL);
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       GsnCoap_Init
   \   0000001E   0x4606             MOV      R6,R0
  14354          		cid = AppS2wHal_CidGet();
   \   00000020   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000024   0x4604             MOV      R4,R0
  14355          	    if (cid == INVALID_CID)
   \   00000026   0x2CFF             CMP      R4,#+255
   \   00000028   0xD101             BNE.N    ??AppS2wCmd_CoapOpen_2
  14356          	    {
  14357          	            return S2W_ENCID;
   \   0000002A   0x2004             MOVS     R0,#+4
   \   0000002C   0xBD76             POP      {R1,R2,R4-R6,PC}
  14358          	    }
  14359          		s2wCidList[cid].coapContext =  coapContext;
   \                     ??AppS2wCmd_CoapOpen_2:
   \   0000002E   0xF44F 0x7094      MOV      R0,#+296
   \   00000032   0x4360             MULS     R0,R0,R4
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable515
   \   00000038   0x1845             ADDS     R5,R0,R1
   \   0000003A   0xF8C5 0x611C      STR      R6,[R5, #+284]
  14360          		s2wCidList[cid].sd = coapContext->sockfd;
   \   0000003E   0x69B2             LDR      R2,[R6, #+24]
   \   00000040   0x61EA             STR      R2,[R5, #+28]
  14361          	    s2wCidList[cid].conType = UDP;
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x5442             STRB     R2,[R0, R1]
  14362          		s2wCidList[cid].serverCid = INVALID_CID;
   \   00000046   0x20FF             MOVS     R0,#+255
   \   00000048   0xF885 0x002E      STRB     R0,[R5, #+46]
  14363          	    s2wCidList[cid].localPort = 0;
  14364          		//S2w_Printf("sockfd = %d\r\n",coapContext->sockfd);
  14365          		//S2w_Printf("s2wCidList[cid] coapContext sockfd = %d\r\n",s2wCidList[cid].coapContext->sockfd);
  14366          
  14367          		connParams = (GSN_COAP_CONN_PARAMS_T*) gsn_malloc(sizeof(GSN_COAP_CONN_PARAMS_T));
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x8068             STRH     R0,[R5, #+2]
   \   00000052   0xF643 0x011F      MOVW     R1,#+14367
   \   00000056   0x2024             MOVS     R0,#+36
   \   00000058   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000005C   0x.... 0x....      BL       ?Subroutine18
  14368          		memset(connParams,0,sizeof(GSN_COAP_CONN_PARAMS_T));
  14369          		s2wCidList[cid].coapConnParams = connParams;
   \                     ??CrossCallReturnLabel_39:
   \   00000060   0xF8C5 0x6120      STR      R6,[R5, #+288]
  14370              	S2w_Printf("\r\n%x",cid);
   \   00000064   0x4621             MOV      R1,R4
   \   00000066   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%x">`
   \   0000006A   0x.... 0x....      BL       S2w_Printf
  14371          
  14372              }
  14373          	return S2W_SUCCESS;
   \                     ??AppS2wCmd_CoapOpen_1:
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
  14374          }
  14375          
  14376          

   \                                 In section .text, align 2, keep-with-next
  14377          PRIVATE UINT8
  14378          AppS2wCmd_CoapSend(UINT8* ptr)
  14379          {
   \                     AppS2wCmd_CoapSend:
   \   00000000   0xE92D 0x41F1      PUSH     {R0,R4-R8,LR}
  14380          	UINT8 *p;
  14381          	UINT32 payloadSize, responseTimeout,len;
  14382              UINT8 cid;
  14383          	GSN_COAP_CONTEXT_T * coapContext = NULL;
  14384          	GSN_COAP_CONN_PARAMS_T* coapConnParams;
  14385          	S2W_COAP_OPTION_T * start = optionHead;
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable515_1
   \   00000008   0x6804             LDR      R4,[R0, #+0]
   \   0000000A   0xF2AD 0x5D84      SUBW     SP,SP,#+1412
  14386          	char respBuf[COAP_MAX_PDU_SIZE];
  14387          	INT16 numBytes;
  14388          	unsigned int optionLen;
  14389          	memset(respBuf,0,COAP_MAX_PDU_SIZE);
   \   0000000E   0xF44F 0x62AF      MOV      R2,#+1400
   \   00000012   0x.... 0x....      BL       ?Subroutine16
  14390          
  14391          	// parse for cid
  14392          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_27:
   \   00000016   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_184:
   \   0000001A   0x0001             MOVS     R1,R0
  14393          	if(!p)
   \   0000001C   0xD00F             BEQ.N    ??AppS2wCmd_CoapSend_0
  14394          	{
  14395          		return S2W_EINVAL;
  14396          	}
  14397          	cid = AppS2w_CidValidate(*p);
   \   0000001E   0x.... 0x....      BL       ?Subroutine101
   \                     ??CrossCallReturnLabel_515:
   \   00000022   0x4606             MOV      R6,R0
  14398              if(cid == INVALID_CID)
   \   00000024   0x2EFF             CMP      R6,#+255
   \   00000026   0xBF08             IT       EQ 
   \   00000028   0x2005             MOVEQ    R0,#+5
  14399                  return S2W_EBADCID;
   \   0000002A   0xD079             BEQ.N    ??AppS2wCmd_CoapSend_1
  14400          
  14401              coapContext = AppS2wHal_CoapHandleGet(cid);
   \   0000002C   0x.... 0x....      BL       AppS2wHal_CoapHandleGet
   \   00000030   0x4605             MOV      R5,R0
  14402              coapConnParams = AppS2wHal_CoapParamsGet(cid);
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       AppS2wHal_CoapParamsGet
   \   00000038   0x.... 0x....      BL       ?Subroutine18
  14403          
  14404          	memset(coapConnParams,0,sizeof(GSN_COAP_CONN_PARAMS_T)); // memset the connection params
  14405          	if(coapContext == NULL)
   \                     ??CrossCallReturnLabel_38:
   \   0000003C   0x2D00             CMP      R5,#+0
   \                     ??AppS2wCmd_CoapSend_0:
   \   0000003E   0xD06E             BEQ.N    ??AppS2wCmd_CoapSend_2
  14406          	{
  14407          		return S2W_EINVAL;
  14408          	}
  14409          
  14410          	// parse for coap uri
  14411          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000040   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_183:
   \   00000044   0xEA5F 0x0800      MOVS     R8,R0
  14412              if(p)
   \   00000048   0xD00E             BEQ.N    ??AppS2wCmd_CoapSend_3
  14413              {
  14414          	    //S2w_Printf("uri length = %d", strlen(p));
  14415          	    //S2w_Printf("uri  = %s", p);
  14416          	    len = strlen((const char *)p);
   \   0000004A   0x.... 0x....      BL       strlen
   \   0000004E   0x4607             MOV      R7,R0
  14417          
  14418          	    coapConnParams->uri = (unsigned char*) gsn_malloc((sizeof(unsigned char)*len)+1);
   \   00000050   0x2200             MOVS     R2,#+0
   \   00000052   0xF643 0x0152      MOVW     R1,#+14418
   \   00000056   0x1C78             ADDS     R0,R7,#+1
   \   00000058   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000005C   0x6030             STR      R0,[R6, #+0]
  14419          	    memcpy(coapConnParams->uri,p, len);
   \   0000005E   0x463A             MOV      R2,R7
   \   00000060   0x4641             MOV      R1,R8
   \   00000062   0x.... 0x....      BL       memcpy
  14420          	    coapConnParams->uriLength = len;
   \   00000066   0x6077             STR      R7,[R6, #+4]
  14421          	    //S2w_Printf("coapConnParams.uri  = %s", coapConnParams->uri);
  14422              }
  14423          
  14424          	// parse for connection method
  14425          
  14426          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_CoapSend_3:
   \   00000068   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_182:
   \   0000006C   0x0007             MOVS     R7,R0
  14427              if(p)
   \   0000006E   0xD00D             BEQ.N    ??AppS2wCmd_CoapSend_4
  14428              {
  14429              	if(strcmp((const char*)p, COAP_GET) == 0)
   \   00000070   0x....             ADR.N    R1,??DataTable500  ;; "GET"
   \   00000072   0x.... 0x....      BL       strcmp
   \   00000076   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapSend_5
  14430              	{
  14431              		coapConnParams->method = GSN_COAP_REQUEST_GET;
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0x7530             STRB     R0,[R6, #+20]
  14432              	}
  14433              	if(strcmp((const char*)p, COAP_POST) == 0)
   \                     ??AppS2wCmd_CoapSend_5:
   \   0000007C   0x4638             MOV      R0,R7
   \   0000007E   0x.... 0x....      ADR.W    R1,`?<Constant "POST">`
   \   00000082   0x.... 0x....      BL       strcmp
   \   00000086   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapSend_4
  14434              	{
  14435              		coapConnParams->method = GSN_COAP_REQUEST_POST;
   \   00000088   0x2002             MOVS     R0,#+2
   \   0000008A   0x7530             STRB     R0,[R6, #+20]
  14436              	}
  14437              }
  14438          
  14439          	// parse for connection type
  14440          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_CoapSend_4:
   \   0000008C   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_181:
   \   00000090   0x0007             MOVS     R7,R0
  14441              if(p)
   \   00000092   0xD00B             BEQ.N    ??AppS2wCmd_CoapSend_6
  14442              {
  14443          		if(strcmp((const char*)p, COAP_CON) == 0)
   \   00000094   0x....             ADR.N    R1,??DataTable500_2  ;; "CON"
   \   00000096   0x.... 0x....      BL       strcmp
   \   0000009A   0xB900             CBNZ.N   R0,??AppS2wCmd_CoapSend_7
  14444          		{
  14445          			coapConnParams->type = GSN_COAP_MESSAGE_CON;
   \   0000009C   0x7570             STRB     R0,[R6, #+21]
  14446          		}
  14447          		if(strcmp((const char*)p, COAP_NON) == 0)
   \                     ??AppS2wCmd_CoapSend_7:
   \   0000009E   0x....             ADR.N    R1,??DataTable500_3  ;; "NON"
   \   000000A0   0x4638             MOV      R0,R7
   \   000000A2   0x.... 0x....      BL       strcmp
   \   000000A6   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapSend_6
  14448          		{
  14449          			coapConnParams->type = GSN_COAP_MESSAGE_NON;
   \   000000A8   0x2001             MOVS     R0,#+1
   \   000000AA   0x7570             STRB     R0,[R6, #+21]
  14450          		}
  14451              }
  14452          
  14453          
  14454          	// parse for response timeout
  14455          	p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_CoapSend_6:
   \   000000AC   0x.... 0x....      BL       ?Subroutine36
  14456              if(p)
   \                     ??CrossCallReturnLabel_180:
   \   000000B0   0xB130             CBZ.N    R0,??AppS2wCmd_CoapSend_8
  14457              {
  14458          		AppS2wParse_Int(p, &responseTimeout);
   \   000000B2   0x.... 0x....      BL       ?Subroutine51
  14459          		if(responseTimeout > COAP_MAX_RESPONSE_TIMEOUT)
   \                     ??CrossCallReturnLabel_268:
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \   000000B8   0x283D             CMP      R0,#+61
   \   000000BA   0xBF28             IT       CS 
   \   000000BC   0x203C             MOVCS    R0,#+60
  14460          			coapConnParams->responseTimeout = COAP_MAX_RESPONSE_TIMEOUT;
  14461          		else
  14462          			coapConnParams->responseTimeout = responseTimeout;
   \   000000BE   0x61B0             STR      R0,[R6, #+24]
  14463              }
  14464              coapConnParams->responseBuffer = respBuf;
   \                     ??AppS2wCmd_CoapSend_8:
   \   000000C0   0xA802             ADD      R0,SP,#+8
   \   000000C2   0x61F0             STR      R0,[R6, #+28]
  14465              coapConnParams->responseBufLen = COAP_MAX_PDU_SIZE;
   \   000000C4   0xF44F 0x60AF      MOV      R0,#+1400
   \   000000C8   0x6230             STR      R0,[R6, #+32]
   \   000000CA   0xE008             B.N      ??AppS2wCmd_CoapSend_9
  14466          
  14467              // add all the options
  14468              while(start != NULL)
  14469              {
  14470              	optionLen = strlen((const char*)start->optionValue);
   \                     ??AppS2wCmd_CoapSend_10:
   \   000000CC   0x6867             LDR      R7,[R4, #+4]
   \   000000CE   0x.... 0x....      BL       ??Subroutine69_0
  14471              	GsnCoap_SetOption(start->optionKey,(unsigned char*)start->optionValue,optionLen);
   \                     ??CrossCallReturnLabel_416:
   \   000000D2   0x4602             MOV      R2,R0
   \   000000D4   0x7820             LDRB     R0,[R4, #+0]
   \   000000D6   0x4639             MOV      R1,R7
   \   000000D8   0x.... 0x....      BL       GsnCoap_SetOption
  14472              	start = start->next;
   \   000000DC   0x68A4             LDR      R4,[R4, #+8]
  14473              }
   \                     ??AppS2wCmd_CoapSend_9:
   \   000000DE   0x2C00             CMP      R4,#+0
   \   000000E0   0xD1F4             BNE.N    ??AppS2wCmd_CoapSend_10
  14474          	// parse for payload size
  14475          	p = AppS2wParse_NextParamGet(&ptr);
   \   000000E2   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_179:
   \   000000E6   0x0001             MOVS     R1,R0
  14476              if(p)
   \   000000E8   0xD01B             BEQ.N    ??AppS2wCmd_CoapSend_11
  14477              {
  14478          		AppS2wParse_Int(p, &payloadSize);
   \   000000EA   0x.... 0x....      BL       ?Subroutine52
  14479          
  14480          		coapConnParams->payloadSize = payloadSize;
   \                     ??CrossCallReturnLabel_314:
   \   000000EE   0x9801             LDR      R0,[SP, #+4]
   \   000000F0   0x6130             STR      R0,[R6, #+16]
  14481          		// parse for payload type
  14482          		p = AppS2wParse_NextParamGet(&ptr);
   \   000000F2   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_178:
   \   000000F6   0x0005             MOVS     R5,R0
  14483          		if(p)
   \   000000F8   0xD011             BEQ.N    ??AppS2wCmd_CoapSend_2
  14484          		{
  14485          			len = strlen((const char*)p);
   \   000000FA   0x.... 0x....      BL       strlen
   \   000000FE   0x4604             MOV      R4,R0
  14486          			coapConnParams->payloadType = (unsigned char*) gsn_malloc(sizeof(unsigned char)*len+1);
   \   00000100   0x2200             MOVS     R2,#+0
   \   00000102   0xF643 0x0196      MOVW     R1,#+14486
   \   00000106   0x1C60             ADDS     R0,R4,#+1
   \   00000108   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000010C   0x60F0             STR      R0,[R6, #+12]
  14487          			memcpy(coapConnParams->payloadType,p,len);
   \   0000010E   0x4622             MOV      R2,R4
   \   00000110   0x4629             MOV      R1,R5
   \   00000112   0x.... 0x....      BL       memcpy
  14488          			coapConnParams->payloadType[len] = '\0';
   \   00000116   0x68F0             LDR      R0,[R6, #+12]
   \   00000118   0x2100             MOVS     R1,#+0
   \   0000011A   0x5421             STRB     R1,[R4, R0]
   \   0000011C   0xE017             B.N      ??AppS2wCmd_CoapSend_12
  14489          		}
  14490          		else
  14491          		{
  14492          			return S2W_EINVAL;
   \                     ??AppS2wCmd_CoapSend_2:
   \   0000011E   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_CoapSend_1:
   \   00000120   0xE016             B.N      ??AppS2wCmd_CoapSend_13
  14493          		}
  14494              }
  14495              else
  14496              {
  14497              	numBytes = GsnCoap_Send_And_Recieve(coapContext,coapConnParams);
   \                     ??AppS2wCmd_CoapSend_11:
   \   00000122   0x4631             MOV      R1,R6
   \   00000124   0x4628             MOV      R0,R5
   \   00000126   0x.... 0x....      BL       GsnCoap_Send_And_Recieve
   \   0000012A   0xB204             SXTH     R4,R0
  14498          
  14499              	if(numBytes > 0)
   \   0000012C   0x2C01             CMP      R4,#+1
   \   0000012E   0xDB08             BLT.N    ??AppS2wCmd_CoapSend_14
  14500              	{
  14501              		//S2w_Printf("\r\n%d",numBytes);
  14502              		respBuf[numBytes] = '\0';
   \   00000130   0xA802             ADD      R0,SP,#+8
   \   00000132   0x2100             MOVS     R1,#+0
   \   00000134   0x5421             STRB     R1,[R4, R0]
  14503          
  14504          #ifndef S2W_DUAL_INTERFACE_SUPPORT
  14505              		S2w_Printf("\r\n");
   \   00000136   0x.... 0x....      BL       ?Subroutine91
  14506              		AppS2wHal_CharNPut(respBuf,numBytes);
   \                     ??CrossCallReturnLabel_486:
   \   0000013A   0x4621             MOV      R1,R4
   \   0000013C   0xA802             ADD      R0,SP,#+8
   \   0000013E   0x.... 0x....      BL       AppS2wHal_CharNPut
  14507          #else
  14508                  AppS2wHal_CharNPut1(respBuf,numBytes);
  14509          #endif
  14510              	}
  14511              	if(coapConnParams->uri != NULL)
   \                     ??AppS2wCmd_CoapSend_14:
   \   00000142   0x6830             LDR      R0,[R6, #+0]
   \   00000144   0xB118             CBZ.N    R0,??AppS2wCmd_CoapSend_12
  14512              	{
  14513              		gsn_free(coapConnParams->uri);
   \   00000146   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14514              		coapConnParams->uri = NULL;
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x6030             STR      R0,[R6, #+0]
  14515              	}
  14516              }
  14517              return S2W_SUCCESS;
   \                     ??AppS2wCmd_CoapSend_12:
   \   0000014E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_CoapSend_13:
   \   00000150   0xF50D 0x6DB1      ADD      SP,SP,#+1416
   \   00000154   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
  14518          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0xA8FF             ADD      R0,SP,#+1020
   \   00000002   0x30FF             ADDS     R0,R0,#+255
   \   00000004   0x3089             ADDS     R0,R0,#+137
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet
  14519          

   \                                 In section .text, align 2, keep-with-next
  14520          PRIVATE UINT8
  14521          AppS2wCmd_CoapSetOption(UINT8* ptr)
  14522          {
   \                     AppS2wCmd_CoapSetOption:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  14523          	UINT8* p;
  14524          	UINT8* q;
  14525          	UINT32 key;
  14526          	S2W_COAP_OPTION_T* node;
  14527          	int len = 0;
  14528          
  14529          	// parse for option key
  14530          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
  14531          	if(!p)
   \                     ??CrossCallReturnLabel_142:
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD048             BEQ.N    ??AppS2wCmd_CoapSetOption_0
  14532          	{
  14533          		return S2W_EINVAL;
  14534          	}
  14535          	AppS2wParse_Int(p,&key);
   \   0000000C   0x.... 0x....      BL       ?Subroutine51
  14536          	if(	key == 1 ||
  14537          			key == 3 ||
  14538          			key == 4 ||
  14539          			key == 5 ||
  14540          			key == 7 ||
  14541          			key == 11 ||
  14542          			key == 12 ||
  14543          			key == 14 ||
  14544          			key == 15 ||
  14545          			key == 16 ||
  14546          			key == 19 ||
  14547          			key == 35 )
   \                     ??CrossCallReturnLabel_267:
   \   00000010   0x9800             LDR      R0,[SP, #+0]
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x2803             CMPNE    R0,#+3
   \   00000018   0xD013             BEQ.N    ??AppS2wCmd_CoapSetOption_1
   \   0000001A   0x2804             CMP      R0,#+4
   \   0000001C   0xBF18             IT       NE 
   \   0000001E   0x2805             CMPNE    R0,#+5
   \   00000020   0xD00F             BEQ.N    ??AppS2wCmd_CoapSetOption_1
   \   00000022   0x2807             CMP      R0,#+7
   \   00000024   0xBF18             IT       NE 
   \   00000026   0x280B             CMPNE    R0,#+11
   \   00000028   0xD00B             BEQ.N    ??AppS2wCmd_CoapSetOption_1
   \   0000002A   0x280C             CMP      R0,#+12
   \   0000002C   0xBF18             IT       NE 
   \   0000002E   0x280E             CMPNE    R0,#+14
   \   00000030   0xD007             BEQ.N    ??AppS2wCmd_CoapSetOption_1
   \   00000032   0x280F             CMP      R0,#+15
   \   00000034   0xBF18             IT       NE 
   \   00000036   0x2810             CMPNE    R0,#+16
   \   00000038   0xD003             BEQ.N    ??AppS2wCmd_CoapSetOption_1
   \   0000003A   0x2813             CMP      R0,#+19
   \   0000003C   0xBF18             IT       NE 
   \   0000003E   0x2823             CMPNE    R0,#+35
   \   00000040   0xD12D             BNE.N    ??AppS2wCmd_CoapSetOption_0
  14548          	{
  14549          
  14550          		// parse for option value
  14551          		q = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_CoapSetOption_1:
   \   00000042   0x.... 0x....      BL       ??Subroutine34_0
   \                     ??CrossCallReturnLabel_141:
   \   00000046   0x0004             MOVS     R4,R0
  14552          		if( q)
   \   00000048   0xD029             BEQ.N    ??AppS2wCmd_CoapSetOption_0
  14553          		{
  14554          			if(key == 19)// if it is token add it by calling
   \   0000004A   0x9800             LDR      R0,[SP, #+0]
   \   0000004C   0x2813             CMP      R0,#+19
   \   0000004E   0xD105             BNE.N    ??AppS2wCmd_CoapSetOption_2
  14555          			{
  14556          				GsnCoap_SetToken(strlen((const char*)q),q);
   \   00000050   0x.... 0x....      BL       ?Subroutine70
  14557          			}
   \                     ??CrossCallReturnLabel_423:
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x.... 0x....      BL       GsnCoap_SetToken
   \   0000005A   0xE01E             B.N      ??AppS2wCmd_CoapSetOption_3
  14558          			else
  14559          			{
  14560          				node = (S2W_COAP_OPTION_T*)gsn_malloc(sizeof(S2W_COAP_OPTION_T));
   \                     ??AppS2wCmd_CoapSetOption_2:
   \   0000005C   0x2200             MOVS     R2,#+0
   \   0000005E   0xF643 0x01E0      MOVW     R1,#+14560
   \   00000062   0x200C             MOVS     R0,#+12
   \   00000064   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000068   0x4605             MOV      R5,R0
  14561          				len = strlen((const char*)q);
   \   0000006A   0x.... 0x....      BL       ?Subroutine70
  14562          				node->optionValue = (char*)gsn_malloc(len+1);
   \                     ??CrossCallReturnLabel_422:
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0xF643 0x01E2      MOVW     R1,#+14562
   \   00000074   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_64:
   \   00000078   0x6068             STR      R0,[R5, #+4]
  14563          				node->optionKey = key;
  14564          				strcpy(node->optionValue,(char const*)q);
   \   0000007A   0x4621             MOV      R1,R4
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x7028             STRB     R0,[R5, #+0]
   \   00000080   0x6868             LDR      R0,[R5, #+4]
   \   00000082   0x.... 0x....      BL       strcpy
  14565          				if(optionHead == NULL)
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable515_1
   \   0000008A   0x6801             LDR      R1,[R0, #+0]
   \   0000008C   0xB919             CBNZ.N   R1,??AppS2wCmd_CoapSetOption_4
  14566          				{
  14567          					optionHead = node;
   \   0000008E   0x6005             STR      R5,[R0, #+0]
  14568          					node->next = NULL;
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x60A8             STR      R0,[R5, #+8]
   \   00000094   0xE001             B.N      ??AppS2wCmd_CoapSetOption_3
  14569          				}
  14570          				else
  14571          				{
  14572          					node->next = optionHead;
   \                     ??AppS2wCmd_CoapSetOption_4:
   \   00000096   0x60A9             STR      R1,[R5, #+8]
  14573          					optionHead = node;
   \   00000098   0x6005             STR      R5,[R0, #+0]
  14574          				}
  14575          			}
  14576          			return S2W_SUCCESS;
   \                     ??AppS2wCmd_CoapSetOption_3:
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0xBD3E             POP      {R1-R5,PC}
  14577          		}
  14578          	}
  14579          	return S2W_EINVAL;
   \                     ??AppS2wCmd_CoapSetOption_0:
   \   0000009E   0x2002             MOVS     R0,#+2
   \   000000A0   0xBD3E             POP      {R1-R5,PC}       ;; return
  14580          }
  14581          

   \                                 In section .text, align 2, keep-with-next
  14582          PRIVATE UINT8
  14583          AppS2wCmd_CoapRemoveOption(UINT8* ptr)
  14584          {
   \                     AppS2wCmd_CoapRemoveOption:
   \   00000000   0xB5F1             PUSH     {R0,R4-R7,LR}
  14585          	UINT8* p;
  14586          	UINT32 optionKey;
  14587          	S2W_COAP_OPTION_T * prev = optionHead;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable515_1
   \   00000006   0x6826             LDR      R6,[R4, #+0]
   \   00000008   0xB082             SUB      SP,SP,#+8
  14588          	S2W_COAP_OPTION_T * curr = optionHead;
   \   0000000A   0x4635             MOV      R5,R6
  14589          	S2W_COAP_OPTION_T * temp = NULL;
  14590          
  14591          	// parse for option key
  14592          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ??Subroutine34_0
  14593          	if(!p)
   \                     ??CrossCallReturnLabel_140:
   \   00000010   0xB908             CBNZ.N   R0,??AppS2wCmd_CoapRemoveOption_0
  14594          	{
  14595          		return S2W_EINVAL;
   \   00000012   0x2002             MOVS     R0,#+2
   \   00000014   0xBDFE             POP      {R1-R7,PC}
  14596          	}
  14597          	AppS2wParse_Int(p,&optionKey);
   \                     ??AppS2wCmd_CoapRemoveOption_0:
   \   00000016   0x.... 0x....      BL       ?Subroutine51
  14598          	if(	optionKey == 1 ||
  14599          			optionKey == 3 ||
  14600          			optionKey == 4 ||
  14601          			optionKey == 5 ||
  14602          			optionKey == 7 ||
  14603          			optionKey == 11 ||
  14604          			optionKey == 12 ||
  14605          			optionKey == 14 ||
  14606          			optionKey == 15 ||
  14607          			optionKey == 16 ||
  14608          			optionKey == 19 ||
  14609          			optionKey == 35 )
   \                     ??CrossCallReturnLabel_266:
   \   0000001A   0x9800             LDR      R0,[SP, #+0]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xBF18             IT       NE 
   \   00000020   0x2803             CMPNE    R0,#+3
   \   00000022   0xD013             BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
   \   00000024   0x2804             CMP      R0,#+4
   \   00000026   0xBF18             IT       NE 
   \   00000028   0x2805             CMPNE    R0,#+5
   \   0000002A   0xD00F             BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
   \   0000002C   0x2807             CMP      R0,#+7
   \   0000002E   0xBF18             IT       NE 
   \   00000030   0x280B             CMPNE    R0,#+11
   \   00000032   0xD00B             BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
   \   00000034   0x280C             CMP      R0,#+12
   \   00000036   0xBF18             IT       NE 
   \   00000038   0x280E             CMPNE    R0,#+14
   \   0000003A   0xD007             BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
   \   0000003C   0x280F             CMP      R0,#+15
   \   0000003E   0xBF18             IT       NE 
   \   00000040   0x2810             CMPNE    R0,#+16
   \   00000042   0xD003             BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
   \   00000044   0x2813             CMP      R0,#+19
   \   00000046   0xD012             BEQ.N    ??AppS2wCmd_CoapRemoveOption_2
   \   00000048   0x2823             CMP      R0,#+35
   \   0000004A   0xD112             BNE.N    ??AppS2wCmd_CoapRemoveOption_3
  14610          	{
  14611          	    // delete the option
  14612          		if(optionKey == 19)
  14613          		{
  14614          			GsnCoap_DeleteToken();
  14615          		}
  14616          		else
  14617          		{
  14618          			if(optionHead != NULL)
   \                     ??AppS2wCmd_CoapRemoveOption_1:
   \   0000004C   0x6820             LDR      R0,[R4, #+0]
   \   0000004E   0xB180             CBZ.N    R0,??AppS2wCmd_CoapRemoveOption_3
  14619          			{
  14620          				if(prev->next == NULL) // only one node
   \   00000050   0x68B0             LDR      R0,[R6, #+8]
   \   00000052   0xB9C0             CBNZ.N   R0,??AppS2wCmd_CoapRemoveOption_4
  14621          				{
  14622          					if(prev->optionKey == optionKey)
   \   00000054   0x7830             LDRB     R0,[R6, #+0]
   \   00000056   0x9900             LDR      R1,[SP, #+0]
   \   00000058   0x4288             CMP      R0,R1
   \   0000005A   0xD114             BNE.N    ??AppS2wCmd_CoapRemoveOption_4
  14623          					{
  14624          						gsn_free(prev->optionValue);
   \   0000005C   0x6870             LDR      R0,[R6, #+4]
   \   0000005E   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14625          						gsn_free(prev);
   \   00000062   0x4630             MOV      R0,R6
   \   00000064   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14626          						prev= NULL;
  14627          						optionHead = NULL;
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x6020             STR      R0,[R4, #+0]
  14628          						return S2W_SUCCESS;
   \   0000006C   0xBDFE             POP      {R1-R7,PC}
  14629          					}
  14630          				}
   \                     ??AppS2wCmd_CoapRemoveOption_2:
   \   0000006E   0x.... 0x....      BL       GsnCoap_DeleteToken
  14631          				// delete all occurences of the key
  14632          				while(curr != NULL)
  14633          				{
  14634          					if(curr->optionKey == optionKey)
  14635          					{
  14636          						temp = curr;
  14637          						if(prev == curr)
  14638          						{
  14639          							// first node in the list
  14640          							prev = prev->next;
  14641          							curr = curr->next;
  14642          							optionHead = curr;
  14643          						}
  14644          						else
  14645          						{
  14646          							prev->next = curr->next;
  14647          							curr = curr->next;
  14648          						}
  14649          						gsn_free(temp->optionValue);
  14650          						gsn_free(temp);
  14651          						temp = NULL;
  14652          					}
  14653          					else
  14654          					{
  14655          						prev = curr;
  14656          						curr = curr->next;
  14657          					}
  14658          				}
  14659          			}
  14660          		}
  14661          	}
  14662          
  14663          	return S2W_SUCCESS;
   \                     ??AppS2wCmd_CoapRemoveOption_3:
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0xBDFE             POP      {R1-R7,PC}       ;; return
   \                     ??AppS2wCmd_CoapRemoveOption_5:
   \   00000076   0x60B0             STR      R0,[R6, #+8]
   \   00000078   0x68AD             LDR      R5,[R5, #+8]
   \                     ??AppS2wCmd_CoapRemoveOption_6:
   \   0000007A   0x6878             LDR      R0,[R7, #+4]
   \   0000007C   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000080   0x4638             MOV      R0,R7
   \   00000082   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \                     ??AppS2wCmd_CoapRemoveOption_4:
   \   00000086   0x2D00             CMP      R5,#+0
   \   00000088   0xD0F3             BEQ.N    ??AppS2wCmd_CoapRemoveOption_3
   \   0000008A   0x9900             LDR      R1,[SP, #+0]
   \   0000008C   0x7828             LDRB     R0,[R5, #+0]
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xD107             BNE.N    ??AppS2wCmd_CoapRemoveOption_7
   \   00000092   0x68A8             LDR      R0,[R5, #+8]
   \   00000094   0x462F             MOV      R7,R5
   \   00000096   0x42AE             CMP      R6,R5
   \   00000098   0xD1ED             BNE.N    ??AppS2wCmd_CoapRemoveOption_5
   \   0000009A   0x68B6             LDR      R6,[R6, #+8]
   \   0000009C   0x4605             MOV      R5,R0
   \   0000009E   0x6025             STR      R5,[R4, #+0]
   \   000000A0   0xE7EB             B.N      ??AppS2wCmd_CoapRemoveOption_6
   \                     ??AppS2wCmd_CoapRemoveOption_7:
   \   000000A2   0x462E             MOV      R6,R5
   \   000000A4   0x68AD             LDR      R5,[R5, #+8]
   \   000000A6   0xE7EE             B.N      ??AppS2wCmd_CoapRemoveOption_4
  14664          
  14665          }
  14666          
  14667          /**
  14668           ******************************************************************
  14669           * @ingroup S2w-Application
  14670           * @brief Process the coap data from the serial interface.
  14671           *   This function reads the coap data and sends to wifi.
  14672           * @param dataLen the input data length.
  14673           * @param hCid the cid of the coap connection.
  14674           * @return S2W_SUCCESS - operation successful.
  14675           * @return S2W_FAILURE - operation Failed.
  14676           ******************************************************************/
  14677          

   \                                 In section .text, align 2, keep-with-next
  14678          PUBLIC UINT8
  14679          AppS2wHal_CoapContentDataGet( UINT8 hCid)
  14680          {
   \                     AppS2wHal_CoapContentDataGet:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xF6AD 0x2DF4      SUBW     SP,SP,#+2804
   \   00000006   0x4604             MOV      R4,R0
  14681              GSN_STATUS status = S2W_SUCCESS;
  14682              GSN_COAP_CONTEXT_T* coapCtx;
  14683              INT16 numBytes;
  14684              UINT32 dataLen;
  14685              char respBuf[COAP_MAX_PDU_SIZE];
  14686              char requestBuf[COAP_MAX_PDU_SIZE];
  14687              GSN_COAP_CONN_PARAMS_T *coapConnParams;
  14688              coapCtx = (GSN_COAP_CONTEXT_T *)AppS2wHal_CoapHandleGet(hCid);
   \   00000008   0x.... 0x....      BL       AppS2wHal_CoapHandleGet
   \   0000000C   0x0005             MOVS     R5,R0
  14689          
  14690              if(coapCtx == NULL)
   \   0000000E   0xBF08             IT       EQ 
   \   00000010   0x2001             MOVEQ    R0,#+1
  14691              {
  14692              	  return S2W_FAILURE;
   \   00000012   0xD03E             BEQ.N    ??AppS2wHal_CoapContentDataGet_0
  14693              }
  14694              coapConnParams = (GSN_COAP_CONN_PARAMS_T*)AppS2wHal_CoapParamsGet(hCid);
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       AppS2wHal_CoapParamsGet
   \   0000001A   0x4604             MOV      R4,R0
  14695              dataLen = coapConnParams->payloadSize;
  14696          
  14697          	AppS2wHal_CharNGet((UINT8 *)requestBuf,dataLen);
   \   0000001C   0xA800             ADD      R0,SP,#+0
   \   0000001E   0x6921             LDR      R1,[R4, #+16]
   \   00000020   0x.... 0x....      BL       AppS2wHal_CharNGet
  14698          
  14699          	coapConnParams->payload = requestBuf;
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026   0x60A0             STR      R0,[R4, #+8]
  14700          	//S2w_Printf("coapConnParams->payload = %s\r\n",requestBuf);
  14701          	coapConnParams->responseBufLen = COAP_MAX_PDU_SIZE;
  14702          	coapConnParams->responseBuffer = respBuf;
  14703          	numBytes = GsnCoap_Send_And_Recieve(coapCtx,coapConnParams);
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0xF44F 0x60AF      MOV      R0,#+1400
   \   0000002E   0x6220             STR      R0,[R4, #+32]
   \   00000030   0xF50D 0x60AF      ADD      R0,SP,#+1400
   \   00000034   0x61E0             STR      R0,[R4, #+28]
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0x.... 0x....      BL       GsnCoap_Send_And_Recieve
   \   0000003C   0xB205             SXTH     R5,R0
  14704          	// set the payload
  14705          	// call send
  14706          
  14707          	if(numBytes > 0)
   \   0000003E   0x2D01             CMP      R5,#+1
   \   00000040   0xDB0A             BLT.N    ??AppS2wHal_CoapContentDataGet_1
  14708          	{
  14709          		respBuf[numBytes] = '\0';
   \   00000042   0xF50D 0x60AF      ADD      R0,SP,#+1400
   \   00000046   0x2100             MOVS     R1,#+0
   \   00000048   0x5429             STRB     R1,[R5, R0]
  14710          
  14711          #ifndef S2W_DUAL_INTERFACE_SUPPORT
  14712          		S2w_Printf("\r\n");
   \   0000004A   0x.... 0x....      BL       ?Subroutine91
  14713          		AppS2wHal_CharNPut(respBuf,numBytes);
   \                     ??CrossCallReturnLabel_485:
   \   0000004E   0x4629             MOV      R1,R5
   \   00000050   0xF50D 0x60AF      ADD      R0,SP,#+1400
   \   00000054   0x.... 0x....      BL       AppS2wHal_CharNPut
  14714          #else
  14715          		AppS2wHal_CharNPut1(respBuf,numBytes);
  14716          #endif
  14717          	}
  14718          	if(coapConnParams->uri != NULL)
   \                     ??AppS2wHal_CoapContentDataGet_1:
   \   00000058   0x6820             LDR      R0,[R4, #+0]
   \   0000005A   0xB118             CBZ.N    R0,??AppS2wHal_CoapContentDataGet_2
  14719          	{
  14720          		gsn_free(coapConnParams->uri);
   \   0000005C   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14721          		coapConnParams->uri = NULL;
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x6020             STR      R0,[R4, #+0]
  14722          	}
  14723          
  14724          	if(coapConnParams->payloadType != NULL)
   \                     ??AppS2wHal_CoapContentDataGet_2:
   \   00000064   0x68E0             LDR      R0,[R4, #+12]
   \   00000066   0xB118             CBZ.N    R0,??AppS2wHal_CoapContentDataGet_3
  14725          	{
  14726          		gsn_free(coapConnParams->payloadType);
   \   00000068   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14727          		coapConnParams->payloadType = NULL;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x60E0             STR      R0,[R4, #+12]
  14728          	}
  14729          	if(coapConnParams->payload != NULL)
   \                     ??AppS2wHal_CoapContentDataGet_3:
   \   00000070   0x68A0             LDR      R0,[R4, #+8]
   \   00000072   0xB118             CBZ.N    R0,??AppS2wHal_CoapContentDataGet_4
  14730          	{
  14731          		gsn_free(coapConnParams->payload);
   \   00000074   0x.... 0x....      BL       GsnDynMemMgmt_Free
  14732          		coapConnParams->payload = NULL;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x60A0             STR      R0,[R4, #+8]
  14733          	}
  14734          #ifndef S2W_DUAL_INTERFACE_SUPPORT
  14735              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wHal_CoapContentDataGet_4:
   \   0000007C   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000080   0x.... 0x....      LDR.W    R1,??DataTable515_3
   \   00000084   0x6809             LDR      R1,[R1, #+0]
   \   00000086   0x5C40             LDRB     R0,[R0, R1]
   \   00000088   0x2802             CMP      R0,#+2
   \   0000008A   0xBF08             IT       EQ 
   \   0000008C   0x.... 0x....      BLEQ     s2wSpiFs_Flush
  14736              {
  14737                  s2wSpiFs_Flush();
  14738              }
  14739          #else
  14740              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
  14741              {
  14742                  s2wSpiFs_Flush1();
  14743              }
  14744          #endif
  14745             return status;
   \   00000090   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_CoapContentDataGet_0:
   \   00000092   0xF60D 0x2DF4      ADDW     SP,SP,#+2804
   \   00000096   0xBD30             POP      {R4,R5,PC}       ;; return
  14746          }
  14747          #endif
  14748          

   \                                 In section .text, align 2, keep-with-next
  14749          UINT8
  14750          AppS2wCmd_BaBitMapSet(UINT8* ptr)
  14751          {
   \                     AppS2wCmd_BaBitMapSet:
   \   00000000   0xB501             PUSH     {R0,LR}
  14752          	UINT32 param;
  14753          	GSN_WDD_ALLOW_BA_BITMAP_SET_PARAM baBitmapSetParam = {0};
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant {0}>_4`
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0x.... 0x....      BL       ?Subroutine34
  14754              UINT8 *p, status = S2W_EINVAL;
  14755              p = AppS2wParse_NextParamGet(&ptr);  /*BA TX TID */
  14756              if (!p)
   \                     ??CrossCallReturnLabel_157:
   \   0000000E   0xB158             CBZ.N    R0,??AppS2wCmd_BaBitMapSet_0
  14757              {
  14758                  return S2W_EINVAL;
  14759              }
  14760              status = AppS2wParse_Int(p, &param);
  14761              if(status != GSN_SUCCESS)
   \   00000010   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_265:
   \   00000014   0xB940             CBNZ.N   R0,??AppS2wCmd_BaBitMapSet_0
  14762              {
  14763                  return S2W_EINVAL;
  14764              }
  14765          	baBitmapSetParam.ba_tx_tid = param;
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0xF8AD 0x0004      STRH     R0,[SP, #+4]
  14766          
  14767              p = AppS2wParse_NextParamGet(&ptr);  /*BA RX TID */
   \   0000001C   0x.... 0x....      BL       ??Subroutine34_0
  14768              if (!p)
   \                     ??CrossCallReturnLabel_139:
   \   00000020   0xB110             CBZ.N    R0,??AppS2wCmd_BaBitMapSet_0
  14769              {
  14770                  return S2W_EINVAL;
  14771              }
  14772              status = AppS2wParse_Int(p, &param);
  14773              if(status != GSN_SUCCESS)
   \   00000022   0x.... 0x....      BL       ?Subroutine51
   \                     ??CrossCallReturnLabel_264:
   \   00000026   0xB108             CBZ.N    R0,??AppS2wCmd_BaBitMapSet_1
  14774              {
  14775                  return S2W_EINVAL;
   \                     ??AppS2wCmd_BaBitMapSet_0:
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xBD0E             POP      {R1-R3,PC}
  14776              }
  14777          	baBitmapSetParam.ba_rx_tid = param;
   \                     ??AppS2wCmd_BaBitMapSet_1:
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0xF8AD 0x0006      STRH     R0,[SP, #+6]
  14778              
  14779          	GsnWdd_BlockAckEnable(&s2wappMainTaskCtxt->if0.wddCtx, &baBitmapSetParam);
   \   00000032   0xA901             ADD      R1,SP,#+4
   \   00000034   0x.... 0x....      BL       ?Subroutine74
   \                     ??CrossCallReturnLabel_440:
   \   00000038   0x.... 0x....      BL       GsnWdd_BlockAckEnable
  14780              
  14781              return S2W_SUCCESS;
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD0E             POP      {R1-R3,PC}       ;; return
  14782          }
  14783          

   \                                 In section .text, align 2, keep-with-next
  14784          UINT8
  14785          AppS2wCmd_RadioStateGet(UINT8* ptr)
  14786          {
   \                     AppS2wCmd_RadioStateGet:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
  14787          	UINT32 radioState = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
  14788          	UINT8 *radStStr[]= {"", "Active", "PS Poll", "OFF"};
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0xA807             ADD      R0,SP,#+28
   \   0000000C   0x.... 0x....      ADR.W    R1,`?<Constant {&"", &"Active", &"PS Poll", &"OFF"`
   \   00000010   0x.... 0x....      BL       __aeabi_memcpy4
  14789          	GSN_WDD_RADIO_MODE_INFO_T radioStateInfo;
  14790          	GsnWdd_RadioStateGet(&s2wappMainTaskCtxt->if0.wddCtx, &radioState);
   \   00000014   0x.... 0x....      LDR.W    R4,??DataTable515_3
   \   00000018   0x6820             LDR      R0,[R4, #+0]
   \   0000001A   0xA900             ADD      R1,SP,#+0
   \   0000001C   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000020   0x.... 0x....      BL       GsnWdd_RadioStateGet
  14791          
  14792          	S2w_Printf("\r\nWLAN Radio State = %d : %s\r\n", radioState, radStStr[radioState]);
   \   00000024   0xAD07             ADD      R5,SP,#+28
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0xF855 0x2020      LDR      R2,[R5, R0, LSL #+2]
   \   0000002C   0x4601             MOV      R1,R0
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nWLAN Radio State = ...">`
   \   00000032   0x.... 0x....      BL       S2w_Printf
  14793          
  14794          	GsnWdd_RadioModeInfoGet(&s2wappMainTaskCtxt->if0.wddCtx, &radioStateInfo);
   \   00000036   0x6820             LDR      R0,[R4, #+0]
   \   00000038   0xA901             ADD      R1,SP,#+4
   \   0000003A   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000003E   0x.... 0x....      BL       GsnWdd_RadioModeInfoGet
  14795          	
  14796          	S2w_Printf("\r\nAPP Radio State Counters:\r\n");
   \   00000042   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nAPP Radio State Cou...">`
   \   00000046   0x.... 0x....      BL       S2w_Printf
  14797          	S2w_Printf("rxActiveReqCnt = %d\r\n", radioStateInfo.rxActiveReqCnt);
   \   0000004A   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant "rxActiveReqCnt = %d\\r\\n">`
   \   00000052   0x.... 0x....      BL       S2w_Printf
  14798          	S2w_Printf("rxPSPollReqCnt = %d\r\n", radioStateInfo.rxPSPollReqCnt);
   \   00000056   0xF89D 0x1005      LDRB     R1,[SP, #+5]
   \   0000005A   0x.... 0x....      ADR.W    R0,`?<Constant "rxPSPollReqCnt = %d\\r\\n">`
   \   0000005E   0x.... 0x....      BL       S2w_Printf
  14799          	S2w_Printf("rxPSPollCfgSetFlag = %d\r\n", radioStateInfo.rxPSPollCfgSetFlag);
   \   00000062   0xF89D 0x1006      LDRB     R1,[SP, #+6]
   \   00000066   0x.... 0x....      ADR.W    R0,`?<Constant "rxPSPollCfgSetFlag = ...">`
   \   0000006A   0x.... 0x....      BL       S2w_Printf
  14800          	S2w_Printf("rxIeeePSPollCfgSetFlag = %d\r\n", radioStateInfo.rxIeeePSPollCfgSetFlag);
   \   0000006E   0xF89D 0x1007      LDRB     R1,[SP, #+7]
   \   00000072   0x.... 0x....      ADR.W    R0,`?<Constant "rxIeeePSPollCfgSetFla...">`
   \   00000076   0x.... 0x....      BL       S2w_Printf
  14801          	S2w_Printf("rxIeeePSPollReqCnt = %d\r\n", radioStateInfo.rxIeeePSPollReqCnt);
   \   0000007A   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000007E   0x.... 0x....      ADR.W    R0,`?<Constant "rxIeeePSPollReqCnt = ...">`
   \   00000082   0x.... 0x....      BL       S2w_Printf
  14802          	S2w_Printf("lastPsStateReqsted = %d : %s\r\n", radioStateInfo.lastPsStateReqsted,
  14803          													radStStr[radioStateInfo.lastPsStateReqsted]);
   \   00000086   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   0000008A   0xF855 0x2021      LDR      R2,[R5, R1, LSL #+2]
   \   0000008E   0x.... 0x....      ADR.W    R0,`?<Constant "lastPsStateReqsted = ...">`
   \   00000092   0x.... 0x....      BL       S2w_Printf
  14804          	
  14805              return S2W_SUCCESS;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0xB00B             ADD      SP,SP,#+44
   \   0000009A   0xBD30             POP      {R4,R5,PC}       ;; return
  14806          }
  14807          

   \                                 In section .text, align 2, keep-with-next
  14808          UINT8 App_ClkTuneCmd(UINT8 *ptr)
  14809          {
   \                     App_ClkTuneCmd:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
  14810              UINT8  *p;
  14811              UINT32 start, period;
  14812             
  14813              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine42
  14814              if(!p)
   \                     ??CrossCallReturnLabel_229:
   \   00000008   0xB160             CBZ.N    R0,??App_ClkTuneCmd_0
  14815              {
  14816                  return S2W_FAILURE;
  14817              }
  14818              AppS2wParse_Int(p, &start);
   \   0000000A   0x.... 0x....      BL       ?Subroutine56
  14819              if(start > 1)
   \                     ??CrossCallReturnLabel_355:
   \   0000000E   0x9805             LDR      R0,[SP, #+20]
   \   00000010   0x2802             CMP      R0,#+2
   \   00000012   0xD202             BCS.N    ??App_ClkTuneCmd_1
  14820              {
  14821                  return S2W_EINVAL;
  14822              }
  14823              p = AppS2wParse_NextParamGet(&ptr);
   \   00000014   0x.... 0x....      BL       ?Subroutine42
  14824              if(!p)
   \                     ??CrossCallReturnLabel_228:
   \   00000018   0xB908             CBNZ.N   R0,??App_ClkTuneCmd_2
  14825              {
  14826                  return S2W_EINVAL;
   \                     ??App_ClkTuneCmd_1:
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0xE02E             B.N      ??App_ClkTuneCmd_3
  14827              }
  14828              if(AppS2wParse_Int(p, &period) != S2W_SUCCESS)
   \                     ??App_ClkTuneCmd_2:
   \   0000001E   0x.... 0x....      BL       ?Subroutine54
   \                     ??CrossCallReturnLabel_342:
   \   00000022   0xB108             CBZ.N    R0,??App_ClkTuneCmd_4
  14829              {
  14830                  return S2W_FAILURE;
   \                     ??App_ClkTuneCmd_0:
   \   00000024   0x2001             MOVS     R0,#+1
   \   00000026   0xE029             B.N      ??App_ClkTuneCmd_3
  14831              }
  14832              if(start == TRUE)
   \                     ??App_ClkTuneCmd_4:
   \   00000028   0x9805             LDR      R0,[SP, #+20]
   \   0000002A   0x.... 0x....      LDR.W    R5,??DataTable515_4
   \   0000002E   0x.... 0x....      LDR.W    R6,??DataTable515_5
   \   00000032   0xF248 0x1498      MOVW     R4,#+33176
   \   00000036   0x2801             CMP      R0,#+1
   \   00000038   0xD118             BNE.N    ??App_ClkTuneCmd_5
  14833              {
  14834                  s2wCurrent.clkCalibEn = TRUE;
   \   0000003A   0xF886 0x03A9      STRB     R0,[R6, #+937]
  14835                  s2wCurrent.clkCalibPeriod = period;
  14836                  appCtx.clkCaibTmrHndl = GsnSoftTmr_Start(&appCtx.clkCaibTmr, GSN_SOFT_TMR_PERIODIC, 0, SEC_TO_SYSTIME(period), AppS2w_ClkCalibCb, NULL);
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x9804             LDR      R0,[SP, #+16]
   \   00000042   0xF8C6 0x03AC      STR      R0,[R6, #+940]
   \   00000046   0x460B             MOV      R3,R1
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9003             STR      R0,[SP, #+12]
   \   0000004C   0x2200             MOVS     R2,#+0
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable515_6
   \   00000052   0x9002             STR      R0,[SP, #+8]
   \   00000054   0x9804             LDR      R0,[SP, #+16]
   \   00000056   0x03C0             LSLS     R0,R0,#+15
   \   00000058   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000005C   0xF505 0x4001      ADD      R0,R5,#+33024
   \   00000060   0x2101             MOVS     R1,#+1
   \   00000062   0x3078             ADDS     R0,R0,#+120
   \   00000064   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000068   0x5160             STR      R0,[R4, R5]
   \   0000006A   0xE006             B.N      ??App_ClkTuneCmd_6
  14837              }
  14838              else
  14839              {
  14840                  if(appCtx.clkCaibTmrHndl != NULL)
   \                     ??App_ClkTuneCmd_5:
   \   0000006C   0x5960             LDR      R0,[R4, R5]
   \   0000006E   0xB108             CBZ.N    R0,??App_ClkTuneCmd_7
  14841                  {
  14842                      GsnSoftTmr_Stop(appCtx.clkCaibTmrHndl);
   \   00000070   0x.... 0x....      BL       GsnSoftTmr_Stop
  14843                  }
  14844                  s2wCurrent.clkCalibEn = FALSE;
   \                     ??App_ClkTuneCmd_7:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xF886 0x03A9      STRB     R0,[R6, #+937]
  14845              }
  14846              return S2W_SUCCESS;
   \                     ??App_ClkTuneCmd_6:
   \   0000007A   0x2000             MOVS     R0,#+0
   \                     ??App_ClkTuneCmd_3:
   \   0000007C   0xB008             ADD      SP,SP,#+32
   \   0000007E   0xBD70             POP      {R4-R6,PC}       ;; return
  14847          }
  14848          
  14849          

   \                                 In section .text, align 2, keep-with-next
  14850          UINT8
  14851          AppS2wCmd_Hibernate(UINT8 *ptr)
  14852          {
   \                     AppS2wCmd_Hibernate:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  14853              UINT8 status;
  14854              S2W_ALARM_INFO_T alarm;
  14855              UINT8 *p;
  14856              memset(&alarm,0,sizeof(S2W_ALARM_INFO_T));
   \   00000004   0x.... 0x....      BL       ?Subroutine9
  14857              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_12:
   \   00000008   0x.... 0x....      BL       ??Subroutine34_0
  14858              if (!p)
   \                     ??CrossCallReturnLabel_138:
   \   0000000C   0xB908             CBNZ.N   R0,??AppS2wCmd_Hibernate_0
  14859              {
  14860                  return S2W_EINVAL;
   \   0000000E   0x2002             MOVS     R0,#+2
   \   00000010   0xBD0E             POP      {R1-R3,PC}
  14861              }
  14862              if (*p != '\0')
   \                     ??AppS2wCmd_Hibernate_0:
   \   00000012   0x7801             LDRB     R1,[R0, #+0]
   \   00000014   0xB129             CBZ.N    R1,??AppS2wCmd_Hibernate_1
  14863              {
  14864                  status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
   \   00000016   0x.... 0x....      BL       ?Subroutine59
  14865                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_366:
   \   0000001A   0xB998             CBNZ.N   R0,??AppS2wCmd_Hibernate_2
  14866                  {
  14867                      return status;
  14868                  }
  14869                  alarm.alarm1Valid = 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xF88D 0x0000      STRB     R0,[SP, #+0]
  14870              }
  14871              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_Hibernate_1:
   \   00000022   0x.... 0x....      BL       ??Subroutine34_0
  14872              if (p)
   \                     ??CrossCallReturnLabel_137:
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xBF1C             ITT      NE 
   \   0000002A   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000002C   0x2900             CMPNE    R1,#+0
  14873              {
  14874                  if (*p != '\0')
   \   0000002E   0xD005             BEQ.N    ??AppS2wCmd_Hibernate_3
  14875                  {
  14876                      status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
   \   00000030   0x.... 0x....      BL       ?Subroutine61
  14877                      if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_386:
   \   00000034   0xB930             CBNZ.N   R0,??AppS2wCmd_Hibernate_2
  14878                      {
  14879                          return status;
  14880                      }
  14881                      alarm.alarm2Valid = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0xF88D 0x0002      STRB     R0,[SP, #+2]
  14882                  }
  14883              }
  14884          
  14885              AppS2wHal_PsHibernateRequest(&alarm);
   \                     ??AppS2wCmd_Hibernate_3:
   \   0000003C   0xA800             ADD      R0,SP,#+0
   \   0000003E   0x.... 0x....      BL       AppS2wHal_PsHibernateRequest
  14886              return S2W_SUCCESS;
   \   00000042   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_Hibernate_2:
   \   00000044   0xBD0E             POP      {R1-R3,PC}       ;; return
  14887          
  14888          }
  14889          
  14890          

   \                                 In section .text, align 2, keep-with-next
  14891          UINT8 
  14892          AppS2wCmd_TempGet(UINT8 *ptr)
  14893          {
   \                     AppS2wCmd_TempGet:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
  14894              INT32 temp;
  14895              UINT8 wlanTemp, *p, cpu, status;
  14896              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine34_0
  14897              if (!p)
   \                     ??CrossCallReturnLabel_136:
   \   00000008   0xB908             CBNZ.N   R0,??AppS2wCmd_TempGet_0
  14898              {
  14899                  return S2W_EINVAL;
   \   0000000A   0x2002             MOVS     R0,#+2
   \   0000000C   0xBD0E             POP      {R1-R3,PC}
  14900              }
  14901              status = AppS2wParse_Boolean(p, &cpu);
   \                     ??AppS2wCmd_TempGet_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine60
  14902              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_370:
   \   00000012   0xB9A8             CBNZ.N   R0,??AppS2wCmd_TempGet_1
  14903              {
  14904                  return status;
  14905              }
  14906              if(cpu)
   \   00000014   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000018   0xB150             CBZ.N    R0,??AppS2wCmd_TempGet_2
  14907              {
  14908                  GsnSysCtl_DieTempGet(&appCtx.sysCtlCtx, &wlanTemp);
   \   0000001A   0xF10D 0x0101      ADD      R1,SP,#+1
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable515_7
   \   00000022   0x.... 0x....      BL       GsnSysCtl_DieTempGet
  14909                  S2w_Printf("\n\rWLAN:%d", wlanTemp);
   \   00000026   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rWLAN:%d">`
   \   0000002E   0xE004             B.N      ??AppS2wCmd_TempGet_3
  14910              }
  14911              else
  14912              {
  14913                  temp = GsnIntTempSen_Get();
   \                     ??AppS2wCmd_TempGet_2:
   \   00000030   0x.... 0x....      BL       GsnIntTempSen_Get
  14914                  S2w_Printf("\n\rAPP:%d", temp);
   \   00000034   0x4601             MOV      R1,R0
   \   00000036   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rAPP:%d">`
   \                     ??AppS2wCmd_TempGet_3:
   \   0000003A   0x.... 0x....      BL       S2w_Printf
  14915              }
  14916              
  14917              return S2W_SUCCESS;
   \   0000003E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_TempGet_1:
   \   00000040   0xBD0E             POP      {R1-R3,PC}       ;; return
  14918          }
  14919          

   \                                 In section .text, align 2, keep-with-next
  14920          UINT8 
  14921          AppS2wCmd_TempReadStart(UINT8 *ptr)
  14922          {
   \                     AppS2wCmd_TempReadStart:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
  14923              UINT8 *p, status, enable;
  14924              UINT32 period;
  14925              
  14926              p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine39
  14927              if (!p)
   \                     ??CrossCallReturnLabel_202:
   \   00000008   0xB150             CBZ.N    R0,??AppS2wCmd_TempReadStart_0
  14928              {
  14929                  return S2W_EINVAL;
  14930              }
  14931              status = AppS2wParse_Boolean(p, &enable);
   \   0000000A   0x.... 0x....      BL       ?Subroutine62
  14932              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_389:
   \   0000000E   0xB9A8             CBNZ.N   R0,??AppS2wCmd_TempReadStart_1
  14933              {
  14934                  return status;
  14935              }
  14936          
  14937              if(enable)
   \   00000010   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000014   0x.... 0x....      LDR.W    R4,??DataTable515_7
   \   00000018   0xB160             CBZ.N    R0,??AppS2wCmd_TempReadStart_2
  14938              {
  14939                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000001A   0x.... 0x....      BL       ?Subroutine39
  14940                  if (!p)
   \                     ??CrossCallReturnLabel_201:
   \   0000001E   0xB908             CBNZ.N   R0,??AppS2wCmd_TempReadStart_3
  14941                  {
  14942                      return S2W_EINVAL;
   \                     ??AppS2wCmd_TempReadStart_0:
   \   00000020   0x2002             MOVS     R0,#+2
   \   00000022   0xE00B             B.N      ??AppS2wCmd_TempReadStart_1
  14943                  }
  14944          
  14945                  status = AppS2wParse_Int(p, &period);
   \                     ??AppS2wCmd_TempReadStart_3:
   \   00000024   0x.... 0x....      BL       ?Subroutine51
  14946                  if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_263:
   \   00000028   0xB940             CBNZ.N   R0,??AppS2wCmd_TempReadStart_1
  14947                  {
  14948                      return status;
  14949                  }
  14950                  GsnSysCtl_DieTempSendTimerStart(&appCtx.sysCtlCtx, period);
   \   0000002A   0x9900             LDR      R1,[SP, #+0]
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       GsnSysCtl_DieTempSendTimerStart
   \   00000032   0xE002             B.N      ??AppS2wCmd_TempReadStart_4
  14951              }
  14952              else
  14953              {
  14954                  GsnSysCtl_DieTempSendTimerStop(&appCtx.sysCtlCtx);
   \                     ??AppS2wCmd_TempReadStart_2:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       GsnSysCtl_DieTempSendTimerStop
  14955              }
  14956              return S2W_SUCCESS;
   \                     ??AppS2wCmd_TempReadStart_4:
   \   0000003A   0x2000             MOVS     R0,#+0
   \                     ??AppS2wCmd_TempReadStart_1:
   \   0000003C   0xB004             ADD      SP,SP,#+16
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
  14957          }
  14958          

   \                                 In section .text, align 2, keep-with-next
  14959          UINT8
  14960          AppS2wCmd_OtaFwupRollBack(UINT8* ptr)
  14961          {
   \                     AppS2wCmd_OtaFwupRollBack:
   \   00000000   0xB580             PUSH     {R7,LR}
  14962              if(GsnFwup_RollBackOtafu() == GSN_SUCCESS)
   \   00000002   0x.... 0x....      BL       GsnFwup_RollBackOtafu
   \   00000006   0xB908             CBNZ.N   R0,??AppS2wCmd_OtaFwupRollBack_0
  14963              {
  14964                  GsnSys_Reset((GSN_RESET_REASON_T)0);
   \   00000008   0x.... 0x....      B.W      ?Subroutine2
  14965              }
  14966              else
  14967              {
  14968                  return S2W_FAILURE;
   \                     ??AppS2wCmd_OtaFwupRollBack_0:
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
  14969              }
  14970              return S2W_SUCCESS;
  14971          }
  14972          
  14973          
  14974          

   \                                 In section .text, align 2, keep-with-next
  14975          UINT8
  14976          AppS2wCmd_Wassoc_test(UINT8 *ptr)
  14977          {
   \                     AppS2wCmd_Wassoc_test:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0D1             SUB      SP,SP,#+324
   \   00000006   0x.... 0x....      BL       ?Subroutine28
  14978              S2W_WLANDATA_T params;
  14979          #ifndef S2W_IP2WIFI_SUPPORT
  14980              GSN_NWIF_DHCP_PARAMS_T dhcpParams;
  14981              GSN_NWIF_IP_CONFIG_T ipConfig;
  14982          #endif
  14983          #ifdef S2W_IPv6_SUPPORT
  14984              GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
  14985              GSN_NWIF_IPv6_CONFIG_T userIpv6Config;
  14986          
  14987          
  14988          #endif
  14989              INT32  index;
  14990          	UINT8 mac[6],macStr[25];
  14991          
  14992              UINT32 status;
  14993              GSN_WDD_CONNECT_FLAG_T conctflags=GSN_WDD_CONNECT_FLAG_NONE;
  14994              GSN_STATUS retVal = GSN_SUCCESS;
  14995              UINT8 eapFastRetryCnt = 0;
  14996              memset(&params, 0, sizeof(params));
   \                     ??CrossCallReturnLabel_74:
   \   0000000A   0x.... 0x....      BL       ?Subroutine99
  14997              globalUseHRssi = 0;
  14998          	L3ConnectStatus=0;
  14999                  L3ConnectStatus_v6=0;
  15000              /* check the validity of the parameters passed
  15001               */
  15002              status = AppS2wParse_Wcmd(ptr, &params, pwc_assoc);
  15003              if (status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_511:
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xF040 0x8111      BNE.W    ??AppS2wCmd_Wassoc_test_0
  15004              {
  15005                  return status;
  15006              }
  15007          #ifdef S2W_SECURITY_WPS_ENABLE
  15008              wpsConnDone = FALSE;
   \   00000014   0x.... 0x....      BL       ?Subroutine20
  15009          #endif
  15010              if ((s2wLinkState != S2W_LINK_STATE_DISCONNECTED) || (GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE))
   \                     ??CrossCallReturnLabel_45:
   \   00000018   0xB918             CBNZ.N   R0,??AppS2wCmd_Wassoc_test_1
   \   0000001A   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_574:
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD107             BNE.N    ??CrossCallReturnLabel_586
  15011              {
  15012                  //S2w_Debug("disconnecting\n\n");
  15013          		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
  15014          						   GSN_SOFT_TMR_ONESHOT,0,
  15015          							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
  15016          						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
   \                     ??AppS2wCmd_Wassoc_test_1:
   \   00000022   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_4:
   \   00000026   0x.... 0x....      BL       ?Subroutine121
  15017                  retVal = AppS2wHal_Disassociate(0);
  15018          		GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
   \                     ??CrossCallReturnLabel_580:
   \   0000002A   0x.... 0x....      BL       ?Subroutine110
  15019          #ifndef S2W_IP2WIFI_SUPPORT
  15020                  if(retVal != GSN_FAILURE)
  15021                  {
  15022                      GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     ??CrossCallReturnLabel_544:
   \   0000002E   0x.... 0x....      BL       ?Subroutine123
  15023          		}
  15024          #endif
  15025              }
  15026          
  15027              /* Copy the mode.
  15028               */
  15029              params.mode = s2wCurrent.mode;
   \                     ??CrossCallReturnLabel_586:
   \   00000032   0x.... 0x....      BL       ?Subroutine17
  15030              /* execute the wdd part for connection
  15031               */
  15032          
  15033                  GSN_WDD_WLAN_CFG_T *pWlanConfig;
  15034                //  GsnOsal_SemCreate  ( &s2wConnectSemaphore, 0 );
  15035                  pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
  15036                  memset(pWlanConfig, 0, sizeof(*pWlanConfig));
  15037                  pWlanConfig->ssid.length = params.ssidLen;
   \                     ??CrossCallReturnLabel_640:
   \   00000036   0x.... 0x....      BL       ?Subroutine112
  15038                  memcpy((INT8 *)pWlanConfig->ssid.array, params.ssid, pWlanConfig->ssid.length);
  15039          		if(params.validBssid)
   \                     ??CrossCallReturnLabel_548:
   \   0000003A   0xF89D 0x0037      LDRB     R0,[SP, #+55]
   \   0000003E   0xB118             CBZ.N    R0,??AppS2wCmd_Wassoc_test_2
  15040          		{
  15041          			memcpy((INT8 *)pWlanConfig->bssid.array,params.bssid,S2W_MAC_ADDR_SIZE);
   \   00000040   0x.... 0x....      BL       ?Subroutine114
  15042          			conctflags = GSN_WDD_CONNECT_FLAG_USE_BSSID;
   \                     ??CrossCallReturnLabel_553:
   \   00000044   0xF04F 0x0A10      MOV      R10,#+16
  15043          		}
  15044          
  15045                  if(params.channel)
   \                     ??AppS2wCmd_Wassoc_test_2:
   \   00000048   0xF89D 0x0035      LDRB     R0,[SP, #+53]
   \   0000004C   0xB120             CBZ.N    R0,??AppS2wCmd_Wassoc_test_3
  15046                  {
  15047                  pWlanConfig->channel[0] = params.channel;
   \   0000004E   0xF888 0x0027      STRB     R0,[R8, #+39]
  15048                  pWlanConfig->channel[1] = 0;
   \   00000052   0xF888 0x9028      STRB     R9,[R8, #+40]
   \   00000056   0xE001             B.N      ??CrossCallReturnLabel_248
  15049          		}
  15050          		else
  15051          		{
  15052          			pWlanConfig->channel[0] = 1;
   \                     ??AppS2wCmd_Wassoc_test_3:
   \   00000058   0x.... 0x....      BL       ?Subroutine46
  15053                      pWlanConfig->channel[1] = 2;
  15054                      pWlanConfig->channel[2] = 3;
  15055                      pWlanConfig->channel[3] = 4;
  15056                      pWlanConfig->channel[4] = 5;
  15057                      pWlanConfig->channel[5] = 6;
  15058                      pWlanConfig->channel[6] = 7;
  15059                      pWlanConfig->channel[7] = 8;
  15060                      pWlanConfig->channel[8] = 9;
  15061                      pWlanConfig->channel[9] = 10;
  15062                      pWlanConfig->channel[10] = 11;
  15063                      switch(s2wCurrent.regDomain)
  15064                      {
  15065          				case S2W_DOMAIN_FCC:
  15066                      pWlanConfig->channel[11] = 0;
  15067          				break;
  15068          				case S2W_DOMAIN_ETSI:
  15069          				pWlanConfig->channel[11] = 12;
  15070          				pWlanConfig->channel[12] = 13;
  15071          				pWlanConfig->channel[13] = 0;
  15072          				break;
  15073          				case S2W_DOMAIN_TELEC:
  15074          				pWlanConfig->channel[11] = 12;
  15075          				pWlanConfig->channel[12] = 13;
  15076          				pWlanConfig->channel[13] = 14;
  15077          				pWlanConfig->channel[14] = 0;
  15078          				break;
  15079          				default:
  15080          				pWlanConfig->channel[11] = 0;
  15081          				break;
  15082          			}
  15083          		}
  15084                  
  15085                  S2w_getSecurityConfig(pWlanConfig);
   \                     ??CrossCallReturnLabel_248:
   \   0000005C   0x4640             MOV      R0,R8
   \   0000005E   0x.... 0x....      BL       S2w_getSecurityConfig
  15086          		if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_STA)
   \   00000062   0x6830             LDR      R0,[R6, #+0]
   \   00000064   0xF890 0x19CC      LDRB     R1,[R0, #+2508]
   \   00000068   0x2901             CMP      R1,#+1
   \   0000006A   0xBF08             IT       EQ 
   \   0000006C   0xF04A 0x0A07      ORREQ    R10,R10,#0x7
  15087          		{
  15088          			conctflags = (GSN_WDD_CONNECT_FLAG_T) (conctflags | (GSN_WDD_CONNECT_FLAG_SCAN_BEFORE_CONNECT | GSN_WDD_CONNECT_FLAG_ACTIVE_SCAN | GSN_WDD_CONNECT_FLAG_HIGHEST_RSSI_NW));
   \   00000070   0xD008             BEQ.N    ??AppS2wCmd_Wassoc_test_4
  15089          		}
  15090          		else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
   \   00000072   0x2902             CMP      R1,#+2
   \   00000074   0xD106             BNE.N    ??AppS2wCmd_Wassoc_test_4
  15091          		{
  15092          			conctflags = GSN_WDD_CONNECT_FLAG_NONE;
  15093          			pWlanConfig->apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
   \   00000076   0x.... 0x....      BL       ?Subroutine124
  15094          			pWlanConfig->apSpecificCfg.hiddenSsid = s2wappMainTaskCtxt->bcastSsid;
  15095          			pWlanConfig->apSpecificCfg.dtimPeriod = s2wappMainTaskCtxt->dtimPeriod;
  15096          			s2wappMainTaskCtxt->if0.wddCtx.wlanConfigExtn.inactivityTimeoutInSec =s2wappMainTaskCtxt->inactivityTimeoutInSec;
   \                     ??CrossCallReturnLabel_591:
   \   0000007A   0xBF12             ITEE     NE 
   \   0000007C   0x2801             CMPNE    R0,#+1
   \   0000007E   0x2004             MOVEQ    R0,#+4
   \   00000080   0xF888 0x0040      STRBEQ   R0,[R8, #+64]
  15097          			if( (GSN_MAC_AUTH_SHARED == s2wCurrent.security.authMode ) ||
  15098          				(GSN_MAC_AUTH_OPEN == s2wCurrent.security.authMode))
  15099          			{
  15100          				pWlanConfig->securityCfg.mode= GSN_WDD_SEC_MODE_WEP;
  15101          			}
  15102                  }
  15103                          
  15104                  /*AppS2wHal_MacAddrSet(s2wCurrent.macAddr);*/
  15105          		L2ConnectStatus = 0;
   \                     ??AppS2wCmd_Wassoc_test_4:
   \   00000084   0x.... 0x....      BL       ?Subroutine3
  15106          		pWlanConfig->securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
  15107          		pWlanConfig->securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
  15108          		memcpy(pWlanConfig->securityCfg.eapConfig.userName.Name, s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
  15109          		pWlanConfig->securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
   \                     ??CrossCallReturnLabel_0:
   \   00000088   0x.... 0x....      BL       ?Subroutine93
  15110          		memcpy(pWlanConfig->securityCfg.eapConfig.password.Pwd, s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
  15111          		pWlanConfig->securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
   \                     ??CrossCallReturnLabel_495:
   \   0000008C   0x.... 0x....      BL       ?Subroutine58
  15112          
  15113                  if(s2wCurrent.eapCertTimeValidChkDisbl)
  15114                  {
  15115          	        pWlanConfig->securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
   \                     ??CrossCallReturnLabel_365:
   \   00000090   0xB938             CBNZ.N   R0,??AppS2wCmd_Wassoc_test_5
   \   00000092   0xF8DB 0x0138      LDR      R0,[R11, #+312]
   \   00000096   0x280D             CMP      R0,#+13
   \   00000098   0xBF02             ITTT     EQ 
   \   0000009A   0x9800             LDREQ    R0,[SP, #+0]
   \   0000009C   0x6840             LDREQ    R0,[R0, #+4]
   \   0000009E   0x281A             CMPEQ    R0,#+26
   \   000000A0   0xD10A             BNE.N    ??CrossCallReturnLabel_252
   \                     ??AppS2wCmd_Wassoc_test_5:
   \   000000A2   0x.... 0x....      BL       ?Subroutine89
  15116                  }
  15117          #if 1
  15118          		if( s2wCurrent.security.eap.useCaCert ||
  15119          			(( 13 == s2wCurrent.security.eap.outerAuth)&&
  15120          			( 26 == s2wCurrent.security.eap.innerAuth )))
  15121          		{
  15122                      index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
  15123                      if(index == -1)
   \                     ??CrossCallReturnLabel_478:
   \   000000A6   0xF110 0x0F01      CMN      R0,#+1
   \   000000AA   0xBF04             ITT      EQ 
   \   000000AC   0x.... 0x....      ADREQ.W  R0,`?<Constant "TLS_CA">`
   \   000000B0   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  15124                      {
  15125                          index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
  15126                      }
  15127          	    if(index != -1)
   \   000000B4   0x.... 0x....      BL       ?Subroutine48
  15128          	    {
  15129                          pWlanConfig->securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
  15130                          pWlanConfig->securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
  15131          	    }
  15132          		}
   \                     ??CrossCallReturnLabel_252:
   \   000000B8   0x.... 0x....      BL       ?Subroutine90
  15133                  index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
  15134                  if(index == -1)
   \                     ??CrossCallReturnLabel_481:
   \   000000BC   0xF110 0x0F01      CMN      R0,#+1
   \   000000C0   0xBF04             ITT      EQ 
   \   000000C2   0x.... 0x....      ADREQ.W  R0,`?<Constant "TLS_CLIENT">`
   \   000000C6   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  15135                  {
  15136                      index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
  15137                  }
  15138          	    if(index != -1)
   \   000000CA   0x.... 0x....      BL       ?Subroutine47
  15139          	    {
  15140          	    	pWlanConfig->securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
  15141                      pWlanConfig->securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
  15142          	    }
  15143                  index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
  15144                  if(index == -1)
   \                     ??CrossCallReturnLabel_249:
   \   000000CE   0xF110 0x0F01      CMN      R0,#+1
   \   000000D2   0xBF04             ITT      EQ 
   \   000000D4   0x.... 0x....      ADREQ.W  R0,`?<Constant "TLS_KEY">`
   \   000000D8   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
  15145                  {
  15146                      index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
  15147          	    }
  15148          	    if(index != -1)
   \   000000DC   0xF110 0x0F01      CMN      R0,#+1
   \   000000E0   0xD004             BEQ.N    ??AppS2wCmd_Wassoc_test_6
  15149          	    {
  15150          	        pWlanConfig->securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
   \   000000E2   0x.... 0x....      BL       ?Subroutine86
  15151                      pWlanConfig->securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
  15152          	    }
   \                     ??CrossCallReturnLabel_469:
   \   000000E6   0xE001             B.N      ??AppS2wCmd_Wassoc_test_6
  15153          #endif
  15154          TRY_AGAIN:
  15155          		/* start the timer*/
  15156          		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
  15157          						   GSN_SOFT_TMR_ONESHOT,0,
  15158          							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
  15159          						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
  15160          
  15161          		/* Enable crypto */
  15162          		GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
  15163          		
  15164                  status = GsnWdd_Connect(&s2wappMainTaskCtxt->if0.wddCtx, conctflags, pWlanConfig, NULL,
  15165                                 s2wApp_ConnectCb, s2wappMainTaskCtxt);
  15166                  if (GSN_OPERATION_IN_PROGRESS != status)
  15167                  {
  15168                      s2wApp_ConnectCb( NULL,status);
  15169                  }
  15170                  else
  15171                  {
  15172                      status = GSN_SUCCESS;
  15173                  }
  15174          
  15175                  /* wait on a semaphore to finish the asociation
  15176                   */
  15177                  GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
  15178                  
  15179                 AppS2w_ConctCbProcess(s2wappMainTaskCtxt, L2ConnectStatus);
  15180                 
  15181                 
  15182                 if(0 == eapFastRetryCnt && s2wLinkState == S2W_LINK_STATE_DISCONNECTED &&
  15183                      s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST)
  15184                 {
  15185                      eapFastRetryCnt++;
   \                     ??AppS2wCmd_Wassoc_test_7:
   \   000000E8   0xF04F 0x0901      MOV      R9,#+1
  15186                      goto TRY_AGAIN;
  15187                 }
   \                     ??AppS2wCmd_Wassoc_test_6:
   \   000000EC   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_2:
   \   000000F0   0x.... 0x....      BL       ?Subroutine82
   \                     ??CrossCallReturnLabel_635:
   \   000000F4   0x.... 0x....      BL       ?Subroutine83
   \                     ??CrossCallReturnLabel_462:
   \   000000F8   0x.... 0x....      BL       ?Subroutine102
   \                     ??CrossCallReturnLabel_523:
   \   000000FC   0xD004             BEQ.N    ??AppS2wCmd_Wassoc_test_8
   \   000000FE   0x4639             MOV      R1,R7
   \   00000100   0x2000             MOVS     R0,#+0
   \   00000102   0x.... 0x....      BL       s2wApp_ConnectCb
   \   00000106   0xE000             B.N      ??AppS2wCmd_Wassoc_test_9
   \                     ??AppS2wCmd_Wassoc_test_8:
   \   00000108   0x2700             MOVS     R7,#+0
   \                     ??AppS2wCmd_Wassoc_test_9:
   \   0000010A   0x.... 0x....      BL       ?Subroutine106
   \                     ??CrossCallReturnLabel_531:
   \   0000010E   0x69A1             LDR      R1,[R4, #+24]
   \   00000110   0x6830             LDR      R0,[R6, #+0]
   \   00000112   0x.... 0x....      BL       AppS2w_ConctCbProcess
   \   00000116   0xF1B9 0x0F00      CMP      R9,#+0
   \   0000011A   0xBF02             ITTT     EQ 
   \   0000011C   0x.... 0x....      LDREQ.W  R0,??DataTable515_8
   \   00000120   0x7800             LDRBEQ   R0,[R0, #+0]
   \   00000122   0x2800             CMPEQ    R0,#+0
   \   00000124   0xBF04             ITT      EQ 
   \   00000126   0xF8DB 0x0138      LDREQ    R0,[R11, #+312]
   \   0000012A   0x282B             CMPEQ    R0,#+43
   \   0000012C   0xD0DC             BEQ.N    ??AppS2wCmd_Wassoc_test_7
  15188                 
  15189                 
  15190                  if(params.mode == 2)
   \   0000012E   0xF89D 0x0034      LDRB     R0,[SP, #+52]
   \   00000132   0x2802             CMP      R0,#+2
   \   00000134   0xD002             BEQ.N    ??AppS2wCmd_Wassoc_test_10
  15191                  {
  15192                      current_wlan_info.mode = S2W_WLANDATA_MODE_AP;
  15193          	    }
  15194          	    else
  15195          	    {
  15196          	        GsnHeIf_DriverSuspend();
   \   00000136   0x.... 0x....      BL       GsnHeIf_DriverSuspend
  15197                      current_wlan_info.mode = S2W_WLANDATA_MODE_INFRA;
   \   0000013A   0x2001             MOVS     R0,#+1
  15198          		}
   \                     ??AppS2wCmd_Wassoc_test_10:
   \   0000013C   0x.... 0x....      BL       ?Subroutine129
  15199          #ifdef S2W_IP2WIFI_SUPPORT  // ip2wifi
  15200                  if((status == GSN_SUCCESS) &&(L2ConnectStatus == GSN_SUCCESS ))  
  15201                  {
  15202                      return S2W_SUCCESS;
  15203                  }
  15204                  else
  15205                  {
  15206                      return S2W_FAILURE;
  15207                  }
  15208                  
  15209          #else // s2w 
  15210                  if((status == GSN_SUCCESS) && (TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx)))
   \                     ??CrossCallReturnLabel_603:
   \   00000140   0xD13D             BNE.N    ??AppS2wCmd_Wassoc_test_11
   \   00000142   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_573:
   \   00000146   0x2801             CMP      R0,#+1
   \   00000148   0xD139             BNE.N    ??AppS2wCmd_Wassoc_test_11
  15211          
  15212                  {
  15213                      
  15214                      memset(&ipConfig,0,sizeof(ipConfig));
   \   0000014A   0x.... 0x....      BL       ?Subroutine29
  15215                      GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     ??CrossCallReturnLabel_76:
   \   0000014E   0x.... 0x....      BL       ?Subroutine123
  15216                      ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
   \                     ??CrossCallReturnLabel_585:
   \   00000152   0x.... 0x....      BL       ?Subroutine63
  15217                      
  15218                      ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
  15219                      if(ipConfig.ipv4.staticIp) // static ip
   \                     ??CrossCallReturnLabel_395:
   \   00000156   0xD00B             BEQ.N    ??AppS2wCmd_Wassoc_test_12
  15220                      {
  15221                          memcpy((UINT8*)&ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4);
   \   00000158   0x.... 0x....      BL       ?Subroutine11
  15222                          memcpy((UINT8*)&ipConfig.ipv4.subnetMask, s2wCurrent.netConf.netMask, 4);
   \                     ??CrossCallReturnLabel_17:
   \   0000015C   0x.... 0x....      BL       ?Subroutine12
  15223                          memcpy((UINT8*)&ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4);
   \                     ??CrossCallReturnLabel_19:
   \   00000160   0x.... 0x....      BL       ?Subroutine13
  15224                          memcpy((UINT8*)&ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
   \                     ??CrossCallReturnLabel_21:
   \   00000164   0x.... 0x....      BL       ?Subroutine14
  15225                          memcpy((UINT8*)&ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
   \                     ??CrossCallReturnLabel_23:
   \   00000168   0x.... 0x....      BL       ?Subroutine15
  15226                          S2wL3Wait = TRUE;
   \                     ??CrossCallReturnLabel_25:
   \   0000016C   0x2001             MOVS     R0,#+1
   \   0000016E   0x6060             STR      R0,[R4, #+4]
  15227                      }
  15228                       if(strlen((const char *)s2wCurrent.hostName) != 0)
   \                     ??AppS2wCmd_Wassoc_test_12:
   \   00000170   0x.... 0x....      BL       ?Subroutine69
   \                     ??CrossCallReturnLabel_420:
   \   00000174   0xB940             CBNZ.N   R0,??CrossCallReturnLabel_546
  15229          			 {
  15230          				 memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
  15231          					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
  15232          			 }
  15233          			else
  15234          			{     
  15235               			S2w_macAddrRTCGet(mac);
   \   00000176   0x.... 0x....      BL       ?Subroutine32
  15236          		      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
   \                     ??CrossCallReturnLabel_102:
   \   0000017A   0x.... 0x....      BL       ?Subroutine31
  15237          			    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
   \                     ??CrossCallReturnLabel_100:
   \   0000017E   0xA806             ADD      R0,SP,#+24
   \   00000180   0x.... 0x....      BL       strlen
   \   00000184   0x.... 0x....      BL       ?Subroutine111
  15238          				memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
  15239          					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
  15240              		}
   \                     ??CrossCallReturnLabel_546:
   \   00000188   0x.... 0x....      BL       ?Subroutine116
  15241                      s2wappMainTaskCtxt->if0.nwifCtx.notifyCb = DHCP_notify;
   \                     ??CrossCallReturnLabel_558:
   \   0000018C   0x.... 0x....      BL       ?Subroutine24
  15242                      memset(&dhcpParams,0,sizeof(dhcpParams));
  15243                      dhcpParams.dhcpMaxRetryCnt = S2W_DHCP_MAX_RETRY_COUNT;
   \                     ??CrossCallReturnLabel_53:
   \   00000190   0x.... 0x....      BL       ?Subroutine108
  15244                      dhcpParams.radioMode = s2wCurrent.netConf.dhcpRadioMode;
  15245                      dhcpParams.requestLeaseTime = s2wCurrent.dhcpRequestLeaseTime;            
  15246                      dhcpParams.dhcpRetryTimeout = s2wCurrent.dhcpRetryTimeout;
  15247                        S2wL3Wait = TRUE;
  15248                     
  15249                      status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, &dhcpParams);
   \                     ??CrossCallReturnLabel_539:
   \   00000194   0x.... 0x....      BL       ?Subroutine102
  15250          
  15251                       if((status != GSN_OPERATION_IN_PROGRESS) && !ipConfig.ipv4.staticIp)
   \                     ??CrossCallReturnLabel_521:
   \   00000198   0xD005             BEQ.N    ??AppS2wCmd_Wassoc_test_13
   \   0000019A   0x981C             LDR      R0,[SP, #+112]
   \   0000019C   0xB918             CBNZ.N   R0,??AppS2wCmd_Wassoc_test_13
  15252                          {
  15253                              DHCP_notify(status,NULL);
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x4638             MOV      R0,R7
   \   000001A2   0x.... 0x....      BL       DHCP_notify
  15254                          }
  15255                      if(ipConfig.ipv4.staticIp)
   \                     ??AppS2wCmd_Wassoc_test_13:
   \   000001A6   0x981C             LDR      R0,[SP, #+112]
   \   000001A8   0xB118             CBZ.N    R0,??AppS2wCmd_Wassoc_test_14
  15256                      {
  15257                          if(GSN_SUCCESS == status)
   \   000001AA   0xB927             CBNZ.N   R7,??CrossCallReturnLabel_530
  15258                          {
  15259                              L3ConnectStatus = TRUE;
   \   000001AC   0x2001             MOVS     R0,#+1
   \   000001AE   0x7060             STRB     R0,[R4, #+1]
   \   000001B0   0xE003             B.N      ??AppS2wCmd_Wassoc_test_15
  15260                      	}
  15261                      }
  15262                      else
  15263                      {
  15264                      	GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
   \                     ??AppS2wCmd_Wassoc_test_14:
   \   000001B2   0x.... 0x....      BL       ?Subroutine106
  15265                      }
  15266                      
  15267          #ifdef S2W_IPv6_SUPPORT
  15268                      memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
  15269                      memset(&userIpv6Config,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
  15270                      S2w_getDhcpv6Clientconfig(&dhcpParams); 
  15271                      if(s2wCurrent.netConf.dhcpv6)
  15272                      {
  15273                      	userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)(GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR | GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG );
  15274                      }
  15275                      else
  15276                      {
  15277                        userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR;
  15278                      }
  15279                      S2wL3Wait = TRUE;
  15280                      status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Config, &dhcpParams);
  15281                      if(status != GSN_OPERATION_IN_PROGRESS)
  15282                          {
  15283                              DHCP_notify(status,NULL);
  15284                          }
  15285                      GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
  15286          #endif
  15287                      
  15288                      if(L3ConnectStatus)
   \                     ??CrossCallReturnLabel_530:
   \   000001B6   0x7860             LDRB     R0,[R4, #+1]
   \   000001B8   0xB108             CBZ.N    R0,??AppS2wCmd_Wassoc_test_11
  15289                      {
  15290                          AppS2wHdrAndIpv4_Print();
   \                     ??AppS2wCmd_Wassoc_test_15:
   \   000001BA   0x.... 0x....      BL       AppS2wHdrAndIpv4_Print
  15291          #ifdef S2W_IPv6_SUPPORT
  15292                          if(L3ConnectStatus_v6)
  15293                          AppS2wHdrAndIpv6_Print();
  15294          #endif                
  15295          			}
  15296          
  15297                  }
  15298          
  15299          	if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==1))
   \                     ??AppS2wCmd_Wassoc_test_11:
   \   000001BE   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_572:
   \   000001C2   0x2801             CMP      R0,#+1
   \   000001C4   0xBF04             ITT      EQ 
   \   000001C6   0x7860             LDRBEQ   R0,[R4, #+1]
   \   000001C8   0x2801             CMPEQ    R0,#+1
   \   000001CA   0xD10B             BNE.N    ??AppS2wCmd_Wassoc_test_16
  15300                  {
  15301                          S2wL3Wait = FALSE;
   \   000001CC   0x2000             MOVS     R0,#+0
   \   000001CE   0x6060             STR      R0,[R4, #+4]
  15302                         if(ipConfig.ipv4.staticIp)
   \   000001D0   0x981C             LDR      R0,[SP, #+112]
   \   000001D2   0xB108             CBZ.N    R0,??CrossCallReturnLabel_592
  15303                         {
  15304                          nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
   \   000001D4   0x.... 0x....      BL       ?Subroutine125
  15305                         }
  15306                          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
   \                     ??CrossCallReturnLabel_592:
   \   000001D8   0x.... 0x....      BL       ?Subroutine66
  15307                          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
   \                     ??CrossCallReturnLabel_403:
   \   000001DC   0x.... 0x....      BL       ?Subroutine109
  15308           
  15309          		return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_541:
   \   000001E0   0x2000             MOVS     R0,#+0
   \   000001E2   0xE028             B.N      ??AppS2wCmd_Wassoc_test_0
  15310                  }
  15311                  else if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==0))
   \                     ??AppS2wCmd_Wassoc_test_16:
   \   000001E4   0x.... 0x....      BL       ?Subroutine120
   \                     ??CrossCallReturnLabel_571:
   \   000001E8   0x2801             CMP      R0,#+1
   \   000001EA   0xBF04             ITT      EQ 
   \   000001EC   0x7860             LDRBEQ   R0,[R4, #+1]
   \   000001EE   0x2800             CMPEQ    R0,#+0
   \   000001F0   0xD105             BNE.N    ??AppS2wCmd_Wassoc_test_17
  15312                  {
  15313                          GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \   000001F2   0x.... 0x....      BL       ?Subroutine123
  15314                          S2wL3Wait = FALSE;
   \                     ??CrossCallReturnLabel_584:
   \   000001F6   0x2000             MOVS     R0,#+0
   \   000001F8   0x6060             STR      R0,[R4, #+4]
  15315                     // AppS2wProcess_DhcpFailNotify();
  15316          			return S2W_ENOIP;
   \   000001FA   0x200F             MOVS     R0,#+15
   \   000001FC   0xE01B             B.N      ??AppS2wCmd_Wassoc_test_0
  15317                  }
  15318                  else
  15319                  {
  15320          			// failure case so check the log level and depends on it print info
  15321          			//if(s2wappMainTaskCtxt->logLevel > 0)s2wCurrent.logLevel
  15322                  	if(s2wCurrent.logLevel > 0)
   \                     ??AppS2wCmd_Wassoc_test_17:
   \   000001FE   0xF89B 0x03A8      LDRB     R0,[R11, #+936]
   \   00000202   0xB1B8             CBZ.N    R0,??AppS2wCmd_Wassoc_test_18
  15323          			{
  15324          				 UINT32 errorCode=0;
  15325          				 GSN_WDD_ERROR_T *logInfo = GsnWdd_ErrorGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000204   0x.... 0x....      BL       ?Subroutine104
   \                     ??CrossCallReturnLabel_526:
   \   00000208   0x4606             MOV      R6,R0
  15326                           if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_AP_NOT_FOUND)
   \   0000020A   0x6830             LDR      R0,[R6, #+0]
   \   0000020C   0x07C1             LSLS     R1,R0,#+31
   \   0000020E   0xBF48             IT       MI 
   \   00000210   0x2501             MOVMI    R5,#+1
  15327                           {
  15328                                errorCode = S2W_ERROR_CODE_AP_NOT_FOUND;
   \   00000212   0xD406             BMI.N    ??AppS2wCmd_Wassoc_test_19
  15329          				 }
  15330          				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WLAN_FAIL_TO_CONCT)
   \   00000214   0x0781             LSLS     R1,R0,#+30
   \   00000216   0xBF48             IT       MI 
   \   00000218   0x2502             MOVMI    R5,#+2
  15331          				 {
  15332          					  errorCode = S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT;
   \   0000021A   0xD402             BMI.N    ??AppS2wCmd_Wassoc_test_19
  15333          				 }
  15334          				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WPA_AUTH_FAILURE)
   \   0000021C   0x0740             LSLS     R0,R0,#+29
   \   0000021E   0xBF48             IT       MI 
   \   00000220   0x2503             MOVMI    R5,#+3
  15335          				 {
  15336          					  errorCode = S2W_ERROR_CODE_WPA_AUTH_FAILURE;
  15337          				 }
  15338          				 S2w_Printf(S2WError_List[errorCode]);
   \                     ??AppS2wCmd_Wassoc_test_19:
   \   00000222   0x.... 0x....      BL       ?Subroutine92
  15339          				 if(logInfo->reasonString != NULL)
   \                     ??CrossCallReturnLabel_493:
   \   00000226   0x68B0             LDR      R0,[R6, #+8]
   \   00000228   0xB120             CBZ.N    R0,??AppS2wCmd_Wassoc_test_18
  15340          				 {
  15341          					 S2w_Printf("\r\n");
   \   0000022A   0x.... 0x....      BL       ?Subroutine91
  15342                               S2w_Printf(logInfo->reasonString);
   \                     ??CrossCallReturnLabel_484:
   \   0000022E   0x68B0             LDR      R0,[R6, #+8]
   \   00000230   0x.... 0x....      BL       S2w_Printf
  15343          				 }
  15344          
  15345          			}
  15346                    return S2W_FAILURE;
   \                     ??AppS2wCmd_Wassoc_test_18:
   \   00000234   0x2001             MOVS     R0,#+1
  15347                  }
   \                     ??AppS2wCmd_Wassoc_test_0:
   \   00000236                      REQUIRE ?Subroutine0
   \   00000236                      ;; // Fall through to label ?Subroutine0
  15348          //return S2W_SUCCESS;
  15349          #endif // ip2wifi
  15350          }
  15351          
  15352          
  15353          
  15354          
  15355          /*UINT8 MQTT_AP_CONNECT()
  15356          {
  15357          	UINT8* SSID;
  15358          	UINT8* WWPA;
  15359                  UINT8 status;
  15360          
  15361          	SSID = malloc(strlen(AP_SSID));
  15362          	WWPA = malloc(strlen(AP_WWPA));
  15363          	
  15364          	sprintf(WWPA,"%s",AP_WWPA);
  15365          	status = AppS2wCmd_Wwpa(WWPA);
  15366          	if(status != 0)
  15367          	{
  15368          		S2w_Printf("\r\n wrong WWPA");
  15369          		goto error;
  15370          	}
  15371              sprintf(SSID,"%s",AP_SSID);
  15372          	status = AppS2wCmd_Wassoc_test(SSID);
  15373          	if(status != 0)
  15374          	{
  15375          		S2w_Printf("\r\n AP connect error");
  15376          		goto error;
  15377          	}
  15378          	free(SSID);
  15379          	free(WWPA);
  15380          	return status;
  15381          error : 
  15382          	free(SSID);
  15383          	free(WWPA);
  15384          	return 1;
  15385          }*/
  15386          
  15387          /*UINT8 MQTT_TCP_CONNECT(UINT8* CID)
  15388          {	*/
  15389          	/*S2W_NETDATA_T peerData;
  15390          	UINT8* temp;
  15391          	UINT32 status;
  15392          	UINT8 cid;
  15393          	temp = malloc(strlen(HOST_ADDRESS)+strlen(HOST_PORT)+1);
  15394          	sprintf(temp,"%s,%s",HOST_ADDRESS,HOST_PORT);
  15395          
  15396          	status = AppS2wParse_AddrPort(&temp,&peerData);
  15397          	if(status != 0)
  15398          	{
  15399          		S2w_Printf("\r\n Address port error");
  15400          		goto error;
  15401          	}
  15402          	peerData.proto = S2W_NETDATA_PROTO_TCP;
  15403              peerData.mode = S2W_NETDATA_MODE_CLIENT;
  15404          
  15405              status = AppS2wHal_NetTcpClient_test(&peerData, &cid);
  15406              if (status != 0)
  15407              {
  15408                 	goto error;
  15409              }
  15410          	*CID = cid;
  15411          
  15412          	free(temp);
  15413          	return status;
  15414          
  15415          error:
  15416          	free(temp);
  15417          	return 1;*/
  15418          
  15419            	/*UINT8 status = 0;
  15420              S2W_NETDATA_T peerData;
  15421          	
  15422           	peerData.ipAddr[0] = 54;
  15423            	peerData.ipAddr[1] = 178;
  15424            	peerData.ipAddr[2] = 154;
  15425            	peerData.ipAddr[3] = 197;
  15426            	peerData.port = 8883;  
  15427            	peerData.proto = S2W_NETDATA_PROTO_TCP;
  15428            	peerData.mode = S2W_NETDATA_MODE_CLIENT;
  15429            	status = AppS2wHal_NetTcpClient_test(&peerData, CID);
  15430          	if (status != 0)
  15431              {
  15432          	    S2w_Printf("\r\n TcpClient error");
  15433          		return 1;
  15434              }
  15435          	
  15436          	return 0;
  15437          }
  15438          
  15439          UINT8 MQTT_SSL_CONNECT(UINT8 CID)
  15440          {
  15441          	UINT8* SSL_CID;
  15442          	//UINT8 CID;
  15443          	UINT8 status = 1;
  15444          	SSL_CID = malloc(3);
  15445          
  15446          	sprintf(SSL_CID,"%d",CID);
  15447          	
  15448          	S2w_Printf("\r\n SSL CID : %d",CID);
  15449          	status = AppS2wCmd_SSLOpen_test(CID);
  15450          	if(status != 0)
  15451          	{
  15452          		S2w_Printf("\r\n SSL open error");
  15453          		free(SSL_CID);
  15454          		return 1;
  15455          	}
  15456          	free(SSL_CID);
  15457          	return status;
  15458          }
  15459          
  15460          void TEST_START()
  15461          {
  15462            UINT8 cid;
  15463            UINT8 status;
  15464            
  15465            MQTT_AP_CONNECT();
  15466            GsnTaskSleep(5000);
  15467            MQTT_TCP_CONNECT(&cid);
  15468            GsnTaskSleep(5000);
  15469            MQTT_SSL_CONNECT(cid);
  15470            GsnTaskSleep(5000);
  15471          }*/
  15472          
  15473          

   \                                 In section .text, align 2, keep-with-next
  15474          UINT8
  15475          App2wCmd_mqtt_publish(UINT8* ptr)
  15476          {
   \                     App2wCmd_mqtt_publish:
   \   00000000   0xB580             PUSH     {R7,LR}
  15477            TEST_START();
   \   00000002   0x.... 0x....      BL       TEST_START
  15478            return 0;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD02             POP      {R1,PC}          ;; return
  15479          }

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nIP:%d.%d.%d.%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012IP:%d.%d.%d.%d"
   \              0x49 0x50    
   \              0x3A 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCA certificate not ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015CA certificate not found"
   \              0x43 0x41    
   \              0x20 0x63    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\r client certificate...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015 client certificate not found"
   \              0x20 0x63    
   \              0x6C 0x69    
   \              0x65 0x6E    
   \              0x74 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rclient Key not found">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015client Key not found"
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x4B    
   \              0x65 0x79    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x66    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\r%x">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015%x"
   \              0x25 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%d/%d/%d,%d:%d:%d,%...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%d/%d/%d,%d:%d:%d,%lld\015\012"
   \              0x25 0x64    
   \              0x2F 0x25    
   \              0x64 0x2F    
   \              0x25 0x64    
   \              0x2C 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x3A 0x25    
   \              0x64 0x2C    
   \              0x25 0x6C    
   \              0x6C 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n    IP              ...">`:
   \   00000000   0x0A 0x20          DC8 "\012    IP              SubNet         Gateway   \015\012 "
   \              0x20 0x20    
   \              0x20 0x49    
   \              0x50 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x53    
   \              0x75 0x62    
   \              0x4E 0x65    
   \              0x74 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x47 0x61    
   \              0x74 0x65    
   \              0x77 0x61    
   \              0x79 0x20    
   \              0x20 0x20    
   \              0x0D 0x0A    
   \              0x20 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d.%d.%d.%d:%d.%d.%d....">`:
   \   00000000   0x25 0x64          DC8 "%d.%d.%d.%d:%d.%d.%d.%d:%d.%d.%d.%d "
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x3A    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378:
   \   00000000   0x........         DC32     s2wSslConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378_1:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378_2:
   \   00000000   0x........         DC32     httpConfAtCmd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378_3:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378_4:
   \   00000000   0x........         DC32     OtaFwupConfParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable378_5:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n No valid Cids\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 No valid Cids\015\012"
   \              0x20 0x4E    
   \              0x6F 0x20    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x20    
   \              0x43 0x69    
   \              0x64 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCID\\tTYPE\\tMODE\\tLOCAL...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 43H, 49H, 44H, 9, 54H, 59H
   \              0x43 0x49    
   \              0x44 0x09    
   \              0x54 0x59    
   \   00000008   0x50 0x45          DC8 50H, 45H, 9, 4DH, 4FH, 44H, 45H, 9
   \              0x09 0x4D    
   \              0x4F 0x44    
   \              0x45 0x09    
   \   00000010   0x4C 0x4F          DC8 4CH, 4FH, 43H, 41H, 4CH, 20H, 50H, 4FH
   \              0x43 0x41    
   \              0x4C 0x20    
   \              0x50 0x4F    
   \   00000018   0x52 0x54          DC8 52H, 54H, 9, 52H, 45H, 4DH, 4FH, 54H
   \              0x09 0x52    
   \              0x45 0x4D    
   \              0x4F 0x54    
   \   00000020   0x45 0x20          DC8 45H, 20H, 50H, 4FH, 52H, 54H, 9, 52H
   \              0x50 0x4F    
   \              0x52 0x54    
   \              0x09 0x52    
   \   00000028   0x45 0x4D          DC8 45H, 4DH, 4FH, 54H, 45H, 20H, 49H, 50H
   \              0x4F 0x54    
   \              0x45 0x20    
   \              0x49 0x50    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "HTTP\\t">`:
   \   00000000   0x48 0x54          DC8 "HTTP\t"
   \              0x54 0x50    
   \              0x09 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TCP-SSL ">`:
   \   00000000   0x54 0x43          DC8 "TCP-SSL "
   \              0x50 0x2D    
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "UDP\\t">`:
   \   00000000   0x55 0x44          DC8 "UDP\t"
   \              0x50 0x09    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%4d\\t\\t%4d\\t\\t%3d.%3d.%3d...">`:
   \   00000000   0x25 0x34          DC8 "%4d\t\t%4d\t\t%3d.%3d.%3d.%3d\015\012"
   \              0x64 0x09    
   \              0x09 0x25    
   \              0x34 0x64    
   \              0x09 0x09    
   \              0x25 0x33    
   \              0x64 0x2E    
   \              0x25 0x33    
   \              0x64 0x2E    
   \              0x25 0x33    
   \              0x64 0x2E    
   \              0x25 0x33    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TCP\\t">`:
   \   00000000   0x54 0x43          DC8 "TCP\t"
   \              0x50 0x09    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SERVER\\t">`:
   \   00000000   0x53 0x45          DC8 "SERVER\t"
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CLIENT\\t">`:
   \   00000000   0x43 0x4C          DC8 "CLIENT\t"
   \              0x49 0x45    
   \              0x4E 0x54    
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable381:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable382:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nMinScanTime=%d\\r\\nMax...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012MinScanTime=%d\015\012MaxScanTime=%d\015\012"
   \              0x4D 0x69    
   \              0x6E 0x53    
   \              0x63 0x61    
   \              0x6E 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x4D 0x61    
   \              0x78 0x53    
   \              0x63 0x61    
   \              0x6E 0x54    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable384:
   \   00000000   0x25 0x78          DC8      "%x\t"
   \              0x09 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable384_1:
   \   00000000   0x........         DC32     AppMcu_RespTimeoutCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable386:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %02x:%02x:%02x:%02x:...">`:
   \   00000000   0x20 0x25          DC8 " %02x:%02x:%02x:%02x:%02x:%02x, "
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable388:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable388_1:
   \   00000000   0x........         DC32     stbySuccess

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", %02d">`:
   \   00000000   0x2C 0x20          DC8 ", %02d"
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n %02x:%02x:%02x:%02...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 %02x:%02x:%02x:%02x:%02x:%02x, "
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ",  ADHOC ">`:
   \   00000000   0x2C 0x20          DC8 ",  ADHOC "
   \              0x20 0x41    
   \              0x44 0x48    
   \              0x4F 0x43    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ",  INFRA ">`:
   \   00000000   0x2C 0x20          DC8 ",  INFRA "
   \              0x20 0x49    
   \              0x4E 0x46    
   \              0x52 0x41    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", %d ,">`:
   \   00000000   0x2C 0x20          DC8 ", %d ,"
   \              0x25 0x64    
   \              0x20 0x2C    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA2-PERSONAL">`:
   \   00000000   0x57 0x50          DC8 "WPA2-PERSONAL"
   \              0x41 0x32    
   \              0x2D 0x50    
   \              0x45 0x52    
   \              0x53 0x4F    
   \              0x4E 0x41    
   \              0x4C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA2-ENTERPRISE">`:
   \   00000000   0x57 0x50          DC8 "WPA2-ENTERPRISE"
   \              0x41 0x32    
   \              0x2D 0x45    
   \              0x4E 0x54    
   \              0x45 0x52    
   \              0x50 0x52    
   \              0x49 0x53    
   \              0x45 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA-PERSONAL">`:
   \   00000000   0x57 0x50          DC8 "WPA-PERSONAL"
   \              0x41 0x2D    
   \              0x50 0x45    
   \              0x52 0x53    
   \              0x4F 0x4E    
   \              0x41 0x4C    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WPA-ENTERPRISE">`:
   \   00000000   0x57 0x50          DC8 "WPA-ENTERPRISE"
   \              0x41 0x2D    
   \              0x45 0x4E    
   \              0x54 0x45    
   \              0x52 0x50    
   \              0x52 0x49    
   \              0x53 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable391:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable391_1:
   \   00000000   0x57 0x45          DC8      "WEP"
   \              0x50 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable391_2:
   \   00000000   0x20 0x25          DC8      " %s"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n       BSSID       ...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000008   0x20 0x42          DC8 20H, 42H, 53H, 53H, 49H, 44H, 20H, 20H
   \              0x53 0x53    
   \              0x49 0x44    
   \              0x20 0x20    
   \   00000010   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000018   0x20 0x20          DC8 20H, 20H, 20H, 20H, 53H, 53H, 49H, 44H
   \              0x20 0x20    
   \              0x53 0x53    
   \              0x49 0x44    
   \   00000020   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000028   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000030   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 43H, 68H, 61H
   \              0x20 0x20    
   \              0x20 0x43    
   \              0x68 0x61    
   \   00000038   0x6E 0x6E          DC8 6EH, 6EH, 65H, 6CH, 20H, 20H, 54H, 79H
   \              0x65 0x6C    
   \              0x20 0x20    
   \              0x54 0x79    
   \   00000040   0x70 0x65          DC8 70H, 65H, 20H, 20H, 52H, 53H, 53H, 49H
   \              0x20 0x20    
   \              0x52 0x53    
   \              0x53 0x49    
   \   00000048   0x20 0x53          DC8 20H, 53H, 65H, 63H, 75H, 72H, 69H, 74H
   \              0x65 0x63    
   \              0x75 0x72    
   \              0x69 0x74    
   \   00000050   0x79 0x00          DC8 79H, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNO ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012NO ERROR"
   \              0x4E 0x4F    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNo.Of AP Found:%d\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012No.Of AP Found:%d\015\012"
   \              0x4E 0x6F    
   \              0x2E 0x4F    
   \              0x66 0x20    
   \              0x41 0x50    
   \              0x20 0x46    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x3A 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Serial2Wifi">`:
   \   00000000   0x53 0x65          DC8 "Serial2Wifi"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x66    
   \              0x69 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable393:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable393_1:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable393_2:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable395:
   \   00000000   0x........         DC32     curCid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable395_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable398:
   \   00000000   0x........         DC32     AppS2w_WlanRespTmrCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable400:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable400_1:
   \   00000000   0x........         DC32     scanDisplayInfoCount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable400_2:
   \   00000000   0x........         DC32     scanDisplayInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable400_3:
   \   00000000   0xB000010D         DC32     0xb000010d

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable401:
   \   00000000   0x47 0x53          DC8      "GS_"
   \              0x5F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable401_1:
   \   00000000   0x........         DC32     stScanSemaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable402:
   \   00000000   0x........         DC32     `?<Constant "NONE">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x:%02x:%02x:%02x:%02x:%02x"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable403:
   \   00000000   0x........         DC32     AppS2wScan_Notification

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable403_1:
   \   00000000   0x........         DC32     s2wScanUserEntryBuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable403_2:
   \   00000000   0x80000001         DC32     0x80000001

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nRXLEVEL=%02x,TXLEVE...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012RXLEVEL=%02x,TXLEVEL=%02x\015\012"
   \              0x52 0x58    
   \              0x4C 0x45    
   \              0x56 0x45    
   \              0x4C 0x3D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2C 0x54    
   \              0x58 0x4C    
   \              0x45 0x56    
   \              0x45 0x4C    
   \              0x3D 0x25    
   \              0x30 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable409:
   \   00000000   0x........         DC32     `?<Constant "TLS_CA">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable409_1:
   \   00000000   0x........         DC32     `?<Constant "TLS_CLIENT">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable409_2:
   \   00000000   0x........         DC32     `?<Constant "TLS_KEY">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable409_3:
   \   00000000   0x22 0x00          DC8      "\"",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable409_4:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NONE">`:
   \   00000000   0x4E 0x4F          DC8 "NONE"
   \              0x4E 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nMAC=%02x:%02x:%02x:%...">`:
   \   00000000   0x0A 0x4D          DC8 "\012MAC=%02x:%02x:%02x:%02x:%02x:%02x\015\012"
   \              0x41 0x43    
   \              0x3D 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WSTATE=CONNECTED   ">`:
   \   00000000   0x57 0x53          DC8 "WSTATE=CONNECTED   "
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x3D 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x45 0x44    
   \              0x20 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WSTATE=NOT CONNECTED  ">`:
   \   00000000   0x57 0x53          DC8 "WSTATE=NOT CONNECTED  "
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x3D 0x4E    
   \              0x4F 0x54    
   \              0x20 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x45 0x44    
   \              0x20 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  MODE=NONE \\r\\n">`:
   \   00000000   0x20 0x20          DC8 "  MODE=NONE \015\012"
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3D 0x4E    
   \              0x4F 0x4E    
   \              0x45 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  MODE=IBSS \\r\\n">`:
   \   00000000   0x20 0x20          DC8 "  MODE=IBSS \015\012"
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3D 0x49    
   \              0x42 0x53    
   \              0x53 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  MODE=AP \\r\\n">`:
   \   00000000   0x20 0x20          DC8 "  MODE=AP \015\012"
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3D 0x41    
   \              0x50 0x20    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "  MODE=STA \\r\\n">`:
   \   00000000   0x20 0x20          DC8 "  MODE=STA \015\012"
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3D 0x53    
   \              0x54 0x41    
   \              0x20 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " SECURITY=%s\\r\\nRSSI=%d\\r\\n">`:
   \   00000000   0x20 0x53          DC8 " SECURITY=%s\015\012RSSI=%d\015\012"
   \              0x45 0x43    
   \              0x55 0x52    
   \              0x49 0x54    
   \              0x59 0x3D    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x52 0x53    
   \              0x53 0x49    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " CHANNEL=NONE  ">`:
   \   00000000   0x20 0x43          DC8 " CHANNEL=NONE  "
   \              0x48 0x41    
   \              0x4E 0x4E    
   \              0x45 0x4C    
   \              0x3D 0x4E    
   \              0x4F 0x4E    
   \              0x45 0x20    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BSSID=%02x:%02x:%02x:...">`:
   \   00000000   0x42 0x53          DC8 "BSSID=%02x:%02x:%02x:%02x:%02x:%02x   SSID=\""
   \              0x53 0x49    
   \              0x44 0x3D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x20    
   \              0x20 0x20    
   \              0x53 0x53    
   \              0x49 0x44    
   \              0x3D 0x22    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " CHANNEL=%d  ">`:
   \   00000000   0x20 0x43          DC8 " CHANNEL=%d  "
   \              0x48 0x41    
   \              0x4E 0x4E    
   \              0x45 0x4C    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BSSID=00:00:00:00:00:...">`:
   \   00000000   0x42 0x53          DC8 "BSSID=00:00:00:00:00:00   SSID=\""
   \              0x53 0x49    
   \              0x44 0x3D    
   \              0x30 0x30    
   \              0x3A 0x30    
   \              0x30 0x3A    
   \              0x30 0x30    
   \              0x3A 0x30    
   \              0x30 0x3A    
   \              0x30 0x30    
   \              0x3A 0x30    
   \              0x30 0x20    
   \              0x20 0x20    
   \              0x53 0x53    
   \              0x49 0x44    
   \              0x3D 0x22    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "IP addr=%d.%d.%d.%d  ...">`:
   \   00000000   0x49 0x50          DC8 "IP addr=%d.%d.%d.%d   SubNet=%d.%d.%d.%d "
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x3D    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x53 0x75    
   \              0x62 0x4E    
   \              0x65 0x74    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x20 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " Gateway=%d.%d.%d.%d\\r\\n">`:
   \   00000000   0x20 0x47          DC8 " Gateway=%d.%d.%d.%d\015\012"
   \              0x61 0x74    
   \              0x65 0x77    
   \              0x61 0x79    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DNS1=%d.%d.%d.%d     ...">`:
   \   00000000   0x44 0x4E          DC8 44H, 4EH, 53H, 31H, 3DH, 25H, 64H, 2EH
   \              0x53 0x31    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \   00000008   0x25 0x64          DC8 25H, 64H, 2EH, 25H, 64H, 2EH, 25H, 64H
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \   00000010   0x20 0x20          DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 44H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x44    
   \   00000018   0x4E 0x53          DC8 4EH, 53H, 32H, 3DH, 25H, 64H, 2EH, 25H
   \              0x32 0x3D    
   \              0x25 0x64    
   \              0x2E 0x25    
   \   00000020   0x64 0x2E          DC8 64H, 2EH, 25H, 64H, 2EH, 25H, 64H, 0DH
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \   00000028   0x0A 0x52          DC8 0AH, 52H, 78H, 20H, 43H, 6FH, 75H, 6EH
   \              0x78 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \   00000030   0x74 0x3D          DC8 74H, 3DH, 25H, 64H, 20H, 20H, 20H, 20H
   \              0x25 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000038   0x20 0x54          DC8 20H, 54H, 78H, 20H, 43H, 6FH, 75H, 6EH
   \              0x78 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \   00000040   0x74 0x3D          DC8 74H, 3DH, 25H, 64H, 20H, 0DH, 0AH, 0
   \              0x25 0x64    
   \              0x20 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413:
   \   00000000   0x41010018         DC32     0x41010018

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_1:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_3:
   \   00000000   0x........         DC32     globalUseHRssi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_4:
   \   00000000   0x........         DC32     GratiousArpHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_5:
   \   00000000   0xB0000206         DC32     0xb0000206

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_6:
   \   00000000   0x........         DC32     s2wL2L3ConnectSemaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_7:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_8:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable413_9:
   \   00000000   0x........         DC32     s2wFlashParams

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable414:
   \   00000000   0x........         DC32     `?<Constant "%s%2.2x%2.2x%2.2x">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nS2W APP VERSION=%s\\r...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012S2W APP VERSION=%s\015\012S2W GEPS VERSION=%d.%d.%d"
   \              0x53 0x32    
   \              0x57 0x20    
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x56 0x45    
   \              0x52 0x53    
   \              0x49 0x4F    
   \              0x4E 0x3D    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x53 0x32    
   \              0x57 0x20    
   \              0x47 0x45    
   \              0x50 0x53    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nS2W WLAN VERSION=%d...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012S2W WLAN VERSION=%d.%d.%d\015\012"
   \              0x53 0x32    
   \              0x57 0x20    
   \              0x57 0x4C    
   \              0x41 0x4E    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GS2K_DEFAULT">`:
   \   00000000   0x47 0x53          DC8 "GS2K_DEFAULT"
   \              0x32 0x4B    
   \              0x5F 0x44    
   \              0x45 0x46    
   \              0x41 0x55    
   \              0x4C 0x54    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "S2W BIN TYPE=%s\\r\\nS2W ...">`:
   \   00000000   0x53 0x32          DC8 "S2W BIN TYPE=%s\015\012S2W RELEASE TYPE=%s\015\012"
   \              0x57 0x20    
   \              0x42 0x49    
   \              0x4E 0x20    
   \              0x54 0x59    
   \              0x50 0x45    
   \              0x3D 0x25    
   \              0x73 0x0D    
   \              0x0A 0x53    
   \              0x32 0x57    
   \              0x20 0x52    
   \              0x45 0x4C    
   \              0x45 0x41    
   \              0x53 0x45    
   \              0x20 0x54    
   \              0x59 0x50    
   \              0x45 0x3D    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "15:23:23">`:
   \   00000000   0x31 0x35          DC8 "15:23:23"
   \              0x3A 0x32    
   \              0x33 0x3A    
   \              0x32 0x33    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BUILD TIME=%s\\r\\n">`:
   \   00000000   0x42 0x55          DC8 "BUILD TIME=%s\015\012"
   \              0x49 0x4C    
   \              0x44 0x20    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x3D 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Nov 19 2015">`:
   \   00000000   0x4E 0x6F          DC8 "Nov 19 2015"
   \              0x76 0x20    
   \              0x31 0x39    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x35 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "BUILD DATE=%s\\r\\n">`:
   \   00000000   0x42 0x55          DC8 "BUILD DATE=%s\015\012"
   \              0x49 0x4C    
   \              0x44 0x20    
   \              0x44 0x41    
   \              0x54 0x45    
   \              0x3D 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WLAN EXT VERSION=%d\\r\\n">`:
   \   00000000   0x57 0x4C          DC8 "WLAN EXT VERSION=%d\015\012"
   \              0x41 0x4E    
   \              0x20 0x45    
   \              0x58 0x54    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "S2W APP EXT VERSION=%s\\r\\n">`:
   \   00000000   0x53 0x32          DC8 "S2W APP EXT VERSION=%s\015\012"
   \              0x57 0x20    
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x45 0x58    
   \              0x54 0x20    
   \              0x56 0x45    
   \              0x52 0x53    
   \              0x49 0x4F    
   \              0x4E 0x3D    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WLAN FEAT BMAP=%016llx\\r\\n">`:
   \   00000000   0x57 0x4C          DC8 "WLAN FEAT BMAP=%016llx\015\012"
   \              0x41 0x4E    
   \              0x20 0x46    
   \              0x45 0x41    
   \              0x54 0x20    
   \              0x42 0x4D    
   \              0x41 0x50    
   \              0x3D 0x25    
   \              0x30 0x31    
   \              0x36 0x6C    
   \              0x6C 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GEPS EXT VERSION=%d\\r\\n">`:
   \   00000000   0x47 0x45          DC8 "GEPS EXT VERSION=%d\015\012"
   \              0x50 0x53    
   \              0x20 0x45    
   \              0x58 0x54    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No Flash">`:
   \   00000000   0x4E 0x6F          DC8 "No Flash"
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FLASH ID=0x%08x">`:
   \   00000000   0x46 0x4C          DC8 "FLASH ID=0x%08x"
   \              0x41 0x53    
   \              0x48 0x20    
   \              0x49 0x44    
   \              0x3D 0x30    
   \              0x78 0x25    
   \              0x30 0x38    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MICRONIX-2MB">`:
   \   00000000   0x4D 0x49          DC8 "MICRONIX-2MB"
   \              0x43 0x52    
   \              0x4F 0x4E    
   \              0x49 0x58    
   \              0x2D 0x32    
   \              0x4D 0x42    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MICRONIX-4MB">`:
   \   00000000   0x4D 0x49          DC8 "MICRONIX-4MB"
   \              0x43 0x52    
   \              0x4F 0x4E    
   \              0x49 0x58    
   \              0x2D 0x34    
   \              0x4D 0x42    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GIGA-4MB">`:
   \   00000000   0x47 0x49          DC8 "GIGA-4MB"
   \              0x47 0x41    
   \              0x2D 0x34    
   \              0x4D 0x42    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GIGA-2MB">`:
   \   00000000   0x47 0x49          DC8 "GIGA-2MB"
   \              0x47 0x41    
   \              0x2D 0x32    
   \              0x4D 0x42    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EON-2MB">`:
   \   00000000   0x45 0x4F          DC8 "EON-2MB"
   \              0x4E 0x2D    
   \              0x32 0x4D    
   \              0x42 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EON-4MB">`:
   \   00000000   0x45 0x4F          DC8 "EON-4MB"
   \              0x4E 0x2D    
   \              0x34 0x4D    
   \              0x42 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "UNKNOWN">`:
   \   00000000   0x55 0x4E          DC8 "UNKNOWN"
   \              0x4B 0x4E    
   \              0x4F 0x57    
   \              0x4E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable415:
   \   00000000   0x47 0x41          DC8      0x47, 0x41, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable415_1:
   \   00000000   0x31 0x30          DC8      0x31, 0x30, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable416:
   \   00000000   0xC0000203         DC32     0xc0000203

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable416_1:
   \   00000000   0x3A 0x25          DC8      ":%s"
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+WAUTH=%d +WWPA=\\"%s\\"">`:
   \   00000000   0x2B 0x57          DC8 "+WAUTH=%d +WWPA=\"%s\""
   \              0x41 0x55    
   \              0x54 0x48    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x2B 0x57    
   \              0x57 0x50    
   \              0x41 0x3D    
   \              0x22 0x25    
   \              0x73 0x22    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+PSK-valid=%d +SSID=%s">`:
   \   00000000   0x2B 0x50          DC8 "+PSK-valid=%d +SSID=%s"
   \              0x53 0x4B    
   \              0x2D 0x76    
   \              0x61 0x6C    
   \              0x69 0x64    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x2B 0x53    
   \              0x53 0x49    
   \              0x44 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s+WWEP%d=">`:
   \   00000000   0x25 0x73          DC8 "%s+WWEP%d="
   \              0x2B 0x57    
   \              0x57 0x45    
   \              0x50 0x25    
   \              0x64 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d.%d.%d.%d">`:
   \   00000000   0x25 0x64          DC8 "%d.%d.%d.%d"
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable417:
   \   00000000   0x........         DC32     s2wCurrent+0x1B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable417_1:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable417_2:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable417_3:
   \   00000000   0x........         DC32     s2wSerialPortHandle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable417_4:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\",">`:
   \   00000000   0x22 0x2C          DC8 "\","
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "C%d &Y%d ">`:
   \   00000000   0x43 0x25          DC8 "C%d &Y%d "
   \              0x64 0x20    
   \              0x26 0x59    
   \              0x25 0x64    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E%d V%d B=%u,%d,">`:
   \   00000000   0x45 0x25          DC8 "E%d V%d B=%u,%d,"
   \              0x64 0x20    
   \              0x56 0x25    
   \              0x64 0x20    
   \              0x42 0x3D    
   \              0x25 0x75    
   \              0x2C 0x25    
   \              0x64 0x2C    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c,%d">`:
   \   00000000   0x25 0x63          DC8 "%c,%d"
   \              0x2C 0x25    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " &K%d &R%d\\r\\n">`:
   \   00000000   0x20 0x26          DC8 " &K%d &R%d\015\012"
   \              0x4B 0x25    
   \              0x64 0x20    
   \              0x26 0x52    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+WRETRY=%u +WP=%d +WR...">`:
   \   00000000   0x2B 0x57          DC8 "+WRETRY=%u +WP=%d +WRXPS=%d +WRXACTIVE=%d\015\012"
   \              0x52 0x45    
   \              0x54 0x52    
   \              0x59 0x3D    
   \              0x25 0x75    
   \              0x20 0x2B    
   \              0x57 0x50    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x2B 0x57    
   \              0x52 0x58    
   \              0x50 0x53    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x2B 0x57    
   \              0x52 0x58    
   \              0x41 0x43    
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+BDATA=%d  +WSEC=%d...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+BDATA=%d  +WSEC=%d  +ASYNCMSG=%d "
   \              0x2B 0x42    
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x2B    
   \              0x57 0x53    
   \              0x45 0x43    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x2B    
   \              0x41 0x53    
   \              0x59 0x4E    
   \              0x43 0x4D    
   \              0x53 0x47    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable418:
   \   00000000   0x2C 0x0D          DC8      ",\r\n"
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable418_1:
   \   00000000   0x2C 0x25          DC8      ",%d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\",">_1`:
   \   00000000   0x22 0x2C          DC8 "\","
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nACTIVE CLIENT PROFI...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ACTIVE CLIENT PROFILE\015\012"
   \              0x41 0x43    
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x20 0x43    
   \              0x4C 0x49    
   \              0x45 0x4E    
   \              0x54 0x20    
   \              0x50 0x52    
   \              0x4F 0x46    
   \              0x49 0x4C    
   \              0x45 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+DNS1=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+DNS1="
   \              0x2B 0x44    
   \              0x4E 0x53    
   \              0x31 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ", +DNS2=">`:
   \   00000000   0x2C 0x20          DC8 ", +DNS2="
   \              0x2B 0x44    
   \              0x4E 0x53    
   \              0x32 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+WM=%d ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+WM=%d "
   \              0x2B 0x57    
   \              0x4D 0x3D    
   \              0x25 0x64    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant ",%d\\r\\n">`:
   \   00000000   0x2C 0x25          DC8 ",%d\015\012"
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+NAUTO=%d,%d,">`:
   \   00000000   0x2B 0x4E          DC8 "+NAUTO=%d,%d,"
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x2C 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nACTIVE LIMITED-AP P...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ACTIVE LIMITED-AP PROFILE\015\012+NSET="
   \              0x41 0x43    
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x20 0x4C    
   \              0x49 0x4D    
   \              0x49 0x54    
   \              0x45 0x44    
   \              0x2D 0x41    
   \              0x50 0x20    
   \              0x50 0x52    
   \              0x4F 0x46    
   \              0x49 0x4C    
   \              0x45 0x0D    
   \              0x0A 0x2B    
   \              0x4E 0x53    
   \              0x45 0x54    
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+WAUTO=%d,\\"">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+WAUTO=%d,\""
   \              0x2B 0x57    
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x22 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+STATIONS=%d  +REGDOM...">`:
   \   00000000   0x2B 0x53          DC8 "+STATIONS=%d  +REGDOMAIN=%d  +BEACONINTRL=%d "
   \              0x54 0x41    
   \              0x54 0x49    
   \              0x4F 0x4E    
   \              0x53 0x3D    
   \              0x25 0x64    
   \              0x20 0x20    
   \              0x2B 0x52    
   \              0x45 0x47    
   \              0x44 0x4F    
   \              0x4D 0x41    
   \              0x49 0x4E    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x2B    
   \              0x42 0x45    
   \              0x41 0x43    
   \              0x4F 0x4E    
   \              0x49 0x4E    
   \              0x54 0x52    
   \              0x4C 0x3D    
   \              0x25 0x64    
   \              0x20 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+DHCPSRVR=%d  +DHCP...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+DHCPSRVR=%d  +DHCPCLIENTS=%d  +DHCPLEASE=%d "
   \              0x2B 0x44    
   \              0x48 0x43    
   \              0x50 0x53    
   \              0x52 0x56    
   \              0x52 0x3D    
   \              0x25 0x64    
   \              0x20 0x20    
   \              0x2B 0x44    
   \              0x48 0x43    
   \              0x50 0x43    
   \              0x4C 0x49    
   \              0x45 0x4E    
   \              0x54 0x53    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x2B    
   \              0x44 0x48    
   \              0x43 0x50    
   \              0x4C 0x45    
   \              0x41 0x53    
   \              0x45 0x3D    
   \              0x25 0x64    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n+DNSSRVR=%d  +DNSDO...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012+DNSSRVR=%d  +DNSDOMAIN=%s"
   \              0x2B 0x44    
   \              0x4E 0x53    
   \              0x53 0x52    
   \              0x56 0x52    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x20 0x2B    
   \              0x44 0x4E    
   \              0x53 0x44    
   \              0x4F 0x4D    
   \              0x41 0x49    
   \              0x4E 0x3D    
   \              0x25 0x73    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+WAUTO=%d,\\"">`:
   \   00000000   0x2B 0x57          DC8 "+WAUTO=%d,\""
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x25    
   \              0x64 0x2C    
   \              0x22 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "+NDHCP=%d +NSET=">`:
   \   00000000   0x2B 0x4E          DC8 "+NDHCP=%d +NSET="
   \              0x44 0x48    
   \              0x43 0x50    
   \              0x3D 0x25    
   \              0x64 0x20    
   \              0x2B 0x4E    
   \              0x53 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\",%02x:%02x:%02x:%02x...">`:
   \   00000000   0x22 0x2C          DC8 "\",%02x:%02x:%02x:%02x:%02x:%02x"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nACTIVE PROFILE\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ACTIVE PROFILE\015\012"
   \              0x41 0x43    
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x20 0x50    
   \              0x52 0x4F    
   \              0x46 0x49    
   \              0x4C 0x45    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSSID NOT FOUND">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012SSID NOT FOUND"
   \              0x53 0x53    
   \              0x49 0x44    
   \              0x20 0x4E    
   \              0x4F 0x54    
   \              0x20 0x46    
   \              0x4F 0x55    
   \              0x4E 0x44    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nWLAN CONNECT ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012WLAN CONNECT ERROR"
   \              0x57 0x4C    
   \              0x41 0x4E    
   \              0x20 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nWPA AUTH FAIL">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012WPA AUTH FAIL"
   \              0x57 0x50    
   \              0x41 0x20    
   \              0x41 0x55    
   \              0x54 0x48    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WA=">`:
   \   00000000   0x2B 0x57          DC8 "+WA="
   \              0x41 0x3D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WPHYMODE=">`:
   \   00000000   0x2B 0x57          DC8 "+WPHYMODE="
   \              0x50 0x48    
   \              0x59 0x4D    
   \              0x4F 0x44    
   \              0x45 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BCONMISSTHRHLD=">`:
   \   00000000   0x2B 0x42          DC8 "+BCONMISSTHRHLD="
   \              0x43 0x4F    
   \              0x4E 0x4D    
   \              0x49 0x53    
   \              0x53 0x54    
   \              0x48 0x52    
   \              0x48 0x4C    
   \              0x44 0x3D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TKIPCNTRMSR=">`:
   \   00000000   0x2B 0x54          DC8 "+TKIPCNTRMSR="
   \              0x4B 0x49    
   \              0x50 0x43    
   \              0x4E 0x54    
   \              0x52 0x4D    
   \              0x53 0x52    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TKIPSEQSET=">`:
   \   00000000   0x2B 0x54          DC8 "+TKIPSEQSET="
   \              0x4B 0x49    
   \              0x50 0x53    
   \              0x45 0x51    
   \              0x53 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WLANSTATS">`:
   \   00000000   0x2B 0x57          DC8 "+WLANSTATS"
   \              0x4C 0x41    
   \              0x4E 0x53    
   \              0x54 0x41    
   \              0x54 0x53    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+RXFILTER=">`:
   \   00000000   0x2B 0x52          DC8 "+RXFILTER="
   \              0x58 0x46    
   \              0x49 0x4C    
   \              0x54 0x45    
   \              0x52 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRTS=">`:
   \   00000000   0x2B 0x57          DC8 "+WRTS="
   \              0x52 0x54    
   \              0x53 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WBLOCKACK=">`:
   \   00000000   0x2B 0x57          DC8 "+WBLOCKACK="
   \              0x42 0x4C    
   \              0x4F 0x43    
   \              0x4B 0x41    
   \              0x43 0x4B    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAMSDU=">`:
   \   00000000   0x2B 0x57          DC8 "+WAMSDU="
   \              0x41 0x4D    
   \              0x53 0x44    
   \              0x55 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAMPDU=">`:
   \   00000000   0x2B 0x57          DC8 "+WAMPDU="
   \              0x41 0x4D    
   \              0x50 0x44    
   \              0x55 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TXFAILLMT=">`:
   \   00000000   0x2B 0x54          DC8 "+TXFAILLMT="
   \              0x58 0x46    
   \              0x41 0x49    
   \              0x4C 0x4C    
   \              0x4D 0x54    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NDHCP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NDHCP="
   \              0x44 0x48    
   \              0x43 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NSTAT=">`:
   \   00000000   0x2B 0x4E          DC8 "+NSTAT="
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+CID=">`:
   \   00000000   0x2B 0x43          DC8 "+CID="
   \              0x49 0x44    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCLOSEALL">`:
   \   00000000   0x2B 0x4E          DC8 "+NCLOSEALL"
   \              0x43 0x4C    
   \              0x4F 0x53    
   \              0x45 0x41    
   \              0x4C 0x4C    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCLOSE=">`:
   \   00000000   0x2B 0x4E          DC8 "+NCLOSE="
   \              0x43 0x4C    
   \              0x4F 0x53    
   \              0x45 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRXACTIVE=">`:
   \   00000000   0x2B 0x57          DC8 "+WRXACTIVE="
   \              0x52 0x58    
   \              0x41 0x43    
   \              0x54 0x49    
   \              0x56 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRETRY=">`:
   \   00000000   0x2B 0x57          DC8 "+WRETRY="
   \              0x52 0x45    
   \              0x54 0x52    
   \              0x59 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCTCP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NCTCP="
   \              0x43 0x54    
   \              0x43 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCUDP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NCUDP="
   \              0x43 0x55    
   \              0x44 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NSTCP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NSTCP="
   \              0x53 0x54    
   \              0x43 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NSUDP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NSUDP="
   \              0x53 0x55    
   \              0x44 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSSTART">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSSTART"
   \              0x44 0x4E    
   \              0x53 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSSTOP">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSSTOP"
   \              0x44 0x4E    
   \              0x53 0x53    
   \              0x54 0x4F    
   \              0x50 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSANNOUNCE">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSANNOUNCE"
   \              0x44 0x4E    
   \              0x53 0x41    
   \              0x4E 0x4E    
   \              0x4F 0x55    
   \              0x4E 0x43    
   \              0x45 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSHNREG=">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSHNREG="
   \              0x44 0x4E    
   \              0x53 0x48    
   \              0x4E 0x52    
   \              0x45 0x47    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSSRVREG=">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSSRVREG="
   \              0x44 0x4E    
   \              0x53 0x53    
   \              0x52 0x56    
   \              0x52 0x45    
   \              0x47 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSSD=">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSSD="
   \              0x44 0x4E    
   \              0x53 0x53    
   \              0x44 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSHNDEREG=">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSHNDEREG="
   \              0x44 0x4E    
   \              0x53 0x48    
   \              0x4E 0x44    
   \              0x45 0x52    
   \              0x45 0x47    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MDNSSRVDEREG=">`:
   \   00000000   0x2B 0x4D          DC8 "+MDNSSRVDEREG="
   \              0x44 0x4E    
   \              0x53 0x53    
   \              0x52 0x56    
   \              0x44 0x45    
   \              0x52 0x45    
   \              0x47 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NXSETSOCKOPT=">`:
   \   00000000   0x2B 0x4E          DC8 "+NXSETSOCKOPT="
   \              0x58 0x53    
   \              0x45 0x54    
   \              0x53 0x4F    
   \              0x43 0x4B    
   \              0x4F 0x50    
   \              0x54 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NMAC=">`:
   \   00000000   0x2B 0x4E          DC8 "+NMAC="
   \              0x4D 0x41    
   \              0x43 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WSEC=">`:
   \   00000000   0x2B 0x57          DC8 "+WSEC="
   \              0x53 0x45    
   \              0x43 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAUTH=">`:
   \   00000000   0x2B 0x57          DC8 "+WAUTH="
   \              0x41 0x55    
   \              0x54 0x48    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WWPA=">`:
   \   00000000   0x2B 0x57          DC8 "+WWPA="
   \              0x57 0x50    
   \              0x41 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WPAPSK=">`:
   \   00000000   0x2B 0x57          DC8 "+WPAPSK="
   \              0x50 0x41    
   \              0x50 0x53    
   \              0x4B 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WPSK=">`:
   \   00000000   0x2B 0x57          DC8 "+WPSK="
   \              0x50 0x53    
   \              0x4B 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WWEPCONF=">`:
   \   00000000   0x2B 0x57          DC8 "+WWEPCONF="
   \              0x57 0x45    
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WWEP">`:
   \   00000000   0x2B 0x57          DC8 "+WWEP"
   \              0x57 0x45    
   \              0x50 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WSYNCINTRL=">`:
   \   00000000   0x2B 0x57          DC8 "+WSYNCINTRL="
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x49 0x4E    
   \              0x54 0x52    
   \              0x4C 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WSTATUS">`:
   \   00000000   0x2B 0x57          DC8 "+WSTATUS"
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x55 0x53    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WST=">`:
   \   00000000   0x2B 0x57          DC8 "+WST="
   \              0x53 0x54    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WS">`:
   \   00000000   0x2B 0x57          DC8 "+WS"
   \              0x53 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NSET=">`:
   \   00000000   0x2B 0x4E          DC8 "+NSET="
   \              0x53 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WM=">`:
   \   00000000   0x2B 0x57          DC8 "+WM="
   \              0x4D 0x3D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRXPS=">`:
   \   00000000   0x2B 0x57          DC8 "+WRXPS="
   \              0x52 0x58    
   \              0x50 0x53    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WIEEEPSPOLL=">`:
   \   00000000   0x2B 0x57          DC8 "+WIEEEPSPOLL="
   \              0x49 0x45    
   \              0x45 0x45    
   \              0x50 0x53    
   \              0x50 0x4F    
   \              0x4C 0x4C    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WP=">`:
   \   00000000   0x2B 0x57          DC8 "+WP="
   \              0x50 0x3D    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WD">`:
   \   00000000   0x2B 0x57          DC8 "+WD"
   \              0x44 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRSSI=">`:
   \   00000000   0x2B 0x57          DC8 "+WRSSI="
   \              0x52 0x53    
   \              0x53 0x49    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRATE=">`:
   \   00000000   0x2B 0x57          DC8 "+WRATE="
   \              0x52 0x41    
   \              0x54 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAPSM=">`:
   \   00000000   0x2B 0x57          DC8 "+WAPSM="
   \              0x41 0x50    
   \              0x53 0x4D    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MCSTSET=">`:
   \   00000000   0x2B 0x4D          DC8 "+MCSTSET="
   \              0x43 0x53    
   \              0x54 0x53    
   \              0x45 0x54    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARP=">`:
   \   00000000   0x2B 0x4E          DC8 "+NARP="
   \              0x41 0x52    
   \              0x50 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARPCHACHEEN=">`:
   \   00000000   0x2B 0x4E          DC8 "+NARPCHACHEEN="
   \              0x41 0x52    
   \              0x50 0x43    
   \              0x48 0x41    
   \              0x43 0x48    
   \              0x45 0x45    
   \              0x4E 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARPCHACHEDEL">`:
   \   00000000   0x2B 0x4E          DC8 "+NARPCHACHEDEL"
   \              0x41 0x52    
   \              0x50 0x43    
   \              0x48 0x41    
   \              0x43 0x48    
   \              0x45 0x44    
   \              0x45 0x4C    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARPSET=">`:
   \   00000000   0x2B 0x4E          DC8 "+NARPSET="
   \              0x41 0x52    
   \              0x50 0x53    
   \              0x45 0x54    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARPDELETE=">`:
   \   00000000   0x2B 0x4E          DC8 "+NARPDELETE="
   \              0x41 0x52    
   \              0x50 0x44    
   \              0x45 0x4C    
   \              0x45 0x54    
   \              0x45 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NARPAUTO=">`:
   \   00000000   0x2B 0x4E          DC8 "+NARPAUTO="
   \              0x41 0x52    
   \              0x50 0x41    
   \              0x55 0x54    
   \              0x4F 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+srvvalidationen=">`:
   \   00000000   0x2B 0x73          DC8 "+srvvalidationen="
   \              0x72 0x76    
   \              0x76 0x61    
   \              0x6C 0x69    
   \              0x64 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x65 0x6E    
   \              0x3D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEAPTIMECHK=">`:
   \   00000000   0x2B 0x57          DC8 "+WEAPTIMECHK="
   \              0x45 0x41    
   \              0x50 0x54    
   \              0x49 0x4D    
   \              0x45 0x43    
   \              0x48 0x4B    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "B=">`:
   \   00000000   0x42 0x3D          DC8 "B="
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+UARTFLVL=">`:
   \   00000000   0x2B 0x55          DC8 "+UARTFLVL="
   \              0x41 0x52    
   \              0x54 0x46    
   \              0x4C 0x56    
   \              0x4C 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&R">`:
   \   00000000   0x26 0x52          DC8 "&R"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&K">`:
   \   00000000   0x26 0x4B          DC8 "&K"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&F">`:
   \   00000000   0x26 0x46          DC8 "&F"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&V">`:
   \   00000000   0x26 0x56          DC8 "&V"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&W">`:
   \   00000000   0x26 0x57          DC8 "&W"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "Z">`:
   \   00000000   0x5A 0x00          DC8 "Z"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "&Y">`:
   \   00000000   0x26 0x59          DC8 "&Y"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "S">`:
   \   00000000   0x53 0x00          DC8 "S"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "E">`:
   \   00000000   0x45 0x00          DC8 "E"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "V">`:
   \   00000000   0x56 0x00          DC8 "V"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "I">`:
   \   00000000   0x49 0x00          DC8 "I"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "A">`:
   \   00000000   0x41 0x00          DC8 "A"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "H">`:
   \   00000000   0x48 0x00          DC8 "H"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "C">`:
   \   00000000   0x43 0x00          DC8 "C"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "O">`:
   \   00000000   0x4F 0x00          DC8 "O"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+VER=">`:
   \   00000000   0x2B 0x56          DC8 "+VER="
   \              0x45 0x52    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BDATA=">`:
   \   00000000   0x2B 0x42          DC8 "+BDATA="
   \              0x44 0x41    
   \              0x54 0x41    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+RESET">`:
   \   00000000   0x2B 0x52          DC8 "+RESET"
   \              0x45 0x53    
   \              0x45 0x54    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+APCONF=">`:
   \   00000000   0x2B 0x41          DC8 "+APCONF="
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+APCLIENTINFO=">`:
   \   00000000   0x2B 0x41          DC8 "+APCLIENTINFO="
   \              0x50 0x43    
   \              0x4C 0x49    
   \              0x45 0x4E    
   \              0x54 0x49    
   \              0x4E 0x46    
   \              0x4F 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+L2CONFIG=">`:
   \   00000000   0x2B 0x4C          DC8 "+L2CONFIG="
   \              0x32 0x43    
   \              0x4F 0x4E    
   \              0x46 0x49    
   \              0x47 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NTIMESYNC=">`:
   \   00000000   0x2B 0x4E          DC8 "+NTIMESYNC="
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DNS=">`:
   \   00000000   0x2B 0x44          DC8 "+DNS="
   \              0x4E 0x53    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DHCPSRVR=">`:
   \   00000000   0x2B 0x44          DC8 "+DHCPSRVR="
   \              0x48 0x43    
   \              0x50 0x53    
   \              0x52 0x56    
   \              0x52 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DHCPSRVRCFG=">`:
   \   00000000   0x2B 0x44          DC8 "+DHCPSRVRCFG="
   \              0x48 0x43    
   \              0x50 0x53    
   \              0x52 0x56    
   \              0x52 0x43    
   \              0x46 0x47    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SETTIME=">`:
   \   00000000   0x2B 0x53          DC8 "+SETTIME="
   \              0x45 0x54    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+GETTIME=">`:
   \   00000000   0x2B 0x47          DC8 "+GETTIME="
   \              0x45 0x54    
   \              0x54 0x49    
   \              0x4D 0x45    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WWPS=">`:
   \   00000000   0x2B 0x57          DC8 "+WWPS="
   \              0x57 0x50    
   \              0x53 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TCERTADD=">`:
   \   00000000   0x2B 0x54          DC8 "+TCERTADD="
   \              0x43 0x45    
   \              0x52 0x54    
   \              0x41 0x44    
   \              0x44 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TCERTDEL=">`:
   \   00000000   0x2B 0x54          DC8 "+TCERTDEL="
   \              0x43 0x45    
   \              0x52 0x54    
   \              0x44 0x45    
   \              0x4C 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEAP=">`:
   \   00000000   0x2B 0x57          DC8 "+WEAP="
   \              0x45 0x41    
   \              0x50 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEAPCONF=">`:
   \   00000000   0x2B 0x57          DC8 "+WEAPCONF="
   \              0x45 0x41    
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HTTPOPEN=">`:
   \   00000000   0x2B 0x48          DC8 "+HTTPOPEN="
   \              0x54 0x54    
   \              0x50 0x4F    
   \              0x50 0x45    
   \              0x4E 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HTTPCLOSE=">`:
   \   00000000   0x2B 0x48          DC8 "+HTTPCLOSE="
   \              0x54 0x54    
   \              0x50 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HTTPCONF=">`:
   \   00000000   0x2B 0x48          DC8 "+HTTPCONF="
   \              0x54 0x54    
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HTTPCONFDEL=">`:
   \   00000000   0x2B 0x48          DC8 "+HTTPCONFDEL="
   \              0x54 0x54    
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x44    
   \              0x45 0x4C    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HTTPSEND=">`:
   \   00000000   0x2B 0x48          DC8 "+HTTPSEND="
   \              0x54 0x54    
   \              0x50 0x53    
   \              0x45 0x4E    
   \              0x44 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SOTAFWUPCONF=">`:
   \   00000000   0x2B 0x53          DC8 "+SOTAFWUPCONF="
   \              0x4F 0x54    
   \              0x41 0x46    
   \              0x57 0x55    
   \              0x50 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SOTAFWUPSTART">`:
   \   00000000   0x2B 0x53          DC8 "+SOTAFWUPSTART"
   \              0x4F 0x54    
   \              0x41 0x46    
   \              0x57 0x55    
   \              0x50 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SOTAFWUPROLLBACK">`:
   \   00000000   0x2B 0x53          DC8 "+SOTAFWUPROLLBACK"
   \              0x4F 0x54    
   \              0x41 0x46    
   \              0x57 0x55    
   \              0x50 0x52    
   \              0x4F 0x4C    
   \              0x4C 0x42    
   \              0x41 0x43    
   \              0x4B 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAUTO=">`:
   \   00000000   0x2B 0x57          DC8 "+WAUTO="
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NAUTO=">`:
   \   00000000   0x2B 0x4E          DC8 "+NAUTO="
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PSDPSLEEP">`:
   \   00000000   0x2B 0x50          DC8 "+PSDPSLEEP"
   \              0x53 0x44    
   \              0x50 0x53    
   \              0x4C 0x45    
   \              0x45 0x50    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PING=">`:
   \   00000000   0x2B 0x50          DC8 "+PING="
   \              0x49 0x4E    
   \              0x47 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MQTT_PUBLISH">`:
   \   00000000   0x2B 0x4D          DC8 "+MQTT_PUBLISH"
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x50 0x55    
   \              0x42 0x4C    
   \              0x49 0x53    
   \              0x48 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DNSSET=">`:
   \   00000000   0x2B 0x44          DC8 "+DNSSET="
   \              0x4E 0x53    
   \              0x53 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DNSLOOKUP=">`:
   \   00000000   0x2B 0x44          DC8 "+DNSLOOKUP="
   \              0x4E 0x53    
   \              0x4C 0x4F    
   \              0x4F 0x4B    
   \              0x55 0x50    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WREGDOMAIN=">`:
   \   00000000   0x2B 0x57          DC8 "+WREGDOMAIN="
   \              0x52 0x45    
   \              0x47 0x44    
   \              0x4F 0x4D    
   \              0x41 0x49    
   \              0x4E 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SSLOPEN=">`:
   \   00000000   0x2B 0x53          DC8 "+SSLOPEN="
   \              0x53 0x4C    
   \              0x4F 0x50    
   \              0x45 0x4E    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SSLCLOSE=">`:
   \   00000000   0x2B 0x53          DC8 "+SSLCLOSE="
   \              0x53 0x4C    
   \              0x43 0x4C    
   \              0x4F 0x53    
   \              0x45 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+SSLCONF=">`:
   \   00000000   0x2B 0x53          DC8 "+SSLCONF="
   \              0x53 0x4C    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRFTESTSTART">`:
   \   00000000   0x2B 0x57          DC8 "+WRFTESTSTART"
   \              0x52 0x46    
   \              0x54 0x45    
   \              0x53 0x54    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRFTESTSTOP">`:
   \   00000000   0x2B 0x57          DC8 "+WRFTESTSTOP"
   \              0x52 0x46    
   \              0x54 0x45    
   \              0x53 0x54    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WFRAMETXTEST=">`:
   \   00000000   0x2B 0x57          DC8 "+WFRAMETXTEST="
   \              0x46 0x52    
   \              0x41 0x4D    
   \              0x45 0x54    
   \              0x58 0x54    
   \              0x45 0x53    
   \              0x54 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WTX99TEST=">`:
   \   00000000   0x2B 0x57          DC8 "+WTX99TEST="
   \              0x54 0x58    
   \              0x39 0x39    
   \              0x54 0x45    
   \              0x53 0x54    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WTX100TEST=">`:
   \   00000000   0x2B 0x57          DC8 "+WTX100TEST="
   \              0x54 0x58    
   \              0x31 0x30    
   \              0x30 0x54    
   \              0x45 0x53    
   \              0x54 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WCARWAVTEST=">`:
   \   00000000   0x2B 0x57          DC8 "+WCARWAVTEST="
   \              0x43 0x41    
   \              0x52 0x57    
   \              0x41 0x56    
   \              0x54 0x45    
   \              0x53 0x54    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WTXSTOP=">`:
   \   00000000   0x2B 0x57          DC8 "+WTXSTOP="
   \              0x54 0x58    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRXTEST=">`:
   \   00000000   0x2B 0x57          DC8 "+WRXTEST="
   \              0x52 0x58    
   \              0x54 0x45    
   \              0x53 0x54    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRXSTOP">`:
   \   00000000   0x2B 0x57          DC8 "+WRXSTOP"
   \              0x52 0x58    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WCALIB=">`:
   \   00000000   0x2B 0x57          DC8 "+WCALIB="
   \              0x43 0x41    
   \              0x4C 0x49    
   \              0x42 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WOTPRD=">`:
   \   00000000   0x2B 0x57          DC8 "+WOTPRD="
   \              0x4F 0x54    
   \              0x50 0x52    
   \              0x44 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+AOTPRD=">`:
   \   00000000   0x2B 0x41          DC8 "+AOTPRD="
   \              0x4F 0x54    
   \              0x50 0x52    
   \              0x44 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEBPROV=">`:
   \   00000000   0x2B 0x57          DC8 "+WEBPROV="
   \              0x45 0x42    
   \              0x50 0x52    
   \              0x4F 0x56    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEBPROVSTOP">`:
   \   00000000   0x2B 0x57          DC8 "+WEBPROVSTOP"
   \              0x45 0x42    
   \              0x50 0x52    
   \              0x4F 0x56    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NURIREDIR=">`:
   \   00000000   0x2B 0x4E          DC8 "+NURIREDIR="
   \              0x55 0x52    
   \              0x49 0x52    
   \              0x45 0x44    
   \              0x49 0x52    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WEBSERVER=">`:
   \   00000000   0x2B 0x57          DC8 "+WEBSERVER="
   \              0x45 0x42    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+URIRECV=">`:
   \   00000000   0x2B 0x55          DC8 "+URIRECV="
   \              0x52 0x49    
   \              0x52 0x45    
   \              0x43 0x56    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+XMLSEND=">`:
   \   00000000   0x2B 0x58          DC8 "+XMLSEND="
   \              0x4D 0x4C    
   \              0x53 0x45    
   \              0x4E 0x44    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+XMLPARSE=">`:
   \   00000000   0x2B 0x58          DC8 "+XMLPARSE="
   \              0x4D 0x4C    
   \              0x50 0x41    
   \              0x52 0x53    
   \              0x45 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PSSTBY=">`:
   \   00000000   0x2B 0x50          DC8 "+PSSTBY="
   \              0x53 0x53    
   \              0x54 0x42    
   \              0x59 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+STORENWCONN">`:
   \   00000000   0x2B 0x53          DC8 "+STORENWCONN"
   \              0x54 0x4F    
   \              0x52 0x45    
   \              0x4E 0x57    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+RESTORENWCONN">`:
   \   00000000   0x2B 0x52          DC8 "+RESTORENWCONN"
   \              0x45 0x53    
   \              0x54 0x4F    
   \              0x52 0x45    
   \              0x4E 0x57    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+HIBERNATE=">`:
   \   00000000   0x2B 0x48          DC8 "+HIBERNATE="
   \              0x49 0x42    
   \              0x45 0x52    
   \              0x4E 0x41    
   \              0x54 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCMAUTO=">`:
   \   00000000   0x2B 0x4E          DC8 "+NCMAUTO="
   \              0x43 0x4D    
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NCMAUTOCONF=">`:
   \   00000000   0x2B 0x4E          DC8 "+NCMAUTOCONF="
   \              0x43 0x4D    
   \              0x41 0x55    
   \              0x54 0x4F    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+ASYNCMSGFMT=">`:
   \   00000000   0x2B 0x41          DC8 "+ASYNCMSGFMT="
   \              0x53 0x59    
   \              0x4E 0x43    
   \              0x4D 0x53    
   \              0x47 0x46    
   \              0x4D 0x54    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NIPMULTICASTJOIN=">`:
   \   00000000   0x2B 0x4E          DC8 "+NIPMULTICASTJOIN="
   \              0x49 0x50    
   \              0x4D 0x55    
   \              0x4C 0x54    
   \              0x49 0x43    
   \              0x41 0x53    
   \              0x54 0x4A    
   \              0x4F 0x49    
   \              0x4E 0x3D    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+NIPMULTICASTLEAVE=">`:
   \   00000000   0x2B 0x4E          DC8 "+NIPMULTICASTLEAVE="
   \              0x49 0x50    
   \              0x4D 0x55    
   \              0x4C 0x54    
   \              0x49 0x43    
   \              0x41 0x53    
   \              0x54 0x4C    
   \              0x45 0x41    
   \              0x56 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+DGPIO=">`:
   \   00000000   0x2B 0x44          DC8 "+DGPIO="
   \              0x47 0x50    
   \              0x49 0x4F    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+UNSOLICITEDTX=">`:
   \   00000000   0x2B 0x55          DC8 "+UNSOLICITEDTX="
   \              0x4E 0x53    
   \              0x4F 0x4C    
   \              0x49 0x43    
   \              0x49 0x54    
   \              0x45 0x44    
   \              0x54 0x58    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+UNSOLICITEDRX=">`:
   \   00000000   0x2B 0x55          DC8 "+UNSOLICITEDRX="
   \              0x4E 0x53    
   \              0x4F 0x4C    
   \              0x49 0x43    
   \              0x49 0x54    
   \              0x45 0x44    
   \              0x52 0x58    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+UNSOLICITEDRXSTOP">`:
   \   00000000   0x2B 0x55          DC8 "+UNSOLICITEDRXSTOP"
   \              0x4E 0x53    
   \              0x4F 0x4C    
   \              0x49 0x43    
   \              0x49 0x54    
   \              0x45 0x44    
   \              0x52 0x58    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+UAMCCA=">`:
   \   00000000   0x2B 0x55          DC8 "+UAMCCA="
   \              0x41 0x4D    
   \              0x43 0x43    
   \              0x41 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+adcconf=">`:
   \   00000000   0x2B 0x61          DC8 "+adcconf="
   \              0x64 0x63    
   \              0x63 0x6F    
   \              0x6E 0x66    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+adcstart">`:
   \   00000000   0x2B 0x61          DC8 "+adcstart"
   \              0x64 0x63    
   \              0x73 0x74    
   \              0x61 0x72    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+adcread=">`:
   \   00000000   0x2B 0x61          DC8 "+adcread="
   \              0x64 0x63    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+adcstop">`:
   \   00000000   0x2B 0x61          DC8 "+adcstop"
   \              0x64 0x63    
   \              0x73 0x74    
   \              0x6F 0x70    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHINIT=">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHINIT="
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x49 0x4E    
   \              0x49 0x54    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHWRITE=">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHWRITE="
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x57 0x52    
   \              0x49 0x54    
   \              0x45 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHREAD=">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHREAD="
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHERASE=">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHERASE="
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x45 0x52    
   \              0x41 0x53    
   \              0x45 0x3D    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHCERASE">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHCERASE"
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x43 0x45    
   \              0x52 0x41    
   \              0x53 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+EXFLASHSPICONF=">`:
   \   00000000   0x2B 0x45          DC8 "+EXFLASHSPICONF="
   \              0x58 0x46    
   \              0x4C 0x41    
   \              0x53 0x48    
   \              0x53 0x50    
   \              0x49 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WSTAPSCFG=">`:
   \   00000000   0x2B 0x57          DC8 "+WSTAPSCFG="
   \              0x53 0x54    
   \              0x41 0x50    
   \              0x53 0x43    
   \              0x46 0x47    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WAPPSCFG=">`:
   \   00000000   0x2B 0x57          DC8 "+WAPPSCFG="
   \              0x41 0x50    
   \              0x50 0x53    
   \              0x43 0x46    
   \              0x47 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PSPOLLINTRL=">`:
   \   00000000   0x2B 0x50          DC8 "+PSPOLLINTRL="
   \              0x53 0x50    
   \              0x4F 0x4C    
   \              0x4C 0x49    
   \              0x4E 0x54    
   \              0x52 0x4C    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WKEEPALIVE=">`:
   \   00000000   0x2B 0x57          DC8 "+WKEEPALIVE="
   \              0x4B 0x45    
   \              0x45 0x50    
   \              0x41 0x4C    
   \              0x49 0x56    
   \              0x45 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PWMSTART=">`:
   \   00000000   0x2B 0x50          DC8 "+PWMSTART="
   \              0x57 0x4D    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PWMSTOP=">`:
   \   00000000   0x2B 0x50          DC8 "+PWMSTOP="
   \              0x57 0x4D    
   \              0x53 0x54    
   \              0x4F 0x50    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+PWMCNTRL=">`:
   \   00000000   0x2B 0x50          DC8 "+PWMCNTRL="
   \              0x57 0x4D    
   \              0x43 0x4E    
   \              0x54 0x52    
   \              0x4C 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MEMREAD=">`:
   \   00000000   0x2B 0x4D          DC8 "+MEMREAD="
   \              0x45 0x4D    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+MEMWRITE=">`:
   \   00000000   0x2B 0x4D          DC8 "+MEMWRITE="
   \              0x45 0x4D    
   \              0x57 0x52    
   \              0x49 0x54    
   \              0x45 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+LOGLVL=">`:
   \   00000000   0x2B 0x4C          DC8 "+LOGLVL="
   \              0x4F 0x47    
   \              0x4C 0x56    
   \              0x4C 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BCHKSTRT=">`:
   \   00000000   0x2B 0x42          DC8 "+BCHKSTRT="
   \              0x43 0x48    
   \              0x4B 0x53    
   \              0x54 0x52    
   \              0x54 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BATTVALGET">`:
   \   00000000   0x2B 0x42          DC8 "+BATTVALGET"
   \              0x41 0x54    
   \              0x54 0x56    
   \              0x41 0x4C    
   \              0x47 0x45    
   \              0x54 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BCHK=">`:
   \   00000000   0x2B 0x42          DC8 "+BCHK="
   \              0x43 0x48    
   \              0x4B 0x3D    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BCHKSTOP">`:
   \   00000000   0x2B 0x42          DC8 "+BCHKSTOP"
   \              0x43 0x48    
   \              0x4B 0x53    
   \              0x54 0x4F    
   \              0x50 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+BATTLVLSET=">`:
   \   00000000   0x2B 0x42          DC8 "+BATTLVLSET="
   \              0x41 0x54    
   \              0x54 0x4C    
   \              0x56 0x4C    
   \              0x53 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+CLKTUNE=">`:
   \   00000000   0x2B 0x43          DC8 "+CLKTUNE="
   \              0x4C 0x4B    
   \              0x54 0x55    
   \              0x4E 0x45    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+COAPOPEN=">`:
   \   00000000   0x2B 0x43          DC8 "+COAPOPEN="
   \              0x4F 0x41    
   \              0x50 0x4F    
   \              0x50 0x45    
   \              0x4E 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+COAPSENDRECIEVE=">`:
   \   00000000   0x2B 0x43          DC8 "+COAPSENDRECIEVE="
   \              0x4F 0x41    
   \              0x50 0x53    
   \              0x45 0x4E    
   \              0x44 0x52    
   \              0x45 0x43    
   \              0x49 0x45    
   \              0x56 0x45    
   \              0x3D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+COAPCLOSE=">`:
   \   00000000   0x2B 0x43          DC8 "+COAPCLOSE="
   \              0x4F 0x41    
   \              0x50 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+COAPOPTCONF=">`:
   \   00000000   0x2B 0x43          DC8 "+COAPOPTCONF="
   \              0x4F 0x41    
   \              0x50 0x4F    
   \              0x50 0x54    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+COAPOPTCONFDEL=">`:
   \   00000000   0x2B 0x43          DC8 "+COAPOPTCONFDEL="
   \              0x4F 0x41    
   \              0x50 0x4F    
   \              0x50 0x54    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x44 0x45    
   \              0x4C 0x3D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WBACKEN=">`:
   \   00000000   0x2B 0x57          DC8 "+WBACKEN="
   \              0x42 0x41    
   \              0x43 0x4B    
   \              0x45 0x4E    
   \              0x3D 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WRADIOSTATE=">`:
   \   00000000   0x2B 0x57          DC8 "+WRADIOSTATE="
   \              0x52 0x41    
   \              0x44 0x49    
   \              0x4F 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WASSOCCONF=">`:
   \   00000000   0x2B 0x57          DC8 "+WASSOCCONF="
   \              0x41 0x53    
   \              0x53 0x4F    
   \              0x43 0x43    
   \              0x4F 0x4E    
   \              0x46 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+TEMPVALGET=">`:
   \   00000000   0x2B 0x54          DC8 "+TEMPVALGET="
   \              0x45 0x4D    
   \              0x50 0x56    
   \              0x41 0x4C    
   \              0x47 0x45    
   \              0x54 0x3D    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+WTEMPREAD=">`:
   \   00000000   0x2B 0x57          DC8 "+WTEMPREAD="
   \              0x54 0x45    
   \              0x4D 0x50    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x3D 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+CRYPTOEN=">`:
   \   00000000   0x2B 0x43          DC8 "+CRYPTOEN="
   \              0x52 0x59    
   \              0x50 0x54    
   \              0x4F 0x45    
   \              0x4E 0x3D    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "+GRATARP">`:
   \   00000000   0x2B 0x47          DC8 "+GRATARP"
   \              0x52 0x41    
   \              0x54 0x41    
   \              0x52 0x50    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x\\t">`:
   \   00000000   0x25 0x78          DC8 "%x\t"
   \              0x09 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant " ">`:
   \   00000000   0x20 0x00          DC8 " "

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "WEP">`:
   \   00000000   0x57 0x45          DC8 "WEP"
   \              0x50 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " %s">`:
   \   00000000   0x20 0x25          DC8 " %s"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "GS_">`:
   \   00000000   0x47 0x53          DC8 "GS_"
   \              0x5F 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "\\"">`:
   \   00000000   0x22 0x00          DC8 "\""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "GA">`:
   \   00000000   0x47 0x41          DC8 "GA"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "10">`:
   \   00000000   0x31 0x30          DC8 "10"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ":%s">`:
   \   00000000   0x3A 0x25          DC8 ":%s"
   \              0x73 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ",\\r\\n">`:
   \   00000000   0x2C 0x0D          DC8 ",\015\012"
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant ",%d">`:
   \   00000000   0x2C 0x25          DC8 ",%d"
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n\\r\\nSTORED PROFILE 0\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012STORED PROFILE 0\015\012"
   \              0x0D 0x0A    
   \              0x53 0x54    
   \              0x4F 0x52    
   \              0x45 0x44    
   \              0x20 0x50    
   \              0x52 0x4F    
   \              0x46 0x49    
   \              0x4C 0x45    
   \              0x20 0x30    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n\\r\\nSTORED PROFILE 1\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012STORED PROFILE 1\015\012"
   \              0x0D 0x0A    
   \              0x53 0x54    
   \              0x4F 0x52    
   \              0x45 0x44    
   \              0x20 0x50    
   \              0x52 0x4F    
   \              0x46 0x49    
   \              0x4C 0x45    
   \              0x20 0x31    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable420:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable421:
   \   00000000   0x22 0x00          DC8      "\"",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable423:
   \   00000000   0x........         DC32     s2wCurrent+0x1B1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable423_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%u">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%u"
   \              0x25 0x75    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable424:
   \   00000000   0x........         DC32     `?<Constant "5.1.5">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable424_1:
   \   00000000   0x400E0408         DC32     0x400e0408

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable424_2:
   \   00000000   0x400E0004         DC32     0x400e0004

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%sS%d=%05u">`:
   \   00000000   0x25 0x73          DC8 "%sS%d=%05u"
   \              0x53 0x25    
   \              0x64 0x3D    
   \              0x25 0x30    
   \              0x35 0x75    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 47H, 61H, 69H, 6EH, 73H
   \              0x5C 0x47    
   \              0x61 0x69    
   \              0x6E 0x73    
   \   00000008   0x70 0x61          DC8 70H, 61H, 6EH, 5CH, 67H, 73H, 32H, 30H
   \              0x6E 0x5C    
   \              0x67 0x73    
   \              0x32 0x30    
   \   00000010   0x31 0x31          DC8 31H, 31H, 6DH, 78H, 78H, 5FH, 53H, 44H
   \              0x6D 0x78    
   \              0x78 0x5F    
   \              0x53 0x44    
   \   00000018   0x4B 0x5F          DC8 4BH, 5FH, 73H, 32H, 77H, 5FH, 74H, 6CH
   \              0x73 0x32    
   \              0x77 0x5F    
   \              0x74 0x6C    
   \   00000020   0x73 0x5F          DC8 73H, 5FH, 74H, 6CH, 73H, 6CH, 70H, 5FH
   \              0x74 0x6C    
   \              0x73 0x6C    
   \              0x70 0x5F    
   \   00000028   0x35 0x2E          DC8 35H, 2EH, 31H, 2EH, 35H, 5FH, 47H, 41H
   \              0x31 0x2E    
   \              0x35 0x5F    
   \              0x47 0x41    
   \   00000030   0x5C 0x75          DC8 5CH, 75H, 73H, 65H, 72H, 61H, 70H, 70H
   \              0x73 0x65    
   \              0x72 0x61    
   \              0x70 0x70    
   \   00000038   0x73 0x5F          DC8 73H, 5FH, 6DH, 71H, 74H, 74H, 5CH, 73H
   \              0x6D 0x71    
   \              0x74 0x74    
   \              0x5C 0x73    
   \   00000040   0x32 0x77          DC8 32H, 77H, 5CH, 73H, 72H, 63H, 5CH, 70H
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x70    
   \   00000048   0x61 0x72          DC8 61H, 72H, 73H, 65H, 72H, 5CH, 73H, 32H
   \              0x73 0x65    
   \              0x72 0x5C    
   \              0x73 0x32    
   \   00000050   0x77 0x5F          DC8 77H, 5FH, 67H, 65H, 6EH, 65H, 72H, 61H
   \              0x67 0x65    
   \              0x6E 0x65    
   \              0x72 0x61    
   \   00000058   0x6C 0x5F          DC8 6CH, 5FH, 63H, 6FH, 6DH, 6DH, 61H, 6EH
   \              0x63 0x6F    
   \              0x6D 0x6D    
   \              0x61 0x6E    
   \   00000060   0x64 0x2E          DC8 64H, 2EH, 63H, 0
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable430:
   \   00000000   0x20 0x00          DC8      " ",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable430_1:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable431:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n\\r\\nSNTP busy\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012\015\012SNTP busy\015\012"
   \              0x0D 0x0A    
   \              0x53 0x4E    
   \              0x54 0x50    
   \              0x20 0x62    
   \              0x75 0x73    
   \              0x79 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rFILE EXISTS\\n\\r">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015FILE EXISTS\012\015"
   \              0x46 0x49    
   \              0x4C 0x45    
   \              0x20 0x45    
   \              0x58 0x49    
   \              0x53 0x54    
   \              0x53 0x0A    
   \              0x0D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nOK\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012OK\015\012"
   \              0x4F 0x4B    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable440:
   \   00000000   0x........         DC32     s2wFlashParams

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable440_1:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "certs">`:
   \   00000000   0x63 0x65          DC8 "certs"
   \              0x72 0x74    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "certs/">`:
   \   00000000   0x63 0x65          DC8 "certs/"
   \              0x72 0x74    
   \              0x73 0x2F    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable442:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable443:
   \   00000000   0x77 0x00          DC8      "w",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nTKIP Sequence Numbe...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012TKIP Sequence Number:%x %x\015\012"
   \              0x54 0x4B    
   \              0x49 0x50    
   \              0x20 0x53    
   \              0x65 0x71    
   \              0x75 0x65    
   \              0x6E 0x63    
   \              0x65 0x20    
   \              0x4E 0x75    
   \              0x6D 0x62    
   \              0x65 0x72    
   \              0x3A 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable444:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable448:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable449:
   \   00000000   0x41010010         DC32     0x41010010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable449_1:
   \   00000000   0x........         DC32     globalUseHRssi

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nComputing PSK from S...">`:
   \   00000000   0x0A 0x43          DC8 "\012Computing PSK from SSID and PassPhrase...\015\012"
   \              0x6F 0x6D    
   \              0x70 0x75    
   \              0x74 0x69    
   \              0x6E 0x67    
   \              0x20 0x50    
   \              0x53 0x4B    
   \              0x20 0x66    
   \              0x72 0x6F    
   \              0x6D 0x20    
   \              0x53 0x53    
   \              0x49 0x44    
   \              0x20 0x61    
   \              0x6E 0x64    
   \              0x20 0x50    
   \              0x61 0x73    
   \              0x73 0x50    
   \              0x68 0x72    
   \              0x61 0x73    
   \              0x65 0x2E    
   \              0x2E 0x2E    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable450:
   \   00000000   0x........         DC32     s2wL2L3ConnectSemaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable451:
   \   00000000   0x01F0A8C0         DC32     0x1f0a8c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable452:
   \   00000000   0xC0000400         DC32     0xc0000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable453:
   \   00000000   0x80000001         DC32     0x80000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable453_1:
   \   00000000   0x........         DC32     S2W_DNS_CLIENT_FALGS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable453_2:
   \   00000000   0x........         DC32     dhcpSrvrCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable454:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TELEC ">`:
   \   00000000   0x54 0x45          DC8 "TELEC "
   \              0x4C 0x45    
   \              0x43 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ETSI">`:
   \   00000000   0x45 0x54          DC8 "ETSI"
   \              0x53 0x49    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nREG_DOMAIN=%s\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012REG_DOMAIN=%s\012"
   \              0x52 0x45    
   \              0x47 0x5F    
   \              0x44 0x4F    
   \              0x4D 0x41    
   \              0x49 0x4E    
   \              0x3D 0x25    
   \              0x73 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable455:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable455_1:
   \   00000000   0xC0A8F001         DC32     0xc0a8f001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable455_2:
   \   00000000   0x80510100         DC32     0x80510100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable455_3:
   \   00000000   0x........         DC32     s2wCurrent+0x18C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable456:
   \   00000000   0x46 0x43          DC8      "FCC"
   \              0x43 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable456_1:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCertificate Not Fou...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Certificate Not Found\012\015"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x0A    
   \              0x0D 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable457:
   \   00000000   0x........         DC32     certIndex

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "gainspan.lan">`:
   \   00000000   0x67 0x61          DC8 "gainspan.lan"
   \              0x69 0x6E    
   \              0x73 0x70    
   \              0x61 0x6E    
   \              0x2E 0x6C    
   \              0x61 0x6E    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "192.168.240.1">`:
   \   00000000   0x31 0x39          DC8 "192.168.240.1"
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x34    
   \              0x30 0x2E    
   \              0x31 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable458:
   \   00000000   0x........         DC32     `?<Constant "TLS_CA">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable459:
   \   00000000   0x........         DC32     `?<Constant "TLS_KEY">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable459_1:
   \   00000000   0x........         DC32     `?<Constant "TLS_CLIENT">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nIP:%d.%d.%d.%d\\r">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012IP:%d.%d.%d.%d\015"
   \              0x49 0x50    
   \              0x3A 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable462:
   \   00000000   0x25 0x64          DC8      0x25, 0x64, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable464:
   \   00000000   0x........         DC32     s2wWepKeyAscii

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable464_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable464_2:
   \   00000000   0x........         DC32     OtaFwupConfParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable465:
   \   00000000   0x01F0A8C0         DC32     0x1f0a8c0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNCM STARTED:%d\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012NCM STARTED:%d\015\012"
   \              0x4E 0x43    
   \              0x4D 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x45    
   \              0x44 0x3A    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNCM NOT STARTED\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012NCM NOT STARTED\015\012"
   \              0x4E 0x43    
   \              0x4D 0x20    
   \              0x4E 0x4F    
   \              0x54 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GS_PROV_">`:
   \   00000000   0x47 0x53          DC8 "GS_PROV_"
   \              0x5F 0x50    
   \              0x52 0x4F    
   \              0x56 0x5F    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "_%02x%02x%02x">`:
   \   00000000   0x5F 0x25          DC8 "_%02x%02x%02x"
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable466:
   \   00000000   0x0101A8C0         DC32     0x101a8c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable468:
   \   00000000   0x........         DC32     httpConfAtCmd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable469:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable470:
   \   00000000   0x........         DC32     S2W_DNS_CLIENT_FALGS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable470_1:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable470_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable471:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable471_1:
   \   00000000   0x47 0x53          DC8      "GS_"
   \              0x5F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable471_2:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable472:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable472_1:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable473:
   \   00000000   0x........         DC32     stbySuccess

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable473_1:
   \   00000000   0x........         DC32     s2wAutoConnState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable473_2:
   \   00000000   0x41010194         DC32     0x41010194

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable473_3:
   \   00000000   0x41010164         DC32     0x41010164

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable473_4:
   \   00000000   0x........         DC32     ncmAutoMode

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "w">`:
   \   00000000   0x77 0x00          DC8 "w"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "FCC">`:
   \   00000000   0x46 0x43          DC8 "FCC"
   \              0x43 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%d">`:
   \   00000000   0x25 0x64          DC8 "%d"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "0x">`:
   \   00000000   0x30 0x78          DC8 "0x"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%c">`:
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "GET">`:
   \   00000000   0x47 0x45          DC8 "GET"
   \              0x54 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CON">`:
   \   00000000   0x43 0x4F          DC8 "CON"
   \              0x4E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NON">`:
   \   00000000   0x4E 0x4F          DC8 "NON"
   \              0x4E 0x00    

   \                                 In section .rodata, align 1, keep-with-next
   \                     `?<Constant "">`:
   \   00000000   0x00               DC8 ""

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Active">`:
   \   00000000   0x41 0x63          DC8 "Active"
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PS Poll">`:
   \   00000000   0x50 0x53          DC8 "PS Poll"
   \              0x20 0x50    
   \              0x6F 0x6C    
   \              0x6C 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OFF">`:
   \   00000000   0x4F 0x46          DC8 "OFF"
   \              0x46 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {255, 255, 255, 255}>`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255
   \              0xFF 0xFF    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%s">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%s"
   \              0x25 0x73    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GainSpan">`:
   \   00000000   0x47 0x61          DC8 "GainSpan"
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GS2011">`:
   \   00000000   0x47 0x53          DC8 "GS2011"
   \              0x32 0x30    
   \              0x31 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5.1.5">`:
   \   00000000   0x35 0x2E          DC8 "5.1.5"
   \              0x31 0x2E    
   \              0x35 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable474:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable476:
   \   00000000   0x4101009C         DC32     0x4101009c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable476_1:
   \   00000000   0x........         DC32     GratiousArpHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable476_2:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable476_3:
   \   00000000   0x........         DC32     acNcmTimer

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Ping Thread">`:
   \   00000000   0x50 0x69          DC8 "Ping Thread"
   \              0x6E 0x67    
   \              0x20 0x54    
   \              0x68 0x72    
   \              0x65 0x61    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable477:
   \   00000000   0x........         DC32     dhcpSrvrCfg+0x30

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPinging for %d.%d.%...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Pinging for %d.%d.%d.%d with %d bytes of data\015\012"
   \              0x50 0x69    
   \              0x6E 0x67    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \              0x77 0x69    
   \              0x74 0x68    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x6F 0x66    
   \              0x20 0x64    
   \              0x61 0x74    
   \              0x61 0x0D    
   \              0x0A 0x00    
   \   00000032   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nNo Route to Host\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012No Route to Host\015\012"
   \              0x4E 0x6F    
   \              0x20 0x52    
   \              0x6F 0x75    
   \              0x74 0x65    
   \              0x20 0x74    
   \              0x6F 0x20    
   \              0x48 0x6F    
   \              0x73 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable478:
   \   00000000   0x80000001         DC32     0x80000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable479:
   \   00000000   0x........         DC32     s2wDisassocCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable479_1:
   \   00000000   0x........         DC32     s2wDisassocSyncLossCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable481:
   \   00000000   0xC0A8F001         DC32     0xc0a8f001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable482:
   \   00000000   0x........         DC32     `?<Constant "TLS_KEY">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable484:
   \   00000000   0x........         DC32     `?<Constant "TLS_CA">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable484_1:
   \   00000000   0x........         DC32     `?<Constant "TLS_CLIENT">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable484_2:
   \   00000000   0x........         DC32     `?<Constant "%s%2.2x%2.2x%2.2x">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%x\\r\\n">`:
   \   00000000   0x25 0x78          DC8 "%x\015\012"
   \              0x0D 0x0A    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable486:
   \   00000000   0x41010159         DC32     0x41010159

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable487:
   \   00000000   0x41010139         DC32     0x41010139

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable487_1:
   \   00000000   0x41010138         DC32     0x41010138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable487_2:
   \   00000000   0x41010258         DC32     0x41010258

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable488:
   \   00000000   0x........         DC32     AppS2wNetConnMgr_Cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable488_1:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nLoading file succes...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Loading file successfull\015\012"
   \              0x4C 0x6F    
   \              0x61 0x64    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x73    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x66 0x75    
   \              0x6C 0x6C    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable490:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable491:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable492:
   \   00000000   0x30 0x78          DC8      0x30, 0x78, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable492_1:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable493:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable494:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable494_1:
   \   00000000   0x........         DC32     globalUseHRssi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496:
   \   00000000   0x........         DC32     pingThreadMsgQueueBuf+0x8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496_1:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496_2:
   \   00000000   0x........         DC32     pingThreadMsgQueueBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496_3:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496_4:
   \   00000000   0x........         DC32     AppS2w_PingThreadEntry

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable496_5:
   \   00000000   0x........         DC32     s2wPingStarted

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%x"
   \              0x25 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable497:
   \   00000000   0x00017ED1         DC32     0x17ed1

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "POST">`:
   \   00000000   0x50 0x4F          DC8 "POST"
   \              0x53 0x54    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable498:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable498_1:
   \   00000000   0x........         DC32     s2wFlashParams

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500:
   \   00000000   0x47 0x45          DC8      "GET"
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_1:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_2:
   \   00000000   0x43 0x4F          DC8      "CON"
   \              0x4E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_3:
   \   00000000   0x4E 0x4F          DC8      "NON"
   \              0x4E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_4:
   \   00000000   0x........         DC32     curCid

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_5:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable500_6:
   \   00000000   0x........         DC32     s2wAutoExit_CB

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_4`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable501:
   \   00000000   0xE03003F0         DC32     0xe03003f0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {&"", &"Active", &"PS Poll", &"OFF"`:
   \   00000000   0x........         DC32 `?<Constant "">`, `?<Constant "Active">`, `?<Constant "PS Poll">`
   \              0x........   
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "OFF">`

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nWLAN Radio State = ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012WLAN Radio State = %d : %s\015\012"
   \              0x57 0x4C    
   \              0x41 0x4E    
   \              0x20 0x52    
   \              0x61 0x64    
   \              0x69 0x6F    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nAPP Radio State Cou...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012APP Radio State Counters:\015\012"
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x52 0x61    
   \              0x64 0x69    
   \              0x6F 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x73    
   \              0x3A 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rxActiveReqCnt = %d\\r\\n">`:
   \   00000000   0x72 0x78          DC8 "rxActiveReqCnt = %d\015\012"
   \              0x41 0x63    
   \              0x74 0x69    
   \              0x76 0x65    
   \              0x52 0x65    
   \              0x71 0x43    
   \              0x6E 0x74    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rxPSPollReqCnt = %d\\r\\n">`:
   \   00000000   0x72 0x78          DC8 "rxPSPollReqCnt = %d\015\012"
   \              0x50 0x53    
   \              0x50 0x6F    
   \              0x6C 0x6C    
   \              0x52 0x65    
   \              0x71 0x43    
   \              0x6E 0x74    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rxPSPollCfgSetFlag = ...">`:
   \   00000000   0x72 0x78          DC8 "rxPSPollCfgSetFlag = %d\015\012"
   \              0x50 0x53    
   \              0x50 0x6F    
   \              0x6C 0x6C    
   \              0x43 0x66    
   \              0x67 0x53    
   \              0x65 0x74    
   \              0x46 0x6C    
   \              0x61 0x67    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rxIeeePSPollCfgSetFla...">`:
   \   00000000   0x72 0x78          DC8 "rxIeeePSPollCfgSetFlag = %d\015\012"
   \              0x49 0x65    
   \              0x65 0x65    
   \              0x50 0x53    
   \              0x50 0x6F    
   \              0x6C 0x6C    
   \              0x43 0x66    
   \              0x67 0x53    
   \              0x65 0x74    
   \              0x46 0x6C    
   \              0x61 0x67    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "rxIeeePSPollReqCnt = ...">`:
   \   00000000   0x72 0x78          DC8 "rxIeeePSPollReqCnt = %d\015\012"
   \              0x49 0x65    
   \              0x65 0x65    
   \              0x50 0x53    
   \              0x50 0x6F    
   \              0x6C 0x6C    
   \              0x52 0x65    
   \              0x71 0x43    
   \              0x6E 0x74    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "lastPsStateReqsted = ...">`:
   \   00000000   0x6C 0x61          DC8 "lastPsStateReqsted = %d : %s\015\012"
   \              0x73 0x74    
   \              0x50 0x73    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x52    
   \              0x65 0x71    
   \              0x73 0x74    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x3A 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable503:
   \   00000000   0x001E8481         DC32     0x1e8481

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable503_1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rWLAN:%d">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015WLAN:%d"
   \              0x57 0x4C    
   \              0x41 0x4E    
   \              0x3A 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rAPP:%d">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015APP:%d"
   \              0x41 0x50    
   \              0x50 0x3A    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable504:
   \   00000000   0x........         DC32     app_adc_data

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable504_1:
   \   00000000   0x........         DC32     extFlashFileSize

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TLS_CA">`:
   \   00000000   0x54 0x4C          DC8 "TLS_CA"
   \              0x53 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TLS_CLIENT">`:
   \   00000000   0x54 0x4C          DC8 "TLS_CLIENT"
   \              0x53 0x5F    
   \              0x43 0x4C    
   \              0x49 0x45    
   \              0x4E 0x54    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable508:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable510:
   \   00000000   0x........         DC32     readBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TLS_KEY">`:
   \   00000000   0x54 0x4C          DC8 "TLS_KEY"
   \              0x53 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s%2.2x%2.2x%2.2x">`:
   \   00000000   0x25 0x73          DC8 "%s%2.2x%2.2x%2.2x"
   \              0x25 0x32    
   \              0x2E 0x32    
   \              0x78 0x25    
   \              0x32 0x2E    
   \              0x32 0x78    
   \              0x25 0x32    
   \              0x2E 0x32    
   \              0x78 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_1:
   \   00000000   0x........         DC32     optionHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_2:
   \   00000000   0x47 0x53          DC8      "GS_"
   \              0x5F 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_3:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_4:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_5:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_6:
   \   00000000   0x........         DC32     AppS2w_ClkCalibCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_7:
   \   00000000   0x........         DC32     appCtx+0x548

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_8:
   \   00000000   0x........         DC32     s2wLinkState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_9:
   \   00000000   0x........         DC32     GratiousArpHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_10:
   \   00000000   0x........         DC32     s2wL2L3ConnectSemaphore

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_11:
   \   00000000   0x80000001         DC32     0x80000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_12:
   \   00000000   0x........         DC32     globalUseHRssi

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_13:
   \   00000000   0x........         DC32     s2wApp_ConnectCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_14:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_15:
   \   00000000   0x........         DC32     DHCP_notify

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_16:
   \   00000000   0x........         DC32     wpsConnDone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable515_17:
   \   00000000   0x........         DC32     AppS2w_WlanRespTmrCb
  15480          
  15481          
  15482          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   App2wCmd_Version
        32   -> GsnFlashIf_PioTxFifoWrite
        32   -> GsnSysCtl_WlanFeatureBmapGet
        32   -> GsnSysCtl_WlanFwVerGet
        32   -> GsnVersion_Get
        32   -> S2w_Printf
       8   App2wCmd_mqtt_publish
         8   -> TEST_START
      40   AppS2wCertificateData
        40   -> AppS2wHal_CharNGet
        40   -> AppS2wParse_ToHex
        40   -> GsnDynMemMgmt_Alloc
        40   -> GsnDynMemMgmt_Free
        40   -> S2w_Printf
        40   -> fsm_close
        40   -> fsm_write
        40   -> memcpy
       8   AppS2wCmad_WeapTimeChk
         8   -> AppS2wParse_Int
       8   AppS2wCmad_WsrvrValidationEn
         8   -> AppS2wParse_Int
         8   -> GsnWdd_SkipSuppSrvValidation
      24   AppS2wCmd_Acmode
        24   -> AppS2wParse_Boolean
        24   -> App_FsInit
        24   -> S2w_SaveS2wProfile
        24   -> S2w_SaveS2wProfileParams
        24   -> fsm_enterFS
        24   -> memcpy
      24   AppS2wCmd_AdcConf
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
      40   AppS2wCmd_AdcRead
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnADC_PollRead
        40   -> S2w_Printf
       8   AppS2wCmd_AdcStart
         8   -> GsnADC_Open
       8   AppS2wCmd_AdcStop
         8   -> GsnADC_Close
      24   AppS2wCmd_AmpduReq
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_Mac
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_AmpduReq
      24   AppS2wCmd_AmsduReqt
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_Mac
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_AmsduReq
       8   AppS2wCmd_ApConf
         8   -> AppS2wParse_Boolean
      16   AppS2wCmd_AssocPSModeSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
       8   AppS2wCmd_AutoConnect
         8   -> AppS2wProcess_AutoConnectStart
         8   -> AppS2wProcess_AutoConnectStop
      16   AppS2wCmd_BaBitMapSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_BlockAckEnable
      40   AppS2wCmd_BaudRate
        40   -> AppS2wHal_UartConfig
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> memcpy
        40   -> toupper
      16   AppS2wCmd_BeaconMissThresholdSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_BeaconMissThresholdSet
      24   AppS2wCmd_BlockAckReq
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_Mac
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_BlockAckReq
     248   AppS2wCmd_CidInfo
       248   -> AppS2wHal_CidInfoGet
       248   -> AppS2w_ConnHttpStateGet
       248   -> AppS2w_ConnStateGet
       248   -> S2w_Printf
       248   -> memset
      24   AppS2wCmd_CoapClose
        24   -> AppS2wHal_CoapHandleGet
        24   -> AppS2wHal_CoapParamsGet
        24   -> AppS2wParse_NextParamGet
        24   -> AppS2w_CidValidate
        24   -> GsnCoap_DeInit
        24   -> GsnDynMemMgmt_Free
      24   AppS2wCmd_CoapOpen
        24   -> AppS2wHal_CidGet
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnCoap_Init
        24   -> GsnDynMemMgmt_Alloc
        24   -> S2w_Printf
        24   -> memset
      32   AppS2wCmd_CoapRemoveOption
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnCoap_DeleteToken
        32   -> GsnDynMemMgmt_Free
    1440   AppS2wCmd_CoapSend
      1440   -> AppS2wHal_CharNPut
      1440   -> AppS2wHal_CoapHandleGet
      1440   -> AppS2wHal_CoapParamsGet
      1440   -> AppS2wParse_Int
      1440   -> AppS2wParse_NextParamGet
      1440   -> AppS2w_CidValidate
      1440   -> GsnCoap_Send_And_Recieve
      1440   -> GsnCoap_SetOption
      1440   -> GsnDynMemMgmt_Alloc
      1440   -> GsnDynMemMgmt_Free
      1440   -> S2w_Printf
      1440   -> memcpy
      1440   -> memset
      1440   -> strcmp
      1440   -> strlen
      24   AppS2wCmd_CoapSetOption
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnCoap_SetToken
        24   -> GsnDynMemMgmt_Alloc
        24   -> strcpy
        24   -> strlen
       8   AppS2wCmd_ConfigOutput
         8   -> AppS2wProfile_Display
         8   -> S2w_Printf
      24   AppS2wCmd_Dgpio
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnGpio_Init
        24   -> GsnGpio_OutClear
        24   -> GsnGpio_OutIndvidualSet
        24   -> GsnIoMux_Sel
     192   AppS2wCmd_DhcpSrvr
       192   -> AppS2wParse_Boolean
       192   -> AppS2wParse_Int
       192   -> AppS2wParse_NextParamGet
       192   -> GsnDhcpSrvr_Start
       192   -> GsnDhcpSrvr_Stop
       192   -> GsnNwIf_IpConfigGet
       192   -> memcpy
       192   -> memset
      24   AppS2wCmd_DhcpSrvrConfig
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_Ip
        24   -> AppS2wParse_NextParamGet
        24   -> memcpy
        24   -> memset
       0   AppS2wCmd_Disconnect
         0   -> AppS2w_HangUp
      56   AppS2wCmd_Dns
        56   -> AppS2wParse_Boolean
        56   -> AppS2wParse_NextParamGet
        56   -> GsnDnsSrvr_Start
        56   -> GsnDnsSrvr_Stop
        56   -> S2wDnsConfigGet
        56   -> memcpy
        56   -> memset
        56   -> strlen
      40   AppS2wCmd_DnsLookup
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnNwIf_DnsHostByNameGet
        40   -> S2w_Printf
        40   -> nx_dns_retry_count_set
      40   AppS2wCmd_DnsServerSet
        40   -> AppS2wCmd_DhcpSrvr
        40   -> AppS2wParse_Ip
        40   -> AppS2wParse_NextParamGet
        40   -> GsnDhcpSrvr_Stop
        40   -> GsnNwif_DnsServerAdd
        40   -> GsnNwif_DnsServerGet
        40   -> sprintf
       0   AppS2wCmd_Echo
         0   -> AppS2wParse_Boolean
       0   AppS2wCmd_ErrorCount
       8   AppS2wCmd_ExtFlashChipErase
         8   -> GsnExtFlash_ChipErase
      24   AppS2wCmd_ExtFlashErase
        24   -> AppS2wParse_Hex
        24   -> AppS2wParse_NextParamGet
        24   -> GsnExtFlash_Erase
      16   AppS2wCmd_ExtFlashInit
        16   -> AppExtFlash_Init
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      48   AppS2wCmd_ExtFlashRead
        48   -> AppS2wParse_Hex
        48   -> AppS2wParse_Int
        48   -> AppS2wParse_NextParamGet
        48   -> GsnExtFlash_Read
        48   -> S2w_Printf
        48   -> memset
      40   AppS2wCmd_ExtFlashSpiConf
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnGpio_Init
        40   -> GsnIoMux_PullDownDisable
        40   -> GsnIoMux_PullDownEnable
        40   -> GsnIoMux_Sel
      16   AppS2wCmd_ExtFlashWrite
        16   -> AppS2wParse_Hex
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      16   AppS2wCmd_Factory
        16   -> AppS2wHal_NetCloseAll
        16   -> AppS2wHal_NetworkConfig
        16   -> AppS2wProcess_DefaulConfigtLoad
        16   -> AppS2w_SetWlanDfltParams
        16   -> memcpy
      16   AppS2wCmd_FrameTxFailCntLmitSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_FrameTxFailCntLmitSet
       8   AppS2wCmd_GoOnline
         8   -> AppS2wHal_NetIsCidOpen
         8   -> GsnGpio_Init
         8   -> GsnGpio_IntCbRegister
         8   -> GsnGpio_NEIntEnable
         8   -> S2w_AsyncMsgGpioOp
      24   AppS2wCmd_HardFlow
        24   -> AppS2wHal_UartConfig
        24   -> AppS2wParse_Boolean
        24   -> GsnIoMux_PullDownDisable
        24   -> GsnIoMux_PullDownEnable
        24   -> GsnIoMux_Sel
      16   AppS2wCmd_Hibernate
        16   -> AppS2wHal_PsHibernateRequest
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_NextParamGet
        16   -> memset
      16   AppS2wCmd_HttpClientClose
        16   -> AppS2wHal_HttpClose
        16   -> AppS2wParse_Hex
        16   -> AppS2wParse_NextParamGet
        16   -> AppS2w_CidValidate
      40   AppS2wCmd_HttpClientConfig
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnDynMemMgmt_Alloc
        40   -> GsnDynMemMgmt_Free
        40   -> memset
        40   -> strlen
        40   -> strncpy
      32   AppS2wCmd_HttpClientConfigDel
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnDynMemMgmt_Free
      64   AppS2wCmd_HttpClientOpen
        64   -> AppS2wHal_HttpCheckDns
        64   -> AppS2wHal_HttpOpen
        64   -> AppS2wParse_Int
        64   -> AppS2wParse_NextParamGet
        64   -> GsnDynMemMgmt_Alloc
        64   -> GsnDynMemMgmt_Free
        64   -> GsnNwIf_DnsHostByNameGet
        64   -> S2wCert_FlashFileLoad
        64   -> S2wCert_SearchRamTable
        64   -> S2w_Printf
        64   -> inet_pton
        64   -> memcpy
        64   -> memset
        64   -> strcpy
        64   -> strlen
      64   AppS2wCmd_HttpClientSend
        64   -> AppS2wHal_HttpHandleGet
        64   -> AppS2wParse_Int
        64   -> AppS2wParse_NextParamGet
        64   -> AppS2w_CidValidate
        64   -> AppS2w_HttpdBodyLenSet
        64   -> AppS2w_HttpdCtxInit
        64   -> AppS2w_HttpdMethodSet
        64   -> AppS2w_HttpdSetTimeOut
        64   -> GsnDynMemMgmt_Alloc
        64   -> GsnDynMemMgmt_Free
        64   -> GsnHttpd_IsRunning
        64   -> GsnOsal_SemAcquire
        64   -> GsnOsal_SemRelease
        64   -> GsnSoftTmr_Start
        64   -> GsnSoftTmr_Stop
        64   -> S2wHttp_Send
        64   -> strcmp
        64   -> strlen
        64   -> strncpy
      16   AppS2wCmd_IdOutput
        16   -> AppS2wParse_Int
        16   -> S2w_Printf
      16   AppS2wCmd_IpMulticastJoin
        16   -> AppS2wParse_Ip
        16   -> AppS2wParse_NextParamGet
        16   -> _nxe_igmp_multicast_join
      16   AppS2wCmd_IpMulticastLeave
        16   -> AppS2wParse_Ip
        16   -> AppS2wParse_NextParamGet
        16   -> _nxe_igmp_multicast_leave
       8   AppS2wCmd_McastRecvSet
         8   -> AppS2wHal_McastRecvSet
         8   -> AppS2wParse_Boolean
      96   AppS2wCmd_Nauto
        96   -> AppS2wParse_Boolean
        96   -> AppS2wParse_Int
        96   -> AppS2wParse_Ip
        96   -> AppS2wParse_NextParamGet
        96   -> GsnNwIf_DnsHostByNameGet
        96   -> inet_addr
        96   -> memcmp
        96   -> memcpy
        96   -> memset
        96   -> strlen
       8   AppS2wCmd_Nclose
         8   -> AppS2wHal_NetClose
         8   -> AppS2wParse_Hex
       0   AppS2wCmd_Ncloseall
         0   -> AppS2wHal_NetCloseAll
    1344   AppS2wCmd_NcmAuto
      1344   -> AppS2wHal_TimerStop
      1344   -> AppS2wNcmProfile_Display
      1344   -> AppS2wParse_Boolean
      1344   -> AppS2wParse_NextParamGet
      1344   -> AppS2w_HangUp
      1344   -> GsnDhcpSrvr_Stop
      1344   -> GsnDnsSrvr_Stop
      1344   -> GsnHeIf_DriverInit
      1344   -> GsnNcm_ConfigSet
      1344   -> GsnNcm_Start
      1344   -> GsnNcm_Stop
      1344   -> GsnNwIf_Close
      1344   -> GsnOsal_SemAcquire
      1344   -> GsnWdd_AssocStatusGet
      1344   -> GsnWdd_BeaconMissThresholdSet
      1344   -> S2wCert_FlashFileLoad
      1344   -> S2wCert_SearchRamTable
      1344   -> S2w_AsyncMsgGpioOp
      1344   -> S2w_Printf
      1344   -> S2w_getApSecurityConfig
      1344   -> S2w_getSecurityConfig
      1344   -> S2w_macAddrRTCGet
      1344   -> __aeabi_uldivmod
      1344   -> memcpy
      1344   -> memset
      1344   -> sprintf
      1344   -> strlen
      24   AppS2wCmd_NcmAutoConf
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
      72   AppS2wCmd_Nctcp
        72   -> AppS2wHal_NetTcpClient
        72   -> AppS2wParse_AddrPort
        72   -> AppS2wProcess_StatusNotify
      80   AppS2wCmd_Ncudp
        80   -> AppS2wHal_NetUdpClient
        80   -> AppS2wParse_AddrPort
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> AppS2wProcess_StatusNotify
      72   AppS2wCmd_Ndhcp
        72   -> AppS2wHal_NetworkConfig
        72   -> AppS2wParse_Boolean
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> GsnNwIf_DhcpStop
        72   -> GsnNwif_DnsServerGet
        72   -> S2w_macAddrRTCGet
        72   -> _nxe_arp_gratuitous_send
        72   -> memcpy
        72   -> sprintf
        72   -> strlen
      40   AppS2wCmd_Nmac
        40   -> AppS2wHal_MacAddrSet
        40   -> AppS2wParse_Mac
        40   -> AppS2w_HangUp
        40   -> App_FsInit
        40   -> S2w_Printf
        40   -> S2w_SaveApMacAddr
        40   -> S2w_SaveMacAddr
        40   -> S2w_macAddrRTCGet
        40   -> S2w_macAddrRTCSet
        40   -> fsm_enterFS
        40   -> memcpy
     232   AppS2wCmd_Nset
       232   -> AppS2wHdrAndIpv4_Print
       232   -> AppS2wParse_Ip
       232   -> AppS2wParse_NextParamGet
       232   -> GsnNwIf_Open
       232   -> GsnNwif_IPv4Configure
       232   -> __aeabi_memcpy4
       232   -> memcpy
       232   -> memset
     296   AppS2wCmd_Nstat
       296   -> AppS2wCmd_GetSecurityString
       296   -> AppS2wHal_CharNPut
       296   -> AppS2wHal_MacAddrGet
       296   -> GsnNwIf_IpConfigGet
       296   -> GsnWdd_AssocStatusGet
       296   -> GsnWdd_PhyAddrGet
       296   -> GsnWdd_RSSIGet
       296   -> S2w_Printf
       296   -> memset
      80   AppS2wCmd_Nstcp
        80   -> AppS2wHal_NetTcpServer
        80   -> AppS2wHal_TcpSrvMaxConSet
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> AppS2wProcess_StatusNotify
      72   AppS2wCmd_Nsudp
        72   -> AppS2wHal_NetUdpServer
        72   -> AppS2wParse_Int
        72   -> AppS2wProcess_StatusNotify
       0   AppS2wCmd_NwConnRestore
         0   -> AppS2wHal_NwContextRestore
       0   AppS2wCmd_NwConnStore
         0   -> AppS2wHal_NwContextStore
      40   AppS2wCmd_OtaFwupConf
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnDynMemMgmt_Alloc
        40   -> GsnDynMemMgmt_Free
        40   -> S2wCert_FlashFileLoad
        40   -> S2wCert_SearchRamTable
        40   -> S2w_Printf
        40   -> inet_pton
        40   -> memset
        40   -> strcpy
        40   -> strlen
        40   -> strncpy
      24   AppS2wCmd_OtaFwupExtFlashStart
        24   -> APPS2w_ExtFlashStart
        24   -> GsnDynMemMgmt_Alloc
        24   -> memcpy
        24   -> memset
       8   AppS2wCmd_OtaFwupRollBack
         8   -> GsnFwup_RollBackOtafu
         8   -> GsnSys_Reset
      72   AppS2wCmd_Ping
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_Ip
        72   -> AppS2wParse_NextParamGet
        72   -> AppS2w_PingTaskNotify
        72   -> AppS2w_PingThreadCreate
        72   -> GsnNwIf_DnsHostByNameGet
        72   -> S2w_Printf
        72   -> memcpy
        72   -> memset
        72   -> nx_dns_retry_count_set
        72   -> strcpy
        72   -> strlen
      16   AppS2wCmd_PowerSave
        16   -> AppS2wHal_PowerSaveConfig
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
      24   AppS2wCmd_PowerSaveDpsleep
        24   -> AppS2wHal_PsDpSleepStart
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> memset
      24   AppS2wCmd_PowerSaveStby
        24   -> AppS2wHal_PsStbyRequest
        24   -> AppS2wParse_64BitNumber
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> memset
      40   AppS2wCmd_Psk
        40   -> AppS2wHal_PskKeyStore
        40   -> AppS2wParse_Psk
        40   -> memcpy
      56   AppS2wCmd_RadioStateGet
        56   -> GsnWdd_RadioModeInfoGet
        56   -> GsnWdd_RadioStateGet
        56   -> S2w_Printf
        56   -> __aeabi_memcpy4
    2064   AppS2wCmd_RegDomainSet
      2064   -> AppS2wParse_Int
      2064   -> App_FsInit
      2064   -> S2w_Printf
      2064   -> S2w_SaveS2wProfile
      2064   -> __aeabi_memcpy4
      2064   -> fsm_enterFS
      16   AppS2wCmd_RtsEnable
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_RtsEnable
       8   AppS2wCmd_SSLClose
         8   -> AppS2w_CidValidate
         8   -> AppS2w_SslClose
      32   AppS2wCmd_SSLOpen
        32   -> AppS2wParse_NextParamGet
        32   -> AppS2w_CidValidate
        32   -> AppS2w_ConnModeGet
        32   -> AppS2w_SslClientOpen
        32   -> AppS2w_SslServerOpen
       8   AppS2wCmd_SecuritySet
         8   -> AppS2wParse_Int
      24   AppS2wCmd_SetDefaultProfile
        24   -> AppS2wParse_Boolean
        24   -> App_FsInit
        24   -> S2w_SaveS2wProfileParams
        24   -> fsm_enterFS
      32   AppS2wCmd_SetSockOp
        32   -> AppS2wHal_SockOpSet
        32   -> AppS2wParse_Hex
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
      32   AppS2wCmd_Settings
        32   -> AppS2wParse_Int
        32   -> GsnWdd_ScanParamSet
        32   -> S2w_Printf
        32   -> isspace
       8   AppS2wCmd_SoftFlow
         8   -> AppS2wParse_Boolean
         8   -> GsnUart_SwFlowSupportSet
      72   AppS2wCmd_SslCertificateAdd
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> GsnDynMemMgmt_Alloc
        72   -> S2wCert_MemAlloc
        72   -> S2wCert_findFile
        72   -> S2w_Printf
        72   -> __aeabi_memclr4
        72   -> fsm_mkdir
        72   -> fsm_open
        72   -> memcpy
        72   -> sprintf
        72   -> strcpy
        72   -> strlen
      24   AppS2wCmd_SslCertificateDelete
        24   -> AppS2wParse_NextParamGet
        24   -> AppS2w_CertDelete
        24   -> GsnDynMemMgmt_Free
        24   -> S2wCert_SearchRamTable
        24   -> strcmp
      48   AppS2wCmd_SystemTimeGet
        48   -> GsnTod_Get
        48   -> S2w_Printf
        48   -> __aeabi_uldivmod
        48   -> __gmtime32
      80   AppS2wCmd_SystemTimeSet
        80   -> AppS2wParse_64BitNumber
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> GsnTod_AdjustOffset
        80   -> GsnTod_Get
        80   -> __aeabi_uldivmod
        80   -> __mktime32
        80   -> strlen
      16   AppS2wCmd_TempGet
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_NextParamGet
        16   -> GsnIntTempSen_Get
        16   -> GsnSysCtl_DieTempGet
        16   -> S2w_Printf
      24   AppS2wCmd_TempReadStart
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnSysCtl_DieTempSendTimerStart
        24   -> GsnSysCtl_DieTempSendTimerStop
      16   AppS2wCmd_TkipContrMsrStart
        16   -> AppS2wParse_Boolean
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_TkipContrMsrStart
      24   AppS2wCmd_TkipSeqNumGet
        24   -> AppS2wParse_Boolean
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_TkipSeqNumGet
        24   -> S2w_Printf
      24   AppS2wCmd_UartFifoLevel
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnUart_IntrFifoRxLevelGet
        24   -> GsnUart_IntrFifoRxLevelSet
        24   -> GsnUart_IntrFifoTxLevelGet
        24   -> GsnUart_IntrFifoTxLevelSet
        24   -> S2w_Printf
       0   AppS2wCmd_Verbose
         0   -> AppS2wParse_Boolean
     360   AppS2wCmd_Wassoc
       360   -> AppS2wHal_Disassociate
       360   -> AppS2wHdrAndIpv4_Print
       360   -> AppS2wParse_Wcmd
       360   -> AppS2w_ConctCbProcess
       360   -> DHCP_notify
       360   -> GsnHeIf_DriverInit
       360   -> GsnHeIf_DriverSuspend
       360   -> GsnNwIf_Close
       360   -> GsnNwIf_Open
       360   -> GsnNwif_DnsServerGet
       360   -> GsnOsal_SemAcquire
       360   -> GsnSoftTmr_Start
       360   -> GsnSoftTmr_Stop
       360   -> GsnWdd_AssocStatusGet
       360   -> GsnWdd_Connect
       360   -> GsnWdd_ErrorGet
       360   -> S2wCert_FlashFileLoad
       360   -> S2wCert_SearchRamTable
       360   -> S2w_Printf
       360   -> S2w_getSecurityConfig
       360   -> S2w_macAddrRTCGet
       360   -> _nxe_arp_gratuitous_send
       360   -> memcpy
       360   -> memset
       360   -> s2wApp_ConnectCb
       360   -> sprintf
       360   -> strlen
     360   AppS2wCmd_Wassoc_test
       360   -> AppS2wHal_Disassociate
       360   -> AppS2wHdrAndIpv4_Print
       360   -> AppS2wParse_Wcmd
       360   -> AppS2w_ConctCbProcess
       360   -> DHCP_notify
       360   -> GsnHeIf_DriverInit
       360   -> GsnHeIf_DriverSuspend
       360   -> GsnNwIf_Close
       360   -> GsnNwIf_Open
       360   -> GsnNwif_DnsServerGet
       360   -> GsnOsal_SemAcquire
       360   -> GsnSoftTmr_Start
       360   -> GsnSoftTmr_Stop
       360   -> GsnWdd_AssocStatusGet
       360   -> GsnWdd_Connect
       360   -> GsnWdd_ErrorGet
       360   -> S2wCert_FlashFileLoad
       360   -> S2wCert_SearchRamTable
       360   -> S2w_Printf
       360   -> S2w_getSecurityConfig
       360   -> S2w_macAddrRTCGet
       360   -> _nxe_arp_gratuitous_send
       360   -> memcpy
       360   -> memset
       360   -> s2wApp_ConnectCb
       360   -> sprintf
       360   -> strlen
       8   AppS2wCmd_Wauth
         8   -> AppS2wParse_Int
      56   AppS2wCmd_Wauto
        56   -> AppS2wParse_Wcmd
        56   -> memcpy
        56   -> memset
      80   AppS2wCmd_Weap
        80   -> AppS2wParse_Int
        80   -> AppS2wParse_NextParamGet
        80   -> GsnDynMemMgmt_Alloc
        80   -> S2wCert_MemAlloc
        80   -> __aeabi_memclr4
        80   -> __aeabi_memcpy
        80   -> fsm_mkdir
        80   -> fsm_open
        80   -> memcpy
        80   -> sprintf
      32   AppS2wCmd_WeapConf
        32   -> AppS2wParse_Boolean
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> memcpy
        32   -> memset
        32   -> strlen
      16   AppS2wCmd_WlanRecvFiltrSet
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_WlanRecvFiltrSet
      72   AppS2wCmd_Wmode
        72   -> AppS2wHal_MacAddrSet
        72   -> AppS2wParse_Boolean
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> AppS2w_SetWlanDfltParams
        72   -> App_IfInit
        72   -> App_IfReinit
        72   -> App_InterfaceStart
        72   -> App_InterfaceStop
        72   -> GsnWdd_BeaconMissThresholdSet
        72   -> GsnWdd_SetGrpKeyUpdateTime
        72   -> S2w_macAddrRTCGet
        72   -> memcpy
     152   AppS2wCmd_WpaPsk
       152   -> AppS2wHal_WpaPskCompute
       152   -> AppS2wParse_NextParamGet
       152   -> AppS2wParse_Ssid
       152   -> GsnHeIf_DriverInit
       152   -> GsnHeIf_DriverSuspend
       152   -> S2w_Printf
       152   -> memcpy
       152   -> memset
       152   -> strlen
      16   AppS2wCmd_Wphymode
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWdd_PhyModeSet
      48   AppS2wCmd_Wpower
        48   -> AppS2wParse_Int
        48   -> AppS2wParse_NextParamGet
        48   -> GsnWdd_TxPowerSet
        48   -> memset
       8   AppS2wCmd_Wradio
         8   -> AppS2wHal_RadioModeConfig
         8   -> AppS2wParse_Boolean
      24   AppS2wCmd_Wrate
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWdd_TxRateGet
        24   -> GsnWdd_TxRateSet
        24   -> S2wRateValidation
        24   -> S2w_Printf
       8   AppS2wCmd_Wretry
         8   -> AppS2wParse_Int
         8   -> GsnWdd_TxNumRetrySet
      24   AppS2wCmd_Write
        24   -> AppS2wParse_Boolean
        24   -> App_FsInit
        24   -> S2w_SaveS2wProfile
        24   -> fsm_enterFS
        24   -> memcpy
     152   AppS2wCmd_Wscan
       152   -> AppS2wParse_Wcmd
       152   -> GsnOsal_SemAcquire
       152   -> GsnWdd_Scan
       152   -> S2w_Printf
       152   -> memcmp
       152   -> memcpy
       152   -> memset
       152   -> s2wScanResult_Print
     296   AppS2wCmd_Wwep
       296   -> AppS2wParse_WepKey
       296   -> memcpy
       296   -> strlen
       0   AppS2wCmd_WwepConf
     288   AppS2wCmd_Wwpa
       288   -> AppS2wParse_NextParamGet
       288   -> memcpy
       288   -> memset
       288   -> strlen
      96   AppS2wCmd_Wwps
        96   -> AppS2wHal_WpsAssociate
        96   -> AppS2wParse_Boolean
        96   -> AppS2wParse_Int
        96   -> AppS2wParse_NextParamGet
        96   -> AppS2wParse_Ssid
        96   -> memcpy
        96   -> strlen
      40   AppS2wCmd_ieeePsPollSet
        40   -> AppS2wParse_Boolean
        40   -> AppS2wParse_Int
        40   -> AppS2wParse_NextParamGet
        40   -> GsnWdd_Ioctl
        40   -> GsnWdd_RadioPowerSaveCfgSet
        40   -> memcpy
        40   -> memset
      48   AppS2wCmd_ntpTimeSet
        48   -> AppS2wParse_Boolean
        48   -> AppS2wParse_Int
        48   -> AppS2wParse_Ip
        48   -> AppS2wParse_NextParamGet
        48   -> GsnSntp_TimeSync
        48   -> GsnSoftTmr_Start
        48   -> GsnSoftTmr_Stop
        48   -> S2w_Printf
        48   -> memcpy
      16   AppS2wCmd_read
        16   -> AppS2wParse_Boolean
        16   -> App_FsInit
        16   -> S2w_LoadS2wProfile
        16   -> fsm_enterFS
       8   AppS2wCmd_reset
         8   -> GsnGpio_OutClear
         8   -> GsnSys_Reset
      32   AppS2wCmd_scanTimeSet
        32   -> AppS2wParse_Int
        32   -> AppS2wParse_NextParamGet
        32   -> GsnWdd_ScanParamSet
        32   -> S2w_Printf
      40   AppS2wCommand_Process
        40   -- Indirect call
        40   -> AppMainCtx_TaskNotify
        40   -> AppS2wParse_StrnCaseCmp
        40   -> AppS2wProcess_StatusNotify
        40   -> GsnOsal_SemAcquire
        40   -> GsnOsal_SemRelease
        40   -> s2wSpiFs_Flush
        40   -> strlen
        40   -> toupper
      24   AppS2wExternalFlashData
        24   -> AppS2wHal_CharNGet
        24   -> GsnExtFlash_Write
        24   -> S2w_Printf
        24   -> memset
    2816   AppS2wHal_CoapContentDataGet
      2816   -> AppS2wHal_CharNGet
      2816   -> AppS2wHal_CharNPut
      2816   -> AppS2wHal_CoapHandleGet
      2816   -> AppS2wHal_CoapParamsGet
      2816   -> GsnCoap_Send_And_Recieve
      2816   -> GsnDynMemMgmt_Free
      2816   -> S2w_Printf
      2816   -> s2wSpiFs_Flush
      32   AppS2wHal_httpContentDataGet
        32   -> AppS2wHal_CharNGet
        32   -> AppS2wHal_HttpHandleGet
        32   -> GsnDynMemMgmt_Alloc
        32   -> GsnDynMemMgmt_Free
        32   -> GsnOsal_SemAcquire
        32   -> GsnOsal_SemRelease
        32   -> S2wHttp_Send
     208   AppS2wHdrAndIpv4_Print
       208   -> GsnNwIf_IpConfigGet
       208   -> S2w_Printf
       208   -> memcpy
      24   AppS2wHex_Print
        24   -> S2w_PutChar
       8   AppS2wIp_Print
         8   -> S2w_Printf
      40   AppS2wNcmProfile_Display
        40   -> AppS2wHal_CharNPut
        40   -> AppS2wIp_Print
        40   -> AppS2wSecurity_Display
        40   -> S2w_Printf
        40   -> S2w_PutChar
     192   AppS2wNetConnMgr_Cb
       192   -- Indirect call
       192   -> AppS2wHal_TimerStop
       192   -> AppS2wProcess_DhcpFailNotify
       192   -> AppS2wProcess_DhcpIpChangeNotify
       192   -> AppS2wProcess_EventNotify
       192   -> AppS2w_ExitDpSleep
       192   -> AppS2w_NcmL3ConnProcess
       192   -> GsnDhcpSrvr_Stop
       192   -> GsnDnsSrvr_Stop
       192   -> GsnNwIf_IpConfigGet
       192   -> GsnOsal_SemRelease
       192   -> S2w_AsyncMsgGpioOp
      16   AppS2wProcess_SntpTimerNotify
        16   -> GsnSntp_TimeSync
      32   AppS2wProfile_Display
        32   -> AppS2wHal_CharNPut
        32   -> AppS2wIp_Print
        32   -> AppS2wRegisters_Display
        32   -> AppS2wSecurity_Display
        32   -> S2w_Printf
        32   -> S2w_PutChar
      24   AppS2wRegisters_Display
        24   -> S2w_Printf
      40   AppS2wScanResult_Print
        40   -> AppS2wHal_CharNPut
         0   -> S2w_Printf
        40   -> S2w_Printf
      40   AppS2wScan_Notification
        40   -> GsnMacUtil_ExtractCapaInfo
        40   -> GsnMacUtil_ExtractEncryptionStatus
         0   -> GsnOsal_SemRelease
        40   -> memcpy
      32   AppS2wSecurity_Display
        32   -> AppS2wHex_Print
        32   -> S2w_Printf
      24   AppS2w_ConctCbProcess
        24   -> GsnWdd_AssocStatusGet
        24   -> memcpy
        24   -> memset
      32   AppS2w_HangUp
        32   -> AppS2wHal_Disassociate
        32   -> AppS2wHal_NetCloseAll
        32   -> GsnSoftTmr_Start
        32   -> GsnSoftTmr_Stop
     184   AppS2w_NcmL3ConnProcess
       184   -- Indirect call
       184   -> AppS2wHdrAndIpv4_Print
       184   -> AppS2wProcess_AsyncStatusNotify
       184   -> AppS2wProcess_DhcpIpChangeNotify
       184   -> AppS2wProcess_StatusNotify
       184   -> AppS2w_ExitDpSleep
       184   -> GsnNwIf_IpConfigGet
       184   -> GsnNwif_DnsServerAdd
       184   -> GsnOsal_SemAcquire
       184   -> GsnOsal_SemRelease
       184   -> S2w_Printf
       184   -> _nxe_arp_gratuitous_send
       184   -> nx_arp_table_set
       184   -> s2w_StartDhcpDnsServer
       8   AppS2w_PingTaskNotify
         8   -> _tx_queue_send
      24   AppS2w_PingThreadCreate
        24   -> GsnOsal_ThreadCreate
        24   -> MALLOC
        24   -> _tx_queue_create
       8   AppS2w_PingThreadEntry
         8   -> _tx_queue_receive
         8   -> s2wPingStart
         8   -> s2wPingStop
       8   AppS2w_WlanRespTmrCb
         0   -> GsnSys_Reset
         8   -> memcpy
       0   AppS2w_sntpTimerCb
         0   -- Indirect call
      48   App_ClkTuneCmd
        48   -> AppS2wParse_Int
        48   -> AppS2wParse_NextParamGet
        48   -> GsnSoftTmr_Start
        48   -> GsnSoftTmr_Stop
     176   DHCP_notify
       176   -- Indirect call
       176   -> AppMainCtx_TaskNotify
       176   -> GsnNwIf_IpConfigGet
       176   -> GsnOsal_SemRelease
       176   -> S2w_AsyncMsgGpioOp
       176   -> _nxe_arp_gratuitous_send
       0   GsnFlashIf_PioTxFifoWrite
       8   GsnIoMux_PullDownDisable
         8   -> GsnOsal_IntrDisable
         0   -> GsnOsal_IntrEnable
       8   GsnIoMux_PullDownEnable
         8   -> GsnOsal_IntrDisable
         0   -> GsnOsal_IntrEnable
       0   GsnIoMux_Sel
       0   GsnOsal_IntrDisable
         0   -> _tx_thread_interrupt_control
       0   GsnOsal_IntrEnable
         0   -> _tx_thread_interrupt_control
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
       0   S2wApp_TimeSyncDoneCb
         0   -> GsnTod_AdjustOffset
     168   S2wDnsConfigGet
       168   -> GsnNwIf_IpConfigGet
       168   -> memcpy
       168   -> memset
       0   S2wRateValidation
       8   S2w_CmdBulkDataState
         8   -> AppS2wParse_Boolean
       8   S2w_CmdSyncLossIntrvlSet
         8   -> AppS2wHal_SyncLossIntrvlSet
         8   -> AppS2wParse_Int
      24   S2w_getApSecurityConfig
         0   -> memcpy
        24   -> memcpy
      24   S2w_getSecurityConfig
        24   -> memcmp
        24   -> memcpy
        24   -> memset
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
       8   s2wApp_ConnectCb
         0   -> GsnOsal_SemRelease
         8   -> GsnSoftTmr_Stop
       0   s2wDhcpv6Stop
         0   -> GsnNwIf_DhcpV6Stop
      56   s2wScanResult_Print
        56   -> AppS2wHal_CharNPut
        56   -> S2w_Printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "  MODE=AP \r\n">
      16  ?<Constant "  MODE=IBSS \r\n">
      16  ?<Constant "  MODE=NONE \r\n">
      16  ?<Constant "  MODE=STA \r\n">
       2  ?<Constant " ">
      36  ?<Constant " %02x:%02x:%02x:%02x:...">
       4  ?<Constant " %s">
      16  ?<Constant " &K%d &R%d\r\n">
      16  ?<Constant " CHANNEL=%d  ">
      16  ?<Constant " CHANNEL=NONE  ">
      24  ?<Constant " Gateway=%d.%d.%d.%d\r\n">
      24  ?<Constant " SECURITY=%s\r\nRSSI=%d\r\n">
       1  ?<Constant "">
      28  ?<Constant "%4d\t\t%4d\t\t%3d.%3d.%3d...">
       4  ?<Constant "%c">
       8  ?<Constant "%c,%d">
       4  ?<Constant "%d">
      12  ?<Constant "%d.%d.%d.%d">
      40  ?<Constant "%d.%d.%d.%d:%d.%d.%d....">
      20  ?<Constant "%s%2.2x%2.2x%2.2x">
      12  ?<Constant "%s+WWEP%d=">
      12  ?<Constant "%sS%d=%05u">
       8  ?<Constant "%x\r\n">
       4  ?<Constant "%x\t">
       4  ?<Constant "&F">
       4  ?<Constant "&K">
       4  ?<Constant "&R">
       4  ?<Constant "&V">
       4  ?<Constant "&W">
       4  ?<Constant "&Y">
      12  ?<Constant "+AOTPRD=">
      16  ?<Constant "+APCLIENTINFO=">
      12  ?<Constant "+APCONF=">
      16  ?<Constant "+ASYNCMSGFMT=">
      16  ?<Constant "+BATTLVLSET=">
      12  ?<Constant "+BATTVALGET">
       8  ?<Constant "+BCHK=">
      12  ?<Constant "+BCHKSTOP">
      12  ?<Constant "+BCHKSTRT=">
      20  ?<Constant "+BCONMISSTHRHLD=">
       8  ?<Constant "+BDATA=">
       8  ?<Constant "+CID=">
      12  ?<Constant "+CLKTUNE=">
      12  ?<Constant "+COAPCLOSE=">
      12  ?<Constant "+COAPOPEN=">
      16  ?<Constant "+COAPOPTCONF=">
      20  ?<Constant "+COAPOPTCONFDEL=">
      20  ?<Constant "+COAPSENDRECIEVE=">
      12  ?<Constant "+CRYPTOEN=">
       8  ?<Constant "+DGPIO=">
      12  ?<Constant "+DHCPSRVR=">
      16  ?<Constant "+DHCPSRVRCFG=">
       8  ?<Constant "+DNS=">
      12  ?<Constant "+DNSLOOKUP=">
      12  ?<Constant "+DNSSET=">
      16  ?<Constant "+EXFLASHCERASE">
      16  ?<Constant "+EXFLASHERASE=">
      16  ?<Constant "+EXFLASHINIT=">
      16  ?<Constant "+EXFLASHREAD=">
      20  ?<Constant "+EXFLASHSPICONF=">
      16  ?<Constant "+EXFLASHWRITE=">
      12  ?<Constant "+GETTIME=">
      12  ?<Constant "+GRATARP">
      12  ?<Constant "+HIBERNATE=">
      12  ?<Constant "+HTTPCLOSE=">
      12  ?<Constant "+HTTPCONF=">
      16  ?<Constant "+HTTPCONFDEL=">
      12  ?<Constant "+HTTPOPEN=">
      12  ?<Constant "+HTTPSEND=">
      12  ?<Constant "+L2CONFIG=">
      12  ?<Constant "+LOGLVL=">
      12  ?<Constant "+MCSTSET=">
      16  ?<Constant "+MDNSANNOUNCE">
      16  ?<Constant "+MDNSHNDEREG=">
      12  ?<Constant "+MDNSHNREG=">
      12  ?<Constant "+MDNSSD=">
      16  ?<Constant "+MDNSSRVDEREG=">
      16  ?<Constant "+MDNSSRVREG=">
      12  ?<Constant "+MDNSSTART">
      12  ?<Constant "+MDNSSTOP">
      12  ?<Constant "+MEMREAD=">
      12  ?<Constant "+MEMWRITE=">
      16  ?<Constant "+MQTT_PUBLISH">
       8  ?<Constant "+NARP=">
      12  ?<Constant "+NARPAUTO=">
      16  ?<Constant "+NARPCHACHEDEL">
      16  ?<Constant "+NARPCHACHEEN=">
      16  ?<Constant "+NARPDELETE=">
      12  ?<Constant "+NARPSET=">
       8  ?<Constant "+NAUTO=">
      16  ?<Constant "+NAUTO=%d,%d,">
      12  ?<Constant "+NCLOSE=">
      12  ?<Constant "+NCLOSEALL">
      12  ?<Constant "+NCMAUTO=">
      16  ?<Constant "+NCMAUTOCONF=">
       8  ?<Constant "+NCTCP=">
       8  ?<Constant "+NCUDP=">
       8  ?<Constant "+NDHCP=">
      20  ?<Constant "+NDHCP=%d +NSET=">
      20  ?<Constant "+NIPMULTICASTJOIN=">
      20  ?<Constant "+NIPMULTICASTLEAVE=">
       8  ?<Constant "+NMAC=">
       8  ?<Constant "+NSET=">
       8  ?<Constant "+NSTAT=">
       8  ?<Constant "+NSTCP=">
       8  ?<Constant "+NSUDP=">
      12  ?<Constant "+NTIMESYNC=">
      12  ?<Constant "+NURIREDIR=">
      16  ?<Constant "+NXSETSOCKOPT=">
       8  ?<Constant "+PING=">
      12  ?<Constant "+PSDPSLEEP">
      24  ?<Constant "+PSK-valid=%d +SSID=%s">
      16  ?<Constant "+PSPOLLINTRL=">
      12  ?<Constant "+PSSTBY=">
      12  ?<Constant "+PWMCNTRL=">
      12  ?<Constant "+PWMSTART=">
      12  ?<Constant "+PWMSTOP=">
       8  ?<Constant "+RESET">
      16  ?<Constant "+RESTORENWCONN">
      12  ?<Constant "+RXFILTER=">
      12  ?<Constant "+SETTIME=">
      16  ?<Constant "+SOTAFWUPCONF=">
      20  ?<Constant "+SOTAFWUPROLLBACK">
      16  ?<Constant "+SOTAFWUPSTART">
      12  ?<Constant "+SSLCLOSE=">
      12  ?<Constant "+SSLCONF=">
      12  ?<Constant "+SSLOPEN=">
      48  ?<Constant "+STATIONS=%d  +REGDOM...">
      16  ?<Constant "+STORENWCONN">
      12  ?<Constant "+TCERTADD=">
      12  ?<Constant "+TCERTDEL=">
      16  ?<Constant "+TEMPVALGET=">
      16  ?<Constant "+TKIPCNTRMSR=">
      16  ?<Constant "+TKIPSEQSET=">
      12  ?<Constant "+TXFAILLMT=">
      12  ?<Constant "+UAMCCA=">
      12  ?<Constant "+UARTFLVL=">
      16  ?<Constant "+UNSOLICITEDRX=">
      20  ?<Constant "+UNSOLICITEDRXSTOP">
      16  ?<Constant "+UNSOLICITEDTX=">
      12  ?<Constant "+URIRECV=">
       8  ?<Constant "+VER=">
       8  ?<Constant "+WA=">
      12  ?<Constant "+WAMPDU=">
      12  ?<Constant "+WAMSDU=">
      12  ?<Constant "+WAPPSCFG=">
       8  ?<Constant "+WAPSM=">
      16  ?<Constant "+WASSOCCONF=">
       8  ?<Constant "+WAUTH=">
      24  ?<Constant "+WAUTH=%d +WWPA=\"%s\"">
       8  ?<Constant "+WAUTO=">
      12  ?<Constant "+WAUTO=%d,\"">
      12  ?<Constant "+WBACKEN=">
      12  ?<Constant "+WBLOCKACK=">
      12  ?<Constant "+WCALIB=">
      16  ?<Constant "+WCARWAVTEST=">
       4  ?<Constant "+WD">
       8  ?<Constant "+WEAP=">
      12  ?<Constant "+WEAPCONF=">
      16  ?<Constant "+WEAPTIMECHK=">
      12  ?<Constant "+WEBPROV=">
      16  ?<Constant "+WEBPROVSTOP">
      12  ?<Constant "+WEBSERVER=">
      16  ?<Constant "+WFRAMETXTEST=">
      16  ?<Constant "+WIEEEPSPOLL=">
      16  ?<Constant "+WKEEPALIVE=">
      12  ?<Constant "+WLANSTATS">
       8  ?<Constant "+WM=">
      12  ?<Constant "+WOTPRD=">
       8  ?<Constant "+WP=">
      12  ?<Constant "+WPAPSK=">
      12  ?<Constant "+WPHYMODE=">
       8  ?<Constant "+WPSK=">
      16  ?<Constant "+WRADIOSTATE=">
       8  ?<Constant "+WRATE=">
      16  ?<Constant "+WREGDOMAIN=">
      12  ?<Constant "+WRETRY=">
      44  ?<Constant "+WRETRY=%u +WP=%d +WR...">
      16  ?<Constant "+WRFTESTSTART">
      16  ?<Constant "+WRFTESTSTOP">
       8  ?<Constant "+WRSSI=">
       8  ?<Constant "+WRTS=">
      12  ?<Constant "+WRXACTIVE=">
       8  ?<Constant "+WRXPS=">
      12  ?<Constant "+WRXSTOP">
      12  ?<Constant "+WRXTEST=">
       4  ?<Constant "+WS">
       8  ?<Constant "+WSEC=">
       8  ?<Constant "+WST=">
      12  ?<Constant "+WSTAPSCFG=">
      12  ?<Constant "+WSTATUS">
      16  ?<Constant "+WSYNCINTRL=">
      12  ?<Constant "+WTEMPREAD=">
      16  ?<Constant "+WTX100TEST=">
      12  ?<Constant "+WTX99TEST=">
      12  ?<Constant "+WTXSTOP=">
       8  ?<Constant "+WWEP">
      12  ?<Constant "+WWEPCONF=">
       8  ?<Constant "+WWPA=">
       8  ?<Constant "+WWPS=">
      12  ?<Constant "+XMLPARSE=">
      12  ?<Constant "+XMLSEND=">
      12  ?<Constant "+adcconf=">
      12  ?<Constant "+adcread=">
      12  ?<Constant "+adcstart">
      12  ?<Constant "+adcstop">
      20  ?<Constant "+srvvalidationen=">
      12  ?<Constant ",  ADHOC ">
      12  ?<Constant ",  INFRA ">
       8  ?<Constant ", %02d">
       8  ?<Constant ", %d ,">
      12  ?<Constant ", +DNS2=">
       4  ?<Constant ",%d">
       8  ?<Constant ",%d\r\n">
       4  ?<Constant ",\r\n">
       4  ?<Constant "0x">
       4  ?<Constant "10">
      12  ?<Constant "15:23:23">
      16  ?<Constant "192.168.240.1">
       8  ?<Constant "5.1.5">
       4  ?<Constant ":%s">
       2  ?<Constant "A">
       8  ?<Constant "Active">
       4  ?<Constant "B=">
      48  ?<Constant "BSSID=%02x:%02x:%02x:...">
      36  ?<Constant "BSSID=00:00:00:00:00:...">
      16  ?<Constant "BUILD DATE=%s\r\n">
      16  ?<Constant "BUILD TIME=%s\r\n">
       2  ?<Constant "C">
      12  ?<Constant "C%d &Y%d ">
       8  ?<Constant "CLIENT\t">
       4  ?<Constant "CON">
      72  ?<Constant "DNS1=%d.%d.%d.%d     ...">
       2  ?<Constant "E">
      20  ?<Constant "E%d V%d B=%u,%d,">
     100  ?<Constant "E:\\Gainspan\\gs2011mxx...">
       8  ?<Constant "EON-2MB">
       8  ?<Constant "EON-4MB">
       8  ?<Constant "ETSI">
       4  ?<Constant "FCC">
      16  ?<Constant "FLASH ID=0x%08x">
       4  ?<Constant "GA">
      24  ?<Constant "GEPS EXT VERSION=%d\r\n">
       4  ?<Constant "GET">
      12  ?<Constant "GIGA-2MB">
      12  ?<Constant "GIGA-4MB">
       8  ?<Constant "GS2011">
      16  ?<Constant "GS2K_DEFAULT">
       4  ?<Constant "GS_">
      12  ?<Constant "GS_PROV_">
      12  ?<Constant "GainSpan">
       2  ?<Constant "H">
       8  ?<Constant "HTTP\t">
       2  ?<Constant "I">
      44  ?<Constant "IP addr=%d.%d.%d.%d  ...">
      16  ?<Constant "MICRONIX-2MB">
      16  ?<Constant "MICRONIX-4MB">
       4  ?<Constant "NON">
       8  ?<Constant "NONE">
      12  ?<Constant "No Flash">
      12  ?<Constant "Nov 19 2015">
       2  ?<Constant "O">
       4  ?<Constant "OFF">
       8  ?<Constant "POST">
       8  ?<Constant "PS Poll">
      12  ?<Constant "Ping Thread">
       2  ?<Constant "S">
      28  ?<Constant "S2W APP EXT VERSION=%s\r\n">
      40  ?<Constant "S2W BIN TYPE=%s\r\nS2W ...">
       8  ?<Constant "SERVER\t">
      12  ?<Constant "Serial2Wifi">
      12  ?<Constant "TCP-SSL ">
       8  ?<Constant "TCP\t">
       8  ?<Constant "TELEC ">
       8  ?<Constant "TLS_CA">
      12  ?<Constant "TLS_CLIENT">
       8  ?<Constant "TLS_KEY">
       8  ?<Constant "UDP\t">
       8  ?<Constant "UNKNOWN">
       2  ?<Constant "V">
       4  ?<Constant "WEP">
      24  ?<Constant "WLAN EXT VERSION=%d\r\n">
      28  ?<Constant "WLAN FEAT BMAP=%016llx\r\n">
      16  ?<Constant "WPA-ENTERPRISE">
      16  ?<Constant "WPA-PERSONAL">
      16  ?<Constant "WPA2-ENTERPRISE">
      16  ?<Constant "WPA2-PERSONAL">
      20  ?<Constant "WSTATE=CONNECTED   ">
      24  ?<Constant "WSTATE=NOT CONNECTED  ">
       2  ?<Constant "Z">
       2  ?<Constant "\"">
       4  ?<Constant "\",">
       4  ?<Constant "\",">_1
      32  ?<Constant "\",%02x:%02x:%02x:%02x...">
      52  ?<Constant "\n    IP              ...">
      48  ?<Constant "\nComputing PSK from S...">
      40  ?<Constant "\nMAC=%02x:%02x:%02x:%...">
      32  ?<Constant "\n\r client certificate...">
       8  ?<Constant "\n\r%x">
      12  ?<Constant "\n\rAPP:%d">
      28  ?<Constant "\n\rCA certificate not ...">
      28  ?<Constant "\n\rCertificate Not Fou...">
      16  ?<Constant "\n\rFILE EXISTS\n\r">
      12  ?<Constant "\n\rWLAN:%d">
      24  ?<Constant "\n\rclient Key not found">
      84  ?<Constant "\r\n       BSSID       ...">
      36  ?<Constant "\r\n %02x:%02x:%02x:%02...">
      20  ?<Constant "\r\n No valid Cids\r\n">
       4  ?<Constant "\r\n">
      32  ?<Constant "\r\n%02x:%02x:%02x:%02x...">
       8  ?<Constant "\r\n%d">
      28  ?<Constant "\r\n%d/%d/%d,%d:%d:%d,%...">
       8  ?<Constant "\r\n%s">
       8  ?<Constant "\r\n%u">
       8  ?<Constant "\r\n%x">
      40  ?<Constant "\r\n+BDATA=%d  +WSEC=%d...">
      48  ?<Constant "\r\n+DHCPSRVR=%d  +DHCP...">
      12  ?<Constant "\r\n+DNS1=">
      32  ?<Constant "\r\n+DNSSRVR=%d  +DNSDO...">
      16  ?<Constant "\r\n+WAUTO=%d,\"">
      12  ?<Constant "\r\n+WM=%d ">
      28  ?<Constant "\r\nACTIVE CLIENT PROFI...">
      36  ?<Constant "\r\nACTIVE LIMITED-AP P...">
      20  ?<Constant "\r\nACTIVE PROFILE\r\n">
      32  ?<Constant "\r\nAPP Radio State Cou...">
      52  ?<Constant "\r\nCID\tTYPE\tMODE\tLOCAL...">
      20  ?<Constant "\r\nIP:%d.%d.%d.%d">
      20  ?<Constant "\r\nIP:%d.%d.%d.%d\r">
      32  ?<Constant "\r\nLoading file succes...">
      36  ?<Constant "\r\nMinScanTime=%d\r\nMax...">
      20  ?<Constant "\r\nNCM NOT STARTED\r\n">
      20  ?<Constant "\r\nNCM STARTED:%d\r\n">
      12  ?<Constant "\r\nNO ERROR">
      24  ?<Constant "\r\nNo Route to Host\r\n">
      24  ?<Constant "\r\nNo.Of AP Found:%d\r\n">
       8  ?<Constant "\r\nOK\r\n">
      52  ?<Constant "\r\nPinging for %d.%d.%...">
      20  ?<Constant "\r\nREG_DOMAIN=%s\n">
      32  ?<Constant "\r\nRXLEVEL=%02x,TXLEVE...">
      48  ?<Constant "\r\nS2W APP VERSION=%s\r...">
      32  ?<Constant "\r\nS2W WLAN VERSION=%d...">
      20  ?<Constant "\r\nSSID NOT FOUND">
      32  ?<Constant "\r\nTKIP Sequence Numbe...">
      24  ?<Constant "\r\nWLAN CONNECT ERROR">
      32  ?<Constant "\r\nWLAN Radio State = ...">
      16  ?<Constant "\r\nWPA AUTH FAIL">
      16  ?<Constant "\r\n\r\nSNTP busy\r\n">
      24  ?<Constant "\r\n\r\nSTORED PROFILE 0\r\n">
      24  ?<Constant "\r\n\r\nSTORED PROFILE 1\r\n">
      16  ?<Constant "_%02x%02x%02x">
       8  ?<Constant "certs">
       8  ?<Constant "certs/">
      16  ?<Constant "gainspan.lan">
      32  ?<Constant "lastPsStateReqsted = ...">
      24  ?<Constant "rxActiveReqCnt = %d\r\n">
      32  ?<Constant "rxIeeePSPollCfgSetFla...">
      28  ?<Constant "rxIeeePSPollReqCnt = ...">
      28  ?<Constant "rxPSPollCfgSetFlag = ...">
      24  ?<Constant "rxPSPollReqCnt = %d\r\n">
       2  ?<Constant "w">
      16  ?<Constant {&"", &"Active", &"PS Poll", &"OFF"
       4  ?<Constant {0, 0, 0, 0}>
      40  ?<Constant {0}>
      40  ?<Constant {0}>_1
       8  ?<Constant {0}>_2
       8  ?<Constant {0}>_3
       4  ?<Constant {0}>_4
       4  ?<Constant {255, 255, 255, 255}>
       4  ??DataTable378
       4  ??DataTable378_1
       4  ??DataTable378_2
       4  ??DataTable378_3
       4  ??DataTable378_4
       4  ??DataTable378_5
       4  ??DataTable381
       4  ??DataTable382
       4  ??DataTable384
       4  ??DataTable384_1
       4  ??DataTable386
       4  ??DataTable388
       4  ??DataTable388_1
       4  ??DataTable391
       4  ??DataTable391_1
       4  ??DataTable391_2
       4  ??DataTable393
       4  ??DataTable393_1
       4  ??DataTable393_2
       4  ??DataTable395
       4  ??DataTable395_1
       4  ??DataTable398
       4  ??DataTable400
       4  ??DataTable400_1
       4  ??DataTable400_2
       4  ??DataTable400_3
       4  ??DataTable401
       4  ??DataTable401_1
       4  ??DataTable402
       4  ??DataTable403
       4  ??DataTable403_1
       4  ??DataTable403_2
       4  ??DataTable409
       4  ??DataTable409_1
       4  ??DataTable409_2
       4  ??DataTable409_3
       4  ??DataTable409_4
       4  ??DataTable413
       4  ??DataTable413_1
       4  ??DataTable413_2
       4  ??DataTable413_3
       4  ??DataTable413_4
       4  ??DataTable413_5
       4  ??DataTable413_6
       4  ??DataTable413_7
       4  ??DataTable413_8
       4  ??DataTable413_9
       4  ??DataTable414
       4  ??DataTable415
       4  ??DataTable415_1
       4  ??DataTable416
       4  ??DataTable416_1
       4  ??DataTable417
       4  ??DataTable417_1
       4  ??DataTable417_2
       4  ??DataTable417_3
       4  ??DataTable417_4
       4  ??DataTable418
       4  ??DataTable418_1
       4  ??DataTable420
       4  ??DataTable421
       4  ??DataTable423
       4  ??DataTable423_1
       4  ??DataTable424
       4  ??DataTable424_1
       4  ??DataTable424_2
       4  ??DataTable430
       4  ??DataTable430_1
       4  ??DataTable431
       4  ??DataTable440
       4  ??DataTable440_1
       4  ??DataTable442
       4  ??DataTable443
       4  ??DataTable444
       4  ??DataTable448
       4  ??DataTable449
       4  ??DataTable449_1
       4  ??DataTable450
       4  ??DataTable451
       4  ??DataTable452
       4  ??DataTable453
       4  ??DataTable453_1
       4  ??DataTable453_2
       4  ??DataTable454
       4  ??DataTable455
       4  ??DataTable455_1
       4  ??DataTable455_2
       4  ??DataTable455_3
       4  ??DataTable456
       4  ??DataTable456_1
       4  ??DataTable457
       4  ??DataTable458
       4  ??DataTable459
       4  ??DataTable459_1
       4  ??DataTable462
       4  ??DataTable464
       4  ??DataTable464_1
       4  ??DataTable464_2
       4  ??DataTable465
       4  ??DataTable466
       4  ??DataTable468
       4  ??DataTable469
       4  ??DataTable470
       4  ??DataTable470_1
       4  ??DataTable470_2
       4  ??DataTable471
       4  ??DataTable471_1
       4  ??DataTable471_2
       4  ??DataTable472
       4  ??DataTable472_1
       4  ??DataTable473
       4  ??DataTable473_1
       4  ??DataTable473_2
       4  ??DataTable473_3
       4  ??DataTable473_4
       4  ??DataTable474
       4  ??DataTable476
       4  ??DataTable476_1
       4  ??DataTable476_2
       4  ??DataTable476_3
       4  ??DataTable477
       4  ??DataTable478
       4  ??DataTable479
       4  ??DataTable479_1
       4  ??DataTable481
       4  ??DataTable482
       4  ??DataTable484
       4  ??DataTable484_1
       4  ??DataTable484_2
       4  ??DataTable486
       4  ??DataTable487
       4  ??DataTable487_1
       4  ??DataTable487_2
       4  ??DataTable488
       4  ??DataTable488_1
       4  ??DataTable490
       4  ??DataTable491
       4  ??DataTable492
       4  ??DataTable492_1
       4  ??DataTable493
       4  ??DataTable494
       4  ??DataTable494_1
       4  ??DataTable496
       4  ??DataTable496_1
       4  ??DataTable496_2
       4  ??DataTable496_3
       4  ??DataTable496_4
       4  ??DataTable496_5
       4  ??DataTable497
       4  ??DataTable498
       4  ??DataTable498_1
       4  ??DataTable500
       4  ??DataTable500_1
       4  ??DataTable500_2
       4  ??DataTable500_3
       4  ??DataTable500_4
       4  ??DataTable500_5
       4  ??DataTable500_6
       4  ??DataTable501
       4  ??DataTable503
       4  ??DataTable503_1
       4  ??DataTable504
       4  ??DataTable504_1
       4  ??DataTable508
       4  ??DataTable510
       4  ??DataTable515
       4  ??DataTable515_1
       4  ??DataTable515_10
       4  ??DataTable515_11
       4  ??DataTable515_12
       4  ??DataTable515_13
       4  ??DataTable515_14
       4  ??DataTable515_15
       4  ??DataTable515_16
       4  ??DataTable515_17
       4  ??DataTable515_2
       4  ??DataTable515_3
       4  ??DataTable515_4
       4  ??DataTable515_5
       4  ??DataTable515_6
       4  ??DataTable515_7
       4  ??DataTable515_8
       4  ??DataTable515_9
      10  ??Subroutine140_0
       8  ??Subroutine141_0
       6  ??Subroutine142_0
       6  ?Subroutine0
       6  ?Subroutine1
      18  ?Subroutine10
      12  ?Subroutine100
       6  ?Subroutine101
       8  ?Subroutine102
      14  ?Subroutine103
      12  ?Subroutine104
      32  ?Subroutine105
      10  ?Subroutine106
      10  ?Subroutine107
      40  ?Subroutine108
      12  ?Subroutine109
      12  ?Subroutine11
      12  ?Subroutine110
      10  ?Subroutine111
      20  ?Subroutine112
      12  ?Subroutine113
      12  ?Subroutine114
       8  ?Subroutine115
      10  ?Subroutine116
       8  ?Subroutine117
       8  ?Subroutine118
      10  ?Subroutine119
      12  ?Subroutine12
      10  ?Subroutine120
      14  ?Subroutine121
      10  ?Subroutine122
       8  ?Subroutine123
      54  ?Subroutine124
      12  ?Subroutine125
      10  ?Subroutine126
      12  ?Subroutine127
       8  ?Subroutine128
      16  ?Subroutine129
      12  ?Subroutine13
      14  ?Subroutine130
      12  ?Subroutine131
       8  ?Subroutine132
       6  ?Subroutine133
      12  ?Subroutine134
      12  ?Subroutine135
      10  ?Subroutine136
       8  ?Subroutine137
      10  ?Subroutine138
      14  ?Subroutine139
      10  ?Subroutine14
      10  ?Subroutine15
       8  ?Subroutine16
      22  ?Subroutine17
      10  ?Subroutine18
      14  ?Subroutine19
       8  ?Subroutine2
      18  ?Subroutine20
      12  ?Subroutine21
       8  ?Subroutine22
      14  ?Subroutine23
      20  ?Subroutine24
       6  ?Subroutine25
       6  ?Subroutine26
       6  ?Subroutine27
      18  ?Subroutine28
      10  ?Subroutine29
      40  ?Subroutine3
       6  ?Subroutine30
      24  ?Subroutine31
       6  ?Subroutine32
       6  ?Subroutine33
       8  ?Subroutine34
       6  ?Subroutine35
      10  ?Subroutine36
       6  ?Subroutine37
       8  ?Subroutine38
       6  ?Subroutine39
      34  ?Subroutine4
       6  ?Subroutine40
       6  ?Subroutine41
       6  ?Subroutine42
       6  ?Subroutine43
       8  ?Subroutine44
       6  ?Subroutine45
     128  ?Subroutine46
      34  ?Subroutine47
      28  ?Subroutine48
      12  ?Subroutine49
      34  ?Subroutine5
       6  ?Subroutine50
       6  ?Subroutine51
       6  ?Subroutine52
       6  ?Subroutine53
       6  ?Subroutine54
       8  ?Subroutine55
       6  ?Subroutine56
       8  ?Subroutine57
      34  ?Subroutine58
       8  ?Subroutine59
      12  ?Subroutine6
       6  ?Subroutine60
       8  ?Subroutine61
       6  ?Subroutine62
      20  ?Subroutine63
       6  ?Subroutine64
      12  ?Subroutine65
      12  ?Subroutine66
      10  ?Subroutine67
       6  ?Subroutine68
      10  ?Subroutine69
      12  ?Subroutine7
       6  ?Subroutine70
       8  ?Subroutine71
       8  ?Subroutine72
      20  ?Subroutine73
      12  ?Subroutine74
      12  ?Subroutine75
      18  ?Subroutine76
      12  ?Subroutine77
      12  ?Subroutine78
      18  ?Subroutine79
      26  ?Subroutine8
       6  ?Subroutine80
      44  ?Subroutine81
       8  ?Subroutine82
      22  ?Subroutine83
      10  ?Subroutine84
      28  ?Subroutine85
      22  ?Subroutine86
       6  ?Subroutine87
      10  ?Subroutine88
       8  ?Subroutine89
      10  ?Subroutine9
       8  ?Subroutine90
       6  ?Subroutine91
      10  ?Subroutine92
      24  ?Subroutine93
       8  ?Subroutine94
       6  ?Subroutine95
      12  ?Subroutine96
      10  ?Subroutine97
      32  ?Subroutine98
      20  ?Subroutine99
     392  App2wCmd_Version
      10  App2wCmd_mqtt_publish
     256  AppS2wCertificateData
      26  AppS2wCmad_WeapTimeChk
      24  AppS2wCmad_WsrvrValidationEn
      90  AppS2wCmd_Acmode
     210  AppS2wCmd_AdcConf
     162  AppS2wCmd_AdcRead
      36  AppS2wCmd_AdcStart
      30  AppS2wCmd_AdcStop
      66  AppS2wCmd_AmpduReq
      66  AppS2wCmd_AmsduReqt
      32  AppS2wCmd_ApConf
      20  AppS2wCmd_AssocPSModeSet
      48  AppS2wCmd_AutoConnect
      64  AppS2wCmd_BaBitMapSet
     216  AppS2wCmd_BaudRate
      48  AppS2wCmd_BeaconMissThresholdSet
      66  AppS2wCmd_BlockAckReq
     210  AppS2wCmd_CidInfo
      86  AppS2wCmd_CoapClose
     114  AppS2wCmd_CoapOpen
     168  AppS2wCmd_CoapRemoveOption
     344  AppS2wCmd_CoapSend
     162  AppS2wCmd_CoapSetOption
      70  AppS2wCmd_ConfigOutput
     180  AppS2wCmd_Dgpio
     330  AppS2wCmd_DhcpSrvr
     138  AppS2wCmd_DhcpSrvrConfig
      14  AppS2wCmd_Disconnect
     120  AppS2wCmd_Dns
     142  AppS2wCmd_DnsLookup
     188  AppS2wCmd_DnsServerSet
       8  AppS2wCmd_Echo
      18  AppS2wCmd_ErrorCount
      28  AppS2wCmd_ExtFlashChipErase
      58  AppS2wCmd_ExtFlashErase
      50  AppS2wCmd_ExtFlashInit
     148  AppS2wCmd_ExtFlashRead
     156  AppS2wCmd_ExtFlashSpiConf
      44  AppS2wCmd_ExtFlashWrite
      72  AppS2wCmd_Factory
      34  AppS2wCmd_FrameTxFailCntLmitSet
     108  AppS2wCmd_GoOnline
     166  AppS2wCmd_HardFlow
      70  AppS2wCmd_Hibernate
      48  AppS2wCmd_HttpClientClose
     324  AppS2wCmd_HttpClientConfig
     164  AppS2wCmd_HttpClientConfigDel
     740  AppS2wCmd_HttpClientOpen
     434  AppS2wCmd_HttpClientSend
      56  AppS2wCmd_IdOutput
      34  AppS2wCmd_IpMulticastJoin
      34  AppS2wCmd_IpMulticastLeave
      18  AppS2wCmd_McastRecvSet
     396  AppS2wCmd_Nauto
      20  AppS2wCmd_Nclose
      14  AppS2wCmd_Ncloseall
    1574  AppS2wCmd_NcmAuto
     102  AppS2wCmd_NcmAutoConf
      76  AppS2wCmd_Nctcp
     104  AppS2wCmd_Ncudp
     326  AppS2wCmd_Ndhcp
     190  AppS2wCmd_Nmac
     454  AppS2wCmd_Nset
     460  AppS2wCmd_Nstat
     122  AppS2wCmd_Nstcp
      84  AppS2wCmd_Nsudp
      14  AppS2wCmd_NwConnRestore
      14  AppS2wCmd_NwConnStore
     456  AppS2wCmd_OtaFwupConf
     198  AppS2wCmd_OtaFwupExtFlashStart
      16  AppS2wCmd_OtaFwupRollBack
     384  AppS2wCmd_Ping
      68  AppS2wCmd_PowerSave
     144  AppS2wCmd_PowerSaveDpsleep
     136  AppS2wCmd_PowerSaveStby
      40  AppS2wCmd_Psk
     156  AppS2wCmd_RadioStateGet
     168  AppS2wCmd_RegDomainSet
      46  AppS2wCmd_RtsEnable
      22  AppS2wCmd_SSLClose
     110  AppS2wCmd_SSLOpen
      78  AppS2wCmd_SecuritySet
      56  AppS2wCmd_SetDefaultProfile
      72  AppS2wCmd_SetSockOp
     200  AppS2wCmd_Settings
      50  AppS2wCmd_SoftFlow
     220  AppS2wCmd_SslCertificateAdd
      96  AppS2wCmd_SslCertificateDelete
     106  AppS2wCmd_SystemTimeGet
     398  AppS2wCmd_SystemTimeSet
      66  AppS2wCmd_TempGet
      64  AppS2wCmd_TempReadStart
      46  AppS2wCmd_TkipContrMsrStart
      70  AppS2wCmd_TkipSeqNumGet
     128  AppS2wCmd_UartFifoLevel
       8  AppS2wCmd_Verbose
     570  AppS2wCmd_Wassoc
     566  AppS2wCmd_Wassoc_test
      66  AppS2wCmd_Wauth
     100  AppS2wCmd_Wauto
     248  AppS2wCmd_Weap
     230  AppS2wCmd_WeapConf
      28  AppS2wCmd_WlanRecvFiltrSet
     556  AppS2wCmd_Wmode
     174  AppS2wCmd_WpaPsk
      58  AppS2wCmd_Wphymode
     112  AppS2wCmd_Wpower
      32  AppS2wCmd_Wradio
     186  AppS2wCmd_Wrate
      44  AppS2wCmd_Wretry
     102  AppS2wCmd_Write
     374  AppS2wCmd_Wscan
     174  AppS2wCmd_Wwep
      30  AppS2wCmd_WwepConf
     142  AppS2wCmd_Wwpa
     152  AppS2wCmd_Wwps
     298  AppS2wCmd_ieeePsPollSet
     328  AppS2wCmd_ntpTimeSet
      54  AppS2wCmd_read
      28  AppS2wCmd_reset
     142  AppS2wCmd_scanTimeSet
     328  AppS2wCommand_Process
     120  AppS2wExternalFlashData
     152  AppS2wHal_CoapContentDataGet
     180  AppS2wHal_httpContentDataGet
     142  AppS2wHdrAndIpv4_Print
      44  AppS2wHex_Print
      22  AppS2wIp_Print
     416  AppS2wNcmProfile_Display
     350  AppS2wNetConnMgr_Cb
      38  AppS2wProcess_SntpTimerNotify
     396  AppS2wProfile_Display
      66  AppS2wRegisters_Display
     114  AppS2wScanResult_Print
     164  AppS2wScan_Notification
      92  AppS2wSecurity_Display
     182  AppS2w_ConctCbProcess
      84  AppS2w_HangUp
     346  AppS2w_NcmL3ConnProcess
      16  AppS2w_PingTaskNotify
      82  AppS2w_PingThreadCreate
      42  AppS2w_PingThreadEntry
      46  AppS2w_WlanRespTmrCb
      16  AppS2w_sntpTimerCb
     128  App_ClkTuneCmd
     170  DHCP_notify
      40  DNSv6ServerAddr
      24  GsnFlashIf_PioTxFifoWrite
      48  GsnIoMux_PullDownDisable
      52  GsnIoMux_PullDownEnable
      12  GsnIoMux_Sel
       6  GsnOsal_IntrDisable
       4  GsnOsal_IntrEnable
      18  GsnOsal_SemAcquire
      18  GsnOsal_SemRelease
      56  GsnOsal_ThreadCreate
       1  L3Dhcpv6Status
     176  OtaFwupConfParam
          httpConfInfo
       8  S2W_DEFAULT_GRP_PROV_WEP_KEY
      12  S2W_DNS_CLIENT_FALGS
          dhcpServerFlags
          DNSv4ServerAddr
      16  S2wApp_TimeSyncDoneCb
      52  S2wDnsConfigGet
      88  S2wRateValidation
      24  S2w_CmdBulkDataState
      28  S2w_CmdSyncLossIntrvlSet
     268  S2w_getApSecurityConfig
     292  S2w_getSecurityConfig
       4  apModeBeaconIntrl
    1024  app_adc_data
      16  certIndex
          certFormat
          certFileSize
          certFile
    1184  dhcpSrvrCfg
          dhcpSrvr
    2048  dhcpv6ClientStack
       1  enableGpio
    1036  extFlashFileSize
          writeAddr
          spiFlag
          extFlashGetDatabuf
      28  globalUseHRssi
          L3ConnectStatus
          L3ConnectStatus_v6
          S2wL3Wait
          S2WError_List
          L2ConnectStatus
     100  headerTypes
     100  headerTypesModified
      20  hex_asc
     104  httpConfAtCmd
          initDone
          headerValues
      12  memcpy
      20  memset
       8  ncmAutoMode
          ncmautoconnectcount
       4  optionHead
     244  pingThreadMsgQueueBuf
          pingThreadStack
          pingThreadMsgQueue
          pingThread
       4  prefix
    1024  readBuffer
      30  s2wApp_ConnectCb
    1504  s2wCmdTable
    1156  s2wCurrent
          current_wlan_info
          dnsServer
      16  s2wDhcpv6Stop
       8  s2wPingStarted
          pingThreadCreated
     214  s2wScanResult_Print
    1116  s2wScanUserEntryBuff
       1  s2wWepKeyAscii
       2  scanDisplayInfoCount
          scanDisplayAllCount
       1  stbySuccess

 
  6 066 bytes in section .bss
     48 bytes in section .data
  3 324 bytes in section .noinit
  2 445 bytes in section .rodata
 31 710 bytes in section .text
 
 31 440 bytes of CODE  memory (+ 270 bytes shared)
  2 445 bytes of CONST memory
  9 438 bytes of DATA  memory

Errors: none
Warnings: none
