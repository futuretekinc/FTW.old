///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM     19/Nov/2015  15:13:06 /
// Copyright 1999-2013 IAR Systems AB.                                        /
//                                                                            /
//    Cpu mode     =  thumb                                                   /
//    Endian       =  little                                                  /
//    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\src\parser\s2w_general_command.c            /
//    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\src\parser\s2w_general_command.c -D         /
//                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D                 /
//                    FIXED_ROM_BUILD -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD   /
//                    -D S2W_DNS_CLIENT -D NX_INCLUDE_USER_DEFINE_FILE -D     /
//                    S2W_WEB_FS_AVAILABLE -D S2W_EXTFLASH_DRIVER_TEST -D     /
//                    S2W_PWM_SUPPORT -D S2W_MEM_ACCESS -D                    /
//                    S2W_FORCE_UART_PORT -D S2W_EXT_FLASH_FWUP_PUSH_METHOD   /
//                    -D S2W_NCM_SUPPORT_ENABLE -D                            /
//                    S2W_SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE -D            /
//                    S2W_EXT_FLASH_FWUP_PULL_METHOD -D                       /
//                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                /
//                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW    /
//                    -D S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AV /
//                    AILABLE -D S2W_PING_TRACE -D S2W_RF_TEST -D             /
//                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D  /
//                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D    /
//                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D         /
//                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D               /
//                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D              /
//                    S2W_HTTPD_SSLCERT_UPLOAD -D                             /
//                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D   /
//                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D          /
//                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D      /
//                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D           /
//                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP    /
//                    -D S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D    /
//                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE    /
//                    -D S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D              /
//                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D      /
//                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D     /
//                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE     /
//                    -lC E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us /
//                    erapps_mqtt\s2w\build\Debug\List\ -lA                   /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\Debug\List\ --diag_suppress           /
//                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_ /
//                    tlslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\       /
//                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None   /
//                    --dlib_config "C:\Program Files (x86)\IAR               /
//                    Systems\Embedded Workbench                              /
//                    6.5\arm\INC\c\DLib_Config_Full.h" -I                    /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\ -I                 /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\core\ -I            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I         /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I         /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer /
//                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\u /
//                    serapps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I       /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I              /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I      /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I    /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_ /
//                    if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA /
//                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa /
//                    _if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_G /
//                    A\userapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I  /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\userlib\ -I                  /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\ctx\ -I                        /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\ -I                            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\main\ -I                       /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\hal\ -I                        /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\parser\ -I                     /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\config\ -I                     /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\ -I                            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I            /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I     /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\mqtt\ -I                       /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\mqtt\ -I                       /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\one_wire\ -I                   /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\one_wire\ -I                   /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\linked_list\ -I                /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\linked_list\ -I                /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\mqtt_main\ -I                  /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\mqtt_main\ -I                  /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\inc\mqtt_log\ -I                   /
//                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\..\src\mqtt_log\ -Ohz                 /
//                    --use_c++_inline -I "C:\Program Files (x86)\IAR         /
//                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"      /
//    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userap /
//                    ps_mqtt\s2w\build\Debug\List\s2w_general_command.s      /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME s2w_general_command

        RTMODEL "__SystemLibrary", "DLib"
        RTMODEL "__dlib_file_descriptor", "1"
        RTMODEL "__dlib_full_locale_support", "1"
        RTMODEL "__iar_require _Printf", "flags,widths"
        AAPCS BASE,INTERWORK
        PRESERVE8
        REQUIRE8

        #define SHT_PROGBITS 0x1

        EXTERN APPS2wCmd_AddRedirURI
        EXTERN APPS2wCmd_WebProv
        EXTERN APPS2wCmd_WebProvStop
        EXTERN APPS2w_ExtFlashStart
        EXTERN AppExtFlash_Init
        EXTERN AppMainCtx_TaskNotify
        EXTERN AppMcu_RespTimeoutCb
        EXTERN AppS2wCmd_ApClientInfoGet
        EXTERN AppS2wCmd_AppOtpRead
        EXTERN AppS2wCmd_ArpAutoSet
        EXTERN AppS2wCmd_ArpCacheDel
        EXTERN AppS2wCmd_ArpCacheEn
        EXTERN AppS2wCmd_ArpEntryDelete
        EXTERN AppS2wCmd_ArpEntryGet
        EXTERN AppS2wCmd_ArpEntrySet
        EXTERN AppS2wCmd_AsyncMsgFmt
        EXTERN AppS2wCmd_BattCheckSet
        EXTERN AppS2wCmd_BattCheckStart
        EXTERN AppS2wCmd_BattCheckStop
        EXTERN AppS2wCmd_BattLvlSet
        EXTERN AppS2wCmd_BattValueGet
        EXTERN AppS2wCmd_CfgUri
        EXTERN AppS2wCmd_GetSecurityString
        EXTERN AppS2wCmd_GratArpSend
        EXTERN AppS2wCmd_HwCryptoEn
        EXTERN AppS2wCmd_LogLevelSet
        EXTERN AppS2wCmd_MdnsAnnounceAll
        EXTERN AppS2wCmd_MdnsDeInit
        EXTERN AppS2wCmd_MdnsHostNameReg
        EXTERN AppS2wCmd_MdnsHostNmDeReg
        EXTERN AppS2wCmd_MdnsInit
        EXTERN AppS2wCmd_MdnsServiceReg
        EXTERN AppS2wCmd_MdnsSrvDeReg
        EXTERN AppS2wCmd_MdnsSrvcDiscover
        EXTERN AppS2wCmd_MemRead
        EXTERN AppS2wCmd_MemWrite
        EXTERN AppS2wCmd_PwmCtrl
        EXTERN AppS2wCmd_PwmStart
        EXTERN AppS2wCmd_PwmStop
        EXTERN AppS2wCmd_RfTestCarrierWaveStart
        EXTERN AppS2wCmd_RfTestRxStart
        EXTERN AppS2wCmd_RfTestRxStop
        EXTERN AppS2wCmd_RfTestStart
        EXTERN AppS2wCmd_RfTestStop
        EXTERN AppS2wCmd_RfTestTx100Start
        EXTERN AppS2wCmd_RfTestTx99Start
        EXTERN AppS2wCmd_RfTestTxStart
        EXTERN AppS2wCmd_RfTestTxStop
        EXTERN AppS2wCmd_SetAssocTimeout
        EXTERN AppS2wCmd_SslConfig
        EXTERN AppS2wCmd_WebServer
        EXTERN AppS2wCmd_WlanApPsCfg
        EXTERN AppS2wCmd_WlanCalib
        EXTERN AppS2wCmd_WlanOtpRead
        EXTERN AppS2wCmd_WlanStaPsCfg
        EXTERN AppS2wCmd_WlanStatsGet
        EXTERN AppS2wCmd_Wrssi
        EXTERN AppS2wCmd_Wstatus
        EXTERN AppS2wCmd_XmlParseEnable
        EXTERN AppS2wCmd_XmlSend
        EXTERN AppS2wHal_CharNGet
        EXTERN AppS2wHal_CharNPut
        EXTERN AppS2wHal_CidGet
        EXTERN AppS2wHal_CidInfoGet
        EXTERN AppS2wHal_CoapHandleGet
        EXTERN AppS2wHal_CoapParamsGet
        EXTERN AppS2wHal_Disassociate
        EXTERN AppS2wHal_HttpCheckDns
        EXTERN AppS2wHal_HttpClose
        EXTERN AppS2wHal_HttpHandleGet
        EXTERN AppS2wHal_HttpOpen
        EXTERN AppS2wHal_MacAddrGet
        EXTERN AppS2wHal_MacAddrSet
        EXTERN AppS2wHal_McastRecvSet
        EXTERN AppS2wHal_NetClose
        EXTERN AppS2wHal_NetCloseAll
        EXTERN AppS2wHal_NetIsCidOpen
        EXTERN AppS2wHal_NetTcpClient
        EXTERN AppS2wHal_NetTcpServer
        EXTERN AppS2wHal_NetUdpClient
        EXTERN AppS2wHal_NetUdpServer
        EXTERN AppS2wHal_NetworkConfig
        EXTERN AppS2wHal_NwContextRestore
        EXTERN AppS2wHal_NwContextStore
        EXTERN AppS2wHal_PowerSaveConfig
        EXTERN AppS2wHal_PsDpSleepStart
        EXTERN AppS2wHal_PsHibernateRequest
        EXTERN AppS2wHal_PsStbyRequest
        EXTERN AppS2wHal_PskKeyStore
        EXTERN AppS2wHal_RadioModeConfig
        EXTERN AppS2wHal_SockOpSet
        EXTERN AppS2wHal_SyncLossIntrvlSet
        EXTERN AppS2wHal_TcpSrvMaxConSet
        EXTERN AppS2wHal_TimerStop
        EXTERN AppS2wHal_UartConfig
        EXTERN AppS2wHal_WpaPskCompute
        EXTERN AppS2wHal_WpsAssociate
        EXTERN AppS2wParse_64BitNumber
        EXTERN AppS2wParse_AddrPort
        EXTERN AppS2wParse_Boolean
        EXTERN AppS2wParse_Hex
        EXTERN AppS2wParse_Int
        EXTERN AppS2wParse_Ip
        EXTERN AppS2wParse_Mac
        EXTERN AppS2wParse_NextParamGet
        EXTERN AppS2wParse_Psk
        EXTERN AppS2wParse_Ssid
        EXTERN AppS2wParse_StrnCaseCmp
        EXTERN AppS2wParse_ToHex
        EXTERN AppS2wParse_Wcmd
        EXTERN AppS2wParse_WepKey
        EXTERN AppS2wProcess_AsyncStatusNotify
        EXTERN AppS2wProcess_AutoConnectStart
        EXTERN AppS2wProcess_AutoConnectStop
        EXTERN AppS2wProcess_DefaulConfigtLoad
        EXTERN AppS2wProcess_DhcpFailNotify
        EXTERN AppS2wProcess_DhcpIpChangeNotify
        EXTERN AppS2wProcess_EventNotify
        EXTERN AppS2wProcess_StatusNotify
        EXTERN AppS2w_CertDelete
        EXTERN AppS2w_CidValidate
        EXTERN AppS2w_ClkCalibCb
        EXTERN AppS2w_CmdL2ConfigSet
        EXTERN AppS2w_ConnHttpStateGet
        EXTERN AppS2w_ConnModeGet
        EXTERN AppS2w_ConnStateGet
        EXTERN AppS2w_ExitDpSleep
        EXTERN AppS2w_HttpdBodyLenSet
        EXTERN AppS2w_HttpdCtxInit
        EXTERN AppS2w_HttpdMethodSet
        EXTERN AppS2w_HttpdSetTimeOut
        EXTERN AppS2w_SetWlanDfltParams
        EXTERN AppS2w_SslClientOpen
        EXTERN AppS2w_SslClose
        EXTERN AppS2w_SslServerOpen
        EXTERN App_FsInit
        EXTERN App_IfInit
        EXTERN App_IfReinit
        EXTERN App_InterfaceStart
        EXTERN App_InterfaceStop
        EXTERN GratiousArpHandler
        EXTERN GsnADC_Close
        EXTERN GsnADC_Open
        EXTERN GsnADC_PollRead
        EXTERN GsnCoap_DeInit
        EXTERN GsnCoap_DeleteToken
        EXTERN GsnCoap_Init
        EXTERN GsnCoap_Send_And_Recieve
        EXTERN GsnCoap_SetOption
        EXTERN GsnCoap_SetToken
        EXTERN GsnDhcpSrvr_Start
        EXTERN GsnDhcpSrvr_Stop
        EXTERN GsnDnsSrvr_Start
        EXTERN GsnDnsSrvr_Stop
        EXTERN GsnDynMemMgmt_Alloc
        EXTERN GsnDynMemMgmt_Free
        EXTERN GsnExtFlash_ChipErase
        EXTERN GsnExtFlash_Erase
        EXTERN GsnExtFlash_Read
        EXTERN GsnExtFlash_Write
        EXTERN GsnFwup_RollBackOtafu
        EXTERN GsnGpio_Init
        EXTERN GsnGpio_IntCbRegister
        EXTERN GsnGpio_NEIntEnable
        EXTERN GsnGpio_OutClear
        EXTERN GsnGpio_OutIndvidualSet
        EXTERN GsnHeIf_DriverInit
        EXTERN GsnHeIf_DriverSuspend
        EXTERN GsnHttpd_IsRunning
        EXTERN GsnIntTempSen_Get
        EXTERN GsnMacUtil_ExtractCapaInfo
        EXTERN GsnMacUtil_ExtractEncryptionStatus
        EXTERN GsnNcm_ConfigSet
        EXTERN GsnNcm_Start
        EXTERN GsnNcm_Stop
        EXTERN GsnNwIf_Close
        EXTERN GsnNwIf_DhcpStop
        EXTERN GsnNwIf_DhcpV6Stop
        EXTERN GsnNwIf_DnsHostByNameGet
        EXTERN GsnNwIf_IpConfigGet
        EXTERN GsnNwIf_Open
        EXTERN GsnNwif_DnsServerAdd
        EXTERN GsnNwif_DnsServerGet
        EXTERN GsnNwif_IPv4Configure
        EXTERN GsnSntp_TimeSync
        EXTERN GsnSoftTmr_Start
        EXTERN GsnSoftTmr_Stop
        EXTERN GsnSysCtl_DieTempGet
        EXTERN GsnSysCtl_DieTempSendTimerStart
        EXTERN GsnSysCtl_DieTempSendTimerStop
        EXTERN GsnSysCtl_WlanFeatureBmapGet
        EXTERN GsnSysCtl_WlanFwVerGet
        EXTERN GsnSys_Reset
        EXTERN GsnTod_AdjustOffset
        EXTERN GsnTod_Get
        EXTERN GsnUart_IntrFifoRxLevelGet
        EXTERN GsnUart_IntrFifoRxLevelSet
        EXTERN GsnUart_IntrFifoTxLevelGet
        EXTERN GsnUart_IntrFifoTxLevelSet
        EXTERN GsnUart_SwFlowSupportSet
        EXTERN GsnVersion_Get
        EXTERN GsnWdd_AmpduReq
        EXTERN GsnWdd_AmsduReq
        EXTERN GsnWdd_AssocStatusGet
        EXTERN GsnWdd_BeaconMissThresholdSet
        EXTERN GsnWdd_BlockAckEnable
        EXTERN GsnWdd_BlockAckReq
        EXTERN GsnWdd_Connect
        EXTERN GsnWdd_ErrorGet
        EXTERN GsnWdd_FrameTxFailCntLmitSet
        EXTERN GsnWdd_Ioctl
        EXTERN GsnWdd_PhyAddrGet
        EXTERN GsnWdd_PhyModeSet
        EXTERN GsnWdd_RSSIGet
        EXTERN GsnWdd_RadioModeInfoGet
        EXTERN GsnWdd_RadioPowerSaveCfgSet
        EXTERN GsnWdd_RadioStateGet
        EXTERN GsnWdd_RtsEnable
        EXTERN GsnWdd_Scan
        EXTERN GsnWdd_ScanParamSet
        EXTERN GsnWdd_SetGrpKeyUpdateTime
        EXTERN GsnWdd_SkipSuppSrvValidation
        EXTERN GsnWdd_TkipContrMsrStart
        EXTERN GsnWdd_TkipSeqNumGet
        EXTERN GsnWdd_TxNumRetrySet
        EXTERN GsnWdd_TxPowerSet
        EXTERN GsnWdd_TxRateGet
        EXTERN GsnWdd_TxRateSet
        EXTERN GsnWdd_WlanRecvFiltrSet
        EXTERN MALLOC
        EXTERN S2wCert_FlashFileLoad
        EXTERN S2wCert_MemAlloc
        EXTERN S2wCert_SearchRamTable
        EXTERN S2wCert_findFile
        EXTERN S2wHttp_Send
        EXTERN S2w_AsyncMsgGpioOp
        EXTERN S2w_CmdPsPollIntervelset
        EXTERN S2w_CmdUnSolicitedCcaConf
        EXTERN S2w_CmdUnSolicitedRx
        EXTERN S2w_CmdUnSolicitedRxstop
        EXTERN S2w_CmdUnSolicitedTx
        EXTERN S2w_LoadS2wProfile
        EXTERN S2w_Printf
        EXTERN S2w_PutChar
        EXTERN S2w_SaveApMacAddr
        EXTERN S2w_SaveMacAddr
        EXTERN S2w_SaveS2wProfile
        EXTERN S2w_SaveS2wProfileParams
        EXTERN S2w_macAddrRTCGet
        EXTERN S2w_macAddrRTCSet
        EXTERN TEST_START
        EXTERN __aeabi_memclr4
        EXTERN __aeabi_memcpy
        EXTERN __aeabi_memcpy4
        EXTERN __aeabi_memset
        EXTERN __aeabi_uldivmod
        EXTERN __gmtime32
        EXTERN __mktime32
        EXTERN _nxe_arp_gratuitous_send
        EXTERN _nxe_igmp_multicast_join
        EXTERN _nxe_igmp_multicast_leave
        EXTERN _tx_queue_create
        EXTERN _tx_queue_receive
        EXTERN _tx_queue_send
        EXTERN _tx_semaphore_get
        EXTERN _tx_semaphore_put
        EXTERN _tx_thread_create
        EXTERN _tx_thread_interrupt_control
        EXTERN acNcmTimer
        EXTERN appCtx
        EXTERN curCid
        EXTERN fsm_close
        EXTERN fsm_enterFS
        EXTERN fsm_mkdir
        EXTERN fsm_open
        EXTERN fsm_write
        EXTERN inet_addr
        EXTERN inet_pton
        EXTERN isspace
        EXTERN memcmp
        EXTERN nx_arp_table_set
        EXTERN nx_dns_retry_count_set
        EXTERN profile_params
        EXTERN s2wAutoConnState
        EXTERN s2wAutoExit_CB
        EXTERN s2wCidList
        EXTERN s2wDisassocCb
        EXTERN s2wDisassocSyncLossCb
        EXTERN s2wFlashParams
        EXTERN s2wIsAutoconnected
        EXTERN s2wL2L3ConnectSemaphore
        EXTERN s2wLinkState
        EXTERN s2wPingStart
        EXTERN s2wPingStop
        EXTERN s2wSerialPortHandle
        EXTERN s2wSpiFs_Flush
        EXTERN s2wSslConf
        EXTERN s2wState
        EXTERN s2wSyncSemID
        EXTERN s2w_StartDhcpDnsServer
        EXTERN s2w_ssl_cert_table
        EXTERN s2wappMainTaskCtxt
        EXTERN s2wappMainTaskNotifier
        EXTERN scanDisplayInfo
        EXTERN sprintf
        EXTERN stScanSemaphore
        EXTERN strcmp
        EXTERN strcpy
        EXTERN strlen
        EXTERN strncpy
        EXTERN toupper
        EXTERN wpsConnDone

        PUBLIC App2wCmd_Version
        PUBLIC App2wCmd_mqtt_publish
        PUBLIC AppS2wCertificateData
        PUBLIC AppS2wCmad_WeapTimeChk
        PUBLIC AppS2wCmad_WsrvrValidationEn
        PUBLIC AppS2wCmd_Acmode
        PUBLIC AppS2wCmd_AmpduReq
        PUBLIC AppS2wCmd_AmsduReqt
        PUBLIC AppS2wCmd_ApConf
        PUBLIC AppS2wCmd_AssocPSModeSet
        PUBLIC AppS2wCmd_AutoConnect
        PUBLIC AppS2wCmd_BaBitMapSet
        PUBLIC AppS2wCmd_BeaconMissThresholdSet
        PUBLIC AppS2wCmd_BlockAckReq
        PUBLIC AppS2wCmd_CidInfo
        PUBLIC AppS2wCmd_ConfigOutput
        PUBLIC AppS2wCmd_Dgpio
        PUBLIC AppS2wCmd_DhcpSrvr
        PUBLIC AppS2wCmd_DhcpSrvrConfig
        PUBLIC AppS2wCmd_Dns
        PUBLIC AppS2wCmd_DnsLookup
        PUBLIC AppS2wCmd_DnsServerSet
        PUBLIC AppS2wCmd_Echo
        PUBLIC AppS2wCmd_ErrorCount
        PUBLIC AppS2wCmd_ExtFlashChipErase
        PUBLIC AppS2wCmd_ExtFlashErase
        PUBLIC AppS2wCmd_ExtFlashInit
        PUBLIC AppS2wCmd_ExtFlashRead
        PUBLIC AppS2wCmd_ExtFlashSpiConf
        PUBLIC AppS2wCmd_ExtFlashWrite
        PUBLIC AppS2wCmd_FrameTxFailCntLmitSet
        PUBLIC AppS2wCmd_GoOnline
        PUBLIC AppS2wCmd_Hibernate
        PUBLIC AppS2wCmd_HttpClientClose
        PUBLIC AppS2wCmd_HttpClientConfig
        PUBLIC AppS2wCmd_HttpClientConfigDel
        PUBLIC AppS2wCmd_HttpClientOpen
        PUBLIC AppS2wCmd_HttpClientSend
        PUBLIC AppS2wCmd_IdOutput
        PUBLIC AppS2wCmd_IpMulticastJoin
        PUBLIC AppS2wCmd_IpMulticastLeave
        PUBLIC AppS2wCmd_McastRecvSet
        PUBLIC AppS2wCmd_Nauto
        PUBLIC AppS2wCmd_Nclose
        PUBLIC AppS2wCmd_Ncloseall
        PUBLIC AppS2wCmd_NcmAuto
        PUBLIC AppS2wCmd_NcmAutoConf
        PUBLIC AppS2wCmd_Nctcp
        PUBLIC AppS2wCmd_Ncudp
        PUBLIC AppS2wCmd_Nstcp
        PUBLIC AppS2wCmd_Nsudp
        PUBLIC AppS2wCmd_NwConnRestore
        PUBLIC AppS2wCmd_NwConnStore
        PUBLIC AppS2wCmd_OtaFwupConf
        PUBLIC AppS2wCmd_OtaFwupExtFlashStart
        PUBLIC AppS2wCmd_OtaFwupRollBack
        PUBLIC AppS2wCmd_Ping
        PUBLIC AppS2wCmd_PowerSave
        PUBLIC AppS2wCmd_PowerSaveDpsleep
        PUBLIC AppS2wCmd_PowerSaveStby
        PUBLIC AppS2wCmd_Psk
        PUBLIC AppS2wCmd_RadioStateGet
        PUBLIC AppS2wCmd_RegDomainSet
        PUBLIC AppS2wCmd_RtsEnable
        PUBLIC AppS2wCmd_SSLClose
        PUBLIC AppS2wCmd_SSLOpen
        PUBLIC AppS2wCmd_SecuritySet
        PUBLIC AppS2wCmd_SetSockOp
        PUBLIC AppS2wCmd_Settings
        PUBLIC AppS2wCmd_SoftFlow
        PUBLIC AppS2wCmd_SslCertificateAdd
        PUBLIC AppS2wCmd_SslCertificateDelete
        PUBLIC AppS2wCmd_SystemTimeGet
        PUBLIC AppS2wCmd_SystemTimeSet
        PUBLIC AppS2wCmd_TempGet
        PUBLIC AppS2wCmd_TempReadStart
        PUBLIC AppS2wCmd_TkipContrMsrStart
        PUBLIC AppS2wCmd_TkipSeqNumGet
        PUBLIC AppS2wCmd_Verbose
        PUBLIC AppS2wCmd_Wassoc_test
        PUBLIC AppS2wCmd_Wauth
        PUBLIC AppS2wCmd_Wauto
        PUBLIC AppS2wCmd_WlanRecvFiltrSet
        PUBLIC AppS2wCmd_WpaPsk
        PUBLIC AppS2wCmd_Wphymode
        PUBLIC AppS2wCmd_Wpower
        PUBLIC AppS2wCmd_Wrate
        PUBLIC AppS2wCmd_Wretry
        PUBLIC AppS2wCmd_WwepConf
        PUBLIC AppS2wCmd_Wwpa
        PUBLIC AppS2wCmd_ieeePsPollSet
        PUBLIC AppS2wCmd_ntpTimeSet
        PUBLIC AppS2wCmd_reset
        PUBLIC AppS2wCmd_scanTimeSet
        PUBLIC AppS2wCommand_Process
        PUBLIC AppS2wExternalFlashData
        PUBLIC AppS2wHal_CoapContentDataGet
        PUBLIC AppS2wHal_httpContentDataGet
        PUBLIC AppS2wHdrAndIpv4_Print
        PUBLIC AppS2wHex_Print
        PUBLIC AppS2wIp_Print
        PUBLIC AppS2wNcmProfile_Display
        PUBLIC AppS2wNetConnMgr_Cb
        PUBLIC AppS2wProcess_SntpTimerNotify
        PUBLIC AppS2wProfile_Display
        PUBLIC AppS2wRegisters_Display
        PUBLIC AppS2wScanResult_Print
        PUBLIC AppS2wScan_Notification
        PUBLIC AppS2wSecurity_Display
        PUBLIC AppS2w_ConctCbProcess
        PUBLIC AppS2w_HangUp
        PUBLIC AppS2w_NcmL3ConnProcess
        PUBLIC AppS2w_PingTaskNotify
        PUBLIC AppS2w_PingThreadCreate
        PUBLIC AppS2w_WlanRespTmrCb
        PUBLIC App_ClkTuneCmd
        PUBLIC DHCP_notify
        PUBLIC DNSv4ServerAddr
        PUBLIC DNSv6ServerAddr
        PUBLIC GsnFlashIf_PioTxFifoWrite
        PUBLIC GsnIoMux_PullDownDisable
        PUBLIC GsnIoMux_PullDownEnable
        PUBLIC GsnIoMux_Sel
        PUBLIC GsnOsal_IntrDisable
        PUBLIC GsnOsal_IntrEnable
        PUBLIC GsnOsal_SemAcquire
        PUBLIC GsnOsal_SemRelease
        PUBLIC GsnOsal_ThreadCreate
        PUBLIC L2ConnectStatus
        PUBLIC L3ConnectStatus
        PUBLIC L3ConnectStatus_v6
        PUBLIC L3Dhcpv6Status
        PUBLIC OtaFwupConfParam
        PUBLIC S2WError_List
        PUBLIC S2W_DNS_CLIENT_FALGS
        PUBLIC S2wDnsConfigGet
        PUBLIC S2wL3Wait
        PUBLIC S2wRateValidation
        PUBLIC S2w_CmdBulkDataState
        PUBLIC S2w_CmdSyncLossIntrvlSet
        PUBLIC S2w_getApSecurityConfig
        PUBLIC S2w_getSecurityConfig
        PUBLIC apModeBeaconIntrl
        PUBLIC app_adc_data
        PUBLIC certFile
        PUBLIC certFileSize
        PUBLIC certFormat
        PUBLIC certIndex
        PUBLIC current_wlan_info
        PUBLIC dhcpServerFlags
        PUBLIC dhcpSrvr
        PUBLIC dhcpSrvrCfg
        PUBLIC dhcpv6ClientStack
        PUBLIC dnsServer
        PUBLIC extFlashFileSize
        PUBLIC extFlashGetDatabuf
        PUBLIC globalUseHRssi
        PUBLIC headerTypes
        PUBLIC headerTypesModified
        PUBLIC headerValues
        PUBLIC httpConfAtCmd
        PUBLIC httpConfInfo
        PUBLIC memcpy
        PUBLIC memset
        PUBLIC ncmAutoMode
        PUBLIC ncmautoconnectcount
        PUBLIC optionHead
        PUBLIC pingThreadCreated
        PUBLIC pingThreadMsgQueue
        PUBLIC pingThreadMsgQueueBuf
        PUBLIC pingThreadStack
        PUBLIC readBuffer
        PUBLIC s2wCurrent
        PUBLIC s2wDhcpv6Stop
        PUBLIC s2wPingStarted
        PUBLIC s2wScanResult_Print
        PUBLIC s2wScanUserEntryBuff
        PUBLIC s2wWepKeyAscii
        PUBLIC scanDisplayAllCount
        PUBLIC scanDisplayInfoCount
        PUBLIC spiFlag
        PUBLIC stbySuccess
        PUBLIC writeAddr
        
          CFI Names cfiNames0
          CFI StackFrame CFA R13 DATA
          CFI Resource R0:32, R1:32, R2:32, R3:32, R4:32, R5:32, R6:32, R7:32
          CFI Resource R8:32, R9:32, R10:32, R11:32, R12:32, R13:32, R14:32
          CFI EndNames cfiNames0
        
          CFI Common cfiCommon0 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 Undefined
          CFI R1 Undefined
          CFI R2 Undefined
          CFI R3 Undefined
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 Undefined
          CFI R14 SameValue
          CFI EndCommon cfiCommon0
        
        
          CFI Common cfiCommon1 Using cfiNames0
          CFI CodeAlign 2
          CFI DataAlign 4
          CFI ReturnAddress R14 CODE
          CFI CFA R13+0
          CFI R0 SameValue
          CFI R1 SameValue
          CFI R2 SameValue
          CFI R3 SameValue
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R12 SameValue
          CFI R14 SameValue
          CFI EndCommon cfiCommon1
        
// E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\parser\s2w_general_command.c
//    1 /*****************************************************************
//    2  *
//    3 *               COPYRIGHT (c) 20012-2013 GainSpan Corporation
//    4 *                         All Rights Reserved
//    5 *
//    6 * The source code contained or described herein and all documents
//    7 * related to the source code ("Material") are owned by GainSpan
//    8 * Corporation or its licensors.  Title to the Material remains
//    9 * with GainSpan Corporation or its suppliers and licensors.
//   10 *
//   11 * The Material is protected by worldwide copyright and trade secret
//   12 * laws and treaty provisions. No part of the Material may be used,
//   13 * copied, reproduced, modified, published, uploaded, posted, transmitted,
//   14 * distributed, or disclosed in any way except in accordance with the
//   15 * applicable license agreement.
//   16 *
//   17 * No license under any patent, copyright, trade secret or other
//   18 * intellectual property right is granted to or conferred upon you by
//   19 * disclosure or delivery of the Materials, either expressly, by
//   20 * implication, inducement, estoppel, except in accordance with the
//   21 * applicable license agreement.
//   22 *
//   23 * Unless otherwise agreed by GainSpan in writing, you may not remove or
//   24 * alter this notice or any other notice embedded in Materials by GainSpan
//   25 * or GainSpan's suppliers or licensors in any way.
//   26 *
//   27 * $RCSfile: s2w_general_command.c,v $
//   28 *
//   29 * Description : s2w command interprter file
//   30 ******************************************************************/
//   31 
//   32 
//   33 /*****************************************************************
//   34   * File Inclusions
//   35   *****************************************************************/
//   36 #include "time.h"
//   37 #include <ctype.h>
//   38 #include <string.h>

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP memcpy
          CFI Block cfiBlock0 Using cfiCommon0
          CFI Function memcpy
        THUMB
// __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
memcpy:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        MOV      R4,R0
          CFI FunCall __aeabi_memcpy
        BL       __aeabi_memcpy
        MOV      R0,R4
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock0

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP memset
          CFI Block cfiBlock1 Using cfiCommon0
          CFI Function memset
        THUMB
// __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
memset:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        MOV      R4,R0
        MOV      R0,R2
        MOV      R2,R1
        MOV      R1,R0
        MOV      R0,R4
          CFI FunCall __aeabi_memset
        BL       __aeabi_memset
        MOV      R0,R4
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock1
//   39 #include "gsn_includes.h"

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP GsnOsal_IntrDisable
          CFI Block cfiBlock2 Using cfiCommon0
          CFI Function GsnOsal_IntrDisable
        THUMB
// __interwork __softfp int GsnOsal_IntrDisable(void)
GsnOsal_IntrDisable:
        MOVS     R0,#+1
          CFI FunCall _tx_thread_interrupt_control
        B.W      _tx_thread_interrupt_control
          CFI EndBlock cfiBlock2

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP GsnOsal_IntrEnable
          CFI Block cfiBlock3 Using cfiCommon0
          CFI Function GsnOsal_IntrEnable
          CFI FunCall _tx_thread_interrupt_control
        THUMB
// __interwork __softfp void GsnOsal_IntrEnable(int)
GsnOsal_IntrEnable:
        B.W      _tx_thread_interrupt_control
          CFI EndBlock cfiBlock3

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP GsnOsal_ThreadCreate
          CFI Block cfiBlock4 Using cfiCommon0
          CFI Function GsnOsal_ThreadCreate
        THUMB
// __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
GsnOsal_ThreadCreate:
        PUSH     {R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+20
        SUB      SP,SP,#+28
          CFI CFA R13+48
        MOV      R4,R0
        MOV      R0,R2
        LDR      R2,[SP, #+60]
        LDR      R6,[SP, #+52]
        LDR      R7,[SP, #+56]
        STR      R2,[SP, #+20]
        MOV      R5,R3
        LDR      R3,[SP, #+48]
        STR      R3,[SP, #+12]
        MOVS     R2,#+0
        STR      R3,[SP, #+8]
        STR      R2,[SP, #+16]
        MOV      R3,R1
        STR      R7,[SP, #+4]
        STR      R6,[SP, #+0]
        MOV      R2,R4
        MOV      R1,R5
          CFI FunCall _tx_thread_create
        BL       _tx_thread_create
        CBZ.N    R0,??GsnOsal_ThreadCreate_0
        ADD      R0,R0,#-1879048192
        ADD      R0,R0,#+256
??GsnOsal_ThreadCreate_0:
        ADD      SP,SP,#+28
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock4

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP GsnOsal_SemAcquire
          CFI Block cfiBlock5 Using cfiCommon0
          CFI Function GsnOsal_SemAcquire
        THUMB
// __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
GsnOsal_SemAcquire:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
          CFI FunCall _tx_semaphore_get
        BL       _tx_semaphore_get
        CBZ.N    R0,??GsnOsal_SemAcquire_0
        ADD      R0,R0,#-1879048192
        ADD      R0,R0,#+256
??GsnOsal_SemAcquire_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock5

        SECTION `.text`:CODE:REORDER:NOROOT(1)
        SECTION_GROUP GsnOsal_SemRelease
          CFI Block cfiBlock6 Using cfiCommon0
          CFI Function GsnOsal_SemRelease
        THUMB
// __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
GsnOsal_SemRelease:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
          CFI FunCall _tx_semaphore_put
        BL       _tx_semaphore_put
        CBZ.N    R0,??GsnOsal_SemRelease_0
        ADD      R0,R0,#-1879048192
        ADD      R0,R0,#+256
??GsnOsal_SemRelease_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock6

        SECTION `.text`:CODE:REORDER:NOROOT(2)
        SECTION_GROUP GsnIoMux_Sel
          CFI Block cfiBlock7 Using cfiCommon0
          CFI Function GsnIoMux_Sel
          CFI NoCalls
        THUMB
// __interwork __softfp void GsnIoMux_Sel(UINT32, UINT32)
GsnIoMux_Sel:
        LDR.N    R2,??GsnIoMux_Sel_0  ;; 0x40160000
        STR      R1,[R2, R0, LSL #+2]
        BX       LR               ;; return
        DATA
??GsnIoMux_Sel_0:
        DC32     0x40160000
          CFI EndBlock cfiBlock7

        SECTION `.text`:CODE:REORDER:NOROOT(2)
        SECTION_GROUP GsnIoMux_PullDownEnable
          CFI Block cfiBlock8 Using cfiCommon0
          CFI Function GsnIoMux_PullDownEnable
        THUMB
// __interwork __softfp void GsnIoMux_PullDownEnable(UINT32)
GsnIoMux_PullDownEnable:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        MOV      R4,R0
          CFI FunCall GsnOsal_IntrDisable
        BL       GsnOsal_IntrDisable
        MOVS     R2,#+1
        LDR.N    R1,??GsnIoMux_PullDownEnable_0  ;; 0x40160200
        CMP      R4,#+32
        BCS.N    ??GsnIoMux_PullDownEnable_1
        LDR      R3,[R1, #+0]
        LSLS     R2,R2,R4
        BIC      R2,R3,R2
        STR      R2,[R1, #+0]
        B.N      ??GsnIoMux_PullDownEnable_2
??GsnIoMux_PullDownEnable_1:
        SUBS     R4,R4,#+32
        LDR      R3,[R1, #+4]
        LSLS     R2,R2,R4
        BIC      R2,R3,R2
        STR      R2,[R1, #+4]
??GsnIoMux_PullDownEnable_2:
        POP      {R4,LR}
          CFI R4 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
          CFI FunCall GsnOsal_IntrEnable
        B.W      GsnOsal_IntrEnable
        DATA
??GsnIoMux_PullDownEnable_0:
        DC32     0x40160200
          CFI EndBlock cfiBlock8

        SECTION `.text`:CODE:REORDER:NOROOT(2)
        SECTION_GROUP GsnIoMux_PullDownDisable
          CFI Block cfiBlock9 Using cfiCommon0
          CFI Function GsnIoMux_PullDownDisable
        THUMB
// __interwork __softfp void GsnIoMux_PullDownDisable(UINT32)
GsnIoMux_PullDownDisable:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        MOV      R4,R0
          CFI FunCall GsnOsal_IntrDisable
        BL       GsnOsal_IntrDisable
        MOVS     R2,#+1
        LDR.N    R1,??GsnIoMux_PullDownDisable_0  ;; 0x40160200
        CMP      R4,#+32
        BCS.N    ??GsnIoMux_PullDownDisable_1
        LDR      R3,[R1, #+0]
        LSLS     R2,R2,R4
        ORRS     R2,R2,R3
        STR      R2,[R1, #+0]
        B.N      ??GsnIoMux_PullDownDisable_2
??GsnIoMux_PullDownDisable_1:
        SUBS     R4,R4,#+32
        LDR      R3,[R1, #+4]
        LSLS     R2,R2,R4
        ORRS     R2,R2,R3
        STR      R2,[R1, #+4]
??GsnIoMux_PullDownDisable_2:
        POP      {R4,LR}
          CFI R4 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
          CFI FunCall GsnOsal_IntrEnable
        B.W      GsnOsal_IntrEnable
        DATA
??GsnIoMux_PullDownDisable_0:
        DC32     0x40160200
          CFI EndBlock cfiBlock9

        SECTION `.text`:CODE:REORDER:NOROOT(2)
        SECTION_GROUP GsnFlashIf_PioTxFifoWrite
          CFI Block cfiBlock10 Using cfiCommon0
          CFI Function GsnFlashIf_PioTxFifoWrite
          CFI NoCalls
        THUMB
// __interwork __softfp void GsnFlashIf_PioTxFifoWrite(UINT32)
GsnFlashIf_PioTxFifoWrite:
        LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0  ;; 0x400e0004
??GsnFlashIf_PioTxFifoWrite_1:
        LDR      R2,[R1, #+0]
        ANDS     R2,R2,#0x1
        BEQ.N    ??GsnFlashIf_PioTxFifoWrite_1
        LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0+0x4  ;; 0x400e0400
        STR      R0,[R1, #+0]
        BX       LR               ;; return
        DATA
??GsnFlashIf_PioTxFifoWrite_0:
        DC32     0x400e0004
        DC32     0x400e0400
          CFI EndBlock cfiBlock10
//   40 #include "gsn_version.h"
//   41 #include "hal/s2w.h"
//   42 #include "hal/s2w_types.h"
//   43 #include "hal/s2w_hal.h"
//   44 #include "hal/s2w_timer.h"
//   45 #include "parser/s2w_parse.h"
//   46 #include "parser/s2w_process.h"
//   47 #include "parser/s2w_command.h"
//   48 #include "hal/s2w_net.h"
//   49 #include "main/app_main_ctx.h"
//   50 
//   51 #include "config/app_ncm_config.h"
//   52 #include "config/app_resource_config.h"
//   53 #include "main/app_main_ctx.h"
//   54 #include "hal/s2w_cert_mgmt.h"
//   55 #include "modules/http/gsn_httpc.h"
//   56 
//   57 #include "config/app_stat_config.h"
//   58 #include "app_rtc_mem.h"
//   59 #include "app_events.h"
//   60 #include "app_defines_builder.h"
//   61 #include "fs/api/api_safe.h"
//   62 
//   63 #include "hal/s2w_config.h"
//   64 
//   65 #include "fs/api/api_safe.h"
//   66 #include "fs/safe-flash/nor/flashdrv.h"
//   67 
//   68 #include "gslink\app_mcu_def.h"
//   69 
//   70 #include "app_rtc_mem.h"
//   71 #include "emu/app_emu.h"
//   72 
//   73 #include "gsn_ncm.h"
//   74 #include "gsn_ncm_roam.h"
//   75 #include "modules/pwr_mgmt/gsn_pwr_mgmt.h"
//   76 
//   77 #include "modules/coap/gsn_coap.h"
//   78 #include "modules/coap/gsn_coap_impl.h"
//   79 
//   80 #include "clk_tune/app_clk_tune.h"
//   81 #ifdef S2W_IPv6_SUPPORT
//   82 #include "modules/dhcpv6_server/gsn_dhcpv6_server.h"
//   83 #endif
//   84 #include "ext_app/app_ext_flash.h"
//   85 #include "main/gsn_br_flashldr.h"
//   86 #include "modules/fwup/gsn_fwup.h"
//   87 
//   88 #include "mqtt_main/mqtt_main.h"
//   89 //#include "mqtt/libmqtt.h"
//   90 //#include "linked_list/linked_list.h"
//   91 //#include "one_wire/one_wire.h"
//   92 /**
//   93  ******************************************************************************
//   94  * @file s2w_general_command.c
//   95  * @brief s2w Application command file.
//   96  *    This file contains the function implementation for each AT command.
//   97  ******************************************************************************/
//   98 
//   99 /*****************************************************************************
//  100   *  Public Variables
//  101   ****************************************************************************/
//  102 //#define EXTFLASH_DRIVER_TEST
//  103 //#define EXT_FLASH_CMD_ENABLE
//  104 extern S2W_PROFILE_PARAMS_T profile_params;

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//  105 UINT8 s2wWepKeyAscii =0;
s2wWepKeyAscii:
        DS8 1
//  106 extern S2W_EXTFLASH_CMD_T s2wExtFlashCmdTable[6];
//  107 #ifdef S2W_SECURITY_WPS_ENABLE
//  108 extern UINT32 wpsConnDone;
//  109 #endif
//  110 extern UINT8 curCid;
//  111 extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  112 UINT32 certIndex = S2W_INVALID_CERT_INDEX, certFormat, certFileSize;
certIndex:
        DATA
        DC32 4294967295
certFormat:
        DC8 0, 0, 0, 0
certFileSize:
        DC8 0, 0, 0, 0
//  113 F_FILE *certFile;
certFile:
        DC8 0, 0, 0, 0
//  114 
//  115 
//  116 extern GSN_OSAL_SEM_T s2wL2L3ConnectSemaphore;
//  117 
//  118 extern S2W_CID_T s2wCidList[];
//  119 
//  120 #ifdef S2W_PING_TRACE
//  121 UINT8 s2wPingStarted;
//  122 #endif
//  123 extern UINT8 s2wUserInitNetOpen;
//  124 extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[];
//  125 extern S2W_LINK_STATE_T s2wLinkState ;
//  126 extern S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle;
//  127 extern S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle1;
//  128 
//  129 extern GSN_OSAL_SEM_T stbyDelaySemaphore;
//  130 #ifdef S2W_NCM_SUPPORT_ENABLE
//  131 extern S2W_TIMER_T acNcmTimer;
//  132 #endif
//  133 
//  134 
//  135 NXD_ADDRESS             DNSv6ServerAddr[2];
//  136 UINT32                  DNSv4ServerAddr[2];
//  137 UINT8                   S2W_DNS_CLIENT_FALGS;
//  138 
//  139 #define S2W_DNS_CLIENT_ENABLED          0x01
//  140 #define S2W_DNSv6_SERVER_SET            0x02
//  141 #define S2W_DNSv4_SERVER_SET            0x04
//  142 #define S2W_DNS_REQ_DEF_TIME_OUT        5
//  143 #define S2W_DNS_REQ_DEF_RETRIES         3
//  144 
//  145 
//  146 UINT8 stbySuccess=0;

        SECTION `.data`:DATA:REORDER:NOROOT(2)
//  147 UINT32 apModeBeaconIntrl=100;
apModeBeaconIntrl:
        DATA
        DC32 100
//  148 UINT8 globalUseHRssi=0;
//  149 /*__no_init*/ S2W_PROFILE_T s2wCurrent;
//  150 
//  151 #ifdef S2W_DNS_SERVER_ENABLE
//  152 GSN_DNS_SERVER_T dnsServer;
//  153 #endif
//  154 
//  155 #ifdef S2W_DHCP_SERVER_ENABLE
//  156 
//  157 
//  158 UINT8 dhcpServerFlags;

        SECTION `.noinit`:DATA:REORDER:NOROOT(3)
//  159 __no_init GSN_DHCP_SRVR_T dhcpSrvr;
//  160 __no_init GSN_DHCP_SRVR_CFG_T dhcpSrvrCfg;
dhcpSrvrCfg:
        DS8 48
dhcpSrvr:
        DS8 1136

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
s2wPingStarted:
        DS8 1
        DS8 3
//  161 
//  162 #endif
//  163 
//  164 #ifdef S2W_IPv6_SUPPORT
//  165 GSN_DHCPv6_SERVER_T serverId;
//  166 #endif
//  167 
//  168 UINT32 S2wL3Wait;
//  169 extern GSN_OSAL_SEM_T s2wL2L3ConnectSemaphore;
//  170 
//  171 
//  172 #define HTTP_SEND_CHUNK_SIZE    1000
//  173 
//  174 /* data structure to hold current wireless info
//  175  */
//  176 S2W_WLANINFO_T current_wlan_info;
//  177 
//  178 #ifdef S2W_EMU
//  179 /*buffers to for emu*/
//  180 __no_init UINT16 s2w_emu_buf1[1000],s2w_emu_buf2[1000],s2w_emu_buf3[1000],s2w_emu_buf4[1000];
//  181 UINT32 adcSize = 1000;
//  182 
//  183 #endif
//  184 
//  185 #ifdef S2W_PING_TRACE
//  186 
//  187 PUBLIC GSN_OSAL_QUEUE_T pingThreadMsgQueue;
//  188 UINT8 * pingThreadMsgQueueBuf;
//  189 
//  190 PRIVATE GSN_OSAL_THREAD_TCB_T pingThread;
//  191 
//  192 UINT8 * pingThreadStack;
//  193 UINT32 pingThreadCreated = 0;
pingThreadCreated:
        DS8 4

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
DNSv6ServerAddr:
        DS8 40

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
S2W_DNS_CLIENT_FALGS:
        DS8 1
dhcpServerFlags:
        DS8 1
        DS8 2
DNSv4ServerAddr:
        DS8 8

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
stbySuccess:
        DS8 1

        SECTION `.bss`:DATA:REORDER:NOROOT(3)
s2wCurrent:
        DS8 1016
current_wlan_info:
        DS8 44
dnsServer:
        DS8 96

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
pingThreadMsgQueueBuf:
        DS8 4
pingThreadStack:
        DS8 4
pingThreadMsgQueue:
        DS8 56
        DS8 180
//  194 
//  195 #endif
//  196 
//  197 /*****************************************************************************
//  198   *  Private Variables
//  199   ****************************************************************************/
//  200 
//  201 /*   Structure definitions for command table   */
//  202 struct S2W_CMD
//  203 {
//  204     const char *cmd;                /**< Command string */
//  205     UINT8 (*process) (UINT8 *ptr);  /**< Command handler */
//  206 };
//  207 
//  208 
//  209 /*****************************************************************************
//  210   *  Private Definitions
//  211   ****************************************************************************/
//  212 
//  213 
//  214     
//  215 #define S2W_MAX_CH 11   
//  216 extern GSN_OSAL_SEM_T stScanSemaphore;
//  217 extern UINT8 s2wAutoConnState ;
//  218 
//  219 extern VOID
//  220 AppMcu_RespTimeoutCb( VOID* context,GSN_SOFT_TMR_HANDLE_T timerHandle );
//  221 extern VOID
//  222 App_InterfaceStop(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
//  223 extern VOID
//  224 App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
//  225 extern VOID
//  226 App_IfReinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
//  227 
//  228 extern S2W_SCAN_DISPLAY_INFO_T scanDisplayInfo[20];
//  229 

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
//  230 UINT8 scanDisplayInfoCount=0,scanDisplayAllCount=0;
scanDisplayInfoCount:
        DS8 1
scanDisplayAllCount:
        DS8 1
//  231 

        SECTION `.noinit`:DATA:REORDER:NOROOT(2)
//  232 __no_init GSN_WDD_SCAN_ENTRY_T s2wScanUserEntryBuff[2];
s2wScanUserEntryBuff:
        DS8 1116
//  233 
//  234 void S2w_getDhcpv6Clientconfig(GSN_NWIF_DHCP_PARAMS_T *dhcpv6Params);
//  235 
//  236 VOID AppS2w_ConctCbProcess(VOID* ctext,INT32 status);
//  237 extern void nx_dns_retry_count_set(NX_DNS *dns_ptr,UINT retries);
//  238 
//  239 void GsnHeIf_DriverSuspend();
//  240 extern INT8 GsnIntTempSen_Get();
//  241 
//  242 /*****************************************************************************
//  243   *  Private Functions
//  244   ****************************************************************************/
//  245 
//  246 
//  247 VOID
//  248 AppS2wRegisters_Display(const S2W_PROFILE_T *profile);
//  249 PRIVATE UINT8
//  250 AppS2wCmd_Wmode(UINT8 *ptr);
//  251 
//  252 PRIVATE UINT8
//  253 AppS2wCmd_Wscan(UINT8 *ptr);
//  254 
//  255 PRIVATE UINT8
//  256 AppS2wCmd_Wassoc(UINT8 *ptr);
//  257 
//  258 
//  259 PRIVATE UINT8
//  260 AppS2wCmd_Write(UINT8 *ptr);
//  261 
//  262 PRIVATE UINT8
//  263 AppS2wCmd_read(UINT8 *ptr);
//  264 
//  265 PRIVATE UINT8
//  266 AppS2wCmd_Nset(UINT8 *ptr);
//  267 
//  268 PRIVATE UINT8
//  269 AppS2wCmd_Nmac(UINT8 *ptr);
//  270 
//  271 UINT8
//  272 AppS2wCmd_OtaFwupConf(UINT8* ptr);
//  273 
//  274 UINT8
//  275 AppS2wCmd_OtaFwupExtFlashStart(UINT8* ptr);
//  276 
//  277 UINT8
//  278 AppS2wCmd_OtaFwupRollBack(UINT8* ptr);
//  279 
//  280 #ifdef S2W_UART_ENABLE
//  281 PRIVATE UINT8
//  282 AppS2wCmd_BaudRate(UINT8 *ptr);
//  283 PRIVATE UINT8
//  284 AppS2wCmd_UartFifoLevel(UINT8 * ptr);
//  285 
//  286 #endif
//  287 
//  288 PRIVATE UINT8
//  289 AppS2wCmd_SetDefaultProfile(UINT8 *ptr);
//  290 
//  291 PRIVATE UINT8
//  292 AppS2wCmd_Disconnect(UINT8 *ptr);
//  293 
//  294 PRIVATE UINT8
//  295 AppS2wCmd_Factory(UINT8 *ptr);
//  296 
//  297 PRIVATE UINT8
//  298 AppS2wCmd_Wradio(UINT8 *ptr);
//  299 
//  300 #ifndef S2W_IP2WIFI_SUPPORT
//  301 PRIVATE UINT8
//  302 AppS2wCmd_Ndhcp(UINT8 *ptr);
//  303 
//  304 PRIVATE UINT8
//  305 AppS2wCmd_Nstat(UINT8 *ptr);
//  306 #endif
//  307 UINT8
//  308 
//  309 
//  310 
//  311 
//  312 AppS2wCmd_FsTest(UINT8 * ptr);
//  313 
//  314 #if 0
//  315 PRIVATE UINT8
//  316 AppS2wCmd_SslCertificateOpen(UINT8 *ptr);
//  317 #endif
//  318 
//  319 #ifdef S2W_UART_ENABLE
//  320 PRIVATE UINT8
//  321 AppS2wCmd_HardFlow(UINT8 *ptr);
//  322 #endif
//  323 
//  324 PUBLIC UINT8
//  325 AppS2wCmd_Dgpio(UINT8 *ptr);
//  326 
//  327 UINT8
//  328 AppS2wCmd_reset(UINT8* ptr);
//  329 
//  330 PUBLIC UINT8
//  331 AppS2wCmd_SetSockOp(UINT8 *ptr);
//  332 
//  333 PUBLIC UINT8
//  334 AppS2wCmd_AsyncMsgFmt(UINT8 *ptr);
//  335 
//  336 extern APP_MAIN_CTX_T appCtx;
//  337 extern UINT32 nwConfigSuccess;
//  338 
//  339 PUBLIC UINT8
//  340 AppS2wCmd_RfTestStop (UINT8 *ptr);
//  341 PUBLIC UINT8
//  342 AppS2wCmd_RfTestStart (UINT8 *ptr);
//  343 PUBLIC UINT8
//  344 AppS2wCmd_RfTestTxStart(UINT8 *ptr);
//  345 PUBLIC UINT8
//  346 AppS2wCmd_RfTestTx99Start(UINT8 *ptr);
//  347 PUBLIC UINT8
//  348 AppS2wCmd_RfTestTx100Start(UINT8 *ptr);
//  349 PUBLIC UINT8
//  350 AppS2wCmd_RfTestCarrierWaveStart(UINT8 *ptr);
//  351 PUBLIC UINT8
//  352 AppS2wCmd_RfTestRxStart(UINT8 *ptr);
//  353 PUBLIC UINT8
//  354 AppS2wCmd_RfTestTxStop (UINT8 *ptr);
//  355 PUBLIC UINT8
//  356 AppS2wCmd_RfTestRxStop (UINT8 *ptr);
//  357 PUBLIC UINT8 AppS2wCmd_WlanCalib (UINT8 *ptr);
//  358 
//  359 #ifdef S2W_OTP_RDWR_SUPPORT
//  360 UINT8
//  361 AppS2wCmd_WlanOtpWrite (UINT8 *ptr);
//  362 #endif
//  363 UINT8
//  364 AppS2wCmd_WlanOtpRead (UINT8 *ptr);
//  365 
//  366 /* private functions used for call back
//  367  */
//  368 
//  369 VOID PRIVATE
//  370 s2wApp_ConnectCb(VOID* ctext, INT32 status);
//  371 
//  372 VOID
//  373 AppS2w_WlanRespTmrCb(VOID * context,GSN_SOFT_TMR_HANDLE_T timerHandle);
//  374 
//  375 VOID DHCP_notify(INT32 status,void *ctx);
//  376 
//  377 #ifdef S2W_SNTP
//  378 UINT8
//  379 AppS2wCmd_ntpTimeSet(UINT8 *ptr);
//  380 #endif
//  381 
//  382 PRIVATE UINT8
//  383 AppS2wCmd_Weap(UINT8 *ptr);
//  384 
//  385 PRIVATE UINT8
//  386 AppS2wCmd_WeapConf(UINT8 *ptr);
//  387 
//  388 UINT8
//  389 AppS2wCmd_BeaconMissThresholdSet(UINT8 *ptr);
//  390 
//  391 UINT8
//  392 AppS2wCmd_TkipContrMsrStart(UINT8 *ptr);
//  393 
//  394 UINT8
//  395 AppS2wCmd_TkipSeqNumGet(UINT8 *ptr);
//  396 
//  397 UINT8
//  398 AppS2wCmd_WlanStatsGet(UINT8 *ptr);
//  399 
//  400 UINT8
//  401 AppS2wCmd_WlanRecvFiltrSet(UINT8 *ptr);
//  402 
//  403 UINT8
//  404 AppS2wCmd_RtsEnable(UINT8 *ptr);
//  405 
//  406 UINT8
//  407 AppS2wCmd_BlockAckReq(UINT8 *ptr);
//  408 
//  409 UINT8
//  410 AppS2wCmd_AmsduReqt(UINT8 *ptr);
//  411 
//  412 UINT8
//  413 AppS2wCmd_AmpduReq(UINT8 *ptr);
//  414 
//  415 UINT8
//  416 AppS2wCmd_FrameTxFailCntLmitSet(UINT8 *ptr);
//  417 
//  418 UINT8
//  419 AppS2wCmd_SecuritySet(UINT8 *ptr);
//  420 
//  421 UINT8
//  422 AppS2wCmd_Wauth(UINT8 *ptr);
//  423 
//  424 UINT8
//  425 AppS2wCmd_Wwpa(UINT8 *ptr);
//  426 
//  427 UINT8
//  428 AppS2wCmd_WpaPsk(UINT8 *ptr);
//  429 
//  430 UINT8
//  431 AppS2wCmd_Psk(UINT8 *ptr);
//  432 
//  433 UINT8
//  434 AppS2wCmd_Wwep(UINT8 *ptr);
//  435 UINT8
//  436 AppS2wCmd_WwepConf(UINT8 *ptr);
//  437 
//  438 UINT8
//  439 AppS2wCmad_WsrvrValidationEn(UINT8 *ptr);
//  440 
//  441 UINT8
//  442 AppS2wCmad_WeapTimeChk(UINT8 *ptr);
//  443 
//  444 VOID
//  445 AppS2wHal_PsHibernateRequest(S2W_ALARM_INFO_T *alarm);
//  446 
//  447 UINT8 AppS2wCmd_Hibernate(UINT8 *ptr);
//  448 
//  449 #ifdef S2W_COAP_SUPPORT
//  450 
//  451 typedef struct S2W_COAP_OPTION
//  452 {
//  453 	UINT8 optionKey;
//  454 	char *optionValue;
//  455 	struct S2W_COAP_OPTION * next;
//  456 }S2W_COAP_OPTION_T;
//  457 

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
//  458 S2W_COAP_OPTION_T * optionHead;
optionHead:
        DS8 4
//  459 
//  460 #define COAP_POST "POST"
//  461 #define COAP_GET "GET"
//  462 #define COAP_CON "CON"
//  463 #define COAP_NON "NON"
//  464 #define COAP_MAX_RESPONSE_TIMEOUT 60
//  465 PRIVATE UINT8
//  466 AppS2wCmd_CoapOpen(UINT8 *ptr);
//  467 
//  468 PRIVATE UINT8
//  469 AppS2wCmd_CoapClose(UINT8 *ptr);
//  470 
//  471 PRIVATE UINT8
//  472 AppS2wCmd_CoapSetOption(UINT8 *ptr);
//  473 
//  474 PRIVATE UINT8
//  475 AppS2wCmd_CoapRemoveOption(UINT8 *ptr);
//  476 
//  477 PRIVATE UINT8
//  478 AppS2wCmd_CoapSend(UINT8 *ptr);
//  479 
//  480 GSN_COAP_CONTEXT_T*
//  481 AppS2wHal_CoapHandleGet(UINT8 cid);
//  482 
//  483 PUBLIC GSN_COAP_CONN_PARAMS_T*
//  484 AppS2wHal_CoapParamsGet(UINT8 cid);
//  485 #endif
//  486 
//  487 extern UINT8
//  488 AppS2wCmd_MdnsInit(UINT8 *ptr);
//  489 #ifdef S2W_IPv6_SUPPORT
//  490 extern UINT8
//  491 AppS2wCmd_MdnsInitv6(UINT8 *ptr);
//  492 #endif
//  493 extern UINT8
//  494 AppS2wCmd_MdnsDeInit(UINT8 *ptr);
//  495 extern UINT8
//  496 AppS2wCmd_MdnsHostNameReg(UINT8 *ptr);
//  497 extern UINT8
//  498 AppS2wCmd_MdnsServiceReg(UINT8 *ptr);
//  499 extern UINT8
//  500 AppS2wCmd_MdnsHostNmDeReg(UINT8 *ptr);
//  501 extern UINT8
//  502 AppS2wCmd_MdnsSrvDeReg(UINT8 *ptr);
//  503 extern  UINT8
//  504 AppS2wCmd_MdnsAnnounce(UINT8 *ptr);
//  505 extern UINT8
//  506 AppS2wCmd_MdnsAnnounceAll(UINT8 *ptr);
//  507 extern UINT8
//  508 AppS2wCmd_MdnsSrvcDiscover(UINT8 *ptr);
//  509 #if defined (S2W_GSLINK) && defined (S2W_WEB_SERVER)
//  510 extern UINT8
//  511 AppS2wCmd_WebServer(UINT8* ptr);
//  512 #endif
//  513 
//  514 UINT8
//  515 AppS2wCmd_Wphymode(UINT8* ptr);
//  516 
//  517 #ifdef S2W_IPv6_SUPPORT
//  518 
//  519 UINT8
//  520 AppS2wCmd_Nsetv6(UINT8* ptr);
//  521 
//  522 UINT8
//  523 AppS2wCmd_Ndhcpv6(UINT8 *ptr);
//  524 
//  525 #ifdef S2W_PING_TRACE
//  526 UINT8
//  527 AppS2wCmd_Ping(UINT8* ptr);
//  528 #endif
//  529 UINT8
//  530 AppS2wCmd_Ncudpv6(UINT8* ptr);
//  531 
//  532 UINT8
//  533 AppS2wCmd_Nsudpv6(UINT8* ptr);
//  534 
//  535 UINT8
//  536 AppS2wCmd_Nctcpv6(UINT8* ptr);
//  537 
//  538 UINT8
//  539 AppS2wCmd_Nstcpv6(UINT8* ptr);
//  540 
//  541 UINT8
//  542 AppS2wCmd_Dhcpv6Server(UINT8 *ptr);
//  543 #endif //S2W_IPv6_SUPPORT
//  544 
//  545 #ifdef S2W_DNS_CLIENT
//  546 
//  547 UINT8
//  548 AppS2wCmd_DnsLookup(UINT8 *ptr);
//  549 
//  550 #ifdef S2W_IPv6_SUPPORT
//  551 UINT8
//  552 AppS2wCmd_DnsLookupv6(UINT8 *ptr);
//  553 #endif
//  554 UINT8
//  555 AppS2wCmd_DnsServerSet(UINT8 *ptr);
//  556 
//  557 #endif //S2W_DNS_CLIENT
//  558 
//  559 #ifdef S2W_HTTP_CUSTOM_SUPPORT
//  560 extern UINT8
//  561 AppS2wCmd_RecvConf(UINT8 *ptr);
//  562 #endif
//  563 
//  564 #ifdef S2W_GSLINK
//  565 VOID
//  566 AppS2w_HttpdBodyLenSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT32 len);
//  567 
//  568 VOID
//  569 AppS2w_HttpdMethodSet(S2W_HTTPD_CONTEXT_T *httpdCtx,UINT8 method);
//  570 #endif
//  571 
//  572 PUBLIC GSN_STATUS
//  573 APPS2w_ExtFlashStart( S2W_OTA_FWUP_CONF_T *pOtaFwupConf);
//  574 
//  575 UINT8
//  576 AppS2wCmd_PowerSaveStby(UINT8 *ptr);
//  577 
//  578 PUBLIC UINT8
//  579 AppS2wCmd_NwConnRestore();
//  580 
//  581 
//  582 
//  583 extern VOID
//  584 AppS2wCmd_GetSecurityString(GSN_WDD_WLAN_CFG_T *WddConf,const char **security );
//  585 UINT8
//  586 AppS2wCmd_Wauto(UINT8* ptr);
//  587 UINT8
//  588 AppS2wCmd_Nauto(UINT8* ptr);
//  589 
//  590 #ifdef S2W_DHCP_SERVER_ENABLE
//  591 PUBLIC UINT8
//  592 AppS2wCmd_DhcpSrvrConfig(UINT8 *ptr);
//  593 
//  594 PUBLIC UINT8
//  595 AppS2wCmd_DhcpSrvr(UINT8 *ptr);
//  596 #endif //S2W_DHCP_SERVER_ENABLE
//  597 
//  598 
//  599 PUBLIC UINT8
//  600 AppS2wCmd_IpMulticastJoin(UINT8 *ptr);
//  601 
//  602 PUBLIC UINT8
//  603 AppS2wCmd_IpMulticastLeave(UINT8 *ptr);
//  604 
//  605 UINT8
//  606 AppS2wCmd_SoftFlow(UINT8 *ptr);
//  607 
//  608 UINT8
//  609 AppS2wCmd_ApClientInfoGet(UINT8 *ptr);
//  610 
//  611 #ifdef S2W_THROUGHPUT_TEST
//  612 UINT8
//  613 AppS2wCmd_SockTpTest(UINT8 *ptr);
//  614 UINT8
//  615 AppS2wCmd_SockTpTestStat(UINT8 * ptr);
//  616 #endif
//  617 
//  618 extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
//  619 
//  620 
//  621 #ifdef S2W_SECURITY_WPS_ENABLE
//  622 PRIVATE UINT8
//  623 AppS2wCmd_Wwps(UINT8 *ptr);
//  624 #endif
//  625 
//  626 #ifdef S2W_EMU
//  627 PRIVATE UINT8
//  628 AppS2wCmd_EmuVer(UINT8 *ptr);
//  629 
//  630 PRIVATE UINT8
//  631 AppS2wCmd_SupportedModules(UINT8 *ptr);
//  632 
//  633 PRIVATE UINT8
//  634 AppS2wCmd_EmuStart(UINT8 *ptr);
//  635 
//  636 PRIVATE UINT8
//  637 AppS2wCmd_EmuStop(UINT8 *ptr);
//  638 
//  639 PRIVATE UINT8
//  640 AppS2wCmd_EmuGetValues(UINT8 *ptr);
//  641 
//  642 PRIVATE UINT8
//  643 AppS2wCmd_EmuGetConf(UINT8 *ptr);
//  644 
//  645 PRIVATE UINT8
//  646 AppS2wCmd_EmuSetConf(UINT8 *ptr);
//  647 
//  648 PRIVATE UINT8
//  649 AppS2wCmd_EmuLoadCtl(UINT8 *ptr);
//  650 
//  651 PRIVATE UINT8
//  652 AppS2wCmd_EmuResetEnergy(UINT8 *ptr);
//  653 
//  654 PRIVATE UINT8
//  655 AppS2wCmd_EmuGetStatus(UINT8 *ptr);
//  656 
//  657 PRIVATE UINT8
//  658 AppS2wCmd_EmuGetInstValues(UINT8 *ptr);
//  659 
//  660 PRIVATE UINT8
//  661 AppS2wCmd_EmuLoadStatus(UINT8 *ptr);
//  662 
//  663 PRIVATE UINT8
//  664 AppS2wCmd_EmuPrint(UINT8 *ptr);
//  665 
//  666 #endif
//  667 
//  668 /*Commands for adc*/
//  669 
//  670 #ifdef S2W_ADC_SUPPORT
//  671 #ifndef GS2100 // adc is not there in 2100
//  672 PRIVATE UINT8
//  673 AppS2wCmd_AdcConf(UINT8 *ptr);
//  674 
//  675 PRIVATE UINT8
//  676 AppS2wCmd_AdcStart(UINT8 *ptr);
//  677 
//  678 PRIVATE UINT8
//  679 AppS2wCmd_AdcRead(UINT8 *ptr);
//  680 
//  681 PRIVATE UINT8
//  682 AppS2wCmd_AdcStop(UINT8 *ptr);
//  683 #endif
//  684 #endif
//  685 
//  686 PUBLIC UINT8 
//  687 AppS2wCmd_PerstTmrStart(UINT8 *ptr);
//  688 PUBLIC UINT8
//  689 AppS2wCmd_PerstTmrStop(UINT8 *ptr);
//  690 PUBLIC UINT8
//  691 AppS2wCmd_PerstTmrDelete(UINT8 *ptr);
//  692 PUBLIC UINT8
//  693 AppS2wCmd_PerstTmrReStart(UINT8 *ptr);
//  694 
//  695 #ifdef S2W_ISOTX_SUPPORT
//  696 UINT8
//  697 AppS2wCmd_IsoTxStart(UINT8 *ptr);
//  698 UINT8
//  699 AppS2wCmd_IsoTxStop(UINT8 *ptr);
//  700 UINT8
//  701 AppS2wCmd_IsoTxConfig(UINT8 *ptr);
//  702 #endif
//  703 
//  704 #ifdef S2W_UNASSOC_TXRX_SUPPORT
//  705 UINT8
//  706 S2w_CmdUnSolicitedTx(UINT8 *ptr);
//  707 UINT8
//  708 S2w_CmdUnSolicitedRx(UINT8 *ptr);
//  709 UINT8
//  710 S2w_CmdUnSolicitedRxstop(UINT8 *ptr);
//  711 #endif
//  712 #ifdef S2W_SNTP
//  713 PRIVATE VOID
//  714 S2wApp_TimeSyncDoneCb(INT32 msg, VOID* context);
//  715 
//  716 PRIVATE VOID
//  717 AppS2w_sntpTimerCb( VOID* context,
//  718     GSN_SOFT_TMR_HANDLE_T timerHandle );
//  719 #endif
//  720 #ifdef S2W_15DOT4_SUPPORT
//  721 UINT8
//  722 AppS2wCmd_154Channel(UINT8 *ptr);
//  723 
//  724 UINT8
//  725 AppS2wCmd_154PanId(UINT8 *ptr);
//  726 
//  727 UINT8
//  728 AppS2wCmd_154ShortAddr(UINT8 *ptr);
//  729 
//  730 UINT8
//  731 AppS2wCmd_154ExtendedAddr(UINT8 *ptr);
//  732 
//  733 UINT8
//  734 AppS2wCmd_154RetryCount(UINT8 *ptr);
//  735 
//  736 UINT8
//  737 AppS2wCmd_154JoinPermit(UINT8 *ptr);
//  738 
//  739 UINT8
//  740 AppS2wCmd_154SupreFrmCfg(UINT8 *ptr);
//  741 UINT8
//  742 AppS2wCmd_154CoordExtndedAddr(UINT8 *ptr);
//  743 UINT8
//  744 AppS2wCmd_154CoordShortAddr(UINT8 *ptr);
//  745 
//  746 UINT8
//  747 AppS2wCmd_154ScanNetwork(UINT8 *ptr);
//  748 
//  749 UINT8
//  750 AppS2wCmd_154JoinNetwork(UINT8 *ptr);
//  751 
//  752 UINT8
//  753 AppS2wCmd_154AddNode(UINT8 *ptr);
//  754 
//  755 UINT8
//  756 AppS2wCmd_154StartNetwork(UINT8 *ptr);
//  757 
//  758 UINT8
//  759 AppS2wCmd_154LeaveNetwork(UINT8 *ptr);
//  760 
//  761 UINT8
//  762 AppS2wCmd_154PollData(UINT8 *ptr);
//  763 
//  764 UINT8
//  765 AppS2wCmd_154DataSend(UINT8 *ptr);
//  766 
//  767 UINT8
//  768 AppS2wCmd_154DataPurge(UINT8 *ptr);
//  769 UINT8
//  770 AppS2wCmd_154RxEnable(UINT8 *ptr);
//  771 PUBLIC UINT8 AppS2wCmd_I154RxTest (UINT8 *ptr);
//  772 PUBLIC UINT8 AppS2wCmd_I154RxTestStop (UINT8 *ptr);
//  773 PUBLIC UINT8 AppS2wCmd_I154TxTest (UINT8 *ptr);
//  774 UINT8
//  775 AppS2wCmd_154GTSReq(UINT8 *ptr);
//  776 UINT8
//  777 AppS2wCmd_154SetReq(UINT8 *ptr);
//  778 UINT8
//  779 AppS2wCmd_154GetReq(UINT8 *ptr);
//  780 UINT8
//  781 AppS2wCmd_154SyncReq(UINT8 *ptr);
//  782 #ifdef GSN_802_15_4_TEST_SUPPORT
//  783 UINT8 AppS2wCmd_154TmrReq(UINT8 *ptr);
//  784 UINT8
//  785 AppS2wCmd_154GenericTest(UINT8 *ptr);
//  786 #endif
//  787 #endif
//  788 
//  789 #ifdef S2W_EXTFLASH_DRIVER_TEST
//  790 UINT8
//  791 AppS2wCmd_ExtFlashInit(UINT8* ptr);
//  792 
//  793 UINT8
//  794 AppS2wCmd_ExtFlashWrite(UINT8* ptr);
//  795 
//  796 UINT8
//  797 AppS2wCmd_ExtFlashRead(UINT8* ptr);
//  798 
//  799 UINT8
//  800 AppS2wCmd_ExtFlashErase(UINT8* ptr);
//  801 
//  802 UINT8
//  803 AppS2wCmd_ExtFlashChipErase(UINT8* ptr);
//  804 
//  805 UINT8
//  806 AppS2wCmd_ExtFlashSpiConf(UINT8* ptr);
//  807 
//  808 #endif
//  809 
//  810 #if defined(S2W_DTLS_CLIENT_SUPPORT)
//  811 UINT8
//  812 AppS2wCmd_DTSLClose(UINT8 *ptr);
//  813 
//  814 UINT8
//  815 AppS2wCmd_DTSLOpen(UINT8 *ptr);
//  816 #endif
//  817 
//  818 UINT8
//  819 S2wRateValidation(UINT32 value);
//  820 
//  821 extern UINT8
//  822 AppS2wCmd_WlanStaPsCfg(UINT8 *ptr);
//  823 
//  824 extern  UINT8
//  825 AppS2wCmd_WlanApPsCfg(UINT8 *ptr);
//  826 
//  827 UINT8
//  828 AppS2wCmd_ieeePsPollSet(UINT8 *ptr);
//  829 UINT8
//  830 S2w_CmdPsPollIntervelset(UINT8 *ptr);
//  831 
//  832 UINT8
//  833 AppS2wCmd_ArpEntrySet(UINT8 *ptr);
//  834 
//  835 UINT8
//  836 AppS2wCmd_ArpEntryDelete(UINT8 *ptr);
//  837 
//  838 UINT8
//  839 AppS2wCmd_ArpAutoSet(UINT8 *ptr);
//  840 
//  841 #ifdef S2W_I2C_SUPPORT
//  842 /*Commands to test I2C*/
//  843 PRIVATE UINT8
//  844 AppS2wCmd_I2cConf(UINT8 *ptr);
//  845 
//  846 PRIVATE UINT8
//  847 AppS2wCmd_I2cStart(UINT8 *ptr);
//  848 
//  849 PRIVATE UINT8
//  850 AppS2wCmd_I2cWrite(UINT8 *ptr);
//  851 
//  852 PRIVATE UINT8
//  853 AppS2wCmd_I2cRead(UINT8 *ptr);
//  854 
//  855 PRIVATE UINT8
//  856 AppS2wCmd_I2cStop(UINT8 *ptr);
//  857 #endif
//  858 UINT8
//  859 AppS2wCmd_BaBitMapSet(UINT8* ptr);
//  860 
//  861 UINT8
//  862 AppS2wCmd_RadioStateGet(UINT8* ptr);
//  863 
//  864 UINT8 AppS2wCmd_ZipScan( UINT8 *ptr );
//  865 UINT8 AppS2wCmd_ZipStart( UINT8 *ptr );
//  866 UINT8 AppS2wCmd_ZipStop( UINT8 *ptr );
//  867 UINT8 AppS2wCmd_ZipSetMacAddr( UINT8 *ptr );
//  868 
//  869 #ifdef S2W_ADC_SUPPORT
//  870 UINT8 App_ClkTuneCmd(UINT8 *ptr);
//  871 #endif
//  872 
//  873 #ifdef GSN_MEM_TRACE
//  874 PUBLIC UINT8
//  875 AppS2wCmd_memTraceGet(UINT8 *ptr);
//  876 #endif
//  877 
//  878 UINT8
//  879 AppS2wCmd_SetAssocTimeout(UINT8 *ptr);
//  880 
//  881 INT32
//  882 App_TemperatureGet();
//  883 
//  884 UINT8 
//  885 AppS2wCmd_TempGet(UINT8 *ptr);
//  886 
//  887 UINT8 
//  888 AppS2wCmd_TempReadStart(UINT8 *ptr);
//  889 
//  890 UINT8
//  891 AppS2wCmd_HwCryptoEn(UINT8 *ptr);
//  892 
//  893 UINT8
//  894 AppS2wCmd_GratArpSend(UINT8 *ptr);
//  895 
//  896 PUBLIC GSN_STATUS_T
//  897 AppTls_TempOrLightGet(UINT32* tlsTempSensorData);
//  898 
//  899 typedef enum S2W_ERROR_CODE
//  900 {
//  901 	S2W_ERROR_CODE_AP_NOT_FOUND = 1,
//  902 	S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT = 2,
//  903 	S2W_ERROR_CODE_WPA_AUTH_FAILURE = 3,
//  904 }S2W_ERROR_CODE_T;
//  905 const char *S2WError_List[] =
//  906 {
//  907 	"\r\nNO ERROR",
//  908 	"\r\nSSID NOT FOUND",
//  909 	"\r\nWLAN CONNECT ERROR",
//  910 	"\r\nWPA AUTH FAIL",
//  911 };
//  912 
//  913 #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
//  914 
//  915 UINT8
//  916 AppS2wCmd_SslConfig(UINT8 *ptr);
//  917 
//  918 #endif
//  919 /**
//  920  ******************************************************************
//  921  * @ingroup S2w-Application
//  922  * @brief Table contains all the Serial2WiFi Host commands and
//  923  *        corresponding call backs to process the command.This array
//  924  *        can be exteded to add more host commands.
//  925  ******************************************************************/
//  926 PRIVATE const struct S2W_CMD s2wCmdTable[] =
//  927 {
//  928     {"+WA=",        AppS2wCmd_Wassoc},
//  929     {"+WPHYMODE=", AppS2wCmd_Wphymode},
//  930     {"+BCONMISSTHRHLD=",   AppS2wCmd_BeaconMissThresholdSet},
//  931     {"+TKIPCNTRMSR=",      AppS2wCmd_TkipContrMsrStart},
//  932     {"+TKIPSEQSET=",   AppS2wCmd_TkipSeqNumGet},
//  933     {"+WLANSTATS", AppS2wCmd_WlanStatsGet},
//  934     {"+RXFILTER=",  AppS2wCmd_WlanRecvFiltrSet},
//  935     {"+WRTS=",      AppS2wCmd_RtsEnable},
//  936     {"+WBLOCKACK=",   AppS2wCmd_BlockAckReq},
//  937     {"+WAMSDU=",     AppS2wCmd_AmsduReqt},
//  938     {"+WAMPDU=",     AppS2wCmd_AmpduReq},
//  939     {"+TXFAILLMT=", AppS2wCmd_FrameTxFailCntLmitSet},
//  940 #ifndef S2W_IP2WIFI_SUPPORT
//  941     {"+NDHCP=",     AppS2wCmd_Ndhcp},
//  942     {"+NSTAT=",     AppS2wCmd_Nstat},
//  943     {"+CID=",       AppS2wCmd_CidInfo},
//  944     {"+NCLOSEALL",  AppS2wCmd_Ncloseall},
//  945     {"+NCLOSE=",    AppS2wCmd_Nclose},
//  946 #endif
//  947     {"+WRXACTIVE=", AppS2wCmd_Wradio},
//  948     {"+WRETRY=",    AppS2wCmd_Wretry},
//  949 #ifndef S2W_IP2WIFI_SUPPORT
//  950     {"+NCTCP=",     AppS2wCmd_Nctcp},
//  951     {"+NCUDP=",     AppS2wCmd_Ncudp},
//  952     {"+NSTCP=",     AppS2wCmd_Nstcp},
//  953     {"+NSUDP=",     AppS2wCmd_Nsudp},
//  954 #ifdef S2W_MDNS_ENABLE
//  955     {"+MDNSSTART", AppS2wCmd_MdnsInit},
//  956 #ifdef S2W_IPv6_SUPPORT
//  957     {"+MDNSv6START", AppS2wCmd_MdnsInitv6},
//  958 #endif
//  959     {"+MDNSSTOP", AppS2wCmd_MdnsDeInit},
//  960 //    {"+MDNSANNOUNCE=", AppS2wCmd_MdnsAnnounceAll},
//  961     {"+MDNSANNOUNCE",  AppS2wCmd_MdnsAnnounceAll},
//  962     {"+MDNSHNREG=", AppS2wCmd_MdnsHostNameReg},
//  963     {"+MDNSSRVREG=", AppS2wCmd_MdnsServiceReg},
//  964     {"+MDNSSD=", AppS2wCmd_MdnsSrvcDiscover},
//  965     {"+MDNSHNDEREG=", AppS2wCmd_MdnsHostNmDeReg},
//  966     {"+MDNSSRVDEREG=", AppS2wCmd_MdnsSrvDeReg},
//  967 #endif
//  968     {"+NXSETSOCKOPT=",  AppS2wCmd_SetSockOp},
//  969 #endif
//  970     {"+NMAC=",      AppS2wCmd_Nmac},
//  971     {"+WSEC=", AppS2wCmd_SecuritySet},
//  972     {"+WAUTH=",     AppS2wCmd_Wauth},
//  973     {"+WWPA=",  AppS2wCmd_Wwpa},
//  974     {"+WPAPSK=", AppS2wCmd_WpaPsk},
//  975     {"+WPSK=",   AppS2wCmd_Psk},
//  976     {"+WWEPCONF=",   AppS2wCmd_WwepConf},
//  977     {"+WWEP",   AppS2wCmd_Wwep},    
//  978     {"+WSYNCINTRL=", S2w_CmdSyncLossIntrvlSet},
//  979     {"+WSTATUS",	  AppS2wCmd_Wstatus},
//  980     {"+WST=", AppS2wCmd_scanTimeSet},
//  981     {"+WS",         AppS2wCmd_Wscan},
//  982     {"+NSET=",  AppS2wCmd_Nset},
//  983     {"+WM=",    AppS2wCmd_Wmode},
//  984     {"+WRXPS=", AppS2wCmd_PowerSave},
//  985     {"+WIEEEPSPOLL=", AppS2wCmd_ieeePsPollSet},
//  986     {"+WP=",    AppS2wCmd_Wpower},
//  987     {"+WD",     AppS2wCmd_Disconnect},
//  988     {"+WRSSI=", AppS2wCmd_Wrssi},
//  989     {"+WRATE=",    AppS2wCmd_Wrate},
//  990     {"+WAPSM=",  AppS2wCmd_AssocPSModeSet},
//  991     {"+MCSTSET=",   AppS2wCmd_McastRecvSet},
//  992     {"+WIEEEPSPOLL=", AppS2wCmd_ieeePsPollSet},
//  993 	{"+NARP=",		AppS2wCmd_ArpEntryGet},
//  994 	{"+NARPCHACHEEN=",	AppS2wCmd_ArpCacheEn},
//  995 	{"+NARPCHACHEDEL", AppS2wCmd_ArpCacheDel},
//  996     {"+NARPSET=",		AppS2wCmd_ArpEntrySet},
//  997     {"+NARPDELETE=",	AppS2wCmd_ArpEntryDelete},
//  998     {"+NARPAUTO=",	AppS2wCmd_ArpAutoSet},
//  999     {"+srvvalidationen=",AppS2wCmad_WsrvrValidationEn},
// 1000 	{"+WEAPTIMECHK=",AppS2wCmad_WeapTimeChk},
// 1001 #ifdef S2W_UART_ENABLE    
// 1002     {"B=",      AppS2wCmd_BaudRate},
// 1003     {"+UARTFLVL=",AppS2wCmd_UartFifoLevel},
// 1004     {"&R",      AppS2wCmd_HardFlow},
// 1005     {"&K",      AppS2wCmd_SoftFlow},
// 1006 #endif
// 1007     {"&F",      AppS2wCmd_Factory},
// 1008     {"&V",      AppS2wCmd_ConfigOutput},
// 1009     {"&W",      AppS2wCmd_Write},
// 1010     {"Z",       AppS2wCmd_read},
// 1011     {"&Y",      AppS2wCmd_SetDefaultProfile},
// 1012     {"S",       AppS2wCmd_Settings},
// 1013     {"E",       AppS2wCmd_Echo},
// 1014     {"V",       AppS2wCmd_Verbose},
// 1015     {"I",       AppS2wCmd_IdOutput},
// 1016     //{"?",		AppS2wCmd_Help},
// 1017 #ifdef  S2W_NCM_SUPPORT_ENABLE
// 1018     {"A",       AppS2wCmd_AutoConnect},
// 1019 #endif
// 1020     {"H",       AppS2wCmd_Disconnect},
// 1021     {"C",       AppS2wCmd_Acmode},
// 1022     {"O",       AppS2wCmd_GoOnline},
// 1023     {"+VER=",    App2wCmd_Version},
// 1024     {"+MCSTSET=",   AppS2wCmd_McastRecvSet},
// 1025     {"+BDATA=",  S2w_CmdBulkDataState},
// 1026     {"+RESET", AppS2wCmd_reset},
// 1027     {"+APCONF=",AppS2wCmd_ApConf},
// 1028     {"+APCLIENTINFO=", AppS2wCmd_ApClientInfoGet},
// 1029 	{"+L2CONFIG=",	AppS2w_CmdL2ConfigSet},
// 1030 #ifdef S2W_SNTP
// 1031     {"+NTIMESYNC=",   AppS2wCmd_ntpTimeSet},
// 1032 #endif
// 1033 #ifdef S2W_DNS_SERVER_ENABLE    
// 1034 	{"+DNS=",       AppS2wCmd_Dns},
// 1035 #endif        
// 1036 #ifdef S2W_DHCP_SERVER_ENABLE        
// 1037 	{"+DHCPSRVR=",  AppS2wCmd_DhcpSrvr},
// 1038         {"+DHCPSRVRCFG=",  AppS2wCmd_DhcpSrvrConfig},
// 1039 #endif         
// 1040     {"+SETTIME=",  AppS2wCmd_SystemTimeSet},
// 1041     {"+GETTIME=",  AppS2wCmd_SystemTimeGet},
// 1042 #ifdef S2W_SECURITY_WPS_ENABLE
// 1043 
// 1044    {"+WWPS=",  AppS2wCmd_Wwps},
// 1045 #endif /* GSN_SECURITY_WPS_ENABLE */
// 1046 	{"+TCERTADD=", AppS2wCmd_SslCertificateAdd},
// 1047     {"+TCERTDEL=", AppS2wCmd_SslCertificateDelete},
// 1048     {"+WEAP=",   AppS2wCmd_Weap},
// 1049     {"+WEAPCONF=",	AppS2wCmd_WeapConf},
// 1050 #ifdef S2W_HTTPC_SUPPORT    
// 1051     {"+HTTPOPEN=", AppS2wCmd_HttpClientOpen},
// 1052     {"+HTTPCLOSE=", AppS2wCmd_HttpClientClose},
// 1053     {"+HTTPCONF=", AppS2wCmd_HttpClientConfig},
// 1054     {"+HTTPCONFDEL=", AppS2wCmd_HttpClientConfigDel},
// 1055     {"+HTTPSEND=", AppS2wCmd_HttpClientSend},
// 1056 #endif    
// 1057 #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD    
// 1058     {"+SOTAFWUPCONF=", AppS2wCmd_OtaFwupConf},
// 1059     {"+SOTAFWUPSTART", AppS2wCmd_OtaFwupExtFlashStart},
// 1060     {"+SOTAFWUPROLLBACK", AppS2wCmd_OtaFwupRollBack},
// 1061 #endif    
// 1062     //{"+FSTEST=", AppS2wCmd_FsTest},
// 1063     {"+WAUTO=",     AppS2wCmd_Wauto},
// 1064     {"+NAUTO=",     AppS2wCmd_Nauto},
// 1065     {"+PSDPSLEEP", AppS2wCmd_PowerSaveDpsleep},
// 1066 #ifdef S2W_PING_TRACE
// 1067     {"+PING=",      AppS2wCmd_Ping},
// 1068 #endif
// 1069 #ifdef S2W_IPv6_SUPPORT
// 1070     {"+NSETv6=",     AppS2wCmd_Nsetv6},
// 1071     {"+NDHCPv6=",    AppS2wCmd_Ndhcpv6},
// 1072     {"+NCUDPv6=",    AppS2wCmd_Ncudpv6},
// 1073     {"+NSUDPv6=",    AppS2wCmd_Nsudpv6},
// 1074     {"+NCTCPv6=",    AppS2wCmd_Nctcpv6},
// 1075     {"+NSTCPv6=",    AppS2wCmd_Nstcpv6},
// 1076     {"+DHCPSERVERv6=",AppS2wCmd_Dhcpv6Server},
// 1077 #endif
// 1078     {"+MQTT_PUBLISH", App2wCmd_mqtt_publish},
// 1079 #ifdef S2W_DNS_CLIENT
// 1080     {"+DNSSET=",AppS2wCmd_DnsServerSet},
// 1081     {"+DNSLOOKUP=",AppS2wCmd_DnsLookup},
// 1082 #ifdef S2W_IPv6_SUPPORT
// 1083     {"+DNSLOOKUPv6=",     AppS2wCmd_DnsLookupv6},
// 1084 #endif
// 1085 #endif
// 1086 
// 1087     {"+WREGDOMAIN=", AppS2wCmd_RegDomainSet},
// 1088 #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
// 1089     {"+SSLOPEN=",   AppS2wCmd_SSLOpen},
// 1090     {"+SSLCLOSE=",   AppS2wCmd_SSLClose},
// 1091 	{"+SSLCONF=", AppS2wCmd_SslConfig},
// 1092 #endif
// 1093 #ifdef S2W_RF_TEST
// 1094 	{"+WRFTESTSTART",  AppS2wCmd_RfTestStart},
// 1095 	{"+WRFTESTSTOP",  AppS2wCmd_RfTestStop},
// 1096     {"+WFRAMETXTEST=",  AppS2wCmd_RfTestTxStart},
// 1097     {"+WTX99TEST=",  AppS2wCmd_RfTestTx99Start},
// 1098     {"+WTX100TEST=",  AppS2wCmd_RfTestTx100Start},
// 1099     {"+WCARWAVTEST=",  AppS2wCmd_RfTestCarrierWaveStart},
// 1100 	{"+WTXSTOP=", AppS2wCmd_RfTestTxStop},
// 1101     {"+WRXTEST=",  AppS2wCmd_RfTestRxStart},
// 1102     {"+WRXSTOP",  AppS2wCmd_RfTestRxStop},
// 1103 	{"+WCALIB=",  AppS2wCmd_WlanCalib},
// 1104 #ifdef S2W_15DOT4_SUPPORT        
// 1105     {"+I154RXTEST=",AppS2wCmd_I154RxTest},
// 1106     {"+I154RXSTOP=",AppS2wCmd_I154RxTestStop},
// 1107     {"+I154TXTEST=",AppS2wCmd_I154TxTest},  
// 1108 #endif    
// 1109 #endif
// 1110 #ifdef S2W_OTP_RDWR_SUPPORT
// 1111     {"+WOTPWR=",AppS2wCmd_WlanOtpWrite},
// 1112     {"+AOTPWR=",AppS2wCmd_AppOtpWrite},
// 1113 #endif
// 1114     {"+WOTPRD=",AppS2wCmd_WlanOtpRead},
// 1115     {"+AOTPRD=",AppS2wCmd_AppOtpRead},
// 1116 
// 1117 #ifdef S2W_WEB_PROV
// 1118 	{"+WEBPROV=", APPS2wCmd_WebProv},
// 1119     {"+WEBPROVSTOP", APPS2wCmd_WebProvStop},    
// 1120     {"+NURIREDIR=", APPS2wCmd_AddRedirURI},
// 1121 #endif
// 1122 #if defined(S2W_GSLINK) && defined (S2W_WEB_SERVER)
// 1123     {"+WEBSERVER=", AppS2wCmd_WebServer},  
// 1124     {"+URIRECV=",AppS2wCmd_CfgUri},
// 1125 #endif
// 1126 #ifdef S2W_GSLINK_XML
// 1127     {"+XMLSEND=",   AppS2wCmd_XmlSend},
// 1128     {"+XMLPARSE=",   AppS2wCmd_XmlParseEnable},    
// 1129 
// 1130 #endif   
// 1131 #ifdef S2W_HTTP_CUSTOM_SUPPORT
// 1132     {"+HTTPRECVCONF=",   AppS2wCmd_RecvConf},
// 1133 #endif
// 1134 	{"+PSSTBY="   , AppS2wCmd_PowerSaveStby},
// 1135     {"+STORENWCONN",  AppS2wCmd_NwConnStore},
// 1136     {"+RESTORENWCONN",AppS2wCmd_NwConnRestore},
// 1137     {"+HIBERNATE=", AppS2wCmd_Hibernate},
// 1138 #ifdef  S2W_NCM_SUPPORT_ENABLE
// 1139     {"+NCMAUTO=",AppS2wCmd_NcmAuto},
// 1140     {"+NCMAUTOCONF=",AppS2wCmd_NcmAutoConf},
// 1141 #endif 
// 1142     {"+ASYNCMSGFMT=", AppS2wCmd_AsyncMsgFmt},
// 1143 #ifdef S2W_THROUGHPUT_TEST
// 1144 	{"+SOCKTPTEST=",   AppS2wCmd_SockTpTest},
// 1145 	{"+SOCKTPTESTSTAT=",   AppS2wCmd_SockTpTestStat},
// 1146 #endif
// 1147 
// 1148      {"+NIPMULTICASTJOIN=", AppS2wCmd_IpMulticastJoin},
// 1149      {"+NIPMULTICASTLEAVE=", AppS2wCmd_IpMulticastLeave},
// 1150      {"+DGPIO=",  AppS2wCmd_Dgpio},
// 1151 #if S2W_PERSISTENT_TMR_SUPPORT     
// 1152      {"+PRSTMRSTART=", AppS2wCmd_PerstTmrStart},
// 1153      {"+PRSTMRSTOP=", AppS2wCmd_PerstTmrStop},
// 1154      {"+PRSTMRDEL=", AppS2wCmd_PerstTmrDelete},
// 1155      {"+PRSTMRRESTART=", AppS2wCmd_PerstTmrReStart},
// 1156 #endif     
// 1157 
// 1158 #ifdef S2W_ISOTX_SUPPORT
// 1159 
// 1160      {"+ISOTXSTART=", AppS2wCmd_IsoTxStart},
// 1161      {"+ISOTXSTOP", AppS2wCmd_IsoTxStop},
// 1162      {"+ISOTXREGWR=", AppS2wCmd_IsoTxConfig},
// 1163 #endif
// 1164 #ifdef S2W_UNASSOC_TXRX_SUPPORT
// 1165      {"+UNSOLICITEDTX=", S2w_CmdUnSolicitedTx},
// 1166      {"+UNSOLICITEDRX=", S2w_CmdUnSolicitedRx},
// 1167      {"+UNSOLICITEDRXSTOP", S2w_CmdUnSolicitedRxstop},
// 1168      {"+UAMCCA=", S2w_CmdUnSolicitedCcaConf},
// 1169 #endif
// 1170 #ifdef S2W_EMU  
// 1171       /*Commands for EMU*/
// 1172     {"+emuver=", AppS2wCmd_EmuVer}, 
// 1173     {"+emusupmod=",AppS2wCmd_SupportedModules},
// 1174     {"+emustart",AppS2wCmd_EmuStart},  
// 1175     {"+emustop",AppS2wCmd_EmuStop},
// 1176     {"+emusetconf=",AppS2wCmd_EmuSetConf},
// 1177     {"+emugetvalues",AppS2wCmd_EmuGetValues},
// 1178     {"+emugetconf=",AppS2wCmd_EmuGetConf},
// 1179     {"+emuloadctrl=",AppS2wCmd_EmuLoadCtl}, 
// 1180     {"+emugetinstvalues",AppS2wCmd_EmuGetInstValues},
// 1181     {"+emuresetenergy",AppS2wCmd_EmuResetEnergy},
// 1182     {"+emugetstatus",AppS2wCmd_EmuGetStatus},
// 1183     {"+emuloadstatus",AppS2wCmd_EmuLoadStatus},
// 1184     {"+emuprint",AppS2wCmd_EmuPrint},
// 1185 #endif
// 1186 #ifdef S2W_ADC_SUPPORT
// 1187 #ifndef GS2100
// 1188     {"+adcconf=",AppS2wCmd_AdcConf},
// 1189     {"+adcstart",AppS2wCmd_AdcStart},
// 1190     {"+adcread=",AppS2wCmd_AdcRead},
// 1191     {"+adcstop",AppS2wCmd_AdcStop},
// 1192 #endif
// 1193 #endif
// 1194 #ifdef S2W_I2C_SUPPORT
// 1195     /*Commands for I2C*/
// 1196     {"+i2cconf=",AppS2wCmd_I2cConf},
// 1197     {"+i2cstart",AppS2wCmd_I2cStart},
// 1198     {"+i2cwrite=",AppS2wCmd_I2cWrite},
// 1199     {"+i2cread=",AppS2wCmd_I2cRead},
// 1200     {"+i2cstop",AppS2wCmd_I2cStop},
// 1201 #endif    
// 1202 #ifdef S2W_15DOT4_SUPPORT
// 1203     {"+PCH="   , AppS2wCmd_154Channel},
// 1204     {"+PPID="  , AppS2wCmd_154PanId},
// 1205     {"+PSA="   , AppS2wCmd_154ShortAddr},
// 1206     {"+PLA="   , AppS2wCmd_154ExtendedAddr},   
// 1207     {"+PMR="   , AppS2wCmd_154RetryCount},
// 1208     {"+PJP="   , AppS2wCmd_154JoinPermit},
// 1209     {"+PSC="   , AppS2wCmd_154SupreFrmCfg},
// 1210     {"+PCE="   , AppS2wCmd_154CoordExtndedAddr},   
// 1211     {"+PCA="   , AppS2wCmd_154CoordShortAddr},
// 1212     {"+PSN="   , AppS2wCmd_154ScanNetwork},
// 1213     {"+PJN="   , AppS2wCmd_154JoinNetwork},
// 1214     {"+PAN="   , AppS2wCmd_154AddNode},   
// 1215     {"+PFN="   , AppS2wCmd_154StartNetwork},
// 1216     {"+PLN="   , AppS2wCmd_154LeaveNetwork},
// 1217     {"+PPL="   , AppS2wCmd_154PollData},
// 1218     {"+PDS="   , AppS2wCmd_154DataSend}, 
// 1219     {"+PDP="   , AppS2wCmd_154DataPurge},
// 1220     {"+PRXEN="  , AppS2wCmd_154RxEnable},
// 1221     {"+PSR="    , AppS2wCmd_154SetReq},
// 1222     {"+PGR="    , AppS2wCmd_154GetReq},
// 1223     {"+PGTS=", AppS2wCmd_154GTSReq},
// 1224     {"+PSYNCR=", AppS2wCmd_154SyncReq},
// 1225 
// 1226 #endif
// 1227 #ifdef S2W_EXTFLASH_DRIVER_TEST
// 1228 	 {"+EXFLASHINIT=", AppS2wCmd_ExtFlashInit},
// 1229 	 {"+EXFLASHWRITE=", AppS2wCmd_ExtFlashWrite},
// 1230 	 {"+EXFLASHREAD=", AppS2wCmd_ExtFlashRead},
// 1231 	 {"+EXFLASHERASE=", AppS2wCmd_ExtFlashErase},
// 1232 	 {"+EXFLASHCERASE", AppS2wCmd_ExtFlashChipErase},
// 1233 	 {"+EXFLASHSPICONF=", AppS2wCmd_ExtFlashSpiConf},
// 1234 #endif
// 1235 #if defined(S2W_DTLS_CLIENT_SUPPORT)
// 1236 	    {"+DTLSOPEN=",   AppS2wCmd_DTSLOpen},
// 1237 	    {"+DTLSCLOSE=",   AppS2wCmd_DTSLClose},
// 1238 #endif
// 1239 
// 1240 	{"+WSTAPSCFG=", AppS2wCmd_WlanStaPsCfg},
// 1241 	{"+WAPPSCFG=", AppS2wCmd_WlanApPsCfg},
// 1242 	{"+PSPOLLINTRL=", S2w_CmdPsPollIntervelset},
// 1243 	{"+WKEEPALIVE=", S2w_CmdPsPollIntervelset},
// 1244 #ifdef S2W_PWM_SUPPORT
// 1245         {"+PWMSTART=", AppS2wCmd_PwmStart},
// 1246         {"+PWMSTOP=", AppS2wCmd_PwmStop},
// 1247         {"+PWMCNTRL=", AppS2wCmd_PwmCtrl},
// 1248 #endif
// 1249 
// 1250 #ifdef S2W_MEM_ACCESS
// 1251     {"+MEMREAD=", AppS2wCmd_MemRead},
// 1252     {"+MEMWRITE=", AppS2wCmd_MemWrite},
// 1253 
// 1254 #endif
// 1255     {"+LOGLVL=", AppS2wCmd_LogLevelSet},
// 1256 	{"+BCHKSTRT=",	AppS2wCmd_BattCheckStart},
// 1257 	{"+BATTVALGET", AppS2wCmd_BattValueGet},
// 1258 	{"+BCHK=",		AppS2wCmd_BattCheckSet},
// 1259 	{"+BCHKSTOP",	AppS2wCmd_BattCheckStop},
// 1260 	{"+BATTLVLSET=", AppS2wCmd_BattLvlSet},
// 1261 #ifdef S2W_ADC_SUPPORT        
// 1262 	{"+CLKTUNE=", App_ClkTuneCmd},
// 1263 #endif        
// 1264 #ifdef S2W_COAP_SUPPORT
// 1265     {"+COAPOPEN=", AppS2wCmd_CoapOpen},
// 1266     {"+COAPSENDRECIEVE=", AppS2wCmd_CoapSend},
// 1267     {"+COAPCLOSE=", AppS2wCmd_CoapClose},
// 1268     {"+COAPOPTCONF=", AppS2wCmd_CoapSetOption},
// 1269     {"+COAPOPTCONFDEL=", AppS2wCmd_CoapRemoveOption},
// 1270 #endif
// 1271 	{"+WBACKEN=",AppS2wCmd_BaBitMapSet},
// 1272 
// 1273 	{"+WRADIOSTATE=",AppS2wCmd_RadioStateGet},
// 1274 #ifdef S2W_15DOT4_SUPPORT
// 1275     {"+ZSC=",AppS2wCmd_ZipScan},
// 1276     {"+ZST=",AppS2wCmd_ZipStart},
// 1277     {"+ZSP=",AppS2wCmd_ZipStop},
// 1278     {"+ZMS=",AppS2wCmd_ZipSetMacAddr},
// 1279 #endif    
// 1280 
// 1281 #ifdef GSN_MEM_TRACE
// 1282     {"+MEMTRACE", AppS2wCmd_memTraceGet},
// 1283 #endif    
// 1284 #if defined(S2W_FS_SPI_ENABLE) || defined(S2W_FS_SPI_HI_ENABLE)
// 1285     {"+SPICONF=", AppS2wCmd_SpiConfig},
// 1286 #endif /* S2W_FS_SPI_ENABLE */
// 1287 #ifdef S2W_FTC
// 1288 	{"+FTCSDADC", AppS2wCmd_FtcSdAdc},
// 1289 	{"+FTCSARADC", AppS2wCmd_FtcSarAdc},
// 1290 	{"+FTCEXFLID", AppS2wCmd_FtcExtFlashID},	
// 1291 	{"+RFTCEXFLID", AppS2wCmd_rftcExtFlashID},
// 1292 	{"+RFTCSARADC" , AppS2wCmd_rFtcSarAdc},
// 1293 	{"+RFTCSDADC"   ,AppS2wCmd_rFtcSdAdc},
// 1294 #endif
// 1295     {"+WASSOCCONF=",AppS2wCmd_SetAssocTimeout},
// 1296     {"+TEMPVALGET=", AppS2wCmd_TempGet},
// 1297     {"+WTEMPREAD=", AppS2wCmd_TempReadStart},
// 1298     {"+CRYPTOEN=", AppS2wCmd_HwCryptoEn},
// 1299     {"+GRATARP", AppS2wCmd_GratArpSend}
// 1300 };
// 1301 
// 1302 /**
// 1303  ******************************************************************
// 1304  * @ingroup S2w-Application
// 1305  * @brief Process the AT+PSDPSLEEP command
// 1306  * @param ptr Pointer to the user input string.
// 1307  * @return status.
// 1308  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock11 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
        THUMB
// 1309 PUBLIC UINT8
// 1310 AppS2wCmd_PowerSaveDpsleep(UINT8 *ptr)
// 1311 {
AppS2wCmd_PowerSaveDpsleep:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+16
          CFI CFA R13+24
// 1312     UINT32 timeout = 0;
        MOVS     R0,#+0
        STR      R0,[SP, #+8]
// 1313     S2W_ALARM_INFO_T alarm;
// 1314     UINT8 status;
// 1315     UINT8 *p, pwrMeasure = 0;
        STRB     R0,[SP, #+4]
// 1316     memset(&alarm,0,sizeof(alarm));
        BL       ?Subroutine9
// 1317     if (*ptr)
??CrossCallReturnLabel_14:
        LDR      R0,[SP, #+16]
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_0
// 1318     {
// 1319         if(ptr[0] == '=')
        CMP      R0,#+61
        BNE.N    ??AppS2wCmd_PowerSaveDpsleep_1
// 1320         {
// 1321             ptr++;
        LDR      R0,[SP, #+16]
        ADDS     R0,R0,#+1
        STR      R0,[SP, #+16]
// 1322             p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine30
// 1323             if (p)
??CrossCallReturnLabel_99:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
// 1324             {
// 1325                 if (*p != '\0')
        BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_2
// 1326                 {
// 1327                     status = AppS2wParse_Int(p, &timeout);
        BL       ?Subroutine50
// 1328                     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_262:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
// 1329                     {
// 1330                         return status;
// 1331                     }
// 1332                 }
// 1333             }
// 1334             p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_PowerSaveDpsleep_2:
        BL       ?Subroutine30
// 1335             if (p)
??CrossCallReturnLabel_98:
        CBZ.N    R0,??AppS2wCmd_PowerSaveDpsleep_0
// 1336             {
// 1337                 if (*p != '\0')
        LDRB     R1,[R0, #+0]
        CBZ.N    R1,??AppS2wCmd_PowerSaveDpsleep_4
// 1338                 {
// 1339                     status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
        BL       ?Subroutine59
// 1340                     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_369:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
// 1341                     {
// 1342                         return status;
// 1343                     }
// 1344                     alarm.alarm1Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+0]
// 1345                 }
// 1346                 p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_PowerSaveDpsleep_4:
        BL       ?Subroutine30
// 1347                 if (p)
??CrossCallReturnLabel_97:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
// 1348                 {
// 1349                     if (*p != '\0')
        BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_5
// 1350                     {
// 1351                         status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
        BL       ?Subroutine61
// 1352                         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_388:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveDpsleep_3
// 1353                         {
// 1354                             return status;
// 1355                         }
// 1356                         alarm.alarm2Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+2]
// 1357                     }
// 1358                 }
// 1359                 p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_PowerSaveDpsleep_5:
        BL       ?Subroutine30
// 1360                 if (p)
??CrossCallReturnLabel_96:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
// 1361                 {
// 1362                     if (*p != '\0')
        BEQ.N    ??AppS2wCmd_PowerSaveDpsleep_0
// 1363                     {
// 1364                         status = AppS2wParse_Boolean(p, &pwrMeasure);
        BL       ?Subroutine62
// 1365                         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_393:
        CBZ.N    R0,??AppS2wCmd_PowerSaveDpsleep_0
// 1366                         {
// 1367                             return status;
        B.N      ??AppS2wCmd_PowerSaveDpsleep_3
// 1368                         }
// 1369                     }
// 1370                 }
// 1371             }
// 1372         }
// 1373     else
// 1374         {
// 1375        return S2W_EINVAL;
??AppS2wCmd_PowerSaveDpsleep_1:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_PowerSaveDpsleep_3
// 1376         }
// 1377     }
// 1378 
// 1379     return AppS2wHal_PsDpSleepStart(timeout, &alarm, pwrMeasure);
??AppS2wCmd_PowerSaveDpsleep_0:
        LDRB     R2,[SP, #+4]
        LDR      R0,[SP, #+8]
        ADD      R1,SP,#+0
          CFI FunCall AppS2wHal_PsDpSleepStart
        BL       AppS2wHal_PsDpSleepStart
??AppS2wCmd_PowerSaveDpsleep_3:
        ADD      SP,SP,#+20
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock11
// 1380 }
// 1381 
// 1382 #ifdef S2W_HTTPC_SUPPORT
// 1383 
// 1384 void
// 1385 AppS2w_HttpRxBufferMgmtCb(GSN_HTTPC_CONN_HANDLE conHandle,
// 1386                      INT8 *httpRxDataBuf,
// 1387                      INT32 httpRxDataLen,
// 1388                      INT32* rxBufferMgmtstatus);
// 1389 GSN_HTTPC_CONF_INFO_T httpConfInfo;
// 1390 INT8 *headerValues[S2W_HTTPC_MAX_HDR_SUPPORTED];
// 1391 GSN_HTTP_USER_HEADER_TYPE_T headerTypes[S2W_HTTPC_MAX_HDR_SUPPORTED];
// 1392 GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[S2W_HTTPC_MAX_HDR_SUPPORTED];
// 1393 UINT8 httpConfAtCmd=0;
// 1394 
// 1395 
// 1396 /**
// 1397  ******************************************************************
// 1398  * @ingroup S2w-Application
// 1399  * @brief Process AT+HTTPOPEN command
// 1400  *   This function open a new http client connection.
// 1401  * @param ptr Pointer to the user input string.
// 1402  *
// 1403  * @return S2W_SUCCESS - operation successful.
// 1404  * @return S2W_FAILURE - operation Failed.
// 1405  * @return S2W_EINVAL - operation Failed-invalid input
// 1406  ******************************************************************/
// 1407 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1408 
// 1409 extern S2W_SSL_CONF_T s2wSslConf;
// 1410 #endif

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock12 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
        THUMB
// 1411  UINT8
// 1412 AppS2wCmd_HttpClientOpen(UINT8 *ptr)
// 1413 {
AppS2wCmd_HttpClientOpen:
        PUSH     {R0,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        SUB      SP,SP,#+24
          CFI CFA R13+64
// 1414     S2W_HTTP_DATA_T *pHttpData;
// 1415     UINT8 *p, i=0, status = S2W_EINVAL, /*ret,*/ endParam = 0, *tmp = NULL;
// 1416     UINT32 cid = -1, httpType, portNumber,len;
        MOV      R0,#-1
        STR      R0,[SP, #+8]
        MOVS     R6,#+0
        MOVS     R4,#+2
        MOV      R9,R6
// 1417     INT32 certID;
// 1418     ULONG hostIpAddress;
// 1419     pHttpData = gsn_malloc(sizeof(S2W_HTTP_DATA_T));
        MOVS     R2,#+0
        MOVW     R1,#+1419
        MOVS     R0,#+104
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOVS     R8,R0
// 1420     if(NULL == pHttpData)
        BEQ.N    ??AppS2wCmd_HttpClientOpen_0
// 1421     {
// 1422         return S2W_FAILURE;
// 1423     }
// 1424     memset(pHttpData,0,sizeof(S2W_HTTP_DATA_T));
        MOVS     R2,#+104
        BL       ??Subroutine18_0
// 1425     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_37:
        BL       ?Subroutine33
??CrossCallReturnLabel_135:
        MOVS     R7,R0
// 1426 
// 1427     if (!p)
        LDR.W    R5,??DataTable378
        BEQ.W    ??AppS2wCmd_HttpClientOpen_1
// 1428     {
// 1429         status = S2W_EINVAL;
// 1430         goto AppS2wCmd_HttpClientOpenExit;
// 1431     }
// 1432     len = strlen((const char *)p);
          CFI FunCall strlen
        BL       strlen
// 1433     tmp = gsn_malloc(len+1);
        MOVS     R2,#+0
        MOVW     R1,#+1433
        BL       ?Subroutine26
??CrossCallReturnLabel_69:
        MOVS     R9,R0
// 1434     if(NULL != tmp)
        ITT      NE 
        MOVNE    R1,R7
          CFI FunCall strcpy
        BLNE     strcpy
// 1435     {
// 1436         strcpy((char *)tmp, (char *)p);
// 1437     }
// 1438     if(inet_pton(AF_INET, (char const*)p, &pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr) == 1)
        ADD      R11,R8,#+8
        ADD      R2,R8,#+20
        MOV      R1,R7
        BL       ??Subroutine71_0
??CrossCallReturnLabel_427:
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_HttpClientOpen_2
// 1439     {
// 1440         pHttpData->sockAddr.addr.ipv4.sin_family = AF_INET;
// 1441     }
// 1442     else if(inet_pton(AF_INET6, (char const*)p, pHttpData->sockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
        ADD      R2,R8,#+24
        MOV      R1,R7
        BL       ??Subroutine72_0
??CrossCallReturnLabel_430:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_HttpClientOpen_3
// 1443     {
// 1444     	pHttpData->sockAddr.addr.ipv6.sin6_family = AF_INET6;
        MOVS     R0,#+3
        STRH     R0,[R11, #+8]
        B.N      ??AppS2wCmd_HttpClientOpen_4
// 1445     }
// 1446     else
// 1447     {
// 1448  	   /*Dns look up */
// 1449 		status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx, (UINT8*)p,\ 
// 1450 										 &hostIpAddress, 5);
??AppS2wCmd_HttpClientOpen_3:
        MOVS     R3,#+5
        BL       ?Subroutine75
??CrossCallReturnLabel_441:
        ADD      R2,SP,#+4
        MOV      R1,R7
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_DnsHostByNameGet
        BL       GsnNwIf_DnsHostByNameGet
// 1451 		pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr = ntohl(hostIpAddress);
        LDR      R0,[SP, #+4]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R0,R1,R0, LSR #+24
        LDR      R1,[SP, #+4]
        AND      R1,R1,#0xFF00
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[SP, #+4]
        ORR      R0,R0,R1, LSL #+24
        STR      R0,[R11, #+12]
// 1452 		if (hostIpAddress == 0)
        LDR      R1,[SP, #+4]
        CMP      R1,#+0
??AppS2wCmd_HttpClientOpen_0:
        BEQ.W    ??AppS2wCmd_HttpClientOpen_5
// 1453 			return S2W_FAILURE;
// 1454 		
// 1455         /* Send IP address back to host */
// 1456 		S2w_Printf("\r\nIP:%d.%d.%d.%d",(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x000000ff),
// 1457 										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x0000ff00)>>8,
// 1458 										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0x00ff0000)>>16,
// 1459 										(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr & 0xff000000)>>24);		
        LSRS     R1,R0,#+24
        STR      R1,[SP, #+0]
        UBFX     R3,R0,#+16,#+8
        UBFX     R2,R0,#+8,#+8
        UXTB     R1,R0
        ADR.W    R0,`?<Constant "\\r\\nIP:%d.%d.%d.%d">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 1460 		pHttpData->sockAddr.addr.ipv4.sin_family = AF_INET;
??AppS2wCmd_HttpClientOpen_2:
        STRH     R4,[R11, #+8]
// 1461     }
// 1462     /* port Number */
// 1463     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_HttpClientOpen_4:
        BL       ?Subroutine33
// 1464     if (!p)
??CrossCallReturnLabel_134:
        LDR.W    R4,??DataTable378_1
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientOpen_6
// 1465     {
// 1466         endParam = 1;
// 1467     }
// 1468     else
// 1469     {
// 1470         AppS2wParse_Int(p, &portNumber);
        BL       ?Subroutine53
// 1471         pHttpData->sockAddr.ss_port = portNumber;
??CrossCallReturnLabel_341:
        LDR      R0,[SP, #+12]
        STRH     R0,[R11, #+10]
// 1472 
// 1473     }
// 1474 
// 1475     /* security */
// 1476     if(!endParam)
// 1477     {
// 1478         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 1479         if (!p)
??CrossCallReturnLabel_133:
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_6
// 1480         {
// 1481             endParam = 1;
// 1482         }
// 1483         else
// 1484         {
// 1485             AppS2wParse_Int(p, &httpType);
        BL       ?Subroutine54
// 1486             pHttpData->httpType = (GSN_HTTP_TYPE_T)httpType;
??CrossCallReturnLabel_349:
        LDR      R0,[SP, #+16]
        STRB     R0,[R11, #+4]
// 1487         }
// 1488     }
// 1489 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1490     /* certificate name */
// 1491     if(!endParam)
// 1492     {
// 1493         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
??CrossCallReturnLabel_132:
        MOVS     R7,R0
// 1494         if (!p)
        BEQ.N    ??AppS2wCmd_HttpClientOpen_6
// 1495         {
// 1496             endParam = 1;
// 1497         }
// 1498         else
// 1499         {
// 1500             if(0 != strlen((const INT8 *)p))
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_7
// 1501             {
// 1502 //				certID = S2wCert_Get((INT8 *)p);
// 1503         		certID = S2wCert_SearchRamTable((INT8*)p);
        MOV      R0,R7
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
// 1504 		        if(certID == -1)
        CMN      R0,#+1
        ITT      EQ 
        MOVEQ    R0,R7
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 1505         		{
// 1506         			certID = S2wCert_FlashFileLoad((INT8*)p);
// 1507         		}
// 1508 
// 1509                 if(certID != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_HttpClientOpen_8
// 1510                 {
// 1511                     pHttpData->caCertLen = *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
        BL       ?Subroutine88
??CrossCallReturnLabel_475:
        STRH     R1,[R8, #+6]
// 1512                     pHttpData->pCaCert = s2w_ssl_cert_table[certID].certAddress + 2;
        LDR      R0,[R0, R4]
        ADDS     R0,R0,#+2
        STR      R0,[R8, #+8]
// 1513                 }
// 1514                 else
// 1515                 {
// 1516                     S2w_Printf("\n\rCA certificate not found");
// 1517                     status = S2W_FAILURE;
// 1518                     goto AppS2wCmd_HttpClientOpenExit;
// 1519                 }
// 1520             }
// 1521         }
// 1522     }
// 1523 #endif
// 1524     /* proxy server */
// 1525     if(!endParam)
// 1526     {
// 1527         UINT32 proxy = 0;
??AppS2wCmd_HttpClientOpen_7:
        STR      R6,[SP, #+0]
// 1528         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 1529         if (!p)
??CrossCallReturnLabel_131:
        CBNZ.N   R0,??AppS2wCmd_HttpClientOpen_9
// 1530         {
// 1531             endParam = 1;
??AppS2wCmd_HttpClientOpen_6:
        MOVS     R6,#+1
        B.N      ??AppS2wCmd_HttpClientOpen_10
// 1532         }
??AppS2wCmd_HttpClientOpen_8:
        ADR.W    R0,`?<Constant "\\n\\rCA certificate not ...">`
??AppS2wCmd_HttpClientOpen_11:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        MOVS     R4,#+1
// 1533         else
// 1534         {
// 1535             AppS2wParse_Int(p, &proxy);
// 1536             pHttpData->proxyServer = proxy;
// 1537         }
// 1538     }
// 1539 	pHttpData->connTimeOut=25;
// 1540     if(!endParam)
// 1541     {
// 1542         UINT32 connTimeout = 0;
// 1543         p = AppS2wParse_NextParamGet(&ptr);
// 1544         if (!p)
// 1545         {
// 1546             endParam = 1;
// 1547         }
// 1548         else
// 1549         {
// 1550             AppS2wParse_Int(p, &connTimeout);
// 1551 			if(connTimeout != 0)
// 1552 	            pHttpData->connTimeOut = connTimeout;
// 1553         }
// 1554     }
// 1555 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1556     if(!endParam)
// 1557     {
// 1558         p = AppS2wParse_NextParamGet(&ptr);
// 1559         if (!p)
// 1560         {
// 1561             endParam = 1;
// 1562         }
// 1563         else
// 1564         {
// 1565             if(0 != strlen((const INT8 *)p))
// 1566             {
// 1567                 //certID = S2wCert_Get((INT8 *)p);
// 1568         		certID = S2wCert_SearchRamTable((INT8*)p);
// 1569         		if(certID == -1)
// 1570         		{
// 1571         			certID = S2wCert_FlashFileLoad((INT8*)p);
// 1572         		}
// 1573                 if(certID != -1)
// 1574                 {
// 1575                     pHttpData->clientCertLen= *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
// 1576                     pHttpData->pClientCert= s2w_ssl_cert_table[certID].certAddress + 2;
// 1577                 }
// 1578                 else
// 1579                 {
// 1580                     S2w_Printf("\n\r client certificate not found");
// 1581                     status = S2W_FAILURE;
// 1582                     goto AppS2wCmd_HttpClientOpenExit;
// 1583                 }
// 1584             }
// 1585         }
// 1586     }
// 1587 
// 1588     if(!endParam)
// 1589     {
// 1590         p = AppS2wParse_NextParamGet(&ptr);
// 1591         if (!p)
// 1592         {
// 1593             endParam = 1;
// 1594         }
// 1595         else
// 1596         {
// 1597             if(0 != strlen((const INT8 *)p))
// 1598             {
// 1599                 //certID = S2wCert_Get((INT8 *)p);
// 1600         		certID = S2wCert_SearchRamTable((INT8*)p);
// 1601         		if(certID == -1)
// 1602 		        {
// 1603         			certID = S2wCert_FlashFileLoad((INT8*)p);
// 1604         		}
// 1605         		if(certID != -1)
// 1606                 {
// 1607                     pHttpData->clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[certID].certAddress;
// 1608                     pHttpData->pClientKey = s2w_ssl_cert_table[certID].certAddress + 2;
// 1609                 }
// 1610                 
// 1611                 else
// 1612                 {
// 1613                     S2w_Printf("\n\rclient Key not found");
// 1614                     status = S2W_FAILURE;
// 1615                     goto AppS2wCmd_HttpClientOpenExit;
// 1616                 }
// 1617             }
// 1618         }
// 1619     }
// 1620 #endif
// 1621     // check the default paramters are configured
// 1622     if((httpConfAtCmd != 1) &&(!httpConfInfo.reqHeaderCount))
// 1623     {
// 1624         memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
// 1625         memset(&headerValues[0], 0, sizeof(headerValues));
// 1626         httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
// 1627         httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
// 1628         httpConfInfo.reqHeaderValues = headerValues;
// 1629         httpConfInfo.reqHeaderCount = 0;
// 1630 
// 1631         // configure the header
// 1632 #if defined(S2W_DFLT_HTTPC_AUTH) || defined(S2W_DFLT_HTTPC_HOST_IP)					
// 1633         INT8 *pValue;
// 1634         UINT32 len;
// 1635 #endif		
// 1636 #ifdef S2W_DFLT_HTTPC_AUTH					
// 1637         len= sizeof(S2W_DFLT_HTTPC_AUTH);
// 1638         pValue = gsn_malloc(len+1);
// 1639         if(pValue == NULL)
// 1640         {
// 1641             return S2W_FAILURE;
// 1642         }
// 1643         memset(pValue, 0 , len+1);
// 1644         memcpy(pValue, S2W_DFLT_HTTPC_AUTH, len);
// 1645         pValue[len] = '\0';
// 1646         headerValues[i] = pValue;
// 1647 	    headerTypes[i++] = GSN_HTTP_HEADER_AUTHORIZATION;
// 1648         httpConfInfo.reqHeaderCount +=1;
// 1649 #endif
// 1650 
// 1651 #ifdef S2W_DFLT_HTTPC_HOST_IP			
// 1652         len= sizeof(S2W_DFLT_HTTPC_HOST_IP);
// 1653         pValue = gsn_malloc(len+1);
// 1654         if(pValue == NULL)
// 1655         {
// 1656             return S2W_FAILURE;
// 1657         }
// 1658         memset(pValue, 0 , len+1);
// 1659         memcpy(pValue, (UINT8*)S2W_DFLT_HTTPC_HOST_IP, len);
// 1660         pValue[len] = '\0';
// 1661         headerValues[i] = pValue;
// 1662 	    headerTypes[i++] = (GSN_HTTP_USER_HEADER_TYPE_T)(GSN_HTTP_HEADER_HOST);
// 1663         httpConfInfo.reqHeaderCount +=1;
// 1664 #endif		
// 1665  	}
// 1666 	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
// 1667 	compiled with header type array being defined as array of UINT8 */
// 1668 	{
// 1669 		
// 1670 		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
// 1671         {
// 1672         	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)GSN_HTTP_HEADER_CUSTOM)
// 1673 			{
// 1674 				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)GSN_HTTP_HEADER_CUSTOM;
// 1675 			}
// 1676 			else
// 1677 			{
// 1678         		headerTypesModified[i] = headerTypes[i];
// 1679 			}
// 1680         }
// 1681 	}
// 1682     status = AppS2wHal_HttpOpen(pHttpData, &cid);
// 1683 
// 1684 AppS2wCmd_HttpClientOpenExit:
// 1685     if(status == S2W_SUCCESS)
// 1686     {
// 1687         S2w_Printf("\n\r%x", cid);
// 1688 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1689         if((NULL != tmp) && (GSN_HTTPS == pHttpData->httpType) && (NULL != s2wSslConf.dnsNameBuf))
// 1690         {
// 1691             status = AppS2wHal_HttpCheckDns(tmp);
// 1692         }
// 1693 #endif		
// 1694         if(NULL != tmp)
// 1695         {
// 1696             gsn_free(tmp);
// 1697             tmp = NULL;
// 1698         }
// 1699 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1700         if(NULL != s2wSslConf.dnsNameBuf)
// 1701         {
// 1702         	gsn_free(s2wSslConf.dnsNameBuf);
// 1703         	s2wSslConf.dnsNameBuf = NULL;
// 1704         	s2wSslConf.dnsBufferLen = 0;
// 1705         }
// 1706 #endif		
// 1707         return S2W_SUCCESS;
// 1708     }
// 1709     else
// 1710     {
// 1711         if(NULL != pHttpData)
// 1712             gsn_free(pHttpData);
??AppS2wCmd_HttpClientOpen_1:
        MOV      R0,R8
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 1713         if(NULL != tmp)
        CMP      R9,#+0
        ITT      NE 
        MOVNE    R0,R9
          CFI FunCall GsnDynMemMgmt_Free
        BLNE     GsnDynMemMgmt_Free
// 1714         {
// 1715             gsn_free(tmp);
// 1716             tmp = NULL;
// 1717         }
// 1718 #if defined(S2W_SSL_CLIENT_SUPPORT)
// 1719         if(NULL != s2wSslConf.dnsNameBuf)
        LDR      R0,[R5, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_12
// 1720         {
// 1721         	gsn_free(s2wSslConf.dnsNameBuf);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 1722         	s2wSslConf.dnsNameBuf = NULL;
        MOVS     R0,#+0
        STR      R0,[R5, #+4]
// 1723         	s2wSslConf.dnsBufferLen = 0;
        STR      R0,[R5, #+0]
// 1724         }
// 1725 #endif		
// 1726         return status;
??AppS2wCmd_HttpClientOpen_12:
        MOV      R0,R4
??AppS2wCmd_HttpClientOpen_13:
        ADD      SP,SP,#+28
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI CFA R13+64
// 1727     }
??AppS2wCmd_HttpClientOpen_9:
        BL       ?Subroutine51
??CrossCallReturnLabel_313:
        LDR      R0,[SP, #+0]
        STRB     R0,[R8, #+44]
??AppS2wCmd_HttpClientOpen_10:
        ADD      R7,R8,#+44
        MOVS     R0,#+25
        STR      R0,[R7, #+32]
        CMP      R6,#+0
        BNE.N    ??AppS2wCmd_HttpClientOpen_14
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        BL       ?Subroutine33
??CrossCallReturnLabel_130:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientOpen_14
        BL       ?Subroutine51
??CrossCallReturnLabel_312:
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_15
        STR      R0,[R7, #+32]
??AppS2wCmd_HttpClientOpen_15:
        BL       ?Subroutine33
??CrossCallReturnLabel_129:
        MOVS     R6,R0
        BEQ.N    ??AppS2wCmd_HttpClientOpen_14
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_16
        MOV      R0,R6
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
        CMN      R0,#+1
        ITT      EQ 
        MOVEQ    R0,R6
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_HttpClientOpen_17
        BL       ?Subroutine88
??CrossCallReturnLabel_476:
        STRH     R1,[R7, #+36]
        LDR      R0,[R0, R4]
        ADDS     R0,R0,#+2
        STR      R0,[R7, #+40]
??AppS2wCmd_HttpClientOpen_16:
        BL       ?Subroutine33
??CrossCallReturnLabel_128:
        MOVS     R6,R0
        BEQ.N    ??AppS2wCmd_HttpClientOpen_14
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_14
        MOV      R0,R6
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
        CMN      R0,#+1
        ITT      EQ 
        MOVEQ    R0,R6
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_HttpClientOpen_18
        BL       ?Subroutine88
??CrossCallReturnLabel_477:
        STRH     R1,[R7, #+44]
        LDR      R0,[R0, R4]
        ADDS     R0,R0,#+2
        STR      R0,[R7, #+48]
??AppS2wCmd_HttpClientOpen_14:
        LDR.W    R6,??DataTable378_2
        LDR.W    R4,??DataTable378_3
        LDRB     R0,[R6, #+0]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_HttpClientOpen_19
        LDR.W    R7,??DataTable378_4
        ADD      R10,R7,#+100
        LDR      R0,[R10, #+16]
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_HttpClientOpen_19
        MOVS     R2,#+100
        MOVS     R1,#+0
        LDR.W    R0,??DataTable378_5
          CFI FunCall memset
        BL       memset
        MOVS     R2,#+100
        MOVS     R1,#+0
        ADDS     R0,R6,#+4
          CFI FunCall memset
        BL       memset
        MOVS     R0,#+3
        STRB     R0,[R7, #+100]
        STR      R4,[R10, #+8]
        ADDS     R0,R6,#+4
        STR      R0,[R10, #+12]
        MOVS     R2,#+0
        MOVS     R0,#+0
        STR      R0,[R10, #+16]
        MOVW     R1,#+1653
        MOVS     R0,#+15
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOVS     R7,R0
        BNE.N    ??AppS2wCmd_HttpClientOpen_20
??AppS2wCmd_HttpClientOpen_5:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_HttpClientOpen_13
??AppS2wCmd_HttpClientOpen_17:
        ADR.W    R0,`?<Constant "\\n\\r client certificate...">`
        B.N      ??AppS2wCmd_HttpClientOpen_11
??AppS2wCmd_HttpClientOpen_18:
        ADR.W    R0,`?<Constant "\\n\\rclient Key not found">`
        B.N      ??AppS2wCmd_HttpClientOpen_11
??AppS2wCmd_HttpClientOpen_20:
        MOVS     R2,#+15
        BL       ??Subroutine18_0
??CrossCallReturnLabel_36:
        BL       ?Subroutine96
??CrossCallReturnLabel_506:
        MOVS     R0,#+0
        STRB     R0,[R7, #+14]
        STR      R7,[R6, #+4]
        MOVS     R1,#+13
        LDR.W    R0,??DataTable378_5
        STR      R1,[R0, #+0]
        LDR      R0,[R10, #+16]
        ADDS     R0,R0,#+1
        STR      R0,[R10, #+16]
??AppS2wCmd_HttpClientOpen_19:
        MOVS     R0,#+0
??AppS2wCmd_HttpClientOpen_21:
        LDR.W    R1,??DataTable378_5
        LDR      R1,[R1, R0, LSL #+2]
        CMP      R1,#+255
        IT       CS 
        MOVCS    R1,#+255
        STR      R1,[R4, R0, LSL #+2]
        ADDS     R0,R0,#+1
        CMP      R0,#+25
        BCC.N    ??AppS2wCmd_HttpClientOpen_21
        ADD      R1,SP,#+8
        MOV      R0,R8
          CFI FunCall AppS2wHal_HttpOpen
        BL       AppS2wHal_HttpOpen
        MOVS     R4,R0
        BNE.W    ??AppS2wCmd_HttpClientOpen_1
        LDR      R1,[SP, #+8]
        ADR.W    R0,`?<Constant "\\n\\r%x">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        CMP      R9,#+0
        BEQ.N    ??AppS2wCmd_HttpClientOpen_22
        LDRB     R0,[R11, #+4]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_HttpClientOpen_23
        LDR      R0,[R5, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_23
        MOV      R0,R9
          CFI FunCall AppS2wHal_HttpCheckDns
        BL       AppS2wHal_HttpCheckDns
??AppS2wCmd_HttpClientOpen_23:
        MOV      R0,R9
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_HttpClientOpen_22:
        LDR      R0,[R5, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientOpen_24
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
        MOVS     R0,#+0
        STR      R0,[R5, #+4]
        STR      R0,[R5, #+0]
??AppS2wCmd_HttpClientOpen_24:
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_HttpClientOpen_13
          CFI EndBlock cfiBlock12
// 1728 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nIP:%d.%d.%d.%d">`:
        DC8 "\015\012IP:%d.%d.%d.%d"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rCA certificate not ...">`:
        DC8 "\012\015CA certificate not found"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\r client certificate...">`:
        DC8 "\012\015 client certificate not found"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rclient Key not found">`:
        DC8 "\012\015client Key not found"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\r%x">`:
        DC8 "\012\015%x"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond13 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_475
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond14 Using cfiCommon0
          CFI (cfiCond14) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond14) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiCond14) Conditional ??CrossCallReturnLabel_476
          CFI (cfiCond14) R4 Frame(CFA, -36)
          CFI (cfiCond14) R5 Frame(CFA, -32)
          CFI (cfiCond14) R6 Frame(CFA, -28)
          CFI (cfiCond14) R7 Frame(CFA, -24)
          CFI (cfiCond14) R8 Frame(CFA, -20)
          CFI (cfiCond14) R9 Frame(CFA, -16)
          CFI (cfiCond14) R10 Frame(CFA, -12)
          CFI (cfiCond14) R11 Frame(CFA, -8)
          CFI (cfiCond14) R14 Frame(CFA, -4)
          CFI (cfiCond14) CFA R13+64
          CFI Block cfiCond15 Using cfiCommon0
          CFI (cfiCond15) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond15) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiCond15) Conditional ??CrossCallReturnLabel_477
          CFI (cfiCond15) R4 Frame(CFA, -36)
          CFI (cfiCond15) R5 Frame(CFA, -32)
          CFI (cfiCond15) R6 Frame(CFA, -28)
          CFI (cfiCond15) R7 Frame(CFA, -24)
          CFI (cfiCond15) R8 Frame(CFA, -20)
          CFI (cfiCond15) R9 Frame(CFA, -16)
          CFI (cfiCond15) R10 Frame(CFA, -12)
          CFI (cfiCond15) R11 Frame(CFA, -8)
          CFI (cfiCond15) R14 Frame(CFA, -4)
          CFI (cfiCond15) CFA R13+64
          CFI Block cfiPicker16 Using cfiCommon1
          CFI (cfiPicker16) NoFunction
          CFI (cfiPicker16) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiPicker16) Picker
        THUMB
?Subroutine88:
        MOVS     R1,#+12
        MULS     R0,R1,R0
        LDR      R1,[R0, R4]
        LDRH     R1,[R1, #+0]
        BX       LR
          CFI EndBlock cfiCond13
          CFI EndBlock cfiCond14
          CFI EndBlock cfiCond15
          CFI EndBlock cfiPicker16
// 1729 
// 1730 
// 1731 /**
// 1732  ******************************************************************
// 1733  * @ingroup S2w-Application
// 1734  * @brief Process AT+HTTPCLOSE command
// 1735  *   This function close the http connection opened.
// 1736  * @param ptr Pointer to the user input string.
// 1737  *
// 1738  * @return S2W_SUCCESS - operation successful.
// 1739  * @return S2W_FAILURE - operation Failed.
// 1740  * @return S2W_EINVAL - operation Failed-invalid input
// 1741  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock17 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientClose
        THUMB
// 1742  UINT8
// 1743 AppS2wCmd_HttpClientClose(UINT8 *ptr)
// 1744 {
AppS2wCmd_HttpClientClose:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+4
          CFI CFA R13+16
// 1745     UINT8 status;
// 1746     UINT8 *p ;
// 1747     UINT32 cid;
// 1748 
// 1749     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
??CrossCallReturnLabel_177:
        MOVS     R4,R0
// 1750     if (!p)
        BNE.N    ??AppS2wCmd_HttpClientClose_0
// 1751     {
// 1752         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,R2,R4,PC}
// 1753     }
// 1754     else
// 1755     {
// 1756         if(AppS2w_CidValidate(*p) == INVALID_CID)
??AppS2wCmd_HttpClientClose_0:
        LDRB     R0,[R4, #+0]
          CFI FunCall AppS2w_CidValidate
        BL       AppS2w_CidValidate
        CMP      R0,#+255
        BNE.N    ??AppS2wCmd_HttpClientClose_1
// 1757             return S2W_EBADCID;
        MOVS     R0,#+5
        POP      {R1,R2,R4,PC}
// 1758         status = AppS2wParse_Hex(p, &cid);
??AppS2wCmd_HttpClientClose_1:
        ADD      R1,SP,#+0
        MOV      R0,R4
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
// 1759         if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_HttpClientClose_2
// 1760         {
// 1761         	return status;
// 1762         }
// 1763         return AppS2wHal_HttpClose(cid);
        LDR      R0,[SP, #+0]
          CFI FunCall AppS2wHal_HttpClose
        BL       AppS2wHal_HttpClose
??AppS2wCmd_HttpClientClose_2:
        POP      {R1,R2,R4,PC}    ;; return
          CFI EndBlock cfiBlock17
// 1764     }
// 1765 }
// 1766 
// 1767 /**
// 1768  ******************************************************************
// 1769  * @ingroup S2w-Application
// 1770  * @brief Process AT+HTTPCONF command
// 1771  *   This function configures the http client paramters.
// 1772  * @param ptr Pointer to the user input string.
// 1773  *
// 1774  * @return S2W_SUCCESS - operation successful.
// 1775  * @return S2W_FAILURE - operation Failed.
// 1776  * @return S2W_EINVAL - operation Failed-invalid input
// 1777  ******************************************************************/
// 1778 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock18 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientConfig
        THUMB
// 1779  UINT8
// 1780  AppS2wCmd_HttpClientConfig(UINT8 *ptr)
// 1781  {
AppS2wCmd_HttpClientConfig:
        PUSH     {R0,R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+36
// 1782      UINT32 param, len,Userparam/*, index = 0*/;
// 1783      static UINT8 initDone;
// 1784      UINT8 *p, i, newParam = 0;
// 1785      INT8 *pValue;
// 1786 
// 1787     if(!initDone)
        LDR.W    R5,??DataTable378_2
        LDR.W    R7,??DataTable378_4
        LDRB     R0,[R5, #+1]
        LDR.W    R8,??DataTable378_5
        SUB      SP,SP,#+4
          CFI CFA R13+40
        MOVS     R6,#+0
        ADD      R4,R7,#+100
        CBNZ.N   R0,??AppS2wCmd_HttpClientConfig_0
// 1788     {
// 1789         memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
        MOVS     R2,#+100
        BL       ??Subroutine141_0
// 1790         memset(&headerValues[0], 0, sizeof(headerValues));
??CrossCallReturnLabel_639:
        MOVS     R2,#+100
        MOV      R1,R6
        ADDS     R0,R5,#+4
          CFI FunCall memset
        BL       memset
// 1791         httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
        MOVS     R0,#+3
        STRB     R0,[R7, #+100]
// 1792         httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
// 1793         httpConfInfo.reqHeaderValues = headerValues;
// 1794         httpConfInfo.reqHeaderCount = 0;
        STR      R6,[R4, #+16]
        LDR.W    R0,??DataTable378_3
        STR      R0,[R4, #+8]
        ADDS     R0,R5,#+4
        STR      R0,[R4, #+12]
// 1795 
// 1796         initDone = 1;
        MOVS     R0,#+1
        STRB     R0,[R5, #+1]
// 1797     }
// 1798 
// 1799      p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_HttpClientConfig_0:
        BL       ?Subroutine35
// 1800      if (!p)
??CrossCallReturnLabel_176:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientConfig_1
// 1801      {
// 1802          return S2W_EINVAL;
// 1803      }
// 1804      AppS2wParse_Int(p, &param);
        BL       ?Subroutine51
// 1805 
// 1806 	 Userparam = param;
??CrossCallReturnLabel_311:
        LDR      R9,[SP, #+0]
// 1807 
// 1808      len = strlen((INT8 *)ptr);
        LDR      R0,[SP, #+4]
          CFI FunCall strlen
        BL       strlen
        MOVS     R7,R0
// 1809      if(len == 0)
        BEQ.N    ??AppS2wCmd_HttpClientConfig_1
// 1810      {
// 1811          return S2W_EINVAL;
// 1812      }
// 1813 	if((GSN_HTTP_USER_HEADER_TYPE_T)param >= GSN_HTTP_HEADER_DATE &&  Userparam < GSN_HTTP_HEADER_COUNT )
        LDR      R0,[SP, #+0]
        CMP      R0,#+10
        BCC.N    ??AppS2wCmd_HttpClientConfig_2
        CMP      R9,#+25
        ITT      CC 
        ADDCC    R0,R0,#+2
        STRCC    R0,[SP, #+0]
// 1814 	{
// 1815 	   param = param + 2;
// 1816 	}
// 1817 	if((GSN_HTTP_USER_HEADER_TYPE_T)param > GSN_HTTP_HEADER_SERVER &&  Userparam < GSN_HTTP_HEADER_COUNT)
??AppS2wCmd_HttpClientConfig_2:
        LDR      R0,[SP, #+0]
        CMP      R0,#+21
        BCC.N    ??AppS2wCmd_HttpClientConfig_3
        CMP      R9,#+25
        ITT      CC 
        ADDCC    R0,R0,#+1
        STRCC    R0,[SP, #+0]
// 1818 	{
// 1819 	   param = param + 1;
// 1820 	}
// 1821     if(param == S2W_HTTPC_CFG_PARAM_REQUEST_URL)
??AppS2wCmd_HttpClientConfig_3:
        LDR      R0,[SP, #+0]
        CMP      R0,#+26
        BNE.N    ??AppS2wCmd_HttpClientConfig_4
// 1822     {
// 1823         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
??CrossCallReturnLabel_175:
        MOVS     R6,R0
// 1824         if (!p)
        BEQ.N    ??AppS2wCmd_HttpClientConfig_1
// 1825         {
// 1826             return S2W_EINVAL;
// 1827         }
// 1828         len = strlen((const char *)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R7,R0
// 1829         if(NULL != httpConfInfo.reqPathPtr)
        LDR      R0,[R4, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientConfig_5
// 1830         {
// 1831             gsn_free(httpConfInfo.reqPathPtr);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 1832             httpConfInfo.reqPathPtr = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
// 1833         }
// 1834         httpConfInfo.reqPathPtr = gsn_malloc(len+1);
??AppS2wCmd_HttpClientConfig_5:
        MOVS     R2,#+0
        MOVW     R1,#+1834
        ADDS     R0,R7,#+1
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R4, #+4]
// 1835         if(NULL == httpConfInfo.reqPathPtr)
        CBZ.N    R0,??AppS2wCmd_HttpClientConfig_6
// 1836         {
// 1837             return S2W_FAILURE;
// 1838         }
// 1839         strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
        MOV      R2,R7
        MOV      R1,R6
          CFI FunCall strncpy
        BL       strncpy
// 1840         httpConfInfo.reqPathPtr[len] ='\0';
        LDR      R0,[R4, #+4]
        MOVS     R1,#+0
        STRB     R1,[R7, R0]
// 1841 
// 1842     }
// 1843     else if((param > S2W_HTTPC_CFG_PARAM_INV && param < S2W_HTTPC_CFG_PARAM_HEADER_COUNT1)
// 1844         || (param >= S2W_HTTPC_CFG_PARAM_HEADER_CUSTOM))
// 1845     {
// 1846         pValue = gsn_malloc(len+1);
// 1847 
// 1848         if(pValue == NULL)
// 1849         {
// 1850             return S2W_FAILURE;
// 1851         }
// 1852 
// 1853         memset(pValue, 0 , len+1);
// 1854         strncpy(pValue, (const INT8 *)ptr, len);
// 1855         pValue[len] = '\0';
// 1856 
// 1857         for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
// 1858         {
// 1859             if((headerValues[i] == NULL) || (headerTypes[i] == param))
// 1860             {
// 1861                 if(headerValues[i])
// 1862                 {
// 1863                  gsn_free(headerValues[i]);
// 1864                 }
// 1865                 else
// 1866                 {
// 1867                  newParam = 1;
// 1868                 }
// 1869                 break;
// 1870            }
// 1871        }
// 1872      if( i < S2W_HTTPC_MAX_HDR_SUPPORTED)
// 1873      {
// 1874 	     headerValues[i] = pValue;
// 1875 	     headerTypes[i] = (GSN_HTTP_USER_HEADER_TYPE_T)param;
// 1876      }
// 1877      if(newParam)
// 1878          httpConfInfo.reqHeaderCount++;
// 1879     }
// 1880     else
// 1881     {
// 1882         return S2W_EINVAL;
// 1883     }
// 1884      httpConfAtCmd =1;
??AppS2wCmd_HttpClientConfig_7:
        MOVS     R0,#+1
        STRB     R0,[R5, #+0]
// 1885      return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_HttpClientConfig_8:
        POP      {R1,R2,R4-R10,PC}  ;; return
??AppS2wCmd_HttpClientConfig_4:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientConfig_1
        SUBS     R0,R0,#+25
        CMP      R0,#+230
        BCC.N    ??AppS2wCmd_HttpClientConfig_1
        ADD      R10,R7,#+1
        MOVS     R2,#+0
        MOVW     R1,#+1846
        MOV      R0,R10
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOVS     R9,R0
        BNE.N    ??AppS2wCmd_HttpClientConfig_9
??AppS2wCmd_HttpClientConfig_6:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_HttpClientConfig_8
??AppS2wCmd_HttpClientConfig_9:
        MOV      R2,R10
        BL       ??Subroutine18_0
??CrossCallReturnLabel_35:
        LDR      R1,[SP, #+4]
        MOV      R2,R7
        MOV      R0,R9
          CFI FunCall strncpy
        BL       strncpy
        STRB     R6,[R7, R9]
        MOV      R7,R6
??AppS2wCmd_HttpClientConfig_10:
        ADD      R0,R5,R7, LSL #+2
        LDR      R0,[R0, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientConfig_11
        LDR      R1,[R8, R7, LSL #+2]
        LDR      R2,[SP, #+0]
        CMP      R1,R2
        BNE.N    ??AppS2wCmd_HttpClientConfig_12
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
        B.N      ??AppS2wCmd_HttpClientConfig_13
??AppS2wCmd_HttpClientConfig_11:
        MOVS     R6,#+1
        B.N      ??AppS2wCmd_HttpClientConfig_13
??AppS2wCmd_HttpClientConfig_12:
        ADDS     R0,R7,#+1
        UXTB     R7,R0
        CMP      R7,#+25
        BCC.N    ??AppS2wCmd_HttpClientConfig_10
??AppS2wCmd_HttpClientConfig_13:
        CMP      R7,#+25
        BCS.N    ??AppS2wCmd_HttpClientConfig_14
        ADD      R0,R5,R7, LSL #+2
        STR      R9,[R0, #+4]
        LDR      R0,[SP, #+0]
        STR      R0,[R8, R7, LSL #+2]
??AppS2wCmd_HttpClientConfig_14:
        CMP      R6,#+0
        BEQ.N    ??AppS2wCmd_HttpClientConfig_7
        LDR      R0,[R4, #+16]
        ADDS     R0,R0,#+1
        STR      R0,[R4, #+16]
        B.N      ??AppS2wCmd_HttpClientConfig_7
??AppS2wCmd_HttpClientConfig_1:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_HttpClientConfig_8
          CFI EndBlock cfiBlock18
// 1886 
// 1887  }
// 1888 /**
// 1889  ******************************************************************
// 1890  * @ingroup S2w-Application
// 1891  * @brief Process AT+HTTPCONFDEL command
// 1892  *   This function delete the particular http configuration
// 1893  * @param ptr Pointer to the user input string.
// 1894  *
// 1895  * @return S2W_SUCCESS - operation successful.
// 1896  * @return S2W_FAILURE - operation Failed.
// 1897  * @return S2W_EINVAL - operation Failed-invalid input
// 1898  ******************************************************************/
// 1899 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock19 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientConfigDel
        THUMB
// 1900  UINT8
// 1901 AppS2wCmd_HttpClientConfigDel(UINT8 *ptr)
// 1902 {
AppS2wCmd_HttpClientConfigDel:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+8
          CFI CFA R13+32
// 1903     UINT32 param, i;
// 1904     //static UINT8 initDone;
// 1905     UINT8 *p;
// 1906 
// 1907     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 1908     if (!p)
??CrossCallReturnLabel_156:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientConfigDel_0
// 1909     {
// 1910         return S2W_EINVAL;
// 1911     }
// 1912     AppS2wParse_Int(p, &param);
        BL       ?Subroutine51
// 1913 
// 1914 	if((GSN_HTTP_USER_HEADER_TYPE_T)param >= GSN_HTTP_HEADER_DATE)
??CrossCallReturnLabel_310:
        LDR      R0,[SP, #+0]
        CMP      R0,#+10
        ITT      CS 
        ADDCS    R0,R0,#+2
        STRCS    R0,[SP, #+0]
// 1915 	{
// 1916 	   param = param + 2;
// 1917 	}
// 1918 	if((GSN_HTTP_USER_HEADER_TYPE_T)param > GSN_HTTP_HEADER_SERVER)
        LDR      R0,[SP, #+0]
        CMP      R0,#+21
        ITT      CS 
        ADDCS    R0,R0,#+1
        STRCS    R0,[SP, #+0]
// 1919 	{
// 1920 	   param = param + 1;
// 1921 	}
// 1922     if(param == S2W_HTTPC_CFG_PARAM_REQUEST_URL)
        LDR      R0,[SP, #+0]
        LDR.W    R4,??DataTable378_4
        CMP      R0,#+26
        BNE.N    ??AppS2wCmd_HttpClientConfigDel_1
// 1923     {
// 1924         if(NULL != httpConfInfo.reqPathPtr)
        LDR      R0,[R4, #+104]
        CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_2
// 1925         {
// 1926             gsn_free(httpConfInfo.reqPathPtr);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 1927             httpConfInfo.reqPathPtr = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+104]
// 1928         }
// 1929         return S2W_SUCCESS;
??AppS2wCmd_HttpClientConfigDel_2:
        MOVS     R0,#+0
        POP      {R1-R7,PC}
// 1930     }
// 1931 
// 1932     if((param > S2W_HTTPC_CFG_PARAM_INV && param < S2W_HTTPC_CFG_PARAM_HEADER_COUNT1)
// 1933         || (param >= S2W_HTTPC_CFG_PARAM_HEADER_CUSTOM))
??AppS2wCmd_HttpClientConfigDel_1:
        CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_0
        SUBS     R0,R0,#+25
        CMP      R0,#+230
        BCC.N    ??AppS2wCmd_HttpClientConfigDel_0
// 1934     {/*delete Header Configuration*/
// 1935 
// 1936         for( i = 0; i < httpConfInfo.reqHeaderCount; i++)
        MOVS     R6,#+0
        LDR.W    R5,??DataTable378_5
        LDR.W    R7,??DataTable378_2
        B.N      ??AppS2wCmd_HttpClientConfigDel_3
??AppS2wCmd_HttpClientConfigDel_4:
        ADDS     R6,R6,#+1
??AppS2wCmd_HttpClientConfigDel_3:
        LDR      R0,[R4, #+116]
        CMP      R6,R0
        BCS.N    ??AppS2wCmd_HttpClientConfigDel_5
// 1937         {
// 1938             if(headerTypes[i] == param)
        LDR      R0,[R5, R6, LSL #+2]
        LDR      R1,[SP, #+0]
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_HttpClientConfigDel_4
        ADD      R0,R7,R6, LSL #+2
        LDR      R0,[R0, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientConfigDel_5
// 1939             {
// 1940                 if(headerValues[i])
// 1941                     gsn_free(headerValues[i]);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 1942                 break;
// 1943             }
// 1944         }
// 1945 
// 1946         if(i == httpConfInfo.reqHeaderCount)
??AppS2wCmd_HttpClientConfigDel_5:
        LDR      R0,[R4, #+116]
        CMP      R6,R0
        BNE.N    ??AppS2wCmd_HttpClientConfigDel_6
// 1947             return S2W_FAILURE;
        MOVS     R0,#+1
        POP      {R1-R7,PC}
// 1948 
// 1949         for( ; i < (httpConfInfo.reqHeaderCount - 1); i++)
// 1950         {
// 1951             headerTypes[i] = headerTypes[i+1];
??AppS2wCmd_HttpClientConfigDel_7:
        ADD      R2,R5,R6, LSL #+2
        LDR      R2,[R2, #+4]
        STR      R2,[R5, R6, LSL #+2]
// 1952             headerValues[i] = headerValues[i+1];
// 1953         }
        ADDS     R6,R6,#+1
        LDR      R2,[R1, #+8]
        STR      R2,[R1, #+4]
??AppS2wCmd_HttpClientConfigDel_6:
        SUBS     R2,R0,#+1
        ADD      R1,R7,R6, LSL #+2
        CMP      R6,R2
        BCC.N    ??AppS2wCmd_HttpClientConfigDel_7
// 1954         headerValues[i] = NULL;
        MOVS     R0,#+0
        STR      R0,[R1, #+4]
// 1955         headerTypes[i] = GSN_HTTP_HEADER_INVAL;
        STR      R0,[R5, R6, LSL #+2]
// 1956         httpConfInfo.reqHeaderCount--;
        STR      R2,[R4, #+116]
// 1957     }
// 1958     else
// 1959     {
// 1960         return S2W_EINVAL;
// 1961     }
// 1962 
// 1963     return S2W_SUCCESS;
        POP      {R1-R7,PC}
??AppS2wCmd_HttpClientConfigDel_0:
        MOVS     R0,#+2
        POP      {R1-R7,PC}       ;; return
          CFI EndBlock cfiBlock19
// 1964 
// 1965 }
// 1966 
// 1967 
// 1968 /**
// 1969  ******************************************************************
// 1970  * @ingroup S2w-Application
// 1971  * @brief Process the http data from the serial interface.
// 1972  *   This function reads the http data and sends to wifi.
// 1973  * @param dataLen the input data length.
// 1974  * @param hCid the cid of the http connection.
// 1975  * @return S2W_SUCCESS - operation successful.
// 1976  * @return S2W_FAILURE - operation Failed.
// 1977  ******************************************************************/
// 1978 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock20 Using cfiCommon0
          CFI Function AppS2wHal_httpContentDataGet
        THUMB
// 1979 PUBLIC UINT8
// 1980 AppS2wHal_httpContentDataGet(UINT32 dataLen, UINT8 hCid)
// 1981 {
AppS2wHal_httpContentDataGet:
        PUSH     {R3-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
// 1982     GSN_STATUS status = S2W_SUCCESS;
// 1983     S2W_HTTP_DATA_T *pHttpData;
// 1984     httpConfInfo.reqBodyLen = 0;
        LDR.W    R6,??DataTable378_4
        MOV      R4,R0
        ADD      R7,R6,#+120
        MOVS     R0,#+0
        STR      R0,[R7, #+4]
        MOV      R8,R1
// 1985     httpConfInfo.moredata = 1;
        MOVS     R0,#+1
        STRB     R0,[R6, #+172]
        MOVS     R5,#+0
// 1986     httpConfInfo.reqBodyPtr = (INT8 *)gsn_malloc(1022);
        MOV      R2,R5
        MOVW     R1,#+1986
        MOVW     R0,#+1022
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R6, #+120]
// 1987     if(NULL ==  httpConfInfo.reqBodyPtr)
        CBZ.N    R0,??AppS2wHal_httpContentDataGet_0
// 1988     {
// 1989         status = S2W_FAILURE;
// 1990         goto AppS2wHal_httpContentDataGetExit;
// 1991     }
// 1992     pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(hCid);
        MOV      R0,R8
          CFI FunCall AppS2wHal_HttpHandleGet
        BL       AppS2wHal_HttpHandleGet
        MOVS     R9,R0
// 1993     if(pHttpData != NULL)
        BEQ.N    ??AppS2wHal_httpContentDataGet_0
// 1994     {
// 1995         GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
        MOV      R1,#-1
        ADD      R0,R9,#+48
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 1996     }
// 1997     else
// 1998     {
// 1999         status = S2W_FAILURE;
// 2000         goto AppS2wHal_httpContentDataGetExit;
// 2001     }
// 2002     while(dataLen)
??AppS2wHal_httpContentDataGet_1:
        CBZ.N    R4,??AppS2wHal_httpContentDataGet_2
// 2003     {
// 2004 
// 2005         httpConfInfo.reqBodyLen = dataLen >= HTTP_SEND_CHUNK_SIZE?
// 2006                                                 HTTP_SEND_CHUNK_SIZE:dataLen;
        CMP      R4,#+1000
        ITE      CS 
        MOVCS    R0,#+1000
        MOVCC    R0,R4
        B.N      ??AppS2wHal_httpContentDataGet_3
??AppS2wHal_httpContentDataGet_0:
        MOVS     R5,#+1
        B.N      ??AppS2wHal_httpContentDataGet_4
??AppS2wHal_httpContentDataGet_3:
        STR      R0,[R7, #+4]
// 2007 
// 2008         if(s2wCidList[hCid].sd != INVALID_CID)
        MOV      R0,#+296
        LDR.W    R1,??DataTable381
        MLA      R0,R0,R8,R1
        LDR      R0,[R0, #+28]
        CMP      R0,#+255
        BEQ.N    ??AppS2wHal_httpContentDataGet_5
// 2009         {
// 2010 #ifndef S2W_DUAL_INTERFACE_SUPPORT
// 2011 			AppS2wHal_CharNGet((UINT8 *)httpConfInfo.reqBodyPtr,httpConfInfo.reqBodyLen);
        LDR      R1,[R7, #+4]
        LDR      R0,[R6, #+120]
          CFI FunCall AppS2wHal_CharNGet
        BL       AppS2wHal_CharNGet
// 2012 #else
// 2013             AppS2wHal_CharNGet1((UINT8 *)httpConfInfo.reqBodyPtr,httpConfInfo.reqBodyLen);
// 2014 #endif
// 2015 			
// 2016         	dataLen -= httpConfInfo.reqBodyLen;
        LDR      R0,[R7, #+4]
        SUBS     R4,R4,R0
// 2017 
// 2018        		if(0 == dataLen )
        ITT      EQ 
        MOVEQ    R0,#+0
        STRBEQ   R0,[R6, #+172]
// 2019         	{
// 2020             	httpConfInfo.moredata = 0;
// 2021         	}
// 2022 	        status = S2wHttp_Send(hCid);
        MOV      R0,R8
          CFI FunCall S2wHttp_Send
        BL       S2wHttp_Send
        MOV      R5,R0
// 2023         	httpConfInfo.reqBodyLen = 0;
        MOVS     R0,#+0
        STR      R0,[R7, #+4]
// 2024         }
// 2025 		else
// 2026 			status = S2W_FAILURE;
// 2027         if(status != S2W_SUCCESS)
        CMP      R5,#+0
        BEQ.N    ??AppS2wHal_httpContentDataGet_1
??AppS2wHal_httpContentDataGet_5:
        MOVS     R5,#+1
// 2028         {
// 2029             status = S2W_FAILURE;
// 2030             break;
// 2031         }
// 2032     }
// 2033     if(pHttpData != NULL)
// 2034     {
// 2035         GsnOsal_SemRelease(&pHttpData->opInProgress);
??AppS2wHal_httpContentDataGet_2:
        ADD      R0,R9,#+48
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
// 2036     }
// 2037     if(NULL != httpConfInfo.reqBodyPtr)
        LDR      R0,[R6, #+120]
        CBZ.N    R0,??AppS2wHal_httpContentDataGet_4
// 2038     {
// 2039         gsn_free(httpConfInfo.reqBodyPtr);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 2040         httpConfInfo.reqBodyPtr = NULL;
        MOVS     R0,#+0
        STR      R0,[R6, #+120]
// 2041     }
// 2042 AppS2wHal_httpContentDataGetExit:
// 2043 	httpConfInfo.moredata = 0;
??AppS2wHal_httpContentDataGet_4:
        MOVS     R0,#+0
        STRB     R0,[R6, #+172]
// 2044    return status;
        UXTB     R0,R5
        POP      {R1,R4-R9,PC}    ;; return
          CFI EndBlock cfiBlock20
// 2045 }
// 2046 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock21 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientSend
        THUMB
// 2047 UINT8
// 2048 AppS2wCmd_HttpClientSend(UINT8 *ptr)
// 2049 {
AppS2wCmd_HttpClientSend:
        PUSH     {R0,R4-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        SUB      SP,SP,#+32
          CFI CFA R13+64
// 2050 	UINT8 cid;
// 2051     UINT32  method;
// 2052     UINT8 *p;//,*page, *content,  *httpRxDataBuf;
// 2053     UINT32 /*httpRxDataLen = 0, temp, ret,*/ timeOut,dataLen=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+24]
// 2054 #ifdef S2W_HTTPC_SUPPORT
// 2055 	S2W_HTTP_DATA_T *pHttpData;
// 2056 	UINT32 len;
// 2057 #endif
// 2058     UINT8 status = S2W_SUCCESS;
        MOV      R9,R0
// 2059 #ifdef S2W_HTTP_CUSTOM_SUPPORT
// 2060     UINT8 statusline;
// 2061     UINT32 headercount;
// 2062     UINT32 size;
// 2063 #endif
// 2064     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 2065     if (!p)
??CrossCallReturnLabel_200:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientSend_0
// 2066     {
// 2067         return S2W_EINVAL;
// 2068     }
// 2069 	cid = AppS2w_CidValidate(*p);
        BL       ?Subroutine101
??CrossCallReturnLabel_519:
        MOV      R6,R0
// 2070     if(cid == INVALID_CID)
        CMP      R6,#+255
        IT       EQ 
        MOVEQ    R0,#+5
// 2071         return S2W_EBADCID;
        BEQ.N    ??AppS2wCmd_HttpClientSend_1
// 2072     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 2073     if (!p)
??CrossCallReturnLabel_199:
        CBZ.N    R0,??AppS2wCmd_HttpClientSend_0
// 2074     {
// 2075         return S2W_EINVAL;
// 2076     }
// 2077     AppS2wParse_Int(p, &method);
        BL       ?Subroutine54
// 2078     if(method == S2W_HTTP_METHOD_GETRESP)
??CrossCallReturnLabel_348:
        LDR      R0,[SP, #+16]
        CMP      R0,#+6
        IT       EQ 
        MOVEQ    R0,#+8
// 2079     {
// 2080     	method = GSN_HTTP_METHOD_GETRESP;
        BEQ.N    ??AppS2wCmd_HttpClientSend_2
// 2081     }
// 2082     else if(method == S2W_HTTP_METHOD_POSTRESP)
        CMP      R0,#+7
        BNE.N    ??AppS2wCmd_HttpClientSend_3
// 2083     {
// 2084     	method = GSN_HTTP_METHOD_POSTRESP;
        MOVS     R0,#+9
??AppS2wCmd_HttpClientSend_2:
        STR      R0,[SP, #+16]
// 2085     }
// 2086 #ifdef S2W_HTTPC_SUPPORT
// 2087     httpConfInfo.reqMethod = (GSN_HTTP_USER_METHOD_T)method;
??AppS2wCmd_HttpClientSend_3:
        LDR.W    R4,??DataTable378_4
        LDR      R0,[SP, #+16]
        ADD      R7,R4,#+100
        STRB     R0,[R7, #+1]
// 2088 #endif
// 2089     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 2090     if (!p)
??CrossCallReturnLabel_198:
        CBZ.N    R0,??AppS2wCmd_HttpClientSend_0
// 2091     {
// 2092         return S2W_EINVAL;
// 2093     }
// 2094     AppS2wParse_Int(p, &timeOut);
        BL       ?Subroutine56
// 2095     if(timeOut == 0)
??CrossCallReturnLabel_359:
        LDR      R0,[SP, #+20]
        CBNZ.N   R0,??AppS2wCmd_HttpClientSend_4
// 2096         timeOut = 5;
        MOVS     R0,#+5
        STR      R0,[SP, #+20]
// 2097 #ifdef S2W_WEB_SERVER
// 2098 	if(TRUE == GsnHttpd_IsRunning())
??AppS2wCmd_HttpClientSend_4:
          CFI FunCall GsnHttpd_IsRunning
        BL       GsnHttpd_IsRunning
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_HttpClientSend_5
// 2099 	{
// 2100 		status = AppS2w_HttpdSetTimeOut(cid,timeOut);
        MOV      R0,R6
        LDR      R1,[SP, #+20]
          CFI FunCall AppS2w_HttpdSetTimeOut
        BL       AppS2w_HttpdSetTimeOut
        MOVS     R9,R0
// 2101 		if(status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_HttpClientSend_6
// 2102 			return	status;
// 2103 	}
// 2104 #endif
// 2105 #ifdef S2W_HTTPC_SUPPORT
// 2106 	httpConfInfo.httpTimeOut = timeOut;
??AppS2wCmd_HttpClientSend_5:
        LDR      R0,[SP, #+20]
        STR      R0,[R7, #+68]
// 2107 #endif
// 2108     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
??CrossCallReturnLabel_197:
        MOVS     R8,R0
// 2109     if (!p)
        BNE.N    ??AppS2wCmd_HttpClientSend_7
// 2110     {
// 2111         return S2W_EINVAL;
??AppS2wCmd_HttpClientSend_0:
        MOVS     R0,#+2
??AppS2wCmd_HttpClientSend_1:
        B.N      ??AppS2wCmd_HttpClientSend_8
// 2112     }
// 2113 
// 2114 #ifdef S2W_HTTPC_SUPPORT
// 2115  	len = strlen((const char *)p);
??AppS2wCmd_HttpClientSend_7:
          CFI FunCall strlen
        BL       strlen
        MOV      R5,R0
// 2116     if(NULL != httpConfInfo.reqPathPtr)
        LDR      R0,[R7, #+4]
        CBZ.N    R0,??AppS2wCmd_HttpClientSend_9
// 2117     {
// 2118         gsn_free(httpConfInfo.reqPathPtr);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 2119         httpConfInfo.reqPathPtr = NULL;
        MOVS     R0,#+0
        STR      R0,[R7, #+4]
// 2120     }
// 2121     httpConfInfo.reqPathPtr = gsn_malloc(len+1);
??AppS2wCmd_HttpClientSend_9:
        MOVS     R2,#+0
        MOVW     R1,#+2121
        ADDS     R0,R5,#+1
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R7, #+4]
// 2122     if(NULL == httpConfInfo.reqPathPtr)
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_HttpClientSend_10
// 2123     {
// 2124         return S2W_FAILURE;
// 2125     }
// 2126     strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
        MOV      R2,R5
        MOV      R1,R8
          CFI FunCall strncpy
        BL       strncpy
// 2127     httpConfInfo.reqPathPtr[len] ='\0';
        LDR      R0,[R7, #+4]
        MOVS     R1,#+0
        STRB     R1,[R5, R0]
// 2128     httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
        MOVS     R0,#+3
        STRB     R0,[R4, #+100]
// 2129 #endif
// 2130 #if (defined(S2W_GSLINK_XML) || defined(S2W_GSLINK_RAW )) &&  defined(S2W_WEB_SERVER)
// 2131 	if((method == GSN_HTTP_METHOD_GETRESP || method == GSN_HTTP_METHOD_POSTRESP ) &&
// 2132 		(strcmp((const char *)s2wappMainTaskCtxt->currenturi,(const INT8 *)p) != 0))
        LDR.W    R4,??DataTable382
        LDR      R0,[SP, #+16]
        CMP      R0,#+8
        IT       NE 
        CMPNE    R0,#+9
        BNE.N    ??AppS2wCmd_HttpClientSend_11
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+27392
        MOV      R1,R8
        ADDS     R0,R0,#+20
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_HttpClientSend_10
// 2133 	{
// 2134 		return S2W_FAILURE;
// 2135 	}
// 2136 #endif
// 2137     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_HttpClientSend_11:
        BL       ?Subroutine37
// 2138 	if (!p)
??CrossCallReturnLabel_196:
        CBNZ.N   R0,??AppS2wCmd_HttpClientSend_12
// 2139     {
// 2140 #ifdef S2W_HTTPC_SUPPORT
// 2141 		if(GSN_HTTP_METHOD_POST == method)
        LDR      R0,[SP, #+16]
        CMP      R0,#+3
        BNE.N    ??AppS2wCmd_HttpClientSend_13
// 2142         {
// 2143             gsn_free(httpConfInfo.reqPathPtr);
        LDR      R0,[R7, #+4]
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
        B.N      ??AppS2wCmd_HttpClientSend_0
// 2144             return S2W_EINVAL;
// 2145         }
// 2146         httpConfInfo.reqBodyTotalLen = 0;
??AppS2wCmd_HttpClientSend_13:
        MOVS     R0,#+0
        STR      R0,[R7, #+28]
// 2147         httpConfInfo.reqBodyLen = 0;
        STR      R0,[R7, #+24]
// 2148         pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
        MOV      R0,R6
          CFI FunCall AppS2wHal_HttpHandleGet
        BL       AppS2wHal_HttpHandleGet
        MOVS     R4,R0
// 2149         if(pHttpData != NULL)
        BEQ.N    ??AppS2wCmd_HttpClientSend_10
// 2150         {
// 2151             GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
        MOV      R1,#-1
        ADD      R0,R4,#+48
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 2152             status = S2wHttp_Send(cid);
        MOV      R0,R6
          CFI FunCall S2wHttp_Send
        BL       S2wHttp_Send
        MOV      R9,R0
// 2153         }
// 2154         else
// 2155         {
// 2156             return S2W_FAILURE;
// 2157         }
// 2158         if(pHttpData != NULL)
// 2159         {
// 2160             GsnOsal_SemRelease(&pHttpData->opInProgress);
        ADD      R0,R4,#+48
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
??AppS2wCmd_HttpClientSend_6:
        B.N      ??AppS2wCmd_HttpClientSend_14
// 2161         }
??AppS2wCmd_HttpClientSend_10:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_HttpClientSend_8
// 2162 #endif
// 2163     }
// 2164     else
// 2165     {
// 2166          AppS2wParse_Int(p, &dataLen);
??AppS2wCmd_HttpClientSend_12:
        ADD      R1,SP,#+24
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 2167 #ifdef S2W_HTTPC_SUPPORT
// 2168 		httpConfInfo.reqBodyTotalLen = dataLen;
        LDR      R0,[SP, #+24]
        STR      R0,[R7, #+28]
// 2169 #endif
// 2170 #if defined(S2W_GSLINK) && defined(S2W_GSLINK_RAW )&& defined(S2W_WEB_SERVER)
// 2171 		if((method == GSN_HTTP_METHOD_GETRESP || method == GSN_HTTP_METHOD_POSTRESP))
        LDR      R0,[SP, #+16]
        CMP      R0,#+8
        IT       NE 
        CMPNE    R0,#+9
        BNE.N    ??AppS2wCmd_HttpClientSend_14
// 2172 		{
// 2173 			status = AppS2w_HttpdCtxInit(&s2wCidList[cid].httpdCtx,1);
        MOV      R0,#+296
        LDR.W    R1,??DataTable381
        MLA      R7,R0,R6,R1
        ADD      R6,R7,#+148
        MOVS     R1,#+1
        MOV      R0,R6
          CFI FunCall AppS2w_HttpdCtxInit
        BL       AppS2w_HttpdCtxInit
        MOV      R9,R0
// 2174 			AppS2w_HttpdBodyLenSet(&s2wCidList[cid].httpdCtx,dataLen);
        LDR      R1,[SP, #+24]
        MOV      R0,R6
          CFI FunCall AppS2w_HttpdBodyLenSet
        BL       AppS2w_HttpdBodyLenSet
// 2175 			AppS2w_HttpdMethodSet(&s2wCidList[cid].httpdCtx,(UINT8)method);
        LDR      R1,[SP, #+16]
        UXTB     R1,R1
        MOV      R0,R6
          CFI FunCall AppS2w_HttpdMethodSet
        BL       AppS2w_HttpdMethodSet
// 2176 			if(s2wappMainTaskCtxt->respTimeOut !=0)
        LDR      R0,[R4, #+0]
        MOVW     R1,#+27580
        ADDS     R2,R1,R0
        LDR      R2,[R2, #+4]
        CBZ.N    R2,??AppS2wCmd_HttpClientSend_14
// 2177 			{
// 2178 				s2wappMainTaskCtxt->responseInprogress=1;
        MOVS     R2,#+1
        STRB     R2,[R1, R0]
// 2179 			GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl);
        MOVW     R6,#+27624
        LDR      R0,[R4, #+0]
        LDR      R0,[R6, R0]
          CFI FunCall GsnSoftTmr_Stop
        BL       GsnSoftTmr_Stop
// 2180 			s2wappMainTaskCtxt->respTimeOutTmrHndl = GsnSoftTmr_Start(&s2wappMainTaskCtxt->respTimeOutTmr, GSN_SOFT_TMR_ONESHOT,0, (ULONG64)(s2wappMainTaskCtxt->respTimeOut),
// 2181 							  ( GSN_SOFT_TMR_CBR_T )AppMcu_RespTimeoutCb, &s2wCidList[cid].sd );
        LDR      R5,[R4, #+0]
        ADD      R0,R7,#+28
        STR      R0,[SP, #+12]
        MOVS     R1,#+0
        LDR.W    R0,??DataTable384_1
        STR      R0,[SP, #+8]
        MOVS     R2,#+0
        MOVW     R0,#+27584
        MOV      R3,R1
        LDR      R0,[R0, R5]
        STRD     R0,R1,[SP, #+0]
        ADD      R0,R5,#+27392
        ADDS     R0,R0,#+200
          CFI FunCall GsnSoftTmr_Start
        BL       GsnSoftTmr_Start
        LDR      R1,[R4, #+0]
        STR      R0,[R6, R1]
// 2182 			}
// 2183 #ifdef S2W_HTTP_CUSTOM_SUPPORT
// 2184             /* check if custom headers has to be added */
// 2185             p = NULL;
// 2186             len = 0;
// 2187 
// 2188             p = AppS2wParse_NextParamGet(&ptr);
// 2189             if (NULL != p)
// 2190             {
// 2191                 status = AppS2wParse_Boolean(p, &statusline);
// 2192                 if (status != S2W_SUCCESS)
// 2193                 {
// 2194                     return status;
// 2195                 }
// 2196                 p = NULL;
// 2197                 p = AppS2wParse_NextParamGet(&ptr);
// 2198                 AppS2wParse_Int(p,  &size);
// 2199                 if(size != 0)
// 2200                 {
// 2201                     headercount = size;
// 2202                 }
// 2203                 AppS2w_HttpStatusLineSet(&s2wCidList[cid].httpdCtx, statusline);
// 2204                 AppS2w_HttpHdrCountSet(&s2wCidList[cid].httpdCtx, headercount);
// 2205             }
// 2206 #endif
// 2207 		}
// 2208 #endif
// 2209     }
// 2210     return status;
??AppS2wCmd_HttpClientSend_14:
        UXTB     R0,R9
??AppS2wCmd_HttpClientSend_8:
        ADD      SP,SP,#+36
          CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
          CFI EndBlock cfiBlock21
// 2211 }
// 2212 
// 2213 #endif
// 2214 
// 2215 #if 0
// 2216 UINT8
// 2217 AppS2wCmd_SslCertificateAdd(UINT8 *ptr)
// 2218 {
// 2219     UINT8 *p, *name;
// 2220     INT32 len, i = 0;
// 2221     UINT32 certStore;
// 2222 
// 2223     name = AppS2wParse_NextParamGet(&ptr);     //get cert name
// 2224     if (!name)
// 2225     {
// 2226         return S2W_EINVAL;
// 2227     }
// 2228     len = strlen((const char *)name);
// 2229     if( len > 32)
// 2230         return S2W_EINVAL;
// 2231     p = AppS2wParse_NextParamGet(&ptr);
// 2232     if (!p)
// 2233     {
// 2234         return S2W_EINVAL;
// 2235     }
// 2236     AppS2wParse_Int(p, &certFormat);
// 2237     if(certFormat > 1)
// 2238         return S2W_EINVAL;
// 2239 
// 2240     p = AppS2wParse_NextParamGet(&ptr);
// 2241     if (!p)
// 2242     {
// 2243         return S2W_EINVAL;
// 2244     }
// 2245 
// 2246     AppS2wParse_Int(p, &certFileSize);
// 2247 
// 2248     certFileSize = certFileSize >> certFormat;
// 2249     //S2w_Printf("\n\rfile size %d", certFileSize);
// 2250 
// 2251     p = AppS2wParse_NextParamGet(&ptr);     //get wehre to store SRAM/FLASH
// 2252     if (!p)
// 2253     {
// 2254         return S2W_EINVAL;
// 2255     }
// 2256     AppS2wParse_Int(p, &certStore);
// 2257 
// 2258     if(certStore > 1)
// 2259         return S2W_EINVAL;
// 2260 
// 2261 	if(S2wCert_findFile(name) == -1)
// 2262 	{
// 2263 		S2w_Printf("\n\rFILE EXISTS\n\r");
// 2264 		return S2W_FAILURE;
// 2265 	}
// 2266     if(certStore)
// 2267     {
// 2268     	i = S2wCert_MemAlloc(certFileSize);
// 2269 	    //S2w_Printf("\nmem-alloc :%d\n",i);
// 2270 	    if(i == -1)
// 2271 	    	return S2W_FAILURE;
// 2272         p = gsn_malloc(len+1); //allocate memory for storing name
// 2273         if(p == NULL)
// 2274             return S2W_FAILURE;
// 2275         strcpy((INT8 *)p, (const char *)name);
// 2276         s2w_ssl_cert_table[i].name = p; //copy pointer to SRAM entry
// 2277         s2w_ssl_cert_table[i].location = CERT_IN_RAM;
// 2278         certIndex = i;
// 2279     }
// 2280     else
// 2281     {
// 2282         certFile = f_open(name, "w");
// 2283         if(certFile == NULL)
// 2284         	return S2W_FAILURE;
// 2285         certIndex = S2W_INVALID_CERT_INDEX;
// 2286     }
// 2287 
// 2288     /* Store the Cert Index in a global. This is used when the actual certificate
// 2289       is received in the next escape sequence */
// 2290 
// 2291     return S2W_SUCCESS;
// 2292 }
// 2293 
// 2294 PUBLIC UINT32
// 2295 AppS2wCertificateData(UINT8 ch1)
// 2296 {
// 2297     UINT8 *buf, ch;
// 2298     UINT16 i = 2, index = 2;
// 2299 
// 2300     if ( (certIndex == S2W_INVALID_CERT_INDEX) && (certFile == NULL))
// 2301             return S2W_FAILURE;
// 2302 
// 2303     if( certFileSize == 0)
// 2304             return S2W_FAILURE;
// 2305 
// 2306     buf = gsn_malloc((certFileSize << certFormat) + 2);
// 2307 
// 2308     if(buf == NULL)
// 2309         return S2W_FAILURE;
// 2310 
// 2311     *buf = certFileSize & 0x00FF;
// 2312     *(buf + 1) = (certFileSize & 0xFF00) >> 8;
// 2313     /* if format is hex size will be double */
// 2314     certFileSize = certFileSize << certFormat;
// 2315 
// 2316     /* store incoming byte in temparory bufer */
// 2317     AppS2wHal_CharNGet((buf+2), certFileSize);
// 2318 
// 2319     if(certFormat)
// 2320     {
// 2321         for(i = 2; i < (certFileSize + 2);)
// 2322         {
// 2323             buf[index] = (AppS2wParse_ToHex(buf[i]) << 4) | (AppS2wParse_ToHex(buf[i + 1]) & 0x0F);
// 2324             i = i + 2;
// 2325             index++;
// 2326         }
// 2327     }
// 2328 
// 2329 
// 2330     /* recieving file is complete. If the Cert Address is in the 0x8000000
// 2331     range store it in flash else store it in SRAM (0x4000000 range) */
// 2332     if ( certIndex !=  S2W_INVALID_CERT_INDEX)
// 2333     {
// 2334         /* store in SRAM */
// 2335         memcpy((UINT8 *) s2w_ssl_cert_table[certIndex].certAddress, buf,
// 2336             ((certFileSize >> certFormat) + 2));
// 2337 
// 2338     }
// 2339     else
// 2340     {
// 2341         /* store in flash */
// 2342         f_write(buf, 1, (certFileSize >> certFormat) + 2, certFile);
// 2343 		f_close(certFile);
// 2344     }
// 2345     /* reset variables */
// 2346     certIndex = S2W_INVALID_CERT_INDEX;
// 2347     certFileSize = 0;
// 2348 	certFile = NULL;
// 2349     gsn_free(buf);
// 2350     S2w_Printf("\r\nOK\r\n");
// 2351     return S2W_SUCCESS;
// 2352 }
// 2353 
// 2354 UINT8
// 2355 AppS2wCmd_SslCertificateDelete(UINT8 *ptr)
// 2356 {
// 2357     UINT8 *p;
// 2358     INT32 certIndex, retVal =0;
// 2359 
// 2360     p = AppS2wParse_NextParamGet(&ptr);     //get cert name
// 2361     if (!p)
// 2362     {
// 2363          return S2W_EINVAL;
// 2364     }
// 2365     certIndex = S2wCert_SearchRamTable(p);
// 2366     if(certIndex != -1)
// 2367     {
// 2368     	gsn_free (s2w_ssl_cert_table[certIndex].certAddress);
// 2369         gsn_free(s2w_ssl_cert_table[certIndex].name);
// 2370         s2w_ssl_cert_table[certIndex].name = NULL;
// 2371         s2w_ssl_cert_table[certIndex].certAddress = NULL;
// 2372         if( s2w_ssl_cert_table[certIndex].location == CERT_IN_FLASH )
// 2373     	{
// 2374     		retVal = f_delete(p);
// 2375     	}
// 2376     }
// 2377     else
// 2378     {
// 2379     	retVal = f_delete(p);
// 2380     }
// 2381 
// 2382     if(!retVal)
// 2383     {
// 2384     	if(strcmp((const char*)p,S2W_CERT_NAME_CA) == 0)
// 2385     	{
// 2386 			s2wCurrent.security.eap.useCaCert=0;
// 2387     	}
// 2388         return S2W_SUCCESS;
// 2389     }
// 2390     else
// 2391         return S2W_FAILURE;
// 2392 }
// 2393 
// 2394 PRIVATE UINT8
// 2395 AppS2wCmd_Weap(UINT8 *ptr)
// 2396 {
// 2397     UINT8 *name, *p;
// 2398     INT32 i = 0;
// 2399     UINT32 certStore, certType;
// 2400 
// 2401     p = AppS2wParse_NextParamGet(&ptr);
// 2402     if (!p)
// 2403     {
// 2404         return S2W_EINVAL;
// 2405     }
// 2406     AppS2wParse_Int(p, &certType);
// 2407 
// 2408     if(certType > 2)
// 2409         return S2W_EINVAL;
// 2410 
// 2411     p = AppS2wParse_NextParamGet(&ptr);
// 2412     if (!p)
// 2413     {
// 2414         return S2W_EINVAL;
// 2415     }
// 2416 
// 2417     AppS2wParse_Int(p, &certFormat);
// 2418 
// 2419     if(certFormat > 1)
// 2420         return S2W_EINVAL;
// 2421 
// 2422     p = AppS2wParse_NextParamGet(&ptr);
// 2423     if (!p)
// 2424     {
// 2425         return S2W_EINVAL;
// 2426     }
// 2427     AppS2wParse_Int(p, &certFileSize);
// 2428     certFileSize = certFileSize >> certFormat;
// 2429     p = AppS2wParse_NextParamGet(&ptr);
// 2430     if (!p)
// 2431     {
// 2432         return S2W_EINVAL;
// 2433     }
// 2434     AppS2wParse_Int(p, &certStore);
// 2435 
// 2436     if(certStore > 1)
// 2437         return S2W_EINVAL;
// 2438 
// 2439     if(certStore)
// 2440     {
// 2441     	i = S2wCert_MemAlloc(certStore, certFileSize);
// 2442 
// 2443 	    if(i == -1)
// 2444 	        return S2W_FAILURE;
// 2445 
// 2446         name = gsn_malloc(32);
// 2447         if(certType == 0)
// 2448             strcpy((INT8 *)name, S2W_CERT_NAME_CA);
// 2449         else if(certType == 1)
// 2450             strcpy((INT8 *)name, S2W_CERT_NAME_CLIENT);
// 2451         else
// 2452             strcpy((INT8 *)name, S2W_CERT_NAME_KEY);
// 2453         s2w_ssl_cert_table[i].name = name;
// 2454         s2w_ssl_cert_table[i].location = CERT_IN_RAM;
// 2455 		certIndex = i;
// 2456     }
// 2457     else
// 2458     {
// 2459         /* write certificate name in flash */
// 2460         if(certType == 0)
// 2461             certFile = f_open(S2W_CERT_NAME_CA, "w");
// 2462         else if(certType == 1)
// 2463             certFile = f_open(S2W_CERT_NAME_CLIENT, "w");
// 2464         else
// 2465             certFile = f_open(S2W_CERT_NAME_KEY, "w");
// 2466 
// 2467         if(certFile == NULL)
// 2468         	return S2W_FAILURE;
// 2469         certIndex = S2W_INVALID_CERT_INDEX;
// 2470     }
// 2471     /* Store the Cert Index in a global. This is used when the actual certificate
// 2472       is received in the next escape sequence */
// 2473     return S2W_SUCCESS;
// 2474 }
// 2475 #endif
// 2476 
// 2477 /**
// 2478  ******************************************************************
// 2479  * @ingroup S2w-Application
// 2480  * @brief Process the AT+SETTIME Command.
// 2481  *   This function set the system time. The input time in dd/mm/yyyy and
// 2482  *   HH:MM:SS format
// 2483  * @param ptr Pointer to the user input string.
// 2484  *
// 2485  * @return S2W_SUCCESS - operation successful.
// 2486  * @retval S2W_EINVAL  - operation failure-invalid command.
// 2487  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock22 Using cfiCommon0
          CFI Function AppS2wCmd_SystemTimeSet
        THUMB
// 2488 PUBLIC UINT8
// 2489 AppS2wCmd_SystemTimeSet(UINT8 *ptr)
// 2490 {
AppS2wCmd_SystemTimeSet:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+60
          CFI CFA R13+80
// 2491     GSN_SYSTEM_TIME_T currentTime, newTime, timeDifference;
// 2492     UINT8 i, *p, len, j,flag=0;
        MOVS     R5,#+0
// 2493     struct tm time;
// 2494     BOOL diffNegative;
// 2495     ULONG64 time64=0;
        STRD     R5,R5,[SP, #+0]
// 2496     
// 2497     p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+60
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 2498     if(p && *p)
        ITT      NE 
        LDRBNE   R0,[R4, #+0]
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_SystemTimeSet_0
// 2499     {
// 2500     len = strlen((char *)p);
        BL       ?Subroutine70
??CrossCallReturnLabel_426:
        UXTB     R5,R0
// 2501 
// 2502     i = 0;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_SystemTimeSet_1
// 2503     while(i < len)
// 2504     {
// 2505         if(p[i] == '/')
// 2506             {
// 2507             break;
// 2508             }
// 2509         i++;
??AppS2wCmd_SystemTimeSet_2:
        MOV      R0,R6
??AppS2wCmd_SystemTimeSet_1:
        ADDS     R6,R0,#+1
        UXTB     R0,R0
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_3
        LDRB     R1,[R0, R4]
        CMP      R1,#+47
        BNE.N    ??AppS2wCmd_SystemTimeSet_2
// 2510     }
// 2511 
// 2512     if( i >= len )
??AppS2wCmd_SystemTimeSet_3:
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2513     {
// 2514         return S2W_EINVAL;
// 2515     }
// 2516     p[i] = '\0';
        MOVS     R1,#+0
        STRB     R1,[R0, R4]
// 2517 
// 2518     AppS2wParse_Int(p, (UINT32 *)&time.tm_mday);
        MOV      R0,R4
        BL       ?Subroutine56
// 2519         //S2w_Printf("\n\r%d", time.tm_mday);
// 2520     if(time.tm_mday > 31)
??CrossCallReturnLabel_358:
        LDR      R0,[SP, #+20]
        CMP      R0,#+32
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2521         {
// 2522         return S2W_EINVAL;
// 2523         }
// 2524     j = ++i;
        MOV      R0,R6
        MOV      R2,R0
        B.N      ??AppS2wCmd_SystemTimeSet_5
// 2525     while(i < len)
// 2526     {
// 2527         if(p[i] == '/')
// 2528             {
// 2529             break;
// 2530             }
// 2531         i++;
??AppS2wCmd_SystemTimeSet_6:
        MOV      R0,R6
??AppS2wCmd_SystemTimeSet_5:
        ADDS     R6,R0,#+1
        UXTB     R0,R0
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_7
        LDRB     R1,[R0, R4]
        CMP      R1,#+47
        BNE.N    ??AppS2wCmd_SystemTimeSet_6
// 2532     }
// 2533 
// 2534     if( i >= len )
??AppS2wCmd_SystemTimeSet_7:
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2535     {
// 2536         return S2W_EINVAL;
// 2537     }
// 2538     p[i] = '\0';
        MOVS     R1,#+0
        STRB     R1,[R0, R4]
// 2539 
// 2540     AppS2wParse_Int(&p[j], (UINT32 *)&time.tm_mon);
        UXTB     R2,R2
        ADD      R1,SP,#+24
        ADDS     R0,R2,R4
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 2541         //S2w_Printf(":%d", time.tm_mon);
// 2542     if(time.tm_mon > 12)
        LDR      R0,[SP, #+24]
        CMP      R0,#+13
        ITTTT    LT 
        SUBLT    R0,R0,#+1
        STRLT    R0,[SP, #+24]
        UXTBLT   R0,R6
        CMPLT    R0,R5
// 2543         {
// 2544         return S2W_EINVAL;
// 2545         }
// 2546     time.tm_mon--;
// 2547     ++i;
// 2548 
// 2549     if( i >= len )
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2550     {
// 2551         return S2W_EINVAL;
// 2552     }
// 2553 
// 2554     AppS2wParse_Int(&p[i], (UINT32 *)&time.tm_year);
        ADD      R1,SP,#+28
        ADDS     R0,R0,R4
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 2555         //S2w_Printf(":%d", time.tm_year);
// 2556     if(time.tm_year < 1900)
        LDR      R0,[SP, #+28]
        MOVW     R1,#+1900
        CMP      R0,R1
        BLT.N    ??AppS2wCmd_SystemTimeSet_4
// 2557         {
// 2558         return S2W_EINVAL;
// 2559         }
// 2560 
// 2561     p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+60
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 2562 
// 2563     if (!p)
        BEQ.N    ??AppS2wCmd_SystemTimeSet_4
// 2564     {
// 2565         return S2W_EINVAL;
// 2566     }
// 2567     len = strlen((char *)p);
          CFI FunCall strlen
        BL       strlen
        UXTB     R5,R0
// 2568 
// 2569     i = 0;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_SystemTimeSet_8
// 2570     while(i < len)
// 2571     {
// 2572         if(p[i] == ':')
// 2573             {
// 2574             break;
// 2575             }
// 2576         i++;
??AppS2wCmd_SystemTimeSet_9:
        MOV      R0,R6
??AppS2wCmd_SystemTimeSet_8:
        ADDS     R6,R0,#+1
        UXTB     R0,R0
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_10
        LDRB     R1,[R0, R4]
        CMP      R1,#+58
        BNE.N    ??AppS2wCmd_SystemTimeSet_9
// 2577     }
// 2578 
// 2579     if( i >= len )
??AppS2wCmd_SystemTimeSet_10:
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2580     {
// 2581         return S2W_EINVAL;
// 2582     }
// 2583     p[i] = '\0';
        MOVS     R1,#+0
        STRB     R1,[R0, R4]
// 2584 
// 2585     AppS2wParse_Int(p, (UINT32 *)&time.tm_hour);
        MOV      R0,R4
        BL       ?Subroutine54
// 2586         //S2w_Printf(" %d:", time.tm_hour);
// 2587     if(time.tm_hour > 23)
??CrossCallReturnLabel_347:
        LDR      R0,[SP, #+16]
        CMP      R0,#+24
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2588         {
// 2589         return S2W_EINVAL;
// 2590         }
// 2591     j = ++i;
        MOV      R0,R6
        MOV      R2,R0
        B.N      ??AppS2wCmd_SystemTimeSet_11
// 2592     while(i < len)
// 2593     {
// 2594         if(p[i] == ':')
// 2595             {
// 2596             break;
// 2597             }
// 2598         i++;
??AppS2wCmd_SystemTimeSet_12:
        MOV      R0,R6
??AppS2wCmd_SystemTimeSet_11:
        ADDS     R6,R0,#+1
        UXTB     R0,R0
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_13
        LDRB     R1,[R0, R4]
        CMP      R1,#+58
        BNE.N    ??AppS2wCmd_SystemTimeSet_12
// 2599     }
// 2600 
// 2601     if( i >= len )
??AppS2wCmd_SystemTimeSet_13:
        CMP      R0,R5
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2602     {
// 2603         return S2W_EINVAL;
// 2604     }
// 2605     p[i] = '\0';
        MOVS     R1,#+0
        STRB     R1,[R0, R4]
// 2606 
// 2607     AppS2wParse_Int(&p[j], (UINT32 *)&time.tm_min);
        UXTB     R2,R2
        ADD      R1,SP,#+12
        ADDS     R0,R2,R4
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 2608         //S2w_Printf("%d:", time.tm_min);
// 2609     if(time.tm_min > 59)
        LDR      R0,[SP, #+12]
        CMP      R0,#+60
        ITT      LT 
        UXTBLT   R0,R6
        CMPLT    R0,R5
// 2610         {
// 2611         return S2W_EINVAL;
// 2612         }
// 2613 
// 2614     ++i;
// 2615     if( i >= len )
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2616     {
// 2617         return S2W_EINVAL;
// 2618     }
// 2619 
// 2620     AppS2wParse_Int(&p[i], (UINT32 *)&time.tm_sec);
        ADD      R1,SP,#+8
        ADDS     R0,R0,R4
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 2621         if(time.tm_sec > 60)
        LDR      R0,[SP, #+8]
        CMP      R0,#+61
        BGE.N    ??AppS2wCmd_SystemTimeSet_4
// 2622         {
// 2623             return S2W_EINVAL;
// 2624         }
// 2625         flag =1;
        MOVS     R5,#+1
// 2626     }
// 2627     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_SystemTimeSet_0:
        ADD      R0,SP,#+60
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 2628     if(p && *p)
        ITT      NE 
        LDRBNE   R0,[R4, #+0]
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_SystemTimeSet_14
// 2629     {
// 2630         if(flag)
        CBZ.N    R5,??AppS2wCmd_SystemTimeSet_15
// 2631         {
// 2632         return S2W_EINVAL;
??AppS2wCmd_SystemTimeSet_4:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_SystemTimeSet_16
// 2633         }
// 2634         AppS2wParse_64BitNumber(p,&time64);
??AppS2wCmd_SystemTimeSet_15:
        ADD      R1,SP,#+0
        MOV      R0,R4
          CFI FunCall AppS2wParse_64BitNumber
        BL       AppS2wParse_64BitNumber
// 2635     }
// 2636 	if(flag)
// 2637 	{
// 2638         time.tm_year = time.tm_year - 1900;
// 2639         time.tm_isdst = 0;
// 2640          
// 2641     
// 2642     	newTime = mktime(&time);    /* time in seconds*/
// 2643 	}
// 2644 	else
// 2645 		newTime = time64/1000;
??AppS2wCmd_SystemTimeSet_17:
        LDRD     R0,R1,[SP, #+0]
        MOV      R2,#+1000
        MOVS     R3,#+0
          CFI FunCall __aeabi_uldivmod
        BL       __aeabi_uldivmod
        MOV      R4,R0
        MOV      R5,R1
// 2646     newTime = (newTime <<15);      /*time in ticks*/
??AppS2wCmd_SystemTimeSet_18:
        LSLS     R5,R5,#+15
        ORR      R5,R5,R4, LSR #+17
        LSLS     R4,R4,#+15
// 2647 	/* calculate the difference*/
// 2648     currentTime = GsnTod_Get();
          CFI FunCall GsnTod_Get
        BL       GsnTod_Get
        MOV      R3,R1
        MOV      R2,R0
// 2649 
// 2650     if (currentTime > newTime)
        CMP      R5,R3
        BHI.N    ??AppS2wCmd_SystemTimeSet_19
        IT       CS 
        CMPCS    R4,R2
        BCS.N    ??AppS2wCmd_SystemTimeSet_19
// 2651     {
// 2652         diffNegative = TRUE;
        MOVS     R0,#+1
// 2653         timeDifference = currentTime - newTime;
        SUBS     R2,R2,R4
        SBCS     R3,R3,R5
        B.N      ??AppS2wCmd_SystemTimeSet_20
// 2654     }
??AppS2wCmd_SystemTimeSet_14:
        CMP      R5,#+0
        BEQ.N    ??AppS2wCmd_SystemTimeSet_17
        LDR      R0,[SP, #+28]
        SUBW     R0,R0,#+1900
        STR      R0,[SP, #+28]
        MOVS     R0,#+0
        STR      R0,[SP, #+40]
        ADD      R0,SP,#+8
          CFI FunCall __mktime32
        BL       __mktime32
        MOV      R4,R0
        MOVS     R5,#+0
        B.N      ??AppS2wCmd_SystemTimeSet_18
// 2655     else
// 2656     {
// 2657         diffNegative = FALSE;
??AppS2wCmd_SystemTimeSet_19:
        MOVS     R0,#+0
// 2658         timeDifference = newTime - currentTime;
        SUBS     R2,R4,R2
        SBC      R3,R5,R3
// 2659     }
// 2660 
// 2661     GsnTod_AdjustOffset(diffNegative, timeDifference);
??AppS2wCmd_SystemTimeSet_20:
          CFI FunCall GsnTod_AdjustOffset
        BL       GsnTod_AdjustOffset
// 2662    
// 2663     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_SystemTimeSet_16:
        ADD      SP,SP,#+64
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock22
// 2664 }
// 2665 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock23 Using cfiCommon0
          CFI Function AppS2wCmd_SystemTimeGet
        THUMB
// 2666 PUBLIC UINT8
// 2667 AppS2wCmd_SystemTimeGet(UINT8 *ptr)
// 2668 {
AppS2wCmd_SystemTimeGet:
        PUSH     {R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+12
        SUB      SP,SP,#+36
          CFI CFA R13+48
// 2669     GSN_SYSTEM_TIME_T currentTime,mSeconds=0,seconds;
// 2670 
// 2671     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R1,[R0, #+0]
        CMP      R1,#+63
        ITT      EQ 
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_SystemTimeGet_0
// 2672     {
// 2673         struct tm *time_local;
// 2674         currentTime = GsnTod_Get();
// 2675 		mSeconds = SYSTIME_TO_MSEC(currentTime);
          CFI FunCall GsnTod_Get
        BL       GsnTod_Get
        MOV      R2,#+1000
        UMULL    R4,R5,R2,R0
        MLA      R5,R2,R1,R5
        LSRS     R4,R4,#+15
        ORR      R4,R4,R5, LSL #+17
        LSRS     R5,R5,#+15
        MOVS     R3,#+0
// 2676 		seconds = mSeconds / 1000;
        MOV      R0,R4
        MOV      R1,R5
          CFI FunCall __aeabi_uldivmod
        BL       __aeabi_uldivmod
        STRD     R0,R1,[SP, #+24]
// 2677         time_local = gmtime((time_t*)&seconds);
        ADD      R0,SP,#+24
          CFI FunCall __gmtime32
        BL       __gmtime32
// 2678         S2w_Printf("\r\n%d/%d/%d,%d:%d:%d,%lld\r\n",time_local->tm_mday,
// 2679         time_local->tm_mon+1,time_local->tm_year+1900,time_local->tm_hour,
// 2680         time_local->tm_min,time_local->tm_sec,(mSeconds));
        STRD     R4,R5,[SP, #+16]
        LDR      R1,[R0, #+0]
        STR      R1,[SP, #+8]
        LDR      R1,[R0, #+4]
        STR      R1,[SP, #+4]
        LDR      R1,[R0, #+8]
        STR      R1,[SP, #+0]
        LDR      R1,[R0, #+20]
        ADDW     R3,R1,#+1900
        LDR      R1,[R0, #+16]
        ADDS     R2,R1,#+1
        LDR      R1,[R0, #+12]
        ADR.W    R0,`?<Constant "\\r\\n%d/%d/%d,%d:%d:%d,%...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 2681     }
// 2682     else
// 2683     {
// 2684         return S2W_EINVAL;
// 2685     }
// 2686     return S2W_SUCCESS;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_SystemTimeGet_1
??AppS2wCmd_SystemTimeGet_0:
        MOVS     R0,#+2
??AppS2wCmd_SystemTimeGet_1:
        ADD      SP,SP,#+36
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock23
// 2687 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%d/%d/%d,%d:%d:%d,%...">`:
        DC8 "\015\012%d/%d/%d,%d:%d:%d,%lld\015\012"
        DC8 0
// 2688 
// 2689 #ifdef S2W_IPv6_SUPPORT
// 2690 VOID
// 2691 AppS2wHdrAndIpv6_Print()
// 2692 {
// 2693     INT8 ipv6str[INET6_ADDRSTRLEN];
// 2694     INT8 routerStr[INET6_ADDRSTRLEN]={0};
// 2695     GSN_NWIF_IP_CONFIG_T nwParams;
// 2696     ULONG ipv6Router[4]={0};
// 2697      
// 2698     GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
// 2699     if((s2wLinkState != S2W_LINK_STATE_DISCONNECTED)  && (GsnNwif_Ipv6RouterGet(&s2wappMainTaskCtxt->if0.nwifCtx,ipv6Router) == GSN_SUCCESS))
// 2700     {
// 2701           S2w_ntop(ipv6Router,routerStr);
// 2702     }
// 2703     S2w_ntop(nwParams.ipv6.linkLocalAddr,ipv6str);
// 2704     S2w_Printf("\r\nIPv6-Linklocal=%s  Prefix=%d  Router=%s\r\n",ipv6str,64,routerStr );
// 2705     S2w_ntop(nwParams.ipv6.globalAddr,ipv6str);
// 2706     S2w_Printf("\nIPv6-Global=%s  Prefix=%d  Router=%s\r\n",ipv6str,64,routerStr);
// 2707 }
// 2708 #endif
// 2709 
// 2710 
// 2711 
// 2712 /**
// 2713  ******************************************************************
// 2714  * @ingroup S2w-Application
// 2715  * @brief S2w Ip address display function
// 2716  *   This function prints the ip address,sunbet and gateway address to
// 2717  *   the serial input.
// 2718  * @retval none.
// 2719  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock24 Using cfiCommon0
          CFI Function AppS2wHdrAndIpv4_Print
        THUMB
// 2720 VOID
// 2721 AppS2wHdrAndIpv4_Print()
// 2722 {
AppS2wHdrAndIpv4_Print:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 2723     GSN_NWIF_IP_CONFIG_T nwParams;
// 2724     UINT8 ipaddr[4];
// 2725     UINT8 subaddr[4];
// 2726     UINT8 gateaddr[4];
// 2727 
// 2728 
// 2729     /* get the ip address by calling the geps API
// 2730      */
// 2731     GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
        LDR.W    R4,??DataTable382
        LDR      R0,[R4, #+0]
        SUB      SP,SP,#+200
          CFI CFA R13+208
        ADD      R0,R0,#+5120
        ADD      R1,SP,#+48
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_IpConfigGet
        BL       GsnNwIf_IpConfigGet
// 2732 
// 2733     memcpy(ipaddr,(UINT8*)&(nwParams.ipv4.ipAddr),4);
        MOVS     R2,#+4
        ADD      R1,SP,#+60
        ADD      R0,SP,#+44
          CFI FunCall memcpy
        BL       memcpy
// 2734     memcpy(subaddr,(UINT8*)&(nwParams.ipv4.subnetMask),4);
        MOVS     R2,#+4
        ADD      R1,SP,#+64
        ADD      R0,SP,#+40
          CFI FunCall memcpy
        BL       memcpy
// 2735     memcpy(gateaddr,(UINT8*)&(nwParams.ipv4.gatewayIpAddr),4);
        MOVS     R2,#+4
        ADD      R1,SP,#+68
        ADD      R0,SP,#+36
          CFI FunCall memcpy
        BL       memcpy
// 2736 
// 2737 	{
// 2738 		//s2wCurrent.netConf.dhcp = 1;
// 2739 #if 0		
// 2740         memcpy(&s2wCurrent.netConf.ipAddr,(UINT8*)&(nwParams.ipv4.ipAddr),4);
// 2741         memcpy(&s2wCurrent.netConf.netMask,(UINT8*)&(nwParams.ipv4.subnetMask),4);
// 2742         memcpy(&s2wCurrent.netConf.gateway,(UINT8*)&(nwParams.ipv4.gatewayIpAddr),4);
// 2743         memcpy(&s2wCurrent.dns1,(UINT8*)&(nwParams.ipv4.dnsPriSrvrIp),4);
// 2744         memcpy(&s2wCurrent.dns2,(UINT8*)&(nwParams.ipv4.dnsSecSrvrIp),4);
// 2745 #endif		
// 2746 	}
// 2747     s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
        LDR      R0,[R4, #+0]
        LDR      R2,[SP, #+60]
        MOVW     R1,#+29988
        STR      R2,[R1, R0]
// 2748     s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
        ADDS     R0,R1,R0
        LDR      R1,[SP, #+64]
        STR      R1,[R0, #+4]
// 2749     /* print on the uart
// 2750      */
// 2751     S2w_Printf("\n    IP              SubNet         Gateway   \r\n ");
        ADR.W    R0,`?<Constant "\\n    IP              ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 2752     S2w_Printf("%d.%d.%d.%d:%d.%d.%d.%d:%d.%d.%d.%d ",ipaddr[3],ipaddr[2],ipaddr[1],ipaddr[0],
// 2753                subaddr[3],subaddr[2],subaddr[1],subaddr[0],
// 2754                gateaddr[3],gateaddr[2],gateaddr[1],gateaddr[0]);
        LDRB     R2,[SP, #+36]
        STR      R2,[SP, #+32]
        ADD      R0,SP,#+36
        ADD      R1,SP,#+40
        LDRB     R2,[R0, #+1]
        STR      R2,[SP, #+28]
        ADD      R4,SP,#+44
        LDRB     R2,[R0, #+2]
        LDRB     R0,[R0, #+3]
        LDRB     R3,[R4, #+1]
        STR      R0,[SP, #+20]
        STR      R2,[SP, #+24]
        LDRB     R0,[SP, #+40]
        LDRB     R2,[R4, #+2]
        STR      R0,[SP, #+16]
        LDRB     R0,[R1, #+1]
        STR      R0,[SP, #+12]
        LDRB     R0,[R1, #+2]
        STR      R0,[SP, #+8]
        LDRB     R0,[R1, #+3]
        LDRB     R1,[R4, #+3]
        STR      R0,[SP, #+4]
        LDRB     R0,[SP, #+44]
        STR      R0,[SP, #+0]
        ADR.W    R0,`?<Constant "%d.%d.%d.%d:%d.%d.%d....">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 2755 
// 2756 }
        ADD      SP,SP,#+200
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock24

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n    IP              ...">`:
        DC8 "\012    IP              SubNet         Gateway   \015\012 "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%d.%d.%d.%d:%d.%d.%d....">`:
        DC8 "%d.%d.%d.%d:%d.%d.%d.%d:%d.%d.%d.%d "
        DC8 0, 0, 0
// 2757 
// 2758 
// 2759 
// 2760 
// 2761 /**
// 2762  ******************************************************************
// 2763  * @ingroup S2w-Application
// 2764  * @brief serial input process function
// 2765  *    This function process each serial input command(AT) and call
// 2766  *    the corresponding function to process the command. This function
// 2767  *    also check the validity of each AT commands.
// 2768  * @param cmd - IN  command string.
// 2769  * @retval S2W_SUCCESS - operation successful.
// 2770  * @retval S2W_EINVAL  - operation failure-invalid command.
// 2771  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock25 Using cfiCommon0
          CFI Function AppS2wCommand_Process
        THUMB
// 2772 PUBLIC UINT8
// 2773 AppS2wCommand_Process(UINT8 *cmd)
// 2774 {
AppS2wCommand_Process:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOV      R6,R0
// 2775     UINT8 status = S2W_EINVAL;
// 2776     UINT8 *ptr;
// 2777     UINT8 *cmdptr;
// 2778 
// 2779     UINT32 i;
// 2780     UINT32 j=0;
// 2781 
// 2782     /* this semaphore takes care of not mixing the command response
// 2783        and incomming data
// 2784      */
// 2785     GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
        LDR.W    R9,??DataTable386
        MOV      R8,#+2
        MOVS     R5,#+0
        MOV      R1,#-1
        MOV      R0,R9
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 2786 
// 2787     /* Validate the AT sequence. */
// 2788     if (toupper(cmd[0]) != 'A' || toupper(cmd[1]) != 'T')
        LDRB     R0,[R6, #+0]
        MOVW     R10,#+27384
          CFI FunCall toupper
        BL       toupper
        CMP      R0,#+65
        BNE.N    ??AppS2wCommand_Process_0
        LDRB     R0,[R6, #+1]
          CFI FunCall toupper
        BL       toupper
        CMP      R0,#+84
        BEQ.N    ??AppS2wCommand_Process_1
// 2789     {
// 2790 		if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_SDIO)
??AppS2wCommand_Process_0:
        BL       ?Subroutine80
??CrossCallReturnLabel_452:
        LDRB     R0,[R10, R0]
        CMP      R0,#+3
        BNE.N    ??AppS2wCommand_Process_2
// 2791         {
// 2792     		UINT32 msg = APP_EVENT_S2W_EINVAL;
// 2793 		    AppMainCtx_TaskNotify(msg);
        MOVS     R0,#+46
          CFI FunCall AppMainCtx_TaskNotify
        BL       AppMainCtx_TaskNotify
// 2794 		    GsnOsal_SemRelease(&s2wSyncSemID);
        B.N      ??AppS2wCommand_Process_3
// 2795 		}
// 2796 		else
// 2797 		{
// 2798         AppS2wProcess_StatusNotify(S2W_EINVAL, 0);
??AppS2wCommand_Process_2:
        MOVS     R1,#+0
        MOV      R0,R8
          CFI FunCall AppS2wProcess_StatusNotify
        BL       AppS2wProcess_StatusNotify
// 2799         GsnOsal_SemRelease(&s2wSyncSemID);
        B.N      ??AppS2wCommand_Process_3
// 2800 		}
// 2801         return status;
// 2802     }
// 2803 
// 2804     if (cmd[2] == '\0')
??AppS2wCommand_Process_1:
        LDRB     R0,[R6, #+2]
        CBNZ.N   R0,??AppS2wCommand_Process_4
// 2805     {
// 2806         AppS2wProcess_StatusNotify(S2W_SUCCESS, 0);
        MOVS     R1,#+0
          CFI FunCall AppS2wProcess_StatusNotify
        BL       AppS2wProcess_StatusNotify
// 2807         GsnOsal_SemRelease(&s2wSyncSemID);
        B.N      ??AppS2wCommand_Process_3
// 2808         return status;
// 2809     }
// 2810     ptr = (cmd + 2);
??AppS2wCommand_Process_4:
        ADDS     R4,R6,#+2
// 2811     {
// 2812 
// 2813        cmdptr =(cmd + 2);
        ADDS     R0,R6,#+2
        B.N      ??AppS2wCommand_Process_5
// 2814 
// 2815        while((cmdptr[j]) != '\0')
// 2816 
// 2817        {
// 2818 
// 2819         if((cmdptr[j]) == '=')
// 2820 
// 2821         {
// 2822 		
// 2823 			/* Bug Fix 5886 - Command to configure max recv/recvfrom on socket is not working */
// 2824            if(((cmdptr[j-1] >='0') && (cmdptr[j-1] <='9') ) && !((cmdptr[j-2] == 'c') || (cmdptr[j-2] == 'C')))
// 2825            {
// 2826                j--;
// 2827            }
// 2828            else
// 2829            {
// 2830                j++;
// 2831            }
// 2832            break;
// 2833         }
// 2834           j++;
??AppS2wCommand_Process_6:
        MOV      R5,R1
??AppS2wCommand_Process_5:
        LDRB     R2,[R5, R0]
        CBZ.N    R2,??AppS2wCommand_Process_7
        ADDS     R1,R5,#+1
        CMP      R2,#+61
        BNE.N    ??AppS2wCommand_Process_6
        ADDS     R2,R5,R0
        LDRB     R3,[R2, #-1]
        SUBS     R3,R3,#+48
        CMP      R3,#+10
        BCS.N    ??AppS2wCommand_Process_8
        LDRB     R2,[R2, #-2]
        CMP      R2,#+99
        ITT      NE 
        CMPNE    R2,#+67
        SUBNE    R5,R5,#+1
        BNE.N    ??AppS2wCommand_Process_7
??AppS2wCommand_Process_8:
        MOV      R5,R1
// 2835 
// 2836       }
// 2837 
// 2838       if(((cmdptr[0] == '&') && (j > 2)) || (((cmdptr[1] >= '0')&&(cmdptr[1] <= '3')) &&(j == 2)))
??AppS2wCommand_Process_7:
        LDRB     R1,[R0, #+0]
        CMP      R1,#+38
        BNE.N    ??AppS2wCommand_Process_9
        CMP      R5,#+3
        BCS.N    ??AppS2wCommand_Process_10
??AppS2wCommand_Process_9:
        LDRB     R0,[R0, #+1]
        SUBS     R0,R0,#+48
        CMP      R0,#+4
        BCS.N    ??AppS2wCommand_Process_11
        CMP      R5,#+2
        BNE.N    ??AppS2wCommand_Process_11
// 2839 
// 2840       {
// 2841          if( !((cmdptr[0] == 'a') || (cmdptr[0] == 'A')))
??AppS2wCommand_Process_10:
        CMP      R1,#+97
        ITT      NE 
        CMPNE    R1,#+65
        SUBNE    R5,R5,#+1
// 2842          j--;
// 2843 
// 2844       }
// 2845 
// 2846 
// 2847    }
// 2848 
// 2849 
// 2850     /* Call the call back function corresponding to the command. */
// 2851     for (i = 0; i < sizeof(s2wCmdTable) / sizeof(s2wCmdTable[0]); i++)
??AppS2wCommand_Process_11:
        MOVS     R6,#+0
// 2852     {
// 2853         UINT32  len = strlen(s2wCmdTable[i].cmd);
??AppS2wCommand_Process_12:
        ADR.W    R0,s2wCmdTable
        LDR      R11,[R0, R6, LSL #+3]
        MOV      R0,R11
          CFI FunCall strlen
        BL       strlen
        MOV      R7,R0
// 2854 
// 2855         if (!AppS2wParse_StrnCaseCmp((char *)ptr, s2wCmdTable[i].cmd, len))
        MOV      R2,R7
        MOV      R1,R11
        MOV      R0,R4
          CFI FunCall AppS2wParse_StrnCaseCmp
        BL       AppS2wParse_StrnCaseCmp
        CBNZ.N   R0,??AppS2wCommand_Process_13
// 2856         {
// 2857          if(len != j)
        CMP      R7,R5
        BEQ.N    ??AppS2wCommand_Process_14
// 2858 
// 2859          {
// 2860 
// 2861              if(!((len == 3) && ((ptr[2] == 's') || (ptr[2] == 'S')))   /* AT+WS */
// 2862                 && !((len == 10) && ((ptr[9] == 'p') || (ptr[9] == 'P')))  /* AT+PSDPSLEEP */
// 2863                 && !((len == 10) && ((ptr[9] == 'k') || (ptr[9] == 'K'))) /* AT+P2PPROVOK */
// 2864 #ifdef S2W_IPv6_SUPPORT
// 2865                 && !((ptr[len-2] == '6') && ((ptr[len-3] == 'v') || ptr[len-3] == 'V'))/* IPv6 */
// 2866 #endif //S2W_IPv6_SUPPORT
// 2867                 )
        CMP      R7,#+3
        BNE.N    ??AppS2wCommand_Process_15
        LDRB     R0,[R4, #+2]
        CMP      R0,#+115
        BEQ.N    ??AppS2wCommand_Process_14
        CMP      R0,#+83
        BNE.N    ??AppS2wCommand_Process_16
        B.N      ??AppS2wCommand_Process_14
??AppS2wCommand_Process_15:
        CMP      R7,#+10
        BNE.N    ??AppS2wCommand_Process_16
        LDRB     R0,[R4, #+9]
        CMP      R0,#+112
        IT       NE 
        CMPNE    R0,#+80
        BEQ.N    ??AppS2wCommand_Process_14
        CMP      R0,#+107
        IT       NE 
        CMPNE    R0,#+75
        BNE.N    ??AppS2wCommand_Process_16
// 2868              {
// 2869                  status = S2W_EINVAL;
// 2870                  break;
// 2871              }
// 2872 
// 2873          }
// 2874 
// 2875             status = s2wCmdTable[i].process(ptr + len);
??AppS2wCommand_Process_14:
        ADR.W    R1,s2wCmdTable
        ADD      R1,R1,R6, LSL #+3
        ADDS     R0,R7,R4
        LDR      R1,[R1, #+4]
          CFI FunCall
        BLX      R1
        MOV      R8,R0
// 2876             break;
        B.N      ??AppS2wCommand_Process_16
// 2877         }
// 2878     }
??AppS2wCommand_Process_13:
        ADDS     R6,R6,#+1
        CMP      R6,#+188
        BCC.N    ??AppS2wCommand_Process_12
// 2879 	
// 2880 #ifdef S2W_EXT_FLASH_FS_SUPPORT	
// 2881     for (i = 0; i < sizeof(s2wExtFlashCmdTable) / sizeof(s2wExtFlashCmdTable[0]); i++)
// 2882 	{
// 2883         UINT32  len = strlen(s2wExtFlashCmdTable[i].cmd);
// 2884 
// 2885         if (!AppS2wParse_StrnCaseCmp((char *)ptr, s2wExtFlashCmdTable[i].cmd, len))
// 2886         {
// 2887             status = s2wExtFlashCmdTable[i].process(ptr + len);
// 2888             break;
// 2889         }
// 2890     }
// 2891 #endif
// 2892     /* Notify the status to the host
// 2893      */
// 2894     if((0 == s2wappMainTaskCtxt->dpSleep ) && (stbySuccess == 0))
??AppS2wCommand_Process_16:
        LDR.W    R1,??DataTable382
        LDR      R1,[R1, #+0]
        MOVW     R0,#+27388
        LDR      R0,[R0, R1]
        CMP      R0,#+0
        ITTT     EQ 
        LDREQ.W  R0,??DataTable388_1
        LDRBEQ   R0,[R0, #+0]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCommand_Process_17
// 2895     {
// 2896         AppS2wProcess_StatusNotify(status, 0);
        MOVS     R1,#+0
        MOV      R0,R8
          CFI FunCall AppS2wProcess_StatusNotify
        BL       AppS2wProcess_StatusNotify
// 2897     }
// 2898 
// 2899     // flush out all response for spi DMA
// 2900        if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
??AppS2wCommand_Process_17:
        LDR.W    R0,??DataTable382
        LDR      R0,[R0, #+0]
        LDRB     R0,[R10, R0]
        CMP      R0,#+2
        IT       EQ 
          CFI FunCall s2wSpiFs_Flush
        BLEQ     s2wSpiFs_Flush
// 2901        {
// 2902            s2wSpiFs_Flush();
// 2903        }
// 2904 
// 2905     GsnOsal_SemRelease(&s2wSyncSemID);
??AppS2wCommand_Process_3:
        MOV      R0,R9
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
// 2906     return status;
        MOV      R0,R8
        POP      {R1,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock25
// 2907 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378:
        DC32     s2wSslConf

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378_1:
        DC32     s2w_ssl_cert_table

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378_2:
        DC32     httpConfAtCmd

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378_3:
        DC32     headerTypesModified

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378_4:
        DC32     OtaFwupConfParam

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable378_5:
        DC32     headerTypes

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
s2wCmdTable:
        DC32 `?<Constant "+WA=">`, AppS2wCmd_Wassoc, `?<Constant "+WPHYMODE=">`
        DC32 AppS2wCmd_Wphymode, `?<Constant "+BCONMISSTHRHLD=">`
        DC32 AppS2wCmd_BeaconMissThresholdSet, `?<Constant "+TKIPCNTRMSR=">`
        DC32 AppS2wCmd_TkipContrMsrStart, `?<Constant "+TKIPSEQSET=">`
        DC32 AppS2wCmd_TkipSeqNumGet, `?<Constant "+WLANSTATS">`
        DC32 AppS2wCmd_WlanStatsGet, `?<Constant "+RXFILTER=">`
        DC32 AppS2wCmd_WlanRecvFiltrSet, `?<Constant "+WRTS=">`
        DC32 AppS2wCmd_RtsEnable, `?<Constant "+WBLOCKACK=">`
        DC32 AppS2wCmd_BlockAckReq, `?<Constant "+WAMSDU=">`
        DC32 AppS2wCmd_AmsduReqt, `?<Constant "+WAMPDU=">`, AppS2wCmd_AmpduReq
        DC32 `?<Constant "+TXFAILLMT=">`, AppS2wCmd_FrameTxFailCntLmitSet
        DC32 `?<Constant "+NDHCP=">`, AppS2wCmd_Ndhcp, `?<Constant "+NSTAT=">`
        DC32 AppS2wCmd_Nstat, `?<Constant "+CID=">`, AppS2wCmd_CidInfo
        DC32 `?<Constant "+NCLOSEALL">`, AppS2wCmd_Ncloseall
        DC32 `?<Constant "+NCLOSE=">`, AppS2wCmd_Nclose
        DC32 `?<Constant "+WRXACTIVE=">`, AppS2wCmd_Wradio
        DC32 `?<Constant "+WRETRY=">`, AppS2wCmd_Wretry
        DC32 `?<Constant "+NCTCP=">`, AppS2wCmd_Nctcp, `?<Constant "+NCUDP=">`
        DC32 AppS2wCmd_Ncudp, `?<Constant "+NSTCP=">`, AppS2wCmd_Nstcp
        DC32 `?<Constant "+NSUDP=">`, AppS2wCmd_Nsudp
        DC32 `?<Constant "+MDNSSTART">`, AppS2wCmd_MdnsInit
        DC32 `?<Constant "+MDNSSTOP">`, AppS2wCmd_MdnsDeInit
        DC32 `?<Constant "+MDNSANNOUNCE">`, AppS2wCmd_MdnsAnnounceAll
        DC32 `?<Constant "+MDNSHNREG=">`, AppS2wCmd_MdnsHostNameReg
        DC32 `?<Constant "+MDNSSRVREG=">`, AppS2wCmd_MdnsServiceReg
        DC32 `?<Constant "+MDNSSD=">`, AppS2wCmd_MdnsSrvcDiscover
        DC32 `?<Constant "+MDNSHNDEREG=">`, AppS2wCmd_MdnsHostNmDeReg
        DC32 `?<Constant "+MDNSSRVDEREG=">`, AppS2wCmd_MdnsSrvDeReg
        DC32 `?<Constant "+NXSETSOCKOPT=">`, AppS2wCmd_SetSockOp
        DC32 `?<Constant "+NMAC=">`, AppS2wCmd_Nmac, `?<Constant "+WSEC=">`
        DC32 AppS2wCmd_SecuritySet, `?<Constant "+WAUTH=">`, AppS2wCmd_Wauth
        DC32 `?<Constant "+WWPA=">`, AppS2wCmd_Wwpa, `?<Constant "+WPAPSK=">`
        DC32 AppS2wCmd_WpaPsk, `?<Constant "+WPSK=">`, AppS2wCmd_Psk
        DC32 `?<Constant "+WWEPCONF=">`, AppS2wCmd_WwepConf
        DC32 `?<Constant "+WWEP">`, AppS2wCmd_Wwep
        DC32 `?<Constant "+WSYNCINTRL=">`, S2w_CmdSyncLossIntrvlSet
        DC32 `?<Constant "+WSTATUS">`, AppS2wCmd_Wstatus, `?<Constant "+WST=">`
        DC32 AppS2wCmd_scanTimeSet, `?<Constant "+WS">`, AppS2wCmd_Wscan
        DC32 `?<Constant "+NSET=">`, AppS2wCmd_Nset, `?<Constant "+WM=">`
        DC32 AppS2wCmd_Wmode, `?<Constant "+WRXPS=">`, AppS2wCmd_PowerSave
        DC32 `?<Constant "+WIEEEPSPOLL=">`, AppS2wCmd_ieeePsPollSet
        DC32 `?<Constant "+WP=">`, AppS2wCmd_Wpower, `?<Constant "+WD">`
        DC32 AppS2wCmd_Disconnect, `?<Constant "+WRSSI=">`, AppS2wCmd_Wrssi
        DC32 `?<Constant "+WRATE=">`, AppS2wCmd_Wrate, `?<Constant "+WAPSM=">`
        DC32 AppS2wCmd_AssocPSModeSet, `?<Constant "+MCSTSET=">`
        DC32 AppS2wCmd_McastRecvSet, `?<Constant "+WIEEEPSPOLL=">`
        DC32 AppS2wCmd_ieeePsPollSet, `?<Constant "+NARP=">`
        DC32 AppS2wCmd_ArpEntryGet, `?<Constant "+NARPCHACHEEN=">`
        DC32 AppS2wCmd_ArpCacheEn, `?<Constant "+NARPCHACHEDEL">`
        DC32 AppS2wCmd_ArpCacheDel, `?<Constant "+NARPSET=">`
        DC32 AppS2wCmd_ArpEntrySet, `?<Constant "+NARPDELETE=">`
        DC32 AppS2wCmd_ArpEntryDelete, `?<Constant "+NARPAUTO=">`
        DC32 AppS2wCmd_ArpAutoSet, `?<Constant "+srvvalidationen=">`
        DC32 AppS2wCmad_WsrvrValidationEn, `?<Constant "+WEAPTIMECHK=">`
        DC32 AppS2wCmad_WeapTimeChk, `?<Constant "B=">`, AppS2wCmd_BaudRate
        DC32 `?<Constant "+UARTFLVL=">`, AppS2wCmd_UartFifoLevel
        DC32 `?<Constant "&R">`, AppS2wCmd_HardFlow, `?<Constant "&K">`
        DC32 AppS2wCmd_SoftFlow, `?<Constant "&F">`, AppS2wCmd_Factory
        DC32 `?<Constant "&V">`, AppS2wCmd_ConfigOutput, `?<Constant "&W">`
        DC32 AppS2wCmd_Write, `?<Constant "Z">`, AppS2wCmd_read
        DC32 `?<Constant "&Y">`, AppS2wCmd_SetDefaultProfile, `?<Constant "S">`
        DC32 AppS2wCmd_Settings, `?<Constant "E">`, AppS2wCmd_Echo
        DC32 `?<Constant "V">`, AppS2wCmd_Verbose, `?<Constant "I">`
        DC32 AppS2wCmd_IdOutput, `?<Constant "A">`, AppS2wCmd_AutoConnect
        DC32 `?<Constant "H">`, AppS2wCmd_Disconnect, `?<Constant "C">`
        DC32 AppS2wCmd_Acmode, `?<Constant "O">`, AppS2wCmd_GoOnline
        DC32 `?<Constant "+VER=">`, App2wCmd_Version, `?<Constant "+MCSTSET=">`
        DC32 AppS2wCmd_McastRecvSet, `?<Constant "+BDATA=">`
        DC32 S2w_CmdBulkDataState, `?<Constant "+RESET">`, AppS2wCmd_reset
        DC32 `?<Constant "+APCONF=">`, AppS2wCmd_ApConf
        DC32 `?<Constant "+APCLIENTINFO=">`, AppS2wCmd_ApClientInfoGet
        DC32 `?<Constant "+L2CONFIG=">`, AppS2w_CmdL2ConfigSet
        DC32 `?<Constant "+NTIMESYNC=">`, AppS2wCmd_ntpTimeSet
        DC32 `?<Constant "+DNS=">`, AppS2wCmd_Dns, `?<Constant "+DHCPSRVR=">`
        DC32 AppS2wCmd_DhcpSrvr, `?<Constant "+DHCPSRVRCFG=">`
        DC32 AppS2wCmd_DhcpSrvrConfig, `?<Constant "+SETTIME=">`
        DC32 AppS2wCmd_SystemTimeSet, `?<Constant "+GETTIME=">`
        DC32 AppS2wCmd_SystemTimeGet, `?<Constant "+WWPS=">`, AppS2wCmd_Wwps
        DC32 `?<Constant "+TCERTADD=">`, AppS2wCmd_SslCertificateAdd
        DC32 `?<Constant "+TCERTDEL=">`, AppS2wCmd_SslCertificateDelete
        DC32 `?<Constant "+WEAP=">`, AppS2wCmd_Weap, `?<Constant "+WEAPCONF=">`
        DC32 AppS2wCmd_WeapConf, `?<Constant "+HTTPOPEN=">`
        DC32 AppS2wCmd_HttpClientOpen, `?<Constant "+HTTPCLOSE=">`
        DC32 AppS2wCmd_HttpClientClose, `?<Constant "+HTTPCONF=">`
        DC32 AppS2wCmd_HttpClientConfig, `?<Constant "+HTTPCONFDEL=">`
        DC32 AppS2wCmd_HttpClientConfigDel, `?<Constant "+HTTPSEND=">`
        DC32 AppS2wCmd_HttpClientSend, `?<Constant "+SOTAFWUPCONF=">`
        DC32 AppS2wCmd_OtaFwupConf, `?<Constant "+SOTAFWUPSTART">`
        DC32 AppS2wCmd_OtaFwupExtFlashStart, `?<Constant "+SOTAFWUPROLLBACK">`
        DC32 AppS2wCmd_OtaFwupRollBack, `?<Constant "+WAUTO=">`
        DC32 AppS2wCmd_Wauto, `?<Constant "+NAUTO=">`, AppS2wCmd_Nauto
        DC32 `?<Constant "+PSDPSLEEP">`, AppS2wCmd_PowerSaveDpsleep
        DC32 `?<Constant "+PING=">`, AppS2wCmd_Ping
        DC32 `?<Constant "+MQTT_PUBLISH">`, App2wCmd_mqtt_publish
        DC32 `?<Constant "+DNSSET=">`, AppS2wCmd_DnsServerSet
        DC32 `?<Constant "+DNSLOOKUP=">`, AppS2wCmd_DnsLookup
        DC32 `?<Constant "+WREGDOMAIN=">`, AppS2wCmd_RegDomainSet
        DC32 `?<Constant "+SSLOPEN=">`, AppS2wCmd_SSLOpen
        DC32 `?<Constant "+SSLCLOSE=">`, AppS2wCmd_SSLClose
        DC32 `?<Constant "+SSLCONF=">`, AppS2wCmd_SslConfig
        DC32 `?<Constant "+WRFTESTSTART">`, AppS2wCmd_RfTestStart
        DC32 `?<Constant "+WRFTESTSTOP">`, AppS2wCmd_RfTestStop
        DC32 `?<Constant "+WFRAMETXTEST=">`, AppS2wCmd_RfTestTxStart
        DC32 `?<Constant "+WTX99TEST=">`, AppS2wCmd_RfTestTx99Start
        DC32 `?<Constant "+WTX100TEST=">`, AppS2wCmd_RfTestTx100Start
        DC32 `?<Constant "+WCARWAVTEST=">`, AppS2wCmd_RfTestCarrierWaveStart
        DC32 `?<Constant "+WTXSTOP=">`, AppS2wCmd_RfTestTxStop
        DC32 `?<Constant "+WRXTEST=">`, AppS2wCmd_RfTestRxStart
        DC32 `?<Constant "+WRXSTOP">`, AppS2wCmd_RfTestRxStop
        DC32 `?<Constant "+WCALIB=">`, AppS2wCmd_WlanCalib
        DC32 `?<Constant "+WOTPRD=">`, AppS2wCmd_WlanOtpRead
        DC32 `?<Constant "+AOTPRD=">`, AppS2wCmd_AppOtpRead
        DC32 `?<Constant "+WEBPROV=">`, APPS2wCmd_WebProv
        DC32 `?<Constant "+WEBPROVSTOP">`, APPS2wCmd_WebProvStop
        DC32 `?<Constant "+NURIREDIR=">`, APPS2wCmd_AddRedirURI
        DC32 `?<Constant "+WEBSERVER=">`, AppS2wCmd_WebServer
        DC32 `?<Constant "+URIRECV=">`, AppS2wCmd_CfgUri
        DC32 `?<Constant "+XMLSEND=">`, AppS2wCmd_XmlSend
        DC32 `?<Constant "+XMLPARSE=">`, AppS2wCmd_XmlParseEnable
        DC32 `?<Constant "+PSSTBY=">`, AppS2wCmd_PowerSaveStby
        DC32 `?<Constant "+STORENWCONN">`, AppS2wCmd_NwConnStore
        DC32 `?<Constant "+RESTORENWCONN">`, AppS2wCmd_NwConnRestore
        DC32 `?<Constant "+HIBERNATE=">`, AppS2wCmd_Hibernate
        DC32 `?<Constant "+NCMAUTO=">`, AppS2wCmd_NcmAuto
        DC32 `?<Constant "+NCMAUTOCONF=">`, AppS2wCmd_NcmAutoConf
        DC32 `?<Constant "+ASYNCMSGFMT=">`, AppS2wCmd_AsyncMsgFmt
        DC32 `?<Constant "+NIPMULTICASTJOIN=">`, AppS2wCmd_IpMulticastJoin
        DC32 `?<Constant "+NIPMULTICASTLEAVE=">`, AppS2wCmd_IpMulticastLeave
        DC32 `?<Constant "+DGPIO=">`, AppS2wCmd_Dgpio
        DC32 `?<Constant "+UNSOLICITEDTX=">`, S2w_CmdUnSolicitedTx
        DC32 `?<Constant "+UNSOLICITEDRX=">`, S2w_CmdUnSolicitedRx
        DC32 `?<Constant "+UNSOLICITEDRXSTOP">`, S2w_CmdUnSolicitedRxstop
        DC32 `?<Constant "+UAMCCA=">`, S2w_CmdUnSolicitedCcaConf
        DC32 `?<Constant "+adcconf=">`, AppS2wCmd_AdcConf
        DC32 `?<Constant "+adcstart">`, AppS2wCmd_AdcStart
        DC32 `?<Constant "+adcread=">`, AppS2wCmd_AdcRead
        DC32 `?<Constant "+adcstop">`, AppS2wCmd_AdcStop
        DC32 `?<Constant "+EXFLASHINIT=">`, AppS2wCmd_ExtFlashInit
        DC32 `?<Constant "+EXFLASHWRITE=">`, AppS2wCmd_ExtFlashWrite
        DC32 `?<Constant "+EXFLASHREAD=">`, AppS2wCmd_ExtFlashRead
        DC32 `?<Constant "+EXFLASHERASE=">`, AppS2wCmd_ExtFlashErase
        DC32 `?<Constant "+EXFLASHCERASE">`, AppS2wCmd_ExtFlashChipErase
        DC32 `?<Constant "+EXFLASHSPICONF=">`, AppS2wCmd_ExtFlashSpiConf
        DC32 `?<Constant "+WSTAPSCFG=">`, AppS2wCmd_WlanStaPsCfg
        DC32 `?<Constant "+WAPPSCFG=">`, AppS2wCmd_WlanApPsCfg
        DC32 `?<Constant "+PSPOLLINTRL=">`, S2w_CmdPsPollIntervelset
        DC32 `?<Constant "+WKEEPALIVE=">`, S2w_CmdPsPollIntervelset
        DC32 `?<Constant "+PWMSTART=">`, AppS2wCmd_PwmStart
        DC32 `?<Constant "+PWMSTOP=">`, AppS2wCmd_PwmStop
        DC32 `?<Constant "+PWMCNTRL=">`, AppS2wCmd_PwmCtrl
        DC32 `?<Constant "+MEMREAD=">`, AppS2wCmd_MemRead
        DC32 `?<Constant "+MEMWRITE=">`, AppS2wCmd_MemWrite
        DC32 `?<Constant "+LOGLVL=">`, AppS2wCmd_LogLevelSet
        DC32 `?<Constant "+BCHKSTRT=">`, AppS2wCmd_BattCheckStart
        DC32 `?<Constant "+BATTVALGET">`, AppS2wCmd_BattValueGet
        DC32 `?<Constant "+BCHK=">`, AppS2wCmd_BattCheckSet
        DC32 `?<Constant "+BCHKSTOP">`, AppS2wCmd_BattCheckStop
        DC32 `?<Constant "+BATTLVLSET=">`, AppS2wCmd_BattLvlSet
        DC32 `?<Constant "+CLKTUNE=">`, App_ClkTuneCmd
        DC32 `?<Constant "+COAPOPEN=">`, AppS2wCmd_CoapOpen
        DC32 `?<Constant "+COAPSENDRECIEVE=">`, AppS2wCmd_CoapSend
        DC32 `?<Constant "+COAPCLOSE=">`, AppS2wCmd_CoapClose
        DC32 `?<Constant "+COAPOPTCONF=">`, AppS2wCmd_CoapSetOption
        DC32 `?<Constant "+COAPOPTCONFDEL=">`, AppS2wCmd_CoapRemoveOption
        DC32 `?<Constant "+WBACKEN=">`, AppS2wCmd_BaBitMapSet
        DC32 `?<Constant "+WRADIOSTATE=">`, AppS2wCmd_RadioStateGet
        DC32 `?<Constant "+WASSOCCONF=">`, AppS2wCmd_SetAssocTimeout
        DC32 `?<Constant "+TEMPVALGET=">`, AppS2wCmd_TempGet
        DC32 `?<Constant "+WTEMPREAD=">`, AppS2wCmd_TempReadStart
        DC32 `?<Constant "+CRYPTOEN=">`, AppS2wCmd_HwCryptoEn
        DC32 `?<Constant "+GRATARP">`, AppS2wCmd_GratArpSend
// 2908 
// 2909 /**
// 2910  ******************************************************************
// 2911  * @ingroup S2w-Application
// 2912  * @brief Process the AT+CID command
// 2913  * @param ptr Pointer to the user input string.
// 2914  * @return status.
// 2915  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock26 Using cfiCommon0
          CFI Function AppS2wCmd_CidInfo
        THUMB
// 2916 PUBLIC UINT8
// 2917 AppS2wCmd_CidInfo(UINT8 *ptr)
// 2918 {
AppS2wCmd_CidInfo:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
        SUB      SP,SP,#+212
          CFI CFA R13+248
// 2919     UINT32 cidnos =0,i=0;
        MOVS     R1,#+0
        STR      R1,[SP, #+12]
        MOVS     R4,#+0
// 2920     UINT8 status = S2W_EINVAL;
// 2921     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R1,[R0, #+0]
        MOVS     R5,#+2
        CMP      R1,#+63
        ITT      EQ 
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_CidInfo_0
// 2922     {
// 2923         S2W_CID_INFO_T cidinfo[16];
// 2924         memset(cidinfo,0,sizeof(cidinfo));
        MOVS     R2,#+192
        MOVS     R1,#+0
        ADD      R0,SP,#+16
          CFI FunCall memset
        BL       memset
// 2925         status = AppS2wHal_CidInfoGet(cidinfo,&cidnos);
        ADD      R1,SP,#+12
        ADD      R0,SP,#+16
          CFI FunCall AppS2wHal_CidInfoGet
        BL       AppS2wHal_CidInfoGet
        MOV      R5,R0
// 2926         if (cidnos == 0)
        LDR      R0,[SP, #+12]
        CBNZ.N   R0,??AppS2wCmd_CidInfo_1
// 2927         {
// 2928             S2w_Printf("\r\n No valid Cids\r\n");
        ADR.W    R0,`?<Constant "\\r\\n No valid Cids\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 2929         }
// 2930         else
// 2931         {
// 2932             S2w_Printf("\r\nCID\tTYPE\tMODE\tLOCAL PORT\tREMOTE PORT\tREMOTE IP\r\n");
// 2933             for(i=0;i<cidnos;i++)
// 2934             {
// 2935             	// fix for issue 5884 added-cid in hex not in decimal
// 2936                 S2w_Printf("%x\t",cidinfo[i].cid);
// 2937                 if( cidinfo[i].conType ==1)
// 2938                 {
// 2939                     S2w_Printf("UDP\t");
// 2940                 }
// 2941                 else
// 2942                 {
// 2943 					if (1 == AppS2w_ConnStateGet(cidinfo[i].cid))
// 2944 					{
// 2945 						S2w_Printf("TCP-SSL ");
// 2946 					}
// 2947 					else if(AppS2w_ConnHttpStateGet(cidinfo[i].cid) == 1)
// 2948 					{
// 2949 						S2w_Printf("HTTP\t");
// 2950 					}
// 2951 					else
// 2952                     {
// 2953                         S2w_Printf("TCP\t");
// 2954                     }
// 2955                 }
// 2956                 cidinfo[i].conMode?S2w_Printf("SERVER\t"):
// 2957                                    S2w_Printf("CLIENT\t");
// 2958 #ifdef S2W_IPv6_SUPPORT
// 2959             if(s2wCidList[i].addrType & ADDR_TYPE_IPv6)
// 2960             {
// 2961               INT8 ipv6str[INET6_ADDRSTRLEN];
// 2962               S2w_ntop((ULONG*)s2wCidList[i].remoteIpv6,ipv6str);
// 2963               S2w_Printf("%4d\t\t%4d\t\t %s \r\n",cidinfo[i].localPort,cidinfo[i].remotePort,ipv6str);  
// 2964               
// 2965              }
// 2966             else
// 2967 #endif 
// 2968             
// 2969                 S2w_Printf("%4d\t\t%4d\t\t%3d.%3d.%3d.%3d\r\n",cidinfo[i].localPort,
// 2970                           cidinfo[i].remotePort,cidinfo[i].remoteIp[0],cidinfo[i].remoteIp[1],
// 2971                            cidinfo[i].remoteIp[2],cidinfo[i].remoteIp[3]);
// 2972             }
// 2973         }
// 2974 
// 2975     }
// 2976     return status;
??AppS2wCmd_CidInfo_0:
        MOV      R0,R5
        ADD      SP,SP,#+212
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI CFA R13+248
??AppS2wCmd_CidInfo_1:
        ADR.W    R0,`?<Constant "\\r\\nCID\\tTYPE\\tMODE\\tLOCAL...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADR.W    R10,`?<Constant "HTTP\\t">`
        ADR.W    R11,`?<Constant "TCP-SSL ">`
        ADR.W    R8,`?<Constant "UDP\\t">`
        ADR.W    R9,??DataTable384  ;; "%x\t"
        B.N      ??AppS2wCmd_CidInfo_2
??AppS2wCmd_CidInfo_3:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        LDRB     R0,[R6, #+9]
        STR      R0,[SP, #+8]
        LDRB     R0,[R6, #+8]
        STR      R0,[SP, #+4]
        LDRB     R0,[R6, #+7]
        STR      R0,[SP, #+0]
        LDRB     R3,[R6, #+6]
        LDRH     R2,[R6, #+4]
        LDRH     R1,[R6, #+2]
        ADR.W    R0,`?<Constant "%4d\\t\\t%4d\\t\\t%3d.%3d.%3d...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADDS     R4,R4,#+1
??AppS2wCmd_CidInfo_2:
        LDR      R0,[SP, #+12]
        CMP      R4,R0
        BCS.N    ??AppS2wCmd_CidInfo_0
        MOVS     R0,#+12
        MUL      R7,R0,R4
        ADD      R0,SP,#+16
        ADDS     R6,R7,R0
        MOV      R0,R9
        LDRB     R1,[R6, #+10]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADD      R0,SP,#+16
        LDRB     R0,[R7, R0]
        CMP      R0,#+1
        IT       EQ 
        MOVEQ    R0,R8
        BEQ.N    ??AppS2wCmd_CidInfo_4
        LDRB     R0,[R6, #+10]
          CFI FunCall AppS2w_ConnStateGet
        BL       AppS2w_ConnStateGet
        CMP      R0,#+1
        IT       EQ 
        MOVEQ    R0,R11
        BEQ.N    ??AppS2wCmd_CidInfo_4
        LDRB     R0,[R6, #+10]
          CFI FunCall AppS2w_ConnHttpStateGet
        BL       AppS2w_ConnHttpStateGet
        CMP      R0,#+1
        ITE      EQ 
        MOVEQ    R0,R10
        ADRNE.W  R0,`?<Constant "TCP\\t">`
??AppS2wCmd_CidInfo_4:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        LDRB     R0,[R6, #+1]
        CMP      R0,#+0
        ITE      NE 
        ADRNE.W  R0,`?<Constant "SERVER\\t">`
        ADREQ.W  R0,`?<Constant "CLIENT\\t">`
        B.N      ??AppS2wCmd_CidInfo_3
          CFI EndBlock cfiBlock26
// 2977 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n No valid Cids\\r\\n">`:
        DC8 "\015\012 No valid Cids\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nCID\\tTYPE\\tMODE\\tLOCAL...">`:
        DC8 0DH, 0AH, 43H, 49H, 44H, 9, 54H, 59H
        DC8 50H, 45H, 9, 4DH, 4FH, 44H, 45H, 9
        DC8 4CH, 4FH, 43H, 41H, 4CH, 20H, 50H, 4FH
        DC8 52H, 54H, 9, 52H, 45H, 4DH, 4FH, 54H
        DC8 45H, 20H, 50H, 4FH, 52H, 54H, 9, 52H
        DC8 45H, 4DH, 4FH, 54H, 45H, 20H, 49H, 50H
        DC8 0DH, 0AH, 0
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "HTTP\\t">`:
        DC8 "HTTP\t"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TCP-SSL ">`:
        DC8 "TCP-SSL "
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "UDP\\t">`:
        DC8 "UDP\t"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%4d\\t\\t%4d\\t\\t%3d.%3d.%3d...">`:
        DC8 "%4d\t\t%4d\t\t%3d.%3d.%3d.%3d\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TCP\\t">`:
        DC8 "TCP\t"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "SERVER\\t">`:
        DC8 "SERVER\t"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "CLIENT\\t">`:
        DC8 "CLIENT\t"
// 2978 
// 2979 /**
// 2980  ******************************************************************
// 2981  * @ingroup S2w-Application
// 2982  * @brief Process the AT+BDATA command
// 2983  *      This function set/reset bulk mode.
// 2984  * @param ptr Pointer to the user input string.
// 2985  * @retval S2W_SUCCESS - operation successful.
// 2986  * @retval S2W_EINVAL  - operation failure-invalid command.
// 2987  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock27 Using cfiCommon0
          CFI Function S2w_CmdBulkDataState
          CFI NoCalls
        THUMB
// 2988 UINT8
// 2989 S2w_CmdBulkDataState(UINT8 *ptr)
// 2990 {
S2w_CmdBulkDataState:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 2991     UINT8 status;
// 2992     UINT8 mode;
// 2993 
// 2994     status = AppS2wParse_Boolean(ptr, &mode);
        BL       ?Subroutine60
// 2995     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_385:
        CBNZ.N   R0,??S2w_CmdBulkDataState_0
// 2996     {
// 2997         return status;
// 2998     }
// 2999     s2wCurrent.bulkTxEnable = mode;
        LDR.W    R0,??DataTable393
        LDRB     R1,[SP, #+0]
        STRB     R1,[R0, #+468]
// 3000     return status;
        MOVS     R0,#+0
??S2w_CmdBulkDataState_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock27
// 3001 }
// 3002 
// 3003 /**
// 3004  ******************************************************************
// 3005  * @ingroup S2w-Application
// 3006  * @brief Process the AT+NCTCP Command.
// 3007  * @param ptr Pointer to the user input string.
// 3008  * @return status.
// 3009  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock28 Using cfiCommon0
          CFI Function AppS2wCmd_Nctcp
        THUMB
// 3010 PUBLIC UINT8
// 3011 AppS2wCmd_Nctcp(UINT8 *ptr)
// 3012 {
AppS2wCmd_Nctcp:
        PUSH     {LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+4
        SUB      SP,SP,#+68
          CFI CFA R13+72
// 3013     S2W_NETDATA_T peerData;
// 3014     UINT8 *temp = ptr;
        STR      R0,[SP, #+4]
// 3015     UINT32 status;
// 3016     UINT8 cid;
// 3017 
// 3018     if (s2wIsAutoconnected)
        LDR.W    R0,??DataTable393_1
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Nctcp_0
// 3019     {
// 3020         return S2W_EINVAL;
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Nctcp_1
// 3021     }
// 3022     if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
??AppS2wCmd_Nctcp_0:
        LDR.W    R0,??DataTable393_2
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Nctcp_2
// 3023     {
// 3024         return S2W_LINK_LOST_EVT;
        MOVS     R0,#+9
        B.N      ??AppS2wCmd_Nctcp_1
// 3025     }
// 3026     status = AppS2wParse_AddrPort(&temp, &peerData);
??AppS2wCmd_Nctcp_2:
        ADD      R1,SP,#+8
        ADD      R0,SP,#+4
          CFI FunCall AppS2wParse_AddrPort
        BL       AppS2wParse_AddrPort
// 3027     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nctcp_1
// 3028     {
// 3029         return status;
// 3030     }
// 3031 
// 3032     peerData.proto = S2W_NETDATA_PROTO_TCP;
        MOVS     R0,#+1
        STRB     R0,[SP, #+9]
// 3033     peerData.mode = S2W_NETDATA_MODE_CLIENT;
// 3034 
// 3035     status = AppS2wHal_NetTcpClient(&peerData, &cid);
        ADD      R1,SP,#+0
        MOVS     R0,#+0
        STRB     R0,[SP, #+8]
        ADD      R0,SP,#+8
          CFI FunCall AppS2wHal_NetTcpClient
        BL       AppS2wHal_NetTcpClient
// 3036     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nctcp_1
// 3037     {
// 3038         return status;
// 3039     }
// 3040 
// 3041     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
        LDRB     R1,[SP, #+0]
        BL       ??Subroutine119_0
// 3042     return status;
??CrossCallReturnLabel_567:
        MOVS     R0,#+0
??AppS2wCmd_Nctcp_1:
        ADD      SP,SP,#+68
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock28
// 3043 
// 3044 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable381:
        DC32     s2wCidList
// 3045 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock29 Using cfiCommon0
          CFI Function AppS2wCmd_scanTimeSet
        THUMB
// 3046 PUBLIC UINT8
// 3047 AppS2wCmd_scanTimeSet(UINT8 *ptr)
// 3048 {
AppS2wCmd_scanTimeSet:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+16
          CFI CFA R13+32
// 3049     UINT8 status = S2W_SUCCESS;
// 3050     UINT8 *p;
// 3051     UINT32 minTime=0,maxTime=0,passiveTime=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
        STR      R0,[SP, #+0]
        STR      R0,[SP, #+8]
// 3052 
// 3053     if (ptr[0] == '?' && ptr[1] == '\0')
        LDR.W    R4,??DataTable393
        LDR      R0,[SP, #+16]
        LDRB     R0,[R0, #+0]
        ADDW     R5,R4,#+462
        CMP      R0,#+63
        ITTT     EQ 
        LDREQ    R0,[SP, #+16]
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_scanTimeSet_0
// 3054     {
// 3055         S2w_Printf("\r\nMinScanTime=%d\r\nMaxScanTime=%d\r\n", s2wCurrent.minScanTime,
// 3056                     s2wCurrent.registers[S2W_REG_SCAN_TIME]);
        LDRH     R2,[R4, #+462]
        LDRH     R1,[R5, #+8]
        ADR.W    R0,`?<Constant "\\r\\nMinScanTime=%d\\r\\nMax...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3057         return S2W_SUCCESS;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_scanTimeSet_1
// 3058     }
// 3059     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_scanTimeSet_0:
        BL       ?Subroutine30
// 3060     if (!p)
??CrossCallReturnLabel_95:
        CBZ.N    R0,??AppS2wCmd_scanTimeSet_2
// 3061     {
// 3062         return S2W_EINVAL;
// 3063     }
// 3064     status = AppS2wParse_Int(p, &minTime);
        BL       ?Subroutine52
// 3065     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_332:
        CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
// 3066     {
// 3067         return status;
// 3068     }
// 3069     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine30
// 3070     if (!p)
??CrossCallReturnLabel_94:
        CBZ.N    R0,??AppS2wCmd_scanTimeSet_2
// 3071     {
// 3072         return S2W_EINVAL;
// 3073     }
// 3074     status = AppS2wParse_Int(p, &maxTime);
        BL       ?Subroutine51
// 3075     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_309:
        CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
// 3076     {
// 3077         return status;
// 3078     }
// 3079     if(maxTime < minTime)
        LDR      R0,[SP, #+0]
        LDR      R1,[SP, #+4]
        CMP      R0,R1
        BCS.N    ??AppS2wCmd_scanTimeSet_3
// 3080     {
// 3081         return S2W_EINVAL;
??AppS2wCmd_scanTimeSet_2:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_scanTimeSet_1
// 3082     }
// 3083     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_scanTimeSet_3:
        BL       ?Subroutine30
// 3084     if(p)
??CrossCallReturnLabel_93:
        CBZ.N    R0,??AppS2wCmd_scanTimeSet_4
// 3085     {
// 3086         status = AppS2wParse_Int(p, &passiveTime);
        BL       ?Subroutine50
// 3087         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_261:
        CBNZ.N   R0,??AppS2wCmd_scanTimeSet_1
// 3088         {
// 3089             return status;
// 3090         }
// 3091     }
// 3092     
// 3093    status = GsnWdd_ScanParamSet(&s2wappMainTaskCtxt->if0.wddCtx,minTime,maxTime,passiveTime);
??AppS2wCmd_scanTimeSet_4:
        LDR.N    R0,??DataTable382
        LDR      R3,[SP, #+8]
        LDR      R2,[SP, #+0]
        LDR      R1,[SP, #+4]
        LDR      R0,[R0, #+0]
        UXTH     R3,R3
        UXTH     R2,R2
        UXTH     R1,R1
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_ScanParamSet
        BL       GsnWdd_ScanParamSet
// 3094 
// 3095    /* update the default in profile */
// 3096     s2wCurrent.registers[S2W_REG_SCAN_TIME] = maxTime;
        LDR      R1,[SP, #+0]
        STRH     R1,[R4, #+462]
// 3097     s2wCurrent.minScanTime = (UINT16)minTime;
// 3098 
// 3099     return  status;
        UXTB     R0,R0
        LDR      R1,[SP, #+4]
        STRH     R1,[R5, #+8]
??AppS2wCmd_scanTimeSet_1:
        ADD      SP,SP,#+20
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock29
// 3100 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable382:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nMinScanTime=%d\\r\\nMax...">`:
        DC8 "\015\012MinScanTime=%d\015\012MaxScanTime=%d\015\012"
        DC8 0
// 3101 /**
// 3102  ******************************************************************
// 3103  * @ingroup S2w-Application
// 3104  * @brief Process AT+NSTCP command.
// 3105  * @param ptr Pointer to the user input string.
// 3106  * @return status, S2W_SUCCESS or S2W_FAILURE.
// 3107  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock30 Using cfiCommon0
          CFI Function AppS2wCmd_Nstcp
        THUMB
// 3108 PUBLIC UINT8
// 3109 AppS2wCmd_Nstcp(UINT8 *ptr)
// 3110 {
AppS2wCmd_Nstcp:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+72
          CFI CFA R13+80
// 3111     S2W_NETDATA_T peerData;
// 3112     UINT8 status;
// 3113     UINT32 port;
// 3114     UINT8 cid;
// 3115 	UINT32 maxConn=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
// 3116     UINT8 *p;
// 3117 
// 3118     if (s2wIsAutoconnected)
        LDR.W    R0,??DataTable393_1
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Nstcp_0
// 3119     {
// 3120         return S2W_EINVAL;
// 3121     }
// 3122     if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
        LDR.W    R0,??DataTable393_2
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Nstcp_1
// 3123     {
// 3124         return S2W_LINK_LOST_EVT;
        MOVS     R0,#+9
        B.N      ??AppS2wCmd_Nstcp_2
// 3125     }
// 3126 	p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Nstcp_1:
        ADD      R0,SP,#+72
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 3127 	if (*p == 0)
        LDRB     R1,[R0, #+0]
        CBZ.N    R1,??AppS2wCmd_Nstcp_0
// 3128 	{
// 3129 	  return S2W_EINVAL;
// 3130 	}
// 3131     status = AppS2wParse_Int(p, &port);
// 3132     if (status != S2W_SUCCESS || !is_valid_port(port))
        BL       ?Subroutine51
??CrossCallReturnLabel_308:
        CBNZ.N   R0,??AppS2wCmd_Nstcp_0
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_Nstcp_0
        CMP      R0,#+65536
        BCS.N    ??AppS2wCmd_Nstcp_0
// 3133     {
// 3134         return S2W_EINVAL;
// 3135     }
// 3136 	p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+72
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 3137 	maxConn = 15;
        MOVS     R1,#+15
        STR      R1,[SP, #+4]
// 3138 	if (p != NULL)
        CBZ.N    R0,??AppS2wCmd_Nstcp_3
// 3139 	{
// 3140 		status = AppS2wParse_Int(p, &maxConn);
// 3141 		if (status != S2W_SUCCESS )
        BL       ?Subroutine52
??CrossCallReturnLabel_331:
        CBZ.N    R0,??AppS2wCmd_Nstcp_3
// 3142 		{
// 3143 			return S2W_EINVAL;
??AppS2wCmd_Nstcp_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Nstcp_2
// 3144 		}
// 3145     }
// 3146 
// 3147     peerData.port = port;
// 3148     peerData.proto = S2W_NETDATA_PROTO_TCP;
// 3149     peerData.mode = S2W_NETDATA_MODE_SERVER;
// 3150 
// 3151 
// 3152     status = AppS2wHal_NetTcpServer(&peerData, &cid);
??AppS2wCmd_Nstcp_3:
        ADD      R1,SP,#+8
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+14]
        MOVS     R0,#+1
        STRB     R0,[SP, #+13]
        STRB     R0,[SP, #+12]
        ADD      R0,SP,#+12
          CFI FunCall AppS2wHal_NetTcpServer
        BL       AppS2wHal_NetTcpServer
// 3153     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nstcp_2
// 3154     {
// 3155         return status;
// 3156     }
// 3157 	AppS2wHal_TcpSrvMaxConSet(cid,maxConn);
        LDR      R1,[SP, #+4]
        LDRB     R0,[SP, #+8]
          CFI FunCall AppS2wHal_TcpSrvMaxConSet
        BL       AppS2wHal_TcpSrvMaxConSet
// 3158 
// 3159     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
        BL       ?Subroutine119
// 3160     return status;
??CrossCallReturnLabel_569:
        MOVS     R0,#+0
??AppS2wCmd_Nstcp_2:
        ADD      SP,SP,#+76
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock30
// 3161 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond31 Using cfiCommon0
          CFI Function AppS2wCmd_Nstcp
          CFI Conditional ??CrossCallReturnLabel_569
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+80
          CFI Block cfiCond32 Using cfiCommon0
          CFI (cfiCond32) Function AppS2wCmd_Ncudp
          CFI (cfiCond32) Conditional ??CrossCallReturnLabel_568
          CFI (cfiCond32) R14 Frame(CFA, -4)
          CFI (cfiCond32) CFA R13+80
          CFI Block cfiPicker33 Using cfiCommon1
          CFI (cfiPicker33) NoFunction
          CFI (cfiPicker33) Picker
        THUMB
?Subroutine119:
        LDRB     R1,[SP, #+8]
          CFI Block cfiCond34 Using cfiCommon0
          CFI (cfiCond34) Function AppS2wCmd_Nctcp
          CFI (cfiCond34) Conditional ??CrossCallReturnLabel_567
          CFI (cfiCond34) R14 Frame(CFA, -4)
          CFI (cfiCond34) CFA R13+72
          CFI Block cfiCond35 Using cfiCommon0
          CFI (cfiCond35) Function AppS2wCmd_Nsudp
          CFI (cfiCond35) Conditional ??CrossCallReturnLabel_566
          CFI (cfiCond35) R14 Frame(CFA, -4)
          CFI (cfiCond35) CFA R13+72
??Subroutine119_0:
        MOVS     R0,#+7
          CFI FunCall AppS2wCmd_Nstcp AppS2wProcess_StatusNotify
          CFI FunCall AppS2wCmd_Ncudp AppS2wProcess_StatusNotify
          CFI FunCall AppS2wCmd_Nctcp AppS2wProcess_StatusNotify
          CFI FunCall AppS2wCmd_Nsudp AppS2wProcess_StatusNotify
        B.W      AppS2wProcess_StatusNotify
          CFI EndBlock cfiCond31
          CFI EndBlock cfiCond32
          CFI EndBlock cfiPicker33
          CFI EndBlock cfiCond34
          CFI EndBlock cfiCond35
// 3162 
// 3163 /**
// 3164  ******************************************************************
// 3165  * @ingroup S2w-Application
// 3166  * Process AT+NSUDP command.
// 3167  * @param ptr Pointer to the user input string.
// 3168  * @return status, S2W_SUCCESS or S2W_FAILURE.
// 3169  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock36 Using cfiCommon0
          CFI Function AppS2wCmd_Nsudp
        THUMB
// 3170 PUBLIC UINT8
// 3171 AppS2wCmd_Nsudp(UINT8 *ptr)
// 3172 {
AppS2wCmd_Nsudp:
        PUSH     {LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+4
// 3173     S2W_NETDATA_T peerData;
// 3174     UINT8 status;
// 3175     UINT32 port;
// 3176     UINT8 cid;
// 3177 
// 3178     if (s2wIsAutoconnected)
        LDR.W    R1,??DataTable393_1
        LDRB     R1,[R1, #+0]
        SUB      SP,SP,#+68
          CFI CFA R13+72
        CBNZ.N   R1,??AppS2wCmd_Nsudp_0
// 3179     {
// 3180         return S2W_EINVAL;
// 3181     }
// 3182     if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
        LDR.W    R1,??DataTable393_2
        LDRB     R1,[R1, #+0]
        CBNZ.N   R1,??AppS2wCmd_Nsudp_1
// 3183     {
// 3184         return S2W_LINK_LOST_EVT;
        MOVS     R0,#+9
        B.N      ??AppS2wCmd_Nsudp_2
// 3185     }
// 3186 
// 3187     status = AppS2wParse_Int(ptr, &port);
// 3188     if (status != S2W_SUCCESS || !is_valid_port(port))
??AppS2wCmd_Nsudp_1:
        BL       ?Subroutine51
??CrossCallReturnLabel_307:
        CBNZ.N   R0,??AppS2wCmd_Nsudp_0
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_Nsudp_0
        CMP      R0,#+65536
        BCC.N    ??AppS2wCmd_Nsudp_3
// 3189     {
// 3190         return S2W_EINVAL;
??AppS2wCmd_Nsudp_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Nsudp_2
// 3191     }
// 3192     peerData.port = port;
??AppS2wCmd_Nsudp_3:
        STRH     R0,[SP, #+10]
// 3193     peerData.proto = S2W_NETDATA_PROTO_UDP;
// 3194     peerData.mode = S2W_NETDATA_MODE_SERVER;
// 3195 
// 3196     status = AppS2wHal_NetUdpServer(&peerData, &cid);
        ADD      R1,SP,#+4
        MOVS     R0,#+0
        STRB     R0,[SP, #+9]
        MOVS     R0,#+1
        STRB     R0,[SP, #+8]
        ADD      R0,SP,#+8
          CFI FunCall AppS2wHal_NetUdpServer
        BL       AppS2wHal_NetUdpServer
// 3197     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nsudp_2
// 3198     {
// 3199         return status;
// 3200     }
// 3201 
// 3202     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
        LDRB     R1,[SP, #+4]
        BL       ??Subroutine119_0
// 3203     return status;
??CrossCallReturnLabel_566:
        MOVS     R0,#+0
??AppS2wCmd_Nsudp_2:
        ADD      SP,SP,#+68
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock36
// 3204 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable384:
        DC8      "%x\t"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable384_1:
        DC32     AppMcu_RespTimeoutCb
// 3205 
// 3206 /**
// 3207  ******************************************************************
// 3208  * @ingroup S2w-Application
// 3209  * Process AT+SETSOCKOPT command.
// 3210  * @param ptr Pointer to the user input string.
// 3211  * @return status, S2W_SUCCESS ,S2W_FAILURE or S2W_EINVAL.
// 3212  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock37 Using cfiCommon0
          CFI Function AppS2wCmd_SetSockOp
        THUMB
// 3213 PUBLIC UINT8
// 3214 AppS2wCmd_SetSockOp(UINT8 *ptr)
// 3215 {
AppS2wCmd_SetSockOp:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+24
          CFI CFA R13+32
// 3216     UINT8 status;
// 3217     S2W_SOCK_OP_T params;
// 3218     UINT8 *p;
// 3219 
// 3220 
// 3221     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 3222     if (!p)
??CrossCallReturnLabel_127:
        CBZ.N    R0,??AppS2wCmd_SetSockOp_0
// 3223     {
// 3224         return S2W_EINVAL;
// 3225     }
// 3226     AppS2wParse_Int(p, &params.cid);
        BL       ?Subroutine51
// 3227 
// 3228     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_306:
        BL       ?Subroutine33
// 3229     if (!p)
??CrossCallReturnLabel_126:
        CBZ.N    R0,??AppS2wCmd_SetSockOp_0
// 3230     {
// 3231         return S2W_EINVAL;
// 3232     }
// 3233     AppS2wParse_Int(p, &params.type);
        BL       ?Subroutine52
// 3234 
// 3235     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_330:
        BL       ?Subroutine33
// 3236     if (!p)
??CrossCallReturnLabel_125:
        CBZ.N    R0,??AppS2wCmd_SetSockOp_0
// 3237     {
// 3238         return S2W_EINVAL;
// 3239     }
// 3240 
// 3241     status = AppS2wParse_Hex(p, &params.param);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
// 3242     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_SetSockOp_1
// 3243     {
// 3244     	return status;
// 3245     }
// 3246 
// 3247     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 3248     if (!p)
??CrossCallReturnLabel_124:
        CBZ.N    R0,??AppS2wCmd_SetSockOp_0
// 3249     {
// 3250         return S2W_EINVAL;
// 3251     }
// 3252     AppS2wParse_Int(p, &params.paramValue);
        BL       ?Subroutine53
// 3253 
// 3254     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_340:
        BL       ?Subroutine33
// 3255     if (!p)
??CrossCallReturnLabel_123:
        CBNZ.N   R0,??AppS2wCmd_SetSockOp_2
// 3256     {
// 3257         return S2W_EINVAL;
??AppS2wCmd_SetSockOp_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_SetSockOp_1
// 3258     }
// 3259     AppS2wParse_Int(p, &params.paramSize);
??AppS2wCmd_SetSockOp_2:
        BL       ?Subroutine54
// 3260 
// 3261     status = AppS2wHal_SockOpSet(&params);
// 3262 
// 3263     return status;
??CrossCallReturnLabel_346:
        ADD      R0,SP,#+0
          CFI FunCall AppS2wHal_SockOpSet
        BL       AppS2wHal_SockOpSet
??AppS2wCmd_SetSockOp_1:
        ADD      SP,SP,#+28
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock37
// 3264 }
// 3265 
// 3266 
// 3267 
// 3268 
// 3269 
// 3270 /**
// 3271  ******************************************************************
// 3272  * @ingroup S2w-Application
// 3273  * @brief Process the AT+ERRCOUNT command
// 3274  * @param ptr Pointer to the user input string.
// 3275  * @return status.
// 3276  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock38 Using cfiCommon0
          CFI Function AppS2wCmd_ErrorCount
          CFI NoCalls
        THUMB
// 3277 PUBLIC UINT8
// 3278 AppS2wCmd_ErrorCount(UINT8 *ptr)
// 3279 {
// 3280     UINT8 status = S2W_EINVAL;
// 3281     //S2W_ERROR_COUNT_T errorParam;
// 3282 
// 3283 
// 3284     if (ptr[0] == '?' && ptr[1] == '\0')
AppS2wCmd_ErrorCount:
        LDRB     R2,[R0, #+0]
        MOVS     R1,#+2
        CMP      R2,#+63
        ITTT     EQ 
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        MOVEQ    R1,#+0
// 3285     {
// 3286         /* print the error counts */
// 3287         //S2w_Printf("\r\nAPP-WD     :%d\r\nWLAN-WD    :%d\r\nWLAN-ABORT :%d\r\nWLAN-ASSERT:%d\r\nAPP-SW-RST :%d\r\nWLAN-SW-RST:%d\r\n",
// 3288           //         appRtcMemData.err.appWdCount,appRtcMemData.err.wlanWdCount,
// 3289             //       appRtcMemData.err.wlanAbortCount,appRtcMemData.err.wlanAssertCount,
// 3290               //     appRtcMemData.err.appSwResetCount,appRtcMemData.err.wlanSwResetCount);
// 3291         status = S2W_SUCCESS;
// 3292     }
// 3293     return status;
        MOV      R0,R1
        BX       LR               ;; return
          CFI EndBlock cfiBlock38
// 3294 }
// 3295 
// 3296 
// 3297 
// 3298 /**
// 3299  ******************************************************************
// 3300  * @ingroup S2w-Application
// 3301  * @brief Close all connections and disassociate.
// 3302  * @retval S2W_SUCCESS - operation successful.
// 3303  * @retval S2W_EINVAL  - operation failure-invalid command.
// 3304  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock39 Using cfiCommon0
          CFI Function AppS2w_HangUp
        THUMB
// 3305 PUBLIC UINT8
// 3306 AppS2w_HangUp(VOID)
// 3307 {
AppS2w_HangUp:
        PUSH     {R0-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+32
// 3308 	UINT8 status=S2W_FAILURE;
// 3309     s2wIsAutoconnected = 0;
        BL       ?Subroutine23
// 3310 
// 3311     /* close all connections
// 3312      */
// 3313     AppS2wHal_NetCloseAll(0);
// 3314     curCid = INVALID_CID;
??CrossCallReturnLabel_52:
        LDR.W    R0,??DataTable395
// 3315     /* call the hal disassociate function
// 3316      */
// 3317 	s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
// 3318 					   GSN_SOFT_TMR_ONESHOT,0,
// 3319 						SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
// 3320 					  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
        LDR.W    R4,??DataTable395_1
        MOVS     R1,#+255
        STRB     R1,[R0, #+0]
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        MOVS     R1,#+0
        LDR.W    R0,??DataTable398
        STR      R0,[SP, #+8]
        MOV      R2,R1
        MOV      R0,#+4915200
        STRD     R0,R1,[SP, #+0]
        MOV      R3,R1
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+33024
        ADDS     R0,R0,#+160
          CFI FunCall GsnSoftTmr_Start
        BL       GsnSoftTmr_Start
        LDR      R1,[R4, #+0]
        MOVW     R5,#+33216
        STR      R0,[R5, R1]
// 3321     status=AppS2wHal_Disassociate(0);	
        MOVS     R0,#+0
          CFI FunCall AppS2wHal_Disassociate
        BL       AppS2wHal_Disassociate
        MOV      R6,R0
// 3322 	GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
        LDR      R0,[R4, #+0]
        LDR      R0,[R5, R0]
          CFI FunCall GsnSoftTmr_Stop
        BL       GsnSoftTmr_Stop
// 3323 	return status;
        MOV      R0,R6
        ADD      SP,SP,#+16
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock39
// 3324 }
// 3325 
// 3326 
// 3327 /**
// 3328  ******************************************************************
// 3329  * @ingroup S2w-Application
// 3330  * @brief Display the scan result in the format, "SSID,BSSID,Channel,RSSI,Mode".
// 3331  *   This function should be called from HAL function for scan,
// 3332  *   after finishing the scan.
// 3333  * @param ssid    - IN SSID of network.
// 3334  * @param ssidLen - IN SSID length.
// 3335  * @param bssid   - IN BSSID of network.
// 3336  * @param channel - IN Channel.
// 3337  * @param rssi    - IN RSSI.
// 3338  * @param adhoc   - IN 802.11 operating mode.
// 3339  * @return None.
// 3340  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock40 Using cfiCommon0
          CFI Function AppS2wScanResult_Print
        THUMB
// 3341 PUBLIC VOID
// 3342 AppS2wScanResult_Print(UINT8 *ssid, UINT8 ssidLen, UINT8 *bssid,
// 3343         UINT8 channel, UINT8 rssi,  UINT8 adhoc)
// 3344 {
AppS2wScanResult_Print:
        PUSH     {R1-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+40
        MOV      R7,R0
        MOV      R8,R1
        LDR      R4,[SP, #+40]
        LDR      R5,[SP, #+44]
// 3345     UINT8 len=0;
// 3346     static const char prefix[] = "\r\n";
// 3347 
// 3348     /*print format --> bssid  ssid  channel  type   Security  RSSI
// 3349      */
// 3350     AppS2wHal_CharNPut(prefix, sizeof(prefix) - 1);
        ADR.W    R0,??prefix
        MOV      R6,R2
        MOV      R9,R3
        MOVS     R1,#+2
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 3351     S2w_Printf(" %02x:%02x:%02x:%02x:%02x:%02x, ",
// 3352            bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]);
        BL       ?Subroutine10
??CrossCallReturnLabel_15:
        LDRB     R1,[R6, #+0]
        ADR.W    R0,`?<Constant " %02x:%02x:%02x:%02x:...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3353 
// 3354     AppS2wHal_CharNPut(ssid, ssidLen);
        MOV      R1,R8
        MOV      R0,R7
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 3355 
// 3356     for(len = (32- ssidLen);len>0;len--)
        RSB      R7,R8,#+32
        ADR.W    R8,??DataTable388  ;; " "
        B.N      ??AppS2wScanResult_Print_0
// 3357     {
// 3358         S2w_Printf(" ");
??AppS2wScanResult_Print_1:
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3359     }
        SUBS     R7,R7,#+1
??AppS2wScanResult_Print_0:
        UXTB     R7,R7
        CMP      R7,#+0
        BNE.N    ??AppS2wScanResult_Print_1
// 3360     S2w_Printf(", %02d", channel);
        MOV      R1,R9
        ADR.W    R0,`?<Constant ", %02d">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3361     if(adhoc)
        CMP      R5,#+0
        ITE      NE 
        ADRNE.W  R0,`?<Constant ",  ADHOC ">`
        ADREQ.W  R0,`?<Constant ",  INFRA ">`
// 3362     {
// 3363         S2w_Printf(",  ADHOC ");
// 3364     }
// 3365     else
// 3366     {
// 3367         S2w_Printf(",  INFRA ");
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3368     }
// 3369 
// 3370     S2w_Printf(", %d ,",(signed char)rssi);
        SXTB     R1,R4
        ADD      SP,SP,#+12
          CFI CFA R13+28
        POP      {R4-R9,LR}
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
        ADR.W    R0,`?<Constant ", %d ,">`
          CFI FunCall S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiBlock40
// 3371 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable386:
        DC32     s2wSyncSemID

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??prefix:
        DC8 "\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " %02x:%02x:%02x:%02x:...">`:
        DC8 " %02x:%02x:%02x:%02x:%02x:%02x, "
        DC8 0, 0, 0
// 3372 
// 3373 
// 3374 
// 3375 
// 3376 
// 3377 
// 3378 #ifndef IOT_APP_ENABLE
// 3379 
// 3380 /**
// 3381  ******************************************************************
// 3382  * @ingroup S2w-Application
// 3383  * @brief Process the AT+WM Command.
// 3384  *   This function check the validy of the parameter passed and set the
// 3385  *   wireless mode as per the parameter.
// 3386  * @param ptr Pointer to the user input string.
// 3387  * @return S2W_SUCCESS - operation successful.
// 3388  * @retval S2W_EINVAL  - operation failure-invalid command.
// 3389  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock41 Using cfiCommon0
          CFI Function AppS2wCmd_Wmode
        THUMB
// 3390 PRIVATE UINT8
// 3391 AppS2wCmd_Wmode(UINT8 *ptr)
// 3392 {
AppS2wCmd_Wmode:
        PUSH     {R0,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        SUB      SP,SP,#+32
          CFI CFA R13+72
// 3393     UINT8 status;
// 3394     UINT32 mode,interval,noStations,dtimPeriod;
// 3395 	UINT32 inactivityTimeoutInSec,grpKeyUpdtIntrvl;
// 3396     UINT8 *p;
// 3397     GSN_WIF_WLAN_NW_TYPE_T prevWlanNwType;
// 3398 
// 3399 
// 3400     /* check the validity of the parameter passed
// 3401      */
// 3402     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 3403     if (!p)
??CrossCallReturnLabel_195:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wmode_0
// 3404     {
// 3405         return S2W_EINVAL;
// 3406     }
// 3407 
// 3408     status = AppS2wParse_Int(p, &mode);
        BL       ?Subroutine51
// 3409     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_305:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wmode_1
// 3410     {
// 3411         return status;
// 3412     }
// 3413     if(mode > S2W_WLANDATA_MODE_PROV_AP || S2W_WLANDATA_MODE_ADHOC == mode )
        LDR      R0,[SP, #+0]
        CMP      R0,#+7
        BCS.N    ??AppS2wCmd_Wmode_2
        CMP      R0,#+3
??AppS2wCmd_Wmode_0:
        BEQ.W    ??AppS2wCmd_Wmode_3
// 3414     {
// 3415         return S2W_EINVAL;
// 3416     }
// 3417     // remap the mode
// 3418     if(mode == 0)
        CBNZ.N   R0,??AppS2wCmd_Wmode_4
// 3419     {
// 3420         mode = S2W_WLANDATA_MODE_INFRA;
        MOVS     R0,#+1
        STR      R0,[SP, #+0]
??AppS2wCmd_Wmode_4:
        MOVW     R4,#+33224
        LDR.W    R7,??DataTable393
        LDR      R0,[SP, #+0]
        LDRB     R1,[R7, #+4]
        LDR.W    R6,??DataTable395_1
        MOVW     R5,#+33221
        MOVW     R9,#+33222
        MOV      R10,#+360
        MOVW     R8,#+33220
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_Wmode_5
// 3421     }
// 3422 	if(mode == s2wCurrent.mode)
// 3423 	{			
// 3424 		if((mode == S2W_WLANDATA_MODE_AP) || (mode == S2W_WLANDATA_MODE_PROV_AP))
        CMP      R0,#+2
        IT       NE 
        CMPNE    R0,#+6
        BNE.N    ??AppS2wCmd_Wmode_5
// 3425 		{
// 3426 			s2wappMainTaskCtxt->bcastSsid = S2W_DEFAULT_AP_SSID_BROADCAST;
        LDR      R0,[R6, #+0]
        MOVS     R1,#+0
        STRB     R1,[R8, R0]
// 3427 			s2wappMainTaskCtxt->inactivityTimeoutInSec= 360;
// 3428 			s2wappMainTaskCtxt->dtimPeriod = 3;
        MOVS     R1,#+3
        LDR      R0,[R6, #+0]
        STRH     R10,[R9, R0]
        STRB     R1,[R5, R0]
// 3429 		    s2wappMainTaskCtxt->grpKeyUpdtIntrvl= 3600;
        MOV      R1,#+3600
        LDR      R0,[R6, #+0]
        STRH     R1,[R4, R0]
// 3430 		    GsnWdd_SetGrpKeyUpdateTime(&s2wappMainTaskCtxt->if0.wddCtx, s2wappMainTaskCtxt->grpKeyUpdtIntrvl);
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_SetGrpKeyUpdateTime
        BL       GsnWdd_SetGrpKeyUpdateTime
// 3431 		}
// 3432 	}
// 3433 
// 3434     /* if the mode selected is 2(AP) accept the next param(beacon interval )also */
// 3435     prevWlanNwType = s2wappMainTaskCtxt->if0.macIfType;
??AppS2wCmd_Wmode_5:
        LDR      R0,[R6, #+0]
// 3436     if((mode == S2W_WLANDATA_MODE_AP) || (mode == S2W_WLANDATA_MODE_PROV_AP))
        LDR      R1,[SP, #+0]
        LDRB     R11,[R0, #+2508]
        CMP      R1,#+2
        IT       NE 
        CMPNE    R1,#+6
        BNE.W    ??AppS2wCmd_Wmode_6
// 3437     {
// 3438         s2wappMainTaskCtxt->bcastSsid = S2W_DEFAULT_AP_SSID_BROADCAST;
        MOVS     R1,#+0
        STRB     R1,[R8, R0]
// 3439 		s2wCurrent.lmtdApConf.noStations = S2W_DEFAULT_AP_SUPPORTED_STATIONS;
        MOVS     R0,#+64
        STRB     R0,[R7, #+647]
// 3440         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 3441         if ((p) && (*p != '\0'))
??CrossCallReturnLabel_194:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_7
// 3442         {
// 3443             status = AppS2wParse_Int(p, &interval);
        BL       ?Subroutine56
// 3444             if (status != S2W_SUCCESS)
??CrossCallReturnLabel_357:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wmode_1
// 3445             {
// 3446                 return status;
// 3447             }
// 3448             if((interval < 50) || (interval > 1500))
        LDR      R0,[SP, #+20]
        SUBS     R0,R0,#+50
        MOVW     R1,#+1451
        CMP      R0,R1
??AppS2wCmd_Wmode_2:
        BCS.W    ??AppS2wCmd_Wmode_3
// 3449             {
// 3450                 return S2W_EINVAL;
// 3451             }
// 3452             s2wCurrent.lmtdApConf.beaconInterval = interval;
        LDR      R0,[SP, #+20]
        STRH     R0,[R7, #+650]
// 3453         }
// 3454         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wmode_7:
        BL       ?Subroutine37
// 3455         if ((p) && (*p != '\0'))
??CrossCallReturnLabel_193:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_8
// 3456         {
// 3457             status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->bcastSsid);
        LDR      R1,[R6, #+0]
        ADD      R1,R8,R1
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
// 3458             if (status != S2W_SUCCESS)
        CMP      R0,#+0
??AppS2wCmd_Wmode_1:
        BNE.W    ??AppS2wCmd_Wmode_9
// 3459             {
// 3460                 return status;
// 3461             }
// 3462         }
// 3463 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wmode_8:
        BL       ?Subroutine37
// 3464         if ((p) && (*p != '\0'))
??CrossCallReturnLabel_192:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_10
// 3465         {
// 3466             status = AppS2wParse_Int(p, &noStations);
// 3467             if (status != S2W_SUCCESS || noStations == 0)
        BL       ?Subroutine54
??CrossCallReturnLabel_345:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wmode_11
        LDR      R0,[SP, #+16]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wmode_12
// 3468             {
// 3469                 return S2W_EINVAL;
// 3470             }
// 3471 			s2wCurrent.lmtdApConf.noStations = (UINT8)noStations;
        STRB     R0,[R7, #+647]
// 3472         }
// 3473 		s2wappMainTaskCtxt->dtimPeriod = 3;
??AppS2wCmd_Wmode_10:
        LDR      R0,[R6, #+0]
        MOVS     R1,#+3
        STRB     R1,[R5, R0]
// 3474 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 3475 		if ((p) && (*p != '\0'))
??CrossCallReturnLabel_191:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_13
// 3476 		{
// 3477 			status = AppS2wParse_Int(p, &dtimPeriod);
// 3478 			if (status != S2W_SUCCESS || dtimPeriod == 0)
        BL       ?Subroutine53
??CrossCallReturnLabel_339:
        CMP      R0,#+0
??AppS2wCmd_Wmode_11:
        BNE.N    ??AppS2wCmd_Wmode_3
        LDR      R0,[SP, #+12]
        CMP      R0,#+0
??AppS2wCmd_Wmode_12:
        BEQ.N    ??AppS2wCmd_Wmode_3
// 3479 			{
// 3480 				return S2W_EINVAL;
// 3481 			}
// 3482 			s2wappMainTaskCtxt->dtimPeriod= (UINT8)dtimPeriod;
        LDR      R0,[R6, #+0]
        LDR      R1,[SP, #+12]
        STRB     R1,[R5, R0]
// 3483 		}
// 3484 		s2wappMainTaskCtxt->inactivityTimeoutInSec= 360;
??AppS2wCmd_Wmode_13:
        LDR      R0,[R6, #+0]
        STRH     R10,[R9, R0]
// 3485 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 3486 		if ((p) && (*p != '\0'))
??CrossCallReturnLabel_190:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_14
// 3487 		{
// 3488 			status = AppS2wParse_Int(p, &inactivityTimeoutInSec);
// 3489 			if (status != S2W_SUCCESS || inactivityTimeoutInSec == 0)
        BL       ?Subroutine50
??CrossCallReturnLabel_260:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wmode_3
        LDR      R0,[SP, #+8]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wmode_3
// 3490 			{
// 3491 				return S2W_EINVAL;
// 3492 			}
// 3493 			s2wappMainTaskCtxt->inactivityTimeoutInSec= (UINT16)inactivityTimeoutInSec;
        LDR      R0,[R6, #+0]
        LDR      R1,[SP, #+8]
        STRH     R1,[R9, R0]
// 3494 		}
// 3495 	
// 3496 		s2wappMainTaskCtxt->grpKeyUpdtIntrvl= 3600;
??AppS2wCmd_Wmode_14:
        MOV      R1,#+3600
        LDR      R0,[R6, #+0]
        STRH     R1,[R4, R0]
// 3497 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
// 3498 		if ((p) && (*p != '\0'))
??CrossCallReturnLabel_189:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wmode_15
// 3499 		{
// 3500 			status = AppS2wParse_Int(p, &grpKeyUpdtIntrvl);
// 3501 			if (status != S2W_SUCCESS || grpKeyUpdtIntrvl == 0)
        BL       ?Subroutine52
??CrossCallReturnLabel_329:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wmode_3
        LDR      R0,[SP, #+4]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wmode_3
// 3502 			{
// 3503 				return S2W_EINVAL;
// 3504 			}
// 3505 			s2wappMainTaskCtxt->grpKeyUpdtIntrvl= (UINT16)grpKeyUpdtIntrvl;
        LDR      R0,[R6, #+0]
        LDR      R1,[SP, #+4]
        STRH     R1,[R4, R0]
// 3506 		}
// 3507 		if(mode == s2wCurrent.mode)
??AppS2wCmd_Wmode_15:
        LDR      R0,[SP, #+0]
        LDRB     R1,[R7, #+4]
        CMP      R0,R1
        BEQ.N    ??AppS2wCmd_Wmode_16
// 3508 			return S2W_SUCCESS;
// 3509 		App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
        LDR      R0,[R6, #+0]
        ADDW     R1,R0,#+2504
          CFI FunCall App_InterfaceStop
        BL       App_InterfaceStop
// 3510 		
// 3511 		s2wappMainTaskCtxt->if0.macIfNum = 0;
        LDR      R0,[R6, #+0]
        MOVS     R1,#+0
        STR      R1,[R0, #+2504]
// 3512 		s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_AP;
        MOVS     R2,#+2
        BL       ?Subroutine127
// 3513 
// 3514         if(prevWlanNwType == S2W_WLANDATA_MODE_ISOTX)
??CrossCallReturnLabel_596:
        BNE.N    ??AppS2wCmd_Wmode_17
// 3515         {
// 3516             App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
          CFI FunCall App_IfInit
        BL       App_IfInit
// 3517             /*Open the interface*/
// 3518             App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
        BL       ?Subroutine126
// 3519         }
??CrossCallReturnLabel_595:
        B.N      ??AppS2wCmd_Wmode_18
// 3520         else
// 3521         {
// 3522             App_IfReinit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
??AppS2wCmd_Wmode_17:
          CFI FunCall App_IfReinit
        BL       App_IfReinit
// 3523         }
// 3524 		
// 3525 
// 3526 	    GsnWdd_SetGrpKeyUpdateTime(&s2wappMainTaskCtxt->if0.wddCtx, s2wappMainTaskCtxt->grpKeyUpdtIntrvl);
??AppS2wCmd_Wmode_18:
        LDR      R0,[R6, #+0]
        LDRH     R1,[R4, R0]
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_SetGrpKeyUpdateTime
        BL       GsnWdd_SetGrpKeyUpdateTime
// 3527 
// 3528 	}
// 3529     else if (S2W_WLANDATA_MODE_INFRA == mode)/*STA Mode*/
// 3530     {
// 3531        
// 3532 	   App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
// 3533 	   
// 3534 	   s2wappMainTaskCtxt->if0.macIfNum = 0;
// 3535 	   s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_STA;
// 3536 
// 3537         if(prevWlanNwType == S2W_WLANDATA_MODE_ISOTX)
// 3538         {
// 3539             App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
// 3540             /*Open the interface*/
// 3541             App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
// 3542         }
// 3543         else
// 3544         {
// 3545 	        App_IfReinit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
// 3546         }
// 3547         
// 3548        AppS2w_SetWlanDfltParams(profile_params.defaultProfile);
// 3549        GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,0,S2W_DEFAULT_SYNCLOSS_INTERVAL);
// 3550 
// 3551     }
// 3552     else if (S2W_WLANDATA_MODE_ISOTX == mode)/*STA Mode*/
// 3553     {
// 3554 #ifdef S2W_ISOTX_SUPPORT       
// 3555 	   App_InterfaceStop(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
// 3556 	   
// 3557 	   s2wappMainTaskCtxt->if0.macIfNum = 0;
// 3558 	   s2wappMainTaskCtxt->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_ISOTX;
// 3559 	   
// 3560        App_IfInit(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);            
// 3561        /*Open the interface*/
// 3562        App_InterfaceStart(s2wappMainTaskCtxt, &s2wappMainTaskCtxt->if0);
// 3563 #else
// 3564 	   return S2W_EINVAL;
// 3565 #endif
// 3566 
// 3567     }
// 3568     // update the mac address after switching the mode
// 3569     {
// 3570         UINT8 macAddr[6];
// 3571         // depends on mode the mac changes
// 3572         if(mode == S2W_WLANDATA_MODE_INFRA)
??AppS2wCmd_Wmode_19:
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_Wmode_20
// 3573         {
// 3574         //S2w_LoadMacAddr(macAddr);
// 3575         S2w_macAddrRTCGet(macAddr);
        ADD      R0,SP,#+24
          CFI FunCall S2w_macAddrRTCGet
        BL       S2w_macAddrRTCGet
        B.N      ??AppS2wCmd_Wmode_21
// 3576 		}
??AppS2wCmd_Wmode_6:
        CMP      R1,#+1
        BNE.N    ??AppS2wCmd_Wmode_22
        ADDW     R1,R0,#+2504
          CFI FunCall App_InterfaceStop
        BL       App_InterfaceStop
        LDR      R0,[R6, #+0]
        MOVS     R1,#+0
        STR      R1,[R0, #+2504]
        MOVS     R2,#+1
        BL       ?Subroutine127
??CrossCallReturnLabel_597:
        BNE.N    ??AppS2wCmd_Wmode_23
          CFI FunCall App_IfInit
        BL       App_IfInit
        BL       ?Subroutine126
??CrossCallReturnLabel_594:
        B.N      ??AppS2wCmd_Wmode_24
??AppS2wCmd_Wmode_23:
          CFI FunCall App_IfReinit
        BL       App_IfReinit
??AppS2wCmd_Wmode_24:
        LDR.W    R0,??DataTable400
        LDRB     R0,[R0, #+5]
          CFI FunCall AppS2w_SetWlanDfltParams
        BL       AppS2w_SetWlanDfltParams
        LDR      R0,[R6, #+0]
        MOVS     R2,#+100
        MOVS     R1,#+0
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_BeaconMissThresholdSet
        BL       GsnWdd_BeaconMissThresholdSet
        B.N      ??AppS2wCmd_Wmode_19
??AppS2wCmd_Wmode_22:
        CMP      R1,#+5
        BNE.N    ??AppS2wCmd_Wmode_19
??AppS2wCmd_Wmode_3:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wmode_9
// 3577 		else
// 3578 		{
// 3579 			memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array , 6);
??AppS2wCmd_Wmode_20:
        MOVS     R2,#+6
        ADDW     R1,R7,#+525
        ADD      R0,SP,#+24
          CFI FunCall memcpy
        BL       memcpy
// 3580 		}
// 3581 
// 3582         AppS2wHal_MacAddrSet(macAddr, TRUE);
??AppS2wCmd_Wmode_21:
        MOVS     R1,#+1
        ADD      R0,SP,#+24
          CFI FunCall AppS2wHal_MacAddrSet
        BL       AppS2wHal_MacAddrSet
// 3583     }
// 3584     /* update the mode in active profile
// 3585      */
// 3586     s2wCurrent.mode = mode;
        LDR      R0,[SP, #+0]
        STRB     R0,[R7, #+4]
// 3587     return S2W_SUCCESS;
??AppS2wCmd_Wmode_16:
        MOVS     R0,#+0
??AppS2wCmd_Wmode_9:
        ADD      SP,SP,#+36
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock41
// 3588 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond42 Using cfiCommon0
          CFI Function AppS2wCmd_Wmode
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_596
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond43 Using cfiCommon0
          CFI (cfiCond43) Function AppS2wCmd_Wmode
          CFI (cfiCond43) NoCalls AppS2wCmd_Wmode
          CFI (cfiCond43) Conditional ??CrossCallReturnLabel_597
          CFI (cfiCond43) R4 Frame(CFA, -36)
          CFI (cfiCond43) R5 Frame(CFA, -32)
          CFI (cfiCond43) R6 Frame(CFA, -28)
          CFI (cfiCond43) R7 Frame(CFA, -24)
          CFI (cfiCond43) R8 Frame(CFA, -20)
          CFI (cfiCond43) R9 Frame(CFA, -16)
          CFI (cfiCond43) R10 Frame(CFA, -12)
          CFI (cfiCond43) R11 Frame(CFA, -8)
          CFI (cfiCond43) R14 Frame(CFA, -4)
          CFI (cfiCond43) CFA R13+72
          CFI Block cfiPicker44 Using cfiCommon1
          CFI (cfiPicker44) NoFunction
          CFI (cfiPicker44) NoCalls AppS2wCmd_Wmode
          CFI (cfiPicker44) Picker
        THUMB
?Subroutine127:
        ADDW     R1,R0,#+2504
        CMP      R11,#+5
        STRB     R2,[R1, #+4]
        BX       LR
          CFI EndBlock cfiCond42
          CFI EndBlock cfiCond43
          CFI EndBlock cfiPicker44

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond45 Using cfiCommon0
          CFI Function AppS2wCmd_Wmode
          CFI Conditional ??CrossCallReturnLabel_595
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond46 Using cfiCommon0
          CFI (cfiCond46) Function AppS2wCmd_Wmode
          CFI (cfiCond46) Conditional ??CrossCallReturnLabel_594
          CFI (cfiCond46) R4 Frame(CFA, -36)
          CFI (cfiCond46) R5 Frame(CFA, -32)
          CFI (cfiCond46) R6 Frame(CFA, -28)
          CFI (cfiCond46) R7 Frame(CFA, -24)
          CFI (cfiCond46) R8 Frame(CFA, -20)
          CFI (cfiCond46) R9 Frame(CFA, -16)
          CFI (cfiCond46) R10 Frame(CFA, -12)
          CFI (cfiCond46) R11 Frame(CFA, -8)
          CFI (cfiCond46) R14 Frame(CFA, -4)
          CFI (cfiCond46) CFA R13+72
          CFI Block cfiPicker47 Using cfiCommon1
          CFI (cfiPicker47) NoFunction
          CFI (cfiPicker47) Picker
        THUMB
?Subroutine126:
        LDR      R0,[R6, #+0]
        ADDW     R1,R0,#+2504
          CFI FunCall AppS2wCmd_Wmode App_InterfaceStart
          CFI FunCall AppS2wCmd_Wmode App_InterfaceStart
        B.W      App_InterfaceStart
          CFI EndBlock cfiCond45
          CFI EndBlock cfiCond46
          CFI EndBlock cfiPicker47

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond48 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientSend
          CFI Conditional ??CrossCallReturnLabel_359
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond49 Using cfiCommon0
          CFI (cfiCond49) Function AppS2wCmd_SystemTimeSet
          CFI (cfiCond49) Conditional ??CrossCallReturnLabel_358
          CFI (cfiCond49) R4 Frame(CFA, -16)
          CFI (cfiCond49) R5 Frame(CFA, -12)
          CFI (cfiCond49) R6 Frame(CFA, -8)
          CFI (cfiCond49) R14 Frame(CFA, -4)
          CFI (cfiCond49) CFA R13+80
          CFI Block cfiCond50 Using cfiCommon0
          CFI (cfiCond50) Function AppS2wCmd_Wmode
          CFI (cfiCond50) Conditional ??CrossCallReturnLabel_357
          CFI (cfiCond50) R4 Frame(CFA, -36)
          CFI (cfiCond50) R5 Frame(CFA, -32)
          CFI (cfiCond50) R6 Frame(CFA, -28)
          CFI (cfiCond50) R7 Frame(CFA, -24)
          CFI (cfiCond50) R8 Frame(CFA, -20)
          CFI (cfiCond50) R9 Frame(CFA, -16)
          CFI (cfiCond50) R10 Frame(CFA, -12)
          CFI (cfiCond50) R11 Frame(CFA, -8)
          CFI (cfiCond50) R14 Frame(CFA, -4)
          CFI (cfiCond50) CFA R13+72
          CFI Block cfiCond51 Using cfiCommon0
          CFI (cfiCond51) Function AppS2wCmd_Ping
          CFI (cfiCond51) Conditional ??CrossCallReturnLabel_356
          CFI (cfiCond51) R4 Frame(CFA, -16)
          CFI (cfiCond51) R5 Frame(CFA, -12)
          CFI (cfiCond51) R6 Frame(CFA, -8)
          CFI (cfiCond51) R14 Frame(CFA, -4)
          CFI (cfiCond51) CFA R13+72
          CFI Block cfiCond52 Using cfiCommon0
          CFI (cfiCond52) Function App_ClkTuneCmd
          CFI (cfiCond52) Conditional ??CrossCallReturnLabel_355
          CFI (cfiCond52) R4 Frame(CFA, -16)
          CFI (cfiCond52) R5 Frame(CFA, -12)
          CFI (cfiCond52) R6 Frame(CFA, -8)
          CFI (cfiCond52) R14 Frame(CFA, -4)
          CFI (cfiCond52) CFA R13+48
          CFI Block cfiPicker53 Using cfiCommon1
          CFI (cfiPicker53) NoFunction
          CFI (cfiPicker53) Picker
        THUMB
?Subroutine56:
        ADD      R1,SP,#+20
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_Int
          CFI FunCall AppS2wCmd_SystemTimeSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_Ping AppS2wParse_Int
          CFI FunCall App_ClkTuneCmd AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond48
          CFI EndBlock cfiCond49
          CFI EndBlock cfiCond50
          CFI EndBlock cfiCond51
          CFI EndBlock cfiCond52
          CFI EndBlock cfiPicker53

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond54 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_349
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond55 Using cfiCommon0
          CFI (cfiCond55) Function AppS2wCmd_HttpClientSend
          CFI (cfiCond55) Conditional ??CrossCallReturnLabel_348
          CFI (cfiCond55) R4 Frame(CFA, -28)
          CFI (cfiCond55) R5 Frame(CFA, -24)
          CFI (cfiCond55) R6 Frame(CFA, -20)
          CFI (cfiCond55) R7 Frame(CFA, -16)
          CFI (cfiCond55) R8 Frame(CFA, -12)
          CFI (cfiCond55) R9 Frame(CFA, -8)
          CFI (cfiCond55) R14 Frame(CFA, -4)
          CFI (cfiCond55) CFA R13+64
          CFI Block cfiCond56 Using cfiCommon0
          CFI (cfiCond56) Function AppS2wCmd_SystemTimeSet
          CFI (cfiCond56) Conditional ??CrossCallReturnLabel_347
          CFI (cfiCond56) R4 Frame(CFA, -16)
          CFI (cfiCond56) R5 Frame(CFA, -12)
          CFI (cfiCond56) R6 Frame(CFA, -8)
          CFI (cfiCond56) R14 Frame(CFA, -4)
          CFI (cfiCond56) CFA R13+80
          CFI Block cfiCond57 Using cfiCommon0
          CFI (cfiCond57) Function AppS2wCmd_SetSockOp
          CFI (cfiCond57) Conditional ??CrossCallReturnLabel_346
          CFI (cfiCond57) R14 Frame(CFA, -4)
          CFI (cfiCond57) CFA R13+32
          CFI Block cfiCond58 Using cfiCommon0
          CFI (cfiCond58) Function AppS2wCmd_Wmode
          CFI (cfiCond58) Conditional ??CrossCallReturnLabel_345
          CFI (cfiCond58) R4 Frame(CFA, -36)
          CFI (cfiCond58) R5 Frame(CFA, -32)
          CFI (cfiCond58) R6 Frame(CFA, -28)
          CFI (cfiCond58) R7 Frame(CFA, -24)
          CFI (cfiCond58) R8 Frame(CFA, -20)
          CFI (cfiCond58) R9 Frame(CFA, -16)
          CFI (cfiCond58) R10 Frame(CFA, -12)
          CFI (cfiCond58) R11 Frame(CFA, -8)
          CFI (cfiCond58) R14 Frame(CFA, -4)
          CFI (cfiCond58) CFA R13+72
          CFI Block cfiCond59 Using cfiCommon0
          CFI (cfiCond59) Function AppS2wCmd_DnsLookup
          CFI (cfiCond59) Conditional ??CrossCallReturnLabel_344
          CFI (cfiCond59) R4 Frame(CFA, -12)
          CFI (cfiCond59) R5 Frame(CFA, -8)
          CFI (cfiCond59) R14 Frame(CFA, -4)
          CFI (cfiCond59) CFA R13+40
          CFI Block cfiCond60 Using cfiCommon0
          CFI (cfiCond60) Function AppS2wCmd_Ping
          CFI (cfiCond60) Conditional ??CrossCallReturnLabel_343
          CFI (cfiCond60) R4 Frame(CFA, -16)
          CFI (cfiCond60) R5 Frame(CFA, -12)
          CFI (cfiCond60) R6 Frame(CFA, -8)
          CFI (cfiCond60) R14 Frame(CFA, -4)
          CFI (cfiCond60) CFA R13+72
          CFI Block cfiCond61 Using cfiCommon0
          CFI (cfiCond61) Function App_ClkTuneCmd
          CFI (cfiCond61) Conditional ??CrossCallReturnLabel_342
          CFI (cfiCond61) R4 Frame(CFA, -16)
          CFI (cfiCond61) R5 Frame(CFA, -12)
          CFI (cfiCond61) R6 Frame(CFA, -8)
          CFI (cfiCond61) R14 Frame(CFA, -4)
          CFI (cfiCond61) CFA R13+48
          CFI Block cfiPicker62 Using cfiCommon1
          CFI (cfiPicker62) NoFunction
          CFI (cfiPicker62) Picker
        THUMB
?Subroutine54:
        ADD      R1,SP,#+16
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_Int
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_Int
          CFI FunCall AppS2wCmd_SystemTimeSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_Int
          CFI FunCall AppS2wCmd_Ping AppS2wParse_Int
          CFI FunCall App_ClkTuneCmd AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond54
          CFI EndBlock cfiCond55
          CFI EndBlock cfiCond56
          CFI EndBlock cfiCond57
          CFI EndBlock cfiCond58
          CFI EndBlock cfiCond59
          CFI EndBlock cfiCond60
          CFI EndBlock cfiCond61
          CFI EndBlock cfiPicker62
// 3589 
// 3590 
// 3591 /**
// 3592  ******************************************************************
// 3593  * @ingroup S2w-Application
// 3594  * Process AT+WRXPS command.
// 3595  *   This funcion validates the parameter passed  and call the hal function
// 3596  *   to configure the PS-POLL mode.
// 3597  * @param ptr Pointer to the user input string.
// 3598  * @return S2W_SUCCESS - operation successful.
// 3599  * @retval S2W_EINVAL  - operation failure-invalid command.
// 3600  * @retval S2W_FAILURE - operation failure-Power save configuration failed.
// 3601  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock63 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSave
        THUMB
// 3602 UINT8
// 3603 AppS2wCmd_PowerSave(UINT8 *ptr)
// 3604 {
AppS2wCmd_PowerSave:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 3605     UINT8 enable;
// 3606     UINT8 status;
// 3607 	UINT8 *p;
// 3608 	UINT32 beaconWaitDur = 10;
        MOVS     R0,#+10
        BL       ?Subroutine34
// 3609     /* valiadate the parameter as TRUE or FALSE
// 3610      */
// 3611     p = AppS2wParse_NextParamGet(&ptr);
// 3612     status = AppS2wParse_Boolean(p, &enable);
??CrossCallReturnLabel_158:
        BL       ?Subroutine60
// 3613     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_384:
        CBNZ.N   R0,??AppS2wCmd_PowerSave_0
// 3614     {
// 3615         return status;
// 3616     }
// 3617 
// 3618 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 3619 	if (p)
??CrossCallReturnLabel_155:
        CBZ.N    R0,??AppS2wCmd_PowerSave_1
// 3620 	{
// 3621 		status = AppS2wParse_Int(p, &beaconWaitDur);
        BL       ?Subroutine52
// 3622 		if (status != S2W_SUCCESS)
??CrossCallReturnLabel_328:
        CBNZ.N   R0,??AppS2wCmd_PowerSave_0
// 3623 		{
// 3624 			return status;
// 3625 		}
// 3626 		
// 3627 		GsnWdd_PsCfgBeaconWaitDurSet(&s2wappMainTaskCtxt->if0.wddCtx, beaconWaitDur);
        BL       ?Subroutine128
??CrossCallReturnLabel_598:
        MOVW     R0,#+4336
        LDR      R0,[R0, R1]
        LDR      R1,[SP, #+4]
        STR      R1,[R0, #+144]
// 3628 	}
// 3629     /* call the hal function to configure the PS-POLL mode
// 3630      */
// 3631     status = AppS2wHal_PowerSaveConfig(enable);
??AppS2wCmd_PowerSave_1:
        LDRB     R0,[SP, #+0]
          CFI FunCall AppS2wHal_PowerSaveConfig
        BL       AppS2wHal_PowerSaveConfig
// 3632     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_PowerSave_0
// 3633     {
// 3634         return status;
// 3635     }
// 3636     s2wCurrent.powerSave = enable;
        LDR.W    R0,??DataTable393
        LDRB     R1,[SP, #+0]
        STRB     R1,[R0, #+7]
// 3637     return status;
        MOVS     R0,#+0
??AppS2wCmd_PowerSave_0:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock63
// 3638 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable388:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable388_1:
        DC32     stbySuccess
// 3639 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock64 Using cfiCommon0
          CFI Function AppS2wScan_Notification
        THUMB
// 3640 PUBLIC VOID
// 3641 AppS2wScan_Notification( VOID* cText,INT32 status, INT8 *rsltBuff,
// 3642    	                     UINT32 rsltCount )
// 3643 {
AppS2wScan_Notification:
        PUSH     {R2,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        MOV      R8,R1
        MOV      R10,R3
// 3644 	/* copy the data to user buffer and return
// 3645 	 */
// 3646     UINT8 i=0;
        MOVS     R6,#+0
// 3647 
// 3648     for(i=0;i<rsltCount;i++)
        MOV      R11,#+46
        LDR.W    R4,??DataTable400_1
        LDR.W    R9,??DataTable400_2
        B.N      ??AppS2wScan_Notification_0
// 3649     {
// 3650         
// 3651         GSN_WDD_SCAN_ENTRY_T* scanEntryBuff = (GSN_WDD_SCAN_ENTRY_T*)(rsltBuff + (i*sizeof(GSN_WDD_SCAN_ENTRY_T))) ;
??AppS2wScan_Notification_1:
        LDR      R2,[SP, #+0]
        MOVW     R1,#+558
        MLA      R5,R1,R6,R2
// 3652         if(scanEntryBuff->channel > 0)
        ADD      R7,R5,#+40
        LDRB     R0,[R7, #+2]
        CBZ.N    R0,??AppS2wScan_Notification_2
// 3653         {
// 3654         scanDisplayInfo[scanDisplayInfoCount].channel = scanEntryBuff->channel;
        LDRB     R1,[R4, #+0]
        MLA      R3,R11,R1,R9
// 3655         scanDisplayInfo[scanDisplayInfoCount].rssi = scanEntryBuff->rssi;
// 3656         memcpy(scanDisplayInfo[scanDisplayInfoCount].bssid.array,scanEntryBuff->bssid,6);
        MOVS     R2,#+6
        STRB     R0,[R3, #+39]
        ADD      R1,R5,#+34
        LDRH     R0,[R5, #+40]
        STRH     R0,[R3, #+40]
        ADD      R0,R3,#+33
          CFI FunCall memcpy
        BL       memcpy
// 3657         memcpy(&scanDisplayInfo[scanDisplayInfoCount].ssid,&scanEntryBuff->ssid,sizeof(GSN_WLAN_MAC_SSID_T));
        LDRB     R0,[R4, #+0]
        MOVS     R2,#+33
        ADDS     R1,R5,#+1
        MLA      R0,R11,R0,R9
          CFI FunCall memcpy
        BL       memcpy
// 3658         scanDisplayInfo[scanDisplayInfoCount].capability = GsnMacUtil_ExtractCapaInfo((GSN_MAC_FRAME_T*)scanEntryBuff->frame);
        ADD      R0,R5,#+46
          CFI FunCall GsnMacUtil_ExtractCapaInfo
        BL       GsnMacUtil_ExtractCapaInfo
        LDRB     R1,[R4, #+0]
        MLA      R1,R11,R1,R9
// 3659 
// 3660         scanDisplayInfo[scanDisplayInfoCount].encryptionType = GsnMacUtil_ExtractEncryptionStatus((GSN_MAC_FRAME_T*)scanEntryBuff->frame,scanEntryBuff->frameLen,GSN_MAC_BEACON_SSID_OFT,&scanDisplayInfo[scanDisplayInfoCount].authType);
        ADD      R3,R1,#+44
        STRB     R0,[R1, #+42]
        MOVS     R2,#+12
        LDRH     R1,[R7, #+4]
        ADD      R0,R5,#+46
          CFI FunCall GsnMacUtil_ExtractEncryptionStatus
        BL       GsnMacUtil_ExtractEncryptionStatus
        LDRB     R1,[R4, #+0]
        MLA      R2,R11,R1,R9
        STRB     R0,[R2, #+43]
// 3661         scanDisplayInfoCount++;
        ADDS     R0,R1,#+1
        STRB     R0,[R4, #+0]
// 3662         }
// 3663      
// 3664     }
??AppS2wScan_Notification_2:
        ADDS     R6,R6,#+1
??AppS2wScan_Notification_0:
        UXTB     R6,R6
        CMP      R6,R10
        BCC.N    ??AppS2wScan_Notification_1
// 3665 
// 3666     // if the scan finished release the scan wait semaphore
// 3667     if(status == GSN_WDD_SCAN_COMPLETE)
        LDR.W    R0,??DataTable400_3  ;; 0xb000010d
        CMP      R8,R0
        BNE.N    ??AppS2wScan_Notification_3
// 3668     {
// 3669                 //UINT8 ret;
// 3670 		 /*ret = */GsnOsal_SemRelease ( &stScanSemaphore );
        POP      {R1,R4-R11,LR}
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R9 SameValue
          CFI R10 SameValue
          CFI R11 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
        LDR.W    R0,??DataTable401_1
          CFI FunCall GsnOsal_SemRelease
        B.W      GsnOsal_SemRelease
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
// 3671                  
// 3672 	}
// 3673 }
??AppS2wScan_Notification_3:
        POP      {R0,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock64
// 3674 
// 3675 
// 3676 
// 3677 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock65 Using cfiCommon0
          CFI Function s2wScanResult_Print
        THUMB
// 3678 PUBLIC VOID
// 3679 s2wScanResult_Print(S2W_SCAN_DISPLAY_INFO_T scanDisplayInfo[],UINT8 count)
// 3680 {
s2wScanResult_Print:
        PUSH     {R1,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        SUB      SP,SP,#+16
          CFI CFA R13+56
        MOV      R4,R0
// 3681     UINT8 len=0,i=0;
// 3682     for(i=0;i<count;i++)
        MOVS     R5,#+0
        ADR.W    R8,`?<Constant ", %02d">`
        ADR.W    R11,`?<Constant "\\r\\n %02x:%02x:%02x:%02...">`
        ADR.W    R10,??DataTable391  ;; " "
        B.N      ??s2wScanResult_Print_0
// 3683     {
// 3684         /*print format --> bssid  ssid  channel  type   Security  RSSI
// 3685          */
// 3686          S2w_Printf("\r\n %02x:%02x:%02x:%02x:%02x:%02x, ",
// 3687            scanDisplayInfo[i].bssid.array[0], scanDisplayInfo[i].bssid.array[1], scanDisplayInfo[i].bssid.array[2],
// 3688            scanDisplayInfo[i].bssid.array[3], scanDisplayInfo[i].bssid.array[4], scanDisplayInfo[i].bssid.array[5]);
// 3689 
// 3690          AppS2wHal_CharNPut(scanDisplayInfo[i].ssid.array, scanDisplayInfo[i].ssid.length);
// 3691 
// 3692          for(len = (32- scanDisplayInfo[i].ssid.length);len>0;len--)
// 3693          {
// 3694              S2w_Printf(" ");
// 3695          }
// 3696          S2w_Printf(", %02d", scanDisplayInfo[i].channel);
// 3697 
// 3698          if((scanDisplayInfo[i].capability & GSN_MAC_CAPA_IBSS) )
// 3699          {
// 3700              S2w_Printf(",  ADHOC ");
// 3701          }
// 3702          else
// 3703          {
// 3704              S2w_Printf(",  INFRA ");
// 3705          }
// 3706          S2w_Printf(", %d ,",(signed char)scanDisplayInfo[i].rssi);
// 3707 
// 3708          /* print the security info
// 3709           */
// 3710          {
// 3711              UINT8* security = "NONE";
// 3712              if(scanDisplayInfo[i].capability & GSN_MAC_CAPA_PRIVA)
// 3713              {
// 3714                  if (scanDisplayInfo[i].encryptionType & GSN_MAC_ENC_WPA2)
// 3715                  {
// 3716                      if (GSN_MAC_RSNIE_KEYMGT_PSK  == scanDisplayInfo[i].authType)
// 3717                      {
// 3718                          security = "WPA2-PERSONAL";
// 3719                      }
// 3720                      else if (scanDisplayInfo[i].authType == GSN_MAC_RSNIE_KEYMGT_8021X)
// 3721                      {
// 3722                          security = "WPA2-ENTERPRISE";
// 3723                      }
// 3724                  }
// 3725                  else if (scanDisplayInfo[i].encryptionType & GSN_MAC_ENC_WPA)
// 3726                  {
// 3727                      if (GSN_MAC_RSNIE_KEYMGT_PSK  == scanDisplayInfo[i].authType)
// 3728                      {
// 3729                          security = "WPA-PERSONAL";
// 3730                      }
// 3731                      else if (scanDisplayInfo[i].authType == GSN_MAC_RSNIE_KEYMGT_8021X)
// 3732                      {
// 3733                          security = "WPA-ENTERPRISE";
// 3734                      }
// 3735                  }
// 3736                  else
// 3737                  {
// 3738                      /* Open with WEP cannot be identified from capabilities
// 3739                       */
// 3740                      security = "WEP";
??s2wScanResult_Print_1:
        ADR.N    R1,??DataTable391_1  ;; "WEP"
// 3741                  }
// 3742              }
// 3743              S2w_Printf(" %s", security);
??s2wScanResult_Print_2:
        ADR.N    R0,??DataTable391_2  ;; " %s"
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADDS     R5,R5,#+1
??s2wScanResult_Print_0:
        LDRB     R0,[SP, #+16]
        CMP      R5,R0
        BGE.N    ??s2wScanResult_Print_3
        MOVS     R0,#+46
        MUL      R7,R0,R5
        ADD      R9,R7,R4
        ADDW     R6,R9,#+33
        BL       ?Subroutine10
??CrossCallReturnLabel_16:
        LDRB     R1,[R9, #+33]
        MOV      R0,R11
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        LDRB     R1,[R7, R4]
        ADD      R0,R9,#+1
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
        LDRB     R0,[R7, R4]
        RSB      R7,R0,#+32
        B.N      ??s2wScanResult_Print_4
??s2wScanResult_Print_5:
        MOV      R0,R10
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        SUBS     R7,R7,#+1
??s2wScanResult_Print_4:
        UXTB     R7,R7
        CMP      R7,#+0
        BNE.N    ??s2wScanResult_Print_5
        LDRB     R1,[R6, #+6]
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADD      R6,R9,#+40
        LDRB     R0,[R6, #+2]
        LSLS     R0,R0,#+30
        ITE      MI 
        ADRMI.W  R0,`?<Constant ",  ADHOC ">`
        ADRPL.W  R0,`?<Constant ",  INFRA ">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        LDRSB    R1,[R9, #+40]
        ADR.W    R0,`?<Constant ", %d ,">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        LDRB     R0,[R6, #+2]
        LDR.W    R1,??DataTable402
        LSLS     R0,R0,#+27
        BPL.N    ??s2wScanResult_Print_2
        LDRB     R0,[R6, #+3]
        LSLS     R2,R0,#+27
        BPL.N    ??s2wScanResult_Print_6
        LDRB     R0,[R6, #+4]
        CMP      R0,#+2
        IT       EQ 
        ADREQ.W  R1,`?<Constant "WPA2-PERSONAL">`
        BEQ.N    ??s2wScanResult_Print_2
        CMP      R0,#+1
        BNE.N    ??s2wScanResult_Print_2
        ADR.W    R1,`?<Constant "WPA2-ENTERPRISE">`
        B.N      ??s2wScanResult_Print_2
??s2wScanResult_Print_6:
        LSLS     R0,R0,#+30
        BPL.N    ??s2wScanResult_Print_1
        LDRB     R0,[R6, #+4]
        CMP      R0,#+2
        IT       EQ 
        ADREQ.W  R1,`?<Constant "WPA-PERSONAL">`
        BEQ.N    ??s2wScanResult_Print_2
        CMP      R0,#+1
        BNE.N    ??s2wScanResult_Print_2
        ADR.W    R1,`?<Constant "WPA-ENTERPRISE">`
        B.N      ??s2wScanResult_Print_2
// 3744    		 }
// 3745 	 }
// 3746 }
??s2wScanResult_Print_3:
        ADD      SP,SP,#+20
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock65

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ", %02d">`:
        DC8 ", %02d"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n %02x:%02x:%02x:%02...">`:
        DC8 "\015\012 %02x:%02x:%02x:%02x:%02x:%02x, "
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ",  ADHOC ">`:
        DC8 ",  ADHOC "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ",  INFRA ">`:
        DC8 ",  INFRA "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ", %d ,">`:
        DC8 ", %d ,"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WPA2-PERSONAL">`:
        DC8 "WPA2-PERSONAL"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WPA2-ENTERPRISE">`:
        DC8 "WPA2-ENTERPRISE"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WPA-PERSONAL">`:
        DC8 "WPA-PERSONAL"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WPA-ENTERPRISE">`:
        DC8 "WPA-ENTERPRISE"
        DC8 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond66 Using cfiCommon0
          CFI Function AppS2wScanResult_Print
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_15
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond67 Using cfiCommon0
          CFI (cfiCond67) Function s2wScanResult_Print
          CFI (cfiCond67) NoCalls AppS2wScanResult_Print
          CFI (cfiCond67) NoCalls s2wScanResult_Print
          CFI (cfiCond67) Conditional ??CrossCallReturnLabel_16
          CFI (cfiCond67) R4 Frame(CFA, -36)
          CFI (cfiCond67) R5 Frame(CFA, -32)
          CFI (cfiCond67) R6 Frame(CFA, -28)
          CFI (cfiCond67) R7 Frame(CFA, -24)
          CFI (cfiCond67) R8 Frame(CFA, -20)
          CFI (cfiCond67) R9 Frame(CFA, -16)
          CFI (cfiCond67) R10 Frame(CFA, -12)
          CFI (cfiCond67) R11 Frame(CFA, -8)
          CFI (cfiCond67) R14 Frame(CFA, -4)
          CFI (cfiCond67) CFA R13+56
          CFI Block cfiPicker68 Using cfiCommon1
          CFI (cfiPicker68) NoFunction
          CFI (cfiPicker68) NoCalls AppS2wScanResult_Print
          CFI (cfiPicker68) NoCalls s2wScanResult_Print
          CFI (cfiPicker68) Picker
        THUMB
?Subroutine10:
        LDRB     R0,[R6, #+5]
        STR      R0,[SP, #+8]
        LDRB     R0,[R6, #+4]
        STR      R0,[SP, #+4]
        LDRB     R0,[R6, #+3]
        STR      R0,[SP, #+0]
        LDRB     R3,[R6, #+2]
        LDRB     R2,[R6, #+1]
        BX       LR
          CFI EndBlock cfiCond66
          CFI EndBlock cfiCond67
          CFI EndBlock cfiPicker68
// 3747 
// 3748 
// 3749 
// 3750 /**
// 3751  ******************************************************************
// 3752  * @ingroup S2w-Application
// 3753  * @brief Process the AT+WS Command.
// 3754  *   This function check the validy of the parameter passed and call the
// 3755  *   hal function to start the scan.
// 3756  *
// 3757  * @param ptr Pointer to the user input string.
// 3758  *
// 3759  * @return S2W_SUCCESS - operation successful.
// 3760  * @retval S2W_EINVAL  - operation failure-invalid command.
// 3761  * @retval S2W_FAILURE - operation failure-scan failed.
// 3762  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock69 Using cfiCommon0
          CFI Function AppS2wCmd_Wscan
        THUMB
// 3763 PRIVATE UINT8
// 3764 AppS2wCmd_Wscan(UINT8 *ptr)
// 3765 {
AppS2wCmd_Wscan:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
// 3766     UINT32 status = S2W_SUCCESS;
// 3767     UINT8 allChScan=0,i=0;
// 3768     S2W_WLANDATA_T params;
// 3769     GSN_WDD_SCAN_PARAMS_T scanParams;
// 3770     
// 3771     scanDisplayAllCount = 0;
        LDR.W    R4,??DataTable400_1
        SUB      SP,SP,#+116
          CFI CFA R13+152
        MOV      R5,R0
        MOVS     R6,#+0
        STRB     R6,[R4, #+1]
// 3772     memset(&params, 0, sizeof(params));
        MOVS     R2,#+48
        MOVS     R1,#+0
        ADD      R0,SP,#+64
          CFI FunCall memset
        BL       memset
        MOV      R1,R0
// 3773 
// 3774 
// 3775     if (*ptr == '=')
        LDRB     R0,[R5, #+0]
        CMP      R0,#+61
        BNE.N    ??AppS2wCmd_Wscan_0
// 3776     {
// 3777         /* check the parameter passed is valid
// 3778          */
// 3779         status = AppS2wParse_Wcmd(ptr + 1, &params, pwc_scan);
        MOVS     R2,#+0
        ADDS     R0,R5,#+1
          CFI FunCall AppS2wParse_Wcmd
        BL       AppS2wParse_Wcmd
// 3780     }
// 3781     else if (*ptr)
// 3782     {
// 3783         status = S2W_FAILURE;
// 3784     }
// 3785 
// 3786     if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Wscan_1
// 3787     {
// 3788         return status;
// 3789     }
// 3790 
// 3791     params.mode = s2wCurrent.mode;
??AppS2wCmd_Wscan_2:
        LDR.W    R5,??DataTable393
        LDRB     R0,[R5, #+4]
        STRB     R0,[SP, #+64]
// 3792 
// 3793     /* start the scan
// 3794      */
// 3795     if(!params.channel)  //scan all the channels
        LDRB     R0,[SP, #+65]
        CBNZ.N   R0,??AppS2wCmd_Wscan_3
// 3796     {
// 3797 		allChScan=1;
        MOVS     R6,#+1
// 3798     }
// 3799     memset(&scanParams,0,sizeof(GSN_WDD_SCAN_PARAMS_T));
??AppS2wCmd_Wscan_3:
        MOVS     R2,#+56
        BL       ?Subroutine16
// 3800     scanParams.scanType = GSN_MAC_SCAN_TYPE_ACTIVE;
??CrossCallReturnLabel_32:
        MOVS     R0,#+1
        STRB     R0,[SP, #+9]
// 3801     scanParams.ssid.length = params.ssidLen;
        ADD      R0,SP,#+9
        LDRB     R1,[SP, #+66]
        STRB     R1,[R0, #+1]
// 3802     scanParams.channel[1] = 0;
        MOVS     R1,#+0
// 3803     if(scanParams.ssid.length)
        LDRB     R2,[R0, #+1]
        STRB     R1,[SP, #+50]
        CBZ.N    R2,??AppS2wCmd_Wscan_4
// 3804     {
// 3805         memcpy(scanParams.ssid.array, params.ssid, scanParams.ssid.length);
        ADD      R1,SP,#+74
        ADD      R0,SP,#+11
          CFI FunCall memcpy
        BL       memcpy
// 3806     }
// 3807 	
// 3808     if(params.validBssid)
??AppS2wCmd_Wscan_4:
        LDRB     R0,[SP, #+67]
        CBZ.N    R0,??AppS2wCmd_Wscan_5
// 3809     {
// 3810         memcpy(scanParams.bssid.array, params.bssid,S2W_MAC_ADDR_SIZE);
        MOVS     R2,#+6
        ADD      R1,SP,#+68
        ADD      R0,SP,#+43
          CFI FunCall memcpy
        BL       memcpy
// 3811     }    
// 3812     
// 3813      S2w_Printf("\r\n       BSSID              SSID                     Channel  Type  RSSI Security");
??AppS2wCmd_Wscan_5:
        ADR.W    R0,`?<Constant "\\r\\n       BSSID       ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3814     for(i=1;i<15;i++)
        MOVS     R7,#+1
        LDR.W    R8,??DataTable400_2
        LDR.W    R9,??DataTable403
// 3815     {
// 3816         if(!params.channel)  //scan all the channels
??AppS2wCmd_Wscan_6:
        LDRB     R0,[SP, #+65]
        CMP      R0,#+0
        ITE      EQ 
        STRBEQ   R7,[SP, #+49]
        STRBNE   R0,[SP, #+49]
// 3817         {
// 3818             /* fill the channels in the scanParams structure
// 3819              */
// 3820             scanParams.channel[0] = i;
        B.N      ??AppS2wCmd_Wscan_7
// 3821 		}
??AppS2wCmd_Wscan_0:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wscan_2
        MOVS     R0,#+1
??AppS2wCmd_Wscan_1:
        B.N      ??AppS2wCmd_Wscan_8
// 3822         else
// 3823         {
// 3824             scanParams.channel[0] = params.channel;
// 3825 
// 3826         }
// 3827        
// 3828         scanDisplayInfoCount = 0;
??AppS2wCmd_Wscan_7:
        MOVS     R0,#+0
        STRB     R0,[R4, #+0]
// 3829 
// 3830         status = GsnWdd_Scan(&s2wappMainTaskCtxt->if0.wddCtx,&scanParams,(INT8 *)s2wScanUserEntryBuff,
// 3831 		                 (2 * sizeof(GSN_WDD_SCAN_ENTRY_T)),(GSN_WDD_SCAN_NOTIF_CB_T)AppS2wScan_Notification,s2wappMainTaskCtxt);
// 3832 		if(status == GSN_OPERATION_IN_PROGRESS)
        STR      R9,[SP, #+0]
        MOVW     R3,#+1116
        LDR.W    R0,??DataTable395_1
        LDR.W    R2,??DataTable403_1
        LDR      R0,[R0, #+0]
        STR      R0,[SP, #+4]
        ADD      R1,SP,#+8
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_Scan
        BL       GsnWdd_Scan
        LDR.W    R1,??DataTable403_2  ;; 0x80000001
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_Wscan_9
// 3833 		{
// 3834 			// wait on a semaphore to finish the scan
// 3835 			GsnOsal_SemAcquire ( &stScanSemaphore, GSN_OSAL_WAIT_FOREVER );
        MOV      R1,#-1
        LDR.W    R0,??DataTable401_1
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 3836 		}
// 3837 			if(params.ssid[0])
??AppS2wCmd_Wscan_9:
        LDRB     R0,[SP, #+74]
        CBZ.N    R0,??AppS2wCmd_Wscan_10
// 3838                         {
// 3839                           for(UINT index=0;index<scanDisplayInfoCount;index++)
        MOV      R10,#+0
??AppS2wCmd_Wscan_11:
        LDRB     R0,[R4, #+0]
        CMP      R10,R0
        BCS.N    ??AppS2wCmd_Wscan_12
// 3840                           {
// 3841                             if(!memcmp(&scanDisplayInfo[index].ssid.array,&params.ssid,scanDisplayInfo[index].ssid.length))
        MOVS     R0,#+46
        MUL      R0,R0,R10
        ADD      R11,R0,R8
        LDRB     R2,[R0, R8]
        ADD      R1,SP,#+74
        ADD      R0,R11,#+1
          CFI FunCall memcmp
        BL       memcmp
        CBNZ.N   R0,??AppS2wCmd_Wscan_13
// 3842                   {
// 3843                               s2wScanResult_Print(&scanDisplayInfo[index],1); 
        MOVS     R1,#+1
        MOV      R0,R11
          CFI FunCall s2wScanResult_Print
        BL       s2wScanResult_Print
// 3844                        scanDisplayAllCount++;
        LDRB     R0,[R4, #+1]
        ADDS     R0,R0,#+1
        STRB     R0,[R4, #+1]
// 3845                   }
// 3846                           }  
??AppS2wCmd_Wscan_13:
        ADD      R10,R10,#+1
        B.N      ??AppS2wCmd_Wscan_11
// 3847                           
// 3848                         }
// 3849                           
// 3850                          else
// 3851 		{
// 3852                         /* get the scanned info which is stored in the buffer and print it on serial
// 3853 			   then contimue.
// 3854 			 */
// 3855 			s2wScanResult_Print(scanDisplayInfo,scanDisplayInfoCount);
??AppS2wCmd_Wscan_10:
        LDRB     R1,[R4, #+0]
        MOV      R0,R8
          CFI FunCall s2wScanResult_Print
        BL       s2wScanResult_Print
// 3856 			scanDisplayAllCount +=scanDisplayInfoCount;
        LDRB     R0,[R4, #+1]
        LDRB     R1,[R4, #+0]
        ADDS     R0,R1,R0
        STRB     R0,[R4, #+1]
// 3857 		}
// 3858 			// break the loop if scan for only one channel or finished
// 3859 		if((allChScan !=1) || ((scanParams.channel[0] == S2W_MAX_CH) && (s2wCurrent.regDomain == S2W_DOMAIN_FCC))
// 3860 		   ||((scanParams.channel[0] == (S2W_MAX_CH+2)) && (s2wCurrent.regDomain == S2W_DOMAIN_ETSI)) ||
// 3861 		     ((scanParams.channel[0] == (S2W_MAX_CH+3)) && (s2wCurrent.regDomain == S2W_DOMAIN_TELEC)))
??AppS2wCmd_Wscan_12:
        CBZ.N    R6,??AppS2wCmd_Wscan_14
        LDRB     R0,[SP, #+49]
        CMP      R0,#+11
        BNE.N    ??AppS2wCmd_Wscan_15
        LDRB     R0,[R5, #+917]
        CMP      R0,#+0
        B.N      ??AppS2wCmd_Wscan_16
??AppS2wCmd_Wscan_15:
        CMP      R0,#+13
        BNE.N    ??AppS2wCmd_Wscan_17
        LDRB     R0,[R5, #+917]
        CMP      R0,#+1
??AppS2wCmd_Wscan_16:
        BNE.N    ??AppS2wCmd_Wscan_18
        B.N      ??AppS2wCmd_Wscan_14
??AppS2wCmd_Wscan_17:
        CMP      R0,#+14
        ITT      EQ 
        LDRBEQ   R0,[R5, #+917]
        CMPEQ    R0,#+2
        BEQ.N    ??AppS2wCmd_Wscan_14
// 3862 			{
// 3863 				break;
// 3864 		}
// 3865 
// 3866 	}
??AppS2wCmd_Wscan_18:
        ADDS     R7,R7,#+1
        UXTB     R7,R7
        CMP      R7,#+15
        BLT.N    ??AppS2wCmd_Wscan_6
// 3867 	    S2w_Printf("\r\nNo.Of AP Found:%d\r\n",scanDisplayAllCount);
??AppS2wCmd_Wscan_14:
        LDRB     R1,[R4, #+1]
        ADR.W    R0,`?<Constant "\\r\\nNo.Of AP Found:%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 3868 
// 3869     status = S2W_SUCCESS;
// 3870     return status;
        MOVS     R0,#+0
??AppS2wCmd_Wscan_8:
        ADD      SP,SP,#+116
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock69
// 3871 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable391:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable391_1:
        DC8      "WEP"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable391_2:
        DC8      " %s"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n       BSSID       ...">`:
        DC8 0DH, 0AH, 20H, 20H, 20H, 20H, 20H, 20H
        DC8 20H, 42H, 53H, 53H, 49H, 44H, 20H, 20H
        DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
        DC8 20H, 20H, 20H, 20H, 53H, 53H, 49H, 44H
        DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
        DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 20H
        DC8 20H, 20H, 20H, 20H, 20H, 43H, 68H, 61H
        DC8 6EH, 6EH, 65H, 6CH, 20H, 20H, 54H, 79H
        DC8 70H, 65H, 20H, 20H, 52H, 53H, 53H, 49H
        DC8 20H, 53H, 65H, 63H, 75H, 72H, 69H, 74H
        DC8 79H, 0
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nNo.Of AP Found:%d\\r\\n">`:
        DC8 "\015\012No.Of AP Found:%d\015\012"
        DC8 0, 0
// 3872 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock70 Using cfiCommon0
          CFI Function S2w_getApSecurityConfig
        THUMB
// 3873 VOID
// 3874 S2w_getApSecurityConfig(GSN_WDD_WLAN_CFG_T *pWlanConfig, UINT8 securityType)
// 3875 {
S2w_getApSecurityConfig:
        PUSH     {R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+24
        MOV      R8,R0
        MOV      R5,R1
// 3876 	switch(securityType)
        LDR.N    R6,??DataTable393
        ADDW     R7,R6,#+597
        ADD      R4,R8,#+64
        MOVS     R0,R5
        BEQ.N    ??S2w_getApSecurityConfig_0
        CMP      R5,#+1
        BEQ.N    ??S2w_getApSecurityConfig_1
        CMP      R5,#+2
        BEQ.N    ??S2w_getApSecurityConfig_2
        CMP      R5,#+4
        BEQ.N    ??S2w_getApSecurityConfig_3
        CMP      R5,#+8
        BEQ.N    ??S2w_getApSecurityConfig_4
        CMP      R5,#+64
        BEQ.N    ??S2w_getApSecurityConfig_5
        B.N      ??S2w_getApSecurityConfig_6
// 3877     {
// 3878     	case SECTYPE_AUTO:
// 3879       	{
// 3880       		pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
??S2w_getApSecurityConfig_0:
        MOVS     R0,#+2
        STRB     R0,[R8, #+64]
// 3881         	pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
        B.N      ??S2w_getApSecurityConfig_7
// 3882     	}
// 3883     	break;
// 3884     	case SECTYPE_WEP:
// 3885     	{
// 3886 			pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WEP;
??S2w_getApSecurityConfig_2:
        MOVS     R0,#+4
        STRB     R0,[R8, #+64]
// 3887             if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
        LDRB     R0,[R6, #+4]
        CMP      R0,#+6
        BNE.N    ??S2w_getApSecurityConfig_8
// 3888             {
// 3889                 pWlanConfig->securityCfg.wepConfig.KeyId = S2W_DEFAULT_GRP_PROV_WEP_KEY_ID -1  ;
        MOVS     R0,#+0
        STRB     R0,[R4, #+3]
// 3890                 pWlanConfig->securityCfg.wepConfig.KeyLen = (GSN_WDD_WEP_KEY_LEN_T)S2W_DEFAULT_GRP_PROV_WEP_KEY_LEN ; /**< Key len, 5 or 13 */
// 3891                 memcpy(&pWlanConfig->securityCfg.wepConfig.Key,S2W_DEFAULT_GRP_PROV_WEP_KEY,
// 3892                         S2W_DEFAULT_GRP_PROV_WEP_KEY_LEN);
        MOVS     R2,#+5
        MOVS     R0,#+5
        STRB     R0,[R4, #+2]
        ADD      R0,R8,#+68
        ADR.W    R1,S2W_DEFAULT_GRP_PROV_WEP_KEY
          CFI FunCall memcpy
        BL       memcpy
// 3893                 if(S2W_DEFAULT_GRP_PROV_WEP_AUTH == GSN_MAC_AUTH_SHARED)
// 3894                 {
// 3895                     pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
// 3896                 }
// 3897                 else // open
// 3898                 {
// 3899                     pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
        B.N      ??S2w_getApSecurityConfig_9
// 3900                 }
// 3901             }
// 3902             else
// 3903             {
// 3904 			pWlanConfig->securityCfg.wepConfig.KeyId = s2wCurrent.lmtdApConf.wepKeyConfig.KeyId -1  ;
??S2w_getApSecurityConfig_8:
        LDRB     R0,[R7, #+2]
        SUBS     R0,R0,#+1
        STRB     R0,[R4, #+3]
// 3905 			pWlanConfig->securityCfg.wepConfig.KeyLen = s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen ; /**< Key len, 5 or 13 */
// 3906 			memcpy(&pWlanConfig->securityCfg.wepConfig.Key,&s2wCurrent.lmtdApConf.wepKeyConfig.Key,
// 3907 					s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen); 
        ADD      R1,R6,#+600
        LDRB     R0,[R7, #+1]
        STRB     R0,[R4, #+2]
        ADD      R0,R8,#+68
        LDRB     R2,[R7, #+1]
          CFI FunCall memcpy
        BL       memcpy
// 3908 			if(s2wCurrent.lmtdApConf.wepKeyConfig.authType== GSN_MAC_AUTH_SHARED)
        LDRB     R0,[R6, #+597]
        CMP      R0,#+2
        ITT      EQ 
        MOVEQ    R0,#+1
        STRBEQ   R0,[R4, #+1]
// 3909 			{
// 3910 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
// 3911 			}
// 3912 			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
        LDRB     R0,[R6, #+120]
        CMP      R0,#+1
        BNE.N    ??S2w_getApSecurityConfig_6
// 3913 			{
// 3914 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
??S2w_getApSecurityConfig_9:
        MOVS     R0,#+0
        STRB     R0,[R4, #+1]
        B.N      ??S2w_getApSecurityConfig_6
// 3915 			}
// 3916     	}
// 3917     	}
// 3918     	break;
// 3919     	case SECTYPE_NONE:
// 3920     	{
// 3921         	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_DISABLE;
??S2w_getApSecurityConfig_1:
        STRB     R5,[R8, #+64]
// 3922     	}
// 3923    		break;
        B.N      ??S2w_getApSecurityConfig_6
// 3924 
// 3925 		case SECTYPE_WPAPSK:
// 3926     	{
// 3927         	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_PERSONAL;
??S2w_getApSecurityConfig_3:
        MOVS     R0,#+8
        STRB     R0,[R8, #+64]
// 3928         	pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_TKIP;
        MOVS     R0,#+1
        B.N      ??S2w_getApSecurityConfig_7
// 3929     	}
// 3930     	break;
// 3931    		case SECTYPE_WPA2PSK:
// 3932    		{
// 3933        		pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
??S2w_getApSecurityConfig_4:
        MOVS     R0,#+32
        STRB     R0,[R8, #+64]
// 3934        		pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_AES;
        MOVS     R0,#+0
        B.N      ??S2w_getApSecurityConfig_7
// 3935    		}
// 3936 	    break;
// 3937         case SECTYPE_WPA2PSK_TKIP:
// 3938 	    {
// 3939     	   	pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
??S2w_getApSecurityConfig_5:
        MOVS     R0,#+32
        STRB     R0,[R8, #+64]
// 3940        		pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
        MOVS     R0,#+2
??S2w_getApSecurityConfig_7:
        STRB     R0,[R4, #+18]
// 3941    		}
// 3942    		break;
// 3943 	}
// 3944     if((securityType == SECTYPE_WPAPSK) || \ 
// 3945        (securityType == SECTYPE_WPA2PSK) || \ 
// 3946        (securityType == SECTYPE_WPA2PSK_TKIP))
??S2w_getApSecurityConfig_6:
        CMP      R5,#+4
        ITT      NE 
        CMPNE    R5,#+8
        CMPNE    R5,#+64
        BNE.N    ??S2w_getApSecurityConfig_10
// 3947     {
// 3948        if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
        LDRB     R0,[R6, #+4]
        CMP      R0,#+6
        BNE.N    ??S2w_getApSecurityConfig_11
// 3949        {
// 3950            pWlanConfig->securityCfg.pskConfig.passPhrase.Len = sizeof (S2W_DEFAULT_GRP_PROV_WPA_PASSPHRASE)- 1 ;
        MOVS     R0,#+11
        STRB     R0,[R4, #+19]
// 3951            memcpy( pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase, S2W_DEFAULT_GRP_PROV_WPA_PASSPHRASE,
// 3952                    pWlanConfig->securityCfg.pskConfig.passPhrase.Len);
        MOVS     R2,#+11
        ADR.W    R1,`?<Constant "Serial2Wifi">`
        ADD      R0,R8,#+84
          CFI FunCall memcpy
        BL       memcpy
// 3953            pWlanConfig->securityCfg.pskConfig.pskValid = 0;
        MOVS     R0,#+0
        STRB     R0,[R4, #+17]
        B.N      ??S2w_getApSecurityConfig_10
// 3954 
// 3955        }
// 3956        else
// 3957 	{
// 3958 		pWlanConfig->securityCfg.pskConfig.passPhrase.Len = s2wCurrent.lmtdApConf.passphrase.Len ;
// 3959 		memcpy( pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase, s2wCurrent.lmtdApConf.passphrase.Passphrase,
// 3960 				 s2wCurrent.lmtdApConf.passphrase.Len);
??S2w_getApSecurityConfig_11:
        ADD      R1,R6,#+532
        LDRB     R0,[R6, #+531]
        STRB     R0,[R4, #+19]
        ADD      R0,R8,#+84
        LDRB     R2,[R6, #+531]
          CFI FunCall memcpy
        BL       memcpy
// 3961 		pWlanConfig->securityCfg.pskConfig.pskValid = s2wCurrent.lmtdApConf.lmtdApPskValid;
        LDRB     R0,[R7, #+16]
        STRB     R0,[R4, #+17]
// 3962 		if(s2wCurrent.lmtdApConf.lmtdApPskValid == 1)
        LDRB     R0,[R7, #+16]
        CMP      R0,#+1
        BNE.N    ??S2w_getApSecurityConfig_10
// 3963 		{
// 3964 			memcpy( pWlanConfig->securityCfg.pskConfig.psk, s2wCurrent.lmtdApConf.lmtdApPsk,
// 3965 				 S2W_PSK_LEN);
        ADDW     R1,R6,#+614
        ADD      R0,R8,#+148
        POP      {R4-R8,LR}
          CFI R4 SameValue
          CFI R5 SameValue
          CFI R6 SameValue
          CFI R7 SameValue
          CFI R8 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
        MOVS     R2,#+32
          CFI FunCall memcpy
        B.W      memcpy
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
// 3966 		 }
// 3967 	}
// 3968 }
// 3969 }
??S2w_getApSecurityConfig_10:
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock70

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
// static __absolute unsigned char const S2W_DEFAULT_GRP_PROV_WEP_KEY[5]
S2W_DEFAULT_GRP_PROV_WEP_KEY:
        DC8 18, 52, 86, 120, 144, 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "Serial2Wifi">`:
        DC8 "Serial2Wifi"

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock71 Using cfiCommon0
          CFI Function S2w_getSecurityConfig
        THUMB
// 3970 VOID
// 3971 S2w_getSecurityConfig(GSN_WDD_WLAN_CFG_T *pWlanConfig)
// 3972 {
S2w_getSecurityConfig:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOV      R4,R0
// 3973     /* copy the security parameter passed
// 3974      */
// 3975     pWlanConfig->securityCfg.wepConfig.KeyId =
// 3976                                             s2wCurrent.security.wep.keyIdx-1;
        LDR.N    R5,??DataTable393
        ADD      R0,R5,#+120
        LDRB     R1,[R0, #+2]
        SUBS     R1,R1,#+1
        STRB     R1,[R4, #+67]
// 3977     pWlanConfig->securityCfg.wepConfig.KeyLen =
// 3978             (GSN_WDD_WEP_KEY_LEN_T)s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx-1];
        LDRB     R1,[R0, #+2]
        ADDS     R1,R1,R5
        LDRB     R1,[R1, #+122]
        STRB     R1,[R4, #+66]
        LDRB     R0,[R0, #+2]
        ADDS     R1,R0,R5
        LDRB     R2,[R1, #+122]
        MOVS     R1,#+13
        MLA      R0,R1,R0,R5
        ADD      R1,R0,#+114
        ADD      R0,R4,#+68
// 3979     memcpy(pWlanConfig->securityCfg.wepConfig.Key,
// 3980             s2wCurrent.security.wep.key[s2wCurrent.security.wep.keyIdx-1],
// 3981             s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx-1]);
          CFI FunCall memcpy
        BL       memcpy
// 3982 
// 3983     pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
        MOVS     R0,#+2
        STRB     R0,[R4, #+64]
// 3984     pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
        STRB     R0,[R4, #+82]
// 3985 
// 3986     switch(s2wCurrent.securityType)
        LDRB     R0,[R5, #+469]
        CBZ.N    R0,??S2w_getSecurityConfig_0
        CMP      R0,#+1
        BEQ.N    ??S2w_getSecurityConfig_1
        CMP      R0,#+2
        BEQ.N    ??S2w_getSecurityConfig_2
        CMP      R0,#+4
        BEQ.N    ??S2w_getSecurityConfig_3
        CMP      R0,#+8
        BEQ.N    ??S2w_getSecurityConfig_4
        CMP      R0,#+16
        BEQ.N    ??S2w_getSecurityConfig_5
        CMP      R0,#+32
        BEQ.N    ??S2w_getSecurityConfig_6
        CMP      R0,#+64
        BEQ.N    ??S2w_getSecurityConfig_7
        B.N      ??S2w_getSecurityConfig_8
// 3987     {
// 3988         case SECTYPE_AUTO:
// 3989         {
// 3990             pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_ANY;
// 3991             pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
// 3992 			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_SHARED)
// 3993 			{
// 3994 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
// 3995 			}
// 3996 			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
// 3997 			{
// 3998 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
// 3999 			}
// 4000         }
// 4001         break;
// 4002         case SECTYPE_WEP:
// 4003         {
// 4004 			pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WEP;
??S2w_getSecurityConfig_2:
        MOVS     R0,#+4
        STRB     R0,[R4, #+64]
// 4005 			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_SHARED)
??S2w_getSecurityConfig_0:
        LDRB     R0,[R5, #+120]
        CMP      R0,#+2
        ITT      EQ 
        MOVEQ    R0,#+1
        STRBEQ   R0,[R4, #+65]
// 4006 			{
// 4007 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_SHARED;
// 4008 			}
// 4009 			if(s2wCurrent.security.authMode == GSN_MAC_AUTH_OPEN)
        LDRB     R0,[R5, #+120]
        CMP      R0,#+1
        BNE.N    ??S2w_getSecurityConfig_8
// 4010 			{
// 4011 				pWlanConfig->securityCfg.wepConfig.authType = GSN_WDD_SEC_WEP_OPEN;
        MOVS     R0,#+0
        STRB     R0,[R4, #+65]
        B.N      ??S2w_getSecurityConfig_8
// 4012 			}
// 4013         }
// 4014         break;
// 4015         case SECTYPE_NONE:
// 4016         {
// 4017             pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_DISABLE;
// 4018         }
// 4019         break;
// 4020         case SECTYPE_WPAPSK:
// 4021         {
// 4022             pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_PERSONAL;
??S2w_getSecurityConfig_3:
        MOVS     R0,#+8
// 4023             pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_TKIP;
// 4024         }
// 4025         break;
// 4026         case SECTYPE_WPA:
// 4027         {
// 4028             pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA_ENTERPRISE;
??S2w_getSecurityConfig_5:
        STRB     R0,[R4, #+64]
// 4029 			pWlanConfig->securityCfg.pskConfig.wpaAlgo =GSN_WDD_WPA_ALGO_TKIP	;
        MOVS     R0,#+1
        B.N      ??S2w_getSecurityConfig_9
// 4030             break;
// 4031         }
// 4032        case SECTYPE_WPA2PSK:
// 4033        {
// 4034            pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
??S2w_getSecurityConfig_4:
        MOVS     R0,#+32
        STRB     R0,[R4, #+64]
// 4035            pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_AES;
        MOVS     R0,#+0
??S2w_getSecurityConfig_9:
        STRB     R0,[R4, #+82]
// 4036        }
// 4037        break;
        B.N      ??S2w_getSecurityConfig_8
// 4038 	   case SECTYPE_WPA2:
// 4039 	   {
// 4040 		   pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_ENTERPRISE;
??S2w_getSecurityConfig_6:
        MOVS     R0,#+64
        B.N      ??S2w_getSecurityConfig_1
// 4041 		   pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
// 4042 		   break;
// 4043 	   }
// 4044        case SECTYPE_WPA2PSK_TKIP:
// 4045        {
// 4046            pWlanConfig->securityCfg.mode = GSN_WDD_SEC_MODE_WPA2_PERSONAL;
??S2w_getSecurityConfig_7:
        MOVS     R0,#+32
??S2w_getSecurityConfig_1:
        STRB     R0,[R4, #+64]
// 4047            pWlanConfig->securityCfg.pskConfig.wpaAlgo = GSN_WDD_WPA_ALGO_MIXED;
// 4048        }
// 4049        break;
// 4050     }
// 4051 
// 4052 
// 4053     /* if psk key is valid copy that to wlan structure
// 4054      */
// 4055     if(s2wCurrent.security.wpa.pskValid) // copy the psk
??S2w_getSecurityConfig_8:
        ADDW     R6,R5,#+243
        LDRB     R0,[R6, #+1]
        CBZ.N    R0,??CrossCallReturnLabel_406
// 4056     {
// 4057         memcpy(&pWlanConfig->securityCfg.pskConfig.psk,
// 4058                       s2wCurrent.security.wpa.psk, 32);
        MOVS     R2,#+32
        ADD      R1,R5,#+245
        ADD      R0,R4,#+148
          CFI FunCall memcpy
        BL       memcpy
// 4059         /* if psk is valid check the profile ssid matches with ssid passed else make it false
// 4060          */
// 4061         if((memcmp(s2wCurrent.security.wpa.ssid, pWlanConfig->ssid.array,pWlanConfig->ssid.length) != 0) &&
// 4062             (s2wCurrent.security.wpa.ssidLen > 0))
        ADDW     R7,R5,#+277
        LDRB     R2,[R4, #+0]
        ADDS     R1,R4,#+1
        MOV      R0,R7
          CFI FunCall memcmp
        BL       memcmp
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R0,[R5, #+309]
        CMPNE    R0,#+0
        BEQ.N    ??S2w_getSecurityConfig_10
// 4063         {
// 4064             s2wCurrent.security.wpa.pskValid = 0;
        MOVS     R0,#+0
        STRB     R0,[R6, #+1]
        B.N      ??CrossCallReturnLabel_406
// 4065         }
// 4066         else if((memcmp(s2wCurrent.security.wpa.ssid,pWlanConfig->ssid.array,pWlanConfig->ssid.length) == 0) &&
// 4067                (pWlanConfig->ssid.length != s2wCurrent.security.wpa.ssidLen) &&
// 4068                (s2wCurrent.security.wpa.ssidLen > 0))
??S2w_getSecurityConfig_10:
        ADDS     R1,R4,#+1
        LDRB     R2,[R4, #+0]
        MOV      R0,R7
          CFI FunCall memcmp
        BL       memcmp
        CBNZ.N   R0,??CrossCallReturnLabel_406
        LDRB     R0,[R5, #+309]
        LDRB     R1,[R4, #+0]
        CMP      R1,R0
        IT       NE 
        CMPNE    R0,#+0
        BEQ.N    ??CrossCallReturnLabel_406
// 4069         {
// 4070             s2wCurrent.security.wpa.pskValid = 0;
        MOVS     R0,#+0
        STRB     R0,[R6, #+1]
// 4071             memset(s2wCurrent.security.wpa.ssid,0,sizeof(s2wCurrent.security.wpa.ssid));
        BL       ?Subroutine67
// 4072         }
// 4073     }
// 4074     pWlanConfig->securityCfg.pskConfig.pskValid =
// 4075                                                s2wCurrent.security.wpa.pskValid;
??CrossCallReturnLabel_406:
        LDRB     R0,[R6, #+1]
        STRB     R0,[R4, #+81]
// 4076 
// 4077     memcpy(pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase,
// 4078            s2wCurrent.security.wpa.wpaPassPhrase,
// 4079            s2wCurrent.security.wpa.passPhraseLen);
        ADD      R1,R5,#+179
        LDRB     R2,[R5, #+243]
        ADD      R0,R4,#+84
          CFI FunCall memcpy
        BL       memcpy
// 4080     pWlanConfig->securityCfg.pskConfig.passPhrase.Len =
// 4081                                        s2wCurrent.security.wpa.passPhraseLen;
        LDRB     R0,[R5, #+243]
        STRB     R0,[R4, #+83]
// 4082 
// 4083 }
        POP      {R0,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock71

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable393:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable393_1:
        DC32     s2wIsAutoconnected

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable393_2:
        DC32     s2wLinkState

        SECTION `.data`:DATA:REORDER:NOROOT(2)
globalUseHRssi:
        DATA
        DC8 0
// 4084 
// 4085 
// 4086 
// 4087 
// 4088 #define APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE  2048
// 4089 INT32 L2ConnectStatus = 0;
// 4090 UINT8 L3ConnectStatus=0;
L3ConnectStatus:
        DC8 0
// 4091 UINT8 L3ConnectStatus_v6=0;
L3ConnectStatus_v6:
        DC8 0
        DC8 0
S2wL3Wait:
        DC8 0, 0, 0, 0
S2WError_List:
        DC32 `?<Constant "\\r\\nNO ERROR">`
        DC32 `?<Constant "\\r\\nSSID NOT FOUND">`
        DC32 `?<Constant "\\r\\nWLAN CONNECT ERROR">`
        DC32 `?<Constant "\\r\\nWPA AUTH FAIL">`
L2ConnectStatus:
        DC32 0
// 4092 UINT8 L3Dhcpv6Status=0;
// 4093 INT8 dhcpv6ClientStack[APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE];
// 4094 
// 4095 /**
// 4096  ******************************************************************
// 4097  * @ingroup S2w-Application
// 4098  * @brief Process the AT+WA Command.
// 4099  *   This command check the validity of parameters passed and call the
// 4100  *   hal association function.
// 4101  * @param ptr pointer to the user input string.
// 4102  *
// 4103  * @return S2W_SUCCESS - operation successful.
// 4104  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4105  * @retval S2W_FAILURE - operation failure-scan failed.
// 4106  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock72 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
        THUMB
// 4107 PRIVATE UINT8
// 4108 AppS2wCmd_Wassoc(UINT8 *ptr)
// 4109 {
AppS2wCmd_Wassoc:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
        SUB      SP,SP,#+324
          CFI CFA R13+360
        BL       ?Subroutine28
// 4110     S2W_WLANDATA_T params;
// 4111 #ifndef S2W_IP2WIFI_SUPPORT
// 4112     GSN_NWIF_DHCP_PARAMS_T dhcpParams;
// 4113     GSN_NWIF_IP_CONFIG_T ipConfig;
// 4114 #endif
// 4115 #ifdef S2W_IPv6_SUPPORT
// 4116     GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
// 4117     GSN_NWIF_IPv6_CONFIG_T userIpv6Config;
// 4118 
// 4119 
// 4120 #endif
// 4121     INT32  index;
// 4122 	UINT8 mac[6],macStr[25];
// 4123 
// 4124     UINT32 status;
// 4125     GSN_WDD_CONNECT_FLAG_T conctflags=GSN_WDD_CONNECT_FLAG_NONE;
// 4126     GSN_STATUS retVal = GSN_SUCCESS;
// 4127     UINT8 eapFastRetryCnt = 0;
// 4128     memset(&params, 0, sizeof(params));
??CrossCallReturnLabel_75:
        BL       ?Subroutine99
// 4129     globalUseHRssi = 0;
// 4130 	L3ConnectStatus=0;
// 4131         L3ConnectStatus_v6=0;
// 4132     /* check the validity of the parameters passed
// 4133      */
// 4134     status = AppS2wParse_Wcmd(ptr, &params, pwc_assoc);
// 4135     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_512:
        CMP      R0,#+0
        BNE.W    ??AppS2wCmd_Wassoc_0
// 4136     {
// 4137         return status;
// 4138     }
// 4139 #ifdef S2W_SECURITY_WPS_ENABLE
// 4140     wpsConnDone = FALSE;
        BL       ?Subroutine20
// 4141 #endif
// 4142     if ((s2wLinkState != S2W_LINK_STATE_DISCONNECTED) || (GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE))
??CrossCallReturnLabel_44:
        CBNZ.N   R0,??AppS2wCmd_Wassoc_1
        BL       ?Subroutine120
??CrossCallReturnLabel_579:
        CMP      R0,#+1
        BNE.N    ??CrossCallReturnLabel_589
// 4143     {
// 4144         //S2w_Debug("disconnecting\n\n");
// 4145 		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
// 4146 						   GSN_SOFT_TMR_ONESHOT,0,
// 4147 							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
// 4148 						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
??AppS2wCmd_Wassoc_1:
        BL       ?Subroutine5
??CrossCallReturnLabel_5:
        BL       ?Subroutine121
// 4149         retVal = AppS2wHal_Disassociate(0);
// 4150 		GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
??CrossCallReturnLabel_581:
        BL       ?Subroutine110
// 4151 #ifndef S2W_IP2WIFI_SUPPORT
// 4152         if(retVal != GSN_FAILURE)
// 4153         {
// 4154             GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
??CrossCallReturnLabel_545:
        BL       ?Subroutine123
// 4155 		}
// 4156 #endif
// 4157     }
// 4158 
// 4159     /* Copy the mode.
// 4160      */
// 4161     params.mode = s2wCurrent.mode;
??CrossCallReturnLabel_589:
        BL       ?Subroutine17
// 4162     /* execute the wdd part for connection
// 4163      */
// 4164 
// 4165         GSN_WDD_WLAN_CFG_T *pWlanConfig;
// 4166       //  GsnOsal_SemCreate  ( &s2wConnectSemaphore, 0 );
// 4167         pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
// 4168         memset(pWlanConfig, 0, sizeof(*pWlanConfig));
// 4169         pWlanConfig->ssid.length = params.ssidLen;
??CrossCallReturnLabel_641:
        BL       ?Subroutine112
// 4170         memcpy((INT8 *)pWlanConfig->ssid.array, params.ssid, pWlanConfig->ssid.length);
// 4171 		if(params.validBssid)
??CrossCallReturnLabel_549:
        LDRB     R0,[SP, #+55]
        CBZ.N    R0,??AppS2wCmd_Wassoc_2
// 4172 		{
// 4173 			memcpy((INT8 *)pWlanConfig->bssid.array,params.bssid,S2W_MAC_ADDR_SIZE);
        BL       ?Subroutine114
// 4174 			conctflags = GSN_WDD_CONNECT_FLAG_USE_BSSID;
??CrossCallReturnLabel_554:
        MOV      R10,#+16
// 4175 		}
// 4176 
// 4177         if(params.channel)
??AppS2wCmd_Wassoc_2:
        LDRB     R0,[SP, #+53]
        CBZ.N    R0,??AppS2wCmd_Wassoc_3
// 4178         {
// 4179         pWlanConfig->channel[0] = params.channel;
        STRB     R0,[R8, #+39]
// 4180         pWlanConfig->channel[1] = 0;
        STRB     R9,[R8, #+40]
        B.N      ??CrossCallReturnLabel_247
// 4181 		}
// 4182 		else
// 4183 		{
// 4184 			pWlanConfig->channel[0] = 1;
??AppS2wCmd_Wassoc_3:
        BL       ?Subroutine46
// 4185             pWlanConfig->channel[1] = 2;
// 4186             pWlanConfig->channel[2] = 3;
// 4187             pWlanConfig->channel[3] = 4;
// 4188             pWlanConfig->channel[4] = 5;
// 4189             pWlanConfig->channel[5] = 6;
// 4190             pWlanConfig->channel[6] = 7;
// 4191             pWlanConfig->channel[7] = 8;
// 4192             pWlanConfig->channel[8] = 9;
// 4193             pWlanConfig->channel[9] = 10;
// 4194             pWlanConfig->channel[10] = 11;
// 4195             switch(s2wCurrent.regDomain)
// 4196             {
// 4197 				case S2W_DOMAIN_FCC:
// 4198             pWlanConfig->channel[11] = 0;
// 4199 				break;
// 4200 				case S2W_DOMAIN_ETSI:
// 4201 				pWlanConfig->channel[11] = 12;
// 4202 				pWlanConfig->channel[12] = 13;
// 4203 				pWlanConfig->channel[13] = 0;
// 4204 				break;
// 4205 				case S2W_DOMAIN_TELEC:
// 4206 				pWlanConfig->channel[11] = 12;
// 4207 				pWlanConfig->channel[12] = 13;
// 4208 				pWlanConfig->channel[13] = 14;
// 4209 				pWlanConfig->channel[14] = 0;
// 4210 				break;
// 4211 				default:
// 4212 				pWlanConfig->channel[11] = 0;
// 4213 				break;
// 4214 			}
// 4215 		}
// 4216         
// 4217         S2w_getSecurityConfig(pWlanConfig);
??CrossCallReturnLabel_247:
        MOV      R0,R8
          CFI FunCall S2w_getSecurityConfig
        BL       S2w_getSecurityConfig
// 4218 		if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_STA)
        LDR      R0,[R6, #+0]
        LDRB     R1,[R0, #+2508]
        CMP      R1,#+1
        IT       EQ 
        ORREQ    R10,R10,#0x7
// 4219 		{
// 4220 			conctflags = (GSN_WDD_CONNECT_FLAG_T) (conctflags | (GSN_WDD_CONNECT_FLAG_SCAN_BEFORE_CONNECT | GSN_WDD_CONNECT_FLAG_ACTIVE_SCAN | GSN_WDD_CONNECT_FLAG_HIGHEST_RSSI_NW));
        BEQ.N    ??AppS2wCmd_Wassoc_4
// 4221 		}
// 4222 		else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
        CMP      R1,#+2
        BNE.N    ??AppS2wCmd_Wassoc_4
// 4223 		{
// 4224 			conctflags = GSN_WDD_CONNECT_FLAG_NONE;
// 4225 			pWlanConfig->apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
        BL       ?Subroutine124
// 4226 			pWlanConfig->apSpecificCfg.hiddenSsid = s2wappMainTaskCtxt->bcastSsid;
// 4227 			pWlanConfig->apSpecificCfg.dtimPeriod = s2wappMainTaskCtxt->dtimPeriod;
// 4228 			s2wappMainTaskCtxt->if0.wddCtx.wlanConfigExtn.inactivityTimeoutInSec =s2wappMainTaskCtxt->inactivityTimeoutInSec;
??CrossCallReturnLabel_590:
        ITEE     NE 
        CMPNE    R0,#+1
        MOVEQ    R0,#+4
        STRBEQ   R0,[R8, #+64]
// 4229 			if( (GSN_MAC_AUTH_SHARED == s2wCurrent.security.authMode ) ||
// 4230 				(GSN_MAC_AUTH_OPEN == s2wCurrent.security.authMode))
// 4231 			{
// 4232 				pWlanConfig->securityCfg.mode= GSN_WDD_SEC_MODE_WEP;
// 4233 			}
// 4234         }
// 4235                 
// 4236         /*AppS2wHal_MacAddrSet(s2wCurrent.macAddr);*/
// 4237 		L2ConnectStatus = 0;
??AppS2wCmd_Wassoc_4:
        BL       ?Subroutine3
// 4238 		pWlanConfig->securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
// 4239 		pWlanConfig->securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
// 4240 		memcpy(pWlanConfig->securityCfg.eapConfig.userName.Name, s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
// 4241 		pWlanConfig->securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
??CrossCallReturnLabel_1:
        BL       ?Subroutine93
// 4242 		memcpy(pWlanConfig->securityCfg.eapConfig.password.Pwd, s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
// 4243 		pWlanConfig->securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
??CrossCallReturnLabel_496:
        BL       ?Subroutine58
// 4244 
// 4245         if(s2wCurrent.eapCertTimeValidChkDisbl)
// 4246         {
// 4247 	        pWlanConfig->securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
??CrossCallReturnLabel_364:
        CBNZ.N   R0,??AppS2wCmd_Wassoc_5
        LDR      R0,[R11, #+312]
        CMP      R0,#+13
        ITTT     EQ 
        LDREQ    R0,[SP, #+0]
        LDREQ    R0,[R0, #+4]
        CMPEQ    R0,#+26
        BNE.N    ??CrossCallReturnLabel_251
??AppS2wCmd_Wassoc_5:
        BL       ?Subroutine89
// 4248         }
// 4249 #if 1
// 4250 		if( s2wCurrent.security.eap.useCaCert ||
// 4251 			(( 13 == s2wCurrent.security.eap.outerAuth)&&
// 4252 			( 26 == s2wCurrent.security.eap.innerAuth )))
// 4253 		{
// 4254             index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
// 4255             if(index == -1)
??CrossCallReturnLabel_480:
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable409
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 4256             {
// 4257                 index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
// 4258             }
// 4259 	    if(index != -1)
        BL       ?Subroutine48
// 4260 	    {
// 4261                 pWlanConfig->securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 4262                 pWlanConfig->securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 4263 	    }
// 4264 		}
??CrossCallReturnLabel_251:
        BL       ?Subroutine90
// 4265         index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
// 4266         if(index == -1)
??CrossCallReturnLabel_483:
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable409_1
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 4267         {
// 4268             index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
// 4269         }
// 4270 	    if(index != -1)
        BL       ?Subroutine47
// 4271 	    {
// 4272 	    	pWlanConfig->securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 4273             pWlanConfig->securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 4274 	    }
// 4275         index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
// 4276         if(index == -1)
??CrossCallReturnLabel_250:
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable409_2
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 4277         {
// 4278             index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
// 4279 	    }
// 4280 	    if(index != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_Wassoc_6
// 4281 	    {
// 4282 	        pWlanConfig->securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
        BL       ?Subroutine86
// 4283             pWlanConfig->securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 4284 	    }
??CrossCallReturnLabel_468:
        B.N      ??AppS2wCmd_Wassoc_6
// 4285 #endif
// 4286 TRY_AGAIN:
// 4287 		/* start the timer*/
// 4288 		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
// 4289 						   GSN_SOFT_TMR_ONESHOT,0,
// 4290 							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
// 4291 						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
// 4292 
// 4293 		/* Enable crypto */
// 4294 		GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
// 4295 		
// 4296         status = GsnWdd_Connect(&s2wappMainTaskCtxt->if0.wddCtx, conctflags, pWlanConfig, NULL,
// 4297                        s2wApp_ConnectCb, s2wappMainTaskCtxt);
// 4298         if (GSN_OPERATION_IN_PROGRESS != status)
// 4299         {
// 4300             s2wApp_ConnectCb( NULL,status);
// 4301         }
// 4302         else
// 4303         {
// 4304             status = GSN_SUCCESS;
// 4305         }
// 4306 
// 4307         /* wait on a semaphore to finish the asociation
// 4308          */
// 4309         GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
// 4310         
// 4311        AppS2w_ConctCbProcess(s2wappMainTaskCtxt, L2ConnectStatus);
// 4312        
// 4313        
// 4314        if(0 == eapFastRetryCnt && s2wLinkState == S2W_LINK_STATE_DISCONNECTED &&
// 4315             s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST)
// 4316        {
// 4317             eapFastRetryCnt++;
??AppS2wCmd_Wassoc_7:
        MOV      R9,#+1
// 4318             goto TRY_AGAIN;
// 4319        }
??AppS2wCmd_Wassoc_6:
        BL       ?Subroutine4
??CrossCallReturnLabel_3:
        BL       ?Subroutine82
??CrossCallReturnLabel_636:
        BL       ?Subroutine83
??CrossCallReturnLabel_463:
        BL       ?Subroutine102
??CrossCallReturnLabel_522:
        BEQ.N    ??AppS2wCmd_Wassoc_8
        MOV      R1,R7
        MOVS     R0,#+0
          CFI FunCall s2wApp_ConnectCb
        BL       s2wApp_ConnectCb
        B.N      ??AppS2wCmd_Wassoc_9
??AppS2wCmd_Wassoc_8:
        MOVS     R7,#+0
??AppS2wCmd_Wassoc_9:
        BL       ?Subroutine106
??CrossCallReturnLabel_533:
        LDR      R1,[R4, #+24]
        LDR      R0,[R6, #+0]
          CFI FunCall AppS2w_ConctCbProcess
        BL       AppS2w_ConctCbProcess
        CMP      R9,#+0
        ITTT     EQ 
        LDREQ.W  R0,??DataTable409_4
        LDRBEQ   R0,[R0, #+0]
        CMPEQ    R0,#+0
        ITT      EQ 
        LDREQ    R0,[R11, #+312]
        CMPEQ    R0,#+43
        BEQ.N    ??AppS2wCmd_Wassoc_7
// 4320        
// 4321        
// 4322         if(params.mode == 2)
        LDRB     R0,[SP, #+52]
        CMP      R0,#+2
        BEQ.N    ??AppS2wCmd_Wassoc_10
// 4323         {
// 4324             current_wlan_info.mode = S2W_WLANDATA_MODE_AP;
// 4325 	    }
// 4326 	    else
// 4327 	    {
// 4328 	        GsnHeIf_DriverSuspend();
          CFI FunCall GsnHeIf_DriverSuspend
        BL       GsnHeIf_DriverSuspend
// 4329             current_wlan_info.mode = S2W_WLANDATA_MODE_INFRA;
        MOVS     R0,#+1
// 4330 		}
??AppS2wCmd_Wassoc_10:
        BL       ?Subroutine129
// 4331 #ifdef S2W_IP2WIFI_SUPPORT  // ip2wifi
// 4332         if((status == GSN_SUCCESS) &&(L2ConnectStatus == GSN_SUCCESS ))  
// 4333         {
// 4334             return S2W_SUCCESS;
// 4335         }
// 4336         else
// 4337         {
// 4338             return S2W_FAILURE;
// 4339         }
// 4340         
// 4341 #else // s2w 
// 4342         if((status == GSN_SUCCESS) && (TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx)))
??CrossCallReturnLabel_602:
        BNE.N    ??AppS2wCmd_Wassoc_11
        BL       ?Subroutine120
??CrossCallReturnLabel_578:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_Wassoc_11
// 4343 
// 4344         {
// 4345             
// 4346             memset(&ipConfig,0,sizeof(ipConfig));
        BL       ?Subroutine29
// 4347             GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
??CrossCallReturnLabel_77:
        BL       ?Subroutine123
// 4348             ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
??CrossCallReturnLabel_588:
        BL       ?Subroutine63
// 4349             
// 4350             ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
// 4351             if(ipConfig.ipv4.staticIp) // static ip
??CrossCallReturnLabel_394:
        BEQ.N    ??AppS2wCmd_Wassoc_12
// 4352             {
// 4353                 memcpy((UINT8*)&ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4);
        BL       ?Subroutine11
// 4354                 memcpy((UINT8*)&ipConfig.ipv4.subnetMask, s2wCurrent.netConf.netMask, 4);
??CrossCallReturnLabel_18:
        BL       ?Subroutine12
// 4355                 memcpy((UINT8*)&ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4);
??CrossCallReturnLabel_20:
        BL       ?Subroutine13
// 4356                 memcpy((UINT8*)&ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
??CrossCallReturnLabel_22:
        BL       ?Subroutine14
// 4357                 memcpy((UINT8*)&ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
??CrossCallReturnLabel_24:
        BL       ?Subroutine15
// 4358                 S2wL3Wait = TRUE;
??CrossCallReturnLabel_26:
        MOVS     R0,#+1
        STR      R0,[R4, #+4]
// 4359             }
// 4360              if(strlen((const char *)s2wCurrent.hostName) != 0)
??AppS2wCmd_Wassoc_12:
        BL       ?Subroutine69
??CrossCallReturnLabel_421:
        CBNZ.N   R0,??CrossCallReturnLabel_547
// 4361 			 {
// 4362 				 memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 4363 					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
// 4364 			 }
// 4365 			else
// 4366 			{     
// 4367      			S2w_macAddrRTCGet(mac);
        BL       ?Subroutine32
// 4368 		      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
??CrossCallReturnLabel_105:
        BL       ?Subroutine31
// 4369 			    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
??CrossCallReturnLabel_101:
        ADD      R0,SP,#+24
          CFI FunCall strlen
        BL       strlen
        BL       ?Subroutine111
// 4370 				memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 4371 					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
// 4372     		}
??CrossCallReturnLabel_547:
        BL       ?Subroutine116
// 4373             s2wappMainTaskCtxt->if0.nwifCtx.notifyCb = DHCP_notify;
??CrossCallReturnLabel_559:
        BL       ?Subroutine24
// 4374             memset(&dhcpParams,0,sizeof(dhcpParams));
// 4375             dhcpParams.dhcpMaxRetryCnt = S2W_DHCP_MAX_RETRY_COUNT;
??CrossCallReturnLabel_54:
        BL       ?Subroutine108
// 4376             dhcpParams.radioMode = s2wCurrent.netConf.dhcpRadioMode;
// 4377             dhcpParams.requestLeaseTime = s2wCurrent.dhcpRequestLeaseTime;            
// 4378             dhcpParams.dhcpRetryTimeout = s2wCurrent.dhcpRetryTimeout;
// 4379               S2wL3Wait = TRUE;
// 4380            
// 4381             status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, &dhcpParams);
??CrossCallReturnLabel_540:
        BL       ?Subroutine102
// 4382 
// 4383              if((status != GSN_OPERATION_IN_PROGRESS) && !ipConfig.ipv4.staticIp)
??CrossCallReturnLabel_520:
        BEQ.N    ??AppS2wCmd_Wassoc_13
        LDR      R0,[SP, #+112]
        CBNZ.N   R0,??AppS2wCmd_Wassoc_13
// 4384                 {
// 4385                     DHCP_notify(status,NULL);
        MOVS     R1,#+0
        MOV      R0,R7
          CFI FunCall DHCP_notify
        BL       DHCP_notify
// 4386                 }
// 4387             if(ipConfig.ipv4.staticIp)
??AppS2wCmd_Wassoc_13:
        LDR      R0,[SP, #+112]
        CBZ.N    R0,??AppS2wCmd_Wassoc_14
// 4388             {
// 4389                 if(GSN_SUCCESS == status)
        CBNZ.N   R7,??CrossCallReturnLabel_532
// 4390                 {
// 4391                     L3ConnectStatus = TRUE;
        MOVS     R0,#+1
        STRB     R0,[R4, #+1]
        B.N      ??AppS2wCmd_Wassoc_15
// 4392             	}
// 4393             }
// 4394             else
// 4395             {
// 4396             	GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
??AppS2wCmd_Wassoc_14:
        BL       ?Subroutine106
// 4397             }
// 4398             
// 4399 #ifdef S2W_IPv6_SUPPORT
// 4400             memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
// 4401             memset(&userIpv6Config,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
// 4402             S2w_getDhcpv6Clientconfig(&dhcpParams); 
// 4403             if(s2wCurrent.netConf.dhcpv6)
// 4404             {
// 4405             	userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)(GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR | GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG );
// 4406             }
// 4407             else
// 4408             {
// 4409               userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR;
// 4410             }
// 4411             S2wL3Wait = TRUE;
// 4412             status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Config, &dhcpParams);
// 4413             if(status != GSN_OPERATION_IN_PROGRESS)
// 4414                 {
// 4415                     DHCP_notify(status,NULL);
// 4416                 }
// 4417             GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
// 4418 #endif
// 4419             
// 4420             if(L3ConnectStatus)
??CrossCallReturnLabel_532:
        LDRB     R0,[R4, #+1]
        CBZ.N    R0,??AppS2wCmd_Wassoc_11
// 4421             {
// 4422                 AppS2wHdrAndIpv4_Print();
??AppS2wCmd_Wassoc_15:
          CFI FunCall AppS2wHdrAndIpv4_Print
        BL       AppS2wHdrAndIpv4_Print
// 4423 #ifdef S2W_IPv6_SUPPORT
// 4424                 if(L3ConnectStatus_v6)
// 4425                 AppS2wHdrAndIpv6_Print();
// 4426 #endif                
// 4427 			}
// 4428 
// 4429         }
// 4430 
// 4431 	if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==1))
??AppS2wCmd_Wassoc_11:
        BL       ?Subroutine120
??CrossCallReturnLabel_577:
        CMP      R0,#+1
        ITT      EQ 
        LDRBEQ   R0,[R4, #+1]
        CMPEQ    R0,#+1
        BNE.N    ??AppS2wCmd_Wassoc_16
// 4432         {
// 4433                 S2wL3Wait = FALSE;
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
// 4434                if(ipConfig.ipv4.staticIp)
        LDR      R0,[SP, #+112]
        CBZ.N    R0,??CrossCallReturnLabel_593
// 4435                {
// 4436                 nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
        BL       ?Subroutine125
// 4437                }
// 4438                 GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
??CrossCallReturnLabel_593:
        BL       ?Subroutine66
// 4439                 GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
??CrossCallReturnLabel_404:
        BL       ?Subroutine109
// 4440  
// 4441 		return S2W_SUCCESS;
??CrossCallReturnLabel_542:
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_Wassoc_0
// 4442         }
// 4443         else if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==0))
??AppS2wCmd_Wassoc_16:
        BL       ?Subroutine120
??CrossCallReturnLabel_576:
        CMP      R0,#+1
        ITT      EQ 
        LDRBEQ   R0,[R4, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_Wassoc_17
// 4444         {
// 4445                 GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
        BL       ?Subroutine123
// 4446                 S2wL3Wait = FALSE;
??CrossCallReturnLabel_587:
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
// 4447            // AppS2wProcess_DhcpFailNotify();
// 4448 			return S2W_ENOIP;
        MOVS     R0,#+15
        B.N      ??AppS2wCmd_Wassoc_0
// 4449         }
// 4450         else
// 4451         {
// 4452 			// failure case so check the log level and depends on it print info
// 4453 			//if(s2wappMainTaskCtxt->logLevel > 0)s2wCurrent.logLevel
// 4454         	if(s2wCurrent.logLevel > 0)
??AppS2wCmd_Wassoc_17:
        LDRB     R0,[R11, #+936]
        CBZ.N    R0,??AppS2wCmd_Wassoc_18
// 4455 			{
// 4456 				 UINT32 errorCode=0;
// 4457 				 GSN_WDD_ERROR_T *logInfo = GsnWdd_ErrorGet(&s2wappMainTaskCtxt->if0.wddCtx);
        BL       ?Subroutine104
??CrossCallReturnLabel_527:
        MOV      R6,R0
// 4458                  if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_AP_NOT_FOUND)
        LDR      R0,[R6, #+0]
        LSLS     R1,R0,#+31
        IT       MI 
        MOVMI    R5,#+1
// 4459                  {
// 4460                       errorCode = S2W_ERROR_CODE_AP_NOT_FOUND;
        BMI.N    ??AppS2wCmd_Wassoc_19
// 4461 				 }
// 4462 				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WLAN_FAIL_TO_CONCT)
        LSLS     R1,R0,#+30
        IT       MI 
        MOVMI    R5,#+2
// 4463 				 {
// 4464 					  errorCode = S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT;
        BMI.N    ??AppS2wCmd_Wassoc_19
// 4465 				 }
// 4466 				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WPA_AUTH_FAILURE)
        LSLS     R0,R0,#+29
        IT       MI 
        MOVMI    R5,#+3
// 4467 				 {
// 4468 					  errorCode = S2W_ERROR_CODE_WPA_AUTH_FAILURE;
// 4469 				 }
// 4470 				 S2w_Printf(S2WError_List[errorCode]);
??AppS2wCmd_Wassoc_19:
        BL       ?Subroutine92
// 4471 				 if(logInfo->reasonString != NULL)
??CrossCallReturnLabel_494:
        LDR      R0,[R6, #+8]
        CBZ.N    R0,??AppS2wCmd_Wassoc_18
// 4472 				 {
// 4473 					 S2w_Printf("\r\n");
        BL       ?Subroutine91
// 4474                      S2w_Printf(logInfo->reasonString);
??CrossCallReturnLabel_492:
        LDR      R0,[R6, #+8]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 4475 				 }
// 4476 
// 4477 			}
// 4478           return S2W_FAILURE;
??AppS2wCmd_Wassoc_18:
        MOVS     R0,#+1
// 4479         }
??AppS2wCmd_Wassoc_0:
        B.W      ?Subroutine0
          CFI EndBlock cfiBlock72
// 4480 //return S2W_SUCCESS;
// 4481 #endif // ip2wifi
// 4482 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond73 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_545
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond74 Using cfiCommon0
          CFI (cfiCond74) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond74) Conditional ??CrossCallReturnLabel_544
          CFI (cfiCond74) R4 Frame(CFA, -36)
          CFI (cfiCond74) R5 Frame(CFA, -32)
          CFI (cfiCond74) R6 Frame(CFA, -28)
          CFI (cfiCond74) R7 Frame(CFA, -24)
          CFI (cfiCond74) R8 Frame(CFA, -20)
          CFI (cfiCond74) R9 Frame(CFA, -16)
          CFI (cfiCond74) R10 Frame(CFA, -12)
          CFI (cfiCond74) R11 Frame(CFA, -8)
          CFI (cfiCond74) R14 Frame(CFA, -4)
          CFI (cfiCond74) CFA R13+360
          CFI Block cfiPicker75 Using cfiCommon1
          CFI (cfiPicker75) NoFunction
          CFI (cfiPicker75) Picker
        THUMB
?Subroutine110:
        LDR      R1,[R6, #+0]
          CFI Block cfiCond76 Using cfiCommon0
          CFI (cfiCond76) Function s2wApp_ConnectCb
          CFI (cfiCond76) Conditional ??CrossCallReturnLabel_543
          CFI (cfiCond76) R4 Frame(CFA, -8)
          CFI (cfiCond76) R14 Frame(CFA, -4)
          CFI (cfiCond76) CFA R13+8
??Subroutine110_0:
        MOVW     R0,#+33216
        LDR      R0,[R0, R1]
          CFI FunCall AppS2wCmd_Wassoc GsnSoftTmr_Stop
          CFI FunCall AppS2wCmd_Wassoc_test GsnSoftTmr_Stop
          CFI FunCall s2wApp_ConnectCb GsnSoftTmr_Stop
        B.W      GsnSoftTmr_Stop
          CFI EndBlock cfiCond73
          CFI EndBlock cfiCond74
          CFI EndBlock cfiPicker75
          CFI EndBlock cfiCond76

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond77 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_636
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond78 Using cfiCommon0
          CFI (cfiCond78) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond78) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond78) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond78) Conditional ??CrossCallReturnLabel_635
          CFI (cfiCond78) R4 Frame(CFA, -36)
          CFI (cfiCond78) R5 Frame(CFA, -32)
          CFI (cfiCond78) R6 Frame(CFA, -28)
          CFI (cfiCond78) R7 Frame(CFA, -24)
          CFI (cfiCond78) R8 Frame(CFA, -20)
          CFI (cfiCond78) R9 Frame(CFA, -16)
          CFI (cfiCond78) R10 Frame(CFA, -12)
          CFI (cfiCond78) R11 Frame(CFA, -8)
          CFI (cfiCond78) R14 Frame(CFA, -4)
          CFI (cfiCond78) CFA R13+360
          CFI Block cfiPicker79 Using cfiCommon1
          CFI (cfiPicker79) NoFunction
          CFI (cfiPicker79) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker79) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker79) Picker
        THUMB
?Subroutine82:
        LDR      R2,[R6, #+0]
        MOVW     R1,#+33216
        STR      R0,[R1, R2]
          CFI EndBlock cfiCond77
          CFI EndBlock cfiCond78
          CFI EndBlock cfiPicker79
        REQUIRE ??Subroutine140_0
        ;; // Fall through to label ??Subroutine140_0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond80 Using cfiCommon0
          CFI Function AppS2wCmd_WpaPsk
          CFI Conditional ??CrossCallReturnLabel_634
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+152
          CFI Block cfiCond81 Using cfiCommon0
          CFI (cfiCond81) Function AppS2wCmd_NcmAuto
          CFI (cfiCond81) Conditional ??CrossCallReturnLabel_633
          CFI (cfiCond81) R4 Frame(CFA, -36)
          CFI (cfiCond81) R5 Frame(CFA, -32)
          CFI (cfiCond81) R6 Frame(CFA, -28)
          CFI (cfiCond81) R7 Frame(CFA, -24)
          CFI (cfiCond81) R8 Frame(CFA, -20)
          CFI (cfiCond81) R9 Frame(CFA, -16)
          CFI (cfiCond81) R10 Frame(CFA, -12)
          CFI (cfiCond81) R11 Frame(CFA, -8)
          CFI (cfiCond81) R14 Frame(CFA, -4)
          CFI (cfiCond81) CFA R13+1344
          CFI Block cfiCond82 Using cfiCommon0
          CFI (cfiCond82) Function AppS2wCmd_Wassoc
          CFI (cfiCond82) Conditional ??CrossCallReturnLabel_636
          CFI (cfiCond82) R4 Frame(CFA, -36)
          CFI (cfiCond82) R5 Frame(CFA, -32)
          CFI (cfiCond82) R6 Frame(CFA, -28)
          CFI (cfiCond82) R7 Frame(CFA, -24)
          CFI (cfiCond82) R8 Frame(CFA, -20)
          CFI (cfiCond82) R9 Frame(CFA, -16)
          CFI (cfiCond82) R10 Frame(CFA, -12)
          CFI (cfiCond82) R11 Frame(CFA, -8)
          CFI (cfiCond82) R14 Frame(CFA, -4)
          CFI (cfiCond82) CFA R13+360
          CFI Block cfiCond83 Using cfiCommon0
          CFI (cfiCond83) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond83) Conditional ??CrossCallReturnLabel_635
          CFI (cfiCond83) R4 Frame(CFA, -36)
          CFI (cfiCond83) R5 Frame(CFA, -32)
          CFI (cfiCond83) R6 Frame(CFA, -28)
          CFI (cfiCond83) R7 Frame(CFA, -24)
          CFI (cfiCond83) R8 Frame(CFA, -20)
          CFI (cfiCond83) R9 Frame(CFA, -16)
          CFI (cfiCond83) R10 Frame(CFA, -12)
          CFI (cfiCond83) R11 Frame(CFA, -8)
          CFI (cfiCond83) R14 Frame(CFA, -4)
          CFI (cfiCond83) CFA R13+360
          CFI Block cfiPicker84 Using cfiCommon1
          CFI (cfiPicker84) NoFunction
          CFI (cfiPicker84) Picker
        THUMB
??Subroutine140_0:
        LDR.W    R0,??DataTable413  ;; 0x41010018
        LDR      R0,[R0, #+0]
          CFI FunCall AppS2wCmd_WpaPsk GsnHeIf_DriverInit
          CFI FunCall AppS2wCmd_NcmAuto GsnHeIf_DriverInit
          CFI FunCall AppS2wCmd_Wassoc GsnHeIf_DriverInit
          CFI FunCall AppS2wCmd_Wassoc_test GsnHeIf_DriverInit
        B.W      GsnHeIf_DriverInit
          CFI EndBlock cfiCond80
          CFI EndBlock cfiCond81
          CFI EndBlock cfiCond82
          CFI EndBlock cfiCond83
          CFI EndBlock cfiPicker84

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable395:
        DC32     curCid

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable395_1:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond85 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_641
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond86 Using cfiCommon0
          CFI (cfiCond86) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond86) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond86) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond86) Conditional ??CrossCallReturnLabel_640
          CFI (cfiCond86) R4 Frame(CFA, -36)
          CFI (cfiCond86) R5 Frame(CFA, -32)
          CFI (cfiCond86) R6 Frame(CFA, -28)
          CFI (cfiCond86) R7 Frame(CFA, -24)
          CFI (cfiCond86) R8 Frame(CFA, -20)
          CFI (cfiCond86) R9 Frame(CFA, -16)
          CFI (cfiCond86) R10 Frame(CFA, -12)
          CFI (cfiCond86) R11 Frame(CFA, -8)
          CFI (cfiCond86) R14 Frame(CFA, -4)
          CFI (cfiCond86) CFA R13+360
          CFI Block cfiPicker87 Using cfiCommon1
          CFI (cfiPicker87) NoFunction
          CFI (cfiPicker87) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker87) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker87) Picker
        THUMB
?Subroutine17:
        LDR.W    R11,??DataTable413_1
        LDRB     R0,[R11, #+4]
        STRB     R0,[SP, #+52]
        MOV      R2,#+348
        LDR      R0,[R6, #+0]
        ADDW     R8,R0,#+3988
          CFI EndBlock cfiCond85
          CFI EndBlock cfiCond86
          CFI EndBlock cfiPicker87
        REQUIRE ??Subroutine141_0
        ;; // Fall through to label ??Subroutine141_0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond88 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientConfig
          CFI Conditional ??CrossCallReturnLabel_639
          CFI R4 Frame(CFA, -32)
          CFI R5 Frame(CFA, -28)
          CFI R6 Frame(CFA, -24)
          CFI R7 Frame(CFA, -20)
          CFI R8 Frame(CFA, -16)
          CFI R9 Frame(CFA, -12)
          CFI R10 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond89 Using cfiCommon0
          CFI (cfiCond89) Function AppS2wCmd_WeapConf
          CFI (cfiCond89) Conditional ??CrossCallReturnLabel_638
          CFI (cfiCond89) R4 Frame(CFA, -24)
          CFI (cfiCond89) R5 Frame(CFA, -20)
          CFI (cfiCond89) R6 Frame(CFA, -16)
          CFI (cfiCond89) R7 Frame(CFA, -12)
          CFI (cfiCond89) R8 Frame(CFA, -8)
          CFI (cfiCond89) R14 Frame(CFA, -4)
          CFI (cfiCond89) CFA R13+32
          CFI Block cfiCond90 Using cfiCommon0
          CFI (cfiCond90) Function AppS2wCmd_WeapConf
          CFI (cfiCond90) Conditional ??CrossCallReturnLabel_637
          CFI (cfiCond90) R4 Frame(CFA, -24)
          CFI (cfiCond90) R5 Frame(CFA, -20)
          CFI (cfiCond90) R6 Frame(CFA, -16)
          CFI (cfiCond90) R7 Frame(CFA, -12)
          CFI (cfiCond90) R8 Frame(CFA, -8)
          CFI (cfiCond90) R14 Frame(CFA, -4)
          CFI (cfiCond90) CFA R13+32
          CFI Block cfiCond91 Using cfiCommon0
          CFI (cfiCond91) Function AppS2wCmd_Wassoc
          CFI (cfiCond91) Conditional ??CrossCallReturnLabel_641
          CFI (cfiCond91) R4 Frame(CFA, -36)
          CFI (cfiCond91) R5 Frame(CFA, -32)
          CFI (cfiCond91) R6 Frame(CFA, -28)
          CFI (cfiCond91) R7 Frame(CFA, -24)
          CFI (cfiCond91) R8 Frame(CFA, -20)
          CFI (cfiCond91) R9 Frame(CFA, -16)
          CFI (cfiCond91) R10 Frame(CFA, -12)
          CFI (cfiCond91) R11 Frame(CFA, -8)
          CFI (cfiCond91) R14 Frame(CFA, -4)
          CFI (cfiCond91) CFA R13+360
          CFI Block cfiCond92 Using cfiCommon0
          CFI (cfiCond92) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond92) Conditional ??CrossCallReturnLabel_640
          CFI (cfiCond92) R4 Frame(CFA, -36)
          CFI (cfiCond92) R5 Frame(CFA, -32)
          CFI (cfiCond92) R6 Frame(CFA, -28)
          CFI (cfiCond92) R7 Frame(CFA, -24)
          CFI (cfiCond92) R8 Frame(CFA, -20)
          CFI (cfiCond92) R9 Frame(CFA, -16)
          CFI (cfiCond92) R10 Frame(CFA, -12)
          CFI (cfiCond92) R11 Frame(CFA, -8)
          CFI (cfiCond92) R14 Frame(CFA, -4)
          CFI (cfiCond92) CFA R13+360
          CFI Block cfiPicker93 Using cfiCommon1
          CFI (cfiPicker93) NoFunction
          CFI (cfiPicker93) Picker
        THUMB
??Subroutine141_0:
        MOVS     R1,#+0
        MOV      R0,R8
          CFI FunCall AppS2wCmd_HttpClientConfig memset
          CFI FunCall AppS2wCmd_WeapConf memset
          CFI FunCall AppS2wCmd_WeapConf memset
          CFI FunCall AppS2wCmd_Wassoc memset
          CFI FunCall AppS2wCmd_Wassoc_test memset
        B.W      memset
          CFI EndBlock cfiCond88
          CFI EndBlock cfiCond89
          CFI EndBlock cfiCond90
          CFI EndBlock cfiCond91
          CFI EndBlock cfiCond92
          CFI EndBlock cfiPicker93

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock94 Using cfiCommon0
          CFI Function DHCP_notify
        THUMB
// 4483 VOID DHCP_notify(INT32 status,void *ctx)
// 4484 {
DHCP_notify:
        PUSH     {R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+20
        SUB      SP,SP,#+156
          CFI CFA R13+176
// 4485 	if (GSN_SUCCESS == status)
        LDR.W    R4,??DataTable413_2
        LDR.W    R7,??DataTable413_3
        CBNZ.N   R0,??DHCP_notify_0
// 4486 	{
// 4487         L3ConnectStatus = TRUE;
// 4488 #ifdef S2W_IPv6_SUPPORT
// 4489         L3Dhcpv6Status = TRUE;
// 4490          L3ConnectStatus_v6 = TRUE;
// 4491 #endif       
// 4492          nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
        LDR.W    R1,??DataTable413_4
        MOVS     R0,#+1
        STRB     R0,[R7, #+1]
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+5216
          CFI FunCall _nxe_arp_gratuitous_send
        BL       _nxe_arp_gratuitous_send
        B.N      ??DHCP_notify_1
// 4493 	}
// 4494 	else if(GSN_NW_DHCP_LEASE_EXPIRED == status)
??DHCP_notify_0:
        LDR.W    R1,??DataTable413_5  ;; 0xb0000206
        CMP      R0,R1
        BNE.N    ??DHCP_notify_2
// 4495 	{
// 4496 		AppMainCtx_TaskNotify(APP_EVENT_DHCP_LEASETIME_EXPIRED);
        MOVS     R0,#+33
          CFI FunCall AppMainCtx_TaskNotify
        BL       AppMainCtx_TaskNotify
// 4497 		return;
        B.N      ??DHCP_notify_3
// 4498 	}
// 4499 
// 4500     else
// 4501     {
// 4502         L3ConnectStatus = FALSE;
??DHCP_notify_2:
        MOVS     R0,#+0
        STRB     R0,[R7, #+1]
// 4503 #ifdef S2W_IPv6_SUPPORT
// 4504         /* Link local is present by default */
// 4505          L3ConnectStatus_v6 = TRUE;
// 4506 #endif        
// 4507 	}
// 4508 
// 4509     if(S2wL3Wait)
??DHCP_notify_1:
        LDR      R0,[R7, #+4]
        CBZ.N    R0,??DHCP_notify_4
// 4510     {
// 4511         S2wL3Wait =0;
        MOVS     R0,#+0
        STR      R0,[R7, #+4]
// 4512     	GsnOsal_SemRelease(&s2wL2L3ConnectSemaphore);
        LDR.W    R0,??DataTable413_6
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
        B.N      ??DHCP_notify_3
// 4513     }
// 4514     else // dgcp renew case
// 4515     {
// 4516         UINT32 message;
// 4517         if((L3ConnectStatus == FALSE) && (s2wLinkState != S2W_LINK_STATE_DISCONNECTED))
??DHCP_notify_4:
        LDR.W    R0,??DataTable409_4
        LDRB     R1,[R7, #+1]
        LDRB     R0,[R0, #+0]
        LDR.W    R5,??DataTable413_7
        LDR.W    R6,??DataTable413_8
        CBNZ.N   R1,??DHCP_notify_5
        CBZ.N    R0,??DHCP_notify_3
// 4518         {
// 4519             message = APP_EVENT_DHCP_RENEW_FAILURE;
// 4520             /* for auto connection (data pipe make the async gpio low-so that host will not send data)
// 4521              */
// 4522             if(s2wIsAutoconnected)
        LDRB     R0,[R6, #+0]
        CBZ.N    R0,??DHCP_notify_6
// 4523 	        {
// 4524 		        S2w_AsyncMsgGpioOp(0);
        MOVS     R0,#+0
          CFI FunCall S2w_AsyncMsgGpioOp
        BL       S2w_AsyncMsgGpioOp
// 4525             }
// 4526             (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
??DHCP_notify_6:
        LDR      R1,[R4, #+0]
        MOVS     R0,#+8
        B.N      ??DHCP_notify_7
// 4527 
// 4528         }
// 4529         else if(s2wLinkState != S2W_LINK_STATE_DISCONNECTED)
??DHCP_notify_5:
        CBZ.N    R0,??DHCP_notify_3
// 4530         {
// 4531             // check the ip address got is same as previous one if not post a msg else do nothing
// 4532             GSN_NWIF_IP_CONFIG_T nwParams;
// 4533             /* get the ip address by calling the geps API
// 4534              */
// 4535             GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
        LDR      R0,[R4, #+0]
        BL       ?Subroutine77
// 4536 
// 4537             if((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
// 4538                (s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
??CrossCallReturnLabel_447:
        LDR      R1,[R4, #+0]
        LDR      R0,[SP, #+12]
        MOVW     R2,#+29988
        ADDS     R3,R2,R1
        LDR      R7,[R2, R1]
        CMP      R7,R0
        ITTT     EQ 
        LDREQ    R7,[R3, #+4]
        LDREQ    R12,[SP, #+16]
        CMPEQ    R7,R12
        BEQ.N    ??DHCP_notify_3
// 4539             {
// 4540                 // update the values first
// 4541                 s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
        STR      R0,[R2, R1]
// 4542                 s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
        LDR      R0,[SP, #+16]
        STR      R0,[R3, #+4]
// 4543 
// 4544                 message = APP_EVENT_DHCP_RENEW_IP_CHANGED;
// 4545                 /* for auto connection (data pipe make the async gpio low-so that host will not send data)
// 4546                  */
// 4547                 if(s2wIsAutoconnected)
        LDRB     R0,[R6, #+0]
        CBZ.N    R0,??DHCP_notify_8
// 4548 		        {
// 4549 		            S2w_AsyncMsgGpioOp(0);
        MOVS     R0,#+0
          CFI FunCall S2w_AsyncMsgGpioOp
        BL       S2w_AsyncMsgGpioOp
// 4550                 }
// 4551                 (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
??DHCP_notify_8:
        LDR      R1,[R4, #+0]
        MOVS     R0,#+31
??DHCP_notify_7:
        LDR      R2,[R5, #+0]
          CFI FunCall
        BLX      R2
// 4552             }
// 4553        }
// 4554     }
// 4555   // AppMainCtx_TaskNotify(APP_EVENT_DHCP_STOP_REQUEST);
// 4556 #ifdef S2W_IPv6_SUPPORT
// 4557    AppMainCtx_TaskNotify(APP_EVENT_DHCPv6_STOP_REQUEST);
// 4558 #endif
// 4559 	return;
??DHCP_notify_3:
        ADD      SP,SP,#+156
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock94
// 4560 
// 4561 }
// 4562 
// 4563 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock95 Using cfiCommon0
          CFI Function s2wDhcpv6Stop
        THUMB
// 4564 void s2wDhcpv6Stop()
// 4565 {
// 4566   GsnNwIf_DhcpV6Stop(&s2wappMainTaskCtxt->if0.nwifCtx);
s2wDhcpv6Stop:
        LDR.W    R0,??DataTable413_2
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+5120
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_DhcpV6Stop
        B.W      GsnNwIf_DhcpV6Stop
          CFI EndBlock cfiBlock95
// 4567   
// 4568 }
// 4569 
// 4570 
// 4571 /**
// 4572  ******************************************************************
// 4573  * @ingroup S2w-Application
// 4574  * @brief Process the ATZ Command. ATZ command reads the profile
// 4575  *        from the flash.This function check the validity of the profile
// 4576  *        id and update the flash.
// 4577  * @param ptr Pointer to the user string.
// 4578  * @return S2W_SUCCESS - operation successful.
// 4579  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4580  * @retval S2W_FAILURE - operation failure-flash write failed.
// 4581  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock96 Using cfiCommon0
          CFI Function AppS2wCmd_read
        THUMB
// 4582 PRIVATE UINT8
// 4583 AppS2wCmd_read(UINT8 *ptr)
// 4584 {
AppS2wCmd_read:
        PUSH     {R3-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
// 4585     UINT8 profileNum;
// 4586     UINT8 status;
// 4587     
// 4588     /* check the validity of parameter
// 4589      */
// 4590     status = AppS2wParse_Boolean(ptr, &profileNum);
        BL       ?Subroutine60
// 4591     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_383:
        CBNZ.N   R0,??AppS2wCmd_read_0
// 4592     {
// 4593         return status;
// 4594     }
// 4595     if(!s2wappMainTaskCtxt->fsInit)
        LDR.W    R5,??DataTable413_2
        LDR      R0,[R5, #+0]
        MOVW     R4,#+33136
        LDRB     R0,[R4, R0]
        CBNZ.N   R0,??AppS2wCmd_read_1
// 4596     {
// 4597 		App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 4598 		s2wappMainTaskCtxt->fsInit = TRUE;
        LDR      R0,[R5, #+0]
        MOVS     R1,#+1
        STRB     R1,[R4, R0]
// 4599         f_enterFS();
          CFI FunCall fsm_enterFS
        BL       fsm_enterFS
// 4600 	}
// 4601     status = S2w_LoadS2wProfile(&s2wCurrent,profileNum);
??AppS2wCmd_read_1:
        LDRB     R1,[SP, #+0]
        LDR.W    R0,??DataTable413_1
          CFI FunCall S2w_LoadS2wProfile
        BL       S2w_LoadS2wProfile
// 4602     
// 4603      if(status != S2W_SUCCESS)
        CBZ.N    R0,??AppS2wCmd_read_0
// 4604         status = S2W_FAILURE;
        MOVS     R0,#+1
// 4605       
// 4606       return status;
??AppS2wCmd_read_0:
        POP      {R1,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock96
// 4607 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable398:
        DC32     AppS2w_WlanRespTmrCb
// 4608 
// 4609 
// 4610 /**
// 4611  ******************************************************************
// 4612  * @ingroup S2w-Application
// 4613  * @brief Process the AT&W Command. AT&W command writes the profile
// 4614  *        to the flash.This function check the validity of the profile
// 4615  *        id and update the flash.
// 4616  * @param ptr Pointer to the user string.
// 4617  * @return S2W_SUCCESS - operation successful.
// 4618  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4619  * @retval S2W_FAILURE - operation failure-flash write failed.
// 4620  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock97 Using cfiCommon0
          CFI Function AppS2wCmd_Write
        THUMB
// 4621 PRIVATE UINT8
// 4622 AppS2wCmd_Write(UINT8 *ptr)
// 4623 {
AppS2wCmd_Write:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 4624     S2W_PROFILE_T *profile;
// 4625     //UINT32 whatChanged;
// 4626     UINT8 profileNum;
// 4627     UINT8 status;
// 4628 
// 4629 
// 4630     /* check the validity of parameter
// 4631      */
// 4632     status = AppS2wParse_Boolean(ptr, &profileNum);
        BL       ?Subroutine60
// 4633     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_382:
        CBNZ.N   R0,??AppS2wCmd_Write_0
// 4634     {
// 4635         return status;
// 4636     }
// 4637 
// 4638     profile = &s2wFlashParams->profile[profileNum];
        LDR.W    R4,??DataTable413_9
        LDRB     R0,[SP, #+0]
        LDR      R2,[R4, #+0]
        MOV      R1,#+1016
        MLA      R6,R1,R0,R2
// 4639     memcpy(profile, &s2wCurrent, sizeof(S2W_PROFILE_T));
        MOV      R2,R1
        LDR.W    R1,??DataTable413_1
        BL       ?Subroutine95
// 4640 #ifdef S2W_NCM_SUPPORT_ENABLE
// 4641 	if(profile->ncmAutoMgr)
??CrossCallReturnLabel_504:
        LDRB     R0,[R6, #+810]
        LDR.W    R5,??DataTable413_2
        CBZ.N    R0,??AppS2wCmd_Write_1
// 4642 	{
// 4643 		profile->ncmAutoMgr = (s2wappMainTaskCtxt->ncmAutoConStoreProfile)?0:1;
        LDR      R1,[R5, #+0]
        MOVW     R0,#+29956
        LDRB     R1,[R0, R1]
        SUBS     R0,R1,#+1
        SBCS     R0,R0,R0
        LSRS     R0,R0,#+31
        STRB     R0,[R6, #+810]
// 4644 	}
// 4645 #endif
// 4646     /* call the hal function to update the flash
// 4647      */
// 4648     // if it is a warm boot check the file system is initialized else initialize it...
// 4649     if(!s2wappMainTaskCtxt->fsInit)
??AppS2wCmd_Write_1:
        MOVW     R6,#+33136
        LDR      R0,[R5, #+0]
        LDRB     R0,[R6, R0]
        CBNZ.N   R0,??CrossCallReturnLabel_534
// 4650     {
// 4651 		App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 4652 		s2wappMainTaskCtxt->fsInit = TRUE;
        LDR      R0,[R5, #+0]
        BL       ??Subroutine107_0
// 4653                 f_enterFS();
// 4654 	}
// 4655       status = S2w_SaveS2wProfile(s2wFlashParams, profileNum);
??CrossCallReturnLabel_534:
        LDRB     R1,[SP, #+0]
        LDR      R0,[R4, #+0]
          CFI FunCall S2w_SaveS2wProfile
        BL       S2w_SaveS2wProfile
// 4656       if(status != S2W_SUCCESS)
        CBZ.N    R0,??AppS2wCmd_Write_0
// 4657         status = S2W_FAILURE;
        MOVS     R0,#+1
// 4658       
// 4659       return status;
??AppS2wCmd_Write_0:
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock97
// 4660 }
// 4661 
// 4662 #ifndef S2W_IP2WIFI_SUPPORT
// 4663 /**
// 4664  ******************************************************************
// 4665  * @ingroup S2w-Application
// 4666  * @brief Process the AT+NDHCP command
// 4667  *   This function validate the parameter passed and call the hal function
// 4668  *   to do ip configuration(DHCP or static ip).This function also updates the
// 4669  *   dhcp flag of the active profile.
// 4670  * @param ptr Pointer to the user input string.
// 4671 
// 4672  * @return S2W_SUCCESS - operation successful.
// 4673  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4674  * @retval S2W_FAILURE - operation failure-ip config failed.
// 4675  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock98 Using cfiCommon0
          CFI Function AppS2wCmd_Ndhcp
        THUMB
// 4676 PRIVATE UINT8
// 4677 AppS2wCmd_Ndhcp(UINT8 *ptr)
// 4678 {
AppS2wCmd_Ndhcp:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+44
          CFI CFA R13+72
// 4679     UINT8 status;
// 4680     UINT8 mode, *p, len,mac[6],macStr[GSN_NWIF_HOST_NAME_MAX_LEN + 1];
// 4681     UINT32 radioMode;
// 4682 
// 4683     /* check the validity of parameter passed     */
// 4684     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine43
??CrossCallReturnLabel_238:
        MOVS     R7,R0
// 4685     if (!p)
        BEQ.N    ??AppS2wCmd_Ndhcp_0
// 4686     {
// 4687         return S2W_EINVAL;
// 4688     }
// 4689     status = AppS2wParse_Boolean(p, &mode);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R7,R0
// 4690     if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_Ndhcp_1
// 4691     {
// 4692         return status;
// 4693     }
// 4694     if(mode == 0)
        LDRB     R0,[SP, #+8]
        LDR.W    R5,??DataTable413_2
        MOVW     R4,#+5200
        CBNZ.N   R0,??AppS2wCmd_Ndhcp_2
// 4695     {
// 4696       GsnNwIf_DhcpStop(&s2wappMainTaskCtxt->if0.nwifCtx);
        LDR      R0,[R5, #+0]
        ADDS     R0,R4,R0
          CFI FunCall GsnNwIf_DhcpStop
        BL       GsnNwIf_DhcpStop
// 4697     }
// 4698     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ndhcp_2:
        BL       ?Subroutine43
// 4699     if(p && (0 != strlen((const char *)p)))
??CrossCallReturnLabel_237:
        LDR.W    R8,??DataTable413_1
        MOVS     R7,R0
        ADD      R6,R8,#+476
        BEQ.N    ??AppS2wCmd_Ndhcp_3
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_Ndhcp_3
// 4700     {
// 4701         len = strlen((const char *)p);
        BL       ??Subroutine69_0
??CrossCallReturnLabel_419:
        UXTB     R0,R0
// 4702         if(len > GSN_NWIF_HOST_NAME_MAX_LEN)
        CMP      R0,#+16
        BLT.N    ??AppS2wCmd_Ndhcp_4
// 4703         {
// 4704             return S2W_FAILURE;
        MOVS     R0,#+1
??AppS2wCmd_Ndhcp_5:
        ADD      SP,SP,#+48
          CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
          CFI CFA R13+72
// 4705         }
// 4706         memcpy(s2wCurrent.hostName, p, (len + 1));
??AppS2wCmd_Ndhcp_4:
        ADDS     R2,R0,#+1
        MOV      R1,R7
        BL       ?Subroutine95
// 4707     }
??CrossCallReturnLabel_503:
        B.N      ??AppS2wCmd_Ndhcp_6
// 4708      else
// 4709     {
// 4710       //S2w_LoadMacAddr(mac);
// 4711       S2w_macAddrRTCGet(mac);
??AppS2wCmd_Ndhcp_3:
        BL       ?Subroutine32
// 4712       sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
??CrossCallReturnLabel_104:
        LDRB     R0,[SP, #+21]
        LDRB     R3,[SP, #+19]
        LDR.W    R1,??DataTable414
        STR      R0,[SP, #+4]
        ADR.N    R2,??DataTable401  ;; "GS_"
        LDRB     R0,[SP, #+20]
        STR      R0,[SP, #+0]
        ADD      R0,SP,#+24
          CFI FunCall sprintf
        BL       sprintf
// 4713       memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
        ADD      R0,SP,#+24
          CFI FunCall strlen
        BL       strlen
        MOV      R2,R0
        ADD      R1,SP,#+24
        MOV      R0,R6
          CFI FunCall memcpy
        BL       memcpy
// 4714     }
// 4715     
// 4716     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ndhcp_6:
        BL       ?Subroutine43
??CrossCallReturnLabel_236:
        MOV      R7,R0
// 4717     s2wCurrent.netConf.dhcpRadioMode = 0;/* Default mode - PS POLL*/
        ADD      R6,R8,#+392
        MOVS     R0,#+0
        STRB     R0,[R6, #+1]
// 4718     if(p && (0 != strlen((const char *)p)))
        CBZ.N    R7,??AppS2wCmd_Ndhcp_7
        BL       ??Subroutine69_0
??CrossCallReturnLabel_418:
        CBZ.N    R0,??AppS2wCmd_Ndhcp_7
// 4719     {
// 4720         
// 4721         status = AppS2wParse_Int(p, &radioMode);
        ADD      R1,SP,#+12
        MOV      R0,R7
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
        MOVS     R7,R0
// 4722         if (status != S2W_SUCCESS)
        BEQ.N    ??AppS2wCmd_Ndhcp_8
// 4723         {
// 4724             return status;
??AppS2wCmd_Ndhcp_1:
        MOV      R0,R7
        B.N      ??AppS2wCmd_Ndhcp_5
// 4725         }
// 4726         if(radioMode >= 4)
??AppS2wCmd_Ndhcp_8:
        LDR      R0,[SP, #+12]
        CMP      R0,#+4
        BCC.N    ??AppS2wCmd_Ndhcp_9
// 4727         {
// 4728             return S2W_EINVAL;
??AppS2wCmd_Ndhcp_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Ndhcp_5
// 4729         }
// 4730         s2wCurrent.netConf.dhcpRadioMode = (UINT8)radioMode;
??AppS2wCmd_Ndhcp_9:
        STRB     R0,[R6, #+1]
// 4731     } 
// 4732     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ndhcp_7:
        BL       ?Subroutine43
??CrossCallReturnLabel_235:
        MOVS     R7,R0
// 4733     if(p && (0 != strlen((const char *)p)))
        BEQ.N    ??AppS2wCmd_Ndhcp_10
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_Ndhcp_10
// 4734     {
// 4735         UINT32 leaseTime = 0;
        BL       ?Subroutine6
// 4736         status = AppS2wParse_Int(p, &leaseTime);
??CrossCallReturnLabel_7:
        MOVS     R7,R0
// 4737         if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_Ndhcp_11
// 4738         {
// 4739             s2wCurrent.dhcpRequestLeaseTime = 0;
// 4740             return status;
// 4741         }
// 4742         s2wCurrent.dhcpRequestLeaseTime = leaseTime;
        LDR      R0,[SP, #+0]
        STR      R0,[R8, #+968]
// 4743     }    
// 4744     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ndhcp_10:
        BL       ?Subroutine43
??CrossCallReturnLabel_234:
        MOVS     R7,R0
// 4745     if(p && (0 != strlen((const char *)p)))
        BEQ.N    ??AppS2wCmd_Ndhcp_12
          CFI FunCall strlen
        BL       strlen
        CBZ.N    R0,??AppS2wCmd_Ndhcp_12
// 4746     {
// 4747         UINT32 retransInterval = 0;
        BL       ?Subroutine6
// 4748         status = AppS2wParse_Int(p, &retransInterval);
??CrossCallReturnLabel_6:
        MOVS     R7,R0
// 4749         if (status != S2W_SUCCESS)
        BEQ.N    ??AppS2wCmd_Ndhcp_13
// 4750         {
// 4751             s2wCurrent.dhcpRequestLeaseTime = 0;
??AppS2wCmd_Ndhcp_11:
        MOVS     R0,#+0
        STR      R0,[R8, #+968]
        B.N      ??AppS2wCmd_Ndhcp_1
// 4752             return status;
// 4753         }
// 4754         s2wCurrent.dhcpRetryTimeout = retransInterval;
??AppS2wCmd_Ndhcp_13:
        LDR      R0,[SP, #+0]
        STR      R0,[R8, #+972]
// 4755     }
// 4756     /* update the active profile
// 4757      */
// 4758     s2wCurrent.netConf.dhcp = mode;
??AppS2wCmd_Ndhcp_12:
        LDRB     R0,[SP, #+8]
        STRB     R0,[R8, #+392]
// 4759 
// 4760 	status = AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
        ADD      R0,R8,#+392
          CFI FunCall AppS2wHal_NetworkConfig
        BL       AppS2wHal_NetworkConfig
        MOV      R7,R0
// 4761          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
        LDR      R0,[R5, #+0]
        MOVS     R2,#+0
        ADD      R1,R8,#+424
        ADDS     R0,R4,R0
          CFI FunCall GsnNwif_DnsServerGet
        BL       GsnNwif_DnsServerGet
// 4762          GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
        LDR      R0,[R5, #+0]
        MOVS     R2,#+1
        ADD      R1,R8,#+428
        ADDS     R0,R4,R0
          CFI FunCall GsnNwif_DnsServerGet
        BL       GsnNwif_DnsServerGet
// 4763       if((status == S2W_SUCCESS) && (mode == 0))
        LDRB     R0,[SP, #+8]
        ORRS     R0,R0,R7
        BNE.N    ??CrossCallReturnLabel_605
// 4764       {
// 4765          nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
        BL       ?Subroutine130
// 4766       }
// 4767     
// 4768  
// 4769     //return status;
// 4770 
// 4771 		
// 4772 #if 0
// 4773     if (!L3ConnectStatus && (mode == 1))
// 4774     {
// 4775         s2wCurrent.netConf.dhcp = oldDhcp;
// 4776         S2wL3Wait = FALSE;
// 4777         GsnNwIf_DhcpStop(&s2wappMainTaskCtxt->if0.nwifCtx);
// 4778         //GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
// 4779         L3ConnectStatus = L3OldStatus;
// 4780         retVal = GsnNwif_IPv4Configure(&s2wappMainTaskCtxt->if0.nwifCtx,&DefaultConfig,NULL);
// 4781         return S2W_FAILURE;
// 4782     }
// 4783 #endif
// 4784     S2wL3Wait = FALSE;
??CrossCallReturnLabel_605:
        LDR.W    R0,??DataTable413_3
        MOVS     R1,#+0
        STR      R1,[R0, #+4]
        B.N      ??AppS2wCmd_Ndhcp_1
          CFI EndBlock cfiBlock98
// 4785     return status;
// 4786 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable400:
        DC32     profile_params

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable400_1:
        DC32     scanDisplayInfoCount

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable400_2:
        DC32     scanDisplayInfo

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable400_3:
        DC32     0xb000010d

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond99 Using cfiCommon0
          CFI Function AppS2wCmd_Ndhcp
          CFI Conditional ??CrossCallReturnLabel_238
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond100 Using cfiCommon0
          CFI (cfiCond100) Function AppS2wCmd_Ndhcp
          CFI (cfiCond100) Conditional ??CrossCallReturnLabel_237
          CFI (cfiCond100) R4 Frame(CFA, -24)
          CFI (cfiCond100) R5 Frame(CFA, -20)
          CFI (cfiCond100) R6 Frame(CFA, -16)
          CFI (cfiCond100) R7 Frame(CFA, -12)
          CFI (cfiCond100) R8 Frame(CFA, -8)
          CFI (cfiCond100) R14 Frame(CFA, -4)
          CFI (cfiCond100) CFA R13+72
          CFI Block cfiCond101 Using cfiCommon0
          CFI (cfiCond101) Function AppS2wCmd_Ndhcp
          CFI (cfiCond101) Conditional ??CrossCallReturnLabel_236
          CFI (cfiCond101) R4 Frame(CFA, -24)
          CFI (cfiCond101) R5 Frame(CFA, -20)
          CFI (cfiCond101) R6 Frame(CFA, -16)
          CFI (cfiCond101) R7 Frame(CFA, -12)
          CFI (cfiCond101) R8 Frame(CFA, -8)
          CFI (cfiCond101) R14 Frame(CFA, -4)
          CFI (cfiCond101) CFA R13+72
          CFI Block cfiCond102 Using cfiCommon0
          CFI (cfiCond102) Function AppS2wCmd_Ndhcp
          CFI (cfiCond102) Conditional ??CrossCallReturnLabel_235
          CFI (cfiCond102) R4 Frame(CFA, -24)
          CFI (cfiCond102) R5 Frame(CFA, -20)
          CFI (cfiCond102) R6 Frame(CFA, -16)
          CFI (cfiCond102) R7 Frame(CFA, -12)
          CFI (cfiCond102) R8 Frame(CFA, -8)
          CFI (cfiCond102) R14 Frame(CFA, -4)
          CFI (cfiCond102) CFA R13+72
          CFI Block cfiCond103 Using cfiCommon0
          CFI (cfiCond103) Function AppS2wCmd_Ndhcp
          CFI (cfiCond103) Conditional ??CrossCallReturnLabel_234
          CFI (cfiCond103) R4 Frame(CFA, -24)
          CFI (cfiCond103) R5 Frame(CFA, -20)
          CFI (cfiCond103) R6 Frame(CFA, -16)
          CFI (cfiCond103) R7 Frame(CFA, -12)
          CFI (cfiCond103) R8 Frame(CFA, -8)
          CFI (cfiCond103) R14 Frame(CFA, -4)
          CFI (cfiCond103) CFA R13+72
          CFI Block cfiPicker104 Using cfiCommon1
          CFI (cfiPicker104) NoFunction
          CFI (cfiPicker104) Picker
        THUMB
?Subroutine43:
        ADD      R0,SP,#+44
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond99
          CFI EndBlock cfiCond100
          CFI EndBlock cfiCond101
          CFI EndBlock cfiCond102
          CFI EndBlock cfiCond103
          CFI EndBlock cfiPicker104

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond105 Using cfiCommon0
          CFI Function AppS2wCmd_Ndhcp
          CFI Conditional ??CrossCallReturnLabel_7
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond106 Using cfiCommon0
          CFI (cfiCond106) Function AppS2wCmd_Ndhcp
          CFI (cfiCond106) Conditional ??CrossCallReturnLabel_6
          CFI (cfiCond106) R4 Frame(CFA, -24)
          CFI (cfiCond106) R5 Frame(CFA, -20)
          CFI (cfiCond106) R6 Frame(CFA, -16)
          CFI (cfiCond106) R7 Frame(CFA, -12)
          CFI (cfiCond106) R8 Frame(CFA, -8)
          CFI (cfiCond106) R14 Frame(CFA, -4)
          CFI (cfiCond106) CFA R13+72
          CFI Block cfiPicker107 Using cfiCommon1
          CFI (cfiPicker107) NoFunction
          CFI (cfiPicker107) Picker
        THUMB
?Subroutine6:
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        ADD      R1,SP,#+0
        MOV      R0,R7
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Ndhcp AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond105
          CFI EndBlock cfiCond106
          CFI EndBlock cfiPicker107
// 4787 
// 4788 #endif
// 4789 
// 4790 
// 4791 /**
// 4792  ******************************************************************
// 4793  * @ingroup S2w-Application
// 4794  * @brief Process the AT+NSET command parameters.
// 4795  *   This function check the validty if input parameters(ip addres,
// 4796  *   subnet mask,gateway) and call the hal ip config function to configure
// 4797  *   the static IP.
// 4798  * @param ptr pointer to the char string which holds the arguments.
// 4799 
// 4800  * @return S2W_SUCCESS - operation successful.
// 4801  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4802  * @retval S2W_FAILURE - operation failure-Ip config failed.
// 4803  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock108 Using cfiCommon0
          CFI Function AppS2wCmd_Nset
        THUMB
// 4804 PRIVATE UINT8
// 4805 AppS2wCmd_Nset(UINT8 *ptr)
// 4806 {
AppS2wCmd_Nset:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+212
          CFI CFA R13+232
// 4807     UINT8 *p;
// 4808     UINT8 status;
// 4809     GSN_STATUS  retval;
// 4810     GSN_NWIF_IPv4_CONFIG_T UsrIPv4Cfg;
// 4811     S2W_IPADDR_T ipAddr;
// 4812     S2W_IPADDR_T subNetmask;
// 4813     GSN_NWIF_IP_CONFIG_T ipConfig;
// 4814     
// 4815     memset(&UsrIPv4Cfg,0,sizeof(GSN_NWIF_IPv4_CONFIG_T));
        MOVS     R2,#+48
        BL       ?Subroutine16
// 4816    
// 4817     UsrIPv4Cfg.staticIp = 1;
??CrossCallReturnLabel_31:
        MOVS     R0,#+1
        STR      R0,[SP, #+8]
// 4818     
// 4819      if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        ADD      R0,SP,#+212
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nset_0
// 4820   {
// 4821       status = AppS2wParse_Ip(p,ipAddr);
        BL       ?Subroutine64
// 4822       
// 4823 	if (status != S2W_SUCCESS)
??CrossCallReturnLabel_400:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nset_1
// 4824 	{
// 4825           return status;
// 4826 	}
// 4827 
// 4828         UsrIPv4Cfg.ipAddr = (ipAddr[0] << 24 | ipAddr[1] << 16 | ipAddr[2] << 8 | ipAddr[3] );
        ADD      R4,SP,#+0
        LDRB     R1,[R4, #+1]
        LDRB     R0,[SP, #+0]
        LSLS     R1,R1,#+16
        ORR      R0,R1,R0, LSL #+24
        LDRB     R1,[R4, #+2]
        ORR      R0,R0,R1, LSL #+8
        LDRB     R1,[R4, #+3]
        ORRS     R0,R1,R0
        STR      R0,[SP, #+12]
// 4829         
// 4830   }
// 4831   else
// 4832     return S2W_EINVAL;
// 4833 
// 4834    if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        ADD      R0,SP,#+212
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nset_0
// 4835   {
// 4836     
// 4837     status = AppS2wParse_Ip(p,subNetmask);
        ADD      R1,SP,#+4
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
// 4838 	if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nset_1
// 4839 	{
// 4840           return status;
// 4841 	}
// 4842     
// 4843          UsrIPv4Cfg.subnetMask = (subNetmask[0] << 24 | subNetmask[1] << 16 | subNetmask[2] << 8 | subNetmask[3] );
        ADD      R0,SP,#+4
        LDRB     R2,[R0, #+1]
        LDRB     R1,[SP, #+4]
        LSLS     R2,R2,#+16
        ORR      R1,R2,R1, LSL #+24
        LDRB     R2,[R0, #+2]
        LDRB     R0,[R0, #+3]
        ORR      R1,R1,R2, LSL #+8
        ORRS     R0,R0,R1
        STR      R0,[SP, #+16]
// 4844 
// 4845   }
// 4846     else
// 4847     return S2W_EINVAL;
// 4848   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        ADD      R0,SP,#+212
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        CBZ.N    R0,??AppS2wCmd_Nset_0
// 4849   {
// 4850     
// 4851         status = AppS2wParse_Ip(p,ipAddr);
        BL       ?Subroutine64
// 4852 
// 4853 	if (status != S2W_SUCCESS)
??CrossCallReturnLabel_399:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nset_1
// 4854 	{
// 4855           return status;
// 4856 	}
// 4857         
// 4858         UsrIPv4Cfg.gatewayIpAddr = (ipAddr[0] << 24 | ipAddr[1] << 16 | ipAddr[2] << 8 | ipAddr[3] );
        LDRB     R1,[R4, #+1]
        LDRB     R0,[SP, #+0]
        LSLS     R1,R1,#+16
        ORR      R0,R1,R0, LSL #+24
        LDRB     R1,[R4, #+2]
        ORR      R0,R0,R1, LSL #+8
        LDRB     R1,[R4, #+3]
        ORRS     R0,R1,R0
        STR      R0,[SP, #+20]
// 4859   }
// 4860   else
// 4861     return S2W_EINVAL;
// 4862   
// 4863       /* Check for valid IP address */
// 4864     if(((UsrIPv4Cfg.ipAddr & 0xFFFFFF00) == 0xFFFFFF00) || (UsrIPv4Cfg.ipAddr == 0x00000000))
        MVN      R1,#+255
        LDR      R0,[SP, #+12]
        LSRS     R2,R0,#+8
        LSLS     R2,R2,#+8
        CMP      R2,R1
        IT       NE 
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_Nset_0
// 4865     {
// 4866         return S2W_EINVAL;
// 4867     }
// 4868     
// 4869       /*check for valid broadcast address */
// 4870     if(((UsrIPv4Cfg.subnetMask & 0xFF000000) != 0xFF000000) || (UsrIPv4Cfg.subnetMask == 0x00000000))
        LDR      R0,[SP, #+16]
        AND      R2,R0,#0xFF000000
        CMN      R2,#+16777216
        BNE.N    ??AppS2wCmd_Nset_0
        CMP      R0,#+0
        ITTTT    NE 
        LDRNE    R0,[SP, #+20]
        LSRNE    R2,R0,#+8
        LSLNE    R2,R2,#+8
        CMPNE    R2,R1
// 4871         return S2W_EINVAL;
// 4872 
// 4873     /*  check for valid gateway Address  */
// 4874     if(((UsrIPv4Cfg.gatewayIpAddr & 0xFFFFFF00) == 0xFFFFFF00 ) || (UsrIPv4Cfg.gatewayIpAddr == 0x00000000))
        BEQ.N    ??AppS2wCmd_Nset_0
        CBNZ.N   R0,??AppS2wCmd_Nset_2
// 4875         return S2W_EINVAL;
??AppS2wCmd_Nset_0:
        MOVS     R0,#+2
??AppS2wCmd_Nset_1:
        B.N      ??AppS2wCmd_Nset_3
// 4876 
// 4877     
// 4878     ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
??AppS2wCmd_Nset_2:
        MOVS     R0,#+1
        STRB     R0,[SP, #+56]
// 4879     /* call GSN ip config function to configure the static IP
// 4880      */
// 4881       ipConfig.ipv4 = UsrIPv4Cfg;
        ADD      R1,SP,#+8
        ADD      R0,SP,#+64
        MOVS     R2,#+48
          CFI FunCall __aeabi_memcpy4
        BL       __aeabi_memcpy4
// 4882       retval = GsnNwif_IPv4Configure(&s2wappMainTaskCtxt->if0.nwifCtx, &UsrIPv4Cfg, NULL);
        LDR.W    R5,??DataTable413_2
        LDR      R0,[R5, #+0]
        MOVW     R4,#+5200
        MOVS     R2,#+0
        ADD      R1,SP,#+8
        ADDS     R0,R4,R0
          CFI FunCall GsnNwif_IPv4Configure
        BL       GsnNwif_IPv4Configure
// 4883       if(GSN_NW_IF_CLOSED == retval)
        LDR.W    R1,??DataTable416  ;; 0xc0000203
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_Nset_4
// 4884       {
// 4885           retval = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, NULL);
        LDR      R0,[R5, #+0]
        MOVS     R2,#+0
        ADD      R1,SP,#+56
        ADDS     R0,R4,R0
          CFI FunCall GsnNwIf_Open
        BL       GsnNwIf_Open
// 4886       }	
// 4887       if(retval != GSN_SUCCESS )
??AppS2wCmd_Nset_4:
        CBZ.N    R0,??AppS2wCmd_Nset_5
// 4888 	    return S2W_FAILURE;
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Nset_3
// 4889      
// 4890 	if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
??AppS2wCmd_Nset_5:
        LDR      R0,[R5, #+0]
        LDR.W    R6,??DataTable413_1
        ADD      R0,R0,#+30336
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Nset_6
// 4891 	{
// 4892 		UINT32 ipaddr=0;
// 4893 		memcpy((UINT8*)&s2wCurrent.lmtdApConf.ipAddress,&UsrIPv4Cfg.ipAddr,4);
        ADD      R4,R6,#+652
        MOVS     R2,#+4
        BL       ?Subroutine117
// 4894 		memcpy((UINT8*)&s2wCurrent.lmtdApConf.subnetmask,&UsrIPv4Cfg.subnetMask,4);
??CrossCallReturnLabel_562:
        MOVS     R2,#+4
        ADD      R1,SP,#+16
        ADD      R0,R6,#+656
          CFI FunCall memcpy
        BL       memcpy
// 4895 		memcpy((UINT8*)&s2wCurrent.lmtdApConf.gateway,&UsrIPv4Cfg.gatewayIpAddr,4);
        MOVS     R2,#+4
        ADD      R1,SP,#+20
        ADD      R0,R6,#+660
          CFI FunCall memcpy
        BL       memcpy
// 4896 		ipaddr = htonl(s2wCurrent.lmtdApConf.ipAddress) + 1;
        LDR      R0,[R6, #+652]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R1,R1,R0, LSR #+24
        AND      R2,R0,#0xFF00
        ORR      R1,R1,R2, LSL #+8
        ORR      R0,R1,R0, LSL #+24
        ADDS     R0,R0,#+1
// 4897 		s2wCurrent.lmtdApConf.dhcpAddressStart = ntohl(ipaddr);//s2wCurrent.lmtdApConf.ipAddress + 1;
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R1,R1,R0, LSR #+24
        AND      R2,R0,#0xFF00
        ORR      R1,R1,R2, LSL #+8
        ORR      R0,R1,R0, LSL #+24
        STR      R0,[R4, #+16]
        B.N      ??AppS2wCmd_Nset_7
// 4898 	}
// 4899 	else
// 4900 	{
// 4901        /* update the active profile paramater  */
// 4902 
// 4903         s2wCurrent.netConf.dhcp = 0;
??AppS2wCmd_Nset_6:
        STRB     R0,[R6, #+392]
// 4904         
// 4905         memcpy(&s2wCurrent.netConf.ipAddr,&UsrIPv4Cfg.ipAddr,4);
        MOVS     R2,#+4
        ADD      R1,SP,#+12
        ADD      R0,R6,#+396
          CFI FunCall memcpy
        BL       memcpy
// 4906         memcpy(&s2wCurrent.netConf.netMask,&UsrIPv4Cfg.subnetMask,4);
        MOVS     R2,#+4
        ADD      R1,SP,#+16
        ADD      R0,R6,#+400
          CFI FunCall memcpy
        BL       memcpy
// 4907         memcpy(&s2wCurrent.netConf.gateway,&UsrIPv4Cfg.gatewayIpAddr,4);
        MOVS     R2,#+4
        ADD      R1,SP,#+20
        ADD      R0,R6,#+404
          CFI FunCall memcpy
        BL       memcpy
// 4908 		if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
        LDRB     R0,[R6, #+4]
        CMP      R0,#+2
        BNE.N    ??AppS2wCmd_Nset_7
// 4909 		{
// 4910 			memset(&s2wCurrent.dns1,0,sizeof(S2W_IPADDR_T));
        MOVS     R2,#+4
        MOVS     R1,#+0
        ADD      R0,R6,#+424
          CFI FunCall memset
        BL       memset
// 4911 			memset(&s2wCurrent.dns2,0,sizeof(S2W_IPADDR_T));
        MOVS     R2,#+4
        MOVS     R1,#+0
        ADD      R0,R6,#+428
          CFI FunCall memset
        BL       memset
// 4912 		}
// 4913     
// 4914 	}   
// 4915         if(s2wLinkState != S2W_LINK_STATE_DISCONNECTED)
??AppS2wCmd_Nset_7:
        LDR.W    R0,??DataTable409_4
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Nset_8
// 4916         {
// 4917           L3ConnectStatus = TRUE;
        LDR.W    R0,??DataTable413_3
        MOVS     R1,#+1
        STRB     R1,[R0, #+1]
// 4918           AppS2wHdrAndIpv4_Print();
          CFI FunCall AppS2wHdrAndIpv4_Print
        BL       AppS2wHdrAndIpv4_Print
// 4919         }
// 4920       return S2W_SUCCESS;
??AppS2wCmd_Nset_8:
        MOVS     R0,#+0
??AppS2wCmd_Nset_3:
        ADD      SP,SP,#+216
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock108
// 4921 
// 4922 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable401:
        DC8      "GS_"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable401_1:
        DC32     stScanSemaphore

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond109 Using cfiCommon0
          CFI Function AppS2wCmd_Nset
          CFI Conditional ??CrossCallReturnLabel_562
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+232
          CFI Block cfiCond110 Using cfiCommon0
          CFI (cfiCond110) Function AppS2wCmd_Nmac
          CFI (cfiCond110) Conditional ??CrossCallReturnLabel_561
          CFI (cfiCond110) R4 Frame(CFA, -20)
          CFI (cfiCond110) R5 Frame(CFA, -16)
          CFI (cfiCond110) R6 Frame(CFA, -12)
          CFI (cfiCond110) R7 Frame(CFA, -8)
          CFI (cfiCond110) R14 Frame(CFA, -4)
          CFI (cfiCond110) CFA R13+40
          CFI Block cfiPicker111 Using cfiCommon1
          CFI (cfiPicker111) NoFunction
          CFI (cfiPicker111) Picker
        THUMB
?Subroutine117:
        ADD      R1,SP,#+12
          CFI Block cfiCond112 Using cfiCommon0
          CFI (cfiCond112) Function AppS2wCmd_BaudRate
          CFI (cfiCond112) Conditional ??CrossCallReturnLabel_560
          CFI (cfiCond112) R4 Frame(CFA, -8)
          CFI (cfiCond112) R14 Frame(CFA, -4)
          CFI (cfiCond112) CFA R13+40
??Subroutine117_0:
        MOV      R0,R4
          CFI FunCall AppS2wCmd_Nset memcpy
          CFI FunCall AppS2wCmd_Nmac memcpy
          CFI FunCall AppS2wCmd_BaudRate memcpy
        B.W      memcpy
          CFI EndBlock cfiCond109
          CFI EndBlock cfiCond110
          CFI EndBlock cfiPicker111
          CFI EndBlock cfiCond112
// 4923 
// 4924 
// 4925 /**
// 4926  ******************************************************************
// 4927  * @ingroup S2w-Application
// 4928  * @brief Process the AT+NMAC command
// 4929  *   This function check the validity of the mac address passed and
// 4930  *   call the hal function to configure the mac address.
// 4931  *   This function returns the mac address configured if the parameter
// 4932  *   is '?'.
// 4933  * @param ptr pointer to the char string which holds the arguments.
// 4934  *
// 4935  * @return S2W_SUCCESS - operation successful.
// 4936  * @retval S2W_EINVAL  - operation failure-invalid command.
// 4937  * @retval S2W_FAILURE - operation failure-MAC configuration failed.
// 4938  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock113 Using cfiCommon0
          CFI Function AppS2wCmd_Nmac
        THUMB
// 4939 PRIVATE UINT8
// 4940 AppS2wCmd_Nmac(UINT8 *ptr)
// 4941 {
AppS2wCmd_Nmac:
        PUSH     {R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+20
        SUB      SP,SP,#+20
          CFI CFA R13+40
// 4942     UINT8 macAddr[S2W_MAC_ADDR_SIZE];
// 4943     UINT8 status;
// 4944 
// 4945     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R1,[R0, #+0]
        LDR.W    R5,??DataTable413_1
        ADDW     R4,R5,#+525
        CMP      R1,#+63
        ITT      EQ 
        LDRBEQ   R1,[R0, #+1]
        CMPEQ    R1,#+0
        BNE.N    ??AppS2wCmd_Nmac_0
// 4946     {
// 4947         /* get the mac address and send it on serial interface
// 4948          */
// 4949         if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
        LDRB     R0,[R5, #+4]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_Nmac_1
// 4950         {
// 4951           //status = S2w_LoadMacAddr(macAddr);
// 4952           S2w_macAddrRTCGet(macAddr);
        ADD      R0,SP,#+12
          CFI FunCall S2w_macAddrRTCGet
        BL       S2w_macAddrRTCGet
        B.N      ??CrossCallReturnLabel_565
// 4953 
// 4954 		}
// 4955 		else
// 4956 		{
// 4957 			memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array, 6);
??AppS2wCmd_Nmac_1:
        MOVS     R2,#+6
        BL       ?Subroutine118
// 4958 		}
// 4959 
// 4960         S2w_Printf("\r\n%02x:%02x:%02x:%02x:%02x:%02x",
// 4961                 macAddr[0], macAddr[1],
// 4962                 macAddr[2], macAddr[3],
// 4963                 macAddr[4], macAddr[5]);
??CrossCallReturnLabel_565:
        LDRB     R1,[SP, #+17]
        STR      R1,[SP, #+8]
        ADD      R0,SP,#+12
        LDRB     R1,[R0, #+4]
        LDRB     R3,[SP, #+14]
        LDRB     R2,[R0, #+1]
        ADR.W    R0,`?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`
        STR      R1,[SP, #+4]
        LDRB     R1,[SP, #+15]
        STR      R1,[SP, #+0]
        LDRB     R1,[SP, #+12]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 4964 
// 4965          return S2W_SUCCESS;
        B.N      ??AppS2wCmd_Nmac_2
// 4966     }
// 4967 
// 4968     /* check the mac address passed is valid
// 4969      */
// 4970     status = AppS2wParse_Mac(ptr, macAddr);
??AppS2wCmd_Nmac_0:
        ADD      R1,SP,#+12
          CFI FunCall AppS2wParse_Mac
        BL       AppS2wParse_Mac
// 4971     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nmac_3
// 4972     {
// 4973         return status;
// 4974     }
// 4975 
// 4976     /* Call the hal function to configure the mac address
// 4977      */
// 4978     status = AppS2wHal_MacAddrSet(macAddr, TRUE);
// 4979     if (status != S2W_SUCCESS)
        MOVS     R1,#+1
        ADD      R0,SP,#+12
          CFI FunCall AppS2wHal_MacAddrSet
        BL       AppS2wHal_MacAddrSet
        CBZ.N    R0,??AppS2wCmd_Nmac_4
// 4980     {
// 4981         return S2W_FAILURE;
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Nmac_3
// 4982     }
// 4983     // depends on the mode configured store to the sta/ap mac
// 4984     if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
??AppS2wCmd_Nmac_4:
        LDR.W    R7,??DataTable413_2
        LDRB     R1,[R5, #+4]
        LDR      R0,[R7, #+0]
        MOVW     R6,#+33136
        CMP      R1,#+1
        LDRB     R0,[R6, R0]
        BNE.N    ??AppS2wCmd_Nmac_5
// 4985     {
// 4986         if(!s2wappMainTaskCtxt->fsInit)
        CBNZ.N   R0,??CrossCallReturnLabel_538
// 4987         {
// 4988            App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 4989            s2wappMainTaskCtxt->fsInit = TRUE;
        BL       ?Subroutine107
// 4990            f_enterFS();
// 4991         }
// 4992   S2w_SaveMacAddr(macAddr);
??CrossCallReturnLabel_538:
        ADD      R0,SP,#+12
          CFI FunCall S2w_SaveMacAddr
        BL       S2w_SaveMacAddr
// 4993         S2w_macAddrRTCSet(macAddr); // set in the rtc also
        ADD      R0,SP,#+12
          CFI FunCall S2w_macAddrRTCSet
        BL       S2w_macAddrRTCSet
        B.N      ??CrossCallReturnLabel_561
// 4994 	}
// 4995 	else
// 4996 	{
// 4997         if(!s2wappMainTaskCtxt->fsInit)
??AppS2wCmd_Nmac_5:
        CBNZ.N   R0,??AppS2wCmd_Nmac_6
// 4998         {
// 4999            App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 5000            s2wappMainTaskCtxt->fsInit = TRUE;
        MOVS     R1,#+1
        LDR      R0,[R7, #+0]
        STRB     R1,[R6, R0]
// 5001            f_enterFS();
          CFI FunCall fsm_enterFS
        BL       fsm_enterFS
// 5002         }
// 5003 		 S2w_SaveApMacAddr(macAddr);
??AppS2wCmd_Nmac_6:
        ADD      R0,SP,#+12
          CFI FunCall S2w_SaveApMacAddr
        BL       S2w_SaveApMacAddr
// 5004 		 memcpy(s2wCurrent.lmtdApConf.macAddr.array, macAddr,6);
        MOVS     R2,#+6
        BL       ?Subroutine117
// 5005 	}
// 5006       
// 5007     /* after mac configuration disassociate in case of station mode
// 5008      */
// 5009     if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
??CrossCallReturnLabel_561:
        LDRB     R0,[R5, #+4]
        CMP      R0,#+1
        IT       EQ 
          CFI FunCall AppS2w_HangUp
        BLEQ     AppS2w_HangUp
// 5010 	{
// 5011     AppS2w_HangUp();
// 5012 	}
// 5013     return S2W_SUCCESS;
??AppS2wCmd_Nmac_2:
        MOVS     R0,#+0
??AppS2wCmd_Nmac_3:
        ADD      SP,SP,#+20
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock113
// 5014 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable402:
        DC32     `?<Constant "NONE">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%02x:%02x:%02x:%02x...">`:
        DC8 "\015\012%02x:%02x:%02x:%02x:%02x:%02x"

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond114 Using cfiCommon0
          CFI Function AppS2wCmd_Nmac
          CFI Conditional ??CrossCallReturnLabel_565
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond115 Using cfiCommon0
          CFI (cfiCond115) Function AppS2wCmd_Wwps
          CFI (cfiCond115) Conditional ??CrossCallReturnLabel_564
          CFI (cfiCond115) R4 Frame(CFA, -8)
          CFI (cfiCond115) R14 Frame(CFA, -4)
          CFI (cfiCond115) CFA R13+96
          CFI Block cfiPicker116 Using cfiCommon1
          CFI (cfiPicker116) NoFunction
          CFI (cfiPicker116) Picker
        THUMB
?Subroutine118:
        MOV      R1,R4
          CFI Block cfiCond117 Using cfiCommon0
          CFI (cfiCond117) Function AppS2wCmd_Wwps
          CFI (cfiCond117) Conditional ??CrossCallReturnLabel_563
          CFI (cfiCond117) R4 Frame(CFA, -8)
          CFI (cfiCond117) R14 Frame(CFA, -4)
          CFI (cfiCond117) CFA R13+96
??Subroutine118_0:
        ADD      R0,SP,#+12
          CFI FunCall AppS2wCmd_Nmac memcpy
          CFI FunCall AppS2wCmd_Wwps memcpy
          CFI FunCall AppS2wCmd_Wwps memcpy
        B.W      memcpy
          CFI EndBlock cfiCond114
          CFI EndBlock cfiCond115
          CFI EndBlock cfiPicker116
          CFI EndBlock cfiCond117
// 5015 
// 5016 
// 5017 
// 5018 
// 5019 #ifdef S2W_UART_ENABLE
// 5020 /**
// 5021  ******************************************************************
// 5022  * @ingroup S2w-Application
// 5023  * @brief Process the ATB Command.
// 5024  *   This function validate the parameter passed and call the hal uart
// 5025  *   configuration function to configure the uart with the valid parameters
// 5026  *   passed.
// 5027  * @param ptr Pointer to the user input string.
// 5028  * @return S2W_SUCCESS - operation successful.
// 5029  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5030  * @retval S2W_FAILURE - operation failure-uart configuration failed.
// 5031  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock118 Using cfiCommon0
          CFI Function AppS2wCmd_BaudRate
        THUMB
// 5032 PRIVATE UINT8
// 5033 AppS2wCmd_BaudRate(UINT8 *ptr)
// 5034 {
AppS2wCmd_BaudRate:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+28
          CFI CFA R13+40
// 5035 
// 5036     S2W_SERIAL_PORT_CONF_T params;
// 5037     UINT32 temp;
// 5038     UINT8 status;
// 5039     UINT8 *p;
// 5040 
// 5041 
// 5042     memcpy(&params, &s2wCurrent.serialPortConf, sizeof(params));
        LDR.W    R4,??DataTable417
        MOVS     R2,#+20
        MOV      R1,R4
        ADD      R0,SP,#+4
          CFI FunCall memcpy
        BL       memcpy
// 5043 
// 5044     /* Get the first parameter- baud rate
// 5045      */
// 5046     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine42
// 5047     if (!p)
??CrossCallReturnLabel_233:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_BaudRate_0
// 5048     {
// 5049         return S2W_EINVAL;
// 5050     }
// 5051 
// 5052     /* validate the baude rate
// 5053      */
// 5054     status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 5055     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_304:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_BaudRate_1
// 5056     {
// 5057         return status;
// 5058     }
// 5059 
// 5060     if (!temp)
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_BaudRate_0
// 5061     {
// 5062         return S2W_EINVAL;
// 5063     }
// 5064 
// 5065     params.conf.uart.baudrate= temp;
        STR      R0,[SP, #+12]
// 5066 
// 5067     /* get the 2nd parameter-bits per char
// 5068      */
// 5069     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine42
// 5070     if (p && *p)
??CrossCallReturnLabel_232:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_BaudRate_2
// 5071     {
// 5072         status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 5073         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_303:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_BaudRate_1
// 5074         {
// 5075             return status;
// 5076         }
// 5077 
// 5078 #if (S2W_UARTCONF_BITS_5 != 0) || (S2W_UARTCONF_BITS_8 != 3)
// 5079 #error Fix bits macros
// 5080 #endif
// 5081 
// 5082         if (temp < 5 || temp > 8)
        LDR      R0,[SP, #+0]
        SUBS     R0,R0,#+5
        CMP      R0,#+4
        BCS.N    ??AppS2wCmd_BaudRate_0
// 5083         {
// 5084             return S2W_EINVAL;
// 5085         }
// 5086 
// 5087         params.conf.uart.bits = temp - 5;
        LDR      R1,[SP, #+8]
        BFI      R1,R0,#+0,#+2
        STR      R1,[SP, #+8]
// 5088     }
// 5089 
// 5090     /* get the 3rd parameter-parity
// 5091      */
// 5092     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_BaudRate_2:
        BL       ?Subroutine42
// 5093     if (p && *p)
??CrossCallReturnLabel_231:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_BaudRate_3
// 5094     {
// 5095         if (p[1] != '\0')
        LDRB     R0,[R0, #+1]
        CBNZ.N   R0,??AppS2wCmd_BaudRate_0
// 5096         {
// 5097             return S2W_EINVAL;
// 5098         }
// 5099 
// 5100         switch (toupper(*p))
        MOV      R0,R1
          CFI FunCall toupper
        BL       toupper
        CMP      R0,#+69
        BEQ.N    ??AppS2wCmd_BaudRate_4
        CMP      R0,#+78
        BEQ.N    ??AppS2wCmd_BaudRate_5
        CMP      R0,#+79
        BEQ.N    ??AppS2wCmd_BaudRate_6
        B.N      ??AppS2wCmd_BaudRate_0
// 5101         {
// 5102             case 'N':
// 5103             params.conf.uart.parity= S2W_UARTCONF_PARITY_NONE;
??AppS2wCmd_BaudRate_5:
        LDR      R0,[SP, #+8]
        BIC      R0,R0,#0x38
        STR      R0,[SP, #+8]
// 5104             break;
        B.N      ??AppS2wCmd_BaudRate_3
// 5105 
// 5106             case 'O':
// 5107             params.conf.uart.parity = S2W_UARTCONF_PARITY_ODD;
??AppS2wCmd_BaudRate_6:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_BaudRate_7
// 5108             break;
// 5109 
// 5110             case 'E':
// 5111             params.conf.uart.parity = S2W_UARTCONF_PARITY_EVEN;
??AppS2wCmd_BaudRate_4:
        MOVS     R0,#+2
??AppS2wCmd_BaudRate_7:
        LDR      R1,[SP, #+8]
        BFI      R1,R0,#+3,#+3
        STR      R1,[SP, #+8]
// 5112             break;
// 5113 
// 5114             default:
// 5115             return S2W_EINVAL;
// 5116         }
// 5117     }
// 5118 
// 5119     /* get the 4th parameter- stop bits
// 5120      */
// 5121     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_BaudRate_3:
        BL       ?Subroutine42
// 5122     if (p && *p)
??CrossCallReturnLabel_230:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_BaudRate_8
// 5123     {
// 5124         status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 5125         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_302:
        CBNZ.N   R0,??AppS2wCmd_BaudRate_1
// 5126         {
// 5127             return status;
// 5128         }
// 5129 
// 5130         if (temp != 1 && temp != 2)
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_BaudRate_9
        CMP      R0,#+2
        BEQ.N    ??AppS2wCmd_BaudRate_10
// 5131         {
// 5132             return S2W_EINVAL;
??AppS2wCmd_BaudRate_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_BaudRate_1
// 5133         }
// 5134 
// 5135         params.conf.uart.stop = temp == 1 ?
// 5136                   S2W_UARTCONF_STOP_1 : S2W_UARTCONF_STOP_2;
// 5137     }
??AppS2wCmd_BaudRate_9:
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_BaudRate_11
??AppS2wCmd_BaudRate_10:
        MOVS     R0,#+1
??AppS2wCmd_BaudRate_11:
        LDR      R1,[SP, #+8]
        BIC      R1,R1,#0x4
        ORR      R0,R1,R0, LSL #+2
        STR      R0,[SP, #+8]
// 5138 
// 5139     /* call the hal uart configuration function
// 5140      */
// 5141     status = AppS2wHal_UartConfig(&params);
??AppS2wCmd_BaudRate_8:
        ADD      R0,SP,#+4
          CFI FunCall AppS2wHal_UartConfig
        BL       AppS2wHal_UartConfig
// 5142     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_BaudRate_1
// 5143     {
// 5144         return status;
// 5145     }
// 5146 
// 5147     /* update the current active profile
// 5148      */
// 5149     memcpy(&s2wCurrent.serialPortConf, &params, sizeof(s2wCurrent.serialPortConf));
        MOVS     R2,#+20
        ADD      R1,SP,#+4
        BL       ??Subroutine117_0
// 5150 
// 5151     return S2W_SUCCESS;
??CrossCallReturnLabel_560:
        MOVS     R0,#+0
??AppS2wCmd_BaudRate_1:
        ADD      SP,SP,#+32
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock118
// 5152 
// 5153 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable403:
        DC32     AppS2wScan_Notification

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable403_1:
        DC32     s2wScanUserEntryBuff

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable403_2:
        DC32     0x80000001
// 5154 
// 5155 
// 5156 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock119 Using cfiCommon0
          CFI Function AppS2wCmd_UartFifoLevel
        THUMB
// 5157 PRIVATE UINT8
// 5158 AppS2wCmd_UartFifoLevel(UINT8 *ptr)
// 5159 {
AppS2wCmd_UartFifoLevel:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 5160     UINT32 txLevel=0,rxLevel=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
        STR      R0,[SP, #+0]
// 5161     UINT8 status;
// 5162     UINT8 *p;
// 5163     if((ptr[0] =='?') &&(ptr[1] =='\0'))
        LDR.W    R4,??DataTable417_3
        LDR      R0,[SP, #+8]
        LDRB     R0,[R0, #+0]
        CMP      R0,#+63
        ITTT     EQ 
        LDREQ    R0,[SP, #+8]
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_UartFifoLevel_0
// 5164     {
// 5165         S2w_Printf("\r\nRXLEVEL=%02x,TXLEVEL=%02x\r\n",GsnUart_IntrFifoRxLevelGet(&s2wSerialPortHandle.uartHandle),
// 5166                    GsnUart_IntrFifoTxLevelGet(&s2wSerialPortHandle.uartHandle));
        MOV      R0,R4
          CFI FunCall GsnUart_IntrFifoTxLevelGet
        BL       GsnUart_IntrFifoTxLevelGet
        MOV      R5,R0
        MOV      R0,R4
          CFI FunCall GsnUart_IntrFifoRxLevelGet
        BL       GsnUart_IntrFifoRxLevelGet
        MOV      R1,R0
        MOV      R2,R5
        ADR.W    R0,`?<Constant "\\r\\nRXLEVEL=%02x,TXLEVE...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_UartFifoLevel_1
// 5167     }
// 5168     else
// 5169     {
// 5170         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_UartFifoLevel_0:
        BL       ??Subroutine34_0
// 5171         if (!p)
??CrossCallReturnLabel_154:
        CBZ.N    R0,??AppS2wCmd_UartFifoLevel_2
// 5172         {
// 5173             return S2W_EINVAL;
// 5174         }
// 5175         status = AppS2wParse_Int(p, &rxLevel);
// 5176         if ((status != S2W_SUCCESS) || (rxLevel < 1) || (rxLevel > 15))
        BL       ?Subroutine51
??CrossCallReturnLabel_301:
        CBNZ.N   R0,??AppS2wCmd_UartFifoLevel_2
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_UartFifoLevel_2
        CMP      R0,#+16
        BCS.N    ??AppS2wCmd_UartFifoLevel_2
// 5177         {
// 5178             return S2W_EINVAL;
// 5179         }
// 5180         GsnUart_IntrFifoRxLevelSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_IFL_T)rxLevel);
        UXTB     R1,R0
        MOV      R0,R4
          CFI FunCall GsnUart_IntrFifoRxLevelSet
        BL       GsnUart_IntrFifoRxLevelSet
// 5181         p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 5182         if (p && *p)
??CrossCallReturnLabel_153:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_UartFifoLevel_1
// 5183         {
// 5184             status = AppS2wParse_Int(p, &txLevel);
// 5185             if ((status != S2W_SUCCESS) || (txLevel > 15))
        BL       ?Subroutine52
??CrossCallReturnLabel_327:
        CBNZ.N   R0,??AppS2wCmd_UartFifoLevel_2
        LDR      R0,[SP, #+4]
        CMP      R0,#+16
        BCC.N    ??AppS2wCmd_UartFifoLevel_3
// 5186             {
// 5187                 return S2W_EINVAL;
??AppS2wCmd_UartFifoLevel_2:
        MOVS     R0,#+2
        POP      {R1-R5,PC}
// 5188             }
// 5189             GsnUart_IntrFifoTxLevelSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_IFL_T)txLevel);
??AppS2wCmd_UartFifoLevel_3:
        UXTB     R1,R0
        MOV      R0,R4
          CFI FunCall GsnUart_IntrFifoTxLevelSet
        BL       GsnUart_IntrFifoTxLevelSet
// 5190 		}
// 5191     }
// 5192     return S2W_SUCCESS;
??AppS2wCmd_UartFifoLevel_1:
        MOVS     R0,#+0
        POP      {R1-R5,PC}       ;; return
          CFI EndBlock cfiBlock119
// 5193 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nRXLEVEL=%02x,TXLEVE...">`:
        DC8 "\015\012RXLEVEL=%02x,TXLEVEL=%02x\015\012"
        DC8 0, 0
// 5194 #endif
// 5195 
// 5196 /**
// 5197  ******************************************************************
// 5198  * @ingroup S2w-Application
// 5199  * @brief Process the AT&Y Command. AT&Y configures the power on
// 5200  *        profile identifier.This function calls the hal flash write API
// 5201           to update the parameter.
// 5202  * @param ptr Pointer to the user string.
// 5203  * @return S2W_SUCCESS - operation successful.
// 5204  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5205  * @retval S2W_FAILURE - operation failure- profile setting failed.
// 5206  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock120 Using cfiCommon0
          CFI Function AppS2wCmd_SetDefaultProfile
        THUMB
// 5207 PRIVATE UINT8
// 5208 AppS2wCmd_SetDefaultProfile(UINT8 *ptr)
// 5209 {
AppS2wCmd_SetDefaultProfile:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 5210     UINT8 profile;
// 5211     UINT8 status;
// 5212     /* validate the input parameter as a vlaid identifier
// 5213      */
// 5214     status = AppS2wParse_Boolean(ptr, &profile);
        BL       ?Subroutine60
// 5215     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_381:
        CBNZ.N   R0,??AppS2wCmd_SetDefaultProfile_0
// 5216     {
// 5217         return status;
// 5218     }
// 5219 
// 5220     profile_params.defaultProfile = profile;
        LDR.W    R4,??DataTable417_4
        LDRB     R0,[SP, #+0]
// 5221     if(!s2wappMainTaskCtxt->fsInit)
        LDR.W    R6,??DataTable413_2
        STRB     R0,[R4, #+5]
        MOVW     R5,#+33136
        LDR      R0,[R6, #+0]
        LDRB     R0,[R5, R0]
        CBNZ.N   R0,??AppS2wCmd_SetDefaultProfile_1
// 5222     {
// 5223 		App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 5224 		s2wappMainTaskCtxt->fsInit = TRUE;
        LDR      R0,[R6, #+0]
        MOVS     R1,#+1
        STRB     R1,[R5, R0]
// 5225                 f_enterFS();
          CFI FunCall fsm_enterFS
        BL       fsm_enterFS
// 5226 	}
// 5227     return S2w_SaveS2wProfileParams(&profile_params);
??AppS2wCmd_SetDefaultProfile_1:
        MOV      R0,R4
          CFI FunCall S2w_SaveS2wProfileParams
        BL       S2w_SaveS2wProfileParams
??AppS2wCmd_SetDefaultProfile_0:
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock120
// 5228 }
// 5229 
// 5230 
// 5231 
// 5232 
// 5233 /**
// 5234  ******************************************************************
// 5235  * @ingroup S2w-Application
// 5236  * @brief Process the ATH Command.
// 5237      This function call the hal function function to disconnect the network
// 5238      association.
// 5239  * @param ptr Pointer to the user string.
// 5240  * @return S2W_SUCCESS - operation successful.
// 5241  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5242  * @retval S2W_FAILURE - operation failure- disconnect failed.
// 5243  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock121 Using cfiCommon0
          CFI Function AppS2wCmd_Disconnect
        THUMB
// 5244 PRIVATE UINT8
// 5245 AppS2wCmd_Disconnect(UINT8 *ptr)
// 5246 {
// 5247     if (*ptr)
AppS2wCmd_Disconnect:
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        IT       EQ 
          CFI FunCall AppS2w_HangUp
        BEQ.W    AppS2w_HangUp
// 5248     {
// 5249         return S2W_EINVAL;
        MOVS     R0,#+2
        BX       LR
          CFI EndBlock cfiBlock121
// 5250     }
// 5251     
// 5252     return AppS2w_HangUp();
// 5253 }
// 5254 
// 5255 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock122 Using cfiCommon0
          CFI Function AppS2wCmd_AssocPSModeSet
          CFI NoCalls
        THUMB
// 5256 UINT8
// 5257 AppS2wCmd_AssocPSModeSet( UINT8* ptr)
// 5258 {
AppS2wCmd_AssocPSModeSet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 5259     UINT32 temp;
// 5260     UINT8 status;
// 5261     UINT8 *p;
// 5262     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 5263     if (!p)
??CrossCallReturnLabel_152:
        CBNZ.N   R0,??AppS2wCmd_AssocPSModeSet_0
// 5264     {
// 5265         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 5266     }
// 5267     status = AppS2wParse_Int(p, &temp);
??AppS2wCmd_AssocPSModeSet_0:
        BL       ?Subroutine51
// 5268     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_300:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock122
// 5269     {
// 5270         return status;
// 5271     }
// 5272     return S2W_SUCCESS;
// 5273 /*
// 5274     if( temp <= GSN_WDD_ASSOC_PS_MODE_RX_PS_POLL_CONSERVE )
// 5275     {
// 5276        GsnWdd_Ioctl( &s2wappMainTaskCtxt->wdd,
// 5277        GSN_L2DEV_IOCTL_PS_MODE_RX_STATE_SET, &temp );
// 5278        return S2W_SUCCESS;
// 5279    }
// 5280    else
// 5281    {
// 5282        return S2W_EINVAL;
// 5283    }
// 5284 */
// 5285 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond123 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_313
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond124 Using cfiCommon0
          CFI (cfiCond124) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond124) Conditional ??CrossCallReturnLabel_312
          CFI (cfiCond124) R4 Frame(CFA, -36)
          CFI (cfiCond124) R5 Frame(CFA, -32)
          CFI (cfiCond124) R6 Frame(CFA, -28)
          CFI (cfiCond124) R7 Frame(CFA, -24)
          CFI (cfiCond124) R8 Frame(CFA, -20)
          CFI (cfiCond124) R9 Frame(CFA, -16)
          CFI (cfiCond124) R10 Frame(CFA, -12)
          CFI (cfiCond124) R11 Frame(CFA, -8)
          CFI (cfiCond124) R14 Frame(CFA, -4)
          CFI (cfiCond124) CFA R13+64
          CFI Block cfiCond125 Using cfiCommon0
          CFI (cfiCond125) Function AppS2wCmd_HttpClientConfig
          CFI (cfiCond125) Conditional ??CrossCallReturnLabel_311
          CFI (cfiCond125) R4 Frame(CFA, -32)
          CFI (cfiCond125) R5 Frame(CFA, -28)
          CFI (cfiCond125) R6 Frame(CFA, -24)
          CFI (cfiCond125) R7 Frame(CFA, -20)
          CFI (cfiCond125) R8 Frame(CFA, -16)
          CFI (cfiCond125) R9 Frame(CFA, -12)
          CFI (cfiCond125) R10 Frame(CFA, -8)
          CFI (cfiCond125) R14 Frame(CFA, -4)
          CFI (cfiCond125) CFA R13+40
          CFI Block cfiCond126 Using cfiCommon0
          CFI (cfiCond126) Function AppS2wCmd_HttpClientConfigDel
          CFI (cfiCond126) Conditional ??CrossCallReturnLabel_310
          CFI (cfiCond126) R4 Frame(CFA, -20)
          CFI (cfiCond126) R5 Frame(CFA, -16)
          CFI (cfiCond126) R6 Frame(CFA, -12)
          CFI (cfiCond126) R7 Frame(CFA, -8)
          CFI (cfiCond126) R14 Frame(CFA, -4)
          CFI (cfiCond126) CFA R13+32
          CFI Block cfiCond127 Using cfiCommon0
          CFI (cfiCond127) Function AppS2wCmd_scanTimeSet
          CFI (cfiCond127) Conditional ??CrossCallReturnLabel_309
          CFI (cfiCond127) R4 Frame(CFA, -12)
          CFI (cfiCond127) R5 Frame(CFA, -8)
          CFI (cfiCond127) R14 Frame(CFA, -4)
          CFI (cfiCond127) CFA R13+32
          CFI Block cfiCond128 Using cfiCommon0
          CFI (cfiCond128) Function AppS2wCmd_Nstcp
          CFI (cfiCond128) Conditional ??CrossCallReturnLabel_308
          CFI (cfiCond128) R14 Frame(CFA, -4)
          CFI (cfiCond128) CFA R13+80
          CFI Block cfiCond129 Using cfiCommon0
          CFI (cfiCond129) Function AppS2wCmd_Nsudp
          CFI (cfiCond129) Conditional ??CrossCallReturnLabel_307
          CFI (cfiCond129) R14 Frame(CFA, -4)
          CFI (cfiCond129) CFA R13+72
          CFI Block cfiCond130 Using cfiCommon0
          CFI (cfiCond130) Function AppS2wCmd_SetSockOp
          CFI (cfiCond130) Conditional ??CrossCallReturnLabel_306
          CFI (cfiCond130) R14 Frame(CFA, -4)
          CFI (cfiCond130) CFA R13+32
          CFI Block cfiCond131 Using cfiCommon0
          CFI (cfiCond131) Function AppS2wCmd_Wmode
          CFI (cfiCond131) Conditional ??CrossCallReturnLabel_305
          CFI (cfiCond131) R4 Frame(CFA, -36)
          CFI (cfiCond131) R5 Frame(CFA, -32)
          CFI (cfiCond131) R6 Frame(CFA, -28)
          CFI (cfiCond131) R7 Frame(CFA, -24)
          CFI (cfiCond131) R8 Frame(CFA, -20)
          CFI (cfiCond131) R9 Frame(CFA, -16)
          CFI (cfiCond131) R10 Frame(CFA, -12)
          CFI (cfiCond131) R11 Frame(CFA, -8)
          CFI (cfiCond131) R14 Frame(CFA, -4)
          CFI (cfiCond131) CFA R13+72
          CFI Block cfiCond132 Using cfiCommon0
          CFI (cfiCond132) Function AppS2wCmd_BaudRate
          CFI (cfiCond132) Conditional ??CrossCallReturnLabel_304
          CFI (cfiCond132) R4 Frame(CFA, -8)
          CFI (cfiCond132) R14 Frame(CFA, -4)
          CFI (cfiCond132) CFA R13+40
          CFI Block cfiCond133 Using cfiCommon0
          CFI (cfiCond133) Function AppS2wCmd_BaudRate
          CFI (cfiCond133) Conditional ??CrossCallReturnLabel_303
          CFI (cfiCond133) R4 Frame(CFA, -8)
          CFI (cfiCond133) R14 Frame(CFA, -4)
          CFI (cfiCond133) CFA R13+40
          CFI Block cfiCond134 Using cfiCommon0
          CFI (cfiCond134) Function AppS2wCmd_BaudRate
          CFI (cfiCond134) Conditional ??CrossCallReturnLabel_302
          CFI (cfiCond134) R4 Frame(CFA, -8)
          CFI (cfiCond134) R14 Frame(CFA, -4)
          CFI (cfiCond134) CFA R13+40
          CFI Block cfiCond135 Using cfiCommon0
          CFI (cfiCond135) Function AppS2wCmd_UartFifoLevel
          CFI (cfiCond135) Conditional ??CrossCallReturnLabel_301
          CFI (cfiCond135) R4 Frame(CFA, -12)
          CFI (cfiCond135) R5 Frame(CFA, -8)
          CFI (cfiCond135) R14 Frame(CFA, -4)
          CFI (cfiCond135) CFA R13+24
          CFI Block cfiCond136 Using cfiCommon0
          CFI (cfiCond136) Function AppS2wCmd_AssocPSModeSet
          CFI (cfiCond136) Conditional ??CrossCallReturnLabel_300
          CFI (cfiCond136) R14 Frame(CFA, -4)
          CFI (cfiCond136) CFA R13+16
          CFI Block cfiCond137 Using cfiCommon0
          CFI (cfiCond137) Function S2w_CmdSyncLossIntrvlSet
          CFI (cfiCond137) Conditional ??CrossCallReturnLabel_299
          CFI (cfiCond137) R14 Frame(CFA, -4)
          CFI (cfiCond137) CFA R13+8
          CFI Block cfiCond138 Using cfiCommon0
          CFI (cfiCond138) Function AppS2wCmd_Wretry
          CFI (cfiCond138) Conditional ??CrossCallReturnLabel_298
          CFI (cfiCond138) R14 Frame(CFA, -4)
          CFI (cfiCond138) CFA R13+8
          CFI Block cfiCond139 Using cfiCommon0
          CFI (cfiCond139) Function AppS2wCmd_Ncudp
          CFI (cfiCond139) Conditional ??CrossCallReturnLabel_297
          CFI (cfiCond139) R14 Frame(CFA, -4)
          CFI (cfiCond139) CFA R13+80
          CFI Block cfiCond140 Using cfiCommon0
          CFI (cfiCond140) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond140) Conditional ??CrossCallReturnLabel_296
          CFI (cfiCond140) R4 Frame(CFA, -12)
          CFI (cfiCond140) R5 Frame(CFA, -8)
          CFI (cfiCond140) R14 Frame(CFA, -4)
          CFI (cfiCond140) CFA R13+40
          CFI Block cfiCond141 Using cfiCommon0
          CFI (cfiCond141) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond141) Conditional ??CrossCallReturnLabel_295
          CFI (cfiCond141) R4 Frame(CFA, -12)
          CFI (cfiCond141) R5 Frame(CFA, -8)
          CFI (cfiCond141) R14 Frame(CFA, -4)
          CFI (cfiCond141) CFA R13+40
          CFI Block cfiCond142 Using cfiCommon0
          CFI (cfiCond142) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond142) Conditional ??CrossCallReturnLabel_294
          CFI (cfiCond142) R4 Frame(CFA, -12)
          CFI (cfiCond142) R5 Frame(CFA, -8)
          CFI (cfiCond142) R14 Frame(CFA, -4)
          CFI (cfiCond142) CFA R13+40
          CFI Block cfiCond143 Using cfiCommon0
          CFI (cfiCond143) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond143) Conditional ??CrossCallReturnLabel_293
          CFI (cfiCond143) R4 Frame(CFA, -12)
          CFI (cfiCond143) R5 Frame(CFA, -8)
          CFI (cfiCond143) R14 Frame(CFA, -4)
          CFI (cfiCond143) CFA R13+40
          CFI Block cfiCond144 Using cfiCommon0
          CFI (cfiCond144) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond144) Conditional ??CrossCallReturnLabel_292
          CFI (cfiCond144) R4 Frame(CFA, -12)
          CFI (cfiCond144) R5 Frame(CFA, -8)
          CFI (cfiCond144) R14 Frame(CFA, -4)
          CFI (cfiCond144) CFA R13+40
          CFI Block cfiCond145 Using cfiCommon0
          CFI (cfiCond145) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond145) Conditional ??CrossCallReturnLabel_291
          CFI (cfiCond145) R4 Frame(CFA, -12)
          CFI (cfiCond145) R5 Frame(CFA, -8)
          CFI (cfiCond145) R14 Frame(CFA, -4)
          CFI (cfiCond145) CFA R13+40
          CFI Block cfiCond146 Using cfiCommon0
          CFI (cfiCond146) Function AppS2wCmd_SslCertificateAdd
          CFI (cfiCond146) Conditional ??CrossCallReturnLabel_290
          CFI (cfiCond146) R4 Frame(CFA, -20)
          CFI (cfiCond146) R5 Frame(CFA, -16)
          CFI (cfiCond146) R6 Frame(CFA, -12)
          CFI (cfiCond146) R7 Frame(CFA, -8)
          CFI (cfiCond146) R14 Frame(CFA, -4)
          CFI (cfiCond146) CFA R13+72
          CFI Block cfiCond147 Using cfiCommon0
          CFI (cfiCond147) Function AppS2wCmd_Weap
          CFI (cfiCond147) Conditional ??CrossCallReturnLabel_289
          CFI (cfiCond147) R4 Frame(CFA, -28)
          CFI (cfiCond147) R5 Frame(CFA, -24)
          CFI (cfiCond147) R6 Frame(CFA, -20)
          CFI (cfiCond147) R7 Frame(CFA, -16)
          CFI (cfiCond147) R8 Frame(CFA, -12)
          CFI (cfiCond147) R9 Frame(CFA, -8)
          CFI (cfiCond147) R14 Frame(CFA, -4)
          CFI (cfiCond147) CFA R13+80
          CFI Block cfiCond148 Using cfiCommon0
          CFI (cfiCond148) Function AppS2wCmd_BeaconMissThresholdSet
          CFI (cfiCond148) Conditional ??CrossCallReturnLabel_288
          CFI (cfiCond148) R14 Frame(CFA, -4)
          CFI (cfiCond148) CFA R13+16
          CFI Block cfiCond149 Using cfiCommon0
          CFI (cfiCond149) Function AppS2wCmd_WlanRecvFiltrSet
          CFI (cfiCond149) Conditional ??CrossCallReturnLabel_287
          CFI (cfiCond149) R14 Frame(CFA, -4)
          CFI (cfiCond149) CFA R13+16
          CFI Block cfiCond150 Using cfiCommon0
          CFI (cfiCond150) Function AppS2wCmd_BlockAckReq
          CFI (cfiCond150) Conditional ??CrossCallReturnLabel_286
          CFI (cfiCond150) R14 Frame(CFA, -4)
          CFI (cfiCond150) CFA R13+24
          CFI Block cfiCond151 Using cfiCommon0
          CFI (cfiCond151) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond151) Conditional ??CrossCallReturnLabel_285
          CFI (cfiCond151) R14 Frame(CFA, -4)
          CFI (cfiCond151) CFA R13+24
          CFI Block cfiCond152 Using cfiCommon0
          CFI (cfiCond152) Function AppS2wCmd_AmpduReq
          CFI (cfiCond152) Conditional ??CrossCallReturnLabel_284
          CFI (cfiCond152) R14 Frame(CFA, -4)
          CFI (cfiCond152) CFA R13+24
          CFI Block cfiCond153 Using cfiCommon0
          CFI (cfiCond153) Function AppS2wCmd_SecuritySet
          CFI (cfiCond153) Conditional ??CrossCallReturnLabel_283
          CFI (cfiCond153) R14 Frame(CFA, -4)
          CFI (cfiCond153) CFA R13+8
          CFI Block cfiCond154 Using cfiCommon0
          CFI (cfiCond154) Function AppS2wCmd_Wauth
          CFI (cfiCond154) Conditional ??CrossCallReturnLabel_282
          CFI (cfiCond154) R14 Frame(CFA, -4)
          CFI (cfiCond154) CFA R13+8
          CFI Block cfiCond155 Using cfiCommon0
          CFI (cfiCond155) Function AppS2wCmad_WsrvrValidationEn
          CFI (cfiCond155) Conditional ??CrossCallReturnLabel_281
          CFI (cfiCond155) R14 Frame(CFA, -4)
          CFI (cfiCond155) CFA R13+8
          CFI Block cfiCond156 Using cfiCommon0
          CFI (cfiCond156) Function AppS2wCmad_WeapTimeChk
          CFI (cfiCond156) Conditional ??CrossCallReturnLabel_280
          CFI (cfiCond156) R14 Frame(CFA, -4)
          CFI (cfiCond156) CFA R13+8
          CFI Block cfiCond157 Using cfiCommon0
          CFI (cfiCond157) Function AppS2wCmd_RegDomainSet
          CFI (cfiCond157) Conditional ??CrossCallReturnLabel_279
          CFI (cfiCond157) R4 Frame(CFA, -20)
          CFI (cfiCond157) R5 Frame(CFA, -16)
          CFI (cfiCond157) R6 Frame(CFA, -12)
          CFI (cfiCond157) R7 Frame(CFA, -8)
          CFI (cfiCond157) R14 Frame(CFA, -4)
          CFI (cfiCond157) CFA R13+2064
          CFI Block cfiCond158 Using cfiCommon0
          CFI (cfiCond158) Function AppS2wCmd_Wphymode
          CFI (cfiCond158) Conditional ??CrossCallReturnLabel_278
          CFI (cfiCond158) R14 Frame(CFA, -4)
          CFI (cfiCond158) CFA R13+16
          CFI Block cfiCond159 Using cfiCommon0
          CFI (cfiCond159) Function AppS2wCmd_NcmAutoConf
          CFI (cfiCond159) Conditional ??CrossCallReturnLabel_277
          CFI (cfiCond159) R4 Frame(CFA, -8)
          CFI (cfiCond159) R14 Frame(CFA, -4)
          CFI (cfiCond159) CFA R13+24
          CFI Block cfiCond160 Using cfiCommon0
          CFI (cfiCond160) Function AppS2wCmd_Wrate
          CFI (cfiCond160) Conditional ??CrossCallReturnLabel_276
          CFI (cfiCond160) R4 Frame(CFA, -8)
          CFI (cfiCond160) R14 Frame(CFA, -4)
          CFI (cfiCond160) CFA R13+24
          CFI Block cfiCond161 Using cfiCommon0
          CFI (cfiCond161) Function AppS2wCmd_Wrate
          CFI (cfiCond161) Conditional ??CrossCallReturnLabel_275
          CFI (cfiCond161) R4 Frame(CFA, -8)
          CFI (cfiCond161) R14 Frame(CFA, -4)
          CFI (cfiCond161) CFA R13+24
          CFI Block cfiCond162 Using cfiCommon0
          CFI (cfiCond162) Function AppS2wCmd_Wrate
          CFI (cfiCond162) Conditional ??CrossCallReturnLabel_274
          CFI (cfiCond162) R4 Frame(CFA, -8)
          CFI (cfiCond162) R14 Frame(CFA, -4)
          CFI (cfiCond162) CFA R13+24
          CFI Block cfiCond163 Using cfiCommon0
          CFI (cfiCond163) Function AppS2wCmd_IdOutput
          CFI (cfiCond163) Conditional ??CrossCallReturnLabel_273
          CFI (cfiCond163) R4 Frame(CFA, -8)
          CFI (cfiCond163) R14 Frame(CFA, -4)
          CFI (cfiCond163) CFA R13+16
          CFI Block cfiCond164 Using cfiCommon0
          CFI (cfiCond164) Function AppS2wCmd_Dgpio
          CFI (cfiCond164) Conditional ??CrossCallReturnLabel_272
          CFI (cfiCond164) R4 Frame(CFA, -8)
          CFI (cfiCond164) R14 Frame(CFA, -4)
          CFI (cfiCond164) CFA R13+24
          CFI Block cfiCond165 Using cfiCommon0
          CFI (cfiCond165) Function AppS2wCmd_AdcConf
          CFI (cfiCond165) Conditional ??CrossCallReturnLabel_271
          CFI (cfiCond165) R4 Frame(CFA, -12)
          CFI (cfiCond165) R5 Frame(CFA, -8)
          CFI (cfiCond165) R14 Frame(CFA, -4)
          CFI (cfiCond165) CFA R13+24
          CFI Block cfiCond166 Using cfiCommon0
          CFI (cfiCond166) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond166) Conditional ??CrossCallReturnLabel_270
          CFI (cfiCond166) R4 Frame(CFA, -16)
          CFI (cfiCond166) R5 Frame(CFA, -12)
          CFI (cfiCond166) R6 Frame(CFA, -8)
          CFI (cfiCond166) R14 Frame(CFA, -4)
          CFI (cfiCond166) CFA R13+40
          CFI Block cfiCond167 Using cfiCommon0
          CFI (cfiCond167) Function AppS2wCmd_CoapOpen
          CFI (cfiCond167) Conditional ??CrossCallReturnLabel_269
          CFI (cfiCond167) R4 Frame(CFA, -16)
          CFI (cfiCond167) R5 Frame(CFA, -12)
          CFI (cfiCond167) R6 Frame(CFA, -8)
          CFI (cfiCond167) R14 Frame(CFA, -4)
          CFI (cfiCond167) CFA R13+24
          CFI Block cfiCond168 Using cfiCommon0
          CFI (cfiCond168) Function AppS2wCmd_CoapSend
          CFI (cfiCond168) Conditional ??CrossCallReturnLabel_268
          CFI (cfiCond168) R4 Frame(CFA, -24)
          CFI (cfiCond168) R5 Frame(CFA, -20)
          CFI (cfiCond168) R6 Frame(CFA, -16)
          CFI (cfiCond168) R7 Frame(CFA, -12)
          CFI (cfiCond168) R8 Frame(CFA, -8)
          CFI (cfiCond168) R14 Frame(CFA, -4)
          CFI (cfiCond168) CFA R13+1440
          CFI Block cfiCond169 Using cfiCommon0
          CFI (cfiCond169) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond169) Conditional ??CrossCallReturnLabel_267
          CFI (cfiCond169) R4 Frame(CFA, -12)
          CFI (cfiCond169) R5 Frame(CFA, -8)
          CFI (cfiCond169) R14 Frame(CFA, -4)
          CFI (cfiCond169) CFA R13+24
          CFI Block cfiCond170 Using cfiCommon0
          CFI (cfiCond170) Function AppS2wCmd_CoapRemoveOption
          CFI (cfiCond170) Conditional ??CrossCallReturnLabel_266
          CFI (cfiCond170) R4 Frame(CFA, -20)
          CFI (cfiCond170) R5 Frame(CFA, -16)
          CFI (cfiCond170) R6 Frame(CFA, -12)
          CFI (cfiCond170) R7 Frame(CFA, -8)
          CFI (cfiCond170) R14 Frame(CFA, -4)
          CFI (cfiCond170) CFA R13+32
          CFI Block cfiCond171 Using cfiCommon0
          CFI (cfiCond171) Function AppS2wCmd_BaBitMapSet
          CFI (cfiCond171) Conditional ??CrossCallReturnLabel_265
          CFI (cfiCond171) R14 Frame(CFA, -4)
          CFI (cfiCond171) CFA R13+16
          CFI Block cfiCond172 Using cfiCommon0
          CFI (cfiCond172) Function AppS2wCmd_BaBitMapSet
          CFI (cfiCond172) Conditional ??CrossCallReturnLabel_264
          CFI (cfiCond172) R14 Frame(CFA, -4)
          CFI (cfiCond172) CFA R13+16
          CFI Block cfiCond173 Using cfiCommon0
          CFI (cfiCond173) Function AppS2wCmd_TempReadStart
          CFI (cfiCond173) Conditional ??CrossCallReturnLabel_263
          CFI (cfiCond173) R4 Frame(CFA, -8)
          CFI (cfiCond173) R14 Frame(CFA, -4)
          CFI (cfiCond173) CFA R13+24
          CFI Block cfiPicker174 Using cfiCommon1
          CFI (cfiPicker174) NoFunction
          CFI (cfiPicker174) Picker
        THUMB
?Subroutine51:
        ADD      R1,SP,#+0
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_Int
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_Int
          CFI FunCall AppS2wCmd_HttpClientConfig AppS2wParse_Int
          CFI FunCall AppS2wCmd_HttpClientConfigDel AppS2wParse_Int
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Nstcp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Nsudp AppS2wParse_Int
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_Int
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_Int
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_Int
          CFI FunCall AppS2wCmd_UartFifoLevel AppS2wParse_Int
          CFI FunCall AppS2wCmd_AssocPSModeSet AppS2wParse_Int
          CFI FunCall S2w_CmdSyncLossIntrvlSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wretry AppS2wParse_Int
          CFI FunCall AppS2wCmd_Ncudp AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_Int
          CFI FunCall AppS2wCmd_Weap AppS2wParse_Int
          CFI FunCall AppS2wCmd_BeaconMissThresholdSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_WlanRecvFiltrSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_BlockAckReq AppS2wParse_Int
          CFI FunCall AppS2wCmd_AmsduReqt AppS2wParse_Int
          CFI FunCall AppS2wCmd_AmpduReq AppS2wParse_Int
          CFI FunCall AppS2wCmd_SecuritySet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wauth AppS2wParse_Int
          CFI FunCall AppS2wCmad_WsrvrValidationEn AppS2wParse_Int
          CFI FunCall AppS2wCmad_WeapTimeChk AppS2wParse_Int
          CFI FunCall AppS2wCmd_RegDomainSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wphymode AppS2wParse_Int
          CFI FunCall AppS2wCmd_NcmAutoConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_Int
          CFI FunCall AppS2wCmd_IdOutput AppS2wParse_Int
          CFI FunCall AppS2wCmd_Dgpio AppS2wParse_Int
          CFI FunCall AppS2wCmd_AdcConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_CoapOpen AppS2wParse_Int
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_Int
          CFI FunCall AppS2wCmd_CoapSetOption AppS2wParse_Int
          CFI FunCall AppS2wCmd_CoapRemoveOption AppS2wParse_Int
          CFI FunCall AppS2wCmd_BaBitMapSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_BaBitMapSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_TempReadStart AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond123
          CFI EndBlock cfiCond124
          CFI EndBlock cfiCond125
          CFI EndBlock cfiCond126
          CFI EndBlock cfiCond127
          CFI EndBlock cfiCond128
          CFI EndBlock cfiCond129
          CFI EndBlock cfiCond130
          CFI EndBlock cfiCond131
          CFI EndBlock cfiCond132
          CFI EndBlock cfiCond133
          CFI EndBlock cfiCond134
          CFI EndBlock cfiCond135
          CFI EndBlock cfiCond136
          CFI EndBlock cfiCond137
          CFI EndBlock cfiCond138
          CFI EndBlock cfiCond139
          CFI EndBlock cfiCond140
          CFI EndBlock cfiCond141
          CFI EndBlock cfiCond142
          CFI EndBlock cfiCond143
          CFI EndBlock cfiCond144
          CFI EndBlock cfiCond145
          CFI EndBlock cfiCond146
          CFI EndBlock cfiCond147
          CFI EndBlock cfiCond148
          CFI EndBlock cfiCond149
          CFI EndBlock cfiCond150
          CFI EndBlock cfiCond151
          CFI EndBlock cfiCond152
          CFI EndBlock cfiCond153
          CFI EndBlock cfiCond154
          CFI EndBlock cfiCond155
          CFI EndBlock cfiCond156
          CFI EndBlock cfiCond157
          CFI EndBlock cfiCond158
          CFI EndBlock cfiCond159
          CFI EndBlock cfiCond160
          CFI EndBlock cfiCond161
          CFI EndBlock cfiCond162
          CFI EndBlock cfiCond163
          CFI EndBlock cfiCond164
          CFI EndBlock cfiCond165
          CFI EndBlock cfiCond166
          CFI EndBlock cfiCond167
          CFI EndBlock cfiCond168
          CFI EndBlock cfiCond169
          CFI EndBlock cfiCond170
          CFI EndBlock cfiCond171
          CFI EndBlock cfiCond172
          CFI EndBlock cfiCond173
          CFI EndBlock cfiPicker174
// 5286 
// 5287 /**
// 5288  ******************************************************************
// 5289  * @ingroup S2w-Application
// 5290  * @brief Process the AT&F Command. AT&F command restores the configuration
// 5291  *        to the factory settings.
// 5292  * @param ptr Pointer to the user input string.
// 5293 
// 5294  * @return S2W_SUCCESS - operation successful.
// 5295  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5296  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock175 Using cfiCommon0
          CFI Function AppS2wCmd_Factory
        THUMB
// 5297 PRIVATE UINT8
// 5298 AppS2wCmd_Factory(UINT8 *ptr)
// 5299 {
AppS2wCmd_Factory:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
// 5300 
// 5301     if (*ptr)
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Factory_0
// 5302     {
// 5303         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R4-R6,PC}
// 5304     }
// 5305 
// 5306     /* get the default profile stored in flash
// 5307      */
// 5308     AppS2wProcess_DefaulConfigtLoad(s2wFlashParams);
??AppS2wCmd_Factory_0:
        LDR.W    R5,??DataTable413_9
        LDR      R0,[R5, #+0]
          CFI FunCall AppS2wProcess_DefaulConfigtLoad
        BL       AppS2wProcess_DefaulConfigtLoad
// 5309 
// 5310     /* Load the profile values to the current active profile
// 5311      */
// 5312     S2W_PROFILE_T *profile = &s2wFlashParams->profile[profile_params.defaultProfile];
        LDR.W    R4,??DataTable417_4
        LDR      R2,[R5, #+0]
        LDRB     R0,[R4, #+5]
        MOV      R1,#+1016
        MLA      R5,R1,R0,R2
// 5313 
// 5314     s2wIsAutoconnected = 0;
        BL       ?Subroutine23
// 5315 
// 5316     /* close all cids
// 5317      */
// 5318     AppS2wHal_NetCloseAll(0);
// 5319     memcpy(&s2wCurrent, profile, sizeof(s2wCurrent));
??CrossCallReturnLabel_51:
        LDR.W    R6,??DataTable413_1
        MOV      R2,#+1016
        MOV      R1,R5
        BL       ?Subroutine95
// 5320 
// 5321     /* configure the ip parameters
// 5322      */
// 5323     AppS2w_SetWlanDfltParams(profile_params.defaultProfile);
??CrossCallReturnLabel_502:
        LDRB     R0,[R4, #+5]
          CFI FunCall AppS2w_SetWlanDfltParams
        BL       AppS2w_SetWlanDfltParams
// 5324     AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
        ADD      R0,R6,#+392
          CFI FunCall AppS2wHal_NetworkConfig
        BL       AppS2wHal_NetworkConfig
// 5325 
// 5326     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock175
// 5327 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond176 Using cfiCommon0
          CFI Function AppS2wCmd_Write
          CFI Conditional ??CrossCallReturnLabel_504
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond177 Using cfiCommon0
          CFI (cfiCond177) Function AppS2wCmd_Ndhcp
          CFI (cfiCond177) Conditional ??CrossCallReturnLabel_503
          CFI (cfiCond177) R4 Frame(CFA, -24)
          CFI (cfiCond177) R5 Frame(CFA, -20)
          CFI (cfiCond177) R6 Frame(CFA, -16)
          CFI (cfiCond177) R7 Frame(CFA, -12)
          CFI (cfiCond177) R8 Frame(CFA, -8)
          CFI (cfiCond177) R14 Frame(CFA, -4)
          CFI (cfiCond177) CFA R13+72
          CFI Block cfiCond178 Using cfiCommon0
          CFI (cfiCond178) Function AppS2wCmd_Factory
          CFI (cfiCond178) Conditional ??CrossCallReturnLabel_502
          CFI (cfiCond178) R4 Frame(CFA, -16)
          CFI (cfiCond178) R5 Frame(CFA, -12)
          CFI (cfiCond178) R6 Frame(CFA, -8)
          CFI (cfiCond178) R14 Frame(CFA, -4)
          CFI (cfiCond178) CFA R13+16
          CFI Block cfiCond179 Using cfiCommon0
          CFI (cfiCond179) Function AppS2wCmd_Dns
          CFI (cfiCond179) Conditional ??CrossCallReturnLabel_501
          CFI (cfiCond179) R4 Frame(CFA, -20)
          CFI (cfiCond179) R5 Frame(CFA, -16)
          CFI (cfiCond179) R6 Frame(CFA, -12)
          CFI (cfiCond179) R7 Frame(CFA, -8)
          CFI (cfiCond179) R14 Frame(CFA, -4)
          CFI (cfiCond179) CFA R13+56
          CFI Block cfiPicker180 Using cfiCommon1
          CFI (cfiPicker180) NoFunction
          CFI (cfiPicker180) Picker
        THUMB
?Subroutine95:
        MOV      R0,R6
          CFI FunCall AppS2wCmd_Write memcpy
          CFI FunCall AppS2wCmd_Ndhcp memcpy
          CFI FunCall AppS2wCmd_Factory memcpy
          CFI FunCall AppS2wCmd_Dns memcpy
        B.W      memcpy
          CFI EndBlock cfiCond176
          CFI EndBlock cfiCond177
          CFI EndBlock cfiCond178
          CFI EndBlock cfiCond179
          CFI EndBlock cfiPicker180

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond181 Using cfiCommon0
          CFI Function AppS2w_HangUp
          CFI Conditional ??CrossCallReturnLabel_52
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond182 Using cfiCommon0
          CFI (cfiCond182) Function AppS2wCmd_Factory
          CFI (cfiCond182) Conditional ??CrossCallReturnLabel_51
          CFI (cfiCond182) R4 Frame(CFA, -16)
          CFI (cfiCond182) R5 Frame(CFA, -12)
          CFI (cfiCond182) R6 Frame(CFA, -8)
          CFI (cfiCond182) R14 Frame(CFA, -4)
          CFI (cfiCond182) CFA R13+16
          CFI Block cfiPicker183 Using cfiCommon1
          CFI (cfiPicker183) NoFunction
          CFI (cfiPicker183) Picker
        THUMB
?Subroutine23:
        LDR.W    R0,??DataTable413_8
        MOVS     R1,#+0
        STRB     R1,[R0, #+0]
        MOVS     R0,#+0
          CFI FunCall AppS2w_HangUp AppS2wHal_NetCloseAll
          CFI FunCall AppS2wCmd_Factory AppS2wHal_NetCloseAll
        B.W      AppS2wHal_NetCloseAll
          CFI EndBlock cfiCond181
          CFI EndBlock cfiCond182
          CFI EndBlock cfiPicker183
// 5328 
// 5329 
// 5330 /**
// 5331  ******************************************************************
// 5332  * @ingroup S2w-Application
// 5333  * @brief Process the AT+WRXACTIVE Command.
// 5334      This function validate the input parameter as enable or disable
// 5335      and call the hal function to switch ON/OF the active radio.
// 5336  * @param ptr Pointer to the user input string.
// 5337  * @return S2W_SUCCESS - operation successful.
// 5338  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5339  * @retval S2W_FAILURE - operation failure- radio configuration failed.
// 5340  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock184 Using cfiCommon0
          CFI Function AppS2wCmd_Wradio
        THUMB
// 5341 PRIVATE UINT8
// 5342 AppS2wCmd_Wradio(UINT8 *ptr)
// 5343 {
AppS2wCmd_Wradio:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5344     UINT8   status;
// 5345     UINT8   mode;
// 5346 
// 5347     /* validate the parameter as enable/disable
// 5348      */
// 5349     status = AppS2wParse_Boolean(ptr, &mode);
        BL       ?Subroutine60
// 5350     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_380:
        CBNZ.N   R0,??AppS2wCmd_Wradio_0
// 5351     {
// 5352         return status;
// 5353     }
// 5354 
// 5355     /* call the hal function to switch ON/OFF radio
// 5356      */
// 5357     status = AppS2wHal_RadioModeConfig(mode);
        LDRB     R0,[SP, #+0]
          CFI FunCall AppS2wHal_RadioModeConfig
        BL       AppS2wHal_RadioModeConfig
// 5358     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Wradio_0
// 5359     {
// 5360         return status;
// 5361     }
// 5362 
// 5363     /* update the active profile parameter
// 5364      */
// 5365     s2wCurrent.radio = mode;
        LDR.W    R0,??DataTable413_1
        LDRB     R1,[SP, #+0]
        STRB     R1,[R0, #+8]
// 5366     return status;
        MOVS     R0,#+0
??AppS2wCmd_Wradio_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock184
// 5367 }
// 5368 
// 5369 
// 5370 
// 5371 #ifndef S2W_IP2WIFI_SUPPORT
// 5372 
// 5373 /**
// 5374  ******************************************************************
// 5375  * @ingroup S2w-Application
// 5376  * @brief Process the AT+NSTAT command.
// 5377  *   This function display the current network status information.
// 5378  *   It displays the connection status,ip address,AP information,
// 5379  *   RSSI,DNS address etc
// 5380  * @param ptr Pointer to the user input string.
// 5381  *
// 5382  * @return S2W_SUCCESS - operation successful.
// 5383  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5384  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock185 Using cfiCommon0
          CFI Function AppS2wCmd_Nstat
        THUMB
// 5385 PRIVATE UINT8
// 5386 AppS2wCmd_Nstat(UINT8 *ptr)
// 5387 {
AppS2wCmd_Nstat:
        PUSH     {R4-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+28
        SUB      SP,SP,#+268
          CFI CFA R13+296
// 5388     S2W_STATUS_INFO_T statusInfo;
// 5389     const char *security = "NONE";
        ADR.W    R4,`?<Constant "NONE">`
        STR      R4,[SP, #+28]
// 5390     GSN_WIF_WLAN_RSSI_T    wRssi;
// 5391 
// 5392     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R1,[R0, #+0]
        CMP      R1,#+63
        ITT      EQ 
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.W    ??AppS2wCmd_Nstat_0
// 5393     {
// 5394         memset(&statusInfo,0,sizeof(S2W_STATUS_INFO_T));
        MOVS     R2,#+224
        MOVS     R1,#+0
        ADD      R0,SP,#+40
          CFI FunCall memset
        BL       memset
// 5395         statusInfo.wlanInfo.mode = current_wlan_info.mode;
        LDR.W    R0,??DataTable413_1
        LDRB     R0,[R0, #+1016]
        STRB     R0,[SP, #+40]
// 5396         AppS2wHal_MacAddrGet(statusInfo.macAddr);
        ADD      R0,SP,#+256
          CFI FunCall AppS2wHal_MacAddrGet
        BL       AppS2wHal_MacAddrGet
// 5397         statusInfo.wstate = s2wLinkState;
        LDR.N    R0,??DataTable409_4
// 5398 
// 5399         statusInfo.wstate = GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx);
        LDR.W    R6,??DataTable413_2
        LDRB     R0,[R0, #+0]
        ADD      R5,SP,#+84
        STR      R0,[R5, #+12]
        BL       ?Subroutine120
??CrossCallReturnLabel_575:
        STR      R0,[R5, #+12]
// 5400         
// 5401         /* display mac address,network connection status and mode */
// 5402         
// 5403         S2w_Printf("\nMAC=%02x:%02x:%02x:%02x:%02x:%02x\r\n",
// 5404                     statusInfo.macAddr[0],statusInfo.macAddr[1],
// 5405                     statusInfo.macAddr[2],statusInfo.macAddr[3],
// 5406                     statusInfo.macAddr[4],statusInfo.macAddr[5]);
        ADD      R0,SP,#+256
        LDRB     R1,[R0, #+5]
        LDRB     R3,[R0, #+2]
        LDRB     R2,[R0, #+1]
        STR      R1,[SP, #+8]
        LDRB     R1,[R0, #+4]
        STR      R1,[SP, #+4]
        LDRB     R1,[R0, #+3]
        ADR.W    R0,`?<Constant "\\nMAC=%02x:%02x:%02x:%...">`
        STR      R1,[SP, #+0]
        LDRB     R1,[SP, #+256]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5407         statusInfo.wstate?(S2w_Printf("WSTATE=CONNECTED   ")):
// 5408                           (S2w_Printf("WSTATE=NOT CONNECTED  "));
        LDR      R0,[R5, #+12]
        CMP      R0,#+0
        ITE      NE 
        ADRNE.W  R0,`?<Constant "WSTATE=CONNECTED   ">`
        ADREQ.W  R0,`?<Constant "WSTATE=NOT CONNECTED  ">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5409 
// 5410         if(statusInfo.wstate == 0)
        LDR      R0,[R5, #+12]
        CBNZ.N   R0,??AppS2wCmd_Nstat_1
// 5411         {
// 5412             S2w_Printf("  MODE=NONE \r\n");
        ADR.W    R0,`?<Constant "  MODE=NONE \\r\\n">`
        B.N      ??AppS2wCmd_Nstat_2
// 5413 
// 5414         }
??AppS2wCmd_Nstat_1:
        LDR      R0,[R6, #+0]
        LDRB     R0,[R0, #+2508]
        CMP      R0,#+3
        IT       EQ 
        ADREQ.W  R0,`?<Constant "  MODE=IBSS \\r\\n">`
// 5415         else
// 5416         {
// 5417             if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_IBSS)
// 5418             {
// 5419               S2w_Printf("  MODE=IBSS \r\n");
        BEQ.N    ??AppS2wCmd_Nstat_2
// 5420 			}
// 5421             else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
        CMP      R0,#+2
        ITE      EQ 
        ADREQ.W  R0,`?<Constant "  MODE=AP \\r\\n">`
        ADRNE.W  R0,`?<Constant "  MODE=STA \\r\\n">`
// 5422             {
// 5423                S2w_Printf("  MODE=AP \r\n");
// 5424         }
// 5425 		    else
// 5426 		    {
// 5427 				S2w_Printf("  MODE=STA \r\n");
??AppS2wCmd_Nstat_2:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5428 			}
// 5429         }
// 5430 
// 5431         
// 5432         if(statusInfo.wstate)
        LDR      R0,[R5, #+12]
        ADR.W    R9,`?<Constant " SECURITY=%s\\r\\nRSSI=%d\\r\\n">`
        ADR.W    R8,`?<Constant " CHANNEL=NONE  ">`
        ADR.N    R7,??DataTable409_3  ;; "\""
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nstat_3
// 5433         {
// 5434           GSN_WDD_WLAN_CFG_T *WddConf;
// 5435 		  GSN_WLAN_MAC_ADDR_T *pBssid;
// 5436 		  GSN_WLAN_MAC_ADDR_T bssid;
// 5437 
// 5438             WddConf = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
        LDR      R0,[R6, #+0]
// 5439 			pBssid = &WddConf->bssid;
// 5440 			if(GSN_WIF_WLAN_NW_TYPE_AP == s2wappMainTaskCtxt->if0.wddCtx.wlanNwType)
        LDRB     R2,[R0, #+3848]
        ADDW     R4,R0,#+3988
        ADDW     R1,R4,#+33
        CMP      R2,#+2
        BNE.N    ??AppS2wCmd_Nstat_4
// 5441 			{					
// 5442 				GsnWdd_PhyAddrGet(&s2wappMainTaskCtxt->if0.wddCtx,(INT8 *)&bssid);
        ADD      R1,SP,#+12
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_PhyAddrGet
        BL       GsnWdd_PhyAddrGet
// 5443 				pBssid = &bssid;
        ADD      R1,SP,#+12
// 5444 			}
// 5445 			
// 5446 			S2w_Printf("BSSID=%02x:%02x:%02x:%02x:%02x:%02x   SSID=\"",
// 5447 			pBssid->array[0], pBssid->array[1],
// 5448 			pBssid->array[2],pBssid->array[3],
// 5449 			pBssid->array[4],pBssid->array[5]);
??AppS2wCmd_Nstat_4:
        LDRB     R0,[R1, #+5]
        STR      R0,[SP, #+8]
        LDRB     R0,[R1, #+4]
        STR      R0,[SP, #+4]
        LDRB     R0,[R1, #+3]
        STR      R0,[SP, #+0]
        LDRB     R3,[R1, #+2]
        LDRB     R2,[R1, #+1]
        LDRB     R1,[R1, #+0]
        ADR.W    R0,`?<Constant "BSSID=%02x:%02x:%02x:...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5450           
// 5451            AppS2wHal_CharNPut(WddConf->ssid.array,(WddConf->ssid.length));
        LDRB     R1,[R4, #+0]
        ADDS     R0,R4,#+1
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 5452            S2w_Printf("\"");
        BL       ?Subroutine87
// 5453 
// 5454         if( WddConf->channel[0] == 0)
??CrossCallReturnLabel_474:
        LDRB     R1,[R4, #+39]
        CBNZ.N   R1,??AppS2wCmd_Nstat_5
// 5455         {
// 5456             S2w_Printf(" CHANNEL=NONE  ");
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_Nstat_6
// 5457         }
// 5458         else
// 5459         {
// 5460             S2w_Printf(" CHANNEL=%d  ", WddConf->channel[0]);
??AppS2wCmd_Nstat_5:
        ADR.W    R0,`?<Constant " CHANNEL=%d  ">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5461         }
// 5462         AppS2wCmd_GetSecurityString(WddConf, &security);
??AppS2wCmd_Nstat_6:
        ADD      R1,SP,#+28
        MOV      R0,R4
          CFI FunCall AppS2wCmd_GetSecurityString
        BL       AppS2wCmd_GetSecurityString
// 5463 
// 5464         GsnWdd_RSSIGet(&s2wappMainTaskCtxt->if0.wddCtx, (INT8*)&wRssi, sizeof(GSN_WIF_WLAN_RSSI_T));
        LDR      R0,[R6, #+0]
        MOVS     R2,#+1
        ADD      R1,SP,#+32
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_RSSIGet
        BL       GsnWdd_RSSIGet
// 5465         S2w_Printf(" SECURITY=%s\r\nRSSI=%d\r\n", security, (signed char)wRssi.rssi);
        LDRSB    R2,[SP, #+32]
        LDR      R1,[SP, #+28]
        B.N      ??AppS2wCmd_Nstat_7
// 5466           
// 5467         }
// 5468         /* display bssid,ssid,channel
// 5469          */
// 5470         else
// 5471         {
// 5472             S2w_Printf("BSSID=00:00:00:00:00:00   SSID=\"");
??AppS2wCmd_Nstat_3:
        ADR.W    R0,`?<Constant "BSSID=00:00:00:00:00:...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5473 
// 5474         S2w_Printf("\"");
        BL       ?Subroutine87
// 5475 
// 5476             S2w_Printf(" CHANNEL=NONE  ");
??CrossCallReturnLabel_473:
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5477         /* display security information
// 5478          */
// 5479 
// 5480             security ="NONE";
        STR      R4,[SP, #+28]
// 5481         S2w_Printf(" SECURITY=%s\r\nRSSI=%d\r\n", security,(signed char) statusInfo.rssi);
        ADD      R0,SP,#+84
        MOV      R1,R4
        LDRSB    R2,[R0, #+0]
??AppS2wCmd_Nstat_7:
        MOV      R0,R9
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5482         }
// 5483         /* display ip address,subnet,gateway  */
// 5484 
// 5485         if(statusInfo.wstate)
        LDR      R0,[R5, #+12]
        CBZ.N    R0,??AppS2wCmd_Nstat_8
// 5486            GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&statusInfo.nwParams);
        LDR      R0,[R6, #+0]
        ADD      R0,R0,#+5120
        ADD      R1,SP,#+104
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_IpConfigGet
        BL       GsnNwIf_IpConfigGet
// 5487          
// 5488         S2w_Printf("IP addr=%d.%d.%d.%d   SubNet=%d.%d.%d.%d ",(statusInfo.nwParams.ipv4.ipAddr& 0xff000000)>>24,(statusInfo.nwParams.ipv4.ipAddr& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.ipAddr & 0x0000ff00)>>8,
// 5489                     (statusInfo.nwParams.ipv4.ipAddr& 0x000000ff),
// 5490                     (statusInfo.nwParams.ipv4.subnetMask& 0xff000000)>>24,(statusInfo.nwParams.ipv4.subnetMask& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.subnetMask & 0x0000ff00)>>8,
// 5491                     (statusInfo.nwParams.ipv4.subnetMask& 0x000000ff));
??AppS2wCmd_Nstat_8:
        LDR      R1,[R5, #+36]
        LDR      R0,[R5, #+32]
        UXTB     R2,R1
        STR      R2,[SP, #+16]
        UBFX     R3,R0,#+8,#+8
        BL       ?Subroutine85
??CrossCallReturnLabel_466:
        ADR.W    R0,`?<Constant "IP addr=%d.%d.%d.%d  ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5492         S2w_Printf(" Gateway=%d.%d.%d.%d\r\n",(statusInfo.nwParams.ipv4.gatewayIpAddr& 0xff000000)>>24,(statusInfo.nwParams.ipv4.gatewayIpAddr& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.gatewayIpAddr & 0x0000ff00)>>8,
// 5493                     (statusInfo.nwParams.ipv4.gatewayIpAddr& 0x000000ff));
        LDR      R0,[R5, #+40]
        UXTB     R1,R0
        STR      R1,[SP, #+0]
        UBFX     R3,R0,#+8,#+8
        UBFX     R2,R0,#+16,#+8
        LSRS     R1,R0,#+24
        ADR.W    R0,`?<Constant " Gateway=%d.%d.%d.%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5494                 
// 5495           /* display Dns1, Dns2 address,Rx and Tx counts  */
// 5496         S2w_Printf("DNS1=%d.%d.%d.%d       DNS2=%d.%d.%d.%d\r\nRx Count=%d     Tx Count=%d \r\n",
// 5497                     (statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0xff000000)>>24,(statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0x00ff0000)>>16,(statusInfo.nwParams.ipv4.dnsPriSrvrIp & 0x0000ff00)>>8,
// 5498                     (statusInfo.nwParams.ipv4.dnsPriSrvrIp& 0x000000ff),(statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0xff000000)>>24,
// 5499                     (statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x00ff0000)>>16, (statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x0000ff00)>>8,(statusInfo.nwParams.ipv4.dnsSecSrvrIp& 0x000000ff),
// 5500                     s2wappMainTaskCtxt->if0.nwifCtx.pStats->totalPktsRcvd,
// 5501                     (s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent + \ 
// 5502 					 s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpRequestSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpResponseSent));
        LDR      R3,[R6, #+0]
        LDR      R0,[R5, #+52]
        LDR      R1,[R5, #+56]
        MOVW     R2,#+26332
        LDR      R2,[R2, R3]
        LDR      R3,[R2, #+16]
        LDR      R4,[R2, #+20]
        ADDS     R3,R4,R3
        LDR      R4,[R2, #+28]
        ADDS     R3,R4,R3
        LDR      R4,[R2, #+32]
        ADDS     R3,R4,R3
        STR      R3,[SP, #+24]
        UBFX     R3,R0,#+8,#+8
        LDR      R2,[R2, #+0]
        STR      R2,[SP, #+20]
        UXTB     R2,R1
        STR      R2,[SP, #+16]
        BL       ?Subroutine85
??CrossCallReturnLabel_467:
        ADR.W    R0,`?<Constant "DNS1=%d.%d.%d.%d     ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5503 #ifdef S2W_IPv6_SUPPORT
// 5504             AppS2wHdrAndIpv6_Print();
// 5505 #endif  // S2W_IPv6_SUPPORT
// 5506         return S2W_SUCCESS;        
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_Nstat_9
// 5507 
// 5508     }
// 5509 
// 5510     return S2W_EINVAL;
??AppS2wCmd_Nstat_0:
        MOVS     R0,#+2
??AppS2wCmd_Nstat_9:
        B.W      ?Subroutine1
          CFI EndBlock cfiBlock185
// 5511 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable409:
        DC32     `?<Constant "TLS_CA">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable409_1:
        DC32     `?<Constant "TLS_CLIENT">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable409_2:
        DC32     `?<Constant "TLS_KEY">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable409_3:
        DC8      "\"",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable409_4:
        DC32     s2wLinkState

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "NONE">`:
        DC8 "NONE"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\nMAC=%02x:%02x:%02x:%...">`:
        DC8 "\012MAC=%02x:%02x:%02x:%02x:%02x:%02x\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WSTATE=CONNECTED   ">`:
        DC8 "WSTATE=CONNECTED   "

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WSTATE=NOT CONNECTED  ">`:
        DC8 "WSTATE=NOT CONNECTED  "
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "  MODE=NONE \\r\\n">`:
        DC8 "  MODE=NONE \015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "  MODE=IBSS \\r\\n">`:
        DC8 "  MODE=IBSS \015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "  MODE=AP \\r\\n">`:
        DC8 "  MODE=AP \015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "  MODE=STA \\r\\n">`:
        DC8 "  MODE=STA \015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " SECURITY=%s\\r\\nRSSI=%d\\r\\n">`:
        DC8 " SECURITY=%s\015\012RSSI=%d\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " CHANNEL=NONE  ">`:
        DC8 " CHANNEL=NONE  "

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "BSSID=%02x:%02x:%02x:...">`:
        DC8 "BSSID=%02x:%02x:%02x:%02x:%02x:%02x   SSID=\""
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " CHANNEL=%d  ">`:
        DC8 " CHANNEL=%d  "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "BSSID=00:00:00:00:00:...">`:
        DC8 "BSSID=00:00:00:00:00:00   SSID=\""
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "IP addr=%d.%d.%d.%d  ...">`:
        DC8 "IP addr=%d.%d.%d.%d   SubNet=%d.%d.%d.%d "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " Gateway=%d.%d.%d.%d\\r\\n">`:
        DC8 " Gateway=%d.%d.%d.%d\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "DNS1=%d.%d.%d.%d     ...">`:
        DC8 44H, 4EH, 53H, 31H, 3DH, 25H, 64H, 2EH
        DC8 25H, 64H, 2EH, 25H, 64H, 2EH, 25H, 64H
        DC8 20H, 20H, 20H, 20H, 20H, 20H, 20H, 44H
        DC8 4EH, 53H, 32H, 3DH, 25H, 64H, 2EH, 25H
        DC8 64H, 2EH, 25H, 64H, 2EH, 25H, 64H, 0DH
        DC8 0AH, 52H, 78H, 20H, 43H, 6FH, 75H, 6EH
        DC8 74H, 3DH, 25H, 64H, 20H, 20H, 20H, 20H
        DC8 20H, 54H, 78H, 20H, 43H, 6FH, 75H, 6EH
        DC8 74H, 3DH, 25H, 64H, 20H, 0DH, 0AH, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond186 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_579
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond187 Using cfiCommon0
          CFI (cfiCond187) Function AppS2wCmd_Wassoc
          CFI (cfiCond187) Conditional ??CrossCallReturnLabel_578
          CFI (cfiCond187) R4 Frame(CFA, -36)
          CFI (cfiCond187) R5 Frame(CFA, -32)
          CFI (cfiCond187) R6 Frame(CFA, -28)
          CFI (cfiCond187) R7 Frame(CFA, -24)
          CFI (cfiCond187) R8 Frame(CFA, -20)
          CFI (cfiCond187) R9 Frame(CFA, -16)
          CFI (cfiCond187) R10 Frame(CFA, -12)
          CFI (cfiCond187) R11 Frame(CFA, -8)
          CFI (cfiCond187) R14 Frame(CFA, -4)
          CFI (cfiCond187) CFA R13+360
          CFI Block cfiCond188 Using cfiCommon0
          CFI (cfiCond188) Function AppS2wCmd_Wassoc
          CFI (cfiCond188) Conditional ??CrossCallReturnLabel_577
          CFI (cfiCond188) R4 Frame(CFA, -36)
          CFI (cfiCond188) R5 Frame(CFA, -32)
          CFI (cfiCond188) R6 Frame(CFA, -28)
          CFI (cfiCond188) R7 Frame(CFA, -24)
          CFI (cfiCond188) R8 Frame(CFA, -20)
          CFI (cfiCond188) R9 Frame(CFA, -16)
          CFI (cfiCond188) R10 Frame(CFA, -12)
          CFI (cfiCond188) R11 Frame(CFA, -8)
          CFI (cfiCond188) R14 Frame(CFA, -4)
          CFI (cfiCond188) CFA R13+360
          CFI Block cfiCond189 Using cfiCommon0
          CFI (cfiCond189) Function AppS2wCmd_Wassoc
          CFI (cfiCond189) Conditional ??CrossCallReturnLabel_576
          CFI (cfiCond189) R4 Frame(CFA, -36)
          CFI (cfiCond189) R5 Frame(CFA, -32)
          CFI (cfiCond189) R6 Frame(CFA, -28)
          CFI (cfiCond189) R7 Frame(CFA, -24)
          CFI (cfiCond189) R8 Frame(CFA, -20)
          CFI (cfiCond189) R9 Frame(CFA, -16)
          CFI (cfiCond189) R10 Frame(CFA, -12)
          CFI (cfiCond189) R11 Frame(CFA, -8)
          CFI (cfiCond189) R14 Frame(CFA, -4)
          CFI (cfiCond189) CFA R13+360
          CFI Block cfiCond190 Using cfiCommon0
          CFI (cfiCond190) Function AppS2wCmd_Nstat
          CFI (cfiCond190) Conditional ??CrossCallReturnLabel_575
          CFI (cfiCond190) R4 Frame(CFA, -28)
          CFI (cfiCond190) R5 Frame(CFA, -24)
          CFI (cfiCond190) R6 Frame(CFA, -20)
          CFI (cfiCond190) R7 Frame(CFA, -16)
          CFI (cfiCond190) R8 Frame(CFA, -12)
          CFI (cfiCond190) R9 Frame(CFA, -8)
          CFI (cfiCond190) R14 Frame(CFA, -4)
          CFI (cfiCond190) CFA R13+296
          CFI Block cfiCond191 Using cfiCommon0
          CFI (cfiCond191) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond191) Conditional ??CrossCallReturnLabel_574
          CFI (cfiCond191) R4 Frame(CFA, -36)
          CFI (cfiCond191) R5 Frame(CFA, -32)
          CFI (cfiCond191) R6 Frame(CFA, -28)
          CFI (cfiCond191) R7 Frame(CFA, -24)
          CFI (cfiCond191) R8 Frame(CFA, -20)
          CFI (cfiCond191) R9 Frame(CFA, -16)
          CFI (cfiCond191) R10 Frame(CFA, -12)
          CFI (cfiCond191) R11 Frame(CFA, -8)
          CFI (cfiCond191) R14 Frame(CFA, -4)
          CFI (cfiCond191) CFA R13+360
          CFI Block cfiCond192 Using cfiCommon0
          CFI (cfiCond192) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond192) Conditional ??CrossCallReturnLabel_573
          CFI (cfiCond192) R4 Frame(CFA, -36)
          CFI (cfiCond192) R5 Frame(CFA, -32)
          CFI (cfiCond192) R6 Frame(CFA, -28)
          CFI (cfiCond192) R7 Frame(CFA, -24)
          CFI (cfiCond192) R8 Frame(CFA, -20)
          CFI (cfiCond192) R9 Frame(CFA, -16)
          CFI (cfiCond192) R10 Frame(CFA, -12)
          CFI (cfiCond192) R11 Frame(CFA, -8)
          CFI (cfiCond192) R14 Frame(CFA, -4)
          CFI (cfiCond192) CFA R13+360
          CFI Block cfiCond193 Using cfiCommon0
          CFI (cfiCond193) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond193) Conditional ??CrossCallReturnLabel_572
          CFI (cfiCond193) R4 Frame(CFA, -36)
          CFI (cfiCond193) R5 Frame(CFA, -32)
          CFI (cfiCond193) R6 Frame(CFA, -28)
          CFI (cfiCond193) R7 Frame(CFA, -24)
          CFI (cfiCond193) R8 Frame(CFA, -20)
          CFI (cfiCond193) R9 Frame(CFA, -16)
          CFI (cfiCond193) R10 Frame(CFA, -12)
          CFI (cfiCond193) R11 Frame(CFA, -8)
          CFI (cfiCond193) R14 Frame(CFA, -4)
          CFI (cfiCond193) CFA R13+360
          CFI Block cfiCond194 Using cfiCommon0
          CFI (cfiCond194) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond194) Conditional ??CrossCallReturnLabel_571
          CFI (cfiCond194) R4 Frame(CFA, -36)
          CFI (cfiCond194) R5 Frame(CFA, -32)
          CFI (cfiCond194) R6 Frame(CFA, -28)
          CFI (cfiCond194) R7 Frame(CFA, -24)
          CFI (cfiCond194) R8 Frame(CFA, -20)
          CFI (cfiCond194) R9 Frame(CFA, -16)
          CFI (cfiCond194) R10 Frame(CFA, -12)
          CFI (cfiCond194) R11 Frame(CFA, -8)
          CFI (cfiCond194) R14 Frame(CFA, -4)
          CFI (cfiCond194) CFA R13+360
          CFI Block cfiPicker195 Using cfiCommon1
          CFI (cfiPicker195) NoFunction
          CFI (cfiPicker195) Picker
        THUMB
?Subroutine120:
        LDR      R0,[R6, #+0]
          CFI Block cfiCond196 Using cfiCommon0
          CFI (cfiCond196) Function AppS2w_ConctCbProcess
          CFI (cfiCond196) Conditional ??CrossCallReturnLabel_570
          CFI (cfiCond196) R4 Frame(CFA, -20)
          CFI (cfiCond196) R5 Frame(CFA, -16)
          CFI (cfiCond196) R6 Frame(CFA, -12)
          CFI (cfiCond196) R7 Frame(CFA, -8)
          CFI (cfiCond196) R14 Frame(CFA, -4)
          CFI (cfiCond196) CFA R13+24
??Subroutine120_0:
        ADD      R0,R0,#+3808
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Nstat GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_AssocStatusGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_AssocStatusGet
          CFI FunCall AppS2w_ConctCbProcess GsnWdd_AssocStatusGet
        B.W      GsnWdd_AssocStatusGet
          CFI EndBlock cfiCond186
          CFI EndBlock cfiCond187
          CFI EndBlock cfiCond188
          CFI EndBlock cfiCond189
          CFI EndBlock cfiCond190
          CFI EndBlock cfiCond191
          CFI EndBlock cfiCond192
          CFI EndBlock cfiCond193
          CFI EndBlock cfiCond194
          CFI EndBlock cfiPicker195
          CFI EndBlock cfiCond196

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond197 Using cfiCommon0
          CFI Function AppS2wCmd_Nstat
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_466
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+296
          CFI Block cfiCond198 Using cfiCommon0
          CFI (cfiCond198) Function AppS2wCmd_Nstat
          CFI (cfiCond198) NoCalls AppS2wCmd_Nstat
          CFI (cfiCond198) Conditional ??CrossCallReturnLabel_467
          CFI (cfiCond198) R4 Frame(CFA, -28)
          CFI (cfiCond198) R5 Frame(CFA, -24)
          CFI (cfiCond198) R6 Frame(CFA, -20)
          CFI (cfiCond198) R7 Frame(CFA, -16)
          CFI (cfiCond198) R8 Frame(CFA, -12)
          CFI (cfiCond198) R9 Frame(CFA, -8)
          CFI (cfiCond198) R14 Frame(CFA, -4)
          CFI (cfiCond198) CFA R13+296
          CFI Block cfiPicker199 Using cfiCommon1
          CFI (cfiPicker199) NoFunction
          CFI (cfiPicker199) NoCalls AppS2wCmd_Nstat
          CFI (cfiPicker199) Picker
        THUMB
?Subroutine85:
        UBFX     R2,R1,#+8,#+8
        STR      R2,[SP, #+12]
        UBFX     R2,R1,#+16,#+8
        LSRS     R1,R1,#+24
        STR      R1,[SP, #+4]
        STR      R2,[SP, #+8]
        UXTB     R1,R0
        STR      R1,[SP, #+0]
        UBFX     R2,R0,#+16,#+8
        LSRS     R1,R0,#+24
        BX       LR
          CFI EndBlock cfiCond197
          CFI EndBlock cfiCond198
          CFI EndBlock cfiPicker199
// 5512 #endif
// 5513 
// 5514 
// 5515 
// 5516 #ifdef S2W_UART_ENABLE
// 5517 /**
// 5518  ******************************************************************
// 5519  * @ingroup S2w-Application
// 5520  * @brief Process the AT&R Command.
// 5521  * @param ptr Pointer to the user input string.
// 5522  * @return status.
// 5523  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock200 Using cfiCommon0
          CFI Function AppS2wCmd_HardFlow
        THUMB
// 5524 PRIVATE UINT8
// 5525 AppS2wCmd_HardFlow(UINT8 *ptr)
// 5526 {
AppS2wCmd_HardFlow:
        PUSH     {R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 5527     UINT8 enable;
// 5528     UINT8 status;
// 5529     UINT8 oldflow;
// 5530 
// 5531     status = AppS2wParse_Boolean(ptr, &enable);
        BL       ?Subroutine60
??CrossCallReturnLabel_379:
        MOVS     R6,R0
// 5532     if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_HardFlow_0
// 5533     {
// 5534         return status;
// 5535     }
// 5536 
// 5537     oldflow = s2wCurrent.serialPortConf.conf.uart.hardflow;
        LDR.N    R4,??DataTable413_1
        LDR      R0,[R4, #+436]
// 5538     s2wCurrent.serialPortConf.conf.uart.hardflow = !!enable;
        LDRB     R1,[SP, #+0]
        UBFX     R5,R0,#+7,#+1
        CBZ.N    R1,??AppS2wCmd_HardFlow_1
        MOVS     R1,#+1
??AppS2wCmd_HardFlow_1:
        BIC      R0,R0,#0x80
        ORR      R0,R0,R1, LSL #+7
        STR      R0,[R4, #+436]
// 5539 
// 5540     if(s2wCurrent.serialPortConf.conf.uart.hardflow)
        UBFX     R0,R0,#+7,#+1
        CBZ.N    R0,??AppS2wCmd_HardFlow_2
// 5541     {
// 5542         GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AUART0_CTS_N);
        BL       ?Subroutine132
// 5543         GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AUART0_RTS_N);
??CrossCallReturnLabel_611:
        BL       ?Subroutine94
// 5544         GsnIoMux_PullDownDisable(25);		// uart rts. These together consume 125uA
??CrossCallReturnLabel_500:
        MOVS     R0,#+25
          CFI FunCall GsnIoMux_PullDownDisable
        BL       GsnIoMux_PullDownDisable
        B.N      ??AppS2wCmd_HardFlow_3
// 5545         //GsnIoMux_PullDownDisable(24);      // CTS
// 5546     }
// 5547     else
// 5548     {
// 5549         if(oldflow == GSN_UART_HW_SUPPORT)
??AppS2wCmd_HardFlow_2:
        CBZ.N    R5,??AppS2wCmd_HardFlow_3
// 5550         {
// 5551             GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AGPIO_24);
        MOVS     R1,#+0
        BL       ??Subroutine132_0
// 5552             GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AGPIO_25);
??CrossCallReturnLabel_609:
        MOVS     R1,#+0
        BL       ??Subroutine94_0
// 5553             GsnIoMux_PullDownEnable(25);
??CrossCallReturnLabel_498:
        MOVS     R0,#+25
          CFI FunCall GsnIoMux_PullDownEnable
        BL       GsnIoMux_PullDownEnable
// 5554         }
// 5555     }
// 5556 
// 5557     status = AppS2wHal_UartConfig(&s2wCurrent.serialPortConf);
??AppS2wCmd_HardFlow_3:
        ADD      R0,R4,#+432
          CFI FunCall AppS2wHal_UartConfig
        BL       AppS2wHal_UartConfig
        MOVS     R6,R0
// 5558 
// 5559     if (status != S2W_SUCCESS)
        BEQ.N    ??AppS2wCmd_HardFlow_0
// 5560     {
// 5561         if((s2wCurrent.serialPortConf.conf.uart.hardflow == GSN_UART_HW_SUPPORT) && (oldflow == GSN_UART_HW_NO_SUPPORT))
        LDR      R0,[R4, #+436]
        LSLS     R1,R0,#+24
        BPL.N    ??AppS2wCmd_HardFlow_4
        CBNZ.N   R5,??AppS2wCmd_HardFlow_4
// 5562         {
// 5563             GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AGPIO_24);
        MOVS     R1,#+0
        BL       ??Subroutine132_0
// 5564             GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AGPIO_25);
??CrossCallReturnLabel_608:
        MOVS     R1,#+0
        BL       ??Subroutine94_0
// 5565             GsnIoMux_PullDownEnable(25);
??CrossCallReturnLabel_497:
        MOVS     R0,#+25
          CFI FunCall GsnIoMux_PullDownEnable
        BL       GsnIoMux_PullDownEnable
        B.N      ??AppS2wCmd_HardFlow_5
// 5566         }
// 5567         else if((s2wCurrent.serialPortConf.conf.uart.hardflow == GSN_UART_HW_NO_SUPPORT) && (oldflow == GSN_UART_HW_SUPPORT))
??AppS2wCmd_HardFlow_4:
        LSLS     R0,R0,#+24
        BMI.N    ??AppS2wCmd_HardFlow_5
        CBZ.N    R5,??AppS2wCmd_HardFlow_5
// 5568         {
// 5569             GsnIoMux_Sel(24, GSN_IOMUX_GPIO_24_AUART0_CTS_N);
        BL       ?Subroutine132
// 5570             GsnIoMux_Sel(25, GSN_IOMUX_GPIO_25_AUART0_RTS_N);
??CrossCallReturnLabel_610:
        BL       ?Subroutine94
// 5571             GsnIoMux_PullDownDisable(25);
??CrossCallReturnLabel_499:
        MOVS     R0,#+25
          CFI FunCall GsnIoMux_PullDownDisable
        BL       GsnIoMux_PullDownDisable
// 5572         }
// 5573         s2wCurrent.serialPortConf.conf.uart.hardflow = oldflow;
??AppS2wCmd_HardFlow_5:
        LDR      R0,[R4, #+436]
        BIC      R0,R0,#0x80
        ORR      R0,R0,R5, LSL #+7
        STR      R0,[R4, #+436]
// 5574     }
// 5575 
// 5576     return status;
??AppS2wCmd_HardFlow_0:
        MOV      R0,R6
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock200
// 5577 
// 5578 
// 5579 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond201 Using cfiCommon0
          CFI Function AppS2wCmd_HardFlow
          CFI Conditional ??CrossCallReturnLabel_611
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond202 Using cfiCommon0
          CFI (cfiCond202) Function AppS2wCmd_HardFlow
          CFI (cfiCond202) Conditional ??CrossCallReturnLabel_610
          CFI (cfiCond202) R4 Frame(CFA, -16)
          CFI (cfiCond202) R5 Frame(CFA, -12)
          CFI (cfiCond202) R6 Frame(CFA, -8)
          CFI (cfiCond202) R14 Frame(CFA, -4)
          CFI (cfiCond202) CFA R13+24
          CFI Block cfiPicker203 Using cfiCommon1
          CFI (cfiPicker203) NoFunction
          CFI (cfiPicker203) Picker
        THUMB
?Subroutine132:
        MOVS     R1,#+3
          CFI Block cfiCond204 Using cfiCommon0
          CFI (cfiCond204) Function AppS2wCmd_HardFlow
          CFI (cfiCond204) Conditional ??CrossCallReturnLabel_609
          CFI (cfiCond204) R4 Frame(CFA, -16)
          CFI (cfiCond204) R5 Frame(CFA, -12)
          CFI (cfiCond204) R6 Frame(CFA, -8)
          CFI (cfiCond204) R14 Frame(CFA, -4)
          CFI (cfiCond204) CFA R13+24
          CFI Block cfiCond205 Using cfiCommon0
          CFI (cfiCond205) Function AppS2wCmd_HardFlow
          CFI (cfiCond205) Conditional ??CrossCallReturnLabel_608
          CFI (cfiCond205) R4 Frame(CFA, -16)
          CFI (cfiCond205) R5 Frame(CFA, -12)
          CFI (cfiCond205) R6 Frame(CFA, -8)
          CFI (cfiCond205) R14 Frame(CFA, -4)
          CFI (cfiCond205) CFA R13+24
??Subroutine132_0:
        MOVS     R0,#+24
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
        B.W      GsnIoMux_Sel
          CFI EndBlock cfiCond201
          CFI EndBlock cfiCond202
          CFI EndBlock cfiPicker203
          CFI EndBlock cfiCond204
          CFI EndBlock cfiCond205

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond206 Using cfiCommon0
          CFI Function AppS2wCmd_HardFlow
          CFI Conditional ??CrossCallReturnLabel_500
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond207 Using cfiCommon0
          CFI (cfiCond207) Function AppS2wCmd_HardFlow
          CFI (cfiCond207) Conditional ??CrossCallReturnLabel_499
          CFI (cfiCond207) R4 Frame(CFA, -16)
          CFI (cfiCond207) R5 Frame(CFA, -12)
          CFI (cfiCond207) R6 Frame(CFA, -8)
          CFI (cfiCond207) R14 Frame(CFA, -4)
          CFI (cfiCond207) CFA R13+24
          CFI Block cfiPicker208 Using cfiCommon1
          CFI (cfiPicker208) NoFunction
          CFI (cfiPicker208) Picker
        THUMB
?Subroutine94:
        MOVS     R1,#+3
          CFI Block cfiCond209 Using cfiCommon0
          CFI (cfiCond209) Function AppS2wCmd_HardFlow
          CFI (cfiCond209) Conditional ??CrossCallReturnLabel_498
          CFI (cfiCond209) R4 Frame(CFA, -16)
          CFI (cfiCond209) R5 Frame(CFA, -12)
          CFI (cfiCond209) R6 Frame(CFA, -8)
          CFI (cfiCond209) R14 Frame(CFA, -4)
          CFI (cfiCond209) CFA R13+24
          CFI Block cfiCond210 Using cfiCommon0
          CFI (cfiCond210) Function AppS2wCmd_HardFlow
          CFI (cfiCond210) Conditional ??CrossCallReturnLabel_497
          CFI (cfiCond210) R4 Frame(CFA, -16)
          CFI (cfiCond210) R5 Frame(CFA, -12)
          CFI (cfiCond210) R6 Frame(CFA, -8)
          CFI (cfiCond210) R14 Frame(CFA, -4)
          CFI (cfiCond210) CFA R13+24
??Subroutine94_0:
        MOVS     R0,#+25
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
          CFI FunCall AppS2wCmd_HardFlow GsnIoMux_Sel
        B.W      GsnIoMux_Sel
          CFI EndBlock cfiCond206
          CFI EndBlock cfiCond207
          CFI EndBlock cfiPicker208
          CFI EndBlock cfiCond209
          CFI EndBlock cfiCond210
// 5580 
// 5581 /**
// 5582  ******************************************************************
// 5583  * @ingroup S2w-Application
// 5584  * @brief Process the AT&K Command.
// 5585  * @param ptr Pointer to the user input string.
// 5586  * @return status.
// 5587  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock211 Using cfiCommon0
          CFI Function AppS2wCmd_SoftFlow
        THUMB
// 5588 UINT8
// 5589 AppS2wCmd_SoftFlow(UINT8 *ptr)
// 5590 {
AppS2wCmd_SoftFlow:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5591 
// 5592     UINT8 enable;
// 5593     UINT8 status = S2W_SUCCESS;
// 5594 
// 5595     status = AppS2wParse_Boolean(ptr, &enable);
        BL       ?Subroutine60
// 5596     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_378:
        CBNZ.N   R0,??AppS2wCmd_SoftFlow_0
// 5597     {
// 5598         return status;
// 5599     }
// 5600 
// 5601    s2wCurrent.serialPortConf.conf.uart.softflow = !!enable;
        LDRB     R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_SoftFlow_1
        MOVS     R0,#+1
??AppS2wCmd_SoftFlow_1:
        LDR.N    R1,??DataTable413_1
        LDR      R2,[R1, #+436]
        BIC      R2,R2,#0x40
        ORR      R0,R2,R0, LSL #+6
        STR      R0,[R1, #+436]
// 5602    GsnUart_SwFlowSupportSet(&s2wSerialPortHandle.uartHandle,(GSN_UART_SWFLOW_T)enable);
        LDRB     R1,[SP, #+0]
        LDR.W    R0,??DataTable417_3
          CFI FunCall GsnUart_SwFlowSupportSet
        BL       GsnUart_SwFlowSupportSet
// 5603    return status;
        MOVS     R0,#+0
??AppS2wCmd_SoftFlow_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock211
// 5604 
// 5605 
// 5606 }
// 5607 
// 5608 
// 5609 
// 5610 #endif
// 5611 /**
// 5612  ******************************************************************
// 5613  * @ingroup S2w-Application
// 5614  * @brief Process the ATVn Command.
// 5615  * @param ptr Pointer to the user input string.
// 5616  * @return status.
// 5617  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock212 Using cfiCommon0
          CFI Function AppS2wCmd_Verbose
        THUMB
// 5618 UINT8
// 5619 AppS2wCmd_Verbose(UINT8 *ptr)
// 5620 {
// 5621     return AppS2wParse_Boolean(ptr, &(s2wCurrent.serialPortConf.commonConf.verbose));
AppS2wCmd_Verbose:
        LDR.W    R1,??DataTable423
          CFI FunCall AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiBlock212
// 5622 }
// 5623 
// 5624 
// 5625 /**
// 5626  ******************************************************************
// 5627  * @ingroup S2w-Application
// 5628  * @brief Process the ATEn Command.
// 5629  * @param ptr Pointer to the user input string.
// 5630  * @return status.
// 5631  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock213 Using cfiCommon0
          CFI Function AppS2wCmd_Echo
        THUMB
// 5632 UINT8
// 5633 AppS2wCmd_Echo(UINT8 *ptr)
// 5634 {
// 5635    return AppS2wParse_Boolean(ptr,&(s2wCurrent.serialPortConf.commonConf.echo));
AppS2wCmd_Echo:
        LDR.W    R1,??DataTable417
          CFI FunCall AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiBlock213
// 5636 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413:
        DC32     0x41010018

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_1:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_2:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_3:
        DC32     globalUseHRssi

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_4:
        DC32     GratiousArpHandler

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_5:
        DC32     0xb0000206

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_6:
        DC32     s2wL2L3ConnectSemaphore

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_7:
        DC32     s2wappMainTaskNotifier

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_8:
        DC32     s2wIsAutoconnected

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable413_9:
        DC32     s2wFlashParams
// 5637 
// 5638 
// 5639 
// 5640 
// 5641 
// 5642 /**
// 5643  ******************************************************************
// 5644  * @ingroup S2w-Application
// 5645  * @brief Hex print function
// 5646  *   This function print the value in hex  passed.
// 5647  * @param data - IN  Pointer to the data
// 5648  * @param len - IN the length of the data .
// 5649  *
// 5650  * @return none.
// 5651  ******************************************************************/
// 5652 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock214 Using cfiCommon0
          CFI Function AppS2wHex_Print
        THUMB
// 5653 PUBLIC VOID
// 5654 AppS2wHex_Print(UINT8 *data, UINT32 len)
// 5655 {
AppS2wHex_Print:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOV      R4,R0
        MOV      R5,R1
// 5656     static const char hex_asc[] = "0123456789abcdef";
// 5657     UINT32 i;
// 5658 
// 5659     for (i = 0; i < len; i++)
        MOVS     R6,#+0
        ADR.W    R7,??hex_asc
        B.N      ??AppS2wHex_Print_0
// 5660     {
// 5661         S2w_PutChar(hex_asc[(data[i] & 0xf0) >> 4]);
??AppS2wHex_Print_1:
        LDRB     R0,[R6, R4]
        LSRS     R0,R0,#+4
        LDRB     R0,[R0, R7]
          CFI FunCall S2w_PutChar
        BL       S2w_PutChar
// 5662         S2w_PutChar(hex_asc[(data[i] & 0x0f)]);
        LDRB     R0,[R6, R4]
        AND      R0,R0,#0xF
        LDRB     R0,[R0, R7]
          CFI FunCall S2w_PutChar
        BL       S2w_PutChar
// 5663     }
        ADDS     R6,R6,#+1
??AppS2wHex_Print_0:
        CMP      R6,R5
        BCC.N    ??AppS2wHex_Print_1
// 5664 
// 5665 }
        POP      {R0,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock214

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??hex_asc:
        DC8 "0123456789abcdef"
        DC8 0, 0, 0
// 5666 
// 5667 
// 5668 /**
// 5669  ******************************************************************
// 5670  * @ingroup S2w-Application
// 5671  * @brief Process the AT+VER command
// 5672  * @param ptr Pointer to the user input string.
// 5673  * @return status.
// 5674  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock215 Using cfiCommon0
          CFI Function App2wCmd_Version
        THUMB
// 5675 PUBLIC UINT8
// 5676 App2wCmd_Version(UINT8* ptr)
// 5677 {
App2wCmd_Version:
        PUSH     {R0-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+32
        MOV      R5,R0
// 5678     UINT32 wlanVer=0;
        MOVS     R0,#+0
// 5679     ULONG64 featurebmap = 0;
        STRD     R0,R0,[SP, #+8]
        STR      R0,[SP, #+4]
// 5680     UINT8 status = S2W_EINVAL;
        MOVS     R4,#+2
// 5681 	UINT32 pltVersion;
// 5682 
// 5683     if (ptr[0] == '?' && ( ptr[1] == '\0') || (ptr[1] == '?'))
        LDRB     R1,[R5, #+0]
        LDRB     R0,[R5, #+1]
        CMP      R1,#+63
        ITE      EQ 
        CMPEQ    R0,#+0
        CMPNE    R0,#+63
        BNE.N    ??App2wCmd_Version_0
// 5684     {
// 5685         pltVersion = GsnVersion_Get();
          CFI FunCall GsnVersion_Get
        BL       GsnVersion_Get
// 5686         status = GsnSysCtl_WlanFwVerGet(&s2wappMainTaskCtxt->sysCtlCtx,&wlanVer);
        LDR.W    R4,??DataTable423_1
        MOV      R6,R0
        LDR      R0,[R4, #+0]
        ADD      R1,SP,#+4
        ADD      R0,R0,#+1352
          CFI FunCall GsnSysCtl_WlanFwVerGet
        BL       GsnSysCtl_WlanFwVerGet
// 5687 
// 5688         status = GsnSysCtl_WlanFeatureBmapGet(&s2wappMainTaskCtxt->sysCtlCtx,&featurebmap);
        LDR      R0,[R4, #+0]
        ADD      R1,SP,#+8
        ADD      R0,R0,#+1352
          CFI FunCall GsnSysCtl_WlanFeatureBmapGet
        BL       GsnSysCtl_WlanFeatureBmapGet
        MOV      R4,R0
// 5689 
// 5690 #ifndef S2W_IP2WIFI_SUPPORT
// 5691         S2w_Printf("\r\nS2W APP VERSION=%s\r\nS2W GEPS VERSION=%d.%d.%d",
// 5692                     S2W_SW_VERSION,(pltVersion >>24),
// 5693                ((pltVersion >>16) & 0xff),((pltVersion>>8) & 0xff));
        UBFX     R0,R6,#+8,#+8
        STR      R0,[SP, #+0]
        UBFX     R3,R6,#+16,#+8
        LSRS     R2,R6,#+24
        LDR.W    R1,??DataTable424
        ADR.W    R0,`?<Constant "\\r\\nS2W APP VERSION=%s\\r...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5694 
// 5695         S2w_Printf("\r\nS2W WLAN VERSION=%d.%d.%d\r\n",((wlanVer >> 24) & 0xff),
// 5696                      ((wlanVer >>16) & 0xff),((wlanVer>> 8 ) & 0xff));
        BL       ?Subroutine103
// 5697 #else
// 5698         S2w_Printf("\r\nIP2WIFI APP VERSION=%s\r\nIP2WIFI GEPS VERSION=%d.%d.%d",
// 5699                     S2W_SW_VERSION,(pltVersion >>24),
// 5700                     ((pltVersion >>16) & 0xff),((pltVersion>>8) & 0xff));
// 5701 
// 5702         S2w_Printf("\r\nIP2WIFI WLAN VERSION=%d.%d.%d\r\n",((wlanVer >> 24) & 0xff),
// 5703                      ((wlanVer >>16) & 0xff),((wlanVer>> 8 ) & 0xff));
// 5704         status = S2W_SUCCESS;
// 5705 #endif
// 5706     }
??CrossCallReturnLabel_524:
        ADR.W    R0,`?<Constant "\\r\\nS2W WLAN VERSION=%d...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5707 
// 5708     if((ptr[0] == '?') && (ptr[1] == '?') && (ptr[2] == '\0'))
??App2wCmd_Version_0:
        LDRB     R0,[R5, #+0]
        CMP      R0,#+63
        ITTTT    EQ 
        LDRBEQ   R0,[R5, #+1]
        CMPEQ    R0,#+63
        LDRBEQ   R0,[R5, #+2]
        CMPEQ    R0,#+0
        BNE.W    ??App2wCmd_Version_1
// 5709     {
// 5710 #ifndef S2W_IP2WIFI_SUPPORT
// 5711         S2w_Printf("S2W BIN TYPE=%s\r\nS2W RELEASE TYPE=%s\r\n",
// 5712                    S2W_BIN_TYPE,S2W_RELEASE_TYPE);
        ADR.N    R2,??DataTable415  ;; 0x47, 0x41, 0x00, 0x00
        ADR.W    R1,`?<Constant "GS2K_DEFAULT">`
        ADR.W    R0,`?<Constant "S2W BIN TYPE=%s\\r\\nS2W ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5713 #else
// 5714         S2w_Printf("IP2WIFI BIN TYPE=%s\r\nIP2WIFI RELEASE TYPE=%s\r\n",
// 5715                    S2W_BIN_TYPE,S2W_RELEASE_TYPE);
// 5716 #endif
// 5717         S2w_Printf("BUILD TIME=%s\r\n",__TIME__);
        ADR.W    R1,`?<Constant "15:13:02">`
        ADR.W    R0,`?<Constant "BUILD TIME=%s\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5718         S2w_Printf("BUILD DATE=%s\r\n",__DATE__);
        ADR.W    R1,`?<Constant "Nov 19 2015">`
        ADR.W    R0,`?<Constant "BUILD DATE=%s\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5719         S2w_Printf("WLAN EXT VERSION=%d\r\n",((wlanVer) & 0xff));
        LDR      R0,[SP, #+4]
        UXTB     R1,R0
        ADR.W    R0,`?<Constant "WLAN EXT VERSION=%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5720 
// 5721 #ifndef S2W_IP2WIFI_SUPPORT
// 5722         S2w_Printf("S2W APP EXT VERSION=%s\r\n",S2W_SW_EXT_VERSION);
        ADR.W    R0,`?<Constant "S2W APP EXT VERSION=%s\\r\\n">`
        ADR.N    R1,??DataTable415_1  ;; 0x31, 0x30, 0x00, 0x00
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5723 #else
// 5724         S2w_Printf("IP2WIFI APP EXT VERSION=%s\r\n",S2W_SW_EXT_VERSION);
// 5725 #endif
// 5726         S2w_Printf("WLAN FEAT BMAP=%016llx\r\n",featurebmap);
        LDRD     R2,R3,[SP, #+8]
        ADR.W    R0,`?<Constant "WLAN FEAT BMAP=%016llx\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5727         S2w_Printf("GEPS EXT VERSION=%d\r\n",(pltVersion&0xff));
        ADR.W    R0,`?<Constant "GEPS EXT VERSION=%d\\r\\n">`
        UXTB     R1,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5728         // get the flash connected details
// 5729         {
// 5730 			UINT32 flashId = 0;
// 5731 			UINT8* des=NULL;
// 5732 			/* request PIO control */
// 5733             GsnFlashIf_PioReq();
        LDR.W    R5,??DataTable424_1  ;; 0x400e0408
        MOVS     R0,#+1
        STR      R0,[R5, #+8]
??App2wCmd_Version_2:
        LDR      R0,[R5, #+12]
        LSLS     R0,R0,#+31
        BPL.N    ??App2wCmd_Version_2
// 5734             flashId = GsnFlashIf_FlashIdRead() & 0xFFFF;
        MOVS     R0,#+2
          CFI FunCall GsnFlashIf_PioTxFifoWrite
        BL       GsnFlashIf_PioTxFifoWrite
        MOVS     R0,#+3
          CFI FunCall GsnFlashIf_PioTxFifoWrite
        BL       GsnFlashIf_PioTxFifoWrite
        MOVS     R0,#+159
          CFI FunCall GsnFlashIf_PioTxFifoWrite
        BL       GsnFlashIf_PioTxFifoWrite
        LDR.W    R0,??DataTable424_2  ;; 0x400e0004
??App2wCmd_Version_3:
        LDR      R1,[R0, #+0]
        UBFX     R1,R1,#+2,#+1
        CMP      R1,#+0
        BNE.N    ??App2wCmd_Version_3
        LDR      R0,[R5, #+0]
        UXTH     R6,R0
// 5735             if(flashId ==0x0000)
        CBNZ.N   R6,??App2wCmd_Version_4
// 5736             {
// 5737 				S2w_Printf("No Flash");
        ADR.W    R0,`?<Constant "No Flash">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??App2wCmd_Version_5
// 5738 			}
// 5739 			else
// 5740 			{
// 5741 				S2w_Printf("FLASH ID=0x%08x",flashId);
??App2wCmd_Version_4:
        MOV      R1,R6
        ADR.W    R0,`?<Constant "FLASH ID=0x%08x">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5742 				switch(flashId)
        MOVW     R0,#+5404
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_6
        MOVW     R0,#+8386
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_7
        MOVW     R0,#+9410
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_8
        MOVW     R0,#+9666
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_7
        MOVW     R0,#+12316
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_9
        MOVW     R0,#+16584
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_10
        MOVW     R0,#+24776
        CMP      R6,R0
        BEQ.N    ??App2wCmd_Version_11
        B.N      ??App2wCmd_Version_12
// 5743 				{
// 5744 					case 0x20c2:
// 5745 					   des = "MICRONIX-4MB";
// 5746 					break;
// 5747 					case 0x24c2:
// 5748 					   des = "MICRONIX-2MB";
??App2wCmd_Version_8:
        ADR.W    R1,`?<Constant "MICRONIX-2MB">`
// 5749 					break;
        B.N      ??App2wCmd_Version_13
// 5750 					case 0x25c2:
// 5751 					   des = "MICRONIX-4MB";
??App2wCmd_Version_7:
        ADR.W    R1,`?<Constant "MICRONIX-4MB">`
// 5752 					break;
        B.N      ??App2wCmd_Version_13
// 5753 					case 0x60c8:
// 5754 					   des = "GIGA-4MB";
??App2wCmd_Version_11:
        ADR.W    R1,`?<Constant "GIGA-4MB">`
// 5755 					break;
        B.N      ??App2wCmd_Version_13
// 5756 					case 0x40c8:
// 5757 					   des = "GIGA-2MB";
??App2wCmd_Version_10:
        ADR.W    R1,`?<Constant "GIGA-2MB">`
// 5758 					break;
        B.N      ??App2wCmd_Version_13
// 5759 					case 0x151c:
// 5760 					   des = "EON-2MB";
??App2wCmd_Version_6:
        ADR.W    R1,`?<Constant "EON-2MB">`
// 5761 					break;
        B.N      ??App2wCmd_Version_13
// 5762 					case 0x301c:
// 5763 					   des = "EON-4MB";
??App2wCmd_Version_9:
        ADR.W    R1,`?<Constant "EON-4MB">`
// 5764 					break;
        B.N      ??App2wCmd_Version_13
// 5765 					default:
// 5766 					   des = "UNKNOWN";
??App2wCmd_Version_12:
        ADR.W    R1,`?<Constant "UNKNOWN">`
// 5767 					break;
// 5768 
// 5769 				}
// 5770 				S2w_Printf(":%s",des);
??App2wCmd_Version_13:
        ADR.N    R0,??DataTable416_1  ;; ":%s"
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5771 			}
// 5772 			/* release PIO control */
// 5773 			GsnFlashIf_PioRelease();
??App2wCmd_Version_5:
        MOVS     R0,#+0
        STR      R0,[R5, #+8]
??App2wCmd_Version_14:
        LDR      R0,[R5, #+12]
        LSLS     R0,R0,#+31
        BMI.N    ??App2wCmd_Version_14
// 5774 
// 5775 
// 5776 		}
// 5777 	}
// 5778     return status;
??App2wCmd_Version_1:
        UXTB     R0,R4
        ADD      SP,SP,#+16
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock215
// 5779 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable414:
        DC32     `?<Constant "%s%2.2x%2.2x%2.2x">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nS2W APP VERSION=%s\\r...">`:
        DC8 "\015\012S2W APP VERSION=%s\015\012S2W GEPS VERSION=%d.%d.%d"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nS2W WLAN VERSION=%d...">`:
        DC8 "\015\012S2W WLAN VERSION=%d.%d.%d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GS2K_DEFAULT">`:
        DC8 "GS2K_DEFAULT"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "S2W BIN TYPE=%s\\r\\nS2W ...">`:
        DC8 "S2W BIN TYPE=%s\015\012S2W RELEASE TYPE=%s\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "15:13:02">`:
        DC8 "15:13:02"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "BUILD TIME=%s\\r\\n">`:
        DC8 "BUILD TIME=%s\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "Nov 19 2015">`:
        DC8 "Nov 19 2015"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "BUILD DATE=%s\\r\\n">`:
        DC8 "BUILD DATE=%s\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WLAN EXT VERSION=%d\\r\\n">`:
        DC8 "WLAN EXT VERSION=%d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "S2W APP EXT VERSION=%s\\r\\n">`:
        DC8 "S2W APP EXT VERSION=%s\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "WLAN FEAT BMAP=%016llx\\r\\n">`:
        DC8 "WLAN FEAT BMAP=%016llx\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GEPS EXT VERSION=%d\\r\\n">`:
        DC8 "GEPS EXT VERSION=%d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "No Flash">`:
        DC8 "No Flash"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "FLASH ID=0x%08x">`:
        DC8 "FLASH ID=0x%08x"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "MICRONIX-2MB">`:
        DC8 "MICRONIX-2MB"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "MICRONIX-4MB">`:
        DC8 "MICRONIX-4MB"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GIGA-4MB">`:
        DC8 "GIGA-4MB"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GIGA-2MB">`:
        DC8 "GIGA-2MB"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "EON-2MB">`:
        DC8 "EON-2MB"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "EON-4MB">`:
        DC8 "EON-4MB"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "UNKNOWN">`:
        DC8 "UNKNOWN"
// 5780 
// 5781 /**
// 5782  ******************************************************************
// 5783  * @ingroup S2w-Application
// 5784  * @brief Process the AT+RESET command
// 5785  * @param ptr Pointer to the user input string.
// 5786  * @return status.
// 5787  ******************************************************************/
// 5788 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock216 Using cfiCommon0
          CFI Function AppS2wCmd_reset
        THUMB
// 5789 UINT8
// 5790 AppS2wCmd_reset(UINT8* ptr)
// 5791 {
AppS2wCmd_reset:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5792 	// make sure spi-Dma gpio goes low
// 5793 	if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
        BL       ?Subroutine128
??CrossCallReturnLabel_599:
        MOVW     R0,#+27384
        LDRB     R0,[R0, R1]
        CMP      R0,#+2
        BNE.N    ??AppS2wCmd_reset_0
// 5794 	{
// 5795 	    GsnGpio_OutClear(s2wSerialPortHandle.spiFsHandle.spi.spiGpioBitMap);
        LDR.N    R2,??DataTable417_3
        LDRD     R0,R1,[R2, #+232]
          CFI FunCall GsnGpio_OutClear
        BL       GsnGpio_OutClear
// 5796 	}
// 5797     GsnSys_Reset(GSN_RESET_REASON_APP_ASSERT);
??AppS2wCmd_reset_0:
        MOVS     R0,#+2
          CFI EndBlock cfiBlock216
        REQUIRE ?Subroutine2
        ;; // Fall through to label ?Subroutine2
// 5798     return S2W_SUCCESS;
// 5799 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock217 Using cfiCommon0
          CFI NoFunction
          CFI CFA R13+8
          CFI R14 Frame(CFA, -4)
          CFI FunCall AppS2wCmd_reset GsnSys_Reset
          CFI FunCall AppS2wCmd_OtaFwupRollBack GsnSys_Reset
        THUMB
?Subroutine2:
        BL       GsnSys_Reset
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock217
// 5800 
// 5801 /**
// 5802  ******************************************************************
// 5803  * @ingroup S2w-Application
// 5804  * @brief Process the AT+apconf command
// 5805  * @param ptr Pointer to the user input string.
// 5806  * @return status.
// 5807  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock218 Using cfiCommon0
          CFI Function AppS2wCmd_ApConf
          CFI NoCalls
        THUMB
// 5808 UINT8
// 5809 AppS2wCmd_ApConf(UINT8* ptr)
// 5810 {
AppS2wCmd_ApConf:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5811     UINT8 status;
// 5812     BOOL init=0;
        BL       ?Subroutine21
// 5813     status = AppS2wParse_Boolean(ptr, &init);
// 5814     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_47:
        CBZ.N    R0,??AppS2wCmd_ApConf_0
// 5815     {
// 5816         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,PC}
// 5817     }
// 5818     s2wappMainTaskCtxt->apConf = init;
??AppS2wCmd_ApConf_0:
        LDR.W    R0,??DataTable423_1
        LDR      R0,[R0, #+0]
        LDRB     R1,[SP, #+0]
        ADD      R0,R0,#+30336
        STRB     R1,[R0, #+0]
// 5819     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock218
// 5820 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable415:
        DC8      0x47, 0x41, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable415_1:
        DC8      0x31, 0x30, 0x00, 0x00
// 5821 /**
// 5822  ******************************************************************
// 5823  * @ingroup S2w-Application
// 5824  * @brief Process the AT+WSYNCINTRL command
// 5825  * This function validate the input parameter passed and set the
// 5826  * syncloss interval as the value passed. The paramter value in number
// 5827  * beacons.
// 5828  * @param ptr Pointer to the user input string.
// 5829  * @return status.
// 5830  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock219 Using cfiCommon0
          CFI Function S2w_CmdSyncLossIntrvlSet
        THUMB
// 5831 UINT8
// 5832 S2w_CmdSyncLossIntrvlSet(UINT8 *ptr)
// 5833 {
S2w_CmdSyncLossIntrvlSet:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5834     UINT32 interval;
// 5835     UINT8 status = S2W_EINVAL;
// 5836 
// 5837     status = AppS2wParse_Int(ptr, &interval);
        BL       ?Subroutine51
// 5838     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_299:
        CBNZ.N   R0,??S2w_CmdSyncLossIntrvlSet_0
// 5839     {
// 5840         return status;
// 5841     }
// 5842     if((interval < 1) || (interval > 65535))
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??S2w_CmdSyncLossIntrvlSet_1
        CMP      R0,#+65536
        BCC.N    ??S2w_CmdSyncLossIntrvlSet_2
// 5843     {
// 5844         return S2W_EINVAL;
??S2w_CmdSyncLossIntrvlSet_1:
        MOVS     R0,#+2
        POP      {R1,PC}
// 5845     }
// 5846     status = AppS2wHal_SyncLossIntrvlSet(interval);
// 5847 
// 5848     return status;
??S2w_CmdSyncLossIntrvlSet_2:
          CFI FunCall AppS2wHal_SyncLossIntrvlSet
        BL       AppS2wHal_SyncLossIntrvlSet
??S2w_CmdSyncLossIntrvlSet_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock219
// 5849 }
// 5850 
// 5851 
// 5852 
// 5853 /**
// 5854  ******************************************************************
// 5855  * @ingroup S2w-Application
// 5856  * @brief Process the AT+NCLOSEALL Command.
// 5857  *   This function call the hal function to close all the tcp/udp socket
// 5858  *   opened.
// 5859  * @param ptr Pointer to the user input string.
// 5860  * @return S2W_SUCCESS - operation successful.
// 5861  * @retval S2W_FAILURE - operation failure.
// 5862  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock220 Using cfiCommon0
          CFI Function AppS2wCmd_Ncloseall
        THUMB
// 5863 PUBLIC UINT8
// 5864 AppS2wCmd_Ncloseall(UINT8 *ptr)
// 5865 {
// 5866     /* call the hal function which close all the tcp/udp sockets
// 5867      */
// 5868     if (*ptr)
AppS2wCmd_Ncloseall:
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        IT       EQ 
          CFI FunCall AppS2wHal_NetCloseAll
        BEQ.W    AppS2wHal_NetCloseAll
// 5869         return S2W_EINVAL;
        MOVS     R0,#+2
        BX       LR
          CFI EndBlock cfiBlock220
// 5870     else
// 5871         return AppS2wHal_NetCloseAll(0);
// 5872 }
// 5873 
// 5874 
// 5875 /**
// 5876  ******************************************************************
// 5877  * @ingroup S2w-Application
// 5878  * @brief Process the AT+NCLOSE Command.
// 5879  * @param ptr Pointer to the user input string.
// 5880  *
// 5881  * @return S2W_SUCCESS - operation successful.
// 5882  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5883  * @retval S2W_FAILURE - operation failure-socket close failed.
// 5884  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock221 Using cfiCommon0
          CFI Function AppS2wCmd_Nclose
        THUMB
// 5885 PUBLIC UINT8
// 5886 AppS2wCmd_Nclose(UINT8 *ptr)
// 5887 {
AppS2wCmd_Nclose:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5888     UINT8 status;
// 5889     UINT32 cid;
// 5890 
// 5891     /* parse the parameter-cid
// 5892      */
// 5893     status = AppS2wParse_Hex(ptr, &cid);
        ADD      R1,SP,#+0
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
// 5894     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Nclose_0
// 5895     {
// 5896         return status;
// 5897     }
// 5898     /* call the hal function to close a particular cid created
// 5899      */
// 5900     return AppS2wHal_NetClose(cid);
        LDR      R0,[SP, #+0]
        UXTB     R0,R0
          CFI FunCall AppS2wHal_NetClose
        BL       AppS2wHal_NetClose
??AppS2wCmd_Nclose_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock221
// 5901 }
// 5902 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock222 Using cfiCommon0
          CFI Function AppS2wSecurity_Display
        THUMB
// 5903 VOID
// 5904 AppS2wSecurity_Display(S2W_SECURITY_T *sec)
// 5905 {
AppS2wSecurity_Display:
        PUSH     {R3-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        MOV      R4,R0
// 5906     INT32 i;
// 5907 
// 5908     S2w_Printf("+WAUTH=%d +WWPA=\"%s\"", sec->authMode,
// 5909            sec->wpa.wpaPassPhrase);
        ADD      R2,R4,#+59
        LDRB     R1,[R4, #+0]
        ADR.W    R0,`?<Constant "+WAUTH=%d +WWPA=\\"%s\\"">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5910     S2w_Printf("+PSK-valid=%d +SSID=%s",sec->wpa.pskValid,sec->wpa.ssid);
        LDRB     R1,[R4, #+124]
        ADR.W    R0,`?<Constant "+PSK-valid=%d +SSID=%s">`
        ADD      R2,R4,#+157
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5911     for (i = 0; i < 4; i++)
        MOVS     R5,#+0
        ADR.W    R8,`?<Constant "%s+WWEP%d=">`
        ADR.N    R6,??DataTable417_1  ;; " "
        ADR.N    R7,??DataTable417_2  ;; 0x0D, 0x0A, 0x00, 0x00
// 5912     {
// 5913         S2w_Printf("%s+WWEP%d=", !(i & 1) ? "\r\n" : " ", i + 1);
??AppS2wSecurity_Display_0:
        LSLS     R0,R5,#+31
        ITE      PL 
        MOVPL    R1,R7
        MOVMI    R1,R6
        ADD      R9,R5,#+1
        MOV      R2,R9
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5914         AppS2wHex_Print(sec->wep.key[i], sec->wep.keyLen[i]);
        ADDS     R0,R5,R4
        LDRB     R1,[R0, #+3]
        MOVS     R0,#+13
        MLA      R0,R0,R5,R4
        ADDS     R0,R0,#+7
          CFI FunCall AppS2wHex_Print
        BL       AppS2wHex_Print
// 5915     }
        MOV      R5,R9
        CMP      R5,#+4
        BLT.N    ??AppS2wSecurity_Display_0
// 5916 
// 5917 }
        POP      {R0,R4-R9,PC}    ;; return
          CFI EndBlock cfiBlock222

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable416:
        DC32     0xc0000203

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable416_1:
        DC8      ":%s"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+WAUTH=%d +WWPA=\\"%s\\"">`:
        DC8 "+WAUTH=%d +WWPA=\"%s\""
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+PSK-valid=%d +SSID=%s">`:
        DC8 "+PSK-valid=%d +SSID=%s"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%s+WWEP%d=">`:
        DC8 "%s+WWEP%d="
        DC8 0
// 5918 
// 5919 
// 5920 /**
// 5921  ******************************************************************
// 5922  * @ingroup S2w-Application
// 5923  * @brief Ip address print function
// 5924  *   This function display Ip address passed.
// 5925  * @param ip - IN ptr Pointer to the user input ip string.
// 5926  *
// 5927  * @return none.
// 5928  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock223 Using cfiCommon0
          CFI Function AppS2wIp_Print
        THUMB
// 5929 PUBLIC VOID
// 5930 AppS2wIp_Print(S2W_IPADDR_T ip)
// 5931 {
AppS2wIp_Print:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 5932     S2w_Printf("%d.%d.%d.%d", ip[3], ip[2], ip[1], ip[0]);
        LDRB     R1,[R0, #+0]
        STR      R1,[SP, #+0]
        LDRB     R3,[R0, #+1]
        LDRB     R2,[R0, #+2]
        LDRB     R1,[R0, #+3]
        ADR.W    R0,`?<Constant "%d.%d.%d.%d">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5933 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock223

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%d.%d.%d.%d">`:
        DC8 "%d.%d.%d.%d"
// 5934 
// 5935 /**
// 5936  ******************************************************************
// 5937  * @ingroup S2w-Application
// 5938  * @brief profile display function.
// 5939  *   This function dispaly active and stored profile parameters.
// 5940  * @param profile of the profile to display
// 5941 
// 5942  * @return S2W_SUCCESS - operation successful.
// 5943  * @retval S2W_EINVAL  - operation failure-invalid command.
// 5944  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock224 Using cfiCommon0
          CFI Function AppS2wProfile_Display
        THUMB
// 5945 PUBLIC VOID
// 5946 AppS2wProfile_Display(S2W_PROFILE_T *profile)
// 5947 {
AppS2wProfile_Display:
        PUSH     {R0-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+32
// 5948 #ifndef S2W_IP2WIFI_SUPPORT
// 5949     UINT8 vBuff[4]={"\","};
        ADR.W    R1,`?<Constant "\\",">`
        LDR      R2,[R1, #0]
        MOV      R4,R0
        ADD      R0,SP,#+12
        STR      R2,[R0, #+0]
// 5950 #endif
// 5951 #ifdef S2W_UART_ENABLE
// 5952     INT8 c;
// 5953 #endif
// 5954     if (profile == &s2wCurrent)
        LDR.W    R0,??DataTable430_1
        CMP      R4,R0
        BNE.N    ??AppS2wProfile_Display_0
// 5955     {
// 5956         /* C and Y are common settings */
// 5957         S2w_Printf("C%d " "&Y%d ",
// 5958                 profile_params.autoConnect,
// 5959                 profile_params.defaultProfile);
        LDR.N    R0,??DataTable417_4
        LDRB     R2,[R0, #+5]
        LDRB     R1,[R0, #+4]
        ADR.W    R0,`?<Constant "C%d &Y%d ">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5960     }
// 5961 
// 5962 #if  0  //GSN_FS_SPI_ENABLE
// 5963 if(APP_S2W_GET_SERIAL_DEVICE_ID())
// 5964 {//S2W_PORT_SPI
// 5965 
// 5966 /* Dispaly SPI configurations
// 5967     */
// 5968    S2w_Printf("E%d V%d",
// 5969          profile->serialPortConf.commonConf.echo,
// 5970          profile->serialPortConf.commonConf.verbose);
// 5971 
// 5972    S2w_Printf(" &K%d CPL%d CPH%d\r\n",
// 5973          profile->serialPortConf.conf.spi.flowCtrl,
// 5974          profile->serialPortConf.conf.spi.clockPolarity,
// 5975          profile->serialPortConf.conf.spi.clockPhase);
// 5976 
// 5977 }else
// 5978 #endif
// 5979 {
// 5980 
// 5981 #ifdef S2W_UART_ENABLE
// 5982     /* Dispaly uart configurations
// 5983       */
// 5984     S2w_Printf("E%d V%d B=%u,%d,",
// 5985             profile->serialPortConf.commonConf.echo,
// 5986             profile->serialPortConf.commonConf.verbose,
// 5987             profile->serialPortConf.conf.uart.baudrate, profile->serialPortConf.conf.uart.bits + 5);
??AppS2wProfile_Display_0:
        ADD      R5,R4,#+432
        LDRB     R0,[R5, #+4]
        AND      R0,R0,#0x3
        ADDS     R0,R0,#+5
        STR      R0,[SP, #+0]
        LDR      R3,[R5, #+8]
        LDRB     R2,[R5, #+1]
        LDRB     R1,[R4, #+432]
        ADR.W    R0,`?<Constant "E%d V%d B=%u,%d,">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 5988 
// 5989     switch (profile->serialPortConf.conf.uart.parity)
        LDR      R0,[R5, #+4]
        LSRS     R1,R0,#+3
        AND      R1,R1,#0x7
        CMP      R1,#+1
        BEQ.N    ??AppS2wProfile_Display_1
        CMP      R1,#+2
        BEQ.N    ??AppS2wProfile_Display_2
        B.N      ??AppS2wProfile_Display_3
// 5990     {
// 5991         case S2W_UARTCONF_PARITY_ODD:
// 5992         c = 'O';
??AppS2wProfile_Display_1:
        MOVS     R1,#+79
// 5993         break;
        B.N      ??AppS2wProfile_Display_4
// 5994 
// 5995        case S2W_UARTCONF_PARITY_EVEN:
// 5996         c = 'E';
??AppS2wProfile_Display_2:
        MOVS     R1,#+69
// 5997         break;
        B.N      ??AppS2wProfile_Display_4
// 5998 
// 5999         default:
// 6000         c = 'N';
??AppS2wProfile_Display_3:
        MOVS     R1,#+78
// 6001     }
// 6002 
// 6003     S2w_Printf("%c,%d", c,
// 6004            profile->serialPortConf.conf.uart.stop == S2W_UARTCONF_STOP_2 ? 2 : 1);
??AppS2wProfile_Display_4:
        UBFX     R0,R0,#+2,#+1
        CMP      R0,#+0
        ITE      NE 
        MOVNE    R2,#+2
        MOVEQ    R2,#+1
        ADR.W    R0,`?<Constant "%c,%d">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6005 
// 6006     S2w_Printf(" &K%d &R%d\r\n",
// 6007            profile->serialPortConf.conf.uart.softflow, profile->serialPortConf.conf.uart.hardflow);
        LDR      R0,[R5, #+4]
        UBFX     R2,R0,#+7,#+1
        UBFX     R1,R0,#+6,#+1
        ADR.W    R0,`?<Constant " &K%d &R%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6008 #endif
// 6009 
// 6010 }
// 6011 
// 6012     /* Display Ip settings
// 6013      */
// 6014 
// 6015     S2w_Printf("+NDHCP=%d +NSET=", profile->netConf.dhcp);
        BL       ?Subroutine100
// 6016     AppS2wIp_Print(profile->netConf.ipAddr);
??CrossCallReturnLabel_514:
        ADD      R0,R4,#+396
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6017     S2w_PutChar(',');
        BL       ?Subroutine133
// 6018 
// 6019     AppS2wIp_Print(profile->netConf.netMask);
??CrossCallReturnLabel_617:
        ADD      R0,R4,#+400
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6020     S2w_PutChar(',');
        BL       ?Subroutine133
// 6021     AppS2wIp_Print(profile->netConf.gateway);
??CrossCallReturnLabel_616:
        ADD      R0,R4,#+404
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6022     
// 6023     S2w_Printf("\r\n+DNS1=");
        ADR.W    R0,`?<Constant "\\r\\n+DNS1=">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6024     AppS2wIp_Print(profile->dns1);
        ADD      R0,R4,#+424
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6025     S2w_Printf(", +DNS2=");
        ADR.W    R0,`?<Constant ", +DNS2=">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6026     AppS2wIp_Print(profile->dns2);
        ADD      R0,R4,#+428
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
        LDRB     R1,[R4, #+4]
        ADR.W    R0,`?<Constant "\\r\\n+WM=%d ">`
        CMP      R1,#+1
        IT       EQ 
        MOVEQ    R1,#+0
// 6027     
// 6028     if(profile->mode == S2W_WLANDATA_MODE_INFRA)
// 6029     {
// 6030         S2w_Printf("\r\n+WM=%d ", 0);
// 6031     }
// 6032     else
// 6033     {
// 6034         S2w_Printf("\r\n+WM=%d ", profile->mode);
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6035     }
// 6036 #ifndef S2W_IP2WIFI_SUPPORT
// 6037     if(profile->autoWlandata.mode == S2W_WLANDATA_MODE_INFRA)
        BL       ?Subroutine134
??CrossCallReturnLabel_618:
        IT       EQ 
        MOVEQ    R1,#+0
// 6038     {
// 6039         S2w_Printf("+WAUTO=%d,\"", 0);
// 6040 	}
// 6041 	else
// 6042 	{
// 6043     S2w_Printf("+WAUTO=%d,\"", profile->autoWlandata.mode);
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6044 	}
// 6045     AppS2wHal_CharNPut(profile->autoWlandata.ssid,
// 6046             profile->autoWlandata.ssidLen);
        BL       ?Subroutine122
// 6047     if (profile->autoWlandata.validBssid)
??CrossCallReturnLabel_583:
        LDRB     R0,[R5, #+11]
        CBZ.N    R0,??AppS2wProfile_Display_5
// 6048     {
// 6049         S2w_Printf("\",%02x:%02x:%02x:%02x:%02x:%02x",
// 6050                 profile->autoWlandata.bssid[0],
// 6051                 profile->autoWlandata.bssid[1],
// 6052                 profile->autoWlandata.bssid[2],
// 6053                 profile->autoWlandata.bssid[3],
// 6054                 profile->autoWlandata.bssid[4],
// 6055                 profile->autoWlandata.bssid[5]);
        BL       ?Subroutine8
// 6056     }
??CrossCallReturnLabel_11:
        B.N      ??AppS2wProfile_Display_6
// 6057     else
// 6058     {
// 6059         AppS2wHal_CharNPut(vBuff,2);
??AppS2wProfile_Display_5:
        MOVS     R1,#+2
        ADD      R0,SP,#+12
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 6060     }
// 6061 
// 6062     if(0 == profile->autoWlandata.channel)
??AppS2wProfile_Display_6:
        LDRB     R1,[R5, #+9]
        CBNZ.N   R1,??AppS2wProfile_Display_7
// 6063     {
// 6064         S2w_Printf(",\r\n");
        ADR.N    R0,??DataTable418  ;; ",\r\n"
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wProfile_Display_8
// 6065     }
// 6066     else
// 6067     {
// 6068         S2w_Printf(",%d\r\n", profile->autoWlandata.channel);
??AppS2wProfile_Display_7:
        ADR.W    R0,`?<Constant ",%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6069     }
// 6070 #endif
// 6071     S2w_Printf("+WRETRY=%u +WP=%d +WRXPS=%d +WRXACTIVE=%d\r\n",
// 6072             profile->retryCount, profile->txPower,
// 6073             profile->powerSave, profile->radio);
??AppS2wProfile_Display_8:
        LDRB     R0,[R5, #+4]
        STR      R0,[SP, #+0]
        LDRB     R3,[R5, #+3]
        LDRB     R2,[R5, #+1]
        LDRB     R1,[R5, #+2]
        ADR.W    R0,`?<Constant "+WRETRY=%u +WP=%d +WR...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6074 #ifndef S2W_IP2WIFI_SUPPORT
// 6075     S2w_Printf("+NAUTO="
// 6076             "%d,"
// 6077             "%d,",
// 6078             profile->autoNetdata.mode,
// 6079             profile->autoNetdata.proto);
        LDRB     R1,[R4, #+60]
        ADR.W    R0,`?<Constant "+NAUTO=%d,%d,">`
        ADD      R5,R4,#+60
        LDRB     R2,[R5, #+1]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6080     *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
        BL       ?Subroutine98
// 6081     AppS2wIp_Print(profile->autoNetdata.ipAddr);
??CrossCallReturnLabel_509:
        ADD      R0,R4,#+64
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6082     *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
        BL       ?Subroutine98
// 6083     S2w_Printf(",%d", profile->autoNetdata.port);
??CrossCallReturnLabel_510:
        ADR.N    R6,??DataTable418_1  ;; ",%d"
        LDRH     R1,[R5, #+2]
        MOV      R0,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6084     if((profile->autoNetdata.mode == 0) &&(profile->autoNetdata.proto == S2W_NETDATA_PROTO_UDP))
        LDRB     R0,[R4, #+60]
        CMP      R0,#+0
        ITT      EQ 
        LDRBEQ   R0,[R5, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wProfile_Display_9
// 6085     {
// 6086 		S2w_Printf(",%d", profile->udpSrcPort);
        LDRH     R1,[R4, #+934]
        MOV      R0,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6087 	}
// 6088 	S2w_Printf("\r\n");
??AppS2wProfile_Display_9:
        BL       ?Subroutine91
// 6089 	
// 6090 #endif
// 6091     /* display security parameters
// 6092      */
// 6093     AppS2wSecurity_Display(&profile->security);
??CrossCallReturnLabel_491:
        ADD      R0,R4,#+120
          CFI FunCall AppS2wSecurity_Display
        BL       AppS2wSecurity_Display
// 6094 
// 6095     /* Display registers
// 6096      */
// 6097 #ifndef S2W_IP2WIFI_SUPPORT
// 6098     AppS2wRegisters_Display(profile);
        MOV      R0,R4
          CFI FunCall AppS2wRegisters_Display
        BL       AppS2wRegisters_Display
// 6099 #endif
// 6100     S2w_Printf("\r\n+BDATA=%d  +WSEC=%d  +ASYNCMSG=%d ", profile->bulkTxEnable,
// 6101                profile->securityType,profile->asyncMsgFormat);
        ADD      R0,R4,#+468
        LDRB     R3,[R0, #+4]
        LDRB     R2,[R0, #+1]
        LDRB     R1,[R4, #+468]
        ADR.W    R0,`?<Constant "\\r\\n+BDATA=%d  +WSEC=%d...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6102 }
        POP      {R0-R6,PC}       ;; return
          CFI EndBlock cfiBlock224

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable417:
        DC32     s2wCurrent+0x1B0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable417_1:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable417_2:
        DC8      0x0D, 0x0A, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable417_3:
        DC32     s2wSerialPortHandle

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable417_4:
        DC32     profile_params

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\",">`:
        DC8 "\","
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "C%d &Y%d ">`:
        DC8 "C%d &Y%d "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "E%d V%d B=%u,%d,">`:
        DC8 "E%d V%d B=%u,%d,"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%c,%d">`:
        DC8 "%c,%d"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant " &K%d &R%d\\r\\n">`:
        DC8 " &K%d &R%d\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+WRETRY=%u +WP=%d +WR...">`:
        DC8 "+WRETRY=%u +WP=%d +WRXPS=%d +WRXACTIVE=%d\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+BDATA=%d  +WSEC=%d...">`:
        DC8 "\015\012+BDATA=%d  +WSEC=%d  +ASYNCMSG=%d "
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond225 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_509
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond226 Using cfiCommon0
          CFI (cfiCond226) Function AppS2wProfile_Display
          CFI (cfiCond226) NoCalls AppS2wProfile_Display
          CFI (cfiCond226) Conditional ??CrossCallReturnLabel_510
          CFI (cfiCond226) R4 Frame(CFA, -16)
          CFI (cfiCond226) R5 Frame(CFA, -12)
          CFI (cfiCond226) R6 Frame(CFA, -8)
          CFI (cfiCond226) R14 Frame(CFA, -4)
          CFI (cfiCond226) CFA R13+32
          CFI Block cfiPicker227 Using cfiCommon1
          CFI (cfiPicker227) NoFunction
          CFI (cfiPicker227) NoCalls AppS2wProfile_Display
          CFI (cfiPicker227) Picker
        THUMB
?Subroutine98:
        LDR      R0,[R5, #+4]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R0,R1,R0, LSR #+24
        LDR      R1,[R5, #+4]
        AND      R1,R1,#0xFF00
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[R5, #+4]
        ORR      R0,R0,R1, LSL #+24
        STR      R0,[R5, #+4]
        BX       LR
          CFI EndBlock cfiCond225
          CFI EndBlock cfiCond226
          CFI EndBlock cfiPicker227
// 6103 
// 6104 
// 6105 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock228 Using cfiCommon0
          CFI Function AppS2wNcmProfile_Display
        THUMB
// 6106 PUBLIC VOID
// 6107 AppS2wNcmProfile_Display(S2W_PROFILE_T *profile)
// 6108 {
AppS2wNcmProfile_Display:
        PUSH     {R0-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+40
// 6109 	#ifndef S2W_IP2WIFI_SUPPORT
// 6110 	    UINT8 vBuff[4]={"\","};
        ADR.W    R1,`?<Constant "\\",">_1`
        LDR      R2,[R1, #0]
        MOV      R4,R0
        ADD      R0,SP,#+12
        STR      R2,[R0, #+0]
// 6111     #endif
// 6112 	S2w_Printf("\r\nACTIVE CLIENT PROFILE\r\n");
        ADR.W    R0,`?<Constant "\\r\\nACTIVE CLIENT PROFI...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6113 
// 6114     S2w_Printf("+NDHCP=%d +NSET=", profile->netConf.dhcp);
        BL       ?Subroutine100
// 6115     AppS2wIp_Print(profile->netConf.ipAddr);
??CrossCallReturnLabel_513:
        ADD      R0,R4,#+396
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6116     S2w_PutChar(',');
        BL       ?Subroutine133
// 6117 
// 6118     AppS2wIp_Print(profile->netConf.netMask);
??CrossCallReturnLabel_615:
        ADD      R0,R4,#+400
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6119     S2w_PutChar(',');
        BL       ?Subroutine133
// 6120     AppS2wIp_Print(profile->netConf.gateway);
??CrossCallReturnLabel_614:
        ADD      R0,R4,#+404
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6121 
// 6122     S2w_Printf("\r\n+DNS1=");
        ADR.W    R0,`?<Constant "\\r\\n+DNS1=">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6123     AppS2wIp_Print(profile->dns1);
        ADD      R0,R4,#+424
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6124     S2w_Printf(", +DNS2=");
        ADR.W    R0,`?<Constant ", +DNS2=">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6125     AppS2wIp_Print(profile->dns2);
        ADD      R0,R4,#+428
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
        LDRB     R1,[R4, #+4]
        ADR.W    R0,`?<Constant "\\r\\n+WM=%d ">`
        CMP      R1,#+1
        IT       EQ 
        MOVEQ    R1,#+0
// 6126 
// 6127     if(profile->mode == S2W_WLANDATA_MODE_INFRA)
// 6128     {
// 6129         S2w_Printf("\r\n+WM=%d ", 0);
// 6130     }
// 6131     else
// 6132     {
// 6133         S2w_Printf("\r\n+WM=%d ", profile->mode);
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6134     }
// 6135 #ifndef S2W_IP2WIFI_SUPPORT
// 6136     if(profile->autoWlandata.mode == S2W_WLANDATA_MODE_INFRA)
        BL       ?Subroutine134
??CrossCallReturnLabel_619:
        IT       EQ 
        MOVEQ    R1,#+0
// 6137     {
// 6138         S2w_Printf("+WAUTO=%d,\"", 0);
// 6139 	}
// 6140 	else
// 6141 	{
// 6142 		S2w_Printf("+WAUTO=%d,\"", profile->autoWlandata.mode);
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6143 	}
// 6144     AppS2wHal_CharNPut(profile->autoWlandata.ssid,
// 6145             profile->autoWlandata.ssidLen);
        BL       ?Subroutine122
// 6146     if (profile->autoWlandata.validBssid)
??CrossCallReturnLabel_582:
        LDRB     R0,[R5, #+11]
        CBZ.N    R0,??AppS2wNcmProfile_Display_0
// 6147     {
// 6148         S2w_Printf("\",%02x:%02x:%02x:%02x:%02x:%02x",
// 6149                 profile->autoWlandata.bssid[0],
// 6150                 profile->autoWlandata.bssid[1],
// 6151                 profile->autoWlandata.bssid[2],
// 6152                 profile->autoWlandata.bssid[3],
// 6153                 profile->autoWlandata.bssid[4],
// 6154                 profile->autoWlandata.bssid[5]);
        BL       ?Subroutine8
// 6155     }
??CrossCallReturnLabel_10:
        B.N      ??AppS2wNcmProfile_Display_1
// 6156     else
// 6157     {
// 6158         AppS2wHal_CharNPut(vBuff,2);
??AppS2wNcmProfile_Display_0:
        MOVS     R1,#+2
        ADD      R0,SP,#+12
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 6159     }
// 6160 
// 6161     if(0 == profile->autoWlandata.channel)
??AppS2wNcmProfile_Display_1:
        LDRB     R1,[R5, #+9]
        ADR.W    R5,`?<Constant ",%d\\r\\n">`
        ADR.N    R6,??DataTable418  ;; ",\r\n"
        CBNZ.N   R1,??AppS2wNcmProfile_Display_2
// 6162     {
// 6163         S2w_Printf(",\r\n");
        MOV      R0,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wNcmProfile_Display_3
// 6164     }
// 6165     else
// 6166     {
// 6167         S2w_Printf(",%d\r\n", profile->autoWlandata.channel);
??AppS2wNcmProfile_Display_2:
        MOV      R0,R5
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6168     }
// 6169 #endif
// 6170 #ifndef S2W_IP2WIFI_SUPPORT
// 6171     S2w_Printf("+NAUTO="
// 6172             "%d,"
// 6173             "%d,",
// 6174             profile->autoNetdata.mode,
// 6175             profile->autoNetdata.proto);
??AppS2wNcmProfile_Display_3:
        ADD      R7,R4,#+60
        LDRB     R1,[R4, #+60]
        LDRB     R2,[R7, #+1]
        ADR.W    R0,`?<Constant "+NAUTO=%d,%d,">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6176     *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
        BL       ?Subroutine105
// 6177     AppS2wIp_Print(profile->autoNetdata.ipAddr);
??CrossCallReturnLabel_528:
        ADD      R0,R4,#+64
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6178     *(ULONG*)profile->autoNetdata.ipAddr = ntohl(*(ULONG*)profile->autoNetdata.ipAddr);
        BL       ?Subroutine105
// 6179     S2w_Printf(",%d", profile->autoNetdata.port);
??CrossCallReturnLabel_529:
        ADR.W    R8,??DataTable418_1  ;; ",%d"
        LDRH     R1,[R7, #+2]
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6180     if((profile->autoNetdata.mode == 0) &&(profile->autoNetdata.proto == S2W_NETDATA_PROTO_UDP))
        LDRB     R0,[R4, #+60]
        CMP      R0,#+0
        ITT      EQ 
        LDRBEQ   R0,[R7, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wNcmProfile_Display_4
// 6181     {
// 6182 		S2w_Printf(",%d", profile->udpSrcPort);
        LDRH     R1,[R4, #+934]
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6183 	}
// 6184 	S2w_Printf("\r\n");
??AppS2wNcmProfile_Display_4:
        ADR.N    R7,??DataTable420  ;; 0x0D, 0x0A, 0x00, 0x00
        BL       ?Subroutine87
// 6185 
// 6186 #endif
// 6187     /* display security parameters
// 6188      */
// 6189     AppS2wSecurity_Display(&profile->security);
??CrossCallReturnLabel_472:
        ADD      R0,R4,#+120
          CFI FunCall AppS2wSecurity_Display
        BL       AppS2wSecurity_Display
// 6190     S2w_Printf("\r\n");
        BL       ?Subroutine87
// 6191 
// 6192 	S2w_Printf("\r\nACTIVE LIMITED-AP PROFILE\r\n+NSET=");
??CrossCallReturnLabel_471:
        ADR.W    R0,`?<Constant "\\r\\nACTIVE LIMITED-AP P...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6193     AppS2wIp_Print((UINT8*)&profile->lmtdApConf.ipAddress);
        ADD      R0,R4,#+652
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6194     S2w_PutChar(',');
        BL       ?Subroutine133
// 6195 
// 6196     AppS2wIp_Print((UINT8*)&profile->lmtdApConf.subnetmask);
??CrossCallReturnLabel_613:
        ADD      R0,R4,#+656
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6197     S2w_PutChar(',');
        BL       ?Subroutine133
// 6198     AppS2wIp_Print((UINT8*)&profile->lmtdApConf.gateway);
??CrossCallReturnLabel_612:
        ADD      R0,R4,#+660
          CFI FunCall AppS2wIp_Print
        BL       AppS2wIp_Print
// 6199     S2w_Printf("\r\n+WAUTO=%d,\"", 2);
        MOVS     R1,#+2
        ADR.W    R0,`?<Constant "\\r\\n+WAUTO=%d,\\"">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6200     AppS2wHal_CharNPut(profile->lmtdApConf.ssid.array,
// 6201             profile->lmtdApConf.ssid.length);
        LDRB     R1,[R4, #+492]
        ADDW     R0,R4,#+493
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 6202     S2w_Printf("\"");
        ADR.N    R0,??DataTable421  ;; "\""
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6203     if(0 == profile->lmtdApConf.channel)
        LDRB     R1,[R4, #+646]
        CBNZ.N   R1,??AppS2wNcmProfile_Display_5
// 6204     {
// 6205         S2w_Printf(",\r\n");
        MOV      R0,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wNcmProfile_Display_6
// 6206     }
// 6207     else
// 6208     {
// 6209         S2w_Printf(",%d\r\n", profile->lmtdApConf.channel);
??AppS2wNcmProfile_Display_5:
        MOV      R0,R5
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6210     }
// 6211     S2w_Printf("+STATIONS=%d  +REGDOMAIN=%d  +BEACONINTRL=%d ", profile->lmtdApConf.noStations,
// 6212                profile->lmtdApConf.regDomain,profile->lmtdApConf.beaconInterval);
??AppS2wNcmProfile_Display_6:
        ADDW     R5,R4,#+646
        LDRH     R3,[R5, #+4]
        LDRB     R2,[R5, #+2]
        LDRB     R1,[R5, #+1]
        ADR.W    R0,`?<Constant "+STATIONS=%d  +REGDOM...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6213     S2w_Printf("\r\n+DHCPSRVR=%d  +DHCPCLIENTS=%d  +DHCPLEASE=%d ", profile->lmtdApConf.dhcpServerEnable,
// 6214                profile->lmtdApConf.dhcpNumAddresses,(ntohl(profile->lmtdApConf.dhcpLeaseTime)));
        LDR      R0,[R4, #+740]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R1,R1,R0, LSR #+24
        AND      R2,R0,#0xFF00
        ORR      R1,R1,R2, LSL #+8
        ORR      R3,R1,R0, LSL #+24
        LDRB     R2,[R5, #+19]
        LDRB     R1,[R5, #+18]
        ADR.W    R0,`?<Constant "\\r\\n+DHCPSRVR=%d  +DHCP...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6215     S2w_Printf("\r\n+DNSSRVR=%d  +DNSDOMAIN=%s", profile->lmtdApConf.dnsServerEnable,
// 6216                profile->lmtdApConf.dnsDomainName);
        LDRB     R1,[R5, #+26]
        ADR.W    R0,`?<Constant "\\r\\n+DNSSRVR=%d  +DNSDO...">`
        ADDW     R2,R4,#+673
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6217 }
        POP      {R0-R8,PC}       ;; return
          CFI EndBlock cfiBlock228

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable418:
        DC8      ",\r\n"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable418_1:
        DC8      ",%d"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\",">_1`:
        DC8 "\","
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nACTIVE CLIENT PROFI...">`:
        DC8 "\015\012ACTIVE CLIENT PROFILE\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+DNS1=">`:
        DC8 "\015\012+DNS1="
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ", +DNS2=">`:
        DC8 ", +DNS2="
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+WM=%d ">`:
        DC8 "\015\012+WM=%d "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant ",%d\\r\\n">`:
        DC8 ",%d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+NAUTO=%d,%d,">`:
        DC8 "+NAUTO=%d,%d,"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nACTIVE LIMITED-AP P...">`:
        DC8 "\015\012ACTIVE LIMITED-AP PROFILE\015\012+NSET="

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+WAUTO=%d,\\"">`:
        DC8 "\015\012+WAUTO=%d,\""
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+STATIONS=%d  +REGDOM...">`:
        DC8 "+STATIONS=%d  +REGDOMAIN=%d  +BEACONINTRL=%d "
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+DHCPSRVR=%d  +DHCP...">`:
        DC8 "\015\012+DHCPSRVR=%d  +DHCPCLIENTS=%d  +DHCPLEASE=%d "

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n+DNSSRVR=%d  +DNSDO...">`:
        DC8 "\015\012+DNSSRVR=%d  +DNSDOMAIN=%s"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond229 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_618
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond230 Using cfiCommon0
          CFI (cfiCond230) Function AppS2wNcmProfile_Display
          CFI (cfiCond230) NoCalls AppS2wProfile_Display
          CFI (cfiCond230) NoCalls AppS2wNcmProfile_Display
          CFI (cfiCond230) Conditional ??CrossCallReturnLabel_619
          CFI (cfiCond230) R4 Frame(CFA, -24)
          CFI (cfiCond230) R5 Frame(CFA, -20)
          CFI (cfiCond230) R6 Frame(CFA, -16)
          CFI (cfiCond230) R7 Frame(CFA, -12)
          CFI (cfiCond230) R8 Frame(CFA, -8)
          CFI (cfiCond230) R14 Frame(CFA, -4)
          CFI (cfiCond230) CFA R13+40
          CFI Block cfiPicker231 Using cfiCommon1
          CFI (cfiPicker231) NoFunction
          CFI (cfiPicker231) NoCalls AppS2wProfile_Display
          CFI (cfiPicker231) NoCalls AppS2wNcmProfile_Display
          CFI (cfiPicker231) Picker
        THUMB
?Subroutine134:
        ADDS     R5,R4,#+4
        ADR.W    R0,`?<Constant "+WAUTO=%d,\\"">`
        LDRB     R1,[R5, #+8]
        CMP      R1,#+1
        BX       LR
          CFI EndBlock cfiCond229
          CFI EndBlock cfiCond230
          CFI EndBlock cfiPicker231

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+WAUTO=%d,\\"">`:
        DC8 "+WAUTO=%d,\""

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond232 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI Conditional ??CrossCallReturnLabel_617
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond233 Using cfiCommon0
          CFI (cfiCond233) Function AppS2wProfile_Display
          CFI (cfiCond233) Conditional ??CrossCallReturnLabel_616
          CFI (cfiCond233) R4 Frame(CFA, -16)
          CFI (cfiCond233) R5 Frame(CFA, -12)
          CFI (cfiCond233) R6 Frame(CFA, -8)
          CFI (cfiCond233) R14 Frame(CFA, -4)
          CFI (cfiCond233) CFA R13+32
          CFI Block cfiCond234 Using cfiCommon0
          CFI (cfiCond234) Function AppS2wNcmProfile_Display
          CFI (cfiCond234) Conditional ??CrossCallReturnLabel_615
          CFI (cfiCond234) R4 Frame(CFA, -24)
          CFI (cfiCond234) R5 Frame(CFA, -20)
          CFI (cfiCond234) R6 Frame(CFA, -16)
          CFI (cfiCond234) R7 Frame(CFA, -12)
          CFI (cfiCond234) R8 Frame(CFA, -8)
          CFI (cfiCond234) R14 Frame(CFA, -4)
          CFI (cfiCond234) CFA R13+40
          CFI Block cfiCond235 Using cfiCommon0
          CFI (cfiCond235) Function AppS2wNcmProfile_Display
          CFI (cfiCond235) Conditional ??CrossCallReturnLabel_614
          CFI (cfiCond235) R4 Frame(CFA, -24)
          CFI (cfiCond235) R5 Frame(CFA, -20)
          CFI (cfiCond235) R6 Frame(CFA, -16)
          CFI (cfiCond235) R7 Frame(CFA, -12)
          CFI (cfiCond235) R8 Frame(CFA, -8)
          CFI (cfiCond235) R14 Frame(CFA, -4)
          CFI (cfiCond235) CFA R13+40
          CFI Block cfiCond236 Using cfiCommon0
          CFI (cfiCond236) Function AppS2wNcmProfile_Display
          CFI (cfiCond236) Conditional ??CrossCallReturnLabel_613
          CFI (cfiCond236) R4 Frame(CFA, -24)
          CFI (cfiCond236) R5 Frame(CFA, -20)
          CFI (cfiCond236) R6 Frame(CFA, -16)
          CFI (cfiCond236) R7 Frame(CFA, -12)
          CFI (cfiCond236) R8 Frame(CFA, -8)
          CFI (cfiCond236) R14 Frame(CFA, -4)
          CFI (cfiCond236) CFA R13+40
          CFI Block cfiCond237 Using cfiCommon0
          CFI (cfiCond237) Function AppS2wNcmProfile_Display
          CFI (cfiCond237) Conditional ??CrossCallReturnLabel_612
          CFI (cfiCond237) R4 Frame(CFA, -24)
          CFI (cfiCond237) R5 Frame(CFA, -20)
          CFI (cfiCond237) R6 Frame(CFA, -16)
          CFI (cfiCond237) R7 Frame(CFA, -12)
          CFI (cfiCond237) R8 Frame(CFA, -8)
          CFI (cfiCond237) R14 Frame(CFA, -4)
          CFI (cfiCond237) CFA R13+40
          CFI Block cfiPicker238 Using cfiCommon1
          CFI (cfiPicker238) NoFunction
          CFI (cfiPicker238) Picker
        THUMB
?Subroutine133:
        MOVS     R0,#+44
          CFI FunCall AppS2wProfile_Display S2w_PutChar
          CFI FunCall AppS2wProfile_Display S2w_PutChar
          CFI FunCall AppS2wNcmProfile_Display S2w_PutChar
          CFI FunCall AppS2wNcmProfile_Display S2w_PutChar
          CFI FunCall AppS2wNcmProfile_Display S2w_PutChar
          CFI FunCall AppS2wNcmProfile_Display S2w_PutChar
        B.W      S2w_PutChar
          CFI EndBlock cfiCond232
          CFI EndBlock cfiCond233
          CFI EndBlock cfiCond234
          CFI EndBlock cfiCond235
          CFI EndBlock cfiCond236
          CFI EndBlock cfiCond237
          CFI EndBlock cfiPicker238

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond239 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI Conditional ??CrossCallReturnLabel_583
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond240 Using cfiCommon0
          CFI (cfiCond240) Function AppS2wNcmProfile_Display
          CFI (cfiCond240) Conditional ??CrossCallReturnLabel_582
          CFI (cfiCond240) R4 Frame(CFA, -24)
          CFI (cfiCond240) R5 Frame(CFA, -20)
          CFI (cfiCond240) R6 Frame(CFA, -16)
          CFI (cfiCond240) R7 Frame(CFA, -12)
          CFI (cfiCond240) R8 Frame(CFA, -8)
          CFI (cfiCond240) R14 Frame(CFA, -4)
          CFI (cfiCond240) CFA R13+40
          CFI Block cfiPicker241 Using cfiCommon1
          CFI (cfiPicker241) NoFunction
          CFI (cfiPicker241) Picker
        THUMB
?Subroutine122:
        LDRB     R1,[R5, #+10]
        ADD      R0,R4,#+22
          CFI FunCall AppS2wProfile_Display AppS2wHal_CharNPut
          CFI FunCall AppS2wNcmProfile_Display AppS2wHal_CharNPut
        B.W      AppS2wHal_CharNPut
          CFI EndBlock cfiCond239
          CFI EndBlock cfiCond240
          CFI EndBlock cfiPicker241

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond242 Using cfiCommon0
          CFI Function AppS2wNcmProfile_Display
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_528
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond243 Using cfiCommon0
          CFI (cfiCond243) Function AppS2wNcmProfile_Display
          CFI (cfiCond243) NoCalls AppS2wNcmProfile_Display
          CFI (cfiCond243) Conditional ??CrossCallReturnLabel_529
          CFI (cfiCond243) R4 Frame(CFA, -24)
          CFI (cfiCond243) R5 Frame(CFA, -20)
          CFI (cfiCond243) R6 Frame(CFA, -16)
          CFI (cfiCond243) R7 Frame(CFA, -12)
          CFI (cfiCond243) R8 Frame(CFA, -8)
          CFI (cfiCond243) R14 Frame(CFA, -4)
          CFI (cfiCond243) CFA R13+40
          CFI Block cfiPicker244 Using cfiCommon1
          CFI (cfiPicker244) NoFunction
          CFI (cfiPicker244) NoCalls AppS2wNcmProfile_Display
          CFI (cfiPicker244) Picker
        THUMB
?Subroutine105:
        LDR      R0,[R7, #+4]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R0,R1,R0, LSR #+24
        LDR      R1,[R7, #+4]
        AND      R1,R1,#0xFF00
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[R7, #+4]
        ORR      R0,R0,R1, LSL #+24
        STR      R0,[R7, #+4]
        BX       LR
          CFI EndBlock cfiCond242
          CFI EndBlock cfiCond243
          CFI EndBlock cfiPicker244

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond245 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI Conditional ??CrossCallReturnLabel_514
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond246 Using cfiCommon0
          CFI (cfiCond246) Function AppS2wNcmProfile_Display
          CFI (cfiCond246) Conditional ??CrossCallReturnLabel_513
          CFI (cfiCond246) R4 Frame(CFA, -24)
          CFI (cfiCond246) R5 Frame(CFA, -20)
          CFI (cfiCond246) R6 Frame(CFA, -16)
          CFI (cfiCond246) R7 Frame(CFA, -12)
          CFI (cfiCond246) R8 Frame(CFA, -8)
          CFI (cfiCond246) R14 Frame(CFA, -4)
          CFI (cfiCond246) CFA R13+40
          CFI Block cfiPicker247 Using cfiCommon1
          CFI (cfiPicker247) NoFunction
          CFI (cfiPicker247) Picker
        THUMB
?Subroutine100:
        LDRB     R1,[R4, #+392]
        ADR.W    R0,`?<Constant "+NDHCP=%d +NSET=">`
          CFI FunCall AppS2wProfile_Display S2w_Printf
          CFI FunCall AppS2wNcmProfile_Display S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiCond245
          CFI EndBlock cfiCond246
          CFI EndBlock cfiPicker247

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "+NDHCP=%d +NSET=">`:
        DC8 "+NDHCP=%d +NSET="
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond248 Using cfiCommon0
          CFI Function AppS2wCmd_Nstat
          CFI Conditional ??CrossCallReturnLabel_474
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+296
          CFI Block cfiCond249 Using cfiCommon0
          CFI (cfiCond249) Function AppS2wCmd_Nstat
          CFI (cfiCond249) Conditional ??CrossCallReturnLabel_473
          CFI (cfiCond249) R4 Frame(CFA, -28)
          CFI (cfiCond249) R5 Frame(CFA, -24)
          CFI (cfiCond249) R6 Frame(CFA, -20)
          CFI (cfiCond249) R7 Frame(CFA, -16)
          CFI (cfiCond249) R8 Frame(CFA, -12)
          CFI (cfiCond249) R9 Frame(CFA, -8)
          CFI (cfiCond249) R14 Frame(CFA, -4)
          CFI (cfiCond249) CFA R13+296
          CFI Block cfiCond250 Using cfiCommon0
          CFI (cfiCond250) Function AppS2wNcmProfile_Display
          CFI (cfiCond250) Conditional ??CrossCallReturnLabel_472
          CFI (cfiCond250) R4 Frame(CFA, -24)
          CFI (cfiCond250) R5 Frame(CFA, -20)
          CFI (cfiCond250) R6 Frame(CFA, -16)
          CFI (cfiCond250) R7 Frame(CFA, -12)
          CFI (cfiCond250) R8 Frame(CFA, -8)
          CFI (cfiCond250) R14 Frame(CFA, -4)
          CFI (cfiCond250) CFA R13+40
          CFI Block cfiCond251 Using cfiCommon0
          CFI (cfiCond251) Function AppS2wNcmProfile_Display
          CFI (cfiCond251) Conditional ??CrossCallReturnLabel_471
          CFI (cfiCond251) R4 Frame(CFA, -24)
          CFI (cfiCond251) R5 Frame(CFA, -20)
          CFI (cfiCond251) R6 Frame(CFA, -16)
          CFI (cfiCond251) R7 Frame(CFA, -12)
          CFI (cfiCond251) R8 Frame(CFA, -8)
          CFI (cfiCond251) R14 Frame(CFA, -4)
          CFI (cfiCond251) CFA R13+40
          CFI Block cfiCond252 Using cfiCommon0
          CFI (cfiCond252) Function AppS2wCmd_AdcRead
          CFI (cfiCond252) Conditional ??CrossCallReturnLabel_470
          CFI (cfiCond252) R4 Frame(CFA, -20)
          CFI (cfiCond252) R5 Frame(CFA, -16)
          CFI (cfiCond252) R6 Frame(CFA, -12)
          CFI (cfiCond252) R7 Frame(CFA, -8)
          CFI (cfiCond252) R14 Frame(CFA, -4)
          CFI (cfiCond252) CFA R13+40
          CFI Block cfiPicker253 Using cfiCommon1
          CFI (cfiPicker253) NoFunction
          CFI (cfiPicker253) Picker
        THUMB
?Subroutine87:
        MOV      R0,R7
          CFI FunCall AppS2wCmd_Nstat S2w_Printf
          CFI FunCall AppS2wCmd_Nstat S2w_Printf
          CFI FunCall AppS2wNcmProfile_Display S2w_Printf
          CFI FunCall AppS2wNcmProfile_Display S2w_Printf
          CFI FunCall AppS2wCmd_AdcRead S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiCond248
          CFI EndBlock cfiCond249
          CFI EndBlock cfiCond250
          CFI EndBlock cfiCond251
          CFI EndBlock cfiCond252
          CFI EndBlock cfiPicker253

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond254 Using cfiCommon0
          CFI Function AppS2wProfile_Display
          CFI Conditional ??CrossCallReturnLabel_11
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond255 Using cfiCommon0
          CFI (cfiCond255) Function AppS2wNcmProfile_Display
          CFI (cfiCond255) Conditional ??CrossCallReturnLabel_10
          CFI (cfiCond255) R4 Frame(CFA, -24)
          CFI (cfiCond255) R5 Frame(CFA, -20)
          CFI (cfiCond255) R6 Frame(CFA, -16)
          CFI (cfiCond255) R7 Frame(CFA, -12)
          CFI (cfiCond255) R8 Frame(CFA, -8)
          CFI (cfiCond255) R14 Frame(CFA, -4)
          CFI (cfiCond255) CFA R13+40
          CFI Block cfiPicker256 Using cfiCommon1
          CFI (cfiPicker256) NoFunction
          CFI (cfiPicker256) Picker
        THUMB
?Subroutine8:
        LDRB     R0,[R5, #+17]
        STR      R0,[SP, #+8]
        LDRB     R0,[R5, #+16]
        STR      R0,[SP, #+4]
        LDRB     R0,[R5, #+15]
        STR      R0,[SP, #+0]
        LDRB     R3,[R5, #+14]
        LDRB     R2,[R5, #+13]
        LDRB     R1,[R5, #+12]
        ADR.W    R0,`?<Constant "\\",%02x:%02x:%02x:%02x...">`
          CFI FunCall AppS2wProfile_Display S2w_Printf
          CFI FunCall AppS2wNcmProfile_Display S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiCond254
          CFI EndBlock cfiCond255
          CFI EndBlock cfiPicker256

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\",%02x:%02x:%02x:%02x...">`:
        DC8 "\",%02x:%02x:%02x:%02x:%02x:%02x"
// 6218 
// 6219 
// 6220 /**
// 6221  ******************************************************************
// 6222  * @ingroup S2w-Application
// 6223  * @brief Process the AT&V Command.
// 6224      This function displays the current configuration.It displays the
// 6225      current active profile,profile1 and profile2.
// 6226  * @param ptr Pointer to the user input string.
// 6227 
// 6228  * @return S2W_SUCCESS - operation successful.
// 6229  * @retval S2W_EINVAL  - operation failure-invalid command.
// 6230  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock257 Using cfiCommon0
          CFI Function AppS2wCmd_ConfigOutput
        THUMB
// 6231 PUBLIC UINT8
// 6232 AppS2wCmd_ConfigOutput(UINT8 *ptr)
// 6233 {
AppS2wCmd_ConfigOutput:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 6234 
// 6235     if (*ptr)
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_ConfigOutput_0
// 6236         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R4,PC}
// 6237 
// 6238     S2w_Printf("\r\nACTIVE PROFILE\r\n");
??AppS2wCmd_ConfigOutput_0:
        ADR.W    R0,`?<Constant "\\r\\nACTIVE PROFILE\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6239     AppS2wProfile_Display(&s2wCurrent);
        LDR.W    R0,??DataTable430_1
          CFI FunCall AppS2wProfile_Display
        BL       AppS2wProfile_Display
// 6240 
// 6241     S2w_Printf("\r\n\r\nSTORED PROFILE 0\r\n");
        ADR.W    R0,`?<Constant "\\r\\n\\r\\nSTORED PROFILE 0\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6242     AppS2wProfile_Display(&s2wFlashParams->profile[0]);
        LDR.W    R4,??DataTable440
        LDR      R0,[R4, #+0]
          CFI FunCall AppS2wProfile_Display
        BL       AppS2wProfile_Display
// 6243 
// 6244     S2w_Printf("\r\n\r\nSTORED PROFILE 1\r\n");
        ADR.W    R0,`?<Constant "\\r\\n\\r\\nSTORED PROFILE 1\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 6245     AppS2wProfile_Display(&s2wFlashParams->profile[1]);
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+1016
          CFI FunCall AppS2wProfile_Display
        BL       AppS2wProfile_Display
// 6246     S2w_Printf("\r\n");
        BL       ?Subroutine91
// 6247 
// 6248     return S2W_SUCCESS;
??CrossCallReturnLabel_490:
        MOVS     R0,#+0
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock257
// 6249 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nACTIVE PROFILE\\r\\n">`:
        DC8 "\015\012ACTIVE PROFILE\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n\\r\\nSTORED PROFILE 0\\r\\n">`:
        DC8 "\015\012\015\012STORED PROFILE 0\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n\\r\\nSTORED PROFILE 1\\r\\n">`:
        DC8 "\015\012\015\012STORED PROFILE 1\015\012"
        DC8 0
// 6250 
// 6251 
// 6252 /**
// 6253  ******************************************************************
// 6254  * @ingroup S2w-Application
// 6255  * @brief Process the AT+WRETRY Command.
// 6256  *   Thif function check the validity of the retry parameter and call the
// 6257  *   hal function to configure the wlan retry.
// 6258  * @param ptr Pointer to the user input string.
// 6259  *
// 6260  * @return S2W_SUCCESS - operation successful.
// 6261  * @retval S2W_EINVAL  - operation failure-invalid command.
// 6262  * @retval S2W_FAILURE - operation failure-Retry configuration failed.
// 6263  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock258 Using cfiCommon0
          CFI Function AppS2wCmd_Wretry
        THUMB
// 6264 UINT8
// 6265 AppS2wCmd_Wretry(UINT8 *ptr)
// 6266 {
AppS2wCmd_Wretry:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 6267     UINT8 status;
// 6268     UINT32 retryCount;
// 6269 
// 6270     /* check the retry count is valid
// 6271      */
// 6272     status = AppS2wParse_Int(ptr, &retryCount);
        BL       ?Subroutine51
// 6273     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_298:
        CBNZ.N   R0,??AppS2wCmd_Wretry_0
// 6274     {
// 6275         return status;
// 6276     }
// 6277     /* retry_count is a UINT32 but wlan limited to 255*/
// 6278     if (retryCount > 255)
        LDR      R0,[SP, #+0]
        CMP      R0,#+255
        BLS.N    ??AppS2wCmd_Wretry_1
// 6279     {
// 6280         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,PC}
// 6281     }
// 6282 
// 6283     /* call the wdd API function to configure the wlan retry count
// 6284      */
// 6285 
// 6286     status = GsnWdd_TxNumRetrySet(&s2wappMainTaskCtxt->if0.wddCtx, (UINT16)retryCount);
??AppS2wCmd_Wretry_1:
        UXTH     R1,R0
        BL       ?Subroutine74
??CrossCallReturnLabel_436:
          CFI FunCall GsnWdd_TxNumRetrySet
        BL       GsnWdd_TxNumRetrySet
// 6287     if (status != S2W_SUCCESS)
        UXTB     R0,R0
        CBNZ.N   R0,??AppS2wCmd_Wretry_0
// 6288     {
// 6289         return status;
// 6290     }
// 6291 
// 6292     /* update the active profile retry parameter
// 6293      */
// 6294     s2wCurrent.retryCount = retryCount;
        LDR.W    R0,??DataTable430_1
        LDR      R1,[SP, #+0]
        STRB     R1,[R0, #+6]
// 6295 
// 6296     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Wretry_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock258
// 6297 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable420:
        DC8      0x0D, 0x0A, 0x00, 0x00
// 6298 
// 6299 
// 6300 /**
// 6301  ******************************************************************
// 6302  * @ingroup S2w-Application
// 6303  * @brief Process the AT+WP Command.
// 6304  *   This function check the validity of the power number passed and call
// 6305      the hal function to configure the wlan radio power.
// 6306  * @param ptr Pointer to the user input string.
// 6307  * @return S2W_SUCCESS - operation successful.
// 6308  * @retval S2W_EINVAL  - operation failure-invalid command.
// 6309  * @retval S2W_FAILURE - operation failure-power configuration failed.
// 6310  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock259 Using cfiCommon0
          CFI Function AppS2wCmd_Wpower
        THUMB
// 6311 UINT8
// 6312 AppS2wCmd_Wpower(UINT8 *ptr)
// 6313 {
AppS2wCmd_Wpower:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+32
          CFI CFA R13+48
// 6314     UINT8 status;
// 6315     UINT32 power[5],i=0;
// 6316     UINT8 *p;
// 6317     GSN_WDD_TX_POW_SET_PARAM_T param;
// 6318 
// 6319     /* check the power number passed is valid
// 6320      */
// 6321     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
??CrossCallReturnLabel_188:
        MOVS     R4,R0
// 6322     if (!p)
        BEQ.N    ??AppS2wCmd_Wpower_0
// 6323     {
// 6324 		return S2W_EINVAL;
// 6325 	}
// 6326 	memset(&param,0,sizeof(GSN_WDD_TX_POW_SET_PARAM_T));
        MOVS     R2,#+5
        BL       ?Subroutine22
// 6327     status = AppS2wParse_Int(p, &power[0]);
// 6328     if ((status != S2W_SUCCESS) || (power[0] > 15))
??CrossCallReturnLabel_50:
        BL       ?Subroutine57
??CrossCallReturnLabel_363:
        CBNZ.N   R0,??AppS2wCmd_Wpower_0
        LDR      R0,[SP, #+8]
        CMP      R0,#+16
        BCS.N    ??AppS2wCmd_Wpower_0
// 6329     {
// 6330         return S2W_EINVAL;
// 6331     }
// 6332     param.txPow[0]= power[0];
        STRB     R0,[SP, #+0]
// 6333     for(i=1;i<5;i++)
        MOVS     R5,#+1
// 6334     {
// 6335 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wpower_1:
        BL       ?Subroutine37
??CrossCallReturnLabel_187:
        MOVS     R4,R0
// 6336 		if (p && *p)
        ITT      NE 
        LDRBNE   R0,[R4, #+0]
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_Wpower_2
// 6337         {
// 6338 		    status = AppS2wParse_Int(p, &power[i]);
// 6339 		    if ((status != S2W_SUCCESS) || (power[i] > 15))
        ADD      R0,SP,#+8
        ADD      R1,R0,R5, LSL #+2
        BL       ??Subroutine57_0
??CrossCallReturnLabel_361:
        CBNZ.N   R0,??AppS2wCmd_Wpower_0
        ADD      R0,SP,#+8
        LDR      R0,[R0, R5, LSL #+2]
        CMP      R0,#+16
        BCC.N    ??AppS2wCmd_Wpower_3
// 6340     {
// 6341         return S2W_EINVAL;
??AppS2wCmd_Wpower_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wpower_4
// 6342     }
// 6343             param.txPow[i]= power[i];
??AppS2wCmd_Wpower_3:
        ADD      R1,SP,#+0
        STRB     R0,[R5, R1]
// 6344 		}
// 6345 	}
??AppS2wCmd_Wpower_2:
        ADDS     R5,R5,#+1
        CMP      R5,#+5
        BCC.N    ??AppS2wCmd_Wpower_1
// 6346     status = GsnWdd_TxPowerSet(&s2wappMainTaskCtxt->if0.wddCtx, &param);
        BL       ?Subroutine78
??CrossCallReturnLabel_448:
          CFI FunCall GsnWdd_TxPowerSet
        BL       GsnWdd_TxPowerSet
// 6347     /* call the wdd function to set the wlan radio power
// 6348      */
// 6349     if (status != S2W_SUCCESS)
        UXTB     R0,R0
        CBNZ.N   R0,??AppS2wCmd_Wpower_4
// 6350     {
// 6351         return status;
// 6352     }
// 6353 
// 6354     /* update the active profile power number
// 6355      */
// 6356     s2wCurrent.txPower = power[0];
        LDR.W    R0,??DataTable430_1
        LDR      R1,[SP, #+8]
        STRB     R1,[R0, #+5]
// 6357     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Wpower_4:
        ADD      SP,SP,#+36
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock259
// 6358 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable421:
        DC8      "\"",0x0,0x0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond260 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientSend
          CFI Conditional ??CrossCallReturnLabel_200
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond261 Using cfiCommon0
          CFI (cfiCond261) Function AppS2wCmd_HttpClientSend
          CFI (cfiCond261) Conditional ??CrossCallReturnLabel_199
          CFI (cfiCond261) R4 Frame(CFA, -28)
          CFI (cfiCond261) R5 Frame(CFA, -24)
          CFI (cfiCond261) R6 Frame(CFA, -20)
          CFI (cfiCond261) R7 Frame(CFA, -16)
          CFI (cfiCond261) R8 Frame(CFA, -12)
          CFI (cfiCond261) R9 Frame(CFA, -8)
          CFI (cfiCond261) R14 Frame(CFA, -4)
          CFI (cfiCond261) CFA R13+64
          CFI Block cfiCond262 Using cfiCommon0
          CFI (cfiCond262) Function AppS2wCmd_HttpClientSend
          CFI (cfiCond262) Conditional ??CrossCallReturnLabel_198
          CFI (cfiCond262) R4 Frame(CFA, -28)
          CFI (cfiCond262) R5 Frame(CFA, -24)
          CFI (cfiCond262) R6 Frame(CFA, -20)
          CFI (cfiCond262) R7 Frame(CFA, -16)
          CFI (cfiCond262) R8 Frame(CFA, -12)
          CFI (cfiCond262) R9 Frame(CFA, -8)
          CFI (cfiCond262) R14 Frame(CFA, -4)
          CFI (cfiCond262) CFA R13+64
          CFI Block cfiCond263 Using cfiCommon0
          CFI (cfiCond263) Function AppS2wCmd_HttpClientSend
          CFI (cfiCond263) Conditional ??CrossCallReturnLabel_197
          CFI (cfiCond263) R4 Frame(CFA, -28)
          CFI (cfiCond263) R5 Frame(CFA, -24)
          CFI (cfiCond263) R6 Frame(CFA, -20)
          CFI (cfiCond263) R7 Frame(CFA, -16)
          CFI (cfiCond263) R8 Frame(CFA, -12)
          CFI (cfiCond263) R9 Frame(CFA, -8)
          CFI (cfiCond263) R14 Frame(CFA, -4)
          CFI (cfiCond263) CFA R13+64
          CFI Block cfiCond264 Using cfiCommon0
          CFI (cfiCond264) Function AppS2wCmd_HttpClientSend
          CFI (cfiCond264) Conditional ??CrossCallReturnLabel_196
          CFI (cfiCond264) R4 Frame(CFA, -28)
          CFI (cfiCond264) R5 Frame(CFA, -24)
          CFI (cfiCond264) R6 Frame(CFA, -20)
          CFI (cfiCond264) R7 Frame(CFA, -16)
          CFI (cfiCond264) R8 Frame(CFA, -12)
          CFI (cfiCond264) R9 Frame(CFA, -8)
          CFI (cfiCond264) R14 Frame(CFA, -4)
          CFI (cfiCond264) CFA R13+64
          CFI Block cfiCond265 Using cfiCommon0
          CFI (cfiCond265) Function AppS2wCmd_Wmode
          CFI (cfiCond265) Conditional ??CrossCallReturnLabel_195
          CFI (cfiCond265) R4 Frame(CFA, -36)
          CFI (cfiCond265) R5 Frame(CFA, -32)
          CFI (cfiCond265) R6 Frame(CFA, -28)
          CFI (cfiCond265) R7 Frame(CFA, -24)
          CFI (cfiCond265) R8 Frame(CFA, -20)
          CFI (cfiCond265) R9 Frame(CFA, -16)
          CFI (cfiCond265) R10 Frame(CFA, -12)
          CFI (cfiCond265) R11 Frame(CFA, -8)
          CFI (cfiCond265) R14 Frame(CFA, -4)
          CFI (cfiCond265) CFA R13+72
          CFI Block cfiCond266 Using cfiCommon0
          CFI (cfiCond266) Function AppS2wCmd_Wmode
          CFI (cfiCond266) Conditional ??CrossCallReturnLabel_194
          CFI (cfiCond266) R4 Frame(CFA, -36)
          CFI (cfiCond266) R5 Frame(CFA, -32)
          CFI (cfiCond266) R6 Frame(CFA, -28)
          CFI (cfiCond266) R7 Frame(CFA, -24)
          CFI (cfiCond266) R8 Frame(CFA, -20)
          CFI (cfiCond266) R9 Frame(CFA, -16)
          CFI (cfiCond266) R10 Frame(CFA, -12)
          CFI (cfiCond266) R11 Frame(CFA, -8)
          CFI (cfiCond266) R14 Frame(CFA, -4)
          CFI (cfiCond266) CFA R13+72
          CFI Block cfiCond267 Using cfiCommon0
          CFI (cfiCond267) Function AppS2wCmd_Wmode
          CFI (cfiCond267) Conditional ??CrossCallReturnLabel_193
          CFI (cfiCond267) R4 Frame(CFA, -36)
          CFI (cfiCond267) R5 Frame(CFA, -32)
          CFI (cfiCond267) R6 Frame(CFA, -28)
          CFI (cfiCond267) R7 Frame(CFA, -24)
          CFI (cfiCond267) R8 Frame(CFA, -20)
          CFI (cfiCond267) R9 Frame(CFA, -16)
          CFI (cfiCond267) R10 Frame(CFA, -12)
          CFI (cfiCond267) R11 Frame(CFA, -8)
          CFI (cfiCond267) R14 Frame(CFA, -4)
          CFI (cfiCond267) CFA R13+72
          CFI Block cfiCond268 Using cfiCommon0
          CFI (cfiCond268) Function AppS2wCmd_Wmode
          CFI (cfiCond268) Conditional ??CrossCallReturnLabel_192
          CFI (cfiCond268) R4 Frame(CFA, -36)
          CFI (cfiCond268) R5 Frame(CFA, -32)
          CFI (cfiCond268) R6 Frame(CFA, -28)
          CFI (cfiCond268) R7 Frame(CFA, -24)
          CFI (cfiCond268) R8 Frame(CFA, -20)
          CFI (cfiCond268) R9 Frame(CFA, -16)
          CFI (cfiCond268) R10 Frame(CFA, -12)
          CFI (cfiCond268) R11 Frame(CFA, -8)
          CFI (cfiCond268) R14 Frame(CFA, -4)
          CFI (cfiCond268) CFA R13+72
          CFI Block cfiCond269 Using cfiCommon0
          CFI (cfiCond269) Function AppS2wCmd_Wmode
          CFI (cfiCond269) Conditional ??CrossCallReturnLabel_191
          CFI (cfiCond269) R4 Frame(CFA, -36)
          CFI (cfiCond269) R5 Frame(CFA, -32)
          CFI (cfiCond269) R6 Frame(CFA, -28)
          CFI (cfiCond269) R7 Frame(CFA, -24)
          CFI (cfiCond269) R8 Frame(CFA, -20)
          CFI (cfiCond269) R9 Frame(CFA, -16)
          CFI (cfiCond269) R10 Frame(CFA, -12)
          CFI (cfiCond269) R11 Frame(CFA, -8)
          CFI (cfiCond269) R14 Frame(CFA, -4)
          CFI (cfiCond269) CFA R13+72
          CFI Block cfiCond270 Using cfiCommon0
          CFI (cfiCond270) Function AppS2wCmd_Wmode
          CFI (cfiCond270) Conditional ??CrossCallReturnLabel_190
          CFI (cfiCond270) R4 Frame(CFA, -36)
          CFI (cfiCond270) R5 Frame(CFA, -32)
          CFI (cfiCond270) R6 Frame(CFA, -28)
          CFI (cfiCond270) R7 Frame(CFA, -24)
          CFI (cfiCond270) R8 Frame(CFA, -20)
          CFI (cfiCond270) R9 Frame(CFA, -16)
          CFI (cfiCond270) R10 Frame(CFA, -12)
          CFI (cfiCond270) R11 Frame(CFA, -8)
          CFI (cfiCond270) R14 Frame(CFA, -4)
          CFI (cfiCond270) CFA R13+72
          CFI Block cfiCond271 Using cfiCommon0
          CFI (cfiCond271) Function AppS2wCmd_Wmode
          CFI (cfiCond271) Conditional ??CrossCallReturnLabel_189
          CFI (cfiCond271) R4 Frame(CFA, -36)
          CFI (cfiCond271) R5 Frame(CFA, -32)
          CFI (cfiCond271) R6 Frame(CFA, -28)
          CFI (cfiCond271) R7 Frame(CFA, -24)
          CFI (cfiCond271) R8 Frame(CFA, -20)
          CFI (cfiCond271) R9 Frame(CFA, -16)
          CFI (cfiCond271) R10 Frame(CFA, -12)
          CFI (cfiCond271) R11 Frame(CFA, -8)
          CFI (cfiCond271) R14 Frame(CFA, -4)
          CFI (cfiCond271) CFA R13+72
          CFI Block cfiCond272 Using cfiCommon0
          CFI (cfiCond272) Function AppS2wCmd_Wpower
          CFI (cfiCond272) Conditional ??CrossCallReturnLabel_188
          CFI (cfiCond272) R4 Frame(CFA, -12)
          CFI (cfiCond272) R5 Frame(CFA, -8)
          CFI (cfiCond272) R14 Frame(CFA, -4)
          CFI (cfiCond272) CFA R13+48
          CFI Block cfiCond273 Using cfiCommon0
          CFI (cfiCond273) Function AppS2wCmd_Wpower
          CFI (cfiCond273) Conditional ??CrossCallReturnLabel_187
          CFI (cfiCond273) R4 Frame(CFA, -12)
          CFI (cfiCond273) R5 Frame(CFA, -8)
          CFI (cfiCond273) R14 Frame(CFA, -4)
          CFI (cfiCond273) CFA R13+48
          CFI Block cfiCond274 Using cfiCommon0
          CFI (cfiCond274) Function AppS2wCmd_Dns
          CFI (cfiCond274) Conditional ??CrossCallReturnLabel_186
          CFI (cfiCond274) R4 Frame(CFA, -20)
          CFI (cfiCond274) R5 Frame(CFA, -16)
          CFI (cfiCond274) R6 Frame(CFA, -12)
          CFI (cfiCond274) R7 Frame(CFA, -8)
          CFI (cfiCond274) R14 Frame(CFA, -4)
          CFI (cfiCond274) CFA R13+56
          CFI Block cfiCond275 Using cfiCommon0
          CFI (cfiCond275) Function AppS2wCmd_Dns
          CFI (cfiCond275) Conditional ??CrossCallReturnLabel_185
          CFI (cfiCond275) R4 Frame(CFA, -20)
          CFI (cfiCond275) R5 Frame(CFA, -16)
          CFI (cfiCond275) R6 Frame(CFA, -12)
          CFI (cfiCond275) R7 Frame(CFA, -8)
          CFI (cfiCond275) R14 Frame(CFA, -4)
          CFI (cfiCond275) CFA R13+56
          CFI Block cfiPicker276 Using cfiCommon1
          CFI (cfiPicker276) NoFunction
          CFI (cfiPicker276) Picker
        THUMB
?Subroutine37:
        ADD      R0,SP,#+32
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wpower AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wpower AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Dns AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Dns AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond260
          CFI EndBlock cfiCond261
          CFI EndBlock cfiCond262
          CFI EndBlock cfiCond263
          CFI EndBlock cfiCond264
          CFI EndBlock cfiCond265
          CFI EndBlock cfiCond266
          CFI EndBlock cfiCond267
          CFI EndBlock cfiCond268
          CFI EndBlock cfiCond269
          CFI EndBlock cfiCond270
          CFI EndBlock cfiCond271
          CFI EndBlock cfiCond272
          CFI EndBlock cfiCond273
          CFI EndBlock cfiCond274
          CFI EndBlock cfiCond275
          CFI EndBlock cfiPicker276
// 6359 
// 6360 
// 6361 
// 6362 #ifdef S2W_IPv6_SUPPORT
// 6363 
// 6364 
// 6365 UINT8
// 6366 AppS2wCmd_Nsetv6(UINT8* ptr)
// 6367 {
// 6368   GSN_NWIF_IPv6_CONFIG_T Ipv6Params;
// 6369   UINT8 *p;
// 6370   UINT32 IPv6Addr[4],IPv6AddrType,status;
// 6371 
// 6372   memset(&Ipv6Params,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
// 6373   
// 6374   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6375   
// 6376   if(p == NULL)
// 6377     return S2W_FAILURE;
// 6378 
// 6379   status = inet_pton(AF_INET6, (const char*)p, (VOID*)IPv6Addr);
// 6380    if(status != TRUE)
// 6381     return S2W_EINVAL;
// 6382 
// 6383   GSN_IPv6_CHANGE_ENDIAN(IPv6Addr);
// 6384 
// 6385 
// 6386   IPv6AddrType = GSN_IPv6_ADDR_TYPE(IPv6Addr);
// 6387 
// 6388   switch(IPv6AddrType)
// 6389   {
// 6390 
// 6391 
// 6392       /* Set LinkLocal IPv6 address    */
// 6393     case GSN_IPv6_LINK_LOCAL:
// 6394 
// 6395       Ipv6Params.flags |= GSN_NWIF_IP6_FLG_MANUAL_LINK_LOCAL_ADDR;
// 6396       memcpy(Ipv6Params.linkLocalAddr,IPv6Addr,S2W_IPv6_ADDR_LENGTH);
// 6397       break;
// 6398 
// 6399     /* Set Global address   */
// 6400     case GSN_IPv6_GLOBAL:
// 6401 
// 6402       Ipv6Params.flags |= GSN_NWIF_IP6_FLG_MANUAL_GLOBAL_ADDR;
// 6403       memcpy(Ipv6Params.globalAddr,IPv6Addr,S2W_IPv6_ADDR_LENGTH);
// 6404       break;
// 6405     /* Can not set these as interface ipv6 address */
// 6406     case GSN_IPv6_INVALID:
// 6407     case GSN_IPv6_MULTICAST:
// 6408     case GSN_IPv6_LOOPBACK:
// 6409     case GSN_IPv6_UNSPECIFIED:
// 6410       return S2W_EINVAL;
// 6411 
// 6412 
// 6413     default:
// 6414       return S2W_EINVAL;
// 6415   }
// 6416 
// 6417 
// 6418    p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6419 
// 6420   if(!p)
// 6421     Ipv6Params.prefixLen = S2W_IPv6_DEFAULT_PREFIX_LENGTH;
// 6422   else
// 6423   {
// 6424     status = AppS2wParse_Int(p, (UINT32*)&Ipv6Params.prefixLen);
// 6425     if (status != S2W_SUCCESS)
// 6426     {
// 6427       return S2W_EINVAL;
// 6428     }
// 6429 
// 6430   }
// 6431 
// 6432   status = GsnNwif_IPv6Configure(&s2wappMainTaskCtxt->if0.nwifCtx,&Ipv6Params,NULL);
// 6433 
// 6434    if(GSN_NW_IF_CLOSED == status)
// 6435 	{
// 6436 		GSN_NWIF_IP_CONFIG_T ipCfg = {0};
// 6437 
// 6438 		ipCfg .flag = GSN_NWIF_IPCONFIG_FLAG_IPV6_INIT;
// 6439 
// 6440 		memcpy((UINT8 *)&ipCfg.ipv6, (UINT8 *)&Ipv6Params, sizeof(Ipv6Params));
// 6441 		
// 6442 		status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipCfg, NULL);
// 6443 	}	
// 6444 	if(status != GSN_SUCCESS )
// 6445 	{
// 6446 		return S2W_FAILURE;
// 6447 	}
// 6448 
// 6449     return S2W_SUCCESS;
// 6450 }
// 6451 
// 6452 void S2w_getDhcpv6Clientconfig(GSN_NWIF_DHCP_PARAMS_T *dhcpv6Params)
// 6453 {
// 6454       dhcpv6Params->ianaID = 0x12345678;
// 6455       dhcpv6Params->T1 = 0x11111111;
// 6456       dhcpv6Params->T2 = 0x11111111;
// 6457       dhcpv6Params->preferredLifeTime = 0x0000ffff;
// 6458       dhcpv6Params->validLifeTime = 0x0000ffff;
// 6459   
// 6460       s2wappMainTaskCtxt->if0.nwifCtx.notifyIpv6Cb = DHCP_notify;
// 6461       dhcpv6Params->pStack =  (UINT8 *)dhcpv6ClientStack;
// 6462       dhcpv6Params->stackSize = APP_NWIF_DHCPv6_CLIENT_THREAD_STACK_SIZE;
// 6463       dhcpv6Params->pPktPoolHndl = GsnNw_PktPoolHndlGet(&s2wappMainTaskCtxt->nwCtx, GSN_NW_LBUF_PKT_POOL);
// 6464  
// 6465 }
// 6466 
// 6467 
// 6468 
// 6469 /**
// 6470  ******************************************************************
// 6471  * @ingroup S2w-Application
// 6472  * @brief Process the AT+NDHCPv6 Command.
// 6473  * @param ptr Pointer to the user input string.
// 6474  * @return status.
// 6475  ******************************************************************/
// 6476 UINT8
// 6477 AppS2wCmd_Ndhcpv6(UINT8 *ptr)
// 6478 {
// 6479   UINT8 *p,enable,oldStatus;
// 6480   UINT32 status;
// 6481   GSN_NWIF_IPv6_CONFIG_T userIpv6Conf;
// 6482   S2W_STATUS_INFO_T currentConfig;
// 6483   GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
// 6484   
// 6485   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6486   status = AppS2wParse_Boolean(p, &enable);
// 6487     if (status != S2W_SUCCESS)
// 6488     {
// 6489         return status;
// 6490     }
// 6491     oldStatus = s2wCurrent.netConf.dhcpv6;
// 6492     if(enable)
// 6493     {
// 6494       if(GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE)
// 6495       {
// 6496           memset(&userIpv6Conf,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
// 6497           memset(&currentConfig,0,sizeof(S2W_STATUS_INFO_T));
// 6498           memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
// 6499       
// 6500    
// 6501           userIpv6Conf.flags = GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG;
// 6502 
// 6503           S2w_getDhcpv6Clientconfig(&dhcpv6Params);
// 6504 
// 6505           /* stop if dhcpv6 thread is already running */
// 6506           GsnNwIf_DhcpV6Stop(&s2wappMainTaskCtxt->if0.nwifCtx);
// 6507       
// 6508           status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Conf, &dhcpv6Params);
// 6509           S2wL3Wait = TRUE;
// 6510           if(status != GSN_OPERATION_IN_PROGRESS)
// 6511           DHCP_notify(GSN_FAILURE, &s2wappMainTaskCtxt->if0.nwifCtx);
// 6512       
// 6513           GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
// 6514           if(L3Dhcpv6Status)
// 6515           {
// 6516           AppS2wHdrAndIpv6_Print();
// 6517           L3Dhcpv6Status = FALSE;
// 6518           s2wCurrent.netConf.dhcpv6 = TRUE;
// 6519           return S2W_SUCCESS;
// 6520           }
// 6521           else
// 6522           {
// 6523           L3Dhcpv6Status = FALSE;
// 6524           s2wCurrent.netConf.dhcpv6 = oldStatus;
// 6525           return S2W_FAILURE;
// 6526           }
// 6527      
// 6528     }
// 6529     else
// 6530     {
// 6531       /* No L2 connection */
// 6532       s2wCurrent.netConf.dhcpv6 = TRUE;
// 6533       return S2W_SUCCESS;
// 6534     }
// 6535     
// 6536     }
// 6537     
// 6538     else
// 6539     {
// 6540       s2wCurrent.netConf.dhcpv6 = FALSE;
// 6541     }
// 6542     return S2W_SUCCESS;
// 6543   
// 6544 }
// 6545 
// 6546 
// 6547 
// 6548 
// 6549 
// 6550 
// 6551 
// 6552 
// 6553 
// 6554 
// 6555 
// 6556 
// 6557 
// 6558 /**
// 6559  ******************************************************************
// 6560  * @ingroup S2w-Application
// 6561  * @brief Process the AT+NCUDPv6 Command.
// 6562  * @param ptr Pointer to the user input string.
// 6563  * @return status.
// 6564  ******************************************************************/
// 6565 PUBLIC UINT8
// 6566 AppS2wCmd_Ncudpv6(UINT8 *ptr)
// 6567 {
// 6568   UINT8 status;
// 6569   UINT8 cid;
// 6570   UINT8 *p;
// 6571   UINT32 remotePort,sourcePort=0;
// 6572   S2W_NETDATA_T remoteServerData;
// 6573   
// 6574   memset(&remoteServerData,0,sizeof(S2W_NETDATA_T));
// 6575   
// 6576   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6577   
// 6578   if(p == NULL)
// 6579     return S2W_FAILURE;
// 6580   
// 6581 
// 6582   
// 6583    status = inet_pton(AF_INET6, (const char*)p, (VOID*)remoteServerData.ipv6Addr);
// 6584    
// 6585      if(status != TRUE)
// 6586         return S2W_EINVAL;
// 6587 
// 6588       GSN_IPv6_CHANGE_ENDIAN(remoteServerData.ipv6Addr);
// 6589 
// 6590 
// 6591 
// 6592   
// 6593   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6594   
// 6595   if(p == NULL)
// 6596     return S2W_FAILURE;
// 6597  
// 6598   status = AppS2wParse_Int(p, &remotePort);
// 6599 
// 6600   if (status != S2W_SUCCESS || !is_valid_port(remotePort))
// 6601   {
// 6602     return S2W_EINVAL;
// 6603   }
// 6604   
// 6605   remoteServerData.port = remotePort;
// 6606   
// 6607   /* If source port is specified */
// 6608   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6609   
// 6610   if(p != NULL)
// 6611   {
// 6612     status = AppS2wParse_Int(p, &sourcePort);
// 6613  
// 6614     if (status != S2W_SUCCESS || !is_valid_port(sourcePort))
// 6615     {
// 6616       return S2W_EINVAL;
// 6617     }
// 6618     
// 6619     if (AppS2wParse_NextParamGet(&ptr))
// 6620       return S2W_EINVAL;
// 6621   }
// 6622     
// 6623     remoteServerData.proto = S2W_NETDATA_PROTO_UDP;
// 6624     remoteServerData.mode  = S2W_NETDATA_MODE_CLIENT;
// 6625   
// 6626   status = AppS2wHal_NetUdpClientv6(&remoteServerData, &cid,(UINT16)sourcePort);
// 6627     
// 6628         return status;
// 6629     
// 6630     
// 6631      
// 6632 }
// 6633 /**
// 6634  ******************************************************************
// 6635  * @ingroup S2w-Application
// 6636  * @brief Process the AT+NSUDPv6 Command.
// 6637  * @param ptr Pointer to the user input string.
// 6638  * @return status.
// 6639  ******************************************************************/
// 6640 UINT8
// 6641 AppS2wCmd_Nsudpv6(UINT8* ptr)
// 6642 {
// 6643     S2W_NETDATA_T serverData;
// 6644     UINT8 status;
// 6645     UINT32 port;
// 6646     UINT8 cid;
// 6647     
// 6648     status = AppS2wParse_Int(ptr, &port);
// 6649     if (status != S2W_SUCCESS || !is_valid_port(port))
// 6650     {
// 6651         return S2W_EINVAL;
// 6652     }
// 6653     serverData.port = port;
// 6654     serverData.proto = S2W_NETDATA_PROTO_UDP;
// 6655     serverData.mode = S2W_NETDATA_MODE_SERVER;
// 6656     
// 6657     status = AppS2wHal_NetUdpServerv6(&serverData, &cid);
// 6658     if (status != S2W_SUCCESS)
// 6659     {
// 6660         return status;
// 6661     }
// 6662 
// 6663     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
// 6664     return status;
// 6665  
// 6666 }
// 6667 /**
// 6668  ******************************************************************
// 6669  * @ingroup S2w-Application
// 6670  * @brief Process the AT+NCTCPv Command.
// 6671  * @param ptr Pointer to the user input string.
// 6672  * @return status.
// 6673  ******************************************************************/
// 6674 UINT8
// 6675 AppS2wCmd_Nctcpv6(UINT8* ptr)
// 6676 {
// 6677     UINT32 status;
// 6678     UINT8 cid;
// 6679     UINT8 *p;
// 6680     UINT32 remotePort;
// 6681     S2W_NETDATA_T remoteServerData;
// 6682   
// 6683   memset(&remoteServerData,0,sizeof(S2W_NETDATA_T));
// 6684   
// 6685   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6686   
// 6687   if(p == NULL)
// 6688     return S2W_FAILURE;
// 6689   
// 6690   
// 6691    status = inet_pton(AF_INET6, (const char*)p, (VOID*)remoteServerData.ipv6Addr);
// 6692     if(status != TRUE)
// 6693       return S2W_EINVAL;
// 6694 
// 6695       GSN_IPv6_CHANGE_ENDIAN(remoteServerData.ipv6Addr);
// 6696 
// 6697   
// 6698   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 6699   
// 6700   if(p == NULL)
// 6701     return S2W_FAILURE;
// 6702  
// 6703   status = AppS2wParse_Int(p, &remotePort);
// 6704   
// 6705   if (status != S2W_SUCCESS || !is_valid_port(remotePort))
// 6706   {
// 6707     return S2W_EINVAL;
// 6708   }
// 6709   
// 6710   remoteServerData.port = remotePort;
// 6711   
// 6712   remoteServerData.proto = S2W_NETDATA_PROTO_TCP;
// 6713   remoteServerData.mode  = S2W_NETDATA_MODE_CLIENT;
// 6714   
// 6715   status = AppS2wHal_NetTcpClientv6(&remoteServerData, &cid);
// 6716     if (status != S2W_SUCCESS)
// 6717     {
// 6718         return status;
// 6719     } 
// 6720     
// 6721   AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
// 6722   
// 6723   return status;
// 6724   
// 6725 }
// 6726 /**
// 6727  ******************************************************************
// 6728  * @ingroup S2w-Application
// 6729  * @brief Process the AT+NSTCPv6 Command.
// 6730  * @param ptr Pointer to the user input string.
// 6731  * @return status.
// 6732  ******************************************************************/
// 6733 UINT8
// 6734 AppS2wCmd_Nstcpv6(UINT8* ptr)
// 6735 {
// 6736     S2W_NETDATA_T serverData;
// 6737     UINT8 status;
// 6738     UINT32 port;
// 6739     UINT8 cid;
// 6740 
// 6741     status = AppS2wParse_Int(ptr, &port);
// 6742     if (status != S2W_SUCCESS || !is_valid_port(port))
// 6743     {
// 6744         return S2W_EINVAL;
// 6745     }
// 6746 
// 6747     serverData.port = port;
// 6748     serverData.proto = S2W_NETDATA_PROTO_TCP;
// 6749     serverData.mode = S2W_NETDATA_MODE_SERVER;
// 6750 
// 6751     status = AppS2wHal_NetTcpServerv6(&serverData, &cid);
// 6752     if (status != S2W_SUCCESS)
// 6753     {
// 6754         return status;
// 6755     }
// 6756 
// 6757     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
// 6758 
// 6759     return status;
// 6760 }
// 6761 
// 6762 /**
// 6763  ******************************************************************
// 6764 * @ingroup S2w-Application
// 6765  * @brief Process the AT+DHCPvSERVER command
// 6766  *   This function validate the parameter passed and call the dhcpv6 server start function.
// 6767  * @param ptr Pointer to the user input string.
// 6768 
// 6769  * @return S2W_SUCCESS - operation successful.
// 6770  * @retval S2W_EINVAL  - operation failure-invalid command.
// 6771  * @retval S2W_FAILURE - operation failure-ip config failed.
// 6772  ******************************************************************/
// 6773 
// 6774 UINT8 AppS2wCmd_Dhcpv6Server(UINT8 *ptr)
// 6775 {
// 6776 
// 6777   UINT8 status;
// 6778   UINT8 enable, *p;
// 6779   GSN_DHCPV6_SRVR_INIT_PARAM_T dhcpv6ServerInitParams;
// 6780   UINT8 macAddr[6];
// 6781   GSN_NWIF_IP_CONFIG_T nwParams;
// 6782 
// 6783 
// 6784   p = AppS2wParse_NextParamGet(&ptr);
// 6785     if (!p)
// 6786     {
// 6787         return S2W_EINVAL;
// 6788     }
// 6789     status = AppS2wParse_Boolean(p, &enable);
// 6790     if (status != S2W_SUCCESS)
// 6791     {
// 6792         return status;
// 6793     }
// 6794 
// 6795         if(enable)
// 6796         {
// 6797           GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
// 6798           memcpy(dhcpv6ServerInitParams.startAddr,nwParams.ipv6.globalAddr,16);
// 6799           dhcpv6ServerInitParams.serverId.opCode = OPTION_SERVERID;  /* DHCPV6_SERVER_DUID_TYPE_LINK_ONLY  is  only supported. */
// 6800           dhcpv6ServerInitParams.serverId.optionLength = 0x000A;
// 6801           dhcpv6ServerInitParams.serverId.duidType = DHCPV6_SERVER_DUID_TYPE_LINK_ONLY;
// 6802           dhcpv6ServerInitParams.serverId.hardwareType = DHCPV6_HW_TYPE_IEEE_802;
// 6803 		  //status = S2w_LoadMacAddr(macAddr);
// 6804 		  S2w_macAddrRTCGet(macAddr);
// 6805 		  //if (status != S2W_SUCCESS)
// 6806 			//return S2W_FAILURE;
// 6807 
// 6808 		  macAddr[0] += macAddr[1];
// 6809           macAddr[1] = macAddr[0]-macAddr[1];
// 6810           macAddr[0] -= macAddr[1];
// 6811           *(ULONG*)(macAddr+2) = htonl(*(ULONG*)(macAddr+2));
// 6812           memcpy((VOID*)&dhcpv6ServerInitParams.serverId.linkLayerAddressMsw,(VOID*)macAddr,2);
// 6813           memcpy((VOID*)&dhcpv6ServerInitParams.serverId.linkLayerAddressLsw,(VOID*)(macAddr+2),4);
// 6814 
// 6815           serverId.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
// 6816 
// 6817           status = GsnDhcpv6Srvr_start(&serverId,&dhcpv6ServerInitParams);
// 6818           
// 6819           if(status != S2W_SUCCESS)
// 6820             return S2W_FAILURE;
// 6821         }
// 6822       else
// 6823       {
// 6824         status = GsnDhcpv6Srvr_Stop(&serverId);
// 6825         return status;
// 6826       }
// 6827         return status;
// 6828 
// 6829 }
// 6830 
// 6831 
// 6832 #endif
// 6833 
// 6834 
// 6835 /**
// 6836  ******************************************************************
// 6837  * @ingroup S2w-Application
// 6838  * @brief Process the AT+NCUDP Command.
// 6839  * @param ptr Pointer to the user input string.
// 6840  * @return status.
// 6841  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock277 Using cfiCommon0
          CFI Function AppS2wCmd_Ncudp
        THUMB
// 6842 PUBLIC UINT8
// 6843 AppS2wCmd_Ncudp(UINT8 *ptr)
// 6844 {
AppS2wCmd_Ncudp:
        PUSH     {LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+4
        SUB      SP,SP,#+76
          CFI CFA R13+80
// 6845     S2W_NETDATA_T peerData;
// 6846     UINT8 *temp = ptr;
        STR      R0,[SP, #+4]
// 6847     UINT32 status;
// 6848     UINT8 cid;
// 6849     UINT32 srcPort=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
// 6850     UINT8 *p;
// 6851 
// 6852     if (s2wIsAutoconnected)
        LDR.W    R0,??DataTable440_1
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Ncudp_0
// 6853     {
// 6854         return S2W_EINVAL;
// 6855     }
// 6856     if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
        LDR.W    R0,??DataTable442
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Ncudp_1
// 6857     {
// 6858         return S2W_LINK_LOST_EVT;
        MOVS     R0,#+9
        B.N      ??AppS2wCmd_Ncudp_2
// 6859     }
// 6860 
// 6861     status = AppS2wParse_AddrPort(&temp, &peerData);
??AppS2wCmd_Ncudp_1:
        ADD      R1,SP,#+12
        ADD      R0,SP,#+4
          CFI FunCall AppS2wParse_AddrPort
        BL       AppS2wParse_AddrPort
// 6862     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Ncudp_2
// 6863     {
// 6864         return status;
// 6865     }
// 6866 
// 6867     peerData.proto = S2W_NETDATA_PROTO_UDP;
        STRB     R0,[SP, #+13]
// 6868     peerData.mode = S2W_NETDATA_MODE_CLIENT;
        STRB     R0,[SP, #+12]
// 6869 
// 6870     /* check the srs port given */
// 6871     p = AppS2wParse_NextParamGet(&temp);
        BL       ?Subroutine35
// 6872     if (p)
??CrossCallReturnLabel_174:
        CBZ.N    R0,??AppS2wCmd_Ncudp_3
// 6873     {
// 6874         status = AppS2wParse_Int(p, &srcPort);
// 6875         if (status != S2W_SUCCESS || !is_valid_port(srcPort))
        BL       ?Subroutine51
??CrossCallReturnLabel_297:
        CBNZ.N   R0,??AppS2wCmd_Ncudp_0
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_Ncudp_0
        CMP      R0,#+65536
        BCS.N    ??AppS2wCmd_Ncudp_0
// 6876         {
// 6877             return S2W_EINVAL;
// 6878         }
// 6879         if (AppS2wParse_NextParamGet(&temp))
        BL       ?Subroutine35
??CrossCallReturnLabel_173:
        CBZ.N    R0,??AppS2wCmd_Ncudp_3
// 6880             return S2W_EINVAL;
??AppS2wCmd_Ncudp_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Ncudp_2
// 6881 
// 6882 
// 6883     }
// 6884     status = AppS2wHal_NetUdpClient(&peerData, &cid,(UINT16)srcPort);
??AppS2wCmd_Ncudp_3:
        LDR      R2,[SP, #+0]
        UXTH     R2,R2
        ADD      R1,SP,#+8
        ADD      R0,SP,#+12
          CFI FunCall AppS2wHal_NetUdpClient
        BL       AppS2wHal_NetUdpClient
// 6885     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Ncudp_2
// 6886     {
// 6887         return status;
// 6888     }
// 6889 
// 6890     AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
        BL       ?Subroutine119
// 6891 
// 6892     return status;
??CrossCallReturnLabel_568:
        MOVS     R0,#+0
??AppS2wCmd_Ncudp_2:
        ADD      SP,SP,#+76
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock277
// 6893 
// 6894 }
// 6895 
// 6896 
// 6897 /**
// 6898  ******************************************************************
// 6899  * @ingroup S2w-Application
// 6900  * @brief Process the ATS Command.
// 6901  *   This function updates the register setting of S2W.
// 6902  * @param ptr Pointer to the user input string.
// 6903  * @return S2W_SUCCESS - operation successful.
// 6904  * @retval S2W_EINVAL  - operation failure-invalid command.
// 6905  * @retval S2W_FAILURE - operation failure- Register setting failed.
// 6906  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock278 Using cfiCommon0
          CFI Function AppS2wCmd_Settings
        THUMB
// 6907 UINT8
// 6908 AppS2wCmd_Settings(UINT8 *ptr)
// 6909 {
AppS2wCmd_Settings:
        PUSH     {R3-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        MOV      R4,R0
// 6910     UINT8 status = S2W_EINVAL;
        MOVS     R5,#+2
// 6911     UINT32 value;
// 6912     UINT8 which;
// 6913 
// 6914 	/* Bug Fix 5886 - Command to configure max recv/recvfrom on socket is not working */
// 6915     if (*ptr < '0' || *ptr > '9' || *(ptr + 1) != '=')
        LDRB     R0,[R4, #+0]
        SUB      R1,R0,#+48
        CMP      R1,#+10
        BCS.N    ??AppS2wCmd_Settings_0
        LDRB     R1,[R4, #+1]
        CMP      R1,#+61
        BNE.N    ??AppS2wCmd_Settings_0
// 6916     {
// 6917        return S2W_EINVAL;
// 6918     }
// 6919 	
// 6920     which = *ptr - '0';
        SUB      R6,R0,#+48
        UXTB     R6,R6
// 6921 
// 6922 	if (which > (S2W_NUM_TIMEOUTS + 2))
        CMP      R6,#+11
        BGE.N    ??AppS2wCmd_Settings_0
// 6923     {
// 6924         return S2W_EINVAL;
// 6925     }
// 6926 
// 6927     ptr += 2;
        ADDS     R4,R4,#+2
        B.N      ??AppS2wCmd_Settings_1
// 6928     while (isspace(*ptr))
// 6929     {
// 6930         ptr++;
??AppS2wCmd_Settings_2:
        ADDS     R4,R4,#+1
// 6931     }
??AppS2wCmd_Settings_1:
        LDRB     R0,[R4, #+0]
          CFI FunCall isspace
        BL       isspace
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Settings_2
// 6932 
// 6933     if (*ptr == '?')
        LDRB     R0,[R4, #+0]
        LDR.W    R9,??DataTable430_1
        ADD      R8,R9,R6, LSL #+1
        ADD      R7,R9,#+960
        CMP      R0,#+63
        BNE.N    ??AppS2wCmd_Settings_3
// 6934     {
// 6935 		UINT32 localValue=0;
        MOVS     R1,#+0
// 6936         status = S2W_SUCCESS;
        MOVS     R5,#+0
// 6937 		switch(which)
        CMP      R6,#+8
        BEQ.N    ??AppS2wCmd_Settings_4
        CMP      R6,#+9
        BNE.N    ??AppS2wCmd_Settings_5
// 6938 		{
// 6939 			case 9:
// 6940 			localValue = s2wCurrent.socRdCnt;
        LDRB     R1,[R9, #+960]
// 6941 			break;
        B.N      ??AppS2wCmd_Settings_6
// 6942 			case 8:
// 6943 			localValue = s2wCurrent.autoExitTimeout;
??AppS2wCmd_Settings_4:
        LDR      R1,[R7, #+4]
// 6944 			break;
        B.N      ??AppS2wCmd_Settings_6
// 6945 			default:
// 6946 			if(which < S2W_NUM_TIMEOUTS)
??AppS2wCmd_Settings_5:
        CMP      R6,#+8
        IT       LT 
        LDRHLT   R1,[R8, #+452]
// 6947 				localValue = s2wCurrent.registers[which];
// 6948 			break;
// 6949     }
// 6950 		S2w_Printf("\r\n%u", localValue);
??AppS2wCmd_Settings_6:
        ADR.W    R0,`?<Constant "\\r\\n%u">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_Settings_7
// 6951 	}
// 6952     else if (isdigit(*ptr))
??AppS2wCmd_Settings_3:
        SUBS     R0,R0,#+48
        CMP      R0,#+10
        BCS.N    ??AppS2wCmd_Settings_7
// 6953     {
// 6954         /* validate the input string
// 6955          */
// 6956         status = AppS2wParse_Int(ptr, &value);
        ADD      R1,SP,#+0
        BL       ??Subroutine57_0
??CrossCallReturnLabel_360:
        MOVS     R5,R0
// 6957         if (status != S2W_SUCCESS || value > 65535)
        BNE.N    ??AppS2wCmd_Settings_0
        LDR      R0,[SP, #+0]
        CMP      R0,#+65536
        BCC.N    ??AppS2wCmd_Settings_8
// 6958         {
// 6959             return S2W_EINVAL;
??AppS2wCmd_Settings_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Settings_9
// 6960         }
// 6961 
// 6962         /* update the current active profile
// 6963          */
// 6964 		if(which < S2W_NUM_TIMEOUTS)
??AppS2wCmd_Settings_8:
        CMP      R6,#+8
        BGE.N    ??AppS2wCmd_Settings_10
// 6965         s2wCurrent.registers[which] = value;
        STRH     R0,[R8, #+452]
// 6966 
// 6967 		if(which == 9)
// 6968 		{
// 6969 			s2wCurrent.socRdCnt=value;
// 6970 		}
// 6971 		else if(which == 8)
// 6972 		{
// 6973 			s2wCurrent.autoExitTimeout = value;
// 6974 		}
// 6975         if(S2W_REG_SCAN_TIME == which)/* scan time in mSec. Set it in wlan Fw too*/
        CMP      R6,#+5
        BNE.N    ??AppS2wCmd_Settings_7
// 6976         {
// 6977             /* set the scan time
// 6978             */
// 6979             s2wCurrent.minScanTime = value;
        LDR      R0,[SP, #+0]
        STRH     R0,[R9, #+470]
// 6980             status = GsnWdd_ScanParamSet(&s2wappMainTaskCtxt->if0.wddCtx,s2wCurrent.minScanTime,s2wCurrent.minScanTime,0);
        MOVS     R3,#+0
        LDR.N    R0,??DataTable423_1
        LDRH     R2,[R9, #+470]
        LDR      R0,[R0, #+0]
        MOV      R1,R2
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_ScanParamSet
        BL       GsnWdd_ScanParamSet
        MOV      R5,R0
// 6981         }
// 6982     }
// 6983     return status;
??AppS2wCmd_Settings_7:
        UXTB     R0,R5
??AppS2wCmd_Settings_9:
        POP      {R1,R4-R9,PC}    ;; return
??AppS2wCmd_Settings_10:
        CMP      R6,#+9
        IT       EQ 
        STRBEQ   R0,[R9, #+960]
        BEQ.N    ??AppS2wCmd_Settings_7
        CMP      R6,#+8
        BNE.N    ??AppS2wCmd_Settings_7
        STR      R0,[R7, #+4]
        B.N      ??AppS2wCmd_Settings_7
          CFI EndBlock cfiBlock278
// 6984 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable423:
        DC32     s2wCurrent+0x1B1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable423_1:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%u">`:
        DC8 "\015\012%u"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond279 Using cfiCommon0
          CFI Function AppS2wCmd_Wpower
          CFI Conditional ??CrossCallReturnLabel_363
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+48
          CFI Block cfiCond280 Using cfiCommon0
          CFI (cfiCond280) Function AppS2wCmd_Nauto
          CFI (cfiCond280) Conditional ??CrossCallReturnLabel_362
          CFI (cfiCond280) R4 Frame(CFA, -12)
          CFI (cfiCond280) R5 Frame(CFA, -8)
          CFI (cfiCond280) R14 Frame(CFA, -4)
          CFI (cfiCond280) CFA R13+96
          CFI Block cfiPicker281 Using cfiCommon1
          CFI (cfiPicker281) NoFunction
          CFI (cfiPicker281) Picker
        THUMB
?Subroutine57:
        ADD      R1,SP,#+8
          CFI Block cfiCond282 Using cfiCommon0
          CFI (cfiCond282) Function AppS2wCmd_Wpower
          CFI (cfiCond282) Conditional ??CrossCallReturnLabel_361
          CFI (cfiCond282) R4 Frame(CFA, -12)
          CFI (cfiCond282) R5 Frame(CFA, -8)
          CFI (cfiCond282) R14 Frame(CFA, -4)
          CFI (cfiCond282) CFA R13+48
          CFI Block cfiCond283 Using cfiCommon0
          CFI (cfiCond283) Function AppS2wCmd_Settings
          CFI (cfiCond283) Conditional ??CrossCallReturnLabel_360
          CFI (cfiCond283) R4 Frame(CFA, -28)
          CFI (cfiCond283) R5 Frame(CFA, -24)
          CFI (cfiCond283) R6 Frame(CFA, -20)
          CFI (cfiCond283) R7 Frame(CFA, -16)
          CFI (cfiCond283) R8 Frame(CFA, -12)
          CFI (cfiCond283) R9 Frame(CFA, -8)
          CFI (cfiCond283) R14 Frame(CFA, -4)
          CFI (cfiCond283) CFA R13+32
??Subroutine57_0:
        MOV      R0,R4
          CFI FunCall AppS2wCmd_Wpower AppS2wParse_Int
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wpower AppS2wParse_Int
          CFI FunCall AppS2wCmd_Settings AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond279
          CFI EndBlock cfiCond280
          CFI EndBlock cfiPicker281
          CFI EndBlock cfiCond282
          CFI EndBlock cfiCond283
// 6985 
// 6986 /**
// 6987  ******************************************************************
// 6988  * @ingroup S2w-Application
// 6989  * @brief Process the AT+MCSTSET command
// 6990  * @param ptr Pointer to the user input string.
// 6991  * @return status.
// 6992  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock284 Using cfiCommon0
          CFI Function AppS2wCmd_McastRecvSet
        THUMB
// 6993 UINT8
// 6994 AppS2wCmd_McastRecvSet(UINT8 *ptr)
// 6995 {
AppS2wCmd_McastRecvSet:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 6996     UINT8 status = S2W_EINVAL;
// 6997     UINT8 set=0;
        BL       ?Subroutine21
// 6998 
// 6999     status = AppS2wParse_Boolean(ptr,&set);
// 7000     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_46:
        CBNZ.N   R0,??AppS2wCmd_McastRecvSet_0
// 7001     {
// 7002         return status;
// 7003     }
// 7004     return AppS2wHal_McastRecvSet(set);
        LDRB     R0,[SP, #+0]
          CFI FunCall AppS2wHal_McastRecvSet
        BL       AppS2wHal_McastRecvSet
??AppS2wCmd_McastRecvSet_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock284
// 7005 
// 7006 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond285 Using cfiCommon0
          CFI Function AppS2wCmd_ApConf
          CFI Conditional ??CrossCallReturnLabel_47
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
          CFI Block cfiCond286 Using cfiCommon0
          CFI (cfiCond286) Function AppS2wCmd_McastRecvSet
          CFI (cfiCond286) Conditional ??CrossCallReturnLabel_46
          CFI (cfiCond286) R14 Frame(CFA, -4)
          CFI (cfiCond286) CFA R13+8
          CFI Block cfiPicker287 Using cfiCommon1
          CFI (cfiPicker287) NoFunction
          CFI (cfiPicker287) Picker
        THUMB
?Subroutine21:
        MOVS     R1,#+0
        STRB     R1,[SP, #+0]
        ADD      R1,SP,#+0
          CFI FunCall AppS2wCmd_ApConf AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_McastRecvSet AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiCond285
          CFI EndBlock cfiCond286
          CFI EndBlock cfiPicker287
// 7007 
// 7008 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock288 Using cfiCommon0
          CFI Function AppS2wCmd_ieeePsPollSet
        THUMB
// 7009 PUBLIC UINT8
// 7010 AppS2wCmd_ieeePsPollSet(UINT8 *ptr)
// 7011 {
AppS2wCmd_ieeePsPollSet:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+24
          CFI CFA R13+40
// 7012     UINT8 *p,status;
// 7013     UINT32 enable=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
// 7014 	UINT32 val = 0;
        STR      R0,[SP, #+0]
// 7015 	GSN_WDD_STA_PS_CFG_SET_PARAM_T psCfg ;
// 7016 	GSN_STATUS retVal=GSN_FAILURE;
// 7017     memset(&psCfg,0,sizeof(psCfg));
        MOVS     R2,#+16
        BL       ?Subroutine16
// 7018     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_30:
        BL       ?Subroutine33
// 7019     if (!p)
??CrossCallReturnLabel_122:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_ieeePsPollSet_0
// 7020     {
// 7021         return S2W_EINVAL;
// 7022     }
// 7023     status = AppS2wParse_Int(p, &enable);
// 7024     if(status != S2W_SUCCESS)
        BL       ?Subroutine52
??CrossCallReturnLabel_326:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ieeePsPollSet_0
// 7025     {
// 7026         return S2W_EINVAL;
// 7027     }
// 7028     if(enable)
        LDR      R0,[SP, #+4]
        LDR.W    R4,??DataTable430_1
        LDR.W    R5,??DataTable444
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_ieeePsPollSet_1
// 7029     {
// 7030 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 7031 		if(p)
??CrossCallReturnLabel_121:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_2
// 7032 		{
// 7033 			/*[listenInterval]. This the listen interval that will be advertised in the association request*/
// 7034 			val = 0;
        MOVS     R1,#+0
        STR      R1,[SP, #+0]
// 7035 			status = AppS2wParse_Int(p, &val);
// 7036 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_296:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ieeePsPollSet_0
// 7037 			{
// 7038 				return S2W_EINVAL;
// 7039 			}
// 7040 			psCfg.listenIntervalAssoc = val;
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+12]
// 7041 		}
// 7042 		
// 7043 		/*[wakeupType]*/
// 7044 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_ieeePsPollSet_2:
        BL       ?Subroutine33
// 7045 		if(p)
??CrossCallReturnLabel_120:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_3
// 7046 		{			
// 7047 			status = AppS2wParse_Int(p, &val);
// 7048 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_295:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ieeePsPollSet_0
// 7049 			{
// 7050 				return S2W_EINVAL;
// 7051 			}
// 7052 			val++;/*Mapping to GSN_WIF_WLAN_STA_PS_WAKEUP_T*/
        LDR      R0,[SP, #+0]
        ADDS     R0,R0,#+1
        STR      R0,[SP, #+0]
// 7053 			psCfg.wakeupType = (GSN_WIF_WLAN_STA_PS_WAKEUP_T)val;
        STRB     R0,[SP, #+8]
// 7054 		}
// 7055 		/*[wakeupInterval]*/
// 7056 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_ieeePsPollSet_3:
        BL       ?Subroutine33
// 7057 		if(p)
??CrossCallReturnLabel_119:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_4
// 7058 		{
// 7059 			status = AppS2wParse_Int(p, &val);
// 7060 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_294:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ieeePsPollSet_0
// 7061 			{
// 7062 				return S2W_EINVAL;
// 7063 			}
// 7064 			psCfg.wakeupInterval = val;
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+10]
// 7065 		}
// 7066 		/* Set default beacon Wait Duration to 10 mSec*/
// 7067 		psCfg.beaconWaitTimeout = 10;/* Default for 
??AppS2wCmd_ieeePsPollSet_4:
        MOVS     R0,#+10
        STRH     R0,[SP, #+18]
// 7068 										PS Poll is 10 MSec*/
// 7069 		/*[the beacon Wait Duration ]*/
// 7070 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 7071 		if(p)
??CrossCallReturnLabel_118:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_5
// 7072 		{
// 7073 			status = AppS2wParse_Int(p, &val);
// 7074 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_293:
        CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
// 7075 			{
// 7076 				return S2W_EINVAL;
// 7077 			}
// 7078 			psCfg.beaconWaitTimeout = val;/**/
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+18]
// 7079 		}
// 7080         
// 7081         /*[data Rx type - GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_T ]*/
// 7082 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_ieeePsPollSet_5:
        BL       ?Subroutine33
// 7083 		if(p)
??CrossCallReturnLabel_117:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_6
// 7084 		{
// 7085 			status = AppS2wParse_Boolean(p, (UINT8 *)&val);
// 7086 			if(status != S2W_SUCCESS)
        BL       ?Subroutine60
??CrossCallReturnLabel_377:
        CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
// 7087 			{
// 7088 				return S2W_EINVAL;
// 7089 			}
// 7090 			if(val)
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        ITE      NE 
        MOVNE    R0,#+2
        MOVEQ    R0,#+1
// 7091 			{
// 7092 			    psCfg.dataRxType = GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_SWITCH_TO_ACTIVE;/* */
// 7093 			}
// 7094 			else 
// 7095 			{
// 7096 			    psCfg.dataRxType = GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_PS_POLL;/* */
        STRB     R0,[SP, #+14]
// 7097 			}
// 7098 		}
// 7099         /*[Active to off switch timeout offset in ms ]*/
// 7100 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_ieeePsPollSet_6:
        BL       ?Subroutine33
// 7101 		if(p)
??CrossCallReturnLabel_116:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_7
// 7102 		{
// 7103 			status = AppS2wParse_Int(p, &val);
// 7104 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_292:
        CBNZ.N   R0,??AppS2wCmd_ieeePsPollSet_0
// 7105 			{
// 7106 				return S2W_EINVAL;
// 7107 			}
// 7108 			psCfg.activeToOffTimeout = val;/**/
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+20]
// 7109 		}
// 7110 		/*[Periodicity to switch to Active in ms ]*/
// 7111 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_ieeePsPollSet_7:
        BL       ?Subroutine33
// 7112 		if(p)
??CrossCallReturnLabel_115:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_8
// 7113 		{
// 7114 			status = AppS2wParse_Int(p, &val);
// 7115 			if(status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_291:
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_9
// 7116 			{
// 7117 				return S2W_EINVAL;
??AppS2wCmd_ieeePsPollSet_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_ieeePsPollSet_10
// 7118 			}
// 7119 			psCfg.switchToActivePeriod= val;/**/
??AppS2wCmd_ieeePsPollSet_9:
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+22]
// 7120 		}
// 7121     }
// 7122 
// 7123     if(enable)
??AppS2wCmd_ieeePsPollSet_8:
        LDR      R0,[SP, #+4]
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_1
// 7124     {
// 7125     	if(2 == enable)/* Just set the IEEE PS configuration*/
        LDR      R0,[R5, #+0]
        LDR      R1,[SP, #+4]
        ADDW     R0,R0,#+3808
        CMP      R1,#+2
        BNE.N    ??AppS2wCmd_ieeePsPollSet_11
// 7126 		{
// 7127 			psCfg.uapsdEnable = 0x00;
        MOVS     R1,#+0
        STRB     R1,[SP, #+15]
// 7128     		retVal = GsnWdd_RadioPowerSaveCfgSet(&s2wappMainTaskCtxt->if0.wddCtx, &psCfg);
// 7129 			if(retVal != GSN_SUCCESS)
        ADD      R1,SP,#+8
          CFI FunCall GsnWdd_RadioPowerSaveCfgSet
        BL       GsnWdd_RadioPowerSaveCfgSet
        CBZ.N    R0,??AppS2wCmd_ieeePsPollSet_12
// 7130 				return S2W_FAILURE;				
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_ieeePsPollSet_10
// 7131 			memcpy(&s2wCurrent.ieeePScfg,&psCfg,sizeof(GSN_WDD_STA_PS_CFG_SET_PARAM_T));			
??AppS2wCmd_ieeePsPollSet_12:
        MOVS     R2,#+16
        ADD      R1,SP,#+8
        ADDW     R0,R4,#+918
          CFI FunCall memcpy
        BL       memcpy
        B.N      ??AppS2wCmd_ieeePsPollSet_13
// 7132 		}
// 7133        	else if(1 == enable)
??AppS2wCmd_ieeePsPollSet_11:
        CMP      R1,#+1
        BNE.N    ??AppS2wCmd_ieeePsPollSet_13
// 7134 		{
// 7135         	GsnWdd_Ioctl(&s2wappMainTaskCtxt->if0.wddCtx,GSN_WDD_IOCTL_RX_IEEEPS_MODE_ON,NULL);			
        MOVS     R2,#+0
        MOVS     R1,#+9
          CFI FunCall GsnWdd_Ioctl
        BL       GsnWdd_Ioctl
// 7136 			s2wCurrent.powerSave = 0;
        MOVS     R0,#+0
        STRB     R0,[R4, #+7]
// 7137 			s2wCurrent.ieeePScfgEn=1;
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_ieeePsPollSet_14
// 7138 		}
// 7139     }
// 7140     else
// 7141     {
// 7142         GsnWdd_Ioctl(&s2wappMainTaskCtxt->if0.wddCtx,GSN_WDD_IOCTL_RX_IEEEPS_MODE_OFF,NULL);
??AppS2wCmd_ieeePsPollSet_1:
        LDR      R0,[R5, #+0]
        MOVS     R2,#+0
        MOVS     R1,#+10
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_Ioctl
        BL       GsnWdd_Ioctl
// 7143 		//s2wCurrent.powerSave = 0;
// 7144 		s2wCurrent.ieeePScfgEn=0;
        MOVS     R0,#+0
??AppS2wCmd_ieeePsPollSet_14:
        STRB     R0,[R4, #+944]
// 7145     }
// 7146     return S2W_SUCCESS;
??AppS2wCmd_ieeePsPollSet_13:
        MOVS     R0,#+0
??AppS2wCmd_ieeePsPollSet_10:
        ADD      SP,SP,#+28
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock288
// 7147 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable424:
        DC32     `?<Constant "5.1.5">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable424_1:
        DC32     0x400e0408

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable424_2:
        DC32     0x400e0004

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond289 Using cfiCommon0
          CFI Function S2w_CmdBulkDataState
          CFI Conditional ??CrossCallReturnLabel_385
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
          CFI Block cfiCond290 Using cfiCommon0
          CFI (cfiCond290) Function AppS2wCmd_PowerSave
          CFI (cfiCond290) Conditional ??CrossCallReturnLabel_384
          CFI (cfiCond290) R14 Frame(CFA, -4)
          CFI (cfiCond290) CFA R13+16
          CFI Block cfiCond291 Using cfiCommon0
          CFI (cfiCond291) Function AppS2wCmd_read
          CFI (cfiCond291) Conditional ??CrossCallReturnLabel_383
          CFI (cfiCond291) R4 Frame(CFA, -12)
          CFI (cfiCond291) R5 Frame(CFA, -8)
          CFI (cfiCond291) R14 Frame(CFA, -4)
          CFI (cfiCond291) CFA R13+16
          CFI Block cfiCond292 Using cfiCommon0
          CFI (cfiCond292) Function AppS2wCmd_Write
          CFI (cfiCond292) Conditional ??CrossCallReturnLabel_382
          CFI (cfiCond292) R4 Frame(CFA, -16)
          CFI (cfiCond292) R5 Frame(CFA, -12)
          CFI (cfiCond292) R6 Frame(CFA, -8)
          CFI (cfiCond292) R14 Frame(CFA, -4)
          CFI (cfiCond292) CFA R13+24
          CFI Block cfiCond293 Using cfiCommon0
          CFI (cfiCond293) Function AppS2wCmd_SetDefaultProfile
          CFI (cfiCond293) Conditional ??CrossCallReturnLabel_381
          CFI (cfiCond293) R4 Frame(CFA, -16)
          CFI (cfiCond293) R5 Frame(CFA, -12)
          CFI (cfiCond293) R6 Frame(CFA, -8)
          CFI (cfiCond293) R14 Frame(CFA, -4)
          CFI (cfiCond293) CFA R13+24
          CFI Block cfiCond294 Using cfiCommon0
          CFI (cfiCond294) Function AppS2wCmd_Wradio
          CFI (cfiCond294) Conditional ??CrossCallReturnLabel_380
          CFI (cfiCond294) R14 Frame(CFA, -4)
          CFI (cfiCond294) CFA R13+8
          CFI Block cfiCond295 Using cfiCommon0
          CFI (cfiCond295) Function AppS2wCmd_HardFlow
          CFI (cfiCond295) Conditional ??CrossCallReturnLabel_379
          CFI (cfiCond295) R4 Frame(CFA, -16)
          CFI (cfiCond295) R5 Frame(CFA, -12)
          CFI (cfiCond295) R6 Frame(CFA, -8)
          CFI (cfiCond295) R14 Frame(CFA, -4)
          CFI (cfiCond295) CFA R13+24
          CFI Block cfiCond296 Using cfiCommon0
          CFI (cfiCond296) Function AppS2wCmd_SoftFlow
          CFI (cfiCond296) Conditional ??CrossCallReturnLabel_378
          CFI (cfiCond296) R14 Frame(CFA, -4)
          CFI (cfiCond296) CFA R13+8
          CFI Block cfiCond297 Using cfiCommon0
          CFI (cfiCond297) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond297) Conditional ??CrossCallReturnLabel_377
          CFI (cfiCond297) R4 Frame(CFA, -12)
          CFI (cfiCond297) R5 Frame(CFA, -8)
          CFI (cfiCond297) R14 Frame(CFA, -4)
          CFI (cfiCond297) CFA R13+40
          CFI Block cfiCond298 Using cfiCommon0
          CFI (cfiCond298) Function AppS2wCmd_DhcpSrvr
          CFI (cfiCond298) Conditional ??CrossCallReturnLabel_376
          CFI (cfiCond298) R4 Frame(CFA, -24)
          CFI (cfiCond298) R5 Frame(CFA, -20)
          CFI (cfiCond298) R6 Frame(CFA, -16)
          CFI (cfiCond298) R7 Frame(CFA, -12)
          CFI (cfiCond298) R8 Frame(CFA, -8)
          CFI (cfiCond298) R14 Frame(CFA, -4)
          CFI (cfiCond298) CFA R13+192
          CFI Block cfiCond299 Using cfiCommon0
          CFI (cfiCond299) Function AppS2wCmd_Dns
          CFI (cfiCond299) Conditional ??CrossCallReturnLabel_375
          CFI (cfiCond299) R4 Frame(CFA, -20)
          CFI (cfiCond299) R5 Frame(CFA, -16)
          CFI (cfiCond299) R6 Frame(CFA, -12)
          CFI (cfiCond299) R7 Frame(CFA, -8)
          CFI (cfiCond299) R14 Frame(CFA, -4)
          CFI (cfiCond299) CFA R13+56
          CFI Block cfiCond300 Using cfiCommon0
          CFI (cfiCond300) Function AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond300) Conditional ??CrossCallReturnLabel_374
          CFI (cfiCond300) R4 Frame(CFA, -8)
          CFI (cfiCond300) R14 Frame(CFA, -4)
          CFI (cfiCond300) CFA R13+16
          CFI Block cfiCond301 Using cfiCommon0
          CFI (cfiCond301) Function AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond301) Conditional ??CrossCallReturnLabel_373
          CFI (cfiCond301) R4 Frame(CFA, -8)
          CFI (cfiCond301) R14 Frame(CFA, -4)
          CFI (cfiCond301) CFA R13+24
          CFI Block cfiCond302 Using cfiCommon0
          CFI (cfiCond302) Function AppS2wCmd_RtsEnable
          CFI (cfiCond302) Conditional ??CrossCallReturnLabel_372
          CFI (cfiCond302) R14 Frame(CFA, -4)
          CFI (cfiCond302) CFA R13+16
          CFI Block cfiCond303 Using cfiCommon0
          CFI (cfiCond303) Function AppS2wCmd_Acmode
          CFI (cfiCond303) Conditional ??CrossCallReturnLabel_371
          CFI (cfiCond303) R4 Frame(CFA, -20)
          CFI (cfiCond303) R5 Frame(CFA, -16)
          CFI (cfiCond303) R6 Frame(CFA, -12)
          CFI (cfiCond303) R7 Frame(CFA, -8)
          CFI (cfiCond303) R14 Frame(CFA, -4)
          CFI (cfiCond303) CFA R13+24
          CFI Block cfiCond304 Using cfiCommon0
          CFI (cfiCond304) Function AppS2wCmd_TempGet
          CFI (cfiCond304) Conditional ??CrossCallReturnLabel_370
          CFI (cfiCond304) R14 Frame(CFA, -4)
          CFI (cfiCond304) CFA R13+16
          CFI Block cfiPicker305 Using cfiCommon1
          CFI (cfiPicker305) NoFunction
          CFI (cfiPicker305) Picker
        THUMB
?Subroutine60:
        ADD      R1,SP,#+0
          CFI FunCall S2w_CmdBulkDataState AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_PowerSave AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_read AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Write AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_SetDefaultProfile AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Wradio AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_HardFlow AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_SoftFlow AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_DhcpSrvr AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Dns AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_TkipContrMsrStart AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_TkipSeqNumGet AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_RtsEnable AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Acmode AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_TempGet AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiCond289
          CFI EndBlock cfiCond290
          CFI EndBlock cfiCond291
          CFI EndBlock cfiCond292
          CFI EndBlock cfiCond293
          CFI EndBlock cfiCond294
          CFI EndBlock cfiCond295
          CFI EndBlock cfiCond296
          CFI EndBlock cfiCond297
          CFI EndBlock cfiCond298
          CFI EndBlock cfiCond299
          CFI EndBlock cfiCond300
          CFI EndBlock cfiCond301
          CFI EndBlock cfiCond302
          CFI EndBlock cfiCond303
          CFI EndBlock cfiCond304
          CFI EndBlock cfiPicker305

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond306 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_135
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond307 Using cfiCommon0
          CFI (cfiCond307) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond307) Conditional ??CrossCallReturnLabel_134
          CFI (cfiCond307) R4 Frame(CFA, -36)
          CFI (cfiCond307) R5 Frame(CFA, -32)
          CFI (cfiCond307) R6 Frame(CFA, -28)
          CFI (cfiCond307) R7 Frame(CFA, -24)
          CFI (cfiCond307) R8 Frame(CFA, -20)
          CFI (cfiCond307) R9 Frame(CFA, -16)
          CFI (cfiCond307) R10 Frame(CFA, -12)
          CFI (cfiCond307) R11 Frame(CFA, -8)
          CFI (cfiCond307) R14 Frame(CFA, -4)
          CFI (cfiCond307) CFA R13+64
          CFI Block cfiCond308 Using cfiCommon0
          CFI (cfiCond308) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond308) Conditional ??CrossCallReturnLabel_133
          CFI (cfiCond308) R4 Frame(CFA, -36)
          CFI (cfiCond308) R5 Frame(CFA, -32)
          CFI (cfiCond308) R6 Frame(CFA, -28)
          CFI (cfiCond308) R7 Frame(CFA, -24)
          CFI (cfiCond308) R8 Frame(CFA, -20)
          CFI (cfiCond308) R9 Frame(CFA, -16)
          CFI (cfiCond308) R10 Frame(CFA, -12)
          CFI (cfiCond308) R11 Frame(CFA, -8)
          CFI (cfiCond308) R14 Frame(CFA, -4)
          CFI (cfiCond308) CFA R13+64
          CFI Block cfiCond309 Using cfiCommon0
          CFI (cfiCond309) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond309) Conditional ??CrossCallReturnLabel_132
          CFI (cfiCond309) R4 Frame(CFA, -36)
          CFI (cfiCond309) R5 Frame(CFA, -32)
          CFI (cfiCond309) R6 Frame(CFA, -28)
          CFI (cfiCond309) R7 Frame(CFA, -24)
          CFI (cfiCond309) R8 Frame(CFA, -20)
          CFI (cfiCond309) R9 Frame(CFA, -16)
          CFI (cfiCond309) R10 Frame(CFA, -12)
          CFI (cfiCond309) R11 Frame(CFA, -8)
          CFI (cfiCond309) R14 Frame(CFA, -4)
          CFI (cfiCond309) CFA R13+64
          CFI Block cfiCond310 Using cfiCommon0
          CFI (cfiCond310) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond310) Conditional ??CrossCallReturnLabel_131
          CFI (cfiCond310) R4 Frame(CFA, -36)
          CFI (cfiCond310) R5 Frame(CFA, -32)
          CFI (cfiCond310) R6 Frame(CFA, -28)
          CFI (cfiCond310) R7 Frame(CFA, -24)
          CFI (cfiCond310) R8 Frame(CFA, -20)
          CFI (cfiCond310) R9 Frame(CFA, -16)
          CFI (cfiCond310) R10 Frame(CFA, -12)
          CFI (cfiCond310) R11 Frame(CFA, -8)
          CFI (cfiCond310) R14 Frame(CFA, -4)
          CFI (cfiCond310) CFA R13+64
          CFI Block cfiCond311 Using cfiCommon0
          CFI (cfiCond311) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond311) Conditional ??CrossCallReturnLabel_130
          CFI (cfiCond311) R4 Frame(CFA, -36)
          CFI (cfiCond311) R5 Frame(CFA, -32)
          CFI (cfiCond311) R6 Frame(CFA, -28)
          CFI (cfiCond311) R7 Frame(CFA, -24)
          CFI (cfiCond311) R8 Frame(CFA, -20)
          CFI (cfiCond311) R9 Frame(CFA, -16)
          CFI (cfiCond311) R10 Frame(CFA, -12)
          CFI (cfiCond311) R11 Frame(CFA, -8)
          CFI (cfiCond311) R14 Frame(CFA, -4)
          CFI (cfiCond311) CFA R13+64
          CFI Block cfiCond312 Using cfiCommon0
          CFI (cfiCond312) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond312) Conditional ??CrossCallReturnLabel_129
          CFI (cfiCond312) R4 Frame(CFA, -36)
          CFI (cfiCond312) R5 Frame(CFA, -32)
          CFI (cfiCond312) R6 Frame(CFA, -28)
          CFI (cfiCond312) R7 Frame(CFA, -24)
          CFI (cfiCond312) R8 Frame(CFA, -20)
          CFI (cfiCond312) R9 Frame(CFA, -16)
          CFI (cfiCond312) R10 Frame(CFA, -12)
          CFI (cfiCond312) R11 Frame(CFA, -8)
          CFI (cfiCond312) R14 Frame(CFA, -4)
          CFI (cfiCond312) CFA R13+64
          CFI Block cfiCond313 Using cfiCommon0
          CFI (cfiCond313) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond313) Conditional ??CrossCallReturnLabel_128
          CFI (cfiCond313) R4 Frame(CFA, -36)
          CFI (cfiCond313) R5 Frame(CFA, -32)
          CFI (cfiCond313) R6 Frame(CFA, -28)
          CFI (cfiCond313) R7 Frame(CFA, -24)
          CFI (cfiCond313) R8 Frame(CFA, -20)
          CFI (cfiCond313) R9 Frame(CFA, -16)
          CFI (cfiCond313) R10 Frame(CFA, -12)
          CFI (cfiCond313) R11 Frame(CFA, -8)
          CFI (cfiCond313) R14 Frame(CFA, -4)
          CFI (cfiCond313) CFA R13+64
          CFI Block cfiCond314 Using cfiCommon0
          CFI (cfiCond314) Function AppS2wCmd_SetSockOp
          CFI (cfiCond314) Conditional ??CrossCallReturnLabel_127
          CFI (cfiCond314) R14 Frame(CFA, -4)
          CFI (cfiCond314) CFA R13+32
          CFI Block cfiCond315 Using cfiCommon0
          CFI (cfiCond315) Function AppS2wCmd_SetSockOp
          CFI (cfiCond315) Conditional ??CrossCallReturnLabel_126
          CFI (cfiCond315) R14 Frame(CFA, -4)
          CFI (cfiCond315) CFA R13+32
          CFI Block cfiCond316 Using cfiCommon0
          CFI (cfiCond316) Function AppS2wCmd_SetSockOp
          CFI (cfiCond316) Conditional ??CrossCallReturnLabel_125
          CFI (cfiCond316) R14 Frame(CFA, -4)
          CFI (cfiCond316) CFA R13+32
          CFI Block cfiCond317 Using cfiCommon0
          CFI (cfiCond317) Function AppS2wCmd_SetSockOp
          CFI (cfiCond317) Conditional ??CrossCallReturnLabel_124
          CFI (cfiCond317) R14 Frame(CFA, -4)
          CFI (cfiCond317) CFA R13+32
          CFI Block cfiCond318 Using cfiCommon0
          CFI (cfiCond318) Function AppS2wCmd_SetSockOp
          CFI (cfiCond318) Conditional ??CrossCallReturnLabel_123
          CFI (cfiCond318) R14 Frame(CFA, -4)
          CFI (cfiCond318) CFA R13+32
          CFI Block cfiCond319 Using cfiCommon0
          CFI (cfiCond319) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond319) Conditional ??CrossCallReturnLabel_122
          CFI (cfiCond319) R4 Frame(CFA, -12)
          CFI (cfiCond319) R5 Frame(CFA, -8)
          CFI (cfiCond319) R14 Frame(CFA, -4)
          CFI (cfiCond319) CFA R13+40
          CFI Block cfiCond320 Using cfiCommon0
          CFI (cfiCond320) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond320) Conditional ??CrossCallReturnLabel_121
          CFI (cfiCond320) R4 Frame(CFA, -12)
          CFI (cfiCond320) R5 Frame(CFA, -8)
          CFI (cfiCond320) R14 Frame(CFA, -4)
          CFI (cfiCond320) CFA R13+40
          CFI Block cfiCond321 Using cfiCommon0
          CFI (cfiCond321) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond321) Conditional ??CrossCallReturnLabel_120
          CFI (cfiCond321) R4 Frame(CFA, -12)
          CFI (cfiCond321) R5 Frame(CFA, -8)
          CFI (cfiCond321) R14 Frame(CFA, -4)
          CFI (cfiCond321) CFA R13+40
          CFI Block cfiCond322 Using cfiCommon0
          CFI (cfiCond322) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond322) Conditional ??CrossCallReturnLabel_119
          CFI (cfiCond322) R4 Frame(CFA, -12)
          CFI (cfiCond322) R5 Frame(CFA, -8)
          CFI (cfiCond322) R14 Frame(CFA, -4)
          CFI (cfiCond322) CFA R13+40
          CFI Block cfiCond323 Using cfiCommon0
          CFI (cfiCond323) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond323) Conditional ??CrossCallReturnLabel_118
          CFI (cfiCond323) R4 Frame(CFA, -12)
          CFI (cfiCond323) R5 Frame(CFA, -8)
          CFI (cfiCond323) R14 Frame(CFA, -4)
          CFI (cfiCond323) CFA R13+40
          CFI Block cfiCond324 Using cfiCommon0
          CFI (cfiCond324) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond324) Conditional ??CrossCallReturnLabel_117
          CFI (cfiCond324) R4 Frame(CFA, -12)
          CFI (cfiCond324) R5 Frame(CFA, -8)
          CFI (cfiCond324) R14 Frame(CFA, -4)
          CFI (cfiCond324) CFA R13+40
          CFI Block cfiCond325 Using cfiCommon0
          CFI (cfiCond325) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond325) Conditional ??CrossCallReturnLabel_116
          CFI (cfiCond325) R4 Frame(CFA, -12)
          CFI (cfiCond325) R5 Frame(CFA, -8)
          CFI (cfiCond325) R14 Frame(CFA, -4)
          CFI (cfiCond325) CFA R13+40
          CFI Block cfiCond326 Using cfiCommon0
          CFI (cfiCond326) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond326) Conditional ??CrossCallReturnLabel_115
          CFI (cfiCond326) R4 Frame(CFA, -12)
          CFI (cfiCond326) R5 Frame(CFA, -8)
          CFI (cfiCond326) R14 Frame(CFA, -4)
          CFI (cfiCond326) CFA R13+40
          CFI Block cfiCond327 Using cfiCommon0
          CFI (cfiCond327) Function AppS2wCmd_ntpTimeSet
          CFI (cfiCond327) Conditional ??CrossCallReturnLabel_114
          CFI (cfiCond327) R4 Frame(CFA, -20)
          CFI (cfiCond327) R5 Frame(CFA, -16)
          CFI (cfiCond327) R6 Frame(CFA, -12)
          CFI (cfiCond327) R7 Frame(CFA, -8)
          CFI (cfiCond327) R14 Frame(CFA, -4)
          CFI (cfiCond327) CFA R13+48
          CFI Block cfiCond328 Using cfiCommon0
          CFI (cfiCond328) Function AppS2wCmd_ntpTimeSet
          CFI (cfiCond328) Conditional ??CrossCallReturnLabel_113
          CFI (cfiCond328) R4 Frame(CFA, -20)
          CFI (cfiCond328) R5 Frame(CFA, -16)
          CFI (cfiCond328) R6 Frame(CFA, -12)
          CFI (cfiCond328) R7 Frame(CFA, -8)
          CFI (cfiCond328) R14 Frame(CFA, -4)
          CFI (cfiCond328) CFA R13+48
          CFI Block cfiCond329 Using cfiCommon0
          CFI (cfiCond329) Function AppS2wCmd_ntpTimeSet
          CFI (cfiCond329) Conditional ??CrossCallReturnLabel_112
          CFI (cfiCond329) R4 Frame(CFA, -20)
          CFI (cfiCond329) R5 Frame(CFA, -16)
          CFI (cfiCond329) R6 Frame(CFA, -12)
          CFI (cfiCond329) R7 Frame(CFA, -8)
          CFI (cfiCond329) R14 Frame(CFA, -4)
          CFI (cfiCond329) CFA R13+48
          CFI Block cfiCond330 Using cfiCommon0
          CFI (cfiCond330) Function AppS2wCmd_ntpTimeSet
          CFI (cfiCond330) Conditional ??CrossCallReturnLabel_111
          CFI (cfiCond330) R4 Frame(CFA, -20)
          CFI (cfiCond330) R5 Frame(CFA, -16)
          CFI (cfiCond330) R6 Frame(CFA, -12)
          CFI (cfiCond330) R7 Frame(CFA, -8)
          CFI (cfiCond330) R14 Frame(CFA, -4)
          CFI (cfiCond330) CFA R13+48
          CFI Block cfiCond331 Using cfiCommon0
          CFI (cfiCond331) Function AppS2wCmd_ntpTimeSet
          CFI (cfiCond331) Conditional ??CrossCallReturnLabel_110
          CFI (cfiCond331) R4 Frame(CFA, -20)
          CFI (cfiCond331) R5 Frame(CFA, -16)
          CFI (cfiCond331) R6 Frame(CFA, -12)
          CFI (cfiCond331) R7 Frame(CFA, -8)
          CFI (cfiCond331) R14 Frame(CFA, -4)
          CFI (cfiCond331) CFA R13+48
          CFI Block cfiCond332 Using cfiCommon0
          CFI (cfiCond332) Function AppS2wCmd_DnsLookup
          CFI (cfiCond332) Conditional ??CrossCallReturnLabel_109
          CFI (cfiCond332) R4 Frame(CFA, -12)
          CFI (cfiCond332) R5 Frame(CFA, -8)
          CFI (cfiCond332) R14 Frame(CFA, -4)
          CFI (cfiCond332) CFA R13+40
          CFI Block cfiCond333 Using cfiCommon0
          CFI (cfiCond333) Function AppS2wCmd_DnsLookup
          CFI (cfiCond333) Conditional ??CrossCallReturnLabel_108
          CFI (cfiCond333) R4 Frame(CFA, -12)
          CFI (cfiCond333) R5 Frame(CFA, -8)
          CFI (cfiCond333) R14 Frame(CFA, -4)
          CFI (cfiCond333) CFA R13+40
          CFI Block cfiCond334 Using cfiCommon0
          CFI (cfiCond334) Function AppS2wCmd_DnsLookup
          CFI (cfiCond334) Conditional ??CrossCallReturnLabel_107
          CFI (cfiCond334) R4 Frame(CFA, -12)
          CFI (cfiCond334) R5 Frame(CFA, -8)
          CFI (cfiCond334) R14 Frame(CFA, -4)
          CFI (cfiCond334) CFA R13+40
          CFI Block cfiCond335 Using cfiCommon0
          CFI (cfiCond335) Function AppS2wCmd_DnsLookup
          CFI (cfiCond335) Conditional ??CrossCallReturnLabel_106
          CFI (cfiCond335) R4 Frame(CFA, -12)
          CFI (cfiCond335) R5 Frame(CFA, -8)
          CFI (cfiCond335) R14 Frame(CFA, -4)
          CFI (cfiCond335) CFA R13+40
          CFI Block cfiPicker336 Using cfiCommon1
          CFI (cfiPicker336) NoFunction
          CFI (cfiPicker336) Picker
        THUMB
?Subroutine33:
        ADD      R0,SP,#+24
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ntpTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ntpTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ntpTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ntpTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ntpTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond306
          CFI EndBlock cfiCond307
          CFI EndBlock cfiCond308
          CFI EndBlock cfiCond309
          CFI EndBlock cfiCond310
          CFI EndBlock cfiCond311
          CFI EndBlock cfiCond312
          CFI EndBlock cfiCond313
          CFI EndBlock cfiCond314
          CFI EndBlock cfiCond315
          CFI EndBlock cfiCond316
          CFI EndBlock cfiCond317
          CFI EndBlock cfiCond318
          CFI EndBlock cfiCond319
          CFI EndBlock cfiCond320
          CFI EndBlock cfiCond321
          CFI EndBlock cfiCond322
          CFI EndBlock cfiCond323
          CFI EndBlock cfiCond324
          CFI EndBlock cfiCond325
          CFI EndBlock cfiCond326
          CFI EndBlock cfiCond327
          CFI EndBlock cfiCond328
          CFI EndBlock cfiCond329
          CFI EndBlock cfiCond330
          CFI EndBlock cfiCond331
          CFI EndBlock cfiCond332
          CFI EndBlock cfiCond333
          CFI EndBlock cfiCond334
          CFI EndBlock cfiCond335
          CFI EndBlock cfiPicker336
// 7148 
// 7149 
// 7150 #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
// 7151 /**
// 7152  ******************************************************************
// 7153  * @ingroup S2w-Application
// 7154  * @brief Process AT+SSLOPEN command.
// 7155  * @param ptr Pointer to the user input string.
// 7156  * @return status, S2W_SUCCESS or S2W_FAILURE.
// 7157  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock337 Using cfiCommon0
          CFI Function AppS2wCmd_SSLOpen
        THUMB
// 7158 UINT8
// 7159 AppS2wCmd_SSLOpen(UINT8 *ptr)
// 7160 {
AppS2wCmd_SSLOpen:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+4
          CFI CFA R13+32
// 7161     UINT8 status = S2W_EINVAL;
        MOVS     R4,#+2
// 7162     UINT8 cid;
// 7163     UINT8 valCid;
// 7164     UINT8 *p;
// 7165     UINT8 endParam = 1;
// 7166 
// 7167     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7168     if (!p)
??CrossCallReturnLabel_172:
        CBNZ.N   R0,??AppS2wCmd_SSLOpen_0
// 7169     {
// 7170         return S2W_EINVAL;
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_SSLOpen_1
// 7171     }
// 7172 
// 7173     cid = *p;
// 7174 
// 7175     valCid = AppS2w_CidValidate(cid);
??AppS2wCmd_SSLOpen_0:
        BL       ?Subroutine101
??CrossCallReturnLabel_518:
        MOV      R5,R0
// 7176 
// 7177     if (valCid != INVALID_CID)
        CMP      R5,#+255
        BEQ.N    ??AppS2wCmd_SSLOpen_2
// 7178     {
// 7179         UINT8 *pCertName = NULL;
        MOVS     R6,#+0
// 7180         UINT8 *pClientCertName = NULL;
        MOVS     R7,#+0
// 7181         UINT8 *pClientKeyName = NULL;
        MOV      R8,R6
// 7182 
// 7183         (VOID)pClientCertName;
// 7184         (VOID)pClientKeyName;
// 7185 
// 7186         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7187 
// 7188         if (p != NULL)
??CrossCallReturnLabel_171:
        CBZ.N    R0,??AppS2wCmd_SSLOpen_3
// 7189         {
// 7190             pCertName = p;
        MOV      R6,R0
// 7191             endParam = 0;
// 7192 
// 7193         }
// 7194 
// 7195         if(!endParam)
// 7196         {
// 7197             endParam = 1;
// 7198             p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7199             if(NULL != p)
??CrossCallReturnLabel_170:
        CBZ.N    R0,??AppS2wCmd_SSLOpen_3
// 7200             {
// 7201                 endParam = 0;
// 7202                 pClientCertName = p;
        MOV      R7,R0
// 7203             }
// 7204         }
// 7205 
// 7206         if(!endParam)
// 7207         {
// 7208             endParam = 1;
// 7209             p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7210             if(NULL != p)
??CrossCallReturnLabel_169:
        CBZ.N    R0,??AppS2wCmd_SSLOpen_3
// 7211             {
// 7212                 endParam = 0;
// 7213                 pClientKeyName = p;
        MOV      R8,R0
// 7214             }
// 7215         }
// 7216 #ifdef S2W_SSL_CLIENT_SUPPORT
// 7217         if( S2W_NETDATA_MODE_CLIENT == AppS2w_ConnModeGet(valCid))
??AppS2wCmd_SSLOpen_3:
        MOV      R0,R5
          CFI FunCall AppS2w_ConnModeGet
        BL       AppS2w_ConnModeGet
        CBNZ.N   R0,??AppS2wCmd_SSLOpen_4
// 7218         {
// 7219             status = AppS2w_SslClientOpen(valCid, (INT8*)pCertName, pClientCertName,
// 7220                                           pClientKeyName);
        MOV      R3,R8
        MOV      R2,R7
        MOV      R1,R6
        MOV      R0,R5
          CFI FunCall AppS2w_SslClientOpen
        BL       AppS2w_SslClientOpen
        MOV      R4,R0
// 7221         }
// 7222 #endif
// 7223 #ifdef S2W_SSL_SERVER_SUPPORT
// 7224         if( S2W_NETDATA_MODE_SERVER == AppS2w_ConnModeGet(valCid))
??AppS2wCmd_SSLOpen_4:
        MOV      R0,R5
          CFI FunCall AppS2w_ConnModeGet
        BL       AppS2w_ConnModeGet
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_SSLOpen_5
// 7225         {
// 7226             status = AppS2w_SslServerOpen(valCid, (char*)pCertName);
        MOV      R1,R6
        MOV      R0,R5
          CFI FunCall AppS2w_SslServerOpen
        BL       AppS2w_SslServerOpen
        MOV      R4,R0
// 7227         }
// 7228 #endif
// 7229         return status;
??AppS2wCmd_SSLOpen_5:
        UXTB     R0,R4
        B.N      ??AppS2wCmd_SSLOpen_1
// 7230     }
// 7231     else
// 7232         return S2W_EBADCID;
??AppS2wCmd_SSLOpen_2:
        MOVS     R0,#+5
??AppS2wCmd_SSLOpen_1:
        POP      {R1,R2,R4-R8,PC}  ;; return
          CFI EndBlock cfiBlock337
// 7233 }
// 7234 
// 7235 /*UINT8
// 7236 AppS2wCmd_SSLOpen_test(UINT8 CID)
// 7237 {
// 7238     UINT8 status = S2W_EINVAL;
// 7239     UINT8 valCid;
// 7240     UINT8 endParam = 1;
// 7241 
// 7242     valCid = CID;
// 7243 
// 7244     if (valCid != INVALID_CID)
// 7245     {
// 7246         UINT8 *pCertName = NULL;
// 7247         UINT8 *pClientCertName = NULL;
// 7248         UINT8 *pClientKeyName = NULL;
// 7249 
// 7250         (VOID)pClientCertName;
// 7251         (VOID)pClientKeyName;
// 7252 
// 7253 #ifdef S2W_SSL_CLIENT_SUPPORT
// 7254         if( S2W_NETDATA_MODE_CLIENT == AppS2w_ConnModeGet(valCid))
// 7255         {
// 7256             status = AppS2w_SslClientOpen(valCid, (INT8*)pCertName, pClientCertName,
// 7257                                           pClientKeyName);
// 7258         }
// 7259 #endif
// 7260 #ifdef S2W_SSL_SERVER_SUPPORT
// 7261         if( S2W_NETDATA_MODE_SERVER == AppS2w_ConnModeGet(valCid))
// 7262         {
// 7263             status = AppS2w_SslServerOpen(valCid, (char*)pCertName);
// 7264         }
// 7265 #endif
// 7266         return status;
// 7267     }
// 7268     else
// 7269         return S2W_EBADCID;
// 7270 }*/
// 7271 
// 7272 
// 7273 
// 7274 
// 7275 
// 7276 /**
// 7277  ******************************************************************
// 7278  * @ingroup S2w-Application
// 7279  * @brief Process AT+SSLOPEN command.
// 7280  * @param ptr Pointer to the user input string.
// 7281  * @return status, S2W_SUCCESS or S2W_FAILURE.
// 7282  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock338 Using cfiCommon0
          CFI Function AppS2wCmd_SSLClose
        THUMB
// 7283 UINT8
// 7284 AppS2wCmd_SSLClose(UINT8 *ptr)
// 7285 {
AppS2wCmd_SSLClose:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 7286     //UINT8 status;
// 7287     UINT8 cid = *ptr;
// 7288     UINT8 valCid;
// 7289 
// 7290     if ((valCid = AppS2w_CidValidate(cid)) != INVALID_CID)
        BL       ?Subroutine101
??CrossCallReturnLabel_517:
        CMP      R0,#+255
        BEQ.N    ??AppS2wCmd_SSLClose_0
// 7291     {
// 7292         return AppS2w_SslClose(valCid);
          CFI FunCall AppS2w_SslClose
        BL       AppS2w_SslClose
        UXTB     R0,R0
        POP      {R1,PC}
// 7293     }
// 7294     else
// 7295     {
// 7296         return S2W_EBADCID;
??AppS2wCmd_SSLClose_0:
        MOVS     R0,#+5
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock338
// 7297 	}
// 7298 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond339 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientSend
          CFI Conditional ??CrossCallReturnLabel_519
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond340 Using cfiCommon0
          CFI (cfiCond340) Function AppS2wCmd_SSLOpen
          CFI (cfiCond340) Conditional ??CrossCallReturnLabel_518
          CFI (cfiCond340) R4 Frame(CFA, -24)
          CFI (cfiCond340) R5 Frame(CFA, -20)
          CFI (cfiCond340) R6 Frame(CFA, -16)
          CFI (cfiCond340) R7 Frame(CFA, -12)
          CFI (cfiCond340) R8 Frame(CFA, -8)
          CFI (cfiCond340) R14 Frame(CFA, -4)
          CFI (cfiCond340) CFA R13+32
          CFI Block cfiCond341 Using cfiCommon0
          CFI (cfiCond341) Function AppS2wCmd_SSLClose
          CFI (cfiCond341) Conditional ??CrossCallReturnLabel_517
          CFI (cfiCond341) R14 Frame(CFA, -4)
          CFI (cfiCond341) CFA R13+8
          CFI Block cfiCond342 Using cfiCommon0
          CFI (cfiCond342) Function AppS2wCmd_CoapClose
          CFI (cfiCond342) Conditional ??CrossCallReturnLabel_516
          CFI (cfiCond342) R4 Frame(CFA, -16)
          CFI (cfiCond342) R5 Frame(CFA, -12)
          CFI (cfiCond342) R6 Frame(CFA, -8)
          CFI (cfiCond342) R14 Frame(CFA, -4)
          CFI (cfiCond342) CFA R13+24
          CFI Block cfiCond343 Using cfiCommon0
          CFI (cfiCond343) Function AppS2wCmd_CoapSend
          CFI (cfiCond343) Conditional ??CrossCallReturnLabel_515
          CFI (cfiCond343) R4 Frame(CFA, -24)
          CFI (cfiCond343) R5 Frame(CFA, -20)
          CFI (cfiCond343) R6 Frame(CFA, -16)
          CFI (cfiCond343) R7 Frame(CFA, -12)
          CFI (cfiCond343) R8 Frame(CFA, -8)
          CFI (cfiCond343) R14 Frame(CFA, -4)
          CFI (cfiCond343) CFA R13+1440
          CFI Block cfiPicker344 Using cfiCommon1
          CFI (cfiPicker344) NoFunction
          CFI (cfiPicker344) Picker
        THUMB
?Subroutine101:
        LDRB     R0,[R0, #+0]
          CFI FunCall AppS2wCmd_HttpClientSend AppS2w_CidValidate
          CFI FunCall AppS2wCmd_SSLOpen AppS2w_CidValidate
          CFI FunCall AppS2wCmd_SSLClose AppS2w_CidValidate
          CFI FunCall AppS2wCmd_CoapClose AppS2w_CidValidate
          CFI FunCall AppS2wCmd_CoapSend AppS2w_CidValidate
        B.W      AppS2w_CidValidate
          CFI EndBlock cfiCond339
          CFI EndBlock cfiCond340
          CFI EndBlock cfiCond341
          CFI EndBlock cfiCond342
          CFI EndBlock cfiCond343
          CFI EndBlock cfiPicker344
// 7299 
// 7300 #endif
// 7301 
// 7302 
// 7303 /**
// 7304  ******************************************************************
// 7305  * @ingroup S2w-Application
// 7306  * @brief s2w rigister info display function
// 7307  *   This function print s2w register inforamtion passed.
// 7308  * @param profile - IN  Pointer to the profile data
// 7309  *
// 7310  * @return none.
// 7311  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock345 Using cfiCommon0
          CFI Function AppS2wRegisters_Display
        THUMB
// 7312 VOID
// 7313 AppS2wRegisters_Display(const S2W_PROFILE_T *profile)
// 7314 {
AppS2wRegisters_Display:
        PUSH     {R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+24
        MOV      R4,R0
// 7315     INT32 i;
// 7316 
// 7317     for (i = 0; i < S2W_NUM_TIMEOUTS; i++)
        MOVS     R5,#+0
        ADR.N    R6,??DataTable430  ;; " "
        ADR.W    R8,`?<Constant "%sS%d=%05u">`
        ADR.N    R7,??DataTable431  ;; 0x0D, 0x0A, 0x00, 0x00
        B.N      ??AppS2wRegisters_Display_0
// 7318     {
// 7319         S2w_Printf("%sS%d=%05u", !i ? "\r\n" : " ",
// 7320                 i, profile->registers[i]);
??AppS2wRegisters_Display_1:
        CBNZ.N   R5,??AppS2wRegisters_Display_2
??AppS2wRegisters_Display_0:
        MOV      R1,R7
        B.N      ??AppS2wRegisters_Display_3
??AppS2wRegisters_Display_2:
        MOV      R1,R6
??AppS2wRegisters_Display_3:
        BL       ?Subroutine135
??CrossCallReturnLabel_620:
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADDS     R5,R5,#+1
        CMP      R5,#+1
        BLT.N    ??AppS2wRegisters_Display_1
        MOVS     R5,#+1
??AppS2wRegisters_Display_4:
        BL       ?Subroutine135
// 7321     }
??CrossCallReturnLabel_621:
        MOV      R1,R6
        MOV      R0,R8
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        ADDS     R5,R5,#+1
        CMP      R5,#+8
        BLT.N    ??AppS2wRegisters_Display_4
// 7322 }
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock345

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%sS%d=%05u">`:
        DC8 "%sS%d=%05u"
        DC8 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond346 Using cfiCommon0
          CFI Function AppS2wRegisters_Display
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_620
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond347 Using cfiCommon0
          CFI (cfiCond347) Function AppS2wRegisters_Display
          CFI (cfiCond347) NoCalls AppS2wRegisters_Display
          CFI (cfiCond347) Conditional ??CrossCallReturnLabel_621
          CFI (cfiCond347) R4 Frame(CFA, -24)
          CFI (cfiCond347) R5 Frame(CFA, -20)
          CFI (cfiCond347) R6 Frame(CFA, -16)
          CFI (cfiCond347) R7 Frame(CFA, -12)
          CFI (cfiCond347) R8 Frame(CFA, -8)
          CFI (cfiCond347) R14 Frame(CFA, -4)
          CFI (cfiCond347) CFA R13+24
          CFI Block cfiPicker348 Using cfiCommon1
          CFI (cfiPicker348) NoFunction
          CFI (cfiPicker348) NoCalls AppS2wRegisters_Display
          CFI (cfiPicker348) Picker
        THUMB
?Subroutine135:
        ADD      R0,R4,R5, LSL #+1
        MOV      R2,R5
        LDRH     R3,[R0, #+452]
        BX       LR
          CFI EndBlock cfiCond346
          CFI EndBlock cfiCond347
          CFI EndBlock cfiPicker348
// 7323 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock349 Using cfiCommon0
          CFI Function AppS2w_ConctCbProcess
        THUMB
// 7324 VOID AppS2w_ConctCbProcess(VOID* ctext,INT32 status)
// 7325 {
AppS2w_ConctCbProcess:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        MOV      R4,R0
// 7326 	GSN_WDD_WLAN_CFG_T *pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
        LDR.W    R0,??DataTable444
        LDR      R0,[R0, #+0]
        ADDW     R5,R0,#+3988
// 7327     if(status == GSN_SUCCESS)
        CBNZ.N   R1,??AppS2w_ConctCbProcess_0
// 7328     {
// 7329         s2wLinkState = S2W_LINK_STATE_CONNECTED;
        MOVS     R0,#+1
        B.N      ??AppS2w_ConctCbProcess_1
// 7330     }
// 7331     else
// 7332     {
// 7333         /* get the association status by calling geps API
// 7334          */
// 7335         if(GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE)
??AppS2w_ConctCbProcess_0:
        BL       ??Subroutine120_0
??CrossCallReturnLabel_570:
        CMP      R0,#+1
        IT       NE 
        MOVNE    R0,#+0
// 7336         {
// 7337             s2wLinkState = S2W_LINK_STATE_CONNECTED;
// 7338         }
// 7339         else
// 7340         {
// 7341             s2wLinkState = S2W_LINK_STATE_DISCONNECTED;
??AppS2w_ConctCbProcess_1:
        LDR.W    R1,??DataTable442
        STRB     R0,[R1, #+0]
// 7342         }
// 7343 
// 7344     }
// 7345     
// 7346     if(s2wLinkState == S2W_LINK_STATE_CONNECTED)
        LDRB     R0,[R1, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2w_ConctCbProcess_2
// 7347     {
// 7348 		s2wCurrent.security.wpa.pskValid = pWlanConfig->securityCfg.pskConfig.pskValid;
        LDR.N    R6,??DataTable430_1
        LDRB     R0,[R5, #+81]
        STRB     R0,[R6, #+244]
// 7349 
// 7350 		if(pWlanConfig->securityCfg.pskConfig.pskValid)
        LDRB     R0,[R5, #+81]
        CBZ.N    R0,??AppS2w_ConctCbProcess_3
// 7351 		{
// 7352 			 memcpy(s2wCurrent.security.wpa.psk,
// 7353 					pWlanConfig->securityCfg.pskConfig.psk, 32);			 
        MOVS     R2,#+32
        ADD      R1,R5,#+148
        ADD      R0,R6,#+245
          CFI FunCall memcpy
        BL       memcpy
// 7354 			 memset(s2wCurrent.security.wpa.ssid,0,S2W_MAX_SSID_LEN);
        ADDW     R7,R6,#+277
        BL       ?Subroutine67
// 7355 			 memcpy(s2wCurrent.security.wpa.ssid,pWlanConfig->ssid.array,
// 7356 						 pWlanConfig->ssid.length );
??CrossCallReturnLabel_405:
        LDRB     R2,[R5, #+0]
        ADDS     R1,R5,#+1
        MOV      R0,R7
          CFI FunCall memcpy
        BL       memcpy
// 7357 					 s2wCurrent.security.wpa.ssidLen = pWlanConfig->ssid.length;
        LDRB     R0,[R5, #+0]
        STRB     R0,[R6, #+309]
// 7358 		 }
// 7359         /* copy the ssid and len  and channel       */
// 7360         memcpy(current_wlan_info.ssid,pWlanConfig->ssid.array,
// 7361                pWlanConfig->ssid.length );
??AppS2w_ConctCbProcess_3:
        ADDS     R1,R5,#+1
        LDRB     R2,[R5, #+0]
        ADDW     R0,R6,#+1026
          CFI FunCall memcpy
        BL       memcpy
// 7362         current_wlan_info.ssidLen = pWlanConfig->ssid.length;
        ADD      R7,R6,#+1016
        LDRB     R0,[R5, #+0]
        STRB     R0,[R7, #+2]
// 7363 
// 7364         /* associated ch will be at 0 index
// 7365          */
// 7366         current_wlan_info.channel = pWlanConfig->channel[0];
// 7367 
// 7368         memcpy(current_wlan_info.bssid, pWlanConfig->bssid.array,6);
        MOVS     R2,#+6
        LDRB     R0,[R5, #+39]
        STRB     R0,[R7, #+1]
        ADD      R1,R5,#+33
        ADD      R0,R6,#+1020
          CFI FunCall memcpy
        BL       memcpy
// 7369         current_wlan_info.validBssid = 1;
        MOVS     R0,#+1
        STRB     R0,[R7, #+3]
// 7370         current_wlan_info.mode = ((APP_MAIN_CTX_T*)ctext)->if0.wddCtx.wlanNwType;
        LDRB     R0,[R4, #+3848]
        STRB     R0,[R6, #+1016]
// 7371         // update the security info
// 7372         current_wlan_info.authMode = pWlanConfig->securityCfg.mode;
        LDRB     R0,[R5, #+64]
        STRB     R0,[R6, #+1058]
// 7373         if(pWlanConfig->securityCfg.mode == GSN_WDD_SEC_MODE_WEP)
        LDRB     R0,[R5, #+64]
        CMP      R0,#+4
        BNE.N    ??AppS2w_ConctCbProcess_2
// 7374         {
// 7375             if(pWlanConfig->securityCfg.wepConfig.authType == GSN_WDD_SEC_WEP_SHARED)
        LDRB     R0,[R5, #+65]
        CMP      R0,#+1
        ITE      EQ 
        MOVEQ    R0,#+2
        MOVNE    R0,#+1
// 7376             {
// 7377                 current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_SHARED;
// 7378             }
// 7379             else
// 7380             {
// 7381                 current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_OPEN;
        STRB     R0,[R6, #+1058]
// 7382             }
// 7383         }
// 7384     }
// 7385 }
??AppS2w_ConctCbProcess_2:
        POP      {R0,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock349

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond350 Using cfiCommon0
          CFI Function S2w_getSecurityConfig
          CFI Conditional ??CrossCallReturnLabel_406
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond351 Using cfiCommon0
          CFI (cfiCond351) Function AppS2w_ConctCbProcess
          CFI (cfiCond351) Conditional ??CrossCallReturnLabel_405
          CFI (cfiCond351) R4 Frame(CFA, -20)
          CFI (cfiCond351) R5 Frame(CFA, -16)
          CFI (cfiCond351) R6 Frame(CFA, -12)
          CFI (cfiCond351) R7 Frame(CFA, -8)
          CFI (cfiCond351) R14 Frame(CFA, -4)
          CFI (cfiCond351) CFA R13+24
          CFI Block cfiPicker352 Using cfiCommon1
          CFI (cfiPicker352) NoFunction
          CFI (cfiPicker352) Picker
        THUMB
?Subroutine67:
        MOVS     R2,#+32
        MOVS     R1,#+0
        MOV      R0,R7
          CFI FunCall S2w_getSecurityConfig memset
          CFI FunCall AppS2w_ConctCbProcess memset
        B.W      memset
          CFI EndBlock cfiCond350
          CFI EndBlock cfiCond351
          CFI EndBlock cfiPicker352
// 7386 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock353 Using cfiCommon0
          CFI Function AppS2w_WlanRespTmrCb
        THUMB
// 7387 VOID
// 7388 AppS2w_WlanRespTmrCb( VOID* context, GSN_SOFT_TMR_HANDLE_T timerHandle )
// 7389 {
AppS2w_WlanRespTmrCb:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 7390 	GSN_ASSERT(FALSE);
        LDR.W    R0,??DataTable449  ;; 0x41010010
        ADR.W    R1,`?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`+0x43
        LDR      R4,[R0, #+0]
        MOVS     R2,#+32
        ADDS     R0,R4,#+4
          CFI FunCall memcpy
        BL       memcpy
        MOVW     R0,#+7390
        STR      R0,[R4, #+36]
        MOVS     R0,#+2
        STRB     R0,[R4, #+0]
        STRB     R0,[R4, #+1]
        MOVS     R0,#+16
        STRB     R0,[R4, #+2]
        MOVS     R0,#+2
        POP      {R4,LR}
          CFI R4 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
          CFI FunCall GsnSys_Reset
        B.W      GsnSys_Reset
          CFI EndBlock cfiBlock353
// 7391 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`:
        DC8 45H, 3AH, 5CH, 47H, 61H, 69H, 6EH, 73H
        DC8 70H, 61H, 6EH, 5CH, 67H, 73H, 32H, 30H
        DC8 31H, 31H, 6DH, 78H, 78H, 5FH, 53H, 44H
        DC8 4BH, 5FH, 73H, 32H, 77H, 5FH, 74H, 6CH
        DC8 73H, 5FH, 74H, 6CH, 73H, 6CH, 70H, 5FH
        DC8 35H, 2EH, 31H, 2EH, 35H, 5FH, 47H, 41H
        DC8 5CH, 75H, 73H, 65H, 72H, 61H, 70H, 70H
        DC8 73H, 5FH, 6DH, 71H, 74H, 74H, 5CH, 73H
        DC8 32H, 77H, 5CH, 73H, 72H, 63H, 5CH, 70H
        DC8 61H, 72H, 73H, 65H, 72H, 5CH, 73H, 32H
        DC8 77H, 5FH, 67H, 65H, 6EH, 65H, 72H, 61H
        DC8 6CH, 5FH, 63H, 6FH, 6DH, 6DH, 61H, 6EH
        DC8 64H, 2EH, 63H, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock354 Using cfiCommon0
          CFI Function s2wApp_ConnectCb
        THUMB
// 7392 VOID
// 7393 s2wApp_ConnectCb( VOID* ctext, INT32 status)
// 7394 {	
s2wApp_ConnectCb:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        MOV      R4,R1
// 7395 	/*stop timer*/
// 7396 	GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
        BL       ?Subroutine128
??CrossCallReturnLabel_600:
        BL       ??Subroutine110_0
// 7397 	L2ConnectStatus = status;
??CrossCallReturnLabel_543:
        LDR.W    R0,??DataTable449_1
        STR      R4,[R0, #+24]
// 7398     GsnOsal_SemRelease ( &s2wL2L3ConnectSemaphore);
        LDR.W    R0,??DataTable450
        POP      {R4,LR}
          CFI R4 SameValue
          CFI R14 SameValue
          CFI CFA R13+0
          CFI FunCall GsnOsal_SemRelease
        B.W      GsnOsal_SemRelease
          CFI EndBlock cfiBlock354
// 7399 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond355 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSave
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_598
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond356 Using cfiCommon0
          CFI (cfiCond356) Function AppS2wCmd_reset
          CFI (cfiCond356) NoCalls AppS2wCmd_PowerSave
          CFI (cfiCond356) NoCalls AppS2wCmd_reset
          CFI (cfiCond356) NoCalls s2wApp_ConnectCb
          CFI (cfiCond356) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond356) Conditional ??CrossCallReturnLabel_599
          CFI (cfiCond356) R14 Frame(CFA, -4)
          CFI (cfiCond356) CFA R13+8
          CFI Block cfiCond357 Using cfiCommon0
          CFI (cfiCond357) Function s2wApp_ConnectCb
          CFI (cfiCond357) NoCalls AppS2wCmd_PowerSave
          CFI (cfiCond357) NoCalls AppS2wCmd_reset
          CFI (cfiCond357) NoCalls s2wApp_ConnectCb
          CFI (cfiCond357) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond357) Conditional ??CrossCallReturnLabel_600
          CFI (cfiCond357) R4 Frame(CFA, -8)
          CFI (cfiCond357) R14 Frame(CFA, -4)
          CFI (cfiCond357) CFA R13+8
          CFI Block cfiCond358 Using cfiCommon0
          CFI (cfiCond358) Function AppS2wCmd_NcmAuto
          CFI (cfiCond358) NoCalls AppS2wCmd_PowerSave
          CFI (cfiCond358) NoCalls AppS2wCmd_reset
          CFI (cfiCond358) NoCalls s2wApp_ConnectCb
          CFI (cfiCond358) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond358) Conditional ??CrossCallReturnLabel_601
          CFI (cfiCond358) R4 Frame(CFA, -36)
          CFI (cfiCond358) R5 Frame(CFA, -32)
          CFI (cfiCond358) R6 Frame(CFA, -28)
          CFI (cfiCond358) R7 Frame(CFA, -24)
          CFI (cfiCond358) R8 Frame(CFA, -20)
          CFI (cfiCond358) R9 Frame(CFA, -16)
          CFI (cfiCond358) R10 Frame(CFA, -12)
          CFI (cfiCond358) R11 Frame(CFA, -8)
          CFI (cfiCond358) R14 Frame(CFA, -4)
          CFI (cfiCond358) CFA R13+1344
          CFI Block cfiPicker359 Using cfiCommon1
          CFI (cfiPicker359) NoFunction
          CFI (cfiPicker359) NoCalls AppS2wCmd_PowerSave
          CFI (cfiPicker359) NoCalls AppS2wCmd_reset
          CFI (cfiPicker359) NoCalls s2wApp_ConnectCb
          CFI (cfiPicker359) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiPicker359) Picker
        THUMB
?Subroutine128:
        LDR.W    R1,??DataTable448
        LDR      R1,[R1, #+0]
        BX       LR
          CFI EndBlock cfiCond355
          CFI EndBlock cfiCond356
          CFI EndBlock cfiCond357
          CFI EndBlock cfiCond358
          CFI EndBlock cfiPicker359
// 7400 
// 7401 #ifdef S2W_SNTP
// 7402 
// 7403 
// 7404 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock360 Using cfiCommon0
          CFI Function AppS2wProcess_SntpTimerNotify
        THUMB
// 7405 PUBLIC VOID AppS2wProcess_SntpTimerNotify()
// 7406 {
AppS2wProcess_SntpTimerNotify:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 7407     GsnSntp_TimeSync(&s2wappMainTaskCtxt->sntpCtx, s2wappMainTaskCtxt->sntpSrvIp,
// 7408                       s2wappMainTaskCtxt->sntpSrvTimeout ,
// 7409                       S2wApp_TimeSyncDoneCb, &s2wappMainTaskCtxt->sntpCtx);
        LDR.W    R0,??DataTable448
        ADR.W    R3,S2wApp_TimeSyncDoneCb
        LDR      R1,[R0, #+0]
        SUB      SP,SP,#+8
          CFI CFA R13+16
        ADD      R0,R1,#+30208
        MOVW     R4,#+30292
        ADDS     R0,R0,#+8
        ADDS     R2,R4,R1
        STR      R0,[SP, #+0]
        LDR      R2,[R2, #+4]
        LDR      R1,[R4, R1]
          CFI FunCall GsnSntp_TimeSync
        BL       GsnSntp_TimeSync
// 7410 }
        POP      {R0,R1,R4,PC}    ;; return
          CFI EndBlock cfiBlock360

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable430:
        DC8      " ",0x0,0x0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable430_1:
        DC32     s2wCurrent
// 7411 
// 7412 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock361 Using cfiCommon0
          CFI Function AppS2wCmd_ntpTimeSet
        THUMB
// 7413 UINT8
// 7414 AppS2wCmd_ntpTimeSet(UINT8 *ptr)
// 7415 {
AppS2wCmd_ntpTimeSet:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+24
          CFI CFA R13+48
// 7416     BOOL enable=0, periodic=0;
        MOVS     R0,#+0
        STRH     R0,[SP, #+16]
// 7417     UINT8 *p,status;
// 7418     S2W_IPADDR_T srvIp;
// 7419 	GSN_STATUS ret;
// 7420 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 7421     if (!p)
??CrossCallReturnLabel_114:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_ntpTimeSet_0
// 7422     {
// 7423         return S2W_EINVAL;
// 7424     }
// 7425     status = AppS2wParse_Boolean(p, &enable);
// 7426     if(status != GSN_SUCCESS)
        ADD      R1,SP,#+17
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        CMP      R0,#+0
        BNE.W    ??AppS2wCmd_ntpTimeSet_1
// 7427     {
// 7428         return S2W_EINVAL;
// 7429     }
// 7430 
// 7431     if(enable)
        LDRB     R0,[SP, #+17]
        LDR.W    R5,??DataTable444
        MOVW     R4,#+30304
        CMP      R0,#+0
        BEQ.W    ??AppS2wCmd_ntpTimeSet_2
// 7432     {
// 7433         p = AppS2wParse_NextParamGet(&ptr); // serv ip
        BL       ?Subroutine33
// 7434         if ((p) && (*p != '\0'))
??CrossCallReturnLabel_113:
        MOVW     R6,#+30288
        MOVW     R7,#+30292
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_ntpTimeSet_3
// 7435         {
// 7436             status = AppS2wParse_Ip(p, srvIp );
        ADD      R1,SP,#+20
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
// 7437             if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ntpTimeSet_4
// 7438             {
// 7439                 return status;
// 7440             }
// 7441             memcpy((UINT8*)&s2wappMainTaskCtxt->sntpSrvIp,srvIp,4);
        LDR      R0,[R5, #+0]
        MOVS     R2,#+4
        ADD      R1,SP,#+20
        ADDS     R0,R7,R0
          CFI FunCall memcpy
        BL       memcpy
// 7442 
// 7443             p = AppS2wParse_NextParamGet(&ptr);  // srv timeout
        BL       ?Subroutine33
// 7444             if (!p)
??CrossCallReturnLabel_112:
        CMP      R0,#+0
??AppS2wCmd_ntpTimeSet_0:
        BEQ.N    ??AppS2wCmd_ntpTimeSet_1
// 7445             {
// 7446                 return S2W_EINVAL;
// 7447             }
// 7448             status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->sntpSrvTimeout );
        LDR      R1,[R5, #+0]
        ADD      R1,R1,#+30208
        ADDS     R1,R1,#+88
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 7449             if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ntpTimeSet_4
// 7450             {
// 7451                 return status;
// 7452             }
// 7453             p = AppS2wParse_NextParamGet(&ptr);  // periodic/oneshot
        BL       ?Subroutine33
// 7454             if (!p)
??CrossCallReturnLabel_111:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_ntpTimeSet_1
// 7455             {
// 7456                 return S2W_EINVAL;
// 7457             }
// 7458             status = AppS2wParse_Boolean(p,&periodic );
        ADD      R1,SP,#+16
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
// 7459             if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_ntpTimeSet_4
// 7460             {
// 7461                 return status;
// 7462             }
// 7463 
// 7464             if(periodic)
        LDRB     R0,[SP, #+16]
        CBZ.N    R0,??AppS2wCmd_ntpTimeSet_5
// 7465             {
// 7466                 p = AppS2wParse_NextParamGet(&ptr);  // timer period
        BL       ?Subroutine33
// 7467                 if (!p)
??CrossCallReturnLabel_110:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_ntpTimeSet_1
// 7468                 {
// 7469                     return S2W_EINVAL;
// 7470                 }
// 7471                 status = AppS2wParse_Int(p,&s2wappMainTaskCtxt->sntpTimerPeriod );
        LDR      R1,[R5, #+0]
        ADDS     R1,R6,R1
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 7472                 if (status != S2W_SUCCESS)
        CBZ.N    R0,??AppS2wCmd_ntpTimeSet_6
// 7473                 {
// 7474                     return status;
        B.N      ??AppS2wCmd_ntpTimeSet_4
// 7475                 }
// 7476                 // start a timer
// 7477             }
// 7478             else
// 7479             {
// 7480                 if(s2wLinkState != S2W_LINK_STATE_CONNECTED)
??AppS2wCmd_ntpTimeSet_5:
        LDR.W    R0,??DataTable442
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_ntpTimeSet_7
        B.N      ??AppS2wCmd_ntpTimeSet_6
// 7481                   return S2W_FAILURE;
// 7482             }
// 7483 	    }
// 7484 	    else // with default values
// 7485 	    {
// 7486             if(S2W_DFLT_SNTP_PERIODIC)
// 7487             {
// 7488                 periodic=1;
// 7489                 s2wappMainTaskCtxt->sntpTimerPeriod = S2W_DFLT_SNTP_PERIODIC_PERIOD;
// 7490 			}
// 7491 			else
// 7492 			{
// 7493 				periodic=0;
??AppS2wCmd_ntpTimeSet_3:
        MOVS     R0,#+0
        STRB     R0,[SP, #+16]
// 7494 			}
// 7495             s2wappMainTaskCtxt->sntpSrvIp = ntohl(S2W_DFLT_SNTP_SVR_IP);
        LDR.W    R1,??DataTable451  ;; 0x1f0a8c0
        LDR      R0,[R5, #+0]
        STR      R1,[R7, R0]
// 7496             s2wappMainTaskCtxt->sntpSrvTimeout = S2W_DFLT_SNTP_TIMEOUT;
        ADDS     R0,R7,R0
        MOV      R1,#+1000
        STR      R1,[R0, #+4]
// 7497 		}
// 7498         s2wappMainTaskCtxt->sntpCtx.pWdd = &s2wappMainTaskCtxt->if0.wddCtx;
??AppS2wCmd_ntpTimeSet_6:
        MOVW     R2,#+30284
        LDR      R1,[R5, #+0]
// 7499         	ret = GsnSntp_TimeSync(&s2wappMainTaskCtxt->sntpCtx, s2wappMainTaskCtxt->sntpSrvIp,
// 7500                                                     s2wappMainTaskCtxt->sntpSrvTimeout ,
// 7501                                                     S2wApp_TimeSyncDoneCb, &s2wappMainTaskCtxt->sntpCtx);
        ADR.W    R3,S2wApp_TimeSyncDoneCb
        ADDW     R0,R1,#+3808
        STR      R0,[R2, R1]
        ADD      R0,R1,#+30208
        ADDS     R0,R0,#+8
        ADDS     R1,R2,R1
        STR      R0,[SP, #+0]
        LDR      R2,[R1, #+12]
        LDR      R1,[R1, #+8]
          CFI FunCall GsnSntp_TimeSync
        BL       GsnSntp_TimeSync
// 7502             if (GSN_SNTP_BUSY== ret)
        LDR.W    R1,??DataTable452  ;; 0xc0000400
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_ntpTimeSet_8
// 7503             {
// 7504 				S2w_Printf("\r\n\r\nSNTP busy\r\n");			
        ADR.W    R0,`?<Constant "\\r\\n\\r\\nSNTP busy\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_ntpTimeSet_7
// 7505                 return S2W_FAILURE;
// 7506             }
// 7507 			else if(GSN_OPERATION_IN_PROGRESS != ret)
??AppS2wCmd_ntpTimeSet_8:
        LDR.W    R1,??DataTable453  ;; 0x80000001
        CMP      R0,R1
        BEQ.N    ??AppS2wCmd_ntpTimeSet_9
// 7508                 return S2W_FAILURE;
??AppS2wCmd_ntpTimeSet_7:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_ntpTimeSet_4
// 7509 
// 7510         if(1 == periodic)
??AppS2wCmd_ntpTimeSet_9:
        LDRB     R0,[SP, #+16]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_ntpTimeSet_10
// 7511 		{
// 7512             GsnSoftTmr_Start (&s2wappMainTaskCtxt->appSntpTimer, GSN_SOFT_TMR_PERIODIC,
// 7513                                       0,((TIMER_INTERRUPT_1_S * s2wappMainTaskCtxt->sntpTimerPeriod)),
// 7514                                       ( GSN_SOFT_TMR_CBR_T )AppS2w_sntpTimerCb,
// 7515                                   NULL );
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        MOVS     R2,#+0
        LDR      R5,[R5, #+0]
        ADR.W    R0,AppS2w_sntpTimerCb
        STR      R0,[SP, #+8]
        MOVS     R3,#+0
        LDR      R0,[R6, R5]
        LSRS     R1,R0,#+17
        LSLS     R0,R0,#+15
        STRD     R0,R1,[SP, #+0]
        MOVS     R1,#+1
        ADDS     R0,R4,R5
          CFI FunCall GsnSoftTmr_Start
        BL       GsnSoftTmr_Start
        B.N      ??AppS2wCmd_ntpTimeSet_10
// 7516 		}
// 7517     }
// 7518     else // disable
// 7519     {
// 7520         if(*ptr)
??AppS2wCmd_ntpTimeSet_2:
        LDR      R0,[SP, #+24]
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_ntpTimeSet_11
// 7521         {
// 7522             return S2W_EINVAL;
??AppS2wCmd_ntpTimeSet_1:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_ntpTimeSet_4
// 7523         }
// 7524         GsnSoftTmr_Stop (&s2wappMainTaskCtxt->appSntpTimer);
??AppS2wCmd_ntpTimeSet_11:
        LDR      R0,[R5, #+0]
        ADDS     R0,R4,R0
          CFI FunCall GsnSoftTmr_Stop
        BL       GsnSoftTmr_Stop
// 7525     }
// 7526     return S2W_SUCCESS;
??AppS2wCmd_ntpTimeSet_10:
        MOVS     R0,#+0
??AppS2wCmd_ntpTimeSet_4:
        ADD      SP,SP,#+28
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock361
// 7527 
// 7528 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable431:
        DC8      0x0D, 0x0A, 0x00, 0x00
// 7529 

        SECTION `.text`:CODE:NOROOT(2)
          CFI Block cfiBlock362 Using cfiCommon0
          CFI Function S2wApp_TimeSyncDoneCb
        THUMB
// 7530 PRIVATE VOID
// 7531 S2wApp_TimeSyncDoneCb(INT32 status, VOID* context)
// 7532 {
// 7533 	GSN_SNTP_CTX_T *pSntpCtx = (GSN_SNTP_CTX_T *)context;
// 7534 	if(status == GSN_SUCCESS)
S2wApp_TimeSyncDoneCb:
        CBNZ.N   R0,??S2wApp_TimeSyncDoneCb_0
// 7535 	{
// 7536 		GsnTod_AdjustOffset(pSntpCtx->diffNegative, pSntpCtx->timeDiff);
        LDRD     R2,R3,[R1, #+56]
        LDRB     R0,[R1, #+64]
          CFI FunCall GsnTod_AdjustOffset
        B.W      GsnTod_AdjustOffset
// 7537 	}
// 7538 }
??S2wApp_TimeSyncDoneCb_0:
        BX       LR               ;; return
          CFI EndBlock cfiBlock362
// 7539 
// 7540 

        SECTION `.text`:CODE:NOROOT(2)
          CFI Block cfiBlock363 Using cfiCommon0
          CFI Function AppS2w_sntpTimerCb
        THUMB
// 7541 PRIVATE VOID
// 7542 AppS2w_sntpTimerCb( VOID* context,
// 7543     GSN_SOFT_TMR_HANDLE_T timerHandle )
// 7544 {
// 7545      UINT32 message = APP_TIME_SYNC_TIMER_INDICATION;
// 7546     (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
AppS2w_sntpTimerCb:
        LDR.W    R0,??DataTable444
        LDR.W    R2,??DataTable454
        LDR      R1,[R0, #+0]
        LDR      R2,[R2, #+0]
        MOVS     R0,#+21
          CFI FunCall
        ANOTE "tailcall"
        BX       R2
          CFI EndBlock cfiBlock363
// 7547 
// 7548 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n\\r\\nSNTP busy\\r\\n">`:
        DC8 "\015\012\015\012SNTP busy\015\012"
// 7549 #endif
// 7550 
// 7551 #ifdef S2W_DHCP_SERVER_ENABLE
// 7552 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock364 Using cfiCommon0
          CFI Function AppS2wCmd_DhcpSrvrConfig
        THUMB
// 7553 PUBLIC UINT8
// 7554 AppS2wCmd_DhcpSrvrConfig(UINT8 *ptr)
// 7555 {
AppS2wCmd_DhcpSrvrConfig:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
// 7556     UINT8 status;
// 7557     UINT8 * p;
// 7558   
// 7559     /* can only be set before starting DHCP server */ 
// 7560     if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
        LDR.W    R4,??DataTable453_1
        LDRB     R0,[R4, #+1]
        SUB      SP,SP,#+4
          CFI CFA R13+24
        LSLS     R0,R0,#+31
        BMI.N    ??AppS2wCmd_DhcpSrvrConfig_0
// 7561      {
// 7562        return S2W_EINVAL;
// 7563      }
// 7564     memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
        LDR.W    R5,??DataTable453_2
        MOVS     R2,#+48
        MOVS     R1,#+0
        MOV      R0,R5
          CFI FunCall memset
        BL       memset
// 7565     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7566     if (!p)
??CrossCallReturnLabel_168:
        CBZ.N    R0,??AppS2wCmd_DhcpSrvrConfig_0
// 7567     {
// 7568         return S2W_EINVAL;
// 7569     }
// 7570    status = AppS2wParse_Ip(p, (UINT8 *)&dhcpSrvrCfg.startIpAddr); 
        ADDS     R1,R5,#+4
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
// 7571    
// 7572    dhcpSrvrCfg.startIpAddr = ntohl(dhcpSrvrCfg.startIpAddr);
        LDR      R1,[R5, #+4]
        LSRS     R2,R1,#+8
        AND      R2,R2,#0xFF00
        ORR      R2,R2,R1, LSR #+24
        AND      R3,R1,#0xFF00
        ORR      R2,R2,R3, LSL #+8
        ORR      R1,R2,R1, LSL #+24
        STR      R1,[R5, #+4]
// 7573     
// 7574     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_DhcpSrvrConfig_1
// 7575     {
// 7576         return status;
// 7577     }
// 7578     
// 7579     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 7580     if (!p)
??CrossCallReturnLabel_167:
        CBZ.N    R0,??AppS2wCmd_DhcpSrvrConfig_0
// 7581     {
// 7582         return S2W_EINVAL;
// 7583     }
// 7584     status = AppS2wParse_Int(p,&dhcpSrvrCfg.numOfClients);
        ADD      R1,R5,#+32
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 7585     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_DhcpSrvrConfig_1
// 7586     {
// 7587         return status;
// 7588     }
// 7589     
// 7590     if(dhcpSrvrCfg.numOfClients > S2W_DHCP_SRVR_MAX_CLIENTS)
        LDR      R0,[R5, #+32]
        CMP      R0,#+65
        BCC.N    ??AppS2wCmd_DhcpSrvrConfig_2
// 7591     {
// 7592        return S2W_EINVAL;
??AppS2wCmd_DhcpSrvrConfig_0:
        MOVS     R0,#+2
        POP      {R1,R2,R4-R6,PC}
// 7593     }
// 7594     
// 7595     memcpy(&dhcpSrvrCfg.subnetMask, s2wCurrent.netConf.netMask, 4);
??AppS2wCmd_DhcpSrvrConfig_2:
        LDR.W    R6,??DataTable455
        MOVS     R2,#+4
        ADD      R1,R6,#+400
        ADD      R0,R5,#+8
          CFI FunCall memcpy
        BL       memcpy
// 7596     memcpy(&dhcpSrvrCfg.gateway, s2wCurrent.netConf.gateway, 4);
        MOVS     R2,#+4
        ADD      R1,R6,#+404
        ADD      R0,R5,#+12
          CFI FunCall memcpy
        BL       memcpy
// 7597     dhcpServerFlags |= S2W_DHCP_SRVR_CFG_DONE;
        LDRB     R0,[R4, #+1]
        ORR      R0,R0,#0x2
        STRB     R0,[R4, #+1]
// 7598     
// 7599      return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_DhcpSrvrConfig_1:
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock364
// 7600 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond365 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientClose
          CFI Conditional ??CrossCallReturnLabel_177
          CFI R4 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond366 Using cfiCommon0
          CFI (cfiCond366) Function AppS2wCmd_HttpClientConfig
          CFI (cfiCond366) Conditional ??CrossCallReturnLabel_176
          CFI (cfiCond366) R4 Frame(CFA, -32)
          CFI (cfiCond366) R5 Frame(CFA, -28)
          CFI (cfiCond366) R6 Frame(CFA, -24)
          CFI (cfiCond366) R7 Frame(CFA, -20)
          CFI (cfiCond366) R8 Frame(CFA, -16)
          CFI (cfiCond366) R9 Frame(CFA, -12)
          CFI (cfiCond366) R10 Frame(CFA, -8)
          CFI (cfiCond366) R14 Frame(CFA, -4)
          CFI (cfiCond366) CFA R13+40
          CFI Block cfiCond367 Using cfiCommon0
          CFI (cfiCond367) Function AppS2wCmd_HttpClientConfig
          CFI (cfiCond367) Conditional ??CrossCallReturnLabel_175
          CFI (cfiCond367) R4 Frame(CFA, -32)
          CFI (cfiCond367) R5 Frame(CFA, -28)
          CFI (cfiCond367) R6 Frame(CFA, -24)
          CFI (cfiCond367) R7 Frame(CFA, -20)
          CFI (cfiCond367) R8 Frame(CFA, -16)
          CFI (cfiCond367) R9 Frame(CFA, -12)
          CFI (cfiCond367) R10 Frame(CFA, -8)
          CFI (cfiCond367) R14 Frame(CFA, -4)
          CFI (cfiCond367) CFA R13+40
          CFI Block cfiCond368 Using cfiCommon0
          CFI (cfiCond368) Function AppS2wCmd_Ncudp
          CFI (cfiCond368) Conditional ??CrossCallReturnLabel_174
          CFI (cfiCond368) R14 Frame(CFA, -4)
          CFI (cfiCond368) CFA R13+80
          CFI Block cfiCond369 Using cfiCommon0
          CFI (cfiCond369) Function AppS2wCmd_Ncudp
          CFI (cfiCond369) Conditional ??CrossCallReturnLabel_173
          CFI (cfiCond369) R14 Frame(CFA, -4)
          CFI (cfiCond369) CFA R13+80
          CFI Block cfiCond370 Using cfiCommon0
          CFI (cfiCond370) Function AppS2wCmd_SSLOpen
          CFI (cfiCond370) Conditional ??CrossCallReturnLabel_172
          CFI (cfiCond370) R4 Frame(CFA, -24)
          CFI (cfiCond370) R5 Frame(CFA, -20)
          CFI (cfiCond370) R6 Frame(CFA, -16)
          CFI (cfiCond370) R7 Frame(CFA, -12)
          CFI (cfiCond370) R8 Frame(CFA, -8)
          CFI (cfiCond370) R14 Frame(CFA, -4)
          CFI (cfiCond370) CFA R13+32
          CFI Block cfiCond371 Using cfiCommon0
          CFI (cfiCond371) Function AppS2wCmd_SSLOpen
          CFI (cfiCond371) Conditional ??CrossCallReturnLabel_171
          CFI (cfiCond371) R4 Frame(CFA, -24)
          CFI (cfiCond371) R5 Frame(CFA, -20)
          CFI (cfiCond371) R6 Frame(CFA, -16)
          CFI (cfiCond371) R7 Frame(CFA, -12)
          CFI (cfiCond371) R8 Frame(CFA, -8)
          CFI (cfiCond371) R14 Frame(CFA, -4)
          CFI (cfiCond371) CFA R13+32
          CFI Block cfiCond372 Using cfiCommon0
          CFI (cfiCond372) Function AppS2wCmd_SSLOpen
          CFI (cfiCond372) Conditional ??CrossCallReturnLabel_170
          CFI (cfiCond372) R4 Frame(CFA, -24)
          CFI (cfiCond372) R5 Frame(CFA, -20)
          CFI (cfiCond372) R6 Frame(CFA, -16)
          CFI (cfiCond372) R7 Frame(CFA, -12)
          CFI (cfiCond372) R8 Frame(CFA, -8)
          CFI (cfiCond372) R14 Frame(CFA, -4)
          CFI (cfiCond372) CFA R13+32
          CFI Block cfiCond373 Using cfiCommon0
          CFI (cfiCond373) Function AppS2wCmd_SSLOpen
          CFI (cfiCond373) Conditional ??CrossCallReturnLabel_169
          CFI (cfiCond373) R4 Frame(CFA, -24)
          CFI (cfiCond373) R5 Frame(CFA, -20)
          CFI (cfiCond373) R6 Frame(CFA, -16)
          CFI (cfiCond373) R7 Frame(CFA, -12)
          CFI (cfiCond373) R8 Frame(CFA, -8)
          CFI (cfiCond373) R14 Frame(CFA, -4)
          CFI (cfiCond373) CFA R13+32
          CFI Block cfiCond374 Using cfiCommon0
          CFI (cfiCond374) Function AppS2wCmd_DhcpSrvrConfig
          CFI (cfiCond374) Conditional ??CrossCallReturnLabel_168
          CFI (cfiCond374) R4 Frame(CFA, -16)
          CFI (cfiCond374) R5 Frame(CFA, -12)
          CFI (cfiCond374) R6 Frame(CFA, -8)
          CFI (cfiCond374) R14 Frame(CFA, -4)
          CFI (cfiCond374) CFA R13+24
          CFI Block cfiCond375 Using cfiCommon0
          CFI (cfiCond375) Function AppS2wCmd_DhcpSrvrConfig
          CFI (cfiCond375) Conditional ??CrossCallReturnLabel_167
          CFI (cfiCond375) R4 Frame(CFA, -16)
          CFI (cfiCond375) R5 Frame(CFA, -12)
          CFI (cfiCond375) R6 Frame(CFA, -8)
          CFI (cfiCond375) R14 Frame(CFA, -4)
          CFI (cfiCond375) CFA R13+24
          CFI Block cfiCond376 Using cfiCommon0
          CFI (cfiCond376) Function AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond376) Conditional ??CrossCallReturnLabel_166
          CFI (cfiCond376) R4 Frame(CFA, -8)
          CFI (cfiCond376) R14 Frame(CFA, -4)
          CFI (cfiCond376) CFA R13+16
          CFI Block cfiCond377 Using cfiCommon0
          CFI (cfiCond377) Function AppS2wCmd_WeapConf
          CFI (cfiCond377) Conditional ??CrossCallReturnLabel_165
          CFI (cfiCond377) R4 Frame(CFA, -24)
          CFI (cfiCond377) R5 Frame(CFA, -20)
          CFI (cfiCond377) R6 Frame(CFA, -16)
          CFI (cfiCond377) R7 Frame(CFA, -12)
          CFI (cfiCond377) R8 Frame(CFA, -8)
          CFI (cfiCond377) R14 Frame(CFA, -4)
          CFI (cfiCond377) CFA R13+32
          CFI Block cfiCond378 Using cfiCommon0
          CFI (cfiCond378) Function AppS2wCmd_WeapConf
          CFI (cfiCond378) Conditional ??CrossCallReturnLabel_164
          CFI (cfiCond378) R4 Frame(CFA, -24)
          CFI (cfiCond378) R5 Frame(CFA, -20)
          CFI (cfiCond378) R6 Frame(CFA, -16)
          CFI (cfiCond378) R7 Frame(CFA, -12)
          CFI (cfiCond378) R8 Frame(CFA, -8)
          CFI (cfiCond378) R14 Frame(CFA, -4)
          CFI (cfiCond378) CFA R13+32
          CFI Block cfiCond379 Using cfiCommon0
          CFI (cfiCond379) Function AppS2wCmd_WeapConf
          CFI (cfiCond379) Conditional ??CrossCallReturnLabel_163
          CFI (cfiCond379) R4 Frame(CFA, -24)
          CFI (cfiCond379) R5 Frame(CFA, -20)
          CFI (cfiCond379) R6 Frame(CFA, -16)
          CFI (cfiCond379) R7 Frame(CFA, -12)
          CFI (cfiCond379) R8 Frame(CFA, -8)
          CFI (cfiCond379) R14 Frame(CFA, -4)
          CFI (cfiCond379) CFA R13+32
          CFI Block cfiCond380 Using cfiCommon0
          CFI (cfiCond380) Function AppS2wCmd_WeapConf
          CFI (cfiCond380) Conditional ??CrossCallReturnLabel_162
          CFI (cfiCond380) R4 Frame(CFA, -24)
          CFI (cfiCond380) R5 Frame(CFA, -20)
          CFI (cfiCond380) R6 Frame(CFA, -16)
          CFI (cfiCond380) R7 Frame(CFA, -12)
          CFI (cfiCond380) R8 Frame(CFA, -8)
          CFI (cfiCond380) R14 Frame(CFA, -4)
          CFI (cfiCond380) CFA R13+32
          CFI Block cfiCond381 Using cfiCommon0
          CFI (cfiCond381) Function AppS2wCmd_WeapConf
          CFI (cfiCond381) Conditional ??CrossCallReturnLabel_161
          CFI (cfiCond381) R4 Frame(CFA, -24)
          CFI (cfiCond381) R5 Frame(CFA, -20)
          CFI (cfiCond381) R6 Frame(CFA, -16)
          CFI (cfiCond381) R7 Frame(CFA, -12)
          CFI (cfiCond381) R8 Frame(CFA, -8)
          CFI (cfiCond381) R14 Frame(CFA, -4)
          CFI (cfiCond381) CFA R13+32
          CFI Block cfiCond382 Using cfiCommon0
          CFI (cfiCond382) Function AppS2wCmd_CoapClose
          CFI (cfiCond382) Conditional ??CrossCallReturnLabel_160
          CFI (cfiCond382) R4 Frame(CFA, -16)
          CFI (cfiCond382) R5 Frame(CFA, -12)
          CFI (cfiCond382) R6 Frame(CFA, -8)
          CFI (cfiCond382) R14 Frame(CFA, -4)
          CFI (cfiCond382) CFA R13+24
          CFI Block cfiCond383 Using cfiCommon0
          CFI (cfiCond383) Function AppS2wCmd_CoapOpen
          CFI (cfiCond383) Conditional ??CrossCallReturnLabel_159
          CFI (cfiCond383) R4 Frame(CFA, -16)
          CFI (cfiCond383) R5 Frame(CFA, -12)
          CFI (cfiCond383) R6 Frame(CFA, -8)
          CFI (cfiCond383) R14 Frame(CFA, -4)
          CFI (cfiCond383) CFA R13+24
          CFI Block cfiPicker384 Using cfiCommon1
          CFI (cfiPicker384) NoFunction
          CFI (cfiPicker384) Picker
        THUMB
?Subroutine35:
        ADD      R0,SP,#+4
          CFI FunCall AppS2wCmd_HttpClientClose AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientConfig AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientConfig AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ncudp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ncudp AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SSLOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SSLOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SSLOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SSLOpen AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DhcpSrvrConfig AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DhcpSrvrConfig AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_TkipContrMsrStart AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WeapConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WeapConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WeapConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WeapConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WeapConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapClose AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapOpen AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond365
          CFI EndBlock cfiCond366
          CFI EndBlock cfiCond367
          CFI EndBlock cfiCond368
          CFI EndBlock cfiCond369
          CFI EndBlock cfiCond370
          CFI EndBlock cfiCond371
          CFI EndBlock cfiCond372
          CFI EndBlock cfiCond373
          CFI EndBlock cfiCond374
          CFI EndBlock cfiCond375
          CFI EndBlock cfiCond376
          CFI EndBlock cfiCond377
          CFI EndBlock cfiCond378
          CFI EndBlock cfiCond379
          CFI EndBlock cfiCond380
          CFI EndBlock cfiCond381
          CFI EndBlock cfiCond382
          CFI EndBlock cfiCond383
          CFI EndBlock cfiPicker384
// 7601 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock385 Using cfiCommon0
          CFI Function AppS2wCmd_DhcpSrvr
        THUMB
// 7602 PUBLIC UINT8
// 7603 AppS2wCmd_DhcpSrvr(UINT8 *ptr)
// 7604 {
AppS2wCmd_DhcpSrvr:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+164
          CFI CFA R13+192
// 7605     UINT8 status;
// 7606     UINT32 mode;
// 7607     UINT8 dns=0,gateway=0;
        MOVS     R0,#+0
        STRH     R0,[SP, #+0]
// 7608     INT32 retVal, ipAddr;
// 7609     UINT8 * p;
// 7610     GSN_NWIF_IP_CONFIG_T  ipconfig;
// 7611 
// 7612     /* check the validity of parameter passed */
// 7613     p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+164
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 7614     if (!p)
        CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_0
// 7615     {
// 7616         return S2W_EINVAL;
        MOVS     R0,#+2
??AppS2wCmd_DhcpSrvr_1:
        B.N      ??AppS2wCmd_DhcpSrvr_2
// 7617     }
// 7618     status = AppS2wParse_Int(p, &mode);
??AppS2wCmd_DhcpSrvr_0:
        BL       ?Subroutine52
// 7619     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_325:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_DhcpSrvr_1
// 7620     {
// 7621         return status;
// 7622     }
// 7623     if(mode != 0)
        LDR      R0,[SP, #+4]
        LDR.W    R4,??DataTable453_2
        LDR.W    R5,??DataTable453_1
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_DhcpSrvr_3
// 7624     {
// 7625 		if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
        LDRB     R0,[R5, #+1]
        LSLS     R1,R0,#+31
        BMI.N    ??AppS2wCmd_DhcpSrvr_4
// 7626 		return S2W_FAILURE;
// 7627        if(!(dhcpServerFlags & S2W_DHCP_SRVR_CFG_DONE))
        LDR.W    R6,??DataTable455
        LSLS     R0,R0,#+30
        BMI.N    ??AppS2wCmd_DhcpSrvr_5
// 7628        {
// 7629         memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
        MOVS     R2,#+48
        MOVS     R1,#+0
        MOV      R0,R4
          CFI FunCall memset
        BL       memset
// 7630         dhcpSrvrCfg.numOfClients = s2wCurrent.lmtdApConf.dhcpNumAddresses;
        LDRB     R0,[R6, #+665]
        STR      R0,[R4, #+32]
// 7631        }
// 7632         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_DhcpSrvr_5:
        ADD      R0,SP,#+164
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 7633         if ((p) && (*p != '\0'))
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_DhcpSrvr_6
// 7634         {
// 7635             status = AppS2wParse_Boolean(p, &dns);
        BL       ?Subroutine59
// 7636 		    if (status != S2W_SUCCESS)
??CrossCallReturnLabel_368:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_DhcpSrvr_2
// 7637 		    {
// 7638 		        return status;
// 7639 		    }
// 7640         }
// 7641         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_DhcpSrvr_6:
        ADD      R0,SP,#+164
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 7642         if ((p) && (*p != '\0'))
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_DhcpSrvr_7
// 7643         {
// 7644             status = AppS2wParse_Boolean(p, &gateway);
        BL       ?Subroutine60
// 7645             if (status != S2W_SUCCESS)
??CrossCallReturnLabel_376:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_DhcpSrvr_2
// 7646             {
// 7647                 return status;
// 7648             }
// 7649         }
// 7650 
// 7651         
// 7652         GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&ipconfig);
??AppS2wCmd_DhcpSrvr_7:
        MOVW     R8,#+5200
        LDR.W    R7,??DataTable444
        LDR      R0,[R7, #+0]
        ADD      R1,SP,#+8
        ADD      R0,R8,R0
          CFI FunCall GsnNwIf_IpConfigGet
        BL       GsnNwIf_IpConfigGet
// 7653         memcpy(&ipAddr,&ipconfig.ipv4.ipAddr, 4);
        LDR      R0,[SP, #+20]
// 7654         dhcpSrvrCfg.serverIpAddr = ipAddr;
// 7655         if(!dns)
        LDRB     R1,[SP, #+1]
        STR      R0,[R4, #+0]
        CBNZ.N   R1,??AppS2wCmd_DhcpSrvr_8
// 7656         {
// 7657           dhcpSrvrCfg.dns1 = ipAddr;
        STR      R0,[R4, #+16]
// 7658           if(S2W_DNS_CLIENT_FALGS & S2W_DNSv4_SERVER_SET)
        LDRB     R1,[R5, #+0]
        LSLS     R1,R1,#+29
        BPL.N    ??AppS2wCmd_DhcpSrvr_9
// 7659           {
// 7660             dhcpSrvrCfg.dns1 = *(ULONG*)s2wCurrent.dns1;
        LDR      R1,[R6, #+424]
        B.N      ??AppS2wCmd_DhcpSrvr_10
// 7661             dhcpSrvrCfg.dns2 = *(ULONG*)s2wCurrent.dns1;
// 7662           }
// 7663         }
// 7664         else
// 7665         {
// 7666             dhcpSrvrCfg.dns1 = 0;
??AppS2wCmd_DhcpSrvr_8:
        MOVS     R1,#+0
??AppS2wCmd_DhcpSrvr_10:
        STR      R1,[R4, #+16]
// 7667             dhcpSrvrCfg.dns2 = 0;
        STR      R1,[R4, #+20]
// 7668         }
// 7669         
// 7670         if(!(dhcpServerFlags & S2W_DHCP_SRVR_CFG_DONE))
??AppS2wCmd_DhcpSrvr_9:
        LDRB     R1,[R5, #+1]
        LSLS     R1,R1,#+30
        BMI.N    ??AppS2wCmd_DhcpSrvr_11
// 7671         {
// 7672        
// 7673         dhcpSrvrCfg.startIpAddr = ipAddr + 1;
        ADDS     R0,R0,#+1
        STR      R0,[R4, #+4]
// 7674         
// 7675         memcpy(&dhcpSrvrCfg.subnetMask, s2wCurrent.netConf.netMask, 4);
        MOVS     R2,#+4
        ADD      R1,R6,#+400
        ADD      R0,R4,#+8
          CFI FunCall memcpy
        BL       memcpy
// 7676         }
// 7677         
// 7678         dhcpSrvrCfg.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
??AppS2wCmd_DhcpSrvr_11:
        LDR      R0,[R7, #+0]
        ADD      R1,R8,R0
// 7679         dhcpSrvrCfg.pWdd = &s2wappMainTaskCtxt->if0.wddCtx;
        ADDW     R0,R0,#+3808
        STR      R0,[R4, #+28]
        STR      R1,[R4, #+24]
// 7680         if(!gateway)
        LDRB     R0,[SP, #+0]
        CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_12
        LDRB     R0,[R6, #+4]
        CMP      R0,#+6
        IT       EQ 
        LDREQ.W  R0,??DataTable455_1  ;; 0xc0a8f001
// 7681         {
// 7682          	/* Bug Fix 5676 - LimitedAP is offering Default gateway even when it is 
// 7683          	          configured to different gateway with NCM */
// 7684         	if(S2W_WLANDATA_MODE_PROV_AP == s2wCurrent.mode )
// 7685         	{
// 7686 				dhcpSrvrCfg.gateway = S2W_DEFAULT_GRP_PROV_GATE_ADDRESS;
        BEQ.N    ??AppS2wCmd_DhcpSrvr_13
// 7687         	}
// 7688 			else if(S2W_WLANDATA_MODE_AP == s2wCurrent.mode )
        CMP      R0,#+2
        IT       NE 
        CMPNE    R0,#+1
// 7689 			{			
// 7690 	            memcpy(&dhcpSrvrCfg.gateway, &s2wCurrent.netConf.gateway, 4);
// 7691 			}
// 7692 			else if(S2W_WLANDATA_MODE_INFRA == s2wCurrent.mode )
        BNE.N    ??AppS2wCmd_DhcpSrvr_14
// 7693 			{
// 7694 				 memcpy(&dhcpSrvrCfg.gateway, &s2wCurrent.netConf.gateway, 4);
        MOVS     R2,#+4
        ADD      R1,R6,#+404
        ADD      R0,R4,#+12
          CFI FunCall memcpy
        BL       memcpy
        B.N      ??AppS2wCmd_DhcpSrvr_14
// 7695 			}
// 7696 			
// 7697         }
// 7698         else
// 7699         {
// 7700             dhcpSrvrCfg.gateway = 0;
??AppS2wCmd_DhcpSrvr_12:
        MOVS     R0,#+0
??AppS2wCmd_DhcpSrvr_13:
        STR      R0,[R4, #+12]
// 7701         }
// 7702 		dhcpSrvrCfg.leaseTime	 = s2wCurrent.lmtdApConf.dhcpLeaseTime;
??AppS2wCmd_DhcpSrvr_14:
        LDR      R0,[R6, #+740]
// 7703 		if(0 == dhcpSrvrCfg.leaseTime)
        CBNZ.N   R0,??AppS2wCmd_DhcpSrvr_15
// 7704 		{
// 7705                         dhcpSrvrCfg.leaseTime = htonl((UINT32)(S2W_DFLT_AP_DHCPSRVR_LEASE_TIME));
        LDR.W    R0,??DataTable455_2  ;; 0x80510100
??AppS2wCmd_DhcpSrvr_15:
        STR      R0,[R4, #+36]
// 7706                       
// 7707 		}
// 7708          
// 7709         /* Client connect/Disconnect notification callbacks */        
// 7710         GsnDhcpSrvr_ClientConnectNotify(&dhcpSrvrCfg,NULL);
// 7711         GsnDhcpSrvr_ClientDisconnectNotify(&dhcpSrvrCfg,NULL);   
// 7712         
// 7713         retVal = GsnDhcpSrvr_Start(&dhcpSrvr, &dhcpSrvrCfg);
// 7714     }
// 7715     else
// 7716     {
// 7717         retVal = GsnDhcpSrvr_Stop(&dhcpSrvr);
// 7718         if(retVal < 0)
// 7719         {
// 7720           return S2W_FAILURE;
// 7721         }
// 7722         else
// 7723         {
// 7724          dhcpServerFlags &= 0xfe;
// 7725          return S2W_SUCCESS;
// 7726         }
// 7727     }
// 7728 
// 7729     if(retVal < 0)
        MOV      R1,R4
        MOVS     R0,#+0
        STR      R0,[R4, #+40]
        STR      R0,[R4, #+44]
        ADD      R0,R4,#+48
          CFI FunCall GsnDhcpSrvr_Start
        BL       GsnDhcpSrvr_Start
        CMP      R0,#+0
        BPL.N    ??AppS2wCmd_DhcpSrvr_16
// 7730     {
// 7731         return S2W_FAILURE;
        B.N      ??AppS2wCmd_DhcpSrvr_4
// 7732     }
??AppS2wCmd_DhcpSrvr_3:
        ADD      R0,R4,#+48
          CFI FunCall GsnDhcpSrvr_Stop
        BL       GsnDhcpSrvr_Stop
        CMP      R0,#+0
        BPL.N    ??AppS2wCmd_DhcpSrvr_17
??AppS2wCmd_DhcpSrvr_4:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_DhcpSrvr_2
??AppS2wCmd_DhcpSrvr_17:
        LDRB     R0,[R5, #+1]
        AND      R0,R0,#0xFE
        B.N      ??AppS2wCmd_DhcpSrvr_18
// 7733     else
// 7734     {
// 7735         dhcpServerFlags |= S2W_DHCP_SRVR_ENABLED;
??AppS2wCmd_DhcpSrvr_16:
        LDRB     R0,[R5, #+1]
        ORR      R0,R0,#0x1
??AppS2wCmd_DhcpSrvr_18:
        STRB     R0,[R5, #+1]
// 7736         return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_DhcpSrvr_2:
        ADD      SP,SP,#+168
          CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock385
// 7737     }
// 7738 }
// 7739 
// 7740 #endif //S2W_DHCP_SERVER_ENABLE
// 7741 
// 7742 #ifdef S2W_DNS_SERVER_ENABLE
// 7743 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock386 Using cfiCommon0
          CFI Function S2wDnsConfigGet
        THUMB
// 7744 VOID S2wDnsConfigGet(GSN_DNS_INIT_PARAM_T *gsnDnsInitParams)
// 7745 {
S2wDnsConfigGet:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+160
          CFI CFA R13+168
        MOV      R4,R0
// 7746     INT32 ip;
// 7747     GSN_NWIF_IP_CONFIG_T  ipconfig;
// 7748     memcpy(&ip, s2wCurrent.netConf.ipAddr, sizeof(S2W_IPADDR_T));
        MOVS     R2,#+4
        LDR.W    R1,??DataTable455_3
        BL       ?Subroutine27
// 7749   
// 7750     gsnDnsInitParams->flags = IP_VERSION_V4
// 7751     #ifdef S2W_IPv6_SUPPORT
// 7752       //| IP_VERSION_V6
// 7753     #endif
// 7754         ;
??CrossCallReturnLabel_73:
        MOVS     R0,#+1
        STRH     R0,[R4, #+0]
// 7755      memset(&ipconfig,0,sizeof(GSN_NWIF_IP_CONFIG_T));
        MOVS     R2,#+152
        BL       ?Subroutine16
// 7756 
// 7757     GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&ipconfig);
??CrossCallReturnLabel_29:
        MOV      R1,R0
        BL       ?Subroutine75
??CrossCallReturnLabel_442:
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_IpConfigGet
        BL       GsnNwIf_IpConfigGet
// 7758     if(ipconfig.ipv4.ipAddr)
        LDR      R0,[SP, #+20]
        CBZ.N    R0,??S2wDnsConfigGet_0
// 7759     memcpy(&ip, &ipconfig.ipv4.ipAddr, sizeof(S2W_IPADDR_T)); 
        STR      R0,[SP, #+0]
// 7760 #ifdef S2W_IPv6_SUPPORT    
// 7761     if(ipconfig.ipv6.globalAddr)
// 7762     memcpy(gsnDnsInitParams->serverIpv6Addr,ipconfig.ipv6.globalAddr,16);
// 7763     else
// 7764     memcpy(gsnDnsInitParams->serverIpv6Addr,ipconfig.ipv6.linkLocalAddr,16);
// 7765 #endif    
// 7766     
// 7767     gsnDnsInitParams->serverIpAddr = ip;
??S2wDnsConfigGet_0:
        LDR      R0,[SP, #+0]
        STR      R0,[R4, #+4]
// 7768 }
        ADD      SP,SP,#+160
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock386

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond387 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_441
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond388 Using cfiCommon0
          CFI (cfiCond388) Function S2wDnsConfigGet
          CFI (cfiCond388) NoCalls S2wDnsConfigGet
          CFI (cfiCond388) NoCalls AppS2wCmd_Nauto
          CFI (cfiCond388) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiCond388) Conditional ??CrossCallReturnLabel_442
          CFI (cfiCond388) R4 Frame(CFA, -8)
          CFI (cfiCond388) R14 Frame(CFA, -4)
          CFI (cfiCond388) CFA R13+168
          CFI Block cfiCond389 Using cfiCommon0
          CFI (cfiCond389) Function AppS2wCmd_Nauto
          CFI (cfiCond389) NoCalls S2wDnsConfigGet
          CFI (cfiCond389) NoCalls AppS2wCmd_Nauto
          CFI (cfiCond389) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiCond389) Conditional ??CrossCallReturnLabel_443
          CFI (cfiCond389) R4 Frame(CFA, -12)
          CFI (cfiCond389) R5 Frame(CFA, -8)
          CFI (cfiCond389) R14 Frame(CFA, -4)
          CFI (cfiCond389) CFA R13+96
          CFI Block cfiPicker390 Using cfiCommon1
          CFI (cfiPicker390) NoFunction
          CFI (cfiPicker390) NoCalls S2wDnsConfigGet
          CFI (cfiPicker390) NoCalls AppS2wCmd_Nauto
          CFI (cfiPicker390) NoCalls AppS2wCmd_HttpClientOpen
          CFI (cfiPicker390) Picker
        THUMB
?Subroutine75:
        LDR.W    R0,??DataTable448
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+5120
        BX       LR
          CFI EndBlock cfiCond387
          CFI EndBlock cfiCond388
          CFI EndBlock cfiCond389
          CFI EndBlock cfiPicker390

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond391 Using cfiCommon0
          CFI Function AppS2wCmd_Wscan
          CFI Conditional ??CrossCallReturnLabel_32
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+152
          CFI Block cfiCond392 Using cfiCommon0
          CFI (cfiCond392) Function AppS2wCmd_Nset
          CFI (cfiCond392) Conditional ??CrossCallReturnLabel_31
          CFI (cfiCond392) R4 Frame(CFA, -16)
          CFI (cfiCond392) R5 Frame(CFA, -12)
          CFI (cfiCond392) R6 Frame(CFA, -8)
          CFI (cfiCond392) R14 Frame(CFA, -4)
          CFI (cfiCond392) CFA R13+232
          CFI Block cfiCond393 Using cfiCommon0
          CFI (cfiCond393) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond393) Conditional ??CrossCallReturnLabel_30
          CFI (cfiCond393) R4 Frame(CFA, -12)
          CFI (cfiCond393) R5 Frame(CFA, -8)
          CFI (cfiCond393) R14 Frame(CFA, -4)
          CFI (cfiCond393) CFA R13+40
          CFI Block cfiCond394 Using cfiCommon0
          CFI (cfiCond394) Function S2wDnsConfigGet
          CFI (cfiCond394) Conditional ??CrossCallReturnLabel_29
          CFI (cfiCond394) R4 Frame(CFA, -8)
          CFI (cfiCond394) R14 Frame(CFA, -4)
          CFI (cfiCond394) CFA R13+168
          CFI Block cfiCond395 Using cfiCommon0
          CFI (cfiCond395) Function AppS2wCmd_Ping
          CFI (cfiCond395) Conditional ??CrossCallReturnLabel_28
          CFI (cfiCond395) R4 Frame(CFA, -16)
          CFI (cfiCond395) R5 Frame(CFA, -12)
          CFI (cfiCond395) R6 Frame(CFA, -8)
          CFI (cfiCond395) R14 Frame(CFA, -4)
          CFI (cfiCond395) CFA R13+72
          CFI Block cfiCond396 Using cfiCommon0
          CFI (cfiCond396) Function AppS2wCmd_CoapSend
          CFI (cfiCond396) Conditional ??CrossCallReturnLabel_27
          CFI (cfiCond396) R4 Frame(CFA, -24)
          CFI (cfiCond396) R5 Frame(CFA, -20)
          CFI (cfiCond396) R6 Frame(CFA, -16)
          CFI (cfiCond396) R7 Frame(CFA, -12)
          CFI (cfiCond396) R8 Frame(CFA, -8)
          CFI (cfiCond396) R14 Frame(CFA, -4)
          CFI (cfiCond396) CFA R13+1440
          CFI Block cfiPicker397 Using cfiCommon1
          CFI (cfiPicker397) NoFunction
          CFI (cfiPicker397) Picker
        THUMB
?Subroutine16:
        MOVS     R1,#+0
        ADD      R0,SP,#+8
          CFI FunCall AppS2wCmd_Wscan memset
          CFI FunCall AppS2wCmd_Nset memset
          CFI FunCall AppS2wCmd_ieeePsPollSet memset
          CFI FunCall S2wDnsConfigGet memset
          CFI FunCall AppS2wCmd_Ping memset
          CFI FunCall AppS2wCmd_CoapSend memset
        B.W      memset
          CFI EndBlock cfiCond391
          CFI EndBlock cfiCond392
          CFI EndBlock cfiCond393
          CFI EndBlock cfiCond394
          CFI EndBlock cfiCond395
          CFI EndBlock cfiCond396
          CFI EndBlock cfiPicker397
// 7769 
// 7770 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock398 Using cfiCommon0
          CFI Function AppS2wCmd_Dns
        THUMB
// 7771 PUBLIC UINT8
// 7772 AppS2wCmd_Dns(UINT8 *ptr)
// 7773 {
AppS2wCmd_Dns:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+32
          CFI CFA R13+56
// 7774     UINT8 status;
// 7775     UINT8 mode, *p;
// 7776     INT32 retVal;
// 7777 
// 7778     GSN_DNS_INIT_PARAM_T gsnDnsInitParams;
// 7779 
// 7780     /* check the validity of parameter passed */
// 7781     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
??CrossCallReturnLabel_186:
        MOVS     R4,R0
// 7782     if (!p)
        IT       EQ 
        MOVEQ    R0,#+2
// 7783     {
// 7784         return S2W_EINVAL;
        BEQ.N    ??AppS2wCmd_Dns_0
// 7785     }
// 7786     status = AppS2wParse_Boolean(p, &mode);
        BL       ?Subroutine60
// 7787     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_375:
        CBNZ.N   R0,??AppS2wCmd_Dns_0
// 7788     {
// 7789         return status;
// 7790     }
// 7791  // dnsServer.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
// 7792    memset(&gsnDnsInitParams,0,sizeof(GSN_DNS_INIT_PARAM_T));
        MOVS     R2,#+24
        MOVS     R1,#+0
        ADD      R0,SP,#+4
          CFI FunCall memset
        BL       memset
// 7793    S2wDnsConfigGet(&gsnDnsInitParams);
          CFI FunCall S2wDnsConfigGet
        BL       S2wDnsConfigGet
// 7794 
// 7795      if(mode)
        LDR.W    R5,??DataTable455
        LDRB     R0,[SP, #+0]
        ADDW     R6,R5,#+673
        ADDW     R7,R5,#+1060
        CBZ.N    R0,??AppS2wCmd_Dns_1
// 7796     {
// 7797         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine37
??CrossCallReturnLabel_185:
        MOV      R4,R0
// 7798         /*if (!p)
// 7799         	{
// 7800            		 return S2W_EINVAL;
// 7801        		 }*/
// 7802         retVal = GsnDnsSrvr_Start(&dnsServer, p,&gsnDnsInitParams);
        ADD      R2,SP,#+4
        MOV      R1,R4
        MOV      R0,R7
          CFI FunCall GsnDnsSrvr_Start
        BL       GsnDnsSrvr_Start
// 7803 		if(retVal == GSN_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Dns_2
// 7804 		{
// 7805 			s2wCurrent.lmtdApConf.dnsServerEnable=1;
        MOVS     R0,#+1
        BL       ?Subroutine19
// 7806 			memset(s2wCurrent.lmtdApConf.dnsDomainName,0,MAX_DNS_DOMAIN_LEN);
// 7807 			if(p != NULL)
??CrossCallReturnLabel_43:
        CBZ.N    R4,??CrossCallReturnLabel_501
// 7808 				memcpy(s2wCurrent.lmtdApConf.dnsDomainName,p,strlen((const char *)p));
        BL       ?Subroutine70
// 7809     	}
// 7810     }
??CrossCallReturnLabel_425:
        MOV      R2,R0
        MOV      R1,R4
        BL       ?Subroutine95
// 7811     else
// 7812     {
// 7813         retVal = GsnDnsSrvr_Stop(&dnsServer);
// 7814 		if(retVal == GSN_SUCCESS)
// 7815 		{
// 7816 			s2wCurrent.lmtdApConf.dnsServerEnable=0;			
// 7817 			memset(s2wCurrent.lmtdApConf.dnsDomainName,0,MAX_DNS_DOMAIN_LEN);
// 7818 		}
// 7819     }
// 7820     if(retVal < 0)
// 7821         return S2W_FAILURE;
// 7822     else
// 7823         return S2W_SUCCESS;
??CrossCallReturnLabel_501:
        MOVS     R0,#+0
??AppS2wCmd_Dns_0:
        ADD      SP,SP,#+36
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI CFA R13+56
??AppS2wCmd_Dns_1:
        MOV      R0,R7
          CFI FunCall GsnDnsSrvr_Stop
        BL       GsnDnsSrvr_Stop
        CBNZ.N   R0,??AppS2wCmd_Dns_2
        BL       ?Subroutine19
??CrossCallReturnLabel_42:
        B.N      ??CrossCallReturnLabel_501
??AppS2wCmd_Dns_2:
        CMP      R0,#+0
        BPL.N    ??CrossCallReturnLabel_501
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Dns_0
          CFI EndBlock cfiBlock398
// 7824 }
// 7825 
// 7826 #endif //S2W_DNS_SERVER_ENABLE
// 7827 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock399 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateAdd
        THUMB
// 7828 UINT8
// 7829 AppS2wCmd_SslCertificateAdd(UINT8 *ptr)
// 7830 {
AppS2wCmd_SslCertificateAdd:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+48
          CFI CFA R13+72
// 7831     UINT8 *p, *name;
// 7832     INT32 len,fileLen ,i = 0;
// 7833     UINT32 certStore;
// 7834 	INT32 status;
// 7835 	UINT8 buf[38]={0};
        ADD      R0,SP,#+4
        MOVS     R1,#+40
          CFI FunCall __aeabi_memclr4
        BL       __aeabi_memclr4
// 7836     name = AppS2wParse_NextParamGet(&ptr);     //get cert name
        BL       ??Subroutine142_0
??CrossCallReturnLabel_647:
        MOVS     R5,R0
// 7837     if (!name)
        BEQ.N    ??AppS2wCmd_SslCertificateAdd_0
// 7838     {
// 7839         return S2W_EINVAL;
// 7840     }
// 7841     len = strlen((const char *)name);
          CFI FunCall strlen
        BL       strlen
        MOV      R6,R0
// 7842     if( len > 32)
        CMP      R6,#+33
        BGE.N    ??AppS2wCmd_SslCertificateAdd_0
// 7843         return S2W_EINVAL;
// 7844     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine142_0
// 7845     if (!p)
??CrossCallReturnLabel_646:
        CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
// 7846     {
// 7847         return S2W_EINVAL;
// 7848     }
// 7849     AppS2wParse_Int(p, &certFormat);
        BL       ?Subroutine136
// 7850     if(certFormat > 1)
??CrossCallReturnLabel_623:
        LDR      R0,[R4, #+4]
        CMP      R0,#+2
        BCS.N    ??AppS2wCmd_SslCertificateAdd_0
// 7851         return S2W_EINVAL;
// 7852     //S2w_Printf("\n\rfile format %d", certFormat);
// 7853 
// 7854     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine142_0
// 7855     if (!p)
??CrossCallReturnLabel_645:
        CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
// 7856     {
// 7857         return S2W_EINVAL;
// 7858     }
// 7859 
// 7860     AppS2wParse_Int(p, &certFileSize);
        ADD      R1,R4,#+8
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 7861 
// 7862     certFileSize = certFileSize >> certFormat;
        BL       ?Subroutine38
// 7863     //S2w_Printf("\n\rfile size %d", certFileSize);
// 7864 
// 7865     p = AppS2wParse_NextParamGet(&ptr);     //get wehre to store SRAM/FLASH
// 7866     if (!p)
??CrossCallReturnLabel_649:
        CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_0
// 7867     {
// 7868         return S2W_EINVAL;
// 7869     }
// 7870     AppS2wParse_Int(p, &certStore);
        BL       ?Subroutine51
// 7871 
// 7872     if(certStore > 1)
??CrossCallReturnLabel_290:
        LDR      R0,[SP, #+0]
        CMP      R0,#+2
        BCC.N    ??AppS2wCmd_SslCertificateAdd_1
// 7873         return S2W_EINVAL;
??AppS2wCmd_SslCertificateAdd_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_SslCertificateAdd_2
// 7874 
// 7875 	if(S2wCert_findFile((char*)name) == -1)
??AppS2wCmd_SslCertificateAdd_1:
        MOV      R0,R5
          CFI FunCall S2wCert_findFile
        BL       S2wCert_findFile
        CMN      R0,#+1
        BNE.N    ??AppS2wCmd_SslCertificateAdd_3
// 7876 	{
// 7877 		S2w_Printf("\n\rFILE EXISTS\n\r");
        ADR.W    R0,`?<Constant "\\n\\rFILE EXISTS\\n\\r">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_SslCertificateAdd_4
// 7878 		return S2W_FAILURE;
// 7879 	}
// 7880     if(certStore)
??AppS2wCmd_SslCertificateAdd_3:
        LDR      R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_SslCertificateAdd_5
// 7881     {
// 7882     	i = S2wCert_MemAlloc(certFileSize);
        LDR      R0,[R4, #+8]
        UXTH     R0,R0
          CFI FunCall S2wCert_MemAlloc
        BL       S2wCert_MemAlloc
        MOV      R7,R0
// 7883 	    //S2w_Printf("\nmem-alloc :%d\n",i);
// 7884 	    if(i == -1)
        CMN      R7,#+1
        BEQ.N    ??AppS2wCmd_SslCertificateAdd_4
// 7885 	    	return S2W_FAILURE;
// 7886         p = gsn_malloc(len+1); //allocate memory for storing name
        MOVS     R2,#+0
        MOVW     R1,#+7886
        ADDS     R0,R6,#+1
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOVS     R6,R0
// 7887         if(p == NULL)
        BEQ.N    ??AppS2wCmd_SslCertificateAdd_4
// 7888             return S2W_FAILURE;
// 7889         strcpy((INT8 *)p, (const char *)name);
        MOV      R1,R5
          CFI FunCall strcpy
        BL       strcpy
// 7890         s2w_ssl_cert_table[i].name = p; //copy pointer to SRAM entry
        MOVS     R0,#+12
        LDR.W    R1,??DataTable456_1
        MLA      R0,R0,R7,R1
// 7891         s2w_ssl_cert_table[i].location = CERT_IN_RAM;
        MOVS     R1,#+1
        STR      R6,[R0, #+4]
        STRB     R1,[R0, #+8]
// 7892         certIndex = i;
        B.N      ??AppS2wCmd_SslCertificateAdd_6
// 7893     }
// 7894     else
// 7895     {
// 7896 	    status = f_mkdir("certs");
??AppS2wCmd_SslCertificateAdd_5:
        ADR.W    R0,`?<Constant "certs">`
          CFI FunCall fsm_mkdir
        BL       fsm_mkdir
// 7897 		if(status != F_NO_ERROR || status != F_ERR_DUPLICATED )
// 7898 		{
// 7899 			fileLen= sprintf((char*)buf,"certs/");
        ADD      R0,SP,#+4
        ADR.W    R1,`?<Constant "certs/">`
          CFI FunCall sprintf
        BL       sprintf
// 7900 			memcpy(buf + fileLen, name, len);
        ADD      R3,SP,#+4
        MOV      R2,R6
        MOV      R1,R5
        ADDS     R0,R0,R3
          CFI FunCall memcpy
        BL       memcpy
// 7901 	        certFile = f_open((const char *)buf, "w");
        ADR.N    R1,??DataTable443  ;; "w"
        ADD      R0,SP,#+4
          CFI FunCall fsm_open
        BL       fsm_open
        STR      R0,[R4, #+12]
// 7902         if(certFile == NULL)
        CBNZ.N   R0,??AppS2wCmd_SslCertificateAdd_7
// 7903         	return S2W_FAILURE;
??AppS2wCmd_SslCertificateAdd_4:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_SslCertificateAdd_2
// 7904 		}
// 7905         certIndex = S2W_INVALID_CERT_INDEX;
??AppS2wCmd_SslCertificateAdd_7:
        MOV      R7,#-1
??AppS2wCmd_SslCertificateAdd_6:
        STR      R7,[R4, #+0]
// 7906     }
// 7907 
// 7908     /* Store the Cert Index in a global. This is used when the actual certificate
// 7909       is received in the next escape sequence */
// 7910 
// 7911     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_SslCertificateAdd_2:
        ADD      SP,SP,#+52
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock399
// 7912 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rFILE EXISTS\\n\\r">`:
        DC8 "\012\015FILE EXISTS\012\015"
// 7913 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock400 Using cfiCommon0
          CFI Function AppS2wCertificateData
        THUMB
// 7914 PUBLIC UINT32
// 7915 AppS2wCertificateData(UINT8 ch1)
// 7916 {
AppS2wCertificateData:
        PUSH     {R3-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
// 7917     UINT8 *buf,*tempBuff;//, ch;
// 7918     UINT16 i = 2, index = 0;
// 7919 	UINT8 certInRam=0;
// 7920 
// 7921     if ( (certIndex == S2W_INVALID_CERT_INDEX) && (certFile == NULL))
        LDR.W    R5,??DataTable457
        LDR      R1,[R5, #+0]
        MOVS     R4,#+0
        MOVS     R7,#+0
        CMN      R1,#+1
        ITT      EQ 
        LDREQ    R0,[R5, #+12]
        CMPEQ    R0,#+0
        BEQ.N    ??AppS2wCertificateData_0
// 7922             return S2W_FAILURE;
// 7923 
// 7924     if( certFileSize == 0)
        LDR      R0,[R5, #+8]
        CBZ.N    R0,??AppS2wCertificateData_0
        LDR      R2,[R5, #+4]
        LDR.W    R8,??DataTable456_1
        LSLS     R0,R0,R2
        MOV      R10,#+12
        CMN      R1,#+1
        BEQ.N    ??AppS2wCertificateData_1
        MLA      R1,R10,R1,R8
        LDRB     R1,[R1, #+8]
        CMP      R1,#+1
        BNE.N    ??AppS2wCertificateData_1
// 7925             return S2W_FAILURE;
// 7926 
// 7927 	if((certIndex != S2W_INVALID_CERT_INDEX) && (CERT_IN_RAM == s2w_ssl_cert_table[certIndex].location ) )
// 7928 	{
// 7929 		buf = gsn_malloc((certFileSize << certFormat) + 2 );
        MOVS     R2,#+0
        MOVW     R1,#+7929
        ADDS     R0,R0,#+2
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOV      R6,R0
// 7930 		certInRam=1;
        MOVS     R7,#+1
        B.N      ??AppS2wCertificateData_2
// 7931     }
// 7932 	else
// 7933     buf = gsn_malloc((certFileSize << certFormat) );
??AppS2wCertificateData_1:
        MOVS     R2,#+0
        MOVW     R1,#+7933
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOV      R6,R0
// 7934 
// 7935     if(buf == NULL)
??AppS2wCertificateData_2:
        CBNZ.N   R6,??AppS2wCertificateData_3
// 7936         return S2W_FAILURE;
??AppS2wCertificateData_0:
        MOVS     R0,#+1
        B.N      ??AppS2wCertificateData_4
// 7937 	tempBuff = buf;
??AppS2wCertificateData_3:
        MOV      R9,R6
// 7938 
// 7939 	if(certInRam)
        CBZ.N    R7,??AppS2wCertificateData_5
// 7940 	{
// 7941     	*buf = certFileSize & 0x00FF;
        LDR      R0,[R5, #+8]
        STRB     R0,[R6], #+1
// 7942 	    *(buf + 1) = (certFileSize & 0xFF00) >> 8;
        LDR      R0,[R5, #+8]
        LSRS     R0,R0,#+8
        STRB     R0,[R6], #+1
// 7943 		buf+=2;
// 7944 	}
// 7945     certFileSize = certFileSize << certFormat;
??AppS2wCertificateData_5:
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        LSL      R1,R0,R1
        STR      R1,[R5, #+8]
// 7946 
// 7947     /* store incoming byte in temparory bufer */
// 7948     AppS2wHal_CharNGet((buf), certFileSize);
        MOV      R0,R6
          CFI FunCall AppS2wHal_CharNGet
        BL       AppS2wHal_CharNGet
// 7949 
// 7950     if(certFormat)
        LDR      R0,[R5, #+4]
        CBZ.N    R0,??AppS2wCertificateData_6
// 7951     {
// 7952         for(i = 0; i < certFileSize ;)
        MOVS     R7,#+0
        B.N      ??AppS2wCertificateData_7
// 7953         {
// 7954             buf[index] = (AppS2wParse_ToHex(buf[i]) << 4) | (AppS2wParse_ToHex(buf[i + 1]) & 0x0F);
??AppS2wCertificateData_8:
        LDRB     R0,[R7, R6]
          CFI FunCall AppS2wParse_ToHex
        BL       AppS2wParse_ToHex
        MOV      R11,R0
        ADDS     R0,R7,R6
        LDRB     R0,[R0, #+1]
          CFI FunCall AppS2wParse_ToHex
        BL       AppS2wParse_ToHex
        AND      R0,R0,#0xF
        UXTH     R4,R4
        ORR      R0,R0,R11, LSL #+4
        STRB     R0,[R4, R6]
// 7955             i = i + 2;
// 7956             index++;
        ADDS     R4,R4,#+1
        ADDS     R0,R7,#+2
        UXTH     R7,R0
// 7957         }
??AppS2wCertificateData_7:
        LDR      R0,[R5, #+8]
        CMP      R7,R0
        BCC.N    ??AppS2wCertificateData_8
??AppS2wCertificateData_6:
        LDR      R0,[R5, #+8]
        LDR      R1,[R5, #+4]
        LSR      R2,R0,R1
        LDR      R0,[R5, #+0]
        CMN      R0,#+1
        BEQ.N    ??AppS2wCertificateData_9
// 7958     }
// 7959 
// 7960 
// 7961     /* recieving file is complete. If the Cert Address is in the 0x8000000
// 7962     range store it in flash else store it in SRAM (0x4000000 range) */
// 7963     if ( certIndex !=  S2W_INVALID_CERT_INDEX)
// 7964     {
// 7965         /* store in SRAM */
// 7966         memcpy((UINT8 *) s2w_ssl_cert_table[certIndex].certAddress, tempBuff,
// 7967             ((certFileSize >> certFormat) + 2));
        MLA      R0,R10,R0,R8
        ADDS     R2,R2,#+2
        LDR      R0,[R0, #+0]
        MOV      R1,R9
          CFI FunCall memcpy
        BL       memcpy
        B.N      ??AppS2wCertificateData_10
// 7968 
// 7969     }
// 7970     else
// 7971     {
// 7972         /* store in flash */
// 7973         f_write(tempBuff, 1, (certFileSize >> certFormat) , certFile);
??AppS2wCertificateData_9:
        LDR      R3,[R5, #+12]
        MOVS     R1,#+1
        MOV      R0,R9
          CFI FunCall fsm_write
        BL       fsm_write
// 7974 		f_close(certFile);
        LDR      R0,[R5, #+12]
          CFI FunCall fsm_close
        BL       fsm_close
// 7975     }
// 7976     /* reset variables */
// 7977     certIndex = S2W_INVALID_CERT_INDEX;
??AppS2wCertificateData_10:
        MOV      R0,#-1
        STR      R0,[R5, #+0]
// 7978     certFileSize = 0;
        MOVS     R0,#+0
        STR      R0,[R5, #+8]
// 7979 	certFile = NULL;
        STR      R0,[R5, #+12]
// 7980     gsn_free(tempBuff);
        MOV      R0,R9
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 7981     S2w_Printf("\r\nOK\r\n");
        ADR.W    R0,`?<Constant "\\r\\nOK\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 7982     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCertificateData_4:
        POP      {R1,R4-R11,PC}   ;; return
          CFI EndBlock cfiBlock400
// 7983 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nOK\\r\\n">`:
        DC8 "\015\012OK\015\012"
        DC8 0
// 7984 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock401 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateDelete
        THUMB
// 7985 UINT8
// 7986 AppS2wCmd_SslCertificateDelete(UINT8 *ptr)
// 7987 {
AppS2wCmd_SslCertificateDelete:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
// 7988     UINT8 *p, retVal =0;;
// 7989     INT32 certIndex;
// 7990 
// 7991     p = AppS2wParse_NextParamGet(&ptr);     //get cert name
        BL       ?Subroutine25
??CrossCallReturnLabel_63:
        MOVS     R4,R0
// 7992     if (!p)
        BNE.N    ??AppS2wCmd_SslCertificateDelete_0
// 7993     {
// 7994          return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,R4-R7,PC}
// 7995     }
// 7996     certIndex = S2wCert_SearchRamTable((char*)p);
??AppS2wCmd_SslCertificateDelete_0:
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
// 7997     if(certIndex != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_SslCertificateDelete_1
// 7998     {
// 7999     	gsn_free (s2w_ssl_cert_table[certIndex].certAddress);
        MOVS     R1,#+12
        MUL      R5,R1,R0
        LDR.W    R6,??DataTable456_1
        LDR      R0,[R5, R6]
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 8000         gsn_free(s2w_ssl_cert_table[certIndex].name);
        ADDS     R7,R5,R6
        LDR      R0,[R7, #+4]
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 8001         s2w_ssl_cert_table[certIndex].name = NULL;
        MOVS     R0,#+0
        STR      R0,[R7, #+4]
// 8002         s2w_ssl_cert_table[certIndex].certAddress = NULL;
        STR      R0,[R5, R6]
// 8003         if( s2w_ssl_cert_table[certIndex].location == CERT_IN_FLASH )
        LDRB     R0,[R7, #+8]
        CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_2
// 8004     	{
// 8005 			retVal = AppS2w_CertDelete(p);
// 8006     	}
// 8007     }
// 8008     else
// 8009     {
// 8010     	retVal = AppS2w_CertDelete(p);
// 8011     }
// 8012 
// 8013     if(retVal == S2W_SUCCESS)
??AppS2wCmd_SslCertificateDelete_1:
        MOV      R0,R4
          CFI FunCall AppS2w_CertDelete
        BL       AppS2w_CertDelete
        CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_3
// 8014     {
// 8015     	if(strcmp((const char*)p,S2W_CERT_NAME_CA) == 0)
??AppS2wCmd_SslCertificateDelete_2:
        LDR.W    R1,??DataTable458
        MOV      R0,R4
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_SslCertificateDelete_4
// 8016     	{
// 8017 			s2wCurrent.security.eap.useCaCert=0;
        LDR.W    R0,??DataTable455
        MOVS     R1,#+0
        STRB     R1,[R0, #+320]
// 8018     	}
// 8019         return S2W_SUCCESS;
??AppS2wCmd_SslCertificateDelete_4:
        MOVS     R0,#+0
        POP      {R1,R4-R7,PC}
// 8020     }
// 8021     else
// 8022         return S2W_FAILURE;
??AppS2wCmd_SslCertificateDelete_3:
        MOVS     R0,#+1
        POP      {R1,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock401
// 8023 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable440:
        DC32     s2wFlashParams

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable440_1:
        DC32     s2wIsAutoconnected
// 8024 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock402 Using cfiCommon0
          CFI Function AppS2wCmd_Weap
        THUMB
// 8025 PRIVATE UINT8
// 8026 AppS2wCmd_Weap(UINT8 *ptr)
// 8027 {
AppS2wCmd_Weap:
        PUSH     {R0,R4-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+32
        SUB      SP,SP,#+48
          CFI CFA R13+80
// 8028     UINT8 *name, *p;
// 8029     INT32 i = 0;
// 8030     UINT32 certStore, certType;
// 8031 	INT32 status;
// 8032 	INT32 fileLen;
// 8033 	UINT8 buf[38]={0};
        ADD      R0,SP,#+8
        MOVS     R1,#+40
          CFI FunCall __aeabi_memclr4
        BL       __aeabi_memclr4
// 8034 
// 8035     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine142_0
// 8036     if (!p)
??CrossCallReturnLabel_644:
        CBZ.N    R0,??AppS2wCmd_Weap_0
// 8037     {
// 8038         return S2W_EINVAL;
// 8039     }
// 8040     AppS2wParse_Int(p, &certType);
        BL       ?Subroutine51
// 8041 
// 8042     if(certType > 2)
??CrossCallReturnLabel_289:
        LDR      R0,[SP, #+0]
        CMP      R0,#+3
        BCS.N    ??AppS2wCmd_Weap_0
// 8043         return S2W_EINVAL;
// 8044 
// 8045     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine142_0
// 8046     if (!p)
??CrossCallReturnLabel_643:
        CBZ.N    R0,??AppS2wCmd_Weap_0
// 8047     {
// 8048         return S2W_EINVAL;
// 8049     }
// 8050 
// 8051     AppS2wParse_Int(p, &certFormat);
        BL       ?Subroutine136
// 8052 
// 8053     if(certFormat > 1)
??CrossCallReturnLabel_622:
        LDR      R0,[R4, #+4]
        CMP      R0,#+2
        BCS.N    ??AppS2wCmd_Weap_0
// 8054         return S2W_EINVAL;
// 8055 
// 8056     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine142_0
// 8057     if (!p)
??CrossCallReturnLabel_642:
        CBZ.N    R0,??AppS2wCmd_Weap_0
// 8058     {
// 8059         return S2W_EINVAL;
// 8060     }
// 8061     AppS2wParse_Int(p, &certFileSize);
        ADD      R1,R4,#+8
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 8062     certFileSize = certFileSize >> certFormat;
        BL       ?Subroutine38
// 8063     p = AppS2wParse_NextParamGet(&ptr);
// 8064     if (!p)
??CrossCallReturnLabel_648:
        CBZ.N    R0,??AppS2wCmd_Weap_0
// 8065     {
// 8066         return S2W_EINVAL;
// 8067     }
// 8068     AppS2wParse_Int(p, &certStore);
        BL       ?Subroutine52
// 8069 
// 8070     if(certStore > 1)
??CrossCallReturnLabel_324:
        LDR      R0,[SP, #+4]
        CMP      R0,#+2
        BCC.N    ??AppS2wCmd_Weap_1
// 8071         return S2W_EINVAL;
??AppS2wCmd_Weap_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Weap_2
// 8072 
// 8073     if(certStore)
??AppS2wCmd_Weap_1:
        LDR.W    R5,??DataTable459
        LDR.W    R8,??DataTable459_1
        LDR.W    R9,??DataTable458
        CBZ.N    R0,??AppS2wCmd_Weap_3
// 8074     {
// 8075     	i = S2wCert_MemAlloc(certFileSize);
        LDR      R0,[R4, #+8]
        UXTH     R0,R0
          CFI FunCall S2wCert_MemAlloc
        BL       S2wCert_MemAlloc
        MOV      R6,R0
// 8076 
// 8077 	    if(i == -1)
        CMN      R6,#+1
        BEQ.N    ??AppS2wCmd_Weap_4
// 8078 	        return S2W_FAILURE;
// 8079 
// 8080         name = gsn_malloc(32);
        MOVS     R2,#+0
        MOVW     R1,#+8080
        MOVS     R0,#+32
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOV      R7,R0
// 8081         if(certType == 0)
        LDR      R0,[SP, #+0]
        CBNZ.N   R0,??AppS2wCmd_Weap_5
// 8082             strcpy((INT8 *)name, S2W_CERT_NAME_CA);
        MOVS     R2,#+7
        MOV      R1,R9
        B.N      ??AppS2wCmd_Weap_6
// 8083         else if(certType == 1)
??AppS2wCmd_Weap_5:
        CMP      R0,#+1
        ITTEE    EQ 
        MOVEQ    R2,#+11
        MOVEQ    R1,R8
        MOVNE    R2,#+8
        MOVNE    R1,R5
// 8084             strcpy((INT8 *)name, S2W_CERT_NAME_CLIENT);
// 8085         else
// 8086             strcpy((INT8 *)name, S2W_CERT_NAME_KEY);
??AppS2wCmd_Weap_6:
        MOV      R0,R7
          CFI FunCall __aeabi_memcpy
        BL       __aeabi_memcpy
// 8087         s2w_ssl_cert_table[i].name = name;
        MOVS     R0,#+12
        LDR.W    R1,??DataTable456_1
        MLA      R0,R0,R6,R1
// 8088         s2w_ssl_cert_table[i].location = CERT_IN_RAM;
        MOVS     R1,#+1
        STR      R7,[R0, #+4]
        STRB     R1,[R0, #+8]
// 8089 		certIndex = i;
        B.N      ??AppS2wCmd_Weap_7
// 8090     }
// 8091     else
// 8092     {
// 8093         /* write certificate name in flash */
// 8094 		status = f_mkdir("certs");
??AppS2wCmd_Weap_3:
        ADR.W    R0,`?<Constant "certs">`
          CFI FunCall fsm_mkdir
        BL       fsm_mkdir
// 8095 		if(status != F_NO_ERROR || status != F_ERR_DUPLICATED )
// 8096 		{
// 8097 			fileLen= sprintf((char*)buf,"certs/");
        ADD      R0,SP,#+8
        ADR.W    R1,`?<Constant "certs/">`
          CFI FunCall sprintf
        BL       sprintf
// 8098         if(certType == 0)
        ADD      R1,SP,#+8
        ADDS     R0,R0,R1
        LDR      R1,[SP, #+0]
        CBNZ.N   R1,??AppS2wCmd_Weap_8
// 8099 				memcpy(buf + fileLen, S2W_CERT_NAME_CA, strlen(S2W_CERT_NAME_CA));	           
        MOVS     R2,#+6
        MOV      R1,R9
        B.N      ??AppS2wCmd_Weap_9
// 8100         else if(certType == 1)
??AppS2wCmd_Weap_8:
        CMP      R1,#+1
        ITTEE    EQ 
        MOVEQ    R2,#+10
        MOVEQ    R1,R8
        MOVNE    R2,#+7
        MOVNE    R1,R5
// 8101 				memcpy(buf + fileLen, S2W_CERT_NAME_CLIENT, strlen(S2W_CERT_NAME_CLIENT));
// 8102         else
// 8103 				memcpy(buf + fileLen, S2W_CERT_NAME_KEY, strlen(S2W_CERT_NAME_KEY));
??AppS2wCmd_Weap_9:
          CFI FunCall memcpy
        BL       memcpy
// 8104 			certFile = f_open((const char *)buf, "w");
        ADR.N    R1,??DataTable443  ;; "w"
        ADD      R0,SP,#+8
          CFI FunCall fsm_open
        BL       fsm_open
        STR      R0,[R4, #+12]
// 8105 
// 8106         if(certFile == NULL)
        CBNZ.N   R0,??AppS2wCmd_Weap_10
// 8107         	return S2W_FAILURE;
??AppS2wCmd_Weap_4:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Weap_2
// 8108         certIndex = S2W_INVALID_CERT_INDEX;
??AppS2wCmd_Weap_10:
        MOV      R6,#-1
??AppS2wCmd_Weap_7:
        STR      R6,[R4, #+0]
// 8109     	}
// 8110     }
// 8111     /* Store the Cert Index in a global. This is used when the actual certificate
// 8112       is received in the next escape sequence */
// 8113     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Weap_2:
        ADD      SP,SP,#+52
          CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
          CFI EndBlock cfiBlock402
// 8114 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "certs">`:
        DC8 "certs"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "certs/">`:
        DC8 "certs/"
        DC8 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond403 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateAdd
          CFI Conditional ??CrossCallReturnLabel_623
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond404 Using cfiCommon0
          CFI (cfiCond404) Function AppS2wCmd_Weap
          CFI (cfiCond404) Conditional ??CrossCallReturnLabel_622
          CFI (cfiCond404) R4 Frame(CFA, -28)
          CFI (cfiCond404) R5 Frame(CFA, -24)
          CFI (cfiCond404) R6 Frame(CFA, -20)
          CFI (cfiCond404) R7 Frame(CFA, -16)
          CFI (cfiCond404) R8 Frame(CFA, -12)
          CFI (cfiCond404) R9 Frame(CFA, -8)
          CFI (cfiCond404) R14 Frame(CFA, -4)
          CFI (cfiCond404) CFA R13+80
          CFI Block cfiPicker405 Using cfiCommon1
          CFI (cfiPicker405) NoFunction
          CFI (cfiPicker405) Picker
        THUMB
?Subroutine136:
        LDR.W    R4,??DataTable457
        ADDS     R1,R4,#+4
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_Int
          CFI FunCall AppS2wCmd_Weap AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond403
          CFI EndBlock cfiCond404
          CFI EndBlock cfiPicker405

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable442:
        DC32     s2wLinkState

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond406 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateAdd
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_649
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond407 Using cfiCommon0
          CFI (cfiCond407) Function AppS2wCmd_Weap
          CFI (cfiCond407) NoCalls AppS2wCmd_SslCertificateAdd
          CFI (cfiCond407) NoCalls AppS2wCmd_Weap
          CFI (cfiCond407) Conditional ??CrossCallReturnLabel_648
          CFI (cfiCond407) R4 Frame(CFA, -28)
          CFI (cfiCond407) R5 Frame(CFA, -24)
          CFI (cfiCond407) R6 Frame(CFA, -20)
          CFI (cfiCond407) R7 Frame(CFA, -16)
          CFI (cfiCond407) R8 Frame(CFA, -12)
          CFI (cfiCond407) R9 Frame(CFA, -8)
          CFI (cfiCond407) R14 Frame(CFA, -4)
          CFI (cfiCond407) CFA R13+80
          CFI Block cfiPicker408 Using cfiCommon1
          CFI (cfiPicker408) NoFunction
          CFI (cfiPicker408) NoCalls AppS2wCmd_SslCertificateAdd
          CFI (cfiPicker408) NoCalls AppS2wCmd_Weap
          CFI (cfiPicker408) Picker
        THUMB
?Subroutine38:
        LDR      R0,[R4, #+8]
        LDR      R1,[R4, #+4]
        LSRS     R0,R0,R1
        STR      R0,[R4, #+8]
          CFI EndBlock cfiCond406
          CFI EndBlock cfiCond407
          CFI EndBlock cfiPicker408
        REQUIRE ??Subroutine142_0
        ;; // Fall through to label ??Subroutine142_0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond409 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateAdd
          CFI Conditional ??CrossCallReturnLabel_647
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond410 Using cfiCommon0
          CFI (cfiCond410) Function AppS2wCmd_SslCertificateAdd
          CFI (cfiCond410) Conditional ??CrossCallReturnLabel_646
          CFI (cfiCond410) R4 Frame(CFA, -20)
          CFI (cfiCond410) R5 Frame(CFA, -16)
          CFI (cfiCond410) R6 Frame(CFA, -12)
          CFI (cfiCond410) R7 Frame(CFA, -8)
          CFI (cfiCond410) R14 Frame(CFA, -4)
          CFI (cfiCond410) CFA R13+72
          CFI Block cfiCond411 Using cfiCommon0
          CFI (cfiCond411) Function AppS2wCmd_SslCertificateAdd
          CFI (cfiCond411) Conditional ??CrossCallReturnLabel_645
          CFI (cfiCond411) R4 Frame(CFA, -20)
          CFI (cfiCond411) R5 Frame(CFA, -16)
          CFI (cfiCond411) R6 Frame(CFA, -12)
          CFI (cfiCond411) R7 Frame(CFA, -8)
          CFI (cfiCond411) R14 Frame(CFA, -4)
          CFI (cfiCond411) CFA R13+72
          CFI Block cfiCond412 Using cfiCommon0
          CFI (cfiCond412) Function AppS2wCmd_Weap
          CFI (cfiCond412) Conditional ??CrossCallReturnLabel_644
          CFI (cfiCond412) R4 Frame(CFA, -28)
          CFI (cfiCond412) R5 Frame(CFA, -24)
          CFI (cfiCond412) R6 Frame(CFA, -20)
          CFI (cfiCond412) R7 Frame(CFA, -16)
          CFI (cfiCond412) R8 Frame(CFA, -12)
          CFI (cfiCond412) R9 Frame(CFA, -8)
          CFI (cfiCond412) R14 Frame(CFA, -4)
          CFI (cfiCond412) CFA R13+80
          CFI Block cfiCond413 Using cfiCommon0
          CFI (cfiCond413) Function AppS2wCmd_Weap
          CFI (cfiCond413) Conditional ??CrossCallReturnLabel_643
          CFI (cfiCond413) R4 Frame(CFA, -28)
          CFI (cfiCond413) R5 Frame(CFA, -24)
          CFI (cfiCond413) R6 Frame(CFA, -20)
          CFI (cfiCond413) R7 Frame(CFA, -16)
          CFI (cfiCond413) R8 Frame(CFA, -12)
          CFI (cfiCond413) R9 Frame(CFA, -8)
          CFI (cfiCond413) R14 Frame(CFA, -4)
          CFI (cfiCond413) CFA R13+80
          CFI Block cfiCond414 Using cfiCommon0
          CFI (cfiCond414) Function AppS2wCmd_Weap
          CFI (cfiCond414) Conditional ??CrossCallReturnLabel_642
          CFI (cfiCond414) R4 Frame(CFA, -28)
          CFI (cfiCond414) R5 Frame(CFA, -24)
          CFI (cfiCond414) R6 Frame(CFA, -20)
          CFI (cfiCond414) R7 Frame(CFA, -16)
          CFI (cfiCond414) R8 Frame(CFA, -12)
          CFI (cfiCond414) R9 Frame(CFA, -8)
          CFI (cfiCond414) R14 Frame(CFA, -4)
          CFI (cfiCond414) CFA R13+80
          CFI Block cfiCond415 Using cfiCommon0
          CFI (cfiCond415) Function AppS2wCmd_SslCertificateAdd
          CFI (cfiCond415) Conditional ??CrossCallReturnLabel_649
          CFI (cfiCond415) R4 Frame(CFA, -20)
          CFI (cfiCond415) R5 Frame(CFA, -16)
          CFI (cfiCond415) R6 Frame(CFA, -12)
          CFI (cfiCond415) R7 Frame(CFA, -8)
          CFI (cfiCond415) R14 Frame(CFA, -4)
          CFI (cfiCond415) CFA R13+72
          CFI Block cfiCond416 Using cfiCommon0
          CFI (cfiCond416) Function AppS2wCmd_Weap
          CFI (cfiCond416) Conditional ??CrossCallReturnLabel_648
          CFI (cfiCond416) R4 Frame(CFA, -28)
          CFI (cfiCond416) R5 Frame(CFA, -24)
          CFI (cfiCond416) R6 Frame(CFA, -20)
          CFI (cfiCond416) R7 Frame(CFA, -16)
          CFI (cfiCond416) R8 Frame(CFA, -12)
          CFI (cfiCond416) R9 Frame(CFA, -8)
          CFI (cfiCond416) R14 Frame(CFA, -4)
          CFI (cfiCond416) CFA R13+80
          CFI Block cfiPicker417 Using cfiCommon1
          CFI (cfiPicker417) NoFunction
          CFI (cfiPicker417) Picker
        THUMB
??Subroutine142_0:
        ADD      R0,SP,#+48
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Weap AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Weap AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Weap AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_SslCertificateAdd AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Weap AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond409
          CFI EndBlock cfiCond410
          CFI EndBlock cfiCond411
          CFI EndBlock cfiCond412
          CFI EndBlock cfiCond413
          CFI EndBlock cfiCond414
          CFI EndBlock cfiCond415
          CFI EndBlock cfiCond416
          CFI EndBlock cfiPicker417
// 8115 
// 8116 #endif /* IOT_APP_ENABLE */
// 8117 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock418 Using cfiCommon0
          CFI Function AppS2wCmd_BeaconMissThresholdSet
        THUMB
// 8118 UINT8 AppS2wCmd_BeaconMissThresholdSet(UINT8 *ptr)
// 8119 {
AppS2wCmd_BeaconMissThresholdSet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 8120   UINT8 status;
// 8121   UINT32 beaconMissThresholdTime=0;
        BL       ?Subroutine7
// 8122   UINT32 beaconMissThresholdNo=0;
// 8123   UINT8 *p;
// 8124 
// 8125   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??CrossCallReturnLabel_9:
        CBZ.N    R0,??AppS2wCmd_BeaconMissThresholdSet_0
// 8126   {
// 8127     status = AppS2wParse_Int(p, &beaconMissThresholdTime);
        BL       ?Subroutine52
// 8128       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_323:
        CBNZ.N   R0,??AppS2wCmd_BeaconMissThresholdSet_1
// 8129       {
// 8130           return status;
// 8131       }
// 8132    }
// 8133 
// 8134   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_BeaconMissThresholdSet_0:
        BL       ??Subroutine34_0
??CrossCallReturnLabel_151:
        CBZ.N    R0,??AppS2wCmd_BeaconMissThresholdSet_2
// 8135   {
// 8136     status = AppS2wParse_Int(p, &beaconMissThresholdNo);
        BL       ?Subroutine51
// 8137       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_288:
        CBNZ.N   R0,??AppS2wCmd_BeaconMissThresholdSet_1
// 8138       {
// 8139           return status;
// 8140       }
// 8141    }
// 8142 
// 8143   status = GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,beaconMissThresholdTime,beaconMissThresholdNo);
// 8144 
// 8145      return status;
??AppS2wCmd_BeaconMissThresholdSet_2:
        LDR.N    R0,??DataTable448
        LDR      R2,[SP, #+0]
        LDR      R0,[R0, #+0]
        LDR      R1,[SP, #+4]
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_BeaconMissThresholdSet
        BL       GsnWdd_BeaconMissThresholdSet
        UXTB     R0,R0
??AppS2wCmd_BeaconMissThresholdSet_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock418
// 8146 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable443:
        DC8      "w",0x0,0x0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond419 Using cfiCommon0
          CFI Function AppS2wCmd_scanTimeSet
          CFI Conditional ??CrossCallReturnLabel_332
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond420 Using cfiCommon0
          CFI (cfiCond420) Function AppS2wCmd_Nstcp
          CFI (cfiCond420) Conditional ??CrossCallReturnLabel_331
          CFI (cfiCond420) R14 Frame(CFA, -4)
          CFI (cfiCond420) CFA R13+80
          CFI Block cfiCond421 Using cfiCommon0
          CFI (cfiCond421) Function AppS2wCmd_SetSockOp
          CFI (cfiCond421) Conditional ??CrossCallReturnLabel_330
          CFI (cfiCond421) R14 Frame(CFA, -4)
          CFI (cfiCond421) CFA R13+32
          CFI Block cfiCond422 Using cfiCommon0
          CFI (cfiCond422) Function AppS2wCmd_Wmode
          CFI (cfiCond422) Conditional ??CrossCallReturnLabel_329
          CFI (cfiCond422) R4 Frame(CFA, -36)
          CFI (cfiCond422) R5 Frame(CFA, -32)
          CFI (cfiCond422) R6 Frame(CFA, -28)
          CFI (cfiCond422) R7 Frame(CFA, -24)
          CFI (cfiCond422) R8 Frame(CFA, -20)
          CFI (cfiCond422) R9 Frame(CFA, -16)
          CFI (cfiCond422) R10 Frame(CFA, -12)
          CFI (cfiCond422) R11 Frame(CFA, -8)
          CFI (cfiCond422) R14 Frame(CFA, -4)
          CFI (cfiCond422) CFA R13+72
          CFI Block cfiCond423 Using cfiCommon0
          CFI (cfiCond423) Function AppS2wCmd_PowerSave
          CFI (cfiCond423) Conditional ??CrossCallReturnLabel_328
          CFI (cfiCond423) R14 Frame(CFA, -4)
          CFI (cfiCond423) CFA R13+16
          CFI Block cfiCond424 Using cfiCommon0
          CFI (cfiCond424) Function AppS2wCmd_UartFifoLevel
          CFI (cfiCond424) Conditional ??CrossCallReturnLabel_327
          CFI (cfiCond424) R4 Frame(CFA, -12)
          CFI (cfiCond424) R5 Frame(CFA, -8)
          CFI (cfiCond424) R14 Frame(CFA, -4)
          CFI (cfiCond424) CFA R13+24
          CFI Block cfiCond425 Using cfiCommon0
          CFI (cfiCond425) Function AppS2wCmd_ieeePsPollSet
          CFI (cfiCond425) Conditional ??CrossCallReturnLabel_326
          CFI (cfiCond425) R4 Frame(CFA, -12)
          CFI (cfiCond425) R5 Frame(CFA, -8)
          CFI (cfiCond425) R14 Frame(CFA, -4)
          CFI (cfiCond425) CFA R13+40
          CFI Block cfiCond426 Using cfiCommon0
          CFI (cfiCond426) Function AppS2wCmd_DhcpSrvr
          CFI (cfiCond426) Conditional ??CrossCallReturnLabel_325
          CFI (cfiCond426) R4 Frame(CFA, -24)
          CFI (cfiCond426) R5 Frame(CFA, -20)
          CFI (cfiCond426) R6 Frame(CFA, -16)
          CFI (cfiCond426) R7 Frame(CFA, -12)
          CFI (cfiCond426) R8 Frame(CFA, -8)
          CFI (cfiCond426) R14 Frame(CFA, -4)
          CFI (cfiCond426) CFA R13+192
          CFI Block cfiCond427 Using cfiCommon0
          CFI (cfiCond427) Function AppS2wCmd_Weap
          CFI (cfiCond427) Conditional ??CrossCallReturnLabel_324
          CFI (cfiCond427) R4 Frame(CFA, -28)
          CFI (cfiCond427) R5 Frame(CFA, -24)
          CFI (cfiCond427) R6 Frame(CFA, -20)
          CFI (cfiCond427) R7 Frame(CFA, -16)
          CFI (cfiCond427) R8 Frame(CFA, -12)
          CFI (cfiCond427) R9 Frame(CFA, -8)
          CFI (cfiCond427) R14 Frame(CFA, -4)
          CFI (cfiCond427) CFA R13+80
          CFI Block cfiCond428 Using cfiCommon0
          CFI (cfiCond428) Function AppS2wCmd_BeaconMissThresholdSet
          CFI (cfiCond428) Conditional ??CrossCallReturnLabel_323
          CFI (cfiCond428) R14 Frame(CFA, -4)
          CFI (cfiCond428) CFA R13+16
          CFI Block cfiCond429 Using cfiCommon0
          CFI (cfiCond429) Function AppS2wCmd_RtsEnable
          CFI (cfiCond429) Conditional ??CrossCallReturnLabel_322
          CFI (cfiCond429) R14 Frame(CFA, -4)
          CFI (cfiCond429) CFA R13+16
          CFI Block cfiCond430 Using cfiCommon0
          CFI (cfiCond430) Function AppS2wCmd_FrameTxFailCntLmitSet
          CFI (cfiCond430) Conditional ??CrossCallReturnLabel_321
          CFI (cfiCond430) R14 Frame(CFA, -4)
          CFI (cfiCond430) CFA R13+16
          CFI Block cfiCond431 Using cfiCommon0
          CFI (cfiCond431) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond431) Conditional ??CrossCallReturnLabel_320
          CFI (cfiCond431) R14 Frame(CFA, -4)
          CFI (cfiCond431) CFA R13+24
          CFI Block cfiCond432 Using cfiCommon0
          CFI (cfiCond432) Function AppS2wCmd_NcmAutoConf
          CFI (cfiCond432) Conditional ??CrossCallReturnLabel_319
          CFI (cfiCond432) R4 Frame(CFA, -8)
          CFI (cfiCond432) R14 Frame(CFA, -4)
          CFI (cfiCond432) CFA R13+24
          CFI Block cfiCond433 Using cfiCommon0
          CFI (cfiCond433) Function AppS2wCmd_Dgpio
          CFI (cfiCond433) Conditional ??CrossCallReturnLabel_318
          CFI (cfiCond433) R4 Frame(CFA, -8)
          CFI (cfiCond433) R14 Frame(CFA, -4)
          CFI (cfiCond433) CFA R13+24
          CFI Block cfiCond434 Using cfiCommon0
          CFI (cfiCond434) Function AppS2wCmd_AdcConf
          CFI (cfiCond434) Conditional ??CrossCallReturnLabel_317
          CFI (cfiCond434) R4 Frame(CFA, -12)
          CFI (cfiCond434) R5 Frame(CFA, -8)
          CFI (cfiCond434) R14 Frame(CFA, -4)
          CFI (cfiCond434) CFA R13+24
          CFI Block cfiCond435 Using cfiCommon0
          CFI (cfiCond435) Function AppS2wCmd_AdcRead
          CFI (cfiCond435) Conditional ??CrossCallReturnLabel_316
          CFI (cfiCond435) R4 Frame(CFA, -20)
          CFI (cfiCond435) R5 Frame(CFA, -16)
          CFI (cfiCond435) R6 Frame(CFA, -12)
          CFI (cfiCond435) R7 Frame(CFA, -8)
          CFI (cfiCond435) R14 Frame(CFA, -4)
          CFI (cfiCond435) CFA R13+40
          CFI Block cfiCond436 Using cfiCommon0
          CFI (cfiCond436) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond436) Conditional ??CrossCallReturnLabel_315
          CFI (cfiCond436) R4 Frame(CFA, -16)
          CFI (cfiCond436) R5 Frame(CFA, -12)
          CFI (cfiCond436) R6 Frame(CFA, -8)
          CFI (cfiCond436) R14 Frame(CFA, -4)
          CFI (cfiCond436) CFA R13+40
          CFI Block cfiCond437 Using cfiCommon0
          CFI (cfiCond437) Function AppS2wCmd_CoapSend
          CFI (cfiCond437) Conditional ??CrossCallReturnLabel_314
          CFI (cfiCond437) R4 Frame(CFA, -24)
          CFI (cfiCond437) R5 Frame(CFA, -20)
          CFI (cfiCond437) R6 Frame(CFA, -16)
          CFI (cfiCond437) R7 Frame(CFA, -12)
          CFI (cfiCond437) R8 Frame(CFA, -8)
          CFI (cfiCond437) R14 Frame(CFA, -4)
          CFI (cfiCond437) CFA R13+1440
          CFI Block cfiPicker438 Using cfiCommon1
          CFI (cfiPicker438) NoFunction
          CFI (cfiPicker438) Picker
        THUMB
?Subroutine52:
        ADD      R1,SP,#+4
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Nstcp AppS2wParse_Int
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_PowerSave AppS2wParse_Int
          CFI FunCall AppS2wCmd_UartFifoLevel AppS2wParse_Int
          CFI FunCall AppS2wCmd_ieeePsPollSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_DhcpSrvr AppS2wParse_Int
          CFI FunCall AppS2wCmd_Weap AppS2wParse_Int
          CFI FunCall AppS2wCmd_BeaconMissThresholdSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_RtsEnable AppS2wParse_Int
          CFI FunCall AppS2wCmd_FrameTxFailCntLmitSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_Int
          CFI FunCall AppS2wCmd_NcmAutoConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_Dgpio AppS2wParse_Int
          CFI FunCall AppS2wCmd_AdcConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_AdcRead AppS2wParse_Int
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond419
          CFI EndBlock cfiCond420
          CFI EndBlock cfiCond421
          CFI EndBlock cfiCond422
          CFI EndBlock cfiCond423
          CFI EndBlock cfiCond424
          CFI EndBlock cfiCond425
          CFI EndBlock cfiCond426
          CFI EndBlock cfiCond427
          CFI EndBlock cfiCond428
          CFI EndBlock cfiCond429
          CFI EndBlock cfiCond430
          CFI EndBlock cfiCond431
          CFI EndBlock cfiCond432
          CFI EndBlock cfiCond433
          CFI EndBlock cfiCond434
          CFI EndBlock cfiCond435
          CFI EndBlock cfiCond436
          CFI EndBlock cfiCond437
          CFI EndBlock cfiPicker438
// 8147 
// 8148 
// 8149 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock439 Using cfiCommon0
          CFI Function AppS2wCmd_TkipContrMsrStart
        THUMB
// 8150 UINT8 AppS2wCmd_TkipContrMsrStart(UINT8 *ptr)
// 8151 {
AppS2wCmd_TkipContrMsrStart:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+4
          CFI CFA R13+16
// 8152   UINT8 status = S2W_FAILURE, enable = 0;
        MOVS     R0,#+0
        STRB     R0,[SP, #+0]
        MOVS     R4,#+1
// 8153   UINT8 *p;
// 8154 
// 8155   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine35
??CrossCallReturnLabel_166:
        CBZ.N    R0,??AppS2wCmd_TkipContrMsrStart_0
// 8156   {
// 8157     status = AppS2wParse_Boolean(p, &enable);
        BL       ?Subroutine60
??CrossCallReturnLabel_374:
        MOVS     R4,R0
// 8158       if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_TkipContrMsrStart_1
// 8159       {
// 8160           return status;
// 8161       }
// 8162    }
// 8163 
// 8164   if(enable)
??AppS2wCmd_TkipContrMsrStart_0:
        LDRB     R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_TkipContrMsrStart_1
// 8165   status =  GsnWdd_TkipContrMsrStart(&s2wappMainTaskCtxt->if0.wddCtx);
        BL       ?Subroutine74
??CrossCallReturnLabel_437:
          CFI FunCall GsnWdd_TkipContrMsrStart
        BL       GsnWdd_TkipContrMsrStart
        MOV      R4,R0
// 8166 
// 8167   return status;
??AppS2wCmd_TkipContrMsrStart_1:
        UXTB     R0,R4
        POP      {R1,R2,R4,PC}    ;; return
          CFI EndBlock cfiBlock439
// 8168 
// 8169 }
// 8170 
// 8171 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock440 Using cfiCommon0
          CFI Function AppS2wCmd_TkipSeqNumGet
        THUMB
// 8172 UINT8 AppS2wCmd_TkipSeqNumGet(UINT8 *ptr)
// 8173 {
AppS2wCmd_TkipSeqNumGet:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 8174   UINT8 status = S2W_FAILURE,enable = 0;
        MOVS     R0,#+0
        STRB     R0,[SP, #+0]
        MOVS     R4,#+1
// 8175   UINT8 *p;
// 8176   GSN_WIF_WLAN_TKIP_COUNTER_GET_RSP_T Resp;
// 8177 
// 8178   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine39
??CrossCallReturnLabel_212:
        CBZ.N    R0,??AppS2wCmd_TkipSeqNumGet_0
// 8179   {
// 8180     status = AppS2wParse_Boolean(p, &enable);
        BL       ?Subroutine60
??CrossCallReturnLabel_373:
        MOVS     R4,R0
// 8181       if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_TkipSeqNumGet_1
// 8182       {
// 8183           return status;
// 8184       }
// 8185    }
// 8186 
// 8187   if(enable)
??AppS2wCmd_TkipSeqNumGet_0:
        LDRB     R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_TkipSeqNumGet_2
// 8188     status =  GsnWdd_TkipSeqNumGet(&s2wappMainTaskCtxt->if0.wddCtx,&Resp);
        BL       ?Subroutine80
??CrossCallReturnLabel_453:
        ADD      R1,SP,#+4
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_TkipSeqNumGet
        BL       GsnWdd_TkipSeqNumGet
        MOV      R4,R0
// 8189 
// 8190   if(status == S2W_SUCCESS)
??AppS2wCmd_TkipSeqNumGet_2:
        UXTB     R4,R4
        CBNZ.N   R4,??AppS2wCmd_TkipSeqNumGet_1
// 8191     S2w_Printf("\r\nTKIP Sequence Number:%x %x\r\n",&Resp.msb,&Resp.lsb);
        ADD      R2,SP,#+8
        ADD      R1,SP,#+4
        ADR.W    R0,`?<Constant "\\r\\nTKIP Sequence Numbe...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 8192 
// 8193   return status;
??AppS2wCmd_TkipSeqNumGet_1:
        MOV      R0,R4
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock440
// 8194 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nTKIP Sequence Numbe...">`:
        DC8 "\015\012TKIP Sequence Number:%x %x\015\012"
        DC8 0
// 8195 
// 8196 
// 8197 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock441 Using cfiCommon0
          CFI Function AppS2wCmd_WlanRecvFiltrSet
        THUMB
// 8198 UINT8 AppS2wCmd_WlanRecvFiltrSet(UINT8 *ptr)
// 8199 {
AppS2wCmd_WlanRecvFiltrSet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 8200   UINT8 status;
// 8201   UINT8 *p;
// 8202   GSN_WDD_WLAN_RECV_FILTR_SET_PARAM_T RecvFiltrParams;
// 8203 
// 8204    if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ??Subroutine34_0
??CrossCallReturnLabel_150:
        CBZ.N    R0,??AppS2wCmd_WlanRecvFiltrSet_0
// 8205   {
// 8206     status = AppS2wParse_Int(p,&RecvFiltrParams.filter);
        BL       ?Subroutine51
// 8207       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_287:
        CBNZ.N   R0,??AppS2wCmd_WlanRecvFiltrSet_1
// 8208       {
// 8209           return status;
// 8210       }
// 8211    }
// 8212 
// 8213   status = GsnWdd_WlanRecvFiltrSet(&s2wappMainTaskCtxt->if0.wddCtx,&RecvFiltrParams);
// 8214 
// 8215   return status;
??AppS2wCmd_WlanRecvFiltrSet_0:
        BL       ?Subroutine78
??CrossCallReturnLabel_449:
          CFI FunCall GsnWdd_WlanRecvFiltrSet
        BL       GsnWdd_WlanRecvFiltrSet
        UXTB     R0,R0
??AppS2wCmd_WlanRecvFiltrSet_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock441
// 8216 
// 8217 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond442 Using cfiCommon0
          CFI Function AppS2wCmd_Wpower
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_448
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+48
          CFI Block cfiCond443 Using cfiCommon0
          CFI (cfiCond443) Function AppS2wCmd_WlanRecvFiltrSet
          CFI (cfiCond443) NoCalls AppS2wCmd_WlanRecvFiltrSet
          CFI (cfiCond443) NoCalls AppS2wCmd_Wpower
          CFI (cfiCond443) Conditional ??CrossCallReturnLabel_449
          CFI (cfiCond443) R14 Frame(CFA, -4)
          CFI (cfiCond443) CFA R13+16
          CFI Block cfiPicker444 Using cfiCommon1
          CFI (cfiPicker444) NoFunction
          CFI (cfiPicker444) NoCalls AppS2wCmd_WlanRecvFiltrSet
          CFI (cfiPicker444) NoCalls AppS2wCmd_Wpower
          CFI (cfiPicker444) Picker
        THUMB
?Subroutine78:
        LDR.N    R0,??DataTable448
        LDR      R0,[R0, #+0]
        ADD      R1,SP,#+0
        ADD      R0,R0,#+3808
        BX       LR
          CFI EndBlock cfiCond442
          CFI EndBlock cfiCond443
          CFI EndBlock cfiPicker444

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable444:
        DC32     s2wappMainTaskCtxt
// 8218 
// 8219 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock445 Using cfiCommon0
          CFI Function AppS2wCmd_RtsEnable
        THUMB
// 8220 UINT8 AppS2wCmd_RtsEnable(UINT8 *ptr)
// 8221 {
AppS2wCmd_RtsEnable:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 8222   UINT8 status;
// 8223   UINT32 temp;
// 8224   UINT8 *p;
// 8225   GSN_WDD_RTS_ENBL_PARAM_T RstParams;
// 8226 
// 8227    if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ??Subroutine34_0
??CrossCallReturnLabel_149:
        CBZ.N    R0,??AppS2wCmd_RtsEnable_0
// 8228   {
// 8229     status = AppS2wParse_Int(p,&temp);
        BL       ?Subroutine52
// 8230       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_322:
        CBNZ.N   R0,??AppS2wCmd_RtsEnable_1
// 8231       {
// 8232           return status;
// 8233       }
// 8234 
// 8235       RstParams.threshold = temp;
        LDR      R0,[SP, #+4]
        STRH     R0,[SP, #+2]
// 8236    }
// 8237 
// 8238    if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_RtsEnable_0:
        BL       ??Subroutine34_0
??CrossCallReturnLabel_148:
        CBZ.N    R0,??AppS2wCmd_RtsEnable_2
// 8239   {
// 8240     status = AppS2wParse_Boolean(p,&RstParams.txOpEnable);
        BL       ?Subroutine60
// 8241       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_372:
        CBNZ.N   R0,??AppS2wCmd_RtsEnable_1
// 8242       {
// 8243           return status;
// 8244       }
// 8245    }
// 8246 
// 8247    status = GsnWdd_RtsEnable(&s2wappMainTaskCtxt->if0.wddCtx,&RstParams);
// 8248 
// 8249   return status;
??AppS2wCmd_RtsEnable_2:
        BL       ?Subroutine65
??CrossCallReturnLabel_401:
          CFI FunCall GsnWdd_RtsEnable
        BL       GsnWdd_RtsEnable
        UXTB     R0,R0
??AppS2wCmd_RtsEnable_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock445
// 8250 }
// 8251 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock446 Using cfiCommon0
          CFI Function AppS2wCmd_BlockAckReq
        THUMB
// 8252 UINT8 AppS2wCmd_BlockAckReq(UINT8 *ptr)
// 8253 {
AppS2wCmd_BlockAckReq:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+16
          CFI CFA R13+24
// 8254   UINT8 status,action;
// 8255   UINT8 *p;
// 8256   UINT32 temp;
// 8257   GSN_WDD_BLOCKACK_REQ_T BlockAckReq;
// 8258 
// 8259   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine30
??CrossCallReturnLabel_92:
        CBZ.N    R0,??AppS2wCmd_BlockAckReq_0
// 8260   {
// 8261       status = AppS2wParse_Mac(p, BlockAckReq.ra);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Mac
        BL       AppS2wParse_Mac
// 8262       if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
// 8263 	{
// 8264           return status;
// 8265 	}
// 8266   }
// 8267 
// 8268   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_BlockAckReq_0:
        BL       ?Subroutine30
??CrossCallReturnLabel_91:
        CBZ.N    R0,??AppS2wCmd_BlockAckReq_2
// 8269   {
// 8270       status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 8271       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_286:
        CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
// 8272 	{
// 8273           return status;
// 8274 	}
// 8275       BlockAckReq.tid = temp;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+14]
// 8276   }
// 8277 
// 8278 
// 8279   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_BlockAckReq_2:
        BL       ?Subroutine30
??CrossCallReturnLabel_90:
        CBZ.N    R0,??CrossCallReturnLabel_627
// 8280   {
// 8281      status = AppS2wParse_Boolean(p, &action);
        BL       ?Subroutine62
// 8282       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_392:
        CBNZ.N   R0,??AppS2wCmd_BlockAckReq_1
// 8283       {
// 8284           return status;
// 8285       }
// 8286 
// 8287       BlockAckReq.action = action;
        BL       ?Subroutine138
// 8288    }
// 8289 
// 8290 
// 8291   status = GsnWdd_BlockAckReq(&s2wappMainTaskCtxt->if0.wddCtx,&BlockAckReq);
// 8292 
// 8293   return status;
??CrossCallReturnLabel_627:
        BL       ?Subroutine49
??CrossCallReturnLabel_253:
          CFI FunCall GsnWdd_BlockAckReq
        BL       GsnWdd_BlockAckReq
        UXTB     R0,R0
??AppS2wCmd_BlockAckReq_1:
        ADD      SP,SP,#+20
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock446
// 8294 
// 8295 }
// 8296 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock447 Using cfiCommon0
          CFI Function AppS2wCmd_AmsduReqt
        THUMB
// 8297 UINT8 AppS2wCmd_AmsduReqt(UINT8 *ptr)
// 8298 {
AppS2wCmd_AmsduReqt:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+16
          CFI CFA R13+24
// 8299   UINT8 status,action;
// 8300   UINT8 *p;
// 8301   UINT32 temp;
// 8302   GSN_WDD_AMSDU_REQ_T AmsduReq;
// 8303 
// 8304   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine30
??CrossCallReturnLabel_89:
        CBZ.N    R0,??AppS2wCmd_AmsduReqt_0
// 8305   {
// 8306       status = AppS2wParse_Mac(p, AmsduReq.ra);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Mac
        BL       AppS2wParse_Mac
// 8307       if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
// 8308 	{
// 8309           return status;
// 8310 	}
// 8311   }
// 8312 
// 8313   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_AmsduReqt_0:
        BL       ?Subroutine30
??CrossCallReturnLabel_88:
        CBZ.N    R0,??AppS2wCmd_AmsduReqt_2
// 8314   {
// 8315       status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 8316       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_285:
        CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
// 8317 	{
// 8318           return status;
// 8319 	}
// 8320       AmsduReq.tid = temp;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+14]
// 8321   }
// 8322 
// 8323 
// 8324   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_AmsduReqt_2:
        BL       ?Subroutine30
??CrossCallReturnLabel_87:
        CBZ.N    R0,??CrossCallReturnLabel_628
// 8325   {
// 8326      status = AppS2wParse_Boolean(p, &action);
        BL       ?Subroutine62
// 8327       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_391:
        CBNZ.N   R0,??AppS2wCmd_AmsduReqt_1
// 8328       {
// 8329           return status;
// 8330       }
// 8331 
// 8332       AmsduReq.action = action;
        BL       ?Subroutine138
// 8333    }
// 8334 
// 8335   status =GsnWdd_AmsduReq(&s2wappMainTaskCtxt->if0.wddCtx,&AmsduReq);
// 8336 
// 8337   return status;
??CrossCallReturnLabel_628:
        BL       ?Subroutine49
??CrossCallReturnLabel_254:
          CFI FunCall GsnWdd_AmsduReq
        BL       GsnWdd_AmsduReq
        UXTB     R0,R0
??AppS2wCmd_AmsduReqt_1:
        ADD      SP,SP,#+20
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock447
// 8338 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond448 Using cfiCommon0
          CFI Function AppS2wCmd_BlockAckReq
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_627
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond449 Using cfiCommon0
          CFI (cfiCond449) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond449) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiCond449) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiCond449) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiCond449) Conditional ??CrossCallReturnLabel_628
          CFI (cfiCond449) R14 Frame(CFA, -4)
          CFI (cfiCond449) CFA R13+24
          CFI Block cfiCond450 Using cfiCommon0
          CFI (cfiCond450) Function AppS2wCmd_AmpduReq
          CFI (cfiCond450) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiCond450) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiCond450) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiCond450) Conditional ??CrossCallReturnLabel_629
          CFI (cfiCond450) R14 Frame(CFA, -4)
          CFI (cfiCond450) CFA R13+24
          CFI Block cfiPicker451 Using cfiCommon1
          CFI (cfiPicker451) NoFunction
          CFI (cfiPicker451) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiPicker451) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiPicker451) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiPicker451) Picker
        THUMB
?Subroutine138:
        LDRB     R0,[SP, #+4]
        STRB     R0,[SP, #+15]
        BX       LR
          CFI EndBlock cfiCond448
          CFI EndBlock cfiCond449
          CFI EndBlock cfiCond450
          CFI EndBlock cfiPicker451

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond452 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_393
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond453 Using cfiCommon0
          CFI (cfiCond453) Function AppS2wCmd_BlockAckReq
          CFI (cfiCond453) Conditional ??CrossCallReturnLabel_392
          CFI (cfiCond453) R14 Frame(CFA, -4)
          CFI (cfiCond453) CFA R13+24
          CFI Block cfiCond454 Using cfiCommon0
          CFI (cfiCond454) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond454) Conditional ??CrossCallReturnLabel_391
          CFI (cfiCond454) R14 Frame(CFA, -4)
          CFI (cfiCond454) CFA R13+24
          CFI Block cfiCond455 Using cfiCommon0
          CFI (cfiCond455) Function AppS2wCmd_AmpduReq
          CFI (cfiCond455) Conditional ??CrossCallReturnLabel_390
          CFI (cfiCond455) R14 Frame(CFA, -4)
          CFI (cfiCond455) CFA R13+24
          CFI Block cfiCond456 Using cfiCommon0
          CFI (cfiCond456) Function AppS2wCmd_TempReadStart
          CFI (cfiCond456) Conditional ??CrossCallReturnLabel_389
          CFI (cfiCond456) R4 Frame(CFA, -8)
          CFI (cfiCond456) R14 Frame(CFA, -4)
          CFI (cfiCond456) CFA R13+24
          CFI Block cfiPicker457 Using cfiCommon1
          CFI (cfiPicker457) NoFunction
          CFI (cfiPicker457) Picker
        THUMB
?Subroutine62:
        ADD      R1,SP,#+4
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_BlockAckReq AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_AmsduReqt AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_AmpduReq AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_TempReadStart AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiCond452
          CFI EndBlock cfiCond453
          CFI EndBlock cfiCond454
          CFI EndBlock cfiCond455
          CFI EndBlock cfiCond456
          CFI EndBlock cfiPicker457

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond458 Using cfiCommon0
          CFI Function AppS2wCmd_BlockAckReq
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_253
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond459 Using cfiCommon0
          CFI (cfiCond459) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond459) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiCond459) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiCond459) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiCond459) Conditional ??CrossCallReturnLabel_254
          CFI (cfiCond459) R14 Frame(CFA, -4)
          CFI (cfiCond459) CFA R13+24
          CFI Block cfiCond460 Using cfiCommon0
          CFI (cfiCond460) Function AppS2wCmd_AmpduReq
          CFI (cfiCond460) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiCond460) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiCond460) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiCond460) Conditional ??CrossCallReturnLabel_255
          CFI (cfiCond460) R14 Frame(CFA, -4)
          CFI (cfiCond460) CFA R13+24
          CFI Block cfiPicker461 Using cfiCommon1
          CFI (cfiPicker461) NoFunction
          CFI (cfiPicker461) NoCalls AppS2wCmd_BlockAckReq
          CFI (cfiPicker461) NoCalls AppS2wCmd_AmsduReqt
          CFI (cfiPicker461) NoCalls AppS2wCmd_AmpduReq
          CFI (cfiPicker461) Picker
        THUMB
?Subroutine49:
        ADD      R1,SP,#+8
        LDR.N    R0,??DataTable448
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+3808
        BX       LR
          CFI EndBlock cfiCond458
          CFI EndBlock cfiCond459
          CFI EndBlock cfiCond460
          CFI EndBlock cfiPicker461

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond462 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_99
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond463 Using cfiCommon0
          CFI (cfiCond463) Function AppS2wCmd_PowerSaveDpsleep
          CFI (cfiCond463) Conditional ??CrossCallReturnLabel_98
          CFI (cfiCond463) R14 Frame(CFA, -4)
          CFI (cfiCond463) CFA R13+24
          CFI Block cfiCond464 Using cfiCommon0
          CFI (cfiCond464) Function AppS2wCmd_PowerSaveDpsleep
          CFI (cfiCond464) Conditional ??CrossCallReturnLabel_97
          CFI (cfiCond464) R14 Frame(CFA, -4)
          CFI (cfiCond464) CFA R13+24
          CFI Block cfiCond465 Using cfiCommon0
          CFI (cfiCond465) Function AppS2wCmd_PowerSaveDpsleep
          CFI (cfiCond465) Conditional ??CrossCallReturnLabel_96
          CFI (cfiCond465) R14 Frame(CFA, -4)
          CFI (cfiCond465) CFA R13+24
          CFI Block cfiCond466 Using cfiCommon0
          CFI (cfiCond466) Function AppS2wCmd_scanTimeSet
          CFI (cfiCond466) Conditional ??CrossCallReturnLabel_95
          CFI (cfiCond466) R4 Frame(CFA, -12)
          CFI (cfiCond466) R5 Frame(CFA, -8)
          CFI (cfiCond466) R14 Frame(CFA, -4)
          CFI (cfiCond466) CFA R13+32
          CFI Block cfiCond467 Using cfiCommon0
          CFI (cfiCond467) Function AppS2wCmd_scanTimeSet
          CFI (cfiCond467) Conditional ??CrossCallReturnLabel_94
          CFI (cfiCond467) R4 Frame(CFA, -12)
          CFI (cfiCond467) R5 Frame(CFA, -8)
          CFI (cfiCond467) R14 Frame(CFA, -4)
          CFI (cfiCond467) CFA R13+32
          CFI Block cfiCond468 Using cfiCommon0
          CFI (cfiCond468) Function AppS2wCmd_scanTimeSet
          CFI (cfiCond468) Conditional ??CrossCallReturnLabel_93
          CFI (cfiCond468) R4 Frame(CFA, -12)
          CFI (cfiCond468) R5 Frame(CFA, -8)
          CFI (cfiCond468) R14 Frame(CFA, -4)
          CFI (cfiCond468) CFA R13+32
          CFI Block cfiCond469 Using cfiCommon0
          CFI (cfiCond469) Function AppS2wCmd_BlockAckReq
          CFI (cfiCond469) Conditional ??CrossCallReturnLabel_92
          CFI (cfiCond469) R14 Frame(CFA, -4)
          CFI (cfiCond469) CFA R13+24
          CFI Block cfiCond470 Using cfiCommon0
          CFI (cfiCond470) Function AppS2wCmd_BlockAckReq
          CFI (cfiCond470) Conditional ??CrossCallReturnLabel_91
          CFI (cfiCond470) R14 Frame(CFA, -4)
          CFI (cfiCond470) CFA R13+24
          CFI Block cfiCond471 Using cfiCommon0
          CFI (cfiCond471) Function AppS2wCmd_BlockAckReq
          CFI (cfiCond471) Conditional ??CrossCallReturnLabel_90
          CFI (cfiCond471) R14 Frame(CFA, -4)
          CFI (cfiCond471) CFA R13+24
          CFI Block cfiCond472 Using cfiCommon0
          CFI (cfiCond472) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond472) Conditional ??CrossCallReturnLabel_89
          CFI (cfiCond472) R14 Frame(CFA, -4)
          CFI (cfiCond472) CFA R13+24
          CFI Block cfiCond473 Using cfiCommon0
          CFI (cfiCond473) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond473) Conditional ??CrossCallReturnLabel_88
          CFI (cfiCond473) R14 Frame(CFA, -4)
          CFI (cfiCond473) CFA R13+24
          CFI Block cfiCond474 Using cfiCommon0
          CFI (cfiCond474) Function AppS2wCmd_AmsduReqt
          CFI (cfiCond474) Conditional ??CrossCallReturnLabel_87
          CFI (cfiCond474) R14 Frame(CFA, -4)
          CFI (cfiCond474) CFA R13+24
          CFI Block cfiCond475 Using cfiCommon0
          CFI (cfiCond475) Function AppS2wCmd_AmpduReq
          CFI (cfiCond475) Conditional ??CrossCallReturnLabel_86
          CFI (cfiCond475) R14 Frame(CFA, -4)
          CFI (cfiCond475) CFA R13+24
          CFI Block cfiCond476 Using cfiCommon0
          CFI (cfiCond476) Function AppS2wCmd_AmpduReq
          CFI (cfiCond476) Conditional ??CrossCallReturnLabel_85
          CFI (cfiCond476) R14 Frame(CFA, -4)
          CFI (cfiCond476) CFA R13+24
          CFI Block cfiCond477 Using cfiCommon0
          CFI (cfiCond477) Function AppS2wCmd_AmpduReq
          CFI (cfiCond477) Conditional ??CrossCallReturnLabel_84
          CFI (cfiCond477) R14 Frame(CFA, -4)
          CFI (cfiCond477) CFA R13+24
          CFI Block cfiCond478 Using cfiCommon0
          CFI (cfiCond478) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond478) Conditional ??CrossCallReturnLabel_83
          CFI (cfiCond478) R14 Frame(CFA, -4)
          CFI (cfiCond478) CFA R13+24
          CFI Block cfiCond479 Using cfiCommon0
          CFI (cfiCond479) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond479) Conditional ??CrossCallReturnLabel_82
          CFI (cfiCond479) R14 Frame(CFA, -4)
          CFI (cfiCond479) CFA R13+24
          CFI Block cfiCond480 Using cfiCommon0
          CFI (cfiCond480) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond480) Conditional ??CrossCallReturnLabel_81
          CFI (cfiCond480) R14 Frame(CFA, -4)
          CFI (cfiCond480) CFA R13+24
          CFI Block cfiCond481 Using cfiCommon0
          CFI (cfiCond481) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond481) Conditional ??CrossCallReturnLabel_80
          CFI (cfiCond481) R14 Frame(CFA, -4)
          CFI (cfiCond481) CFA R13+24
          CFI Block cfiCond482 Using cfiCommon0
          CFI (cfiCond482) Function AppS2wCmd_AdcRead
          CFI (cfiCond482) Conditional ??CrossCallReturnLabel_79
          CFI (cfiCond482) R4 Frame(CFA, -20)
          CFI (cfiCond482) R5 Frame(CFA, -16)
          CFI (cfiCond482) R6 Frame(CFA, -12)
          CFI (cfiCond482) R7 Frame(CFA, -8)
          CFI (cfiCond482) R14 Frame(CFA, -4)
          CFI (cfiCond482) CFA R13+40
          CFI Block cfiCond483 Using cfiCommon0
          CFI (cfiCond483) Function AppS2wCmd_AdcRead
          CFI (cfiCond483) Conditional ??CrossCallReturnLabel_78
          CFI (cfiCond483) R4 Frame(CFA, -20)
          CFI (cfiCond483) R5 Frame(CFA, -16)
          CFI (cfiCond483) R6 Frame(CFA, -12)
          CFI (cfiCond483) R7 Frame(CFA, -8)
          CFI (cfiCond483) R14 Frame(CFA, -4)
          CFI (cfiCond483) CFA R13+40
          CFI Block cfiPicker484 Using cfiCommon1
          CFI (cfiPicker484) NoFunction
          CFI (cfiPicker484) Picker
        THUMB
?Subroutine30:
        ADD      R0,SP,#+16
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BlockAckReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BlockAckReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BlockAckReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmsduReqt AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmsduReqt AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmsduReqt AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmpduReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmpduReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AmpduReq AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AdcRead AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AdcRead AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond462
          CFI EndBlock cfiCond463
          CFI EndBlock cfiCond464
          CFI EndBlock cfiCond465
          CFI EndBlock cfiCond466
          CFI EndBlock cfiCond467
          CFI EndBlock cfiCond468
          CFI EndBlock cfiCond469
          CFI EndBlock cfiCond470
          CFI EndBlock cfiCond471
          CFI EndBlock cfiCond472
          CFI EndBlock cfiCond473
          CFI EndBlock cfiCond474
          CFI EndBlock cfiCond475
          CFI EndBlock cfiCond476
          CFI EndBlock cfiCond477
          CFI EndBlock cfiCond478
          CFI EndBlock cfiCond479
          CFI EndBlock cfiCond480
          CFI EndBlock cfiCond481
          CFI EndBlock cfiCond482
          CFI EndBlock cfiCond483
          CFI EndBlock cfiPicker484
// 8339 
// 8340 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock485 Using cfiCommon0
          CFI Function AppS2wCmd_AmpduReq
        THUMB
// 8341 UINT8 AppS2wCmd_AmpduReq(UINT8 *ptr)
// 8342 {
AppS2wCmd_AmpduReq:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+16
          CFI CFA R13+24
// 8343   UINT8 status,action;
// 8344   UINT8 *p;
// 8345   UINT32 temp;
// 8346   GSN_WDD_AMSDU_REQ_T AmpduReq;
// 8347 
// 8348   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine30
??CrossCallReturnLabel_86:
        CBZ.N    R0,??AppS2wCmd_AmpduReq_0
// 8349   {
// 8350       status = AppS2wParse_Mac(p, AmpduReq.ra);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Mac
        BL       AppS2wParse_Mac
// 8351       if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
// 8352 	{
// 8353           return status;
// 8354 	}
// 8355   }
// 8356 
// 8357   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_AmpduReq_0:
        BL       ?Subroutine30
??CrossCallReturnLabel_85:
        CBZ.N    R0,??AppS2wCmd_AmpduReq_2
// 8358   {
// 8359       status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 8360       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_284:
        CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
// 8361 	{
// 8362           return status;
// 8363 	}
// 8364       AmpduReq.tid = temp;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+14]
// 8365   }
// 8366 
// 8367 
// 8368   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_AmpduReq_2:
        BL       ?Subroutine30
??CrossCallReturnLabel_84:
        CBZ.N    R0,??CrossCallReturnLabel_629
// 8369   {
// 8370      status = AppS2wParse_Boolean(p, &action);
        BL       ?Subroutine62
// 8371       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_390:
        CBNZ.N   R0,??AppS2wCmd_AmpduReq_1
// 8372       {
// 8373           return status;
// 8374       }
// 8375 
// 8376       AmpduReq.action = action;
        BL       ?Subroutine138
// 8377    }
// 8378 
// 8379   status =GsnWdd_AmpduReq(&s2wappMainTaskCtxt->if0.wddCtx,(GSN_WDD_AMPDU_REQ_T *)&AmpduReq);
// 8380 
// 8381   return status;
??CrossCallReturnLabel_629:
        BL       ?Subroutine49
??CrossCallReturnLabel_255:
          CFI FunCall GsnWdd_AmpduReq
        BL       GsnWdd_AmpduReq
        UXTB     R0,R0
??AppS2wCmd_AmpduReq_1:
        ADD      SP,SP,#+20
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock485
// 8382 
// 8383 }
// 8384 
// 8385 
// 8386 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock486 Using cfiCommon0
          CFI Function AppS2wCmd_FrameTxFailCntLmitSet
        THUMB
// 8387 UINT8 AppS2wCmd_FrameTxFailCntLmitSet(UINT8 *ptr)
// 8388 {
AppS2wCmd_FrameTxFailCntLmitSet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 8389   UINT8 status;
// 8390   UINT8 *p;
// 8391   UINT32 temp;
// 8392   GSN_WDD_FRAME_TX_FAIL_CNT_LIMIT_SET_T TxFailLmt;
// 8393 
// 8394   if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ??Subroutine34_0
??CrossCallReturnLabel_147:
        CBZ.N    R0,??AppS2wCmd_FrameTxFailCntLmitSet_0
// 8395   {
// 8396       status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine52
// 8397       if (status != S2W_SUCCESS)
??CrossCallReturnLabel_321:
        CBNZ.N   R0,??AppS2wCmd_FrameTxFailCntLmitSet_1
// 8398 	{
// 8399           return status;
// 8400 	}
// 8401       TxFailLmt.frameTxFailCountThreshold = temp;
        LDR      R0,[SP, #+4]
        STRB     R0,[SP, #+0]
// 8402   }
// 8403 
// 8404   status = GsnWdd_FrameTxFailCntLmitSet(&s2wappMainTaskCtxt->if0.wddCtx,&TxFailLmt);
// 8405 
// 8406   return status;
??AppS2wCmd_FrameTxFailCntLmitSet_0:
        BL       ?Subroutine65
??CrossCallReturnLabel_402:
          CFI FunCall GsnWdd_FrameTxFailCntLmitSet
        BL       GsnWdd_FrameTxFailCntLmitSet
        UXTB     R0,R0
??AppS2wCmd_FrameTxFailCntLmitSet_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock486
// 8407 
// 8408 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond487 Using cfiCommon0
          CFI Function AppS2wCmd_RtsEnable
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_401
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond488 Using cfiCommon0
          CFI (cfiCond488) Function AppS2wCmd_FrameTxFailCntLmitSet
          CFI (cfiCond488) NoCalls AppS2wCmd_RtsEnable
          CFI (cfiCond488) NoCalls AppS2wCmd_FrameTxFailCntLmitSet
          CFI (cfiCond488) Conditional ??CrossCallReturnLabel_402
          CFI (cfiCond488) R14 Frame(CFA, -4)
          CFI (cfiCond488) CFA R13+16
          CFI Block cfiPicker489 Using cfiCommon1
          CFI (cfiPicker489) NoFunction
          CFI (cfiPicker489) NoCalls AppS2wCmd_RtsEnable
          CFI (cfiPicker489) NoCalls AppS2wCmd_FrameTxFailCntLmitSet
          CFI (cfiPicker489) Picker
        THUMB
?Subroutine65:
        ADD      R1,SP,#+0
        LDR.N    R0,??DataTable448
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+3808
        BX       LR
          CFI EndBlock cfiCond487
          CFI EndBlock cfiCond488
          CFI EndBlock cfiPicker489
// 8409 
// 8410 /**
// 8411  ******************************************************************
// 8412  * @ingroup S2w-Application
// 8413  * @brief Process the AT+WSEC command. This function set the strict
// 8414  * security feature.
// 8415  * @param ptr Pointer to the user input string.
// 8416  * @return S2W_SUCCESS - operation successful.
// 8417  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8418  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock490 Using cfiCommon0
          CFI Function AppS2wCmd_SecuritySet
          CFI NoCalls
        THUMB
// 8419 UINT8
// 8420 AppS2wCmd_SecuritySet(UINT8 *ptr)
// 8421 {
AppS2wCmd_SecuritySet:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 8422     UINT8 status;
// 8423     UINT32 SecMode;
// 8424 
// 8425     /* check the validity of parameter passed
// 8426      */
// 8427     status = AppS2wParse_Int(ptr, &SecMode);
// 8428     if (status != S2W_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_283:
        CBNZ.N   R0,??AppS2wCmd_SecuritySet_0
// 8429     {
// 8430         return S2W_EINVAL;
// 8431     }
// 8432     /*  allowed values are upto 32(0x40) and or'd values also other than 0
// 8433     0-->auto
// 8434     1-->none
// 8435     2-->wep
// 8436     4-->wpapsk
// 8437     8-->wpa2psk
// 8438     16-->wpaE
// 8439     32-->wpa2E
// 8440     */
// 8441     if(!((SecMode == SECTYPE_AUTO) || (SecMode == SECTYPE_NONE) ||(SecMode == SECTYPE_WEP)
// 8442          ||(SecMode == SECTYPE_WPAPSK)||(SecMode == SECTYPE_WPA2PSK)||(SecMode == SECTYPE_WPA)
// 8443          ||(SecMode == SECTYPE_WPA2)||(SecMode == SECTYPE_WPA2PSK_TKIP)))
        LDR      R0,[SP, #+0]
        CMP      R0,#+0
        IT       NE 
        CMPNE    R0,#+1
        BEQ.N    ??AppS2wCmd_SecuritySet_1
        CMP      R0,#+2
        IT       NE 
        CMPNE    R0,#+4
        BEQ.N    ??AppS2wCmd_SecuritySet_1
        CMP      R0,#+8
        IT       NE 
        CMPNE    R0,#+16
        BEQ.N    ??AppS2wCmd_SecuritySet_1
        CMP      R0,#+32
        IT       NE 
        CMPNE    R0,#+64
        BEQ.N    ??AppS2wCmd_SecuritySet_1
// 8444     {
// 8445         return S2W_EINVAL;
??AppS2wCmd_SecuritySet_0:
        MOVS     R0,#+2
        POP      {R1,PC}
// 8446     }
// 8447 
// 8448     /* update the active profile parameter
// 8449      */
// 8450     if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
??AppS2wCmd_SecuritySet_1:
        LDR.N    R1,??DataTable448
        LDR.W    R0,??DataTable455
        LDR      R1,[R1, #+0]
        ADD      R1,R1,#+30336
        LDRB     R1,[R1, #+0]
        CMP      R1,#+0
        LDR      R1,[SP, #+0]
        ITE      NE 
        STRBNE   R1,[R0, #+596]
        STRBEQ   R1,[R0, #+469]
// 8451     {
// 8452         s2wCurrent.lmtdApConf.securityType = SecMode;
// 8453     }
// 8454     else
// 8455     {
// 8456         s2wCurrent.securityType = SecMode;
// 8457     }
// 8458 
// 8459     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock490
// 8460 }
// 8461 
// 8462 /**
// 8463  ******************************************************************
// 8464  * @ingroup S2w-Application
// 8465  * @brief Process the AT+WAUTH command
// 8466  *   This function check the validity of the parameters passed and
// 8467  *   update the active profile authentication with the same.
// 8468  * @param ptr Pointer to the user input string.
// 8469  *
// 8470  * @return S2W_SUCCESS - operation successful.
// 8471  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8472  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock491 Using cfiCommon0
          CFI Function AppS2wCmd_Wauth
          CFI NoCalls
        THUMB
// 8473 UINT8
// 8474 AppS2wCmd_Wauth(UINT8 *ptr)
// 8475 {
AppS2wCmd_Wauth:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 8476     UINT8 status;
// 8477     UINT32 mode;
// 8478 
// 8479     /* check the validity of parameter passed
// 8480      */
// 8481     status = AppS2wParse_Int(ptr, &mode);
        BL       ?Subroutine51
// 8482     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_282:
        CBNZ.N   R0,??AppS2wCmd_Wauth_0
// 8483     {
// 8484         return status;
// 8485     }
// 8486 
// 8487     if(mode > S2W_AUTH_MODE_SHARED)
        LDR      R1,[SP, #+0]
        CMP      R1,#+3
        BCC.N    ??AppS2wCmd_Wauth_1
// 8488     {
// 8489         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,PC}
// 8490     }
// 8491     /* update the active profile parameter   */
// 8492     if(s2wappMainTaskCtxt->apConf)
??AppS2wCmd_Wauth_1:
        LDR.N    R2,??DataTable448
        LDR.W    R1,??DataTable455
        LDR      R2,[R2, #+0]
        ADD      R2,R2,#+30336
        LDRB     R2,[R2, #+0]
        CMP      R2,#+0
        LDR      R2,[SP, #+0]
        BEQ.N    ??AppS2wCmd_Wauth_2
// 8493     {
// 8494 		if((mode == S2W_AUTH_MODE_SHARED) ||
// 8495 		   (mode == S2W_AUTH_MODE_OPEN))
        CMP      R2,#+2
        IT       NE 
        CMPNE    R2,#+1
        BNE.N    ??AppS2wCmd_Wauth_0
// 8496 		{
// 8497 		    s2wCurrent.lmtdApConf.securityType = SECTYPE_WEP;
        MOVS     R2,#+2
        STRB     R2,[R1, #+596]
// 8498 			s2wCurrent.lmtdApConf.wepKeyConfig.authType= (GSN_WDD_WEP_AUTH_TYPE_T)mode;
        LDR      R2,[SP, #+0]
        STRB     R2,[R1, #+597]
        POP      {R1,PC}
// 8499 		}
// 8500 	}
// 8501 	else
// 8502 	{
// 8503     	s2wCurrent.security.authMode = mode;
??AppS2wCmd_Wauth_2:
        STRB     R2,[R1, #+120]
// 8504 	}
// 8505 
// 8506     return status;
??AppS2wCmd_Wauth_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock491
// 8507 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable448:
        DC32     s2wappMainTaskCtxt
// 8508 
// 8509 /**
// 8510  ******************************************************************
// 8511  * @ingroup S2w-Application
// 8512  * @brief Process the AT+WPA command.
// 8513  *   This function check the validity of the parameter passed and update
// 8514  *   the active profile wpa passphrase.
// 8515  * @param ptr Pointer to the user input string.
// 8516 
// 8517  * @return S2W_SUCCESS - operation successful.
// 8518  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8519  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock492 Using cfiCommon0
          CFI Function AppS2wCmd_Wwpa
        THUMB
// 8520 UINT8
// 8521 AppS2wCmd_Wwpa(UINT8 *ptr)
// 8522 {
AppS2wCmd_Wwpa:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+268
          CFI CFA R13+288
// 8523     S2W_SECURITY_T params;
// 8524     UINT32 len;
// 8525     UINT8 *p;
// 8526     memcpy(&params, &s2wCurrent.security, sizeof(params));
        LDR.W    R4,??DataTable455
        MOV      R2,#+268
        ADD      R1,R4,#+120
        BL       ?Subroutine27
// 8527 
// 8528     /* Validate the input string.
// 8529      */
// 8530     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_72:
        ADD      R0,SP,#+268
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R5,R0
// 8531     if (!p)
        BEQ.N    ??AppS2wCmd_Wwpa_0
// 8532     {
// 8533         return S2W_EINVAL;
// 8534     }
// 8535 
// 8536     len = strlen((char *)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R6,R0
// 8537     if ((len > S2W_PSK_PASSPHRASE_LEN_MAX - 1) ||
// 8538         (len < S2W_PSK_PASSPHRASE_LEN_MIN))
        SUB      R0,R6,#+8
        CMP      R0,#+56
        BCC.N    ??AppS2wCmd_Wwpa_1
// 8539     {
// 8540         return S2W_EINVAL;
??AppS2wCmd_Wwpa_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wwpa_2
// 8541     }
// 8542 
// 8543     memset(params.wpa.wpaPassPhrase, 0, S2W_PSK_PASSPHRASE_LEN_MAX);
??AppS2wCmd_Wwpa_1:
        MOVS     R2,#+64
        MOVS     R1,#+0
        ADD      R0,SP,#+59
          CFI FunCall memset
        BL       memset
// 8544     memcpy(params.wpa.wpaPassPhrase, p, len);
        MOV      R2,R6
        MOV      R1,R5
        ADD      R0,SP,#+59
          CFI FunCall memcpy
        BL       memcpy
// 8545     params.wpa.passPhraseLen = len;
// 8546     params.validKeys |= S2W_SECURITY_VALID_WPA;
        LDRB     R0,[SP, #+1]
        STRB     R6,[SP, #+123]
        ORR      R0,R0,#0x2
        BL       ?Subroutine79
// 8547 
// 8548     /* update the active profile parameter */
// 8549     if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
??CrossCallReturnLabel_450:
        CBZ.N    R0,??AppS2wCmd_Wwpa_3
// 8550     {
// 8551         s2wCurrent.lmtdApConf.passphrase.Len = params.wpa.passPhraseLen;
        LDRB     R0,[SP, #+123]
// 8552         memcpy(s2wCurrent.lmtdApConf.passphrase.Passphrase, params.wpa.wpaPassPhrase,
// 8553                params.wpa.passPhraseLen);
        LDRB     R2,[SP, #+123]
        STRB     R0,[R4, #+531]
        ADD      R1,SP,#+59
        ADD      R0,R4,#+532
          CFI FunCall memcpy
        BL       memcpy
        B.N      ??AppS2wCmd_Wwpa_4
// 8554     }
// 8555     else
// 8556     {
// 8557         memcpy(&s2wCurrent.security, &params, sizeof(s2wCurrent.security));
??AppS2wCmd_Wwpa_3:
        MOV      R2,#+268
        ADD      R1,SP,#+0
        ADD      R0,R4,#+120
          CFI FunCall memcpy
        BL       memcpy
// 8558         s2wCurrent.security.wpa.pskValid =0;
        MOVS     R0,#+0
        STRB     R0,[R4, #+244]
// 8559     }
// 8560         return S2W_SUCCESS;
??AppS2wCmd_Wwpa_4:
        MOVS     R0,#+0
??AppS2wCmd_Wwpa_2:
        ADD      SP,SP,#+272
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock492
// 8561 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable449:
        DC32     0x41010010

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable449_1:
        DC32     globalUseHRssi
// 8562 
// 8563 
// 8564 /**
// 8565  ******************************************************************
// 8566  * @ingroup S2w-Application
// 8567  * @brief Process the AT+WPAPSK command.
// 8568  *   This function validate the parameters passed and call the hal
// 8569  *   function to calculate the psk key.
// 8570  * @param ptr Pointer to the user input string.
// 8571  *
// 8572  * @return S2W_SUCCESS - operation successful.
// 8573  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8574  * @retval S2W_FAILURE - operation failure- psk key calculation failed.
// 8575  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock493 Using cfiCommon0
          CFI Function AppS2wCmd_WpaPsk
        THUMB
// 8576 UINT8
// 8577 AppS2wCmd_WpaPsk(UINT8 *ptr)
// 8578 {
AppS2wCmd_WpaPsk:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+136
          CFI CFA R13+152
// 8579     UINT8 status;
// 8580     UINT8 *p;
// 8581     S2W_WPAPSK_T wpaPsk;
// 8582     UINT8 len=0;
// 8583 
// 8584 
// 8585     
// 8586     /* get the 1st parameter-ssid
// 8587      */
// 8588     p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+136
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 8589     if (!p)
        BEQ.N    ??AppS2wCmd_WpaPsk_0
// 8590     {
// 8591         return S2W_EINVAL;
// 8592     }
// 8593     memset(&wpaPsk,0,sizeof(wpaPsk));
        MOVS     R2,#+131
        BL       ?Subroutine22
// 8594 
// 8595     /* Validate the 1st parameter-ssid.
// 8596      */
// 8597     status = AppS2wParse_Ssid(p,(unsigned char*)wpaPsk.ssid,&wpaPsk.ssidLen );
??CrossCallReturnLabel_49:
        ADD      R2,SP,#+130
        ADD      R1,SP,#+98
        MOV      R0,R4
          CFI FunCall AppS2wParse_Ssid
        BL       AppS2wParse_Ssid
// 8598     if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_WpaPsk_1
// 8599     {
// 8600         return status;
// 8601     }
// 8602 
// 8603     /* get the 2nd parameter-passphrase
// 8604      */
// 8605     p = AppS2wParse_NextParamGet(&ptr);
        ADD      R0,SP,#+136
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 8606     if (!p)
        BEQ.N    ??AppS2wCmd_WpaPsk_0
// 8607     {
// 8608         return S2W_EINVAL;
// 8609     }
// 8610 
// 8611     len = strlen((char *)p);
          CFI FunCall strlen
        BL       strlen
        UXTB     R5,R0
// 8612     if ((len > S2W_PSK_PASSPHRASE_LEN_MAX - 1) ||(len < S2W_PSK_PASSPHRASE_LEN_MIN))
        SUB      R0,R5,#+8
        CMP      R0,#+56
        BCC.N    ??AppS2wCmd_WpaPsk_2
// 8613     {
// 8614         return S2W_EINVAL;
??AppS2wCmd_WpaPsk_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_WpaPsk_1
// 8615     }
// 8616 
// 8617     memcpy(wpaPsk.wpaPassPhrase, p, len);
??AppS2wCmd_WpaPsk_2:
        MOV      R2,R5
        MOV      R1,R4
        BL       ?Subroutine27
// 8618     wpaPsk.passPhraseLen = len;
??CrossCallReturnLabel_71:
        STRB     R5,[SP, #+64]
// 8619     S2w_Printf("\nComputing PSK from SSID and PassPhrase...\r\n");
        ADR.W    R0,`?<Constant "\\nComputing PSK from S...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 8620 
// 8621     /* call the hal function to calculate the psk key from
// 8622        ssid and passphrase
// 8623      */
// 8624     /* Init crypto engine */
// 8625     GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
        BL       ??Subroutine140_0
// 8626     
// 8627     AppS2wHal_WpaPskCompute(&wpaPsk );
??CrossCallReturnLabel_634:
        ADD      R0,SP,#+0
          CFI FunCall AppS2wHal_WpaPskCompute
        BL       AppS2wHal_WpaPskCompute
// 8628     wpaPsk.pskValid =1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+65]
// 8629 
// 8630     /*Disable crypto */
// 8631     GsnHeIf_DriverSuspend();
          CFI FunCall GsnHeIf_DriverSuspend
        BL       GsnHeIf_DriverSuspend
// 8632 
// 8633     
// 8634     /* update the current active profile
// 8635      */
// 8636     if(s2wappMainTaskCtxt->apConf)
        BL       ?Subroutine76
??CrossCallReturnLabel_444:
        CBZ.N    R0,??AppS2wCmd_WpaPsk_3
// 8637     {
// 8638     	s2wCurrent.lmtdApConf.lmtdApPskValid =1;
        MOVS     R0,#+1
        STRB     R0,[R4, #+613]
// 8639 	    memcpy(&(s2wCurrent.lmtdApConf.lmtdApPsk), &wpaPsk.psk,S2W_PSK_LEN);		
        MOVS     R2,#+32
        ADD      R1,SP,#+66
        ADDW     R0,R4,#+614
          CFI FunCall memcpy
        BL       memcpy
// 8640 	    memcpy(&(s2wCurrent.lmtdApConf.passphrase.Passphrase), &wpaPsk.wpaPassPhrase,wpaPsk.passPhraseLen);		
        LDRB     R2,[SP, #+64]
        ADD      R1,SP,#+0
        ADD      R0,R4,#+532
          CFI FunCall memcpy
        BL       memcpy
// 8641 		s2wCurrent.lmtdApConf.passphrase.Len=wpaPsk.passPhraseLen;
        LDRB     R0,[SP, #+64]
        STRB     R0,[R4, #+531]
        B.N      ??AppS2wCmd_WpaPsk_4
// 8642 	}
// 8643 	else
// 8644 	{
// 8645     memcpy(&(s2wCurrent.security.wpa), &wpaPsk,sizeof(wpaPsk));
??AppS2wCmd_WpaPsk_3:
        MOVS     R2,#+131
        ADD      R1,SP,#+0
        ADD      R0,R4,#+179
          CFI FunCall memcpy
        BL       memcpy
// 8646 	}
// 8647   
// 8648     return S2W_SUCCESS;
??AppS2wCmd_WpaPsk_4:
        MOVS     R0,#+0
??AppS2wCmd_WpaPsk_1:
        ADD      SP,SP,#+140
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock493
// 8649 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\nComputing PSK from S...">`:
        DC8 "\012Computing PSK from SSID and PassPhrase...\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond494 Using cfiCommon0
          CFI Function S2wDnsConfigGet
          CFI Conditional ??CrossCallReturnLabel_73
          CFI R4 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+168
          CFI Block cfiCond495 Using cfiCommon0
          CFI (cfiCond495) Function AppS2wCmd_Wwpa
          CFI (cfiCond495) Conditional ??CrossCallReturnLabel_72
          CFI (cfiCond495) R4 Frame(CFA, -16)
          CFI (cfiCond495) R5 Frame(CFA, -12)
          CFI (cfiCond495) R6 Frame(CFA, -8)
          CFI (cfiCond495) R14 Frame(CFA, -4)
          CFI (cfiCond495) CFA R13+288
          CFI Block cfiCond496 Using cfiCommon0
          CFI (cfiCond496) Function AppS2wCmd_WpaPsk
          CFI (cfiCond496) Conditional ??CrossCallReturnLabel_71
          CFI (cfiCond496) R4 Frame(CFA, -12)
          CFI (cfiCond496) R5 Frame(CFA, -8)
          CFI (cfiCond496) R14 Frame(CFA, -4)
          CFI (cfiCond496) CFA R13+152
          CFI Block cfiCond497 Using cfiCommon0
          CFI (cfiCond497) Function AppS2wCmd_Wwep
          CFI (cfiCond497) Conditional ??CrossCallReturnLabel_70
          CFI (cfiCond497) R4 Frame(CFA, -28)
          CFI (cfiCond497) R5 Frame(CFA, -24)
          CFI (cfiCond497) R6 Frame(CFA, -20)
          CFI (cfiCond497) R7 Frame(CFA, -16)
          CFI (cfiCond497) R8 Frame(CFA, -12)
          CFI (cfiCond497) R9 Frame(CFA, -8)
          CFI (cfiCond497) R14 Frame(CFA, -4)
          CFI (cfiCond497) CFA R13+296
          CFI Block cfiPicker498 Using cfiCommon1
          CFI (cfiPicker498) NoFunction
          CFI (cfiPicker498) Picker
        THUMB
?Subroutine27:
        ADD      R0,SP,#+0
          CFI FunCall S2wDnsConfigGet memcpy
          CFI FunCall AppS2wCmd_Wwpa memcpy
          CFI FunCall AppS2wCmd_WpaPsk memcpy
          CFI FunCall AppS2wCmd_Wwep memcpy
        B.W      memcpy
          CFI EndBlock cfiCond494
          CFI EndBlock cfiCond495
          CFI EndBlock cfiCond496
          CFI EndBlock cfiCond497
          CFI EndBlock cfiPicker498

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond499 Using cfiCommon0
          CFI Function AppS2wCmd_Wpower
          CFI Conditional ??CrossCallReturnLabel_50
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+48
          CFI Block cfiCond500 Using cfiCommon0
          CFI (cfiCond500) Function AppS2wCmd_WpaPsk
          CFI (cfiCond500) Conditional ??CrossCallReturnLabel_49
          CFI (cfiCond500) R4 Frame(CFA, -12)
          CFI (cfiCond500) R5 Frame(CFA, -8)
          CFI (cfiCond500) R14 Frame(CFA, -4)
          CFI (cfiCond500) CFA R13+152
          CFI Block cfiCond501 Using cfiCommon0
          CFI (cfiCond501) Function AppS2wCmd_Wauto
          CFI (cfiCond501) Conditional ??CrossCallReturnLabel_48
          CFI (cfiCond501) R4 Frame(CFA, -8)
          CFI (cfiCond501) R14 Frame(CFA, -4)
          CFI (cfiCond501) CFA R13+56
          CFI Block cfiPicker502 Using cfiCommon1
          CFI (cfiPicker502) NoFunction
          CFI (cfiPicker502) Picker
        THUMB
?Subroutine22:
        MOVS     R1,#+0
        ADD      R0,SP,#+0
          CFI FunCall AppS2wCmd_Wpower memset
          CFI FunCall AppS2wCmd_WpaPsk memset
          CFI FunCall AppS2wCmd_Wauto memset
        B.W      memset
          CFI EndBlock cfiCond499
          CFI EndBlock cfiCond500
          CFI EndBlock cfiCond501
          CFI EndBlock cfiPicker502
// 8650 
// 8651 
// 8652 
// 8653 /**
// 8654  ******************************************************************
// 8655  * @ingroup S2w-Application
// 8656  * @brief Process the AT+WPSK command
// 8657  * @param ptr Pointer to the user input string.
// 8658  * @return status.
// 8659  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock503 Using cfiCommon0
          CFI Function AppS2wCmd_Psk
        THUMB
// 8660 UINT8
// 8661 AppS2wCmd_Psk(UINT8 *ptr)
// 8662 {
AppS2wCmd_Psk:
        PUSH     {LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+4
        SUB      SP,SP,#+36
          CFI CFA R13+40
// 8663     UINT8 status;
// 8664     UINT8 psk[32];
// 8665     //GSN_WDD_WLAN_CFG_T *pWlanConfig;
// 8666 
// 8667     //pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
// 8668     
// 8669     
// 8670     status = AppS2wParse_Psk(ptr,psk);
        ADD      R1,SP,#+0
          CFI FunCall AppS2wParse_Psk
        BL       AppS2wParse_Psk
// 8671     if(status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Psk_0
// 8672     {
// 8673         return status;
// 8674     }
// 8675     
// 8676     //pWlanConfig->securityCfg.pskConfig.pskValid = 1;
// 8677     //memcpy(pWlanConfig->securityCfg.pskConfig.psk,psk,GSN_WDD_SEC_PMK_LEN);
// 8678     
// 8679     s2wCurrent.security.wpa.pskValid = 1;
        LDR.N    R0,??DataTable455
        MOVS     R1,#+1
        STRB     R1,[R0, #+244]
// 8680     memcpy(s2wCurrent.security.wpa.psk,psk,GSN_WDD_SEC_PMK_LEN);
        MOVS     R2,#+32
        ADD      R1,SP,#+0
        ADDS     R0,R0,#+245
          CFI FunCall memcpy
        BL       memcpy
// 8681 
// 8682     return AppS2wHal_PskKeyStore(psk);
        ADD      R0,SP,#+0
          CFI FunCall AppS2wHal_PskKeyStore
        BL       AppS2wHal_PskKeyStore
??AppS2wCmd_Psk_0:
        ADD      SP,SP,#+36
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock503
// 8683 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable450:
        DC32     s2wL2L3ConnectSemaphore
// 8684 
// 8685 
// 8686 /**
// 8687  ******************************************************************
// 8688  * @ingroup S2w-Application
// 8689  * @brief Process the AT+WWEP Command.
// 8690  *   This function check the validity of parameter passed and
// 8691  *   update the active profile wep key.
// 8692  * @param ptr Pointer to the user input string.
// 8693  *
// 8694  * @return S2W_SUCCESS - operation successful.
// 8695  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8696  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock504 Using cfiCommon0
          CFI Function AppS2wCmd_Wwep
        THUMB
// 8697 PRIVATE UINT8
// 8698 AppS2wCmd_Wwep(UINT8 *ptr)
// 8699 {
AppS2wCmd_Wwep:
        PUSH     {R4-R9,LR}
          CFI R14 Frame(CFA, -4)
          CFI R9 Frame(CFA, -8)
          CFI R8 Frame(CFA, -12)
          CFI R7 Frame(CFA, -16)
          CFI R6 Frame(CFA, -20)
          CFI R5 Frame(CFA, -24)
          CFI R4 Frame(CFA, -28)
          CFI CFA R13+28
        SUB      SP,SP,#+268
          CFI CFA R13+296
        MOV      R6,R0
// 8700     S2W_SECURITY_T params;
// 8701     UINT8 status;
// 8702     UINT8 idx,len=0;
// 8703 
// 8704     memcpy(&params, &s2wCurrent.security, sizeof(params));
        LDR.W    R8,??DataTable455
        MOV      R2,#+268
        ADD      R1,R8,#+120
        BL       ?Subroutine27
// 8705 
// 8706     if (*ptr < '1' || *ptr > '4' || *(ptr + 1) != '=')
??CrossCallReturnLabel_70:
        LDRB     R0,[R6, #+0]
        SUB      R1,R0,#+49
        CMP      R1,#+4
        BCS.N    ??AppS2wCmd_Wwep_0
        LDRB     R1,[R6, #+1]
        CMP      R1,#+61
        BNE.N    ??AppS2wCmd_Wwep_0
// 8707     {
// 8708         return S2W_EINVAL;
// 8709     }
// 8710 
// 8711     idx = *ptr - '0';
        SUB      R9,R0,#+48
// 8712 
// 8713     /* Parse and validate the wep key.
// 8714      */
// 8715     // if the wep key set for ascii then parse it as ascii
// 8716     if(s2wWepKeyAscii)
        UXTB     R4,R9
        MOVS     R0,#+13
        ADD      R1,SP,#+0
        MLA      R0,R0,R4,R1
        SUBS     R5,R0,#+6
        ADD      R0,SP,#+0
        ADDS     R7,R4,R0
        LDR.W    R0,??DataTable464
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Wwep_1
// 8717     {
// 8718 		len = strlen((char *)ptr+2);
        ADDS     R0,R6,#+2
          CFI FunCall strlen
        BL       strlen
        UXTB     R2,R0
// 8719 		if ((len != 5) && (len != 13))
        CMP      R2,#+5
        IT       NE 
        CMPNE    R2,#+13
        BEQ.N    ??AppS2wCmd_Wwep_2
// 8720 	    {
// 8721 		    return S2W_EINVAL;
??AppS2wCmd_Wwep_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wwep_3
// 8722 		}
// 8723 		params.wep.keyLen[idx-1] = len;
??AppS2wCmd_Wwep_2:
        STRB     R2,[R7, #+2]
// 8724         memcpy(params.wep.key[idx-1],ptr+2,len);
        ADDS     R1,R6,#+2
        MOV      R0,R5
          CFI FunCall memcpy
        BL       memcpy
// 8725 	}
// 8726 	else
// 8727 	{
// 8728         status = AppS2wParse_WepKey(ptr + 2, &params.wep, idx);
// 8729         if (status != S2W_SUCCESS)
// 8730         {
// 8731             return status;
// 8732         }
// 8733 	}
// 8734 
// 8735     params.wep.keyIdx = idx;
// 8736     params.validKeys |= S2W_SECURITY_VALID_WEP;
??AppS2wCmd_Wwep_4:
        LDRB     R0,[SP, #+1]
        STRB     R4,[SP, #+2]
        ORR      R0,R0,#0x1
        BL       ?Subroutine79
// 8737 
// 8738     if(s2wappMainTaskCtxt->apConf)// if Ap conf enabled then store in Ap conf
??CrossCallReturnLabel_451:
        CBZ.N    R0,??AppS2wCmd_Wwep_5
// 8739     {
// 8740         s2wCurrent.lmtdApConf.wepKeyConfig.KeyId = (params.wep.keyIdx);
        STRB     R9,[R8, #+599]
// 8741         s2wCurrent.lmtdApConf.wepKeyConfig.KeyLen =(GSN_WDD_WEP_KEY_LEN_T) params.wep.keyLen[params.wep.keyIdx-1];
// 8742         memcpy(&s2wCurrent.lmtdApConf.wepKeyConfig.Key, params.wep.key[params.wep.keyIdx-1],
// 8743                params.wep.keyLen[params.wep.keyIdx-1]);
        MOV      R1,R5
        LDRB     R2,[R7, #+2]
        STRB     R2,[R8, #+598]
        ADD      R0,R8,#+600
          CFI FunCall memcpy
        BL       memcpy
        B.N      ??AppS2wCmd_Wwep_6
// 8744     }
??AppS2wCmd_Wwep_1:
        MOV      R2,R4
        ADD      R1,SP,#+2
        ADDS     R0,R6,#+2
          CFI FunCall AppS2wParse_WepKey
        BL       AppS2wParse_WepKey
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wwep_4
        B.N      ??AppS2wCmd_Wwep_3
// 8745     else
// 8746     {
// 8747         memcpy(&s2wCurrent.security, &params, sizeof(s2wCurrent.security));
??AppS2wCmd_Wwep_5:
        MOV      R2,#+268
        ADD      R1,SP,#+0
        ADD      R0,R8,#+120
          CFI FunCall memcpy
        BL       memcpy
// 8748     }
// 8749     return S2W_SUCCESS;
??AppS2wCmd_Wwep_6:
        MOVS     R0,#+0
          CFI EndBlock cfiBlock504
??AppS2wCmd_Wwep_3:
        REQUIRE ?Subroutine1
        ;; // Fall through to label ?Subroutine1
// 8750 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock505 Using cfiCommon0
          CFI NoFunction
          CFI NoCalls AppS2wCmd_Wwep
          CFI NoCalls AppS2wCmd_Nstat
          CFI CFA R13+296
          CFI R4 Frame(CFA, -28)
          CFI R5 Frame(CFA, -24)
          CFI R6 Frame(CFA, -20)
          CFI R7 Frame(CFA, -16)
          CFI R8 Frame(CFA, -12)
          CFI R9 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
        THUMB
?Subroutine1:
        ADD      SP,SP,#+268
          CFI CFA R13+28
        POP      {R4-R9,PC}       ;; return
          CFI EndBlock cfiBlock505

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond506 Using cfiCommon0
          CFI Function AppS2wCmd_Wwpa
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_450
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+288
          CFI Block cfiCond507 Using cfiCommon0
          CFI (cfiCond507) Function AppS2wCmd_Wwep
          CFI (cfiCond507) NoCalls AppS2wCmd_Wwep
          CFI (cfiCond507) NoCalls AppS2wCmd_Wwpa
          CFI (cfiCond507) Conditional ??CrossCallReturnLabel_451
          CFI (cfiCond507) R4 Frame(CFA, -28)
          CFI (cfiCond507) R5 Frame(CFA, -24)
          CFI (cfiCond507) R6 Frame(CFA, -20)
          CFI (cfiCond507) R7 Frame(CFA, -16)
          CFI (cfiCond507) R8 Frame(CFA, -12)
          CFI (cfiCond507) R9 Frame(CFA, -8)
          CFI (cfiCond507) R14 Frame(CFA, -4)
          CFI (cfiCond507) CFA R13+296
          CFI Block cfiPicker508 Using cfiCommon1
          CFI (cfiPicker508) NoFunction
          CFI (cfiPicker508) NoCalls AppS2wCmd_Wwep
          CFI (cfiPicker508) NoCalls AppS2wCmd_Wwpa
          CFI (cfiPicker508) Picker
        THUMB
?Subroutine79:
        STRB     R0,[SP, #+1]
        LDR.W    R0,??DataTable464_1
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+30336
        LDRB     R0,[R0, #+0]
        BX       LR
          CFI EndBlock cfiCond506
          CFI EndBlock cfiCond507
          CFI EndBlock cfiPicker508

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable451:
        DC32     0x1f0a8c0
// 8751 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock509 Using cfiCommon0
          CFI Function AppS2wCmad_WsrvrValidationEn
        THUMB
// 8752 UINT8
// 8753 AppS2wCmad_WsrvrValidationEn(UINT8 *ptr)
// 8754 {
AppS2wCmad_WsrvrValidationEn:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 8755     UINT8 status;
// 8756     UINT32 val;
// 8757     BOOL skipValidation = 0;
// 8758     /* check the validity of parameter passed
// 8759      */
// 8760     status = AppS2wParse_Int(ptr, &val);
        BL       ?Subroutine51
// 8761     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_281:
        CBNZ.N   R0,??AppS2wCmad_WsrvrValidationEn_0
// 8762     {
// 8763         return status;
// 8764     }
// 8765     skipValidation = !val;
        LDR      R0,[SP, #+0]
        SUBS     R0,R0,#+1
        SBCS     R0,R0,R0
        LSRS     R0,R0,#+31
// 8766 
// 8767     GsnWdd_SkipSuppSrvValidation(skipValidation);
          CFI FunCall GsnWdd_SkipSuppSrvValidation
        BL       GsnWdd_SkipSuppSrvValidation
// 8768 
// 8769     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmad_WsrvrValidationEn_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock509
// 8770 }
// 8771 
// 8772     

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock510 Using cfiCommon0
          CFI Function AppS2wCmad_WeapTimeChk
          CFI NoCalls
        THUMB
// 8773 UINT8
// 8774 AppS2wCmad_WeapTimeChk(UINT8 *ptr)
// 8775 {
AppS2wCmad_WeapTimeChk:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 8776     UINT8 status;
// 8777     UINT32 val;
// 8778     /* check the validity of parameter passed
// 8779      */
// 8780     status = AppS2wParse_Int(ptr, &val);
        BL       ?Subroutine51
// 8781     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_280:
        CBNZ.N   R0,??AppS2wCmad_WeapTimeChk_0
// 8782     {
// 8783         return status;
// 8784     }
// 8785 
// 8786     s2wCurrent.eapCertTimeValidChkDisbl = !val;
        LDR      R0,[SP, #+0]
        LDR.N    R1,??DataTable455
        SUBS     R0,R0,#+1
        SBCS     R0,R0,R0
        LSRS     R0,R0,#+31
        STRB     R0,[R1, #+956]
// 8787 
// 8788     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmad_WeapTimeChk_0:
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock510
// 8789 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable452:
        DC32     0xc0000400
// 8790 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock511 Using cfiCommon0
          CFI Function AppS2wCmd_WwepConf
          CFI NoCalls
        THUMB
// 8791 UINT8
// 8792 AppS2wCmd_WwepConf(UINT8 *ptr)
// 8793 {
// 8794 
// 8795 	if(*ptr == '1')
AppS2wCmd_WwepConf:
        LDRB     R0,[R0, #+0]
        CMP      R0,#+49
        IT       EQ 
        MOVEQ    R0,#+1
// 8796 	{
// 8797 		s2wWepKeyAscii=1;
        BEQ.N    ??AppS2wCmd_WwepConf_0
// 8798 	}
// 8799 	else if(*ptr == '0')
        CMP      R0,#+48
        BNE.N    ??AppS2wCmd_WwepConf_1
// 8800 	{
// 8801 		s2wWepKeyAscii=0;
        MOVS     R0,#+0
??AppS2wCmd_WwepConf_0:
        LDR.W    R1,??DataTable464
        STRB     R0,[R1, #+0]
// 8802 	}
// 8803 	else
// 8804 	{
// 8805 		return S2W_EINVAL;
// 8806 	}
// 8807 	return S2W_SUCCESS;
        MOVS     R0,#+0
        BX       LR
??AppS2wCmd_WwepConf_1:
        MOVS     R0,#+2
        BX       LR               ;; return
          CFI EndBlock cfiBlock511
// 8808 
// 8809 
// 8810 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable453:
        DC32     0x80000001

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable453_1:
        DC32     S2W_DNS_CLIENT_FALGS

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable453_2:
        DC32     dhcpSrvrCfg
// 8811 /**
// 8812  ******************************************************************
// 8813  * @ingroup S2w-Application
// 8814  * @brief Process the AT+RFFWREGDOMAIN Command.
// 8815  *   This function set the region information .
// 8816  * @param ptr Pointer to the user input string.
// 8817  * @return S2W_SUCCESS - operation successful.
// 8818  * @retval S2W_EINVAL  - operation failure-invalid command.
// 8819  * @retval S2W_FAILURE - operation failure.
// 8820  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock512 Using cfiCommon0
          CFI Function AppS2wCmd_RegDomainSet
        THUMB
// 8821 PUBLIC UINT8
// 8822 AppS2wCmd_RegDomainSet(UINT8 *ptr)
// 8823 {
AppS2wCmd_RegDomainSet:
        PUSH     {R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+20
        SUBW     SP,SP,#+2044
          CFI CFA R13+2064
// 8824     const char *region = "FCC";
// 8825     UINT32 domainId=0;
        MOVS     R1,#+0
        STR      R1,[SP, #+0]
        ADR.N    R4,??DataTable456  ;; "FCC"
// 8826     UINT8 status = S2W_EINVAL,domain=0;
// 8827     S2W_FLASH_PARAMS_T s2wProfile;
// 8828     
// 8829     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R1,[R0, #+0]
        LDR.N    R5,??DataTable455
        LDR.W    R7,??DataTable464_1
        MOVW     R6,#+33136
        CMP      R1,#+63
        ITT      EQ 
        LDRBEQ   R1,[R0, #+1]
        CMPEQ    R1,#+0
        BNE.N    ??AppS2wCmd_RegDomainSet_0
// 8830     {
// 8831         /* get the reg domain send it on serial interface
// 8832          */
// 8833         //status = AppS2wHal_RegDomainGet(&domain);
// 8834     //    AppCfg_Get( APP_CFG_REG_DOMAIN_ID, &domain );
// 8835 	    if(!s2wappMainTaskCtxt->fsInit)
        LDR      R0,[R7, #+0]
        LDRB     R0,[R6, R0]
        CBNZ.N   R0,??CrossCallReturnLabel_537
// 8836 	    {
// 8837 			App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 8838 			s2wappMainTaskCtxt->fsInit = TRUE;
        BL       ?Subroutine107
// 8839 	        f_enterFS();
// 8840 		}
// 8841 		if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
??CrossCallReturnLabel_537:
        LDRB     R0,[R5, #+4]
        CMP      R0,#+2
        ITE      EQ 
        LDRBEQ   R0,[R5, #+648]
        LDRBNE   R0,[R5, #+917]
// 8842 		{
// 8843 			domain = s2wCurrent.lmtdApConf.regDomain;
// 8844 		}
// 8845 		else
// 8846 		{
// 8847 	    	domain = s2wCurrent.regDomain;
// 8848 		}
// 8849 
// 8850         switch (domain)
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_RegDomainSet_1
        CMP      R0,#+2
        IT       EQ 
        ADREQ.W  R4,`?<Constant "TELEC ">`
        B.N      ??AppS2wCmd_RegDomainSet_2
// 8851         {
// 8852             case S2W_DOMAIN_FCC:
// 8853                 region = "FCC";
// 8854             break;
// 8855 
// 8856             case S2W_DOMAIN_ETSI:
// 8857                 region = "ETSI";
??AppS2wCmd_RegDomainSet_1:
        ADR.W    R4,`?<Constant "ETSI">`
// 8858             break;
// 8859 
// 8860             case S2W_DOMAIN_TELEC:
// 8861                 region = "TELEC ";
// 8862             break;
// 8863 
// 8864             default:
// 8865             break;
// 8866         }
// 8867         S2w_Printf("\r\nREG_DOMAIN=%s\n",region);
??AppS2wCmd_RegDomainSet_2:
        MOV      R1,R4
        ADR.W    R0,`?<Constant "\\r\\nREG_DOMAIN=%s\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 8868         return S2W_SUCCESS;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_RegDomainSet_3
// 8869     }
// 8870     status = AppS2wParse_Int(ptr, &domainId);
??AppS2wCmd_RegDomainSet_0:
        BL       ?Subroutine51
// 8871     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_279:
        CBNZ.N   R0,??AppS2wCmd_RegDomainSet_3
// 8872     {
// 8873         return status;
// 8874     }
// 8875     if(domainId >= S2W_MAX_REG_DOMAIN)
        LDR      R0,[SP, #+0]
        CMP      R0,#+3
        IT       CS 
        MOVCS    R0,#+2
// 8876     {
// 8877        return S2W_EINVAL;
        BCS.N    ??AppS2wCmd_RegDomainSet_3
// 8878     }
// 8879     domain = (UINT8)domainId;
// 8880 	if(s2wCurrent.mode == S2W_WLANDATA_MODE_AP)
        LDRB     R1,[R5, #+4]
        CMP      R1,#+2
        ITE      EQ 
        STRBEQ   R0,[R5, #+648]
        STRBNE   R0,[R5, #+917]
// 8881 	{
// 8882 		s2wCurrent.lmtdApConf.regDomain=domain;
// 8883 	}
// 8884 	else
// 8885 	{
// 8886     	s2wCurrent.regDomain = domain;
// 8887 	}
// 8888     
// 8889     s2wProfile.profile[0] =  s2wCurrent;
        ADD      R0,SP,#+8
        MOV      R1,R5
        MOV      R2,#+1016
          CFI FunCall __aeabi_memcpy4
        BL       __aeabi_memcpy4
// 8890     if(!s2wappMainTaskCtxt->fsInit)
        LDR      R0,[R7, #+0]
        LDRB     R0,[R6, R0]
        CBNZ.N   R0,??CrossCallReturnLabel_536
// 8891     {
// 8892 		App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 8893 		s2wappMainTaskCtxt->fsInit = TRUE;
        BL       ?Subroutine107
// 8894                 f_enterFS();
// 8895 	}
// 8896     status = S2w_SaveS2wProfile(&s2wProfile,0);
// 8897     if(status != S2W_SUCCESS)
??CrossCallReturnLabel_536:
        MOVS     R1,#+0
        ADD      R0,SP,#+8
          CFI FunCall S2w_SaveS2wProfile
        BL       S2w_SaveS2wProfile
        CBZ.N    R0,??AppS2wCmd_RegDomainSet_3
// 8898       return S2W_FAILURE;
        MOVS     R0,#+1
// 8899     
// 8900     return S2W_SUCCESS;
??AppS2wCmd_RegDomainSet_3:
        ADDW     SP,SP,#+2044
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock512
// 8901 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable454:
        DC32     s2wappMainTaskNotifier

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TELEC ">`:
        DC8 "TELEC "
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "ETSI">`:
        DC8 "ETSI"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nREG_DOMAIN=%s\\n">`:
        DC8 "\015\012REG_DOMAIN=%s\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond513 Using cfiCommon0
          CFI Function AppS2wCmd_Nmac
          CFI Conditional ??CrossCallReturnLabel_538
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond514 Using cfiCommon0
          CFI (cfiCond514) Function AppS2wCmd_RegDomainSet
          CFI (cfiCond514) Conditional ??CrossCallReturnLabel_537
          CFI (cfiCond514) R4 Frame(CFA, -20)
          CFI (cfiCond514) R5 Frame(CFA, -16)
          CFI (cfiCond514) R6 Frame(CFA, -12)
          CFI (cfiCond514) R7 Frame(CFA, -8)
          CFI (cfiCond514) R14 Frame(CFA, -4)
          CFI (cfiCond514) CFA R13+2064
          CFI Block cfiCond515 Using cfiCommon0
          CFI (cfiCond515) Function AppS2wCmd_RegDomainSet
          CFI (cfiCond515) Conditional ??CrossCallReturnLabel_536
          CFI (cfiCond515) R4 Frame(CFA, -20)
          CFI (cfiCond515) R5 Frame(CFA, -16)
          CFI (cfiCond515) R6 Frame(CFA, -12)
          CFI (cfiCond515) R7 Frame(CFA, -8)
          CFI (cfiCond515) R14 Frame(CFA, -4)
          CFI (cfiCond515) CFA R13+2064
          CFI Block cfiCond516 Using cfiCommon0
          CFI (cfiCond516) Function AppS2wCmd_Acmode
          CFI (cfiCond516) Conditional ??CrossCallReturnLabel_535
          CFI (cfiCond516) R4 Frame(CFA, -20)
          CFI (cfiCond516) R5 Frame(CFA, -16)
          CFI (cfiCond516) R6 Frame(CFA, -12)
          CFI (cfiCond516) R7 Frame(CFA, -8)
          CFI (cfiCond516) R14 Frame(CFA, -4)
          CFI (cfiCond516) CFA R13+24
          CFI Block cfiPicker517 Using cfiCommon1
          CFI (cfiPicker517) NoFunction
          CFI (cfiPicker517) Picker
        THUMB
?Subroutine107:
        LDR      R0,[R7, #+0]
          CFI Block cfiCond518 Using cfiCommon0
          CFI (cfiCond518) Function AppS2wCmd_Write
          CFI (cfiCond518) Conditional ??CrossCallReturnLabel_534
          CFI (cfiCond518) R4 Frame(CFA, -16)
          CFI (cfiCond518) R5 Frame(CFA, -12)
          CFI (cfiCond518) R6 Frame(CFA, -8)
          CFI (cfiCond518) R14 Frame(CFA, -4)
          CFI (cfiCond518) CFA R13+24
??Subroutine107_0:
        MOVS     R1,#+1
        STRB     R1,[R6, R0]
          CFI FunCall AppS2wCmd_Nmac fsm_enterFS
          CFI FunCall AppS2wCmd_RegDomainSet fsm_enterFS
          CFI FunCall AppS2wCmd_RegDomainSet fsm_enterFS
          CFI FunCall AppS2wCmd_Acmode fsm_enterFS
          CFI FunCall AppS2wCmd_Write fsm_enterFS
        B.W      fsm_enterFS
          CFI EndBlock cfiCond513
          CFI EndBlock cfiCond514
          CFI EndBlock cfiCond515
          CFI EndBlock cfiCond516
          CFI EndBlock cfiPicker517
          CFI EndBlock cfiCond518
// 8902 
// 8903 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock519 Using cfiCommon0
          CFI Function AppS2wCmd_Wphymode
        THUMB
// 8904 UINT8 AppS2wCmd_Wphymode(UINT8* ptr)
// 8905 {
AppS2wCmd_Wphymode:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 8906    UINT8 status = S2W_FAILURE;
// 8907    UINT8 *p;
// 8908    UINT32 temp;
// 8909    
// 8910 
// 8911     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R0,[R0, #+0]
        CMP      R0,#+63
        ITTT     EQ 
        LDREQ    R0,[SP, #+8]
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_Wphymode_0
// 8912     {
// 8913       
// 8914       /* Call WDD API to get PHY mode */
// 8915       
// 8916       return status;
        MOVS     R0,#+1
        POP      {R1-R3,PC}
// 8917     }
// 8918     
// 8919       /* Set the PHY mode  */
// 8920     
// 8921     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wphymode_0:
        BL       ??Subroutine34_0
// 8922     if (!p)
??CrossCallReturnLabel_146:
        CBZ.N    R0,??AppS2wCmd_Wphymode_1
// 8923     {
// 8924         return S2W_EINVAL;
// 8925     }
// 8926   
// 8927     status = AppS2wParse_Int(p, &temp);
        BL       ?Subroutine51
// 8928     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_278:
        CBNZ.N   R0,??AppS2wCmd_Wphymode_2
// 8929     {
// 8930         return status;
// 8931     }
// 8932     if(temp >= 256)
        LDR      R0,[SP, #+0]
        CMP      R0,#+255
        BLS.N    ??AppS2wCmd_Wphymode_3
// 8933     {
// 8934         return S2W_EINVAL;
??AppS2wCmd_Wphymode_1:
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 8935     }
// 8936     /* Call WDD API to set PHY mode  */
// 8937     GsnWdd_PhyModeSet(&s2wappMainTaskCtxt->if0.wddCtx, (UINT8 )temp);
??AppS2wCmd_Wphymode_3:
        UXTB     R1,R0
        BL       ?Subroutine74
??CrossCallReturnLabel_438:
          CFI FunCall GsnWdd_PhyModeSet
        BL       GsnWdd_PhyModeSet
// 8938     return status;
        MOVS     R0,#+0
??AppS2wCmd_Wphymode_2:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock519
// 8939     
// 8940 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond520 Using cfiCommon0
          CFI Function AppS2wCmd_Wretry
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_436
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
          CFI Block cfiCond521 Using cfiCommon0
          CFI (cfiCond521) Function AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond521) NoCalls AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond521) NoCalls AppS2wCmd_BaBitMapSet
          CFI (cfiCond521) NoCalls AppS2wCmd_Wretry
          CFI (cfiCond521) NoCalls AppS2wCmd_Wphymode
          CFI (cfiCond521) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond521) Conditional ??CrossCallReturnLabel_437
          CFI (cfiCond521) R4 Frame(CFA, -8)
          CFI (cfiCond521) R14 Frame(CFA, -4)
          CFI (cfiCond521) CFA R13+16
          CFI Block cfiCond522 Using cfiCommon0
          CFI (cfiCond522) Function AppS2wCmd_Wphymode
          CFI (cfiCond522) NoCalls AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond522) NoCalls AppS2wCmd_BaBitMapSet
          CFI (cfiCond522) NoCalls AppS2wCmd_Wretry
          CFI (cfiCond522) NoCalls AppS2wCmd_Wphymode
          CFI (cfiCond522) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond522) Conditional ??CrossCallReturnLabel_438
          CFI (cfiCond522) R14 Frame(CFA, -4)
          CFI (cfiCond522) CFA R13+16
          CFI Block cfiCond523 Using cfiCommon0
          CFI (cfiCond523) Function AppS2wCmd_NcmAuto
          CFI (cfiCond523) NoCalls AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond523) NoCalls AppS2wCmd_BaBitMapSet
          CFI (cfiCond523) NoCalls AppS2wCmd_Wretry
          CFI (cfiCond523) NoCalls AppS2wCmd_Wphymode
          CFI (cfiCond523) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond523) Conditional ??CrossCallReturnLabel_439
          CFI (cfiCond523) R4 Frame(CFA, -36)
          CFI (cfiCond523) R5 Frame(CFA, -32)
          CFI (cfiCond523) R6 Frame(CFA, -28)
          CFI (cfiCond523) R7 Frame(CFA, -24)
          CFI (cfiCond523) R8 Frame(CFA, -20)
          CFI (cfiCond523) R9 Frame(CFA, -16)
          CFI (cfiCond523) R10 Frame(CFA, -12)
          CFI (cfiCond523) R11 Frame(CFA, -8)
          CFI (cfiCond523) R14 Frame(CFA, -4)
          CFI (cfiCond523) CFA R13+1344
          CFI Block cfiCond524 Using cfiCommon0
          CFI (cfiCond524) Function AppS2wCmd_BaBitMapSet
          CFI (cfiCond524) NoCalls AppS2wCmd_TkipContrMsrStart
          CFI (cfiCond524) NoCalls AppS2wCmd_BaBitMapSet
          CFI (cfiCond524) NoCalls AppS2wCmd_Wretry
          CFI (cfiCond524) NoCalls AppS2wCmd_Wphymode
          CFI (cfiCond524) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond524) Conditional ??CrossCallReturnLabel_440
          CFI (cfiCond524) R14 Frame(CFA, -4)
          CFI (cfiCond524) CFA R13+16
          CFI Block cfiPicker525 Using cfiCommon1
          CFI (cfiPicker525) NoFunction
          CFI (cfiPicker525) NoCalls AppS2wCmd_TkipContrMsrStart
          CFI (cfiPicker525) NoCalls AppS2wCmd_BaBitMapSet
          CFI (cfiPicker525) NoCalls AppS2wCmd_Wretry
          CFI (cfiPicker525) NoCalls AppS2wCmd_Wphymode
          CFI (cfiPicker525) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiPicker525) Picker
        THUMB
?Subroutine74:
        LDR.W    R0,??DataTable464_1
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+3808
        BX       LR
          CFI EndBlock cfiCond520
          CFI EndBlock cfiCond521
          CFI EndBlock cfiCond522
          CFI EndBlock cfiCond523
          CFI EndBlock cfiCond524
          CFI EndBlock cfiPicker525

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable455:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable455_1:
        DC32     0xc0a8f001

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable455_2:
        DC32     0x80510100

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable455_3:
        DC32     s2wCurrent+0x18C

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond526 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSave
          CFI Conditional ??CrossCallReturnLabel_158
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond527 Using cfiCommon0
          CFI (cfiCond527) Function AppS2wCmd_BaBitMapSet
          CFI (cfiCond527) Conditional ??CrossCallReturnLabel_157
          CFI (cfiCond527) R14 Frame(CFA, -4)
          CFI (cfiCond527) CFA R13+16
          CFI Block cfiPicker528 Using cfiCommon1
          CFI (cfiPicker528) NoFunction
          CFI (cfiPicker528) Picker
        THUMB
?Subroutine34:
        STR      R0,[SP, #+4]
          CFI Block cfiCond529 Using cfiCommon0
          CFI (cfiCond529) Function AppS2wCmd_HttpClientConfigDel
          CFI (cfiCond529) Conditional ??CrossCallReturnLabel_156
          CFI (cfiCond529) R4 Frame(CFA, -20)
          CFI (cfiCond529) R5 Frame(CFA, -16)
          CFI (cfiCond529) R6 Frame(CFA, -12)
          CFI (cfiCond529) R7 Frame(CFA, -8)
          CFI (cfiCond529) R14 Frame(CFA, -4)
          CFI (cfiCond529) CFA R13+32
          CFI Block cfiCond530 Using cfiCommon0
          CFI (cfiCond530) Function AppS2wCmd_PowerSave
          CFI (cfiCond530) Conditional ??CrossCallReturnLabel_155
          CFI (cfiCond530) R14 Frame(CFA, -4)
          CFI (cfiCond530) CFA R13+16
          CFI Block cfiCond531 Using cfiCommon0
          CFI (cfiCond531) Function AppS2wCmd_UartFifoLevel
          CFI (cfiCond531) Conditional ??CrossCallReturnLabel_154
          CFI (cfiCond531) R4 Frame(CFA, -12)
          CFI (cfiCond531) R5 Frame(CFA, -8)
          CFI (cfiCond531) R14 Frame(CFA, -4)
          CFI (cfiCond531) CFA R13+24
          CFI Block cfiCond532 Using cfiCommon0
          CFI (cfiCond532) Function AppS2wCmd_UartFifoLevel
          CFI (cfiCond532) Conditional ??CrossCallReturnLabel_153
          CFI (cfiCond532) R4 Frame(CFA, -12)
          CFI (cfiCond532) R5 Frame(CFA, -8)
          CFI (cfiCond532) R14 Frame(CFA, -4)
          CFI (cfiCond532) CFA R13+24
          CFI Block cfiCond533 Using cfiCommon0
          CFI (cfiCond533) Function AppS2wCmd_AssocPSModeSet
          CFI (cfiCond533) Conditional ??CrossCallReturnLabel_152
          CFI (cfiCond533) R14 Frame(CFA, -4)
          CFI (cfiCond533) CFA R13+16
          CFI Block cfiCond534 Using cfiCommon0
          CFI (cfiCond534) Function AppS2wCmd_BeaconMissThresholdSet
          CFI (cfiCond534) Conditional ??CrossCallReturnLabel_151
          CFI (cfiCond534) R14 Frame(CFA, -4)
          CFI (cfiCond534) CFA R13+16
          CFI Block cfiCond535 Using cfiCommon0
          CFI (cfiCond535) Function AppS2wCmd_WlanRecvFiltrSet
          CFI (cfiCond535) Conditional ??CrossCallReturnLabel_150
          CFI (cfiCond535) R14 Frame(CFA, -4)
          CFI (cfiCond535) CFA R13+16
          CFI Block cfiCond536 Using cfiCommon0
          CFI (cfiCond536) Function AppS2wCmd_RtsEnable
          CFI (cfiCond536) Conditional ??CrossCallReturnLabel_149
          CFI (cfiCond536) R14 Frame(CFA, -4)
          CFI (cfiCond536) CFA R13+16
          CFI Block cfiCond537 Using cfiCommon0
          CFI (cfiCond537) Function AppS2wCmd_RtsEnable
          CFI (cfiCond537) Conditional ??CrossCallReturnLabel_148
          CFI (cfiCond537) R14 Frame(CFA, -4)
          CFI (cfiCond537) CFA R13+16
          CFI Block cfiCond538 Using cfiCommon0
          CFI (cfiCond538) Function AppS2wCmd_FrameTxFailCntLmitSet
          CFI (cfiCond538) Conditional ??CrossCallReturnLabel_147
          CFI (cfiCond538) R14 Frame(CFA, -4)
          CFI (cfiCond538) CFA R13+16
          CFI Block cfiCond539 Using cfiCommon0
          CFI (cfiCond539) Function AppS2wCmd_Wphymode
          CFI (cfiCond539) Conditional ??CrossCallReturnLabel_146
          CFI (cfiCond539) R14 Frame(CFA, -4)
          CFI (cfiCond539) CFA R13+16
          CFI Block cfiCond540 Using cfiCommon0
          CFI (cfiCond540) Function AppS2wCmd_IpMulticastJoin
          CFI (cfiCond540) Conditional ??CrossCallReturnLabel_145
          CFI (cfiCond540) R14 Frame(CFA, -4)
          CFI (cfiCond540) CFA R13+16
          CFI Block cfiCond541 Using cfiCommon0
          CFI (cfiCond541) Function AppS2wCmd_IpMulticastLeave
          CFI (cfiCond541) Conditional ??CrossCallReturnLabel_144
          CFI (cfiCond541) R14 Frame(CFA, -4)
          CFI (cfiCond541) CFA R13+16
          CFI Block cfiCond542 Using cfiCommon0
          CFI (cfiCond542) Function AppS2wCmd_AdcConf
          CFI (cfiCond542) Conditional ??CrossCallReturnLabel_143
          CFI (cfiCond542) R4 Frame(CFA, -12)
          CFI (cfiCond542) R5 Frame(CFA, -8)
          CFI (cfiCond542) R14 Frame(CFA, -4)
          CFI (cfiCond542) CFA R13+24
          CFI Block cfiCond543 Using cfiCommon0
          CFI (cfiCond543) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond543) Conditional ??CrossCallReturnLabel_142
          CFI (cfiCond543) R4 Frame(CFA, -12)
          CFI (cfiCond543) R5 Frame(CFA, -8)
          CFI (cfiCond543) R14 Frame(CFA, -4)
          CFI (cfiCond543) CFA R13+24
          CFI Block cfiCond544 Using cfiCommon0
          CFI (cfiCond544) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond544) Conditional ??CrossCallReturnLabel_141
          CFI (cfiCond544) R4 Frame(CFA, -12)
          CFI (cfiCond544) R5 Frame(CFA, -8)
          CFI (cfiCond544) R14 Frame(CFA, -4)
          CFI (cfiCond544) CFA R13+24
          CFI Block cfiCond545 Using cfiCommon0
          CFI (cfiCond545) Function AppS2wCmd_CoapRemoveOption
          CFI (cfiCond545) Conditional ??CrossCallReturnLabel_140
          CFI (cfiCond545) R4 Frame(CFA, -20)
          CFI (cfiCond545) R5 Frame(CFA, -16)
          CFI (cfiCond545) R6 Frame(CFA, -12)
          CFI (cfiCond545) R7 Frame(CFA, -8)
          CFI (cfiCond545) R14 Frame(CFA, -4)
          CFI (cfiCond545) CFA R13+32
          CFI Block cfiCond546 Using cfiCommon0
          CFI (cfiCond546) Function AppS2wCmd_BaBitMapSet
          CFI (cfiCond546) Conditional ??CrossCallReturnLabel_139
          CFI (cfiCond546) R14 Frame(CFA, -4)
          CFI (cfiCond546) CFA R13+16
          CFI Block cfiCond547 Using cfiCommon0
          CFI (cfiCond547) Function AppS2wCmd_Hibernate
          CFI (cfiCond547) Conditional ??CrossCallReturnLabel_138
          CFI (cfiCond547) R14 Frame(CFA, -4)
          CFI (cfiCond547) CFA R13+16
          CFI Block cfiCond548 Using cfiCommon0
          CFI (cfiCond548) Function AppS2wCmd_Hibernate
          CFI (cfiCond548) Conditional ??CrossCallReturnLabel_137
          CFI (cfiCond548) R14 Frame(CFA, -4)
          CFI (cfiCond548) CFA R13+16
          CFI Block cfiCond549 Using cfiCommon0
          CFI (cfiCond549) Function AppS2wCmd_TempGet
          CFI (cfiCond549) Conditional ??CrossCallReturnLabel_136
          CFI (cfiCond549) R14 Frame(CFA, -4)
          CFI (cfiCond549) CFA R13+16
??Subroutine34_0:
        ADD      R0,SP,#+8
          CFI FunCall AppS2wCmd_PowerSave AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BaBitMapSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_HttpClientConfigDel AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_PowerSave AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_UartFifoLevel AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_UartFifoLevel AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AssocPSModeSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BeaconMissThresholdSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_WlanRecvFiltrSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_RtsEnable AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_RtsEnable AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_FrameTxFailCntLmitSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wphymode AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_IpMulticastJoin AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_IpMulticastLeave AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AdcConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSetOption AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSetOption AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapRemoveOption AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BaBitMapSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Hibernate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Hibernate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_TempGet AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond526
          CFI EndBlock cfiCond527
          CFI EndBlock cfiPicker528
          CFI EndBlock cfiCond529
          CFI EndBlock cfiCond530
          CFI EndBlock cfiCond531
          CFI EndBlock cfiCond532
          CFI EndBlock cfiCond533
          CFI EndBlock cfiCond534
          CFI EndBlock cfiCond535
          CFI EndBlock cfiCond536
          CFI EndBlock cfiCond537
          CFI EndBlock cfiCond538
          CFI EndBlock cfiCond539
          CFI EndBlock cfiCond540
          CFI EndBlock cfiCond541
          CFI EndBlock cfiCond542
          CFI EndBlock cfiCond543
          CFI EndBlock cfiCond544
          CFI EndBlock cfiCond545
          CFI EndBlock cfiCond546
          CFI EndBlock cfiCond547
          CFI EndBlock cfiCond548
          CFI EndBlock cfiCond549

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 8941 
// 8942 #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
// 8943 S2W_OTA_FWUP_CONF_T OtaFwupConfParam;
OtaFwupConfParam:
        DS8 100
httpConfInfo:
        DS8 76

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
httpConfAtCmd:
        DS8 1
        DS8 1
        DS8 2
headerValues:
        DS8 100

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
headerTypes:
        DS8 100

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
headerTypesModified:
        DS8 100

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
L3Dhcpv6Status:
        DS8 1

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
dhcpv6ClientStack:
        DS8 2048

        SECTION `.text`:CODE:NOROOT(2)
          CFI Block cfiBlock550 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
        THUMB
// 8944 UINT8
// 8945 AppS2wCmd_OtaFwupConf(UINT8* ptr)
// 8946 {
AppS2wCmd_OtaFwupConf:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+20
          CFI CFA R13+40
// 8947     UINT8* p;
// 8948     UINT32 id=0,port,flag=0, dnsErr = 0;
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        STR      R0,[SP, #+0]
        STR      R0,[SP, #+8]
// 8949      UINT8 status = S2W_EINVAL;
// 8950      INT32 certID=-1;
// 8951      /* get the 1st parameter ID
// 8952      */
// 8953      p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine40
??CrossCallReturnLabel_220:
        MOVS     R5,R0
// 8954      if (!p)
        BEQ.N    ??AppS2wCmd_OtaFwupConf_1
// 8955      {
// 8956          return S2W_EINVAL;
// 8957      }
// 8958      status = AppS2wParse_Int(p, &id);
        BL       ?Subroutine53
??CrossCallReturnLabel_338:
        MOVS     R4,R0
// 8959      if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_OtaFwupConf_2
// 8960      {
// 8961          return status;
// 8962      }
// 8963      p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine40
??CrossCallReturnLabel_219:
        MOVS     R5,R0
// 8964      if (!p)
        BEQ.N    ??AppS2wCmd_OtaFwupConf_1
// 8965      {
// 8966          return S2W_EINVAL;
// 8967      }
// 8968      switch(id)
        LDR      R0,[SP, #+12]
        LDR.W    R6,??DataTable464_2
        CMP      R0,#+11
        BHI.N    ??AppS2wCmd_OtaFwupConf_3
        TBB      [PC, R0]
        DATA
??AppS2wCmd_OtaFwupConf_0:
        DC8      0x6,0x18,0x1F,0x28
        DC8      0x3E,0x49,0x52,0x73
        DC8      0x98,0xA9,0x87,0xC0
        THUMB
// 8969      {
// 8970         case S2W_OTAFWUP_SRVRIP:
// 8971            //status = AppS2wParse_Ip(p, (UINT8 *) &OtaFwupConfParam.fwSrvIp);
// 8972            	if(inet_pton(AF_INET, (const char*)p, &OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr) == 1)
??AppS2wCmd_OtaFwupConf_4:
        ADDS     R2,R6,#+4
        BL       ?Subroutine71
??CrossCallReturnLabel_429:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_OtaFwupConf_5
// 8973 		    {
// 8974 		        OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET;
        MOVS     R0,#+2
??AppS2wCmd_OtaFwupConf_6:
        STRH     R0,[R6, #+0]
// 8975 		    }
// 8976 		    else if(inet_pton(AF_INET6, (const char*)p, &OtaFwupConfParam.sockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
// 8977 		    {
// 8978 		    	OtaFwupConfParam.sockAddr.addr.ipv6.sin6_family = AF_INET6;
// 8979 		    }
// 8980 		    else
// 8981 		    {
// 8982                return S2W_EINVAL;
// 8983            	}
// 8984            break;
// 8985         case S2W_OTAFWUP_SRVRPORT:
// 8986            status = AppS2wParse_Int(p,(UINT32 *)&port);
// 8987            if (status != S2W_SUCCESS)
// 8988            {
// 8989                return status;
// 8990            }
// 8991            OtaFwupConfParam.sockAddr.ss_port = (UINT16)port;
// 8992            break;
// 8993         case S2W_OTAFWUP_PROXY_PRESENT:
// 8994            status = AppS2wParse_Int(p,&flag);
// 8995            if (status != S2W_SUCCESS)
// 8996            {
// 8997                return status;
// 8998            }
// 8999            OtaFwupConfParam.proxyFlag = flag;
// 9000            break;
// 9001         case S2W_OTAFWUP_PROXY_SRVRIP:
// 9002             if(! OtaFwupConfParam.proxyFlag)
// 9003             {
// 9004                 return S2W_EINVAL;
// 9005             }
// 9006             //status = AppS2wParse_Ip(p, (UINT8 *) &OtaFwupConfParam.proxyIp);
// 9007             if(inet_pton(AF_INET, (const char*)p, &OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr) == 1)
// 9008             {
// 9009 		        OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET;
// 9010 		    }
// 9011 		    else if(inet_pton(AF_INET6, (const char*)p, &OtaFwupConfParam.proxySockAddr.addr.ipv6.sin6_addr.s6_addr32) == 1)
// 9012 		    {
// 9013 		    	OtaFwupConfParam.proxySockAddr.addr.ipv6.sin6_family = AF_INET6;
// 9014 		    }
// 9015 		    else
// 9016 		    {
// 9017                return S2W_EINVAL;
// 9018             }
// 9019             break;
// 9020         case S2W_OTAFWUP_PROXY_SRVRPORT:
// 9021             if(! OtaFwupConfParam.proxyFlag)
// 9022             {
// 9023                 return S2W_EINVAL;
// 9024             }
// 9025             status = AppS2wParse_Int(p, (UINT32 *) &port);
// 9026             if (status != S2W_SUCCESS)
// 9027             {
// 9028                 return status;
// 9029             }
// 9030             OtaFwupConfParam.proxySockAddr.ss_port = (UINT16)port;
// 9031             break;
// 9032         case S2W_OTAFWUP_SSL_ENABLED:
// 9033             status = AppS2wParse_Int(p,&flag);
// 9034             if (status != S2W_SUCCESS)
// 9035             {
// 9036                 return status;
// 9037             }
// 9038             OtaFwupConfParam.sslFlag = flag;
// 9039             break;
// 9040         case S2W_OTAFWUP_CERT_NAME:
// 9041             if(! OtaFwupConfParam.sslFlag)
// 9042             {
// 9043                 return S2W_EINVAL;
// 9044             }
// 9045             if(strlen((const char *)p) == 0)
// 9046             {
// 9047                 OtaFwupConfParam.certAddr = NULL;
// 9048                 return S2W_SUCCESS;
// 9049             }
// 9050             certID = S2wCert_SearchRamTable((INT8*)p);
// 9051             if(certID == -1)
// 9052             {
// 9053                 certID = S2wCert_FlashFileLoad((INT8*)p);
// 9054             }
// 9055             if(certID != -1)
// 9056             {
// 9057                 OtaFwupConfParam.certAddr = s2w_ssl_cert_table[certID].certAddress;
// 9058             }
// 9059             else
// 9060             {
// 9061                 S2w_Printf("\n\rCertificate Not Found\n\r");
// 9062             }
// 9063         break;
// 9064         case S2W_OTAFWUP_APP_IMAGE_URL:
// 9065 			/* Configure wlan url */
// 9066             if(OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE] != NULL)
// 9067                 gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]);
// 9068             OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]= gsn_malloc(strlen((const char *)p)+1);
// 9069             strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE],(const char *)p,strlen((const char *)p)+1);
// 9070         break;
// 9071 		case S2W_OTAFWUP_APP_SIGN_URL:
// 9072 			/* Configure wlan url */
// 9073             if(OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE] != NULL)
// 9074                 gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE]);
// 9075             OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE]= gsn_malloc(strlen((const char *)p)+1);
// 9076             strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_SIGN_IMAGE],(const char *)p,strlen((const char *)p)+1);
// 9077         break;
// 9078 		case S2W_OTAFWUP_INFO_URL:
// 9079 			/* Configure informational xml url */
// 9080 			if(OtaFwupConfParam.urls[S2W_OTAFU_URL_XML] != NULL)
// 9081                 gsn_free(OtaFwupConfParam.urls[S2W_OTAFU_URL_XML]);
// 9082             OtaFwupConfParam.urls[S2W_OTAFU_URL_XML]= gsn_malloc(strlen((const char *)p)+1);
// 9083             strncpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_XML],(const char *)p,strlen((const char *)p)+1);
// 9084 			break;
// 9085 		case S2W_OTAFWUP_SRVR_HOST_NAME:
// 9086 			/* Configure FWUP srver hostname */
// 9087 			if(OtaFwupConfParam.fwSrvHostName != NULL)
// 9088 				gsn_free(OtaFwupConfParam.fwSrvHostName);
// 9089 			OtaFwupConfParam.fwSrvHostName = gsn_malloc(strlen((const char *)p)+1);
// 9090 			memset(OtaFwupConfParam.fwSrvHostName, 0, strlen((const char *)p)+1);
// 9091 			strcpy((INT8 *)OtaFwupConfParam.fwSrvHostName,(const char *)p);
// 9092 			break;
// 9093 		case S2W_OTAFWUP_APP_ENABLE_DNS_ERR:
// 9094             status = AppS2wParse_Int(p, &dnsErr);
// 9095             if (status != S2W_SUCCESS)
// 9096             {
// 9097                 return status;
// 9098             }
// 9099             OtaFwupConfParam.dnsError = dnsErr;
// 9100             break;
// 9101        default:
// 9102             return S2W_EINVAL;
// 9103      }
// 9104      return status;
??AppS2wCmd_OtaFwupConf_2:
        MOV      R0,R4
??AppS2wCmd_OtaFwupConf_7:
        ADD      SP,SP,#+24
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI CFA R13+40
??AppS2wCmd_OtaFwupConf_5:
        ADD      R2,R6,#+8
        BL       ?Subroutine72
??CrossCallReturnLabel_432:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_OtaFwupConf_3
        MOVS     R0,#+3
        B.N      ??AppS2wCmd_OtaFwupConf_6
??AppS2wCmd_OtaFwupConf_8:
        BL       ?Subroutine55
??CrossCallReturnLabel_354:
        MOVS     R4,R0
        BNE.N    ??AppS2wCmd_OtaFwupConf_2
        LDR      R0,[SP, #+4]
        STRH     R0,[R6, #+2]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_9:
        ADD      R1,SP,#+0
        BL       ??Subroutine55_0
??CrossCallReturnLabel_352:
        MOVS     R4,R0
        BNE.N    ??AppS2wCmd_OtaFwupConf_2
        LDR      R0,[SP, #+0]
        STRB     R0,[R6, #+56]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_10:
        LDRB     R0,[R6, #+56]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_OtaFwupConf_1
        ADD      R2,R6,#+32
        BL       ?Subroutine71
??CrossCallReturnLabel_428:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_OtaFwupConf_11
        MOVS     R0,#+2
??AppS2wCmd_OtaFwupConf_12:
        STRH     R0,[R6, #+28]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_11:
        ADD      R2,R6,#+36
        BL       ?Subroutine72
??CrossCallReturnLabel_431:
        CMP      R0,#+1
??AppS2wCmd_OtaFwupConf_3:
        BNE.W    ??AppS2wCmd_OtaFwupConf_13
        MOVS     R0,#+3
        B.N      ??AppS2wCmd_OtaFwupConf_12
??AppS2wCmd_OtaFwupConf_14:
        LDRB     R0,[R6, #+56]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_OtaFwupConf_1
        BL       ?Subroutine55
??CrossCallReturnLabel_353:
        MOVS     R4,R0
        BNE.N    ??AppS2wCmd_OtaFwupConf_2
        LDR      R0,[SP, #+4]
        STRH     R0,[R6, #+30]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_15:
        ADD      R1,SP,#+0
        BL       ??Subroutine55_0
??CrossCallReturnLabel_351:
        MOVS     R4,R0
        BNE.N    ??AppS2wCmd_OtaFwupConf_2
        LDR      R0,[SP, #+0]
        STRB     R0,[R6, #+57]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_16:
        LDRB     R0,[R6, #+57]
        CMP      R0,#+0
??AppS2wCmd_OtaFwupConf_1:
        BEQ.N    ??AppS2wCmd_OtaFwupConf_13
        BL       ?Subroutine68
??CrossCallReturnLabel_415:
        CBNZ.N   R0,??AppS2wCmd_OtaFwupConf_17
        STR      R0,[R6, #+60]
        B.N      ??AppS2wCmd_OtaFwupConf_7
??AppS2wCmd_OtaFwupConf_17:
        MOV      R0,R5
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
        CMN      R0,#+1
        ITT      EQ 
        MOVEQ    R0,R5
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_OtaFwupConf_18
        MOVS     R1,#+12
        LDR.N    R2,??DataTable456_1
        MLA      R0,R1,R0,R2
        LDR      R0,[R0, #+0]
        STR      R0,[R6, #+60]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_18:
        ADR.W    R0,`?<Constant "\\n\\rCertificate Not Fou...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_19:
        LDR      R0,[R6, #+64]
        CBZ.N    R0,??AppS2wCmd_OtaFwupConf_20
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_OtaFwupConf_20:
        BL       ?Subroutine68
??CrossCallReturnLabel_414:
        MOVS     R2,#+0
        MOVW     R1,#+9068
        BL       ?Subroutine26
??CrossCallReturnLabel_68:
        STR      R0,[R6, #+64]
        BL       ?Subroutine68
??CrossCallReturnLabel_413:
        ADDS     R2,R0,#+1
        LDR      R0,[R6, #+64]
??AppS2wCmd_OtaFwupConf_21:
        MOV      R1,R5
          CFI FunCall strncpy
        BL       strncpy
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_22:
        LDR      R0,[R6, #+72]
        CBZ.N    R0,??AppS2wCmd_OtaFwupConf_23
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_OtaFwupConf_23:
        BL       ?Subroutine68
??CrossCallReturnLabel_412:
        MOVS     R2,#+0
        MOVW     R1,#+9075
        BL       ?Subroutine26
??CrossCallReturnLabel_67:
        STR      R0,[R6, #+72]
        BL       ?Subroutine68
??CrossCallReturnLabel_411:
        ADDS     R2,R0,#+1
        LDR      R0,[R6, #+72]
        B.N      ??AppS2wCmd_OtaFwupConf_21
??AppS2wCmd_OtaFwupConf_24:
        LDR      R0,[R6, #+68]
        CBZ.N    R0,??AppS2wCmd_OtaFwupConf_25
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_OtaFwupConf_25:
        BL       ?Subroutine68
??CrossCallReturnLabel_410:
        MOVS     R2,#+0
        MOVW     R1,#+9082
        BL       ?Subroutine26
??CrossCallReturnLabel_66:
        STR      R0,[R6, #+68]
        BL       ?Subroutine68
??CrossCallReturnLabel_409:
        ADDS     R2,R0,#+1
        LDR      R0,[R6, #+68]
        B.N      ??AppS2wCmd_OtaFwupConf_21
??AppS2wCmd_OtaFwupConf_26:
        LDR      R0,[R6, #+92]
        CBZ.N    R0,??AppS2wCmd_OtaFwupConf_27
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_OtaFwupConf_27:
        BL       ?Subroutine68
??CrossCallReturnLabel_408:
        MOVS     R2,#+0
        MOVW     R1,#+9089
        BL       ?Subroutine26
??CrossCallReturnLabel_65:
        STR      R0,[R6, #+92]
        BL       ?Subroutine68
??CrossCallReturnLabel_407:
        ADDS     R2,R0,#+1
        LDR      R0,[R6, #+92]
        BL       ??Subroutine18_0
??CrossCallReturnLabel_34:
        LDR      R0,[R6, #+92]
        MOV      R1,R5
          CFI FunCall strcpy
        BL       strcpy
??AppS2wCmd_OtaFwupConf_28:
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_29:
        ADD      R1,SP,#+8
        BL       ??Subroutine55_0
??CrossCallReturnLabel_350:
        MOVS     R4,R0
        BNE.N    ??AppS2wCmd_OtaFwupConf_28
        LDR      R0,[SP, #+8]
        STRB     R0,[R6, #+96]
        B.N      ??AppS2wCmd_OtaFwupConf_2
??AppS2wCmd_OtaFwupConf_13:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_OtaFwupConf_7
          CFI EndBlock cfiBlock550
// 9105 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable456:
        DC8      "FCC"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable456_1:
        DC32     s2w_ssl_cert_table

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rCertificate Not Fou...">`:
        DC8 "\012\015Certificate Not Found\012\015"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond551 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
          CFI Conditional ??CrossCallReturnLabel_432
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond552 Using cfiCommon0
          CFI (cfiCond552) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond552) Conditional ??CrossCallReturnLabel_431
          CFI (cfiCond552) R4 Frame(CFA, -16)
          CFI (cfiCond552) R5 Frame(CFA, -12)
          CFI (cfiCond552) R6 Frame(CFA, -8)
          CFI (cfiCond552) R14 Frame(CFA, -4)
          CFI (cfiCond552) CFA R13+40
          CFI Block cfiPicker553 Using cfiCommon1
          CFI (cfiPicker553) NoFunction
          CFI (cfiPicker553) Picker
        THUMB
?Subroutine72:
        MOV      R1,R5
          CFI Block cfiCond554 Using cfiCommon0
          CFI (cfiCond554) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond554) Conditional ??CrossCallReturnLabel_430
          CFI (cfiCond554) R4 Frame(CFA, -36)
          CFI (cfiCond554) R5 Frame(CFA, -32)
          CFI (cfiCond554) R6 Frame(CFA, -28)
          CFI (cfiCond554) R7 Frame(CFA, -24)
          CFI (cfiCond554) R8 Frame(CFA, -20)
          CFI (cfiCond554) R9 Frame(CFA, -16)
          CFI (cfiCond554) R10 Frame(CFA, -12)
          CFI (cfiCond554) R11 Frame(CFA, -8)
          CFI (cfiCond554) R14 Frame(CFA, -4)
          CFI (cfiCond554) CFA R13+64
??Subroutine72_0:
        MOVS     R0,#+3
          CFI FunCall AppS2wCmd_OtaFwupConf inet_pton
          CFI FunCall AppS2wCmd_OtaFwupConf inet_pton
          CFI FunCall AppS2wCmd_HttpClientOpen inet_pton
        B.W      inet_pton
          CFI EndBlock cfiCond551
          CFI EndBlock cfiCond552
          CFI EndBlock cfiPicker553
          CFI EndBlock cfiCond554

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond555 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
          CFI Conditional ??CrossCallReturnLabel_429
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond556 Using cfiCommon0
          CFI (cfiCond556) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond556) Conditional ??CrossCallReturnLabel_428
          CFI (cfiCond556) R4 Frame(CFA, -16)
          CFI (cfiCond556) R5 Frame(CFA, -12)
          CFI (cfiCond556) R6 Frame(CFA, -8)
          CFI (cfiCond556) R14 Frame(CFA, -4)
          CFI (cfiCond556) CFA R13+40
          CFI Block cfiPicker557 Using cfiCommon1
          CFI (cfiPicker557) NoFunction
          CFI (cfiPicker557) Picker
        THUMB
?Subroutine71:
        MOV      R1,R5
          CFI Block cfiCond558 Using cfiCommon0
          CFI (cfiCond558) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond558) Conditional ??CrossCallReturnLabel_427
          CFI (cfiCond558) R4 Frame(CFA, -36)
          CFI (cfiCond558) R5 Frame(CFA, -32)
          CFI (cfiCond558) R6 Frame(CFA, -28)
          CFI (cfiCond558) R7 Frame(CFA, -24)
          CFI (cfiCond558) R8 Frame(CFA, -20)
          CFI (cfiCond558) R9 Frame(CFA, -16)
          CFI (cfiCond558) R10 Frame(CFA, -12)
          CFI (cfiCond558) R11 Frame(CFA, -8)
          CFI (cfiCond558) R14 Frame(CFA, -4)
          CFI (cfiCond558) CFA R13+64
??Subroutine71_0:
        MOVS     R0,#+2
          CFI FunCall AppS2wCmd_OtaFwupConf inet_pton
          CFI FunCall AppS2wCmd_OtaFwupConf inet_pton
          CFI FunCall AppS2wCmd_HttpClientOpen inet_pton
        B.W      inet_pton
          CFI EndBlock cfiCond555
          CFI EndBlock cfiCond556
          CFI EndBlock cfiPicker557
          CFI EndBlock cfiCond558

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond559 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
          CFI Conditional ??CrossCallReturnLabel_415
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond560 Using cfiCommon0
          CFI (cfiCond560) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond560) Conditional ??CrossCallReturnLabel_414
          CFI (cfiCond560) R4 Frame(CFA, -16)
          CFI (cfiCond560) R5 Frame(CFA, -12)
          CFI (cfiCond560) R6 Frame(CFA, -8)
          CFI (cfiCond560) R14 Frame(CFA, -4)
          CFI (cfiCond560) CFA R13+40
          CFI Block cfiCond561 Using cfiCommon0
          CFI (cfiCond561) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond561) Conditional ??CrossCallReturnLabel_413
          CFI (cfiCond561) R4 Frame(CFA, -16)
          CFI (cfiCond561) R5 Frame(CFA, -12)
          CFI (cfiCond561) R6 Frame(CFA, -8)
          CFI (cfiCond561) R14 Frame(CFA, -4)
          CFI (cfiCond561) CFA R13+40
          CFI Block cfiCond562 Using cfiCommon0
          CFI (cfiCond562) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond562) Conditional ??CrossCallReturnLabel_412
          CFI (cfiCond562) R4 Frame(CFA, -16)
          CFI (cfiCond562) R5 Frame(CFA, -12)
          CFI (cfiCond562) R6 Frame(CFA, -8)
          CFI (cfiCond562) R14 Frame(CFA, -4)
          CFI (cfiCond562) CFA R13+40
          CFI Block cfiCond563 Using cfiCommon0
          CFI (cfiCond563) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond563) Conditional ??CrossCallReturnLabel_411
          CFI (cfiCond563) R4 Frame(CFA, -16)
          CFI (cfiCond563) R5 Frame(CFA, -12)
          CFI (cfiCond563) R6 Frame(CFA, -8)
          CFI (cfiCond563) R14 Frame(CFA, -4)
          CFI (cfiCond563) CFA R13+40
          CFI Block cfiCond564 Using cfiCommon0
          CFI (cfiCond564) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond564) Conditional ??CrossCallReturnLabel_410
          CFI (cfiCond564) R4 Frame(CFA, -16)
          CFI (cfiCond564) R5 Frame(CFA, -12)
          CFI (cfiCond564) R6 Frame(CFA, -8)
          CFI (cfiCond564) R14 Frame(CFA, -4)
          CFI (cfiCond564) CFA R13+40
          CFI Block cfiCond565 Using cfiCommon0
          CFI (cfiCond565) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond565) Conditional ??CrossCallReturnLabel_409
          CFI (cfiCond565) R4 Frame(CFA, -16)
          CFI (cfiCond565) R5 Frame(CFA, -12)
          CFI (cfiCond565) R6 Frame(CFA, -8)
          CFI (cfiCond565) R14 Frame(CFA, -4)
          CFI (cfiCond565) CFA R13+40
          CFI Block cfiCond566 Using cfiCommon0
          CFI (cfiCond566) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond566) Conditional ??CrossCallReturnLabel_408
          CFI (cfiCond566) R4 Frame(CFA, -16)
          CFI (cfiCond566) R5 Frame(CFA, -12)
          CFI (cfiCond566) R6 Frame(CFA, -8)
          CFI (cfiCond566) R14 Frame(CFA, -4)
          CFI (cfiCond566) CFA R13+40
          CFI Block cfiCond567 Using cfiCommon0
          CFI (cfiCond567) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond567) Conditional ??CrossCallReturnLabel_407
          CFI (cfiCond567) R4 Frame(CFA, -16)
          CFI (cfiCond567) R5 Frame(CFA, -12)
          CFI (cfiCond567) R6 Frame(CFA, -8)
          CFI (cfiCond567) R14 Frame(CFA, -4)
          CFI (cfiCond567) CFA R13+40
          CFI Block cfiPicker568 Using cfiCommon1
          CFI (cfiPicker568) NoFunction
          CFI (cfiPicker568) Picker
        THUMB
?Subroutine68:
        MOV      R0,R5
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
          CFI FunCall AppS2wCmd_OtaFwupConf strlen
        B.W      strlen
          CFI EndBlock cfiCond559
          CFI EndBlock cfiCond560
          CFI EndBlock cfiCond561
          CFI EndBlock cfiCond562
          CFI EndBlock cfiCond563
          CFI EndBlock cfiCond564
          CFI EndBlock cfiCond565
          CFI EndBlock cfiCond566
          CFI EndBlock cfiCond567
          CFI EndBlock cfiPicker568

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond569 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
          CFI Conditional ??CrossCallReturnLabel_354
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond570 Using cfiCommon0
          CFI (cfiCond570) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond570) Conditional ??CrossCallReturnLabel_353
          CFI (cfiCond570) R4 Frame(CFA, -16)
          CFI (cfiCond570) R5 Frame(CFA, -12)
          CFI (cfiCond570) R6 Frame(CFA, -8)
          CFI (cfiCond570) R14 Frame(CFA, -4)
          CFI (cfiCond570) CFA R13+40
          CFI Block cfiPicker571 Using cfiCommon1
          CFI (cfiPicker571) NoFunction
          CFI (cfiPicker571) Picker
        THUMB
?Subroutine55:
        ADD      R1,SP,#+4
          CFI Block cfiCond572 Using cfiCommon0
          CFI (cfiCond572) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond572) Conditional ??CrossCallReturnLabel_352
          CFI (cfiCond572) R4 Frame(CFA, -16)
          CFI (cfiCond572) R5 Frame(CFA, -12)
          CFI (cfiCond572) R6 Frame(CFA, -8)
          CFI (cfiCond572) R14 Frame(CFA, -4)
          CFI (cfiCond572) CFA R13+40
          CFI Block cfiCond573 Using cfiCommon0
          CFI (cfiCond573) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond573) Conditional ??CrossCallReturnLabel_351
          CFI (cfiCond573) R4 Frame(CFA, -16)
          CFI (cfiCond573) R5 Frame(CFA, -12)
          CFI (cfiCond573) R6 Frame(CFA, -8)
          CFI (cfiCond573) R14 Frame(CFA, -4)
          CFI (cfiCond573) CFA R13+40
          CFI Block cfiCond574 Using cfiCommon0
          CFI (cfiCond574) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond574) Conditional ??CrossCallReturnLabel_350
          CFI (cfiCond574) R4 Frame(CFA, -16)
          CFI (cfiCond574) R5 Frame(CFA, -12)
          CFI (cfiCond574) R6 Frame(CFA, -8)
          CFI (cfiCond574) R14 Frame(CFA, -4)
          CFI (cfiCond574) CFA R13+40
??Subroutine55_0:
        MOV      R0,R5
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond569
          CFI EndBlock cfiCond570
          CFI EndBlock cfiPicker571
          CFI EndBlock cfiCond572
          CFI EndBlock cfiCond573
          CFI EndBlock cfiCond574

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond575 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_69
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond576 Using cfiCommon0
          CFI (cfiCond576) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond576) Conditional ??CrossCallReturnLabel_68
          CFI (cfiCond576) R4 Frame(CFA, -16)
          CFI (cfiCond576) R5 Frame(CFA, -12)
          CFI (cfiCond576) R6 Frame(CFA, -8)
          CFI (cfiCond576) R14 Frame(CFA, -4)
          CFI (cfiCond576) CFA R13+40
          CFI Block cfiCond577 Using cfiCommon0
          CFI (cfiCond577) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond577) Conditional ??CrossCallReturnLabel_67
          CFI (cfiCond577) R4 Frame(CFA, -16)
          CFI (cfiCond577) R5 Frame(CFA, -12)
          CFI (cfiCond577) R6 Frame(CFA, -8)
          CFI (cfiCond577) R14 Frame(CFA, -4)
          CFI (cfiCond577) CFA R13+40
          CFI Block cfiCond578 Using cfiCommon0
          CFI (cfiCond578) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond578) Conditional ??CrossCallReturnLabel_66
          CFI (cfiCond578) R4 Frame(CFA, -16)
          CFI (cfiCond578) R5 Frame(CFA, -12)
          CFI (cfiCond578) R6 Frame(CFA, -8)
          CFI (cfiCond578) R14 Frame(CFA, -4)
          CFI (cfiCond578) CFA R13+40
          CFI Block cfiCond579 Using cfiCommon0
          CFI (cfiCond579) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond579) Conditional ??CrossCallReturnLabel_65
          CFI (cfiCond579) R4 Frame(CFA, -16)
          CFI (cfiCond579) R5 Frame(CFA, -12)
          CFI (cfiCond579) R6 Frame(CFA, -8)
          CFI (cfiCond579) R14 Frame(CFA, -4)
          CFI (cfiCond579) CFA R13+40
          CFI Block cfiCond580 Using cfiCommon0
          CFI (cfiCond580) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond580) Conditional ??CrossCallReturnLabel_64
          CFI (cfiCond580) R4 Frame(CFA, -12)
          CFI (cfiCond580) R5 Frame(CFA, -8)
          CFI (cfiCond580) R14 Frame(CFA, -4)
          CFI (cfiCond580) CFA R13+24
          CFI Block cfiPicker581 Using cfiCommon1
          CFI (cfiPicker581) NoFunction
          CFI (cfiPicker581) Picker
        THUMB
?Subroutine26:
        ADDS     R0,R0,#+1
          CFI FunCall AppS2wCmd_HttpClientOpen GsnDynMemMgmt_Alloc
          CFI FunCall AppS2wCmd_OtaFwupConf GsnDynMemMgmt_Alloc
          CFI FunCall AppS2wCmd_OtaFwupConf GsnDynMemMgmt_Alloc
          CFI FunCall AppS2wCmd_OtaFwupConf GsnDynMemMgmt_Alloc
          CFI FunCall AppS2wCmd_OtaFwupConf GsnDynMemMgmt_Alloc
          CFI FunCall AppS2wCmd_CoapSetOption GsnDynMemMgmt_Alloc
        B.W      GsnDynMemMgmt_Alloc
          CFI EndBlock cfiCond575
          CFI EndBlock cfiCond576
          CFI EndBlock cfiCond577
          CFI EndBlock cfiCond578
          CFI EndBlock cfiCond579
          CFI EndBlock cfiCond580
          CFI EndBlock cfiPicker581
// 9106 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock582 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupExtFlashStart
        THUMB
// 9107 UINT8
// 9108 AppS2wCmd_OtaFwupExtFlashStart(UINT8* ptr)
// 9109 {
AppS2wCmd_OtaFwupExtFlashStart:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
// 9110      UINT32 status;
// 9111 #if defined(S2W_DFLT_HTTPC_AUTH) || defined(S2W_DFLT_HTTPC_HOST_IP)					
// 9112 	 INT8 *pValue;
// 9113 	 UINT32 len,i=0;
// 9114 #endif		
// 9115      // check the fwup parameters are configured via cmd if not update with default
// 9116      if((OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr == 0) && (OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr == 0)
// 9117               && (OtaFwupConfParam.fwSrvHostName == NULL))
        LDR.W    R4,??DataTable464_2
        LDR      R0,[R4, #+4]
        CMP      R0,#+0
        ITTTT    EQ 
        LDREQ    R0,[R4, #+32]
        CMPEQ    R0,#+0
        LDREQ    R0,[R4, #+92]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_OtaFwupExtFlashStart_0
// 9118      {
// 9119          // update the deafult parameter
// 9120          OtaFwupConfParam.sockAddr.addr.ipv4.sin_addr.s_addr = htonl(S2W_DFLT_OTAFU_PULL_SRVR_IP);
        LDR.W    R0,??DataTable465  ;; 0x1f0a8c0
        STR      R0,[R4, #+4]
// 9121 #ifdef S2W_IPv6_SUPPORT
// 9122 		OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET6;
// 9123 #else
// 9124 		OtaFwupConfParam.sockAddr.addr.ipv4.sin_family = AF_INET;
// 9125 #endif
// 9126         OtaFwupConfParam.sockAddr.ss_port = S2W_DFLT_OTAFU_PULL_SRVR_PORT;
// 9127         OtaFwupConfParam.proxyFlag = S2W_DFLT_OTAFU_PULL_PROXY_SRVR;
// 9128 #ifdef S2W_IPv6_SUPPORT		
// 9129 		OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET6;
// 9130 #else
// 9131 		OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_family = AF_INET;
// 9132 #endif
// 9133 
// 9134          OtaFwupConfParam.sslFlag = S2W_DFLT_OTAFU_PULL_SSL;
// 9135         OtaFwupConfParam.proxySockAddr.addr.ipv4.sin_addr.s_addr = htonl(S2W_DFLT_OTAFU_PULL_PROXY_SRVR_IP);
// 9136          OtaFwupConfParam.proxySockAddr.ss_port = S2W_DFLT_OTAFU_PULL_PROXY_SRVR_PORT;
// 9137          OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE]= gsn_malloc(sizeof(S2W_DFLT_OTAFU_PULL_BIN_URL)+1);
        MOVS     R2,#+0
        MOVS     R0,#+2
        STRH     R0,[R4, #+0]
        MOVW     R1,#+9137
        MOVW     R0,#+9000
        STRH     R0,[R4, #+2]
        MOVS     R0,#+0
        STRB     R0,[R4, #+56]
        MOVS     R0,#+2
        STRH     R0,[R4, #+28]
        MOVS     R0,#+0
        STRB     R0,[R4, #+57]
        LDR.W    R0,??DataTable466  ;; 0x101a8c0
        STR      R0,[R4, #+32]
        MOV      R0,#+8000
        STRH     R0,[R4, #+30]
        MOVS     R0,#+14
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R4, #+64]
// 9138          memcpy((INT8 *)OtaFwupConfParam.urls[S2W_OTAFU_URL_FW_IMAGE],S2W_DFLT_OTAFU_PULL_BIN_URL,sizeof(S2W_DFLT_OTAFU_PULL_BIN_URL));
        MOVS     R2,#+13
        ADR.W    R1,`?<Constant "gainspan.lan">`
          CFI FunCall memcpy
        BL       memcpy
// 9139 		if((httpConfAtCmd != 1) &&(!httpConfInfo.reqHeaderCount))
        LDR.W    R5,??DataTable468
        LDRB     R0,[R5, #+0]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_OtaFwupExtFlashStart_0
        LDR      R0,[R4, #+116]
        CBNZ.N   R0,??AppS2wCmd_OtaFwupExtFlashStart_0
// 9140 		{
// 9141 			memset(&headerTypes[0], GSN_HTTP_HEADER_INVAL, sizeof(headerTypes));
        LDR.W    R6,??DataTable469
        MOVS     R2,#+100
        BL       ??Subroutine19_0
// 9142 			memset(&headerValues[0], 0, sizeof(headerValues));
??CrossCallReturnLabel_41:
        MOVS     R2,#+100
        MOVS     R1,#+0
        ADDS     R0,R5,#+4
          CFI FunCall memset
        BL       memset
// 9143 			httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;
        MOVS     R0,#+3
        STRB     R0,[R4, #+100]
// 9144 			httpConfInfo.reqHeaderTypes = (GSN_HTTP_USER_HEADER_TYPE_T *)headerTypesModified;
// 9145 			httpConfInfo.reqHeaderValues = headerValues;
// 9146 			httpConfInfo.reqHeaderCount = 0;
// 9147 			// configure the header
// 9148 #ifdef S2W_DFLT_HTTPC_AUTH			
// 9149 			len= sizeof(S2W_DFLT_HTTPC_AUTH);
// 9150 			pValue = gsn_malloc(len+1);
// 9151 			if(pValue == NULL)
// 9152 			{
// 9153 				return S2W_FAILURE;
// 9154 			}
// 9155 			memset(pValue, 0 , len+1);
// 9156 			memcpy(pValue, S2W_DFLT_HTTPC_AUTH, len);
// 9157 			pValue[len] = '\0';
// 9158 			headerValues[i] = pValue;
// 9159 			headerTypes[i++] = GSN_HTTP_HEADER_AUTHORIZATION;
// 9160 			httpConfInfo.reqHeaderCount++;
// 9161 #endif
// 9162 #ifdef S2W_DFLT_HTTPC_HOST_IP			
// 9163 			len= sizeof(S2W_DFLT_HTTPC_HOST_IP);
// 9164 			pValue = gsn_malloc(len+1);
        MOVS     R2,#+0
        LDR.W    R0,??DataTable471
        STR      R0,[R4, #+108]
        MOVW     R1,#+9164
        ADDS     R0,R5,#+4
        STR      R0,[R4, #+112]
        MOVS     R0,#+0
        STR      R0,[R4, #+116]
        MOVS     R0,#+15
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOVS     R7,R0
// 9165 			if(pValue == NULL)
        BEQ.N    ??AppS2wCmd_OtaFwupExtFlashStart_1
// 9166 			{
// 9167 				return S2W_FAILURE;
// 9168 			}
// 9169 			memset(pValue, 0 , len+1);
        MOVS     R2,#+15
        BL       ??Subroutine18_0
// 9170 			memcpy(pValue, (UINT8*)S2W_DFLT_HTTPC_HOST_IP, len);
??CrossCallReturnLabel_33:
        BL       ?Subroutine96
// 9171 			pValue[len] = '\0';
??CrossCallReturnLabel_505:
        MOVS     R0,#+0
        STRB     R0,[R7, #+14]
// 9172 			headerValues[i] = pValue;
        STR      R7,[R5, #+4]
// 9173 			headerTypes[i++] = (GSN_HTTP_USER_HEADER_TYPE_T)(GSN_HTTP_HEADER_HOST);
        MOVS     R0,#+13
        STR      R0,[R6, #+0]
// 9174 			httpConfInfo.reqHeaderCount++;
        LDR      R0,[R4, #+116]
        ADDS     R0,R0,#+1
        STR      R0,[R4, #+116]
// 9175 #endif			
// 9176 		}
// 9177      
// 9178      }
// 9179      status = APPS2w_ExtFlashStart(&OtaFwupConfParam);
// 9180 
// 9181      if(status != GSN_SUCCESS)
??AppS2wCmd_OtaFwupExtFlashStart_0:
        MOV      R0,R4
          CFI FunCall APPS2w_ExtFlashStart
        BL       APPS2w_ExtFlashStart
        CBZ.N    R0,??AppS2wCmd_OtaFwupExtFlashStart_2
// 9182         return S2W_FAILURE;
??AppS2wCmd_OtaFwupExtFlashStart_1:
        MOVS     R0,#+1
// 9183      else
// 9184         return S2W_SUCCESS;
??AppS2wCmd_OtaFwupExtFlashStart_2:
        POP      {R1,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock582
// 9185 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable457:
        DC32     certIndex

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "gainspan.lan">`:
        DC8 "gainspan.lan"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond583 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_506
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond584 Using cfiCommon0
          CFI (cfiCond584) Function AppS2wCmd_OtaFwupExtFlashStart
          CFI (cfiCond584) Conditional ??CrossCallReturnLabel_505
          CFI (cfiCond584) R4 Frame(CFA, -20)
          CFI (cfiCond584) R5 Frame(CFA, -16)
          CFI (cfiCond584) R6 Frame(CFA, -12)
          CFI (cfiCond584) R7 Frame(CFA, -8)
          CFI (cfiCond584) R14 Frame(CFA, -4)
          CFI (cfiCond584) CFA R13+24
          CFI Block cfiPicker585 Using cfiCommon1
          CFI (cfiPicker585) NoFunction
          CFI (cfiPicker585) Picker
        THUMB
?Subroutine96:
        MOVS     R2,#+14
        ADR.W    R1,`?<Constant "192.168.240.1">`
        MOV      R0,R7
          CFI FunCall AppS2wCmd_HttpClientOpen memcpy
          CFI FunCall AppS2wCmd_OtaFwupExtFlashStart memcpy
        B.W      memcpy
          CFI EndBlock cfiCond583
          CFI EndBlock cfiCond584
          CFI EndBlock cfiPicker585

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "192.168.240.1">`:
        DC8 "192.168.240.1"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond586 Using cfiCommon0
          CFI Function AppS2wCmd_CoapOpen
          CFI Conditional ??CrossCallReturnLabel_39
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond587 Using cfiCommon0
          CFI (cfiCond587) Function AppS2wCmd_CoapSend
          CFI (cfiCond587) Conditional ??CrossCallReturnLabel_38
          CFI (cfiCond587) R4 Frame(CFA, -24)
          CFI (cfiCond587) R5 Frame(CFA, -20)
          CFI (cfiCond587) R6 Frame(CFA, -16)
          CFI (cfiCond587) R7 Frame(CFA, -12)
          CFI (cfiCond587) R8 Frame(CFA, -8)
          CFI (cfiCond587) R14 Frame(CFA, -4)
          CFI (cfiCond587) CFA R13+1440
          CFI Block cfiPicker588 Using cfiCommon1
          CFI (cfiPicker588) NoFunction
          CFI (cfiPicker588) Picker
        THUMB
?Subroutine18:
        MOV      R6,R0
        MOVS     R2,#+36
          CFI Block cfiCond589 Using cfiCommon0
          CFI (cfiCond589) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond589) Conditional ??CrossCallReturnLabel_37
          CFI (cfiCond589) R4 Frame(CFA, -36)
          CFI (cfiCond589) R5 Frame(CFA, -32)
          CFI (cfiCond589) R6 Frame(CFA, -28)
          CFI (cfiCond589) R7 Frame(CFA, -24)
          CFI (cfiCond589) R8 Frame(CFA, -20)
          CFI (cfiCond589) R9 Frame(CFA, -16)
          CFI (cfiCond589) R10 Frame(CFA, -12)
          CFI (cfiCond589) R11 Frame(CFA, -8)
          CFI (cfiCond589) R14 Frame(CFA, -4)
          CFI (cfiCond589) CFA R13+64
          CFI Block cfiCond590 Using cfiCommon0
          CFI (cfiCond590) Function AppS2wCmd_HttpClientOpen
          CFI (cfiCond590) Conditional ??CrossCallReturnLabel_36
          CFI (cfiCond590) R4 Frame(CFA, -36)
          CFI (cfiCond590) R5 Frame(CFA, -32)
          CFI (cfiCond590) R6 Frame(CFA, -28)
          CFI (cfiCond590) R7 Frame(CFA, -24)
          CFI (cfiCond590) R8 Frame(CFA, -20)
          CFI (cfiCond590) R9 Frame(CFA, -16)
          CFI (cfiCond590) R10 Frame(CFA, -12)
          CFI (cfiCond590) R11 Frame(CFA, -8)
          CFI (cfiCond590) R14 Frame(CFA, -4)
          CFI (cfiCond590) CFA R13+64
          CFI Block cfiCond591 Using cfiCommon0
          CFI (cfiCond591) Function AppS2wCmd_HttpClientConfig
          CFI (cfiCond591) Conditional ??CrossCallReturnLabel_35
          CFI (cfiCond591) R4 Frame(CFA, -32)
          CFI (cfiCond591) R5 Frame(CFA, -28)
          CFI (cfiCond591) R6 Frame(CFA, -24)
          CFI (cfiCond591) R7 Frame(CFA, -20)
          CFI (cfiCond591) R8 Frame(CFA, -16)
          CFI (cfiCond591) R9 Frame(CFA, -12)
          CFI (cfiCond591) R10 Frame(CFA, -8)
          CFI (cfiCond591) R14 Frame(CFA, -4)
          CFI (cfiCond591) CFA R13+40
          CFI Block cfiCond592 Using cfiCommon0
          CFI (cfiCond592) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond592) Conditional ??CrossCallReturnLabel_34
          CFI (cfiCond592) R4 Frame(CFA, -16)
          CFI (cfiCond592) R5 Frame(CFA, -12)
          CFI (cfiCond592) R6 Frame(CFA, -8)
          CFI (cfiCond592) R14 Frame(CFA, -4)
          CFI (cfiCond592) CFA R13+40
          CFI Block cfiCond593 Using cfiCommon0
          CFI (cfiCond593) Function AppS2wCmd_OtaFwupExtFlashStart
          CFI (cfiCond593) Conditional ??CrossCallReturnLabel_33
          CFI (cfiCond593) R4 Frame(CFA, -20)
          CFI (cfiCond593) R5 Frame(CFA, -16)
          CFI (cfiCond593) R6 Frame(CFA, -12)
          CFI (cfiCond593) R7 Frame(CFA, -8)
          CFI (cfiCond593) R14 Frame(CFA, -4)
          CFI (cfiCond593) CFA R13+24
??Subroutine18_0:
        MOVS     R1,#+0
          CFI FunCall AppS2wCmd_CoapOpen memset
          CFI FunCall AppS2wCmd_CoapSend memset
          CFI FunCall AppS2wCmd_HttpClientOpen memset
          CFI FunCall AppS2wCmd_HttpClientOpen memset
          CFI FunCall AppS2wCmd_HttpClientConfig memset
          CFI FunCall AppS2wCmd_OtaFwupConf memset
          CFI FunCall AppS2wCmd_OtaFwupExtFlashStart memset
        B.W      memset
          CFI EndBlock cfiCond586
          CFI EndBlock cfiCond587
          CFI EndBlock cfiPicker588
          CFI EndBlock cfiCond589
          CFI EndBlock cfiCond590
          CFI EndBlock cfiCond591
          CFI EndBlock cfiCond592
          CFI EndBlock cfiCond593
// 9186 #endif
// 9187 
// 9188 #ifdef S2W_DNS_CLIENT

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock594 Using cfiCommon0
          CFI Function AppS2wCmd_DnsServerSet
        THUMB
// 9189 UINT8
// 9190 AppS2wCmd_DnsServerSet(UINT8 *ptr)
// 9191 {
AppS2wCmd_DnsServerSet:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+12
          CFI CFA R13+40
// 9192   
// 9193   UINT8 *p,status,index=0;
        MOVS     R4,#+0
        LDR.W    R5,??DataTable464_1
        LDR.W    R6,??DataTable470
        ADD      R7,SP,#+0
        MOVW     R8,#+5200
        B.N      ??AppS2wCmd_DnsServerSet_0
// 9194 #ifdef S2W_IPv6_SUPPORT
// 9195   UINT32 IPv6[4],IPv6AddrType;
// 9196 #endif
// 9197   S2W_IPADDR_T IPv4;
// 9198    
// 9199  while(((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL) && (index < 2))
// 9200  {
// 9201     status = AppS2wParse_Ip(p,IPv4);
// 9202       
// 9203     if (status == S2W_SUCCESS)
??AppS2wCmd_DnsServerSet_1:
        BL       ?Subroutine64
??CrossCallReturnLabel_398:
        CBNZ.N   R0,??AppS2wCmd_DnsServerSet_2
// 9204     {
// 9205       DNSv4ServerAddr[index] = (IPv4[0] << 24 | IPv4[1] << 16 | IPv4[2] << 8 | IPv4[3]);
        LDRB     R2,[R7, #+1]
        LDRB     R1,[SP, #+0]
        LSLS     R2,R2,#+16
        ORR      R1,R2,R1, LSL #+24
        LDRB     R2,[R7, #+2]
        ORR      R1,R1,R2, LSL #+8
        LDRB     R2,[R7, #+3]
        ADD      R0,R6,R4, LSL #+2
        ORRS     R1,R2,R1
        STR      R1,[R0, #+4]
// 9206 
// 9207       GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx,DNSv4ServerAddr[index],index);
        MOV      R2,R4
        LDR      R1,[R0, #+4]
        LDR      R0,[R5, #+0]
        ADD      R0,R8,R0
          CFI FunCall GsnNwif_DnsServerAdd
        BL       GsnNwif_DnsServerAdd
// 9208 
// 9209       S2W_DNS_CLIENT_FALGS |= S2W_DNSv4_SERVER_SET;
        LDRB     R0,[R6, #+0]
        ORR      R0,R0,#0x4
        STRB     R0,[R6, #+0]
// 9210     }
// 9211 
// 9212 #ifdef S2W_IPv6_SUPPORT
// 9213     else   /* Check for IPv6 address  */
// 9214     {
// 9215       status = inet_pton(AF_INET6, (const char*)p, (VOID*)IPv6);
// 9216         if(status != TRUE)
// 9217         return S2W_EINVAL;
// 9218 
// 9219         GSN_IPv6_CHANGE_ENDIAN(IPv6);
// 9220 
// 9221 
// 9222       IPv6AddrType = GSN_IPv6_ADDR_TYPE(IPv6);
// 9223   
// 9224       switch(IPv6AddrType)
// 9225       {
// 9226     
// 9227     
// 9228         case GSN_IPv6_LINK_LOCAL:
// 9229         case GSN_IPv6_GLOBAL:
// 9230           
// 9231            /* Clear the previous DNSv6 server */
// 9232             nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[index]);
// 9233 
// 9234             DNSv6ServerAddr[index].nxd_ip_version = 0x6;
// 9235             DNSv6ServerAddr[index].nxd_ip_address.v6[0] = IPv6[0];
// 9236             DNSv6ServerAddr[index].nxd_ip_address.v6[1] = IPv6[1];
// 9237             DNSv6ServerAddr[index].nxd_ip_address.v6[2] = IPv6[2];
// 9238             DNSv6ServerAddr[index].nxd_ip_address.v6[3] = IPv6[3];
// 9239 
// 9240             status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[index]);
// 9241             if (status != S2W_SUCCESS)
// 9242               return S2W_FAILURE;
// 9243             S2W_DNS_CLIENT_FALGS |= S2W_DNSv6_SERVER_SET;
// 9244             break;
// 9245           
// 9246         default:
// 9247             return S2W_EINVAL;
// 9248       }
// 9249     }
// 9250 #endif //S2W_IPv6_SUPPORT   
// 9251     index++;
??AppS2wCmd_DnsServerSet_2:
        ADDS     R4,R4,#+1
        UXTB     R4,R4
// 9252  }
??AppS2wCmd_DnsServerSet_0:
        BL       ?Subroutine39
??CrossCallReturnLabel_211:
        CBZ.N    R0,??AppS2wCmd_DnsServerSet_3
        CMP      R4,#+2
        BLT.N    ??AppS2wCmd_DnsServerSet_1
// 9253 
// 9254     GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
??AppS2wCmd_DnsServerSet_3:
        LDR      R0,[R5, #+0]
        LDR.W    R7,??DataTable470_1
        MOVS     R2,#+0
        ADD      R1,R7,#+424
        ADD      R0,R8,R0
          CFI FunCall GsnNwif_DnsServerGet
        BL       GsnNwif_DnsServerGet
// 9255     GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
        LDR      R0,[R5, #+0]
        MOVS     R2,#+1
        ADD      R1,R7,#+428
        ADD      R0,R8,R0
          CFI FunCall GsnNwif_DnsServerGet
        BL       GsnNwif_DnsServerGet
// 9256 
// 9257     S2W_DNS_CLIENT_FALGS |= S2W_DNS_CLIENT_ENABLED;
        LDRB     R0,[R6, #+0]
        ORR      R0,R0,#0x1
        STRB     R0,[R6, #+0]
// 9258 #ifdef S2W_DHCP_SERVER_ENABLE
// 9259     /* Restart DHCP server */
// 9260     if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
        LDRB     R0,[R6, #+1]
        LSLS     R0,R0,#+31
        BPL.N    ??AppS2wCmd_DnsServerSet_4
// 9261     {
// 9262       UINT8 buff[8]={0};
        ADD      R0,SP,#+4
        MOVS     R1,#+0
        MOVS     R2,#+0
        STM      R0!,{R1,R2}
// 9263       sprintf((char*)buff,"%d",1);
        MOVS     R2,#+1
        ADR.N    R1,??DataTable462  ;; 0x25, 0x64, 0x00, 0x00
        ADD      R0,SP,#+4
          CFI FunCall sprintf
        BL       sprintf
// 9264       GsnDhcpSrvr_Stop(&dhcpSrvr);
        BL       ?Subroutine137
// 9265       dhcpServerFlags &= 0xfe;
??CrossCallReturnLabel_626:
        LDRB     R0,[R6, #+1]
        AND      R0,R0,#0xFE
        STRB     R0,[R6, #+1]
// 9266       AppS2wCmd_DhcpSrvr(buff);
        ADD      R0,SP,#+4
          CFI FunCall AppS2wCmd_DhcpSrvr
        BL       AppS2wCmd_DhcpSrvr
// 9267     }
// 9268 #endif
// 9269     if(index > 2)
??AppS2wCmd_DnsServerSet_4:
        CMP      R4,#+3
        ITE      GE 
        MOVGE    R0,#+1
        MOVLT    R0,#+0
// 9270       return S2W_FAILURE;
// 9271     
// 9272     return S2W_SUCCESS;
        ADD      SP,SP,#+16
          CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock594
// 9273 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable458:
        DC32     `?<Constant "TLS_CA">`
// 9274 
// 9275 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock595 Using cfiCommon0
          CFI Function AppS2wCmd_DnsLookup
        THUMB
// 9276 UINT8
// 9277 AppS2wCmd_DnsLookup(UINT8 *ptr)
// 9278 {
AppS2wCmd_DnsLookup:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+24
          CFI CFA R13+40
// 9279    UINT8 *p,status,*temp;
// 9280    ULONG hostIpAddress;
// 9281    UINT32 retries=0,timeout=0,clearCache;
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        STR      R0,[SP, #+8]
// 9282 
// 9283    if(s2wLinkState != S2W_LINK_STATE_CONNECTED)
        LDR.W    R0,??DataTable471_2
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_DnsLookup_0
// 9284      return S2W_FAILURE;
// 9285   
// 9286    
// 9287    p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 9288       if(p == NULL)
??CrossCallReturnLabel_109:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_DnsLookup_0
// 9289       return S2W_FAILURE;
// 9290 	temp = p;
        MOV      R4,R0
// 9291   
// 9292     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine33
// 9293     if(p != NULL)
??CrossCallReturnLabel_108:
        CBZ.N    R0,??AppS2wCmd_DnsLookup_1
// 9294     {
// 9295   
// 9296       status = AppS2wParse_Int(p, &retries);
// 9297       if (status != S2W_SUCCESS)
        BL       ?Subroutine53
// 9298         return S2W_EINVAL;
// 9299     }
??CrossCallReturnLabel_337:
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_2
// 9300     
// 9301     retries = (retries) ? retries : S2W_DNS_REQ_DEF_RETRIES;
??AppS2wCmd_DnsLookup_1:
        LDR      R0,[SP, #+12]
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_3
        MOVS     R0,#+3
        STR      R0,[SP, #+12]
// 9302     
// 9303     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_DnsLookup_3:
        BL       ?Subroutine33
// 9304     if(p != NULL)
??CrossCallReturnLabel_107:
        CBZ.N    R0,??AppS2wCmd_DnsLookup_4
// 9305     {  
// 9306       status = AppS2wParse_Int(p, &timeout);
// 9307       if (status != S2W_SUCCESS)
        BL       ?Subroutine50
// 9308         return S2W_EINVAL;
// 9309     }
??CrossCallReturnLabel_259:
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_2
// 9310     
// 9311     timeout = (timeout) ? timeout : S2W_DNS_REQ_DEF_TIME_OUT;
??AppS2wCmd_DnsLookup_4:
        LDR      R0,[SP, #+8]
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_5
        MOVS     R0,#+5
        STR      R0,[SP, #+8]
// 9312     
// 9313     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_DnsLookup_5:
        BL       ?Subroutine33
// 9314     if(p != NULL)
??CrossCallReturnLabel_106:
        CBZ.N    R0,??AppS2wCmd_DnsLookup_6
// 9315     {
// 9316       /* Netx Doesnt have any cache */
// 9317       status = AppS2wParse_Int(p, &clearCache);
// 9318       if (status != S2W_SUCCESS)
        BL       ?Subroutine54
??CrossCallReturnLabel_344:
        CBZ.N    R0,??AppS2wCmd_DnsLookup_6
// 9319         return S2W_EINVAL;
??AppS2wCmd_DnsLookup_2:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_DnsLookup_7
// 9320     }
// 9321     GsnNwIf_DnsRetryCountSet(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,retries);
??AppS2wCmd_DnsLookup_6:
        LDR.W    R5,??DataTable470_2
        LDR      R1,[SP, #+12]
        BL       ?Subroutine131
// 9322    status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx, (UINT8*)temp, &hostIpAddress, timeout);
// 9323 
// 9324     if (status != S2W_SUCCESS || hostIpAddress == 0)
??CrossCallReturnLabel_607:
        LDR      R0,[R5, #+0]
        LDR      R3,[SP, #+8]
        ADD      R0,R0,#+5120
        BL       ?Subroutine84
??CrossCallReturnLabel_465:
        UXTB     R0,R0
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_0
        LDR      R0,[SP, #+4]
        CBNZ.N   R0,??AppS2wCmd_DnsLookup_8
// 9325       return S2W_FAILURE;
??AppS2wCmd_DnsLookup_0:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_DnsLookup_7
// 9326 
// 9327   
// 9328     S2w_Printf("\r\nIP:%d.%d.%d.%d\r",(hostIpAddress & 0xff000000)>>24,(hostIpAddress & 0x00ff0000)>>16,(hostIpAddress & 0x0000ff00)>>8,(hostIpAddress & 0x000000ff));
??AppS2wCmd_DnsLookup_8:
        UXTB     R0,R0
        STR      R0,[SP, #+0]
        BL       ?Subroutine103
??CrossCallReturnLabel_525:
        ADR.W    R0,`?<Constant "\\r\\nIP:%d.%d.%d.%d\\r">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 9329     
// 9330     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_DnsLookup_7:
        ADD      SP,SP,#+28
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock595
// 9331 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable459:
        DC32     `?<Constant "TLS_KEY">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable459_1:
        DC32     `?<Constant "TLS_CLIENT">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nIP:%d.%d.%d.%d\\r">`:
        DC8 "\015\012IP:%d.%d.%d.%d\015"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond596 Using cfiCommon0
          CFI Function App2wCmd_Version
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_524
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond597 Using cfiCommon0
          CFI (cfiCond597) Function AppS2wCmd_DnsLookup
          CFI (cfiCond597) NoCalls App2wCmd_Version
          CFI (cfiCond597) NoCalls AppS2wCmd_DnsLookup
          CFI (cfiCond597) Conditional ??CrossCallReturnLabel_525
          CFI (cfiCond597) R4 Frame(CFA, -12)
          CFI (cfiCond597) R5 Frame(CFA, -8)
          CFI (cfiCond597) R14 Frame(CFA, -4)
          CFI (cfiCond597) CFA R13+40
          CFI Block cfiPicker598 Using cfiCommon1
          CFI (cfiPicker598) NoFunction
          CFI (cfiPicker598) NoCalls App2wCmd_Version
          CFI (cfiPicker598) NoCalls AppS2wCmd_DnsLookup
          CFI (cfiPicker598) Picker
        THUMB
?Subroutine103:
        LDR      R0,[SP, #+4]
        UBFX     R3,R0,#+8,#+8
        UBFX     R2,R0,#+16,#+8
        LSRS     R1,R0,#+24
        BX       LR
          CFI EndBlock cfiCond596
          CFI EndBlock cfiCond597
          CFI EndBlock cfiPicker598

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond599 Using cfiCommon0
          CFI Function AppS2wCmd_HttpClientOpen
          CFI Conditional ??CrossCallReturnLabel_341
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+64
          CFI Block cfiCond600 Using cfiCommon0
          CFI (cfiCond600) Function AppS2wCmd_SetSockOp
          CFI (cfiCond600) Conditional ??CrossCallReturnLabel_340
          CFI (cfiCond600) R14 Frame(CFA, -4)
          CFI (cfiCond600) CFA R13+32
          CFI Block cfiCond601 Using cfiCommon0
          CFI (cfiCond601) Function AppS2wCmd_Wmode
          CFI (cfiCond601) Conditional ??CrossCallReturnLabel_339
          CFI (cfiCond601) R4 Frame(CFA, -36)
          CFI (cfiCond601) R5 Frame(CFA, -32)
          CFI (cfiCond601) R6 Frame(CFA, -28)
          CFI (cfiCond601) R7 Frame(CFA, -24)
          CFI (cfiCond601) R8 Frame(CFA, -20)
          CFI (cfiCond601) R9 Frame(CFA, -16)
          CFI (cfiCond601) R10 Frame(CFA, -12)
          CFI (cfiCond601) R11 Frame(CFA, -8)
          CFI (cfiCond601) R14 Frame(CFA, -4)
          CFI (cfiCond601) CFA R13+72
          CFI Block cfiCond602 Using cfiCommon0
          CFI (cfiCond602) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond602) Conditional ??CrossCallReturnLabel_338
          CFI (cfiCond602) R4 Frame(CFA, -16)
          CFI (cfiCond602) R5 Frame(CFA, -12)
          CFI (cfiCond602) R6 Frame(CFA, -8)
          CFI (cfiCond602) R14 Frame(CFA, -4)
          CFI (cfiCond602) CFA R13+40
          CFI Block cfiCond603 Using cfiCommon0
          CFI (cfiCond603) Function AppS2wCmd_DnsLookup
          CFI (cfiCond603) Conditional ??CrossCallReturnLabel_337
          CFI (cfiCond603) R4 Frame(CFA, -12)
          CFI (cfiCond603) R5 Frame(CFA, -8)
          CFI (cfiCond603) R14 Frame(CFA, -4)
          CFI (cfiCond603) CFA R13+40
          CFI Block cfiCond604 Using cfiCommon0
          CFI (cfiCond604) Function AppS2wCmd_Nauto
          CFI (cfiCond604) Conditional ??CrossCallReturnLabel_336
          CFI (cfiCond604) R4 Frame(CFA, -12)
          CFI (cfiCond604) R5 Frame(CFA, -8)
          CFI (cfiCond604) R14 Frame(CFA, -4)
          CFI (cfiCond604) CFA R13+96
          CFI Block cfiCond605 Using cfiCommon0
          CFI (cfiCond605) Function AppS2wCmd_Ping
          CFI (cfiCond605) Conditional ??CrossCallReturnLabel_335
          CFI (cfiCond605) R4 Frame(CFA, -16)
          CFI (cfiCond605) R5 Frame(CFA, -12)
          CFI (cfiCond605) R6 Frame(CFA, -8)
          CFI (cfiCond605) R14 Frame(CFA, -4)
          CFI (cfiCond605) CFA R13+72
          CFI Block cfiCond606 Using cfiCommon0
          CFI (cfiCond606) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond606) Conditional ??CrossCallReturnLabel_334
          CFI (cfiCond606) R4 Frame(CFA, -16)
          CFI (cfiCond606) R5 Frame(CFA, -12)
          CFI (cfiCond606) R6 Frame(CFA, -8)
          CFI (cfiCond606) R14 Frame(CFA, -4)
          CFI (cfiCond606) CFA R13+40
          CFI Block cfiCond607 Using cfiCommon0
          CFI (cfiCond607) Function AppS2wCmd_ExtFlashRead
          CFI (cfiCond607) Conditional ??CrossCallReturnLabel_333
          CFI (cfiCond607) R4 Frame(CFA, -24)
          CFI (cfiCond607) R5 Frame(CFA, -20)
          CFI (cfiCond607) R6 Frame(CFA, -16)
          CFI (cfiCond607) R7 Frame(CFA, -12)
          CFI (cfiCond607) R8 Frame(CFA, -8)
          CFI (cfiCond607) R14 Frame(CFA, -4)
          CFI (cfiCond607) CFA R13+48
          CFI Block cfiPicker608 Using cfiCommon1
          CFI (cfiPicker608) NoFunction
          CFI (cfiPicker608) Picker
        THUMB
?Subroutine53:
        ADD      R1,SP,#+12
          CFI FunCall AppS2wCmd_HttpClientOpen AppS2wParse_Int
          CFI FunCall AppS2wCmd_SetSockOp AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_Int
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_Int
          CFI FunCall AppS2wCmd_Ping AppS2wParse_Int
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_Int
          CFI FunCall AppS2wCmd_ExtFlashRead AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond599
          CFI EndBlock cfiCond600
          CFI EndBlock cfiCond601
          CFI EndBlock cfiCond602
          CFI EndBlock cfiCond603
          CFI EndBlock cfiCond604
          CFI EndBlock cfiCond605
          CFI EndBlock cfiCond606
          CFI EndBlock cfiCond607
          CFI EndBlock cfiPicker608

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond609 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_262
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond610 Using cfiCommon0
          CFI (cfiCond610) Function AppS2wCmd_scanTimeSet
          CFI (cfiCond610) Conditional ??CrossCallReturnLabel_261
          CFI (cfiCond610) R4 Frame(CFA, -12)
          CFI (cfiCond610) R5 Frame(CFA, -8)
          CFI (cfiCond610) R14 Frame(CFA, -4)
          CFI (cfiCond610) CFA R13+32
          CFI Block cfiCond611 Using cfiCommon0
          CFI (cfiCond611) Function AppS2wCmd_Wmode
          CFI (cfiCond611) Conditional ??CrossCallReturnLabel_260
          CFI (cfiCond611) R4 Frame(CFA, -36)
          CFI (cfiCond611) R5 Frame(CFA, -32)
          CFI (cfiCond611) R6 Frame(CFA, -28)
          CFI (cfiCond611) R7 Frame(CFA, -24)
          CFI (cfiCond611) R8 Frame(CFA, -20)
          CFI (cfiCond611) R9 Frame(CFA, -16)
          CFI (cfiCond611) R10 Frame(CFA, -12)
          CFI (cfiCond611) R11 Frame(CFA, -8)
          CFI (cfiCond611) R14 Frame(CFA, -4)
          CFI (cfiCond611) CFA R13+72
          CFI Block cfiCond612 Using cfiCommon0
          CFI (cfiCond612) Function AppS2wCmd_DnsLookup
          CFI (cfiCond612) Conditional ??CrossCallReturnLabel_259
          CFI (cfiCond612) R4 Frame(CFA, -12)
          CFI (cfiCond612) R5 Frame(CFA, -8)
          CFI (cfiCond612) R14 Frame(CFA, -4)
          CFI (cfiCond612) CFA R13+40
          CFI Block cfiCond613 Using cfiCommon0
          CFI (cfiCond613) Function AppS2wCmd_Wwps
          CFI (cfiCond613) Conditional ??CrossCallReturnLabel_258
          CFI (cfiCond613) R4 Frame(CFA, -8)
          CFI (cfiCond613) R14 Frame(CFA, -4)
          CFI (cfiCond613) CFA R13+96
          CFI Block cfiCond614 Using cfiCommon0
          CFI (cfiCond614) Function AppS2wCmd_AdcRead
          CFI (cfiCond614) Conditional ??CrossCallReturnLabel_257
          CFI (cfiCond614) R4 Frame(CFA, -20)
          CFI (cfiCond614) R5 Frame(CFA, -16)
          CFI (cfiCond614) R6 Frame(CFA, -12)
          CFI (cfiCond614) R7 Frame(CFA, -8)
          CFI (cfiCond614) R14 Frame(CFA, -4)
          CFI (cfiCond614) CFA R13+40
          CFI Block cfiCond615 Using cfiCommon0
          CFI (cfiCond615) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond615) Conditional ??CrossCallReturnLabel_256
          CFI (cfiCond615) R4 Frame(CFA, -16)
          CFI (cfiCond615) R5 Frame(CFA, -12)
          CFI (cfiCond615) R6 Frame(CFA, -8)
          CFI (cfiCond615) R14 Frame(CFA, -4)
          CFI (cfiCond615) CFA R13+40
          CFI Block cfiPicker616 Using cfiCommon1
          CFI (cfiPicker616) NoFunction
          CFI (cfiPicker616) Picker
        THUMB
?Subroutine50:
        ADD      R1,SP,#+8
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_Int
          CFI FunCall AppS2wCmd_scanTimeSet AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wmode AppS2wParse_Int
          CFI FunCall AppS2wCmd_DnsLookup AppS2wParse_Int
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_Int
          CFI FunCall AppS2wCmd_AdcRead AppS2wParse_Int
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_Int
        B.W      AppS2wParse_Int
          CFI EndBlock cfiCond609
          CFI EndBlock cfiCond610
          CFI EndBlock cfiCond611
          CFI EndBlock cfiCond612
          CFI EndBlock cfiCond613
          CFI EndBlock cfiCond614
          CFI EndBlock cfiCond615
          CFI EndBlock cfiPicker616
// 9332 
// 9333 
// 9334 #ifdef S2W_IPv6_SUPPORT
// 9335 UINT8
// 9336 AppS2wCmd_DnsLookupv6(UINT8 *ptr)
// 9337 {
// 9338    UINT8 *p,status,*temp;
// 9339    //ULONG hostIpAddress;
// 9340    UINT32 retry,timeout,clearCache;
// 9341    GSN_NWIF_IP_CONFIG_T nwParams;
// 9342    NXD_ADDRESS     host_ipduo_address;
// 9343 
// 9344    
// 9345    
// 9346     if(!(S2W_DNS_CLIENT_FALGS & S2W_DNS_CLIENT_ENABLED))
// 9347     {
// 9348 
// 9349       S2W_DNS_CLIENT_FALGS |= S2W_DNS_CLIENT_ENABLED;
// 9350     }
// 9351     
// 9352     if(!(S2W_DNS_CLIENT_FALGS & S2W_DNSv6_SERVER_SET))
// 9353     {
// 9354       
// 9355       GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
// 9356 
// 9357        nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[0]);
// 9358        nxd_dns_server_remove(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,&DNSv6ServerAddr[1]);
// 9359 
// 9360             DNSv6ServerAddr[0].nxd_ip_version = 0x6;
// 9361             DNSv6ServerAddr[0].nxd_ip_address.v6[0] = nwParams.ipv6.primaryDnsSrvrAddr[0];
// 9362             DNSv6ServerAddr[0].nxd_ip_address.v6[1] = nwParams.ipv6.primaryDnsSrvrAddr[1];
// 9363             DNSv6ServerAddr[0].nxd_ip_address.v6[2] = nwParams.ipv6.primaryDnsSrvrAddr[2];
// 9364             DNSv6ServerAddr[0].nxd_ip_address.v6[3] = nwParams.ipv6.primaryDnsSrvrAddr[3];
// 9365             
// 9366             
// 9367             DNSv6ServerAddr[1].nxd_ip_version = 0x6;
// 9368             DNSv6ServerAddr[1].nxd_ip_address.v6[0] = nwParams.ipv6.secndryDnsSrvrAddr[0];
// 9369             DNSv6ServerAddr[1].nxd_ip_address.v6[1] = nwParams.ipv6.secndryDnsSrvrAddr[1];
// 9370             DNSv6ServerAddr[1].nxd_ip_address.v6[2] = nwParams.ipv6.secndryDnsSrvrAddr[2];
// 9371             DNSv6ServerAddr[1].nxd_ip_address.v6[3] = nwParams.ipv6.secndryDnsSrvrAddr[3];
// 9372 
// 9373             status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[0]);
// 9374             status = nxd_dns_server_add(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl, &DNSv6ServerAddr[1]);
// 9375 
// 9376         S2W_DNS_CLIENT_FALGS |= S2W_DNSv6_SERVER_SET;
// 9377     }
// 9378     
// 9379    
// 9380    temp = ptr;
// 9381    p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 9382   
// 9383   
// 9384     if(p == NULL)
// 9385       return S2W_FAILURE;
// 9386   
// 9387     if(!(S2W_DNS_CLIENT_FALGS & S2W_DNSv4_SERVER_SET))
// 9388      return S2W_FAILURE;
// 9389   
// 9390     
// 9391     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 9392     if(p != NULL)
// 9393     {
// 9394   
// 9395       /* Netx API doesnt support this. Use this when available. */
// 9396       status = AppS2wParse_Int(p, &retry);
// 9397       if (status != S2W_SUCCESS)
// 9398         return S2W_EINVAL;
// 9399     }
// 9400     
// 9401     timeout = S2W_DNS_REQ_DEF_TIME_OUT;
// 9402     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 9403     if(p != NULL)
// 9404     {  
// 9405       status = AppS2wParse_Int(p, &timeout);
// 9406       if (status != S2W_SUCCESS)
// 9407         return S2W_EINVAL;
// 9408     }
// 9409     
// 9410     p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
// 9411     if(p != NULL)
// 9412     {
// 9413       /* Netx Doesnt have any cache */
// 9414       status = AppS2wParse_Int(p, &clearCache);
// 9415       if (status != S2W_SUCCESS)
// 9416         return S2W_EINVAL;
// 9417     }
// 9418 
// 9419 
// 9420     status = nxd_dns_host_by_name_get(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,(UINT8*)temp, &host_ipduo_address, timeout*100, 0x6);
// 9421     if (status != S2W_SUCCESS)
// 9422     return S2W_FAILURE;
// 9423 
// 9424     S2w_Printf("\r\n%x:%x:%x:%x:%x:%x:%x:%x\r\n",*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+1),*((UINT16*)host_ipduo_address.nxd_ip_address.v6),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+3),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+2),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+5),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+4),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+7),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+6));    
// 9425     
// 9426     return S2W_SUCCESS;
// 9427 }
// 9428 
// 9429 #endif
// 9430 #endif //S2W_DNS_CLIENT
// 9431 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock617 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveStby
        THUMB
// 9432 UINT8
// 9433 AppS2wCmd_PowerSaveStby(UINT8 *ptr)
// 9434 {
AppS2wCmd_PowerSaveStby:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+16
          CFI CFA R13+24
// 9435     UINT8 status;
// 9436     UINT32 dtime=0;
        MOVS     R0,#+0
// 9437     ULONG64 time=0;
        MOVS     R1,#+0
        STRD     R0,R1,[SP, #+8]
        STR      R0,[SP, #+4]
// 9438     S2W_ALARM_INFO_T alarm;
// 9439     UINT8 *p;
// 9440     memset(&alarm,0,sizeof(S2W_ALARM_INFO_T));
        MOVS     R2,#+4
        ADD      R0,SP,#+0
          CFI FunCall memset
        BL       memset
// 9441     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine30
// 9442     if (!p)
??CrossCallReturnLabel_83:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_0
// 9443     {
// 9444         return S2W_EINVAL;
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_PowerSaveStby_1
// 9445     }
// 9446 
// 9447     status = AppS2wParse_64BitNumber(p, &time);
??AppS2wCmd_PowerSaveStby_0:
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_64BitNumber
        BL       AppS2wParse_64BitNumber
// 9448     if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_PowerSaveStby_1
// 9449     {
// 9450         return status;
// 9451     }
// 9452     memset(&alarm,0,sizeof(alarm));
        BL       ?Subroutine9
// 9453     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_13:
        BL       ?Subroutine30
// 9454     if (p)
??CrossCallReturnLabel_82:
        CBZ.N    R0,??AppS2wCmd_PowerSaveStby_2
// 9455     {
// 9456         if (*p != '\0')
        LDRB     R1,[R0, #+0]
        CBZ.N    R1,??AppS2wCmd_PowerSaveStby_3
// 9457         {
// 9458             status = AppS2wParse_Int(p, &dtime);
        BL       ?Subroutine52
// 9459             if (status != S2W_SUCCESS)
??CrossCallReturnLabel_320:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
// 9460             {
// 9461                 return status;
// 9462             }
// 9463         }
// 9464 
// 9465         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_PowerSaveStby_3:
        BL       ?Subroutine30
// 9466         if (p)
??CrossCallReturnLabel_81:
        CBZ.N    R0,??AppS2wCmd_PowerSaveStby_2
// 9467         {
// 9468             if (*p != '\0')
        LDRB     R1,[R0, #+0]
        CBZ.N    R1,??AppS2wCmd_PowerSaveStby_4
// 9469             {
// 9470                 status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
        BL       ?Subroutine59
// 9471                 if (status != S2W_SUCCESS)
??CrossCallReturnLabel_367:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
// 9472                 {
// 9473                     return status;
// 9474                 }
// 9475                 alarm.alarm1Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+0]
// 9476 
// 9477             }
// 9478             p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_PowerSaveStby_4:
        BL       ?Subroutine30
// 9479             if (p)
??CrossCallReturnLabel_80:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
// 9480             {
// 9481                 if (*p != '\0')
        BEQ.N    ??AppS2wCmd_PowerSaveStby_2
// 9482                 {
// 9483                     status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
        BL       ?Subroutine61
// 9484                     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_387:
        CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
// 9485                     {
// 9486                         return status;
// 9487                     }
// 9488                     alarm.alarm2Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+2]
// 9489                 }
// 9490             }
// 9491 
// 9492         }
// 9493 
// 9494     }
// 9495     status = AppS2wHal_PsStbyRequest(time, dtime, &alarm);
??AppS2wCmd_PowerSaveStby_2:
        LDRD     R0,R1,[SP, #+8]
        LDR      R2,[SP, #+4]
        ADD      R3,SP,#+0
          CFI FunCall AppS2wHal_PsStbyRequest
        BL       AppS2wHal_PsStbyRequest
// 9496     if(status == S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_PowerSaveStby_1
// 9497     {
// 9498         stbySuccess =1;
        LDR.W    R1,??DataTable473
        MOVS     R2,#+1
        STRB     R2,[R1, #+0]
// 9499     }
// 9500     return status;
??AppS2wCmd_PowerSaveStby_1:
        ADD      SP,SP,#+20
          CFI CFA R13+4
        POP      {PC}             ;; return
          CFI EndBlock cfiBlock617
// 9501 
// 9502 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond618 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_388
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond619 Using cfiCommon0
          CFI (cfiCond619) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond619) Conditional ??CrossCallReturnLabel_387
          CFI (cfiCond619) R14 Frame(CFA, -4)
          CFI (cfiCond619) CFA R13+24
          CFI Block cfiCond620 Using cfiCommon0
          CFI (cfiCond620) Function AppS2wCmd_Hibernate
          CFI (cfiCond620) Conditional ??CrossCallReturnLabel_386
          CFI (cfiCond620) R14 Frame(CFA, -4)
          CFI (cfiCond620) CFA R13+16
          CFI Block cfiPicker621 Using cfiCommon1
          CFI (cfiPicker621) NoFunction
          CFI (cfiPicker621) Picker
        THUMB
?Subroutine61:
        ADD      R1,SP,#+3
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Hibernate AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiCond618
          CFI EndBlock cfiCond619
          CFI EndBlock cfiCond620
          CFI EndBlock cfiPicker621

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond622 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_369
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond623 Using cfiCommon0
          CFI (cfiCond623) Function AppS2wCmd_DhcpSrvr
          CFI (cfiCond623) Conditional ??CrossCallReturnLabel_368
          CFI (cfiCond623) R4 Frame(CFA, -24)
          CFI (cfiCond623) R5 Frame(CFA, -20)
          CFI (cfiCond623) R6 Frame(CFA, -16)
          CFI (cfiCond623) R7 Frame(CFA, -12)
          CFI (cfiCond623) R8 Frame(CFA, -8)
          CFI (cfiCond623) R14 Frame(CFA, -4)
          CFI (cfiCond623) CFA R13+192
          CFI Block cfiCond624 Using cfiCommon0
          CFI (cfiCond624) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond624) Conditional ??CrossCallReturnLabel_367
          CFI (cfiCond624) R14 Frame(CFA, -4)
          CFI (cfiCond624) CFA R13+24
          CFI Block cfiCond625 Using cfiCommon0
          CFI (cfiCond625) Function AppS2wCmd_Hibernate
          CFI (cfiCond625) Conditional ??CrossCallReturnLabel_366
          CFI (cfiCond625) R14 Frame(CFA, -4)
          CFI (cfiCond625) CFA R13+16
          CFI Block cfiPicker626 Using cfiCommon1
          CFI (cfiPicker626) NoFunction
          CFI (cfiPicker626) Picker
        THUMB
?Subroutine59:
        ADD      R1,SP,#+1
          CFI FunCall AppS2wCmd_PowerSaveDpsleep AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_DhcpSrvr AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_PowerSaveStby AppS2wParse_Boolean
          CFI FunCall AppS2wCmd_Hibernate AppS2wParse_Boolean
        B.W      AppS2wParse_Boolean
          CFI EndBlock cfiCond622
          CFI EndBlock cfiCond623
          CFI EndBlock cfiCond624
          CFI EndBlock cfiCond625
          CFI EndBlock cfiPicker626

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond627 Using cfiCommon0
          CFI Function AppS2wCmd_PowerSaveDpsleep
          CFI Conditional ??CrossCallReturnLabel_14
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond628 Using cfiCommon0
          CFI (cfiCond628) Function AppS2wCmd_PowerSaveStby
          CFI (cfiCond628) Conditional ??CrossCallReturnLabel_13
          CFI (cfiCond628) R14 Frame(CFA, -4)
          CFI (cfiCond628) CFA R13+24
          CFI Block cfiCond629 Using cfiCommon0
          CFI (cfiCond629) Function AppS2wCmd_Hibernate
          CFI (cfiCond629) Conditional ??CrossCallReturnLabel_12
          CFI (cfiCond629) R14 Frame(CFA, -4)
          CFI (cfiCond629) CFA R13+16
          CFI Block cfiPicker630 Using cfiCommon1
          CFI (cfiPicker630) NoFunction
          CFI (cfiPicker630) Picker
        THUMB
?Subroutine9:
        MOVS     R2,#+4
        MOVS     R1,#+0
        ADD      R0,SP,#+0
          CFI FunCall AppS2wCmd_PowerSaveDpsleep memset
          CFI FunCall AppS2wCmd_PowerSaveStby memset
          CFI FunCall AppS2wCmd_Hibernate memset
        B.W      memset
          CFI EndBlock cfiCond627
          CFI EndBlock cfiCond628
          CFI EndBlock cfiCond629
          CFI EndBlock cfiPicker630
// 9503 
// 9504 
// 9505 
// 9506 /**
// 9507  ******************************************************************
// 9508  * @ingroup S2w-Application
// 9509  * @brief S2w nw context store function.
// 9510  *    This function sores the nw context to the flash Basically this
// 9511       function stores both L2 and L3 layer information..
// 9512  * @retval S2W_SUCCESS - operation successful.
// 9513  * @retval S2W_LINK_LOST_EVT - operation failure- not connected to wlan.
// 9514  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock631 Using cfiCommon0
          CFI Function AppS2wCmd_NwConnStore
        THUMB
// 9515 PUBLIC UINT8
// 9516 AppS2wCmd_NwConnStore(UINT8 *ptr)
// 9517 {
// 9518 	if (*ptr)
AppS2wCmd_NwConnStore:
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        IT       EQ 
          CFI FunCall AppS2wHal_NwContextStore
        BEQ.W    AppS2wHal_NwContextStore
// 9519 		 return S2W_EINVAL;
        MOVS     R0,#+2
        BX       LR
          CFI EndBlock cfiBlock631
// 9520 	else 
// 9521 		 return AppS2wHal_NwContextStore();
// 9522 
// 9523 }
// 9524 
// 9525 /**
// 9526  ******************************************************************
// 9527  * @ingroup S2w-Application
// 9528  * @brief S2w nw context restore function.
// 9529  *    This function restore the nw connection. This function initialize the
// 9530  *    L3 layer with the parameter stored in the flash by store function.
// 9531  *    This function is useful to connect to the wlan without association after
// 9532       the system comes out from standby.
// 9533  * @retval S2W_SUCCESS - operation successful.
// 9534  * @retval S2W_FAILURE - operation failure.
// 9535  ******************************************************************/
// 9536  

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock632 Using cfiCommon0
          CFI Function AppS2wCmd_NwConnRestore
        THUMB
// 9537 PUBLIC UINT8
// 9538 AppS2wCmd_NwConnRestore(UINT8 *ptr)
// 9539 {
// 9540 	if (*ptr)
AppS2wCmd_NwConnRestore:
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        IT       EQ 
          CFI FunCall AppS2wHal_NwContextRestore
        BEQ.W    AppS2wHal_NwContextRestore
// 9541 		 return S2W_EINVAL;
        MOVS     R0,#+2
        BX       LR
          CFI EndBlock cfiBlock632
// 9542 	 else
// 9543 		 return AppS2wHal_NwContextRestore();
// 9544 
// 9545         }
// 9546 
// 9547 
// 9548 
// 9549 #ifdef  S2W_NCM_SUPPORT_ENABLE

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 9550 UINT32 ncmautoconnectcount=0;
// 9551 BOOL ncmAutoMode=0;
ncmAutoMode:
        DS8 1
        DS8 3
ncmautoconnectcount:
        DS8 4

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock633 Using cfiCommon0
          CFI Function AppS2w_NcmL3ConnProcess
        THUMB
// 9552 VOID 
// 9553 AppS2w_NcmL3ConnProcess()
// 9554 	
// 9555 {
AppS2w_NcmL3ConnProcess:
        PUSH     {R4-R10,LR}
          CFI R14 Frame(CFA, -4)
          CFI R10 Frame(CFA, -8)
          CFI R9 Frame(CFA, -12)
          CFI R8 Frame(CFA, -16)
          CFI R7 Frame(CFA, -20)
          CFI R6 Frame(CFA, -24)
          CFI R5 Frame(CFA, -28)
          CFI R4 Frame(CFA, -32)
          CFI CFA R13+32
// 9556 	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
// 9557 	GSN_NWIF_IP_CONFIG_T nwParams;
// 9558 	UINT32 message;
// 9559 	GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
        LDR.N    R5,??DataTable464_1
        LDR      R0,[R5, #+0]
        SUB      SP,SP,#+152
          CFI CFA R13+184
        MOVW     R8,#+5200
        ADD      R1,SP,#+0
        ADD      R0,R8,R0
          CFI FunCall GsnNwIf_IpConfigGet
        BL       GsnNwIf_IpConfigGet
// 9560 	/* 
// 9561 	 	check the ip  is same as old one . And current ip address is not zero 
// 9562 	*/
// 9563 	if(((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
// 9564 		(s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
// 9565 		 &&((s2wappMainTaskCtxt->ipaddr != 0) && (s2wappMainTaskCtxt->subnetMask != 0))   
// 9566 	)
        LDR      R0,[R5, #+0]
        LDR      R3,[SP, #+12]
        LDR.W    R9,??DataTable470_1
        LDR.W    R7,??DataTable472
        MOVW     R1,#+29988
        ADDS     R6,R1,R0
        LDR      R2,[R1, R0]
        CMP      R2,R3
        ITTT     EQ 
        LDREQ    LR,[R6, #+4]
        LDREQ    R4,[SP, #+16]
        CMPEQ    LR,R4
        BEQ.N    ??AppS2w_NcmL3ConnProcess_0
        CMP      R2,#+0
        ITT      NE 
        LDRNE    R2,[R6, #+4]
        CMPNE    R2,#+0
        BEQ.N    ??AppS2w_NcmL3ConnProcess_0
// 9567 	{
// 9568 		// update the values first
// 9569 		s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
        STR      R3,[R1, R0]
// 9570 		s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
        LDR      R1,[SP, #+16]
        STR      R1,[R6, #+4]
// 9571 		if(s2wappMainTaskCtxt->dpSleep )
        MOVW     R1,#+27388
        LDR      R0,[R1, R0]
        CBZ.N    R0,??AppS2w_NcmL3ConnProcess_1
// 9572 		{
// 9573 			AppS2w_ExitDpSleep();
          CFI FunCall AppS2w_ExitDpSleep
        BL       AppS2w_ExitDpSleep
// 9574 		}
// 9575 		/*
// 9576 			if roaming cfg is to keep L4 connection , then invoke seperate status notify API
// 9577 		*/
// 9578 #ifdef S2W_NCM_ROAMING_SUPPORT 
// 9579 		if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
// 9580    	 		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	\ 
// 9581 			AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
// 9582 		else		
// 9583 #endif
// 9584 			AppS2wProcess_DhcpIpChangeNotify();
??AppS2w_NcmL3ConnProcess_1:
          CFI FunCall AppS2wProcess_DhcpIpChangeNotify
        BL       AppS2wProcess_DhcpIpChangeNotify
        B.N      ??AppS2w_NcmL3ConnProcess_2
// 9585 	 }
// 9586 	 else 
// 9587 	 {	
// 9588      	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
??AppS2w_NcmL3ConnProcess_0:
        LDR.W    R4,??DataTable472_1
        MOV      R1,#-1
        MOV      R0,R4
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 9589 		if(!s2wAutoConnState )
        LDR.W    R6,??DataTable473_1
        LDRB     R0,[R6, #+0]
        CBNZ.N   R0,??AppS2w_NcmL3ConnProcess_3
// 9590     	{
// 9591 			AppS2wHdrAndIpv4_Print();
          CFI FunCall AppS2wHdrAndIpv4_Print
        BL       AppS2wHdrAndIpv4_Print
// 9592     	}			
// 9593 		if(pAppRtcLtchInfo->arpCacheEn && pAppRtcLtchInfo->arpRecCount != 0 )
??AppS2w_NcmL3ConnProcess_3:
        LDR.W    R0,??DataTable473_2  ;; 0x41010194
        LDRB     R1,[R0, #+0]
        CMP      R1,#+0
        ITT      NE 
        LDRBNE   R2,[R0, #+2]
        CMPNE    R2,#+0
        BEQ.N    ??AppS2w_NcmL3ConnProcess_4
// 9594 			nx_arp_table_set(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl, &pAppRtcLtchInfo->arpTablebuf[0], 
// 9595 							pAppRtcLtchInfo->arpRecCount);
        LDR      R0,[R5, #+0]
        LDR.W    R1,??DataTable473_3  ;; 0x41010164
        ADD      R0,R0,#+5216
          CFI FunCall nx_arp_table_set
        BL       nx_arp_table_set
// 9596     	 nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
??AppS2w_NcmL3ConnProcess_4:
        BL       ?Subroutine130
// 9597 		 
// 9598    	 	if((!s2wAutoConnState ) &&( !profile_params.autoConnect))
??CrossCallReturnLabel_604:
        LDRB     R0,[R6, #+0]
        CMP      R0,#+0
        ITT      EQ 
        LDRBEQ   R0,[R7, #+4]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2w_NcmL3ConnProcess_5
// 9599     	{
// 9600    	 
// 9601 #ifdef S2W_ASYNC_MSG           
// 9602             if(s2wCurrent.asyncMsgFormat)
        LDRB     R0,[R9, #+472]
        CBZ.N    R0,??AppS2w_NcmL3ConnProcess_6
// 9603             {
// 9604                  S2w_Printf("\r\n");
        BL       ?Subroutine91
// 9605                  AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ASSO_SUCCESS_MSG, 0);
??CrossCallReturnLabel_489:
        MOVS     R1,#+0
        MOVS     R0,#+12
          CFI FunCall AppS2wProcess_AsyncStatusNotify
        BL       AppS2wProcess_AsyncStatusNotify
        B.N      ??AppS2w_NcmL3ConnProcess_5
// 9606             }
// 9607             else
// 9608 #endif
// 9609             {
// 9610                  AppS2wProcess_StatusNotify(S2W_ASSO_SUCCESS_MSG, 0);
??AppS2w_NcmL3ConnProcess_6:
        MOVS     R1,#+0
        MOVS     R0,#+18
          CFI FunCall AppS2wProcess_StatusNotify
        BL       AppS2wProcess_StatusNotify
// 9611         	}
// 9612 		}
// 9613 		GsnOsal_SemRelease(&s2wSyncSemID);
??AppS2w_NcmL3ConnProcess_5:
        MOV      R0,R4
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
// 9614 	}
// 9615             
// 9616     // before start the L4 connection for AP mode start the dhcp/dns server
// 9617     if(ncmAutoMode)// AP mode
??AppS2w_NcmL3ConnProcess_2:
        LDR.W    R4,??DataTable473_4
        LDRB     R0,[R4, #+0]
        CBZ.N    R0,??AppS2w_NcmL3ConnProcess_7
// 9618     {
// 9619          s2w_StartDhcpDnsServer();
          CFI FunCall s2w_StartDhcpDnsServer
        BL       s2w_StartDhcpDnsServer
// 9620 	}
// 9621 	if(s2wCurrent.ncmAutoLvl)
??AppS2w_NcmL3ConnProcess_7:
        LDRB     R0,[R9, #+811]
        LDR.W    R10,??DataTable474
        ADD      R6,R9,#+424
        CBZ.N    R0,??AppS2w_NcmL3ConnProcess_8
// 9622 	{
// 9623        message = APP_EVENT_NCM_L4CONNECT;
// 9624 	   /*
// 9625 	   		Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
// 9626 	   		Made auto connection l4 connection retey count to infinite  and never decremts the counter
// 9627 
// 9628 	   */
// 9629 	   if(1 == profile_params.autoConnect)
        LDRB     R0,[R7, #+4]
        CMP      R0,#+1
        ITE      EQ 
        MOVEQ    R0,#-1
        LDRHNE   R0,[R6, #+42]
// 9630 	   {
// 9631 		   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
// 9632 	   }
// 9633 	   else
// 9634 	   {
// 9635        ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
        STR      R0,[R4, #+4]
// 9636 	   }
// 9637        (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
        LDR      R1,[R5, #+0]
        LDR      R2,[R10, #+0]
        MOVS     R0,#+24
          CFI FunCall
        BLX      R2
// 9638 	}
// 9639 
// 9640 #ifdef S2W_NCM_ROAMING_SUPPORT 
// 9641 	if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable)
// 9642   	{	    
// 9643 		GsnNcm_RoamStart(&s2wappMainTaskCtxt->appNwConnMgrCtx,s2wCurrent.regDomain);
// 9644   	}
// 9645 #endif /* S2W_NCM_ROAMING_SUPPORT */
// 9646 	if(pAppRtcLtchInfo->grpProvVerify == 1)
??AppS2w_NcmL3ConnProcess_8:
        LDR.W    R0,??DataTable476  ;; 0x4101009c
        LDRB     R0,[R0, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2w_NcmL3ConnProcess_9
// 9647 	{
// 9648 		message = APP_EVENT_GRPPROV_VERIFICATION;
// 9649 		(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
        LDR      R1,[R5, #+0]
        LDR      R2,[R10, #+0]
        MOVS     R0,#+41
          CFI FunCall
        BLX      R2
// 9650 	}
// 9651 	/*Set dns server ip*/
// 9652 	if((0 == ncmAutoMode) && (1 == nwParams.ipv4.staticIp))
??AppS2w_NcmL3ConnProcess_9:
        LDRB     R0,[R4, #+0]
        CMP      R0,#+0
        ITT      EQ 
        LDREQ    R0,[SP, #+8]
        CMPEQ    R0,#+1
        BNE.N    ??AppS2w_NcmL3ConnProcess_10
// 9653 	{
// 9654 		UINT32 dnsSrvrAddr;
// 9655 
// 9656 		dnsSrvrAddr  = s2wCurrent.dns1[3] << 24 | s2wCurrent.dns1[2] << 16 |
// 9657 						s2wCurrent.dns1[1] << 8 | s2wCurrent.dns1[0];
// 9658 		
// 9659 		GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx, dnsSrvrAddr , 0);
        LDRB     R1,[R6, #+2]
        LDRB     R0,[R6, #+3]
        LSLS     R1,R1,#+16
        ORR      R0,R1,R0, LSL #+24
        LDRB     R1,[R6, #+1]
        ORR      R0,R0,R1, LSL #+8
        LDRB     R1,[R9, #+424]
        ORRS     R1,R1,R0
        LDR      R0,[R5, #+0]
        MOVS     R2,#+0
        ADD      R0,R8,R0
          CFI FunCall GsnNwif_DnsServerAdd
        BL       GsnNwif_DnsServerAdd
// 9660 
// 9661 		dnsSrvrAddr  = s2wCurrent.dns2[3] << 24 | s2wCurrent.dns2[2] << 16 |
// 9662 						s2wCurrent.dns2[1] << 8 | s2wCurrent.dns2[0];
// 9663 
// 9664 		GsnNwif_DnsServerAdd(&s2wappMainTaskCtxt->if0.nwifCtx, dnsSrvrAddr , 1);
        LDRB     R1,[R6, #+6]
        LDRB     R0,[R6, #+7]
        LSLS     R1,R1,#+16
        ORR      R0,R1,R0, LSL #+24
        LDRB     R1,[R6, #+5]
        ORR      R0,R0,R1, LSL #+8
        LDRB     R1,[R6, #+4]
        ORRS     R1,R1,R0
        LDR      R0,[R5, #+0]
        MOVS     R2,#+1
        ADD      R0,R8,R0
          CFI FunCall GsnNwif_DnsServerAdd
        BL       GsnNwif_DnsServerAdd
// 9665 	}
// 9666 }	
??AppS2w_NcmL3ConnProcess_10:
        ADD      SP,SP,#+152
          CFI CFA R13+32
        POP      {R4-R10,PC}      ;; return
          CFI EndBlock cfiBlock633

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond634 Using cfiCommon0
          CFI Function AppS2wCmd_Ndhcp
          CFI Conditional ??CrossCallReturnLabel_605
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond635 Using cfiCommon0
          CFI (cfiCond635) Function AppS2w_NcmL3ConnProcess
          CFI (cfiCond635) Conditional ??CrossCallReturnLabel_604
          CFI (cfiCond635) R4 Frame(CFA, -32)
          CFI (cfiCond635) R5 Frame(CFA, -28)
          CFI (cfiCond635) R6 Frame(CFA, -24)
          CFI (cfiCond635) R7 Frame(CFA, -20)
          CFI (cfiCond635) R8 Frame(CFA, -16)
          CFI (cfiCond635) R9 Frame(CFA, -12)
          CFI (cfiCond635) R10 Frame(CFA, -8)
          CFI (cfiCond635) R14 Frame(CFA, -4)
          CFI (cfiCond635) CFA R13+184
          CFI Block cfiPicker636 Using cfiCommon1
          CFI (cfiPicker636) NoFunction
          CFI (cfiPicker636) Picker
        THUMB
?Subroutine130:
        LDR      R0,[R5, #+0]
        LDR.W    R1,??DataTable476_1
        ADD      R0,R0,#+5216
          CFI FunCall AppS2wCmd_Ndhcp _nxe_arp_gratuitous_send
          CFI FunCall AppS2w_NcmL3ConnProcess _nxe_arp_gratuitous_send
        B.W      _nxe_arp_gratuitous_send
          CFI EndBlock cfiCond634
          CFI EndBlock cfiCond635
          CFI EndBlock cfiPicker636

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable462:
        DC8      0x25, 0x64, 0x00, 0x00
// 9667 

        SECTION `.text`:CODE:NOROOT(2)
          CFI Block cfiBlock637 Using cfiCommon0
          CFI Function AppS2wNetConnMgr_Cb
        THUMB
// 9668 VOID
// 9669 AppS2wNetConnMgr_Cb(VOID* ctext, VOID* pNcm, GSN_NCM_NOTIF_ID_T status)
// 9670 {
AppS2wNetConnMgr_Cb:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
// 9671 	//APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
// 9672     switch(status)
        LDR.N    R4,??DataTable464_1
        LDR.W    R1,??DataTable471_2
        LDR      R0,[R4, #+0]
        LDR.W    R9,??DataTable474
        LDR.W    R10,??DataTable473_4
        LDR.W    R11,??DataTable470_1
        LDR.W    R8,??DataTable476_2
        LDR.W    R5,??DataTable473_1
        SUB      SP,SP,#+156
          CFI CFA R13+192
        MOVW     R6,#+29988
        MOVW     R7,#+27388
        CMP      R2,#+8
        BHI.N    ??AppS2wNetConnMgr_Cb_1
        TBB      [PC, R2]
        DATA
??AppS2wNetConnMgr_Cb_0:
        DC8      0x5,0xA,0x34,0x37
        DC8      0x93,0x8E,0x93,0x43
        DC8      0x79,0x0
        THUMB
// 9673     {
// 9674         case GSN_NCM_NOTIF_ID_L2_CONNECTED:
// 9675         {
// 9676             s2wLinkState = S2W_LINK_STATE_CONNECTED;
??AppS2wNetConnMgr_Cb_2:
        MOVS     R2,#+1
        STRB     R2,[R1, #+0]
// 9677 #if 0
// 9678             if(ncmAutoMode == 0) // client case only
// 9679             {
// 9680                 if(appRtcMemData.KeepAliveIntrvl == 0)
// 9681                 {
// 9682                     appRtcMemData.KeepAliveIntrvl = S2W_DEFAULT_KEEP_ALIVE_INTRVL;
// 9683                 }
// 9684                 AppS2wHal_PsPollIntervelset(appRtcMemData.KeepAliveIntrvl);
// 9685             }
// 9686 #endif
// 9687 			UINT32 message = APP_EVENT_NCM_L2CONNECT;
// 9688 			(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
        MOV      R1,R0
        MOVS     R0,#+23
        B.N      ??AppS2wNetConnMgr_Cb_3
// 9689         }
// 9690         break;
// 9691         case GSN_NCM_NOTIF_ID_L2_CONNECT_FAIL:
// 9692         break;
// 9693         case GSN_NCM_NOTIF_ID_L2_DISCONNECTED:
// 9694 
// 9695         {
// 9696 			s2wLinkState = S2W_LINK_STATE_DISCONNECTED;
??AppS2wNetConnMgr_Cb_4:
        MOVS     R2,#+0
        STRB     R2,[R1, #+0]
// 9697            	if(s2wappMainTaskCtxt->dpSleep )
        LDR      R0,[R7, R0]
        CBZ.N    R0,??AppS2wNetConnMgr_Cb_5
// 9698            	{
// 9699            		AppS2w_ExitDpSleep();
          CFI FunCall AppS2w_ExitDpSleep
        BL       AppS2w_ExitDpSleep
// 9700            	}
// 9701            	if(s2wCurrent.ncmAutoLvl == 1)
??AppS2wNetConnMgr_Cb_5:
        LDRB     R0,[R11, #+811]
        CMP      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable476_3
          CFI FunCall AppS2wHal_TimerStop
        BLEQ     AppS2wHal_TimerStop
// 9702            		AppS2wHal_TimerStop(&acNcmTimer);
// 9703            // if auto connection is up then make the gpio 19 low
// 9704             if((s2wAutoConnState ) && (s2wIsAutoconnected))
        LDRB     R0,[R5, #+0]
        CMP      R0,#+0
        ITTTT    NE 
        LDRBNE   R0,[R8, #+0]
        CMPNE    R0,#+0
        MOVNE    R0,#+0
          CFI FunCall S2w_AsyncMsgGpioOp
        BLNE     S2w_AsyncMsgGpioOp
// 9705             {
// 9706                  S2w_AsyncMsgGpioOp(0);
// 9707 			}
// 9708 		   	/*
// 9709 		   		if roaming is enable and l4 maintain flag is set then donot close l4 connections,
// 9710 		   	*/
// 9711 #ifdef S2W_NCM_ROAMING_SUPPORT            
// 9712 		  	if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
// 9713 		   	  s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
// 9714 		  	{	
// 9715 				AppS2wRoam_SatusNotify(S2W_DISASSO_EVT,S2W_ASYNC_DISASSO_EVT);
// 9716 		 	}
// 9717 		  	else
// 9718 #endif                          
// 9719 			{
// 9720 	           AppS2wProcess_EventNotify(0);
        MOVS     R0,#+0
          CFI FunCall AppS2wProcess_EventNotify
        BL       AppS2wProcess_EventNotify
// 9721 			}	
// 9722 			s2wappMainTaskCtxt->ipaddr =0;
        LDR      R0,[R4, #+0]
        MOVS     R1,#+0
        STR      R1,[R6, R0]
// 9723 			s2wappMainTaskCtxt->subnetMask=0;
        ADDS     R0,R6,R0
        STR      R1,[R0, #+4]
// 9724 			/* in Limites Ap mode stop the dhcp/dns servers
// 9725 			 */
// 9726 			if(ncmAutoMode)// AP mode
        LDRB     R0,[R10, #+0]
        CMP      R0,#+0
        BEQ.N    ??AppS2wNetConnMgr_Cb_6
// 9727 			{
// 9728 #ifdef S2W_DHCP_SERVER_ENABLE
// 9729                 GsnDhcpSrvr_Stop(&dhcpSrvr);
        BL       ?Subroutine137
// 9730 #ifdef S2W_DNS_SERVER_ENABLE
// 9731                 GsnDnsSrvr_Stop(&dnsServer);
??CrossCallReturnLabel_625:
        ADDW     R0,R11,#+1060
          CFI FunCall GsnDnsSrvr_Stop
        BL       GsnDnsSrvr_Stop
??AppS2wNetConnMgr_Cb_1:
        B.N      ??AppS2wNetConnMgr_Cb_6
// 9732 #endif
// 9733 #endif
// 9734 	        }
// 9735         }
// 9736 
// 9737         break;
// 9738         
// 9739         case GSN_NCM_NOTIF_ID_DHCP_STOP:
// 9740           {
// 9741           
// 9742            //AppMainCtx_TaskNotify(APP_EVENT_DHCP_STOP_REQUEST);
// 9743           }          
// 9744           break;
// 9745         case GSN_NCM_NOTIF_ID_L3_CONNECTED:
// 9746 	        AppS2w_NcmL3ConnProcess();
??AppS2wNetConnMgr_Cb_7:
          CFI FunCall AppS2w_NcmL3ConnProcess
        BL       AppS2w_NcmL3ConnProcess
// 9747     	    break;
        B.N      ??AppS2wNetConnMgr_Cb_6
// 9748         case GSN_NCM_NOTIF_ID_L3_DISCONNECTED:
// 9749     	{
// 9750             if(s2wappMainTaskCtxt->dpSleep )
??AppS2wNetConnMgr_Cb_8:
        LDR      R0,[R7, R0]
        CBZ.N    R0,??AppS2wNetConnMgr_Cb_9
// 9751             {
// 9752             	AppS2w_ExitDpSleep();
          CFI FunCall AppS2w_ExitDpSleep
        BL       AppS2w_ExitDpSleep
// 9753             }
// 9754 #ifdef S2W_NCM_ROAMING_SUPPORT             
// 9755 			if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
// 9756 		   		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
// 9757 		  	{
// 9758 		  		AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
// 9759 		  	}
// 9760 		  	else	
// 9761 #endif                          
// 9762 			{
// 9763 	            AppS2wProcess_DhcpFailNotify();
??AppS2wNetConnMgr_Cb_9:
          CFI FunCall AppS2wProcess_DhcpFailNotify
        BL       AppS2wProcess_DhcpFailNotify
// 9764 				s2wappMainTaskCtxt->ipaddr=0;
        LDR      R0,[R4, #+0]
        MOVS     R1,#+0
        STR      R1,[R6, R0]
// 9765 				s2wappMainTaskCtxt->subnetMask=0;
        ADDS     R0,R6,R0
        STR      R1,[R0, #+4]
// 9766 			}
// 9767 		}
// 9768         break;
        B.N      ??AppS2wNetConnMgr_Cb_6
// 9769 		case GSN_NCM_NOTIF_ID_L3_RENEWSUCCESS :
// 9770         {
// 9771 			GSN_NWIF_IP_CONFIG_T nwParams;
// 9772 			GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
??AppS2wNetConnMgr_Cb_10:
        BL       ?Subroutine77
// 9773 			/* 
// 9774 			 	check the ip  is same as old one . And current ip address is not zero 
// 9775 			*/
// 9776 			if(s2wappMainTaskCtxt->dpSleep )
??CrossCallReturnLabel_446:
        LDR      R0,[R4, #+0]
        LDR      R0,[R7, R0]
        CBZ.N    R0,??AppS2wNetConnMgr_Cb_11
// 9777 			{
// 9778 				AppS2w_ExitDpSleep();
          CFI FunCall AppS2w_ExitDpSleep
        BL       AppS2w_ExitDpSleep
// 9779 			}
// 9780 		
// 9781 			if(((s2wappMainTaskCtxt->ipaddr!=nwParams.ipv4.ipAddr) ||
// 9782 				(s2wappMainTaskCtxt->subnetMask !=nwParams.ipv4.subnetMask))
// 9783 				 &&((s2wappMainTaskCtxt->ipaddr != 0) && (s2wappMainTaskCtxt->subnetMask != 0))   
// 9784 			)
??AppS2wNetConnMgr_Cb_11:
        LDR      R1,[R4, #+0]
        LDR      R2,[SP, #+12]
        LDR      R3,[R6, R1]
        LDR.W    R5,??DataTable472
        ADDS     R0,R6,R1
        MOV      R8,#-1
        CMP      R3,R2
        ITTT     EQ 
        LDREQ    R7,[R0, #+4]
        LDREQ    LR,[SP, #+16]
        CMPEQ    R7,LR
        BEQ.N    ??AppS2wNetConnMgr_Cb_12
        CBZ.N    R3,??AppS2wNetConnMgr_Cb_13
        LDR      R3,[R0, #+4]
        CMP      R3,#+0
        BEQ.N    ??AppS2wNetConnMgr_Cb_6
// 9785 			{
// 9786 				// update the values first
// 9787 				s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
        STR      R2,[R6, R1]
// 9788 				s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
        LDR      R1,[SP, #+16]
        STR      R1,[R0, #+4]
// 9789 				/*
// 9790 					if roaming cfg is to keep L4 connection , then invoke seperate status notify API
// 9791 				*/
// 9792 #ifdef S2W_NCM_ROAMING_SUPPORT 
// 9793 				if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
// 9794 		   	 		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	\ 
// 9795 					AppS2wRoam_SatusNotify(S2W_ENEWIP,S2W_ASYNC_DHCP_NEW_IP);
// 9796 				else		
// 9797 #endif
// 9798 					AppS2wProcess_DhcpIpChangeNotify();
          CFI FunCall AppS2wProcess_DhcpIpChangeNotify
        BL       AppS2wProcess_DhcpIpChangeNotify
// 9799 			 
// 9800 				 
// 9801 				if(s2wCurrent.ncmAutoLvl)
        B.N      ??AppS2wNetConnMgr_Cb_14
// 9802 				{
// 9803                    UINT32 message = APP_EVENT_NCM_L4CONNECT;
// 9804 					/*
// 9805 						 Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
// 9806 						 Made auto connection l4 connection retey count to infinite  and never decremts the counter
// 9807 					
// 9808 					*/
// 9809 				   	if(1 == profile_params.autoConnect)
// 9810 				   	{
// 9811 					   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
// 9812 				   	}
// 9813 				   	else
// 9814 				   	{
// 9815                    		ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
// 9816 				   	}
// 9817                     (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
// 9818 				}
// 9819 				break;
// 9820               }
// 9821 			  /*
// 9822 			  	incase of previous renew were failure , start the L4 connect process.
// 9823 			   */	
// 9824 			  else if((s2wappMainTaskCtxt->ipaddr == 0) && (s2wappMainTaskCtxt->subnetMask == 0))
??AppS2wNetConnMgr_Cb_12:
        CBNZ.N   R3,??AppS2wNetConnMgr_Cb_6
??AppS2wNetConnMgr_Cb_13:
        LDR      R3,[R0, #+4]
        CBNZ.N   R3,??AppS2wNetConnMgr_Cb_6
// 9825 			  {
// 9826 				  s2wappMainTaskCtxt->ipaddr = nwParams.ipv4.ipAddr;
        STR      R2,[R6, R1]
// 9827 				  s2wappMainTaskCtxt->subnetMask = nwParams.ipv4.subnetMask;
        LDR      R1,[SP, #+16]
        STR      R1,[R0, #+4]
// 9828 				  if(s2wCurrent.ncmAutoLvl)
??AppS2wNetConnMgr_Cb_14:
        LDRB     R0,[R11, #+811]
        CBZ.N    R0,??AppS2wNetConnMgr_Cb_6
// 9829 			  	  {
// 9830 				 	UINT32 message = APP_EVENT_NCM_L4CONNECT;
// 9831 						/*
// 9832 							 Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
// 9833 							 Made auto connection l4 connection retey count to infinite  and never decremts the counter
// 9834 						
// 9835 						*/
// 9836 						
// 9837 					   	if(1 == profile_params.autoConnect)
        LDRB     R0,[R5, #+4]
        CMP      R0,#+1
        IT       NE 
        LDRHNE   R8,[R11, #+466]
// 9838 					   	{
// 9839 						   ncmautoconnectcount = S2W_AUTO_CONCT_L4RETRY_INFINITE;
// 9840 					   	}
// 9841 					   	else
// 9842 				   		{
// 9843                    			ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
// 9844 				   		}
// 9845                     	(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
        LDR      R1,[R4, #+0]
        STR      R8,[R10, #+4]
        MOVS     R0,#+24
??AppS2wNetConnMgr_Cb_3:
        LDR      R2,[R9, #+0]
          CFI FunCall
        BLX      R2
        B.N      ??AppS2wNetConnMgr_Cb_6
// 9846 				  }
// 9847 			  }
// 9848 		}
// 9849         break;
// 9850 		case GSN_NCM_NOTIF_ID_L3_CONNECT_FAIL:
// 9851     	{
// 9852             if(s2wappMainTaskCtxt->dpSleep )
??AppS2wNetConnMgr_Cb_15:
        LDR      R0,[R7, R0]
        CBZ.N    R0,??AppS2wNetConnMgr_Cb_16
// 9853             {
// 9854             	AppS2w_ExitDpSleep();
          CFI FunCall AppS2w_ExitDpSleep
        BL       AppS2w_ExitDpSleep
// 9855             }
// 9856 		   	/*
// 9857 		   		if roaming is enable and l4 maintain flag is set then donot close l4 connections,
// 9858 		   	*/
// 9859 #ifdef S2W_NCM_ROAMING_SUPPORT             
// 9860 			if(s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.roamEnable == 1 &&
// 9861 		   		s2wappMainTaskCtxt->appNwConnMgrCtx.config.roamingCfgParams.maintainL4Con == 1)			   	
// 9862 		  	{
// 9863 				AppS2wRoam_SatusNotify(S2W_ENOIP,S2W_ASYNC_DHCP_FAIL_EVT);			
// 9864 		  	}
// 9865 		  	else	
// 9866 #endif                          
// 9867 			{
// 9868 				s2wappMainTaskCtxt->ipaddr=0;
??AppS2wNetConnMgr_Cb_16:
        LDR      R0,[R4, #+0]
        MOVS     R1,#+0
        STR      R1,[R6, R0]
// 9869 				s2wappMainTaskCtxt->subnetMask=0;
        ADDS     R0,R6,R0
        STR      R1,[R0, #+4]
// 9870 				// fix for issue no:5051, make the gpio 19 low for auto mode
// 9871 				if((s2wAutoConnState ) && (s2wIsAutoconnected))
        LDRB     R0,[R5, #+0]
        CMP      R0,#+0
        ITTTT    NE 
        LDRBNE   R0,[R8, #+0]
        CMPNE    R0,#+0
        MOVNE    R0,#+0
          CFI FunCall S2w_AsyncMsgGpioOp
        BLNE     S2w_AsyncMsgGpioOp
// 9872 			    {
// 9873 				    S2w_AsyncMsgGpioOp(0);
// 9874 			    }
// 9875 	            AppS2wProcess_DhcpFailNotify();
          CFI FunCall AppS2wProcess_DhcpFailNotify
        BL       AppS2wProcess_DhcpFailNotify
// 9876 			}
// 9877 		break;
        B.N      ??AppS2wNetConnMgr_Cb_6
// 9878 		}
// 9879 		case GSN_NCM_NOTIF_ID_STOP:
// 9880 			GsnOsal_SemRelease(&s2wappMainTaskCtxt->ncmOpsync);
??AppS2wNetConnMgr_Cb_17:
        ADD      R0,R0,#+29952
        ADDS     R0,R0,#+8
          CFI FunCall GsnOsal_SemRelease
        BL       GsnOsal_SemRelease
// 9881         break;
// 9882 #if 0
// 9883         case GSN_NCM_L3CONNECT_FAILURE:
// 9884         break;
// 9885         case GSN_NCM_L3RENEW_SUCCESS:
// 9886              GsnNwIf_GratArpSend(&s2wappMainTaskCtxt->nwIf);
// 9887         break;
// 9888         case GSN_NCM_CPU_WAIT_DELAY:
// 9889         break;
// 9890         case GSN_NCM_GO_PS_MODE:
// 9891         break;
// 9892         case GSN_NCM_PROVISIONING:
// 9893         break;
// 9894 #endif
// 9895     }
// 9896 }
??AppS2wNetConnMgr_Cb_6:
        ADD      SP,SP,#+156
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock637

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond638 Using cfiCommon0
          CFI Function AppS2wCmd_DnsServerSet
          CFI Conditional ??CrossCallReturnLabel_626
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond639 Using cfiCommon0
          CFI (cfiCond639) Function AppS2wNetConnMgr_Cb
          CFI (cfiCond639) Conditional ??CrossCallReturnLabel_625
          CFI (cfiCond639) R4 Frame(CFA, -36)
          CFI (cfiCond639) R5 Frame(CFA, -32)
          CFI (cfiCond639) R6 Frame(CFA, -28)
          CFI (cfiCond639) R7 Frame(CFA, -24)
          CFI (cfiCond639) R8 Frame(CFA, -20)
          CFI (cfiCond639) R9 Frame(CFA, -16)
          CFI (cfiCond639) R10 Frame(CFA, -12)
          CFI (cfiCond639) R11 Frame(CFA, -8)
          CFI (cfiCond639) R14 Frame(CFA, -4)
          CFI (cfiCond639) CFA R13+192
          CFI Block cfiCond640 Using cfiCommon0
          CFI (cfiCond640) Function AppS2wCmd_NcmAuto
          CFI (cfiCond640) Conditional ??CrossCallReturnLabel_624
          CFI (cfiCond640) R4 Frame(CFA, -36)
          CFI (cfiCond640) R5 Frame(CFA, -32)
          CFI (cfiCond640) R6 Frame(CFA, -28)
          CFI (cfiCond640) R7 Frame(CFA, -24)
          CFI (cfiCond640) R8 Frame(CFA, -20)
          CFI (cfiCond640) R9 Frame(CFA, -16)
          CFI (cfiCond640) R10 Frame(CFA, -12)
          CFI (cfiCond640) R11 Frame(CFA, -8)
          CFI (cfiCond640) R14 Frame(CFA, -4)
          CFI (cfiCond640) CFA R13+1344
          CFI Block cfiPicker641 Using cfiCommon1
          CFI (cfiPicker641) NoFunction
          CFI (cfiPicker641) Picker
        THUMB
?Subroutine137:
        LDR.W    R0,??DataTable477
          CFI FunCall AppS2wCmd_DnsServerSet GsnDhcpSrvr_Stop
          CFI FunCall AppS2wNetConnMgr_Cb GsnDhcpSrvr_Stop
          CFI FunCall AppS2wCmd_NcmAuto GsnDhcpSrvr_Stop
        B.W      GsnDhcpSrvr_Stop
          CFI EndBlock cfiCond638
          CFI EndBlock cfiCond639
          CFI EndBlock cfiCond640
          CFI EndBlock cfiPicker641

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable464:
        DC32     s2wWepKeyAscii

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable464_1:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable464_2:
        DC32     OtaFwupConfParam

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond642 Using cfiCommon0
          CFI Function DHCP_notify
          CFI Conditional ??CrossCallReturnLabel_447
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+176
          CFI Block cfiCond643 Using cfiCommon0
          CFI (cfiCond643) Function AppS2wNetConnMgr_Cb
          CFI (cfiCond643) Conditional ??CrossCallReturnLabel_446
          CFI (cfiCond643) R4 Frame(CFA, -36)
          CFI (cfiCond643) R5 Frame(CFA, -32)
          CFI (cfiCond643) R6 Frame(CFA, -28)
          CFI (cfiCond643) R7 Frame(CFA, -24)
          CFI (cfiCond643) R8 Frame(CFA, -20)
          CFI (cfiCond643) R9 Frame(CFA, -16)
          CFI (cfiCond643) R10 Frame(CFA, -12)
          CFI (cfiCond643) R11 Frame(CFA, -8)
          CFI (cfiCond643) R14 Frame(CFA, -4)
          CFI (cfiCond643) CFA R13+192
          CFI Block cfiPicker644 Using cfiCommon1
          CFI (cfiPicker644) NoFunction
          CFI (cfiPicker644) Picker
        THUMB
?Subroutine77:
        ADD      R0,R0,#+5120
        ADD      R1,SP,#+0
        ADDS     R0,R0,#+80
          CFI FunCall DHCP_notify GsnNwIf_IpConfigGet
          CFI FunCall AppS2wNetConnMgr_Cb GsnNwIf_IpConfigGet
        B.W      GsnNwIf_IpConfigGet
          CFI EndBlock cfiCond642
          CFI EndBlock cfiCond643
          CFI EndBlock cfiPicker644

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock645 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAuto
        THUMB
// 9897 UINT8
// 9898 AppS2wCmd_NcmAuto(UINT8* ptr)
// 9899 {
AppS2wCmd_NcmAuto:
        PUSH     {R0,R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+40
        SUB      SP,SP,#+1304
          CFI CFA R13+1344
// 9900     UINT8 status;
// 9901     UINT8 *p,macStr[GSN_NWIF_HOST_NAME_MAX_LEN + 1];;
// 9902     BOOL  enable=0,value =0;
        MOVS     R0,#+0
        STRH     R0,[SP, #+8]
// 9903     GSN_NCM_CONFIG_T gNwConnConfig;
// 9904     UINT8 mac[6],macAddr[6];
// 9905 	INT32 index;
// 9906 	GSN_STATUS retVal; 
// 9907 	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();	
// 9908 	//APP_RTC_SECNDRY_MEM_INFO_T *pAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
// 9909 
// 9910     // to get the current status
// 9911     if (ptr[0] == '?' && ptr[1] == '\0')
        MOVW     R10,#+27984
        LDR      R0,[SP, #+1304]
        LDR.W    R8,??DataTable470_1
        LDRB     R0,[R0, #+0]
        CMP      R0,#+63
        BNE.N    ??AppS2wCmd_NcmAuto_0
        LDR      R0,[SP, #+1304]
        LDRB     R0,[R0, #+1]
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_1
        BL       ?Subroutine80
??CrossCallReturnLabel_454:
        LDRB     R1,[R10, R0]
        CMP      R1,#+1
        BEQ.N    ??AppS2wCmd_NcmAuto_2
// 9912     {
// 9913          if(s2wappMainTaskCtxt->appNwConnMgrCtx.state != GSN_NCM_STATE_INITIALISED)// ncm started
// 9914          {
// 9915              S2w_Printf("\r\nNCM STARTED:%d\r\n",s2wappMainTaskCtxt->appNwConnMgrCtx.state);
        ADR.W    R0,`?<Constant "\\r\\nNCM STARTED:%d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
        B.N      ??AppS2wCmd_NcmAuto_3
// 9916          }
// 9917          else
// 9918          {
// 9919              S2w_Printf("\r\nNCM NOT STARTED\r\n");
??AppS2wCmd_NcmAuto_2:
        ADR.W    R0,`?<Constant "\\r\\nNCM NOT STARTED\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 9920          }
// 9921          return S2W_SUCCESS;
        B.N      ??AppS2wCmd_NcmAuto_3
// 9922     }
??AppS2wCmd_NcmAuto_1:
        CMP      R0,#+63
        ITTT     EQ 
        LDREQ    R0,[SP, #+1304]
        LDRBEQ   R0,[R0, #+2]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_NcmAuto_0
// 9923     else if(ptr[0] == '?' &&( ptr[1] == '?') && ptr[2] == '\0')
// 9924     {
// 9925 		AppS2wNcmProfile_Display( &s2wCurrent);
        MOV      R0,R8
          CFI FunCall AppS2wNcmProfile_Display
        BL       AppS2wNcmProfile_Display
// 9926 		return S2W_SUCCESS;
??AppS2wCmd_NcmAuto_3:
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_NcmAuto_4
// 9927 	}
// 9928 
// 9929     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_NcmAuto_0:
        BL       ?Subroutine44
// 9930     if (!p)
??CrossCallReturnLabel_241:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_NcmAuto_5
        LDR.W    R1,??DataTable473_4
// 9931     {
// 9932         return S2W_EINVAL;
// 9933     }
// 9934     status = AppS2wParse_Boolean(p, &ncmAutoMode);
// 9935     if (status != S2W_SUCCESS)
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_NcmAuto_6
// 9936     {
// 9937         return S2W_EINVAL;
// 9938     }
// 9939     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine44
// 9940     if (!p)
??CrossCallReturnLabel_240:
        CMP      R0,#+0
??AppS2wCmd_NcmAuto_5:
        BEQ.W    ??AppS2wCmd_NcmAuto_7
// 9941     {
// 9942         return S2W_EINVAL;
// 9943     }
// 9944     status = AppS2wParse_Boolean(p, &enable);
        ADD      R1,SP,#+9
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R11,R0
// 9945     if (status != S2W_SUCCESS)
??AppS2wCmd_NcmAuto_6:
        BNE.W    ??AppS2wCmd_NcmAuto_7
// 9946     {
// 9947         return S2W_EINVAL;
// 9948     }
// 9949     s2wCurrent.ncmAutoMgr = enable;
        LDRB     R0,[SP, #+9]
        STRB     R0,[R8, #+810]
// 9950 	
// 9951     if(enable == 0)//disable the connection mgr and disconnect if it connected
        ADDW     R5,R8,#+810
        LDRB     R0,[SP, #+9]
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_NcmAuto_8
// 9952     {
// 9953 		s2wappMainTaskCtxt->ipaddr =0;
        BL       ?Subroutine80
??CrossCallReturnLabel_455:
        MOVW     R1,#+29988
        MOVS     R2,#+0
        STR      R2,[R1, R0]
// 9954 		s2wappMainTaskCtxt->subnetMask=0;
        ADDS     R1,R1,R0
// 9955         s2wCurrent.ncmAutoMgr = 0;
// 9956         s2wCurrent.ncmAutoLvl = 0;
// 9957         s2wAutoConnState = 0;
// 9958         retVal = GsnNcm_Stop(&s2wappMainTaskCtxt->appNwConnMgrCtx,NULL);
// 9959 		if (GSN_OPERATION_IN_PROGRESS == retVal)
        ADD      R0,R10,R0
        STR      R2,[R1, #+4]
        STRB     R2,[R8, #+810]
        STRB     R2,[R5, #+1]
        LDR.W    R1,??DataTable473_1
        STRB     R2,[R1, #+0]
        MOVS     R1,#+0
          CFI FunCall GsnNcm_Stop
        BL       GsnNcm_Stop
        LDR.W    R1,??DataTable478  ;; 0x80000001
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_NcmAuto_9
// 9960 		{
// 9961 			GsnOsal_SemAcquire(&s2wappMainTaskCtxt->ncmOpsync,GSN_OSAL_WAIT_FOREVER);
        BL       ?Subroutine80
// 9962 		}
??CrossCallReturnLabel_456:
        ADD      R0,R0,#+29952
        MOV      R1,#-1
        ADDS     R0,R0,#+8
          CFI FunCall GsnOsal_SemAcquire
        BL       GsnOsal_SemAcquire
// 9963         // stop the s2w ncm timer
// 9964         AppS2wHal_TimerStop(&acNcmTimer);
??AppS2wCmd_NcmAuto_9:
        LDR.W    R0,??DataTable476_3
          CFI FunCall AppS2wHal_TimerStop
        BL       AppS2wHal_TimerStop
// 9965         //AppS2wHal_Register(s2wappMainTaskCtxt->taskNotifier, s2wappMainTaskCtxt);
// 9966         // register the normal CB for disso-event and syncloss
// 9967         GsnWdd_DisassocIndCbReg(&s2wappMainTaskCtxt->if0.wddCtx, s2wDisassocCb, s2wappMainTaskCtxt);
        LDR.W    R0,??DataTable470_2
        LDR.W    R2,??DataTable479
        LDR      R1,[R0, #+0]
        ADDW     R0,R1,#+3808
        STR      R2,[R0, #+52]
        STR      R1,[R0, #+56]
// 9968         GsnWdd_BeaconMissCbReg(&s2wappMainTaskCtxt->if0.wddCtx, s2wDisassocSyncLossCb, s2wappMainTaskCtxt);
        LDR.W    R2,??DataTable479_1
        STR      R2,[R0, #+60]
        STR      R1,[R0, #+64]
// 9969         GsnWdd_BeaconMissThresholdSet(&s2wappMainTaskCtxt->if0.wddCtx,0,S2W_DEFAULT_SYNCLOSS_INTERVAL);
        MOVS     R2,#+100
        MOVS     R1,#+0
          CFI FunCall GsnWdd_BeaconMissThresholdSet
        BL       GsnWdd_BeaconMissThresholdSet
// 9970         AppS2w_HangUp();
          CFI FunCall AppS2w_HangUp
        BL       AppS2w_HangUp
// 9971         S2w_AsyncMsgGpioOp(0);
        MOVS     R0,#+0
          CFI FunCall S2w_AsyncMsgGpioOp
        BL       S2w_AsyncMsgGpioOp
// 9972         if(ncmAutoMode)// ap mode stop the dhcp srvr
        LDR.W    R0,??DataTable473_4
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_NcmAuto_10
// 9973         {
// 9974 #ifdef S2W_DHCP_SERVER_ENABLE
// 9975             GsnDhcpSrvr_Stop(&dhcpSrvr);
        BL       ?Subroutine137
// 9976 #ifdef S2W_DNS_SERVER_ENABLE
// 9977             GsnDnsSrvr_Stop(&dnsServer);
??CrossCallReturnLabel_624:
        ADDW     R0,R8,#+1060
          CFI FunCall GsnDnsSrvr_Stop
        BL       GsnDnsSrvr_Stop
??AppS2wCmd_NcmAuto_10:
        B.N      ??AppS2wCmd_NcmAuto_11
// 9978 #endif
// 9979 #endif
// 9980         }
// 9981         return status;
// 9982     }
// 9983     memset(&gNwConnConfig,0, sizeof(gNwConnConfig));
??AppS2wCmd_NcmAuto_8:
        MOV      R2,#+1256
        MOVS     R1,#+0
        ADD      R0,SP,#+48
          CFI FunCall memset
        BL       memset
// 9984 
// 9985     if(ncmAutoMode) // start the AP with the nvds info..
        ADDW     R0,R8,#+525
        STR      R0,[SP, #+12]
        ADD      R7,R8,#+812
        LDR.W    R0,??DataTable473_4
        LDRB     R0,[R0, #+0]
        CMP      R0,#+0
        ADD      R4,SP,#+400
        ADD      R6,SP,#+87
        ADD      R9,SP,#+106
        ADD      R0,SP,#+1304
        BEQ.W    ??AppS2wCmd_NcmAuto_12
// 9986     {
// 9987 		/* next param(level) is an optional for AP mode
// 9988 		 */
// 9989         p = AppS2wParse_NextParamGet(&ptr);
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 9990 	    if ((p) && (*p != '\0'))
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_NcmAuto_13
// 9991 	    {
// 9992 	        status = AppS2wParse_Boolean(p, &value);
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R11,R0
// 9993 	        if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_NcmAuto_10
// 9994 	        {
// 9995 	            return status;
// 9996 	        }
// 9997             s2wCurrent.ncmAutoLvl = value;
        LDRB     R0,[SP, #+8]
        STRB     R0,[R5, #+1]
// 9998 		}
// 9999         // for grp provisioning the following code get executed
// 10000         if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
??AppS2wCmd_NcmAuto_13:
        MOVW     R5,#+5200
        LDRB     R0,[R8, #+4]
        CMP      R0,#+6
        BNE.N    ??AppS2wCmd_NcmAuto_14
// 10001         {
// 10002              gNwConnConfig.wlanCfg.apSpecificCfg.beaconInterval = S2W_DEFAULT_GRP_PROV_BEACON_INTERVAL;
        MOVS     R0,#+100
        STRH     R0,[SP, #+106]
// 10003              gNwConnConfig.wlanCfg.ssid.length = sizeof(S2W_DEFAULT_GRP_PROV_SSID) - 1;;
// 10004              memcpy(gNwConnConfig.wlanCfg.ssid.array, S2W_DEFAULT_GRP_PROV_SSID,
// 10005                      gNwConnConfig.wlanCfg.ssid.length);
        MOVS     R2,#+8
        MOVS     R0,#+8
        STRB     R0,[SP, #+48]
        ADD      R0,SP,#+49
        ADR.W    R1,`?<Constant "GS_PROV_">`
          CFI FunCall memcpy
        BL       memcpy
// 10006 
// 10007              sprintf((char*)gNwConnConfig.wlanCfg.ssid.array+gNwConnConfig.wlanCfg.ssid.length, "_%02x%02x%02x",
// 10008             		s2wCurrent.lmtdApConf.macAddr.array[3],
// 10009             		s2wCurrent.lmtdApConf.macAddr.array[4],
// 10010             		s2wCurrent.lmtdApConf.macAddr.array[5]);
        LDRB     R2,[R8, #+528]
        ADD      R0,R8,#+528
        LDRB     R1,[R0, #+2]
        LDRB     R3,[R0, #+1]
        LDRB     R0,[SP, #+48]
        STR      R1,[SP, #+0]
        ADD      R7,SP,#+48
        ADDS     R0,R0,R7
        ADR.W    R1,`?<Constant "_%02x%02x%02x">`
        ADDS     R0,R0,#+1
          CFI FunCall sprintf
        BL       sprintf
// 10011 
// 10012              gNwConnConfig.wlanCfg.ssid.length += 7;
        LDRB     R0,[SP, #+48]
        ADDS     R0,R0,#+7
        STRB     R0,[SP, #+48]
// 10013 
// 10014              gNwConnConfig.wlanCfg.channel[0] = S2W_DEFAULT_GRP_PROV_CHANNEL;
        MOVS     R0,#+6
        STRB     R0,[SP, #+87]
// 10015              gNwConnConfig.wlanCfg.channel[1] = 0;
        MOVS     R0,#+0
        STRB     R0,[R6, #+1]
// 10016              S2w_getApSecurityConfig(&gNwConnConfig.wlanCfg,S2W_DEFAULT_GRP_PROV_SECURITY);
        MOV      R1,R0
        ADD      R0,SP,#+48
          CFI FunCall S2w_getApSecurityConfig
        BL       S2w_getApSecurityConfig
// 10017 
// 10018              gNwConnConfig.ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
        MOVS     R0,#+1
        STRB     R0,[SP, #+400]
// 10019              gNwConnConfig.ipConfig.ipv4.staticIp = 1;//nwMib.staticIp;
        STR      R0,[R4, #+8]
// 10020              gNwConnConfig.ipConfig.ipv4.ipAddr = S2W_DEFAULT_GRP_PROV_IP_ADDRESS;
// 10021              gNwConnConfig.ipConfig.ipv4.subnetMask = S2W_DEFAULT_GRP_PROV_SUBNET_ADDRESS;
        MVN      R1,#+255
        LDR.W    R0,??DataTable481  ;; 0xc0a8f001
        STR      R0,[R4, #+12]
        STR      R1,[R4, #+16]
// 10022              gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = S2W_DEFAULT_GRP_PROV_GATE_ADDRESS;
        STR      R0,[R4, #+20]
// 10023              memcpy(gNwConnConfig.wlanCfg.bssid.array, s2wCurrent.lmtdApConf.macAddr.array,6);
        B.N      ??AppS2wCmd_NcmAuto_15
// 10024              GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
// 10025         }
// 10026         else
// 10027         {
// 10028 			gNwConnConfig.wlanCfg.apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
??AppS2wCmd_NcmAuto_14:
        LDRH     R0,[R8, #+650]
        STRH     R0,[SP, #+106]
// 10029 				gNwConnConfig.wlanCfg.apSpecificCfg.hiddenSsid = s2wCurrent.ncmAutoConf[S2W_NCM_HIDDENSSID_VALUE];
        LDR      R0,[R7, #+48]
        STRB     R0,[R6, #+17]
// 10030 			
// 10031 			if(s2wCurrent.ncmAutoConf[S2W_NCM_DTIMPERIOD_VALUE])
        LDR      R0,[R7, #+52]
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_16
// 10032 			{
// 10033 				gNwConnConfig.wlanCfg.apSpecificCfg.dtimPeriod= s2wCurrent.ncmAutoConf[S2W_NCM_DTIMPERIOD_VALUE];
// 10034 			}
// 10035 			else
// 10036 			{
// 10037 				gNwConnConfig.wlanCfg.apSpecificCfg.dtimPeriod= S2W_NCM_DFLT_DTIMPERIOD_VALUE;
        MOVS     R0,#+3
??AppS2wCmd_NcmAuto_16:
        STRB     R0,[R9, #+2]
// 10038 			}
// 10039 			
// 10040 			if(s2wCurrent.ncmAutoConf[S2W_NCM_INACTIVITY_TMEOUT_VALUE])
        LDR      R0,[R7, #+56]
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_17
// 10041 			{
// 10042 				gNwConnConfig.inactivityTimeoutInSec= s2wCurrent.ncmAutoConf[S2W_NCM_INACTIVITY_TMEOUT_VALUE];
// 10043 			}
// 10044 			else
// 10045 			{
// 10046 				gNwConnConfig.inactivityTimeoutInSec= S2W_NCM_DFLT_INACTIVITY_TMEOUT_VALUE;
        MOV      R0,#+360
??AppS2wCmd_NcmAuto_17:
        STRH     R0,[SP, #+1294]
// 10047 			}			
// 10048 			if(s2wCurrent.ncmAutoConf[S2W_NCM_GRP_KEY_UPDATE_INTERVAL])
        LDR      R0,[R7, #+60]
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_18
// 10049 			{
// 10050 				gNwConnConfig.groupKeyUpdateTime= s2wCurrent.ncmAutoConf[S2W_NCM_GRP_KEY_UPDATE_INTERVAL];
// 10051 			}
// 10052 			else
// 10053 			{
// 10054 				gNwConnConfig.groupKeyUpdateTime = S2W_NCM_DFLT_GRP_KEY_UPDATE_INTERVAL;
        MOV      R0,#+3600
// 10055 			}
// 10056 			gNwConnConfig.wlanCfg.ssid.length = s2wCurrent.lmtdApConf.ssid.length;
// 10057 			memcpy(gNwConnConfig.wlanCfg.ssid.array, s2wCurrent.lmtdApConf.ssid.array,
// 10058 			  s2wCurrent.lmtdApConf.ssid.length);
??AppS2wCmd_NcmAuto_18:
        LDRB     R2,[R8, #+492]
        STR      R0,[SP, #+1296]
        ADDW     R1,R8,#+493
        LDRB     R0,[R8, #+492]
        BL       ?Subroutine113
// 10059 			gNwConnConfig.wlanCfg.channel[0] = s2wCurrent.lmtdApConf.channel;
??CrossCallReturnLabel_552:
        LDRB     R0,[R8, #+646]
// 10060 			S2w_getApSecurityConfig(&gNwConnConfig.wlanCfg,s2wCurrent.lmtdApConf.securityType);
        LDRB     R1,[R8, #+596]
        STRB     R0,[SP, #+87]
        ADD      R0,SP,#+48
          CFI FunCall S2w_getApSecurityConfig
        BL       S2w_getApSecurityConfig
// 10061 
// 10062 			gNwConnConfig.ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
        MOVS     R0,#+1
        STRB     R0,[SP, #+400]
// 10063 			gNwConnConfig.ipConfig.ipv4.staticIp = 1;//nwMib.staticIp;
        STR      R0,[R4, #+8]
// 10064 			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.ipAddr,&s2wCurrent.lmtdApConf.ipAddress,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+652
        ADD      R0,SP,#+412
          CFI FunCall memcpy
        BL       memcpy
// 10065 			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.subnetMask,&s2wCurrent.lmtdApConf.subnetmask,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+656
        ADD      R0,SP,#+416
          CFI FunCall memcpy
        BL       memcpy
// 10066 			memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.gatewayIpAddr,&s2wCurrent.lmtdApConf.gateway,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+660
        ADD      R0,SP,#+420
          CFI FunCall memcpy
        BL       memcpy
// 10067 			memcpy(gNwConnConfig.wlanCfg.bssid.array, s2wCurrent.lmtdApConf.macAddr.array,6);
??AppS2wCmd_NcmAuto_15:
        LDR      R1,[SP, #+12]
        MOVS     R2,#+6
        BL       ?Subroutine115
// 10068 			GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
??CrossCallReturnLabel_557:
        BL       ?Subroutine80
// 10069     	}
// 10070     }
??CrossCallReturnLabel_457:
        ADDS     R0,R5,R0
          CFI FunCall GsnNwIf_Close
        BL       GsnNwIf_Close
        B.N      ??AppS2wCmd_NcmAuto_19
// 10071     else
// 10072     {
// 10073     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_NcmAuto_12:
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
// 10074     if (!p)
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_20
// 10075     {
// 10076         return S2W_EINVAL;
??AppS2wCmd_NcmAuto_7:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_NcmAuto_4
// 10077     }
// 10078     status = AppS2wParse_Boolean(p, &value);
??AppS2wCmd_NcmAuto_20:
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R11,R0
// 10079     if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_NcmAuto_11
// 10080     {
// 10081         return status;
// 10082     }
// 10083     s2wCurrent.ncmAutoLvl = value;
        LDRB     R0,[SP, #+8]
        STRB     R0,[R5, #+1]
// 10084 		// new optional parameter to save the ncm to profile or not..default is yes but by setting this to 1 user can disable it
// 10085    		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine44
// 10086     	if ((p) && (*p != '\0'))
??CrossCallReturnLabel_239:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_NcmAuto_21
// 10087     	{
// 10088         	status = AppS2wParse_Boolean(p, &s2wappMainTaskCtxt->ncmAutoConStoreProfile);
        BL       ?Subroutine128
??CrossCallReturnLabel_601:
        ADD      R1,R1,#+29952
        ADDS     R1,R1,#+4
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R11,R0
// 10089         	if (status != S2W_SUCCESS)
        BEQ.N    ??AppS2wCmd_NcmAuto_21
// 10090         	{
// 10091            		return status;
??AppS2wCmd_NcmAuto_11:
        MOV      R0,R11
        B.N      ??AppS2wCmd_NcmAuto_4
// 10092         	}
// 10093 		}
// 10094     gNwConnConfig.wlanCfg.ssid.length = s2wCurrent.autoWlandata.ssidLen;
??AppS2wCmd_NcmAuto_21:
        ADD      R11,R8,#+4
// 10095     memcpy(gNwConnConfig.wlanCfg.ssid.array,s2wCurrent.autoWlandata.ssid,s2wCurrent.autoWlandata.ssidLen);
        ADD      R1,R8,#+22
        LDRB     R0,[R11, #+10]
        LDRB     R2,[R11, #+10]
        BL       ?Subroutine113
// 10096     gNwConnConfig.regDomain =  s2wCurrent.regDomain; 
??CrossCallReturnLabel_551:
        ADD      R5,SP,#+716
        LDRB     R0,[R8, #+917]
        STRB     R0,[R5, #+17]
// 10097 	if(s2wCurrent.autoWlandata.validBssid)
        LDRB     R0,[R11, #+11]
        CBZ.N    R0,??CrossCallReturnLabel_556
// 10098 	{
// 10099 			memcpy((INT8 *)gNwConnConfig.wlanCfg.bssid.array,s2wCurrent.autoWlandata.bssid,S2W_MAC_ADDR_SIZE);
        MOVS     R2,#+6
        ADD      R1,R8,#+16
        BL       ?Subroutine115
// 10100 					
// 10101 	}
// 10102 		
// 10103     if(s2wCurrent.autoWlandata.channel)
??CrossCallReturnLabel_556:
        LDRB     R0,[R11, #+9]
        CBZ.N    R0,??AppS2wCmd_NcmAuto_22
// 10104       gNwConnConfig.wlanCfg.channel[0] = s2wCurrent.autoWlandata.channel;
        STRB     R0,[SP, #+87]
        B.N      ??AppS2wCmd_NcmAuto_23
// 10105     else
// 10106       {
// 10107             gNwConnConfig.wlanCfg.channel[0] = 1;
??AppS2wCmd_NcmAuto_22:
        MOVS     R0,#+1
        STRB     R0,[SP, #+87]
// 10108             gNwConnConfig.wlanCfg.channel[1] = 2;
        MOVS     R0,#+2
        STRB     R0,[R6, #+1]
// 10109             gNwConnConfig.wlanCfg.channel[2] = 3;
        MOVS     R0,#+3
        STRB     R0,[R6, #+2]
// 10110             gNwConnConfig.wlanCfg.channel[3] = 4;
        MOVS     R0,#+4
        STRB     R0,[R6, #+3]
// 10111             gNwConnConfig.wlanCfg.channel[4] = 5;
        MOVS     R0,#+5
        STRB     R0,[R6, #+4]
// 10112             gNwConnConfig.wlanCfg.channel[5] = 6;
        MOVS     R0,#+6
        STRB     R0,[R6, #+5]
// 10113             gNwConnConfig.wlanCfg.channel[6] = 7;
        MOVS     R0,#+7
        STRB     R0,[R6, #+6]
// 10114             gNwConnConfig.wlanCfg.channel[7] = 8;
        MOVS     R0,#+8
        STRB     R0,[R6, #+7]
// 10115             gNwConnConfig.wlanCfg.channel[8] = 9;
        MOVS     R0,#+9
        STRB     R0,[R6, #+8]
// 10116             gNwConnConfig.wlanCfg.channel[9] = 10;
        MOVS     R0,#+10
        STRB     R0,[R6, #+9]
// 10117             gNwConnConfig.wlanCfg.channel[10] = 11;
        MOVS     R0,#+11
        STRB     R0,[R6, #+10]
// 10118             switch(s2wCurrent.regDomain)
        LDRB     R0,[R8, #+917]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_NcmAuto_24
        CMP      R0,#+2
        BEQ.N    ??AppS2wCmd_NcmAuto_25
        B.N      ??AppS2wCmd_NcmAuto_26
// 10119             {
// 10120 		case S2W_DOMAIN_FCC:
// 10121                   gNwConnConfig.wlanCfg.channel[11] = 0;
// 10122                   break;
// 10123 		case S2W_DOMAIN_ETSI:
// 10124                   gNwConnConfig.wlanCfg.channel[11] = 12;
??AppS2wCmd_NcmAuto_24:
        MOVS     R0,#+12
        STRB     R0,[R6, #+11]
// 10125                   gNwConnConfig.wlanCfg.channel[12] = 13;
        MOVS     R0,#+13
        STRB     R0,[R6, #+12]
// 10126                   gNwConnConfig.wlanCfg.channel[13] = 0;
        MOVS     R0,#+0
        STRB     R0,[R6, #+13]
// 10127                   break;
        B.N      ??AppS2wCmd_NcmAuto_23
// 10128 		case S2W_DOMAIN_TELEC:
// 10129                   gNwConnConfig.wlanCfg.channel[11] = 12;
??AppS2wCmd_NcmAuto_25:
        MOVS     R0,#+12
        STRB     R0,[R6, #+11]
// 10130                   gNwConnConfig.wlanCfg.channel[12] = 13;
        MOVS     R0,#+13
        STRB     R0,[R6, #+12]
// 10131                   gNwConnConfig.wlanCfg.channel[13] = 14;
        MOVS     R0,#+14
        STRB     R0,[R6, #+13]
// 10132                   gNwConnConfig.wlanCfg.channel[14] = 0;
        MOVS     R0,#+0
        STRB     R0,[R6, #+14]
// 10133                   break;
        B.N      ??AppS2wCmd_NcmAuto_23
// 10134 		default:
// 10135                   gNwConnConfig.wlanCfg.channel[11] = 0;
??AppS2wCmd_NcmAuto_26:
        MOVS     R0,#+0
        STRB     R0,[R6, #+11]
// 10136                   break;
// 10137             }
// 10138     }
// 10139 	gNwConnConfig.specificChnlList[0] = 1;
??AppS2wCmd_NcmAuto_23:
        MOVS     R0,#+1
        STRB     R0,[R5, #+1]
// 10140 	gNwConnConfig.specificChnlList[1] = 6;
        MOVS     R0,#+6
        STRB     R0,[R5, #+2]
// 10141 	gNwConnConfig.specificChnlList[2] = 11;
        MOVS     R0,#+11
        STRB     R0,[R5, #+3]
// 10142 	gNwConnConfig.specificChnlList[3] = 0;
        MOVS     R0,#+0
        STRB     R0,[R5, #+4]
// 10143 
// 10144     S2w_getSecurityConfig(&gNwConnConfig.wlanCfg);
        ADD      R0,SP,#+48
          CFI FunCall S2w_getSecurityConfig
        BL       S2w_getSecurityConfig
// 10145 		
// 10146 	    memcpy(gNwConnConfig.wlanCfg.securityCfg.eapConfig.userName.Name,
// 10147                     s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
        ADD      R0,R8,#+312
        STR      R0,[SP, #+0]
        ADD      R1,R8,#+322
        LDRB     R2,[R0, #+9]
        ADD      R0,SP,#+231
          CFI FunCall memcpy
        BL       memcpy
// 10148 	    memcpy(gNwConnConfig.wlanCfg.securityCfg.eapConfig.password.Pwd,
// 10149                     s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
        LDRB     R2,[R8, #+354]
        ADDW     R1,R8,#+355
        ADD      R0,SP,#+264
          CFI FunCall memcpy
        BL       memcpy
// 10150 	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
        LDRB     R0,[R8, #+354]
// 10151 	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
        LDR      R1,[SP, #+0]
        STRB     R0,[SP, #+263]
        ADD      R0,SP,#+228
        LDRB     R1,[R1, #+9]
        STRB     R1,[R0, #+2]
// 10152 
// 10153 	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
        LDR      R1,[R8, #+312]
        STRB     R1,[SP, #+228]
// 10154 	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
        LDR      R1,[SP, #+0]
        LDR      R1,[R1, #+4]
        STRB     R1,[R0, #+1]
// 10155 
// 10156 	  //  gNwConnConfig.wlanCfg.securityCfg.eapConfig.fastProvisioningStatus= APP_NCM_CFG_DFLT_FAST_PROVISIONING_STATUS;
// 10157 	   // gNwConnConfig.wlanCfg.securityCfg.eapConfig.pacOverWrite= APP_NCM_CFG_DFLT_FLASH_PAC_OVER_WRITE;
// 10158 	    //gNwConnConfig.wlanCfg.securityCfg.eapConfig.pac.pac_opaque_len = 0;
// 10159 
// 10160 
// 10161 #if 0
// 10162     if( s2wCurrent.security.eap.useCaCert ||
// 10163       (( 13 == s2wCurrent.security.eap.outerAuth)&&
// 10164       ( 26 == s2wCurrent.security.eap.innerAuth )))
// 10165     {
// 10166 			index = S2wCert_findFile(S2W_CERT_NAME_CA);
// 10167         if(index != -1)
// 10168         {
// 10169 		  		gNwConnConfig.wlanCfg.securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress;
// 10170         }
// 10171     }
// 10172 		index = S2wCert_findFile(S2W_CERT_NAME_CLIENT);
// 10173     if(index != -1)
// 10174     {
// 10175 		  gNwConnConfig.wlanCfg.securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress;
// 10176     }
// 10177 		index = S2wCert_findFile(S2W_CERT_NAME_KEY);
// 10178     if(index != -1)
// 10179     {
// 10180 		  gNwConnConfig.wlanCfg.securityCfg.eapConfig.pPrivateKey =(char*) s2w_ssl_cert_table[index].certAddress;
// 10181     }
// 10182 #else
// 10183 	if(s2wCurrent.eapCertTimeValidChkDisbl)
        LDRB     R0,[R8, #+956]
        CBZ.N    R0,??AppS2wCmd_NcmAuto_27
// 10184 	{
// 10185 		gNwConnConfig.wlanCfg.securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
        LDRB     R0,[SP, #+296]
        ORR      R0,R0,#0x2
        STRB     R0,[SP, #+296]
// 10186 	}
// 10187     if( s2wCurrent.security.eap.useCaCert ||
// 10188       (( 13 == s2wCurrent.security.eap.outerAuth)&&
// 10189       ( 26 == s2wCurrent.security.eap.innerAuth )))
??AppS2wCmd_NcmAuto_27:
        ADD      R6,SP,#+296
        LDR      R0,[SP, #+0]
        LDRB     R0,[R0, #+8]
        MOV      R11,#+12
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_28
        LDR      R0,[R8, #+312]
        CMP      R0,#+13
        ITTT     EQ 
        LDREQ    R0,[SP, #+0]
        LDREQ    R0,[R0, #+4]
        CMPEQ    R0,#+26
        BNE.N    ??AppS2wCmd_NcmAuto_29
??AppS2wCmd_NcmAuto_28:
        BL       ?Subroutine89
// 10190     {
// 10191         index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
// 10192         if(index == -1)
??CrossCallReturnLabel_479:
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable484
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 10193         {
// 10194             index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
// 10195         }
// 10196         if(index != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_NcmAuto_29
        BL       ?Subroutine139
??CrossCallReturnLabel_630:
        STR      R1,[R6, #+16]
// 10197         {
// 10198             gNwConnConfig.wlanCfg.securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 10199             gNwConnConfig.wlanCfg.securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
        LDRH     R0,[R0, #+0]
        STR      R0,[R6, #+20]
// 10200         }
// 10201     }
??AppS2wCmd_NcmAuto_29:
        BL       ?Subroutine90
// 10202     index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
// 10203     if(index == -1)
??CrossCallReturnLabel_482:
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable484_1
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 10204     {
// 10205         index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
// 10206     }
// 10207     if(index != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_NcmAuto_30
        BL       ?Subroutine139
??CrossCallReturnLabel_631:
        STR      R1,[R6, #+24]
// 10208     {
// 10209         gNwConnConfig.wlanCfg.securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 10210         gNwConnConfig.wlanCfg.securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
        LDRH     R0,[R0, #+0]
        STR      R0,[R6, #+28]
??AppS2wCmd_NcmAuto_30:
        LDR.W    R0,??DataTable482
// 10211     }
// 10212     index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
          CFI FunCall S2wCert_SearchRamTable
        BL       S2wCert_SearchRamTable
// 10213     if(index == -1)
        CMN      R0,#+1
        ITT      EQ 
        LDREQ.W  R0,??DataTable482
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 10214     {
// 10215         index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
// 10216     }
// 10217     if(index != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_NcmAuto_31
        BL       ?Subroutine139
??CrossCallReturnLabel_632:
        STR      R1,[R6, #+32]
// 10218     {
// 10219 	    gNwConnConfig.wlanCfg.securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 10220         gNwConnConfig.wlanCfg.securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
        LDRH     R0,[R0, #+0]
        STR      R0,[R6, #+36]
// 10221     }
// 10222 #endif
// 10223     if(s2wCurrent.ncmAutoConf[S2W_NCM_CPUWAIT_PERIOD])
??AppS2wCmd_NcmAuto_31:
        ADD      R0,SP,#+608
        LDR      R1,[R8, #+812]
        MOV      R2,#+1000
        CMP      R1,#+0
        ITE      NE 
        STRNE    R1,[R0, #+88]
        STREQ    R2,[R0, #+88]
// 10224     {
// 10225         gNwConnConfig.retryPeriodConfig.cpuWaitPeriod = s2wCurrent.ncmAutoConf[S2W_NCM_CPUWAIT_PERIOD];
// 10226     }
// 10227     else
// 10228     {
// 10229         gNwConnConfig.retryPeriodConfig.cpuWaitPeriod = S2W_NCM_DFLT_CPUWAIT_PERIOD;
// 10230     }
// 10231     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_PERIOD])
        LDR      R1,[R7, #+8]
        CMP      R1,#+0
        ITE      NE 
        STRNE    R1,[R0, #+92]
        STREQ    R2,[R0, #+92]
// 10232     {
// 10233         gNwConnConfig.retryPeriodConfig.scanKnownChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_PERIOD];
// 10234     }
// 10235     else
// 10236     {
// 10237         gNwConnConfig.retryPeriodConfig.scanKnownChRetryIntrvl = S2W_NCM_DFLT_KNOWNCH_SCAN_PERIOD;
// 10238     }
// 10239     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_PERIOD])
        LDR      R1,[R7, #+12]
        CMP      R1,#+0
        ITE      NE 
        STRNE    R1,[R0, #+96]
        STREQ    R2,[R0, #+96]
// 10240     {
// 10241         gNwConnConfig.retryPeriodConfig.scanSpecChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_PERIOD];
// 10242     }
// 10243     else
// 10244     {
// 10245         gNwConnConfig.retryPeriodConfig.scanSpecChRetryIntrvl = S2W_NCM_DFLT_SPECCH_SCAN_PERIOD;
// 10246     }
// 10247     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_PERIOD])
        LDR      R1,[R7, #+16]
        CMP      R1,#+0
        ITE      NE 
        STRNE    R1,[R0, #+100]
        STREQ    R2,[R0, #+100]
// 10248     {
// 10249         gNwConnConfig.retryPeriodConfig.scanAllChRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_PERIOD];
// 10250     }
// 10251     else
// 10252     {
// 10253         gNwConnConfig.retryPeriodConfig.scanAllChRetryIntrvl = S2W_NCM_DFLT_ALLCH_SCAN_PERIOD;
// 10254     }
// 10255     if(s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_PERIOD])
        LDR      R1,[R7, #+20]
        CMP      R1,#+0
        ITE      NE 
        STRNE    R1,[R0, #+104]
        STREQ    R2,[R0, #+104]
// 10256     {
// 10257         gNwConnConfig.retryPeriodConfig.l3ConnectRetryIntrvl = s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_PERIOD];
// 10258     }
// 10259     else
// 10260     {
// 10261         gNwConnConfig.retryPeriodConfig.l3ConnectRetryIntrvl = S2W_NCM_DFLT_L3CONNECT_PERIOD;
// 10262     }
// 10263     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_COUNT])
        LDR      R1,[R7, #+32]
        CBNZ.N   R1,??AppS2wCmd_NcmAuto_32
// 10264     {
// 10265         gNwConnConfig.retryCountsConfig.maxScanKnownChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANKNOWN_CH_COUNT];
// 10266     }
// 10267     else
// 10268     {
// 10269         gNwConnConfig.retryCountsConfig.maxScanKnownChCnt = S2W_NCM_DFLT_KNOWNCH_SCAN_COUNT;
        MOVS     R1,#+10
??AppS2wCmd_NcmAuto_32:
        STR      R1,[R0, #+72]
// 10270     }
// 10271     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_COUNT])
        LDR      R1,[R7, #+36]
        CBNZ.N   R1,??AppS2wCmd_NcmAuto_33
// 10272     {
// 10273         gNwConnConfig.retryCountsConfig.maxScanSpecChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANSPEC_CH_COUNT];
// 10274     }
// 10275     else
// 10276     {
// 10277         gNwConnConfig.retryCountsConfig.maxScanSpecChCnt = S2W_NCM_DFLT_SPECCH_SCAN_COUNT;
        MOVS     R1,#+1
??AppS2wCmd_NcmAuto_33:
        STR      R1,[R0, #+76]
// 10278     }
// 10279     if(s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_COUNT])
        LDR      R1,[R7, #+40]
        CBNZ.N   R1,??AppS2wCmd_NcmAuto_34
// 10280     {
// 10281         gNwConnConfig.retryCountsConfig.maxScanAllChCnt = s2wCurrent.ncmAutoConf[S2W_NCM_SCANALL_CH_COUNT];
// 10282     }
// 10283     else
// 10284     {
// 10285         gNwConnConfig.retryCountsConfig.maxScanAllChCnt = S2W_NCM_DFLT_ALLCH_SCAN_COUNT;
        MOVS     R1,#+10
// 10286     }
// 10287     if(s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT])
??AppS2wCmd_NcmAuto_34:
        LDR      R2,[R7, #+44]
        STR      R1,[R0, #+80]
        ADD      R6,SP,#+552
        ADD      R1,R8,#+956
        CBNZ.N   R2,??AppS2wCmd_NcmAuto_35
// 10288     {
// 10289         gNwConnConfig.retryCountsConfig.maxL3ConnectCnt = s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT];
// 10290         gNwConnConfig.dhcpV4Cfg.dhcpMaxRetryCnt = 6;
// 10291         gNwConnConfig.dhcpV4Cfg.radioMode= s2wCurrent.ncmAutoConf[S2W_NCM_DHCP_RADIO_MODE];
// 10292         gNwConnConfig.dhcpV4Cfg.requestLeaseTime = 
// 10293             s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RQST_LEASE - S2W_NCM_EXTN_EXTN_BASE];
// 10294         gNwConnConfig.dhcpV4Cfg.dhcpRetryTimeout= 
// 10295             s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RETRANS_TIMEOUT - S2W_NCM_EXTN_EXTN_BASE];
// 10296 
// 10297     }
// 10298     else
// 10299     {
// 10300         gNwConnConfig.retryCountsConfig.maxL3ConnectCnt = S2W_NCM_DFLT_L3CONNECT_COUNT;
        MOVS     R2,#+100
??AppS2wCmd_NcmAuto_35:
        STR      R2,[R0, #+84]
// 10301         gNwConnConfig.dhcpV4Cfg.dhcpMaxRetryCnt = 6; //s2wCurrent.ncmAutoConf[S2W_NCM_L3CONNECT_COUNT];         
        MOVS     R2,#+6
        STR      R2,[R6, #+4]
// 10302         gNwConnConfig.dhcpV4Cfg.radioMode= s2wCurrent.ncmAutoConf[S2W_NCM_DHCP_RADIO_MODE];         
        LDR      R2,[R7, #+100]
        STRB     R2,[SP, #+608]
// 10303         gNwConnConfig.dhcpV4Cfg.requestLeaseTime = 
// 10304             s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RQST_LEASE - S2W_NCM_EXTN_EXTN_BASE];        
        LDR      R2,[R1, #+20]
        STR      R2,[R0, #+4]
// 10305         gNwConnConfig.dhcpV4Cfg.dhcpRetryTimeout= 
// 10306             s2wCurrent.ncmAutoConf_extn[S2W_NCM_EXTN_DHCP_RETRANS_TIMEOUT - S2W_NCM_EXTN_EXTN_BASE];
        LDR      R0,[R1, #+24]
        STR      R0,[SP, #+552]
// 10307     }
// 10308 #ifdef S2W_NCM_ROAMING_SUPPORT 
// 10309 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_ENABLE_ID])
// 10310 		gNwConnConfig.roamingCfgParams.roamEnable = S2W_NCM_ROAM_DFLT_ROAMEN;	
// 10311 	else
// 10312 		gNwConnConfig.roamingCfgParams.roamEnable = S2W_NCM_ROAM_DFLT_ROAMDIS;
// 10313 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_LOWER_THID] )
// 10314 		gNwConnConfig.roamingCfgParams.rssiLowerTh = s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_LOWER_THID];
// 10315 	else
// 10316 		gNwConnConfig.roamingCfgParams.rssiLowerTh = S2W_NCM_ROAM_DFLT_RSSILOWERTH;
// 10317     if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_HIGHER_THID]  )
// 10318 		gNwConnConfig.roamingCfgParams.rssiHigherTh = s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_HIGHER_THID];
// 10319 	else
// 10320 		gNwConnConfig.roamingCfgParams.rssiHigherTh = S2W_NCM_ROAM_DFLT_RSSIHIGHERTH;
// 10321     if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_RSSICHKINTERVAL_ID])
// 10322 		gNwConnConfig.roamingCfgParams.rssiLevelChkInterval= (s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_RSSICHKINTERVAL_ID] * TIMER_INTERRUPT_1_MS);
// 10323 	else
// 10324 		gNwConnConfig.roamingCfgParams.rssiLevelChkInterval = S2W_NCM_ROAM_DFLT_RSSICHKINTERVAL;
// 10325 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_THCROSSEDCNT_ID])
// 10326 		gNwConnConfig.roamingCfgParams.thresholdCrossedCnt= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_THCROSSEDCNT_ID];
// 10327 	else
// 10328 	   gNwConnConfig.roamingCfgParams.thresholdCrossedCnt = S2W_NCM_ROAM_DFLT_THCROSSEDCNT;
// 10329 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL3CON_ID] == 0 )
// 10330 		gNwConnConfig.roamingCfgParams.maintainL3Con= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL3CON_ID];
// 10331 	else
// 10332 	   gNwConnConfig.roamingCfgParams.maintainL3Con = S2W_NCM_ROAM_DFLT_MAINTAINL3CON;
// 10333 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL4CON_ID])
// 10334 		gNwConnConfig.roamingCfgParams.maintainL4Con= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_MAINTAINL4CON_ID];
// 10335 	else
// 10336 	   gNwConnConfig.roamingCfgParams.maintainL4Con = S2W_NCM_ROAM_DFLT_MAINTAINL4CON;
// 10337 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANRETRYCNT_ID])
// 10338 		gNwConnConfig.roamingCfgParams.scanRetryCnt= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANRETRYCNT_ID];
// 10339 	else
// 10340 	   gNwConnConfig.roamingCfgParams.scanRetryCnt = S2W_NCM_ROAM_DFLT_SCANRETRYCOUNT;
// 10341 	if(s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANPAUSETIME_ID])
// 10342 		gNwConnConfig.roamingCfgParams.scanPauseTimeMs= s2wCurrent.ncmAutoConf[S2W_NCM_ROAM_SCANPAUSETIME_ID];
// 10343 	else
// 10344 	   gNwConnConfig.roamingCfgParams.scanPauseTimeMs = S2W_NCM_ROAM_DFLT_SCANPUASETIME;
// 10345 #endif /*GSN_NCM_ROAMING_SUPPORT */
// 10346     
// 10347     gNwConnConfig.scanMode = 2;
        MOVS     R0,#+2
        STRB     R0,[SP, #+716]
// 10348     gNwConnConfig.powersaveMode = 0;
        MOVS     R0,#+0
        STRB     R0,[R5, #+16]
// 10349     gNwConnConfig.ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
        LDRB     R1,[R8, #+392]
        SUBS     R0,R1,#+1
        SBCS     R0,R0,R0
        LSRS     R0,R0,#+31
        STR      R0,[R4, #+8]
// 10350     gNwConnConfig.ipConfig.flag = GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT
// 10351 #ifdef S2W_IPv6_SUPPORT  
// 10352 #endif
// 10353                             ;
        MOVS     R1,#+1
        STRB     R1,[SP, #+400]
// 10354     if(gNwConnConfig.ipConfig.ipv4.staticIp)
        CBZ.N    R0,??AppS2wCmd_NcmAuto_36
// 10355     {
// 10356         memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+396
        ADD      R0,SP,#+412
          CFI FunCall memcpy
        BL       memcpy
// 10357         memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.subnetMask,s2wCurrent.netConf.netMask,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+400
        ADD      R0,SP,#+416
          CFI FunCall memcpy
        BL       memcpy
// 10358         memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4 );
        MOVS     R2,#+4
        ADD      R1,R8,#+404
        ADD      R0,SP,#+420
          CFI FunCall memcpy
        BL       memcpy
// 10359         memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
        MOVS     R2,#+4
        ADD      R1,R8,#+424
        ADD      R0,SP,#+432
          CFI FunCall memcpy
        BL       memcpy
// 10360         memcpy((UINT8*)&gNwConnConfig.ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
        MOVS     R2,#+4
        ADD      R1,R8,#+428
        ADD      R0,SP,#+436
        B.N      ??AppS2wCmd_NcmAuto_37
// 10361     }
// 10362     else // store the host name
// 10363     {
// 10364         if(strlen((const char *)s2wCurrent.hostName) != 0)
??AppS2wCmd_NcmAuto_36:
        ADD      R7,R8,#+476
        BL       ??Subroutine69_0
??CrossCallReturnLabel_417:
        CBNZ.N   R0,??AppS2wCmd_NcmAuto_38
// 10365         {
// 10366             memcpy(gNwConnConfig.ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 10367                     (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
// 10368         }
// 10369 		else
// 10370 		{     
// 10371  			S2w_macAddrRTCGet(mac);
        ADD      R0,SP,#+24
          CFI FunCall S2w_macAddrRTCGet
        BL       S2w_macAddrRTCGet
// 10372 	      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
        ADD      R0,SP,#+24
        ADR.N    R2,??DataTable471_1  ;; "GS_"
        LDRB     R1,[R0, #+5]
        LDRB     R3,[R0, #+3]
        STR      R1,[SP, #+4]
        LDRB     R1,[R0, #+4]
        STR      R1,[SP, #+0]
        ADD      R0,SP,#+32
        LDR.W    R1,??DataTable484_2
          CFI FunCall sprintf
        BL       sprintf
// 10373 		    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
        ADD      R0,SP,#+32
          CFI FunCall strlen
        BL       strlen
        MOV      R2,R0
        ADD      R1,SP,#+32
        MOV      R0,R7
          CFI FunCall memcpy
        BL       memcpy
// 10374 			memcpy(gNwConnConfig.ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 10375 				 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
??AppS2wCmd_NcmAuto_38:
        MOVS     R2,#+16
        MOV      R1,R7
        ADD      R0,SP,#+440
??AppS2wCmd_NcmAuto_37:
          CFI FunCall memcpy
        BL       memcpy
// 10376 		}
// 10377 	}
// 10378 	if(TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
        BL       ?Subroutine74
??CrossCallReturnLabel_439:
          CFI FunCall GsnWdd_AssocStatusGet
        BL       GsnWdd_AssocStatusGet
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_NcmAuto_19
// 10379 	{
// 10380 	    gNwConnConfig.ipConfig.ipv4.staticIp = pAppRtcLtchInfo->ipConfig.ipv4.staticIp;
        LDR.W    R7,??DataTable486  ;; 0x41010159
        LDR      R0,[R7, #+79]
        STR      R0,[R4, #+8]
// 10381         gNwConnConfig.ipConfig.ipv4.ipAddr = pAppRtcLtchInfo->ipConfig.ipv4.ipAddr;
// 10382         gNwConnConfig.ipConfig.ipv4.subnetMask = pAppRtcLtchInfo->ipConfig.ipv4.subnetMask;
// 10383         gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = pAppRtcLtchInfo->ipConfig.ipv4.gatewayIpAddr;
// 10384         gNwConnConfig.ipConfig.ipv4.dhcpLeaseExpireTime =
// 10385                           pAppRtcLtchInfo->ipConfig.ipv4.dhcpLeaseExpireTime;
        ADD      R2,R7,#+95
        LDR      R0,[R7, #+83]
        STR      R0,[R4, #+12]
        LDR      R0,[R7, #+87]
        STR      R0,[R4, #+16]
        LDR      R0,[R7, #+91]
        STR      R0,[R4, #+20]
        LDRD     R0,R1,[R2, #+0]
        STRD     R0,R1,[R4, #+24]
// 10386 		gNwConnConfig.ipConfig.ipv4.dnsPriSrvrIp = pAppRtcLtchInfo->ipConfig.ipv4.dnsPriSrvrIp;
        LDR      R0,[R7, #+103]
// 10387         gNwConnConfig.ipConfig.ipv4.dnsSecSrvrIp = pAppRtcLtchInfo->ipConfig.ipv4.dnsSecSrvrIp;
// 10388 		memcpy(gNwConnConfig.wlanCfg.ssid.array,pAppRtcLtchInfo->ssid.array,
// 10389 		   pAppRtcLtchInfo->ssid.length);
        LDR.W    R1,??DataTable487  ;; 0x41010139
        STR      R0,[R4, #+32]
        LDR      R0,[R7, #+107]
        STR      R0,[R4, #+36]
        ADD      R0,SP,#+49
        LDR.W    R4,??DataTable487_1  ;; 0x41010138
        LDRB     R2,[R4, #+0]
          CFI FunCall memcpy
        BL       memcpy
// 10390 		gNwConnConfig.wlanCfg.ssid.length= pAppRtcLtchInfo->ssid.length;
        LDRB     R0,[R4, #+0]
        STRB     R0,[SP, #+48]
// 10391 		memcpy(gNwConnConfig.wlanCfg.bssid.array,pAppRtcLtchInfo->bssid.array, 6);
        MOVS     R2,#+6
        MOV      R1,R7
        BL       ?Subroutine115
// 10392         gNwConnConfig.wlanCfg.channel[0] = pAppRtcLtchInfo->channel;
??CrossCallReturnLabel_555:
        LDRB     R0,[R7, #+8]
        STRB     R0,[SP, #+87]
// 10393 		gNwConnConfig.wlanCfg.securityCfg.mode = pAppRtcLtchInfo->wsec;
// 10394 		gNwConnConfig.dhcpV4Cfg.pDhcpCliRecord = &pAppRtcLtchInfo->dhcpClientParams;
// 10395 		gNwConnConfig.dhcpV4Cfg.timeElapsed = pAppRtcLtchInfo->sleepTime/10;
        MOVS     R2,#+10
        LDRB     R0,[R7, #+6]
        LDR.W    R7,??DataTable487_2  ;; 0x41010258
        STRB     R0,[R9, #+6]
        MOVS     R3,#+0
        ADD      R0,R7,#+8
        STR      R0,[R6, #+48]
        LDRD     R0,R1,[R7, #+0]
          CFI FunCall __aeabi_uldivmod
        BL       __aeabi_uldivmod
        STR      R0,[R6, #+52]
// 10396 		pAppRtcLtchInfo->sleepTime = 0;
        MOVS     R0,#+0
        STRD     R0,R0,[R7, #+0]
// 10397 	}
// 10398 #if 0
// 10399     if(appRtcMemData.ncmState == GSN_NCM_STATE_L3_CONNECTED)
// 10400     {
// 10401         gNwConnConfig.ipConfig.ipv4.staticIp = appRtcMemData.staticIp;
// 10402         gNwConnConfig.ipConfig.ipv4.ipAddr = appRtcMemData.ipAddr;
// 10403         gNwConnConfig.ipConfig.ipv4.subnetMask = appRtcMemData.subnetAddr;
// 10404         gNwConnConfig.ipConfig.ipv4.gatewayIpAddr = appRtcMemData.gatewayIpAddr;
// 10405         if(appRtcMemData.staticIp == 0)
// 10406         {
// 10407             gNwConnConfig.clientConfig.ipConfig.dhcpLeaseExpireTime =
// 10408                           appRtcMemData.connectionInfo.dhcpLeaseTime;
// 10409         }
// 10410         gNwConnConfig.clientConfig.ipConfig.dnsPriSrvrIp = appRtcMemData.dns1;
// 10411         gNwConnConfig.clientConfig.ipConfig.dnsSecSrvrIp = appRtcMemData.dns2;
// 10412         memcpy(gNwConnConfig.clientConfig.ssid.array,appRtcMemData.ssid.array,
// 10413                appRtcMemData.ssid.length);
// 10414         gNwConnConfig.clientConfig.ssid.length = appRtcMemData.ssid.length;
// 10415         memcpy(gNwConnConfig.clientConfig.bssid.array,appRtcMemData.bssid, 6);
// 10416        gNwConnConfig.clientConfig.validBssid = 1;
// 10417         gNwConnConfig.clientConfig.channel = appRtcMemData.channel;
// 10418         if(appRtcMemData.encryptionType == GSN_MAC_ENC_NONE)
// 10419         {
// 10420         }
// 10421         else if(appRtcMemData.encryptionType == GSN_MAC_ENC_WEP)
// 10422         {
// 10423               gNwConnConfig.clientConfig.wepConfig.KeyId =
// 10424                                 appRtcMemData.securityKey.wepKey.keyId;
// 10425               gNwConnConfig.clientConfig.wepConfig.KeyLen =
// 10426                                 appRtcMemData.securityKey.wepKey.keyLen;
// 10427               memcpy(&gNwConnConfig.clientConfig.wepConfig.Key,
// 10428                      appRtcMemData.securityKey.wepKey.key,
// 10429                      appRtcMemData.securityKey.wepKey.keyLen);
// 10430         }
// 10431         else
// 10432         {
// 10433             if(appRtcMemData.pskValid )
// 10434             {
// 10435                 memcpy(&gNwConnConfig.clientConfig.pskConfig.psk,
// 10436                        appRtcMemData.securityKey.psk,32);
// 10437                 gNwConnConfig.clientConfig.pskConfig.pskValid = 1;
// 10438                 memcpy(s2wCurrent.security.wpa.psk,
// 10439                    appRtcMemData.securityKey.psk,32);
// 10440                 s2wCurrent.security.wpa.pskValid = 1;
// 10441             }
// 10442         }
// 10443         gNwConnConfig.clientConfig.encryptionType =
// 10444                                                    appRtcMemData.encryptionType;
// 10445         if(appRtcMemData.authMode == GSN_MAC_AUTH_SHARED)
// 10446         {
// 10447             gNwConnConfig.clientConfig.authType = appRtcMemData.authMode;
// 10448         }
// 10449         else
// 10450         {
// 10451             gNwConnConfig.clientConfig.authType = GSN_MAC_AUTH_AUTO;
// 10452         }
// 10453     }
// 10454 #endif
// 10455     }
// 10456 
// 10457     //s2wCurrent.mode = s2wappMainTaskCtxt->if0.macIfType;
// 10458     
// 10459     // set the mac
// 10460     if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
??AppS2wCmd_NcmAuto_19:
        LDRB     R0,[R8, #+4]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_NcmAuto_39
// 10461     {
// 10462        //S2w_LoadMacAddr(macAddr);
// 10463         S2w_macAddrRTCGet(macAddr);
        BL       ?Subroutine32
// 10464     }
??CrossCallReturnLabel_103:
        B.N      ??AppS2wCmd_NcmAuto_40
// 10465     else
// 10466     {
// 10467         memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array , 6);
??AppS2wCmd_NcmAuto_39:
        LDR      R1,[SP, #+12]
        MOVS     R2,#+6
        ADD      R0,SP,#+16
          CFI FunCall memcpy
        BL       memcpy
// 10468     }
// 10469 
// 10470     //AppS2wHal_MacAddrSet(macAddr, FALSE);
// 10471     
// 10472     /* Init crypto engine */
// 10473     GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
??AppS2wCmd_NcmAuto_40:
        BL       ??Subroutine140_0
// 10474 	
// 10475     GsnNcm_ConfigSet(&s2wappMainTaskCtxt->appNwConnMgrCtx,  &gNwConnConfig);
??CrossCallReturnLabel_633:
        BL       ?Subroutine80
??CrossCallReturnLabel_458:
        ADD      R1,SP,#+48
        ADD      R0,R10,R0
          CFI FunCall GsnNcm_ConfigSet
        BL       GsnNcm_ConfigSet
// 10476     status = GsnNcm_Start(&s2wappMainTaskCtxt->appNwConnMgrCtx,  AppS2wNetConnMgr_Cb, NULL);
// 10477     return status;
        LDR.N    R0,??DataTable470_2
        LDR.W    R1,??DataTable488
        LDR      R0,[R0, #+0]
        MOVS     R2,#+0
        ADD      R0,R10,R0
          CFI FunCall GsnNcm_Start
        BL       GsnNcm_Start
        UXTB     R0,R0
??AppS2wCmd_NcmAuto_4:
        ADDW     SP,SP,#+1308
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock645
// 10478 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable465:
        DC32     0x1f0a8c0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nNCM STARTED:%d\\r\\n">`:
        DC8 "\015\012NCM STARTED:%d\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nNCM NOT STARTED\\r\\n">`:
        DC8 "\015\012NCM NOT STARTED\015\012"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GS_PROV_">`:
        DC8 "GS_PROV_"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "_%02x%02x%02x">`:
        DC8 "_%02x%02x%02x"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond646 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAuto
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_630
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+1344
          CFI Block cfiCond647 Using cfiCommon0
          CFI (cfiCond647) Function AppS2wCmd_NcmAuto
          CFI (cfiCond647) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond647) Conditional ??CrossCallReturnLabel_631
          CFI (cfiCond647) R4 Frame(CFA, -36)
          CFI (cfiCond647) R5 Frame(CFA, -32)
          CFI (cfiCond647) R6 Frame(CFA, -28)
          CFI (cfiCond647) R7 Frame(CFA, -24)
          CFI (cfiCond647) R8 Frame(CFA, -20)
          CFI (cfiCond647) R9 Frame(CFA, -16)
          CFI (cfiCond647) R10 Frame(CFA, -12)
          CFI (cfiCond647) R11 Frame(CFA, -8)
          CFI (cfiCond647) R14 Frame(CFA, -4)
          CFI (cfiCond647) CFA R13+1344
          CFI Block cfiCond648 Using cfiCommon0
          CFI (cfiCond648) Function AppS2wCmd_NcmAuto
          CFI (cfiCond648) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond648) Conditional ??CrossCallReturnLabel_632
          CFI (cfiCond648) R4 Frame(CFA, -36)
          CFI (cfiCond648) R5 Frame(CFA, -32)
          CFI (cfiCond648) R6 Frame(CFA, -28)
          CFI (cfiCond648) R7 Frame(CFA, -24)
          CFI (cfiCond648) R8 Frame(CFA, -20)
          CFI (cfiCond648) R9 Frame(CFA, -16)
          CFI (cfiCond648) R10 Frame(CFA, -12)
          CFI (cfiCond648) R11 Frame(CFA, -8)
          CFI (cfiCond648) R14 Frame(CFA, -4)
          CFI (cfiCond648) CFA R13+1344
          CFI Block cfiPicker649 Using cfiCommon1
          CFI (cfiPicker649) NoFunction
          CFI (cfiPicker649) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiPicker649) Picker
        THUMB
?Subroutine139:
        LDR.W    R1,??DataTable488_1
        MLA      R0,R11,R0,R1
        LDR      R0,[R0, #+0]
        ADDS     R1,R0,#+2
        BX       LR
          CFI EndBlock cfiCond646
          CFI EndBlock cfiCond647
          CFI EndBlock cfiCond648
          CFI EndBlock cfiPicker649

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable466:
        DC32     0x101a8c0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond650 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAuto
          CFI Conditional ??CrossCallReturnLabel_557
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+1344
          CFI Block cfiCond651 Using cfiCommon0
          CFI (cfiCond651) Function AppS2wCmd_NcmAuto
          CFI (cfiCond651) Conditional ??CrossCallReturnLabel_556
          CFI (cfiCond651) R4 Frame(CFA, -36)
          CFI (cfiCond651) R5 Frame(CFA, -32)
          CFI (cfiCond651) R6 Frame(CFA, -28)
          CFI (cfiCond651) R7 Frame(CFA, -24)
          CFI (cfiCond651) R8 Frame(CFA, -20)
          CFI (cfiCond651) R9 Frame(CFA, -16)
          CFI (cfiCond651) R10 Frame(CFA, -12)
          CFI (cfiCond651) R11 Frame(CFA, -8)
          CFI (cfiCond651) R14 Frame(CFA, -4)
          CFI (cfiCond651) CFA R13+1344
          CFI Block cfiCond652 Using cfiCommon0
          CFI (cfiCond652) Function AppS2wCmd_NcmAuto
          CFI (cfiCond652) Conditional ??CrossCallReturnLabel_555
          CFI (cfiCond652) R4 Frame(CFA, -36)
          CFI (cfiCond652) R5 Frame(CFA, -32)
          CFI (cfiCond652) R6 Frame(CFA, -28)
          CFI (cfiCond652) R7 Frame(CFA, -24)
          CFI (cfiCond652) R8 Frame(CFA, -20)
          CFI (cfiCond652) R9 Frame(CFA, -16)
          CFI (cfiCond652) R10 Frame(CFA, -12)
          CFI (cfiCond652) R11 Frame(CFA, -8)
          CFI (cfiCond652) R14 Frame(CFA, -4)
          CFI (cfiCond652) CFA R13+1344
          CFI Block cfiPicker653 Using cfiCommon1
          CFI (cfiPicker653) NoFunction
          CFI (cfiPicker653) Picker
        THUMB
?Subroutine115:
        ADD      R0,SP,#+81
          CFI FunCall AppS2wCmd_NcmAuto memcpy
          CFI FunCall AppS2wCmd_NcmAuto memcpy
          CFI FunCall AppS2wCmd_NcmAuto memcpy
        B.W      memcpy
          CFI EndBlock cfiCond650
          CFI EndBlock cfiCond651
          CFI EndBlock cfiCond652
          CFI EndBlock cfiPicker653

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond654 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAuto
          CFI Conditional ??CrossCallReturnLabel_552
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+1344
          CFI Block cfiCond655 Using cfiCommon0
          CFI (cfiCond655) Function AppS2wCmd_NcmAuto
          CFI (cfiCond655) Conditional ??CrossCallReturnLabel_551
          CFI (cfiCond655) R4 Frame(CFA, -36)
          CFI (cfiCond655) R5 Frame(CFA, -32)
          CFI (cfiCond655) R6 Frame(CFA, -28)
          CFI (cfiCond655) R7 Frame(CFA, -24)
          CFI (cfiCond655) R8 Frame(CFA, -20)
          CFI (cfiCond655) R9 Frame(CFA, -16)
          CFI (cfiCond655) R10 Frame(CFA, -12)
          CFI (cfiCond655) R11 Frame(CFA, -8)
          CFI (cfiCond655) R14 Frame(CFA, -4)
          CFI (cfiCond655) CFA R13+1344
          CFI Block cfiPicker656 Using cfiCommon1
          CFI (cfiPicker656) NoFunction
          CFI (cfiPicker656) Picker
        THUMB
?Subroutine113:
        STRB     R0,[SP, #+48]
          CFI Block cfiCond657 Using cfiCommon0
          CFI (cfiCond657) Function AppS2wCmd_Nauto
          CFI (cfiCond657) Conditional ??CrossCallReturnLabel_550
          CFI (cfiCond657) R4 Frame(CFA, -12)
          CFI (cfiCond657) R5 Frame(CFA, -8)
          CFI (cfiCond657) R14 Frame(CFA, -4)
          CFI (cfiCond657) CFA R13+96
??Subroutine113_0:
        ADD      R0,SP,#+49
          CFI FunCall AppS2wCmd_NcmAuto memcpy
          CFI FunCall AppS2wCmd_NcmAuto memcpy
          CFI FunCall AppS2wCmd_Nauto memcpy
        B.W      memcpy
          CFI EndBlock cfiCond654
          CFI EndBlock cfiCond655
          CFI EndBlock cfiPicker656
          CFI EndBlock cfiCond657

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond658 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_483
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond659 Using cfiCommon0
          CFI (cfiCond659) Function AppS2wCmd_NcmAuto
          CFI (cfiCond659) Conditional ??CrossCallReturnLabel_482
          CFI (cfiCond659) R4 Frame(CFA, -36)
          CFI (cfiCond659) R5 Frame(CFA, -32)
          CFI (cfiCond659) R6 Frame(CFA, -28)
          CFI (cfiCond659) R7 Frame(CFA, -24)
          CFI (cfiCond659) R8 Frame(CFA, -20)
          CFI (cfiCond659) R9 Frame(CFA, -16)
          CFI (cfiCond659) R10 Frame(CFA, -12)
          CFI (cfiCond659) R11 Frame(CFA, -8)
          CFI (cfiCond659) R14 Frame(CFA, -4)
          CFI (cfiCond659) CFA R13+1344
          CFI Block cfiCond660 Using cfiCommon0
          CFI (cfiCond660) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond660) Conditional ??CrossCallReturnLabel_481
          CFI (cfiCond660) R4 Frame(CFA, -36)
          CFI (cfiCond660) R5 Frame(CFA, -32)
          CFI (cfiCond660) R6 Frame(CFA, -28)
          CFI (cfiCond660) R7 Frame(CFA, -24)
          CFI (cfiCond660) R8 Frame(CFA, -20)
          CFI (cfiCond660) R9 Frame(CFA, -16)
          CFI (cfiCond660) R10 Frame(CFA, -12)
          CFI (cfiCond660) R11 Frame(CFA, -8)
          CFI (cfiCond660) R14 Frame(CFA, -4)
          CFI (cfiCond660) CFA R13+360
          CFI Block cfiPicker661 Using cfiCommon1
          CFI (cfiPicker661) NoFunction
          CFI (cfiPicker661) Picker
        THUMB
?Subroutine90:
        LDR.W    R0,??DataTable484_1
          CFI FunCall AppS2wCmd_Wassoc S2wCert_SearchRamTable
          CFI FunCall AppS2wCmd_NcmAuto S2wCert_SearchRamTable
          CFI FunCall AppS2wCmd_Wassoc_test S2wCert_SearchRamTable
        B.W      S2wCert_SearchRamTable
          CFI EndBlock cfiCond658
          CFI EndBlock cfiCond659
          CFI EndBlock cfiCond660
          CFI EndBlock cfiPicker661

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond662 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_480
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond663 Using cfiCommon0
          CFI (cfiCond663) Function AppS2wCmd_NcmAuto
          CFI (cfiCond663) Conditional ??CrossCallReturnLabel_479
          CFI (cfiCond663) R4 Frame(CFA, -36)
          CFI (cfiCond663) R5 Frame(CFA, -32)
          CFI (cfiCond663) R6 Frame(CFA, -28)
          CFI (cfiCond663) R7 Frame(CFA, -24)
          CFI (cfiCond663) R8 Frame(CFA, -20)
          CFI (cfiCond663) R9 Frame(CFA, -16)
          CFI (cfiCond663) R10 Frame(CFA, -12)
          CFI (cfiCond663) R11 Frame(CFA, -8)
          CFI (cfiCond663) R14 Frame(CFA, -4)
          CFI (cfiCond663) CFA R13+1344
          CFI Block cfiCond664 Using cfiCommon0
          CFI (cfiCond664) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond664) Conditional ??CrossCallReturnLabel_478
          CFI (cfiCond664) R4 Frame(CFA, -36)
          CFI (cfiCond664) R5 Frame(CFA, -32)
          CFI (cfiCond664) R6 Frame(CFA, -28)
          CFI (cfiCond664) R7 Frame(CFA, -24)
          CFI (cfiCond664) R8 Frame(CFA, -20)
          CFI (cfiCond664) R9 Frame(CFA, -16)
          CFI (cfiCond664) R10 Frame(CFA, -12)
          CFI (cfiCond664) R11 Frame(CFA, -8)
          CFI (cfiCond664) R14 Frame(CFA, -4)
          CFI (cfiCond664) CFA R13+360
          CFI Block cfiPicker665 Using cfiCommon1
          CFI (cfiPicker665) NoFunction
          CFI (cfiPicker665) Picker
        THUMB
?Subroutine89:
        LDR.W    R0,??DataTable484
          CFI FunCall AppS2wCmd_Wassoc S2wCert_SearchRamTable
          CFI FunCall AppS2wCmd_NcmAuto S2wCert_SearchRamTable
          CFI FunCall AppS2wCmd_Wassoc_test S2wCert_SearchRamTable
        B.W      S2wCert_SearchRamTable
          CFI EndBlock cfiCond662
          CFI EndBlock cfiCond663
          CFI EndBlock cfiCond664
          CFI EndBlock cfiPicker665

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable468:
        DC32     httpConfAtCmd

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond666 Using cfiCommon0
          CFI Function AppS2wCommand_Process
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_452
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond667 Using cfiCommon0
          CFI (cfiCond667) Function AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond667) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond667) NoCalls AppS2wCommand_Process
          CFI (cfiCond667) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond667) NoCalls AppS2wExternalFlashData
          CFI (cfiCond667) Conditional ??CrossCallReturnLabel_453
          CFI (cfiCond667) R4 Frame(CFA, -8)
          CFI (cfiCond667) R14 Frame(CFA, -4)
          CFI (cfiCond667) CFA R13+24
          CFI Block cfiCond668 Using cfiCommon0
          CFI (cfiCond668) Function AppS2wCmd_NcmAuto
          CFI (cfiCond668) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond668) NoCalls AppS2wCommand_Process
          CFI (cfiCond668) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond668) NoCalls AppS2wExternalFlashData
          CFI (cfiCond668) Conditional ??CrossCallReturnLabel_454
          CFI (cfiCond668) R4 Frame(CFA, -36)
          CFI (cfiCond668) R5 Frame(CFA, -32)
          CFI (cfiCond668) R6 Frame(CFA, -28)
          CFI (cfiCond668) R7 Frame(CFA, -24)
          CFI (cfiCond668) R8 Frame(CFA, -20)
          CFI (cfiCond668) R9 Frame(CFA, -16)
          CFI (cfiCond668) R10 Frame(CFA, -12)
          CFI (cfiCond668) R11 Frame(CFA, -8)
          CFI (cfiCond668) R14 Frame(CFA, -4)
          CFI (cfiCond668) CFA R13+1344
          CFI Block cfiCond669 Using cfiCommon0
          CFI (cfiCond669) Function AppS2wCmd_NcmAuto
          CFI (cfiCond669) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond669) NoCalls AppS2wCommand_Process
          CFI (cfiCond669) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond669) NoCalls AppS2wExternalFlashData
          CFI (cfiCond669) Conditional ??CrossCallReturnLabel_455
          CFI (cfiCond669) R4 Frame(CFA, -36)
          CFI (cfiCond669) R5 Frame(CFA, -32)
          CFI (cfiCond669) R6 Frame(CFA, -28)
          CFI (cfiCond669) R7 Frame(CFA, -24)
          CFI (cfiCond669) R8 Frame(CFA, -20)
          CFI (cfiCond669) R9 Frame(CFA, -16)
          CFI (cfiCond669) R10 Frame(CFA, -12)
          CFI (cfiCond669) R11 Frame(CFA, -8)
          CFI (cfiCond669) R14 Frame(CFA, -4)
          CFI (cfiCond669) CFA R13+1344
          CFI Block cfiCond670 Using cfiCommon0
          CFI (cfiCond670) Function AppS2wCmd_NcmAuto
          CFI (cfiCond670) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond670) NoCalls AppS2wCommand_Process
          CFI (cfiCond670) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond670) NoCalls AppS2wExternalFlashData
          CFI (cfiCond670) Conditional ??CrossCallReturnLabel_456
          CFI (cfiCond670) R4 Frame(CFA, -36)
          CFI (cfiCond670) R5 Frame(CFA, -32)
          CFI (cfiCond670) R6 Frame(CFA, -28)
          CFI (cfiCond670) R7 Frame(CFA, -24)
          CFI (cfiCond670) R8 Frame(CFA, -20)
          CFI (cfiCond670) R9 Frame(CFA, -16)
          CFI (cfiCond670) R10 Frame(CFA, -12)
          CFI (cfiCond670) R11 Frame(CFA, -8)
          CFI (cfiCond670) R14 Frame(CFA, -4)
          CFI (cfiCond670) CFA R13+1344
          CFI Block cfiCond671 Using cfiCommon0
          CFI (cfiCond671) Function AppS2wCmd_NcmAuto
          CFI (cfiCond671) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond671) NoCalls AppS2wCommand_Process
          CFI (cfiCond671) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond671) NoCalls AppS2wExternalFlashData
          CFI (cfiCond671) Conditional ??CrossCallReturnLabel_457
          CFI (cfiCond671) R4 Frame(CFA, -36)
          CFI (cfiCond671) R5 Frame(CFA, -32)
          CFI (cfiCond671) R6 Frame(CFA, -28)
          CFI (cfiCond671) R7 Frame(CFA, -24)
          CFI (cfiCond671) R8 Frame(CFA, -20)
          CFI (cfiCond671) R9 Frame(CFA, -16)
          CFI (cfiCond671) R10 Frame(CFA, -12)
          CFI (cfiCond671) R11 Frame(CFA, -8)
          CFI (cfiCond671) R14 Frame(CFA, -4)
          CFI (cfiCond671) CFA R13+1344
          CFI Block cfiCond672 Using cfiCommon0
          CFI (cfiCond672) Function AppS2wCmd_NcmAuto
          CFI (cfiCond672) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond672) NoCalls AppS2wCommand_Process
          CFI (cfiCond672) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond672) NoCalls AppS2wExternalFlashData
          CFI (cfiCond672) Conditional ??CrossCallReturnLabel_458
          CFI (cfiCond672) R4 Frame(CFA, -36)
          CFI (cfiCond672) R5 Frame(CFA, -32)
          CFI (cfiCond672) R6 Frame(CFA, -28)
          CFI (cfiCond672) R7 Frame(CFA, -24)
          CFI (cfiCond672) R8 Frame(CFA, -20)
          CFI (cfiCond672) R9 Frame(CFA, -16)
          CFI (cfiCond672) R10 Frame(CFA, -12)
          CFI (cfiCond672) R11 Frame(CFA, -8)
          CFI (cfiCond672) R14 Frame(CFA, -4)
          CFI (cfiCond672) CFA R13+1344
          CFI Block cfiCond673 Using cfiCommon0
          CFI (cfiCond673) Function AppS2wExternalFlashData
          CFI (cfiCond673) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiCond673) NoCalls AppS2wCommand_Process
          CFI (cfiCond673) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiCond673) NoCalls AppS2wExternalFlashData
          CFI (cfiCond673) Conditional ??CrossCallReturnLabel_459
          CFI (cfiCond673) R4 Frame(CFA, -12)
          CFI (cfiCond673) R5 Frame(CFA, -8)
          CFI (cfiCond673) R14 Frame(CFA, -4)
          CFI (cfiCond673) CFA R13+24
          CFI Block cfiPicker674 Using cfiCommon1
          CFI (cfiPicker674) NoFunction
          CFI (cfiPicker674) NoCalls AppS2wCmd_TkipSeqNumGet
          CFI (cfiPicker674) NoCalls AppS2wCommand_Process
          CFI (cfiPicker674) NoCalls AppS2wCmd_NcmAuto
          CFI (cfiPicker674) NoCalls AppS2wExternalFlashData
          CFI (cfiPicker674) Picker
        THUMB
?Subroutine80:
        LDR.N    R0,??DataTable470_2
        LDR      R0,[R0, #+0]
        BX       LR
          CFI EndBlock cfiCond666
          CFI EndBlock cfiCond667
          CFI EndBlock cfiCond668
          CFI EndBlock cfiCond669
          CFI EndBlock cfiCond670
          CFI EndBlock cfiCond671
          CFI EndBlock cfiCond672
          CFI EndBlock cfiCond673
          CFI EndBlock cfiPicker674

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable469:
        DC32     headerTypes

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond675 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAuto
          CFI Conditional ??CrossCallReturnLabel_241
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+1344
          CFI Block cfiCond676 Using cfiCommon0
          CFI (cfiCond676) Function AppS2wCmd_NcmAuto
          CFI (cfiCond676) Conditional ??CrossCallReturnLabel_240
          CFI (cfiCond676) R4 Frame(CFA, -36)
          CFI (cfiCond676) R5 Frame(CFA, -32)
          CFI (cfiCond676) R6 Frame(CFA, -28)
          CFI (cfiCond676) R7 Frame(CFA, -24)
          CFI (cfiCond676) R8 Frame(CFA, -20)
          CFI (cfiCond676) R9 Frame(CFA, -16)
          CFI (cfiCond676) R10 Frame(CFA, -12)
          CFI (cfiCond676) R11 Frame(CFA, -8)
          CFI (cfiCond676) R14 Frame(CFA, -4)
          CFI (cfiCond676) CFA R13+1344
          CFI Block cfiCond677 Using cfiCommon0
          CFI (cfiCond677) Function AppS2wCmd_NcmAuto
          CFI (cfiCond677) Conditional ??CrossCallReturnLabel_239
          CFI (cfiCond677) R4 Frame(CFA, -36)
          CFI (cfiCond677) R5 Frame(CFA, -32)
          CFI (cfiCond677) R6 Frame(CFA, -28)
          CFI (cfiCond677) R7 Frame(CFA, -24)
          CFI (cfiCond677) R8 Frame(CFA, -20)
          CFI (cfiCond677) R9 Frame(CFA, -16)
          CFI (cfiCond677) R10 Frame(CFA, -12)
          CFI (cfiCond677) R11 Frame(CFA, -8)
          CFI (cfiCond677) R14 Frame(CFA, -4)
          CFI (cfiCond677) CFA R13+1344
          CFI Block cfiPicker678 Using cfiCommon1
          CFI (cfiPicker678) NoFunction
          CFI (cfiPicker678) Picker
        THUMB
?Subroutine44:
        ADD      R0,SP,#+1304
          CFI FunCall AppS2wCmd_NcmAuto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_NcmAuto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_NcmAuto AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond675
          CFI EndBlock cfiCond676
          CFI EndBlock cfiCond677
          CFI EndBlock cfiPicker678

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond679 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_105
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond680 Using cfiCommon0
          CFI (cfiCond680) Function AppS2wCmd_Ndhcp
          CFI (cfiCond680) Conditional ??CrossCallReturnLabel_104
          CFI (cfiCond680) R4 Frame(CFA, -24)
          CFI (cfiCond680) R5 Frame(CFA, -20)
          CFI (cfiCond680) R6 Frame(CFA, -16)
          CFI (cfiCond680) R7 Frame(CFA, -12)
          CFI (cfiCond680) R8 Frame(CFA, -8)
          CFI (cfiCond680) R14 Frame(CFA, -4)
          CFI (cfiCond680) CFA R13+72
          CFI Block cfiCond681 Using cfiCommon0
          CFI (cfiCond681) Function AppS2wCmd_NcmAuto
          CFI (cfiCond681) Conditional ??CrossCallReturnLabel_103
          CFI (cfiCond681) R4 Frame(CFA, -36)
          CFI (cfiCond681) R5 Frame(CFA, -32)
          CFI (cfiCond681) R6 Frame(CFA, -28)
          CFI (cfiCond681) R7 Frame(CFA, -24)
          CFI (cfiCond681) R8 Frame(CFA, -20)
          CFI (cfiCond681) R9 Frame(CFA, -16)
          CFI (cfiCond681) R10 Frame(CFA, -12)
          CFI (cfiCond681) R11 Frame(CFA, -8)
          CFI (cfiCond681) R14 Frame(CFA, -4)
          CFI (cfiCond681) CFA R13+1344
          CFI Block cfiCond682 Using cfiCommon0
          CFI (cfiCond682) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond682) Conditional ??CrossCallReturnLabel_102
          CFI (cfiCond682) R4 Frame(CFA, -36)
          CFI (cfiCond682) R5 Frame(CFA, -32)
          CFI (cfiCond682) R6 Frame(CFA, -28)
          CFI (cfiCond682) R7 Frame(CFA, -24)
          CFI (cfiCond682) R8 Frame(CFA, -20)
          CFI (cfiCond682) R9 Frame(CFA, -16)
          CFI (cfiCond682) R10 Frame(CFA, -12)
          CFI (cfiCond682) R11 Frame(CFA, -8)
          CFI (cfiCond682) R14 Frame(CFA, -4)
          CFI (cfiCond682) CFA R13+360
          CFI Block cfiPicker683 Using cfiCommon1
          CFI (cfiPicker683) NoFunction
          CFI (cfiPicker683) Picker
        THUMB
?Subroutine32:
        ADD      R0,SP,#+16
          CFI FunCall AppS2wCmd_Wassoc S2w_macAddrRTCGet
          CFI FunCall AppS2wCmd_Ndhcp S2w_macAddrRTCGet
          CFI FunCall AppS2wCmd_NcmAuto S2w_macAddrRTCGet
          CFI FunCall AppS2wCmd_Wassoc_test S2w_macAddrRTCGet
        B.W      S2w_macAddrRTCGet
          CFI EndBlock cfiCond679
          CFI EndBlock cfiCond680
          CFI EndBlock cfiCond681
          CFI EndBlock cfiCond682
          CFI EndBlock cfiPicker683

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock684 Using cfiCommon0
          CFI Function AppS2wCmd_NcmAutoConf
        THUMB
// 10479 UINT8
// 10480 AppS2wCmd_NcmAutoConf(UINT8* ptr)
// 10481 {
AppS2wCmd_NcmAutoConf:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 10482     UINT8 status;
// 10483     UINT8 *p;
// 10484     UINT32 id=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
// 10485 
// 10486     UINT32 value;
// 10487 
// 10488      p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 10489      if (!p)
??CrossCallReturnLabel_210:
        CBZ.N    R0,??AppS2wCmd_NcmAutoConf_0
// 10490      {
// 10491          return S2W_EINVAL;
// 10492      }
// 10493      status = AppS2wParse_Int(p, &id);
// 10494      if ((status != S2W_SUCCESS)||((id > 5)&&(id < 8))
// 10495 #ifdef S2W_NCM_ROAMING_SUPPORT 				 
// 10496          || (id > 27)
// 10497 #else
// 10498          || (id > 15 && (id < 25 || id > 27))
// 10499 #endif
// 10500            )
        BL       ?Subroutine51
??CrossCallReturnLabel_277:
        CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_0
        LDR      R0,[SP, #+0]
        SUBS     R0,R0,#+6
        CMP      R0,#+2
        BCC.N    ??AppS2wCmd_NcmAutoConf_0
        LDR      R0,[SP, #+0]
        CMP      R0,#+16
        ITT      CS 
        SUBCS    R0,R0,#+25
        CMPCS    R0,#+3
        BCS.N    ??AppS2wCmd_NcmAutoConf_0
// 10501      {
// 10502          return S2W_EINVAL;
// 10503      }
// 10504      p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 10505      if (!p)
??CrossCallReturnLabel_209:
        CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_1
// 10506      {
// 10507          return S2W_EINVAL;
??AppS2wCmd_NcmAutoConf_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_NcmAutoConf_2
// 10508      }
// 10509 #ifdef S2W_NCM_ROAMING_SUPPORT 				 
// 10510 	 if((id == S2W_NCM_ROAM_HIGHER_THID || id == S2W_NCM_ROAM_LOWER_THID) && (*p == '-'))
// 10511 	 {
// 10512 		status = AppS2wParse_Int(p+1, &value);
// 10513 		s2wCurrent.ncmAutoConf[id] = (unsigned char)(value * -1);
// 10514 	 }
// 10515 	 else if((id == S2W_NCM_ROAM_HIGHER_THID || S2W_NCM_ROAM_LOWER_THID == 3) && (*p != '-'))		
// 10516 	 {
// 10517 		return S2W_EINVAL;
// 10518 	 }
// 10519 	else
// 10520 #endif		/*GSN_NCM_ROAMING_SUPPORT */  
// 10521      if(id >= 26  && id <= 27)
??AppS2wCmd_NcmAutoConf_1:
        LDR      R1,[SP, #+0]
        LDR.N    R4,??DataTable470_1
        SUBS     R1,R1,#+26
        CMP      R1,#+2
        BCS.N    ??AppS2wCmd_NcmAutoConf_3
// 10522      {
// 10523         value = 0;
        MOVS     R1,#+0
        STR      R1,[SP, #+4]
// 10524         status = AppS2wParse_Int(p, &value);
        BL       ?Subroutine52
// 10525         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_319:
        CBNZ.N   R0,??AppS2wCmd_NcmAutoConf_2
// 10526         {
// 10527             return status;
// 10528         }
// 10529         s2wCurrent.ncmAutoConf_extn[id - S2W_NCM_EXTN_EXTN_BASE] = value;        
        LDR      R1,[SP, #+0]
        LDR      R2,[SP, #+4]
        ADD      R1,R4,R1, LSL #+2
        STR      R2,[R1, #+872]
        B.N      ??AppS2wCmd_NcmAutoConf_2
// 10530      }
// 10531      else 
// 10532      {
// 10533          status = AppS2wParse_Int(p, &s2wCurrent.ncmAutoConf[id]);
??AppS2wCmd_NcmAutoConf_3:
        LDR      R1,[SP, #+0]
        ADD      R1,R4,R1, LSL #+2
        ADD      R1,R1,#+812
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 10534          if (status != S2W_SUCCESS)
// 10535          {
// 10536              return status;
// 10537          }
// 10538      }
// 10539      return status;
??AppS2wCmd_NcmAutoConf_2:
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock684
// 10540 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable470:
        DC32     S2W_DNS_CLIENT_FALGS

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable470_1:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable470_2:
        DC32     s2wappMainTaskCtxt
// 10541 #endif // #ifdef  NCM_SUPPORT_ENABLE 
// 10542 
// 10543 
// 10544 /**
// 10545  ******************************************************************
// 10546  * @ingroup S2w-Application
// 10547  * @brief Process the AT+WAUTO command.
// 10548  *   This function Parse and Store the WiFi auto connect settings.
// 10549  * @param ptr Pointer to the user input string.
// 10550  *
// 10551  * @return S2W_SUCCESS - operation successful.
// 10552  * @retval S2W_EINVAL  - operation failure-invalid command.
// 10553  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock685 Using cfiCommon0
          CFI Function AppS2wCmd_Wauto
        THUMB
// 10554 PUBLIC UINT8
// 10555 AppS2wCmd_Wauto(UINT8 *ptr)
// 10556 {
AppS2wCmd_Wauto:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+48
          CFI CFA R13+56
        MOV      R4,R0
// 10557     S2W_WLANDATA_T autoparams;
// 10558     UINT8 status;
// 10559     memset(&autoparams, 0, sizeof(autoparams));
        MOVS     R2,#+48
        BL       ?Subroutine22
??CrossCallReturnLabel_48:
        MOV      R1,R0
// 10560     status = AppS2wParse_Wcmd(ptr, &autoparams, pwc_wauto);
        MOVS     R2,#+2
        MOV      R0,R4
          CFI FunCall AppS2wParse_Wcmd
        BL       AppS2wParse_Wcmd
// 10561     if (status != S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_Wauto_0
// 10562     {
// 10563         return status;
// 10564     }
// 10565 
// 10566     if(s2wappMainTaskCtxt->apConf &&  autoparams.mode == 2) // if ncm enabled and mode is AP then store in Ap conf
        BL       ?Subroutine76
??CrossCallReturnLabel_445:
        CBZ.N    R0,??AppS2wCmd_Wauto_1
        LDRB     R0,[SP, #+0]
        CMP      R0,#+2
        BNE.N    ??AppS2wCmd_Wauto_1
// 10567     {
// 10568         s2wCurrent.lmtdApConf.ssid.length = autoparams.ssidLen;
        LDRB     R0,[SP, #+2]
// 10569         memcpy(s2wCurrent.lmtdApConf.ssid.array,autoparams.ssid,autoparams.ssidLen);
        LDRB     R2,[SP, #+2]
        STRB     R0,[R4, #+492]
        ADD      R1,SP,#+10
        ADDW     R0,R4,#+493
          CFI FunCall memcpy
        BL       memcpy
// 10570         if(autoparams.channel)
        LDRB     R0,[SP, #+1]
        CBNZ.N   R0,??AppS2wCmd_Wauto_2
// 10571         {
// 10572             s2wCurrent.lmtdApConf.channel = autoparams.channel;
// 10573         }
// 10574         else
// 10575         {
// 10576 			s2wCurrent.lmtdApConf.channel = 1;
        MOVS     R0,#+1
??AppS2wCmd_Wauto_2:
        STRB     R0,[R4, #+646]
// 10577 		}
// 10578 		s2wCurrent.autoWlandata.mode = autoparams.mode;
        LDRB     R0,[SP, #+0]
        STRB     R0,[R4, #+12]
        B.N      ??AppS2wCmd_Wauto_3
// 10579     }
// 10580     else
// 10581     {
// 10582         memcpy(&s2wCurrent.autoWlandata, &autoparams,
// 10583            sizeof(s2wCurrent.autoWlandata));
??AppS2wCmd_Wauto_1:
        MOVS     R2,#+48
        ADD      R1,SP,#+0
        ADD      R0,R4,#+12
          CFI FunCall memcpy
        BL       memcpy
// 10584     }
// 10585     return S2W_SUCCESS;
??AppS2wCmd_Wauto_3:
        MOVS     R0,#+0
??AppS2wCmd_Wauto_0:
        ADD      SP,SP,#+48
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock685
// 10586 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond686 Using cfiCommon0
          CFI Function AppS2wCmd_WpaPsk
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_444
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+152
          CFI Block cfiCond687 Using cfiCommon0
          CFI (cfiCond687) Function AppS2wCmd_Wauto
          CFI (cfiCond687) NoCalls AppS2wCmd_WpaPsk
          CFI (cfiCond687) NoCalls AppS2wCmd_Wauto
          CFI (cfiCond687) Conditional ??CrossCallReturnLabel_445
          CFI (cfiCond687) R4 Frame(CFA, -8)
          CFI (cfiCond687) R14 Frame(CFA, -4)
          CFI (cfiCond687) CFA R13+56
          CFI Block cfiPicker688 Using cfiCommon1
          CFI (cfiPicker688) NoFunction
          CFI (cfiPicker688) NoCalls AppS2wCmd_WpaPsk
          CFI (cfiPicker688) NoCalls AppS2wCmd_Wauto
          CFI (cfiPicker688) Picker
        THUMB
?Subroutine76:
        LDR.W    R0,??DataTable490
        LDR.W    R4,??DataTable491
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+30336
        LDRB     R0,[R0, #+0]
        BX       LR
          CFI EndBlock cfiCond686
          CFI EndBlock cfiCond687
          CFI EndBlock cfiPicker688

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable471:
        DC32     headerTypesModified

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable471_1:
        DC8      "GS_"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable471_2:
        DC32     s2wLinkState
// 10587 /**
// 10588  ******************************************************************
// 10589  * @ingroup S2w-Application
// 10590  * @brief Process the AT+WRATE Command.
// 10591  * @param ptr Pointer to the user input string.
// 10592  * @return status.
// 10593  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock689 Using cfiCommon0
          CFI Function AppS2wCmd_Wrate
        THUMB
// 10594 PUBLIC UINT8
// 10595 AppS2wCmd_Wrate(UINT8 *ptr)
// 10596 {
AppS2wCmd_Wrate:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 10597     GSN_WDD_TX_RATE_SET_PARAM_T param;
// 10598 	GSN_WDD_TX_RATE_GET_RESP txRate;
// 10599     UINT8 status=S2W_SUCCESS;
// 10600 	UINT32 val;
// 10601 	UINT8 *p;
// 10602 	INT32 retVal;
// 10603     if (ptr[0] == '?' && ptr[1] == '\0')
        LDRB     R0,[R0, #+0]
        LDR.W    R4,??DataTable490
        CMP      R0,#+63
        ITTT     EQ 
        LDREQ    R0,[SP, #+12]
        LDRBEQ   R0,[R0, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_Wrate_0
// 10604     {
// 10605         retVal= GsnWdd_TxRateGet(&s2wappMainTaskCtxt->if0.wddCtx,&txRate);
// 10606         if(retVal == GSN_SUCCESS)
        LDR      R0,[R4, #+0]
        ADD      R1,SP,#+8
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_TxRateGet
        BL       GsnWdd_TxRateGet
        CBNZ.N   R0,??AppS2wCmd_Wrate_1
// 10607         {
// 10608 			S2w_Printf("\r\n%d", txRate.dataFrameRate);
        LDRB     R1,[SP, #+8]
        ADR.W    R0,`?<Constant "\\r\\n%d">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 10609         	return S2W_SUCCESS;
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_Wrate_2
// 10610         }
// 10611 		else
// 10612 			return S2W_FAILURE;
??AppS2wCmd_Wrate_1:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Wrate_2
// 10613     }
// 10614     else
// 10615     {
// 10616 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wrate_0:
        BL       ?Subroutine39
// 10617         if (!p)
??CrossCallReturnLabel_208:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Wrate_2
// 10618         {
// 10619             return status;
// 10620         }
// 10621 		status = AppS2wParse_Int(p, &val);
// 10622         if((status != S2W_SUCCESS)||( S2W_SUCCESS != S2wRateValidation(val)))
        BL       ?Subroutine51
??CrossCallReturnLabel_276:
        CBNZ.N   R0,??AppS2wCmd_Wrate_3
        LDR      R0,[SP, #+0]
          CFI FunCall S2wRateValidation
        BL       S2wRateValidation
        CBNZ.N   R0,??AppS2wCmd_Wrate_3
// 10623             {
// 10624 			return S2W_EINVAL;
// 10625 			    }
// 10626         param.dataFrameRate = val;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+4]
// 10627         // update the default the mgmt and ctl rate
// 10628         param.mgmtFrameRate = val;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+5]
// 10629         param.ctlFrameRate = val;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+6]
// 10630 
// 10631 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 10632         if (p && *p)
??CrossCallReturnLabel_207:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wrate_4
// 10633 				{
// 10634             status = AppS2wParse_Int(p, &val);
// 10635 			if((status != S2W_SUCCESS) ||( S2W_SUCCESS != S2wRateValidation(val)))
        BL       ?Subroutine51
??CrossCallReturnLabel_275:
        CBNZ.N   R0,??AppS2wCmd_Wrate_3
        LDR      R0,[SP, #+0]
          CFI FunCall S2wRateValidation
        BL       S2wRateValidation
        CBNZ.N   R0,??AppS2wCmd_Wrate_3
// 10636             {
// 10637            		return S2W_EINVAL;
// 10638             }
// 10639 		    param.mgmtFrameRate = val;
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+5]
// 10640         }
// 10641 		p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wrate_4:
        BL       ?Subroutine39
// 10642         if (p && *p)
??CrossCallReturnLabel_206:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
        BEQ.N    ??AppS2wCmd_Wrate_5
// 10643         {
// 10644             status = AppS2wParse_Int(p, &val);
// 10645 			if((status != S2W_SUCCESS)||( S2W_SUCCESS != S2wRateValidation(val)))
        BL       ?Subroutine51
??CrossCallReturnLabel_274:
        CBNZ.N   R0,??AppS2wCmd_Wrate_3
        LDR      R0,[SP, #+0]
          CFI FunCall S2wRateValidation
        BL       S2wRateValidation
        CBZ.N    R0,??AppS2wCmd_Wrate_6
// 10646         {
// 10647     		return S2W_EINVAL;        
??AppS2wCmd_Wrate_3:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wrate_2
// 10648     	}
// 10649 		    param.ctlFrameRate = val;
??AppS2wCmd_Wrate_6:
        LDR      R0,[SP, #+0]
        STRB     R0,[SP, #+6]
// 10650         }
// 10651 
// 10652         status= GsnWdd_TxRateSet(&s2wappMainTaskCtxt->if0.wddCtx,&param);
// 10653 
// 10654     }
// 10655     return status;
??AppS2wCmd_Wrate_5:
        ADD      R1,SP,#+4
        LDR      R0,[R4, #+0]
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_TxRateSet
        BL       GsnWdd_TxRateSet
        UXTB     R0,R0
??AppS2wCmd_Wrate_2:
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock689
// 10656 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable472:
        DC32     profile_params

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable472_1:
        DC32     s2wSyncSemID

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%d">`:
        DC8 "\015\012%d"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond690 Using cfiCommon0
          CFI Function AppS2wCmd_TkipSeqNumGet
          CFI Conditional ??CrossCallReturnLabel_212
          CFI R4 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond691 Using cfiCommon0
          CFI (cfiCond691) Function AppS2wCmd_DnsServerSet
          CFI (cfiCond691) Conditional ??CrossCallReturnLabel_211
          CFI (cfiCond691) R4 Frame(CFA, -24)
          CFI (cfiCond691) R5 Frame(CFA, -20)
          CFI (cfiCond691) R6 Frame(CFA, -16)
          CFI (cfiCond691) R7 Frame(CFA, -12)
          CFI (cfiCond691) R8 Frame(CFA, -8)
          CFI (cfiCond691) R14 Frame(CFA, -4)
          CFI (cfiCond691) CFA R13+40
          CFI Block cfiCond692 Using cfiCommon0
          CFI (cfiCond692) Function AppS2wCmd_NcmAutoConf
          CFI (cfiCond692) Conditional ??CrossCallReturnLabel_210
          CFI (cfiCond692) R4 Frame(CFA, -8)
          CFI (cfiCond692) R14 Frame(CFA, -4)
          CFI (cfiCond692) CFA R13+24
          CFI Block cfiCond693 Using cfiCommon0
          CFI (cfiCond693) Function AppS2wCmd_NcmAutoConf
          CFI (cfiCond693) Conditional ??CrossCallReturnLabel_209
          CFI (cfiCond693) R4 Frame(CFA, -8)
          CFI (cfiCond693) R14 Frame(CFA, -4)
          CFI (cfiCond693) CFA R13+24
          CFI Block cfiCond694 Using cfiCommon0
          CFI (cfiCond694) Function AppS2wCmd_Wrate
          CFI (cfiCond694) Conditional ??CrossCallReturnLabel_208
          CFI (cfiCond694) R4 Frame(CFA, -8)
          CFI (cfiCond694) R14 Frame(CFA, -4)
          CFI (cfiCond694) CFA R13+24
          CFI Block cfiCond695 Using cfiCommon0
          CFI (cfiCond695) Function AppS2wCmd_Wrate
          CFI (cfiCond695) Conditional ??CrossCallReturnLabel_207
          CFI (cfiCond695) R4 Frame(CFA, -8)
          CFI (cfiCond695) R14 Frame(CFA, -4)
          CFI (cfiCond695) CFA R13+24
          CFI Block cfiCond696 Using cfiCommon0
          CFI (cfiCond696) Function AppS2wCmd_Wrate
          CFI (cfiCond696) Conditional ??CrossCallReturnLabel_206
          CFI (cfiCond696) R4 Frame(CFA, -8)
          CFI (cfiCond696) R14 Frame(CFA, -4)
          CFI (cfiCond696) CFA R13+24
          CFI Block cfiCond697 Using cfiCommon0
          CFI (cfiCond697) Function AppS2wCmd_Dgpio
          CFI (cfiCond697) Conditional ??CrossCallReturnLabel_205
          CFI (cfiCond697) R4 Frame(CFA, -8)
          CFI (cfiCond697) R14 Frame(CFA, -4)
          CFI (cfiCond697) CFA R13+24
          CFI Block cfiCond698 Using cfiCommon0
          CFI (cfiCond698) Function AppS2wCmd_Dgpio
          CFI (cfiCond698) Conditional ??CrossCallReturnLabel_204
          CFI (cfiCond698) R4 Frame(CFA, -8)
          CFI (cfiCond698) R14 Frame(CFA, -4)
          CFI (cfiCond698) CFA R13+24
          CFI Block cfiCond699 Using cfiCommon0
          CFI (cfiCond699) Function AppS2wCmd_ExtFlashErase
          CFI (cfiCond699) Conditional ??CrossCallReturnLabel_203
          CFI (cfiCond699) R4 Frame(CFA, -8)
          CFI (cfiCond699) R14 Frame(CFA, -4)
          CFI (cfiCond699) CFA R13+24
          CFI Block cfiCond700 Using cfiCommon0
          CFI (cfiCond700) Function AppS2wCmd_TempReadStart
          CFI (cfiCond700) Conditional ??CrossCallReturnLabel_202
          CFI (cfiCond700) R4 Frame(CFA, -8)
          CFI (cfiCond700) R14 Frame(CFA, -4)
          CFI (cfiCond700) CFA R13+24
          CFI Block cfiCond701 Using cfiCommon0
          CFI (cfiCond701) Function AppS2wCmd_TempReadStart
          CFI (cfiCond701) Conditional ??CrossCallReturnLabel_201
          CFI (cfiCond701) R4 Frame(CFA, -8)
          CFI (cfiCond701) R14 Frame(CFA, -4)
          CFI (cfiCond701) CFA R13+24
          CFI Block cfiPicker702 Using cfiCommon1
          CFI (cfiPicker702) NoFunction
          CFI (cfiPicker702) Picker
        THUMB
?Subroutine39:
        ADD      R0,SP,#+12
          CFI FunCall AppS2wCmd_TkipSeqNumGet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_DnsServerSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_NcmAutoConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_NcmAutoConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wrate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Dgpio AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Dgpio AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashErase AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_TempReadStart AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_TempReadStart AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond690
          CFI EndBlock cfiCond691
          CFI EndBlock cfiCond692
          CFI EndBlock cfiCond693
          CFI EndBlock cfiCond694
          CFI EndBlock cfiCond695
          CFI EndBlock cfiCond696
          CFI EndBlock cfiCond697
          CFI EndBlock cfiCond698
          CFI EndBlock cfiCond699
          CFI EndBlock cfiCond700
          CFI EndBlock cfiCond701
          CFI EndBlock cfiPicker702
// 10657 
// 10658 /**
// 10659  ******************************************************************
// 10660  * @ingroup S2w-Application
// 10661  * @brief Process the AT+NAUTO Command .
// 10662  *       AT+NAUTO command stores the settings for network auto connect.
// 10663  * @param ptr Pointer to the user string.
// 10664  * @return S2W_SUCCESS - operation successful.
// 10665  * @retval S2W_EINVAL  - operation failure-invalid command.
// 10666  * @retval S2W_FAILURE - operation failure
// 10667  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock703 Using cfiCommon0
          CFI Function AppS2wCmd_Nauto
        THUMB
// 10668 PUBLIC UINT8
// 10669 AppS2wCmd_Nauto(UINT8 *ptr)
// 10670 {
AppS2wCmd_Nauto:
        PUSH     {R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+12
        SUB      SP,SP,#+84
          CFI CFA R13+96
// 10671     S2W_NETDATA_T params;
// 10672     UINT8 *temp = ptr;
// 10673     UINT8 status = S2W_EINVAL;
// 10674     UINT8 *p;
// 10675     UINT32 port,srcPort=0;
// 10676 	ULONG ipAddress;
// 10677     UINT8 ipmaskH[4] = {0xff,0xff,0xff,0xff};
        ADR.W    R1,`?<Constant {255, 255, 255, 255}>`
        LDR      R2,[R1, #0]
        STR      R0,[SP, #+0]
// 10678     UINT8 ipmaskL[4] = {0x00,0x00,0x00,0x00};
        MOVS     R1,#+0
        MOVS     R0,#+0
        STR      R0,[SP, #+8]
        ADD      R0,SP,#+20
        STR      R2,[R0, #+0]
        ADD      R0,SP,#+16
// 10679     memset(&params, 0, sizeof(params));
        MOVS     R2,#+60
        STR      R1,[R0, #+0]
        ADD      R0,SP,#+24
          CFI FunCall memset
        BL       memset
// 10680     p = AppS2wParse_NextParamGet(&temp);
        BL       ?Subroutine25
??CrossCallReturnLabel_62:
        MOVS     R4,R0
// 10681     if (!p)
        BEQ.N    ??AppS2wCmd_Nauto_0
// 10682     {
// 10683         return status;
// 10684     }
// 10685     status = AppS2wParse_Boolean(p, &params.mode);
        ADD      R1,SP,#+24
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R5,R0
// 10686     if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_Nauto_1
// 10687     {
// 10688         return status;
// 10689     }
// 10690     p = AppS2wParse_NextParamGet(&temp);
        BL       ?Subroutine25
??CrossCallReturnLabel_61:
        MOVS     R4,R0
// 10691     if (!p)
        BEQ.W    ??AppS2wCmd_Nauto_2
// 10692     {
// 10693         return status;
// 10694     }
// 10695     status = AppS2wParse_Boolean(p, &params.proto);
        ADD      R1,SP,#+25
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        MOVS     R5,R0
// 10696     if (status != S2W_SUCCESS)
??AppS2wCmd_Nauto_1:
        BNE.N    ??AppS2wCmd_Nauto_2
// 10697     {
// 10698         return status;
// 10699     }
// 10700     if(params.mode == 0)//client-tcp/udp
        LDRB     R0,[SP, #+24]
        CMP      R0,#+0
        ADD      R0,SP,#+0
        BNE.N    ??AppS2wCmd_Nauto_3
// 10701     {
// 10702         //status = AppS2wParse_AddrPort(&temp, &params);
// 10703      
// 10704        p = AppS2wParse_NextParamGet(&temp);
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
// 10705         if (!p)
        BEQ.N    ??AppS2wCmd_Nauto_0
// 10706         {
// 10707           return S2W_EINVAL;
// 10708         }
// 10709          if(inet_addr((const char *)p) != -1)
          CFI FunCall inet_addr
        BL       inet_addr
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_Nauto_4
// 10710          {
// 10711               status = AppS2wParse_Ip(p, params.ipAddr );
// 10712               if(status != S2W_SUCCESS)
        ADD      R1,SP,#+28
        MOV      R0,R4
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nauto_5
// 10713               {
// 10714 
// 10715                   return S2W_EINVAL;
// 10716             }
// 10717             p = AppS2wParse_NextParamGet(&temp);
// 10718             if (!p)
// 10719             {
// 10720               return S2W_EINVAL;
// 10721             }
// 10722             else
// 10723             {
// 10724                status = AppS2wParse_Int(p, &port);
// 10725               if (status != S2W_SUCCESS || !is_valid_port(port))
// 10726               {
// 10727                 return S2W_EINVAL;
// 10728               }
// 10729               params.port = port;
// 10730             }
// 10731          }
// 10732         else
// 10733         {
// 10734            /* Can be URL  */
// 10735           if((s2wLinkState != S2W_LINK_STATE_DISCONNECTED)  && (L3ConnectStatus == TRUE))
// 10736           {
// 10737             	status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx,(UINT8*)p,&ipAddress,5);
// 10738             if(status != GSN_SUCCESS)
// 10739              return S2W_EINVAL;
// 10740 				params.ipAddr[0] = (ipAddress & 0xff000000)>>24 ;			
// 10741 				params.ipAddr[1] = (ipAddress & 0x00ff0000)>>16;
// 10742 				params.ipAddr[2] = (ipAddress & 0x0000ff00)>>8;
// 10743 				params.ipAddr[3] = (ipAddress & 0x000000ff);
// 10744           }
// 10745           else
// 10746             {
// 10747               params.isFqdn = TRUE;
// 10748               /* resolve it during NCM L4 connection */
// 10749               memcpy(params.fqdn,p,strlen((const char*)p));
// 10750             }
// 10751             
// 10752             p = AppS2wParse_NextParamGet(&temp);
// 10753             if (!p)
// 10754             {
// 10755               return S2W_EINVAL;
// 10756             }
// 10757             else
// 10758             {
// 10759                status = AppS2wParse_Int(p, &port);
// 10760               if (status != S2W_SUCCESS || !is_valid_port(port))
// 10761               {
// 10762                 return S2W_EINVAL;
// 10763               }
// 10764               params.port = port;
// 10765             }
// 10766         }
// 10767     }
// 10768     else //server -tcp/udp no need of ip address
// 10769     {
// 10770         p = AppS2wParse_NextParamGet(&temp);
// 10771         if (!p)
// 10772         {
// 10773             return S2W_EINVAL;
// 10774         }
// 10775         else
// 10776         {
// 10777             if(*p != '\0')
// 10778             {
// 10779                 status = AppS2wParse_Ip(p, params.ipAddr );
// 10780                 if (status != S2W_SUCCESS)
// 10781                 {
// 10782                     return status;
// 10783                 }
// 10784             }
// 10785         }
// 10786         p = AppS2wParse_NextParamGet(&temp);
??AppS2wCmd_Nauto_6:
        BL       ?Subroutine25
??CrossCallReturnLabel_60:
        MOVS     R4,R0
// 10787         if (!p)
??AppS2wCmd_Nauto_0:
        BEQ.N    ??AppS2wCmd_Nauto_7
// 10788         {
// 10789             return S2W_EINVAL;
// 10790         }
// 10791         status = AppS2wParse_Int(p, &port);
// 10792         if (status != S2W_SUCCESS || !is_valid_port(port))
        BL       ?Subroutine53
??CrossCallReturnLabel_336:
        CMP      R0,#+0
??AppS2wCmd_Nauto_5:
        BNE.N    ??AppS2wCmd_Nauto_7
        LDR      R0,[SP, #+12]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nauto_7
        CMP      R0,#+65536
        BCS.N    ??AppS2wCmd_Nauto_7
// 10793         {
// 10794             return S2W_EINVAL;
// 10795         }
// 10796         params.port = port;
        STRH     R0,[SP, #+26]
// 10797     }
// 10798     if((params.mode == 0) &&(params.proto == S2W_NETDATA_PROTO_UDP))//client-/udp
        LDR.W    R5,??DataTable491
        LDRB     R0,[SP, #+24]
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nauto_8
        LDRB     R0,[SP, #+25]
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nauto_9
// 10799     {
// 10800 	    p = AppS2wParse_NextParamGet(&temp);
        BL       ?Subroutine25
??CrossCallReturnLabel_59:
        MOVS     R4,R0
// 10801 	    if ( (p) &&(*p != '\0'))
        ITT      NE 
        LDRBNE   R0,[R4, #+0]
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_Nauto_10
// 10802 	    {
// 10803 	        status = AppS2wParse_Int(p, &srcPort);
// 10804 	        if (status != S2W_SUCCESS || !is_valid_port(srcPort))
        BL       ?Subroutine57
??CrossCallReturnLabel_362:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nauto_7
        LDR      R0,[SP, #+8]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nauto_7
        CMP      R0,#+65536
        BCS.N    ??AppS2wCmd_Nauto_7
// 10805 	        {
// 10806 	            return S2W_EINVAL;
// 10807 	        }
// 10808 	        if (AppS2wParse_NextParamGet(&temp))
        BL       ?Subroutine25
// 10809 	            return S2W_EINVAL;
// 10810         }
??CrossCallReturnLabel_58:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nauto_11
        B.N      ??AppS2wCmd_Nauto_7
??AppS2wCmd_Nauto_4:
        LDR.W    R0,??DataTable494
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_Nauto_12
        LDR.W    R0,??DataTable494_1
        LDRB     R0,[R0, #+1]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_Nauto_12
        BL       ?Subroutine75
??CrossCallReturnLabel_443:
        MOVS     R3,#+5
        BL       ?Subroutine84
??CrossCallReturnLabel_464:
        UXTB     R0,R0
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Nauto_7
        LDR      R0,[SP, #+4]
        LSRS     R0,R0,#+24
        STRB     R0,[SP, #+28]
        LDR      R0,[SP, #+4]
        LSRS     R0,R0,#+16
        STRB     R0,[SP, #+29]
        LDR      R0,[SP, #+4]
        LSRS     R0,R0,#+8
        STRB     R0,[SP, #+30]
        LDR      R0,[SP, #+4]
        STRB     R0,[SP, #+31]
        B.N      ??AppS2wCmd_Nauto_6
??AppS2wCmd_Nauto_12:
        MOVS     R0,#+1
        STRB     R0,[SP, #+48]
        BL       ?Subroutine70
??CrossCallReturnLabel_424:
        MOV      R2,R0
        MOV      R1,R4
        BL       ??Subroutine113_0
??CrossCallReturnLabel_550:
        B.N      ??AppS2wCmd_Nauto_6
??AppS2wCmd_Nauto_3:
          CFI FunCall AppS2wParse_NextParamGet
        BL       AppS2wParse_NextParamGet
        MOVS     R4,R0
        BEQ.N    ??AppS2wCmd_Nauto_7
        LDRB     R0,[R4, #+0]
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_Nauto_6
        ADD      R1,SP,#+28
        MOV      R0,R4
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
        MOVS     R5,R0
        BEQ.N    ??AppS2wCmd_Nauto_6
??AppS2wCmd_Nauto_2:
        MOV      R0,R5
        B.N      ??AppS2wCmd_Nauto_13
// 10811         else
// 10812         {
// 10813 			srcPort = 0;
??AppS2wCmd_Nauto_10:
        MOVS     R0,#+0
        STR      R0,[SP, #+8]
// 10814 		}
// 10815 		s2wCurrent.udpSrcPort = srcPort;
??AppS2wCmd_Nauto_11:
        LDR      R0,[SP, #+8]
        STRH     R0,[R5, #+934]
// 10816 	}
// 10817     if(params.mode == 0  &&  params.isFqdn != TRUE) // check only in case of client
??AppS2wCmd_Nauto_8:
        LDRB     R0,[SP, #+24]
        CBNZ.N   R0,??AppS2wCmd_Nauto_14
??AppS2wCmd_Nauto_9:
        LDRB     R0,[SP, #+48]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_Nauto_14
// 10818     {
// 10819         if((memcmp((UINT8*)params.ipAddr,ipmaskH,3) ==0) ||
// 10820            (memcmp((UINT8*)params.ipAddr,ipmaskL,4) ==0))
        MOVS     R2,#+3
        ADD      R1,SP,#+20
        ADD      R0,SP,#+28
          CFI FunCall memcmp
        BL       memcmp
        CBZ.N    R0,??AppS2wCmd_Nauto_7
        MOVS     R2,#+4
        ADD      R1,SP,#+16
        ADD      R0,SP,#+28
          CFI FunCall memcmp
        BL       memcmp
        CBNZ.N   R0,??AppS2wCmd_Nauto_14
// 10821         {
// 10822             return S2W_EINVAL;
??AppS2wCmd_Nauto_7:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Nauto_13
// 10823         }
// 10824     }
// 10825     memcpy(&s2wCurrent.autoNetdata, &params,
// 10826            sizeof(s2wCurrent.autoNetdata));
??AppS2wCmd_Nauto_14:
        MOVS     R2,#+60
        ADD      R1,SP,#+24
        ADD      R0,R5,#+60
          CFI FunCall memcpy
        BL       memcpy
// 10827     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Nauto_13:
        ADD      SP,SP,#+84
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock703
// 10828 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable473:
        DC32     stbySuccess

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable473_1:
        DC32     s2wAutoConnState

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable473_2:
        DC32     0x41010194

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable473_3:
        DC32     0x41010164

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable473_4:
        DC32     ncmAutoMode

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant {255, 255, 255, 255}>`:
        DC8 255, 255, 255, 255

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond704 Using cfiCommon0
          CFI Function AppS2wCmd_DnsLookup
          CFI Conditional ??CrossCallReturnLabel_465
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond705 Using cfiCommon0
          CFI (cfiCond705) Function AppS2wCmd_Nauto
          CFI (cfiCond705) Conditional ??CrossCallReturnLabel_464
          CFI (cfiCond705) R4 Frame(CFA, -12)
          CFI (cfiCond705) R5 Frame(CFA, -8)
          CFI (cfiCond705) R14 Frame(CFA, -4)
          CFI (cfiCond705) CFA R13+96
          CFI Block cfiPicker706 Using cfiCommon1
          CFI (cfiPicker706) NoFunction
          CFI (cfiPicker706) Picker
        THUMB
?Subroutine84:
        ADD      R2,SP,#+4
        MOV      R1,R4
        ADDS     R0,R0,#+80
          CFI FunCall AppS2wCmd_DnsLookup GsnNwIf_DnsHostByNameGet
          CFI FunCall AppS2wCmd_Nauto GsnNwIf_DnsHostByNameGet
        B.W      GsnNwIf_DnsHostByNameGet
          CFI EndBlock cfiCond704
          CFI EndBlock cfiCond705
          CFI EndBlock cfiPicker706

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond707 Using cfiCommon0
          CFI Function AppS2wCmd_SystemTimeSet
          CFI Conditional ??CrossCallReturnLabel_426
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+80
          CFI Block cfiCond708 Using cfiCommon0
          CFI (cfiCond708) Function AppS2wCmd_Dns
          CFI (cfiCond708) Conditional ??CrossCallReturnLabel_425
          CFI (cfiCond708) R4 Frame(CFA, -20)
          CFI (cfiCond708) R5 Frame(CFA, -16)
          CFI (cfiCond708) R6 Frame(CFA, -12)
          CFI (cfiCond708) R7 Frame(CFA, -8)
          CFI (cfiCond708) R14 Frame(CFA, -4)
          CFI (cfiCond708) CFA R13+56
          CFI Block cfiCond709 Using cfiCommon0
          CFI (cfiCond709) Function AppS2wCmd_Nauto
          CFI (cfiCond709) Conditional ??CrossCallReturnLabel_424
          CFI (cfiCond709) R4 Frame(CFA, -12)
          CFI (cfiCond709) R5 Frame(CFA, -8)
          CFI (cfiCond709) R14 Frame(CFA, -4)
          CFI (cfiCond709) CFA R13+96
          CFI Block cfiCond710 Using cfiCommon0
          CFI (cfiCond710) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond710) Conditional ??CrossCallReturnLabel_423
          CFI (cfiCond710) R4 Frame(CFA, -12)
          CFI (cfiCond710) R5 Frame(CFA, -8)
          CFI (cfiCond710) R14 Frame(CFA, -4)
          CFI (cfiCond710) CFA R13+24
          CFI Block cfiCond711 Using cfiCommon0
          CFI (cfiCond711) Function AppS2wCmd_CoapSetOption
          CFI (cfiCond711) Conditional ??CrossCallReturnLabel_422
          CFI (cfiCond711) R4 Frame(CFA, -12)
          CFI (cfiCond711) R5 Frame(CFA, -8)
          CFI (cfiCond711) R14 Frame(CFA, -4)
          CFI (cfiCond711) CFA R13+24
          CFI Block cfiPicker712 Using cfiCommon1
          CFI (cfiPicker712) NoFunction
          CFI (cfiPicker712) Picker
        THUMB
?Subroutine70:
        MOV      R0,R4
          CFI FunCall AppS2wCmd_SystemTimeSet strlen
          CFI FunCall AppS2wCmd_Dns strlen
          CFI FunCall AppS2wCmd_Nauto strlen
          CFI FunCall AppS2wCmd_CoapSetOption strlen
          CFI FunCall AppS2wCmd_CoapSetOption strlen
        B.W      strlen
          CFI EndBlock cfiCond707
          CFI EndBlock cfiCond708
          CFI EndBlock cfiCond709
          CFI EndBlock cfiCond710
          CFI EndBlock cfiCond711
          CFI EndBlock cfiPicker712

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock713 Using cfiCommon0
          CFI Function AppS2wCmd_IdOutput
        THUMB
// 10829 UINT8
// 10830 AppS2wCmd_IdOutput(UINT8 *ptr)
// 10831 {
AppS2wCmd_IdOutput:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 10832     UINT32 which;
// 10833     UINT8 status;
// 10834 
// 10835     status = AppS2wParse_Int(ptr, &which);
        BL       ?Subroutine51
??CrossCallReturnLabel_273:
        MOVS     R4,R0
// 10836     if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_IdOutput_0
// 10837     {
// 10838         return status;
// 10839     }
// 10840 
// 10841     switch (which)
        LDR      R1,[SP, #+0]
        ADR.W    R0,`?<Constant "\\r\\n%s">`
        CBZ.N    R1,??AppS2wCmd_IdOutput_1
        CMP      R1,#+2
        BEQ.N    ??AppS2wCmd_IdOutput_2
        BCC.N    ??AppS2wCmd_IdOutput_3
        B.N      ??AppS2wCmd_IdOutput_4
// 10842     {
// 10843         case S2W_ID_OEM:
// 10844             S2w_Printf("\r\n%s", S2W_OEM_ID);
??AppS2wCmd_IdOutput_1:
        ADR.W    R1,`?<Constant "GainSpan">`
        B.N      ??AppS2wCmd_IdOutput_5
// 10845             break;
// 10846 
// 10847         case S2W_ID_HW_VERSION:
// 10848             {
// 10849                 S2w_Printf("\r\n%s", S2W_HW_VERSION);
??AppS2wCmd_IdOutput_3:
        ADR.W    R1,`?<Constant "GS2011">`
        B.N      ??AppS2wCmd_IdOutput_5
// 10850             }
// 10851             break;
// 10852 
// 10853         case S2W_ID_SW_VERSION:
// 10854             S2w_Printf("\r\n%s", S2W_SW_VERSION);
??AppS2wCmd_IdOutput_2:
        ADR.W    R1,`?<Constant "5.1.5">`
??AppS2wCmd_IdOutput_5:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 10855             break;
        B.N      ??AppS2wCmd_IdOutput_0
// 10856 
// 10857         default:
// 10858             status = S2W_EINVAL;
??AppS2wCmd_IdOutput_4:
        MOVS     R4,#+2
// 10859     }
// 10860     return status;
??AppS2wCmd_IdOutput_0:
        MOV      R0,R4
        POP      {R1,R2,R4,PC}    ;; return
          CFI EndBlock cfiBlock713
// 10861 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%s">`:
        DC8 "\015\012%s"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GainSpan">`:
        DC8 "GainSpan"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "GS2011">`:
        DC8 "GS2011"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "5.1.5">`:
        DC8 "5.1.5"
        DC8 0, 0
// 10862 
// 10863 #ifdef S2W_PING_TRACE
// 10864 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock714 Using cfiCommon0
          CFI Function AppS2w_PingTaskNotify
        THUMB
// 10865 PUBLIC VOID
// 10866 AppS2w_PingTaskNotify(INT32 msg)
// 10867 {
AppS2w_PingTaskNotify:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 10868     /**< Signal APP */
// 10869     GsnOsal_QueuePut(&pingThreadMsgQueue, (UINT8 *)&msg);
        MOVS     R2,#+0
        ADD      R1,SP,#+0
        LDR.W    R0,??DataTable496
          CFI FunCall _tx_queue_send
        BL       _tx_queue_send
// 10870 }
        POP      {R0,PC}          ;; return
          CFI EndBlock cfiBlock714

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable474:
        DC32     s2wappMainTaskNotifier
// 10871 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock715 Using cfiCommon0
          CFI Function AppS2w_PingThreadEntry
        THUMB
// 10872 PRIVATE VOID
// 10873 AppS2w_PingThreadEntry(UINT32 ctx)
// 10874 {	
AppS2w_PingThreadEntry:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 10875     UINT32 msg = 0;
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
        B.N      ??AppS2w_PingThreadEntry_0
// 10876     /**< Handle events forever */
// 10877     while( TRUE )
// 10878     {
// 10879         /**< wait on message queue */
// 10880         GsnOsal_QueueGet( &pingThreadMsgQueue, ( UINT8* )&msg, GSN_OSAL_WAIT_FOREVER );
// 10881 		
// 10882 		if(	APP_EVENT_PING_REQUEST == msg)
// 10883 		{
// 10884 			s2wPingStart();
??AppS2w_PingThreadEntry_1:
          CFI FunCall s2wPingStart
        BL       s2wPingStart
// 10885 		}
??AppS2w_PingThreadEntry_0:
        MOV      R2,#-1
        ADD      R1,SP,#+0
        LDR.W    R0,??DataTable496
          CFI FunCall _tx_queue_receive
        BL       _tx_queue_receive
        LDR      R0,[SP, #+0]
        CMP      R0,#+34
        BEQ.N    ??AppS2w_PingThreadEntry_1
// 10886 		else if(APP_EVENT_PING_STOP == msg)
        CMP      R0,#+35
        BNE.N    ??AppS2w_PingThreadEntry_0
// 10887 		{
// 10888         	s2wPingStop();
          CFI FunCall s2wPingStop
        BL       s2wPingStop
        B.N      ??AppS2w_PingThreadEntry_0
          CFI EndBlock cfiBlock715
// 10889 		}
// 10890     }
// 10891 	
// 10892 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock716 Using cfiCommon0
          CFI Function AppS2w_PingThreadCreate
        THUMB
// 10893 VOID AppS2w_PingThreadCreate()
// 10894 {
AppS2w_PingThreadCreate:
        PUSH     {R0-R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+24
// 10895 	UINT32 pingMsgQueSize = APP_CFG_PING_MAX_MSG_IN_MBOX * sizeof(UINT32);
// 10896 	
// 10897 	pingThreadMsgQueueBuf = (UINT8 *)MALLOC(pingMsgQueSize);
        LDR.W    R4,??DataTable496_2
        MOVS     R0,#+32
          CFI FunCall MALLOC
        BL       MALLOC
        STR      R0,[R4, #+0]
// 10898 	
// 10899 	/**< Creating the Mailbox to receive messages */
// 10900 		GsnOsal_QueueCreate( &pingThreadMsgQueue, 1,
// 10901 								( UINT8* )pingThreadMsgQueueBuf,
// 10902 								pingMsgQueSize);
        MOVS     R0,#+32
        STR      R0,[SP, #+0]
        MOVS     R2,#+1
        LDR      R3,[R4, #+0]
        MOVS     R1,#+0
        ADD      R0,R4,#+8
          CFI FunCall _tx_queue_create
        BL       _tx_queue_create
// 10903 	
// 10904 	pingThreadStack = (UINT8 *)MALLOC(PING_THRAED_STACK_SIZE);
        MOV      R0,#+1024
          CFI FunCall MALLOC
        BL       MALLOC
        STR      R0,[R4, #+4]
// 10905 	
// 10906 	GsnOsal_ThreadCreate(AppS2w_PingThreadEntry, &appCtx, &pingThread,
// 10907 							"Ping Thread", APP_PING_THREAD_PRI, (UINT8 *)pingThreadStack,
// 10908 							PING_THRAED_STACK_SIZE, GSN_OSAL_THREAD_INITIAL_READY);
        MOVS     R0,#+1
        STR      R0,[SP, #+12]
        MOV      R0,#+1024
        STR      R0,[SP, #+8]
        ADD      R2,R4,#+64
        LDR      R0,[R4, #+4]
        ADR.W    R3,`?<Constant "Ping Thread">`
        LDR.W    R1,??DataTable496_3
        STR      R0,[SP, #+4]
        MOVS     R0,#+24
        STR      R0,[SP, #+0]
        LDR.W    R0,??DataTable496_4
          CFI FunCall GsnOsal_ThreadCreate
        BL       GsnOsal_ThreadCreate
// 10909 
// 10910 }
        POP      {R0-R4,PC}       ;; return
          CFI EndBlock cfiBlock716

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable476:
        DC32     0x4101009c

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable476_1:
        DC32     GratiousArpHandler

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable476_2:
        DC32     s2wIsAutoconnected

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable476_3:
        DC32     acNcmTimer

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "Ping Thread">`:
        DC8 "Ping Thread"

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock717 Using cfiCommon0
          CFI Function AppS2wCmd_Ping
        THUMB
// 10911 UINT8
// 10912 AppS2wCmd_Ping(UINT8* ptr)
// 10913 {
AppS2wCmd_Ping:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
// 10914   UINT8 *p,status=S2W_FAILURE;
// 10915   S2W_PINGDATA_T pingParams;
// 10916   
// 10917 	if(0 == pingThreadCreated)
        LDR.W    R4,??DataTable496_5
        LDR      R0,[R4, #+4]
        SUB      SP,SP,#+52
          CFI CFA R13+72
        CBNZ.N   R0,??AppS2wCmd_Ping_0
// 10918 	{
// 10919 		AppS2w_PingThreadCreate();
          CFI FunCall AppS2w_PingThreadCreate
        BL       AppS2w_PingThreadCreate
// 10920 		pingThreadCreated = 1;
        MOVS     R0,#+1
        STR      R0,[R4, #+4]
// 10921 	}
// 10922     s2wPingStarted = FALSE;
??AppS2wCmd_Ping_0:
        MOVS     R0,#+0
        STRB     R0,[R4, #+0]
// 10923     memset (&pingParams, 0, sizeof (S2W_PINGDATA_T));
        MOVS     R2,#+40
        BL       ?Subroutine16
// 10924     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_28:
        BL       ?Subroutine41
??CrossCallReturnLabel_227:
        MOVS     R6,R0
// 10925     if (!p)
        BEQ.N    ??AppS2wCmd_Ping_1
// 10926     {
// 10927         return status;
// 10928     }
// 10929     status = AppS2wParse_Ip(p, (UINT8*)&pingParams.Ipv4Addr);
// 10930     if (status != S2W_SUCCESS)
        LDR.W    R5,??DataTable490
        ADD      R1,SP,#+8
          CFI FunCall AppS2wParse_Ip
        BL       AppS2wParse_Ip
        CBZ.N    R0,??AppS2wCmd_Ping_2
// 10931     {
// 10932 #ifdef S2W_IPv6_SUPPORT
// 10933         status =  inet_pton(AF_INET6, (const char*)p, (VOID*) pingParams.ip_address.nxd_ip_address.v6);
// 10934         if(status != TRUE)
// 10935           return S2W_EINVAL;
// 10936       GSN_IPv6_CHANGE_ENDIAN( (UINT32*)pingParams.ip_address.nxd_ip_address.v6);
// 10937       pingParams.ip_address.nxd_ip_version = NX_IP_VERSION_V6;
// 10938       pingParams.IpVersion |= ADDR_TYPE_IPv6;
// 10939 #else     
// 10940         /* Can be FQDN */
// 10941       pingParams.Ipv4Addr = 0;
        MOVS     R0,#+0
        STR      R0,[SP, #+8]
// 10942       GsnNwIf_DnsRetryCountSet(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,10);
        MOVS     R1,#+10
        BL       ?Subroutine131
// 10943       status = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx,(UINT8*)p,(ULONG*)&pingParams.Ipv4Addr,5);
// 10944             if(status != GSN_SUCCESS  || pingParams.Ipv4Addr == 0)
??CrossCallReturnLabel_606:
        LDR      R0,[R5, #+0]
        ADD      R0,R0,#+5120
        MOVS     R3,#+5
        ADD      R2,SP,#+8
        MOV      R1,R6
        ADDS     R0,R0,#+80
          CFI FunCall GsnNwIf_DnsHostByNameGet
        BL       GsnNwIf_DnsHostByNameGet
        UXTB     R0,R0
        CMP      R0,#+0
        BNE.W    ??AppS2wCmd_Ping_3
        LDR      R0,[SP, #+8]
        CMP      R0,#+0
??AppS2wCmd_Ping_1:
        BEQ.W    ??AppS2wCmd_Ping_3
// 10945         return S2W_FAILURE;
// 10946         pingParams.Ipv4Addr = htonl(pingParams.Ipv4Addr);
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R0,R1,R0, LSR #+24
        LDR      R1,[SP, #+8]
        AND      R1,R1,#0xFF00
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[SP, #+8]
        ORR      R0,R0,R1, LSL #+24
        STR      R0,[SP, #+8]
// 10947 #endif
// 10948    }
// 10949     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_2:
        BL       ?Subroutine41
??CrossCallReturnLabel_226:
        MOVS     R6,R0
// 10950     if (p)
        BEQ.N    ??AppS2wCmd_Ping_4
// 10951     {
// 10952     status = AppS2wParse_Int(p, &pingParams.trails);
        ADD      R1,SP,#+28
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 10953     if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Ping_5
// 10954     {
// 10955         return status;
// 10956     }
// 10957     }
// 10958 
// 10959     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_4:
        BL       ?Subroutine41
??CrossCallReturnLabel_225:
        MOVS     R6,R0
// 10960     if (p)
        BEQ.N    ??AppS2wCmd_Ping_6
// 10961     {
// 10962     status = AppS2wParse_Int(p, &pingParams.interval);
        BL       ?Subroutine53
// 10963     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_335:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Ping_5
// 10964     {
// 10965         return status;
// 10966     }
// 10967 
// 10968     if (pingParams.interval &&
// 10969         ((pingParams.interval < 1000) || (pingParams.interval > 99000)))
        LDR      R0,[SP, #+12]
        CBZ.N    R0,??AppS2wCmd_Ping_6
        SUB      R0,R0,#+1000
        LDR.W    R1,??DataTable497  ;; 0x17ed1
        CMP      R0,R1
        BCS.N    ??AppS2wCmd_Ping_7
// 10970     {
// 10971         return S2W_EINVAL;
// 10972     }
// 10973     }
// 10974     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_6:
        BL       ?Subroutine41
??CrossCallReturnLabel_224:
        MOVS     R6,R0
// 10975     if (p)
        BEQ.N    ??AppS2wCmd_Ping_8
// 10976             {
// 10977     status = AppS2wParse_Int(p, &pingParams.dataLen);
        BL       ?Subroutine54
// 10978     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_343:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Ping_5
// 10979     {
// 10980         return status;
// 10981             }
// 10982 
// 10983     if (pingParams.dataLen > 1024)
        LDR      R0,[SP, #+16]
        CMP      R0,#+1024
        BLS.N    ??AppS2wCmd_Ping_9
        B.N      ??AppS2wCmd_Ping_7
// 10984     {
// 10985         return S2W_EINVAL;
// 10986     }
// 10987     }
// 10988     else
// 10989     {
// 10990       pingParams.dataLen = 56;
??AppS2wCmd_Ping_8:
        MOVS     R0,#+56
        STR      R0,[SP, #+16]
// 10991     }
// 10992     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_9:
        BL       ?Subroutine41
??CrossCallReturnLabel_223:
        MOVS     R6,R0
// 10993     if (p)
        BEQ.N    ??AppS2wCmd_Ping_10
// 10994     {
// 10995 
// 10996     status = AppS2wParse_Int(p, &pingParams.tos);
        BL       ?Subroutine56
// 10997     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_356:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Ping_5
// 10998     {
// 10999         return status;
// 11000     }
// 11001 
// 11002     if (pingParams.tos>99)
        LDR      R0,[SP, #+20]
        CMP      R0,#+100
        BCS.N    ??AppS2wCmd_Ping_7
// 11003     {
// 11004         return S2W_EINVAL;
// 11005     }
// 11006     }
// 11007     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_10:
        BL       ?Subroutine41
??CrossCallReturnLabel_222:
        MOVS     R6,R0
// 11008     if (p)
        BEQ.N    ??AppS2wCmd_Ping_11
// 11009     {
// 11010     status = AppS2wParse_Int(p, &pingParams.ttl);
        ADD      R1,SP,#+24
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 11011     if (status != S2W_SUCCESS)
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Ping_5
// 11012     {
// 11013     return status;
// 11014     }
// 11015     if (pingParams.ttl>255)
        LDR      R0,[SP, #+24]
        CMP      R0,#+255
        BHI.N    ??AppS2wCmd_Ping_7
// 11016     {
// 11017         return S2W_EINVAL;
// 11018     }
// 11019     }
// 11020     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Ping_11:
        BL       ?Subroutine41
??CrossCallReturnLabel_221:
        MOVS     R6,R0
// 11021     if (p)
        BEQ.N    ??AppS2wCmd_Ping_12
// 11022     {
// 11023     if (strlen ((const INT8*)p) > 16)
          CFI FunCall strlen
        BL       strlen
        CMP      R0,#+17
        BCC.N    ??AppS2wCmd_Ping_13
// 11024     {
// 11025         return S2W_EINVAL;
??AppS2wCmd_Ping_7:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Ping_5
// 11026     }
// 11027     strcpy (pingParams.payload, (const INT8*)p);
??AppS2wCmd_Ping_13:
        MOV      R1,R6
        ADD      R0,SP,#+32
          CFI FunCall strcpy
        BL       strcpy
// 11028    } 
// 11029     memcpy(&s2wappMainTaskCtxt->pingParams,&pingParams,sizeof(S2W_PINGDATA_T));
??AppS2wCmd_Ping_12:
        LDR      R0,[R5, #+0]
        MOVW     R6,#+29996
        MOVS     R2,#+40
        ADD      R1,SP,#+8
        ADDS     R0,R6,R0
          CFI FunCall memcpy
        BL       memcpy
// 11030     s2wappMainTaskCtxt->pingParams.Ipv4Addr = htonl(s2wappMainTaskCtxt->pingParams.Ipv4Addr);
        LDR      R0,[R5, #+0]
        LDR      R1,[R6, R0]
        LSRS     R2,R1,#+8
        AND      R2,R2,#0xFF00
        ORR      R2,R2,R1, LSR #+24
        AND      R3,R1,#0xFF00
        ORR      R2,R2,R3, LSL #+8
        ORR      R1,R2,R1, LSL #+24
        STR      R1,[R6, R0]
// 11031 #ifdef S2W_IPv6_SUPPORT    
// 11032          if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
// 11033          {
// 11034             INT8 ipv6str[INET6_ADDRSTRLEN];
// 11035             S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
// 11036         S2w_Printf("\r\nPinging for %s with %d bytes of data\r\n",ipv6str,s2wappMainTaskCtxt->pingParams.dataLen );
// 11037          }
// 11038          else
// 11039 #endif         
// 11040     S2w_Printf("\r\nPinging for %d.%d.%d.%d with %d bytes of data\r\n",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff),s2wappMainTaskCtxt->pingParams.dataLen);
        ADDS     R0,R6,R0
        UBFX     R3,R1,#+8,#+8
        LDR      R0,[R0, #+8]
        STR      R0,[SP, #+4]
        UBFX     R2,R1,#+16,#+8
        UXTB     R0,R1
        STR      R0,[SP, #+0]
        LSRS     R1,R1,#+24
        ADR.W    R0,`?<Constant "\\r\\nPinging for %d.%d.%...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 11041     if(s2wLinkState == S2W_LINK_STATE_DISCONNECTED)
        LDR.W    R0,??DataTable494
        LDRB     R0,[R0, #+0]
        CBNZ.N   R0,??AppS2wCmd_Ping_14
// 11042     {
// 11043         S2w_Printf("\r\nNo Route to Host\r\n");
        ADR.W    R0,`?<Constant "\\r\\nNo Route to Host\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 11044         return S2W_FAILURE;
??AppS2wCmd_Ping_3:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_Ping_5
// 11045     }
// 11046     s2wPingStarted = TRUE;
??AppS2wCmd_Ping_14:
        MOVS     R0,#+1
        STRB     R0,[R4, #+0]
// 11047 	AppS2w_PingTaskNotify(APP_EVENT_PING_REQUEST);
        MOVS     R0,#+34
          CFI FunCall AppS2w_PingTaskNotify
        BL       AppS2w_PingTaskNotify
// 11048     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Ping_5:
        ADD      SP,SP,#+56
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock717
// 11049 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable477:
        DC32     dhcpSrvrCfg+0x30

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nPinging for %d.%d.%...">`:
        DC8 "\015\012Pinging for %d.%d.%d.%d with %d bytes of data\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nNo Route to Host\\r\\n">`:
        DC8 "\015\012No Route to Host\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond718 Using cfiCommon0
          CFI Function AppS2wCmd_DnsLookup
          CFI Conditional ??CrossCallReturnLabel_607
          CFI R4 Frame(CFA, -12)
          CFI R5 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond719 Using cfiCommon0
          CFI (cfiCond719) Function AppS2wCmd_Ping
          CFI (cfiCond719) Conditional ??CrossCallReturnLabel_606
          CFI (cfiCond719) R4 Frame(CFA, -16)
          CFI (cfiCond719) R5 Frame(CFA, -12)
          CFI (cfiCond719) R6 Frame(CFA, -8)
          CFI (cfiCond719) R14 Frame(CFA, -4)
          CFI (cfiCond719) CFA R13+72
          CFI Block cfiPicker720 Using cfiCommon1
          CFI (cfiPicker720) NoFunction
          CFI (cfiPicker720) Picker
        THUMB
?Subroutine131:
        LDR      R0,[R5, #+0]
        ADD      R0,R0,#+14848
        ADDS     R0,R0,#+60
          CFI FunCall AppS2wCmd_DnsLookup nx_dns_retry_count_set
          CFI FunCall AppS2wCmd_Ping nx_dns_retry_count_set
        B.W      nx_dns_retry_count_set
          CFI EndBlock cfiCond718
          CFI EndBlock cfiCond719
          CFI EndBlock cfiPicker720

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond721 Using cfiCommon0
          CFI Function AppS2wCmd_Ping
          CFI Conditional ??CrossCallReturnLabel_227
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+72
          CFI Block cfiCond722 Using cfiCommon0
          CFI (cfiCond722) Function AppS2wCmd_Ping
          CFI (cfiCond722) Conditional ??CrossCallReturnLabel_226
          CFI (cfiCond722) R4 Frame(CFA, -16)
          CFI (cfiCond722) R5 Frame(CFA, -12)
          CFI (cfiCond722) R6 Frame(CFA, -8)
          CFI (cfiCond722) R14 Frame(CFA, -4)
          CFI (cfiCond722) CFA R13+72
          CFI Block cfiCond723 Using cfiCommon0
          CFI (cfiCond723) Function AppS2wCmd_Ping
          CFI (cfiCond723) Conditional ??CrossCallReturnLabel_225
          CFI (cfiCond723) R4 Frame(CFA, -16)
          CFI (cfiCond723) R5 Frame(CFA, -12)
          CFI (cfiCond723) R6 Frame(CFA, -8)
          CFI (cfiCond723) R14 Frame(CFA, -4)
          CFI (cfiCond723) CFA R13+72
          CFI Block cfiCond724 Using cfiCommon0
          CFI (cfiCond724) Function AppS2wCmd_Ping
          CFI (cfiCond724) Conditional ??CrossCallReturnLabel_224
          CFI (cfiCond724) R4 Frame(CFA, -16)
          CFI (cfiCond724) R5 Frame(CFA, -12)
          CFI (cfiCond724) R6 Frame(CFA, -8)
          CFI (cfiCond724) R14 Frame(CFA, -4)
          CFI (cfiCond724) CFA R13+72
          CFI Block cfiCond725 Using cfiCommon0
          CFI (cfiCond725) Function AppS2wCmd_Ping
          CFI (cfiCond725) Conditional ??CrossCallReturnLabel_223
          CFI (cfiCond725) R4 Frame(CFA, -16)
          CFI (cfiCond725) R5 Frame(CFA, -12)
          CFI (cfiCond725) R6 Frame(CFA, -8)
          CFI (cfiCond725) R14 Frame(CFA, -4)
          CFI (cfiCond725) CFA R13+72
          CFI Block cfiCond726 Using cfiCommon0
          CFI (cfiCond726) Function AppS2wCmd_Ping
          CFI (cfiCond726) Conditional ??CrossCallReturnLabel_222
          CFI (cfiCond726) R4 Frame(CFA, -16)
          CFI (cfiCond726) R5 Frame(CFA, -12)
          CFI (cfiCond726) R6 Frame(CFA, -8)
          CFI (cfiCond726) R14 Frame(CFA, -4)
          CFI (cfiCond726) CFA R13+72
          CFI Block cfiCond727 Using cfiCommon0
          CFI (cfiCond727) Function AppS2wCmd_Ping
          CFI (cfiCond727) Conditional ??CrossCallReturnLabel_221
          CFI (cfiCond727) R4 Frame(CFA, -16)
          CFI (cfiCond727) R5 Frame(CFA, -12)
          CFI (cfiCond727) R6 Frame(CFA, -8)
          CFI (cfiCond727) R14 Frame(CFA, -4)
          CFI (cfiCond727) CFA R13+72
          CFI Block cfiPicker728 Using cfiCommon1
          CFI (cfiPicker728) NoFunction
          CFI (cfiPicker728) Picker
        THUMB
?Subroutine41:
        ADD      R0,SP,#+52
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Ping AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond721
          CFI EndBlock cfiCond722
          CFI EndBlock cfiCond723
          CFI EndBlock cfiCond724
          CFI EndBlock cfiCond725
          CFI EndBlock cfiCond726
          CFI EndBlock cfiCond727
          CFI EndBlock cfiPicker728
// 11050 
// 11051 #endif //S2W_PING_TRACE
// 11052 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock729 Using cfiCommon0
          CFI Function AppS2wCmd_Acmode
        THUMB
// 11053 UINT8
// 11054 AppS2wCmd_Acmode(UINT8 *ptr)
// 11055 {
AppS2wCmd_Acmode:
        PUSH     {R3-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
// 11056     UINT8 autocon;
// 11057     UINT8 status;
// 11058     S2W_PROFILE_T *profile;
// 11059 
// 11060     status = AppS2wParse_Boolean(ptr, &autocon);
        BL       ?Subroutine60
// 11061     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_371:
        CBNZ.N   R0,??AppS2wCmd_Acmode_0
// 11062     {
// 11063         return status;
// 11064     }
// 11065     profile_params.autoConnect = autocon;
        LDR.W    R4,??DataTable498
        LDRB     R0,[SP, #+0]
// 11066     profile = &s2wFlashParams->profile[profile_params.defaultProfile];
        LDR.W    R5,??DataTable498_1
        LDR      R2,[R5, #+0]
        STRB     R0,[R4, #+4]
        MOV      R1,#+1016
        LDRB     R0,[R4, #+5]
        MLA      R0,R1,R0,R2
// 11067     // should disable the ncm
// 11068 	s2wCurrent.ncmAutoMgr = 0;
        LDR.W    R1,??DataTable491
        MOVS     R2,#+0
        STRB     R2,[R1, #+810]
// 11069     memcpy(profile, &s2wCurrent, sizeof(S2W_PROFILE_T));
        MOV      R2,#+1016
          CFI FunCall memcpy
        BL       memcpy
// 11070     // update the profile
// 11071     if(!s2wappMainTaskCtxt->fsInit)
        LDR.W    R7,??DataTable490
        LDR      R0,[R7, #+0]
        MOVW     R6,#+33136
        LDRB     R0,[R6, R0]
        CBNZ.N   R0,??CrossCallReturnLabel_535
// 11072     {
// 11073 		App_FsInit();
          CFI FunCall App_FsInit
        BL       App_FsInit
// 11074 		s2wappMainTaskCtxt->fsInit = TRUE;
        BL       ?Subroutine107
// 11075         f_enterFS();
// 11076 	}
// 11077     status = S2w_SaveS2wProfile(s2wFlashParams, profile_params.defaultProfile);
??CrossCallReturnLabel_535:
        LDRB     R1,[R4, #+5]
        LDR      R0,[R5, #+0]
          CFI FunCall S2w_SaveS2wProfile
        BL       S2w_SaveS2wProfile
// 11078     if(status != S2W_SUCCESS)
// 11079     {
// 11080         status = S2W_FAILURE;
// 11081 	}
// 11082 
// 11083     // update the nvds
// 11084     return S2w_SaveS2wProfileParams(&profile_params);
        MOV      R0,R4
          CFI FunCall S2w_SaveS2wProfileParams
        BL       S2w_SaveS2wProfileParams
??AppS2wCmd_Acmode_0:
        POP      {R1,R4-R7,PC}    ;; return
          CFI EndBlock cfiBlock729
// 11085 
// 11086 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable478:
        DC32     0x80000001
// 11087 #ifdef  S2W_NCM_SUPPORT_ENABLE

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock730 Using cfiCommon0
          CFI Function AppS2wCmd_AutoConnect
        THUMB
// 11088 UINT8
// 11089 AppS2wCmd_AutoConnect(UINT8 *ptr)
// 11090 {
AppS2wCmd_AutoConnect:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 11091 	UINT8 status;
// 11092     if (*ptr)
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_AutoConnect_0
// 11093     {
// 11094         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R4,PC}
// 11095     }
// 11096     /* call the auto connect start function
// 11097      */
// 11098     profile_params.autoConnect = 1;
??AppS2wCmd_AutoConnect_0:
        LDR.W    R0,??DataTable498
// 11099     // if it is connected disconnect and connect it back
// 11100     if(s2wIsAutoconnected)
        LDR.W    R4,??DataTable491
        MOVS     R1,#+1
        STRB     R1,[R0, #+4]
        LDR.W    R0,??DataTable500_1
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_AutoConnect_1
// 11101     {
// 11102 		AppS2wProcess_AutoConnectStop(&s2wCurrent);
        MOV      R0,R4
          CFI FunCall AppS2wProcess_AutoConnectStop
        BL       AppS2wProcess_AutoConnectStop
// 11103 	}
// 11104     status = AppS2wProcess_AutoConnectStart(&s2wCurrent);
??AppS2wCmd_AutoConnect_1:
        MOV      R0,R4
          CFI FunCall AppS2wProcess_AutoConnectStart
        BL       AppS2wProcess_AutoConnectStart
// 11105     if(status == S2W_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_AutoConnect_2
// 11106     {
// 11107 		return S2W_CMD_INPROCESS;
        MOVS     R0,#+50
// 11108 	}
// 11109 	return status;
??AppS2wCmd_AutoConnect_2:
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock730
// 11110 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable479:
        DC32     s2wDisassocCb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable479_1:
        DC32     s2wDisassocSyncLossCb
// 11111 
// 11112 #endif

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock731 Using cfiCommon0
          CFI Function AppS2wCmd_GoOnline
        THUMB
// 11113 UINT8
// 11114 AppS2wCmd_GoOnline(UINT8 *ptr)
// 11115 {
AppS2wCmd_GoOnline:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 11116     if (*ptr)
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_GoOnline_0
// 11117     {
// 11118         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,PC}
// 11119     }
// 11120 
// 11121     if (!s2wIsAutoconnected)
??AppS2wCmd_GoOnline_0:
        LDR.W    R0,??DataTable500_1
        LDRB     R0,[R0, #+0]
        CBZ.N    R0,??AppS2wCmd_GoOnline_1
// 11122     {
// 11123         return S2W_FAILURE;
// 11124     }
// 11125 
// 11126     /* If the cid is not open, we could be a TCP server
// 11127      */
// 11128     if (!AppS2wHal_NetIsCidOpen(curCid)
// 11129         && (s2wCurrent.autoNetdata.proto != S2W_NETDATA_PROTO_TCP
// 11130             || s2wCurrent.autoNetdata.mode != S2W_NETDATA_MODE_SERVER))
        LDR.W    R0,??DataTable500_4
        LDRB     R0,[R0, #+0]
          CFI FunCall AppS2wHal_NetIsCidOpen
        BL       AppS2wHal_NetIsCidOpen
        CBNZ.N   R0,??AppS2wCmd_GoOnline_2
        LDR.W    R0,??DataTable491
        LDRB     R1,[R0, #+61]
        CMP      R1,#+1
        ITT      EQ 
        LDRBEQ   R0,[R0, #+60]
        CMPEQ    R0,#+1
        BEQ.N    ??AppS2wCmd_GoOnline_2
// 11131     {
// 11132 
// 11133         return S2W_FAILURE;
??AppS2wCmd_GoOnline_1:
        MOVS     R0,#+1
        POP      {R1,PC}
// 11134     }
// 11135     /* change the state to auto
// 11136      */
// 11137     s2wState = S2W_STATE_DATA_AUTO;
??AppS2wCmd_GoOnline_2:
        LDR.W    R0,??DataTable500_5
        MOVS     R1,#+13
        STRB     R1,[R0, #+0]
// 11138     /* reregister the auto exit gpio */
// 11139 	// start a gpio cb for auto mode exit
// 11140 	GsnGpio_Init(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP , APP_S2W_AUTO_EXIT_GPIO_BIT_MAP );
        MOV      R2,#+256
        MOVS     R3,#+0
        MOV      R0,R2
        MOVS     R1,#+0
          CFI FunCall GsnGpio_Init
        BL       GsnGpio_Init
// 11141     /* register callback for GPIO interrupt */
// 11142 	GsnGpio_IntCbRegister(APP_S2W_AUTO_EXIT_GPIO_NUM,s2wAutoExit_CB,NULL);
        MOVS     R2,#+0
        LDR.W    R1,??DataTable500_6
        MOVS     R0,#+8
          CFI FunCall GsnGpio_IntCbRegister
        BL       GsnGpio_IntCbRegister
// 11143 	/*enable interrupt*/
// 11144 	GsnGpio_NEIntEnable(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP);
        MOV      R0,#+256
        MOVS     R1,#+0
          CFI FunCall GsnGpio_NEIntEnable
        BL       GsnGpio_NEIntEnable
// 11145 	// make the data ready gpio as high..
// 11146     S2w_AsyncMsgGpioOp(1);
        MOVS     R0,#+1
          CFI FunCall S2w_AsyncMsgGpioOp
        BL       S2w_AsyncMsgGpioOp
// 11147     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock731
// 11148 }
// 11149 
// 11150 
// 11151 #ifdef S2W_THROUGHPUT_TEST
// 11152 extern GSN_OSAL_SEM_T dSendSem;  
// 11153 UINT8 tpTestBuff[1460];
// 11154 UINT8
// 11155 AppS2w_HttpTpTest(UINT8 cid,ULONG64 pktLen, UINT8 *ptr)
// 11156 {
// 11157 	UINT8 *p;
// 11158 	GSN_SYSTEM_TIME_T startTime,endTime,totalTime;	
// 11159 	UINT32 len,wddTxCnt0,wddTxCnt1,txBufAllocFail,getReqCnt=0;
// 11160 	ULONG64 tp;
// 11161  #ifdef S2W_HTTPC_SUPPORT
// 11162 	S2W_HTTP_DATA_T *pHttpData;
// 11163 #endif
// 11164     UINT8 status = S2W_SUCCESS;
// 11165   	if(s2wCidList[cid].testMode== 0)
// 11166   	{		
// 11167 #ifdef S2W_HTTPC_SUPPORT
// 11168 	    httpConfInfo.reqMethod = GSN_HTTP_METHOD_POST;
// 11169 #endif
// 11170   	}
// 11171 	else
// 11172 	{		
// 11173 #ifdef S2W_HTTPC_SUPPORT
// 11174 		httpConfInfo.reqMethod = GSN_HTTP_METHOD_GET;
// 11175 #endif
// 11176 	}
// 11177 #ifdef S2W_HTTPC_SUPPORT
// 11178 	httpConfInfo.httpTimeOut = 100 ;
// 11179 #endif
// 11180     p = AppS2wParse_NextParamGet(&ptr);
// 11181     if (!p)
// 11182     {
// 11183         return S2W_EINVAL;
// 11184     }
// 11185 #ifdef S2W_HTTPC_SUPPORT
// 11186  	len = strlen((const char *)p);
// 11187     if(NULL != httpConfInfo.reqPathPtr)
// 11188     {
// 11189         gsn_free(httpConfInfo.reqPathPtr);
// 11190         httpConfInfo.reqPathPtr = NULL;
// 11191     }
// 11192     httpConfInfo.reqPathPtr = gsn_malloc(len+1);
// 11193     if(NULL == httpConfInfo.reqPathPtr)
// 11194     {
// 11195         return S2W_FAILURE;
// 11196     }
// 11197     strncpy(httpConfInfo.reqPathPtr, (const INT8 *)p, len);
// 11198     httpConfInfo.reqPathPtr[len] ='\0';
// 11199     httpConfInfo.reqVersion = GSN_HTTP_VERSION_1_1;	
// 11200     httpConfInfo.reqBodyTotalLen = 0;
// 11201     httpConfInfo.reqBodyLen = 0;
// 11202 	if(GSN_HTTP_METHOD_POST== httpConfInfo.reqMethod)
// 11203     {
// 11204 	    httpConfInfo.reqBodyTotalLen = pktLen;
// 11205 		httpConfInfo.reqBodyPtr = (INT8 *)tpTestBuff;
// 11206 		memset(tpTestBuff ,0xA5A5A5A5,10);
// 11207 		httpConfInfo.reqBodyLen = pktLen;
// 11208 	}
// 11209     pHttpData = AppS2wHal_HttpHandleGet(cid);
// 11210 	txBufAllocFail = s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail;
// 11211 	wddTxCnt0 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent+ s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;
// 11212 	startTime = GsnTod_Get();	
// 11213 	do
// 11214 	{
// 11215         if(pHttpData != NULL)
// 11216         {
// 11217             GsnOsal_SemAcquire(&pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
// 11218             status = S2wHttp_Send(cid);
// 11219 			if(status != GSN_SUCCESS)
// 11220 				s2wCidList[cid].stats.txErr++;
// 11221         }
// 11222         else
// 11223         {
// 11224             return S2W_FAILURE;
// 11225         }
// 11226         if(pHttpData != NULL)
// 11227         {
// 11228             GsnOsal_SemRelease(&pHttpData->opInProgress);
// 11229         }
// 11230 		getReqCnt++;
// 11231 		if(GSN_HTTP_METHOD_POST== httpConfInfo.reqMethod)
// 11232     	{
// 11233 			httpConfInfo.reqBodyPtr = (INT8 *)tpTestBuff;
// 11234 			httpConfInfo.reqBodyLen = pktLen;
// 11235 		}
// 11236 	}while(getReqCnt < s2wCidList[cid].iteration);
// 11237 	endTime = GsnTod_Get();
// 11238 	totalTime = SYSTIME_TO_MSEC(endTime)-SYSTIME_TO_MSEC(startTime); 
// 11239 	wddTxCnt1 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;
// 11240 	S2w_Printf("\r\n Total Requests Send     : %d",getReqCnt);		
// 11241 	S2w_Printf("\r\n Packet Send From WDD    : %d",(wddTxCnt1-wddTxCnt0));
// 11242 	S2w_Printf("\r\n Packet Lost From APP    : %d",s2wCidList[cid].stats.txErr);		
// 11243 	S2w_Printf("\r\n Wdd Tx Buff Fail Cnt    : %d", s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail-txBufAllocFail); 
// 11244 	S2w_Printf("\r\n Bytes Received  	 : %lld",s2wCidList[cid].stats.bytesReceived); 
// 11245     S2w_Printf("\r\n Total Time Taken        : %lld usec",(SYSTIME_TO_USEC(endTime)-SYSTIME_TO_USEC(startTime)));									
// 11246 	tp = (((s2wCidList[cid].stats.bytesReceived*8*1000))/(totalTime));
// 11247     S2w_Printf("\r\n Throuhput               : %lld bps",tp);	
// 11248 	tp =(((s2wCidList[cid].stats.bytesReceived*8*1000))/(totalTime*1024));
// 11249     S2w_Printf("\r\n Throuhput               : %lld kbps ",tp);
// 11250 	s2wCidList[cid].tpTestInProgress=0;
// 11251 	if(NULL != httpConfInfo.reqPathPtr)
// 11252 	{
// 11253         gsn_free(httpConfInfo.reqPathPtr);
// 11254         httpConfInfo.reqPathPtr = NULL;
// 11255 	}
// 11256 	httpConfInfo.reqBodyPtr = NULL;
// 11257 #endif
// 11258 	return status;
// 11259 
// 11260 }
// 11261 UINT8
// 11262 AppS2wCmd_SockTpTestStat(UINT8 *ptr)
// 11263 {
// 11264 	UINT8 cid,validCid;
// 11265 	UINT8 *p;	
// 11266 	p = AppS2wParse_NextParamGet(&ptr);
// 11267     if (!p)
// 11268     {
// 11269  		   return S2W_EINVAL;
// 11270     }
// 11271     cid = *p;
// 11272 	validCid = AppS2w_CidValidate(cid);
// 11273     if (INVALID_CID == validCid )
// 11274 		return S2W_FAILURE;
// 11275 	S2w_Printf("\r\n Packet Received  : %d",s2wCidList[validCid].stats.packetsReceived);
// 11276 	S2w_Printf("\r\n Packet Lost      : %d",s2wCidList[validCid].stats.rxErr);
// 11277 	S2w_Printf("\r\n Bytes Received   : %lld",s2wCidList[validCid].stats.bytesReceived); 
// 11278 	S2w_Printf("\r\n Nwif Packets dropped  : %d" ,s2wappMainTaskCtxt->if0.nwifCtx.pStats->pktsDroppedNoMem);
// 11279 	S2w_Printf("\r\n Nwif Packets filtered : %d" ,s2wappMainTaskCtxt->if0.nwifCtx.pStats->pktFilteredOut);
// 11280 	S2w_Printf("\r\n Nwif Packets Received : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->totalPktsRcvd);
// 11281 	S2w_Printf("\r\n ARP Packets Received  : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->arpRequestRcvd);		
// 11282 	S2w_Printf("\r\n IP Packets Received   : %d", s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipPktsRcvd);
// 11283 	S2w_Printf("\r\n Bytes Received   	   : %lld",s2wCidList[validCid].stats.bytesReceived);
// 11284 	S2w_Printf("\r\n Total Time Taken	   : %lld sec",s2wCidList[validCid].stats.totalTime);																		
// 11285 	S2w_Printf("\r\n Throuhput        	   : %lld Kbps",((s2wCidList[validCid].stats.bytesReceived*8)/(1024*s2wCidList[validCid].stats.totalTime)));										
// 11286 	s2wCidList[validCid].tpTestInProgress=0; 
// 11287 	return S2W_SUCCESS;
// 11288 }
// 11289 UINT8
// 11290 AppS2wCmd_SockTpTest(UINT8 *ptr)
// 11291 {
// 11292     UINT8 status,cid,validCid;
// 11293     UINT32 mode=0;
// 11294 	UINT8 *p;
// 11295 	UINT32 wddTxCnt0,wddTxCnt1,txBufAllocFail,seqNo=0;
// 11296 	GSN_SYSTEM_TIME_T startTime,endTime,totalTime,currTime,diffTime;	
// 11297 	ULONG64 tp,cnt=0,pktLen;
// 11298 	
// 11299 	/* CID */	
// 11300 	p = AppS2wParse_NextParamGet(&ptr);
// 11301     if (!p)
// 11302     {
// 11303  		   return S2W_EINVAL;
// 11304     }
// 11305     cid = *p;
// 11306 	validCid = AppS2w_CidValidate(cid);
// 11307 
// 11308     if (INVALID_CID == validCid )
// 11309 		return S2W_FAILURE;
// 11310 
// 11311 	/* mode txtest->0,rxtest->1,both ->2*/
// 11312     p = AppS2wParse_NextParamGet(&ptr);
// 11313 	
// 11314     if (!p)
// 11315     {
// 11316         return S2W_EINVAL;
// 11317     }
// 11318 	
// 11319     status = AppS2wParse_Int(p, &mode);
// 11320     if (status != S2W_SUCCESS)
// 11321     {
// 11322         return status;
// 11323     }	
// 11324 	if(mode == 4)
// 11325 		goto skipArgument;
// 11326 	/* iteration*/
// 11327 	p = AppS2wParse_NextParamGet(&ptr);
// 11328 	s2wCidList[validCid].iteration = 10;
// 11329 	if (p)
// 11330 	{
// 11331 		status = AppS2wParse_Int(p, &s2wCidList[validCid].iteration);
// 11332 		if (status != S2W_SUCCESS)
// 11333 		{
// 11334 			return status;
// 11335 		}	
// 11336 		
// 11337 	}		
// 11338 	p = AppS2wParse_NextParamGet(&ptr);
// 11339 	if (p)
// 11340 	{
// 11341 		status = AppS2wParse_64BitNumber(p,&pktLen);
// 11342 		if (status != S2W_SUCCESS)
// 11343 		{
// 11344 			return status;
// 11345 		}	
// 11346 	}
// 11347 	else
// 11348     {
// 11349 		pktLen = 1460;
// 11350     }
// 11351 	s2wCidList[validCid].bytesToReceive = (ULONG64)(s2wCidList[validCid].iteration * pktLen);
// 11352 skipArgument:	
// 11353 	memset(&s2wCidList[validCid].stats,0,sizeof(S2W_TPSTATS_T));	
// 11354 	s2wCidList[validCid].testMode=mode;		
// 11355 	s2wCidList[validCid].tpTestInProgress=1;	
// 11356 	if(s2wCidList[validCid].httpflag && mode < 2)
// 11357 		return AppS2w_HttpTpTest(validCid,pktLen,ptr);
// 11358     if(mode == 3) 
// 11359         {
// 11360             pktLen=0;
// 11361         }
// 11362 	s2wCidList[validCid].testMode=mode;		
// 11363 	s2wCidList[validCid].tpTestInProgress=1;	
// 11364 	memset(&s2wCidList[validCid].stats,0,sizeof(S2W_TPSTATS_T));
// 11365 	if(mode == 0 || mode == 2 || mode == 3)
// 11366 	{	seqNo=0;
// 11367 	
// 11368 		memset(tpTestBuff ,0xA5A5A5A5,10);
// 11369 		s2wCidList[validCid].tpTestInProgress=1;			
// 11370 		wddTxCnt0 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;	
// 11371 		txBufAllocFail = s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail;
// 11372 		startTime = GsnTod_Get();	
// 11373 		do
// 11374 		{
// 11375 			tpTestBuff[0] = seqNo & 0xff;			
// 11376 			tpTestBuff[1] = (seqNo >> 8)& 0xff;			
// 11377 			tpTestBuff[2] = (seqNo>> 16)& 0xff;			
// 11378 			tpTestBuff[3] = (seqNo>> 24)& 0xff;			
// 11379 			/*send*/			
// 11380 			if(mode == 3) 
// 11381 			{
// 11382 				if(pktLen >= 1460)
// 11383 				{
// 11384 					pktLen =1;
// 11385                              }
// 11386 				else					
// 11387 				  pktLen++;
// 11388 			}
// 11389 			s2wCidList[validCid].stats.lastPktSndTime = SYSTIME_TO_USEC(GsnTod_Get());	
// 11390             GsnOsal_SemAcquire ( &dSendSem,GSN_OSAL_WAIT_FOREVER );
// 11391 #ifdef S2W_IPv6_SUPPORT
// 11392            if(s2wCidList[validCid].addrType & ADDR_TYPE_IPv6)
// 11393 				AppS2wHal_NetTx(validCid, s2wCidList[validCid].remoteIpv6,s2wCidList[validCid].remotePort,
// 11394 								(VOID *)tpTestBuff, (UINT32)pktLen);
// 11395 			else
// 11396 #endif				
// 11397 			status = AppS2wHal_NetTx(validCid, s2wCidList[validCid].remoteIp,s2wCidList[validCid].remotePort,
// 11398 									(VOID *)tpTestBuff, (UINT32)pktLen);
// 11399             GsnOsal_SemRelease(&dSendSem);                 
// 11400 			currTime = SYSTIME_TO_USEC(GsnTod_Get());	
// 11401 			if(status == S2W_FAILURE)
// 11402 			{
// 11403 
// 11404          	if(s2wCidList[validCid].conType == TCP)
// 11405                    break;
// 11406 
// 11407 			 s2wCidList[validCid].stats.txErr++;
// 11408 			 
// 11409 			}
// 11410 			else
// 11411 				cnt++;
// 11412 			seqNo++;
// 11413 			diffTime = currTime - s2wCidList[validCid].stats.lastPktSndTime ;
// 11414             if(diffTime <= 1000)
// 11415 				s2wCidList[validCid].stats.less1MsCnt++;
// 11416             else if(diffTime > 20000)			
// 11417 				s2wCidList[validCid].stats.more20MsCnt++;
// 11418             else if(diffTime > 10000)			
// 11419 				s2wCidList[validCid].stats.more10MsCnt++;
// 11420             else if(diffTime > 5000)			
// 11421 				s2wCidList[validCid].stats.more5MsCnt++;
// 11422             else if(diffTime > 3000)				
// 11423 				s2wCidList[validCid].stats.more3MsCnt++;
// 11424 			else if(diffTime > 2000)
// 11425 				s2wCidList[validCid].stats.more2MsCnt++;
// 11426 			else if(diffTime > 1000)
// 11427 				s2wCidList[validCid].stats.more1MsCnt++;
// 11428 
// 11429 		}while(seqNo < s2wCidList[validCid].iteration);
// 11430 		endTime = GsnTod_Get();
// 11431 		totalTime = SYSTIME_TO_MSEC(endTime)-SYSTIME_TO_MSEC(startTime); 
// 11432 		wddTxCnt1 = s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipUnicastPktsSent + s2wappMainTaskCtxt->if0.nwifCtx.pStats->ipBroadCastPktsSent	;	
// 11433 		if(s2wCidList[validCid].conType == UDP)
// 11434 		{
// 11435 			S2w_Printf("\r\n Packet send From App  : %d",seqNo);
// 11436 			S2w_Printf("\r\n Packet send From WDD  : %d",(wddTxCnt1-wddTxCnt0));
// 11437 			S2w_Printf("\r\n Packet Lost From APP  : %d",s2wCidList[validCid].stats.txErr);		
// 11438 			S2w_Printf("\r\n Wdd Tx Buff Fail Cnt  : %d", s2wappMainTaskCtxt->hiCtx.pStats->txBufAllocFail-txBufAllocFail); 
// 11439 			S2w_Printf("\r\n Delay More Than 20 Ms : %d",s2wCidList[validCid].stats.more20MsCnt);
// 11440 			S2w_Printf("\r\n Delay More Than 10 Ms : %d",s2wCidList[validCid].stats.more10MsCnt);
// 11441 			S2w_Printf("\r\n Delay More Than  5 Ms : %d",s2wCidList[validCid].stats.more5MsCnt);
// 11442 			S2w_Printf("\r\n Delay More Than  3 Ms : %d",s2wCidList[validCid].stats.more3MsCnt);
// 11443 			S2w_Printf("\r\n Delay More Than  2 Ms : %d",s2wCidList[validCid].stats.more2MsCnt);							
// 11444 			S2w_Printf("\r\n Delay More Than  1 Ms : %d",s2wCidList[validCid].stats.more1MsCnt);
// 11445 			S2w_Printf("\r\n Delay Less Than  1 Ms : %d",s2wCidList[validCid].stats.less1MsCnt);
// 11446 		}
// 11447 		else if(mode != 3)
// 11448 		{
// 11449 			S2w_Printf("\r\n Bytes send  	       : %lld",cnt *pktLen); 
// 11450 
// 11451 		}			
// 11452 		if(mode != 3)
// 11453 		{
// 11454 		    S2w_Printf("\r\n Total Time Taken      : %lld usec",(SYSTIME_TO_USEC(endTime)-SYSTIME_TO_USEC(startTime)));									
// 11455 			tp = (((cnt *pktLen*8*1000))/(totalTime));
// 11456 		    S2w_Printf("\r\n Throuhput             : %lld bps",tp);	
// 11457 			tp =(((cnt *pktLen*8*1000))/(totalTime*1024));
// 11458             S2w_Printf("\r\n Throuhput             : %lld kbps ",tp);	
// 11459 		}
// 11460 		if(mode == 0 || mode == 3 )s2wCidList[validCid].tpTestInProgress=0; 
// 11461 	}
// 11462  	return S2W_SUCCESS;
// 11463 }
// 11464 #endif
// 11465 
// 11466 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock732 Using cfiCommon0
          CFI Function AppS2wCmd_IpMulticastJoin
        THUMB
// 11467 PUBLIC UINT8
// 11468 AppS2wCmd_IpMulticastJoin(UINT8 *ptr)
// 11469 {
AppS2wCmd_IpMulticastJoin:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 11470   UINT8 *p;
// 11471   UINT8 status;
// 11472   ULONG ip;
// 11473 
// 11474   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 11475 	if(!p)
??CrossCallReturnLabel_145:
        CBNZ.N   R0,??AppS2wCmd_IpMulticastJoin_0
// 11476   		return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 11477 
// 11478   status = AppS2wParse_Ip(p, (UINT8 *)&ip);
??AppS2wCmd_IpMulticastJoin_0:
        BL       ?Subroutine64
// 11479 
// 11480    if (status != S2W_SUCCESS)
??CrossCallReturnLabel_397:
        CBNZ.N   R0,??AppS2wCmd_IpMulticastJoin_1
// 11481     {
// 11482         return status;
// 11483     }
// 11484 
// 11485    ip = ntohl(ip);
        BL       ?Subroutine81
// 11486 
// 11487    if(nx_igmp_multicast_join(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ip) != S2W_SUCCESS)
??CrossCallReturnLabel_460:
          CFI FunCall _nxe_igmp_multicast_join
        BL       _nxe_igmp_multicast_join
        CBZ.N    R0,??AppS2wCmd_IpMulticastJoin_1
// 11488      return S2W_FAILURE;
        MOVS     R0,#+1
// 11489 
// 11490    return S2W_SUCCESS;
??AppS2wCmd_IpMulticastJoin_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock732
// 11491 
// 11492 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond733 Using cfiCommon0
          CFI Function AppS2wCmd_Nset
          CFI Conditional ??CrossCallReturnLabel_400
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+232
          CFI Block cfiCond734 Using cfiCommon0
          CFI (cfiCond734) Function AppS2wCmd_Nset
          CFI (cfiCond734) Conditional ??CrossCallReturnLabel_399
          CFI (cfiCond734) R4 Frame(CFA, -16)
          CFI (cfiCond734) R5 Frame(CFA, -12)
          CFI (cfiCond734) R6 Frame(CFA, -8)
          CFI (cfiCond734) R14 Frame(CFA, -4)
          CFI (cfiCond734) CFA R13+232
          CFI Block cfiCond735 Using cfiCommon0
          CFI (cfiCond735) Function AppS2wCmd_DnsServerSet
          CFI (cfiCond735) Conditional ??CrossCallReturnLabel_398
          CFI (cfiCond735) R4 Frame(CFA, -24)
          CFI (cfiCond735) R5 Frame(CFA, -20)
          CFI (cfiCond735) R6 Frame(CFA, -16)
          CFI (cfiCond735) R7 Frame(CFA, -12)
          CFI (cfiCond735) R8 Frame(CFA, -8)
          CFI (cfiCond735) R14 Frame(CFA, -4)
          CFI (cfiCond735) CFA R13+40
          CFI Block cfiCond736 Using cfiCommon0
          CFI (cfiCond736) Function AppS2wCmd_IpMulticastJoin
          CFI (cfiCond736) Conditional ??CrossCallReturnLabel_397
          CFI (cfiCond736) R14 Frame(CFA, -4)
          CFI (cfiCond736) CFA R13+16
          CFI Block cfiCond737 Using cfiCommon0
          CFI (cfiCond737) Function AppS2wCmd_IpMulticastLeave
          CFI (cfiCond737) Conditional ??CrossCallReturnLabel_396
          CFI (cfiCond737) R14 Frame(CFA, -4)
          CFI (cfiCond737) CFA R13+16
          CFI Block cfiPicker738 Using cfiCommon1
          CFI (cfiPicker738) NoFunction
          CFI (cfiPicker738) Picker
        THUMB
?Subroutine64:
        ADD      R1,SP,#+0
          CFI FunCall AppS2wCmd_Nset AppS2wParse_Ip
          CFI FunCall AppS2wCmd_Nset AppS2wParse_Ip
          CFI FunCall AppS2wCmd_DnsServerSet AppS2wParse_Ip
          CFI FunCall AppS2wCmd_IpMulticastJoin AppS2wParse_Ip
          CFI FunCall AppS2wCmd_IpMulticastLeave AppS2wParse_Ip
        B.W      AppS2wParse_Ip
          CFI EndBlock cfiCond733
          CFI EndBlock cfiCond734
          CFI EndBlock cfiCond735
          CFI EndBlock cfiCond736
          CFI EndBlock cfiCond737
          CFI EndBlock cfiPicker738
// 11493 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock739 Using cfiCommon0
          CFI Function AppS2wCmd_IpMulticastLeave
        THUMB
// 11494 PUBLIC UINT8
// 11495 AppS2wCmd_IpMulticastLeave(UINT8 *ptr)
// 11496 {
AppS2wCmd_IpMulticastLeave:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 11497 
// 11498   UINT8 *p;
// 11499   UINT8 status;
// 11500   ULONG ip;
// 11501 
// 11502   p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 11503 	if(!p)
??CrossCallReturnLabel_144:
        CBNZ.N   R0,??AppS2wCmd_IpMulticastLeave_0
// 11504   		return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 11505 
// 11506   status = AppS2wParse_Ip(p, (UINT8 *)&ip);
??AppS2wCmd_IpMulticastLeave_0:
        BL       ?Subroutine64
// 11507 
// 11508    if (status != S2W_SUCCESS)
??CrossCallReturnLabel_396:
        CBNZ.N   R0,??AppS2wCmd_IpMulticastLeave_1
// 11509     {
// 11510         return status;
// 11511     }
// 11512 
// 11513    ip = ntohl(ip);
        BL       ?Subroutine81
// 11514 
// 11515    if(nx_igmp_multicast_leave(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,ip) != S2W_SUCCESS)
??CrossCallReturnLabel_461:
          CFI FunCall _nxe_igmp_multicast_leave
        BL       _nxe_igmp_multicast_leave
        CBZ.N    R0,??AppS2wCmd_IpMulticastLeave_1
// 11516      return S2W_FAILURE;
        MOVS     R0,#+1
// 11517 
// 11518    return S2W_SUCCESS;
??AppS2wCmd_IpMulticastLeave_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock739
// 11519 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond740 Using cfiCommon0
          CFI Function AppS2wCmd_IpMulticastJoin
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_460
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond741 Using cfiCommon0
          CFI (cfiCond741) Function AppS2wCmd_IpMulticastLeave
          CFI (cfiCond741) NoCalls AppS2wCmd_IpMulticastJoin
          CFI (cfiCond741) NoCalls AppS2wCmd_IpMulticastLeave
          CFI (cfiCond741) Conditional ??CrossCallReturnLabel_461
          CFI (cfiCond741) R14 Frame(CFA, -4)
          CFI (cfiCond741) CFA R13+16
          CFI Block cfiPicker742 Using cfiCommon1
          CFI (cfiPicker742) NoFunction
          CFI (cfiPicker742) NoCalls AppS2wCmd_IpMulticastJoin
          CFI (cfiPicker742) NoCalls AppS2wCmd_IpMulticastLeave
          CFI (cfiPicker742) Picker
        THUMB
?Subroutine81:
        LDR      R0,[SP, #+0]
        LSRS     R1,R0,#+8
        AND      R1,R1,#0xFF00
        ORR      R0,R1,R0, LSR #+24
        LDR      R1,[SP, #+0]
        AND      R1,R1,#0xFF00
        ORR      R0,R0,R1, LSL #+8
        LDR      R1,[SP, #+0]
        ORR      R0,R0,R1, LSL #+24
        STR      R0,[SP, #+0]
        LDR.W    R0,??DataTable490
        LDR      R1,[SP, #+0]
        LDR      R0,[R0, #+0]
        ADD      R0,R0,#+5216
        BX       LR
          CFI EndBlock cfiCond740
          CFI EndBlock cfiCond741
          CFI EndBlock cfiPicker742

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable481:
        DC32     0xc0a8f001
// 11520 
// 11521 
// 11522 /**
// 11523  ******************************************************************
// 11524  * @ingroup S2w-Application
// 11525  * @brief Process the AT+DGPIO command
// 11526  *      This function sets or resets the specified GPIO pin
// 11527  * @param ptr Pointer to the user input string.
// 11528  * @retval S2W_SUCCESS - operation successful.
// 11529  * @retval S2W_EINVAL  - operation failure-invalid command.
// 11530  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock743 Using cfiCommon0
          CFI Function AppS2wCmd_Dgpio
        THUMB
// 11531 PUBLIC UINT8
// 11532 AppS2wCmd_Dgpio(UINT8 *ptr)
// 11533 {
AppS2wCmd_Dgpio:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 11534     UINT32 bit, operation;
// 11535     UINT8 *p, status;
// 11536     static UINT8 enableGpio=0;
// 11537     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 11538     if (!p)
??CrossCallReturnLabel_205:
        CBZ.N    R0,??AppS2wCmd_Dgpio_0
// 11539     {
// 11540         return S2W_EINVAL;
// 11541     }
// 11542 
// 11543     status = AppS2wParse_Int(p, &bit);
        BL       ?Subroutine51
// 11544     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_272:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Dgpio_1
// 11545     {
// 11546         return status;
// 11547     }
// 11548 
// 11549     if(!((S2W_GPIO_UNDER_USE) & (1 << bit)))
        LDR      R1,[SP, #+0]
        LDR.W    R0,??DataTable501  ;; 0xe03003f0
        LSRS     R0,R0,R1
        LSLS     R0,R0,#+31
        BPL.N    ??AppS2wCmd_Dgpio_0
// 11550     {/* This GPIO can not be used for testing - currently its used as peripheral pin  */
// 11551         return S2W_EINVAL;
// 11552     }
// 11553 
// 11554     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 11555     if (!p)
??CrossCallReturnLabel_204:
        CBZ.N    R0,??AppS2wCmd_Dgpio_0
// 11556     {
// 11557         return S2W_EINVAL;
// 11558     }
// 11559 
// 11560     status = AppS2wParse_Int(p, &operation);
        BL       ?Subroutine52
// 11561     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_318:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_Dgpio_1
// 11562     {
// 11563         return status;
// 11564     }
// 11565 
// 11566     if(operation > 1)
        LDR      R0,[SP, #+4]
        CMP      R0,#+2
        BCC.N    ??AppS2wCmd_Dgpio_2
// 11567     {
// 11568         return S2W_EINVAL;
??AppS2wCmd_Dgpio_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Dgpio_1
// 11569     }
// 11570     if(!enableGpio)
// 11571     {
// 11572         // eanble all gpios available only once for first command
// 11573         GsnIoMux_Sel(4, GSN_IOMUX_GPIO_4_AGPIO_4);
??AppS2wCmd_Dgpio_2:
        MOVS     R1,#+0
        MOVS     R0,#+4
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11574         GsnIoMux_Sel(5, GSN_IOMUX_GPIO_5_AGPIO_5);
        MOVS     R1,#+0
        MOVS     R0,#+5
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11575         GsnIoMux_Sel(6, GSN_IOMUX_GPIO_6_AGPIO_6);
        MOVS     R1,#+0
        MOVS     R0,#+6
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11576         GsnIoMux_Sel(7, GSN_IOMUX_GPIO_7_AGPIO_7);
        MOVS     R1,#+0
        MOVS     R0,#+7
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11577 #ifndef GS2100
// 11578         GsnIoMux_Sel(9, GSN_IOMUX_GPIO_9_AGPIO_9);
        MOVS     R1,#+0
        MOVS     R0,#+9
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11579 #endif
// 11580         GsnIoMux_Sel(20, GSN_IOMUX_GPIO_20_AGPIO_20);
        MOVS     R1,#+0
        MOVS     R0,#+20
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11581         GsnIoMux_Sel(21, GSN_IOMUX_GPIO_21_AGPIO_21);
        MOVS     R1,#+0
        MOVS     R0,#+21
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11582         GsnIoMux_Sel(29, GSN_IOMUX_GPIO_29_AGPIO_29);
        MOVS     R1,#+0
        MOVS     R0,#+29
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11583         GsnIoMux_Sel(30, GSN_IOMUX_GPIO_30_AGPIO_30);
        MOVS     R1,#+0
        MOVS     R0,#+30
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11584         GsnIoMux_Sel(31, GSN_IOMUX_GPIO_31_AGPIO_31);
        MOVS     R1,#+0
        MOVS     R0,#+31
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 11585     }
// 11586 
// 11587     /* Call GPIO Init as out direction  */
// 11588     GsnGpio_Init((1 << bit), ~(1 << bit));
        LDR      R0,[SP, #+0]
        MOVS     R4,#+1
        LSL      R0,R4,R0
        MVNS     R2,R0
        ASRS     R3,R2,#+31
        ASRS     R1,R0,#+31
          CFI FunCall GsnGpio_Init
        BL       GsnGpio_Init
// 11589 
// 11590     if(operation)
        LDR      R0,[SP, #+0]
        LDR      R2,[SP, #+4]
        LSL      R0,R4,R0
        ASRS     R1,R0,#+31
        CBZ.N    R2,??AppS2wCmd_Dgpio_3
// 11591     {
// 11592         GsnGpio_OutIndvidualSet(1 << bit);
          CFI FunCall GsnGpio_OutIndvidualSet
        BL       GsnGpio_OutIndvidualSet
        B.N      ??AppS2wCmd_Dgpio_4
// 11593     }
// 11594     else
// 11595     {
// 11596         GsnGpio_OutClear(1 << bit);
??AppS2wCmd_Dgpio_3:
          CFI FunCall GsnGpio_OutClear
        BL       GsnGpio_OutClear
// 11597     }
// 11598     return S2W_SUCCESS;
??AppS2wCmd_Dgpio_4:
        MOVS     R0,#+0
??AppS2wCmd_Dgpio_1:
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock743
// 11599 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable482:
        DC32     `?<Constant "TLS_KEY">`

        SECTION `.bss`:DATA:REORDER:NOROOT(0)
        DS8 1
// 11600 
// 11601 #ifdef S2W_SECURITY_WPS_ENABLE
// 11602 
// 11603 /**
// 11604  ******************************************************************
// 11605  * @ingroup S2w-Application
// 11606  * @brief Process the AT+WWPS Command.
// 11607  *   This command check the validity of parameters passed and call the
// 11608  *   hal association function.
// 11609  * @param ptr pointer to the user input string.
// 11610  *
// 11611  * @return S2W_SUCCESS - operation successful.
// 11612  * @retval S2W_EINVAL  - operation failure-invalid command.
// 11613  * @retval S2W_FAILURE - operation failure-scan failed.
// 11614  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock744 Using cfiCommon0
          CFI Function AppS2wCmd_Wwps
        THUMB
// 11615 PRIVATE UINT8
// 11616 AppS2wCmd_Wwps(UINT8 *ptr)
// 11617 {
AppS2wCmd_Wwps:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+84
          CFI CFA R13+96
// 11618 #if 1
// 11619     S2W_WPS_T params;
// 11620     GSN_MAC_SSID_T ap_ssid;
// 11621     UINT8 *p;
// 11622     UINT8 status;
// 11623     UINT8 zeroPin[GSN_WDD_SEC_WPS_PIN_LEN] = {0};
        ADD      R0,SP,#+0
        MOVS     R1,#+0
        MOVS     R2,#+0
        STM      R0!,{R1,R2}
// 11624     UINT8 i;
// 11625 #ifdef GSN_P2P
// 11626     UINT8 method=0;
// 11627 #endif
// 11628 
// 11629     ap_ssid.length = 0;
        STRB     R1,[SP, #+48]
// 11630     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine45
??CrossCallReturnLabel_246:
        MOVS     R4,R0
// 11631     if (!p)
        BEQ.N    ??AppS2wCmd_Wwps_0
// 11632     {
// 11633         return S2W_EINVAL;
// 11634     }
// 11635     AppS2wParse_Int(p, &params.type);
        BL       ?Subroutine50
// 11636     if(!(params.type == APP_WPS_TYPE_PB || params.type == APP_WPS_TYPE_PIN || params.type == APP_WPS_TYPE_DFLT_PIN) )
??CrossCallReturnLabel_258:
        LDR      R0,[SP, #+8]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_Wwps_1
        CMP      R0,#+2
        IT       NE 
        CMPNE    R0,#+3
        BNE.N    ??AppS2wCmd_Wwps_0
// 11637     {
// 11638         return S2W_EINVAL;
// 11639     }
// 11640 
// 11641     if(params.type == APP_WPS_TYPE_PIN || params.type == APP_WPS_TYPE_DFLT_PIN)
// 11642     {
// 11643         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine45
??CrossCallReturnLabel_245:
        MOVS     R4,R0
// 11644         if (!p)
        BEQ.N    ??AppS2wCmd_Wwps_0
// 11645         {
// 11646             return S2W_EINVAL;
// 11647         }
// 11648         if(GSN_WDD_SEC_WPS_PIN_LEN != strlen((const char*)p))
          CFI FunCall strlen
        BL       strlen
        CMP      R0,#+8
        BNE.N    ??AppS2wCmd_Wwps_0
// 11649         {
// 11650             return S2W_EINVAL;
// 11651         }
// 11652         for(i=0; i< GSN_WDD_SEC_WPS_PIN_LEN; i++)
        MOVS     R0,#+0
// 11653         {
// 11654             if( *(p+i) < '0' || *(p+i) > '9')
??AppS2wCmd_Wwps_2:
        LDRB     R1,[R0, R4]
        SUBS     R1,R1,#+48
        CMP      R1,#+10
        BCC.N    ??AppS2wCmd_Wwps_3
// 11655             {
// 11656                 return S2W_EINVAL;
??AppS2wCmd_Wwps_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_Wwps_4
// 11657             }
// 11658             //*(p+i)= *(p+i)-'0'; /* convert to integer */
// 11659             //*(p+i)= *(p+i);
// 11660         }
??AppS2wCmd_Wwps_3:
        ADDS     R0,R0,#+1
        UXTB     R0,R0
        CMP      R0,#+8
        BLT.N    ??AppS2wCmd_Wwps_2
// 11661         memcpy(params.pin, p, GSN_WDD_SEC_WPS_PIN_LEN);
        MOVS     R2,#+8
        BL       ?Subroutine118
// 11662 #ifdef GSN_P2P
// 11663         method = 0;
// 11664 #endif
// 11665         p = AppS2wParse_NextParamGet( &ptr );
??CrossCallReturnLabel_564:
        BL       ?Subroutine45
??CrossCallReturnLabel_244:
        MOVS     R4,R0
// 11666         if (p)
        BEQ.N    ??CrossCallReturnLabel_563
// 11667         {
// 11668             status = AppS2wParse_Ssid(p, ap_ssid.array, &ap_ssid.length );
        ADD      R2,SP,#+48
        ADD      R1,SP,#+49
          CFI FunCall AppS2wParse_Ssid
        BL       AppS2wParse_Ssid
        B.N      ??CrossCallReturnLabel_563
// 11669         }
// 11670     }
// 11671     else
// 11672     {
// 11673         p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Wwps_1:
        BL       ?Subroutine45
// 11674         if (p)
// 11675         {/* we donot expect a pin in case of PB mathod*/
// 11676             /*return S2W_EINVAL;*/
// 11677         }
// 11678         memcpy(params.pin, zeroPin, GSN_WDD_SEC_WPS_PIN_LEN);
??CrossCallReturnLabel_243:
        MOVS     R2,#+8
        ADD      R1,SP,#+0
        BL       ??Subroutine118_0
// 11679 #ifdef GSN_P2P
// 11680         method=1;
// 11681 #endif
// 11682     }
// 11683 	params.storeL2ConInfo = 0;
??CrossCallReturnLabel_563:
        MOVS     R0,#+0
        STRB     R0,[SP, #+44]
// 11684 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine45
??CrossCallReturnLabel_242:
        MOVS     R4,R0
// 11685     if (p)
        ITT      NE 
        ADDNE    R1,SP,#+44
          CFI FunCall AppS2wParse_Boolean
        BLNE     AppS2wParse_Boolean
// 11686     {/* we donot expect a pin in case of PB mathod*/
// 11687         AppS2wParse_Boolean(p, &params.storeL2ConInfo);
// 11688     }
// 11689 #ifdef GSN_P2P
// 11690     if(s2wCurrent.mode == 3)
// 11691     {
// 11692         GSN_WDD_P2P_CONF_T* p2pConf;
// 11693 
// 11694         /* get the P2P info */
// 11695         p2pConf = GsnWdd_P2pConfPtrGet(&s2wappMainTaskCtxt->wdd);
// 11696 
// 11697         if(p2pConf->roleGo == P2P_ROLE_GO)
// 11698         {
// 11699             status = GsnWdd_P2pProvStart(&s2wappMainTaskCtxt->wdd,method,params.pin);
// 11700         }
// 11701         else
// 11702         {
// 11703             status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
// 11704         }
// 11705     }
// 11706     else
// 11707 #endif
// 11708     {
// 11709         status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
// 11710     }
// 11711 
// 11712     return status;
        MOVS     R2,#+0
        ADD      R1,SP,#+48
        ADD      R0,SP,#+8
          CFI FunCall AppS2wHal_WpsAssociate
        BL       AppS2wHal_WpsAssociate
??AppS2wCmd_Wwps_4:
        ADD      SP,SP,#+88
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock744
// 11713 
// 11714 
// 11715 #else
// 11716     S2W_WPS_T params;
// 11717     GSN_MAC_SSID_T ap_ssid;
// 11718     UINT8 *p;
// 11719     UINT8 status;
// 11720     UINT8 zeroPin[GSN_WDD_SEC_WPS_PIN_LEN] = {0};
// 11721     UINT8 i;
// 11722 #ifdef GSN_P2P
// 11723     UINT8 method=0;
// 11724 #endif
// 11725 
// 11726     ap_ssid.length = 0;
// 11727     p = AppS2wParse_NextParamGet(&ptr);
// 11728     if (!p)
// 11729     {
// 11730         return S2W_EINVAL;
// 11731     }
// 11732     AppS2wParse_Int(p, &params.type);
// 11733     if(!(params.type == APP_WPS_TYPE_PB || params.type == APP_WPS_TYPE_PIN))
// 11734     {
// 11735         return S2W_EINVAL;
// 11736     }
// 11737 
// 11738     if(params.type == APP_WPS_TYPE_PIN)
// 11739     {
// 11740         p = AppS2wParse_NextParamGet(&ptr);
// 11741         if (!p)
// 11742         {
// 11743             return S2W_EINVAL;
// 11744         }
// 11745         if(GSN_WDD_SEC_WPS_PIN_LEN != strlen((const char*)p))
// 11746         {
// 11747             return S2W_EINVAL;
// 11748         }
// 11749         for(i=0; i< GSN_WDD_SEC_WPS_PIN_LEN; i++)
// 11750         {
// 11751             if( *(p+i) < '0' || *(p+i) > '9')
// 11752             {
// 11753                 return S2W_EINVAL;
// 11754             }
// 11755             *(p+i)= *(p+i)-'0'; /* convert to integer */
// 11756         }
// 11757         memcpy(params.pin, p, GSN_WDD_SEC_WPS_PIN_LEN);
// 11758 #ifdef GSN_P2P
// 11759         method = 0;
// 11760 #endif
// 11761         p = AppS2wParse_NextParamGet( &ptr );
// 11762         if (p)
// 11763         {
// 11764             status = AppS2wParse_Ssid(p, ap_ssid.array, &ap_ssid.length );
// 11765         }
// 11766     }
// 11767     else
// 11768     {
// 11769         p = AppS2wParse_NextParamGet(&ptr);
// 11770         if (p)
// 11771         {/* we donot expect a pin in case of PB mathod*/
// 11772             /*return S2W_EINVAL;*/
// 11773         }
// 11774         memcpy(params.pin, zeroPin, GSN_WDD_SEC_WPS_PIN_LEN);
// 11775 #ifdef GSN_P2P
// 11776         method=1;
// 11777 #endif
// 11778     }
// 11779 	params.storeL2ConInfo = 0;
// 11780 	p = AppS2wParse_NextParamGet(&ptr);
// 11781     if (p)
// 11782     {/* we donot expect a pin in case of PB mathod*/
// 11783         AppS2wParse_Boolean(p, &params.storeL2ConInfo);
// 11784     }
// 11785 #ifdef GSN_P2P
// 11786     if(s2wCurrent.mode == 3)
// 11787     {
// 11788         GSN_WDD_P2P_CONF_T* p2pConf;
// 11789 
// 11790         /* get the P2P info */
// 11791         p2pConf = GsnWdd_P2pConfPtrGet(&s2wappMainTaskCtxt->wdd);
// 11792 
// 11793         if(p2pConf->roleGo == P2P_ROLE_GO)
// 11794         {
// 11795             status = GsnWdd_P2pProvStart(&s2wappMainTaskCtxt->wdd,method,params.pin);
// 11796         }
// 11797         else
// 11798         {
// 11799             status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
// 11800         }
// 11801     }
// 11802     else
// 11803 #endif
// 11804     {
// 11805         status = AppS2wHal_WpsAssociate(&params, &ap_ssid,0);
// 11806     }
// 11807 
// 11808     return status;
// 11809 #endif
// 11810 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond745 Using cfiCommon0
          CFI Function AppS2wCmd_Wwps
          CFI Conditional ??CrossCallReturnLabel_246
          CFI R4 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+96
          CFI Block cfiCond746 Using cfiCommon0
          CFI (cfiCond746) Function AppS2wCmd_Wwps
          CFI (cfiCond746) Conditional ??CrossCallReturnLabel_245
          CFI (cfiCond746) R4 Frame(CFA, -8)
          CFI (cfiCond746) R14 Frame(CFA, -4)
          CFI (cfiCond746) CFA R13+96
          CFI Block cfiCond747 Using cfiCommon0
          CFI (cfiCond747) Function AppS2wCmd_Wwps
          CFI (cfiCond747) Conditional ??CrossCallReturnLabel_244
          CFI (cfiCond747) R4 Frame(CFA, -8)
          CFI (cfiCond747) R14 Frame(CFA, -4)
          CFI (cfiCond747) CFA R13+96
          CFI Block cfiCond748 Using cfiCommon0
          CFI (cfiCond748) Function AppS2wCmd_Wwps
          CFI (cfiCond748) Conditional ??CrossCallReturnLabel_243
          CFI (cfiCond748) R4 Frame(CFA, -8)
          CFI (cfiCond748) R14 Frame(CFA, -4)
          CFI (cfiCond748) CFA R13+96
          CFI Block cfiCond749 Using cfiCommon0
          CFI (cfiCond749) Function AppS2wCmd_Wwps
          CFI (cfiCond749) Conditional ??CrossCallReturnLabel_242
          CFI (cfiCond749) R4 Frame(CFA, -8)
          CFI (cfiCond749) R14 Frame(CFA, -4)
          CFI (cfiCond749) CFA R13+96
          CFI Block cfiPicker750 Using cfiCommon1
          CFI (cfiPicker750) NoFunction
          CFI (cfiPicker750) Picker
        THUMB
?Subroutine45:
        ADD      R0,SP,#+84
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Wwps AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond745
          CFI EndBlock cfiCond746
          CFI EndBlock cfiCond747
          CFI EndBlock cfiCond748
          CFI EndBlock cfiCond749
          CFI EndBlock cfiPicker750
// 11811 #endif /* GSN_SECURITY_WPS_ENABLE */
// 11812 
// 11813 #ifdef S2W_PERSISTENT_TMR_SUPPORT
// 11814 
// 11815 VOID
// 11816 AppS2w_PersistentTmrCb(void *ptr, GSN_SOFT_TMR_HANDLE_T handle)
// 11817 {
// 11818     switch ((UINT32)ptr)
// 11819     {
// 11820         case 0:
// 11821             AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_0_TIMEOUT);
// 11822             break;
// 11823         case 1:
// 11824             AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_1_TIMEOUT);
// 11825             break;
// 11826         case 2:
// 11827             AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_2_TIMEOUT);
// 11828             break; 
// 11829         case 3:
// 11830             AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_3_TIMEOUT);
// 11831             break;
// 11832         case 4:
// 11833             AppMainCtx_TaskNotify(APP_EVENT_PERSISTANT_TMR_4_TIMEOUT);
// 11834             break;    
// 11835     }
// 11836 }
// 11837 
// 11838 PUBLIC UINT8 
// 11839 AppS2wCmd_PerstTmrStart(UINT8 *ptr)
// 11840 {
// 11841 	UINT8 *p;
// 11842 	UINT32 time, status, id, type;
// 11843 	p = AppS2wParse_NextParamGet(&ptr);
// 11844     if (!p)
// 11845     {
// 11846         return S2W_EINVAL;
// 11847     }
// 11848     AppS2wParse_Int(p, &id);
// 11849     if(id > APP_NUM_OF_PERSIST_TMR)
// 11850     {
// 11851         return S2W_EINVAL;
// 11852     }
// 11853     p = AppS2wParse_NextParamGet(&ptr);
// 11854     if (!p)
// 11855     {
// 11856         return S2W_EINVAL;
// 11857     }
// 11858     AppS2wParse_Int(p, &type);
// 11859     if(type > GSN_TIMER_TYPE_PERSISTENT_VARIABLE )
// 11860     {
// 11861         return S2W_EINVAL;
// 11862     }
// 11863     p = AppS2wParse_NextParamGet(&ptr);
// 11864     if (!p)
// 11865     {
// 11866         return S2W_EINVAL;
// 11867     }
// 11868     if(AppS2wParse_Int(p, &time))
// 11869     {
// 11870         return S2W_EINVAL;
// 11871     }
// 11872     if(GsnPersistTmr_IsActive(id))
// 11873     {
// 11874         return S2W_FAILURE;
// 11875     }
// 11876     
// 11877     status = GsnPersistTmr_Create( id, type, MSEC_TO_SYSTIME(time) , 
// 11878         AppS2w_PersistentTmrCb, (void *)id, TRUE);
// 11879     if(status == GSN_SUCCESS)
// 11880         return S2W_SUCCESS;
// 11881     else
// 11882         return S2W_FAILURE;
// 11883 }
// 11884 PUBLIC UINT8
// 11885 AppS2wCmd_PerstTmrStop(UINT8 *ptr)
// 11886 {
// 11887     UINT32 id, status;
// 11888     UINT8 *p;
// 11889     p = AppS2wParse_NextParamGet(&ptr);
// 11890     if (!p)
// 11891     {
// 11892         return S2W_EINVAL;
// 11893     }
// 11894     AppS2wParse_Int(p, &id);
// 11895     if(id > APP_NUM_OF_PERSIST_TMR)
// 11896     {
// 11897         return S2W_EINVAL;
// 11898     }
// 11899     status = GsnPersistTmr_Stop(id);
// 11900     if(status == GSN_SUCCESS)
// 11901         return S2W_SUCCESS;
// 11902     else
// 11903         return S2W_FAILURE;
// 11904 }
// 11905 PUBLIC UINT8
// 11906 AppS2wCmd_PerstTmrDelete(UINT8 *ptr)
// 11907 {
// 11908 	UINT32 id, status;
// 11909 	UINT8 *p;
// 11910 	p = AppS2wParse_NextParamGet(&ptr);
// 11911 	if (!p)
// 11912     {
// 11913         return S2W_EINVAL;
// 11914     }
// 11915 	AppS2wParse_Int(p, &id);
// 11916 	if(id > APP_NUM_OF_PERSIST_TMR)
// 11917 	{
// 11918 		return S2W_EINVAL;
// 11919 	}
// 11920 	status = GsnPersistTmr_Delete(id);
// 11921 	if(status == GSN_SUCCESS)
// 11922 		return S2W_SUCCESS;
// 11923 	else
// 11924 		return S2W_FAILURE;
// 11925 
// 11926 }
// 11927 PUBLIC UINT8
// 11928 AppS2wCmd_PerstTmrReStart(UINT8 *ptr)
// 11929 {
// 11930 	UINT32 id, status, period;
// 11931 	UINT8 *p;
// 11932 	p = AppS2wParse_NextParamGet(&ptr);
// 11933 	if (!p)
// 11934     {
// 11935         return S2W_EINVAL;
// 11936     }
// 11937 	AppS2wParse_Int(p, &id);
// 11938 	if(id > APP_NUM_OF_PERSIST_TMR)
// 11939 	{
// 11940 		return S2W_EINVAL;
// 11941 	}
// 11942 	p = AppS2wParse_NextParamGet(&ptr);
// 11943 	if (!p)
// 11944     {
// 11945         return S2W_EINVAL;
// 11946     }
// 11947 	AppS2wParse_Int(p, &period);
// 11948 	if(id > APP_NUM_OF_PERSIST_TMR)
// 11949 	{
// 11950 		return S2W_EINVAL;
// 11951 	}
// 11952 	status = GsnPersistTmr_ReStart(id, period, GSN_P_TMR_PREV_EXP_TIME);
// 11953 	if(status == GSN_SUCCESS)
// 11954 		return S2W_SUCCESS;
// 11955 	else
// 11956 		return S2W_SUCCESS;
// 11957 }
// 11958 #endif
// 11959 #ifdef S2W_EMU
// 11960 /* Commands for EMU */
// 11961 /**
// 11962  ******************************************************************
// 11963  * @ingroup S2w-Application
// 11964  * @brief Process the AT+EMUVER=? command
// 11965  *   This function gives the version of EMU.
// 11966  *   
// 11967  * @param ptr Pointer to the user input string.
// 11968  *
// 11969  * @return S2W_SUCCESS - operation successful.
// 11970  * 
// 11971  ******************************************************************/
// 11972 PRIVATE UINT8
// 11973 AppS2wCmd_EmuVer(UINT8 *ptr)
// 11974 {
// 11975     UINT8 buf[20];
// 11976 
// 11977     if (ptr[0] == '?' && ( ptr[1] == '\0') )
// 11978     {
// 11979 	GsnEmu_GetVersion(buf);
// 11980 	S2w_Printf("\r\n%s\r\n",&buf);
// 11981         return S2W_SUCCESS;
// 11982     }   
// 11983     else
// 11984     {
// 11985         return S2W_FAILURE;
// 11986     }
// 11987 } 
// 11988 
// 11989 /**
// 11990  ******************************************************************
// 11991  * @ingroup S2w-Application
// 11992  * @brief Process the AT+EMUSUPMOD=? command
// 11993  *   This function tells  EMU supported modules
// 11994  *   
// 11995  * @param ptr Pointer to the user input string.
// 11996  * @return (OR'ed value of the modules)
// 11997  *         1 - Sigma Delta ADC 
// 11998  *         2 - PL7223 
// 11999  * @return S2W_SUCCESS - operation successful.
// 12000  *
// 12001  ******************************************************************/
// 12002 PRIVATE UINT8
// 12003 AppS2wCmd_SupportedModules(UINT8 *ptr)
// 12004 {
// 12005     UINT32 value;
// 12006 	
// 12007     if (ptr[0] == '?' && ( ptr[1] == '\0') )
// 12008     {
// 12009     	value = GsnEmu_GetSupportedModules();
// 12010 	S2w_Printf("\r\n%02x\r\n",value); 
// 12011         return S2W_SUCCESS; 
// 12012     }
// 12013     else
// 12014     {
// 12015         return S2W_FAILURE;
// 12016     }       
// 12017 } 
// 12018 
// 12019 /**
// 12020  ******************************************************************
// 12021  * @ingroup S2w-Application
// 12022  * @brief Process the AT+EMULOADCTRL=<action>(ON or OFF) command
// 12023  *   This function loads the EMU control when it is in Running state.
// 12024  *   
// 12025  * @param ptr Pointer to the user input string.
// 12026  *                      1 - ON , 0 - OFF
// 12027  * @return S2W_SUCCESS - operation successful.
// 12028  * @return EMU STATUS   
// 12029  * @return S2W_EINVAL   - invalid input
// 12030  ******************************************************************/
// 12031 
// 12032 PRIVATE UINT8
// 12033 AppS2wCmd_EmuLoadCtl(UINT8 *ptr)
// 12034 {
// 12035 
// 12036     GSN_EMU_STATUS_T status;
// 12037     UINT8 estatus;
// 12038     BOOL mode;
// 12039 
// 12040     estatus = AppS2wParse_Boolean(ptr, (UINT8 *)&mode);
// 12041     
// 12042     if (estatus != S2W_SUCCESS)
// 12043     {
// 12044         return estatus;
// 12045     }  
// 12046     
// 12047     status = GsnEmu_LoadControl(&(appCtx.appEmuCtx.emu),mode);
// 12048   
// 12049     if (GSN_EMU_STATUS_SUCCESS == status )
// 12050     {    
// 12051         return S2W_SUCCESS; 
// 12052     }
// 12053     else
// 12054     {
// 12055         return S2W_FAILURE;
// 12056     }
// 12057 }
// 12058 
// 12059 /**
// 12060  ******************************************************************
// 12061  * @ingroup S2w-Application
// 12062  * @brief Process the AT+EMULOADSTATUS command
// 12063  *   This function loads the  EMU status.
// 12064  *   
// 12065  * @param ptr Pointer to the user input string.
// 12066  * @return S2W_SUCCESS   - operation successful.
// 12067  * @return S2W_EINVAL    - invalid input
// 12068  ******************************************************************/
// 12069 PRIVATE UINT8
// 12070 AppS2wCmd_EmuLoadStatus(UINT8 *ptr)
// 12071 {	 
// 12072     GSN_EMU_STATUS_T status;
// 12073     BOOL mode;
// 12074     
// 12075     if (ptr[0] == '\0')
// 12076     {
// 12077         status = GsnEmu_GetLoadStatus(&(appCtx.appEmuCtx.emu), &mode);
// 12078           
// 12079         if(GSN_EMU_STATUS_SUCCESS == status)
// 12080         {
// 12081             if(1 == mode)
// 12082             {
// 12083                 S2w_Printf("\r\nON\r\n");	
// 12084             }
// 12085             else if(0 == mode)
// 12086             {
// 12087                 S2w_Printf("\r\nOFF\r\n"); 
// 12088             }
// 12089             return S2W_SUCCESS;
// 12090         }
// 12091         else
// 12092         {
// 12093             return S2W_FAILURE;
// 12094         }
// 12095     }
// 12096     else 
// 12097     {
// 12098 	return S2W_EINVAL;
// 12099     }
// 12100 		
// 12101 }
// 12102 
// 12103 /**
// 12104  ******************************************************************
// 12105  * @ingroup S2w-Application
// 12106  * @brief Process the AT+EMUSTART command
// 12107  *   This function starts the EMU
// 12108  *   
// 12109  * @param ptr Pointer to the user input string.
// 12110  * @return S2W_SUCCESS   - operation successful.
// 12111  * @return EMU STATUS   
// 12112   * @return S2W_EINVAL   - invalid input
// 12113  ******************************************************************/
// 12114 PRIVATE UINT8
// 12115 AppS2wCmd_EmuStart(UINT8 *ptr)
// 12116 {
// 12117     GSN_EMU_STATUS_T status = GSN_EMU_STATUS_FAILURE;
// 12118     GSN_EMU_SDADC_PINGPONG_BUFF_T buff;
// 12119     
// 12120     GSN_EMU_STATE_T state;
// 12121 
// 12122     /* Configurations can't be set when the system is RUNNING */
// 12123     GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state); 
// 12124     
// 12125     if( state == GSN_EMU_STATE_RUNNING )
// 12126     {
// 12127        return S2W_FAILURE;      
// 12128     }
// 12129     
// 12130     if (ptr[0] == '\0')
// 12131     {   
// 12132         if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_SIGMADELTA_ADC )
// 12133         {
// 12134             if(GSN_EMU_STATUS_SUCCESS == AppEmu_BuffAllocate())
// 12135             {
// 12136                 buff.vPriBuff = appCtx.appEmuCtx.appEmuSdadcPbuf1;
// 12137                 buff.iPriBuff = appCtx.appEmuCtx.appEmuSdadcPbuf2;
// 12138                 buff.vSecBuff = appCtx.appEmuCtx.appEmuSdadcPbuf3;
// 12139                 buff.iSecBuff = appCtx.appEmuCtx.appEmuSdadcPbuf4;
// 12140                 buff.size = APP_EMU_SDADC_BUF_SIZE;
// 12141             }
// 12142             else
// 12143             {
// 12144               return S2W_FAILURE;
// 12145             }
// 12146             status = GsnEmu_Start(&(appCtx.appEmuCtx.emu),&(appCtx.appEmuCtx.confValue),&buff);
// 12147         }
// 12148         else if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_PL722X )
// 12149         {
// 12150             status = GsnEmu_Start(&(appCtx.appEmuCtx.emu),&(appCtx.appEmuCtx.confValue),NULL);
// 12151         }
// 12152         
// 12153         if(GSN_EMU_STATUS_SUCCESS == status)
// 12154         {
// 12155             return S2W_SUCCESS;
// 12156         }
// 12157         else
// 12158         {
// 12159           return S2W_FAILURE;
// 12160         }
// 12161     }
// 12162     else 
// 12163     {
// 12164 	return S2W_EINVAL;
// 12165     }
// 12166 		
// 12167 }
// 12168 
// 12169 /**
// 12170  ******************************************************************
// 12171  * @ingroup S2w-Application
// 12172  * @brief Process the AT+EMUSTOP command
// 12173  *   This function stops the EMU
// 12174  *   
// 12175  * @param ptr Pointer to the user input string.
// 12176  * @return S2W_SUCCESS   - operation successful.
// 12177  * @return EMU STATUS   
// 12178   * @return S2W_EINVAL   - invalid input
// 12179  ******************************************************************/
// 12180 PRIVATE UINT8
// 12181 AppS2wCmd_EmuStop(UINT8 *ptr)
// 12182 {
// 12183     GSN_EMU_STATUS_T status;   
// 12184     
// 12185     if (ptr[0] == '\0')
// 12186     {
// 12187         status =  GsnEmu_Stop(&(appCtx.appEmuCtx.emu));
// 12188         if(GSN_EMU_STATUS_SUCCESS == status)
// 12189         {
// 12190             if(appCtx.appEmuCtx.confValue.module == GSN_EMU_MODULE_SIGMADELTA_ADC)
// 12191             {
// 12192                 if(GSN_EMU_STATUS_SUCCESS == AppEmu_BuffDeallocate())
// 12193                 {     
// 12194                      return S2W_SUCCESS;
// 12195                 }
// 12196                 else 
// 12197                 {
// 12198                     return S2W_FAILURE;
// 12199                 }
// 12200             }
// 12201             return S2W_SUCCESS;
// 12202         }
// 12203         else
// 12204         {
// 12205             return S2W_FAILURE;
// 12206         }
// 12207     }
// 12208     else 
// 12209     {
// 12210 	return S2W_EINVAL;
// 12211     }
// 12212 		
// 12213 }
// 12214 
// 12215 /**
// 12216  ******************************************************************
// 12217  * @ingroup S2w-Application
// 12218  * @brief Process the AT+EMUGETVALUES command
// 12219  *   This function returns the various values associated with EMU.
// 12220  *   
// 12221  * @param ptr Pointer to the user input string.
// 12222  * @return EMU VALUES    - Voltage,Current,Power,Energy,Frequency & 
// 12223  *                          Power factor 
// 12224  * @return S2W_SUCCESS   - operation successful.
// 12225  * @return S2W_EINVAL    - invalid input
// 12226  ******************************************************************/
// 12227 PRIVATE UINT8
// 12228 AppS2wCmd_EmuGetValues(UINT8 *ptr)
// 12229 {
// 12230     GSN_EMU_ELECTRIC_PARAMS_T eparam;
// 12231     GSN_EMU_STATUS_T status;
// 12232     
// 12233     if (ptr[0] == '\0')
// 12234     {
// 12235         status = GsnEmu_GetElectricParams(&(appCtx.appEmuCtx.emu),&eparam);
// 12236         
// 12237   	if(GSN_EMU_STATUS_SUCCESS == status )
// 12238         {
// 12239             S2w_Printf("\r\nV=%07.3fV\r\n",eparam.vrms);                    
// 12240             S2w_Printf("I=%07.3fA\r\n",eparam.irms);	
// 12241             S2w_Printf("AP=%07.3fW\r\n",eparam.activePower);
// 12242             S2w_Printf("PF=%07.3f\r\n",eparam.powerfactor);
// 12243             S2w_Printf("F=%07.3fHz\r\n",eparam.frequency);
// 12244             S2w_Printf("E=%07.3fKWH\r\n",eparam.accumulateEnergy);
// 12245             return S2W_SUCCESS;
// 12246         }
// 12247         else
// 12248         {
// 12249             return S2W_FAILURE;
// 12250         }
// 12251     }
// 12252     else
// 12253     {
// 12254         return S2W_EINVAL;
// 12255     }    
// 12256 }
// 12257 
// 12258 /**
// 12259  ******************************************************************
// 12260  * @ingroup S2w-Application
// 12261  * @brief Process the AT+EMUGETINTSVALUES command
// 12262  *   This function returns the various values associated with EMU.
// 12263  *   
// 12264  * @param ptr Pointer to the user input string.
// 12265  * @return EMU INSTANTVALUES    - Voltage,Current,Power,Energy,
// 12266  *                                 Frequency & Power factor 
// 12267  *                          
// 12268  * @return S2W_SUCCESS   - operation successful.
// 12269  * @return S2W_EINVAL    - invalid input
// 12270  ******************************************************************/
// 12271 PRIVATE UINT8
// 12272 AppS2wCmd_EmuGetInstValues(UINT8 *ptr)
// 12273 {
// 12274     GSN_EMU_ELECTRIC_PARAMS_T eparam;
// 12275     GSN_EMU_STATUS_T status;
// 12276     
// 12277     if (ptr[0] == '\0')
// 12278     {
// 12279         status = GsnEmu_GetInstantElectricParams(&(appCtx.appEmuCtx.emu),&eparam);
// 12280         
// 12281   	if(GSN_EMU_STATUS_SUCCESS == status )
// 12282         {
// 12283             S2w_Printf("\r\nV=%07.3fV\r\n",eparam.vrms);                    
// 12284             S2w_Printf("I=%07.3fA\r\n",eparam.irms);	
// 12285             S2w_Printf("AP=%07.3fW\r\n",eparam.activePower);
// 12286             S2w_Printf("PF=%07.3f\r\n",eparam.powerfactor);
// 12287             S2w_Printf("F=%07.3fHz\r\n",eparam.frequency);
// 12288             S2w_Printf("E=%07.3fKWH\r\n",eparam.accumulateEnergy);
// 12289             return S2W_SUCCESS;
// 12290         }
// 12291         else
// 12292         {
// 12293             return S2W_FAILURE;
// 12294         }
// 12295     }
// 12296     else
// 12297     {
// 12298         return S2W_EINVAL;
// 12299     }    
// 12300 }
// 12301 
// 12302 /**
// 12303  ******************************************************************
// 12304  * @ingroup S2w-Application
// 12305  * @brief Process the AT+EMUSETCONF = 'param','value' command
// 12306  *   This function sets the various parameters of EMU.
// 12307  *   
// 12308  * @param ptr Pointer to the user input string.
// 12309  * @return S2W_SUCCESS - operation successful.
// 12310  * @return S2W_EINVAL    - invalid input
// 12311  ******************************************************************/
// 12312 
// 12313 PRIVATE UINT8
// 12314 AppS2wCmd_EmuSetConf(UINT8 *ptr)
// 12315 {
// 12316     UINT8 *p;
// 12317     APP_EMU_CONFS_T conf;
// 12318     UINT32 value;
// 12319     UINT32 param;
// 12320     UINT32 modcheck;
// 12321     UINT32 modvalue;
// 12322     
// 12323     GSN_EMU_STATE_T state;
// 12324 
// 12325     /* Configurations can't be set when the system is RUNNING */
// 12326     GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state); 
// 12327     
// 12328    if( state == GSN_EMU_STATE_RUNNING )
// 12329    {
// 12330       return S2W_EINVAL;      
// 12331    }
// 12332     
// 12333     p = AppS2wParse_NextParamGet(&ptr);
// 12334     if(!p)
// 12335     {
// 12336         return S2W_EINVAL;
// 12337     }
// 12338     AppS2wParse_Int(p, &param);
// 12339     
// 12340     conf = ( APP_EMU_CONFS_T )param;
// 12341 
// 12342     if(param >APP_EMU_END)
// 12343     {
// 12344  	return S2W_FAILURE;
// 12345     }
// 12346 
// 12347     p = AppS2wParse_NextParamGet(&ptr);
// 12348     if(!p)
// 12349     {
// 12350         return S2W_EINVAL;
// 12351     }
// 12352     AppS2wParse_Int(p,&value); 
// 12353     
// 12354     if( NULL == p)
// 12355     {
// 12356         return S2W_EINVAL;
// 12357     
// 12358     }
// 12359       
// 12360     switch(conf)
// 12361     {
// 12362         case APP_EMU_CONF_MODULE : 
// 12363                 modcheck = GsnEmu_GetSupportedModules();
// 12364                
// 12365                 if((value < modcheck) && (((value)&(value-1)) == 0 ) && (value!= 0))
// 12366                 {
// 12367                     appCtx.appEmuCtx.confValue.module = (GSN_EMU_MODULE_T)value;
// 12368                 }
// 12369                 else
// 12370                 {
// 12371                    return S2W_EINVAL;
// 12372                 }
// 12373             break;
// 12374         case APP_EMU_CONF_SDADC_VCC :        
// 12375 		appCtx.appEmuCtx.confValue.sdadc_vcc = value;
// 12376             
// 12377             break;          
// 12378         case APP_EMU_CONF_SDADC_ICC:
// 12379 		appCtx.appEmuCtx.confValue.sdadc_icc = value;
// 12380           
// 12381             break;
// 12382         case APP_EMU_CONF_SDADC_VDCOFFSET:     
// 12383 		appCtx.appEmuCtx.confValue.sdadc_vdcoffset = value;
// 12384            
// 12385             break;
// 12386         case APP_EMU_CONF_SDADC_IDCOFFSET:     
// 12387         	appCtx.appEmuCtx.confValue.sdadc_idcoffset = value;
// 12388             
// 12389             break;
// 12390         case APP_EMU_CONF_SDADC_VSF:     
// 12391             	appCtx.appEmuCtx.confValue.sdadc_vsf = value;
// 12392             
// 12393             break;
// 12394         case APP_EMU_CONF_SDADC_ISF:     
// 12395             	appCtx.appEmuCtx.confValue.sdadc_isf = value;
// 12396             
// 12397             break;
// 12398         case APP_EMU_CONF_SDADC_SF:     
// 12399 		appCtx.appEmuCtx.confValue.sdadc_samplingFreq = value;
// 12400       
// 12401                 
// 12402             break;    
// 12403         case APP_EMU_CONF_SDADC_LCG:
// 12404             /*valid gpio numbers are 0 - 37*/
// 12405             if((value < 38))
// 12406             {
// 12407                 appCtx.appEmuCtx.confValue.sdadc_load_gpio = value;
// 12408             }
// 12409             else 
// 12410             return S2W_EINVAL;
// 12411 
// 12412             break;
// 12413         case APP_EMU_CONF_SDADC_VUT:     
// 12414                 appCtx.appEmuCtx.confValue.sdadc_vut = value;
// 12415             
// 12416             break;
// 12417         case APP_EMU_CONF_SDADC_IUT:     
// 12418             	appCtx.appEmuCtx.confValue.sdadc_iut = value;
// 12419             
// 12420             break;
// 12421         case APP_EMU_CONF_SDADC_FUT:     
// 12422           	appCtx.appEmuCtx.confValue.sdadc_fut =value;	
// 12423             
// 12424             break;
// 12425         case APP_EMU_CONF_SDADC_VLT:     
// 12426        		appCtx.appEmuCtx.confValue.sdadc_vlt = value;
// 12427             
// 12428             break;
// 12429         case APP_EMU_CONF_SDADC_ILT:     
// 12430        		appCtx.appEmuCtx.confValue.sdadc_ilt = value;
// 12431             
// 12432             break;
// 12433         case APP_EMU_CONF_SDADC_FLT:     
// 12434        		appCtx.appEmuCtx.confValue.sdadc_flt = value;
// 12435             
// 12436             break;
// 12437         case APP_EMU_CONF_SDADC_VAC:     
// 12438          
// 12439               if(0 == value  )
// 12440               {
// 12441                   /* 0 refers to adc channel zero */
// 12442                   appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_0;
// 12443               }
// 12444               else if( 1 == value )
// 12445               {
// 12446                   /* 1 refers to adc channel one */
// 12447                   appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_1;
// 12448               }
// 12449               else if(2 == value )
// 12450               {
// 12451                   /* 2 refers to adc channel two */
// 12452                   appCtx.appEmuCtx.confValue.sdadc_vac = GSN_EMU_SDADC_CHANNEL_2;
// 12453               }
// 12454               else
// 12455                 return S2W_EINVAL;
// 12456               break;
// 12457             
// 12458         case APP_EMU_CONF_SDADC_IAC: 
// 12459           
// 12460               if( 0 == value  )
// 12461               {
// 12462                   /* 0 refers to adc channel zero */
// 12463                   appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_0;
// 12464               }
// 12465               else if( 1 == value )
// 12466               {
// 12467                    /* 1 refers to adc channel one */
// 12468                   appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_1;
// 12469               }
// 12470               else if( 2 == value )
// 12471               {
// 12472                   /* 2 refers to adc channel two */
// 12473                   appCtx.appEmuCtx.confValue.sdadc_iac = GSN_EMU_SDADC_CHANNEL_2;
// 12474               }
// 12475               else
// 12476                 return S2W_EINVAL;
// 12477               break;
// 12478               
// 12479          case APP_EMU_CONF_SDADC_G0: 
// 12480            
// 12481               p = AppS2wParse_NextParamGet(&ptr);
// 12482               AppS2wParse_Int(p,&modvalue);
// 12483                    
// 12484               if((1 == value ) && (NULL != p))
// 12485               {
// 12486                   /* Gain value can be 0,1,2 or 3 */
// 12487                   if(0 == modvalue )
// 12488                   {     
// 12489                       /*enables the gain*/
// 12490                       appCtx.appEmuCtx.confValue.gain_flag0 = value;
// 12491                       appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN0;
// 12492                   }
// 12493                   else if( 1 == modvalue )
// 12494                   {
// 12495                     /*enables the gain*/
// 12496                       appCtx.appEmuCtx.confValue.gain_flag0 = value;
// 12497                       appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN1;
// 12498                   }
// 12499                   else if( 2 == modvalue )
// 12500                   {
// 12501                     /*enables the gain*/
// 12502                       appCtx.appEmuCtx.confValue.gain_flag0 = value;
// 12503                       appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN2;
// 12504                   }
// 12505                   else if( 3 == modvalue )
// 12506                   {
// 12507                       /*enables the gain*/
// 12508                       appCtx.appEmuCtx.confValue.gain_flag0 = value;
// 12509                       appCtx.appEmuCtx.confValue.sdadc_gain0 = GSN_EMU_SDADC_GAIN3;
// 12510                   }
// 12511                   else 
// 12512                     return S2W_EINVAL;
// 12513                   break;
// 12514               }
// 12515     
// 12516              else if (( 0 == value ) && (NULL == p))
// 12517               {
// 12518                   appCtx.appEmuCtx.confValue.gain_flag0 = value;
// 12519               }
// 12520               
// 12521               else
// 12522               {
// 12523                   return S2W_EINVAL;
// 12524               }
// 12525                break;
// 12526               
// 12527          case APP_EMU_CONF_SDADC_G1: 
// 12528                    
// 12529             p = AppS2wParse_NextParamGet(&ptr);
// 12530             AppS2wParse_Int(p,&modvalue); 
// 12531             
// 12532             if((1 == value ) && (NULL != p))
// 12533               {
// 12534 
// 12535                   /* Gain value can be 0,1,2 or 3 */
// 12536                   if(0 == modvalue )
// 12537                   {
// 12538                       /*enables the gain*/
// 12539                       appCtx.appEmuCtx.confValue.gain_flag1 = value;
// 12540                       appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN0;
// 12541                   }
// 12542                   else if( 1 == modvalue )
// 12543                   {
// 12544                       /*enables the gain*/
// 12545                       appCtx.appEmuCtx.confValue.gain_flag1 = value;
// 12546                       appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN1;
// 12547                   }
// 12548                   else if( 2 == modvalue )
// 12549                   {
// 12550                       /*enables the gain*/
// 12551                       appCtx.appEmuCtx.confValue.gain_flag1 = value;
// 12552                       appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN2;
// 12553                   }
// 12554                   else if( 3 == modvalue )
// 12555                   {
// 12556                       /*enables the gain*/
// 12557                       appCtx.appEmuCtx.confValue.gain_flag1 = value;
// 12558                       appCtx.appEmuCtx.confValue.sdadc_gain1 = GSN_EMU_SDADC_GAIN3;
// 12559                   }
// 12560                   else 
// 12561                     return S2W_EINVAL;
// 12562                   break;
// 12563               }
// 12564     
// 12565              else if (( 0 == value ) && (NULL == p))
// 12566               {
// 12567                   appCtx.appEmuCtx.confValue.gain_flag1 = value;
// 12568               }
// 12569               
// 12570               else
// 12571               {
// 12572                   return S2W_EINVAL;
// 12573               }
// 12574                break;
// 12575             
// 12576          case APP_EMU_CONF_SDADC_G2: 
// 12577            
// 12578               p = AppS2wParse_NextParamGet(&ptr);
// 12579               AppS2wParse_Int(p,&modvalue);
// 12580            
// 12581              if((1 == value ) && (NULL != p))
// 12582               {
// 12583 
// 12584                   /* Gain value can be 0,1,2 or 3 */
// 12585                   if(0 == modvalue )
// 12586                   {
// 12587                       /*enables the gain*/
// 12588                       appCtx.appEmuCtx.confValue.gain_flag2 = value;
// 12589                       appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN0;
// 12590                   }
// 12591                   else if( 1 == modvalue )
// 12592                   {
// 12593                       /*enables the gain*/
// 12594                       appCtx.appEmuCtx.confValue.gain_flag2 = value;
// 12595                       appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN1;
// 12596                   }
// 12597                   else if( 2 == modvalue )
// 12598                   {
// 12599                       /*enables the gain*/
// 12600                       appCtx.appEmuCtx.confValue.gain_flag2 = value;
// 12601                       appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN2;
// 12602                   }
// 12603                   else if( 3 == modvalue )
// 12604                   {
// 12605                       /*enables the gain*/
// 12606                       appCtx.appEmuCtx.confValue.gain_flag2 = value;
// 12607                       appCtx.appEmuCtx.confValue.sdadc_gain2 = GSN_EMU_SDADC_GAIN3;
// 12608                   }
// 12609                   else 
// 12610                     return S2W_EINVAL;
// 12611                   break;
// 12612               }
// 12613     
// 12614               else if (( 0 == value ) && (NULL == p))
// 12615               {
// 12616                   appCtx.appEmuCtx.confValue.gain_flag2 = value;
// 12617               }
// 12618               
// 12619               else
// 12620               {
// 12621                   return S2W_EINVAL;
// 12622               }
// 12623              break;
// 12624            
// 12625 			 
// 12626 		case APP_EMU_CONF_SDADC_ATTENCONST:
// 12627 		{
// 12628             //appCtx.appEmuCtx.emu.attenuationConstFp = value;
// 12629 		    break;
// 12630 		}
// 12631 
// 12632         case APP_EMU_CONF_PL722X_SPI_CHANNEL:   
// 12633           
// 12634               if( (1 == value) || (0 == value))
// 12635               {
// 12636                   appCtx.appEmuCtx.confValue.pl722x_spi_channel = value;
// 12637               }
// 12638               else 
// 12639               return S2W_EINVAL;
// 12640             
// 12641             break;
// 12642         case APP_EMU_CONF_PL722X_SET_FREQ_MS:     
// 12643          	appCtx.appEmuCtx.confValue.pl722x_readFreq_ms = value;
// 12644                 
// 12645             break;
// 12646 	case APP_EMU_CONF_PL722X_CS_GPIO:
// 12647           /*valid gpio numbers are 0 - 37*/
// 12648             if((value < 38))
// 12649             {
// 12650 		appCtx.appEmuCtx.confValue.pl722x_gpio_cs = value;
// 12651             }
// 12652             else 
// 12653             return S2W_EINVAL;
// 12654                 
// 12655             break;
// 12656 	case APP_EMU_CONF_PL722X_RST_GPIO:
// 12657           /*valid gpio numbers are 0 - 37*/
// 12658             if((value < 38))
// 12659             {
// 12660 		appCtx.appEmuCtx.confValue.pl722x_gpio_rst = value;
// 12661             }
// 12662             else 
// 12663             return S2W_EINVAL;
// 12664                 
// 12665             break;
// 12666         default:
// 12667              return S2W_EINVAL;
// 12668             break;
// 12669            
// 12670     }
// 12671      return S2W_SUCCESS;
// 12672 }
// 12673 
// 12674 /**
// 12675  ******************************************************************
// 12676  * @ingroup S2w-Application
// 12677  * @brief Process the AT+EMUGETCONF = 'value' command
// 12678  *   This function returns the various parameters of EMU .
// 12679  *   
// 12680  * @param ptr Pointer to the user input string.
// 12681  * @return S2W_SUCCESS   - operation successful.
// 12682  * @return S2W_EINVAL    - invalid input
// 12683  ******************************************************************/
// 12684 PRIVATE UINT8
// 12685 AppS2wCmd_EmuGetConf(UINT8 *ptr)
// 12686 {
// 12687     UINT8 *p;
// 12688     UINT32 param;
// 12689     APP_EMU_CONFS_T conf;
// 12690     
// 12691     p = AppS2wParse_NextParamGet(&ptr);
// 12692     if(!p)
// 12693     {
// 12694         return S2W_EINVAL;
// 12695     }
// 12696     AppS2wParse_Int(p, &param);
// 12697     
// 12698     conf = (APP_EMU_CONFS_T) param;   
// 12699     GsnEmu_GetConfPtr(&(appCtx.appEmuCtx.emu), &(appCtx.appEmuCtx.confValue));
// 12700     
// 12701     if((param > APP_EMU_END))
// 12702     {
// 12703  	return S2W_EINVAL;
// 12704     }
// 12705 	
// 12706    	switch(conf)
// 12707         {
// 12708             case APP_EMU_CONF_MODULE:
// 12709                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.module);  
// 12710                  
// 12711                  break;
// 12712             case APP_EMU_CONF_SDADC_VCC :
// 12713                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vcc);    
// 12714                  
// 12715                  break;
// 12716             case APP_EMU_CONF_SDADC_ICC:
// 12717                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_icc);          
// 12718                  
// 12719                  break;
// 12720             case APP_EMU_CONF_SDADC_VDCOFFSET:     
// 12721                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vdcoffset);          
// 12722                  
// 12723                  break;
// 12724             case APP_EMU_CONF_SDADC_IDCOFFSET:     
// 12725                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_idcoffset);          
// 12726                  
// 12727                  break;
// 12728             case APP_EMU_CONF_SDADC_VSF:     
// 12729                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_vsf);          
// 12730                  
// 12731                  break;
// 12732             case APP_EMU_CONF_SDADC_ISF:     
// 12733                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_isf);          
// 12734                  
// 12735                  break;
// 12736             case APP_EMU_CONF_SDADC_SF:     
// 12737                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_samplingFreq);          
// 12738                  
// 12739                  break;
// 12740             case APP_EMU_CONF_SDADC_LCG:     
// 12741                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.sdadc_load_gpio);          
// 12742                  
// 12743                  break;
// 12744             case APP_EMU_CONF_SDADC_VUT:     
// 12745                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vut);          
// 12746                  
// 12747                  break;
// 12748             case APP_EMU_CONF_SDADC_IUT:     
// 12749                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_iut);          
// 12750                  
// 12751                  break;
// 12752             case APP_EMU_CONF_SDADC_FUT:     
// 12753                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_fut);          
// 12754                  
// 12755                  break;
// 12756             case APP_EMU_CONF_SDADC_VLT:     
// 12757                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_vlt);          
// 12758                  
// 12759                  break;
// 12760             case APP_EMU_CONF_SDADC_ILT:     
// 12761                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_ilt);          
// 12762                  
// 12763                  break;
// 12764             case APP_EMU_CONF_SDADC_FLT:     
// 12765                  S2w_Printf("\r\n%f\r\n",appCtx.appEmuCtx.confValue.sdadc_flt);          
// 12766                  
// 12767                  break;
// 12768             case APP_EMU_CONF_SDADC_VAC:       
// 12769                  
// 12770                  if(GSN_EMU_SDADC_CHANNEL_0 == appCtx.appEmuCtx.confValue.sdadc_vac)
// 12771                  {
// 12772                      S2w_Printf("\r\n0\r\n");  
// 12773                  }
// 12774                  else if(GSN_EMU_SDADC_CHANNEL_1 == appCtx.appEmuCtx.confValue.sdadc_vac)
// 12775                  {
// 12776                      S2w_Printf("\r\n1\r\n");  
// 12777                  }
// 12778                  else if(GSN_EMU_SDADC_CHANNEL_2 == appCtx.appEmuCtx.confValue.sdadc_vac)
// 12779                  {
// 12780                      S2w_Printf("\r\n2\r\n");  
// 12781                  }
// 12782                  
// 12783                  break;
// 12784             case APP_EMU_CONF_SDADC_IAC:      
// 12785                  
// 12786                  if(GSN_EMU_SDADC_CHANNEL_0 == appCtx.appEmuCtx.confValue.sdadc_iac)
// 12787                  {
// 12788                      S2w_Printf("\r\n0\r\n");  
// 12789                  }
// 12790                  else if(GSN_EMU_SDADC_CHANNEL_1 == appCtx.appEmuCtx.confValue.sdadc_iac)
// 12791                  {
// 12792                      S2w_Printf("\r\n1\r\n");  
// 12793                  }
// 12794                  else if(GSN_EMU_SDADC_CHANNEL_2 == appCtx.appEmuCtx.confValue.sdadc_iac)
// 12795                  {
// 12796                      S2w_Printf("\r\n2\r\n");  
// 12797                  }
// 12798                  
// 12799                  break;
// 12800             case APP_EMU_CONF_SDADC_G0:
// 12801               
// 12802                 /*check for verbose or nonverbose mode*/
// 12803                 if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
// 12804                 {
// 12805                      if ( appCtx.appEmuCtx.confValue.gain_flag0 == 0)
// 12806                      {
// 12807                         S2w_Printf("\r\n0\r\n");
// 12808                         break;
// 12809                      }
// 12810                      else if( appCtx.appEmuCtx.confValue.gain_flag0 == 1)
// 12811                      {
// 12812                          if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain0 )
// 12813                          {
// 12814                            S2w_Printf("\r\n1:0\r\n");  
// 12815                          }
// 12816                          else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain0)
// 12817                          {
// 12818                            S2w_Printf("\r\n1:1\r\n");  
// 12819                          }
// 12820                          else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain0)
// 12821                          {
// 12822                            S2w_Printf("\r\n1:2\r\n");  
// 12823                          }
// 12824                          else if(GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain0)
// 12825                          {
// 12826                            S2w_Printf("\r\n1:3\r\n");  
// 12827                          }
// 12828                          
// 12829                          break;
// 12830                      }
// 12831                 }
// 12832                 else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
// 12833                 {
// 12834                     if ( appCtx.appEmuCtx.confValue.gain_flag0 == 0)
// 12835                     {
// 12836                        S2w_Printf("\r\ndisabled\r\n");
// 12837                        break;
// 12838                     }
// 12839                     else if( appCtx.appEmuCtx.confValue.gain_flag0 == 1)
// 12840                     {
// 12841                         if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain0  )
// 12842                         {
// 12843                           S2w_Printf("\r\nenabled:06db\r\n");  
// 12844                         }
// 12845                         else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain0)
// 12846                         {
// 12847                           S2w_Printf("\r\nenabled:12db\r\n");  
// 12848                         }
// 12849                         else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain0 )
// 12850                         {
// 12851                           S2w_Printf("\r\nenabled:18db\r\n");  
// 12852                         }
// 12853                         else if(GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain0)
// 12854                         {
// 12855                           S2w_Printf("\r\nenabled:24db\r\n");  
// 12856                         }
// 12857                        
// 12858                         break;
// 12859                      }
// 12860                 }
// 12861                  
// 12862            case APP_EMU_CONF_SDADC_G1:
// 12863              
// 12864              /*check for verbose or nonverbose mode*/
// 12865                 if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
// 12866                 {
// 12867                      if ( appCtx.appEmuCtx.confValue.gain_flag1 == 0)
// 12868                      {
// 12869                         S2w_Printf("\r\n0\r\n");
// 12870                         break;
// 12871                      }
// 12872                      else if( appCtx.appEmuCtx.confValue.gain_flag1 == 1)
// 12873                      {
// 12874                          if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12875                          {
// 12876                            S2w_Printf("\r\n1:0\r\n");  
// 12877                          }
// 12878                          else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12879                          {
// 12880                            S2w_Printf("\r\n1:1\r\n");  
// 12881                          }
// 12882                          else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12883                          {
// 12884                            S2w_Printf("\r\n1:2\r\n");  
// 12885                          }
// 12886                          else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12887                          {
// 12888                            S2w_Printf("\r\n1:3\r\n");  
// 12889                          }
// 12890                          
// 12891                          break;
// 12892                      }
// 12893                 }
// 12894                 else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
// 12895                 {
// 12896                     if ( appCtx.appEmuCtx.confValue.gain_flag1 == 0)
// 12897                     {
// 12898                        S2w_Printf("\r\ndisabled\r\n");
// 12899                        break;
// 12900                     }
// 12901                     else if( appCtx.appEmuCtx.confValue.gain_flag1 == 1)
// 12902                     {
// 12903                         if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12904                         {
// 12905                           S2w_Printf("\r\nenabled:06db\r\n");  
// 12906                         }
// 12907                         else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12908                         {
// 12909                           S2w_Printf("\r\nenabled:12db\r\n");  
// 12910                         }
// 12911                         else if(GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12912                         {
// 12913                           S2w_Printf("\r\nenabled:18db\r\n");  
// 12914                         }
// 12915                         else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain1)
// 12916                         {
// 12917                           S2w_Printf("\r\nenabled:24db\r\n");  
// 12918                         }
// 12919                        
// 12920                         break;
// 12921                      }
// 12922                 }
// 12923               
// 12924 
// 12925            case APP_EMU_CONF_SDADC_G2:
// 12926              
// 12927                 /*check for verbose or nonverbose mode*/
// 12928                 if(0 == s2wCurrent.serialPortConf.commonConf.verbose )
// 12929                 {
// 12930                      if ( appCtx.appEmuCtx.confValue.gain_flag2 == 0)
// 12931                      {
// 12932                         S2w_Printf("\r\n0\r\n");
// 12933                         break;
// 12934                      }
// 12935                      else if( appCtx.appEmuCtx.confValue.gain_flag2 == 1)
// 12936                      {
// 12937                          if(GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12938                          {
// 12939                            S2w_Printf("\r\n1:0\r\n");  
// 12940                          }
// 12941                          else if(GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12942                          {
// 12943                            S2w_Printf("\r\n1:1\r\n");  
// 12944                          }
// 12945                          else if( GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain2 )
// 12946                          {
// 12947                            S2w_Printf("\r\n1:2\r\n");  
// 12948                          }
// 12949                          else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12950                          {
// 12951                            S2w_Printf("\r\n1:3\r\n");  
// 12952                          }
// 12953                          
// 12954                          break;
// 12955                      }
// 12956                 }
// 12957                 else if(1 == s2wCurrent.serialPortConf.commonConf.verbose)
// 12958                 {
// 12959                     if ( appCtx.appEmuCtx.confValue.gain_flag2 == 0)
// 12960                     {
// 12961                        S2w_Printf("\r\ndisabled\r\n");
// 12962                        break;
// 12963                     }
// 12964                     else if( appCtx.appEmuCtx.confValue.gain_flag2 == 1)
// 12965                     {
// 12966                         if( GSN_EMU_SDADC_GAIN0 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12967                         {
// 12968                           S2w_Printf("\r\nenabled:06db\r\n");  
// 12969                         }
// 12970                         else if( GSN_EMU_SDADC_GAIN1 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12971                         {
// 12972                           S2w_Printf("\r\nenabled:12db\r\n");  
// 12973                         }
// 12974                         else if( GSN_EMU_SDADC_GAIN2 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12975                         {
// 12976                           S2w_Printf("\r\nenabled:18db\r\n");  
// 12977                         }
// 12978                         else if( GSN_EMU_SDADC_GAIN3 == appCtx.appEmuCtx.confValue.sdadc_gain2)
// 12979                         {
// 12980                           S2w_Printf("\r\nenabled:24db\r\n");  
// 12981                         }
// 12982                        
// 12983                         break;
// 12984                      }
// 12985                 }
// 12986 				
// 12987 				case APP_EMU_CONF_SDADC_ATTENCONST:
// 12988 				{
// 12989                     //S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.emu.attenuationConstFp);  
// 12990 					break;
// 12991 				}
// 12992 
// 12993 				
// 12994             case APP_EMU_CONF_PL722X_SPI_CHANNEL:     
// 12995                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_spi_channel);          
// 12996                  
// 12997                  break;
// 12998             case APP_EMU_CONF_PL722X_SET_FREQ_MS:     
// 12999                  S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_readFreq_ms);          
// 13000                  
// 13001                  break;
// 13002             case APP_EMU_CONF_PL722X_CS_GPIO:
// 13003 		S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_gpio_cs);          
// 13004 			
// 13005 	        break;
// 13006            case APP_EMU_CONF_PL722X_RST_GPIO:
// 13007                 S2w_Printf("\r\n%d\r\n",appCtx.appEmuCtx.confValue.pl722x_gpio_rst);  
// 13008 			
// 13009      	        break;
// 13010             default:
// 13011                  return S2W_EINVAL;
// 13012                  break;
// 13013                  
// 13014     	}
// 13015         return S2W_SUCCESS;
// 13016 	
// 13017 }
// 13018 
// 13019 /**
// 13020  ******************************************************************
// 13021  * @ingroup S2w-Application
// 13022  * @brief Process the AT+EMURESETENERGY command
// 13023  *   This function resets the energy .
// 13024  *   
// 13025  * @param ptr Pointer to the user input string.
// 13026  * @return S2W_SUCCESS - operation successful.
// 13027   * @return S2W_EINVAL   - invalid input
// 13028  ******************************************************************/
// 13029 PRIVATE UINT8
// 13030 AppS2wCmd_EmuResetEnergy(UINT8 *ptr)
// 13031 {
// 13032     
// 13033     GSN_EMU_STATUS_T status;
// 13034     
// 13035     if (ptr[0] == '\0')
// 13036     {
// 13037         status = GsnEmu_ResetEnergy(&(appCtx.appEmuCtx.emu));
// 13038         if(GSN_EMU_STATUS_SUCCESS == status)
// 13039         {
// 13040             return S2W_SUCCESS;
// 13041         }
// 13042         else
// 13043         {
// 13044             return S2W_FAILURE;
// 13045         }
// 13046     }
// 13047     else 
// 13048     {
// 13049 	return S2W_EINVAL;
// 13050     }
// 13051 }
// 13052 
// 13053 /**
// 13054 * This is just debugging
// 13055 */
// 13056 PRIVATE UINT8
// 13057 AppS2wCmd_EmuPrint(UINT8 *ptr)
// 13058 {
// 13059     UINT32 i=0;
// 13060 
// 13061     if (1 == appCtx.appEmuCtx.emu.moduleCtx.sdAdcCtx.pingPongState)
// 13062     {
// 13063         S2w_Printf("\r\nV: \r\n");
// 13064         for(i=0;i<(1000);i++)
// 13065         {
// 13066           S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf3[i] );
// 13067         }
// 13068         
// 13069         S2w_Printf("\r\nI: \r\n");
// 13070         for(i=0;i<(1000);i++)
// 13071         {
// 13072           S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf4[i] );        
// 13073         }
// 13074     }  
// 13075     else if (2 == appCtx.appEmuCtx.emu.moduleCtx.sdAdcCtx.pingPongState)
// 13076     {
// 13077         S2w_Printf("\r\nV: \r\n");
// 13078         for(i=0;i<(1000);i++)
// 13079         {
// 13080           S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf1[i] );        
// 13081         }
// 13082        
// 13083         S2w_Printf("\r\nI: \r\n");
// 13084         for(i=0;i<(1000);i++)
// 13085         {
// 13086           S2w_Printf("%d:",appCtx.appEmuCtx.appEmuSdadcPbuf2[i] );        
// 13087         } 
// 13088     }
// 13089 	
// 13090     //S2w_Printf("\r\nLastInput:%f\r\n",appCtx.appEmuCtx.emu.lastinputFp);
// 13091     //S2w_Printf("\r\nLastOutput:%f\r\n",appCtx.appEmuCtx.emu.lastoutputFp);
// 13092 	   
// 13093     return S2W_SUCCESS;
// 13094 }
// 13095 
// 13096 #if 0 /*Commands to be implemented*/
// 13097 /**
// 13098  ******************************************************************
// 13099  * @ingroup S2w-Application
// 13100  * @brief Process the AT+EMUPAUSE command
// 13101  *   This function pauses the EMU is in running state.
// 13102  *   
// 13103  * @param ptr Pointer to the user input string.
// 13104  * @return S2W_SUCCESS - operation successful.
// 13105  * @return EMU STATUS   
// 13106   * @return S2W_EINVAL   - invalid input
// 13107  ******************************************************************/
// 13108 PRIVATE UINT8
// 13109 AppS2wCmd_EmuPause(UINT8 *ptr)
// 13110 {
// 13111 	
// 13112     GSN_EMU_ELECTRIC_PARAMS_T param;
// 13113     GSN_EMU_STATUS_T status;
// 13114 	   
// 13115     S2w_Printf("\r\n");
// 13116     
// 13117     if (ptr[0] == '\0')
// 13118     {
// 13119         status = GsnEmu_Pause(&(appCtx.appEmuCtx.emu), &param);
// 13120         if(GSN_EMU_STATUS_SUCCESS == status)
// 13121         {
// 13122             return S2W_SUCCESS;
// 13123         }
// 13124         else
// 13125           return S2W_FAILURE;
// 13126     }
// 13127     else 
// 13128     {
// 13129 	return S2W_EINVAL;
// 13130     }	
// 13131 }		
// 13132 
// 13133 /**
// 13134  ******************************************************************
// 13135  * @ingroup S2w-Application
// 13136  * @brief Process the AT+EMURESUME command
// 13137  *   This function resumes the EMU operation which is Pause state.
// 13138  *   
// 13139  * @param ptr Pointer to the user input string.
// 13140  * @return S2W_SUCCESS - operation successful.
// 13141  * @return EMU STATUS   
// 13142  * @return S2W_EINVAL   - invalid input
// 13143  ******************************************************************/
// 13144 PRIVATE UINT8
// 13145 AppS2wCmd_EmuResume(UINT8 *ptr)
// 13146 {
// 13147 	
// 13148     GSN_EMU_ELECTRIC_PARAMS_T param;   
// 13149     GSN_EMU_STATUS_T status;
// 13150     
// 13151     if (ptr[0] == '\0')
// 13152     {
// 13153         status = GsnEmu_Resume(&(appCtx.appEmuCtx.emu),&param,
// 13154                                &(appCtx.appEmuCtx.confValue));
// 13155         if(GSN_EMU_STATUS_SUCCESS == status)
// 13156         {
// 13157             return S2W_SUCCESS;
// 13158         }
// 13159         else
// 13160           return S2W_FAILURE;
// 13161     }
// 13162     else 
// 13163     {
// 13164 	return S2W_EINVAL;
// 13165     }
// 13166 }
// 13167 
// 13168 #endif
// 13169 
// 13170 /**
// 13171  ******************************************************************
// 13172  * @ingroup S2w-Application
// 13173  * @brief Process the AT+EMUGETSTATUS command
// 13174  *   This function returns the current state EMU.
// 13175  *   
// 13176  * @param ptr Pointer to the user input string.
// 13177  * @return ENU STATUS
// 13178  * @return S2W_SUCCESS - operation successful.
// 13179  * @return S2W_EINVAL   - invalid input
// 13180  ******************************************************************/
// 13181 
// 13182 PRIVATE UINT8
// 13183 AppS2wCmd_EmuGetStatus(UINT8 *ptr)
// 13184 {
// 13185      
// 13186     GSN_EMU_STATE_T state;
// 13187     GSN_EMU_STATUS_T status;
// 13188        
// 13189     if (ptr[0] == '\0')
// 13190     {
// 13191         status = GsnEmu_GetState(&(appCtx.appEmuCtx.emu), &state);
// 13192         if(GSN_EMU_STATUS_SUCCESS == status)
// 13193         {
// 13194             if( state == GSN_EMU_STATE_RUNNING )
// 13195             {
// 13196                 S2w_Printf("\r\nRunning\r\n");         
// 13197             }
// 13198             else if( state == GSN_EMU_STATE_PAUSED)
// 13199             {
// 13200                 S2w_Printf("\r\nPaused\r\n");
// 13201             }
// 13202             else if( state == GSN_EMU_STATE_STOPPED )
// 13203             {
// 13204                 S2w_Printf("\r\nStopped\r\n");
// 13205             }
// 13206            status =( GSN_EMU_STATUS_T )S2W_SUCCESS;
// 13207         }
// 13208     }
// 13209     else 
// 13210     {
// 13211         status = (GSN_EMU_STATUS_T) S2W_EINVAL;
// 13212     }
// 13213     return status ;
// 13214      
// 13215 }
// 13216 #endif /*S2W_EMU*/
// 13217 
// 13218 #ifdef S2W_ADC_SUPPORT
// 13219 
// 13220 #ifndef GS2100

        SECTION `.noinit`:DATA:REORDER:NOROOT(2)
// 13221 __no_init UINT32 app_adc_data[256];
app_adc_data:
        DS8 1024
// 13222 #define S2W_ADC_SINGLE 1
// 13223 #define S2W_ADC_CONTI  0
// 13224 #define S2W_ADC_PERIODIC 2
// 13225 
// 13226 /*Commands for adc*/
// 13227 
// 13228 /**
// 13229  ******************************************************************
// 13230  * @ingroup S2w-Application
// 13231  * @brief Process the AT+AADCCONF Command.
// 13232  *   This function sets the required configurations for aadc.
// 13233  * @param ptr Pointer to the user input string.
// 13234  *
// 13235  * @return S2W_SUCCESS - operation successful.
// 13236  * @retval S2W_EINVAL  - oeration failure-invalid command.
// 13237  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock751 Using cfiCommon0
          CFI Function AppS2wCmd_AdcConf
          CFI NoCalls
        THUMB
// 13238 PRIVATE UINT8
// 13239 AppS2wCmd_AdcConf(UINT8 *ptr)
// 13240 {
AppS2wCmd_AdcConf:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 13241     UINT8 *p, status;
// 13242     UINT32 conf = 0;
        BL       ?Subroutine7
// 13243     UINT32 value = 0;
// 13244 
// 13245     p = AppS2wParse_NextParamGet(&ptr);
// 13246     if (!p)
??CrossCallReturnLabel_8:
        CBZ.N    R0,??AppS2wCmd_AdcConf_0
// 13247     {
// 13248         return S2W_EINVAL;
// 13249     }
// 13250     status = AppS2wParse_Int(p, &conf);
// 13251     if (status != S2W_SUCCESS || (conf >5))
        BL       ?Subroutine52
??CrossCallReturnLabel_317:
        CBNZ.N   R0,??AppS2wCmd_AdcConf_0
        LDR      R0,[SP, #+4]
        CMP      R0,#+6
        BCS.N    ??AppS2wCmd_AdcConf_0
// 13252     {
// 13253         return S2W_EINVAL;
// 13254     }
// 13255 
// 13256     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 13257     if (!p)
??CrossCallReturnLabel_143:
        CBZ.N    R0,??AppS2wCmd_AdcConf_0
// 13258     {
// 13259         return S2W_EINVAL;
// 13260     }
// 13261     status = AppS2wParse_Int(p,&value);
        BL       ?Subroutine51
// 13262     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_271:
        CBNZ.N   R0,??AppS2wCmd_AdcConf_1
// 13263     {
// 13264         return status;
// 13265     }
// 13266 
// 13267     switch(conf)
        MOVW     R2,#+32880
        LDR.W    R3,??DataTable496_3
        LDR      R5,[SP, #+4]
        MOVW     R4,#+32848
        ADDS     R1,R2,R3
        ADDS     R0,R4,R3
        CMP      R5,#+1
        BEQ.N    ??AppS2wCmd_AdcConf_2
        BCC.N    ??AppS2wCmd_AdcConf_3
        CMP      R5,#+3
        BEQ.N    ??AppS2wCmd_AdcConf_4
        BCC.N    ??AppS2wCmd_AdcConf_5
        CMP      R5,#+5
        BEQ.N    ??AppS2wCmd_AdcConf_6
        BCC.N    ??AppS2wCmd_AdcConf_7
        B.N      ??AppS2wCmd_AdcConf_3
// 13268     {
// 13269         case 1 :
// 13270           /* select mode for reading */
// 13271           if(S2W_ADC_CONTI == value)
??AppS2wCmd_AdcConf_2:
        LDR      R1,[SP, #+0]
        CBNZ.N   R1,??AppS2wCmd_AdcConf_8
        STRB     R1,[R0, #+1]
// 13272           {
// 13273             appCtx.appadcconfig.readMode = GSN_ADC_MODE_CONTINUOUS ;
// 13274           }
// 13275           if (S2W_ADC_SINGLE == value)
// 13276           {
// 13277              appCtx.appadcconfig.readMode = GSN_ADC_MODE_SINGLE ;
// 13278           }
// 13279           else
// 13280           {
// 13281               return S2W_EINVAL;
// 13282           }
// 13283           break;
// 13284 
// 13285         case 2 :
// 13286 
// 13287              /*set the slave address*/
// 13288              appCtx.appadcconfig.samplingfreq = value ;
// 13289           if(value > 2000000)
// 13290           {
// 13291              return S2W_EINVAL;
// 13292           }
// 13293 
// 13294              if(value >= 100000)
// 13295              {
// 13296                  appCtx.appadcconfig.en100kHz = GSN_ADC_EN100K_ENABLE ;
// 13297 
// 13298              }
// 13299              else
// 13300              {
// 13301                  appCtx.appadcconfig.en100kHz = GSN_ADC_EN100K_DISABLE ;
// 13302 
// 13303              }
// 13304              break;
// 13305 
// 13306         case 3:
// 13307           if( 0 == value )
// 13308           {
// 13309               appCtx.appadcconfig.threshselect = GSN_ADC_NO_THRESH_SEL;
// 13310               appCtx.appadcconfig.thresh0.lower = 0 ;
// 13311               appCtx.appadcconfig.thresh0.upper = 0 ;
// 13312           }
// 13313           else if( 1 == value )
// 13314           {
// 13315               appCtx.appadcconfig.threshselect = GSN_ADC_SET0_THRESH_SEL;
// 13316           }
// 13317           else if( 2 == value )
// 13318           {
// 13319               appCtx.appadcconfig.threshselect = GSN_ADC_SET1_THRESH_SEL;
// 13320           }
// 13321           else if( 3 == value )
// 13322           {
// 13323               appCtx.appadcconfig.threshselect = GSN_ADC_SET2_THRESH_SEL;
// 13324           }
// 13325           else
// 13326           {
// 13327               return S2W_EINVAL;
// 13328           }
// 13329           break;
// 13330 
// 13331         case 4:
// 13332           /*set all the default configurations*/
// 13333           if( 0 == value )
// 13334           {
// 13335               appCtx.appadcconfig.refVoltage = GSN_ADC_REF_EXTERNAL ;
// 13336               appCtx.appadcconfig.pdPolarity = GSN_ADC_PDPOLARITY_H;
// 13337               appCtx.appadcconfig.sup1p8     = GSN_ADC_AVDD_3Vrange;
// 13338               appCtx.appadcconfig.enlvl =  GSN_ADC_LVL_ENABLE ;
// 13339               appCtx.appadcconfig.enDvdd = GSN_ADC_DVDD_ENABLE ;
// 13340               appCtx.appadcconfig.enTrim = GSN_ADC_TRIM_DISABLE ;
// 13341               appCtx.appadcconfig.startPolarity = GSN_ADC_STARTPOLARITY_L ;
// 13342               appCtx.appadcconfig.adcClk = GSN_ADC_CLK_SEL_XTAL ;
// 13343               appCtx.appadcconfig.startCycles = 1 ;
// 13344               appCtx.appadcconfig.powerCycles = 200 ;
// 13345               appCtx.appadcconfig.fifoThr = 0x8;
// 13346 
// 13347           }
// 13348           else
// 13349           {
// 13350              return S2W_EINVAL;
// 13351           }
// 13352           break;
// 13353         case 5:
// 13354           /*Set the flag only when using at+aadcpollread command*/
// 13355           if(1 == value )
// 13356           {
// 13357              appCtx.appadcconfig.singlePolling = TRUE;
// 13358           }
// 13359           else if (0 == value)
// 13360           {
// 13361              appCtx.appadcconfig.singlePolling = FALSE;
// 13362           }
// 13363           else
// 13364           {
// 13365              return S2W_EINVAL;
??AppS2wCmd_AdcConf_0:
        MOVS     R0,#+2
        POP      {R1-R5,PC}
// 13366           }
??AppS2wCmd_AdcConf_8:
        CMP      R1,#+1
        BNE.N    ??AppS2wCmd_AdcConf_0
        STRB     R1,[R0, #+1]
// 13367           break;
// 13368         default:
// 13369           return S2W_FAILURE;
// 13370     }
// 13371     return S2W_SUCCESS;
??AppS2wCmd_AdcConf_9:
        MOVS     R0,#+0
??AppS2wCmd_AdcConf_1:
        POP      {R1-R5,PC}       ;; return
??AppS2wCmd_AdcConf_5:
        LDR      R2,[SP, #+0]
        STR      R2,[R1, #+16]
        LDR      R1,[SP, #+0]
        LDR.W    R2,??DataTable503  ;; 0x1e8481
        CMP      R1,R2
        BCS.N    ??AppS2wCmd_AdcConf_0
        LDR.W    R2,??DataTable503_1  ;; 0x186a0
        CMP      R1,R2
        SBCS     R1,R1,R1
        MVNS     R1,R1
        LSRS     R1,R1,#+31
        STRB     R1,[R0, #+6]
        B.N      ??AppS2wCmd_AdcConf_9
??AppS2wCmd_AdcConf_4:
        LDR      R1,[SP, #+0]
        CBNZ.N   R1,??AppS2wCmd_AdcConf_10
        STRB     R1,[R0, #+10]
        STRH     R1,[R0, #+12]
        STRH     R1,[R0, #+14]
        B.N      ??AppS2wCmd_AdcConf_9
??AppS2wCmd_AdcConf_10:
        CMP      R1,#+1
        BNE.N    ??AppS2wCmd_AdcConf_11
??AppS2wCmd_AdcConf_12:
        STRB     R1,[R0, #+10]
        B.N      ??AppS2wCmd_AdcConf_9
??AppS2wCmd_AdcConf_11:
        CMP      R1,#+2
        BEQ.N    ??AppS2wCmd_AdcConf_12
        CMP      R1,#+3
        BNE.N    ??AppS2wCmd_AdcConf_0
        B.N      ??AppS2wCmd_AdcConf_12
??AppS2wCmd_AdcConf_7:
        LDR      R5,[SP, #+0]
        CMP      R5,#+0
        BNE.N    ??AppS2wCmd_AdcConf_0
        MOVS     R5,#+1
        STRB     R5,[R4, R3]
        MOVS     R4,#+0
        STRB     R4,[R1, #+20]
        MOVS     R1,#+200
        STRB     R1,[R0, #+26]
        STRB     R5,[R2, R3]
        MOVS     R1,#+8
        STRB     R5,[R0, #+2]
        STRB     R4,[R0, #+3]
        STRB     R5,[R0, #+4]
        STRB     R5,[R0, #+5]
        STRB     R4,[R0, #+7]
        STRB     R5,[R0, #+25]
        STRB     R1,[R0, #+24]
        B.N      ??AppS2wCmd_AdcConf_9
??AppS2wCmd_AdcConf_6:
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_AdcConf_13
??AppS2wCmd_AdcConf_14:
        STRB     R0,[R1, #+21]
        B.N      ??AppS2wCmd_AdcConf_9
??AppS2wCmd_AdcConf_13:
        CMP      R0,#+0
        BNE.N    ??AppS2wCmd_AdcConf_0
        B.N      ??AppS2wCmd_AdcConf_14
??AppS2wCmd_AdcConf_3:
        MOVS     R0,#+1
        POP      {R1-R5,PC}
          CFI EndBlock cfiBlock751
// 13372 
// 13373 
// 13374 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond752 Using cfiCommon0
          CFI Function AppS2wCmd_BeaconMissThresholdSet
          CFI Conditional ??CrossCallReturnLabel_9
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+16
          CFI Block cfiCond753 Using cfiCommon0
          CFI (cfiCond753) Function AppS2wCmd_AdcConf
          CFI (cfiCond753) Conditional ??CrossCallReturnLabel_8
          CFI (cfiCond753) R4 Frame(CFA, -12)
          CFI (cfiCond753) R5 Frame(CFA, -8)
          CFI (cfiCond753) R14 Frame(CFA, -4)
          CFI (cfiCond753) CFA R13+24
          CFI Block cfiPicker754 Using cfiCommon1
          CFI (cfiPicker754) NoFunction
          CFI (cfiPicker754) Picker
        THUMB
?Subroutine7:
        MOVS     R0,#+0
        STR      R0,[SP, #+4]
        STR      R0,[SP, #+0]
        ADD      R0,SP,#+8
          CFI FunCall AppS2wCmd_BeaconMissThresholdSet AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_AdcConf AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond752
          CFI EndBlock cfiCond753
          CFI EndBlock cfiPicker754
// 13375 
// 13376 /**
// 13377  ******************************************************************
// 13378  * @ingroup S2w-Application
// 13379  * @brief Process the AT+AADCSTART Command.
// 13380  *   This function starts aadc as configured .
// 13381  * @param ptr Pointer to the user input string.
// 13382  *
// 13383  * @return S2W_SUCCESS - operation successful.
// 13384  * @retval S2W_EINVAL  - oeration failure-invalid command.
// 13385  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock755 Using cfiCommon0
          CFI Function AppS2wCmd_AdcStart
        THUMB
// 13386 PRIVATE UINT8
// 13387 AppS2wCmd_AdcStart(UINT8 *ptr)
// 13388 
// 13389 {
AppS2wCmd_AdcStart:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 13390     GSN_STATUS status;
// 13391     status = GsnADC_Open(&appCtx.appadchandle,&appCtx.appadcconfig);
        LDR.W    R4,??DataTable496_3
        ADD      R1,R4,#+32768
        ADD      R0,R4,#+32512
        ADDS     R1,R1,#+80
        ADDS     R0,R0,#+248
          CFI FunCall GsnADC_Open
        BL       GsnADC_Open
// 13392     if(status == GSN_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_AdcStart_0
// 13393     {
// 13394         appCtx.adcStartStatus = TRUE;
        MOVW     R1,#+32920
        MOVS     R2,#+1
        STRB     R2,[R1, R4]
// 13395     }
// 13396     return status;
??AppS2wCmd_AdcStart_0:
        UXTB     R0,R0
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock755
// 13397 
// 13398 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable484:
        DC32     `?<Constant "TLS_CA">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable484_1:
        DC32     `?<Constant "TLS_CLIENT">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable484_2:
        DC32     `?<Constant "%s%2.2x%2.2x%2.2x">`
// 13399 
// 13400 
// 13401 /**
// 13402  ******************************************************************
// 13403  * @ingroup S2w-Application
// 13404  * @brief Process the AT+AADCREAD Command.
// 13405  *   This function reads the values from aadc as configured .
// 13406  * @param ptr Pointer to the user input string.
// 13407  *
// 13408  * @return S2W_SUCCESS - operation successful.
// 13409  * @retval S2W_EINVAL  - oeration failure-invalid command.
// 13410  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock756 Using cfiCommon0
          CFI Function AppS2wCmd_AdcRead
        THUMB
// 13411 PRIVATE UINT8
// 13412 AppS2wCmd_AdcRead(UINT8 *ptr)
// 13413 {
AppS2wCmd_AdcRead:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
        SUB      SP,SP,#+16
          CFI CFA R13+40
// 13414     UINT8  *p, status;
// 13415     UINT32 size=0;
        MOVS     R0,#+0
        STR      R0,[SP, #+8]
// 13416     UINT32 channel=0;
        STR      R0,[SP, #+4]
// 13417     UINT32 k =0 ;
        MOVS     R4,#+0
// 13418 
// 13419     p = AppS2wParse_NextParamGet(&ptr);	    /* size */
        BL       ?Subroutine30
// 13420     if (!p)
??CrossCallReturnLabel_79:
        CBZ.N    R0,??AppS2wCmd_AdcRead_0
// 13421     {
// 13422         return S2W_EINVAL;
// 13423     }
// 13424 
// 13425     status = AppS2wParse_Int(p, &size);
// 13426     if (status != S2W_SUCCESS || (size >256))
        BL       ?Subroutine50
??CrossCallReturnLabel_257:
        CBNZ.N   R0,??AppS2wCmd_AdcRead_0
        LDR      R0,[SP, #+8]
        CMP      R0,#+256
        BHI.N    ??AppS2wCmd_AdcRead_0
// 13427     {
// 13428         return S2W_EINVAL;
// 13429     }
// 13430 
// 13431 
// 13432     p = AppS2wParse_NextParamGet(&ptr);    /* channel no */
        BL       ?Subroutine30
// 13433     if (!p)
??CrossCallReturnLabel_78:
        CBZ.N    R0,??AppS2wCmd_AdcRead_0
// 13434     {
// 13435         return S2W_EINVAL;
// 13436     }
// 13437     status = AppS2wParse_Int(p,&channel);
// 13438     if (status != S2W_SUCCESS || (channel > 7))
        BL       ?Subroutine52
??CrossCallReturnLabel_316:
        CBNZ.N   R0,??AppS2wCmd_AdcRead_0
        LDR      R0,[SP, #+4]
        CMP      R0,#+8
        BCC.N    ??AppS2wCmd_AdcRead_1
// 13439     {
// 13440         return S2W_EINVAL;
??AppS2wCmd_AdcRead_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_AdcRead_2
// 13441     }
// 13442 
// 13443     if(!appCtx.adcStartStatus)
??AppS2wCmd_AdcRead_1:
        MOVW     R1,#+32904
        LDR.W    R0,??DataTable496_3
        ADDS     R2,R1,R0
        LDRB     R3,[R2, #+16]
        CBZ.N    R3,??AppS2wCmd_AdcRead_3
// 13444     {
// 13445         return S2W_FAILURE;
// 13446     }
// 13447     channel |= 0xf0;
        LDR      R3,[SP, #+4]
// 13448     
// 13449     appCtx.appadcrw.buffer.pData = app_adc_data;
        LDR.W    R5,??DataTable504
        STR      R5,[R2, #+4]
        ORR      R3,R3,#0xF0
        STR      R3,[SP, #+4]
// 13450 
// 13451     appCtx.appadcrw.buffer.size  = size ;
// 13452 
// 13453     appCtx.appadcrw.funcCB = NULL ;
        STR      R4,[R2, #+12]
// 13454 
// 13455     appCtx.appadcrw.contextCB = NULL ;
        STR      R4,[R2, #+8]
// 13456 
// 13457     status = GsnADC_PollRead(&appCtx.appadchandle,
// 13458                        appCtx.appadcconfig.readMode,
// 13459                        channel,
// 13460                        &appCtx.appadcrw,
// 13461                        GSN_ADC_REF_EXTERNAL);
// 13462     if(status != GSN_SUCCESS)
        MOVS     R2,#+1
        LDR      R3,[SP, #+8]
        STR      R3,[R1, R0]
        STR      R2,[SP, #+0]
        ADDS     R3,R1,R0
        MOVW     R1,#+32849
        LDRB     R1,[R1, R0]
        LDR      R2,[SP, #+4]
        ADD      R0,R0,#+32512
        ADDS     R0,R0,#+248
          CFI FunCall GsnADC_PollRead
        BL       GsnADC_PollRead
        UXTB     R0,R0
        CBZ.N    R0,??AppS2wCmd_AdcRead_4
// 13463     {
// 13464         return S2W_FAILURE;
??AppS2wCmd_AdcRead_3:
        MOVS     R0,#+1
        B.N      ??AppS2wCmd_AdcRead_2
// 13465     }
// 13466 
// 13467     S2w_Printf("\r\n");
??AppS2wCmd_AdcRead_4:
        BL       ?Subroutine91
// 13468     for(k = 0 ; k < size ; k++)
??CrossCallReturnLabel_488:
        ADR.W    R6,`?<Constant "%x\\r\\n">`
        ADR.N    R7,??DataTable492  ;; 0x30, 0x78, 0x00, 0x00
        B.N      ??AppS2wCmd_AdcRead_5
// 13469     {
// 13470        S2w_Printf("0x");
??AppS2wCmd_AdcRead_6:
        BL       ?Subroutine87
// 13471        S2w_Printf("%x\r\n",app_adc_data[k] );
??CrossCallReturnLabel_470:
        LDR      R1,[R5, R4, LSL #+2]
        MOV      R0,R6
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 13472     }
        ADDS     R4,R4,#+1
??AppS2wCmd_AdcRead_5:
        LDR      R0,[SP, #+8]
        CMP      R4,R0
        BCC.N    ??AppS2wCmd_AdcRead_6
// 13473 
// 13474     return S2W_SUCCESS ;
        MOVS     R0,#+0
??AppS2wCmd_AdcRead_2:
        ADD      SP,SP,#+20
          CFI CFA R13+20
        POP      {R4-R7,PC}       ;; return
          CFI EndBlock cfiBlock756
// 13475 
// 13476 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%x\\r\\n">`:
        DC8 "%x\015\012"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond757 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_492
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond758 Using cfiCommon0
          CFI (cfiCond758) Function AppS2wProfile_Display
          CFI (cfiCond758) Conditional ??CrossCallReturnLabel_491
          CFI (cfiCond758) R4 Frame(CFA, -16)
          CFI (cfiCond758) R5 Frame(CFA, -12)
          CFI (cfiCond758) R6 Frame(CFA, -8)
          CFI (cfiCond758) R14 Frame(CFA, -4)
          CFI (cfiCond758) CFA R13+32
          CFI Block cfiCond759 Using cfiCommon0
          CFI (cfiCond759) Function AppS2wCmd_ConfigOutput
          CFI (cfiCond759) Conditional ??CrossCallReturnLabel_490
          CFI (cfiCond759) R4 Frame(CFA, -8)
          CFI (cfiCond759) R14 Frame(CFA, -4)
          CFI (cfiCond759) CFA R13+8
          CFI Block cfiCond760 Using cfiCommon0
          CFI (cfiCond760) Function AppS2w_NcmL3ConnProcess
          CFI (cfiCond760) Conditional ??CrossCallReturnLabel_489
          CFI (cfiCond760) R4 Frame(CFA, -32)
          CFI (cfiCond760) R5 Frame(CFA, -28)
          CFI (cfiCond760) R6 Frame(CFA, -24)
          CFI (cfiCond760) R7 Frame(CFA, -20)
          CFI (cfiCond760) R8 Frame(CFA, -16)
          CFI (cfiCond760) R9 Frame(CFA, -12)
          CFI (cfiCond760) R10 Frame(CFA, -8)
          CFI (cfiCond760) R14 Frame(CFA, -4)
          CFI (cfiCond760) CFA R13+184
          CFI Block cfiCond761 Using cfiCommon0
          CFI (cfiCond761) Function AppS2wCmd_AdcRead
          CFI (cfiCond761) Conditional ??CrossCallReturnLabel_488
          CFI (cfiCond761) R4 Frame(CFA, -20)
          CFI (cfiCond761) R5 Frame(CFA, -16)
          CFI (cfiCond761) R6 Frame(CFA, -12)
          CFI (cfiCond761) R7 Frame(CFA, -8)
          CFI (cfiCond761) R14 Frame(CFA, -4)
          CFI (cfiCond761) CFA R13+40
          CFI Block cfiCond762 Using cfiCommon0
          CFI (cfiCond762) Function AppS2wCmd_ExtFlashRead
          CFI (cfiCond762) Conditional ??CrossCallReturnLabel_487
          CFI (cfiCond762) R4 Frame(CFA, -24)
          CFI (cfiCond762) R5 Frame(CFA, -20)
          CFI (cfiCond762) R6 Frame(CFA, -16)
          CFI (cfiCond762) R7 Frame(CFA, -12)
          CFI (cfiCond762) R8 Frame(CFA, -8)
          CFI (cfiCond762) R14 Frame(CFA, -4)
          CFI (cfiCond762) CFA R13+48
          CFI Block cfiCond763 Using cfiCommon0
          CFI (cfiCond763) Function AppS2wCmd_CoapSend
          CFI (cfiCond763) Conditional ??CrossCallReturnLabel_486
          CFI (cfiCond763) R4 Frame(CFA, -24)
          CFI (cfiCond763) R5 Frame(CFA, -20)
          CFI (cfiCond763) R6 Frame(CFA, -16)
          CFI (cfiCond763) R7 Frame(CFA, -12)
          CFI (cfiCond763) R8 Frame(CFA, -8)
          CFI (cfiCond763) R14 Frame(CFA, -4)
          CFI (cfiCond763) CFA R13+1440
          CFI Block cfiCond764 Using cfiCommon0
          CFI (cfiCond764) Function AppS2wHal_CoapContentDataGet
          CFI (cfiCond764) Conditional ??CrossCallReturnLabel_485
          CFI (cfiCond764) R4 Frame(CFA, -12)
          CFI (cfiCond764) R5 Frame(CFA, -8)
          CFI (cfiCond764) R14 Frame(CFA, -4)
          CFI (cfiCond764) CFA R13+2816
          CFI Block cfiCond765 Using cfiCommon0
          CFI (cfiCond765) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond765) Conditional ??CrossCallReturnLabel_484
          CFI (cfiCond765) R4 Frame(CFA, -36)
          CFI (cfiCond765) R5 Frame(CFA, -32)
          CFI (cfiCond765) R6 Frame(CFA, -28)
          CFI (cfiCond765) R7 Frame(CFA, -24)
          CFI (cfiCond765) R8 Frame(CFA, -20)
          CFI (cfiCond765) R9 Frame(CFA, -16)
          CFI (cfiCond765) R10 Frame(CFA, -12)
          CFI (cfiCond765) R11 Frame(CFA, -8)
          CFI (cfiCond765) R14 Frame(CFA, -4)
          CFI (cfiCond765) CFA R13+360
          CFI Block cfiPicker766 Using cfiCommon1
          CFI (cfiPicker766) NoFunction
          CFI (cfiPicker766) Picker
        THUMB
?Subroutine91:
        ADR.N    R0,??DataTable492_1  ;; 0x0D, 0x0A, 0x00, 0x00
          CFI FunCall AppS2wCmd_Wassoc S2w_Printf
          CFI FunCall AppS2wProfile_Display S2w_Printf
          CFI FunCall AppS2wCmd_ConfigOutput S2w_Printf
          CFI FunCall AppS2w_NcmL3ConnProcess S2w_Printf
          CFI FunCall AppS2wCmd_AdcRead S2w_Printf
          CFI FunCall AppS2wCmd_ExtFlashRead S2w_Printf
          CFI FunCall AppS2wCmd_CoapSend S2w_Printf
          CFI FunCall AppS2wHal_CoapContentDataGet S2w_Printf
          CFI FunCall AppS2wCmd_Wassoc_test S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiCond757
          CFI EndBlock cfiCond758
          CFI EndBlock cfiCond759
          CFI EndBlock cfiCond760
          CFI EndBlock cfiCond761
          CFI EndBlock cfiCond762
          CFI EndBlock cfiCond763
          CFI EndBlock cfiCond764
          CFI EndBlock cfiCond765
          CFI EndBlock cfiPicker766

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable486:
        DC32     0x41010159
// 13477 
// 13478 /**
// 13479  ******************************************************************
// 13480  * @ingroup S2w-Application
// 13481  * @brief Process the AT+AADCSTOP Command.
// 13482  *   This function Stops aadc operation.
// 13483  * @param ptr Pointer to the user input string.
// 13484  *
// 13485  * @return S2W_SUCCESS - operation successful.
// 13486  * @retval S2W_EINVAL  - oeration failure-invalid command.
// 13487  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock767 Using cfiCommon0
          CFI Function AppS2wCmd_AdcStop
        THUMB
// 13488 PRIVATE UINT8
// 13489 AppS2wCmd_AdcStop(UINT8 *ptr)
// 13490 {
AppS2wCmd_AdcStop:
        PUSH     {R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+8
// 13491     GSN_STATUS status;
// 13492 
// 13493     status = GsnADC_Close(&appCtx.appadchandle);
        LDR.W    R4,??DataTable496_3
        ADD      R0,R4,#+32512
        ADDS     R0,R0,#+248
          CFI FunCall GsnADC_Close
        BL       GsnADC_Close
// 13494     if(status == GSN_SUCCESS)
        CBNZ.N   R0,??AppS2wCmd_AdcStop_0
// 13495     {
// 13496         appCtx.adcStartStatus = FALSE;
        MOVW     R1,#+32920
        MOVS     R2,#+0
        STRB     R2,[R1, R4]
// 13497     }
// 13498     return status;
??AppS2wCmd_AdcStop_0:
        UXTB     R0,R0
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock767
// 13499 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable487:
        DC32     0x41010139

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable487_1:
        DC32     0x41010138

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable487_2:
        DC32     0x41010258
// 13500 
// 13501 #endif
// 13502 #endif
// 13503 
// 13504 #ifdef S2W_I2C_SUPPORT
// 13505 /*Commands for i2c*/
// 13506 
// 13507 /**
// 13508  ******************************************************************
// 13509  * @ingroup S2w-Application
// 13510  * @brief Process the AT+I2CCONF command
// 13511  *   This function sets the configurations for I2C
// 13512  *   
// 13513  * @param ptr Pointer to the user input string.
// 13514  * 
// 13515  * @return S2W_SUCCESS - operation successful.
// 13516  * @return S2W_EINVAL   - invalid input
// 13517  ******************************************************************/
// 13518 /*clock context for i2c*/
// 13519 GSN_CLK_CTL_CTX_T GsnS2wClkCtx;
// 13520 /*set the configurations for I2C*/
// 13521 PRIVATE UINT8
// 13522 AppS2wCmd_I2cConf(UINT8 *ptr)
// 13523 {
// 13524     UINT8 *p, status;
// 13525     UINT32 conf;
// 13526     UINT32 value;
// 13527     UINT32 param;
// 13528  
// 13529     p = AppS2wParse_NextParamGet(&ptr);	
// 13530     if (!p)
// 13531     {
// 13532         return S2W_EINVAL;
// 13533     }
// 13534     status = AppS2wParse_Int(p, &param);
// 13535     if (status != S2W_SUCCESS )
// 13536     {
// 13537         return S2W_EINVAL;
// 13538     }
// 13539     conf = param;
// 13540 
// 13541     p = AppS2wParse_NextParamGet(&ptr);
// 13542     if (!p)
// 13543     {
// 13544         return S2W_EINVAL;
// 13545     }
// 13546     AppS2wParse_Hex(p,&value); 
// 13547     if (status != S2W_SUCCESS )
// 13548     {
// 13549         return S2W_EINVAL;
// 13550     }
// 13551     
// 13552     switch(conf)
// 13553     {
// 13554         case 1 : 
// 13555           /* select master or slave*/
// 13556           if(0 == value)
// 13557           {
// 13558             //GsnClkCtl_Init(&GsnS2wClkCtx); fix for issue no:5917
// 13559             appCtx.app_i2cConf.gsnI2cMode = GSN_I2C_MNS_SLAVE;
// 13560           }
// 13561           else if(1 == value )
// 13562           {
// 13563               appCtx.app_i2cConf.gsnI2cMode = GSN_I2C_MNS_MASTER;
// 13564           }
// 13565             break;
// 13566         case 2 :
// 13567              /*set the slave address. when we are master than this is the address of slave device 
// 13568               but when we are slave this is the address of our device slave address.*/
// 13569             AppS2wParse_Hex(p,&value);
// 13570             appCtx.app_i2cConf.gsnI2cSlaveAddr = value ;
// 13571             break;
// 13572         case 3:
// 13573           /*select the address mode*/
// 13574           if(0 == value)
// 13575           {
// 13576              appCtx.app_i2cConf.gsnI2cAddrMode = GSN_I2C_ADMOD_7BITS ;
// 13577           }
// 13578           else if(1 == value )
// 13579           {
// 13580               appCtx.app_i2cConf.gsnI2cAddrMode = GSN_I2C_ADMOD_10BITS;
// 13581           }
// 13582           break;
// 13583        case 4:
// 13584          /*select the rate 100K/400K/3.4M*/
// 13585          if(0 == value)
// 13586          {
// 13587              appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_100KBITS;
// 13588          }
// 13589          else if(1 == value)
// 13590          {
// 13591              appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_400KBITS;
// 13592          }
// 13593          else if(2 == value )
// 13594          {
// 13595              appCtx.app_i2cConf.gsnI2cRate = GSN_I2C_ERATE_HSE;
// 13596          }
// 13597          else
// 13598          {
// 13599             AppS2wParse_Int(p,&value); 
// 13600             appCtx.app_i2cConf.gsnI2cRate = value;
// 13601          }
// 13602           break;
// 13603       case 5:
// 13604         /*select the address mode*/
// 13605         if(0 == value)
// 13606         {
// 13607             appCtx.app_i2cConf.gsnI2cRandomCurrentAddr = GSN_I2C_RCAS_CURRENTADD;
// 13608         }
// 13609         else if(1 == value )
// 13610         {
// 13611             appCtx.app_i2cConf.gsnI2cRandomCurrentAddr = GSN_I2C_RCAS_RANDOMADD;
// 13612         }
// 13613         break;
// 13614             
// 13615         case 6 :
// 13616         /*set address in slave device whrere we want to read in case of random read*/
// 13617         appCtx.app_i2cConf.gsnI2cSlaveLocAddr = value ;
// 13618         break;
// 13619             
// 13620         case 7 :
// 13621         /*set the slave address*/
// 13622         appCtx.app_i2cConf.gsnI2cAddrLocInSlave = value;
// 13623         break;        
// 13624         
// 13625         case 8 :
// 13626         /* Memory Address Selection (Single byte or Double byte)*/
// 13627         if(0 == value)
// 13628         {
// 13629         appCtx.app_i2cConf.gsnI2cMemAddSel=GSN_I2C_MEMADD_SINGLE;
// 13630         }  
// 13631         else if(1 == value)
// 13632         {
// 13633         appCtx.app_i2cConf.gsnI2cMemAddSel=GSN_I2C_MEMADD_DOUBLE;
// 13634         }
// 13635         break;
// 13636         
// 13637         case 9 :
// 13638         /* Set the clock for slave to maintain data hold time */ 
// 13639         if(0==value) 
// 13640         {
// 13641         appCtx.app_i2cConf.gsnI2cSlaveDataHoldClkCnt=GSN_I2C_DATA_HOLD_CLOCK_COUNT;
// 13642         }
// 13643         break;
// 13644         
// 13645         case 10:
// 13646         /* Set Source Clock*/ 
// 13647         if(0==value)  
// 13648         {
// 13649         appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_HSRC;
// 13650         }
// 13651         
// 13652         else if(1==value)
// 13653         {
// 13654         appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_XTAL;      
// 13655         }
// 13656         
// 13657         else if(2==value)
// 13658         {
// 13659         /* Enable PLL */
// 13660         GsnClkCtl_SysPllEn(GSN_CLK_CTL_PLL_FREQ_120MHZ);  
// 13661         appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_PLL;       
// 13662         }
// 13663 
// 13664         else
// 13665         {
// 13666         appCtx.app_i2cConf.clockSelect=GSN_I2C_CLK_HSRC;      
// 13667         }
// 13668         break;
// 13669         
// 13670        default:
// 13671              return S2W_FAILURE;
// 13672     }
// 13673     return S2W_SUCCESS;
// 13674 
// 13675 }
// 13676 
// 13677 /**
// 13678  ******************************************************************
// 13679  * @ingroup S2w-Application
// 13680  * @brief Process the AT+I2CSTART command
// 13681  *   This function initialises the I2C 
// 13682  *   
// 13683  * @param ptr Pointer to the user input string.
// 13684  * 
// 13685  * @return S2W_SUCCESS - operation successful.
// 13686  * @return S2W_EINVAL   - invalid input
// 13687  ******************************************************************/
// 13688 PRIVATE UINT8
// 13689 AppS2wCmd_I2cStart(UINT8 *ptr)
// 13690 {
// 13691   
// 13692     GSN_STATUS status;
// 13693     
// 13694     /* select the mux for I2C */
// 13695     
// 13696     GsnIoMux_Sel(8,GSN_IOMUX_GPIO_8_AI2C_SDA);
// 13697     GsnIoMux_PullDownEnable (8);   
// 13698     GsnIoMux_Sel(9,GSN_IOMUX_GPIO_9_AI2C_SCL);
// 13699     GsnIoMux_PullDownEnable (9);
// 13700 
// 13701 
// 13702     status = GsnI2c_Open(&appCtx.app_i2cHandle,&appCtx.app_i2cConf, NULL);
// 13703     if(status != GSN_SUCCESS)
// 13704     {
// 13705 		return S2W_FAILURE;
// 13706 	}
// 13707 	appCtx.i2cStatus = S2W_I2C_STARTED;
// 13708     return status;
// 13709 
// 13710 }
// 13711 
// 13712 /**
// 13713  ******************************************************************
// 13714  * @ingroup S2w-Application
// 13715  * @brief Process the AT+I2CWRITE command
// 13716  *   This function initiates I2C data write
// 13717  *   
// 13718  * @param ptr Pointer to the user input string.
// 13719  * @input - number of bytes to write
// 13720  * @return S2W_SUCCESS - operation successful.
// 13721  * @return S2W_EINVAL   - invalid input
// 13722  ******************************************************************/
// 13723 PRIVATE UINT8
// 13724 AppS2wCmd_I2cWrite(UINT8 *ptr)
// 13725 {
// 13726     UINT8 *p,status;
// 13727     UINT32 write_count;
// 13728     UINT8 write_msg[128];
// 13729     
// 13730     if(appCtx.i2cStatus != S2W_I2C_STARTED)
// 13731     {
// 13732 		return S2W_EINVAL;
// 13733 	}
// 13734     p = AppS2wParse_NextParamGet(&ptr);
// 13735     if (!p)
// 13736     {
// 13737         return S2W_EINVAL;
// 13738     }
// 13739     status = AppS2wParse_Int(p, &write_count);
// 13740     if (status != S2W_SUCCESS )
// 13741     {
// 13742         return S2W_EINVAL;
// 13743     }
// 13744     p = AppS2wParse_NextParamGet(&ptr);
// 13745     if (!p)
// 13746     {
// 13747         return S2W_EINVAL;
// 13748     }
// 13749     //strcpy ((char*)write_msg, (char*)p);
// 13750 	// data comming as hex so convert it
// 13751 	{
// 13752         UINT32 val = 0, i,j;
// 13753 	    while (isspace(*p))
// 13754 	    {
// 13755 	        p++;
// 13756 	    }
// 13757     
// 13758 	    for (j = 0; *p != '\0'; j++)
// 13759 	    {
// 13760 	        for (val = 0, i = 0; i < 2 && *p != '\0'; p++, i++)
// 13761 	        {
// 13762 	            if (!isxdigit(*p))
// 13763 	            {
// 13764 	                break;
// 13765 	            }
// 13766 		        val = val * 16 + AppS2wParse_ToHex(*p);
// 13767 		     }
// 13768 	         if (i != 2)
// 13769 	         {
// 13770 	             break;
// 13771 	         }
// 13772    
// 13773 	         write_msg[j] = val;
// 13774 	    }
// 13775 	    if(j != write_count)
// 13776     {
// 13777 		    return S2W_EINVAL;
// 13778 	    }
// 13779     }
// 13780        
// 13781     
// 13782     status = GsnI2c_Write(&appCtx.app_i2cHandle,write_msg,write_count,NULL,NULL);
// 13783     if(status == 0)
// 13784     {
// 13785         return S2W_FAILURE;
// 13786     }
// 13787    return S2W_SUCCESS;
// 13788   
// 13789 }
// 13790 
// 13791 
// 13792 /**
// 13793  ******************************************************************
// 13794  * @ingroup S2w-Application
// 13795  * @brief Process the AT+I2CREAD command
// 13796  *   This function initiates I2C data read 
// 13797  *   
// 13798  * @param ptr Pointer to the user input string.
// 13799  * @input - number of bytes to read
// 13800  * @return prints the data recieved by I2C
// 13801  * @return S2W_SUCCESS - operation successful.
// 13802  * @return S2W_EINVAL   - invalid input
// 13803  ******************************************************************/
// 13804 PRIVATE UINT8
// 13805 AppS2wCmd_I2cRead(UINT8 *ptr)
// 13806 {
// 13807     UINT8 *p;
// 13808     UINT32 read_count;
// 13809     UINT8 p_read = 0;
// 13810      UINT8 read_msg[128];
// 13811     if(appCtx.i2cStatus != S2W_I2C_STARTED)
// 13812     {
// 13813 		return S2W_EINVAL;
// 13814 	}
// 13815     p = AppS2wParse_NextParamGet(&ptr);	
// 13816     if (!p)
// 13817     {
// 13818         return S2W_EINVAL;
// 13819     }
// 13820     AppS2wParse_Int(p, &read_count);
// 13821     if (!p)
// 13822     {
// 13823         return S2W_EINVAL;
// 13824     }
// 13825     memset(read_msg,0,128);
// 13826     GsnI2c_Read( &(appCtx.app_i2cHandle),read_msg,read_count,TRUE,NULL,NULL);
// 13827     
// 13828     for(p_read =0;p_read < read_count; p_read++ )
// 13829     {
// 13830         S2w_Printf("\r\n%02x",read_msg[p_read]);
// 13831     }
// 13832 
// 13833     return S2W_SUCCESS;
// 13834 }
// 13835 
// 13836  /******************************************************************
// 13837  * @ingroup S2w-Application
// 13838  * @brief Process the AT+I2CWRITE command
// 13839  *   This function stops I2C operation
// 13840  *   
// 13841  * @param ptr Pointer to the user input string.
// 13842  * @return S2W_SUCCESS - operation successful.
// 13843  * @return S2W_EINVAL   - invalid input
// 13844  ******************************************************************/
// 13845 PRIVATE UINT8
// 13846 AppS2wCmd_I2cStop(UINT8 *ptr)
// 13847 {
// 13848     GSN_STATUS status;
// 13849     if(appCtx.i2cStatus != S2W_I2C_STARTED)
// 13850     {
// 13851 		return S2W_EINVAL;
// 13852 	}
// 13853     status = GsnI2c_Close(&(appCtx.app_i2cHandle));
// 13854     appCtx.i2cStatus = S2W_I2C_STOPPED;
// 13855     return status;
// 13856 }
// 13857 
// 13858 #endif
// 13859 /**
// 13860  ******************************************************************
// 13861  * @ingroup S2w-Application
// 13862  * @brief Process the AT+WEAPFAST Command.
// 13863  *   This function check the validity of parameter passed and
// 13864  *   update the active profile username and password for EAP methods.
// 13865  * @param ptr Pointer to the user input string.
// 13866  *
// 13867  * @return S2W_SUCCESS - operation successful.
// 13868  * @retval S2W_EINVAL  - operation failure-invalid command.
// 13869  ******************************************************************/

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock768 Using cfiCommon0
          CFI Function AppS2wCmd_WeapConf
        THUMB
// 13870 PRIVATE UINT8
// 13871 AppS2wCmd_WeapConf(UINT8 *ptr)
// 13872 {
AppS2wCmd_WeapConf:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+4
          CFI CFA R13+32
// 13873     UINT32 prevAuthType=0;
// 13874     UINT32 len;
// 13875     UINT8 *p;
// 13876 
// 13877     //memcpy(&params, &s2wCurrent.security, sizeof(params));
// 13878 
// 13879     /* Validate the input string.
// 13880      */
// 13881     p = AppS2wParse_NextParamGet(&ptr);     //get outer auth
        BL       ?Subroutine35
??CrossCallReturnLabel_165:
        MOVS     R5,R0
// 13882     if (!p)
        BEQ.N    ??AppS2wCmd_WeapConf_0
// 13883     {
// 13884         return S2W_EINVAL;
// 13885     }
// 13886     prevAuthType = s2wCurrent.security.eap.outerAuth;
        LDR.N    R4,??DataTable493
        LDR      R7,[R4, #+312]
// 13887     s2wCurrent.security.eap.outerAuth = 0;
        MOVS     R0,#+0
        STR      R0,[R4, #+312]
// 13888     AppS2wParse_Int(p, &s2wCurrent.security.eap.outerAuth);
        ADD      R1,R4,#+312
        MOV      R0,R5
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 13889 
// 13890        if(!( FALSE
// 13891 #if defined(S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE)
// 13892           || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST
// 13893 #endif
// 13894 #ifdef S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE
// 13895           || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_TTLS
// 13896    #endif
// 13897 #if defined(S2W_SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILABLE)
// 13898           || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_PEAP
// 13899    #endif
// 13900 #if defined(S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE)
// 13901            || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_TLS 
// 13902 #endif
// 13903           || s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_NONE  ))
        LDR      R0,[R4, #+312]
        CMP      R0,#+43
        IT       NE 
        CMPNE    R0,#+21
        BEQ.N    ??AppS2wCmd_WeapConf_1
        CMP      R0,#+25
        IT       NE 
        CMPNE    R0,#+13
        BEQ.N    ??AppS2wCmd_WeapConf_1
        CBZ.N    R0,??AppS2wCmd_WeapConf_1
// 13904     {
// 13905       s2wCurrent.security.eap.outerAuth = prevAuthType;
        STR      R7,[R4, #+312]
        B.N      ??AppS2wCmd_WeapConf_0
// 13906         return S2W_EINVAL;
// 13907     }
// 13908     p = AppS2wParse_NextParamGet(&ptr);     //get outer auth
??AppS2wCmd_WeapConf_1:
        BL       ?Subroutine35
??CrossCallReturnLabel_164:
        MOVS     R5,R0
// 13909     if (!p)
        BEQ.N    ??AppS2wCmd_WeapConf_0
// 13910     {
// 13911         return S2W_EINVAL;
// 13912     }
// 13913     prevAuthType = s2wCurrent.security.eap.innerAuth;
        ADD      R6,R4,#+312
// 13914     s2wCurrent.security.eap.innerAuth= 0;
        MOVS     R0,#+0
        LDR      R7,[R6, #+4]
        STR      R0,[R6, #+4]
// 13915     AppS2wParse_Int(p, &s2wCurrent.security.eap.innerAuth);
        ADD      R1,R4,#+316
        MOV      R0,R5
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
// 13916     if(s2wCurrent.security.eap.innerAuth == 253)
        LDR      R0,[R6, #+4]
        CMP      R0,#+253
        BNE.N    ??AppS2wCmd_WeapConf_2
// 13917     {
// 13918         s2wCurrent.security.eap.innerAuth = GSN_EAP_TYPE_NONE;
        MOVS     R0,#+0
        STR      R0,[R6, #+4]
// 13919     }
// 13920 
// 13921         if(!(FALSE
// 13922    #if defined(S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE) || defined(S2W_SECURITY_ENTERPRISE_PEAP_V0_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE)
// 13923 //#ifdef  GSN_SECURITY_ENTERPRISE_TTLS_AVAILABLE
// 13924            || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_MSCHAPV2
// 13925 #endif
// 13926    #if defined(S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE)|| defined(S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILABLE)
// 13927             || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_GTC 
// 13928 #endif
// 13929             || s2wCurrent.security.eap.innerAuth == GSN_EAP_TYPE_NONE
// 13930         ))
// 13931     {
// 13932       s2wCurrent.security.eap.innerAuth = prevAuthType;
// 13933         return S2W_EINVAL;
// 13934     }
// 13935 //        s2wCurrent.security.eap.innerAuth = GSN_EAP_TYPE_MSCHAPV2;
// 13936     p = AppS2wParse_NextParamGet(&ptr);     //get usr name
??AppS2wCmd_WeapConf_3:
        BL       ?Subroutine35
??CrossCallReturnLabel_163:
        MOVS     R5,R0
// 13937     if (!p)
        BEQ.N    ??AppS2wCmd_WeapConf_0
// 13938     {
// 13939         return S2W_EINVAL;
// 13940     }
// 13941 
// 13942     len = strlen((char *)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R7,R0
// 13943     if(len > S2W_MAX_EAP_USR_NAME_LEN)
        CMP      R7,#+33
        BCS.N    ??AppS2wCmd_WeapConf_0
// 13944     {
// 13945         return S2W_EINVAL;
// 13946     }
// 13947     memset(s2wCurrent.security.eap.usrName, 0, S2W_MAX_EAP_USR_NAME_LEN);
        ADDW     R8,R4,#+322
        MOVS     R2,#+32
        BL       ??Subroutine141_0
// 13948     memcpy(s2wCurrent.security.eap.usrName, p, len);
??CrossCallReturnLabel_638:
        BL       ?Subroutine97
// 13949     s2wCurrent.security.eap.usrNameLen = len;
??CrossCallReturnLabel_508:
        STRB     R7,[R6, #+9]
// 13950 
// 13951     p = AppS2wParse_NextParamGet(&ptr);     //get password
        BL       ?Subroutine35
??CrossCallReturnLabel_162:
        MOVS     R5,R0
// 13952     if (!p)
        BEQ.N    ??AppS2wCmd_WeapConf_0
// 13953     {
// 13954         return S2W_EINVAL;
// 13955     }
// 13956     len = strlen((char *)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R7,R0
// 13957     if(len > S2W_MAX_EAP_PASSWORD_LEN)
        CMP      R7,#+33
        BCS.N    ??AppS2wCmd_WeapConf_0
// 13958     {
// 13959         return S2W_EINVAL;
// 13960     }
// 13961     memset(s2wCurrent.security.eap.password, 0, S2W_MAX_EAP_PASSWORD_LEN);
        ADDW     R8,R4,#+355
        MOVS     R2,#+32
        BL       ??Subroutine141_0
// 13962     memcpy(s2wCurrent.security.eap.password, p, len);
??CrossCallReturnLabel_637:
        BL       ?Subroutine97
// 13963     s2wCurrent.security.eap.passwordLen = len;
// 13964     s2wCurrent.security.validKeys |= S2W_SECURITY_VALID_EAP;
??CrossCallReturnLabel_507:
        LDRB     R0,[R4, #+121]
        STRB     R7,[R4, #+354]
        ORR      R0,R0,#0x4
        STRB     R0,[R4, #+121]
// 13965 
// 13966     s2wCurrent.security.eap.useCaCert = FALSE;
        MOVS     R0,#+0
        STRB     R0,[R6, #+8]
// 13967     p = AppS2wParse_NextParamGet(&ptr);//get use CA CERT. If it has to be used
        BL       ?Subroutine35
??CrossCallReturnLabel_161:
        MOVS     R5,R0
// 13968     if (p)
        BEQ.N    ??AppS2wCmd_WeapConf_4
// 13969     {
// 13970         if( S2W_SUCCESS != AppS2wParse_Boolean(p,
// 13971             &s2wCurrent.security.eap.useCaCert))
        ADD      R1,R4,#+320
          CFI FunCall AppS2wParse_Boolean
        BL       AppS2wParse_Boolean
        CBZ.N    R0,??AppS2wCmd_WeapConf_4
// 13972         {
// 13973             return S2W_EINVAL;
??AppS2wCmd_WeapConf_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_WeapConf_5
// 13974         }
// 13975     }
??AppS2wCmd_WeapConf_2:
        CMP      R0,#+26
        ITT      NE 
        CMPNE    R0,#+6
        CMPNE    R0,#+0
        BEQ.N    ??AppS2wCmd_WeapConf_3
        STR      R7,[R6, #+4]
        B.N      ??AppS2wCmd_WeapConf_0
// 13976     return S2W_SUCCESS;
??AppS2wCmd_WeapConf_4:
        MOVS     R0,#+0
??AppS2wCmd_WeapConf_5:
        POP      {R1,R2,R4-R8,PC}  ;; return
          CFI EndBlock cfiBlock768
// 13977 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable488:
        DC32     AppS2wNetConnMgr_Cb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable488_1:
        DC32     s2w_ssl_cert_table

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond769 Using cfiCommon0
          CFI Function AppS2wCmd_WeapConf
          CFI Conditional ??CrossCallReturnLabel_508
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+32
          CFI Block cfiCond770 Using cfiCommon0
          CFI (cfiCond770) Function AppS2wCmd_WeapConf
          CFI (cfiCond770) Conditional ??CrossCallReturnLabel_507
          CFI (cfiCond770) R4 Frame(CFA, -24)
          CFI (cfiCond770) R5 Frame(CFA, -20)
          CFI (cfiCond770) R6 Frame(CFA, -16)
          CFI (cfiCond770) R7 Frame(CFA, -12)
          CFI (cfiCond770) R8 Frame(CFA, -8)
          CFI (cfiCond770) R14 Frame(CFA, -4)
          CFI (cfiCond770) CFA R13+32
          CFI Block cfiPicker771 Using cfiCommon1
          CFI (cfiPicker771) NoFunction
          CFI (cfiPicker771) Picker
        THUMB
?Subroutine97:
        MOV      R2,R7
        MOV      R1,R5
        MOV      R0,R8
          CFI FunCall AppS2wCmd_WeapConf memcpy
          CFI FunCall AppS2wCmd_WeapConf memcpy
        B.W      memcpy
          CFI EndBlock cfiCond769
          CFI EndBlock cfiCond770
          CFI EndBlock cfiPicker771
// 13978 
// 13979 
// 13980 #ifdef S2W_EXTFLASH_DRIVER_TEST

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 13981 UINT8 readBuffer[1024];
readBuffer:
        DS8 1024

        SECTION `.bss`:DATA:REORDER:NOROOT(2)
// 13982 UINT32 extFlashFileSize;
extFlashFileSize:
        DS8 4
// 13983 UINT8 extFlashGetDatabuf[1024];
// 13984 UINT32 writeAddr;
writeAddr:
        DS8 4
// 13985 UINT32 spiFlag;
spiFlag:
        DS8 4
extFlashGetDatabuf:
        DS8 1024
// 13986 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock772 Using cfiCommon0
          CFI Function AppS2wExternalFlashData
        THUMB
// 13987 PUBLIC UINT32
// 13988 AppS2wExternalFlashData(UINT8 ch1)
// 13989 {
AppS2wExternalFlashData:
        PUSH     {R1-R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+24
// 13990 
// 13991     UINT32 rwSize=0;
// 13992 
// 13993     if( extFlashFileSize == 0)
        LDR.W    R4,??DataTable504_1
        LDR      R0,[R4, #+0]
        CBNZ.N   R0,??AppS2wExternalFlashData_0
// 13994             return S2W_FAILURE;
        MOVS     R0,#+1
        POP      {R1-R5,PC}
// 13995 
// 13996       while(extFlashFileSize)
// 13997       {
// 13998           memset(extFlashGetDatabuf, 0, sizeof(extFlashGetDatabuf));
??AppS2wExternalFlashData_0:
        MOV      R2,#+1024
        MOVS     R1,#+0
        ADD      R0,R4,#+12
          CFI FunCall memset
        BL       memset
// 13999           if(extFlashFileSize<1024)
        LDR      R5,[R4, #+0]
        CMP      R5,#+1024
        IT       CS 
        MOVCS    R5,#+1024
// 14000           {
// 14001             rwSize = extFlashFileSize;
// 14002           }
// 14003           if(extFlashFileSize>=1024)
// 14004           {
// 14005             rwSize = 1024;
// 14006           }
// 14007           /* store incoming byte in temparory bufer */
// 14008           AppS2wHal_CharNGet(extFlashGetDatabuf, rwSize);
        MOV      R1,R5
        ADD      R0,R4,#+12
          CFI FunCall AppS2wHal_CharNGet
        BL       AppS2wHal_CharNGet
// 14009 		  
// 14010 		  if(spiFlag)
        BL       ?Subroutine80
??CrossCallReturnLabel_459:
        LDR      R2,[R4, #+4]
        LDR      R1,[R4, #+8]
        ADD      R0,R0,#+30208
        ADDS     R0,R0,#+136
        CBZ.N    R1,??AppS2wExternalFlashData_1
// 14011 		  {
// 14012                        GsnExtFlash_Write (&s2wappMainTaskCtxt->extFlashCtx,rwSize,writeAddr,extFlashGetDatabuf,GSN_FLASH_SPI_DMA, NULL, NULL);
        MOVS     R1,#+0
        STR      R1,[SP, #+8]
        STR      R1,[SP, #+4]
        MOVS     R1,#+1
        B.N      ??AppS2wExternalFlashData_2
// 14013 		  }
// 14014 		  else
// 14015 		  {
// 14016 			GsnExtFlash_Write (&s2wappMainTaskCtxt->extFlashCtx,rwSize,writeAddr,extFlashGetDatabuf,GSN_FLASH_SPI_POLL, NULL, NULL);
??AppS2wExternalFlashData_1:
        STR      R1,[SP, #+8]
        STR      R1,[SP, #+4]
??AppS2wExternalFlashData_2:
        STR      R1,[SP, #+0]
        ADD      R3,R4,#+12
        MOV      R1,R5
          CFI FunCall GsnExtFlash_Write
        BL       GsnExtFlash_Write
// 14017 		  }
// 14018           extFlashFileSize -= rwSize;
        LDR      R0,[R4, #+0]
// 14019           writeAddr += rwSize;
        LDR      R1,[R4, #+4]
        SUBS     R0,R0,R5
        ADDS     R1,R5,R1
        STR      R0,[R4, #+0]
        STR      R1,[R4, #+4]
// 14020 		
// 14021       }
        CMP      R0,#+0
        BNE.N    ??AppS2wExternalFlashData_0
// 14022 	  
// 14023       S2w_Printf("\r\nLoading file successfull\r\n");
        ADR.W    R0,`?<Constant "\\r\\nLoading file succes...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14024 
// 14025     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R1-R5,PC}       ;; return
          CFI EndBlock cfiBlock772
// 14026 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nLoading file succes...">`:
        DC8 "\015\012Loading file successfull\015\012"
        DC8 0, 0, 0
// 14027 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock773 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashInit
        THUMB
// 14028 UINT8
// 14029 AppS2wCmd_ExtFlashInit(UINT8* ptr)
// 14030 {
AppS2wCmd_ExtFlashInit:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
// 14031 
// 14032     UINT8 status = S2W_SUCCESS;
// 14033     UINT8 *p;
// 14034 
// 14035 	if(s2wappMainTaskCtxt->extFlashCtx.extFlashStatus == EXTFLASH_NOT_INITIALIZED)
        LDR.N    R1,??DataTable490
        LDR      R1,[R1, #+0]
        MOVW     R0,#+31696
        MOVS     R4,#+0
        LDRB     R0,[R0, R1]
        CBNZ.N   R0,??AppS2wCmd_ExtFlashInit_0
// 14036 	{
// 14037 		if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine25
??CrossCallReturnLabel_57:
        LDR.W    R5,??DataTable504_1
        CBZ.N    R0,??AppS2wCmd_ExtFlashInit_1
// 14038 	  	{
// 14039 			status = AppS2wParse_Int(p, &spiFlag);
        ADD      R1,R5,#+8
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
        MOVS     R4,R0
// 14040 	      	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashInit_0
// 14041 	      	{
// 14042 	          	return status;
// 14043 	      	}
// 14044 	   	}
// 14045 		
// 14046 		AppExtFlash_Init((GSN_FLASH_SPI_FLAG_T)spiFlag);
??AppS2wCmd_ExtFlashInit_1:
        LDR      R0,[R5, #+8]
        UXTB     R0,R0
          CFI FunCall AppExtFlash_Init
        BL       AppExtFlash_Init
// 14047 	}
// 14048 	return status;
??AppS2wCmd_ExtFlashInit_0:
        MOV      R0,R4
        POP      {R1,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock773
// 14049 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable490:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond774 Using cfiCommon0
          CFI Function AppS2wCmd_SslCertificateDelete
          CFI Conditional ??CrossCallReturnLabel_63
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+24
          CFI Block cfiCond775 Using cfiCommon0
          CFI (cfiCond775) Function AppS2wCmd_Nauto
          CFI (cfiCond775) Conditional ??CrossCallReturnLabel_62
          CFI (cfiCond775) R4 Frame(CFA, -12)
          CFI (cfiCond775) R5 Frame(CFA, -8)
          CFI (cfiCond775) R14 Frame(CFA, -4)
          CFI (cfiCond775) CFA R13+96
          CFI Block cfiCond776 Using cfiCommon0
          CFI (cfiCond776) Function AppS2wCmd_Nauto
          CFI (cfiCond776) Conditional ??CrossCallReturnLabel_61
          CFI (cfiCond776) R4 Frame(CFA, -12)
          CFI (cfiCond776) R5 Frame(CFA, -8)
          CFI (cfiCond776) R14 Frame(CFA, -4)
          CFI (cfiCond776) CFA R13+96
          CFI Block cfiCond777 Using cfiCommon0
          CFI (cfiCond777) Function AppS2wCmd_Nauto
          CFI (cfiCond777) Conditional ??CrossCallReturnLabel_60
          CFI (cfiCond777) R4 Frame(CFA, -12)
          CFI (cfiCond777) R5 Frame(CFA, -8)
          CFI (cfiCond777) R14 Frame(CFA, -4)
          CFI (cfiCond777) CFA R13+96
          CFI Block cfiCond778 Using cfiCommon0
          CFI (cfiCond778) Function AppS2wCmd_Nauto
          CFI (cfiCond778) Conditional ??CrossCallReturnLabel_59
          CFI (cfiCond778) R4 Frame(CFA, -12)
          CFI (cfiCond778) R5 Frame(CFA, -8)
          CFI (cfiCond778) R14 Frame(CFA, -4)
          CFI (cfiCond778) CFA R13+96
          CFI Block cfiCond779 Using cfiCommon0
          CFI (cfiCond779) Function AppS2wCmd_Nauto
          CFI (cfiCond779) Conditional ??CrossCallReturnLabel_58
          CFI (cfiCond779) R4 Frame(CFA, -12)
          CFI (cfiCond779) R5 Frame(CFA, -8)
          CFI (cfiCond779) R14 Frame(CFA, -4)
          CFI (cfiCond779) CFA R13+96
          CFI Block cfiCond780 Using cfiCommon0
          CFI (cfiCond780) Function AppS2wCmd_ExtFlashInit
          CFI (cfiCond780) Conditional ??CrossCallReturnLabel_57
          CFI (cfiCond780) R4 Frame(CFA, -12)
          CFI (cfiCond780) R5 Frame(CFA, -8)
          CFI (cfiCond780) R14 Frame(CFA, -4)
          CFI (cfiCond780) CFA R13+16
          CFI Block cfiCond781 Using cfiCommon0
          CFI (cfiCond781) Function AppS2wCmd_ExtFlashWrite
          CFI (cfiCond781) Conditional ??CrossCallReturnLabel_56
          CFI (cfiCond781) R4 Frame(CFA, -12)
          CFI (cfiCond781) R5 Frame(CFA, -8)
          CFI (cfiCond781) R14 Frame(CFA, -4)
          CFI (cfiCond781) CFA R13+16
          CFI Block cfiCond782 Using cfiCommon0
          CFI (cfiCond782) Function AppS2wCmd_ExtFlashWrite
          CFI (cfiCond782) Conditional ??CrossCallReturnLabel_55
          CFI (cfiCond782) R4 Frame(CFA, -12)
          CFI (cfiCond782) R5 Frame(CFA, -8)
          CFI (cfiCond782) R14 Frame(CFA, -4)
          CFI (cfiCond782) CFA R13+16
          CFI Block cfiPicker783 Using cfiCommon1
          CFI (cfiPicker783) NoFunction
          CFI (cfiPicker783) Picker
        THUMB
?Subroutine25:
        ADD      R0,SP,#+0
          CFI FunCall AppS2wCmd_SslCertificateDelete AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_Nauto AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashInit AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashWrite AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashWrite AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond774
          CFI EndBlock cfiCond775
          CFI EndBlock cfiCond776
          CFI EndBlock cfiCond777
          CFI EndBlock cfiCond778
          CFI EndBlock cfiCond779
          CFI EndBlock cfiCond780
          CFI EndBlock cfiCond781
          CFI EndBlock cfiCond782
          CFI EndBlock cfiPicker783
// 14050 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock784 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashSpiConf
        THUMB
// 14051 UINT8
// 14052 AppS2wCmd_ExtFlashSpiConf(UINT8* ptr)
// 14053 {
AppS2wCmd_ExtFlashSpiConf:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+20
          CFI CFA R13+40
// 14054 	UINT8 status = S2W_SUCCESS;	
        MOVS     R4,#+0
// 14055 	UINT8 *p;
// 14056 	UINT32 spiPin, gpioNumb, muxVal, pulldown;
// 14057 
// 14058 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine40
??CrossCallReturnLabel_218:
        CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_0
// 14059   	{
// 14060     	status = AppS2wParse_Int(p, &spiPin);
        BL       ?Subroutine53
??CrossCallReturnLabel_334:
        MOVS     R4,R0
// 14061       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
// 14062       	{
// 14063           	return status;
// 14064       	}
// 14065    	}
// 14066 
// 14067 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_ExtFlashSpiConf_0:
        BL       ?Subroutine40
??CrossCallReturnLabel_217:
        CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_2
// 14068   	{
// 14069     	status = AppS2wParse_Int(p, &gpioNumb);
        BL       ?Subroutine51
??CrossCallReturnLabel_270:
        MOVS     R4,R0
// 14070       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
// 14071       	{
// 14072           	return status;
// 14073       	}
// 14074    	}
// 14075 		
// 14076 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_ExtFlashSpiConf_2:
        BL       ?Subroutine40
??CrossCallReturnLabel_216:
        CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_3
// 14077   	{
// 14078     	status = AppS2wParse_Int(p, &muxVal);
        BL       ?Subroutine52
??CrossCallReturnLabel_315:
        MOVS     R4,R0
// 14079       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashSpiConf_1
// 14080       	{
// 14081           	return status;
// 14082       	}
// 14083    	}
// 14084 
// 14085 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_ExtFlashSpiConf_3:
        BL       ?Subroutine40
??CrossCallReturnLabel_215:
        CBZ.N    R0,??AppS2wCmd_ExtFlashSpiConf_4
// 14086   	{
// 14087     	status = AppS2wParse_Int(p, &pulldown);
        BL       ?Subroutine50
??CrossCallReturnLabel_256:
        MOVS     R4,R0
// 14088       	if (status != S2W_SUCCESS)
        BEQ.N    ??AppS2wCmd_ExtFlashSpiConf_4
// 14089       	{
// 14090           	return status;
??AppS2wCmd_ExtFlashSpiConf_1:
        MOV      R0,R4
        ADD      SP,SP,#+24
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI CFA R13+40
// 14091       	}
// 14092    	}
// 14093 	
// 14094 	/*	  GPIO Mux enable for SPI Port-1	   */
// 14095 	GsnIoMux_Sel(gpioNumb, muxVal);
??AppS2wCmd_ExtFlashSpiConf_4:
        LDR      R1,[SP, #+4]
        LDR      R0,[SP, #+0]
          CFI FunCall GsnIoMux_Sel
        BL       GsnIoMux_Sel
// 14096 
// 14097 	if(pulldown)
        LDR      R0,[SP, #+8]
        CMP      R0,#+0
        LDR      R0,[SP, #+0]
        BEQ.N    ??AppS2wCmd_ExtFlashSpiConf_5
// 14098 		GsnIoMux_PullDownEnable (gpioNumb);
          CFI FunCall GsnIoMux_PullDownEnable
        BL       GsnIoMux_PullDownEnable
        B.N      ??AppS2wCmd_ExtFlashSpiConf_6
// 14099 	else		
// 14100 		GsnIoMux_PullDownDisable (gpioNumb);
??AppS2wCmd_ExtFlashSpiConf_5:
          CFI FunCall GsnIoMux_PullDownDisable
        BL       GsnIoMux_PullDownDisable
// 14101 
// 14102 	if(!muxVal)
??AppS2wCmd_ExtFlashSpiConf_6:
        LDR      R0,[SP, #+4]
        LDR.W    R5,??DataTable508
        CBNZ.N   R0,??AppS2wCmd_ExtFlashSpiConf_7
// 14103 	{
// 14104 		/* Use SPI CS pin10 as GPIO to control from driver */
// 14105 		GsnGpio_Init((~APP_ALL_GPIO_SET) | (1<<gpioNumb), APP_ALL_GPIO_SET & (~(1<<gpioNumb))); 
        LDR      R0,[SP, #+0]
        MOVS     R6,#+1
        LSL      R0,R6,R0
        MVNS     R2,R0
        MOVS     R3,#+0
        MOVS     R1,#+0
          CFI FunCall GsnGpio_Init
        BL       GsnGpio_Init
// 14106 		s2wappMainTaskCtxt->extFlashCtx.spiCsGpio = ((~APP_ALL_GPIO_SET) | (1<<gpioNumb));
        LDR      R2,[R5, #+0]
        LDR      R0,[SP, #+0]
        ADD      R2,R2,#+31488
        ADDS     R2,R2,#+200
        LSL      R0,R6,R0
        MOVS     R1,#+0
        STRD     R0,R1,[R2, #+0]
// 14107 	}
// 14108 	
// 14109 	s2wappMainTaskCtxt->extFlashCtx.spiPinConf |= spiPin;
??AppS2wCmd_ExtFlashSpiConf_7:
        LDR      R0,[R5, #+0]
        LDR      R3,[SP, #+12]
        MOVW     R1,#+31697
        LDRB     R2,[R1, R0]
        ORRS     R2,R3,R2
        STRB     R2,[R1, R0]
        B.N      ??AppS2wCmd_ExtFlashSpiConf_1
          CFI EndBlock cfiBlock784
// 14110 	return status;
// 14111 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable491:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond785 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupConf
          CFI Conditional ??CrossCallReturnLabel_220
          CFI R4 Frame(CFA, -16)
          CFI R5 Frame(CFA, -12)
          CFI R6 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond786 Using cfiCommon0
          CFI (cfiCond786) Function AppS2wCmd_OtaFwupConf
          CFI (cfiCond786) Conditional ??CrossCallReturnLabel_219
          CFI (cfiCond786) R4 Frame(CFA, -16)
          CFI (cfiCond786) R5 Frame(CFA, -12)
          CFI (cfiCond786) R6 Frame(CFA, -8)
          CFI (cfiCond786) R14 Frame(CFA, -4)
          CFI (cfiCond786) CFA R13+40
          CFI Block cfiCond787 Using cfiCommon0
          CFI (cfiCond787) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond787) Conditional ??CrossCallReturnLabel_218
          CFI (cfiCond787) R4 Frame(CFA, -16)
          CFI (cfiCond787) R5 Frame(CFA, -12)
          CFI (cfiCond787) R6 Frame(CFA, -8)
          CFI (cfiCond787) R14 Frame(CFA, -4)
          CFI (cfiCond787) CFA R13+40
          CFI Block cfiCond788 Using cfiCommon0
          CFI (cfiCond788) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond788) Conditional ??CrossCallReturnLabel_217
          CFI (cfiCond788) R4 Frame(CFA, -16)
          CFI (cfiCond788) R5 Frame(CFA, -12)
          CFI (cfiCond788) R6 Frame(CFA, -8)
          CFI (cfiCond788) R14 Frame(CFA, -4)
          CFI (cfiCond788) CFA R13+40
          CFI Block cfiCond789 Using cfiCommon0
          CFI (cfiCond789) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond789) Conditional ??CrossCallReturnLabel_216
          CFI (cfiCond789) R4 Frame(CFA, -16)
          CFI (cfiCond789) R5 Frame(CFA, -12)
          CFI (cfiCond789) R6 Frame(CFA, -8)
          CFI (cfiCond789) R14 Frame(CFA, -4)
          CFI (cfiCond789) CFA R13+40
          CFI Block cfiCond790 Using cfiCommon0
          CFI (cfiCond790) Function AppS2wCmd_ExtFlashSpiConf
          CFI (cfiCond790) Conditional ??CrossCallReturnLabel_215
          CFI (cfiCond790) R4 Frame(CFA, -16)
          CFI (cfiCond790) R5 Frame(CFA, -12)
          CFI (cfiCond790) R6 Frame(CFA, -8)
          CFI (cfiCond790) R14 Frame(CFA, -4)
          CFI (cfiCond790) CFA R13+40
          CFI Block cfiCond791 Using cfiCommon0
          CFI (cfiCond791) Function AppS2wCmd_ExtFlashRead
          CFI (cfiCond791) Conditional ??CrossCallReturnLabel_214
          CFI (cfiCond791) R4 Frame(CFA, -24)
          CFI (cfiCond791) R5 Frame(CFA, -20)
          CFI (cfiCond791) R6 Frame(CFA, -16)
          CFI (cfiCond791) R7 Frame(CFA, -12)
          CFI (cfiCond791) R8 Frame(CFA, -8)
          CFI (cfiCond791) R14 Frame(CFA, -4)
          CFI (cfiCond791) CFA R13+48
          CFI Block cfiCond792 Using cfiCommon0
          CFI (cfiCond792) Function AppS2wCmd_ExtFlashRead
          CFI (cfiCond792) Conditional ??CrossCallReturnLabel_213
          CFI (cfiCond792) R4 Frame(CFA, -24)
          CFI (cfiCond792) R5 Frame(CFA, -20)
          CFI (cfiCond792) R6 Frame(CFA, -16)
          CFI (cfiCond792) R7 Frame(CFA, -12)
          CFI (cfiCond792) R8 Frame(CFA, -8)
          CFI (cfiCond792) R14 Frame(CFA, -4)
          CFI (cfiCond792) CFA R13+48
          CFI Block cfiPicker793 Using cfiCommon1
          CFI (cfiPicker793) NoFunction
          CFI (cfiPicker793) Picker
        THUMB
?Subroutine40:
        ADD      R0,SP,#+20
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_OtaFwupConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashSpiConf AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashRead AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_ExtFlashRead AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond785
          CFI EndBlock cfiCond786
          CFI EndBlock cfiCond787
          CFI EndBlock cfiCond788
          CFI EndBlock cfiCond789
          CFI EndBlock cfiCond790
          CFI EndBlock cfiCond791
          CFI EndBlock cfiCond792
          CFI EndBlock cfiPicker793
// 14112 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock794 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashWrite
        THUMB
// 14113 UINT8
// 14114 AppS2wCmd_ExtFlashWrite(UINT8* ptr)
// 14115 {
AppS2wCmd_ExtFlashWrite:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
// 14116 	//UINT32 retVal=0;
// 14117 	UINT8 *p;
// 14118 	UINT8 status = S2W_SUCCESS;
// 14119 
// 14120 	writeAddr = 0x00000000;
        LDR.W    R5,??DataTable504_1
        MOVS     R4,#+0
        STR      R4,[R5, #+4]
// 14121 
// 14122 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine25
??CrossCallReturnLabel_56:
        CBZ.N    R0,??AppS2wCmd_ExtFlashWrite_0
// 14123   	{
// 14124     	status = AppS2wParse_Hex(p, &writeAddr);
        ADDS     R1,R5,#+4
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
        MOVS     R4,R0
// 14125       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashWrite_1
// 14126       	{
// 14127           	return status;
// 14128       	}
// 14129    	}
// 14130 	
// 14131 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
??AppS2wCmd_ExtFlashWrite_0:
        BL       ?Subroutine25
??CrossCallReturnLabel_55:
        CBZ.N    R0,??AppS2wCmd_ExtFlashWrite_1
// 14132   	{
// 14133     	status = AppS2wParse_Int(p, &extFlashFileSize);
        MOV      R1,R5
          CFI FunCall AppS2wParse_Int
        BL       AppS2wParse_Int
        MOV      R4,R0
// 14134       	if (status != S2W_SUCCESS)
// 14135       	{
// 14136           	return status;
// 14137       	}
// 14138    	}
// 14139 
// 14140 	return status;
??AppS2wCmd_ExtFlashWrite_1:
        MOV      R0,R4
        POP      {R1,R4,R5,PC}    ;; return
          CFI EndBlock cfiBlock794
// 14141 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable492:
        DC8      0x30, 0x78, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable492_1:
        DC8      0x0D, 0x0A, 0x00, 0x00
// 14142 
// 14143 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock795 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashRead
        THUMB
// 14144 UINT8
// 14145 AppS2wCmd_ExtFlashRead(UINT8* ptr)
// 14146 {
AppS2wCmd_ExtFlashRead:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
        SUB      SP,SP,#+20
          CFI CFA R13+48
// 14147 	UINT8 status = S2W_SUCCESS;	
// 14148 	UINT8 *p;
// 14149 	UINT32 readAddr;
// 14150 	UINT32 i=0, dataLen;
// 14151 	//GSN_SPI_CONFIG_T *spiConfig;
// 14152 	//GSN_SPI_HANDLE_T *spiHandle;
// 14153 	//spiConfig = &s2wappMainTaskCtxt->extFlashCtx.spiConfig;
// 14154 	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
// 14155 
// 14156 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine40
??CrossCallReturnLabel_214:
        CBZ.N    R0,??AppS2wCmd_ExtFlashRead_0
// 14157   	{
// 14158     	status = AppS2wParse_Hex(p, &readAddr);
        ADD      R1,SP,#+16
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
        MOVS     R8,R0
// 14159       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashRead_1
// 14160       	{
// 14161           	return status;
// 14162       	}
// 14163    	}
// 14164    	else
// 14165    	{
// 14166    	    return S2W_EINVAL;
// 14167    	}
// 14168 		
// 14169 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine40
??CrossCallReturnLabel_213:
        CBZ.N    R0,??AppS2wCmd_ExtFlashRead_0
// 14170   	{
// 14171     	status = AppS2wParse_Int(p, &dataLen);
        BL       ?Subroutine53
??CrossCallReturnLabel_333:
        MOVS     R8,R0
// 14172       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashRead_1
// 14173       	{
// 14174           	return status;
// 14175       	}
// 14176    	}
// 14177    	else
// 14178    	{
// 14179    	    return S2W_EINVAL;
// 14180    	}
// 14181 
// 14182         S2w_Printf("\r\n");
        BL       ?Subroutine91
// 14183 
// 14184 
// 14185 	UINT32 rwSize = 0;
??CrossCallReturnLabel_487:
        ADR.N    R5,??DataTable496_1  ;; 0x25, 0x63, 0x00, 0x00
        LDR.W    R6,??DataTable510
// 14186 	while(dataLen)
??AppS2wCmd_ExtFlashRead_2:
        LDR      R0,[SP, #+12]
        CBZ.N    R0,??AppS2wCmd_ExtFlashRead_1
// 14187       {
// 14188         memset(readBuffer, 0, sizeof(readBuffer));
        MOV      R2,#+1024
        BL       ??Subroutine19_0
// 14189         if(dataLen<1024)
??CrossCallReturnLabel_40:
        LDR      R7,[SP, #+12]
        CMP      R7,#+1024
        IT       HI 
        MOVHI    R7,#+1024
// 14190         {
// 14191           rwSize = dataLen;
// 14192         }
// 14193         if(dataLen>=1024)
// 14194         {
// 14195           rwSize = 1024;
// 14196         }
// 14197 		if(spiFlag)
        BL       ?Subroutine73
??CrossCallReturnLabel_433:
        CBZ.N    R1,??AppS2wCmd_ExtFlashRead_3
// 14198 		{
// 14199 			GsnExtFlash_Read(&s2wappMainTaskCtxt->extFlashCtx,rwSize,readAddr,readBuffer,GSN_FLASH_SPI_DMA, NULL, NULL); //GSN_FLASH_SPI_DMA , GSN_FLASH_SPI_POLL
        MOVS     R1,#+0
        STR      R1,[SP, #+8]
        STR      R1,[SP, #+4]
        MOVS     R1,#+1
        B.N      ??AppS2wCmd_ExtFlashRead_4
// 14200 		}
??AppS2wCmd_ExtFlashRead_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_ExtFlashRead_5
// 14201 		else
// 14202 		{			
// 14203 			GsnExtFlash_Read(&s2wappMainTaskCtxt->extFlashCtx,rwSize,readAddr,readBuffer,GSN_FLASH_SPI_POLL, NULL, NULL); //GSN_FLASH_SPI_DMA , GSN_FLASH_SPI_POLL
??AppS2wCmd_ExtFlashRead_3:
        STR      R1,[SP, #+8]
        STR      R1,[SP, #+4]
??AppS2wCmd_ExtFlashRead_4:
        STR      R1,[SP, #+0]
        MOV      R3,R6
        LDR      R2,[SP, #+16]
        MOV      R1,R7
          CFI FunCall GsnExtFlash_Read
        BL       GsnExtFlash_Read
// 14204 		}
// 14205         dataLen -= rwSize;
        LDR      R0,[SP, #+12]
        SUBS     R0,R0,R7
        STR      R0,[SP, #+12]
// 14206         readAddr += rwSize;
// 14207       
// 14208 		for(i=0;i<rwSize;i++)
        MOVS     R4,#+0
        LDR      R0,[SP, #+16]
        ADDS     R0,R7,R0
        STR      R0,[SP, #+16]
??AppS2wCmd_ExtFlashRead_6:
        CMP      R4,R7
        BCS.N    ??AppS2wCmd_ExtFlashRead_2
// 14209 		{
// 14210 			S2w_Printf("%c",readBuffer[i]);
        LDRB     R1,[R4, R6]
        MOV      R0,R5
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14211 		}         
        ADDS     R4,R4,#+1
        B.N      ??AppS2wCmd_ExtFlashRead_6
// 14212       }
// 14213 
// 14214 	return status;
??AppS2wCmd_ExtFlashRead_1:
        MOV      R0,R8
??AppS2wCmd_ExtFlashRead_5:
        ADD      SP,SP,#+24
          CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock795
// 14215 
// 14216 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable493:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond796 Using cfiCommon0
          CFI Function AppS2wCmd_Dns
          CFI Conditional ??CrossCallReturnLabel_43
          CFI R4 Frame(CFA, -20)
          CFI R5 Frame(CFA, -16)
          CFI R6 Frame(CFA, -12)
          CFI R7 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+56
          CFI Block cfiCond797 Using cfiCommon0
          CFI (cfiCond797) Function AppS2wCmd_Dns
          CFI (cfiCond797) Conditional ??CrossCallReturnLabel_42
          CFI (cfiCond797) R4 Frame(CFA, -20)
          CFI (cfiCond797) R5 Frame(CFA, -16)
          CFI (cfiCond797) R6 Frame(CFA, -12)
          CFI (cfiCond797) R7 Frame(CFA, -8)
          CFI (cfiCond797) R14 Frame(CFA, -4)
          CFI (cfiCond797) CFA R13+56
          CFI Block cfiPicker798 Using cfiCommon1
          CFI (cfiPicker798) NoFunction
          CFI (cfiPicker798) Picker
        THUMB
?Subroutine19:
        STRB     R0,[R5, #+672]
        MOVS     R2,#+64
          CFI Block cfiCond799 Using cfiCommon0
          CFI (cfiCond799) Function AppS2wCmd_OtaFwupExtFlashStart
          CFI (cfiCond799) Conditional ??CrossCallReturnLabel_41
          CFI (cfiCond799) R4 Frame(CFA, -20)
          CFI (cfiCond799) R5 Frame(CFA, -16)
          CFI (cfiCond799) R6 Frame(CFA, -12)
          CFI (cfiCond799) R7 Frame(CFA, -8)
          CFI (cfiCond799) R14 Frame(CFA, -4)
          CFI (cfiCond799) CFA R13+24
          CFI Block cfiCond800 Using cfiCommon0
          CFI (cfiCond800) Function AppS2wCmd_ExtFlashRead
          CFI (cfiCond800) Conditional ??CrossCallReturnLabel_40
          CFI (cfiCond800) R4 Frame(CFA, -24)
          CFI (cfiCond800) R5 Frame(CFA, -20)
          CFI (cfiCond800) R6 Frame(CFA, -16)
          CFI (cfiCond800) R7 Frame(CFA, -12)
          CFI (cfiCond800) R8 Frame(CFA, -8)
          CFI (cfiCond800) R14 Frame(CFA, -4)
          CFI (cfiCond800) CFA R13+48
??Subroutine19_0:
        MOVS     R1,#+0
        MOV      R0,R6
          CFI FunCall AppS2wCmd_Dns memset
          CFI FunCall AppS2wCmd_Dns memset
          CFI FunCall AppS2wCmd_OtaFwupExtFlashStart memset
          CFI FunCall AppS2wCmd_ExtFlashRead memset
        B.W      memset
          CFI EndBlock cfiCond796
          CFI EndBlock cfiCond797
          CFI EndBlock cfiPicker798
          CFI EndBlock cfiCond799
          CFI EndBlock cfiCond800
// 14217 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock801 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashErase
        THUMB
// 14218 UINT8
// 14219 AppS2wCmd_ExtFlashErase(UINT8* ptr)
// 14220 {
AppS2wCmd_ExtFlashErase:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 14221 	UINT8 status = S2W_SUCCESS;
// 14222         UINT8 *p;
// 14223 	UINT32 eraseSectorAddr;
// 14224 	//GSN_SPI_HANDLE_T *spiHandle;
// 14225 	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
// 14226 
// 14227 	if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
        BL       ?Subroutine39
??CrossCallReturnLabel_203:
        CBZ.N    R0,??AppS2wCmd_ExtFlashErase_0
// 14228   	{
// 14229     	status = AppS2wParse_Hex(p, &eraseSectorAddr);
        ADD      R1,SP,#+4
          CFI FunCall AppS2wParse_Hex
        BL       AppS2wParse_Hex
        MOVS     R4,R0
// 14230       	if (status != S2W_SUCCESS)
        BNE.N    ??AppS2wCmd_ExtFlashErase_1
// 14231       	{
// 14232           	return status;
// 14233       	}
// 14234    	}
// 14235    	else
// 14236    	{
// 14237    	    return S2W_EINVAL;
// 14238    	}
// 14239 	
// 14240 	if(spiFlag)
        BL       ?Subroutine73
??CrossCallReturnLabel_434:
        CBNZ.N   R1,??AppS2wCmd_ExtFlashErase_2
// 14241 	{
// 14242 		GsnExtFlash_Erase(&s2wappMainTaskCtxt->extFlashCtx,eraseSectorAddr,GSN_FLASH_SPI_DMA,NULL,NULL);
// 14243 	}
// 14244 	else
// 14245 	{
// 14246 		GsnExtFlash_Erase(&s2wappMainTaskCtxt->extFlashCtx,eraseSectorAddr,GSN_FLASH_SPI_POLL,NULL,NULL);
        STR      R1,[SP, #+0]
        MOVS     R3,#+0
        MOVS     R2,#+0
??AppS2wCmd_ExtFlashErase_3:
        LDR      R1,[SP, #+4]
          CFI FunCall GsnExtFlash_Erase
        BL       GsnExtFlash_Erase
// 14247 	}
// 14248 	
// 14249 	return status;
??AppS2wCmd_ExtFlashErase_1:
        MOV      R0,R4
??AppS2wCmd_ExtFlashErase_4:
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI CFA R13+24
??AppS2wCmd_ExtFlashErase_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_ExtFlashErase_4
??AppS2wCmd_ExtFlashErase_2:
        MOVS     R1,#+0
        STR      R1,[SP, #+0]
        MOVS     R3,#+0
        MOVS     R2,#+1
        B.N      ??AppS2wCmd_ExtFlashErase_3
          CFI EndBlock cfiBlock801
// 14250 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond802 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashRead
          CFI NoCalls
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_433
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+48
          CFI Block cfiCond803 Using cfiCommon0
          CFI (cfiCond803) Function AppS2wCmd_ExtFlashErase
          CFI (cfiCond803) NoCalls AppS2wCmd_ExtFlashChipErase
          CFI (cfiCond803) NoCalls AppS2wCmd_ExtFlashErase
          CFI (cfiCond803) NoCalls AppS2wCmd_ExtFlashRead
          CFI (cfiCond803) Conditional ??CrossCallReturnLabel_434
          CFI (cfiCond803) R4 Frame(CFA, -8)
          CFI (cfiCond803) R14 Frame(CFA, -4)
          CFI (cfiCond803) CFA R13+24
          CFI Block cfiCond804 Using cfiCommon0
          CFI (cfiCond804) Function AppS2wCmd_ExtFlashChipErase
          CFI (cfiCond804) NoCalls AppS2wCmd_ExtFlashChipErase
          CFI (cfiCond804) NoCalls AppS2wCmd_ExtFlashErase
          CFI (cfiCond804) NoCalls AppS2wCmd_ExtFlashRead
          CFI (cfiCond804) Conditional ??CrossCallReturnLabel_435
          CFI (cfiCond804) R14 Frame(CFA, -4)
          CFI (cfiCond804) CFA R13+8
          CFI Block cfiPicker805 Using cfiCommon1
          CFI (cfiPicker805) NoFunction
          CFI (cfiPicker805) NoCalls AppS2wCmd_ExtFlashChipErase
          CFI (cfiPicker805) NoCalls AppS2wCmd_ExtFlashErase
          CFI (cfiPicker805) NoCalls AppS2wCmd_ExtFlashRead
          CFI (cfiPicker805) Picker
        THUMB
?Subroutine73:
        LDR.W    R0,??DataTable508
        LDR.W    R1,??DataTable504_1
        LDR      R0,[R0, #+0]
        LDR      R1,[R1, #+8]
        ADD      R0,R0,#+30208
        ADDS     R0,R0,#+136
        BX       LR
          CFI EndBlock cfiCond802
          CFI EndBlock cfiCond803
          CFI EndBlock cfiCond804
          CFI EndBlock cfiPicker805

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable494:
        DC32     s2wLinkState

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable494_1:
        DC32     globalUseHRssi
// 14251 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock806 Using cfiCommon0
          CFI Function AppS2wCmd_ExtFlashChipErase
        THUMB
// 14252 UINT8
// 14253 AppS2wCmd_ExtFlashChipErase(UINT8* ptr)
// 14254 {
AppS2wCmd_ExtFlashChipErase:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 14255 	UINT8 status = S2W_SUCCESS;
// 14256 
// 14257 	//GSN_SPI_HANDLE_T *spiHandle;
// 14258 	//spiHandle = &s2wappMainTaskCtxt->extFlashCtx.spiHandle;
// 14259 
// 14260 	if(spiFlag)
        BL       ?Subroutine73
??CrossCallReturnLabel_435:
        CBZ.N    R1,??AppS2wCmd_ExtFlashChipErase_0
// 14261 	{
// 14262 		GsnExtFlash_ChipErase(&s2wappMainTaskCtxt->extFlashCtx,GSN_FLASH_SPI_DMA,NULL,NULL);
        MOVS     R3,#+0
        MOVS     R2,#+0
        MOVS     R1,#+1
        B.N      ??AppS2wCmd_ExtFlashChipErase_1
// 14263 	}
// 14264 	else
// 14265 	{
// 14266 		GsnExtFlash_ChipErase(&s2wappMainTaskCtxt->extFlashCtx,GSN_FLASH_SPI_POLL,NULL,NULL);
??AppS2wCmd_ExtFlashChipErase_0:
        MOVS     R3,#+0
        MOVS     R2,#+0
??AppS2wCmd_ExtFlashChipErase_1:
          CFI FunCall GsnExtFlash_ChipErase
        BL       GsnExtFlash_ChipErase
// 14267 	}
// 14268 	return status;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock806
// 14269 }
// 14270 #endif
// 14271 
// 14272 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock807 Using cfiCommon0
          CFI Function S2wRateValidation
          CFI NoCalls
        THUMB
// 14273 UINT8
// 14274 S2wRateValidation(UINT32 value)
// 14275 {
// 14276 	 if((value == GSN_MAC_RATE_1MBPS) || (value == GSN_MAC_RATE_2MBPS)|| (value == GSN_MAC_RATE_5_5MBPS)||
// 14277 	    (value == GSN_MAC_RATE_6_5MBPS)||(value == GSN_MAC_RATE_6MBPS) ||(value == GSN_MAC_RATE_9MBPS) ||
// 14278 	    (value == GSN_MAC_RATE_11MBPS) ||(value == GSN_MAC_RATE_12MBPS) || (value == GSN_MAC_RATE_13MBPS) ||
// 14279 	    (value == GSN_MAC_RATE_18MBPS) || (value == GSN_MAC_RATE_19_5MBPS) ||(value == GSN_MAC_RATE_24MBPS) ||
// 14280         (value == GSN_MAC_RATE_26MBPS) || (value == GSN_MAC_RATE_36MBPS) || (value == GSN_MAC_RATE_39MBPS) ||
// 14281         (value == GSN_MAC_RATE_48MBPS)|| (value == GSN_MAC_RATE_52MBPS) || (value == GSN_MAC_RATE_54MBPS) ||
// 14282 	    (value == GSN_MAC_RATE_58_5MBPS) || (value == GSN_MAC_RATE_65MBPS))
S2wRateValidation:
        CMP      R0,#+2
        IT       NE 
        CMPNE    R0,#+4
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+11
        IT       NE 
        CMPNE    R0,#+13
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+12
        IT       NE 
        CMPNE    R0,#+18
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+22
        IT       NE 
        CMPNE    R0,#+24
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+26
        IT       NE 
        CMPNE    R0,#+36
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+39
        IT       NE 
        CMPNE    R0,#+48
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+52
        IT       NE 
        CMPNE    R0,#+72
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+78
        IT       NE 
        CMPNE    R0,#+96
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+104
        IT       NE 
        CMPNE    R0,#+108
        BEQ.N    ??S2wRateValidation_0
        CMP      R0,#+117
        IT       NE 
        CMPNE    R0,#+130
        BNE.N    ??S2wRateValidation_1
// 14283 	 {
// 14284 		  return 0;
??S2wRateValidation_0:
        MOVS     R0,#+0
        BX       LR
// 14285 	 }
// 14286 	  return 1;
??S2wRateValidation_1:
        MOVS     R0,#+1
        BX       LR               ;; return
          CFI EndBlock cfiBlock807
// 14287 }
// 14288 
// 14289 #ifdef S2W_COAP_SUPPORT

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock808 Using cfiCommon0
          CFI Function AppS2wCmd_CoapClose
        THUMB
// 14290 PRIVATE UINT8
// 14291 AppS2wCmd_CoapClose(UINT8* ptr)
// 14292 {
AppS2wCmd_CoapClose:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+4
          CFI CFA R13+24
// 14293 	UINT8 cid;
// 14294         UINT8 *p;
// 14295 	GSN_COAP_CONN_PARAMS_T * coapConnParams;
// 14296 	GSN_COAP_CONTEXT_T * coapContext;
// 14297 	// parse for cid
// 14298 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 14299 	if(!p)
??CrossCallReturnLabel_160:
        CBNZ.N   R0,??AppS2wCmd_CoapClose_0
// 14300 	{
// 14301 		return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1,R2,R4-R6,PC}
// 14302 	}
// 14303 	cid = AppS2w_CidValidate(*p);
??AppS2wCmd_CoapClose_0:
        BL       ?Subroutine101
??CrossCallReturnLabel_516:
        MOV      R4,R0
// 14304     if(cid == INVALID_CID)
        MOV      R5,R4
        CMP      R5,#+255
        BNE.N    ??AppS2wCmd_CoapClose_1
// 14305         return S2W_EBADCID;
        MOVS     R0,#+5
        POP      {R1,R2,R4-R6,PC}
// 14306 
// 14307     coapContext = AppS2wHal_CoapHandleGet(cid);
??AppS2wCmd_CoapClose_1:
          CFI FunCall AppS2wHal_CoapHandleGet
        BL       AppS2wHal_CoapHandleGet
        MOV      R6,R0
// 14308     coapConnParams = AppS2wHal_CoapParamsGet(cid);
        MOV      R0,R4
          CFI FunCall AppS2wHal_CoapParamsGet
        BL       AppS2wHal_CoapParamsGet
        MOV      R4,R0
// 14309 
// 14310 	GsnCoap_DeInit(coapContext);
        MOV      R0,R6
          CFI FunCall GsnCoap_DeInit
        BL       GsnCoap_DeInit
// 14311         coapContext = NULL;
// 14312 	s2wCidList[cid].s2wUsrCloseFlag = 1;
        MOV      R0,#+296
        LDR.W    R1,??DataTable515
        MLA      R0,R0,R5,R1
        MOVS     R1,#+1
        STRB     R1,[R0, #+144]
// 14313 	s2wCidList[cid].sd = CID_NOTINUSE;
        MOV      R1,#-1
        STR      R1,[R0, #+28]
// 14314 
// 14315 	if(coapConnParams)
        CBZ.N    R4,??AppS2wCmd_CoapClose_2
// 14316 	{
// 14317 		gsn_free(coapConnParams);
        MOV      R0,R4
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14318 		coapConnParams = NULL;
// 14319 	}
// 14320     return S2W_SUCCESS;
??AppS2wCmd_CoapClose_2:
        MOVS     R0,#+0
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock808
// 14321 }
// 14322 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock809 Using cfiCommon0
          CFI Function AppS2wCmd_CoapOpen
        THUMB
// 14323 PRIVATE UINT8
// 14324 AppS2wCmd_CoapOpen(UINT8* ptr)
// 14325 {
AppS2wCmd_CoapOpen:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+4
          CFI CFA R13+24
// 14326 	//S2w_Printf("AppS2wCmd_CoapOpen \r\n");
// 14327 	// parse the ptr for the parameters
// 14328 	// if dtls is set to 1, then do dtls connection
// 14329 	// else create coap context and return cid
// 14330 	UINT8 *p,  status;
// 14331 	UINT32 dtlsflag;
// 14332 	UINT8 cid;
// 14333 	GSN_COAP_CONN_PARAMS_T * connParams;
// 14334 	GSN_COAP_CONTEXT_T * coapContext;
// 14335 
// 14336 
// 14337 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine35
// 14338     if (!p)
??CrossCallReturnLabel_159:
        CBNZ.N   R0,??AppS2wCmd_CoapOpen_0
// 14339     {
// 14340         status = S2W_EINVAL;
// 14341         return status;
        MOVS     R0,#+2
        POP      {R1,R2,R4-R6,PC}
// 14342     }
// 14343 
// 14344     /* dtls flag */
// 14345     AppS2wParse_Int(p, &dtlsflag);
??AppS2wCmd_CoapOpen_0:
        BL       ?Subroutine51
// 14346     if(dtlsflag == 1)
??CrossCallReturnLabel_269:
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        BEQ.N    ??AppS2wCmd_CoapOpen_1
// 14347     {
// 14348     	// parse the input string further
// 14349     }
// 14350     else
// 14351     {
// 14352     	// open a coap context and return cid
// 14353     	coapContext = GsnCoap_Init(NULL);
        MOVS     R0,#+0
          CFI FunCall GsnCoap_Init
        BL       GsnCoap_Init
        MOV      R6,R0
// 14354 		cid = AppS2wHal_CidGet();
          CFI FunCall AppS2wHal_CidGet
        BL       AppS2wHal_CidGet
        MOV      R4,R0
// 14355 	    if (cid == INVALID_CID)
        CMP      R4,#+255
        BNE.N    ??AppS2wCmd_CoapOpen_2
// 14356 	    {
// 14357 	            return S2W_ENCID;
        MOVS     R0,#+4
        POP      {R1,R2,R4-R6,PC}
// 14358 	    }
// 14359 		s2wCidList[cid].coapContext =  coapContext;
??AppS2wCmd_CoapOpen_2:
        MOV      R0,#+296
        MULS     R0,R0,R4
        LDR.W    R1,??DataTable515
        ADDS     R5,R0,R1
        STR      R6,[R5, #+284]
// 14360 		s2wCidList[cid].sd = coapContext->sockfd;
        LDR      R2,[R6, #+24]
        STR      R2,[R5, #+28]
// 14361 	    s2wCidList[cid].conType = UDP;
        MOVS     R2,#+1
        STRB     R2,[R0, R1]
// 14362 		s2wCidList[cid].serverCid = INVALID_CID;
        MOVS     R0,#+255
        STRB     R0,[R5, #+46]
// 14363 	    s2wCidList[cid].localPort = 0;
// 14364 		//S2w_Printf("sockfd = %d\r\n",coapContext->sockfd);
// 14365 		//S2w_Printf("s2wCidList[cid] coapContext sockfd = %d\r\n",s2wCidList[cid].coapContext->sockfd);
// 14366 
// 14367 		connParams = (GSN_COAP_CONN_PARAMS_T*) gsn_malloc(sizeof(GSN_COAP_CONN_PARAMS_T));
        MOVS     R2,#+0
        MOVS     R0,#+0
        STRH     R0,[R5, #+2]
        MOVW     R1,#+14367
        MOVS     R0,#+36
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        BL       ?Subroutine18
// 14368 		memset(connParams,0,sizeof(GSN_COAP_CONN_PARAMS_T));
// 14369 		s2wCidList[cid].coapConnParams = connParams;
??CrossCallReturnLabel_39:
        STR      R6,[R5, #+288]
// 14370     	S2w_Printf("\r\n%x",cid);
        MOV      R1,R4
        ADR.W    R0,`?<Constant "\\r\\n%x">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14371 
// 14372     }
// 14373 	return S2W_SUCCESS;
??AppS2wCmd_CoapOpen_1:
        MOVS     R0,#+0
        POP      {R1,R2,R4-R6,PC}  ;; return
          CFI EndBlock cfiBlock809
// 14374 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496:
        DC32     pingThreadMsgQueueBuf+0x8

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496_1:
        DC8      0x25, 0x63, 0x00, 0x00

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496_2:
        DC32     pingThreadMsgQueueBuf

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496_3:
        DC32     appCtx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496_4:
        DC32     AppS2w_PingThreadEntry

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable496_5:
        DC32     s2wPingStarted

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\n%x">`:
        DC8 "\015\012%x"
        DC8 0, 0, 0
// 14375 
// 14376 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock810 Using cfiCommon0
          CFI Function AppS2wCmd_CoapSend
        THUMB
// 14377 PRIVATE UINT8
// 14378 AppS2wCmd_CoapSend(UINT8* ptr)
// 14379 {
AppS2wCmd_CoapSend:
        PUSH     {R0,R4-R8,LR}
          CFI R14 Frame(CFA, -4)
          CFI R8 Frame(CFA, -8)
          CFI R7 Frame(CFA, -12)
          CFI R6 Frame(CFA, -16)
          CFI R5 Frame(CFA, -20)
          CFI R4 Frame(CFA, -24)
          CFI CFA R13+28
// 14380 	UINT8 *p;
// 14381 	UINT32 payloadSize, responseTimeout,len;
// 14382     UINT8 cid;
// 14383 	GSN_COAP_CONTEXT_T * coapContext = NULL;
// 14384 	GSN_COAP_CONN_PARAMS_T* coapConnParams;
// 14385 	S2W_COAP_OPTION_T * start = optionHead;
        LDR.W    R0,??DataTable515_1
        LDR      R4,[R0, #+0]
        SUBW     SP,SP,#+1412
          CFI CFA R13+1440
// 14386 	char respBuf[COAP_MAX_PDU_SIZE];
// 14387 	INT16 numBytes;
// 14388 	unsigned int optionLen;
// 14389 	memset(respBuf,0,COAP_MAX_PDU_SIZE);
        MOV      R2,#+1400
        BL       ?Subroutine16
// 14390 
// 14391 	// parse for cid
// 14392 	p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_27:
        BL       ?Subroutine36
??CrossCallReturnLabel_184:
        MOVS     R1,R0
// 14393 	if(!p)
        BEQ.N    ??AppS2wCmd_CoapSend_0
// 14394 	{
// 14395 		return S2W_EINVAL;
// 14396 	}
// 14397 	cid = AppS2w_CidValidate(*p);
        BL       ?Subroutine101
??CrossCallReturnLabel_515:
        MOV      R6,R0
// 14398     if(cid == INVALID_CID)
        CMP      R6,#+255
        IT       EQ 
        MOVEQ    R0,#+5
// 14399         return S2W_EBADCID;
        BEQ.N    ??AppS2wCmd_CoapSend_1
// 14400 
// 14401     coapContext = AppS2wHal_CoapHandleGet(cid);
          CFI FunCall AppS2wHal_CoapHandleGet
        BL       AppS2wHal_CoapHandleGet
        MOV      R5,R0
// 14402     coapConnParams = AppS2wHal_CoapParamsGet(cid);
        MOV      R0,R6
          CFI FunCall AppS2wHal_CoapParamsGet
        BL       AppS2wHal_CoapParamsGet
        BL       ?Subroutine18
// 14403 
// 14404 	memset(coapConnParams,0,sizeof(GSN_COAP_CONN_PARAMS_T)); // memset the connection params
// 14405 	if(coapContext == NULL)
??CrossCallReturnLabel_38:
        CMP      R5,#+0
??AppS2wCmd_CoapSend_0:
        BEQ.N    ??AppS2wCmd_CoapSend_2
// 14406 	{
// 14407 		return S2W_EINVAL;
// 14408 	}
// 14409 
// 14410 	// parse for coap uri
// 14411 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine36
??CrossCallReturnLabel_183:
        MOVS     R8,R0
// 14412     if(p)
        BEQ.N    ??AppS2wCmd_CoapSend_3
// 14413     {
// 14414 	    //S2w_Printf("uri length = %d", strlen(p));
// 14415 	    //S2w_Printf("uri  = %s", p);
// 14416 	    len = strlen((const char *)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R7,R0
// 14417 
// 14418 	    coapConnParams->uri = (unsigned char*) gsn_malloc((sizeof(unsigned char)*len)+1);
        MOVS     R2,#+0
        MOVW     R1,#+14418
        ADDS     R0,R7,#+1
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R6, #+0]
// 14419 	    memcpy(coapConnParams->uri,p, len);
        MOV      R2,R7
        MOV      R1,R8
          CFI FunCall memcpy
        BL       memcpy
// 14420 	    coapConnParams->uriLength = len;
        STR      R7,[R6, #+4]
// 14421 	    //S2w_Printf("coapConnParams.uri  = %s", coapConnParams->uri);
// 14422     }
// 14423 
// 14424 	// parse for connection method
// 14425 
// 14426 	p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_CoapSend_3:
        BL       ?Subroutine36
??CrossCallReturnLabel_182:
        MOVS     R7,R0
// 14427     if(p)
        BEQ.N    ??AppS2wCmd_CoapSend_4
// 14428     {
// 14429     	if(strcmp((const char*)p, COAP_GET) == 0)
        ADR.N    R1,??DataTable500  ;; "GET"
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_CoapSend_5
// 14430     	{
// 14431     		coapConnParams->method = GSN_COAP_REQUEST_GET;
        MOVS     R0,#+1
        STRB     R0,[R6, #+20]
// 14432     	}
// 14433     	if(strcmp((const char*)p, COAP_POST) == 0)
??AppS2wCmd_CoapSend_5:
        MOV      R0,R7
        ADR.W    R1,`?<Constant "POST">`
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_CoapSend_4
// 14434     	{
// 14435     		coapConnParams->method = GSN_COAP_REQUEST_POST;
        MOVS     R0,#+2
        STRB     R0,[R6, #+20]
// 14436     	}
// 14437     }
// 14438 
// 14439 	// parse for connection type
// 14440 	p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_CoapSend_4:
        BL       ?Subroutine36
??CrossCallReturnLabel_181:
        MOVS     R7,R0
// 14441     if(p)
        BEQ.N    ??AppS2wCmd_CoapSend_6
// 14442     {
// 14443 		if(strcmp((const char*)p, COAP_CON) == 0)
        ADR.N    R1,??DataTable500_2  ;; "CON"
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_CoapSend_7
// 14444 		{
// 14445 			coapConnParams->type = GSN_COAP_MESSAGE_CON;
        STRB     R0,[R6, #+21]
// 14446 		}
// 14447 		if(strcmp((const char*)p, COAP_NON) == 0)
??AppS2wCmd_CoapSend_7:
        ADR.N    R1,??DataTable500_3  ;; "NON"
        MOV      R0,R7
          CFI FunCall strcmp
        BL       strcmp
        CBNZ.N   R0,??AppS2wCmd_CoapSend_6
// 14448 		{
// 14449 			coapConnParams->type = GSN_COAP_MESSAGE_NON;
        MOVS     R0,#+1
        STRB     R0,[R6, #+21]
// 14450 		}
// 14451     }
// 14452 
// 14453 
// 14454 	// parse for response timeout
// 14455 	p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_CoapSend_6:
        BL       ?Subroutine36
// 14456     if(p)
??CrossCallReturnLabel_180:
        CBZ.N    R0,??AppS2wCmd_CoapSend_8
// 14457     {
// 14458 		AppS2wParse_Int(p, &responseTimeout);
        BL       ?Subroutine51
// 14459 		if(responseTimeout > COAP_MAX_RESPONSE_TIMEOUT)
??CrossCallReturnLabel_268:
        LDR      R0,[SP, #+0]
        CMP      R0,#+61
        IT       CS 
        MOVCS    R0,#+60
// 14460 			coapConnParams->responseTimeout = COAP_MAX_RESPONSE_TIMEOUT;
// 14461 		else
// 14462 			coapConnParams->responseTimeout = responseTimeout;
        STR      R0,[R6, #+24]
// 14463     }
// 14464     coapConnParams->responseBuffer = respBuf;
??AppS2wCmd_CoapSend_8:
        ADD      R0,SP,#+8
        STR      R0,[R6, #+28]
// 14465     coapConnParams->responseBufLen = COAP_MAX_PDU_SIZE;
        MOV      R0,#+1400
        STR      R0,[R6, #+32]
        B.N      ??AppS2wCmd_CoapSend_9
// 14466 
// 14467     // add all the options
// 14468     while(start != NULL)
// 14469     {
// 14470     	optionLen = strlen((const char*)start->optionValue);
??AppS2wCmd_CoapSend_10:
        LDR      R7,[R4, #+4]
        BL       ??Subroutine69_0
// 14471     	GsnCoap_SetOption(start->optionKey,(unsigned char*)start->optionValue,optionLen);
??CrossCallReturnLabel_416:
        MOV      R2,R0
        LDRB     R0,[R4, #+0]
        MOV      R1,R7
          CFI FunCall GsnCoap_SetOption
        BL       GsnCoap_SetOption
// 14472     	start = start->next;
        LDR      R4,[R4, #+8]
// 14473     }
??AppS2wCmd_CoapSend_9:
        CMP      R4,#+0
        BNE.N    ??AppS2wCmd_CoapSend_10
// 14474 	// parse for payload size
// 14475 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine36
??CrossCallReturnLabel_179:
        MOVS     R1,R0
// 14476     if(p)
        BEQ.N    ??AppS2wCmd_CoapSend_11
// 14477     {
// 14478 		AppS2wParse_Int(p, &payloadSize);
        BL       ?Subroutine52
// 14479 
// 14480 		coapConnParams->payloadSize = payloadSize;
??CrossCallReturnLabel_314:
        LDR      R0,[SP, #+4]
        STR      R0,[R6, #+16]
// 14481 		// parse for payload type
// 14482 		p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine36
??CrossCallReturnLabel_178:
        MOVS     R5,R0
// 14483 		if(p)
        BEQ.N    ??AppS2wCmd_CoapSend_2
// 14484 		{
// 14485 			len = strlen((const char*)p);
          CFI FunCall strlen
        BL       strlen
        MOV      R4,R0
// 14486 			coapConnParams->payloadType = (unsigned char*) gsn_malloc(sizeof(unsigned char)*len+1);
        MOVS     R2,#+0
        MOVW     R1,#+14486
        ADDS     R0,R4,#+1
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        STR      R0,[R6, #+12]
// 14487 			memcpy(coapConnParams->payloadType,p,len);
        MOV      R2,R4
        MOV      R1,R5
          CFI FunCall memcpy
        BL       memcpy
// 14488 			coapConnParams->payloadType[len] = '\0';
        LDR      R0,[R6, #+12]
        MOVS     R1,#+0
        STRB     R1,[R4, R0]
        B.N      ??AppS2wCmd_CoapSend_12
// 14489 		}
// 14490 		else
// 14491 		{
// 14492 			return S2W_EINVAL;
??AppS2wCmd_CoapSend_2:
        MOVS     R0,#+2
??AppS2wCmd_CoapSend_1:
        B.N      ??AppS2wCmd_CoapSend_13
// 14493 		}
// 14494     }
// 14495     else
// 14496     {
// 14497     	numBytes = GsnCoap_Send_And_Recieve(coapContext,coapConnParams);
??AppS2wCmd_CoapSend_11:
        MOV      R1,R6
        MOV      R0,R5
          CFI FunCall GsnCoap_Send_And_Recieve
        BL       GsnCoap_Send_And_Recieve
        SXTH     R4,R0
// 14498 
// 14499     	if(numBytes > 0)
        CMP      R4,#+1
        BLT.N    ??AppS2wCmd_CoapSend_14
// 14500     	{
// 14501     		//S2w_Printf("\r\n%d",numBytes);
// 14502     		respBuf[numBytes] = '\0';
        ADD      R0,SP,#+8
        MOVS     R1,#+0
        STRB     R1,[R4, R0]
// 14503 
// 14504 #ifndef S2W_DUAL_INTERFACE_SUPPORT
// 14505     		S2w_Printf("\r\n");
        BL       ?Subroutine91
// 14506     		AppS2wHal_CharNPut(respBuf,numBytes);
??CrossCallReturnLabel_486:
        MOV      R1,R4
        ADD      R0,SP,#+8
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 14507 #else
// 14508         AppS2wHal_CharNPut1(respBuf,numBytes);
// 14509 #endif
// 14510     	}
// 14511     	if(coapConnParams->uri != NULL)
??AppS2wCmd_CoapSend_14:
        LDR      R0,[R6, #+0]
        CBZ.N    R0,??AppS2wCmd_CoapSend_12
// 14512     	{
// 14513     		gsn_free(coapConnParams->uri);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14514     		coapConnParams->uri = NULL;
        MOVS     R0,#+0
        STR      R0,[R6, #+0]
// 14515     	}
// 14516     }
// 14517     return S2W_SUCCESS;
??AppS2wCmd_CoapSend_12:
        MOVS     R0,#+0
??AppS2wCmd_CoapSend_13:
        ADD      SP,SP,#+1416
          CFI CFA R13+24
        POP      {R4-R8,PC}       ;; return
          CFI EndBlock cfiBlock810
// 14518 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable497:
        DC32     0x17ed1

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "POST">`:
        DC8 "POST"
        DC8 0, 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond811 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_421
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond812 Using cfiCommon0
          CFI (cfiCond812) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond812) Conditional ??CrossCallReturnLabel_420
          CFI (cfiCond812) R4 Frame(CFA, -36)
          CFI (cfiCond812) R5 Frame(CFA, -32)
          CFI (cfiCond812) R6 Frame(CFA, -28)
          CFI (cfiCond812) R7 Frame(CFA, -24)
          CFI (cfiCond812) R8 Frame(CFA, -20)
          CFI (cfiCond812) R9 Frame(CFA, -16)
          CFI (cfiCond812) R10 Frame(CFA, -12)
          CFI (cfiCond812) R11 Frame(CFA, -8)
          CFI (cfiCond812) R14 Frame(CFA, -4)
          CFI (cfiCond812) CFA R13+360
          CFI Block cfiPicker813 Using cfiCommon1
          CFI (cfiPicker813) NoFunction
          CFI (cfiPicker813) Picker
        THUMB
?Subroutine69:
        ADD      R7,R11,#+476
          CFI Block cfiCond814 Using cfiCommon0
          CFI (cfiCond814) Function AppS2wCmd_Ndhcp
          CFI (cfiCond814) Conditional ??CrossCallReturnLabel_419
          CFI (cfiCond814) R4 Frame(CFA, -24)
          CFI (cfiCond814) R5 Frame(CFA, -20)
          CFI (cfiCond814) R6 Frame(CFA, -16)
          CFI (cfiCond814) R7 Frame(CFA, -12)
          CFI (cfiCond814) R8 Frame(CFA, -8)
          CFI (cfiCond814) R14 Frame(CFA, -4)
          CFI (cfiCond814) CFA R13+72
          CFI Block cfiCond815 Using cfiCommon0
          CFI (cfiCond815) Function AppS2wCmd_Ndhcp
          CFI (cfiCond815) Conditional ??CrossCallReturnLabel_418
          CFI (cfiCond815) R4 Frame(CFA, -24)
          CFI (cfiCond815) R5 Frame(CFA, -20)
          CFI (cfiCond815) R6 Frame(CFA, -16)
          CFI (cfiCond815) R7 Frame(CFA, -12)
          CFI (cfiCond815) R8 Frame(CFA, -8)
          CFI (cfiCond815) R14 Frame(CFA, -4)
          CFI (cfiCond815) CFA R13+72
          CFI Block cfiCond816 Using cfiCommon0
          CFI (cfiCond816) Function AppS2wCmd_NcmAuto
          CFI (cfiCond816) Conditional ??CrossCallReturnLabel_417
          CFI (cfiCond816) R4 Frame(CFA, -36)
          CFI (cfiCond816) R5 Frame(CFA, -32)
          CFI (cfiCond816) R6 Frame(CFA, -28)
          CFI (cfiCond816) R7 Frame(CFA, -24)
          CFI (cfiCond816) R8 Frame(CFA, -20)
          CFI (cfiCond816) R9 Frame(CFA, -16)
          CFI (cfiCond816) R10 Frame(CFA, -12)
          CFI (cfiCond816) R11 Frame(CFA, -8)
          CFI (cfiCond816) R14 Frame(CFA, -4)
          CFI (cfiCond816) CFA R13+1344
          CFI Block cfiCond817 Using cfiCommon0
          CFI (cfiCond817) Function AppS2wCmd_CoapSend
          CFI (cfiCond817) Conditional ??CrossCallReturnLabel_416
          CFI (cfiCond817) R4 Frame(CFA, -24)
          CFI (cfiCond817) R5 Frame(CFA, -20)
          CFI (cfiCond817) R6 Frame(CFA, -16)
          CFI (cfiCond817) R7 Frame(CFA, -12)
          CFI (cfiCond817) R8 Frame(CFA, -8)
          CFI (cfiCond817) R14 Frame(CFA, -4)
          CFI (cfiCond817) CFA R13+1440
??Subroutine69_0:
        MOV      R0,R7
          CFI FunCall AppS2wCmd_Wassoc strlen
          CFI FunCall AppS2wCmd_Wassoc_test strlen
          CFI FunCall AppS2wCmd_Ndhcp strlen
          CFI FunCall AppS2wCmd_Ndhcp strlen
          CFI FunCall AppS2wCmd_NcmAuto strlen
          CFI FunCall AppS2wCmd_CoapSend strlen
        B.W      strlen
          CFI EndBlock cfiCond811
          CFI EndBlock cfiCond812
          CFI EndBlock cfiPicker813
          CFI EndBlock cfiCond814
          CFI EndBlock cfiCond815
          CFI EndBlock cfiCond816
          CFI EndBlock cfiCond817

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond818 Using cfiCommon0
          CFI Function AppS2wCmd_CoapSend
          CFI Conditional ??CrossCallReturnLabel_184
          CFI R4 Frame(CFA, -24)
          CFI R5 Frame(CFA, -20)
          CFI R6 Frame(CFA, -16)
          CFI R7 Frame(CFA, -12)
          CFI R8 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+1440
          CFI Block cfiCond819 Using cfiCommon0
          CFI (cfiCond819) Function AppS2wCmd_CoapSend
          CFI (cfiCond819) Conditional ??CrossCallReturnLabel_183
          CFI (cfiCond819) R4 Frame(CFA, -24)
          CFI (cfiCond819) R5 Frame(CFA, -20)
          CFI (cfiCond819) R6 Frame(CFA, -16)
          CFI (cfiCond819) R7 Frame(CFA, -12)
          CFI (cfiCond819) R8 Frame(CFA, -8)
          CFI (cfiCond819) R14 Frame(CFA, -4)
          CFI (cfiCond819) CFA R13+1440
          CFI Block cfiCond820 Using cfiCommon0
          CFI (cfiCond820) Function AppS2wCmd_CoapSend
          CFI (cfiCond820) Conditional ??CrossCallReturnLabel_182
          CFI (cfiCond820) R4 Frame(CFA, -24)
          CFI (cfiCond820) R5 Frame(CFA, -20)
          CFI (cfiCond820) R6 Frame(CFA, -16)
          CFI (cfiCond820) R7 Frame(CFA, -12)
          CFI (cfiCond820) R8 Frame(CFA, -8)
          CFI (cfiCond820) R14 Frame(CFA, -4)
          CFI (cfiCond820) CFA R13+1440
          CFI Block cfiCond821 Using cfiCommon0
          CFI (cfiCond821) Function AppS2wCmd_CoapSend
          CFI (cfiCond821) Conditional ??CrossCallReturnLabel_181
          CFI (cfiCond821) R4 Frame(CFA, -24)
          CFI (cfiCond821) R5 Frame(CFA, -20)
          CFI (cfiCond821) R6 Frame(CFA, -16)
          CFI (cfiCond821) R7 Frame(CFA, -12)
          CFI (cfiCond821) R8 Frame(CFA, -8)
          CFI (cfiCond821) R14 Frame(CFA, -4)
          CFI (cfiCond821) CFA R13+1440
          CFI Block cfiCond822 Using cfiCommon0
          CFI (cfiCond822) Function AppS2wCmd_CoapSend
          CFI (cfiCond822) Conditional ??CrossCallReturnLabel_180
          CFI (cfiCond822) R4 Frame(CFA, -24)
          CFI (cfiCond822) R5 Frame(CFA, -20)
          CFI (cfiCond822) R6 Frame(CFA, -16)
          CFI (cfiCond822) R7 Frame(CFA, -12)
          CFI (cfiCond822) R8 Frame(CFA, -8)
          CFI (cfiCond822) R14 Frame(CFA, -4)
          CFI (cfiCond822) CFA R13+1440
          CFI Block cfiCond823 Using cfiCommon0
          CFI (cfiCond823) Function AppS2wCmd_CoapSend
          CFI (cfiCond823) Conditional ??CrossCallReturnLabel_179
          CFI (cfiCond823) R4 Frame(CFA, -24)
          CFI (cfiCond823) R5 Frame(CFA, -20)
          CFI (cfiCond823) R6 Frame(CFA, -16)
          CFI (cfiCond823) R7 Frame(CFA, -12)
          CFI (cfiCond823) R8 Frame(CFA, -8)
          CFI (cfiCond823) R14 Frame(CFA, -4)
          CFI (cfiCond823) CFA R13+1440
          CFI Block cfiCond824 Using cfiCommon0
          CFI (cfiCond824) Function AppS2wCmd_CoapSend
          CFI (cfiCond824) Conditional ??CrossCallReturnLabel_178
          CFI (cfiCond824) R4 Frame(CFA, -24)
          CFI (cfiCond824) R5 Frame(CFA, -20)
          CFI (cfiCond824) R6 Frame(CFA, -16)
          CFI (cfiCond824) R7 Frame(CFA, -12)
          CFI (cfiCond824) R8 Frame(CFA, -8)
          CFI (cfiCond824) R14 Frame(CFA, -4)
          CFI (cfiCond824) CFA R13+1440
          CFI Block cfiPicker825 Using cfiCommon1
          CFI (cfiPicker825) NoFunction
          CFI (cfiPicker825) Picker
        THUMB
?Subroutine36:
        ADD      R0,SP,#+1020
        ADDS     R0,R0,#+255
        ADDS     R0,R0,#+137
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_CoapSend AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond818
          CFI EndBlock cfiCond819
          CFI EndBlock cfiCond820
          CFI EndBlock cfiCond821
          CFI EndBlock cfiCond822
          CFI EndBlock cfiCond823
          CFI EndBlock cfiCond824
          CFI EndBlock cfiPicker825
// 14519 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock826 Using cfiCommon0
          CFI Function AppS2wCmd_CoapSetOption
        THUMB
// 14520 PRIVATE UINT8
// 14521 AppS2wCmd_CoapSetOption(UINT8* ptr)
// 14522 {
AppS2wCmd_CoapSetOption:
        PUSH     {R0,R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+16
        SUB      SP,SP,#+8
          CFI CFA R13+24
// 14523 	UINT8* p;
// 14524 	UINT8* q;
// 14525 	UINT32 key;
// 14526 	S2W_COAP_OPTION_T* node;
// 14527 	int len = 0;
// 14528 
// 14529 	// parse for option key
// 14530 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 14531 	if(!p)
??CrossCallReturnLabel_142:
        CMP      R0,#+0
        BEQ.N    ??AppS2wCmd_CoapSetOption_0
// 14532 	{
// 14533 		return S2W_EINVAL;
// 14534 	}
// 14535 	AppS2wParse_Int(p,&key);
        BL       ?Subroutine51
// 14536 	if(	key == 1 ||
// 14537 			key == 3 ||
// 14538 			key == 4 ||
// 14539 			key == 5 ||
// 14540 			key == 7 ||
// 14541 			key == 11 ||
// 14542 			key == 12 ||
// 14543 			key == 14 ||
// 14544 			key == 15 ||
// 14545 			key == 16 ||
// 14546 			key == 19 ||
// 14547 			key == 35 )
??CrossCallReturnLabel_267:
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        IT       NE 
        CMPNE    R0,#+3
        BEQ.N    ??AppS2wCmd_CoapSetOption_1
        CMP      R0,#+4
        IT       NE 
        CMPNE    R0,#+5
        BEQ.N    ??AppS2wCmd_CoapSetOption_1
        CMP      R0,#+7
        IT       NE 
        CMPNE    R0,#+11
        BEQ.N    ??AppS2wCmd_CoapSetOption_1
        CMP      R0,#+12
        IT       NE 
        CMPNE    R0,#+14
        BEQ.N    ??AppS2wCmd_CoapSetOption_1
        CMP      R0,#+15
        IT       NE 
        CMPNE    R0,#+16
        BEQ.N    ??AppS2wCmd_CoapSetOption_1
        CMP      R0,#+19
        IT       NE 
        CMPNE    R0,#+35
        BNE.N    ??AppS2wCmd_CoapSetOption_0
// 14548 	{
// 14549 
// 14550 		// parse for option value
// 14551 		q = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_CoapSetOption_1:
        BL       ??Subroutine34_0
??CrossCallReturnLabel_141:
        MOVS     R4,R0
// 14552 		if( q)
        BEQ.N    ??AppS2wCmd_CoapSetOption_0
// 14553 		{
// 14554 			if(key == 19)// if it is token add it by calling
        LDR      R0,[SP, #+0]
        CMP      R0,#+19
        BNE.N    ??AppS2wCmd_CoapSetOption_2
// 14555 			{
// 14556 				GsnCoap_SetToken(strlen((const char*)q),q);
        BL       ?Subroutine70
// 14557 			}
??CrossCallReturnLabel_423:
        MOV      R1,R4
          CFI FunCall GsnCoap_SetToken
        BL       GsnCoap_SetToken
        B.N      ??AppS2wCmd_CoapSetOption_3
// 14558 			else
// 14559 			{
// 14560 				node = (S2W_COAP_OPTION_T*)gsn_malloc(sizeof(S2W_COAP_OPTION_T));
??AppS2wCmd_CoapSetOption_2:
        MOVS     R2,#+0
        MOVW     R1,#+14560
        MOVS     R0,#+12
          CFI FunCall GsnDynMemMgmt_Alloc
        BL       GsnDynMemMgmt_Alloc
        MOV      R5,R0
// 14561 				len = strlen((const char*)q);
        BL       ?Subroutine70
// 14562 				node->optionValue = (char*)gsn_malloc(len+1);
??CrossCallReturnLabel_422:
        MOVS     R2,#+0
        MOVW     R1,#+14562
        BL       ?Subroutine26
??CrossCallReturnLabel_64:
        STR      R0,[R5, #+4]
// 14563 				node->optionKey = key;
// 14564 				strcpy(node->optionValue,(char const*)q);
        MOV      R1,R4
        LDR      R0,[SP, #+0]
        STRB     R0,[R5, #+0]
        LDR      R0,[R5, #+4]
          CFI FunCall strcpy
        BL       strcpy
// 14565 				if(optionHead == NULL)
        LDR.W    R0,??DataTable515_1
        LDR      R1,[R0, #+0]
        CBNZ.N   R1,??AppS2wCmd_CoapSetOption_4
// 14566 				{
// 14567 					optionHead = node;
        STR      R5,[R0, #+0]
// 14568 					node->next = NULL;
        MOVS     R0,#+0
        STR      R0,[R5, #+8]
        B.N      ??AppS2wCmd_CoapSetOption_3
// 14569 				}
// 14570 				else
// 14571 				{
// 14572 					node->next = optionHead;
??AppS2wCmd_CoapSetOption_4:
        STR      R1,[R5, #+8]
// 14573 					optionHead = node;
        STR      R5,[R0, #+0]
// 14574 				}
// 14575 			}
// 14576 			return S2W_SUCCESS;
??AppS2wCmd_CoapSetOption_3:
        MOVS     R0,#+0
        POP      {R1-R5,PC}
// 14577 		}
// 14578 	}
// 14579 	return S2W_EINVAL;
??AppS2wCmd_CoapSetOption_0:
        MOVS     R0,#+2
        POP      {R1-R5,PC}       ;; return
          CFI EndBlock cfiBlock826
// 14580 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable498:
        DC32     profile_params

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable498_1:
        DC32     s2wFlashParams
// 14581 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock827 Using cfiCommon0
          CFI Function AppS2wCmd_CoapRemoveOption
        THUMB
// 14582 PRIVATE UINT8
// 14583 AppS2wCmd_CoapRemoveOption(UINT8* ptr)
// 14584 {
AppS2wCmd_CoapRemoveOption:
        PUSH     {R0,R4-R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI R7 Frame(CFA, -8)
          CFI R6 Frame(CFA, -12)
          CFI R5 Frame(CFA, -16)
          CFI R4 Frame(CFA, -20)
          CFI CFA R13+24
// 14585 	UINT8* p;
// 14586 	UINT32 optionKey;
// 14587 	S2W_COAP_OPTION_T * prev = optionHead;
        LDR.W    R4,??DataTable515_1
        LDR      R6,[R4, #+0]
        SUB      SP,SP,#+8
          CFI CFA R13+32
// 14588 	S2W_COAP_OPTION_T * curr = optionHead;
        MOV      R5,R6
// 14589 	S2W_COAP_OPTION_T * temp = NULL;
// 14590 
// 14591 	// parse for option key
// 14592 	p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 14593 	if(!p)
??CrossCallReturnLabel_140:
        CBNZ.N   R0,??AppS2wCmd_CoapRemoveOption_0
// 14594 	{
// 14595 		return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R7,PC}
// 14596 	}
// 14597 	AppS2wParse_Int(p,&optionKey);
??AppS2wCmd_CoapRemoveOption_0:
        BL       ?Subroutine51
// 14598 	if(	optionKey == 1 ||
// 14599 			optionKey == 3 ||
// 14600 			optionKey == 4 ||
// 14601 			optionKey == 5 ||
// 14602 			optionKey == 7 ||
// 14603 			optionKey == 11 ||
// 14604 			optionKey == 12 ||
// 14605 			optionKey == 14 ||
// 14606 			optionKey == 15 ||
// 14607 			optionKey == 16 ||
// 14608 			optionKey == 19 ||
// 14609 			optionKey == 35 )
??CrossCallReturnLabel_266:
        LDR      R0,[SP, #+0]
        CMP      R0,#+1
        IT       NE 
        CMPNE    R0,#+3
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
        CMP      R0,#+4
        IT       NE 
        CMPNE    R0,#+5
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
        CMP      R0,#+7
        IT       NE 
        CMPNE    R0,#+11
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
        CMP      R0,#+12
        IT       NE 
        CMPNE    R0,#+14
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
        CMP      R0,#+15
        IT       NE 
        CMPNE    R0,#+16
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_1
        CMP      R0,#+19
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_2
        CMP      R0,#+35
        BNE.N    ??AppS2wCmd_CoapRemoveOption_3
// 14610 	{
// 14611 	    // delete the option
// 14612 		if(optionKey == 19)
// 14613 		{
// 14614 			GsnCoap_DeleteToken();
// 14615 		}
// 14616 		else
// 14617 		{
// 14618 			if(optionHead != NULL)
??AppS2wCmd_CoapRemoveOption_1:
        LDR      R0,[R4, #+0]
        CBZ.N    R0,??AppS2wCmd_CoapRemoveOption_3
// 14619 			{
// 14620 				if(prev->next == NULL) // only one node
        LDR      R0,[R6, #+8]
        CBNZ.N   R0,??AppS2wCmd_CoapRemoveOption_4
// 14621 				{
// 14622 					if(prev->optionKey == optionKey)
        LDRB     R0,[R6, #+0]
        LDR      R1,[SP, #+0]
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_CoapRemoveOption_4
// 14623 					{
// 14624 						gsn_free(prev->optionValue);
        LDR      R0,[R6, #+4]
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14625 						gsn_free(prev);
        MOV      R0,R6
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14626 						prev= NULL;
// 14627 						optionHead = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+0]
// 14628 						return S2W_SUCCESS;
        POP      {R1-R7,PC}
// 14629 					}
// 14630 				}
??AppS2wCmd_CoapRemoveOption_2:
          CFI FunCall GsnCoap_DeleteToken
        BL       GsnCoap_DeleteToken
// 14631 				// delete all occurences of the key
// 14632 				while(curr != NULL)
// 14633 				{
// 14634 					if(curr->optionKey == optionKey)
// 14635 					{
// 14636 						temp = curr;
// 14637 						if(prev == curr)
// 14638 						{
// 14639 							// first node in the list
// 14640 							prev = prev->next;
// 14641 							curr = curr->next;
// 14642 							optionHead = curr;
// 14643 						}
// 14644 						else
// 14645 						{
// 14646 							prev->next = curr->next;
// 14647 							curr = curr->next;
// 14648 						}
// 14649 						gsn_free(temp->optionValue);
// 14650 						gsn_free(temp);
// 14651 						temp = NULL;
// 14652 					}
// 14653 					else
// 14654 					{
// 14655 						prev = curr;
// 14656 						curr = curr->next;
// 14657 					}
// 14658 				}
// 14659 			}
// 14660 		}
// 14661 	}
// 14662 
// 14663 	return S2W_SUCCESS;
??AppS2wCmd_CoapRemoveOption_3:
        MOVS     R0,#+0
        POP      {R1-R7,PC}       ;; return
??AppS2wCmd_CoapRemoveOption_5:
        STR      R0,[R6, #+8]
        LDR      R5,[R5, #+8]
??AppS2wCmd_CoapRemoveOption_6:
        LDR      R0,[R7, #+4]
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
        MOV      R0,R7
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
??AppS2wCmd_CoapRemoveOption_4:
        CMP      R5,#+0
        BEQ.N    ??AppS2wCmd_CoapRemoveOption_3
        LDR      R1,[SP, #+0]
        LDRB     R0,[R5, #+0]
        CMP      R0,R1
        BNE.N    ??AppS2wCmd_CoapRemoveOption_7
        LDR      R0,[R5, #+8]
        MOV      R7,R5
        CMP      R6,R5
        BNE.N    ??AppS2wCmd_CoapRemoveOption_5
        LDR      R6,[R6, #+8]
        MOV      R5,R0
        STR      R5,[R4, #+0]
        B.N      ??AppS2wCmd_CoapRemoveOption_6
??AppS2wCmd_CoapRemoveOption_7:
        MOV      R6,R5
        LDR      R5,[R5, #+8]
        B.N      ??AppS2wCmd_CoapRemoveOption_4
          CFI EndBlock cfiBlock827
// 14664 
// 14665 }
// 14666 
// 14667 /**
// 14668  ******************************************************************
// 14669  * @ingroup S2w-Application
// 14670  * @brief Process the coap data from the serial interface.
// 14671  *   This function reads the coap data and sends to wifi.
// 14672  * @param dataLen the input data length.
// 14673  * @param hCid the cid of the coap connection.
// 14674  * @return S2W_SUCCESS - operation successful.
// 14675  * @return S2W_FAILURE - operation Failed.
// 14676  ******************************************************************/
// 14677 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock828 Using cfiCommon0
          CFI Function AppS2wHal_CoapContentDataGet
        THUMB
// 14678 PUBLIC UINT8
// 14679 AppS2wHal_CoapContentDataGet( UINT8 hCid)
// 14680 {
AppS2wHal_CoapContentDataGet:
        PUSH     {R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+12
        SUBW     SP,SP,#+2804
          CFI CFA R13+2816
        MOV      R4,R0
// 14681     GSN_STATUS status = S2W_SUCCESS;
// 14682     GSN_COAP_CONTEXT_T* coapCtx;
// 14683     INT16 numBytes;
// 14684     UINT32 dataLen;
// 14685     char respBuf[COAP_MAX_PDU_SIZE];
// 14686     char requestBuf[COAP_MAX_PDU_SIZE];
// 14687     GSN_COAP_CONN_PARAMS_T *coapConnParams;
// 14688     coapCtx = (GSN_COAP_CONTEXT_T *)AppS2wHal_CoapHandleGet(hCid);
          CFI FunCall AppS2wHal_CoapHandleGet
        BL       AppS2wHal_CoapHandleGet
        MOVS     R5,R0
// 14689 
// 14690     if(coapCtx == NULL)
        IT       EQ 
        MOVEQ    R0,#+1
// 14691     {
// 14692     	  return S2W_FAILURE;
        BEQ.N    ??AppS2wHal_CoapContentDataGet_0
// 14693     }
// 14694     coapConnParams = (GSN_COAP_CONN_PARAMS_T*)AppS2wHal_CoapParamsGet(hCid);
        MOV      R0,R4
          CFI FunCall AppS2wHal_CoapParamsGet
        BL       AppS2wHal_CoapParamsGet
        MOV      R4,R0
// 14695     dataLen = coapConnParams->payloadSize;
// 14696 
// 14697 	AppS2wHal_CharNGet((UINT8 *)requestBuf,dataLen);
        ADD      R0,SP,#+0
        LDR      R1,[R4, #+16]
          CFI FunCall AppS2wHal_CharNGet
        BL       AppS2wHal_CharNGet
// 14698 
// 14699 	coapConnParams->payload = requestBuf;
        ADD      R0,SP,#+0
        STR      R0,[R4, #+8]
// 14700 	//S2w_Printf("coapConnParams->payload = %s\r\n",requestBuf);
// 14701 	coapConnParams->responseBufLen = COAP_MAX_PDU_SIZE;
// 14702 	coapConnParams->responseBuffer = respBuf;
// 14703 	numBytes = GsnCoap_Send_And_Recieve(coapCtx,coapConnParams);
        MOV      R1,R4
        MOV      R0,#+1400
        STR      R0,[R4, #+32]
        ADD      R0,SP,#+1400
        STR      R0,[R4, #+28]
        MOV      R0,R5
          CFI FunCall GsnCoap_Send_And_Recieve
        BL       GsnCoap_Send_And_Recieve
        SXTH     R5,R0
// 14704 	// set the payload
// 14705 	// call send
// 14706 
// 14707 	if(numBytes > 0)
        CMP      R5,#+1
        BLT.N    ??AppS2wHal_CoapContentDataGet_1
// 14708 	{
// 14709 		respBuf[numBytes] = '\0';
        ADD      R0,SP,#+1400
        MOVS     R1,#+0
        STRB     R1,[R5, R0]
// 14710 
// 14711 #ifndef S2W_DUAL_INTERFACE_SUPPORT
// 14712 		S2w_Printf("\r\n");
        BL       ?Subroutine91
// 14713 		AppS2wHal_CharNPut(respBuf,numBytes);
??CrossCallReturnLabel_485:
        MOV      R1,R5
        ADD      R0,SP,#+1400
          CFI FunCall AppS2wHal_CharNPut
        BL       AppS2wHal_CharNPut
// 14714 #else
// 14715 		AppS2wHal_CharNPut1(respBuf,numBytes);
// 14716 #endif
// 14717 	}
// 14718 	if(coapConnParams->uri != NULL)
??AppS2wHal_CoapContentDataGet_1:
        LDR      R0,[R4, #+0]
        CBZ.N    R0,??AppS2wHal_CoapContentDataGet_2
// 14719 	{
// 14720 		gsn_free(coapConnParams->uri);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14721 		coapConnParams->uri = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+0]
// 14722 	}
// 14723 
// 14724 	if(coapConnParams->payloadType != NULL)
??AppS2wHal_CoapContentDataGet_2:
        LDR      R0,[R4, #+12]
        CBZ.N    R0,??AppS2wHal_CoapContentDataGet_3
// 14725 	{
// 14726 		gsn_free(coapConnParams->payloadType);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14727 		coapConnParams->payloadType = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+12]
// 14728 	}
// 14729 	if(coapConnParams->payload != NULL)
??AppS2wHal_CoapContentDataGet_3:
        LDR      R0,[R4, #+8]
        CBZ.N    R0,??AppS2wHal_CoapContentDataGet_4
// 14730 	{
// 14731 		gsn_free(coapConnParams->payload);
          CFI FunCall GsnDynMemMgmt_Free
        BL       GsnDynMemMgmt_Free
// 14732 		coapConnParams->payload = NULL;
        MOVS     R0,#+0
        STR      R0,[R4, #+8]
// 14733 	}
// 14734 #ifndef S2W_DUAL_INTERFACE_SUPPORT
// 14735     if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
??AppS2wHal_CoapContentDataGet_4:
        MOVW     R0,#+27384
        LDR.W    R1,??DataTable515_3
        LDR      R1,[R1, #+0]
        LDRB     R0,[R0, R1]
        CMP      R0,#+2
        IT       EQ 
          CFI FunCall s2wSpiFs_Flush
        BLEQ     s2wSpiFs_Flush
// 14736     {
// 14737         s2wSpiFs_Flush();
// 14738     }
// 14739 #else
// 14740     if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
// 14741     {
// 14742         s2wSpiFs_Flush1();
// 14743     }
// 14744 #endif
// 14745    return status;
        MOVS     R0,#+0
??AppS2wHal_CoapContentDataGet_0:
        ADDW     SP,SP,#+2804
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock828
// 14746 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500:
        DC8      "GET"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_1:
        DC32     s2wIsAutoconnected

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_2:
        DC8      "CON"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_3:
        DC8      "NON"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_4:
        DC32     curCid

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_5:
        DC32     s2wState

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable500_6:
        DC32     s2wAutoExit_CB
// 14747 #endif
// 14748 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock829 Using cfiCommon0
          CFI Function AppS2wCmd_BaBitMapSet
        THUMB
// 14749 UINT8
// 14750 AppS2wCmd_BaBitMapSet(UINT8* ptr)
// 14751 {
AppS2wCmd_BaBitMapSet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 14752 	UINT32 param;
// 14753 	GSN_WDD_ALLOW_BA_BITMAP_SET_PARAM baBitmapSetParam = {0};
        ADR.W    R0,`?<Constant {0}>_4`
        LDR      R0,[R0, #+0]
        SUB      SP,SP,#+8
          CFI CFA R13+16
        BL       ?Subroutine34
// 14754     UINT8 *p, status = S2W_EINVAL;
// 14755     p = AppS2wParse_NextParamGet(&ptr);  /*BA TX TID */
// 14756     if (!p)
??CrossCallReturnLabel_157:
        CBZ.N    R0,??AppS2wCmd_BaBitMapSet_0
// 14757     {
// 14758         return S2W_EINVAL;
// 14759     }
// 14760     status = AppS2wParse_Int(p, &param);
// 14761     if(status != GSN_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_265:
        CBNZ.N   R0,??AppS2wCmd_BaBitMapSet_0
// 14762     {
// 14763         return S2W_EINVAL;
// 14764     }
// 14765 	baBitmapSetParam.ba_tx_tid = param;
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+4]
// 14766 
// 14767     p = AppS2wParse_NextParamGet(&ptr);  /*BA RX TID */
        BL       ??Subroutine34_0
// 14768     if (!p)
??CrossCallReturnLabel_139:
        CBZ.N    R0,??AppS2wCmd_BaBitMapSet_0
// 14769     {
// 14770         return S2W_EINVAL;
// 14771     }
// 14772     status = AppS2wParse_Int(p, &param);
// 14773     if(status != GSN_SUCCESS)
        BL       ?Subroutine51
??CrossCallReturnLabel_264:
        CBZ.N    R0,??AppS2wCmd_BaBitMapSet_1
// 14774     {
// 14775         return S2W_EINVAL;
??AppS2wCmd_BaBitMapSet_0:
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 14776     }
// 14777 	baBitmapSetParam.ba_rx_tid = param;
??AppS2wCmd_BaBitMapSet_1:
        LDR      R0,[SP, #+0]
        STRH     R0,[SP, #+6]
// 14778     
// 14779 	GsnWdd_BlockAckEnable(&s2wappMainTaskCtxt->if0.wddCtx, &baBitmapSetParam);
        ADD      R1,SP,#+4
        BL       ?Subroutine74
??CrossCallReturnLabel_440:
          CFI FunCall GsnWdd_BlockAckEnable
        BL       GsnWdd_BlockAckEnable
// 14780     
// 14781     return S2W_SUCCESS;
        MOVS     R0,#+0
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock829
// 14782 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant {0}>_4`:
        DC16 0
        DC8 0, 0
// 14783 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock830 Using cfiCommon0
          CFI Function AppS2wCmd_RadioStateGet
        THUMB
// 14784 UINT8
// 14785 AppS2wCmd_RadioStateGet(UINT8* ptr)
// 14786 {
AppS2wCmd_RadioStateGet:
        PUSH     {R4,R5,LR}
          CFI R14 Frame(CFA, -4)
          CFI R5 Frame(CFA, -8)
          CFI R4 Frame(CFA, -12)
          CFI CFA R13+12
        SUB      SP,SP,#+44
          CFI CFA R13+56
// 14787 	UINT32 radioState = 0;
        MOVS     R0,#+0
        STR      R0,[SP, #+0]
// 14788 	UINT8 *radStStr[]= {"", "Active", "PS Poll", "OFF"};
        MOVS     R2,#+16
        ADD      R0,SP,#+28
        ADR.W    R1,`?<Constant {&"", &"Active", &"PS Poll", &"OFF"`
          CFI FunCall __aeabi_memcpy4
        BL       __aeabi_memcpy4
// 14789 	GSN_WDD_RADIO_MODE_INFO_T radioStateInfo;
// 14790 	GsnWdd_RadioStateGet(&s2wappMainTaskCtxt->if0.wddCtx, &radioState);
        LDR.W    R4,??DataTable515_3
        LDR      R0,[R4, #+0]
        ADD      R1,SP,#+0
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_RadioStateGet
        BL       GsnWdd_RadioStateGet
// 14791 
// 14792 	S2w_Printf("\r\nWLAN Radio State = %d : %s\r\n", radioState, radStStr[radioState]);
        ADD      R5,SP,#+28
        LDR      R0,[SP, #+0]
        LDR      R2,[R5, R0, LSL #+2]
        MOV      R1,R0
        ADR.W    R0,`?<Constant "\\r\\nWLAN Radio State = ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14793 
// 14794 	GsnWdd_RadioModeInfoGet(&s2wappMainTaskCtxt->if0.wddCtx, &radioStateInfo);
        LDR      R0,[R4, #+0]
        ADD      R1,SP,#+4
        ADD      R0,R0,#+3808
          CFI FunCall GsnWdd_RadioModeInfoGet
        BL       GsnWdd_RadioModeInfoGet
// 14795 	
// 14796 	S2w_Printf("\r\nAPP Radio State Counters:\r\n");
        ADR.W    R0,`?<Constant "\\r\\nAPP Radio State Cou...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14797 	S2w_Printf("rxActiveReqCnt = %d\r\n", radioStateInfo.rxActiveReqCnt);
        LDRB     R1,[SP, #+4]
        ADR.W    R0,`?<Constant "rxActiveReqCnt = %d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14798 	S2w_Printf("rxPSPollReqCnt = %d\r\n", radioStateInfo.rxPSPollReqCnt);
        LDRB     R1,[SP, #+5]
        ADR.W    R0,`?<Constant "rxPSPollReqCnt = %d\\r\\n">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14799 	S2w_Printf("rxPSPollCfgSetFlag = %d\r\n", radioStateInfo.rxPSPollCfgSetFlag);
        LDRB     R1,[SP, #+6]
        ADR.W    R0,`?<Constant "rxPSPollCfgSetFlag = ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14800 	S2w_Printf("rxIeeePSPollCfgSetFlag = %d\r\n", radioStateInfo.rxIeeePSPollCfgSetFlag);
        LDRB     R1,[SP, #+7]
        ADR.W    R0,`?<Constant "rxIeeePSPollCfgSetFla...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14801 	S2w_Printf("rxIeeePSPollReqCnt = %d\r\n", radioStateInfo.rxIeeePSPollReqCnt);
        LDRB     R1,[SP, #+8]
        ADR.W    R0,`?<Constant "rxIeeePSPollReqCnt = ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14802 	S2w_Printf("lastPsStateReqsted = %d : %s\r\n", radioStateInfo.lastPsStateReqsted,
// 14803 													radStStr[radioStateInfo.lastPsStateReqsted]);
        LDRB     R1,[SP, #+9]
        LDR      R2,[R5, R1, LSL #+2]
        ADR.W    R0,`?<Constant "lastPsStateReqsted = ...">`
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14804 	
// 14805     return S2W_SUCCESS;
        MOVS     R0,#+0
        ADD      SP,SP,#+44
          CFI CFA R13+12
        POP      {R4,R5,PC}       ;; return
          CFI EndBlock cfiBlock830
// 14806 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable501:
        DC32     0xe03003f0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant {&"", &"Active", &"PS Poll", &"OFF"`:
        DC32 `?<Constant "">`, `?<Constant "Active">`, `?<Constant "PS Poll">`
        DC32 `?<Constant "OFF">`

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nWLAN Radio State = ...">`:
        DC8 "\015\012WLAN Radio State = %d : %s\015\012"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\r\\nAPP Radio State Cou...">`:
        DC8 "\015\012APP Radio State Counters:\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "rxActiveReqCnt = %d\\r\\n">`:
        DC8 "rxActiveReqCnt = %d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "rxPSPollReqCnt = %d\\r\\n">`:
        DC8 "rxPSPollReqCnt = %d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "rxPSPollCfgSetFlag = ...">`:
        DC8 "rxPSPollCfgSetFlag = %d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "rxIeeePSPollCfgSetFla...">`:
        DC8 "rxIeeePSPollCfgSetFlag = %d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "rxIeeePSPollReqCnt = ...">`:
        DC8 "rxIeeePSPollReqCnt = %d\015\012"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "lastPsStateReqsted = ...">`:
        DC8 "lastPsStateReqsted = %d : %s\015\012"
        DC8 0
// 14807 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock831 Using cfiCommon0
          CFI Function App_ClkTuneCmd
        THUMB
// 14808 UINT8 App_ClkTuneCmd(UINT8 *ptr)
// 14809 {
App_ClkTuneCmd:
        PUSH     {R0,R4-R6,LR}
          CFI R14 Frame(CFA, -4)
          CFI R6 Frame(CFA, -8)
          CFI R5 Frame(CFA, -12)
          CFI R4 Frame(CFA, -16)
          CFI CFA R13+20
        SUB      SP,SP,#+28
          CFI CFA R13+48
// 14810     UINT8  *p;
// 14811     UINT32 start, period;
// 14812    
// 14813     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine42
// 14814     if(!p)
??CrossCallReturnLabel_229:
        CBZ.N    R0,??App_ClkTuneCmd_0
// 14815     {
// 14816         return S2W_FAILURE;
// 14817     }
// 14818     AppS2wParse_Int(p, &start);
        BL       ?Subroutine56
// 14819     if(start > 1)
??CrossCallReturnLabel_355:
        LDR      R0,[SP, #+20]
        CMP      R0,#+2
        BCS.N    ??App_ClkTuneCmd_1
// 14820     {
// 14821         return S2W_EINVAL;
// 14822     }
// 14823     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine42
// 14824     if(!p)
??CrossCallReturnLabel_228:
        CBNZ.N   R0,??App_ClkTuneCmd_2
// 14825     {
// 14826         return S2W_EINVAL;
??App_ClkTuneCmd_1:
        MOVS     R0,#+2
        B.N      ??App_ClkTuneCmd_3
// 14827     }
// 14828     if(AppS2wParse_Int(p, &period) != S2W_SUCCESS)
??App_ClkTuneCmd_2:
        BL       ?Subroutine54
??CrossCallReturnLabel_342:
        CBZ.N    R0,??App_ClkTuneCmd_4
// 14829     {
// 14830         return S2W_FAILURE;
??App_ClkTuneCmd_0:
        MOVS     R0,#+1
        B.N      ??App_ClkTuneCmd_3
// 14831     }
// 14832     if(start == TRUE)
??App_ClkTuneCmd_4:
        LDR      R0,[SP, #+20]
        LDR.W    R5,??DataTable515_4
        LDR.W    R6,??DataTable515_5
        MOVW     R4,#+33176
        CMP      R0,#+1
        BNE.N    ??App_ClkTuneCmd_5
// 14833     {
// 14834         s2wCurrent.clkCalibEn = TRUE;
        STRB     R0,[R6, #+937]
// 14835         s2wCurrent.clkCalibPeriod = period;
// 14836         appCtx.clkCaibTmrHndl = GsnSoftTmr_Start(&appCtx.clkCaibTmr, GSN_SOFT_TMR_PERIODIC, 0, SEC_TO_SYSTIME(period), AppS2w_ClkCalibCb, NULL);
        MOVS     R1,#+0
        LDR      R0,[SP, #+16]
        STR      R0,[R6, #+940]
        MOV      R3,R1
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        MOVS     R2,#+0
        LDR.W    R0,??DataTable515_6
        STR      R0,[SP, #+8]
        LDR      R0,[SP, #+16]
        LSLS     R0,R0,#+15
        STRD     R0,R1,[SP, #+0]
        ADD      R0,R5,#+33024
        MOVS     R1,#+1
        ADDS     R0,R0,#+120
          CFI FunCall GsnSoftTmr_Start
        BL       GsnSoftTmr_Start
        STR      R0,[R4, R5]
        B.N      ??App_ClkTuneCmd_6
// 14837     }
// 14838     else
// 14839     {
// 14840         if(appCtx.clkCaibTmrHndl != NULL)
??App_ClkTuneCmd_5:
        LDR      R0,[R4, R5]
        CBZ.N    R0,??App_ClkTuneCmd_7
// 14841         {
// 14842             GsnSoftTmr_Stop(appCtx.clkCaibTmrHndl);
          CFI FunCall GsnSoftTmr_Stop
        BL       GsnSoftTmr_Stop
// 14843         }
// 14844         s2wCurrent.clkCalibEn = FALSE;
??App_ClkTuneCmd_7:
        MOVS     R0,#+0
        STRB     R0,[R6, #+937]
// 14845     }
// 14846     return S2W_SUCCESS;
??App_ClkTuneCmd_6:
        MOVS     R0,#+0
??App_ClkTuneCmd_3:
        ADD      SP,SP,#+32
          CFI CFA R13+16
        POP      {R4-R6,PC}       ;; return
          CFI EndBlock cfiBlock831
// 14847 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond832 Using cfiCommon0
          CFI Function AppS2wCmd_BaudRate
          CFI Conditional ??CrossCallReturnLabel_233
          CFI R4 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+40
          CFI Block cfiCond833 Using cfiCommon0
          CFI (cfiCond833) Function AppS2wCmd_BaudRate
          CFI (cfiCond833) Conditional ??CrossCallReturnLabel_232
          CFI (cfiCond833) R4 Frame(CFA, -8)
          CFI (cfiCond833) R14 Frame(CFA, -4)
          CFI (cfiCond833) CFA R13+40
          CFI Block cfiCond834 Using cfiCommon0
          CFI (cfiCond834) Function AppS2wCmd_BaudRate
          CFI (cfiCond834) Conditional ??CrossCallReturnLabel_231
          CFI (cfiCond834) R4 Frame(CFA, -8)
          CFI (cfiCond834) R14 Frame(CFA, -4)
          CFI (cfiCond834) CFA R13+40
          CFI Block cfiCond835 Using cfiCommon0
          CFI (cfiCond835) Function AppS2wCmd_BaudRate
          CFI (cfiCond835) Conditional ??CrossCallReturnLabel_230
          CFI (cfiCond835) R4 Frame(CFA, -8)
          CFI (cfiCond835) R14 Frame(CFA, -4)
          CFI (cfiCond835) CFA R13+40
          CFI Block cfiCond836 Using cfiCommon0
          CFI (cfiCond836) Function App_ClkTuneCmd
          CFI (cfiCond836) Conditional ??CrossCallReturnLabel_229
          CFI (cfiCond836) R4 Frame(CFA, -16)
          CFI (cfiCond836) R5 Frame(CFA, -12)
          CFI (cfiCond836) R6 Frame(CFA, -8)
          CFI (cfiCond836) R14 Frame(CFA, -4)
          CFI (cfiCond836) CFA R13+48
          CFI Block cfiCond837 Using cfiCommon0
          CFI (cfiCond837) Function App_ClkTuneCmd
          CFI (cfiCond837) Conditional ??CrossCallReturnLabel_228
          CFI (cfiCond837) R4 Frame(CFA, -16)
          CFI (cfiCond837) R5 Frame(CFA, -12)
          CFI (cfiCond837) R6 Frame(CFA, -8)
          CFI (cfiCond837) R14 Frame(CFA, -4)
          CFI (cfiCond837) CFA R13+48
          CFI Block cfiPicker838 Using cfiCommon1
          CFI (cfiPicker838) NoFunction
          CFI (cfiPicker838) Picker
        THUMB
?Subroutine42:
        ADD      R0,SP,#+28
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_NextParamGet
          CFI FunCall AppS2wCmd_BaudRate AppS2wParse_NextParamGet
          CFI FunCall App_ClkTuneCmd AppS2wParse_NextParamGet
          CFI FunCall App_ClkTuneCmd AppS2wParse_NextParamGet
        B.W      AppS2wParse_NextParamGet
          CFI EndBlock cfiCond832
          CFI EndBlock cfiCond833
          CFI EndBlock cfiCond834
          CFI EndBlock cfiCond835
          CFI EndBlock cfiCond836
          CFI EndBlock cfiCond837
          CFI EndBlock cfiPicker838
// 14848 
// 14849 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock839 Using cfiCommon0
          CFI Function AppS2wCmd_Hibernate
        THUMB
// 14850 UINT8
// 14851 AppS2wCmd_Hibernate(UINT8 *ptr)
// 14852 {
AppS2wCmd_Hibernate:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 14853     UINT8 status;
// 14854     S2W_ALARM_INFO_T alarm;
// 14855     UINT8 *p;
// 14856     memset(&alarm,0,sizeof(S2W_ALARM_INFO_T));
        BL       ?Subroutine9
// 14857     p = AppS2wParse_NextParamGet(&ptr);
??CrossCallReturnLabel_12:
        BL       ??Subroutine34_0
// 14858     if (!p)
??CrossCallReturnLabel_138:
        CBNZ.N   R0,??AppS2wCmd_Hibernate_0
// 14859     {
// 14860         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 14861     }
// 14862     if (*p != '\0')
??AppS2wCmd_Hibernate_0:
        LDRB     R1,[R0, #+0]
        CBZ.N    R1,??AppS2wCmd_Hibernate_1
// 14863     {
// 14864         status = AppS2wParse_Boolean(p, &(alarm.alarm1Pol));
        BL       ?Subroutine59
// 14865         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_366:
        CBNZ.N   R0,??AppS2wCmd_Hibernate_2
// 14866         {
// 14867             return status;
// 14868         }
// 14869         alarm.alarm1Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+0]
// 14870     }
// 14871     p = AppS2wParse_NextParamGet(&ptr);
??AppS2wCmd_Hibernate_1:
        BL       ??Subroutine34_0
// 14872     if (p)
??CrossCallReturnLabel_137:
        CMP      R0,#+0
        ITT      NE 
        LDRBNE   R1,[R0, #+0]
        CMPNE    R1,#+0
// 14873     {
// 14874         if (*p != '\0')
        BEQ.N    ??AppS2wCmd_Hibernate_3
// 14875         {
// 14876             status = AppS2wParse_Boolean(p, &(alarm.alarm2Pol));
        BL       ?Subroutine61
// 14877             if (status != S2W_SUCCESS)
??CrossCallReturnLabel_386:
        CBNZ.N   R0,??AppS2wCmd_Hibernate_2
// 14878             {
// 14879                 return status;
// 14880             }
// 14881             alarm.alarm2Valid = 1;
        MOVS     R0,#+1
        STRB     R0,[SP, #+2]
// 14882         }
// 14883     }
// 14884 
// 14885     AppS2wHal_PsHibernateRequest(&alarm);
??AppS2wCmd_Hibernate_3:
        ADD      R0,SP,#+0
          CFI FunCall AppS2wHal_PsHibernateRequest
        BL       AppS2wHal_PsHibernateRequest
// 14886     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_Hibernate_2:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock839
// 14887 
// 14888 }
// 14889 
// 14890 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock840 Using cfiCommon0
          CFI Function AppS2wCmd_TempGet
        THUMB
// 14891 UINT8 
// 14892 AppS2wCmd_TempGet(UINT8 *ptr)
// 14893 {
AppS2wCmd_TempGet:
        PUSH     {R0,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
        SUB      SP,SP,#+8
          CFI CFA R13+16
// 14894     INT32 temp;
// 14895     UINT8 wlanTemp, *p, cpu, status;
// 14896     p = AppS2wParse_NextParamGet(&ptr);
        BL       ??Subroutine34_0
// 14897     if (!p)
??CrossCallReturnLabel_136:
        CBNZ.N   R0,??AppS2wCmd_TempGet_0
// 14898     {
// 14899         return S2W_EINVAL;
        MOVS     R0,#+2
        POP      {R1-R3,PC}
// 14900     }
// 14901     status = AppS2wParse_Boolean(p, &cpu);
??AppS2wCmd_TempGet_0:
        BL       ?Subroutine60
// 14902     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_370:
        CBNZ.N   R0,??AppS2wCmd_TempGet_1
// 14903     {
// 14904         return status;
// 14905     }
// 14906     if(cpu)
        LDRB     R0,[SP, #+0]
        CBZ.N    R0,??AppS2wCmd_TempGet_2
// 14907     {
// 14908         GsnSysCtl_DieTempGet(&appCtx.sysCtlCtx, &wlanTemp);
        ADD      R1,SP,#+1
        LDR.W    R0,??DataTable515_7
          CFI FunCall GsnSysCtl_DieTempGet
        BL       GsnSysCtl_DieTempGet
// 14909         S2w_Printf("\n\rWLAN:%d", wlanTemp);
        LDRB     R1,[SP, #+1]
        ADR.W    R0,`?<Constant "\\n\\rWLAN:%d">`
        B.N      ??AppS2wCmd_TempGet_3
// 14910     }
// 14911     else
// 14912     {
// 14913         temp = GsnIntTempSen_Get();
??AppS2wCmd_TempGet_2:
          CFI FunCall GsnIntTempSen_Get
        BL       GsnIntTempSen_Get
// 14914         S2w_Printf("\n\rAPP:%d", temp);
        MOV      R1,R0
        ADR.W    R0,`?<Constant "\\n\\rAPP:%d">`
??AppS2wCmd_TempGet_3:
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 14915     }
// 14916     
// 14917     return S2W_SUCCESS;
        MOVS     R0,#+0
??AppS2wCmd_TempGet_1:
        POP      {R1-R3,PC}       ;; return
          CFI EndBlock cfiBlock840
// 14918 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable503:
        DC32     0x1e8481

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable503_1:
        DC32     0x186a0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rWLAN:%d">`:
        DC8 "\012\015WLAN:%d"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "\\n\\rAPP:%d">`:
        DC8 "\012\015APP:%d"
        DC8 0, 0, 0
// 14919 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock841 Using cfiCommon0
          CFI Function AppS2wCmd_TempReadStart
        THUMB
// 14920 UINT8 
// 14921 AppS2wCmd_TempReadStart(UINT8 *ptr)
// 14922 {
AppS2wCmd_TempReadStart:
        PUSH     {R0,R4,LR}
          CFI R14 Frame(CFA, -4)
          CFI R4 Frame(CFA, -8)
          CFI CFA R13+12
        SUB      SP,SP,#+12
          CFI CFA R13+24
// 14923     UINT8 *p, status, enable;
// 14924     UINT32 period;
// 14925     
// 14926     p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 14927     if (!p)
??CrossCallReturnLabel_202:
        CBZ.N    R0,??AppS2wCmd_TempReadStart_0
// 14928     {
// 14929         return S2W_EINVAL;
// 14930     }
// 14931     status = AppS2wParse_Boolean(p, &enable);
        BL       ?Subroutine62
// 14932     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_389:
        CBNZ.N   R0,??AppS2wCmd_TempReadStart_1
// 14933     {
// 14934         return status;
// 14935     }
// 14936 
// 14937     if(enable)
        LDRB     R0,[SP, #+4]
        LDR.W    R4,??DataTable515_7
        CBZ.N    R0,??AppS2wCmd_TempReadStart_2
// 14938     {
// 14939         p = AppS2wParse_NextParamGet(&ptr);
        BL       ?Subroutine39
// 14940         if (!p)
??CrossCallReturnLabel_201:
        CBNZ.N   R0,??AppS2wCmd_TempReadStart_3
// 14941         {
// 14942             return S2W_EINVAL;
??AppS2wCmd_TempReadStart_0:
        MOVS     R0,#+2
        B.N      ??AppS2wCmd_TempReadStart_1
// 14943         }
// 14944 
// 14945         status = AppS2wParse_Int(p, &period);
??AppS2wCmd_TempReadStart_3:
        BL       ?Subroutine51
// 14946         if (status != S2W_SUCCESS)
??CrossCallReturnLabel_263:
        CBNZ.N   R0,??AppS2wCmd_TempReadStart_1
// 14947         {
// 14948             return status;
// 14949         }
// 14950         GsnSysCtl_DieTempSendTimerStart(&appCtx.sysCtlCtx, period);
        LDR      R1,[SP, #+0]
        MOV      R0,R4
          CFI FunCall GsnSysCtl_DieTempSendTimerStart
        BL       GsnSysCtl_DieTempSendTimerStart
        B.N      ??AppS2wCmd_TempReadStart_4
// 14951     }
// 14952     else
// 14953     {
// 14954         GsnSysCtl_DieTempSendTimerStop(&appCtx.sysCtlCtx);
??AppS2wCmd_TempReadStart_2:
        MOV      R0,R4
          CFI FunCall GsnSysCtl_DieTempSendTimerStop
        BL       GsnSysCtl_DieTempSendTimerStop
// 14955     }
// 14956     return S2W_SUCCESS;
??AppS2wCmd_TempReadStart_4:
        MOVS     R0,#+0
??AppS2wCmd_TempReadStart_1:
        ADD      SP,SP,#+16
          CFI CFA R13+8
        POP      {R4,PC}          ;; return
          CFI EndBlock cfiBlock841
// 14957 }

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable504:
        DC32     app_adc_data

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable504_1:
        DC32     extFlashFileSize
// 14958 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock842 Using cfiCommon0
          CFI Function AppS2wCmd_OtaFwupRollBack
        THUMB
// 14959 UINT8
// 14960 AppS2wCmd_OtaFwupRollBack(UINT8* ptr)
// 14961 {
AppS2wCmd_OtaFwupRollBack:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 14962     if(GsnFwup_RollBackOtafu() == GSN_SUCCESS)
          CFI FunCall GsnFwup_RollBackOtafu
        BL       GsnFwup_RollBackOtafu
        CBNZ.N   R0,??AppS2wCmd_OtaFwupRollBack_0
// 14963     {
// 14964         GsnSys_Reset((GSN_RESET_REASON_T)0);
        B.W      ?Subroutine2
// 14965     }
// 14966     else
// 14967     {
// 14968         return S2W_FAILURE;
??AppS2wCmd_OtaFwupRollBack_0:
        MOVS     R0,#+1
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock842
// 14969     }
// 14970     return S2W_SUCCESS;
// 14971 }
// 14972 
// 14973 
// 14974 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock843 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc_test
        THUMB
// 14975 UINT8
// 14976 AppS2wCmd_Wassoc_test(UINT8 *ptr)
// 14977 {
AppS2wCmd_Wassoc_test:
        PUSH     {R4-R11,LR}
          CFI R14 Frame(CFA, -4)
          CFI R11 Frame(CFA, -8)
          CFI R10 Frame(CFA, -12)
          CFI R9 Frame(CFA, -16)
          CFI R8 Frame(CFA, -20)
          CFI R7 Frame(CFA, -24)
          CFI R6 Frame(CFA, -28)
          CFI R5 Frame(CFA, -32)
          CFI R4 Frame(CFA, -36)
          CFI CFA R13+36
        SUB      SP,SP,#+324
          CFI CFA R13+360
        BL       ?Subroutine28
// 14978     S2W_WLANDATA_T params;
// 14979 #ifndef S2W_IP2WIFI_SUPPORT
// 14980     GSN_NWIF_DHCP_PARAMS_T dhcpParams;
// 14981     GSN_NWIF_IP_CONFIG_T ipConfig;
// 14982 #endif
// 14983 #ifdef S2W_IPv6_SUPPORT
// 14984     GSN_NWIF_DHCP_PARAMS_T dhcpv6Params;
// 14985     GSN_NWIF_IPv6_CONFIG_T userIpv6Config;
// 14986 
// 14987 
// 14988 #endif
// 14989     INT32  index;
// 14990 	UINT8 mac[6],macStr[25];
// 14991 
// 14992     UINT32 status;
// 14993     GSN_WDD_CONNECT_FLAG_T conctflags=GSN_WDD_CONNECT_FLAG_NONE;
// 14994     GSN_STATUS retVal = GSN_SUCCESS;
// 14995     UINT8 eapFastRetryCnt = 0;
// 14996     memset(&params, 0, sizeof(params));
??CrossCallReturnLabel_74:
        BL       ?Subroutine99
// 14997     globalUseHRssi = 0;
// 14998 	L3ConnectStatus=0;
// 14999         L3ConnectStatus_v6=0;
// 15000     /* check the validity of the parameters passed
// 15001      */
// 15002     status = AppS2wParse_Wcmd(ptr, &params, pwc_assoc);
// 15003     if (status != S2W_SUCCESS)
??CrossCallReturnLabel_511:
        CMP      R0,#+0
        BNE.W    ??AppS2wCmd_Wassoc_test_0
// 15004     {
// 15005         return status;
// 15006     }
// 15007 #ifdef S2W_SECURITY_WPS_ENABLE
// 15008     wpsConnDone = FALSE;
        BL       ?Subroutine20
// 15009 #endif
// 15010     if ((s2wLinkState != S2W_LINK_STATE_DISCONNECTED) || (GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE))
??CrossCallReturnLabel_45:
        CBNZ.N   R0,??AppS2wCmd_Wassoc_test_1
        BL       ?Subroutine120
??CrossCallReturnLabel_574:
        CMP      R0,#+1
        BNE.N    ??CrossCallReturnLabel_586
// 15011     {
// 15012         //S2w_Debug("disconnecting\n\n");
// 15013 		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
// 15014 						   GSN_SOFT_TMR_ONESHOT,0,
// 15015 							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
// 15016 						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
??AppS2wCmd_Wassoc_test_1:
        BL       ?Subroutine5
??CrossCallReturnLabel_4:
        BL       ?Subroutine121
// 15017         retVal = AppS2wHal_Disassociate(0);
// 15018 		GsnSoftTmr_Stop(s2wappMainTaskCtxt->wlanRespHndl);
??CrossCallReturnLabel_580:
        BL       ?Subroutine110
// 15019 #ifndef S2W_IP2WIFI_SUPPORT
// 15020         if(retVal != GSN_FAILURE)
// 15021         {
// 15022             GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
??CrossCallReturnLabel_544:
        BL       ?Subroutine123
// 15023 		}
// 15024 #endif
// 15025     }
// 15026 
// 15027     /* Copy the mode.
// 15028      */
// 15029     params.mode = s2wCurrent.mode;
??CrossCallReturnLabel_586:
        BL       ?Subroutine17
// 15030     /* execute the wdd part for connection
// 15031      */
// 15032 
// 15033         GSN_WDD_WLAN_CFG_T *pWlanConfig;
// 15034       //  GsnOsal_SemCreate  ( &s2wConnectSemaphore, 0 );
// 15035         pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
// 15036         memset(pWlanConfig, 0, sizeof(*pWlanConfig));
// 15037         pWlanConfig->ssid.length = params.ssidLen;
??CrossCallReturnLabel_640:
        BL       ?Subroutine112
// 15038         memcpy((INT8 *)pWlanConfig->ssid.array, params.ssid, pWlanConfig->ssid.length);
// 15039 		if(params.validBssid)
??CrossCallReturnLabel_548:
        LDRB     R0,[SP, #+55]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_2
// 15040 		{
// 15041 			memcpy((INT8 *)pWlanConfig->bssid.array,params.bssid,S2W_MAC_ADDR_SIZE);
        BL       ?Subroutine114
// 15042 			conctflags = GSN_WDD_CONNECT_FLAG_USE_BSSID;
??CrossCallReturnLabel_553:
        MOV      R10,#+16
// 15043 		}
// 15044 
// 15045         if(params.channel)
??AppS2wCmd_Wassoc_test_2:
        LDRB     R0,[SP, #+53]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_3
// 15046         {
// 15047         pWlanConfig->channel[0] = params.channel;
        STRB     R0,[R8, #+39]
// 15048         pWlanConfig->channel[1] = 0;
        STRB     R9,[R8, #+40]
        B.N      ??CrossCallReturnLabel_248
// 15049 		}
// 15050 		else
// 15051 		{
// 15052 			pWlanConfig->channel[0] = 1;
??AppS2wCmd_Wassoc_test_3:
        BL       ?Subroutine46
// 15053             pWlanConfig->channel[1] = 2;
// 15054             pWlanConfig->channel[2] = 3;
// 15055             pWlanConfig->channel[3] = 4;
// 15056             pWlanConfig->channel[4] = 5;
// 15057             pWlanConfig->channel[5] = 6;
// 15058             pWlanConfig->channel[6] = 7;
// 15059             pWlanConfig->channel[7] = 8;
// 15060             pWlanConfig->channel[8] = 9;
// 15061             pWlanConfig->channel[9] = 10;
// 15062             pWlanConfig->channel[10] = 11;
// 15063             switch(s2wCurrent.regDomain)
// 15064             {
// 15065 				case S2W_DOMAIN_FCC:
// 15066             pWlanConfig->channel[11] = 0;
// 15067 				break;
// 15068 				case S2W_DOMAIN_ETSI:
// 15069 				pWlanConfig->channel[11] = 12;
// 15070 				pWlanConfig->channel[12] = 13;
// 15071 				pWlanConfig->channel[13] = 0;
// 15072 				break;
// 15073 				case S2W_DOMAIN_TELEC:
// 15074 				pWlanConfig->channel[11] = 12;
// 15075 				pWlanConfig->channel[12] = 13;
// 15076 				pWlanConfig->channel[13] = 14;
// 15077 				pWlanConfig->channel[14] = 0;
// 15078 				break;
// 15079 				default:
// 15080 				pWlanConfig->channel[11] = 0;
// 15081 				break;
// 15082 			}
// 15083 		}
// 15084         
// 15085         S2w_getSecurityConfig(pWlanConfig);
??CrossCallReturnLabel_248:
        MOV      R0,R8
          CFI FunCall S2w_getSecurityConfig
        BL       S2w_getSecurityConfig
// 15086 		if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_STA)
        LDR      R0,[R6, #+0]
        LDRB     R1,[R0, #+2508]
        CMP      R1,#+1
        IT       EQ 
        ORREQ    R10,R10,#0x7
// 15087 		{
// 15088 			conctflags = (GSN_WDD_CONNECT_FLAG_T) (conctflags | (GSN_WDD_CONNECT_FLAG_SCAN_BEFORE_CONNECT | GSN_WDD_CONNECT_FLAG_ACTIVE_SCAN | GSN_WDD_CONNECT_FLAG_HIGHEST_RSSI_NW));
        BEQ.N    ??AppS2wCmd_Wassoc_test_4
// 15089 		}
// 15090 		else if(s2wappMainTaskCtxt->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
        CMP      R1,#+2
        BNE.N    ??AppS2wCmd_Wassoc_test_4
// 15091 		{
// 15092 			conctflags = GSN_WDD_CONNECT_FLAG_NONE;
// 15093 			pWlanConfig->apSpecificCfg.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
        BL       ?Subroutine124
// 15094 			pWlanConfig->apSpecificCfg.hiddenSsid = s2wappMainTaskCtxt->bcastSsid;
// 15095 			pWlanConfig->apSpecificCfg.dtimPeriod = s2wappMainTaskCtxt->dtimPeriod;
// 15096 			s2wappMainTaskCtxt->if0.wddCtx.wlanConfigExtn.inactivityTimeoutInSec =s2wappMainTaskCtxt->inactivityTimeoutInSec;
??CrossCallReturnLabel_591:
        ITEE     NE 
        CMPNE    R0,#+1
        MOVEQ    R0,#+4
        STRBEQ   R0,[R8, #+64]
// 15097 			if( (GSN_MAC_AUTH_SHARED == s2wCurrent.security.authMode ) ||
// 15098 				(GSN_MAC_AUTH_OPEN == s2wCurrent.security.authMode))
// 15099 			{
// 15100 				pWlanConfig->securityCfg.mode= GSN_WDD_SEC_MODE_WEP;
// 15101 			}
// 15102         }
// 15103                 
// 15104         /*AppS2wHal_MacAddrSet(s2wCurrent.macAddr);*/
// 15105 		L2ConnectStatus = 0;
??AppS2wCmd_Wassoc_test_4:
        BL       ?Subroutine3
// 15106 		pWlanConfig->securityCfg.eapConfig.outerAuthType = s2wCurrent.security.eap.outerAuth;
// 15107 		pWlanConfig->securityCfg.eapConfig.innerAuthType = s2wCurrent.security.eap.innerAuth;
// 15108 		memcpy(pWlanConfig->securityCfg.eapConfig.userName.Name, s2wCurrent.security.eap.usrName, s2wCurrent.security.eap.usrNameLen);
// 15109 		pWlanConfig->securityCfg.eapConfig.userName.Length = s2wCurrent.security.eap.usrNameLen;
??CrossCallReturnLabel_0:
        BL       ?Subroutine93
// 15110 		memcpy(pWlanConfig->securityCfg.eapConfig.password.Pwd, s2wCurrent.security.eap.password, s2wCurrent.security.eap.passwordLen);
// 15111 		pWlanConfig->securityCfg.eapConfig.password.Length = s2wCurrent.security.eap.passwordLen;
??CrossCallReturnLabel_495:
        BL       ?Subroutine58
// 15112 
// 15113         if(s2wCurrent.eapCertTimeValidChkDisbl)
// 15114         {
// 15115 	        pWlanConfig->securityCfg.eapConfig.eapFlags |= GSN_WPAIF_EAP_FLAG_NO_TIME_STAMP_CHECK;
??CrossCallReturnLabel_365:
        CBNZ.N   R0,??AppS2wCmd_Wassoc_test_5
        LDR      R0,[R11, #+312]
        CMP      R0,#+13
        ITTT     EQ 
        LDREQ    R0,[SP, #+0]
        LDREQ    R0,[R0, #+4]
        CMPEQ    R0,#+26
        BNE.N    ??CrossCallReturnLabel_252
??AppS2wCmd_Wassoc_test_5:
        BL       ?Subroutine89
// 15116         }
// 15117 #if 1
// 15118 		if( s2wCurrent.security.eap.useCaCert ||
// 15119 			(( 13 == s2wCurrent.security.eap.outerAuth)&&
// 15120 			( 26 == s2wCurrent.security.eap.innerAuth )))
// 15121 		{
// 15122             index = S2wCert_SearchRamTable(S2W_CERT_NAME_CA);
// 15123             if(index == -1)
??CrossCallReturnLabel_478:
        CMN      R0,#+1
        ITT      EQ 
        ADREQ.W  R0,`?<Constant "TLS_CA">`
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 15124             {
// 15125                 index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CA);
// 15126             }
// 15127 	    if(index != -1)
        BL       ?Subroutine48
// 15128 	    {
// 15129                 pWlanConfig->securityCfg.eapConfig.pCaCert = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 15130                 pWlanConfig->securityCfg.eapConfig.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 15131 	    }
// 15132 		}
??CrossCallReturnLabel_252:
        BL       ?Subroutine90
// 15133         index = S2wCert_SearchRamTable(S2W_CERT_NAME_CLIENT);
// 15134         if(index == -1)
??CrossCallReturnLabel_481:
        CMN      R0,#+1
        ITT      EQ 
        ADREQ.W  R0,`?<Constant "TLS_CLIENT">`
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 15135         {
// 15136             index = S2wCert_FlashFileLoad(S2W_CERT_NAME_CLIENT);
// 15137         }
// 15138 	    if(index != -1)
        BL       ?Subroutine47
// 15139 	    {
// 15140 	    	pWlanConfig->securityCfg.eapConfig.pClientCert  = (char*)s2w_ssl_cert_table[index].certAddress + 2;
// 15141             pWlanConfig->securityCfg.eapConfig.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 15142 	    }
// 15143         index = S2wCert_SearchRamTable(S2W_CERT_NAME_KEY);
// 15144         if(index == -1)
??CrossCallReturnLabel_249:
        CMN      R0,#+1
        ITT      EQ 
        ADREQ.W  R0,`?<Constant "TLS_KEY">`
          CFI FunCall S2wCert_FlashFileLoad
        BLEQ     S2wCert_FlashFileLoad
// 15145         {
// 15146             index = S2wCert_FlashFileLoad(S2W_CERT_NAME_KEY);
// 15147 	    }
// 15148 	    if(index != -1)
        CMN      R0,#+1
        BEQ.N    ??AppS2wCmd_Wassoc_test_6
// 15149 	    {
// 15150 	        pWlanConfig->securityCfg.eapConfig.pPrivateKey = (char*)s2w_ssl_cert_table[index].certAddress + 2;
        BL       ?Subroutine86
// 15151             pWlanConfig->securityCfg.eapConfig.privateKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
// 15152 	    }
??CrossCallReturnLabel_469:
        B.N      ??AppS2wCmd_Wassoc_test_6
// 15153 #endif
// 15154 TRY_AGAIN:
// 15155 		/* start the timer*/
// 15156 		s2wappMainTaskCtxt->wlanRespHndl= GsnSoftTmr_Start(&s2wappMainTaskCtxt->wlanRespTmr,
// 15157 						   GSN_SOFT_TMR_ONESHOT,0,
// 15158 							SEC_TO_SYSTIME(S2W_WLAN_RESPTIMEOUT),
// 15159 						  ( GSN_SOFT_TMR_CBR_T )AppS2w_WlanRespTmrCb,NULL);
// 15160 
// 15161 		/* Enable crypto */
// 15162 		GsnHeIf_DriverInit((UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET());
// 15163 		
// 15164         status = GsnWdd_Connect(&s2wappMainTaskCtxt->if0.wddCtx, conctflags, pWlanConfig, NULL,
// 15165                        s2wApp_ConnectCb, s2wappMainTaskCtxt);
// 15166         if (GSN_OPERATION_IN_PROGRESS != status)
// 15167         {
// 15168             s2wApp_ConnectCb( NULL,status);
// 15169         }
// 15170         else
// 15171         {
// 15172             status = GSN_SUCCESS;
// 15173         }
// 15174 
// 15175         /* wait on a semaphore to finish the asociation
// 15176          */
// 15177         GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
// 15178         
// 15179        AppS2w_ConctCbProcess(s2wappMainTaskCtxt, L2ConnectStatus);
// 15180        
// 15181        
// 15182        if(0 == eapFastRetryCnt && s2wLinkState == S2W_LINK_STATE_DISCONNECTED &&
// 15183             s2wCurrent.security.eap.outerAuth == GSN_EAP_TYPE_FAST)
// 15184        {
// 15185             eapFastRetryCnt++;
??AppS2wCmd_Wassoc_test_7:
        MOV      R9,#+1
// 15186             goto TRY_AGAIN;
// 15187        }
??AppS2wCmd_Wassoc_test_6:
        BL       ?Subroutine4
??CrossCallReturnLabel_2:
        BL       ?Subroutine82
??CrossCallReturnLabel_635:
        BL       ?Subroutine83
??CrossCallReturnLabel_462:
        BL       ?Subroutine102
??CrossCallReturnLabel_523:
        BEQ.N    ??AppS2wCmd_Wassoc_test_8
        MOV      R1,R7
        MOVS     R0,#+0
          CFI FunCall s2wApp_ConnectCb
        BL       s2wApp_ConnectCb
        B.N      ??AppS2wCmd_Wassoc_test_9
??AppS2wCmd_Wassoc_test_8:
        MOVS     R7,#+0
??AppS2wCmd_Wassoc_test_9:
        BL       ?Subroutine106
??CrossCallReturnLabel_531:
        LDR      R1,[R4, #+24]
        LDR      R0,[R6, #+0]
          CFI FunCall AppS2w_ConctCbProcess
        BL       AppS2w_ConctCbProcess
        CMP      R9,#+0
        ITTT     EQ 
        LDREQ.W  R0,??DataTable515_8
        LDRBEQ   R0,[R0, #+0]
        CMPEQ    R0,#+0
        ITT      EQ 
        LDREQ    R0,[R11, #+312]
        CMPEQ    R0,#+43
        BEQ.N    ??AppS2wCmd_Wassoc_test_7
// 15188        
// 15189        
// 15190         if(params.mode == 2)
        LDRB     R0,[SP, #+52]
        CMP      R0,#+2
        BEQ.N    ??AppS2wCmd_Wassoc_test_10
// 15191         {
// 15192             current_wlan_info.mode = S2W_WLANDATA_MODE_AP;
// 15193 	    }
// 15194 	    else
// 15195 	    {
// 15196 	        GsnHeIf_DriverSuspend();
          CFI FunCall GsnHeIf_DriverSuspend
        BL       GsnHeIf_DriverSuspend
// 15197             current_wlan_info.mode = S2W_WLANDATA_MODE_INFRA;
        MOVS     R0,#+1
// 15198 		}
??AppS2wCmd_Wassoc_test_10:
        BL       ?Subroutine129
// 15199 #ifdef S2W_IP2WIFI_SUPPORT  // ip2wifi
// 15200         if((status == GSN_SUCCESS) &&(L2ConnectStatus == GSN_SUCCESS ))  
// 15201         {
// 15202             return S2W_SUCCESS;
// 15203         }
// 15204         else
// 15205         {
// 15206             return S2W_FAILURE;
// 15207         }
// 15208         
// 15209 #else // s2w 
// 15210         if((status == GSN_SUCCESS) && (TRUE == GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx)))
??CrossCallReturnLabel_603:
        BNE.N    ??AppS2wCmd_Wassoc_test_11
        BL       ?Subroutine120
??CrossCallReturnLabel_573:
        CMP      R0,#+1
        BNE.N    ??AppS2wCmd_Wassoc_test_11
// 15211 
// 15212         {
// 15213             
// 15214             memset(&ipConfig,0,sizeof(ipConfig));
        BL       ?Subroutine29
// 15215             GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
??CrossCallReturnLabel_76:
        BL       ?Subroutine123
// 15216             ipConfig.flag =  GSN_NWIF_IPCONFIG_FLAG_IPV4_INIT;
??CrossCallReturnLabel_585:
        BL       ?Subroutine63
// 15217             
// 15218             ipConfig.ipv4.staticIp = !s2wCurrent.netConf.dhcp;
// 15219             if(ipConfig.ipv4.staticIp) // static ip
??CrossCallReturnLabel_395:
        BEQ.N    ??AppS2wCmd_Wassoc_test_12
// 15220             {
// 15221                 memcpy((UINT8*)&ipConfig.ipv4.ipAddr,s2wCurrent.netConf.ipAddr,4);
        BL       ?Subroutine11
// 15222                 memcpy((UINT8*)&ipConfig.ipv4.subnetMask, s2wCurrent.netConf.netMask, 4);
??CrossCallReturnLabel_17:
        BL       ?Subroutine12
// 15223                 memcpy((UINT8*)&ipConfig.ipv4.gatewayIpAddr,s2wCurrent.netConf.gateway,4);
??CrossCallReturnLabel_19:
        BL       ?Subroutine13
// 15224                 memcpy((UINT8*)&ipConfig.ipv4.dnsPriSrvrIp,s2wCurrent.dns1,4);
??CrossCallReturnLabel_21:
        BL       ?Subroutine14
// 15225                 memcpy((UINT8*)&ipConfig.ipv4.dnsSecSrvrIp,s2wCurrent.dns2,4);
??CrossCallReturnLabel_23:
        BL       ?Subroutine15
// 15226                 S2wL3Wait = TRUE;
??CrossCallReturnLabel_25:
        MOVS     R0,#+1
        STR      R0,[R4, #+4]
// 15227             }
// 15228              if(strlen((const char *)s2wCurrent.hostName) != 0)
??AppS2wCmd_Wassoc_test_12:
        BL       ?Subroutine69
??CrossCallReturnLabel_420:
        CBNZ.N   R0,??CrossCallReturnLabel_546
// 15229 			 {
// 15230 				 memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 15231 					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
// 15232 			 }
// 15233 			else
// 15234 			{     
// 15235      			S2w_macAddrRTCGet(mac);
        BL       ?Subroutine32
// 15236 		      	sprintf((char*)macStr,"%s%2.2x%2.2x%2.2x","GS_",mac[3],mac[4],mac[5]);
??CrossCallReturnLabel_102:
        BL       ?Subroutine31
// 15237 			    memcpy(s2wCurrent.hostName,macStr,strlen((char*)macStr));
??CrossCallReturnLabel_100:
        ADD      R0,SP,#+24
          CFI FunCall strlen
        BL       strlen
        BL       ?Subroutine111
// 15238 				memcpy(ipConfig.ipv4.hostName, s2wCurrent.hostName,
// 15239 					 (GSN_NWIF_HOST_NAME_MAX_LEN + 1));
// 15240     		}
??CrossCallReturnLabel_546:
        BL       ?Subroutine116
// 15241             s2wappMainTaskCtxt->if0.nwifCtx.notifyCb = DHCP_notify;
??CrossCallReturnLabel_558:
        BL       ?Subroutine24
// 15242             memset(&dhcpParams,0,sizeof(dhcpParams));
// 15243             dhcpParams.dhcpMaxRetryCnt = S2W_DHCP_MAX_RETRY_COUNT;
??CrossCallReturnLabel_53:
        BL       ?Subroutine108
// 15244             dhcpParams.radioMode = s2wCurrent.netConf.dhcpRadioMode;
// 15245             dhcpParams.requestLeaseTime = s2wCurrent.dhcpRequestLeaseTime;            
// 15246             dhcpParams.dhcpRetryTimeout = s2wCurrent.dhcpRetryTimeout;
// 15247               S2wL3Wait = TRUE;
// 15248            
// 15249             status = GsnNwIf_Open(&s2wappMainTaskCtxt->if0.nwifCtx, &ipConfig, &dhcpParams);
??CrossCallReturnLabel_539:
        BL       ?Subroutine102
// 15250 
// 15251              if((status != GSN_OPERATION_IN_PROGRESS) && !ipConfig.ipv4.staticIp)
??CrossCallReturnLabel_521:
        BEQ.N    ??AppS2wCmd_Wassoc_test_13
        LDR      R0,[SP, #+112]
        CBNZ.N   R0,??AppS2wCmd_Wassoc_test_13
// 15252                 {
// 15253                     DHCP_notify(status,NULL);
        MOVS     R1,#+0
        MOV      R0,R7
          CFI FunCall DHCP_notify
        BL       DHCP_notify
// 15254                 }
// 15255             if(ipConfig.ipv4.staticIp)
??AppS2wCmd_Wassoc_test_13:
        LDR      R0,[SP, #+112]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_14
// 15256             {
// 15257                 if(GSN_SUCCESS == status)
        CBNZ.N   R7,??CrossCallReturnLabel_530
// 15258                 {
// 15259                     L3ConnectStatus = TRUE;
        MOVS     R0,#+1
        STRB     R0,[R4, #+1]
        B.N      ??AppS2wCmd_Wassoc_test_15
// 15260             	}
// 15261             }
// 15262             else
// 15263             {
// 15264             	GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
??AppS2wCmd_Wassoc_test_14:
        BL       ?Subroutine106
// 15265             }
// 15266             
// 15267 #ifdef S2W_IPv6_SUPPORT
// 15268             memset(&dhcpv6Params,0,sizeof(GSN_NWIF_DHCP_PARAMS_T));
// 15269             memset(&userIpv6Config,0,sizeof(GSN_NWIF_IPv6_CONFIG_T));
// 15270             S2w_getDhcpv6Clientconfig(&dhcpParams); 
// 15271             if(s2wCurrent.netConf.dhcpv6)
// 15272             {
// 15273             	userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)(GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR | GSN_NWIF_IP6_FLG_DHCP_V6_CONFIG );
// 15274             }
// 15275             else
// 15276             {
// 15277               userIpv6Config.flags = (GSN_NWIF_IP6_FLG_T)GSN_NWIF_IP6_FLG_AUTO_LINK_LOCAL_ADDR;
// 15278             }
// 15279             S2wL3Wait = TRUE;
// 15280             status = GsnNwif_PrivateIPv6Config(&s2wappMainTaskCtxt->if0.nwifCtx, &userIpv6Config, &dhcpParams);
// 15281             if(status != GSN_OPERATION_IN_PROGRESS)
// 15282                 {
// 15283                     DHCP_notify(status,NULL);
// 15284                 }
// 15285             GsnOsal_SemAcquire ( &s2wL2L3ConnectSemaphore, GSN_OSAL_WAIT_FOREVER );
// 15286 #endif
// 15287             
// 15288             if(L3ConnectStatus)
??CrossCallReturnLabel_530:
        LDRB     R0,[R4, #+1]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_11
// 15289             {
// 15290                 AppS2wHdrAndIpv4_Print();
??AppS2wCmd_Wassoc_test_15:
          CFI FunCall AppS2wHdrAndIpv4_Print
        BL       AppS2wHdrAndIpv4_Print
// 15291 #ifdef S2W_IPv6_SUPPORT
// 15292                 if(L3ConnectStatus_v6)
// 15293                 AppS2wHdrAndIpv6_Print();
// 15294 #endif                
// 15295 			}
// 15296 
// 15297         }
// 15298 
// 15299 	if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==1))
??AppS2wCmd_Wassoc_test_11:
        BL       ?Subroutine120
??CrossCallReturnLabel_572:
        CMP      R0,#+1
        ITT      EQ 
        LDRBEQ   R0,[R4, #+1]
        CMPEQ    R0,#+1
        BNE.N    ??AppS2wCmd_Wassoc_test_16
// 15300         {
// 15301                 S2wL3Wait = FALSE;
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
// 15302                if(ipConfig.ipv4.staticIp)
        LDR      R0,[SP, #+112]
        CBZ.N    R0,??CrossCallReturnLabel_592
// 15303                {
// 15304                 nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,GratiousArpHandler);
        BL       ?Subroutine125
// 15305                }
// 15306                 GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns1,GSN_PRIMARY_DNS_SERVER);
??CrossCallReturnLabel_592:
        BL       ?Subroutine66
// 15307                 GsnNwif_DnsServerGet(&s2wappMainTaskCtxt->if0.nwifCtx,(ULONG*)s2wCurrent.dns2,GSN_SECONDARY_DNS_SERVER);
??CrossCallReturnLabel_403:
        BL       ?Subroutine109
// 15308  
// 15309 		return S2W_SUCCESS;
??CrossCallReturnLabel_541:
        MOVS     R0,#+0
        B.N      ??AppS2wCmd_Wassoc_test_0
// 15310         }
// 15311         else if((GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE) && (L3ConnectStatus==0))
??AppS2wCmd_Wassoc_test_16:
        BL       ?Subroutine120
??CrossCallReturnLabel_571:
        CMP      R0,#+1
        ITT      EQ 
        LDRBEQ   R0,[R4, #+1]
        CMPEQ    R0,#+0
        BNE.N    ??AppS2wCmd_Wassoc_test_17
// 15312         {
// 15313                 GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
        BL       ?Subroutine123
// 15314                 S2wL3Wait = FALSE;
??CrossCallReturnLabel_584:
        MOVS     R0,#+0
        STR      R0,[R4, #+4]
// 15315            // AppS2wProcess_DhcpFailNotify();
// 15316 			return S2W_ENOIP;
        MOVS     R0,#+15
        B.N      ??AppS2wCmd_Wassoc_test_0
// 15317         }
// 15318         else
// 15319         {
// 15320 			// failure case so check the log level and depends on it print info
// 15321 			//if(s2wappMainTaskCtxt->logLevel > 0)s2wCurrent.logLevel
// 15322         	if(s2wCurrent.logLevel > 0)
??AppS2wCmd_Wassoc_test_17:
        LDRB     R0,[R11, #+936]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_18
// 15323 			{
// 15324 				 UINT32 errorCode=0;
// 15325 				 GSN_WDD_ERROR_T *logInfo = GsnWdd_ErrorGet(&s2wappMainTaskCtxt->if0.wddCtx);
        BL       ?Subroutine104
??CrossCallReturnLabel_526:
        MOV      R6,R0
// 15326                  if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_AP_NOT_FOUND)
        LDR      R0,[R6, #+0]
        LSLS     R1,R0,#+31
        IT       MI 
        MOVMI    R5,#+1
// 15327                  {
// 15328                       errorCode = S2W_ERROR_CODE_AP_NOT_FOUND;
        BMI.N    ??AppS2wCmd_Wassoc_test_19
// 15329 				 }
// 15330 				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WLAN_FAIL_TO_CONCT)
        LSLS     R1,R0,#+30
        IT       MI 
        MOVMI    R5,#+2
// 15331 				 {
// 15332 					  errorCode = S2W_ERROR_CODE_WLAN_FAIL_TO_CONCT;
        BMI.N    ??AppS2wCmd_Wassoc_test_19
// 15333 				 }
// 15334 				 else if(logInfo->errorCode & GSN_WDD_CONNECT_ERROR_WPA_AUTH_FAILURE)
        LSLS     R0,R0,#+29
        IT       MI 
        MOVMI    R5,#+3
// 15335 				 {
// 15336 					  errorCode = S2W_ERROR_CODE_WPA_AUTH_FAILURE;
// 15337 				 }
// 15338 				 S2w_Printf(S2WError_List[errorCode]);
??AppS2wCmd_Wassoc_test_19:
        BL       ?Subroutine92
// 15339 				 if(logInfo->reasonString != NULL)
??CrossCallReturnLabel_493:
        LDR      R0,[R6, #+8]
        CBZ.N    R0,??AppS2wCmd_Wassoc_test_18
// 15340 				 {
// 15341 					 S2w_Printf("\r\n");
        BL       ?Subroutine91
// 15342                      S2w_Printf(logInfo->reasonString);
??CrossCallReturnLabel_484:
        LDR      R0,[R6, #+8]
          CFI FunCall S2w_Printf
        BL       S2w_Printf
// 15343 				 }
// 15344 
// 15345 			}
// 15346           return S2W_FAILURE;
??AppS2wCmd_Wassoc_test_18:
        MOVS     R0,#+1
          CFI EndBlock cfiBlock843
// 15347         }
??AppS2wCmd_Wassoc_test_0:
        REQUIRE ?Subroutine0
        ;; // Fall through to label ?Subroutine0
// 15348 //return S2W_SUCCESS;
// 15349 #endif // ip2wifi
// 15350 }

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock844 Using cfiCommon0
          CFI NoFunction
          CFI NoCalls AppS2wCmd_Wassoc
          CFI NoCalls AppS2wCmd_Wassoc_test
          CFI CFA R13+360
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
        THUMB
?Subroutine0:
        ADD      SP,SP,#+324
          CFI CFA R13+36
        POP      {R4-R11,PC}      ;; return
          CFI EndBlock cfiBlock844

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TLS_CA">`:
        DC8 "TLS_CA"
        DC8 0

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TLS_CLIENT">`:
        DC8 "TLS_CLIENT"
        DC8 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond845 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_602
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond846 Using cfiCommon0
          CFI (cfiCond846) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond846) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond846) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond846) Conditional ??CrossCallReturnLabel_603
          CFI (cfiCond846) R4 Frame(CFA, -36)
          CFI (cfiCond846) R5 Frame(CFA, -32)
          CFI (cfiCond846) R6 Frame(CFA, -28)
          CFI (cfiCond846) R7 Frame(CFA, -24)
          CFI (cfiCond846) R8 Frame(CFA, -20)
          CFI (cfiCond846) R9 Frame(CFA, -16)
          CFI (cfiCond846) R10 Frame(CFA, -12)
          CFI (cfiCond846) R11 Frame(CFA, -8)
          CFI (cfiCond846) R14 Frame(CFA, -4)
          CFI (cfiCond846) CFA R13+360
          CFI Block cfiPicker847 Using cfiCommon1
          CFI (cfiPicker847) NoFunction
          CFI (cfiPicker847) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker847) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker847) Picker
        THUMB
?Subroutine129:
        STRB     R0,[R11, #+1016]
        ADD      R8,R11,#+428
        ADD      R9,R11,#+424
        CMP      R7,#+0
        BX       LR
          CFI EndBlock cfiCond845
          CFI EndBlock cfiCond846
          CFI EndBlock cfiPicker847

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond848 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_593
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond849 Using cfiCommon0
          CFI (cfiCond849) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond849) Conditional ??CrossCallReturnLabel_592
          CFI (cfiCond849) R4 Frame(CFA, -36)
          CFI (cfiCond849) R5 Frame(CFA, -32)
          CFI (cfiCond849) R6 Frame(CFA, -28)
          CFI (cfiCond849) R7 Frame(CFA, -24)
          CFI (cfiCond849) R8 Frame(CFA, -20)
          CFI (cfiCond849) R9 Frame(CFA, -16)
          CFI (cfiCond849) R10 Frame(CFA, -12)
          CFI (cfiCond849) R11 Frame(CFA, -8)
          CFI (cfiCond849) R14 Frame(CFA, -4)
          CFI (cfiCond849) CFA R13+360
          CFI Block cfiPicker850 Using cfiCommon1
          CFI (cfiPicker850) NoFunction
          CFI (cfiPicker850) Picker
        THUMB
?Subroutine125:
        LDR      R0,[R6, #+0]
        LDR.N    R1,??DataTable515_9
        ADD      R0,R0,#+5216
          CFI FunCall AppS2wCmd_Wassoc _nxe_arp_gratuitous_send
          CFI FunCall AppS2wCmd_Wassoc_test _nxe_arp_gratuitous_send
        B.W      _nxe_arp_gratuitous_send
          CFI EndBlock cfiCond848
          CFI EndBlock cfiCond849
          CFI EndBlock cfiPicker850

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond851 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_590
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond852 Using cfiCommon0
          CFI (cfiCond852) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond852) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond852) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond852) Conditional ??CrossCallReturnLabel_591
          CFI (cfiCond852) R4 Frame(CFA, -36)
          CFI (cfiCond852) R5 Frame(CFA, -32)
          CFI (cfiCond852) R6 Frame(CFA, -28)
          CFI (cfiCond852) R7 Frame(CFA, -24)
          CFI (cfiCond852) R8 Frame(CFA, -20)
          CFI (cfiCond852) R9 Frame(CFA, -16)
          CFI (cfiCond852) R10 Frame(CFA, -12)
          CFI (cfiCond852) R11 Frame(CFA, -8)
          CFI (cfiCond852) R14 Frame(CFA, -4)
          CFI (cfiCond852) CFA R13+360
          CFI Block cfiPicker853 Using cfiCommon1
          CFI (cfiPicker853) NoFunction
          CFI (cfiPicker853) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker853) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker853) Picker
        THUMB
?Subroutine124:
        LDRH     R1,[R11, #+650]
        STRH     R1,[R8, #+58]
        MOVW     R2,#+33222
        MOVW     R1,#+33220
        MOV      R10,R9
        LDRB     R0,[R1, R0]
        STRB     R0,[R8, #+56]
        MOVW     R0,#+33221
        LDR      R1,[R6, #+0]
        LDRB     R0,[R0, R1]
        STRB     R0,[R8, #+60]
        MOVW     R1,#+5166
        LDR      R0,[R6, #+0]
        LDRH     R2,[R2, R0]
        STRH     R2,[R1, R0]
        LDRB     R0,[R11, #+120]
        CMP      R0,#+2
        BX       LR
          CFI EndBlock cfiCond851
          CFI EndBlock cfiCond852
          CFI EndBlock cfiPicker853

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond854 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_589
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond855 Using cfiCommon0
          CFI (cfiCond855) Function AppS2wCmd_Wassoc
          CFI (cfiCond855) Conditional ??CrossCallReturnLabel_588
          CFI (cfiCond855) R4 Frame(CFA, -36)
          CFI (cfiCond855) R5 Frame(CFA, -32)
          CFI (cfiCond855) R6 Frame(CFA, -28)
          CFI (cfiCond855) R7 Frame(CFA, -24)
          CFI (cfiCond855) R8 Frame(CFA, -20)
          CFI (cfiCond855) R9 Frame(CFA, -16)
          CFI (cfiCond855) R10 Frame(CFA, -12)
          CFI (cfiCond855) R11 Frame(CFA, -8)
          CFI (cfiCond855) R14 Frame(CFA, -4)
          CFI (cfiCond855) CFA R13+360
          CFI Block cfiCond856 Using cfiCommon0
          CFI (cfiCond856) Function AppS2wCmd_Wassoc
          CFI (cfiCond856) Conditional ??CrossCallReturnLabel_587
          CFI (cfiCond856) R4 Frame(CFA, -36)
          CFI (cfiCond856) R5 Frame(CFA, -32)
          CFI (cfiCond856) R6 Frame(CFA, -28)
          CFI (cfiCond856) R7 Frame(CFA, -24)
          CFI (cfiCond856) R8 Frame(CFA, -20)
          CFI (cfiCond856) R9 Frame(CFA, -16)
          CFI (cfiCond856) R10 Frame(CFA, -12)
          CFI (cfiCond856) R11 Frame(CFA, -8)
          CFI (cfiCond856) R14 Frame(CFA, -4)
          CFI (cfiCond856) CFA R13+360
          CFI Block cfiCond857 Using cfiCommon0
          CFI (cfiCond857) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond857) Conditional ??CrossCallReturnLabel_586
          CFI (cfiCond857) R4 Frame(CFA, -36)
          CFI (cfiCond857) R5 Frame(CFA, -32)
          CFI (cfiCond857) R6 Frame(CFA, -28)
          CFI (cfiCond857) R7 Frame(CFA, -24)
          CFI (cfiCond857) R8 Frame(CFA, -20)
          CFI (cfiCond857) R9 Frame(CFA, -16)
          CFI (cfiCond857) R10 Frame(CFA, -12)
          CFI (cfiCond857) R11 Frame(CFA, -8)
          CFI (cfiCond857) R14 Frame(CFA, -4)
          CFI (cfiCond857) CFA R13+360
          CFI Block cfiCond858 Using cfiCommon0
          CFI (cfiCond858) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond858) Conditional ??CrossCallReturnLabel_585
          CFI (cfiCond858) R4 Frame(CFA, -36)
          CFI (cfiCond858) R5 Frame(CFA, -32)
          CFI (cfiCond858) R6 Frame(CFA, -28)
          CFI (cfiCond858) R7 Frame(CFA, -24)
          CFI (cfiCond858) R8 Frame(CFA, -20)
          CFI (cfiCond858) R9 Frame(CFA, -16)
          CFI (cfiCond858) R10 Frame(CFA, -12)
          CFI (cfiCond858) R11 Frame(CFA, -8)
          CFI (cfiCond858) R14 Frame(CFA, -4)
          CFI (cfiCond858) CFA R13+360
          CFI Block cfiCond859 Using cfiCommon0
          CFI (cfiCond859) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond859) Conditional ??CrossCallReturnLabel_584
          CFI (cfiCond859) R4 Frame(CFA, -36)
          CFI (cfiCond859) R5 Frame(CFA, -32)
          CFI (cfiCond859) R6 Frame(CFA, -28)
          CFI (cfiCond859) R7 Frame(CFA, -24)
          CFI (cfiCond859) R8 Frame(CFA, -20)
          CFI (cfiCond859) R9 Frame(CFA, -16)
          CFI (cfiCond859) R10 Frame(CFA, -12)
          CFI (cfiCond859) R11 Frame(CFA, -8)
          CFI (cfiCond859) R14 Frame(CFA, -4)
          CFI (cfiCond859) CFA R13+360
          CFI Block cfiPicker860 Using cfiCommon1
          CFI (cfiPicker860) NoFunction
          CFI (cfiPicker860) Picker
        THUMB
?Subroutine123:
        LDR      R0,[R6, #+0]
        ADDS     R0,R5,R0
          CFI FunCall AppS2wCmd_Wassoc GsnNwIf_Close
          CFI FunCall AppS2wCmd_Wassoc GsnNwIf_Close
          CFI FunCall AppS2wCmd_Wassoc GsnNwIf_Close
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwIf_Close
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwIf_Close
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwIf_Close
        B.W      GsnNwIf_Close
          CFI EndBlock cfiCond854
          CFI EndBlock cfiCond855
          CFI EndBlock cfiCond856
          CFI EndBlock cfiCond857
          CFI EndBlock cfiCond858
          CFI EndBlock cfiCond859
          CFI EndBlock cfiPicker860

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond861 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_581
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond862 Using cfiCommon0
          CFI (cfiCond862) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond862) Conditional ??CrossCallReturnLabel_580
          CFI (cfiCond862) R4 Frame(CFA, -36)
          CFI (cfiCond862) R5 Frame(CFA, -32)
          CFI (cfiCond862) R6 Frame(CFA, -28)
          CFI (cfiCond862) R7 Frame(CFA, -24)
          CFI (cfiCond862) R8 Frame(CFA, -20)
          CFI (cfiCond862) R9 Frame(CFA, -16)
          CFI (cfiCond862) R10 Frame(CFA, -12)
          CFI (cfiCond862) R11 Frame(CFA, -8)
          CFI (cfiCond862) R14 Frame(CFA, -4)
          CFI (cfiCond862) CFA R13+360
          CFI Block cfiPicker863 Using cfiCommon1
          CFI (cfiPicker863) NoFunction
          CFI (cfiPicker863) Picker
        THUMB
?Subroutine121:
        LDR      R2,[R6, #+0]
        MOVW     R1,#+33216
        STR      R0,[R1, R2]
        MOV      R0,R9
          CFI FunCall AppS2wCmd_Wassoc AppS2wHal_Disassociate
          CFI FunCall AppS2wCmd_Wassoc_test AppS2wHal_Disassociate
        B.W      AppS2wHal_Disassociate
          CFI EndBlock cfiCond861
          CFI EndBlock cfiCond862
          CFI EndBlock cfiPicker863

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond864 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_559
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond865 Using cfiCommon0
          CFI (cfiCond865) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond865) Conditional ??CrossCallReturnLabel_558
          CFI (cfiCond865) R4 Frame(CFA, -36)
          CFI (cfiCond865) R5 Frame(CFA, -32)
          CFI (cfiCond865) R6 Frame(CFA, -28)
          CFI (cfiCond865) R7 Frame(CFA, -24)
          CFI (cfiCond865) R8 Frame(CFA, -20)
          CFI (cfiCond865) R9 Frame(CFA, -16)
          CFI (cfiCond865) R10 Frame(CFA, -12)
          CFI (cfiCond865) R11 Frame(CFA, -8)
          CFI (cfiCond865) R14 Frame(CFA, -4)
          CFI (cfiCond865) CFA R13+360
          CFI Block cfiPicker866 Using cfiCommon1
          CFI (cfiPicker866) NoFunction
          CFI (cfiPicker866) Picker
        THUMB
?Subroutine116:
        MOVS     R2,#+16
        MOV      R1,R7
        ADD      R0,SP,#+144
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond864
          CFI EndBlock cfiCond865
          CFI EndBlock cfiPicker866

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond867 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_554
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond868 Using cfiCommon0
          CFI (cfiCond868) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond868) Conditional ??CrossCallReturnLabel_553
          CFI (cfiCond868) R4 Frame(CFA, -36)
          CFI (cfiCond868) R5 Frame(CFA, -32)
          CFI (cfiCond868) R6 Frame(CFA, -28)
          CFI (cfiCond868) R7 Frame(CFA, -24)
          CFI (cfiCond868) R8 Frame(CFA, -20)
          CFI (cfiCond868) R9 Frame(CFA, -16)
          CFI (cfiCond868) R10 Frame(CFA, -12)
          CFI (cfiCond868) R11 Frame(CFA, -8)
          CFI (cfiCond868) R14 Frame(CFA, -4)
          CFI (cfiCond868) CFA R13+360
          CFI Block cfiPicker869 Using cfiCommon1
          CFI (cfiPicker869) NoFunction
          CFI (cfiPicker869) Picker
        THUMB
?Subroutine114:
        MOVS     R2,#+6
        ADD      R1,SP,#+56
        ADD      R0,R8,#+33
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond867
          CFI EndBlock cfiCond868
          CFI EndBlock cfiPicker869

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond870 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_549
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond871 Using cfiCommon0
          CFI (cfiCond871) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond871) Conditional ??CrossCallReturnLabel_548
          CFI (cfiCond871) R4 Frame(CFA, -36)
          CFI (cfiCond871) R5 Frame(CFA, -32)
          CFI (cfiCond871) R6 Frame(CFA, -28)
          CFI (cfiCond871) R7 Frame(CFA, -24)
          CFI (cfiCond871) R8 Frame(CFA, -20)
          CFI (cfiCond871) R9 Frame(CFA, -16)
          CFI (cfiCond871) R10 Frame(CFA, -12)
          CFI (cfiCond871) R11 Frame(CFA, -8)
          CFI (cfiCond871) R14 Frame(CFA, -4)
          CFI (cfiCond871) CFA R13+360
          CFI Block cfiPicker872 Using cfiCommon1
          CFI (cfiPicker872) NoFunction
          CFI (cfiPicker872) Picker
        THUMB
?Subroutine112:
        LDRB     R2,[SP, #+54]
        STRB     R2,[R8, #+0]
        ADD      R1,SP,#+62
        ADD      R0,R8,#+1
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond870
          CFI EndBlock cfiCond871
          CFI EndBlock cfiPicker872

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond873 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_547
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond874 Using cfiCommon0
          CFI (cfiCond874) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond874) Conditional ??CrossCallReturnLabel_546
          CFI (cfiCond874) R4 Frame(CFA, -36)
          CFI (cfiCond874) R5 Frame(CFA, -32)
          CFI (cfiCond874) R6 Frame(CFA, -28)
          CFI (cfiCond874) R7 Frame(CFA, -24)
          CFI (cfiCond874) R8 Frame(CFA, -20)
          CFI (cfiCond874) R9 Frame(CFA, -16)
          CFI (cfiCond874) R10 Frame(CFA, -12)
          CFI (cfiCond874) R11 Frame(CFA, -8)
          CFI (cfiCond874) R14 Frame(CFA, -4)
          CFI (cfiCond874) CFA R13+360
          CFI Block cfiPicker875 Using cfiCommon1
          CFI (cfiPicker875) NoFunction
          CFI (cfiPicker875) Picker
        THUMB
?Subroutine111:
        MOV      R2,R0
        ADD      R1,SP,#+24
        MOV      R0,R7
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond873
          CFI EndBlock cfiCond874
          CFI EndBlock cfiPicker875

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond876 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_542
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond877 Using cfiCommon0
          CFI (cfiCond877) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond877) Conditional ??CrossCallReturnLabel_541
          CFI (cfiCond877) R4 Frame(CFA, -36)
          CFI (cfiCond877) R5 Frame(CFA, -32)
          CFI (cfiCond877) R6 Frame(CFA, -28)
          CFI (cfiCond877) R7 Frame(CFA, -24)
          CFI (cfiCond877) R8 Frame(CFA, -20)
          CFI (cfiCond877) R9 Frame(CFA, -16)
          CFI (cfiCond877) R10 Frame(CFA, -12)
          CFI (cfiCond877) R11 Frame(CFA, -8)
          CFI (cfiCond877) R14 Frame(CFA, -4)
          CFI (cfiCond877) CFA R13+360
          CFI Block cfiPicker878 Using cfiCommon1
          CFI (cfiPicker878) NoFunction
          CFI (cfiPicker878) Picker
        THUMB
?Subroutine109:
        LDR      R0,[R6, #+0]
        MOVS     R2,#+1
        MOV      R1,R8
        ADDS     R0,R5,R0
          CFI FunCall AppS2wCmd_Wassoc GsnNwif_DnsServerGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwif_DnsServerGet
        B.W      GsnNwif_DnsServerGet
          CFI EndBlock cfiCond876
          CFI EndBlock cfiCond877
          CFI EndBlock cfiPicker878

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond879 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_540
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond880 Using cfiCommon0
          CFI (cfiCond880) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond880) Conditional ??CrossCallReturnLabel_539
          CFI (cfiCond880) R4 Frame(CFA, -36)
          CFI (cfiCond880) R5 Frame(CFA, -32)
          CFI (cfiCond880) R6 Frame(CFA, -28)
          CFI (cfiCond880) R7 Frame(CFA, -24)
          CFI (cfiCond880) R8 Frame(CFA, -20)
          CFI (cfiCond880) R9 Frame(CFA, -16)
          CFI (cfiCond880) R10 Frame(CFA, -12)
          CFI (cfiCond880) R11 Frame(CFA, -8)
          CFI (cfiCond880) R14 Frame(CFA, -4)
          CFI (cfiCond880) CFA R13+360
          CFI Block cfiPicker881 Using cfiCommon1
          CFI (cfiPicker881) NoFunction
          CFI (cfiPicker881) Picker
        THUMB
?Subroutine108:
        MOVS     R1,#+5
        STR      R1,[SP, #+260]
        LDRB     R1,[R11, #+393]
        STRB     R1,[SP, #+312]
        ADD      R1,R11,#+956
        LDR      R2,[R1, #+12]
        LDR      R1,[R1, #+16]
        STR      R2,[SP, #+316]
        STR      R1,[SP, #+256]
        MOV      R2,R0
        MOVS     R1,#+1
        STR      R1,[R4, #+4]
        ADD      R1,SP,#+104
        LDR      R0,[R6, #+0]
        ADDS     R0,R5,R0
          CFI FunCall AppS2wCmd_Wassoc GsnNwIf_Open
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwIf_Open
        B.W      GsnNwIf_Open
          CFI EndBlock cfiCond879
          CFI EndBlock cfiCond880
          CFI EndBlock cfiPicker881

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond882 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_533
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond883 Using cfiCommon0
          CFI (cfiCond883) Function AppS2wCmd_Wassoc
          CFI (cfiCond883) Conditional ??CrossCallReturnLabel_532
          CFI (cfiCond883) R4 Frame(CFA, -36)
          CFI (cfiCond883) R5 Frame(CFA, -32)
          CFI (cfiCond883) R6 Frame(CFA, -28)
          CFI (cfiCond883) R7 Frame(CFA, -24)
          CFI (cfiCond883) R8 Frame(CFA, -20)
          CFI (cfiCond883) R9 Frame(CFA, -16)
          CFI (cfiCond883) R10 Frame(CFA, -12)
          CFI (cfiCond883) R11 Frame(CFA, -8)
          CFI (cfiCond883) R14 Frame(CFA, -4)
          CFI (cfiCond883) CFA R13+360
          CFI Block cfiCond884 Using cfiCommon0
          CFI (cfiCond884) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond884) Conditional ??CrossCallReturnLabel_531
          CFI (cfiCond884) R4 Frame(CFA, -36)
          CFI (cfiCond884) R5 Frame(CFA, -32)
          CFI (cfiCond884) R6 Frame(CFA, -28)
          CFI (cfiCond884) R7 Frame(CFA, -24)
          CFI (cfiCond884) R8 Frame(CFA, -20)
          CFI (cfiCond884) R9 Frame(CFA, -16)
          CFI (cfiCond884) R10 Frame(CFA, -12)
          CFI (cfiCond884) R11 Frame(CFA, -8)
          CFI (cfiCond884) R14 Frame(CFA, -4)
          CFI (cfiCond884) CFA R13+360
          CFI Block cfiCond885 Using cfiCommon0
          CFI (cfiCond885) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond885) Conditional ??CrossCallReturnLabel_530
          CFI (cfiCond885) R4 Frame(CFA, -36)
          CFI (cfiCond885) R5 Frame(CFA, -32)
          CFI (cfiCond885) R6 Frame(CFA, -28)
          CFI (cfiCond885) R7 Frame(CFA, -24)
          CFI (cfiCond885) R8 Frame(CFA, -20)
          CFI (cfiCond885) R9 Frame(CFA, -16)
          CFI (cfiCond885) R10 Frame(CFA, -12)
          CFI (cfiCond885) R11 Frame(CFA, -8)
          CFI (cfiCond885) R14 Frame(CFA, -4)
          CFI (cfiCond885) CFA R13+360
          CFI Block cfiPicker886 Using cfiCommon1
          CFI (cfiPicker886) NoFunction
          CFI (cfiPicker886) Picker
        THUMB
?Subroutine106:
        MOV      R1,#-1
        LDR.N    R0,??DataTable515_10
          CFI FunCall AppS2wCmd_Wassoc GsnOsal_SemAcquire
          CFI FunCall AppS2wCmd_Wassoc GsnOsal_SemAcquire
          CFI FunCall AppS2wCmd_Wassoc_test GsnOsal_SemAcquire
          CFI FunCall AppS2wCmd_Wassoc_test GsnOsal_SemAcquire
        B.W      GsnOsal_SemAcquire
          CFI EndBlock cfiCond882
          CFI EndBlock cfiCond883
          CFI EndBlock cfiCond884
          CFI EndBlock cfiCond885
          CFI EndBlock cfiPicker886

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond887 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_527
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond888 Using cfiCommon0
          CFI (cfiCond888) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond888) Conditional ??CrossCallReturnLabel_526
          CFI (cfiCond888) R4 Frame(CFA, -36)
          CFI (cfiCond888) R5 Frame(CFA, -32)
          CFI (cfiCond888) R6 Frame(CFA, -28)
          CFI (cfiCond888) R7 Frame(CFA, -24)
          CFI (cfiCond888) R8 Frame(CFA, -20)
          CFI (cfiCond888) R9 Frame(CFA, -16)
          CFI (cfiCond888) R10 Frame(CFA, -12)
          CFI (cfiCond888) R11 Frame(CFA, -8)
          CFI (cfiCond888) R14 Frame(CFA, -4)
          CFI (cfiCond888) CFA R13+360
          CFI Block cfiPicker889 Using cfiCommon1
          CFI (cfiPicker889) NoFunction
          CFI (cfiPicker889) Picker
        THUMB
?Subroutine104:
        LDR      R0,[R6, #+0]
        MOVS     R5,#+0
        ADD      R0,R0,#+3808
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_ErrorGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_ErrorGet
        B.W      GsnWdd_ErrorGet
          CFI EndBlock cfiCond887
          CFI EndBlock cfiCond888
          CFI EndBlock cfiPicker889

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond890 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_522
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond891 Using cfiCommon0
          CFI (cfiCond891) Function AppS2wCmd_Wassoc
          CFI (cfiCond891) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond891) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond891) Conditional ??CrossCallReturnLabel_520
          CFI (cfiCond891) R4 Frame(CFA, -36)
          CFI (cfiCond891) R5 Frame(CFA, -32)
          CFI (cfiCond891) R6 Frame(CFA, -28)
          CFI (cfiCond891) R7 Frame(CFA, -24)
          CFI (cfiCond891) R8 Frame(CFA, -20)
          CFI (cfiCond891) R9 Frame(CFA, -16)
          CFI (cfiCond891) R10 Frame(CFA, -12)
          CFI (cfiCond891) R11 Frame(CFA, -8)
          CFI (cfiCond891) R14 Frame(CFA, -4)
          CFI (cfiCond891) CFA R13+360
          CFI Block cfiCond892 Using cfiCommon0
          CFI (cfiCond892) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond892) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond892) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond892) Conditional ??CrossCallReturnLabel_523
          CFI (cfiCond892) R4 Frame(CFA, -36)
          CFI (cfiCond892) R5 Frame(CFA, -32)
          CFI (cfiCond892) R6 Frame(CFA, -28)
          CFI (cfiCond892) R7 Frame(CFA, -24)
          CFI (cfiCond892) R8 Frame(CFA, -20)
          CFI (cfiCond892) R9 Frame(CFA, -16)
          CFI (cfiCond892) R10 Frame(CFA, -12)
          CFI (cfiCond892) R11 Frame(CFA, -8)
          CFI (cfiCond892) R14 Frame(CFA, -4)
          CFI (cfiCond892) CFA R13+360
          CFI Block cfiCond893 Using cfiCommon0
          CFI (cfiCond893) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond893) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond893) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond893) Conditional ??CrossCallReturnLabel_521
          CFI (cfiCond893) R4 Frame(CFA, -36)
          CFI (cfiCond893) R5 Frame(CFA, -32)
          CFI (cfiCond893) R6 Frame(CFA, -28)
          CFI (cfiCond893) R7 Frame(CFA, -24)
          CFI (cfiCond893) R8 Frame(CFA, -20)
          CFI (cfiCond893) R9 Frame(CFA, -16)
          CFI (cfiCond893) R10 Frame(CFA, -12)
          CFI (cfiCond893) R11 Frame(CFA, -8)
          CFI (cfiCond893) R14 Frame(CFA, -4)
          CFI (cfiCond893) CFA R13+360
          CFI Block cfiPicker894 Using cfiCommon1
          CFI (cfiPicker894) NoFunction
          CFI (cfiPicker894) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker894) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker894) Picker
        THUMB
?Subroutine102:
        MOV      R7,R0
        LDR.N    R0,??DataTable515_11  ;; 0x80000001
        CMP      R7,R0
        BX       LR
          CFI EndBlock cfiCond890
          CFI EndBlock cfiCond891
          CFI EndBlock cfiCond892
          CFI EndBlock cfiCond893
          CFI EndBlock cfiPicker894

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond895 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_512
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond896 Using cfiCommon0
          CFI (cfiCond896) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond896) Conditional ??CrossCallReturnLabel_511
          CFI (cfiCond896) R4 Frame(CFA, -36)
          CFI (cfiCond896) R5 Frame(CFA, -32)
          CFI (cfiCond896) R6 Frame(CFA, -28)
          CFI (cfiCond896) R7 Frame(CFA, -24)
          CFI (cfiCond896) R8 Frame(CFA, -20)
          CFI (cfiCond896) R9 Frame(CFA, -16)
          CFI (cfiCond896) R10 Frame(CFA, -12)
          CFI (cfiCond896) R11 Frame(CFA, -8)
          CFI (cfiCond896) R14 Frame(CFA, -4)
          CFI (cfiCond896) CFA R13+360
          CFI Block cfiPicker897 Using cfiCommon1
          CFI (cfiPicker897) NoFunction
          CFI (cfiPicker897) Picker
        THUMB
?Subroutine99:
        MOV      R1,R0
        LDR.N    R4,??DataTable515_12
        MOV      R0,R9
        STRB     R0,[R4, #+0]
        STRB     R0,[R4, #+1]
        STRB     R0,[R4, #+2]
        MOVS     R2,#+1
        MOV      R0,R5
          CFI FunCall AppS2wCmd_Wassoc AppS2wParse_Wcmd
          CFI FunCall AppS2wCmd_Wassoc_test AppS2wParse_Wcmd
        B.W      AppS2wParse_Wcmd
          CFI EndBlock cfiCond895
          CFI EndBlock cfiCond896
          CFI EndBlock cfiPicker897

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable508:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond898 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_496
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond899 Using cfiCommon0
          CFI (cfiCond899) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond899) Conditional ??CrossCallReturnLabel_495
          CFI (cfiCond899) R4 Frame(CFA, -36)
          CFI (cfiCond899) R5 Frame(CFA, -32)
          CFI (cfiCond899) R6 Frame(CFA, -28)
          CFI (cfiCond899) R7 Frame(CFA, -24)
          CFI (cfiCond899) R8 Frame(CFA, -20)
          CFI (cfiCond899) R9 Frame(CFA, -16)
          CFI (cfiCond899) R10 Frame(CFA, -12)
          CFI (cfiCond899) R11 Frame(CFA, -8)
          CFI (cfiCond899) R14 Frame(CFA, -4)
          CFI (cfiCond899) CFA R13+360
          CFI Block cfiPicker900 Using cfiCommon1
          CFI (cfiPicker900) NoFunction
          CFI (cfiPicker900) Picker
        THUMB
?Subroutine93:
        LDR      R0,[SP, #+0]
        LDRB     R0,[R0, #+9]
        STRB     R0,[R8, #+182]
        ADDW     R1,R11,#+355
        LDRB     R2,[R11, #+354]
        ADD      R0,R8,#+216
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond898
          CFI EndBlock cfiCond899
          CFI EndBlock cfiPicker900

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond901 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_494
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond902 Using cfiCommon0
          CFI (cfiCond902) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond902) Conditional ??CrossCallReturnLabel_493
          CFI (cfiCond902) R4 Frame(CFA, -36)
          CFI (cfiCond902) R5 Frame(CFA, -32)
          CFI (cfiCond902) R6 Frame(CFA, -28)
          CFI (cfiCond902) R7 Frame(CFA, -24)
          CFI (cfiCond902) R8 Frame(CFA, -20)
          CFI (cfiCond902) R9 Frame(CFA, -16)
          CFI (cfiCond902) R10 Frame(CFA, -12)
          CFI (cfiCond902) R11 Frame(CFA, -8)
          CFI (cfiCond902) R14 Frame(CFA, -4)
          CFI (cfiCond902) CFA R13+360
          CFI Block cfiPicker903 Using cfiCommon1
          CFI (cfiPicker903) NoFunction
          CFI (cfiPicker903) Picker
        THUMB
?Subroutine92:
        ADD      R0,R4,R5, LSL #+2
        LDR      R0,[R0, #+8]
          CFI FunCall AppS2wCmd_Wassoc S2w_Printf
          CFI FunCall AppS2wCmd_Wassoc_test S2w_Printf
        B.W      S2w_Printf
          CFI EndBlock cfiCond901
          CFI EndBlock cfiCond902
          CFI EndBlock cfiPicker903

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond904 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_468
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond905 Using cfiCommon0
          CFI (cfiCond905) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond905) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond905) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond905) Conditional ??CrossCallReturnLabel_469
          CFI (cfiCond905) R4 Frame(CFA, -36)
          CFI (cfiCond905) R5 Frame(CFA, -32)
          CFI (cfiCond905) R6 Frame(CFA, -28)
          CFI (cfiCond905) R7 Frame(CFA, -24)
          CFI (cfiCond905) R8 Frame(CFA, -20)
          CFI (cfiCond905) R9 Frame(CFA, -16)
          CFI (cfiCond905) R10 Frame(CFA, -12)
          CFI (cfiCond905) R11 Frame(CFA, -8)
          CFI (cfiCond905) R14 Frame(CFA, -4)
          CFI (cfiCond905) CFA R13+360
          CFI Block cfiPicker906 Using cfiCommon1
          CFI (cfiPicker906) NoFunction
          CFI (cfiPicker906) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker906) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker906) Picker
        THUMB
?Subroutine86:
        MOVS     R1,#+12
        MULS     R0,R1,R0
        LDR      R1,[R0, R7]
        ADDS     R1,R1,#+2
        STR      R1,[R8, #+280]
        LDR      R0,[R0, R7]
        LDRH     R0,[R0, #+0]
        STR      R0,[R8, #+284]
        BX       LR
          CFI EndBlock cfiCond904
          CFI EndBlock cfiCond905
          CFI EndBlock cfiPicker906

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond907 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_463
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond908 Using cfiCommon0
          CFI (cfiCond908) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond908) Conditional ??CrossCallReturnLabel_462
          CFI (cfiCond908) R4 Frame(CFA, -36)
          CFI (cfiCond908) R5 Frame(CFA, -32)
          CFI (cfiCond908) R6 Frame(CFA, -28)
          CFI (cfiCond908) R7 Frame(CFA, -24)
          CFI (cfiCond908) R8 Frame(CFA, -20)
          CFI (cfiCond908) R9 Frame(CFA, -16)
          CFI (cfiCond908) R10 Frame(CFA, -12)
          CFI (cfiCond908) R11 Frame(CFA, -8)
          CFI (cfiCond908) R14 Frame(CFA, -4)
          CFI (cfiCond908) CFA R13+360
          CFI Block cfiPicker909 Using cfiCommon1
          CFI (cfiPicker909) NoFunction
          CFI (cfiPicker909) Picker
        THUMB
?Subroutine83:
        LDR      R0,[R6, #+0]
        LDR.N    R1,??DataTable515_13
        STR      R0,[SP, #+4]
        STR      R1,[SP, #+0]
        MOVS     R3,#+0
        MOV      R2,R8
        MOV      R1,R10
        ADD      R0,R0,#+3808
          CFI FunCall AppS2wCmd_Wassoc GsnWdd_Connect
          CFI FunCall AppS2wCmd_Wassoc_test GsnWdd_Connect
        B.W      GsnWdd_Connect
          CFI EndBlock cfiCond907
          CFI EndBlock cfiCond908
          CFI EndBlock cfiPicker909

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond910 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_404
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond911 Using cfiCommon0
          CFI (cfiCond911) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond911) Conditional ??CrossCallReturnLabel_403
          CFI (cfiCond911) R4 Frame(CFA, -36)
          CFI (cfiCond911) R5 Frame(CFA, -32)
          CFI (cfiCond911) R6 Frame(CFA, -28)
          CFI (cfiCond911) R7 Frame(CFA, -24)
          CFI (cfiCond911) R8 Frame(CFA, -20)
          CFI (cfiCond911) R9 Frame(CFA, -16)
          CFI (cfiCond911) R10 Frame(CFA, -12)
          CFI (cfiCond911) R11 Frame(CFA, -8)
          CFI (cfiCond911) R14 Frame(CFA, -4)
          CFI (cfiCond911) CFA R13+360
          CFI Block cfiPicker912 Using cfiCommon1
          CFI (cfiPicker912) NoFunction
          CFI (cfiPicker912) Picker
        THUMB
?Subroutine66:
        LDR      R0,[R6, #+0]
        MOVS     R2,#+0
        MOV      R1,R9
        ADDS     R0,R5,R0
          CFI FunCall AppS2wCmd_Wassoc GsnNwif_DnsServerGet
          CFI FunCall AppS2wCmd_Wassoc_test GsnNwif_DnsServerGet
        B.W      GsnNwif_DnsServerGet
          CFI EndBlock cfiCond910
          CFI EndBlock cfiCond911
          CFI EndBlock cfiPicker912

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond913 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_394
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond914 Using cfiCommon0
          CFI (cfiCond914) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond914) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond914) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond914) Conditional ??CrossCallReturnLabel_395
          CFI (cfiCond914) R4 Frame(CFA, -36)
          CFI (cfiCond914) R5 Frame(CFA, -32)
          CFI (cfiCond914) R6 Frame(CFA, -28)
          CFI (cfiCond914) R7 Frame(CFA, -24)
          CFI (cfiCond914) R8 Frame(CFA, -20)
          CFI (cfiCond914) R9 Frame(CFA, -16)
          CFI (cfiCond914) R10 Frame(CFA, -12)
          CFI (cfiCond914) R11 Frame(CFA, -8)
          CFI (cfiCond914) R14 Frame(CFA, -4)
          CFI (cfiCond914) CFA R13+360
          CFI Block cfiPicker915 Using cfiCommon1
          CFI (cfiPicker915) NoFunction
          CFI (cfiPicker915) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker915) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker915) Picker
        THUMB
?Subroutine63:
        MOVS     R0,#+1
        STRB     R0,[SP, #+104]
        LDRB     R1,[R11, #+392]
        SUBS     R0,R1,#+1
        SBCS     R0,R0,R0
        LSRS     R0,R0,#+31
        STR      R0,[SP, #+112]
        BX       LR
          CFI EndBlock cfiCond913
          CFI EndBlock cfiCond914
          CFI EndBlock cfiPicker915

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond916 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_364
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond917 Using cfiCommon0
          CFI (cfiCond917) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond917) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond917) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond917) Conditional ??CrossCallReturnLabel_365
          CFI (cfiCond917) R4 Frame(CFA, -36)
          CFI (cfiCond917) R5 Frame(CFA, -32)
          CFI (cfiCond917) R6 Frame(CFA, -28)
          CFI (cfiCond917) R7 Frame(CFA, -24)
          CFI (cfiCond917) R8 Frame(CFA, -20)
          CFI (cfiCond917) R9 Frame(CFA, -16)
          CFI (cfiCond917) R10 Frame(CFA, -12)
          CFI (cfiCond917) R11 Frame(CFA, -8)
          CFI (cfiCond917) R14 Frame(CFA, -4)
          CFI (cfiCond917) CFA R13+360
          CFI Block cfiPicker918 Using cfiCommon1
          CFI (cfiPicker918) NoFunction
          CFI (cfiPicker918) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker918) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker918) Picker
        THUMB
?Subroutine58:
        LDRB     R0,[R11, #+354]
        STRB     R0,[R8, #+215]
        LDRB     R0,[R11, #+956]
        CBZ.N    R0,??Subroutine58_0
        LDRB     R0,[R8, #+248]
        ORR      R0,R0,#0x2
        STRB     R0,[R8, #+248]
??Subroutine58_0:
        LDR      R0,[SP, #+0]
        LDR.N    R7,??DataTable515_14
        LDRB     R0,[R0, #+8]
        BX       LR
          CFI EndBlock cfiCond916
          CFI EndBlock cfiCond917
          CFI EndBlock cfiPicker918

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable510:
        DC32     readBuffer

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond919 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_251
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond920 Using cfiCommon0
          CFI (cfiCond920) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond920) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond920) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond920) Conditional ??CrossCallReturnLabel_252
          CFI (cfiCond920) R4 Frame(CFA, -36)
          CFI (cfiCond920) R5 Frame(CFA, -32)
          CFI (cfiCond920) R6 Frame(CFA, -28)
          CFI (cfiCond920) R7 Frame(CFA, -24)
          CFI (cfiCond920) R8 Frame(CFA, -20)
          CFI (cfiCond920) R9 Frame(CFA, -16)
          CFI (cfiCond920) R10 Frame(CFA, -12)
          CFI (cfiCond920) R11 Frame(CFA, -8)
          CFI (cfiCond920) R14 Frame(CFA, -4)
          CFI (cfiCond920) CFA R13+360
          CFI Block cfiPicker921 Using cfiCommon1
          CFI (cfiPicker921) NoFunction
          CFI (cfiPicker921) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker921) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker921) Picker
        THUMB
?Subroutine48:
        CMN      R0,#+1
        BEQ.N    ??Subroutine48_0
        MOVS     R1,#+12
        MULS     R0,R1,R0
        LDR      R1,[R0, R7]
        ADDS     R1,R1,#+2
        STR      R1,[R8, #+264]
        LDR      R0,[R0, R7]
        LDRH     R0,[R0, #+0]
        STR      R0,[R8, #+268]
??Subroutine48_0:
        BX       LR
          CFI EndBlock cfiCond919
          CFI EndBlock cfiCond920
          CFI EndBlock cfiPicker921

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond922 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_250
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond923 Using cfiCommon0
          CFI (cfiCond923) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond923) Conditional ??CrossCallReturnLabel_249
          CFI (cfiCond923) R4 Frame(CFA, -36)
          CFI (cfiCond923) R5 Frame(CFA, -32)
          CFI (cfiCond923) R6 Frame(CFA, -28)
          CFI (cfiCond923) R7 Frame(CFA, -24)
          CFI (cfiCond923) R8 Frame(CFA, -20)
          CFI (cfiCond923) R9 Frame(CFA, -16)
          CFI (cfiCond923) R10 Frame(CFA, -12)
          CFI (cfiCond923) R11 Frame(CFA, -8)
          CFI (cfiCond923) R14 Frame(CFA, -4)
          CFI (cfiCond923) CFA R13+360
          CFI Block cfiPicker924 Using cfiCommon1
          CFI (cfiPicker924) NoFunction
          CFI (cfiPicker924) Picker
        THUMB
?Subroutine47:
        CMN      R0,#+1
        BEQ.N    ??Subroutine47_0
        MOVS     R1,#+12
        MULS     R0,R1,R0
        LDR      R1,[R0, R7]
        ADDS     R1,R1,#+2
        STR      R1,[R8, #+272]
        LDR      R0,[R0, R7]
        LDRH     R0,[R0, #+0]
        STR      R0,[R8, #+276]
??Subroutine47_0:
        ADR.W    R0,`?<Constant "TLS_KEY">`
          CFI FunCall AppS2wCmd_Wassoc S2wCert_SearchRamTable
          CFI FunCall AppS2wCmd_Wassoc_test S2wCert_SearchRamTable
        B.W      S2wCert_SearchRamTable
          CFI EndBlock cfiCond922
          CFI EndBlock cfiCond923
          CFI EndBlock cfiPicker924

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "TLS_KEY">`:
        DC8 "TLS_KEY"

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond925 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_247
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond926 Using cfiCommon0
          CFI (cfiCond926) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond926) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond926) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond926) Conditional ??CrossCallReturnLabel_248
          CFI (cfiCond926) R4 Frame(CFA, -36)
          CFI (cfiCond926) R5 Frame(CFA, -32)
          CFI (cfiCond926) R6 Frame(CFA, -28)
          CFI (cfiCond926) R7 Frame(CFA, -24)
          CFI (cfiCond926) R8 Frame(CFA, -20)
          CFI (cfiCond926) R9 Frame(CFA, -16)
          CFI (cfiCond926) R10 Frame(CFA, -12)
          CFI (cfiCond926) R11 Frame(CFA, -8)
          CFI (cfiCond926) R14 Frame(CFA, -4)
          CFI (cfiCond926) CFA R13+360
          CFI Block cfiPicker927 Using cfiCommon1
          CFI (cfiPicker927) NoFunction
          CFI (cfiPicker927) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker927) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker927) Picker
        THUMB
?Subroutine46:
        MOVS     R0,#+1
        STRB     R0,[R8, #+39]
        MOVS     R0,#+2
        STRB     R0,[R8, #+40]
        MOVS     R0,#+3
        STRB     R0,[R8, #+41]
        MOVS     R0,#+4
        STRB     R0,[R8, #+42]
        MOVS     R0,#+5
        STRB     R0,[R8, #+43]
        MOVS     R0,#+6
        STRB     R0,[R8, #+44]
        MOVS     R0,#+7
        STRB     R0,[R8, #+45]
        MOVS     R0,#+8
        STRB     R0,[R8, #+46]
        MOVS     R0,#+9
        STRB     R0,[R8, #+47]
        MOVS     R0,#+10
        STRB     R0,[R8, #+48]
        MOVS     R0,#+11
        STRB     R0,[R8, #+49]
        LDRB     R0,[R11, #+917]
        CMP      R0,#+1
        BEQ.N    ??Subroutine46_0
        CMP      R0,#+2
        BEQ.N    ??Subroutine46_1
        B.N      ??Subroutine46_2
??Subroutine46_0:
        MOVS     R0,#+12
        STRB     R0,[R8, #+50]
        MOVS     R0,#+13
        STRB     R0,[R8, #+51]
        STRB     R9,[R8, #+52]
        BX       LR
??Subroutine46_1:
        MOVS     R0,#+12
        STRB     R0,[R8, #+50]
        MOVS     R0,#+13
        STRB     R0,[R8, #+51]
        MOVS     R0,#+14
        STRB     R0,[R8, #+52]
        STRB     R9,[R8, #+53]
        BX       LR
??Subroutine46_2:
        STRB     R9,[R8, #+50]
??Subroutine46_3:
        BX       LR
          CFI EndBlock cfiCond925
          CFI EndBlock cfiCond926
          CFI EndBlock cfiPicker927

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond928 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_101
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond929 Using cfiCommon0
          CFI (cfiCond929) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond929) Conditional ??CrossCallReturnLabel_100
          CFI (cfiCond929) R4 Frame(CFA, -36)
          CFI (cfiCond929) R5 Frame(CFA, -32)
          CFI (cfiCond929) R6 Frame(CFA, -28)
          CFI (cfiCond929) R7 Frame(CFA, -24)
          CFI (cfiCond929) R8 Frame(CFA, -20)
          CFI (cfiCond929) R9 Frame(CFA, -16)
          CFI (cfiCond929) R10 Frame(CFA, -12)
          CFI (cfiCond929) R11 Frame(CFA, -8)
          CFI (cfiCond929) R14 Frame(CFA, -4)
          CFI (cfiCond929) CFA R13+360
          CFI Block cfiPicker930 Using cfiCommon1
          CFI (cfiPicker930) NoFunction
          CFI (cfiPicker930) Picker
        THUMB
?Subroutine31:
        ADD      R0,SP,#+16
        ADR.N    R2,??DataTable515_2  ;; "GS_"
        LDRB     R1,[R0, #+5]
        LDRB     R3,[R0, #+3]
        STR      R1,[SP, #+4]
        LDRB     R1,[R0, #+4]
        STR      R1,[SP, #+0]
        ADD      R0,SP,#+24
        ADR.W    R1,`?<Constant "%s%2.2x%2.2x%2.2x">`
          CFI FunCall AppS2wCmd_Wassoc sprintf
          CFI FunCall AppS2wCmd_Wassoc_test sprintf
        B.W      sprintf
          CFI EndBlock cfiCond928
          CFI EndBlock cfiCond929
          CFI EndBlock cfiPicker930

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
`?<Constant "%s%2.2x%2.2x%2.2x">`:
        DC8 "%s%2.2x%2.2x%2.2x"
        DC8 0, 0

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond931 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_77
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond932 Using cfiCommon0
          CFI (cfiCond932) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond932) Conditional ??CrossCallReturnLabel_76
          CFI (cfiCond932) R4 Frame(CFA, -36)
          CFI (cfiCond932) R5 Frame(CFA, -32)
          CFI (cfiCond932) R6 Frame(CFA, -28)
          CFI (cfiCond932) R7 Frame(CFA, -24)
          CFI (cfiCond932) R8 Frame(CFA, -20)
          CFI (cfiCond932) R9 Frame(CFA, -16)
          CFI (cfiCond932) R10 Frame(CFA, -12)
          CFI (cfiCond932) R11 Frame(CFA, -8)
          CFI (cfiCond932) R14 Frame(CFA, -4)
          CFI (cfiCond932) CFA R13+360
          CFI Block cfiPicker933 Using cfiCommon1
          CFI (cfiPicker933) NoFunction
          CFI (cfiPicker933) Picker
        THUMB
?Subroutine29:
        MOVS     R2,#+152
        MOVS     R1,#+0
        ADD      R0,SP,#+104
          CFI FunCall AppS2wCmd_Wassoc memset
          CFI FunCall AppS2wCmd_Wassoc_test memset
        B.W      memset
          CFI EndBlock cfiCond931
          CFI EndBlock cfiCond932
          CFI EndBlock cfiPicker933

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond934 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_75
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond935 Using cfiCommon0
          CFI (cfiCond935) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond935) Conditional ??CrossCallReturnLabel_74
          CFI (cfiCond935) R4 Frame(CFA, -36)
          CFI (cfiCond935) R5 Frame(CFA, -32)
          CFI (cfiCond935) R6 Frame(CFA, -28)
          CFI (cfiCond935) R7 Frame(CFA, -24)
          CFI (cfiCond935) R8 Frame(CFA, -20)
          CFI (cfiCond935) R9 Frame(CFA, -16)
          CFI (cfiCond935) R10 Frame(CFA, -12)
          CFI (cfiCond935) R11 Frame(CFA, -8)
          CFI (cfiCond935) R14 Frame(CFA, -4)
          CFI (cfiCond935) CFA R13+360
          CFI Block cfiPicker936 Using cfiCommon1
          CFI (cfiPicker936) NoFunction
          CFI (cfiPicker936) Picker
        THUMB
?Subroutine28:
        MOV      R5,R0
        MOV      R10,#+0
        MOV      R9,R10
        MOVS     R2,#+48
        MOVS     R1,#+0
        ADD      R0,SP,#+52
          CFI FunCall AppS2wCmd_Wassoc memset
          CFI FunCall AppS2wCmd_Wassoc_test memset
        B.W      memset
          CFI EndBlock cfiCond934
          CFI EndBlock cfiCond935
          CFI EndBlock cfiPicker936

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond937 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_54
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond938 Using cfiCommon0
          CFI (cfiCond938) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond938) Conditional ??CrossCallReturnLabel_53
          CFI (cfiCond938) R4 Frame(CFA, -36)
          CFI (cfiCond938) R5 Frame(CFA, -32)
          CFI (cfiCond938) R6 Frame(CFA, -28)
          CFI (cfiCond938) R7 Frame(CFA, -24)
          CFI (cfiCond938) R8 Frame(CFA, -20)
          CFI (cfiCond938) R9 Frame(CFA, -16)
          CFI (cfiCond938) R10 Frame(CFA, -12)
          CFI (cfiCond938) R11 Frame(CFA, -8)
          CFI (cfiCond938) R14 Frame(CFA, -4)
          CFI (cfiCond938) CFA R13+360
          CFI Block cfiPicker939 Using cfiCommon1
          CFI (cfiPicker939) NoFunction
          CFI (cfiPicker939) Picker
        THUMB
?Subroutine24:
        LDR      R1,[R6, #+0]
        LDR.N    R2,??DataTable515_15
        MOVW     R0,#+26320
        STR      R2,[R0, R1]
        MOVS     R1,#+0
        MOVS     R2,#+64
        ADD      R0,SP,#+256
          CFI FunCall AppS2wCmd_Wassoc memset
          CFI FunCall AppS2wCmd_Wassoc_test memset
        B.W      memset
          CFI EndBlock cfiCond937
          CFI EndBlock cfiCond938
          CFI EndBlock cfiPicker939

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond940 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI NoCalls
          CFI NoCalls
          CFI Conditional ??CrossCallReturnLabel_44
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond941 Using cfiCommon0
          CFI (cfiCond941) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond941) NoCalls AppS2wCmd_Wassoc
          CFI (cfiCond941) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiCond941) Conditional ??CrossCallReturnLabel_45
          CFI (cfiCond941) R4 Frame(CFA, -36)
          CFI (cfiCond941) R5 Frame(CFA, -32)
          CFI (cfiCond941) R6 Frame(CFA, -28)
          CFI (cfiCond941) R7 Frame(CFA, -24)
          CFI (cfiCond941) R8 Frame(CFA, -20)
          CFI (cfiCond941) R9 Frame(CFA, -16)
          CFI (cfiCond941) R10 Frame(CFA, -12)
          CFI (cfiCond941) R11 Frame(CFA, -8)
          CFI (cfiCond941) R14 Frame(CFA, -4)
          CFI (cfiCond941) CFA R13+360
          CFI Block cfiPicker942 Using cfiCommon1
          CFI (cfiPicker942) NoFunction
          CFI (cfiPicker942) NoCalls AppS2wCmd_Wassoc
          CFI (cfiPicker942) NoCalls AppS2wCmd_Wassoc_test
          CFI (cfiPicker942) Picker
        THUMB
?Subroutine20:
        LDR.N    R0,??DataTable515_16
        LDR.N    R6,??DataTable515_3
        MOVS     R1,#+0
        STR      R1,[R0, #+0]
        MOVW     R5,#+5200
        LDR.N    R0,??DataTable515_8
        LDRB     R0,[R0, #+0]
        BX       LR
          CFI EndBlock cfiCond940
          CFI EndBlock cfiCond941
          CFI EndBlock cfiPicker942

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond943 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_26
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond944 Using cfiCommon0
          CFI (cfiCond944) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond944) Conditional ??CrossCallReturnLabel_25
          CFI (cfiCond944) R4 Frame(CFA, -36)
          CFI (cfiCond944) R5 Frame(CFA, -32)
          CFI (cfiCond944) R6 Frame(CFA, -28)
          CFI (cfiCond944) R7 Frame(CFA, -24)
          CFI (cfiCond944) R8 Frame(CFA, -20)
          CFI (cfiCond944) R9 Frame(CFA, -16)
          CFI (cfiCond944) R10 Frame(CFA, -12)
          CFI (cfiCond944) R11 Frame(CFA, -8)
          CFI (cfiCond944) R14 Frame(CFA, -4)
          CFI (cfiCond944) CFA R13+360
          CFI Block cfiPicker945 Using cfiCommon1
          CFI (cfiPicker945) NoFunction
          CFI (cfiPicker945) Picker
        THUMB
?Subroutine15:
        MOVS     R2,#+4
        MOV      R1,R8
        ADD      R0,SP,#+140
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond943
          CFI EndBlock cfiCond944
          CFI EndBlock cfiPicker945

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond946 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_24
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond947 Using cfiCommon0
          CFI (cfiCond947) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond947) Conditional ??CrossCallReturnLabel_23
          CFI (cfiCond947) R4 Frame(CFA, -36)
          CFI (cfiCond947) R5 Frame(CFA, -32)
          CFI (cfiCond947) R6 Frame(CFA, -28)
          CFI (cfiCond947) R7 Frame(CFA, -24)
          CFI (cfiCond947) R8 Frame(CFA, -20)
          CFI (cfiCond947) R9 Frame(CFA, -16)
          CFI (cfiCond947) R10 Frame(CFA, -12)
          CFI (cfiCond947) R11 Frame(CFA, -8)
          CFI (cfiCond947) R14 Frame(CFA, -4)
          CFI (cfiCond947) CFA R13+360
          CFI Block cfiPicker948 Using cfiCommon1
          CFI (cfiPicker948) NoFunction
          CFI (cfiPicker948) Picker
        THUMB
?Subroutine14:
        MOVS     R2,#+4
        MOV      R1,R9
        ADD      R0,SP,#+136
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond946
          CFI EndBlock cfiCond947
          CFI EndBlock cfiPicker948

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond949 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_22
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond950 Using cfiCommon0
          CFI (cfiCond950) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond950) Conditional ??CrossCallReturnLabel_21
          CFI (cfiCond950) R4 Frame(CFA, -36)
          CFI (cfiCond950) R5 Frame(CFA, -32)
          CFI (cfiCond950) R6 Frame(CFA, -28)
          CFI (cfiCond950) R7 Frame(CFA, -24)
          CFI (cfiCond950) R8 Frame(CFA, -20)
          CFI (cfiCond950) R9 Frame(CFA, -16)
          CFI (cfiCond950) R10 Frame(CFA, -12)
          CFI (cfiCond950) R11 Frame(CFA, -8)
          CFI (cfiCond950) R14 Frame(CFA, -4)
          CFI (cfiCond950) CFA R13+360
          CFI Block cfiPicker951 Using cfiCommon1
          CFI (cfiPicker951) NoFunction
          CFI (cfiPicker951) Picker
        THUMB
?Subroutine13:
        MOVS     R2,#+4
        ADD      R1,R11,#+404
        ADD      R0,SP,#+124
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond949
          CFI EndBlock cfiCond950
          CFI EndBlock cfiPicker951

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond952 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_20
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond953 Using cfiCommon0
          CFI (cfiCond953) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond953) Conditional ??CrossCallReturnLabel_19
          CFI (cfiCond953) R4 Frame(CFA, -36)
          CFI (cfiCond953) R5 Frame(CFA, -32)
          CFI (cfiCond953) R6 Frame(CFA, -28)
          CFI (cfiCond953) R7 Frame(CFA, -24)
          CFI (cfiCond953) R8 Frame(CFA, -20)
          CFI (cfiCond953) R9 Frame(CFA, -16)
          CFI (cfiCond953) R10 Frame(CFA, -12)
          CFI (cfiCond953) R11 Frame(CFA, -8)
          CFI (cfiCond953) R14 Frame(CFA, -4)
          CFI (cfiCond953) CFA R13+360
          CFI Block cfiPicker954 Using cfiCommon1
          CFI (cfiPicker954) NoFunction
          CFI (cfiPicker954) Picker
        THUMB
?Subroutine12:
        MOVS     R2,#+4
        ADD      R1,R11,#+400
        ADD      R0,SP,#+120
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond952
          CFI EndBlock cfiCond953
          CFI EndBlock cfiPicker954

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond955 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_18
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond956 Using cfiCommon0
          CFI (cfiCond956) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond956) Conditional ??CrossCallReturnLabel_17
          CFI (cfiCond956) R4 Frame(CFA, -36)
          CFI (cfiCond956) R5 Frame(CFA, -32)
          CFI (cfiCond956) R6 Frame(CFA, -28)
          CFI (cfiCond956) R7 Frame(CFA, -24)
          CFI (cfiCond956) R8 Frame(CFA, -20)
          CFI (cfiCond956) R9 Frame(CFA, -16)
          CFI (cfiCond956) R10 Frame(CFA, -12)
          CFI (cfiCond956) R11 Frame(CFA, -8)
          CFI (cfiCond956) R14 Frame(CFA, -4)
          CFI (cfiCond956) CFA R13+360
          CFI Block cfiPicker957 Using cfiCommon1
          CFI (cfiPicker957) NoFunction
          CFI (cfiPicker957) Picker
        THUMB
?Subroutine11:
        MOVS     R2,#+4
        ADD      R1,R11,#+396
        ADD      R0,SP,#+116
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond955
          CFI EndBlock cfiCond956
          CFI EndBlock cfiPicker957

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond958 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_5
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond959 Using cfiCommon0
          CFI (cfiCond959) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond959) Conditional ??CrossCallReturnLabel_4
          CFI (cfiCond959) R4 Frame(CFA, -36)
          CFI (cfiCond959) R5 Frame(CFA, -32)
          CFI (cfiCond959) R6 Frame(CFA, -28)
          CFI (cfiCond959) R7 Frame(CFA, -24)
          CFI (cfiCond959) R8 Frame(CFA, -20)
          CFI (cfiCond959) R9 Frame(CFA, -16)
          CFI (cfiCond959) R10 Frame(CFA, -12)
          CFI (cfiCond959) R11 Frame(CFA, -8)
          CFI (cfiCond959) R14 Frame(CFA, -4)
          CFI (cfiCond959) CFA R13+360
          CFI Block cfiPicker960 Using cfiCommon1
          CFI (cfiPicker960) NoFunction
          CFI (cfiPicker960) Picker
        THUMB
?Subroutine5:
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        MOV      R1,R9
        LDR.N    R0,??DataTable515_17
        STR      R0,[SP, #+8]
        MOV      R2,R1
        MOV      R0,#+4915200
        STRD     R0,R1,[SP, #+0]
        MOV      R3,R1
        LDR      R0,[R6, #+0]
        ADD      R0,R0,#+33024
        ADDS     R0,R0,#+160
          CFI FunCall AppS2wCmd_Wassoc GsnSoftTmr_Start
          CFI FunCall AppS2wCmd_Wassoc_test GsnSoftTmr_Start
        B.W      GsnSoftTmr_Start
          CFI EndBlock cfiCond958
          CFI EndBlock cfiCond959
          CFI EndBlock cfiPicker960

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond961 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_3
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond962 Using cfiCommon0
          CFI (cfiCond962) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond962) Conditional ??CrossCallReturnLabel_2
          CFI (cfiCond962) R4 Frame(CFA, -36)
          CFI (cfiCond962) R5 Frame(CFA, -32)
          CFI (cfiCond962) R6 Frame(CFA, -28)
          CFI (cfiCond962) R7 Frame(CFA, -24)
          CFI (cfiCond962) R8 Frame(CFA, -20)
          CFI (cfiCond962) R9 Frame(CFA, -16)
          CFI (cfiCond962) R10 Frame(CFA, -12)
          CFI (cfiCond962) R11 Frame(CFA, -8)
          CFI (cfiCond962) R14 Frame(CFA, -4)
          CFI (cfiCond962) CFA R13+360
          CFI Block cfiPicker963 Using cfiCommon1
          CFI (cfiPicker963) NoFunction
          CFI (cfiPicker963) Picker
        THUMB
?Subroutine4:
        MOVS     R0,#+0
        STR      R0,[SP, #+12]
        MOVS     R1,#+0
        LDR.N    R0,??DataTable515_17
        STR      R0,[SP, #+8]
        MOVS     R2,#+0
        MOV      R0,#+4915200
        STRD     R0,R1,[SP, #+0]
        MOV      R3,R1
        LDR      R0,[R6, #+0]
        ADD      R0,R0,#+33024
        ADDS     R0,R0,#+160
          CFI FunCall AppS2wCmd_Wassoc GsnSoftTmr_Start
          CFI FunCall AppS2wCmd_Wassoc_test GsnSoftTmr_Start
        B.W      GsnSoftTmr_Start
          CFI EndBlock cfiCond961
          CFI EndBlock cfiCond962
          CFI EndBlock cfiPicker963

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515:
        DC32     s2wCidList

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_1:
        DC32     optionHead

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_2:
        DC8      "GS_"

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_3:
        DC32     s2wappMainTaskCtxt

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_4:
        DC32     appCtx

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_5:
        DC32     s2wCurrent

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_6:
        DC32     AppS2w_ClkCalibCb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_7:
        DC32     appCtx+0x548

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_8:
        DC32     s2wLinkState

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_9:
        DC32     GratiousArpHandler

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_10:
        DC32     s2wL2L3ConnectSemaphore

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_11:
        DC32     0x80000001

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_12:
        DC32     globalUseHRssi

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_13:
        DC32     s2wApp_ConnectCb

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_14:
        DC32     s2w_ssl_cert_table

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_15:
        DC32     DHCP_notify

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_16:
        DC32     wpsConnDone

        SECTION `.text`:CODE:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
??DataTable515_17:
        DC32     AppS2w_WlanRespTmrCb

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiCond964 Using cfiCommon0
          CFI Function AppS2wCmd_Wassoc
          CFI Conditional ??CrossCallReturnLabel_1
          CFI R4 Frame(CFA, -36)
          CFI R5 Frame(CFA, -32)
          CFI R6 Frame(CFA, -28)
          CFI R7 Frame(CFA, -24)
          CFI R8 Frame(CFA, -20)
          CFI R9 Frame(CFA, -16)
          CFI R10 Frame(CFA, -12)
          CFI R11 Frame(CFA, -8)
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+360
          CFI Block cfiCond965 Using cfiCommon0
          CFI (cfiCond965) Function AppS2wCmd_Wassoc_test
          CFI (cfiCond965) Conditional ??CrossCallReturnLabel_0
          CFI (cfiCond965) R4 Frame(CFA, -36)
          CFI (cfiCond965) R5 Frame(CFA, -32)
          CFI (cfiCond965) R6 Frame(CFA, -28)
          CFI (cfiCond965) R7 Frame(CFA, -24)
          CFI (cfiCond965) R8 Frame(CFA, -20)
          CFI (cfiCond965) R9 Frame(CFA, -16)
          CFI (cfiCond965) R10 Frame(CFA, -12)
          CFI (cfiCond965) R11 Frame(CFA, -8)
          CFI (cfiCond965) R14 Frame(CFA, -4)
          CFI (cfiCond965) CFA R13+360
          CFI Block cfiPicker966 Using cfiCommon1
          CFI (cfiPicker966) NoFunction
          CFI (cfiPicker966) Picker
        THUMB
?Subroutine3:
        MOVS     R0,#+0
        STR      R0,[R4, #+24]
        ADD      R1,R11,#+322
        LDR      R0,[R11, #+312]
        STRB     R0,[R8, #+180]
        ADD      R0,R11,#+312
        STR      R0,[SP, #+0]
        LDR      R0,[R0, #+4]
        STRB     R0,[R8, #+181]
        LDR      R0,[SP, #+0]
        LDRB     R2,[R0, #+9]
        ADD      R0,R8,#+183
          CFI FunCall AppS2wCmd_Wassoc memcpy
          CFI FunCall AppS2wCmd_Wassoc_test memcpy
        B.W      memcpy
          CFI EndBlock cfiCond964
          CFI EndBlock cfiCond965
          CFI EndBlock cfiPicker966
// 15351 
// 15352 
// 15353 
// 15354 
// 15355 /*UINT8 MQTT_AP_CONNECT()
// 15356 {
// 15357 	UINT8* SSID;
// 15358 	UINT8* WWPA;
// 15359         UINT8 status;
// 15360 
// 15361 	SSID = malloc(strlen(AP_SSID));
// 15362 	WWPA = malloc(strlen(AP_WWPA));
// 15363 	
// 15364 	sprintf(WWPA,"%s",AP_WWPA);
// 15365 	status = AppS2wCmd_Wwpa(WWPA);
// 15366 	if(status != 0)
// 15367 	{
// 15368 		S2w_Printf("\r\n wrong WWPA");
// 15369 		goto error;
// 15370 	}
// 15371     sprintf(SSID,"%s",AP_SSID);
// 15372 	status = AppS2wCmd_Wassoc_test(SSID);
// 15373 	if(status != 0)
// 15374 	{
// 15375 		S2w_Printf("\r\n AP connect error");
// 15376 		goto error;
// 15377 	}
// 15378 	free(SSID);
// 15379 	free(WWPA);
// 15380 	return status;
// 15381 error : 
// 15382 	free(SSID);
// 15383 	free(WWPA);
// 15384 	return 1;
// 15385 }*/
// 15386 
// 15387 /*UINT8 MQTT_TCP_CONNECT(UINT8* CID)
// 15388 {	*/
// 15389 	/*S2W_NETDATA_T peerData;
// 15390 	UINT8* temp;
// 15391 	UINT32 status;
// 15392 	UINT8 cid;
// 15393 	temp = malloc(strlen(HOST_ADDRESS)+strlen(HOST_PORT)+1);
// 15394 	sprintf(temp,"%s,%s",HOST_ADDRESS,HOST_PORT);
// 15395 
// 15396 	status = AppS2wParse_AddrPort(&temp,&peerData);
// 15397 	if(status != 0)
// 15398 	{
// 15399 		S2w_Printf("\r\n Address port error");
// 15400 		goto error;
// 15401 	}
// 15402 	peerData.proto = S2W_NETDATA_PROTO_TCP;
// 15403     peerData.mode = S2W_NETDATA_MODE_CLIENT;
// 15404 
// 15405     status = AppS2wHal_NetTcpClient_test(&peerData, &cid);
// 15406     if (status != 0)
// 15407     {
// 15408        	goto error;
// 15409     }
// 15410 	*CID = cid;
// 15411 
// 15412 	free(temp);
// 15413 	return status;
// 15414 
// 15415 error:
// 15416 	free(temp);
// 15417 	return 1;*/
// 15418 
// 15419   	/*UINT8 status = 0;
// 15420     S2W_NETDATA_T peerData;
// 15421 	
// 15422  	peerData.ipAddr[0] = 54;
// 15423   	peerData.ipAddr[1] = 178;
// 15424   	peerData.ipAddr[2] = 154;
// 15425   	peerData.ipAddr[3] = 197;
// 15426   	peerData.port = 8883;  
// 15427   	peerData.proto = S2W_NETDATA_PROTO_TCP;
// 15428   	peerData.mode = S2W_NETDATA_MODE_CLIENT;
// 15429   	status = AppS2wHal_NetTcpClient_test(&peerData, CID);
// 15430 	if (status != 0)
// 15431     {
// 15432 	    S2w_Printf("\r\n TcpClient error");
// 15433 		return 1;
// 15434     }
// 15435 	
// 15436 	return 0;
// 15437 }
// 15438 
// 15439 UINT8 MQTT_SSL_CONNECT(UINT8 CID)
// 15440 {
// 15441 	UINT8* SSL_CID;
// 15442 	//UINT8 CID;
// 15443 	UINT8 status = 1;
// 15444 	SSL_CID = malloc(3);
// 15445 
// 15446 	sprintf(SSL_CID,"%d",CID);
// 15447 	
// 15448 	S2w_Printf("\r\n SSL CID : %d",CID);
// 15449 	status = AppS2wCmd_SSLOpen_test(CID);
// 15450 	if(status != 0)
// 15451 	{
// 15452 		S2w_Printf("\r\n SSL open error");
// 15453 		free(SSL_CID);
// 15454 		return 1;
// 15455 	}
// 15456 	free(SSL_CID);
// 15457 	return status;
// 15458 }
// 15459 
// 15460 void TEST_START()
// 15461 {
// 15462   UINT8 cid;
// 15463   UINT8 status;
// 15464   
// 15465   MQTT_AP_CONNECT();
// 15466   GsnTaskSleep(5000);
// 15467   MQTT_TCP_CONNECT(&cid);
// 15468   GsnTaskSleep(5000);
// 15469   MQTT_SSL_CONNECT(cid);
// 15470   GsnTaskSleep(5000);
// 15471 }*/
// 15472 
// 15473 

        SECTION `.text`:CODE:NOROOT(1)
          CFI Block cfiBlock967 Using cfiCommon0
          CFI Function App2wCmd_mqtt_publish
        THUMB
// 15474 UINT8
// 15475 App2wCmd_mqtt_publish(UINT8* ptr)
// 15476 {
App2wCmd_mqtt_publish:
        PUSH     {R7,LR}
          CFI R14 Frame(CFA, -4)
          CFI CFA R13+8
// 15477   TEST_START();
          CFI FunCall TEST_START
        BL       TEST_START
// 15478   return 0;
        MOVS     R0,#+0
        POP      {R1,PC}          ;; return
          CFI EndBlock cfiBlock967
// 15479 }

        SECTION `.iar_vfe_header`:DATA:REORDER:NOALLOC:NOROOT(2)
        SECTION_TYPE SHT_PROGBITS, 0
        DATA
        DC32 0

        SECTION __DLIB_PERTHREAD:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION __DLIB_PERTHREAD_init:DATA:REORDER:NOROOT(0)
        SECTION_TYPE SHT_PROGBITS, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "\\r\\nNO ERROR">`:
        DC8 "\015\012NO ERROR"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "\\r\\nSSID NOT FOUND">`:
        DC8 "\015\012SSID NOT FOUND"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "\\r\\nWLAN CONNECT ERROR">`:
        DC8 "\015\012WLAN CONNECT ERROR"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "\\r\\nWPA AUTH FAIL">`:
        DC8 "\015\012WPA AUTH FAIL"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WA=">`:
        DC8 "+WA="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WPHYMODE=">`:
        DC8 "+WPHYMODE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BCONMISSTHRHLD=">`:
        DC8 "+BCONMISSTHRHLD="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TKIPCNTRMSR=">`:
        DC8 "+TKIPCNTRMSR="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TKIPSEQSET=">`:
        DC8 "+TKIPSEQSET="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WLANSTATS">`:
        DC8 "+WLANSTATS"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+RXFILTER=">`:
        DC8 "+RXFILTER="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRTS=">`:
        DC8 "+WRTS="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WBLOCKACK=">`:
        DC8 "+WBLOCKACK="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAMSDU=">`:
        DC8 "+WAMSDU="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAMPDU=">`:
        DC8 "+WAMPDU="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TXFAILLMT=">`:
        DC8 "+TXFAILLMT="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NDHCP=">`:
        DC8 "+NDHCP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NSTAT=">`:
        DC8 "+NSTAT="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+CID=">`:
        DC8 "+CID="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCLOSEALL">`:
        DC8 "+NCLOSEALL"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCLOSE=">`:
        DC8 "+NCLOSE="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRXACTIVE=">`:
        DC8 "+WRXACTIVE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRETRY=">`:
        DC8 "+WRETRY="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCTCP=">`:
        DC8 "+NCTCP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCUDP=">`:
        DC8 "+NCUDP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NSTCP=">`:
        DC8 "+NSTCP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NSUDP=">`:
        DC8 "+NSUDP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSSTART">`:
        DC8 "+MDNSSTART"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSSTOP">`:
        DC8 "+MDNSSTOP"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSANNOUNCE">`:
        DC8 "+MDNSANNOUNCE"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSHNREG=">`:
        DC8 "+MDNSHNREG="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSSRVREG=">`:
        DC8 "+MDNSSRVREG="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSSD=">`:
        DC8 "+MDNSSD="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSHNDEREG=">`:
        DC8 "+MDNSHNDEREG="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MDNSSRVDEREG=">`:
        DC8 "+MDNSSRVDEREG="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NXSETSOCKOPT=">`:
        DC8 "+NXSETSOCKOPT="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NMAC=">`:
        DC8 "+NMAC="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WSEC=">`:
        DC8 "+WSEC="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAUTH=">`:
        DC8 "+WAUTH="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WWPA=">`:
        DC8 "+WWPA="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WPAPSK=">`:
        DC8 "+WPAPSK="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WPSK=">`:
        DC8 "+WPSK="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WWEPCONF=">`:
        DC8 "+WWEPCONF="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WWEP">`:
        DC8 "+WWEP"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WSYNCINTRL=">`:
        DC8 "+WSYNCINTRL="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WSTATUS">`:
        DC8 "+WSTATUS"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WST=">`:
        DC8 "+WST="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WS">`:
        DC8 "+WS"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NSET=">`:
        DC8 "+NSET="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WM=">`:
        DC8 "+WM="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRXPS=">`:
        DC8 "+WRXPS="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WIEEEPSPOLL=">`:
        DC8 "+WIEEEPSPOLL="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WP=">`:
        DC8 "+WP="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WD">`:
        DC8 "+WD"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRSSI=">`:
        DC8 "+WRSSI="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRATE=">`:
        DC8 "+WRATE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAPSM=">`:
        DC8 "+WAPSM="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MCSTSET=">`:
        DC8 "+MCSTSET="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARP=">`:
        DC8 "+NARP="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARPCHACHEEN=">`:
        DC8 "+NARPCHACHEEN="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARPCHACHEDEL">`:
        DC8 "+NARPCHACHEDEL"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARPSET=">`:
        DC8 "+NARPSET="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARPDELETE=">`:
        DC8 "+NARPDELETE="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NARPAUTO=">`:
        DC8 "+NARPAUTO="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+srvvalidationen=">`:
        DC8 "+srvvalidationen="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEAPTIMECHK=">`:
        DC8 "+WEAPTIMECHK="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "B=">`:
        DC8 "B="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+UARTFLVL=">`:
        DC8 "+UARTFLVL="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&R">`:
        DC8 "&R"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&K">`:
        DC8 "&K"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&F">`:
        DC8 "&F"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&V">`:
        DC8 "&V"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&W">`:
        DC8 "&W"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "Z">`:
        DC8 "Z"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "&Y">`:
        DC8 "&Y"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "S">`:
        DC8 "S"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "E">`:
        DC8 "E"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "V">`:
        DC8 "V"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "I">`:
        DC8 "I"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "A">`:
        DC8 "A"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "H">`:
        DC8 "H"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "C">`:
        DC8 "C"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "O">`:
        DC8 "O"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+VER=">`:
        DC8 "+VER="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BDATA=">`:
        DC8 "+BDATA="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+RESET">`:
        DC8 "+RESET"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+APCONF=">`:
        DC8 "+APCONF="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+APCLIENTINFO=">`:
        DC8 "+APCLIENTINFO="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+L2CONFIG=">`:
        DC8 "+L2CONFIG="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NTIMESYNC=">`:
        DC8 "+NTIMESYNC="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DNS=">`:
        DC8 "+DNS="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DHCPSRVR=">`:
        DC8 "+DHCPSRVR="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DHCPSRVRCFG=">`:
        DC8 "+DHCPSRVRCFG="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SETTIME=">`:
        DC8 "+SETTIME="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+GETTIME=">`:
        DC8 "+GETTIME="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WWPS=">`:
        DC8 "+WWPS="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TCERTADD=">`:
        DC8 "+TCERTADD="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TCERTDEL=">`:
        DC8 "+TCERTDEL="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEAP=">`:
        DC8 "+WEAP="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEAPCONF=">`:
        DC8 "+WEAPCONF="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HTTPOPEN=">`:
        DC8 "+HTTPOPEN="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HTTPCLOSE=">`:
        DC8 "+HTTPCLOSE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HTTPCONF=">`:
        DC8 "+HTTPCONF="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HTTPCONFDEL=">`:
        DC8 "+HTTPCONFDEL="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HTTPSEND=">`:
        DC8 "+HTTPSEND="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SOTAFWUPCONF=">`:
        DC8 "+SOTAFWUPCONF="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SOTAFWUPSTART">`:
        DC8 "+SOTAFWUPSTART"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SOTAFWUPROLLBACK">`:
        DC8 "+SOTAFWUPROLLBACK"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAUTO=">`:
        DC8 "+WAUTO="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NAUTO=">`:
        DC8 "+NAUTO="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PSDPSLEEP">`:
        DC8 "+PSDPSLEEP"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PING=">`:
        DC8 "+PING="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MQTT_PUBLISH">`:
        DC8 "+MQTT_PUBLISH"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DNSSET=">`:
        DC8 "+DNSSET="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DNSLOOKUP=">`:
        DC8 "+DNSLOOKUP="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WREGDOMAIN=">`:
        DC8 "+WREGDOMAIN="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SSLOPEN=">`:
        DC8 "+SSLOPEN="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SSLCLOSE=">`:
        DC8 "+SSLCLOSE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+SSLCONF=">`:
        DC8 "+SSLCONF="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRFTESTSTART">`:
        DC8 "+WRFTESTSTART"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRFTESTSTOP">`:
        DC8 "+WRFTESTSTOP"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WFRAMETXTEST=">`:
        DC8 "+WFRAMETXTEST="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WTX99TEST=">`:
        DC8 "+WTX99TEST="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WTX100TEST=">`:
        DC8 "+WTX100TEST="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WCARWAVTEST=">`:
        DC8 "+WCARWAVTEST="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WTXSTOP=">`:
        DC8 "+WTXSTOP="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRXTEST=">`:
        DC8 "+WRXTEST="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRXSTOP">`:
        DC8 "+WRXSTOP"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WCALIB=">`:
        DC8 "+WCALIB="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WOTPRD=">`:
        DC8 "+WOTPRD="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+AOTPRD=">`:
        DC8 "+AOTPRD="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEBPROV=">`:
        DC8 "+WEBPROV="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEBPROVSTOP">`:
        DC8 "+WEBPROVSTOP"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NURIREDIR=">`:
        DC8 "+NURIREDIR="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WEBSERVER=">`:
        DC8 "+WEBSERVER="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+URIRECV=">`:
        DC8 "+URIRECV="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+XMLSEND=">`:
        DC8 "+XMLSEND="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+XMLPARSE=">`:
        DC8 "+XMLPARSE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PSSTBY=">`:
        DC8 "+PSSTBY="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+STORENWCONN">`:
        DC8 "+STORENWCONN"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+RESTORENWCONN">`:
        DC8 "+RESTORENWCONN"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+HIBERNATE=">`:
        DC8 "+HIBERNATE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCMAUTO=">`:
        DC8 "+NCMAUTO="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NCMAUTOCONF=">`:
        DC8 "+NCMAUTOCONF="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+ASYNCMSGFMT=">`:
        DC8 "+ASYNCMSGFMT="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NIPMULTICASTJOIN=">`:
        DC8 "+NIPMULTICASTJOIN="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+NIPMULTICASTLEAVE=">`:
        DC8 "+NIPMULTICASTLEAVE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+DGPIO=">`:
        DC8 "+DGPIO="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+UNSOLICITEDTX=">`:
        DC8 "+UNSOLICITEDTX="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+UNSOLICITEDRX=">`:
        DC8 "+UNSOLICITEDRX="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+UNSOLICITEDRXSTOP">`:
        DC8 "+UNSOLICITEDRXSTOP"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+UAMCCA=">`:
        DC8 "+UAMCCA="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+adcconf=">`:
        DC8 "+adcconf="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+adcstart">`:
        DC8 "+adcstart"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+adcread=">`:
        DC8 "+adcread="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+adcstop">`:
        DC8 "+adcstop"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHINIT=">`:
        DC8 "+EXFLASHINIT="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHWRITE=">`:
        DC8 "+EXFLASHWRITE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHREAD=">`:
        DC8 "+EXFLASHREAD="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHERASE=">`:
        DC8 "+EXFLASHERASE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHCERASE">`:
        DC8 "+EXFLASHCERASE"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+EXFLASHSPICONF=">`:
        DC8 "+EXFLASHSPICONF="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WSTAPSCFG=">`:
        DC8 "+WSTAPSCFG="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WAPPSCFG=">`:
        DC8 "+WAPPSCFG="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PSPOLLINTRL=">`:
        DC8 "+PSPOLLINTRL="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WKEEPALIVE=">`:
        DC8 "+WKEEPALIVE="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PWMSTART=">`:
        DC8 "+PWMSTART="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PWMSTOP=">`:
        DC8 "+PWMSTOP="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+PWMCNTRL=">`:
        DC8 "+PWMCNTRL="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MEMREAD=">`:
        DC8 "+MEMREAD="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+MEMWRITE=">`:
        DC8 "+MEMWRITE="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+LOGLVL=">`:
        DC8 "+LOGLVL="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BCHKSTRT=">`:
        DC8 "+BCHKSTRT="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BATTVALGET">`:
        DC8 "+BATTVALGET"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BCHK=">`:
        DC8 "+BCHK="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BCHKSTOP">`:
        DC8 "+BCHKSTOP"
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+BATTLVLSET=">`:
        DC8 "+BATTLVLSET="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+CLKTUNE=">`:
        DC8 "+CLKTUNE="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+COAPOPEN=">`:
        DC8 "+COAPOPEN="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+COAPSENDRECIEVE=">`:
        DC8 "+COAPSENDRECIEVE="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+COAPCLOSE=">`:
        DC8 "+COAPCLOSE="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+COAPOPTCONF=">`:
        DC8 "+COAPOPTCONF="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+COAPOPTCONFDEL=">`:
        DC8 "+COAPOPTCONFDEL="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WBACKEN=">`:
        DC8 "+WBACKEN="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WRADIOSTATE=">`:
        DC8 "+WRADIOSTATE="
        DC8 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WASSOCCONF=">`:
        DC8 "+WASSOCCONF="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+TEMPVALGET=">`:
        DC8 "+TEMPVALGET="
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+WTEMPREAD=">`:
        DC8 "+WTEMPREAD="

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+CRYPTOEN=">`:
        DC8 "+CRYPTOEN="
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "+GRATARP">`:
        DC8 "+GRATARP"
        DC8 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "%x\\t">`:
        DC8 "%x\t"

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant " ">`:
        DC8 " "

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "WEP">`:
        DC8 "WEP"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant " %s">`:
        DC8 " %s"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "GS_">`:
        DC8 "GS_"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "\\r\\n">`:
        DC8 "\015\012"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "\\"">`:
        DC8 "\""

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "GA">`:
        DC8 "GA"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "10">`:
        DC8 "10"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant ":%s">`:
        DC8 ":%s"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant ",\\r\\n">`:
        DC8 ",\015\012"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant ",%d">`:
        DC8 ",%d"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0}>`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(1)
        DATA
`?<Constant "w">`:
        DC8 "w"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0}>_1`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
        DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "FCC">`:
        DC8 "FCC"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0}>_2`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "%d">`:
        DC8 "%d"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0, 0, 0, 0}>`:
        DC8 0, 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant {0}>_3`:
        DC8 0, 0, 0, 0, 0, 0, 0, 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "0x">`:
        DC8 "0x"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "%c">`:
        DC8 "%c"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "GET">`:
        DC8 "GET"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "CON">`:
        DC8 "CON"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "NON">`:
        DC8 "NON"

        SECTION `.rodata`:CONST:NOROOT(0)
        DATA
`?<Constant "">`:
        DC8 ""

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "Active">`:
        DC8 "Active"
        DC8 0

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "PS Poll">`:
        DC8 "PS Poll"

        SECTION `.rodata`:CONST:NOROOT(2)
        DATA
`?<Constant "OFF">`:
        DC8 "OFF"

        END
// 15480 
// 15481 
// 15482 
// 
//  6 066 bytes in section .bss
//     48 bytes in section .data
//  3 324 bytes in section .noinit
//  2 445 bytes in section .rodata
// 31 710 bytes in section .text
// 
// 31 440 bytes of CODE  memory (+ 270 bytes shared)
//  2 445 bytes of CONST memory
//  9 438 bytes of DATA  memory
//
//Errors: none
//Warnings: none
