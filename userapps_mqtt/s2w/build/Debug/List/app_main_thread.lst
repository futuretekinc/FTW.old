###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:13:17 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\main\app_main_thread.c                    #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\main\app_main_thread.c -D                 #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\app_main_thread.lst          #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\app_main_thread.o             #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\main\app_main_thread.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: app_main_thread.c,v $
     28          *******************************************************************************/
     29          
     30          /*****************************************************************************
     31            * File Inclusions
     32            ****************************************************************************/
     33          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9205             STR      R2,[SP, #+20]
   \   00000010   0x461D             MOV      R5,R3
   \   00000012   0x9B0C             LDR      R3,[SP, #+48]
   \   00000014   0x9303             STR      R3,[SP, #+12]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9302             STR      R3,[SP, #+8]
   \   0000001A   0x9204             STR      R2,[SP, #+16]
   \   0000001C   0x460B             MOV      R3,R1
   \   0000001E   0x9701             STR      R7,[SP, #+4]
   \   00000020   0x9600             STR      R6,[SP, #+0]
   \   00000022   0x4622             MOV      R2,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _tx_thread_create
   \   0000002A   0xB118             CBZ.N    R0,??GsnOsal_ThreadCreate_0
   \   0000002C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000030   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemCreate(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemCreate:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      BL       _tx_semaphore_create
   \   0000000A   0xB118             CBZ.N    R0,??GsnOsal_SemCreate_0
   \   0000000C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000010   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemCreate_0:
   \   00000014   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp UINT32 GsnOsal_QueueMsgSizeInWords(UINT32)
   \                     GsnOsal_QueueMsgSizeInWords:
   \   00000000   0x0881             LSRS     R1,R0,#+2
   \   00000002   0xF010 0x0F03      TST      R0,#0x3
   \   00000006   0xBF18             IT       NE 
   \   00000008   0x1C49             ADDNE    R1,R1,#+1
   \   0000000A   0x2903             CMP      R1,#+3
   \   0000000C   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_0
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x4770             BX       LR
   \                     ??GsnOsal_QueueMsgSizeInWords_0:
   \   00000012   0x2905             CMP      R1,#+5
   \   00000014   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_1
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0x4770             BX       LR
   \                     ??GsnOsal_QueueMsgSizeInWords_1:
   \   0000001A   0x1F48             SUBS     R0,R1,#+5
   \   0000001C   0x2804             CMP      R0,#+4
   \   0000001E   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_2
   \   00000020   0x2008             MOVS     R0,#+8
   \   00000022   0x4770             BX       LR
   \                     ??GsnOsal_QueueMsgSizeInWords_2:
   \   00000024   0xF1A1 0x0009      SUB      R0,R1,#+9
   \   00000028   0x2808             CMP      R0,#+8
   \   0000002A   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_3
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x4770             BX       LR
   \                     ??GsnOsal_QueueMsgSizeInWords_3:
   \   00000030   0xF04F 0x30FF      MOV      R0,#-1
   \   00000034   0x4770             BX       LR               ;; return
     34          #include "main/app_main_ctx.h"
     35          #include "app_defines.h"
     36          #include "modules/persistent_timer/gsn_persistent_timer.h"
     37          #include "config/app_resource_config.h"
     38          #include "hal/s2w_hal.h"
     39          #include "parser/s2w_process.h"
     40          #include "app_rtc_mem.h"
     41          #include "app_defines_builder.h"
     42          #include "hal/s2w_types.h"
     43          #include "fs/api/api_safe.h"
     44          #include "hal/s2w.h"
     45          #include "hal/s2w_config.h"
     46          #include "app_defines_builder.h"
     47          #include "gsn_ncm_roam.h"
     48          
     49          /*****************************************************************************
     50           *Private definitions
     51           ****************************************************************************/
     52          
     53          
     54          
     55          #define APP_DEV_INDX_0	0
     56          
     57          /*****************************************************************************
     58           *Private variables
     59           ****************************************************************************/
     60          
     61          #ifdef S2W_SDIO_ENABLE
     62          __no_init UINT8 s2wSerialBuf[16384];
     63          #else

   \                                 In section .noinit, align 4
     64          __no_init UINT8 s2wSerialBuf[4096];
   \                     s2wSerialBuf:
   \   00000000                      DS8 4096
     65          #endif
     66          
     67          #ifdef S2W_DUAL_INTERFACE_SUPPORT
     68          #ifdef S2W_SDIO_ENABLE_1
     69          __no_init UINT8 s2wSerialBuf1[16384];
     70          #else
     71          __no_init UINT8 s2wSerialBuf1[4096];
     72          #endif
     73          __no_init UINT8 s2wSerial2InputTaskStack[2048];
     74          #endif
     75          /** Buffer for data to be transmitted */
     76          /*App main context*/
     77          APP_MAIN_CTX_T appCtx;
     78          S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle;
     79          S2W_SERIAL_PORT_HANDLE_T  s2wSerialPortHandle1;
     80          

   \                                 In section .noinit, align 4
     81          __no_init S2W_SCAN_DISPLAY_INFO_T scanDisplayInfo[20];
   \                     scanDisplayInfo:
   \   00000000                      DS8 920
     82          

   \                                 In section .noinit, align 4
     83          __no_init UINT8 s2wSerialInputTaskStack[APP_CFG_SERIALINPUT_STACK_SIZE];
   \                     s2wSerialInputTaskStack:
   \   00000000                      DS8 8192
     84          
     85          
     86          
     87          /* Define the APP main task  */
     88          PRIVATE GSN_OSAL_THREAD_TCB_T appMainCtxThread;

   \                                 In section .noinit, align 4
     89          __no_init PRIVATE UINT32 appMainCtxThreadStack[APP_MAIN_STACK_SIZE/sizeof(UINT32)];
   \                     appMainCtxThreadStack:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 8
   \                     appCtx:
   \   00000000                      DS8 33256
   \   000081E8                      DS8 180
     90          PUBLIC GSN_OSAL_QUEUE_T appMainThreadMsgQueue;
   \                     appMainThreadMsgQueue:
   \   0000829C                      DS8 56
   \   000082D4                      DS8 128

   \                                 In section .bss, align 8
   \                     s2wSerialPortHandle:
   \   00000000                      DS8 2328

   \                                 In section .bss, align 8
   \                     s2wSerialPortHandle1:
   \   00000000                      DS8 2328
     91          PRIVATE UINT32 appMainThreadMsgQueueBuf[ APP_CFG_APP_CTX_MAX_MSG_IN_MBOX ];
     92          
     93          /* WDD stuff */

   \                                 In section .noinit, align 4
     94          __no_init PRIVATE UINT32 wddStack[APP_CFG_WDD_TASK_STACK_SIZE/sizeof(UINT32)];
   \                     wddStack:
   \   00000000                      DS8 8192
   \   00002000                      DS8 4096
   \   00003000                      DS8 2048
     95          //PRIVATE UINT32 wddMbBuf[APP_CFG_WDD_MAX_MSG_IN_MBOX * sizeof(GSN_WDD_MESSAGE_T)/ sizeof(UINT32)];
     96          //PRIVATE GSN_WDD_MESSAGE_T wddMsg;/* Message instance for handling received messages */
     97          
     98          /*wif message system */
     99          __no_init PRIVATE UINT32 hifMsgRcvTskStack[APP_CFG_HIF_MSG_RCV_STACK_SIZE/sizeof(UINT32)];
    100          __no_init PRIVATE UINT32 sysCtrlTaskStack[APP_CFG_SYSCTL_TASK_STACK_SIZE/sizeof(UINT32)];
    101          
    102          /* Soft Timer*/
    103          __no_init UINT32 softTmrMsgHHdlrStack[ APP_CFG_SOFT_TMR_STACK_SIZE/sizeof(UINT32) ];
    104          __no_init UINT32 softTmrMsgHHdlrBuff[ APP_CFG_SOFT_TMR_MAX_MSG_IN_MBOX ];
    105          __no_init INT8 nwSbufPktPool[APP_NW_RX_SPKT_POOL_SIZE];
   \                     nwSbufPktPool:
   \   00003800                      DS8 4096
    106          __no_init INT8 nwLbufPktPool[APP_NW_RX_LPKT_POOL_SIZE];
   \                     nwLbufPktPool:
   \   00004800                      DS8 24576

   \                                 In section .noinit, align 4
   \                     softTmrMsgHHdlrStack:
   \   00000000                      DS8 2048

   \                                 In section .noinit, align 4
   \                     softTmrMsgHHdlrBuff:
   \   00000000                      DS8 32

   \                                 In section .noinit, align 4
    107          __no_init INT8 ipStack[APP_NWIF_IP_THREAD_STACK_SIZE];
   \                     ipStack:
   \   00000000                      DS8 4096
    108          __no_init INT8 arpCache[APP_NWIF_IP_THREAD_ARP_CACHE_SIZE];
   \                     arpCache:
   \   00001000                      DS8 1024
    109          
    110          /* Boot indication synchronization mutex*/
    111          GSN_OSAL_SEM_T syscSem;
    112          GSN_OSAL_SEM_T isoTxSem;
    113          
    114          #ifdef  S2W_NCM_SUPPORT_ENABLE
    115          /*Ncm */
    116          VOID *NcmCtx;

   \                                 In section .noinit, align 4
    117          __no_init UINT8 ncmMsgQueueBuf[APP_CFG_NCM_MSG_HDLR_MSG_IN_MBOX * sizeof(GSN_NCM_MSG_T)];
   \                     ncmMsgQueueBuf:
   \   00000000                      DS8 16

   \                                 In section .bss, align 4
   \                     isoTxSem:
   \   00000000                      DS8 28
    118          #endif
    119          
    120          GSN_HIF_STATS_T gsnHifStats;
    121          GSN_WDD_STATS_T gsnWddStats;
   \                     gsnWddStats:
   \   0000001C                      DS8 56
    122          GSN_NWIF_STATS_T gsnNwifStats;
   \                     gsnNwifStats:
   \   00000054                      DS8 44
    123          
    124          extern S2W_WLANINFO_T current_wlan_info;
    125          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
    126          extern GSN_OSAL_SEM_T dSendSem;
    127          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
    128          
    129          GSN_CLK_CTL_CTX_T* gsnBrClkCtlCtx2;
    130          GSN_OTP_T   gsnBrOtpCtx1;
    131          GSN_OTP_MM_CTX_T gsnBrOtpMmCtx1;
    132          
    133          /*****************************************************************************
    134           *Private Function prototypes
    135           ****************************************************************************/
    136          
    137          PRIVATE VOID
    138          AppMainCtx_ThreadEntry(UINT32 arg);
    139          
    140          PRIVATE VOID
    141          AppInit_WddMsgHdlrInit(APP_MAIN_CTX_T *pAppCtx);
    142          
    143          PRIVATE VOID
    144          App_HiInit(APP_MAIN_CTX_T *pAppCtx);
    145          VOID
    146          App_WpaSupplicantInit(APP_MAIN_CTX_T * pAppCtx);
    147          
    148          VOID
    149          App_DefaultIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    150          
    151          PRIVATE VOID
    152          App_WifInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *ifInfo);
    153          
    154          PRIVATE VOID
    155          App_WddInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *ifInfo);
    156          
    157          
    158          PRIVATE VOID
    159          App_NwIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    160          
    161          PRIVATE VOID
    162          App_NwStackInit(APP_MAIN_CTX_T *pAppCtx);
    163          
    164          PRIVATE GSN_STATUS
    165          App_WlanBootReq(APP_MAIN_CTX_T *pAppCtx);
    166          
    167          PUBLIC GSN_STATUS
    168          App_MsgProcess(    APP_MAIN_CTX_T *pAppCtx, UINT32 msgId );
    169          
    170          PRIVATE VOID
    171          App_BsdLayerInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    172          
    173          PRIVATE VOID
    174          App_SoftTimerInit(APP_MAIN_CTX_T *pAppCtx);
    175          
    176          PUBLIC VOID
    177          App_ConnectCb(VOID *ctx, GSN_STATUS status);
    178          PRIVATE VOID
    179          App_SysQualInit();
    180          
    181          PRIVATE VOID
    182          App_SysCtlInit(APP_MAIN_CTX_T *pAppCtx);
    183          VOID
    184          App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    185          PUBLIC UINT32
    186          AppMainCtx_IsDpSlpEnabled(VOID);
    187          
    188          #ifdef S2W_WEB_SERVER
    189          PUBLIC VOID
    190          AppS2w_WebServerStart();
    191          #endif
    192          #ifdef S2W_WEB_PROV
    193          PUBLIC VOID
    194          S2wWebProv_WebProvStart();
    195          #endif
    196          PUBLIC VOID
    197          AppS2w_RtcCfg();
    198          PUBLIC VOID
    199          App_RtcDump(VOID);
    200          
    201          #ifdef  S2W_NCM_SUPPORT_ENABLE
    202          PUBLIC VOID
    203          AppNcm_Init(APP_MAIN_CTX_T *pAppCtx);
    204          VOID
    205          AppNcm_NcmExecuteCb(VOID *cbCtx, VOID* pNcm);
    206          
    207          #endif //NCM_SUPPORT_ENABLE
    208          
    209          extern VOID App_FsInit();
    210          extern	BOOL AppS2wRecv_Filter(GSN_NWIF_CTX_T *pNwIf, UINT32 pktLen,
    211          						GSN_ETHERNET_FRAME_T *pEthFrame
    212          						);
    213          extern S2W_PROFILE_T s2wCurrent;
    214          GSN_CLK_CTL_CTX_T gsnBrClkCtlCtx1;
    215          extern UINT32 romFwImageFlashAddr;
    216          PRIVATE VOID
    217          App_RandomNumGenInit(VOID);
    218          
    219          void GsnHeIf_DriverSuspend();
    220          
    221          #ifdef  S2W_NCM_SUPPORT_ENABLE
    222          extern VOID AppS2wNetConnMgr_Cb(VOID* ctext, VOID* pNcm, GSN_NCM_NOTIF_ID_T status);
    223          
    224          extern BOOL ncmAutoMode;
    225          #endif
    226          
    227          
    228          VOID
    229          App_WaitOnLock(VOID);
    230          extern PUBLIC GSN_STATUS
    231          GsnIsotx_Init(GSN_ISOTX_CTX_T *pIsotxCtx, GSN_ISOTX_INIT_PARAM_T *pInitParam);
    232          extern PUBLIC GSN_STATUS
    233          GsnSysCtl_Init_Patch(GSN_SYS_CTL_CTX_T *pSysCtlCtx, GSN_SYS_CTL_INIT_PARAM_T *pInitParam);
    234          extern PUBLIC VOID
    235          GsnSysCtl_BootReq_Patch(GSN_SYS_CTL_CTX_T *pSysCtlCtx, GSN_SYS_CTL_BOOT_REQ_PARAM_T *pBtReqParm,
    236          					  GSN_SYS_CTL_BOOT_NOTIF_CB_T btIndCb, VOID * btIndCbCtx);
    237          
    238          VOID
    239          GsnHeIf_TrangGetSeed( UINT8* pBuf );
    240          
    241          PRIVATE GSN_SOFT_TMR_T	wlanRespTimeoutTmr;
    242          PRIVATE GSN_SOFT_TMR_HANDLE_T wlanRespTimeoutTmrHndl;
    243          /*****************************************************************************
    244           *Public and Private functions
    245           ****************************************************************************/
    246          

   \                                 In section .text, align 2, keep-with-next
    247          PUBLIC VOID
    248          AppMainCtx_Init(VOID)
    249          {
   \                     AppMainCtx_Init:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    250          	memset((INT8 *)&appCtx, 0, sizeof(appCtx));// REVERT REMOVE
   \   00000002   0xF248 0x14E8      MOVW     R4,#+33256
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable51
   \   0000000A   0xB085             SUB      SP,SP,#+20
   \   0000000C   0x4622             MOV      R2,R4
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       memset
    251          
    252          #ifdef GSN_MEM_TRACE
    253              GsnDynAllChk_Init();
    254          #endif
    255          	/**< Creating the Mailbox to receive messages */
    256          		GsnOsal_QueueCreate( &appMainThreadMsgQueue, 1,
    257          								( UINT8* )appMainThreadMsgQueueBuf,
    258          								sizeof( appMainThreadMsgQueueBuf ));
   \   00000016   0x2080             MOVS     R0,#+128
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0xF505 0x4302      ADD      R3,R5,#+33280
   \   0000001E   0xF505 0x4002      ADD      R0,R5,#+33280
   \   00000022   0x33D4             ADDS     R3,R3,#+212
   \   00000024   0x2201             MOVS     R2,#+1
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x309C             ADDS     R0,R0,#+156
   \   0000002A   0x.... 0x....      BL       _tx_queue_create
    259          
    260              /**< Create the main Application Thread */
    261          #ifdef GSN_DBG_STACK_PATTERN_FILL   /* Only for debug */
    262              memset(appMainCtxThreadStack, 0x5a, sizeof(appMainCtxThreadStack));
    263          #endif
    264          
    265              GsnOsal_ThreadCreate(AppMainCtx_ThreadEntry, &appCtx, &appMainCtxThread,
    266                  "App Main Ctx", APP_MAIN_CTX_THREAD_PRI, (UINT8 *)appMainCtxThreadStack,
    267                  sizeof(appMainCtxThreadStack), GSN_OSAL_THREAD_INITIAL_SUSPENDED);
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x9003             STR      R0,[SP, #+12]
   \   00000032   0xF44F 0x5080      MOV      R0,#+4096
   \   00000036   0x9002             STR      R0,[SP, #+8]
   \   00000038   0x1962             ADDS     R2,R4,R5
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable54
   \   0000003E   0x.... 0x....      ADR.W    R3,`?<Constant "App Main Ctx">`
   \   00000042   0x9001             STR      R0,[SP, #+4]
   \   00000044   0x4629             MOV      R1,R5
   \   00000046   0x2014             MOVS     R0,#+20
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0x.... 0x....      ADR.W    R0,AppMainCtx_ThreadEntry
   \   0000004E   0x.... 0x....      BL       GsnOsal_ThreadCreate
    268          }
   \   00000052   0xB005             ADD      SP,SP,#+20
   \   00000054   0xBD30             POP      {R4,R5,PC}       ;; return
    269          
    270          #ifdef APP_NO_FLASHFETCH 
    271          extern GSN_BYTE_POOL_LINK_T bytePool[];
    272          
    273          #else
    274          extern GSN_BYTE_POOL_LINK_T heapBytePool[];/* create up to 4 byte poola to be used as heap*/
    275          
    276          #endif

   \                                 In section .text, align 2, keep-with-next
    277          VOID 
    278          App_IdleHandlerLoop(VOID)
    279          {
   \                     App_IdleHandlerLoop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    280          #ifdef APP_NO_FLASHFETCH 
    281          
    282              tx_byte_pool_create(&bytePool[2].bPool, NULL, (void*)0x20000400,
    283                                         (UINT32)(1024 * 15) );
    284          
    285          	pGsnBytePoolHead->pNext->pNext = &bytePool[2];
    286              bytePool[2].pNext = NULL;
    287          #else
    288          
    289              tx_byte_pool_create(&heapBytePool[2].bPool, NULL, (void*)(void*)0x20000400,
    290                                      (UINT32)(1024 * 15));
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable52
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable52_1  ;; 0x20000400
   \   0000000A   0xF44F 0x5370      MOV      R3,#+15360
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF104 0x0074      ADD      R0,R4,#+116
   \   00000014   0x.... 0x....      BL       _tx_byte_pool_create
    291              pGsnBytePoolHead->pNext->pNext = &heapBytePool[2];
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable52_2
   \   0000001C   0x6800             LDR      R0,[R0, #+0]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0xF104 0x0170      ADD      R1,R4,#+112
   \   00000024   0x6001             STR      R1,[R0, #+0]
    292              heapBytePool[2].pNext = NULL;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x6720             STR      R0,[R4, #+112]
    293          
    294          #endif
    295          
    296              tx_thread_resume(&appMainCtxThread);
   \   0000002A   0x.... 0x....      LDR.W    R4,??DataTable51
   \   0000002E   0xF504 0x4001      ADD      R0,R4,#+33024
   \   00000032   0x30E8             ADDS     R0,R0,#+232
   \   00000034   0x.... 0x....      BL       _tx_thread_resume
   \   00000038   0x.... 0x....      LDR.W    R5,??DataTable54_1  ;; 0xe000ed10
    297              
    298              while(1)
    299              {
    300          #ifndef APP_NO_FLASHFETCH 
    301              
    302                  if((0 == GsnPwrMgmt_DpSlpActivityGet()) && 
    303                      (AppMainCtx_IsDpSlpEnabled() == 1) &&
    304                      (FALSE  == GsnSq_TaskMonitorStarted()))
   \                     ??App_IdleHandlerLoop_0:
   \   0000003C   0x.... 0x....      BL       GsnPwrMgmt_DpSlpActivityGet
   \   00000040   0x2800             CMP      R0,#+0
   \   00000042   0xBF02             ITTT     EQ 
   \   00000044   0xF646 0x20FC      MOVWEQ   R0,#+27388
   \   00000048   0x5900             LDREQ    R0,[R0, R4]
   \   0000004A   0x2801             CMPEQ    R0,#+1
   \   0000004C   0xD106             BNE.N    ??App_IdleHandlerLoop_1
   \   0000004E   0x.... 0x....      BL       GsnSq_TaskMonitorStarted
   \   00000052   0xB918             CBNZ.N   R0,??App_IdleHandlerLoop_1
    305                  {
    306                      GSN_PWR_MGMT_CM3_SLEEP_DEEP_EN();   
   \   00000054   0x6828             LDR      R0,[R5, #+0]
   \   00000056   0xF040 0x0004      ORR      R0,R0,#0x4
   \   0000005A   0x6028             STR      R0,[R5, #+0]
    307                  }
    308                  __WFI();
   \                     ??App_IdleHandlerLoop_1:
   \   0000005C   0xBF30             WFI      
   \   0000005E   0xE7ED             B.N      ??App_IdleHandlerLoop_0
    309          #endif        
    310              }
    311              
    312          }
    313          

   \                                 In section .text, align 2, keep-with-next
    314          PUBLIC UINT32
    315          AppMainCtx_IsDpSlpEnabled(VOID)
    316          {
    317              return appCtx.dpSleep;
   \                     AppMainCtx_IsDpSlpEnabled:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable54_2
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x4770             BX       LR               ;; return
    318          }
    319          
    320          

   \                                 In section .text, align 2, keep-with-next
    321          PUBLIC VOID
    322          AppMainCtx_TaskNotify(INT32 msg)
    323          {
   \                     AppMainCtx_TaskNotify:
   \   00000000   0xB501             PUSH     {R0,LR}
    324              /**< Signal APP */
    325              GsnOsal_QueuePut(&appMainThreadMsgQueue, (UINT8 *)&msg);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable54_3
   \   0000000A   0x.... 0x....      BL       _tx_queue_send
    326          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    327          

   \                                 In section .text, align 2, keep-with-next
    328          PUBLIC VOID
    329          AppMainCtx_GsnCb(INT32 msg, VOID *context)
    330          {
    331              AppMainCtx_TaskNotify(msg);
   \                     AppMainCtx_GsnCb:
   \   00000000   0x....             B.N      AppMainCtx_TaskNotify
    332          }
    333          
    334          PRIVATE VOID App_Hw_Init()
    335          {
    336              IOMUX_BONDOPT_0_PD_EN_SET(IOMUX);
    337              IOMUX_FLASHSPI_SIO0_PD_EN_SET(IOMUX);
    338              IOMUX_FLASHSPI_SIO1_PD_EN_SET(IOMUX);
    339              IOMUX_FLASHSPI_SIO2_PD_EN_SET(IOMUX);
    340              IOMUX_FLASHSPI_SIO3_PD_EN_SET(IOMUX);
    341              IOMUX_FLASHSPI_CS_PD_EN_SET(IOMUX);
    342              IOMUX_FLASHSPI_SCLK_PD_EN_SET(IOMUX);
    343              IOMUX_BONDOPT_1_PD_EN_SET(IOMUX);
    344              IOMUX_BONDOPT_2_PD_EN_SET(IOMUX);
    345              IOMUX_PROG_MODE120P_PD_EN_SET(IOMUX);
    346              IOMUX_PROG_MODE68P_PD_EN_SET(IOMUX);
    347              RTC_SX_EN_TS_F_CLEAR(RTC);
    348          
    349              GsnIoMux_PullDownDisable(10);     // WPS ~60uA
    350              GsnRtc_Ldo2Disable();
    351              CLKCTL_ACM3_GATE_EN_SET(CLKCTL, 0x3f03);
    352          
    353          #if defined (S2W_I2C_SUPPORT) || defined (S2W_ADC_SUPPORT) || defined (S2W_PWM_SUPPORT)
    354          	CLKCTL_ACM3_BUS_FORCE_SET(CLKCTL);
    355          #endif
    356          
    357          #if defined (S2W_SDIO_ENABLE) || defined (S2W_SDIO_ENABLE_1)
    358              CLKCTL_SDIO_BUSCLK_EN_SET(CLKCTL);
    359              CLKCTL_CREQ_SDIO_IDLE_SET(CLKCTL,1);
    360              CLKCTL_CREQ_SDIO_ACTIVE_SET(CLKCTL,1);
    361              CLKCTL_CREQ_ACM3_DSLEEP_SET(CLKCTL,0);
    362              CLKCTL_SDIO_GATE_FORCE_EN_SET(CLKCTL);
    363          #endif
    364          
    365          #if defined (S2W_FS_SPI_ENABLE ) || defined (S2W_FS_SPI_ENABLE_1)
    366              CLKCTL_AGSPI_BUSCLK_EN_SET (CLKCTL);
    367          #endif
    368          #if defined (S2W_FS_SPI_HI_ENABLE) || defined (S2W_FS_SPI_HI_ENABLE_1)
    369              CLKCTL_ADMA_GATE_FORCE_EN_SET(CLKCTL);
    370          #endif
    371          
    372          
    373          }
    374          /* Define the test threads.  */
    375          

   \                                 In section .text, align 4, keep-with-next
    376          PRIVATE VOID
    377          AppMainCtx_ThreadEntry(UINT32 ctx)
    378          {
   \                     AppMainCtx_ThreadEntry:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB09A             SUB      SP,SP,#+104
    379              /*UINT status;*/
    380              UINT32 msg = 0;
    381              APP_MAIN_CTX_T *pAppCtx;
    382              pAppCtx = (APP_MAIN_CTX_T *)ctx;
   \   00000006   0x4681             MOV      R9,R0
   \   00000008   0x2100             MOVS     R1,#+0
    383          	GsnPwrMgmt_Init(&pAppCtx->pwrMgmtCtx);
   \   0000000A   0xF509 0x40CE      ADD      R0,R9,#+26368
   \   0000000E   0x9104             STR      R1,[SP, #+16]
   \   00000010   0x3020             ADDS     R0,R0,#+32
   \   00000012   0x.... 0x....      BL       GsnPwrMgmt_Init
    384          
    385              GsnClkCtl_Init(&gsnBrClkCtlCtx1);
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable54_4
   \   0000001A   0xF105 0x005C      ADD      R0,R5,#+92
   \   0000001E   0x.... 0x....      BL       GsnClkCtl_Init
    386              AppS2wHal_Cm3ClkCfg();
   \   00000022   0x.... 0x....      BL       AppS2wHal_Cm3ClkCfg
    387          
    388              /* Config RTC */
    389              AppS2w_RtcCfg();
   \   00000026   0x.... 0x....      BL       AppS2w_RtcCfg
    390              
    391              GsnExcpHdlr_Init();
   \   0000002A   0x.... 0x....      BL       GsnExcpHdlr_Init
    392              /* Used for sending messages to main task */
    393              pAppCtx->taskNotifier = AppMainCtx_GsnCb;
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable54_5
    394          
    395          
    396              /*Initialise wif message system*/
    397              App_HiInit(pAppCtx);
   \   00000032   0x.... 0x....      LDR.W    R7,??DataTable54_6
   \   00000036   0xF8C9 0x00B4      STR      R0,[R9, #+180]
   \   0000003A   0xF44F 0x5600      MOV      R6,#+8192
   \   0000003E   0x2008             MOVS     R0,#+8
   \   00000040   0xF8AD 0x0014      STRH     R0,[SP, #+20]
   \   00000044   0xF8AD 0x0016      STRH     R0,[SP, #+22]
   \   00000048   0xF8AD 0x0018      STRH     R0,[SP, #+24]
   \   0000004C   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   \   00000050   0xF8AD 0x001C      STRH     R0,[SP, #+28]
   \   00000054   0xF44F 0x5880      MOV      R8,#+4096
   \   00000058   0x2004             MOVS     R0,#+4
   \   0000005A   0xF8AD 0x001E      STRH     R0,[SP, #+30]
   \   0000005E   0xF8AD 0x0020      STRH     R0,[SP, #+32]
   \   00000062   0xF109 0x04B8      ADD      R4,R9,#+184
   \   00000066   0x2008             MOVS     R0,#+8
   \   00000068   0xF8AD 0x0022      STRH     R0,[SP, #+34]
   \   0000006C   0xF8AD 0x0024      STRH     R0,[SP, #+36]
   \   00000070   0xF8AD 0x0026      STRH     R0,[SP, #+38]
   \   00000074   0xF8CD 0x8030      STR      R8,[SP, #+48]
   \   00000078   0x2002             MOVS     R0,#+2
   \   0000007A   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \   0000007E   0xA905             ADD      R1,SP,#+20
   \   00000080   0x19F0             ADDS     R0,R6,R7
   \   00000082   0x900B             STR      R0,[SP, #+44]
   \   00000084   0x2002             MOVS     R0,#+2
   \   00000086   0x900E             STR      R0,[SP, #+56]
   \   00000088   0x201E             MOVS     R0,#+30
   \   0000008A   0x900D             STR      R0,[SP, #+52]
   \   0000008C   0xF105 0x0008      ADD      R0,R5,#+8
   \   00000090   0x900F             STR      R0,[SP, #+60]
   \   00000092   0x4620             MOV      R0,R4
   \   00000094   0x.... 0x....      BL       GsnHi_Init
    398          
    399              /*Initialise wif System Control message Handler */
    400              App_SysCtlInit(pAppCtx);
   \   00000098   0xF04F 0x0AFF      MOV      R10,#+255
   \   0000009C   0xF88D 0xA000      STRB     R10,[SP, #+0]
   \   000000A0   0x9401             STR      R4,[SP, #+4]
   \   000000A2   0xA900             ADD      R1,SP,#+0
   \   000000A4   0xF509 0x7450      ADD      R4,R9,#+832
   \   000000A8   0x4620             MOV      R0,R4
   \   000000AA   0x.... 0x....      BL       GsnSysif_Init
   \   000000AE   0x9411             STR      R4,[SP, #+68]
   \   000000B0   0xF507 0x5040      ADD      R0,R7,#+12288
   \   000000B4   0x9013             STR      R0,[SP, #+76]
   \   000000B6   0xF88D 0xA040      STRB     R10,[SP, #+64]
   \   000000BA   0xF44F 0x6000      MOV      R0,#+2048
   \   000000BE   0x9014             STR      R0,[SP, #+80]
   \   000000C0   0x2003             MOVS     R0,#+3
   \   000000C2   0x9015             STR      R0,[SP, #+84]
   \   000000C4   0x2008             MOVS     R0,#+8
   \   000000C6   0x.... 0x....      BL       GsnOsal_QueueMsgSizeInWords
   \   000000CA   0xF88D 0x0060      STRB     R0,[SP, #+96]
   \   000000CE   0xF89D 0x0060      LDRB     R0,[SP, #+96]
   \   000000D2   0x0140             LSLS     R0,R0,#+5
   \   000000D4   0x9017             STR      R0,[SP, #+92]
   \   000000D6   0x.... 0x....      BL       MALLOC
   \   000000DA   0x9016             STR      R0,[SP, #+88]
   \   000000DC   0xB180             CBZ.N    R0,??AppMainCtx_ThreadEntry_0
   \   000000DE   0x2003             MOVS     R0,#+3
   \   000000E0   0x9019             STR      R0,[SP, #+100]
   \   000000E2   0xF209 0x5448      ADDW     R4,R9,#+1352
   \   000000E6   0x2000             MOVS     R0,#+0
   \   000000E8   0xF88D 0x0048      STRB     R0,[SP, #+72]
   \   000000EC   0xA910             ADD      R1,SP,#+64
   \   000000EE   0x4620             MOV      R0,R4
   \   000000F0   0x.... 0x....      BL       GsnSysCtl_Init_Patch
   \   000000F4   0x.... 0x....      ADR.W    R0,App_CalibDataWrIndCb
   \   000000F8   0xF8C4 0x0164      STR      R0,[R4, #+356]
   \   000000FC   0xF8C4 0x9168      STR      R9,[R4, #+360]
    401          
    402          	/*Enable WLAN WD*/
    403          	GsnActlWwdog_Enable();
   \                     ??AppMainCtx_ThreadEntry_0:
   \   00000100   0x.... 0x....      BL       GsnActlWwdog_Enable
    404          	
    405              /*Initialise Soft Timer */
    406              App_SoftTimerInit(pAppCtx);
   \   00000104   0xA805             ADD      R0,SP,#+20
   \   00000106   0x.... 0x....      ADR.W    R1,`?<Constant {&"Soft Tmr Msg Handler1", softTmrM`
   \   0000010A   0x221C             MOVS     R2,#+28
   \   0000010C   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000110   0xF509 0x40CE      ADD      R0,R9,#+26368
   \   00000114   0xF100 0x042C      ADD      R4,R0,#+44
   \   00000118   0x2000             MOVS     R0,#+0
   \   0000011A   0x9000             STR      R0,[SP, #+0]
   \   0000011C   0xF509 0x42D0      ADD      R2,R9,#+26624
   \   00000120   0x.... 0x....      ADR.W    R3,App_SoftTmrMmsgHandlr
   \   00000124   0x3224             ADDS     R2,R2,#+36
   \   00000126   0xA905             ADD      R1,SP,#+20
   \   00000128   0x4620             MOV      R0,R4
   \   0000012A   0x.... 0x....      BL       GsnMsgHandler_Create
   \   0000012E   0x4621             MOV      R1,R4
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x.... 0x....      BL       GsnSoftTmr_Init
   \   00000136   0x.... 0x....      LDR.W    R0,??DataTable54_7  ;; 0x41010020
   \   0000013A   0x.... 0x....      BL       GsnTod_Init
   \   0000013E   0x.... 0x....      LDR.W    R0,??DataTable54_8  ;; 0xe000e010
   \   00000142   0x2100             MOVS     R1,#+0
   \   00000144   0x6001             STR      R1,[R0, #+0]
   \   00000146   0x9103             STR      R1,[SP, #+12]
   \   00000148   0x2200             MOVS     R2,#+0
   \   0000014A   0x.... 0x....      ADR.W    R0,App_SysTickCb
   \   0000014E   0x9002             STR      R0,[SP, #+8]
   \   00000150   0x460B             MOV      R3,R1
   \   00000152   0xF640 0x40CC      MOVW     R0,#+3276
   \   00000156   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000015A   0x2101             MOVS     R1,#+1
   \   0000015C   0xF505 0x7084      ADD      R0,R5,#+264
   \   00000160   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000164   0x6068             STR      R0,[R5, #+4]
    407          
    408          	/*Initialise SysQual*/
    409          	App_SysQualInit();
   \   00000166   0x.... 0x....      BL       GsnSq_Init
   \   0000016A   0x221E             MOVS     R2,#+30
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   00000174   0x221E             MOVS     R2,#+30
   \   00000176   0x2100             MOVS     R1,#+0
   \   00000178   0x2002             MOVS     R0,#+2
   \   0000017A   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   0000017E   0x221E             MOVS     R2,#+30
   \   00000180   0x2100             MOVS     R1,#+0
   \   00000182   0x2003             MOVS     R0,#+3
   \   00000184   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   00000188   0x221E             MOVS     R2,#+30
   \   0000018A   0x2100             MOVS     R1,#+0
   \   0000018C   0x2004             MOVS     R0,#+4
   \   0000018E   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   00000192   0x221E             MOVS     R2,#+30
   \   00000194   0x2100             MOVS     R1,#+0
   \   00000196   0x2005             MOVS     R0,#+5
   \   00000198   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   0000019C   0x221E             MOVS     R2,#+30
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x2006             MOVS     R0,#+6
   \   000001A2   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   000001A6   0x2278             MOVS     R2,#+120
   \   000001A8   0x2100             MOVS     R1,#+0
   \   000001AA   0x2007             MOVS     R0,#+7
   \   000001AC   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   000001B0   0x.... 0x....      BL       ?Subroutine1
   \                     ??CrossCallReturnLabel_2:
   \   000001B4   0x22B4             MOVS     R2,#+180
   \   000001B6   0x2100             MOVS     R1,#+0
   \   000001B8   0x2009             MOVS     R0,#+9
   \   000001BA   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   \   000001BE   0xF44F 0x7296      MOV      R2,#+300
   \   000001C2   0x2100             MOVS     R1,#+0
   \   000001C4   0x200A             MOVS     R0,#+10
   \   000001C6   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
    410          
    411              
    412              /* Initialise File System . Note: WLAn uses FS during boot procedure. Keep yje FS initilised 
    413                      before giving the boot request to WLAN*/
    414              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   000001CA   0x.... 0x....      LDR.W    R4,??DataTable55_3  ;; 0x41010004
   \   000001CE   0x6820             LDR      R0,[R4, #+0]
   \   000001D0   0x2801             CMP      R0,#+1
   \   000001D2   0xD006             BEQ.N    ??AppMainCtx_ThreadEntry_1
    415              {
    416          		App_FsInit();
   \   000001D4   0x.... 0x....      BL       App_FsInit
    417          		pAppCtx->fsInit = TRUE;
   \   000001D8   0xF248 0x1070      MOVW     R0,#+33136
   \   000001DC   0x2101             MOVS     R1,#+1
   \   000001DE   0xF800 0x1009      STRB     R1,[R0, R9]
    418              }
    419              /* initialize low level OTP driver */
    420              GSN_OTP_CTX_USES_OBJS_S otpUsesObjs;
    421          
    422              gsnBrClkCtlCtx2 = GsnClkCtl_CtxGet();
   \                     ??AppMainCtx_ThreadEntry_1:
   \   000001E2   0x.... 0x....      BL       GsnClkCtl_CtxGet
   \   000001E6   0x6028             STR      R0,[R5, #+0]
    423              otpUsesObjs.pClkCtl = gsnBrClkCtlCtx2;
   \   000001E8   0x9003             STR      R0,[SP, #+12]
    424              GsnOtp_Init(&gsnBrOtpCtx1, &otpUsesObjs, NULL);
   \   000001EA   0xF105 0x0A90      ADD      R10,R5,#+144
   \   000001EE   0x2200             MOVS     R2,#+0
   \   000001F0   0xA902             ADD      R1,SP,#+8
   \   000001F2   0x4650             MOV      R0,R10
   \   000001F4   0x.... 0x....      BL       GsnOtp_Init
    425          
    426              /* initialize OTP MM module */
    427              GSN_OTP_MM_USES_OBJS_T otpMmUsesObjs;
    428              otpMmUsesObjs.otpDrv = &gsnBrOtpCtx1;
   \   000001F8   0xF8CD 0xA004      STR      R10,[SP, #+4]
    429              GsnOtpMm_Init(&gsnBrOtpMmCtx1, &otpMmUsesObjs, NULL);
   \   000001FC   0x2200             MOVS     R2,#+0
   \   000001FE   0xA901             ADD      R1,SP,#+4
   \   00000200   0xF105 0x001C      ADD      R0,R5,#+28
   \   00000204   0x.... 0x....      BL       GsnOtpMm_Init
    430              /* Give boot request */
    431              App_WlanBootReq(pAppCtx);
   \   00000208   0x4648             MOV      R0,R9
   \   0000020A   0x.... 0x....      BL       App_WlanBootReq
    432          
    433              /*Initialise Wdd Message Handler */
    434              AppInit_WddMsgHdlrInit(pAppCtx);
   \   0000020E   0x2004             MOVS     R0,#+4
   \   00000210   0x9007             STR      R0,[SP, #+28]
   \   00000212   0x9705             STR      R7,[SP, #+20]
   \   00000214   0x9606             STR      R6,[SP, #+24]
   \   00000216   0x2010             MOVS     R0,#+16
   \   00000218   0x.... 0x....      BL       GsnOsal_QueueMsgSizeInWords
   \   0000021C   0xF88D 0x0028      STRB     R0,[SP, #+40]
   \   00000220   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000224   0x0180             LSLS     R0,R0,#+6
   \   00000226   0x9009             STR      R0,[SP, #+36]
   \   00000228   0x.... 0x....      BL       MALLOC
   \   0000022C   0x9008             STR      R0,[SP, #+32]
   \   0000022E   0xB140             CBZ.N    R0,??AppMainCtx_ThreadEntry_2
   \   00000230   0x2004             MOVS     R0,#+4
   \   00000232   0x900B             STR      R0,[SP, #+44]
   \   00000234   0xA905             ADD      R1,SP,#+20
   \   00000236   0x2000             MOVS     R0,#+0
   \   00000238   0x900C             STR      R0,[SP, #+48]
   \   0000023A   0xF609 0x004C      ADDW     R0,R9,#+2124
   \   0000023E   0x.... 0x....      BL       GsnWdd_MsgHdlrInit
    435          
    436              /*Initialize Nw statck. This is a one time initialisation*/
    437              App_NwStackInit(pAppCtx);
   \                     ??AppMainCtx_ThreadEntry_2:
   \   00000242   0x2080             MOVS     R0,#+128
   \   00000244   0x9005             STR      R0,[SP, #+20]
   \   00000246   0xF609 0x1540      ADDW     R5,R9,#+2368
   \   0000024A   0xF507 0x5060      ADD      R0,R7,#+14336
   \   0000024E   0x9006             STR      R0,[SP, #+24]
   \   00000250   0xF8CD 0x801C      STR      R8,[SP, #+28]
   \   00000254   0xF44F 0x60C8      MOV      R0,#+1600
   \   00000258   0x9008             STR      R0,[SP, #+32]
   \   0000025A   0xA905             ADD      R1,SP,#+20
   \   0000025C   0xF44F 0x40C0      MOV      R0,#+24576
   \   00000260   0x900A             STR      R0,[SP, #+40]
   \   00000262   0xF507 0x4090      ADD      R0,R7,#+18432
   \   00000266   0x9009             STR      R0,[SP, #+36]
   \   00000268   0x4628             MOV      R0,R5
   \   0000026A   0x.... 0x....      BL       GsnNw_Init
   \   0000026E   0x200A             MOVS     R0,#+10
   \   00000270   0x.... 0x....      BL       _nx_system_ticks_per_second_update
    438          
    439              App_Hw_Init();
   \   00000274   0x.... 0x....      LDR.W    R6,??DataTable55_4  ;; 0x40160200
   \   00000278   0x6870             LDR      R0,[R6, #+4]
   \   0000027A   0xF040 0x0040      ORR      R0,R0,#0x40
   \   0000027E   0x6070             STR      R0,[R6, #+4]
   \   00000280   0x6870             LDR      R0,[R6, #+4]
   \   00000282   0xF440 0x5080      ORR      R0,R0,#0x1000
   \   00000286   0x6070             STR      R0,[R6, #+4]
   \   00000288   0x6870             LDR      R0,[R6, #+4]
   \   0000028A   0xF440 0x5000      ORR      R0,R0,#0x2000
   \   0000028E   0x6070             STR      R0,[R6, #+4]
   \   00000290   0x6870             LDR      R0,[R6, #+4]
   \   00000292   0xF440 0x4080      ORR      R0,R0,#0x4000
   \   00000296   0x6070             STR      R0,[R6, #+4]
   \   00000298   0x6870             LDR      R0,[R6, #+4]
   \   0000029A   0xF440 0x4000      ORR      R0,R0,#0x8000
   \   0000029E   0x6070             STR      R0,[R6, #+4]
   \   000002A0   0x6870             LDR      R0,[R6, #+4]
   \   000002A2   0xF440 0x6080      ORR      R0,R0,#0x400
   \   000002A6   0x6070             STR      R0,[R6, #+4]
   \   000002A8   0x6870             LDR      R0,[R6, #+4]
   \   000002AA   0xF440 0x6000      ORR      R0,R0,#0x800
   \   000002AE   0x6070             STR      R0,[R6, #+4]
   \   000002B0   0x6870             LDR      R0,[R6, #+4]
   \   000002B2   0xF040 0x0080      ORR      R0,R0,#0x80
   \   000002B6   0x6070             STR      R0,[R6, #+4]
   \   000002B8   0x6870             LDR      R0,[R6, #+4]
   \   000002BA   0xF440 0x7080      ORR      R0,R0,#0x100
   \   000002BE   0x6070             STR      R0,[R6, #+4]
   \   000002C0   0x6870             LDR      R0,[R6, #+4]
   \   000002C2   0xF440 0x1000      ORR      R0,R0,#0x200000
   \   000002C6   0x6070             STR      R0,[R6, #+4]
   \   000002C8   0x6870             LDR      R0,[R6, #+4]
   \   000002CA   0xF440 0x0080      ORR      R0,R0,#0x400000
   \   000002CE   0x6070             STR      R0,[R6, #+4]
   \   000002D0   0x.... 0x....      LDR.W    R0,??DataTable55_5  ;; 0x4100039c
   \   000002D4   0x6801             LDR      R1,[R0, #+0]
   \   000002D6   0x0849             LSRS     R1,R1,#+1
   \   000002D8   0x0049             LSLS     R1,R1,#+1
   \   000002DA   0x6001             STR      R1,[R0, #+0]
   \   000002DC   0x2001             MOVS     R0,#+1
   \   000002DE   0x.... 0x....      BL       _tx_thread_interrupt_control
   \   000002E2   0x6831             LDR      R1,[R6, #+0]
   \   000002E4   0xF441 0x6180      ORR      R1,R1,#0x400
   \   000002E8   0x6031             STR      R1,[R6, #+0]
   \   000002EA   0x.... 0x....      BL       _tx_thread_interrupt_control
   \   000002EE   0x2103             MOVS     R1,#+3
   \   000002F0   0x.... 0x....      LDR.W    R0,??DataTable55_6  ;; 0x410002a8
   \   000002F4   0x6001             STR      R1,[R0, #+0]
   \   000002F6   0x2102             MOVS     R1,#+2
   \   000002F8   0x6001             STR      R1,[R0, #+0]
   \   000002FA   0xF643 0x7103      MOVW     R1,#+16131
   \   000002FE   0x.... 0x....      LDR.W    R0,??DataTable55_7  ;; 0x40070000
   \   00000302   0x6001             STR      R1,[R0, #+0]
   \   00000304   0x6801             LDR      R1,[R0, #+0]
   \   00000306   0xF041 0x0110      ORR      R1,R1,#0x10
   \   0000030A   0x6001             STR      R1,[R0, #+0]
    440              
    441              /* Initialise Wpa Suppliacnt*/
    442              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   0000030C   0x6820             LDR      R0,[R4, #+0]
   \   0000030E   0x2801             CMP      R0,#+1
   \   00000310   0xBF18             IT       NE 
   \   00000312   0x.... 0x....      BLNE     GsnHeIf_DriverDeinit
    443              {
    444                  GsnHeIf_DriverDeinit();
    445              }
    446              App_WpaSupplicantInit(pAppCtx);
   \   00000316   0x4648             MOV      R0,R9
   \   00000318   0x.... 0x....      BL       App_WpaSupplicantInit
    447          
    448              /*initialize the app profile*/
    449              AppS2w_ProfileInit();
   \   0000031C   0x.... 0x....      BL       AppS2w_ProfileInit
    450          
    451              /*Initialize C library random number generator*/
    452              App_RandomNumGenInit();
   \   00000320   0x2000             MOVS     R0,#+0
   \   00000322   0x9000             STR      R0,[SP, #+0]
   \   00000324   0x.... 0x....      LDR.W    R6,??DataTable55_8  ;; 0x41010198
   \   00000328   0x6820             LDR      R0,[R4, #+0]
   \   0000032A   0x2801             CMP      R0,#+1
   \   0000032C   0xD006             BEQ.N    ??AppMainCtx_ThreadEntry_3
   \   0000032E   0x2104             MOVS     R1,#+4
   \   00000330   0xA800             ADD      R0,SP,#+0
   \   00000332   0x.... 0x....      BL       GsnHeIf_TrangGenerate
   \   00000336   0x9800             LDR      R0,[SP, #+0]
   \   00000338   0x6030             STR      R0,[R6, #+0]
   \   0000033A   0xE003             B.N      ??AppMainCtx_ThreadEntry_4
   \                     ??AppMainCtx_ThreadEntry_3:
   \   0000033C   0x6830             LDR      R0,[R6, #+0]
   \   0000033E   0x1C40             ADDS     R0,R0,#+1
   \   00000340   0x6030             STR      R0,[R6, #+0]
   \   00000342   0x9000             STR      R0,[SP, #+0]
   \                     ??AppMainCtx_ThreadEntry_4:
   \   00000344   0x9800             LDR      R0,[SP, #+0]
   \   00000346   0x.... 0x....      BL       srand
    453              
    454              /* turn off cryopto engine. Will be turned on need bases. */
    455              //GsnHeIf_DriverSuspend();
    456              
    457              App_BsdLayerInit(pAppCtx, &pAppCtx->if0);
   \   0000034A   0xA805             ADD      R0,SP,#+20
   \   0000034C   0x2114             MOVS     R1,#+20
   \   0000034E   0x.... 0x....      BL       __aeabi_memclr4
   \   00000352   0xF509 0x50A3      ADD      R0,R9,#+5216
   \   00000356   0x9005             STR      R0,[SP, #+20]
   \   00000358   0x2101             MOVS     R1,#+1
   \   0000035A   0x4628             MOV      R0,R5
   \   0000035C   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   00000360   0x9006             STR      R0,[SP, #+24]
   \   00000362   0xA905             ADD      R1,SP,#+20
   \   00000364   0x2000             MOVS     R0,#+0
   \   00000366   0x9007             STR      R0,[SP, #+28]
   \   00000368   0x9008             STR      R0,[SP, #+32]
   \   0000036A   0x9009             STR      R0,[SP, #+36]
   \   0000036C   0xF509 0x601C      ADD      R0,R9,#+2496
   \   00000370   0x.... 0x....      BL       GsnNwif_BsdInitialize
    458          
    459          #ifdef  S2W_NCM_SUPPORT_ENABLE
    460              AppNcm_Init(pAppCtx);
   \   00000374   0x4648             MOV      R0,R9
   \   00000376   0x.... 0x....      BL       AppNcm_Init
    461          #endif
    462          
    463              AppS2wHal_Register(pAppCtx->taskNotifier, pAppCtx);
   \   0000037A   0xF8D9 0x00B4      LDR      R0,[R9, #+180]
   \   0000037E   0x4649             MOV      R1,R9
   \   00000380   0x.... 0x....      BL       AppS2wHal_Register
    464          
    465              /*Initialise an interface on device Index 0 of Wlan Nw type STA*/
    466              AppS2wHal_AppEntry(0);
   \   00000384   0x2000             MOVS     R0,#+0
   \   00000386   0x.... 0x....      BL       AppS2wHal_AppEntry
    467              
    468          #ifdef S2W_EMU
    469              /*Initialise EMU*/
    470              AppEmu_Init(&(pAppCtx->appEmuCtx.emu),AppEmu_Callback,pAppCtx);  
    471          #endif
    472              /**< Handle events forever */
    473              while( TRUE )
    474              {
    475                  /**< wait on message queue */
    476                  GsnOsal_QueueGet( &appMainThreadMsgQueue, ( UINT8* )&msg,
    477                                      GSN_OSAL_WAIT_FOREVER );
   \                     ??AppMainCtx_ThreadEntry_5:
   \   0000038A   0xF04F 0x32FF      MOV      R2,#-1
   \   0000038E   0xA904             ADD      R1,SP,#+16
   \   00000390   0x.... 0x....      LDR.W    R0,??DataTable54_3
   \   00000394   0x.... 0x....      BL       _tx_queue_receive
    478                  GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID, msg);
   \   00000398   0x9904             LDR      R1,[SP, #+16]
   \   0000039A   0x.... 0x....      BL       ??Subroutine7_0
    479                  /**< Process the message */
    480                  App_MsgProcess(pAppCtx, msg);
   \                     ??CrossCallReturnLabel_16:
   \   0000039E   0x9904             LDR      R1,[SP, #+16]
   \   000003A0   0x4648             MOV      R0,R9
   \   000003A2   0x.... 0x....      BL       App_MsgProcess
    481                  GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \   000003A6   0x.... 0x....      BL       ?Subroutine5
    482              }
   \                     ??CrossCallReturnLabel_13:
   \   000003AA   0xE7EE             B.N      ??AppMainCtx_ThreadEntry_5
    483          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x2100             MOVS     R1,#+0
   \                     ??Subroutine7_0:
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x.... 0x....      B.W      GsnSq_TaskMonitorStart

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2008             MOVS     R0,#+8
   \   00000002   0x.... 0x....      B.W      GsnSq_TaskMonitorStop
    484          
    485          #ifdef  S2W_NCM_SUPPORT_ENABLE

   \                                 In section .text, align 2, keep-with-next
    486          PUBLIC VOID
    487          AppNcm_Init(APP_MAIN_CTX_T *pAppCtx)
    488          {
   \                     AppNcm_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB088             SUB      SP,SP,#+32
    489          	GSN_NCM_INIT_PARAM_T ncmInitParam;
    490          	ncmInitParam.pNwif = &pAppCtx->if0.nwifCtx;
   \   00000006   0xF504 0x50A0      ADD      R0,R4,#+5120
   \   0000000A   0x3050             ADDS     R0,R0,#+80
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    491          	ncmInitParam.pWdd = &pAppCtx->if0.wddCtx;
    492          	ncmInitParam.msgQueueBuff = ( UINT8* )ncmMsgQueueBuf;
    493          	ncmInitParam.msgQueueBuffSize = sizeof(ncmMsgQueueBuf);
    494          	ncmInitParam.execMsgPostCb = AppNcm_NcmExecuteCb;
    495          	ncmInitParam.execMsgPostCbCtx = NULL;
    496          	ncmInitParam.notifCb = AppS2wNetConnMgr_Cb;
    497          	ncmInitParam.notifCbCtx = NULL;
    498          	GsnOsal_SemCreate(&pAppCtx->ncmOpsync, 0); 
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xF604 0x60E0      ADDW     R0,R4,#+3808
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55_9
   \   0000001A   0x9002             STR      R0,[SP, #+8]
   \   0000001C   0x2010             MOVS     R0,#+16
   \   0000001E   0x9003             STR      R0,[SP, #+12]
   \   00000020   0x.... 0x....      ADR.W    R0,AppNcm_NcmExecuteCb
   \   00000024   0x9004             STR      R0,[SP, #+16]
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9005             STR      R0,[SP, #+20]
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable55_10
   \   0000002E   0x9006             STR      R0,[SP, #+24]
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9007             STR      R0,[SP, #+28]
   \   00000034   0xF504 0x40EA      ADD      R0,R4,#+29952
   \   00000038   0x3008             ADDS     R0,R0,#+8
   \   0000003A   0x.... 0x....      BL       GsnOsal_SemCreate
    499          	GsnNcm_Init(&pAppCtx->appNwConnMgrCtx, &ncmInitParam);
   \   0000003E   0xF504 0x40DA      ADD      R0,R4,#+27904
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x3050             ADDS     R0,R0,#+80
   \   00000046   0x.... 0x....      BL       GsnNcm_Init
    500          #ifdef S2W_NCM_ROAMING_SUPPORT 					
    501               GsnNcm_RoamInit(&(pAppCtx->appNwConnMgrCtx));
    502          #endif
    503          }
   \   0000004A   0xB008             ADD      SP,SP,#+32
   \   0000004C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
    504          VOID
    505          AppNcm_NcmExecuteCb(VOID *cbCtx, VOID* pNcm)
    506          {
    507                  NcmCtx = pNcm;
   \                     AppNcm_NcmExecuteCb:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_11
   \   00000004   0x6001             STR      R1,[R0, #+0]
    508          	AppMainCtx_TaskNotify(APP_EVENT_NCM_EXECUTE);
   \   00000006   0x2024             MOVS     R0,#+36
   \   00000008   0x....             B.N      AppMainCtx_TaskNotify
    509          }

   \                                 In section .bss, align 4
   \                     NcmCtx:
   \   00000000                      DS8 4
    510          #endif //NCM_SUPPORT_ENABLE
    511          
    512          GSN_OSAL_SEM_T AppWddDisconSem;
   \                     AppWddDisconSem:
   \   00000004                      DS8 28

   \                                 In section .text, align 2, keep-with-next
    513          void
    514          AppS2w_WddDisconCb(VOID *ctx, GSN_STATUS status)
    515          {
    516          	GsnOsal_SemRelease(&AppWddDisconSem);
   \                     AppS2w_WddDisconCb:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_12
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease
    517          }
    518          
    519          VOID
    520          App_InterfaceStop(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    521          
    522          VOID
    523          App_IfReinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    524          
    525          #ifdef S2W_SECURITY_WPS_ENABLE
    526          VOID
    527          AppS2w_WpsAssociateNotify(VOID *pCtx/*, INT32 status*/);
    528          #endif
    529          

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x225A             MOVS     R2,#+90
   \                     ??Subroutine1_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x.... 0x....      B.W      GsnSq_TaskMonitorRegister

   \                                 In section .text, align 4, keep-with-next
    530          PUBLIC GSN_STATUS
    531          App_MsgProcess(    APP_MAIN_CTX_T *pAppCtx, UINT32 msgId )
    532          {
   \                     App_MsgProcess:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xF5AD 0x6DAC      SUB      SP,SP,#+1376
   \   00000008   0x4604             MOV      R4,R0
    533              //GSN_STATUS retCode = GSN_FAILURE;
    534          	UINT8 status;
    535          	UINT8 macAddr[S2W_MAC_ADDR_SIZE] = {0};
   \   0000000A   0xA800             ADD      R0,SP,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x2300             MOVS     R3,#+0
   \   00000010   0xC00C             STM      R0!,{R2,R3}
    536          
    537              switch ( msgId )
   \   00000012   0x.... 0x....      LDR.W    R6,??DataTable55_13
   \   00000016   0x.... 0x....      LDR.W    R5,??DataTable55_14
   \   0000001A   0x6832             LDR      R2,[R6, #+0]
   \   0000001C   0x.... 0x....      LDR.W    R7,??DataTable55_11
   \   00000020   0x.... 0x....      LDR.W    R8,??DataTable55_15
   \   00000024   0x1F09             SUBS     R1,R1,#+4
   \   00000026   0xF646 0x30C4      MOVW     R0,#+27588
   \   0000002A   0xF646 0x432C      MOVW     R3,#+27692
   \   0000002E   0x292A             CMP      R1,#+42
   \   00000030   0xD833             BHI.N    ??App_MsgProcess_1
   \   00000032   0xE8DF 0xF011      TBH      [PC, R1, LSL #+1]
   \                     ??App_MsgProcess_0:
   \   00000036   0x0051 0x01B9      DC16     0x51,0x1B9,0x1B9,0x4F
   \              0x01B9 0x004F
   \   0000003E   0x00EF 0x01B9      DC16     0xEF,0x1B9,0x1B9,0x1B9
   \              0x01B9 0x01B9
   \   00000046   0x01B9 0x0187      DC16     0x1B9,0x187,0x1B9,0x1B9
   \              0x01B9 0x01B9
   \   0000004E   0x01B9 0x017A      DC16     0x1B9,0x17A,0x1B9,0x1B9
   \              0x01B9 0x01B9
   \   00000056   0x01B9 0x0177      DC16     0x1B9,0x177,0x172,0x5F
   \              0x0172 0x005F
   \   0000005E   0x00E3 0x0113      DC16     0xE3,0x113,0x42,0x2B
   \              0x0042 0x002B
   \   00000066   0x003F 0x002E      DC16     0x3F,0x2E,0x33,0xEC
   \              0x0033 0x00EC
   \   0000006E   0x00F4 0x00FA      DC16     0xF4,0xFA,0x1B9,0x1B9
   \              0x01B9 0x01B9
   \   00000076   0x005B 0x0055      DC16     0x5B,0x55,0x1B9,0xF7
   \              0x01B9 0x00F7
   \   0000007E   0x01B9 0x0192      DC16     0x1B9,0x192,0x199,0x1A0
   \              0x0199 0x01A0
   \   00000086   0x01A3 0x01A8      DC16     0x1A3,0x1A8,0x1B0
   \              0x01B0       
    538              {
    539          #ifdef S2W_WEB_SERVER
    540                  case APP_NOTIFICATION_SRVR_ONLY_STOP:
    541                  {
    542                  	pAppCtx->webServerStatus=STOP;
   \                     ??App_MsgProcess_2:
   \   0000008C   0x2103             MOVS     R1,#+3
   \   0000008E   0x5501             STRB     R1,[R0, R4]
    543                      AppS2wHttpd_Stop();
   \   00000090   0xE01D             B.N      ??App_MsgProcess_3
    544                      break;
    545                  }
    546                  case APP_NOTIFICATION_SRVR_START:
    547                  {
    548                  	pAppCtx->webServerStatus=START;
   \                     ??App_MsgProcess_4:
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x5501             STRB     R1,[R0, R4]
    549                      AppS2w_WebServerStart();
   \   00000096   0x.... 0x....      BL       AppS2w_WebServerStart
    550                      break;
   \                     ??App_MsgProcess_1:
   \   0000009A   0xE185             B.N      ??App_MsgProcess_5
    551                  }
    552          #endif
    553          #ifdef S2W_WEB_PROV
    554          		case APP_NOTIFICATION_PROV_START:
    555          		{
    556          			pAppCtx->webProvStatus=START;
   \                     ??App_MsgProcess_6:
   \   0000009C   0x2001             MOVS     R0,#+1
   \   0000009E   0x5518             STRB     R0,[R3, R4]
    557          			S2wWebProv_WebProvStart();
   \   000000A0   0x.... 0x....      BL       S2wWebProv_WebProvStart
    558          			if((s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP))
   \   000000A4   0x7928             LDRB     R0,[R5, #+4]
   \   000000A6   0x2806             CMP      R0,#+6
   \   000000A8   0xD1F7             BNE.N    ??App_MsgProcess_1
    559          			{
    560          #ifdef S2W_NCM_SUPPORT_ENABLE                          
    561          				// update the ncmautoconn flag to start it automatically once the provision done
    562          				pAppCtx->ncmAutoConEn = TRUE;
   \   000000AA   0xF504 0x40EA      ADD      R0,R4,#+29952
   \   000000AE   0x2101             MOVS     R1,#+1
   \   000000B0   0x6001             STR      R1,[R0, #+0]
    563          #endif                                
    564          #ifdef  S2W_MDNS_ENABLE
    565          				// start the mdns
    566          				AppS2wHal_MdnsInit(NULL);
   \   000000B2   0xE152             B.N      ??App_MsgProcess_7
    567          				// register the mdns names and announce the mdns services
    568          				AppS2wCmd_MdnsAnnounceAll(NULL);
    569          #endif
    570             		    }
    571          			break;
    572          		}
    573          		case APP_NOTIFICATION_PROV_ONLY_STOP:
    574          		{
    575          			pAppCtx->webProvStatus=STOP;
   \                     ??App_MsgProcess_8:
   \   000000B4   0x2003             MOVS     R0,#+3
   \   000000B6   0x5518             STRB     R0,[R3, R4]
    576          			AppS2wHttpd_Stop();
   \   000000B8   0xE009             B.N      ??App_MsgProcess_3
    577          			break;
    578          		}
    579          #endif
    580          #if defined(S2W_WEB_SERVER) || defined(S2W_WEB_PROV)
    581                  case APP_NOTIFICATION_SRVR_STOP:
    582                  {
    583          #ifdef S2W_WEB_PROV
    584                      if(pAppCtx->webProvStatus== RUNNING)
   \                     ??App_MsgProcess_9:
   \   000000BA   0x5D19             LDRB     R1,[R3, R4]
   \   000000BC   0x2902             CMP      R1,#+2
   \   000000BE   0xBF04             ITT      EQ 
   \   000000C0   0x2103             MOVEQ    R1,#+3
   \   000000C2   0x5519             STRBEQ   R1,[R3, R4]
    585                      {
    586                      	pAppCtx->webProvStatus=STOP;
    587                      }
    588          #endif
    589          #ifdef S2W_WEB_SERVER
    590                      if(pAppCtx->webServerStatus== RUNNING)
   \   000000C4   0x5D01             LDRB     R1,[R0, R4]
   \   000000C6   0x2902             CMP      R1,#+2
   \   000000C8   0xBF04             ITT      EQ 
   \   000000CA   0x2103             MOVEQ    R1,#+3
   \   000000CC   0x5501             STRBEQ   R1,[R0, R4]
    591                      {
    592                      	pAppCtx->webServerStatus=STOP;
    593                      }
    594          #endif
    595                      AppS2wHttpd_Stop();
   \                     ??App_MsgProcess_3:
   \   000000CE   0x.... 0x....      BL       AppS2wHttpd_Stop
    596                      break;
   \   000000D2   0xE169             B.N      ??App_MsgProcess_5
    597                  }
    598          #endif
    599                  case APP_EVENT_NW_LINK_FAILURE:
    600                      AppS2wProcess_EventNotify(0);
   \                     ??App_MsgProcess_10:
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xE000             B.N      ??App_MsgProcess_11
    601                      break;
    602          
    603                  case APP_EVENT_SYNC_LOSS_INDICATION:
    604                       AppS2wProcess_EventNotify(1);
   \                     ??App_MsgProcess_12:
   \   000000D8   0x2001             MOVS     R0,#+1
   \                     ??App_MsgProcess_11:
   \   000000DA   0x.... 0x....      BL       AppS2wProcess_EventNotify
    605                      break;
   \   000000DE   0xE163             B.N      ??App_MsgProcess_5
    606          #ifdef  S2W_MDNS_ENABLE
    607                  case APP_EVENT_MDNS_EXECUTE:
    608                       GsnMdns_Execute(&pAppCtx->mdns);
   \                     ??App_MsgProcess_13:
   \   000000E0   0xF504 0x40D8      ADD      R0,R4,#+27648
   \   000000E4   0x3030             ADDS     R0,R0,#+48
   \   000000E6   0x.... 0x....      BL       GsnMdns_Execute
    609                      break;            
   \   000000EA   0xE15D             B.N      ??App_MsgProcess_5
    610          #endif
    611                  
    612          #ifdef  S2W_NCM_SUPPORT_ENABLE
    613                  case APP_EVENT_NCM_EXECUTE:
    614                    GsnNcm_Execute((GSN_NCM_CTX_T*)NcmCtx);
   \                     ??App_MsgProcess_14:
   \   000000EC   0x6838             LDR      R0,[R7, #+0]
   \   000000EE   0x.... 0x....      BL       GsnNcm_Execute
    615                      break;
   \   000000F2   0xE159             B.N      ??App_MsgProcess_5
    616          		case APP_EVENT_NCM_L2CONNECT:
    617          		{
    618                  	// get the ncm config and fill
    619          			GSN_NCM_CONFIG_T gNwConnConfig;
    620          			GsnNcm_ConfigGet(&s2wappMainTaskCtxt->appNwConnMgrCtx, &gNwConnConfig);
   \                     ??App_MsgProcess_15:
   \   000000F4   0xF502 0x40DA      ADD      R0,R2,#+27904
   \   000000F8   0xA91E             ADD      R1,SP,#+120
   \   000000FA   0x3050             ADDS     R0,R0,#+80
   \   000000FC   0x.... 0x....      BL       GsnNcm_ConfigGet
    621          			/* copy the ssid and len  and channel    -client  */
    622          			if(ncmAutoMode == 0) 
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable55_16
   \   00000104   0x.... 0x....      LDR.W    R6,??DataTable55_17
   \   00000108   0x7800             LDRB     R0,[R0, #+0]
   \   0000010A   0xF89D 0x2078      LDRB     R2,[SP, #+120]
   \   0000010E   0x2800             CMP      R0,#+0
   \   00000110   0xF10D 0x049F      ADD      R4,SP,#+159
   \   00000114   0xF10D 0x0179      ADD      R1,SP,#+121
   \   00000118   0xF106 0x000A      ADD      R0,R6,#+10
   \   0000011C   0xD13C             BNE.N    ??App_MsgProcess_16
    623          			{
    624          				memcpy(current_wlan_info.ssid,gNwConnConfig.wlanCfg.ssid.array,
    625          					  gNwConnConfig.wlanCfg.ssid.length );
   \   0000011E   0x.... 0x....      BL       memcpy
    626          				current_wlan_info.ssidLen = gNwConnConfig.wlanCfg.ssid.length;
   \   00000122   0xF89D 0x0078      LDRB     R0,[SP, #+120]
   \   00000126   0x70B0             STRB     R0,[R6, #+2]
    627          
    628          	/* associated ch will be at 0 index                */
    629          				current_wlan_info.channel = gNwConnConfig.wlanCfg.channel[0];
    630          
    631          				memcpy(current_wlan_info.bssid, gNwConnConfig.wlanCfg.bssid.array,GSN_WLAN_MAC_ADDR_LEN);
   \   00000128   0x2206             MOVS     R2,#+6
   \   0000012A   0xF89D 0x009F      LDRB     R0,[SP, #+159]
   \   0000012E   0x7070             STRB     R0,[R6, #+1]
   \   00000130   0xF10D 0x0199      ADD      R1,SP,#+153
   \   00000134   0x1D30             ADDS     R0,R6,#+4
   \   00000136   0x.... 0x....      BL       memcpy
    632          				current_wlan_info.validBssid = 1;
   \   0000013A   0x2001             MOVS     R0,#+1
   \   0000013C   0x70F0             STRB     R0,[R6, #+3]
    633          				current_wlan_info.mode = S2W_WLANDATA_MODE_INFRA;
   \   0000013E   0x7030             STRB     R0,[R6, #+0]
    634          				current_wlan_info.authMode = gNwConnConfig.wlanCfg.securityCfg.mode;
   \   00000140   0x7E60             LDRB     R0,[R4, #+25]
   \   00000142   0xF886 0x002A      STRB     R0,[R6, #+42]
    635          			  	if(gNwConnConfig.wlanCfg.securityCfg.mode == GSN_WDD_SEC_MODE_WEP)
   \   00000146   0x7E60             LDRB     R0,[R4, #+25]
   \   00000148   0x2804             CMP      R0,#+4
   \   0000014A   0xD106             BNE.N    ??App_MsgProcess_17
    636          				{
    637          					if(gNwConnConfig.wlanCfg.securityCfg.wepConfig.authType == GSN_WDD_SEC_WEP_SHARED)
   \   0000014C   0x7EA0             LDRB     R0,[R4, #+26]
   \   0000014E   0x2801             CMP      R0,#+1
   \   00000150   0xBF0C             ITE      EQ 
   \   00000152   0x2002             MOVEQ    R0,#+2
   \   00000154   0x2001             MOVNE    R0,#+1
    638          					{
    639          				  		current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_SHARED;
    640          					}
    641          					else
    642          					{
    643          					  current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_OPEN;
   \   00000156   0xF886 0x002A      STRB     R0,[R6, #+42]
    644          					}
    645          				}
    646          
    647          				s2wCurrent.security.wpa.pskValid = gNwConnConfig.wlanCfg.securityCfg.pskConfig.pskValid;
   \                     ??App_MsgProcess_17:
   \   0000015A   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   0000015E   0xF885 0x00F4      STRB     R0,[R5, #+244]
    648          			    if(gNwConnConfig.wlanCfg.securityCfg.pskConfig.pskValid)
   \   00000162   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD015             BEQ.N    ??App_MsgProcess_18
    649          			    {
    650          					memcpy(s2wCurrent.security.wpa.psk,
    651          			           gNwConnConfig.wlanCfg.securityCfg.pskConfig.psk, GSN_WDD_SEC_PMK_LEN);
   \   0000016A   0x2220             MOVS     R2,#+32
   \   0000016C   0xA943             ADD      R1,SP,#+268
   \   0000016E   0xF105 0x00F5      ADD      R0,R5,#+245
   \   00000172   0x.... 0x....      BL       memcpy
    652          					memset(s2wCurrent.security.wpa.ssid,0,S2W_MAX_SSID_LEN);
   \   00000176   0xF205 0x1415      ADDW     R4,R5,#+277
   \   0000017A   0x2220             MOVS     R2,#+32
   \   0000017C   0x.... 0x....      BL       ??Subroutine2_0
    653          			    	memcpy(s2wCurrent.security.wpa.ssid,gNwConnConfig.wlanCfg.ssid.array,
    654          			            gNwConnConfig.wlanCfg.ssid.length );
   \                     ??CrossCallReturnLabel_3:
   \   00000180   0xF89D 0x2078      LDRB     R2,[SP, #+120]
   \   00000184   0xF10D 0x0179      ADD      R1,SP,#+121
   \   00000188   0x4620             MOV      R0,R4
   \   0000018A   0x.... 0x....      BL       memcpy
    655          			            s2wCurrent.security.wpa.ssidLen = gNwConnConfig.wlanCfg.ssid.length;
   \   0000018E   0xF89D 0x0078      LDRB     R0,[SP, #+120]
   \   00000192   0xF885 0x0135      STRB     R0,[R5, #+309]
   \                     ??App_MsgProcess_18:
   \   00000196   0xE107             B.N      ??App_MsgProcess_5
    656          			  	}
    657          			}
    658                      else
    659                      {
    660                      	memcpy(current_wlan_info.ssid,gNwConnConfig.wlanCfg.ssid.array,
    661          			    gNwConnConfig.wlanCfg.ssid.length );
   \                     ??App_MsgProcess_16:
   \   00000198   0x.... 0x....      BL       memcpy
    662          			  	current_wlan_info.ssidLen = gNwConnConfig.wlanCfg.ssid.length;
    663          			  	current_wlan_info.channel = gNwConnConfig.wlanCfg.channel[0];
    664          			  	memcpy(current_wlan_info.bssid, gNwConnConfig.wlanCfg.bssid.array,GSN_WLAN_MAC_ADDR_LEN);
   \   0000019C   0x2206             MOVS     R2,#+6
   \   0000019E   0xF89D 0x0078      LDRB     R0,[SP, #+120]
   \   000001A2   0x70B0             STRB     R0,[R6, #+2]
   \   000001A4   0xF10D 0x0199      ADD      R1,SP,#+153
   \   000001A8   0xF89D 0x009F      LDRB     R0,[SP, #+159]
   \   000001AC   0x7070             STRB     R0,[R6, #+1]
   \   000001AE   0x1D30             ADDS     R0,R6,#+4
   \   000001B0   0x.... 0x....      BL       memcpy
    665          			  	current_wlan_info.validBssid = 1;
   \   000001B4   0x2001             MOVS     R0,#+1
   \   000001B6   0x70F0             STRB     R0,[R6, #+3]
   \   000001B8   0x7928             LDRB     R0,[R5, #+4]
   \   000001BA   0x2806             CMP      R0,#+6
   \   000001BC   0xBF16             ITET     NE 
   \   000001BE   0x2802             CMPNE    R0,#+2
   \   000001C0   0x2002             MOVEQ    R0,#+2
   \   000001C2   0x2003             MOVNE    R0,#+3
    666          			  	if((S2W_WLANDATA_MODE_PROV_AP == s2wCurrent.mode) || (S2W_WLANDATA_MODE_AP == s2wCurrent.mode ))					
    667          			    	current_wlan_info.mode = 2;
    668          			  	else
    669          					current_wlan_info.mode = S2W_WLANDATA_MODE_ADHOC;
   \   000001C4   0x7030             STRB     R0,[R6, #+0]
    670          
    671          				current_wlan_info.authMode = gNwConnConfig.wlanCfg.securityCfg.mode;
   \   000001C6   0x7E60             LDRB     R0,[R4, #+25]
   \   000001C8   0xF886 0x002A      STRB     R0,[R6, #+42]
    672          			  	if(gNwConnConfig.wlanCfg.securityCfg.mode == GSN_WDD_SEC_MODE_WEP)
   \   000001CC   0x7E60             LDRB     R0,[R4, #+25]
   \   000001CE   0x2804             CMP      R0,#+4
   \   000001D0   0xD106             BNE.N    ??App_MsgProcess_19
    673          			  	{
    674          					if(gNwConnConfig.wlanCfg.securityCfg.wepConfig.authType == GSN_WDD_SEC_WEP_SHARED)
   \   000001D2   0x7EA0             LDRB     R0,[R4, #+26]
   \   000001D4   0x2801             CMP      R0,#+1
   \   000001D6   0xBF0C             ITE      EQ 
   \   000001D8   0x2002             MOVEQ    R0,#+2
   \   000001DA   0x2001             MOVNE    R0,#+1
    675          				  	{
    676          						current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_SHARED;
    677          				  	}
    678          				  	else
    679          				  	{
    680          						current_wlan_info.authMode = (GSN_WDD_SEC_MODE_T)S2W_AUTH_MODE_OPEN;
   \   000001DC   0xF886 0x002A      STRB     R0,[R6, #+42]
    681          				  	}
    682          			  	}
    683          
    684          
    685          			  	if(gNwConnConfig.wlanCfg.securityCfg.pskConfig.pskValid)
   \                     ??App_MsgProcess_19:
   \   000001E0   0xF89D 0x00C9      LDRB     R0,[SP, #+201]
   \   000001E4   0x2800             CMP      R0,#+0
   \   000001E6   0xD008             BEQ.N    ??App_MsgProcess_20
    686          			  	{
    687          				  	s2wCurrent.lmtdApConf.lmtdApPskValid=1;
   \   000001E8   0x2001             MOVS     R0,#+1
   \   000001EA   0xF885 0x0265      STRB     R0,[R5, #+613]
    688          			    	memcpy(s2wCurrent.lmtdApConf.lmtdApPsk,
    689          			           gNwConnConfig.wlanCfg.securityCfg.pskConfig.psk, GSN_WDD_SEC_PMK_LEN);
   \   000001EE   0x2220             MOVS     R2,#+32
   \   000001F0   0xA943             ADD      R1,SP,#+268
   \   000001F2   0xF205 0x2066      ADDW     R0,R5,#+614
   \   000001F6   0x.... 0x....      BL       memcpy
   \                     ??App_MsgProcess_20:
   \   000001FA   0xE0D5             B.N      ??App_MsgProcess_5
    690          			 	}
    691                      }
    692          		}			
    693          		break;
    694                  case APP_EVENT_NCM_L4CONNECT:
    695                  	if( GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx) == TRUE)
   \                     ??App_MsgProcess_21:
   \   000001FC   0xF502 0x606E      ADD      R0,R2,#+3808
   \   00000200   0x.... 0x....      BL       GsnWdd_AssocStatusGet
   \   00000204   0x2801             CMP      R0,#+1
   \   00000206   0xD101             BNE.N    ??App_MsgProcess_22
    696                      AppS2wProcess_NcmAutoConnectL4Connect();
   \   00000208   0x.... 0x....      BL       AppS2wProcess_NcmAutoConnectL4Connect
   \                     ??App_MsgProcess_22:
   \   0000020C   0xE0CC             B.N      ??App_MsgProcess_5
    697                      break;
    698          #endif
    699                  case APP_EVENT_DHCP_RENEW_IP_CHANGED:
    700                      AppS2wProcess_DhcpIpChangeNotify();
   \                     ??App_MsgProcess_23:
   \   0000020E   0x.... 0x....      BL       AppS2wProcess_DhcpIpChangeNotify
    701                      break;
   \   00000212   0xE0C9             B.N      ??App_MsgProcess_5
    702                  case APP_EVENT_DHCP_RENEW_FAILURE:
    703          			AppS2wProcess_DhcpStop();
   \                     ??App_MsgProcess_24:
   \   00000214   0x.... 0x....      BL       AppS2wProcess_DhcpStop
    704                      AppS2wProcess_DhcpFailNotify();
   \   00000218   0x.... 0x....      BL       AppS2wProcess_DhcpFailNotify
    705                      break;
   \   0000021C   0xE0C4             B.N      ??App_MsgProcess_5
    706                  case APP_EVENT_DHCP_STOP_REQUEST:
    707                      AppS2wProcess_DhcpStop();
   \                     ??App_MsgProcess_25:
   \   0000021E   0x.... 0x....      BL       AppS2wProcess_DhcpStop
    708                      break;
   \   00000222   0xE0C1             B.N      ??App_MsgProcess_5
    709              case APP_EVENT_DHCPv4_IP_CONFLICT:
    710                      AppS2wProcess_IpConflict();
   \                     ??App_MsgProcess_26:
   \   00000224   0x.... 0x....      BL       AppS2wProcess_IpConflict
    711                break;
   \   00000228   0xE0BE             B.N      ??App_MsgProcess_5
    712          
    713          		case APP_EVENT_DHCP_LEASETIME_EXPIRED:
    714          		{
    715          			VOID DHCP_notify(INT32 status,void *ctx);
    716          			GSN_NWIF_IPv4_CONFIG_T ipConfig = {0};
   \                     ??App_MsgProcess_27:
   \   0000022A   0xA812             ADD      R0,SP,#+72
   \   0000022C   0x2130             MOVS     R1,#+48
   \   0000022E   0x.... 0x....      BL       __aeabi_memclr4
    717          			GSN_NWIF_DHCP_PARAMS_T dhcpParams = {0};
   \   00000232   0xA802             ADD      R0,SP,#+8
   \   00000234   0x2140             MOVS     R1,#+64
   \   00000236   0x.... 0x....      BL       __aeabi_memclr4
    718          			dhcpParams.dhcpMaxRetryCnt = 4;
   \   0000023A   0x2004             MOVS     R0,#+4
   \   0000023C   0x9003             STR      R0,[SP, #+12]
    719          			pAppCtx->if0.nwifCtx.notifyCb = DHCP_notify;
   \   0000023E   0xF246 0x60D0      MOVW     R0,#+26320
   \   00000242   0x.... 0x....      LDR.W    R1,??DataTable55_18
   \   00000246   0x5101             STR      R1,[R0, R4]
    720          			ipConfig.staticIp = FALSE;
   \   00000248   0x2000             MOVS     R0,#+0
   \   0000024A   0x9012             STR      R0,[SP, #+72]
    721          			GsnNwif_IPv4Configure(&pAppCtx->if0.nwifCtx, &ipConfig, &dhcpParams);
   \   0000024C   0xAA02             ADD      R2,SP,#+8
   \   0000024E   0xF504 0x50A0      ADD      R0,R4,#+5120
   \   00000252   0xA912             ADD      R1,SP,#+72
   \   00000254   0x3050             ADDS     R0,R0,#+80
   \   00000256   0x.... 0x....      BL       GsnNwif_IPv4Configure
    722          		}
    723          			break;
   \   0000025A   0xE0A5             B.N      ??App_MsgProcess_5
    724          #ifdef S2W_PING_TRACE
    725          #if 0/*Ping is done in a separate thread*/
    726                  case APP_EVENT_PING_REQUEST:
    727                      s2wPingStart();
    728                        break;
    729                  case APP_EVENT_PING_STOP:
    730                      s2wPingStop();
    731                      break;
    732          #endif			
    733          #endif
    734          #ifdef S2W_IPv6_SUPPORT
    735                  case APP_EVENT_DHCPv6_STOP_REQUEST:
    736                      s2wDhcpv6Stop();
    737                      break;
    738          #endif
    739          #ifdef S2W_SECURITY_WPS_ENABLE
    740          		case APP_NOTIFICATION_WPS_START:
    741          		{
    742          			GsnOsal_SemCreate(&AppWddDisconSem, 0);
   \                     ??App_MsgProcess_28:
   \   0000025C   0x2100             MOVS     R1,#+0
   \   0000025E   0x1D38             ADDS     R0,R7,#+4
   \   00000260   0x.... 0x....      BL       GsnOsal_SemCreate
    743          			GsnWdd_Disconnect(&pAppCtx->if0.wddCtx,
    744          									0, AppS2w_WddDisconCb, pAppCtx);
   \   00000264   0xF604 0x65E0      ADDW     R5,R4,#+3808
   \   00000268   0x4623             MOV      R3,R4
   \   0000026A   0x.... 0x....      LDR.W    R2,??DataTable55_19
   \   0000026E   0x2100             MOVS     R1,#+0
   \   00000270   0x4628             MOV      R0,R5
   \   00000272   0x.... 0x....      BL       GsnWdd_Disconnect
    745          			GsnOsal_SemAcquire(&AppWddDisconSem, GSN_OSAL_WAIT_FOREVER);
   \   00000276   0xF04F 0x31FF      MOV      R1,#-1
   \   0000027A   0x1D38             ADDS     R0,R7,#+4
   \   0000027C   0x.... 0x....      BL       GsnOsal_SemAcquire
    746          			if(pAppCtx->if0.macIfType == GSN_WIF_WLAN_NW_TYPE_AP)
   \   00000280   0xF604 0x16C8      ADDW     R6,R4,#+2504
   \   00000284   0x7930             LDRB     R0,[R6, #+4]
   \   00000286   0x2802             CMP      R0,#+2
   \   00000288   0xD11D             BNE.N    ??App_MsgProcess_29
    747          			{
    748          				App_InterfaceStop(pAppCtx, &pAppCtx->if0);
   \   0000028A   0x4631             MOV      R1,R6
   \   0000028C   0x4620             MOV      R0,R4
   \   0000028E   0x.... 0x....      BL       App_InterfaceStop
    749          				
    750          				pAppCtx->if0.macIfType = GSN_WIF_WLAN_NW_TYPE_STA;
   \   00000292   0x2001             MOVS     R0,#+1
   \   00000294   0x7130             STRB     R0,[R6, #+4]
    751          				pAppCtx->if0.macIfNum= APP_DEV_INDX_0;
    752          				App_IfReinit(pAppCtx, &pAppCtx->if0);
   \   00000296   0x4631             MOV      R1,R6
   \   00000298   0x2000             MOVS     R0,#+0
   \   0000029A   0xF8C4 0x09C8      STR      R0,[R4, #+2504]
   \   0000029E   0x4620             MOV      R0,R4
   \   000002A0   0x.... 0x....      BL       App_IfReinit
    753          				//App_InterfaceStart(pAppCtx, &pAppCtx->if0);
    754          		       // status = S2w_LoadMacAddr(macAddr);
    755          		       S2w_macAddrRTCGet(macAddr);
   \   000002A4   0xA800             ADD      R0,SP,#+0
   \   000002A6   0x.... 0x....      BL       S2w_macAddrRTCGet
    756          		        //if (status != S2W_SUCCESS)
    757          				{
    758          					//S2w_Printf("\r\nINVALID MAC ADDR\r\n");
    759          				}
    760          		        AppS2wHal_MacAddrSet(macAddr,TRUE);
   \   000002AA   0x2101             MOVS     R1,#+1
   \   000002AC   0xA800             ADD      R0,SP,#+0
   \   000002AE   0x.... 0x....      BL       AppS2wHal_MacAddrSet
    761                          GsnWdd_Ioctl(&pAppCtx->if0.wddCtx,GSN_WDD_IOCTL_RX_MODE_COUNTER_CLEAR, NULL);
   \   000002B2   0x2200             MOVS     R2,#+0
   \   000002B4   0x2106             MOVS     R1,#+6
   \   000002B6   0x4628             MOV      R0,R5
   \   000002B8   0x.... 0x....      BL       GsnWdd_Ioctl
    762          				GsnWdd_Ioctl(&pAppCtx->if0.wddCtx, GSN_WDD_IOCTL_RX_ACTIVE_MODE_ON, NULL);
   \   000002BC   0x2200             MOVS     R2,#+0
   \   000002BE   0x2102             MOVS     R1,#+2
   \   000002C0   0x4628             MOV      R0,R5
   \   000002C2   0x.... 0x....      BL       GsnWdd_Ioctl
    763          			}
    764          			GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \                     ??App_MsgProcess_29:
   \   000002C6   0x.... 0x....      BL       ?Subroutine5
    765          			GsnSq_TaskMonitorDeregister(APP_CFG_SQ_MAIN_TASK_ID);
   \                     ??CrossCallReturnLabel_12:
   \   000002CA   0x2008             MOVS     R0,#+8
   \   000002CC   0x.... 0x....      BL       GsnSq_TaskMonitorDeregister
    766          			GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID,NULL,APP_CFG_SQ_TICKS_FOR_MAIN_TASK_WPS);
   \   000002D0   0x22B8             MOVS     R2,#+184
   \   000002D2   0x.... 0x....      BL       ??Subroutine1_0
    767          			GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID,0);
   \                     ??CrossCallReturnLabel_0:
   \   000002D6   0x.... 0x....      BL       ?Subroutine7
    768          			status = AppS2wHal_WpsAssociate(&pAppCtx->wpsParams,&pAppCtx->wpsapSsid,1);
   \                     ??CrossCallReturnLabel_18:
   \   000002DA   0xF504 0x41EA      ADD      R1,R4,#+29952
   \   000002DE   0xF504 0x40EA      ADD      R0,R4,#+29952
   \   000002E2   0x2201             MOVS     R2,#+1
   \   000002E4   0x317C             ADDS     R1,R1,#+124
   \   000002E6   0x3054             ADDS     R0,R0,#+84
   \   000002E8   0x.... 0x....      BL       AppS2wHal_WpsAssociate
   \   000002EC   0x0004             MOVS     R4,R0
    769          			if(status != S2W_SUCCESS)
   \   000002EE   0xBF1C             ITT      NE 
   \   000002F0   0x2100             MOVNE    R1,#+0
   \   000002F2   0x.... 0x....      BLNE     AppS2wProcess_StatusNotify
    770          				AppS2wProcess_StatusNotify(status, 0);
    771          #ifdef	S2W_UART_ENABLE
    772          			while(S2wUart_TxStatusGet());
   \                     ??App_MsgProcess_30:
   \   000002F6   0x.... 0x....      BL       S2wUart_TxStatusGet
   \   000002FA   0x2800             CMP      R0,#+0
   \   000002FC   0xD1FB             BNE.N    ??App_MsgProcess_30
    773          #endif
    774          #ifdef  S2W_FS_SPI_ENABLE
    775          		  // AppS2w_FsSpiFlush();
    776          #endif
    777          #if 1
    778          		  	if(status == S2W_SUCCESS)
   \   000002FE   0xB914             CBNZ.N   R4,??App_MsgProcess_31
    779          		  	{
    780          				GsnSys_Reset(GSN_RESET_REASON_APP_SW_RESET);
   \   00000300   0x2004             MOVS     R0,#+4
   \   00000302   0x.... 0x....      BL       GsnSys_Reset
    781          			}
    782          			GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \                     ??App_MsgProcess_31:
   \   00000306   0x.... 0x....      BL       ?Subroutine5
    783          			GsnSq_TaskMonitorDeregister(APP_CFG_SQ_MAIN_TASK_ID);
   \                     ??CrossCallReturnLabel_11:
   \   0000030A   0x2008             MOVS     R0,#+8
   \   0000030C   0x.... 0x....      BL       GsnSq_TaskMonitorDeregister
    784          			GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID,NULL,APP_CFG_SQ_TICKS_FOR_MAIN_TASK);
   \   00000310   0x.... 0x....      BL       ?Subroutine1
    785          			GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID,0);
   \                     ??CrossCallReturnLabel_1:
   \   00000314   0x.... 0x....      BL       ?Subroutine7
    786          #endif
    787          			break;
   \                     ??CrossCallReturnLabel_17:
   \   00000318   0xE046             B.N      ??App_MsgProcess_5
    788          		}
    789          #endif
    790                  case APP_EVENT_FWUP_SUCCESS:
    791                      GsnTaskSleep(100);
   \                     ??App_MsgProcess_32:
   \   0000031A   0x2064             MOVS     R0,#+100
   \   0000031C   0x.... 0x....      BL       GsnTaskSleep
    792                  	GsnSys_Reset(GSN_RESET_REASON_APP_FWUP);
   \   00000320   0x2006             MOVS     R0,#+6
   \   00000322   0xE025             B.N      ??App_MsgProcess_33
    793                  	break;
    794           #ifdef S2W_SNTP
    795                   case APP_TIME_SYNC_TIMER_INDICATION:
    796                       AppS2wProcess_SntpTimerNotify();
   \                     ??App_MsgProcess_34:
   \   00000324   0x.... 0x....      BL       AppS2wProcess_SntpTimerNotify
    797                       break;
   \   00000328   0xE03E             B.N      ??App_MsgProcess_5
    798           #endif
    799          
    800          #ifdef S2W_PERSISTENT_TMR_SUPPORT
    801                  case APP_EVENT_PERSISTANT_TMR_0_TIMEOUT:
    802                      S2w_Printf("\n\rPRST TMR 0 TIMEOUT\n\r");
    803                      break;
    804                  case APP_EVENT_PERSISTANT_TMR_1_TIMEOUT:
    805                      S2w_Printf("\n\rPRST TMR 1 TIMEOUT\n\r");
    806                      break;
    807                  case APP_EVENT_PERSISTANT_TMR_2_TIMEOUT:
    808                      S2w_Printf("\n\rPRST TMR 2 TIMEOUT\n\r");
    809                      break;
    810                  case APP_EVENT_PERSISTANT_TMR_3_TIMEOUT:
    811                      S2w_Printf("\n\rPRST TMR 3 TIMEOUT\n\r");
    812                      break;
    813                  case APP_EVENT_PERSISTANT_TMR_4_TIMEOUT:
    814                      S2w_Printf("\n\rPRST TMR 4 TIMEOUT\n\r");
    815                      break;
    816          #endif
    817          #ifdef S2W_SECURITY_WPS_ENABLE
    818                  case APP_EVENT_WPS_ASSOC:
    819          #if 0
    820                      AppS2w_WpsAssociateNotify(pAppCtx);
    821          
    822          			f_chdrive(1);
    823          		  	//if(status == S2W_SUCCESS)
    824          		  	{
    825          				GsnSys_Reset(GSN_WIF_SYS_BOOT_SW_RESET_BOOT);
    826          			}
    827          			GsnSq_TaskMonitorStop(APP_SQ_MAIN_TASK_ID);
    828          			GsnSq_TaskMonitorDeregister(APP_SQ_MAIN_TASK_ID);
    829          			GsnSq_TaskMonitorRegister(APP_SQ_MAIN_TASK_ID,NULL,APP_CFG_SQ_TICKS_FOR_MAIN_TASK);
    830          			GsnSq_TaskMonitorStart(APP_SQ_MAIN_TASK_ID,0);
    831          #endif
    832                      break;
    833          #endif
    834          
    835                 case APP_NOTIFICATION_AUTO_SEND:
    836                      GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \                     ??App_MsgProcess_35:
   \   0000032A   0x.... 0x....      BL       ?Subroutine5
    837                      GsnOsal_SemAcquire ( &dSendSem,
    838                      GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_10:
   \   0000032E   0x.... 0x....      LDR.W    R4,??DataTable55_20
   \   00000332   0xF04F 0x31FF      MOV      R1,#-1
   \   00000336   0x4620             MOV      R0,R4
   \   00000338   0x.... 0x....      BL       GsnOsal_SemAcquire
    839                      AppS2w_DataBufferTransmit();
   \   0000033C   0x.... 0x....      BL       AppS2w_DataBufferTransmit
    840                      GsnOsal_SemRelease(&dSendSem);
   \   00000340   0x4620             MOV      R0,R4
   \   00000342   0xE02F             B.N      ??App_MsgProcess_36
    841                      break;
    842          		case APP_NOTIFICATION_BATT_INDICATION:
    843          		{
    844          			AppS2wHal_BattChkProcess();
   \                     ??App_MsgProcess_37:
   \   00000344   0x.... 0x....      BL       AppS2wHal_BattChkProcess
    845          			// flush the data for spi-dma interface
    846          			if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   00000348   0x6831             LDR      R1,[R6, #+0]
   \   0000034A   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000034E   0x5C40             LDRB     R0,[R0, R1]
   \   00000350   0x2802             CMP      R0,#+2
   \   00000352   0xD129             BNE.N    ??App_MsgProcess_5
    847          			{
    848          			     s2wSpiFs_Flush();
   \   00000354   0x.... 0x....      BL       s2wSpiFs_Flush
   \   00000358   0xE026             B.N      ??App_MsgProcess_5
    849                      }
    850          		}
    851          		break;
    852          #ifdef S2W_15DOT4_SUPPORT                
    853          		case APP_ZIP_DELAY_PROCESS_EVENT:
    854          			VOID App_ZipDelayHandler( VOID );
    855          			Apps_ZipDelayHandler( );
    856          			break;
    857          #endif                        
    858          		case APP_EVENT_GRPPROV_VERIFICATION:
    859          		{
    860          #ifdef  S2W_MDNS_ENABLE
    861          			// start the mdns
    862          			AppS2wHal_MdnsInit(NULL);
   \                     ??App_MsgProcess_7:
   \   0000035A   0x2000             MOVS     R0,#+0
   \   0000035C   0x.... 0x....      BL       AppS2wHal_MdnsInit
    863          			// register the mdns names and announce the mdns services
    864          			AppS2wCmd_MdnsAnnounceAll(NULL);
   \   00000360   0x2000             MOVS     R0,#+0
   \   00000362   0x.... 0x....      BL       AppS2wCmd_MdnsAnnounceAll
    865          #endif
    866          			break;	
   \   00000366   0xE01F             B.N      ??App_MsgProcess_5
    867          		}
    868          
    869          		case APP_NOTIFICATION_APPLY_SYS_REST :
    870          		{
    871          			GsnTaskSleep(200);
   \                     ??App_MsgProcess_38:
   \   00000368   0x20C8             MOVS     R0,#+200
   \   0000036A   0x.... 0x....      BL       GsnTaskSleep
    872          			GsnSys_Reset(GSN_RESET_REASON_APP_SW_RESET);
   \   0000036E   0x2004             MOVS     R0,#+4
   \                     ??App_MsgProcess_33:
   \   00000370   0x.... 0x....      BL       GsnSys_Reset
    873          			break;
   \   00000374   0xE018             B.N      ??App_MsgProcess_5
    874          		}
    875          
    876          		case APP_EVENT_EXIT_DP_SLEEP:
    877          		{
    878          		    AppS2w_ExitDpSleep();
   \                     ??App_MsgProcess_39:
   \   00000376   0x.... 0x....      BL       AppS2w_ExitDpSleep
    879          		    break;
   \   0000037A   0xE015             B.N      ??App_MsgProcess_5
    880          		}
    881              case APP_EVENT_CID_FAILURE:
    882                      GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??App_MsgProcess_40:
   \   0000037C   0x.... 0x....      BL       ?Subroutine8
    883                      AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??CrossCallReturnLabel_21:
   \   00000380   0x2100             MOVS     R1,#+0
   \   00000382   0x2001             MOVS     R0,#+1
   \   00000384   0xE00B             B.N      ??App_MsgProcess_41
    884                      GsnOsal_SemRelease(&s2wSyncSemID);
    885          		    break;
    886          
    887          		case APP_EVENT_DATA_SEND_FAILURE:
    888          		    GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??App_MsgProcess_42:
   \   00000386   0x.... 0x....      BL       ?Subroutine8
    889          	        S2w_Printf("send() failed: %d\r\n", 1);
   \                     ??CrossCallReturnLabel_20:
   \   0000038A   0x2101             MOVS     R1,#+1
   \   0000038C   0x.... 0x....      ADR.W    R0,`?<Constant "send() failed: %d\\r\\n">`
   \   00000390   0x.... 0x....      BL       S2w_Printf
    890                      GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000394   0xE005             B.N      ??App_MsgProcess_43
    891          		    break;
    892          		case APP_EVENT_S2W_EINVAL:
    893          		    GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??App_MsgProcess_44:
   \   00000396   0x.... 0x....      BL       ?Subroutine8
    894          		    AppS2wProcess_StatusNotify(S2W_EINVAL, 0);
   \                     ??CrossCallReturnLabel_19:
   \   0000039A   0x2100             MOVS     R1,#+0
   \   0000039C   0x2002             MOVS     R0,#+2
   \                     ??App_MsgProcess_41:
   \   0000039E   0x.... 0x....      BL       AppS2wProcess_StatusNotify
    895          		    GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??App_MsgProcess_43:
   \   000003A2   0x4640             MOV      R0,R8
   \                     ??App_MsgProcess_36:
   \   000003A4   0x.... 0x....      BL       GsnOsal_SemRelease
    896          		    break;
    897          
    898          
    899              }
    900              return GSN_SUCCESS;
   \                     ??App_MsgProcess_5:
   \   000003A8   0x2000             MOVS     R0,#+0
   \   000003AA   0xF50D 0x6DAC      ADD      SP,SP,#+1376
   \   000003AE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    901          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2230             MOVS     R2,#+48
   \                     ??Subroutine2_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x4620             MOV      R0,R4
   \   00000006   0x.... 0x....      B.W      memset
    902          

   \                                 In section .text, align 2, keep-with-next
    903          VOID
    904          App_CreateLock(VOID)
    905          {
    906          
    907          	/*Create syncronisation semaphore*/
    908          	GsnOsal_SemCreate(&syscSem, 0);
   \                     App_CreateLock:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable55_21
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemCreate
    909          
    910          }

   \                                 In section .text, align 2, keep-with-next
    911          VOID
    912          App_WaitOnLock(VOID)
    913          {
   \                     App_WaitOnLock:
   \   00000000   0xB510             PUSH     {R4,LR}
    914          	/* Wait on semaphore */
    915          	GsnOsal_SemAcquire(&syscSem, GSN_OSAL_WAIT_FOREVER);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable55_22
   \   00000006   0xF04F 0x31FF      MOV      R1,#-1
   \   0000000A   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000000E   0x.... 0x....      BL       GsnOsal_SemAcquire
    916          	/* delete semaphore */
    917          	GsnOsal_SemDelete(&syscSem);
   \   00000012   0xF104 0x001C      ADD      R0,R4,#+28
   \   00000016   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001A   0x.... 0x....      B.W      _tx_semaphore_delete
    918          }
    919          

   \                                 In section .text, align 2, keep-with-next
    920          VOID
    921          App_UnLock(VOID)
    922          {
    923          
    924          	GsnOsal_SemRelease(&syscSem);
   \                     App_UnLock:
   \   00000000   0x....             B.N      ?Subroutine0
    925          
    926          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_21
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease
    927          
    928          /*There is only one instance of wdd message handler. There may be multiple Wdd context, one per interface*/
    929          PRIVATE VOID
    930          AppInit_WddMsgHdlrInit(APP_MAIN_CTX_T *pAppCtx)
    931          {
    932          	GSN_WDD_MSG_HDLR_INIT_PARAM_T param;
    933          
    934          	param.pStack = wddStack;
    935          	param.stackSize = sizeof(wddStack);
    936          	param.priority = APP_WDD_MSG_HDLR_THREAD_PRIORITY;
    937          
    938          	param.msgSize = GsnOsal_QueueMsgSizeInWords(sizeof(GSN_WDD_MESSAGE_T));
    939          	/* FIX:Bug 5187 - Message Queue Buffer allocation is incorrect
    940          	    Now the mesage que size is 16*4*4=256 bytes
    941          	    each message size is 16 bytes and max of 16 messages can be put.
    942          	*/
    943          	param.msgQueueBuffSize = (APP_CFG_WDD_MAX_MSG_IN_MBOX
    944          							  * param.msgSize
    945          							  * sizeof(UINT32) );
    946          	param.msgQueueBuff = MALLOC(param.msgQueueBuffSize);
    947          	if(NULL == param.msgQueueBuff)
    948          	{
    949          		return;
    950          	}
    951          	param.sysQualTskID = APP_CFG_SQ_WDD_MSG_HDLR_TASK_ID;
    952          	param.sysQualTicks = 0;
    953          
    954          	GsnWdd_MsgHdlrInit(&pAppCtx->wddMsgHdlrCtx, &param);
    955          
    956          }
    957          
    958          PRIVATE VOID
    959          App_HiInit(APP_MAIN_CTX_T *pAppCtx)
    960          {
    961          	GSN_HI_INIT_PARAM_T param;
    962          	param.dTxRdyQSize = GSN_HI_DTX_RDY_Q_SIZE;
    963          	param.dTxDoneQSize = GSN_HI_DTX_DONE_Q_SIZE;
    964          	param.dRxSbufRdyQSize = GSN_HI_DRX_SBUF_RDY_Q_SIZE;
    965          	param.dRxLbufRdyQSize = GSN_HI_DRX_LBUF_RDY_Q_SIZE;
    966          	param.dRxDoneQsize = GSN_HI_DRX_DONE_Q_SIZE;
    967          	param.cTxRdyQSize = 4;/*GSN_HI_CTX_RDY_Q_SIZE;*/
    968          	param.cTxDoneQSize = 4;/*GSN_HI_CTX_DONE_Q_SIZE;*/
    969          	param.cRxSbufRdyQSize = GSN_HI_CRX_SBUF_RDY_Q_SIZE;
    970          	param.cRxLbufRdyQsize = GSN_HI_CRX_LBUF_RDY_Q_SIZE;
    971          	param.cRxDoneQsize = GSN_HI_CRX_DONE_Q_SIZE;
    972          	param.hiRecvTskPrio = APP_HI_RECV_HANDLER_THREAD_PRIORITY;
    973          	param.pHiRecvTskStack = (UINT8 *)hifMsgRcvTskStack;
    974          	param.hiRecvTskStackSize = APP_CFG_HIF_MSG_RCV_STACK_SIZE;
    975          	param.sysQualTaskId = APP_CFG_SQ_HI_RECV_TASK_ID;
    976          	param.sysQualTicks = APP_CFG_SQ_TICKS_FOR_HIF_RECV_TASK;
    977          	param.pStats = &gsnHifStats;
    978          	GsnHi_Init(&pAppCtx->hiCtx,&param);
    979          }
    980          

   \                                 In section .text, align 4, keep-with-next
    981          GSN_STATUS 
    982          App_CalibDataWrIndCb(VOID *ctx, UINT8 *data, UINT32 size)
    983          {
   \                     App_CalibDataWrIndCb:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    984              APP_MAIN_CTX_T *pAppCtx = (APP_MAIN_CTX_T *)ctx;
    985              if(pAppCtx->fsInit != TRUE)
   \   00000004   0xF248 0x1570      MOVW     R5,#+33136
   \   00000008   0x5D28             LDRB     R0,[R5, R4]
   \   0000000A   0x2801             CMP      R0,#+1
   \   0000000C   0xD003             BEQ.N    ??App_CalibDataWrIndCb_0
    986              {
    987          		App_FsInit();
   \   0000000E   0x.... 0x....      BL       App_FsInit
    988                  pAppCtx->fsInit = TRUE;		
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x5528             STRB     R0,[R5, R4]
    989              }
    990              return GSN_SUCCESS;
   \                     ??App_CalibDataWrIndCb_0:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    991              
    992          }
    993          PRIVATE VOID
    994          App_SysCtlInit(APP_MAIN_CTX_T *pAppCtx)
    995          {
    996          	GSN_SYSIF_INIT_PARAM_T sysIfInitParam;
    997          	GSN_SYS_CTL_INIT_PARAM_T sysCtlInitParam;
    998          	sysIfInitParam.macIfNum = GSN_SYS_MACIF_NUM;
    999          	sysIfInitParam.pHiCtx = &pAppCtx->hiCtx;
   1000          	GsnSysif_Init(&pAppCtx->sysifCtx,&sysIfInitParam);
   1001          
   1002          	sysCtlInitParam.pSysifCtx = &pAppCtx->sysifCtx;
   1003          	sysCtlInitParam.macIfNum = GSN_SYS_MACIF_NUM;
   1004          	sysCtlInitParam.pStack = sysCtrlTaskStack;
   1005          	sysCtlInitParam.stackSize = sizeof(sysCtrlTaskStack);
   1006          	sysCtlInitParam.priority = APP_SYS_CTL_HANDLER_THREAD_PRIORITY;
   1007          	sysCtlInitParam.msgSize = GsnOsal_QueueMsgSizeInWords(sizeof(GSN_SYS_CTL_MESSAGE_T));
   1008          	/* FIX:Bug 5187 - Message Queue Buffer allocation is incorrect
   1009          	    Now the mesage que size is 8*2*4=64 bytes
   1010          	    each message size is 8 bytes and max of 8 messages can be put.
   1011          	*/
   1012          	sysCtlInitParam.msgQueueBuffSize = (APP_CFG_SYSCTL_MAX_MSG_IN_MBOX * 
   1013          										sysCtlInitParam.msgSize*
   1014          										sizeof(UINT32));
   1015          	sysCtlInitParam.msgQueueBuff = MALLOC(sysCtlInitParam.msgQueueBuffSize);
   1016          	if(NULL == sysCtlInitParam.msgQueueBuff)
   1017          	{
   1018          		return;
   1019          	}
   1020          	sysCtlInitParam.sysQualTskID = APP_CFG_SQ_SYS_CTL_TASK_ID;
   1021          	sysCtlInitParam.fsDriveNum = 0;
   1022          	GsnSysCtl_Init_Patch(&pAppCtx->sysCtlCtx,&sysCtlInitParam);
   1023              GsnSysCtl_CalibDataWrIndCbReg(&pAppCtx->sysCtlCtx, App_CalibDataWrIndCb, pAppCtx);
   1024          }
   1025          

   \                                 In section .text, align 2, keep-with-next
   1026          VOID
   1027          App_IsotxCtrlNotifCb(VOID *ctx, UINT16 msgId, UINT16 msgLen,	VOID *pMsg)
   1028          {
   1029          
   1030              GsnOsal_SemRelease(&isoTxSem);
   \                     App_IsotxCtrlNotifCb:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable55_23
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease
   1031          }
   1032          

   \                                 In section .text, align 2, keep-with-next
   1033          GSN_STATUS
   1034          App_IsotxDataNotifCb( VOID *pCtx, UINT16 msgLen, VOID *pMsg )
   1035          {
   1036              return S2W_SUCCESS;
   \                     App_IsotxDataNotifCb:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   1037          }
   1038          
   1039          PRIVATE VOID
   1040          App_IsotxInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1041          {
   1042          	GSN_ISOTXIF_INIT_PARAM_T isotxifInitParam;
   1043          	GSN_ISOTX_INIT_PARAM_T isotxInitParam;
   1044          
   1045          	isotxifInitParam.macIfNum = pIfInfo->macIfNum;
   1046          	isotxifInitParam.pHiCtx = &pAppCtx->hiCtx;
   1047          
   1048          	GsnIsotxif_Init(&pAppCtx->isotxifCtx, &isotxifInitParam);
   1049          
   1050          	isotxInitParam.macIfNum = pIfInfo->macIfNum;
   1051          	isotxInitParam.pIsotxifCtx = &pAppCtx->isotxifCtx;
   1052          	isotxInitParam.ctrlNotifCb = App_IsotxCtrlNotifCb;
   1053          	isotxInitParam.ctrlNotifCbCtx = pAppCtx;
   1054          	isotxInitParam.dataNotifCb = App_IsotxDataNotifCb;
   1055          	isotxInitParam.dataNotifCbCtx = pAppCtx;
   1056          
   1057          	GsnIsotx_Init(&pAppCtx->isotxCtx, &isotxInitParam);
   1058          
   1059          	// create a semaphore for isotx
   1060              GsnOsal_SemCreate(&isoTxSem, 0);
   1061          }
   1062          
   1063          
   1064          PRIVATE VOID
   1065          App_NwStackInit(APP_MAIN_CTX_T *pAppCtx)
   1066          {
   1067          	GSN_NW_INIT_PARAMS_T param;
   1068          
   1069          	param.sbufPktPoolPktSize = APP_NW_RX_SPKT_POOL_PKT_SIZE;
   1070          	param.sbufPktPoolSize = APP_NW_RX_SPKT_POOL_SIZE;
   1071          	param.sbufPktPoolStart = &nwSbufPktPool[0];
   1072          
   1073          	param.LbufPktPoolPktSize = APP_NW_RX_LPKT_POOL_PKT_SIZE;
   1074          	param.LbufPktPoolSize = APP_NW_RX_LPKT_POOL_SIZE;
   1075          	param.LbufPktPoolStart = &nwLbufPktPool[0];
   1076          
   1077          	GsnNw_Init(&pAppCtx->nwCtx, &param);
   1078          	_nx_system_ticks_per_second_update(10);/* a system tick at every 100 mSec*/
   1079          }
   1080          
   1081          PRIVATE VOID
   1082          App_BsdLayerInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1083          {
   1084          	GSN_NWIF_BSD_INIT_PARAM_T bsdInitParam= {0};
   1085          
   1086          	bsdInitParam.pIpHndl = &pIfInfo->nwifCtx.ipHndl;
   1087          	bsdInitParam.pBsdPktPoolHndl = GsnNw_PktPoolHndlGet(&pAppCtx->nwCtx, GSN_NW_LBUF_PKT_POOL);
   1088          	/*No separate task for BSD*/
   1089          	bsdInitParam.bsdTskStack = NULL;
   1090          	bsdInitParam.bsdTskStackSize = 0;
   1091          	bsdInitParam.bsdTskPrio = 0;
   1092          
   1093          	GsnNwif_BsdInitialize(&pAppCtx->bsdCtx, &bsdInitParam);
   1094          }

   \                                 In section .text, align 2, keep-with-next
   1095          VOID
   1096          App_WpaSupplicantInit(APP_MAIN_CTX_T * pAppCtx)
   1097          {
   \                     App_WpaSupplicantInit:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1098          	GSN_WDD_WPA_SUP_INIT_PARAM_T param;
   1099          	
   1100          	param.pWddMsgHdlr = &pAppCtx->wddMsgHdlrCtx;
   \   00000004   0xF600 0x004C      ADDW     R0,R0,#+2124
   \   00000008   0x9000             STR      R0,[SP, #+0]
   1101          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x41010004
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xBF14             ITE      NE 
   \   00000014   0x2000             MOVNE    R0,#+0
   \   00000016   0x6940             LDREQ    R0,[R0, #+20]
   1102          	{
   1103          		param.randomNumSeed = NULL;
   1104          	}
   1105          	else
   1106          	{
   1107          	    param.randomNumSeed = (UINT32 *)GSN_SYS_CRYPTO_SEED_LOCATION_GET();
   \   00000018   0x9001             STR      R0,[SP, #+4]
   1108          	}
   1109          	
   1110          	GsnWdd_WpaSupplicantInit(&param);	
   \   0000001A   0xA800             ADD      R0,SP,#+0
   \   0000001C   0x.... 0x....      BL       GsnWdd_WpaSupplicantInit
   1111          }
   \   00000020   0xBD07             POP      {R0-R2,PC}       ;; return
   1112          
   1113          /*Thre may be multiple interfaces. each interfce will have its own wif, wdd and Nwif context*/

   \                                 In section .text, align 2, keep-with-next
   1114          VOID
   1115          App_DefaultIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1116          {
   1117          	pIfInfo->macIfNum= APP_DEV_INDX_0;
   \                     App_DefaultIfInit:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x600A             STR      R2,[R1, #+0]
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable55_14
   \   00000008   0x7912             LDRB     R2,[R2, #+4]
   \   0000000A   0x710A             STRB     R2,[R1, #+4]
   1118          	pIfInfo->macIfType= (GSN_WIF_WLAN_NW_TYPE_T)s2wCurrent.mode;/*GSN_WIF_WLAN_NW_TYPE_STA;*/
   1119          	if( S2W_WLANDATA_MODE_PROV_AP == s2wCurrent.mode)
   \   0000000C   0x2A06             CMP      R2,#+6
   \   0000000E   0xBF04             ITT      EQ 
   \   00000010   0x2202             MOVEQ    R2,#+2
   \   00000012   0x710A             STRBEQ   R2,[R1, #+4]
   1120          	{
   1121          		pIfInfo->macIfType = GSN_WIF_WLAN_NW_TYPE_AP;
   1122          	}
   1123          	App_IfInit(pAppCtx, pIfInfo);
   \   00000014                      REQUIRE App_IfInit
   \   00000014                      ;; // Fall through to label App_IfInit
   1124          }
   1125          
   1126          PRIVATE VOID
   1127          App_RandomNumGenInit(VOID)
   1128          {
   1129          	
   1130          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLatchMemInfo = App_RtcLatchMemInfoPtrGet();
   1131          	UINT32 randomSeed = 0;
   1132          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   1133          	{		
   1134          		GsnHeIf_TrangGenerate((UINT8 *)&randomSeed, sizeof(randomSeed));
   1135          		pAppRtcLatchMemInfo->randomSeed = randomSeed;
   1136          	}
   1137          	else
   1138          	{
   1139          		pAppRtcLatchMemInfo->randomSeed++;
   1140          		randomSeed = pAppRtcLatchMemInfo->randomSeed;
   1141          	}
   1142          
   1143          	srand(randomSeed);
   1144          }
   1145          

   \                                 In section .text, align 2, keep-with-next
   1146          PUBLIC VOID
   1147          App_IfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1148          {	
   \                     App_IfInit:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0xB0A1             SUB      SP,SP,#+132
   \   00000006   0x4606             MOV      R6,R0
   1149          	if(GSN_WIF_WLAN_NW_TYPE_ISOTX == pIfInfo->macIfType)
   \   00000008   0x7920             LDRB     R0,[R4, #+4]
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable55_23
   \   0000000E   0xF106 0x01B8      ADD      R1,R6,#+184
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD11F             BNE.N    ??App_IfInit_0
   1150          	{
   1151          		/* ISOTX Initialisation */
   1152          		App_IsotxInit(pAppCtx, pIfInfo);
   \   00000016   0x6820             LDR      R0,[R4, #+0]
   \   00000018   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   0000001C   0x9101             STR      R1,[SP, #+4]
   \   0000001E   0xF206 0x67E0      ADDW     R7,R6,#+1760
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x4638             MOV      R0,R7
   \   00000026   0x.... 0x....      BL       GsnIsotxif_Init
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0xF88D 0x006C      STRB     R0,[SP, #+108]
   \   00000030   0x971C             STR      R7,[SP, #+112]
   \   00000032   0x961E             STR      R6,[SP, #+120]
   \   00000034   0x9620             STR      R6,[SP, #+128]
   \   00000036   0xA91B             ADD      R1,SP,#+108
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable55_24
   \   0000003C   0x901D             STR      R0,[SP, #+116]
   \   0000003E   0x.... 0x....      LDR.W    R0,??DataTable55_25
   \   00000042   0x901F             STR      R0,[SP, #+124]
   \   00000044   0xF506 0x60FE      ADD      R0,R6,#+2032
   \   00000048   0x.... 0x....      BL       GsnIsotx_Init
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x4628             MOV      R0,R5
   \   00000050   0x.... 0x....      BL       GsnOsal_SemCreate
   1153          #if 0
   1154          		if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   1155          		{
   1156          			/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
   1157          			App_InterfaceStart(pAppCtx, pIfInfo);
   1158          		}
   1159          #endif                
   1160          	}
   \   00000054   0xE070             B.N      ??App_IfInit_1
   1161          	else if(GSN_WIF_WLAN_NW_TYPE_15_4 == pIfInfo->macIfType)
   \                     ??App_IfInit_0:
   \   00000056   0x2804             CMP      R0,#+4
   \   00000058   0xD104             BNE.N    ??App_IfInit_2
   1162          	{
   1163          		VOID 
   1164          		App_WLRPANinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
   1165          		/* ISOTX Initialisation */
   1166          		App_WLRPANinit(pAppCtx, pIfInfo);
   \   0000005A   0x4621             MOV      R1,R4
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       App_WLRPANinit
   \   00000062   0xE069             B.N      ??App_IfInit_1
   1167          #if 0                
   1168          		if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   1169          		{
   1170          			/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
   1171          			App_InterfaceStart(pAppCtx, pIfInfo);
   1172          		}
   1173          #endif                
   1174          	}
   1175          #ifdef S2W_15DOT4_SUPPORT        
   1176          	else if(S2W_WLANDATA_MODE_ZIP == pIfInfo->macIfType)
   1177          	{
   1178                      VOID App_ZipInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
   1179                      DBG_LOG(51);
   1180                      pIfInfo->macIfType = GSN_WIF_WLAN_NW_TYPE_15_4;
   1181                      
   1182                      /* ZIP Initialisation */
   1183                      App_ZipInit(pAppCtx, pIfInfo);
   1184                                    
   1185          	}
   1186          #endif        
   1187          	else if(GSN_WIF_WLAN_NW_TYPE_STA == pIfInfo->macIfType ||
   1188          		GSN_WIF_WLAN_NW_TYPE_AP == pIfInfo->macIfType )
   \                     ??App_IfInit_2:
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xBF18             IT       NE 
   \   00000068   0x2802             CMPNE    R0,#+2
   \   0000006A   0xD165             BNE.N    ??App_IfInit_1
   1189          	{
   1190          		/* Wif init*/
   1191          		App_WifInit(pAppCtx, pIfInfo);
   \   0000006C   0x6820             LDR      R0,[R4, #+0]
   \   0000006E   0x9002             STR      R0,[SP, #+8]
   \   00000070   0x7920             LDRB     R0,[R4, #+4]
   \   00000072   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   00000076   0x9104             STR      R1,[SP, #+16]
   \   00000078   0xF104 0x0008      ADD      R0,R4,#+8
   \   0000007C   0xA902             ADD      R1,SP,#+8
   \   0000007E   0x.... 0x....      BL       GsnWif_Init
   1192          #if 0
   1193          		if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   1194          		{
   1195          			/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
   1196          			App_InterfaceStart(pAppCtx, pIfInfo);
   1197          		}
   1198          		#endif
   1199          		GsnWdd_SetAssocTimeout(&s2wappMainTaskCtxt->if0.wddCtx, &s2wCurrent.assocConf);
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable55_13
   \   00000086   0x.... 0x....      LDR.W    R1,??DataTable55_26
   \   0000008A   0x6800             LDR      R0,[R0, #+0]
   \   0000008C   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000090   0x.... 0x....      BL       GsnWdd_SetAssocTimeout
   1200          		/* Wdd init*/
   1201          		App_WddInit(pAppCtx, pIfInfo);
   \   00000094   0x7920             LDRB     R0,[R4, #+4]
   \   00000096   0xF88D 0x0050      STRB     R0,[SP, #+80]
   \   0000009A   0x2200             MOVS     R2,#+0
   \   0000009C   0xF606 0x004C      ADDW     R0,R6,#+2124
   \   000000A0   0x9015             STR      R0,[SP, #+84]
   \   000000A2   0xF104 0x0008      ADD      R0,R4,#+8
   \   000000A6   0x9016             STR      R0,[SP, #+88]
   \   000000A8   0x.... 0x....      LDR.W    R0,??DataTable55_27  ;; 0x410100a0
   \   000000AC   0x9017             STR      R0,[SP, #+92]
   \   000000AE   0xF105 0x001C      ADD      R0,R5,#+28
   \   000000B2   0x9018             STR      R0,[SP, #+96]
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable55_28  ;; 0x41100624
   \   000000B8   0x9019             STR      R0,[SP, #+100]
   \   000000BA   0x2054             MOVS     R0,#+84
   \   000000BC   0x901A             STR      R0,[SP, #+104]
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable55_3  ;; 0x41010004
   \   000000C2   0x6800             LDR      R0,[R0, #+0]
   \   000000C4   0x2801             CMP      R0,#+1
   \   000000C6   0xBF18             IT       NE 
   \   000000C8   0x2201             MOVNE    R2,#+1
   \   000000CA   0xF204 0x5718      ADDW     R7,R4,#+1304
   \   000000CE   0xA914             ADD      R1,SP,#+80
   \   000000D0   0x4638             MOV      R0,R7
   \   000000D2   0x.... 0x....      BL       GsnWdd_Init
   1202          
   1203          		/* Nw interface init*/
   1204          		App_NwIfInit(pAppCtx, pIfInfo);
   \   000000D6   0xF240 0x51DC      MOVW     R1,#+1500
   \   000000DA   0x9109             STR      R1,[SP, #+36]
   \   000000DC   0x201F             MOVS     R0,#+31
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0x910A             STR      R1,[SP, #+40]
   \   000000E2   0xF88D 0x0014      STRB     R0,[SP, #+20]
   \   000000E6   0x210B             MOVS     R1,#+11
   \   000000E8   0x910D             STR      R1,[SP, #+52]
   \   000000EA   0x9708             STR      R7,[SP, #+32]
   \   000000EC   0x2114             MOVS     R1,#+20
   \   000000EE   0x.... 0x....      ADR.W    R0,`?<Constant "station">`
   \   000000F2   0x.... 0x....      LDR.W    R7,??DataTable55_29
   \   000000F6   0x9006             STR      R0,[SP, #+24]
   \   000000F8   0x910E             STR      R1,[SP, #+56]
   \   000000FA   0xF606 0x1040      ADDW     R0,R6,#+2368
   \   000000FE   0xF44F 0x5680      MOV      R6,#+4096
   \   00000102   0x2100             MOVS     R1,#+0
   \   00000104   0x9007             STR      R0,[SP, #+28]
   \   00000106   0x960C             STR      R6,[SP, #+48]
   \   00000108   0x970B             STR      R7,[SP, #+44]
   \   0000010A   0x910F             STR      R1,[SP, #+60]
   \   0000010C   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   00000110   0x9010             STR      R0,[SP, #+64]
   \   00000112   0xF604 0x2488      ADDW     R4,R4,#+2696
   \   00000116   0xF44F 0x6080      MOV      R0,#+1024
   \   0000011A   0x9012             STR      R0,[SP, #+72]
   \   0000011C   0xA905             ADD      R1,SP,#+20
   \   0000011E   0x19F0             ADDS     R0,R6,R7
   \   00000120   0x9011             STR      R0,[SP, #+68]
   \   00000122   0xF105 0x0054      ADD      R0,R5,#+84
   \   00000126   0x9013             STR      R0,[SP, #+76]
   \   00000128   0x4620             MOV      R0,R4
   \   0000012A   0x.... 0x....      BL       GsnNwIf_Init
   \   0000012E   0x.... 0x....      LDR.W    R1,??DataTable55_30
   \   00000132   0x4620             MOV      R0,R4
   \   00000134   0x.... 0x....      BL       GsnNwIf_RecvFilterRegister
   1205          	}
   1206          }
   \                     ??App_IfInit_1:
   \   00000138   0xB021             ADD      SP,SP,#+132
   \   0000013A   0xBDF0             POP      {R4-R7,PC}       ;; return
   1207          
   1208          /*Thre may be multiple interfaces. each interfce will have its own wif, wdd and Nwif context*/

   \                                 In section .text, align 2, keep-with-next
   1209          VOID
   1210          App_IfReinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1211          {
   \                     App_IfReinit:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   1212          	GSN_WIF_RE_INIT_PARAM_T wifReinitParam;
   1213          	GSN_WDD_REINIT_PARAM_T wddReinitParam;
   1214          	GSN_NWIF_REINIT_PARAMS_T nwifReinitParam = {0};
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant {0}>_3`
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xB085             SUB      SP,SP,#+20
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0x9003             STR      R0,[SP, #+12]
   1215          
   1216          	if(GSN_WIF_WLAN_NW_TYPE_AP == pIfInfo->macIfType ||
   1217          		GSN_WIF_WLAN_NW_TYPE_STA == pIfInfo->macIfType)
   \   00000010   0x7928             LDRB     R0,[R5, #+4]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x2801             CMPNE    R0,#+1
   \   00000018   0xD127             BNE.N    ??App_IfReinit_0
   1218          	{
   1219          	/* Close the interface*/
   1220          
   1221          	/* Wif reinitialize*/
   1222          	wifReinitParam.macIfNum = pIfInfo->macIfNum;
   \   0000001A   0x6828             LDR      R0,[R5, #+0]
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   1223          	wifReinitParam.macIfType = pIfInfo->macIfType;
   1224          
   1225          	GsnWif_Reinit(&pIfInfo->wifCtx, &wifReinitParam);
   \   0000001E   0xA901             ADD      R1,SP,#+4
   \   00000020   0x7928             LDRB     R0,[R5, #+4]
   \   00000022   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   00000026   0xF105 0x0008      ADD      R0,R5,#+8
   \   0000002A   0x.... 0x....      BL       GsnWif_Reinit
   1226          
   1227          	/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
   1228          	App_InterfaceStart(pAppCtx, pIfInfo);
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0x4620             MOV      R0,R4
   \   00000032   0x.... 0x....      BL       App_InterfaceStart
   1229          
   1230          	/* Wdd init*/
   1231              wddReinitParam.wlanNwType = wifReinitParam.macIfType = pIfInfo->macIfType;
   \   00000036   0x7928             LDRB     R0,[R5, #+4]
   \   00000038   0xF88D 0x0008      STRB     R0,[SP, #+8]
   \   0000003C   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1232          	GsnWdd_Reinit(&pIfInfo->wddCtx, &wddReinitParam);
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0xF505 0x60A3      ADD      R0,R5,#+1304
   \   00000046   0x.... 0x....      BL       GsnWdd_Reinit
   1233          
   1234          	/* Nw interface init*/
   1235          	GsnNwIf_Reinit(&pIfInfo->nwifCtx, &nwifReinitParam);
   \   0000004A   0xA903             ADD      R1,SP,#+12
   \   0000004C   0xF605 0x2088      ADDW     R0,R5,#+2696
   \   00000050   0x.... 0x....      BL       GsnNwIf_Reinit
   1236          
   1237          	/*The below are the things that needs to be reconfigured once we change interface*/
   1238          
   1239          	/* set the min and max scan time msec */
   1240              GsnWdd_ScanParamSet(&pAppCtx->if0.wddCtx,s2wCurrent.minScanTime,
   1241                                  s2wCurrent.registers[S2W_REG_SCAN_TIME],0);
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable55_14
   \   00000058   0xF8B0 0x21CE      LDRH     R2,[R0, #+462]
   \   0000005C   0xF8B0 0x11D6      LDRH     R1,[R0, #+470]
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0xF504 0x606E      ADD      R0,R4,#+3808
   \   00000066   0x.... 0x....      BL       GsnWdd_ScanParamSet
   1242          	}
   1243          }
   \                     ??App_IfReinit_0:
   \   0000006A   0xB005             ADD      SP,SP,#+20
   \   0000006C   0xBD30             POP      {R4,R5,PC}       ;; return
   1244          

   \                                 In section .text, align 4, keep-with-next
   1245          BOOL
   1246          App_SoftTmrMmsgHandlr(void *pCtx, void *pMsg)
   1247          {
   \                     App_SoftTmrMmsgHandlr:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
   1248              /*if(appCtx.dpSleep)
   1249              {
   1250                  GSN_PWR_MGMT_CM3_SLEEP_DEEP_EN();
   1251              }*/
   1252              GsnSq_TaskMonitorStart(APP_CFG_SQ_SOFT_TMR_TASK_ID, *((INT32*)pMsg ));
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   1253              GsnSoftTmr_Run( pCtx, pMsg );
   \   0000000E   0x4629             MOV      R1,R5
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GsnSoftTmr_Run
   1254              GsnSq_TaskMonitorStop(APP_CFG_SQ_SOFT_TMR_TASK_ID);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1255           return 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   1256          }

   \                                 In section .bss, align 8
   \                     gsnBrClkCtlCtx2:
   \   00000000                      DS8 4
   1257          
   1258          GSN_SOFT_TMR_T sysTickTmr;
   1259          GSN_SOFT_TMR_T *pSysTickTmrHndl;
   \                     pSysTickTmrHndl:
   \   00000004                      DS8 4
   \                     gsnHifStats:
   \   00000008                      DS8 20
   \                     gsnBrOtpMmCtx1:
   \   0000001C                      DS8 64
   \                     gsnBrClkCtlCtx1:
   \   0000005C                      DS8 52
   \                     gsnBrOtpCtx1:
   \   00000090                      DS8 120
   \                     sysTickTmr:
   \   00000108                      DS8 32
   1260          

   \                                 In section .text, align 4, keep-with-next
   1261          VOID 
   1262          App_SysTickCb(VOID* context, GSN_SOFT_TMR_HANDLE_T  timerHandle)
   1263          {
   1264              /* Generate software interrupt and call _tx_timer_interrupt in that ISR */
   1265              NVIC_EnableIRQ(mbReceive7_IRQn);
   \                     App_SysTickCb:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable55_31  ;; 0xe000e100
   \   00000004   0xF44F 0x7000      MOV      R0,#+512
   \   00000008   0x6008             STR      R0,[R1, #+0]
   1266              NVIC_SetPendingIRQ(mbReceive7_IRQn);
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable55_32  ;; 0xe000e200
   \   0000000E   0x6008             STR      R0,[R1, #+0]
   1267          
   1268              return;
   \   00000010   0x4770             BX       LR               ;; return
   1269          }
   1270          
   1271          PRIVATE VOID
   1272          App_SoftTimerInit(APP_MAIN_CTX_T *pAppCtx)
   1273          {
   1274          	APP_RTC_LATCH_MEM_INFO_T * pAppRtcLatc = App_RtcLatchMemInfoPtrGet();					
   1275          	GSN_MSG_HANDLER_CFG_T cfg1 = {"Soft Tmr Msg Handler1", softTmrMsgHHdlrStack,
   1276          					sizeof( softTmrMsgHHdlrStack ), APP_CFG_SOFT_TMR_THREAD_PRIORITY, ( UINT8* )softTmrMsgHHdlrBuff,
   1277          								sizeof( softTmrMsgHHdlrBuff ), 1};
   1278          
   1279          	GsnMsgHandler_Create(&pAppCtx->softTmrMsgHdlrCtx, &cfg1, &pAppCtx->softTmrMsg,
   1280          						 App_SoftTmrMmsgHandlr, NULL);
   1281          	GsnSoftTmr_Init(0, &pAppCtx->softTmrMsgHdlrCtx);
   1282          	GsnTod_Init(GSN_SYS_TIME_OFFSET_LOC_GET());
   1283          	/* Stop ThreadX sysTick and start soft Timer sysTick */ 
   1284              SysTick->CTRL = 0;
   1285              pSysTickTmrHndl = GsnSoftTmr_Start(&sysTickTmr, GSN_SOFT_TMR_PERIODIC, 0,
   1286                                    MSEC_TO_SYSTIME(100), App_SysTickCb, NULL);
   1287          }
   1288          

   \                                 In section .text, align 2, keep-with-next
   1289          PRIVATE VOID App_InterfaceStartCb(VOID* ctx, GSN_STATUS status)
   \                     App_InterfaceStartCb:
   \   00000000   0xBF00             Nop      
   1290          {
   1291          	App_UnLock();
   \   00000002                      REQUIRE ?Subroutine0
   \   00000002                      ;; // Fall through to label ?Subroutine0
   1292          }

   \                                 In section .text, align 2, keep-with-next
   1293          PRIVATE VOID App_InterfaceStopCb(VOID* ctx, GSN_STATUS status)
   1294          {
   1295          	App_UnLock();
   \                     App_InterfaceStopCb:
   \   00000000   0x....             B.N      ?Subroutine0
   1296          }

   \                                 In section .text, align 2, keep-with-next
   1297          VOID
   1298          App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1299          {
   \                     App_InterfaceStart:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xB087             SUB      SP,SP,#+28
   1300          	GSN_SYS_CTL_IF_START_REQ_T ifcStartReq;
   1301          
   1302          	/*Create syncronisation semaphore*/
   1303          	App_CreateLock();
   \   00000008   0x.... 0x....      BL       ?Subroutine3
   1304          	ifcStartReq.macIfNum = pIfInfo->macIfNum;
   \                     ??CrossCallReturnLabel_7:
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   1305          	ifcStartReq.macIfType = pIfInfo->macIfType;
   1306          	ifcStartReq.wlanApNumSta =s2wCurrent.lmtdApConf.noStations;
   1307          	ifcStartReq.wlanStaType= GSN_SYS_CTL_STA_TYPE_LSSTA;
   1308          	ifcStartReq.dTxRdyQFrameTO = 0;
   1309          #ifdef S2W_15DOT4_SUPPORT
   1310              if( GSN_WIF_WLAN_NW_TYPE_15_4 == s2wCurrent.mode ||
   1311                  S2W_WLANDATA_MODE_ZIP == s2wCurrent.mode )
   1312              {
   1313          #if 1      
   1314                  GSN_DOT154IF_START_DATA_T *pData = (GSN_DOT154IF_START_DATA_T *)ifcStartReq.reserved;
   1315                  pData->NumOfKeyTableEntries = S2W_MAX_NUM_OF_802_15_4_KEY_SUPPORTED;
   1316                  pData->NumOfDeviceTableEntries = S2W_MAX_NUM_OF_802_15_4_DEV_SUPPORTED;
   1317                  pData->NumOfSecurityLevelEntries = S2W_MAX_NUM_OF_802_15_4_SECURITY_LEVEL_SUPPORTED ;
   1318          
   1319                  pData->modeOfOp = ( S2W_WLANDATA_MODE_ZIP == s2wCurrent.mode ) ? 
   1320                      GSN_DOT154IF_MODE_6LOWPAN : GSN_DOT154IF_MODE_802_15_4;
   1321          #endif
   1322                  ifcStartReq.macIfType = GSN_WIF_WLAN_NW_TYPE_15_4;
   1323              }
   1324          #endif    
   1325          	GsnSysCtl_IfStartReq_Patch(&pAppCtx->sysCtlCtx, &ifcStartReq, App_InterfaceStartCb, NULL);
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable55_33
   \   00000012   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_22:
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable55_14
   \   0000001A   0xF890 0x0287      LDRB     R0,[R0, #+647]
   \   0000001E   0xF88D 0x0003      STRB     R0,[SP, #+3]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xF88D 0x0002      STRB     R0,[SP, #+2]
   \   00000028   0x9001             STR      R0,[SP, #+4]
   \   0000002A   0xF504 0x60A9      ADD      R0,R4,#+1352
   \   0000002E   0x.... 0x....      BL       GsnSysCtl_IfStartReq_Patch
   1326          
   1327          	App_WaitOnLock();
   \   00000032   0x.... 0x....      BL       App_WaitOnLock
   1328          }
   \   00000036   0xB007             ADD      SP,SP,#+28
   \   00000038   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0xF88D 0x0000      STRB     R0,[SP, #+0]
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x7928             LDRB     R0,[R5, #+4]
   \   00000008   0xF88D 0x0001      STRB     R0,[SP, #+1]
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x4770             BX       LR
   1329          

   \                                 In section .text, align 2, keep-with-next
   1330          VOID
   1331          App_InterfaceStop(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1332          {
   \                     App_InterfaceStop:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0xB083             SUB      SP,SP,#+12
   1333          	GSN_SYS_CTL_IF_STOP_PARAM_T ifcStopParam;
   1334          	/*Create syncronisation semaphore*/
   1335          	App_CreateLock();
   \   00000008   0x.... 0x....      BL       ?Subroutine3
   1336          
   1337          	ifcStopParam.macIfNum = pIfInfo->macIfNum;
   \                     ??CrossCallReturnLabel_6:
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   1338          	ifcStopParam.macIfType = pIfInfo->macIfType;
   1339          	ifcStopParam.waitPeriod = 0;
   1340          	GsnSysCtl_IfStopReq(&pAppCtx->sysCtlCtx, &ifcStopParam, App_InterfaceStopCb, NULL);
   \   0000000E   0x.... 0x....      LDR.W    R2,??DataTable55_34
   \   00000012   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_23:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x9001             STR      R0,[SP, #+4]
   \   0000001A   0xF504 0x60A9      ADD      R0,R4,#+1352
   \   0000001E   0x.... 0x....      BL       GsnSysCtl_IfStopReq
   1341          
   1342          	App_WaitOnLock();
   \   00000022   0x.... 0x....      BL       App_WaitOnLock
   1343          }
   \   00000026   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
   1344          
   1345          PRIVATE VOID
   1346          App_WifInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1347          {
   1348          	GSN_WIF_INIT_PARAM_T wifInitParam;
   1349          
   1350          	/*Initialise wif module*/
   1351          	wifInitParam.macIfNum = pIfInfo->macIfNum;
   1352          	wifInitParam.macIfType = pIfInfo->macIfType;
   1353          	wifInitParam.pHiCtx= &pAppCtx->hiCtx;
   1354          
   1355          	/*Register for interface init*/
   1356          	GsnWif_Init(&pIfInfo->wifCtx, &wifInitParam);
   1357          }
   1358          #if 0
   1359          GSN_WPAIF_PMK_CACHE_ENTRY pmkCache[1];
   1360          #endif
   1361          
   1362          PRIVATE VOID
   1363          App_WddInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1364          {
   1365          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchMemInfo = App_RtcLatchMemInfoPtrGet();
   1366              APP_RTC_SECNDRY_MEM_INFO_T *pAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   1367              
   1368          	GSN_WDD_INIT_FLAG_T initFlag = GSN_WDD_INIT_FLAG_NONE;
   1369          	GSN_WDD_INIT_PARAM_T wddInitParam;
   1370          
   1371          	/*Initialise WDD module*/
   1372          	wddInitParam.wlanNwType = pIfInfo->macIfType;
   1373          	wddInitParam.pWddMsgHdlr = &pAppCtx->wddMsgHdlrCtx;
   1374          	wddInitParam.pWifCtx = &pIfInfo->wifCtx;
   1375          	wddInitParam.pWddPersistInfo = &pAppRtcLtchMemInfo->ifc_1.wddRtcInfo;
   1376          	wddInitParam.pStats = &gsnWddStats;
   1377              wddInitParam.pPmkCache  = pAppRtcSecMemInfo->pmkCache;
   1378              wddInitParam.pmkCacheSize = sizeof(pAppRtcSecMemInfo->pmkCache);
   1379          
   1380          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   1381          	{
   1382          		initFlag = GSN_WDD_INIT_FLAG_FIRST_BOOT;
   1383          	}
   1384          	GsnWdd_Init(&pIfInfo->wddCtx, &wddInitParam, initFlag);
   1385          }
   1386          
   1387          PRIVATE VOID
   1388          App_NwIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
   1389          {
   1390          	GSN_NWIF_INIT_PARAMS_T param;
   1391          	/*Big time initialization :( */
   1392          
   1393          	param.flags = (GSN_NWIF_FLAGS_T)(GSN_NWIF_FLG_ARP_ENABLE |	GSN_NWIF_FLG_DHCP_CLIENT_ENABLE |
   1394          				  GSN_NWIF_FLG_DNS_CLIENT_ENABLE | GSN_NWIF_FLG_ICMP_ENABLE | GSN_NWIF_FLG_IGMP_ENABLE);
   1395          	param.nwIfName = "station";
   1396              param.pNwCtx = &pAppCtx->nwCtx;
   1397          	param.pL2Dev = (GSN_L2_DEV_T *)&pIfInfo->wddCtx;
   1398          
   1399              /*[TO DO]*/ 			/**< Power management object for power save */
   1400          	param.mtu = GSN_NW_ETHER_MTU;
   1401          	param.ipRecvFilter = NULL;
   1402          	param.ipTskStackSize = APP_NWIF_IP_THREAD_STACK_SIZE;
   1403          	param.ipTskStack = &ipStack[0];
   1404          	param.ipTskPrio = APP_NWIF_IP_THREAD_PRIORITY;
   1405          	param.ipTskSysQualID = 20;
   1406          	param.ipTskSysQualTicks = 0;//APP_CFG_SQ_TICKS_FOR_IP_TASK;
   1407          	/* Using pre created packet pool. A new paket pool can be created using
   1408          	GsnNw_PktPoolCreate() and its handle can be given*/
   1409          #ifdef S2W_VARIABLE_PING_PKT_SIZE    
   1410          	param.pIpPktPoolHndl = GsnNw_PktPoolHndlGet(&pAppCtx->nwCtx, GSN_NW_LBUF_PKT_POOL);
   1411          #else
   1412              param.pIpPktPoolHndl = GsnNw_PktPoolHndlGet(&pAppCtx->nwCtx, GSN_NW_SBUF_PKT_POOL);
   1413          #endif   
   1414          
   1415          	param.arpCacheSize = APP_NWIF_IP_THREAD_ARP_CACHE_SIZE;
   1416          	param.arpCache = &arpCache[0];
   1417          	param.pStats = &gsnNwifStats;
   1418          	GsnNwIf_Init(&pIfInfo->nwifCtx, &param);
   1419          #ifdef S2W_IPv6_SUPPORT
   1420                  GsnNwif_IPv6Init(&pIfInfo->nwifCtx, NULL);
   1421                  GsnNwif_Ipv6AutoConfig(&pIfInfo->nwifCtx,TRUE);
   1422          #endif
   1423              /* register the s2w filter */
   1424              GsnNwIf_RecvFilterRegister(&pIfInfo->nwifCtx,AppS2wRecv_Filter);
   1425          }
   1426          

   \                                 In section .text, align 2, keep-with-next
   1427          VOID 
   1428          App_WlanRespTimeoutTmrCb( VOID* context,
   1429              								GSN_SOFT_TMR_HANDLE_T  timerHandle )
   1430          {	
   \                     App_WlanRespTimeoutTmrCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   1431          	GSN_ASSERT(FALSE);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable55_35  ;; 0x41010010
   \   00000006   0x.... 0x....      ADR.W    R1,`?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`+0x3D
   \   0000000A   0x6804             LDR      R4,[R0, #+0]
   \   0000000C   0x2220             MOVS     R2,#+32
   \   0000000E   0x1D20             ADDS     R0,R4,#+4
   \   00000010   0x.... 0x....      BL       memcpy
   \   00000014   0xF240 0x5097      MOVW     R0,#+1431
   \   00000018   0x6260             STR      R0,[R4, #+36]
   \   0000001A   0x2002             MOVS     R0,#+2
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
   \   0000001E   0x7060             STRB     R0,[R4, #+1]
   \   00000020   0x2010             MOVS     R0,#+16
   \   00000022   0x70A0             STRB     R0,[R4, #+2]
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      GsnSys_Reset
   1432          }
   1433          

   \                                 In section .text, align 2, keep-with-next
   1434          PRIVATE VOID
   1435          App_WlanBootIndCb(VOID *ctx, INT32 status)
   1436          {
   \                     App_WlanBootIndCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   1437          	GsnSoftTmr_Stop(wlanRespTimeoutTmrHndl);
   \   00000002   0x....             LDR.N    R4,??DataTable55_22
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x.... 0x....      BL       GsnSoftTmr_Stop
   1438          	/**/
   1439          	App_UnLock();
   \   0000000A   0xF104 0x001C      ADD      R0,R4,#+28
   \   0000000E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000012   0x.... 0x....      B.W      GsnOsal_SemRelease
   1440          }

   \                                 In section .data, align 8
   \                     wlanRespTimeoutTmrHndl:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   1441          
   1442          
   1443          UINT8 *moduleTypes[] = 
   \                     moduleTypes:
   \   00000004   0x........         DC32 `?<Constant "EIM1102">`, `?<Constant "ZIM1102">`
   \              0x........   
   \   0000000C   0x........         DC32 `?<Constant "SEIM1102">`, `?<Constant "SPIM1102">`
   \              0x........   
   \   00000014   0x........         DC32 `?<Constant "EIM0012">`, `?<Constant "PIM0012">`
   \              0x........   
   \                     syscSem:
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   0000002C   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000038   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000048   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   1444          {
   1445              "EIM1102",    //2011MIE
   1446              "ZIM1102",    //2011MIZ
   1447              "SEIM1102",   //2011MIES
   1448              "SPIM1102",   //2011MIPS
   1449              "EIM0012",    //2100MIE
   1450              "PIM0012"     //2100MIP
   1451          };
   1452          

   \                                 In section .text, align 2, keep-with-next
   1453          PRIVATE GSN_STATUS
   1454          App_WlanBootReq(APP_MAIN_CTX_T *pAppCtx)
   1455          {
   \                     App_WlanBootReq:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4604             MOV      R4,R0
   1456          	GSN_SYS_CTL_BOOT_REQ_PARAM_T bootReqParm;
   1457          	APP_RTC_SECNDRY_MEM_INFO_T *PAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   1458          	//APP_RTC_LATCH_MEM_INFO_T *PAppRtcLatchMemInfo = App_RtcLatchMemInfoPtrGet();    
   1459          	F_FILE *pFile;
   1460              UINT32 rfCalibDataSize, fileSize;
   1461              UINT8 data[16]; 
   1462              UINT16 dataLen, i;
   1463              
   1464          	/*Create syncronisation semaphore*/
   1465          	App_CreateLock();
   \   00000004   0x....             LDR.N    R5,??DataTable55_22
   \   00000006   0xF5AD 0x7D13      SUB      SP,SP,#+588
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0xF105 0x001C      ADD      R0,R5,#+28
   \   00000010   0x.... 0x....      BL       GsnOsal_SemCreate
   1466          
   1467          	/*Give Boot request to Wlan*/
   1468          	bootReqParm.bootReason = GSN_BOOT_REASON_GET();
   \   00000014   0x....             LDR.N    R6,??DataTable55_3  ;; 0x41010004
   \   00000016   0x6830             LDR      R0,[R6, #+0]
   \   00000018   0xF88D 0x0024      STRB     R0,[SP, #+36]
   1469          	bootReqParm.bootSubreason = GSN_BOOT_INFO_GET();
   1470          	bootReqParm.bootTimeHigh = 0;
   1471          	bootReqParm.bootTimeLow = 0;
   1472          	bootReqParm.confLost = 1;
   1473          	bootReqParm.numIfs = 1;
   1474          	bootReqParm.ifTypes[0]= GSN_WIF_WLAN_NW_TYPE_STA;
   1475          	bootReqParm.fwFlashAddr = romFwImageFlashAddr;
   1476          	bootReqParm.stdbyCtxLen = PAppRtcSecMemInfo->macStdbyCtxLen;
   1477          	bootReqParm.pStdbyCtx = (UINT8*)PAppRtcSecMemInfo->macStdbyCtx;
   1478          	bootReqParm.modType = 0;
   1479          
   1480              
   1481              if(GsnOtpMm_Read(10, 1, &dataLen, data) == GSN_SUCCESS)
   \   0000001C   0xAB05             ADD      R3,SP,#+20
   \   0000001E   0x6870             LDR      R0,[R6, #+4]
   \   00000020   0xF88D 0x0025      STRB     R0,[SP, #+37]
   \   00000024   0xAA04             ADD      R2,SP,#+16
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x900D             STR      R0,[SP, #+52]
   \   0000002A   0x900C             STR      R0,[SP, #+48]
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0xF88D 0x0026      STRB     R0,[SP, #+38]
   \   00000032   0x900A             STR      R0,[SP, #+40]
   \   00000034   0xF88D 0x002C      STRB     R0,[SP, #+44]
   \   00000038   0x....             LDR.N    R0,??DataTable55_36
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x900E             STR      R0,[SP, #+56]
   \   0000003E   0x....             LDR.N    R0,??DataTable55_37  ;; 0x41100000
   \   00000040   0xF850 0x1B04      LDR      R1,[R0], #+4
   \   00000044   0x9011             STR      R0,[SP, #+68]
   \   00000046   0x9110             STR      R1,[SP, #+64]
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xF88D 0x003C      STRB     R0,[SP, #+60]
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0x200A             MOVS     R0,#+10
   \   00000052   0x.... 0x....      BL       GsnOtpMm_Read
   \   00000056   0xB980             CBNZ.N   R0,??App_WlanBootReq_0
   1482              {
   1483                  for(i = 0; i < 6; i++)
   \   00000058   0x2700             MOVS     R7,#+0
   1484                  {
   1485                      if(strstr((char const *)(data+8), (char const *)moduleTypes[i]))
   \                     ??App_WlanBootReq_1:
   \   0000005A   0xEB05 0x0087      ADD      R0,R5,R7, LSL #+2
   \   0000005E   0x6841             LDR      R1,[R0, #+4]
   \   00000060   0xA807             ADD      R0,SP,#+28
   \   00000062   0x.... 0x....      BL       __iar_Strstr
   \   00000066   0xB918             CBNZ.N   R0,??App_WlanBootReq_2
   \   00000068   0x1C7F             ADDS     R7,R7,#+1
   \   0000006A   0xB2BF             UXTH     R7,R7
   \   0000006C   0x2F06             CMP      R7,#+6
   \   0000006E   0xDBF4             BLT.N    ??App_WlanBootReq_1
   1486                      {
   1487                          break;
   1488                      }
   1489                  }
   1490                  if(i < 6)
   \                     ??App_WlanBootReq_2:
   \   00000070   0x2F06             CMP      R7,#+6
   \   00000072   0xBFBC             ITT      LT 
   \   00000074   0x1C78             ADDLT    R0,R7,#+1
   \   00000076   0xF88D 0x003C      STRBLT   R0,[SP, #+60]
   1491                  {
   1492                      bootReqParm.modType = (i + 1);
   1493                  }
   1494              }
   1495              
   1496              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \                     ??App_WlanBootReq_0:
   \   0000007A   0x6830             LDR      R0,[R6, #+0]
   \   0000007C   0x2801             CMP      R0,#+1
   \   0000007E   0xD019             BEQ.N    ??App_WlanBootReq_3
   1497              {
   1498                  
   1499                  pFile = f_open(WLAN_RF_CALIB_DATA_FILE_NAME, "r");
   \   00000080   0x.... 0x....      ADR.W    R6,`?<Constant "A:/WlanRfCalibDataFile">`
   \   00000084   0x....             ADR.N    R1,??DataTable55  ;; "r"
   \   00000086   0x4630             MOV      R0,R6
   \   00000088   0x.... 0x....      BL       fsm_open
   \   0000008C   0x0007             MOVS     R7,R0
   1500                  if(!pFile)
   \   0000008E   0xD104             BNE.N    ??App_WlanBootReq_4
   1501                  {
   1502                      /*File Not present - Create new*/;
   1503                      pFile = f_open(WLAN_RF_CALIB_DATA_FILE_NAME, "w+");
   \   00000090   0x....             ADR.N    R1,??DataTable55_1  ;; 0x77, 0x2B, 0x00, 0x00
   \   00000092   0x4630             MOV      R0,R6
   \   00000094   0x.... 0x....      BL       fsm_open
   \   00000098   0x4607             MOV      R7,R0
   1504                      if(!pFile)
   1505                      {
   1506                          /*[TO DO ] Handle Error*/
   1507                      }
   1508                  }
   1509          
   1510                  fileSize=f_filelength(WLAN_RF_CALIB_DATA_FILE_NAME);
   \                     ??App_WlanBootReq_4:
   \   0000009A   0x4630             MOV      R0,R6
   \   0000009C   0x.... 0x....      BL       fsm_filelength
   1511                  rfCalibDataSize = f_read(bootReqParm.rfCalibData, 1, fileSize, pFile);
   1512                  if(!rfCalibDataSize) 
   1513                   {
   1514                      /*[TO DO: handle failure]*/;
   1515                  }
   1516                  bootReqParm.rfCalibDataSize = rfCalibDataSize;
   \   000000A0   0x4602             MOV      R2,R0
   \   000000A2   0x463B             MOV      R3,R7
   \   000000A4   0x2101             MOVS     R1,#+1
   \   000000A6   0xA813             ADD      R0,SP,#+76
   \   000000A8   0x.... 0x....      BL       fsm_read
   \   000000AC   0x9012             STR      R0,[SP, #+72]
   1517          
   1518                  
   1519                  /* Close the file*/
   1520                  f_close(pFile);
   \   000000AE   0x4638             MOV      R0,R7
   \   000000B0   0x.... 0x....      BL       fsm_close
   1521                  
   1522              }
   1523              
   1524          	wlanRespTimeoutTmrHndl = GsnSoftTmr_Start(&wlanRespTimeoutTmr, GSN_SOFT_TMR_ONESHOT, 0,
   1525          												SEC_TO_SYSTIME(10),
   1526          												App_WlanRespTimeoutTmrCb, NULL);
   \                     ??App_WlanBootReq_3:
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9003             STR      R0,[SP, #+12]
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0x....             LDR.N    R0,??DataTable55_38
   \   000000BC   0x9002             STR      R0,[SP, #+8]
   \   000000BE   0x2200             MOVS     R2,#+0
   \   000000C0   0xF44F 0x20A0      MOV      R0,#+327680
   \   000000C4   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000C8   0x460B             MOV      R3,R1
   \   000000CA   0xF105 0x0038      ADD      R0,R5,#+56
   \   000000CE   0x.... 0x....      BL       GsnSoftTmr_Start
   \   000000D2   0x6028             STR      R0,[R5, #+0]
   1527          	GsnSysCtl_BootReq_Patch(&pAppCtx->sysCtlCtx, &bootReqParm, App_WlanBootIndCb, pAppCtx);
   \   000000D4   0xF204 0x5548      ADDW     R5,R4,#+1352
   \   000000D8   0x4623             MOV      R3,R4
   \   000000DA   0x....             LDR.N    R2,??DataTable55_39
   \   000000DC   0xA909             ADD      R1,SP,#+36
   \   000000DE   0x4628             MOV      R0,R5
   \   000000E0   0x.... 0x....      BL       GsnSysCtl_BootReq_Patch
   1528              GsnSysCtl_DieTempSendTimerStart(&pAppCtx->sysCtlCtx, 5);
   \   000000E4   0x2105             MOVS     R1,#+5
   \   000000E6   0x4628             MOV      R0,R5
   \   000000E8   0x.... 0x....      BL       GsnSysCtl_DieTempSendTimerStart
   1529          	/*Wait for Boot indication*/
   1530          	//App_WaitOnLock();
   1531                  return GSN_SUCCESS;
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0xF50D 0x7D13      ADD      SP,SP,#+588
   \   000000F2   0xBDF0             POP      {R4-R7,PC}       ;; return
   1532          }
   1533          
   1534          
   1535          PRIVATE VOID
   1536          App_SysQualInit()
   1537          {
   1538              GsnSq_Init();
   1539          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_SOFT_TMR_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_SOFT_TMR_TASK);
   1540          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_HI_RECV_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_HIF_RECV_TASK);
   1541          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_SYS_CTL_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_SYS_CTL_TASK);	
   1542          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_WDD_MSG_HDLR_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_WDD_MSG_HDLR_TASK);
   1543          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_IP_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_IP_TASK);
   1544          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_DHCPV4_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_DHCPV4_TASK);
   1545          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_HTTPD_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_HTTPD_TASK);
   1546          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_MAIN_TASK);
   1547          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_NETRX_TASK_ID, NULL, APP_CFG_SQ_TICKS_FOR_NETRX_TASK);	
   1548          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_SERIAL_INPUT_TASK_ID,NULL, APP_CFG_SQ_TICKS_FOR_SERIAL_INPUT_TASK);
   1549          }
   1550          

   \                                 In section .text, align 2, keep-with-next
   1551          VOID
   1552          App_RtcDump(VOID)
   1553          {
   \                     App_RtcDump:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   1554          	UINT8 i;
   1555          	GSN_SYS_RESET_INFO_T *pResetInfo= (GSN_SYS_RESET_INFO_T *)GSN_SYS_RESET_INFO_LOCATION_GET();
   \   00000002   0x....             LDR.N    R4,??DataTable55_3  ;; 0x41010004
   \   00000004   0x68E5             LDR      R5,[R4, #+12]
   1556          	GSN_SYS_RESERVD_RTC_INFO_T *pResrvdInfo = (GSN_SYS_RESERVD_RTC_INFO_T *)RTC_LATCH_MEM_ADDR;
   1557          
   1558          	S2w_Printf("\r\n");
   \   00000006   0x....             ADR.N    R6,??DataTable55_2  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000008   0x4630             MOV      R0,R6
   \   0000000A   0x.... 0x....      BL       S2w_Printf
   1559          
   1560          	S2w_Printf("Boot Reason :    %d\r\n", pResrvdInfo->bootReason);
   \   0000000E   0x6821             LDR      R1,[R4, #+0]
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "Boot Reason :    %d\\r\\n">`
   \   00000014   0x.... 0x....      BL       S2w_Printf
   1561          	S2w_Printf("Boot Info :      %d\r\n", pResrvdInfo->bootReason);
   \   00000018   0x6821             LDR      R1,[R4, #+0]
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "Boot Info :      %d\\r\\n">`
   \   0000001E   0x.... 0x....      BL       S2w_Printf
   1562          	S2w_Printf("Reset Type:      %d\r\n", pResetInfo->app.resetType);
   \   00000022   0x7829             LDRB     R1,[R5, #+0]
   \   00000024   0x.... 0x....      ADR.W    R0,`?<Constant "Reset Type:      %d\\r\\n">`
   \   00000028   0x.... 0x....      BL       S2w_Printf
   1563          	S2w_Printf("Reset Reason :   %d\r\n", pResetInfo->app.resetReason);
   \   0000002C   0x7869             LDRB     R1,[R5, #+1]
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "Reset Reason :   %d\\r\\n">`
   \   00000032   0x.... 0x....      BL       S2w_Printf
   1564          	S2w_Printf("Reset Info Size: %d\r\n", pResetInfo->app.resetInfoSize);
   \   00000036   0x78A9             LDRB     R1,[R5, #+2]
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "Reset Info Size: %d\\r\\n">`
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   1565          	S2w_Printf("Reset Addl Info: 0x%x\r\n", pResetInfo->app.resetAddlInfo);
   \   00000040   0x78E9             LDRB     R1,[R5, #+3]
   \   00000042   0x.... 0x....      ADR.W    R0,`?<Constant "Reset Addl Info: 0x%x\\r\\n">`
   \   00000046   0x.... 0x....      BL       S2w_Printf
   1566          	S2w_Printf("ResetInfo:\r\n");
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant "ResetInfo:\\r\\n">`
   \   0000004E   0x.... 0x....      BL       S2w_Printf
   1567          	for(i = 0; i < 16; i++)
   \   00000052   0x.... 0x....      ADR.W    R7,`?<Constant "\\t0x%08x\\r\\n">`
   \   00000056   0x2400             MOVS     R4,#+0
   1568          	{
   1569          	S2w_Printf("\t0x%08x\r\n", pResetInfo->app.resetInfo[i]);
   \                     ??App_RtcDump_0:
   \   00000058   0xEB05 0x0084      ADD      R0,R5,R4, LSL #+2
   \   0000005C   0x6841             LDR      R1,[R0, #+4]
   \   0000005E   0x4638             MOV      R0,R7
   \   00000060   0x.... 0x....      BL       S2w_Printf
   1570          	}
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \   00000066   0x2C10             CMP      R4,#+16
   \   00000068   0xDBF6             BLT.N    ??App_RtcDump_0
   1571          	S2w_Printf("\r\n");
   \   0000006A   0x4630             MOV      R0,R6
   \   0000006C   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000070   0x.... 0x....      B.W      S2w_Printf
   1572          }
   1573          

   \                                 In section .text, align 2, keep-with-next
   1574          PUBLIC VOID
   1575          AppS2w_RtcCfg()
   1576          {
   1577          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT == GSN_BOOT_REASON_GET())
   \                     AppS2w_RtcCfg:
   \   00000000   0x....             LDR.N    R0,??DataTable55_3  ;; 0x41010004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0xD10B             BNE.N    ??AppS2w_RtcCfg_0
   1578          	{/*Configure RTC SRAM Bank*/
   1579                  RTC_SX_SWT2LDO_SET(RTC,0);
   \   00000008   0x....             LDR.N    R0,??DataTable55_40  ;; 0x41000360
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x6041             STR      R1,[R0, #+4]
   1580                  SX_EN_ULDO_CLEAR(RTC);
   \   0000000E   0x6801             LDR      R1,[R0, #+0]
   \   00000010   0x0849             LSRS     R1,R1,#+1
   \   00000012   0x0049             LSLS     R1,R1,#+1
   \   00000014   0x6001             STR      R1,[R0, #+0]
   1581                  RTC_SRAM_ISO_ENABLE_CLEAR(RTC);
   \   00000016   0x....             LDR.N    R0,??DataTable55_41  ;; 0x4100007c
   \   00000018   0x6801             LDR      R1,[R0, #+0]
   \   0000001A   0x0849             LSRS     R1,R1,#+1
   \   0000001C   0x0049             LSLS     R1,R1,#+1
   \   0000001E   0x6001             STR      R1,[R0, #+0]
   1582          	}
   1583          }
   \                     ??AppS2w_RtcCfg_0:
   \   00000020   0x4770             BX       LR               ;; return
   1584          
   1585          
   1586          
   1587          #ifdef S2W_IP2WIFI_SUPPORT
   1588          VOID
   1589          AppInit_L2DevInit(APP_MAIN_CTX_T *pAppCtx)
   1590          {
   1591              s2wL2Dev_Init(&(pAppCtx->s2wL2Dev), "wif0",
   1592                              (GSN_L2_DEV_T *)&(pAppCtx->if0.wddCtx));
   1593          }
   1594          #endif
   1595          
   1596          

   \                                 In section .text, align 2, keep-with-next
   1597          UINT8
   1598          s2w_StartDhcpDnsServer()
   1599          {
   \                     s2w_StartDhcpDnsServer:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   1600          #ifdef S2W_DHCP_SERVER_ENABLE
   1601                          if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
   \   00000004   0x....             LDR.N    R6,??DataTable55_14
   \   00000006   0x.... 0x....      LDR.W    R8,??DataTable55_42
   \   0000000A   0x.... 0x....      LDR.W    R9,??DataTable55_43
   \   0000000E   0x....             LDR.N    R5,??DataTable55_13
   \   00000010   0x....             LDR.N    R4,??DataTable55_44
   \   00000012   0xB0AC             SUB      SP,SP,#+176
   \   00000014   0x7930             LDRB     R0,[R6, #+4]
   \   00000016   0xF241 0x4A50      MOVW     R10,#+5200
   \   0000001A   0x2806             CMP      R0,#+6
   \   0000001C   0xD149             BNE.N    ??s2w_StartDhcpDnsServer_0
   1602                          {
   1603                              if(S2W_DEFAULT_GRP_PROV_DHCPSRVR_ENABLE)
   1604                              {
   1605                                  memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
   \   0000001E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   00000022   0x4601             MOV      R1,R0
   1606                                  dhcpSrvrCfg.numOfClients = S2W_DEFAULT_GRP_PROV_SUPPORTED_STATIONS;
   \   00000024   0x2008             MOVS     R0,#+8
   \   00000026   0x6220             STR      R0,[R4, #+32]
   1607                                  dhcpSrvrCfg.startIpAddr =  S2W_DEFAULT_GRP_PROV_IP_START_ADDRESS;
   1608                                  dhcpSrvrCfg.leaseTime = S2W_DEFAULT_GRP_PROV_LEASE_TIME;
   1609                                  dhcpSrvrCfg.serverIpAddr = S2W_DEFAULT_GRP_PROV_IP_ADDRESS;
   1610                                  dhcpSrvrCfg.startIpAddr = S2W_DEFAULT_GRP_PROV_IP_START_ADDRESS;
   1611                                  dhcpSrvrCfg.subnetMask = S2W_DEFAULT_GRP_PROV_SUBNET_ADDRESS;
   \   00000028   0xF06F 0x02FF      MVN      R2,#+255
   \   0000002C   0x....             LDR.N    R0,??DataTable55_45  ;; 0xc0a8f002
   \   0000002E   0x6060             STR      R0,[R4, #+4]
   \   00000030   0x....             LDR.N    R0,??DataTable55_46  ;; 0x15180
   \   00000032   0x6260             STR      R0,[R4, #+36]
   \   00000034   0x....             LDR.N    R0,??DataTable55_47  ;; 0xc0a8f001
   \   00000036   0x6020             STR      R0,[R4, #+0]
   \   00000038   0x60A2             STR      R2,[R4, #+8]
   1612                                  dhcpSrvrCfg.gateway = S2W_DEFAULT_GRP_PROV_GATE_ADDRESS;
   \   0000003A   0x60E0             STR      R0,[R4, #+12]
   1613                                  dhcpSrvrCfg.dns1 = dhcpSrvrCfg.serverIpAddr;
   \   0000003C   0x6120             STR      R0,[R4, #+16]
   1614                                  dhcpSrvrCfg.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
   \   0000003E   0x.... 0x....      BL       ?Subroutine4
   1615                                  GsnDhcpSrvr_Start(&dhcpSrvr, &dhcpSrvrCfg);
   1616          #ifdef S2W_DNS_SERVER_ENABLE
   1617                                  GSN_DNS_INIT_PARAM_T gsnDnsInitParams;
   1618                                  if(S2W_DEFAULT_GRP_PROV_DNSSRVR_ENABLE)
   1619                                  {
   1620                                      GSN_NWIF_IP_CONFIG_T  ipconfig;
   1621                                      memset(&ipconfig,0,sizeof(GSN_NWIF_IP_CONFIG_T));
   \                     ??CrossCallReturnLabel_9:
   \   00000042   0x2298             MOVS     R2,#+152
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xA806             ADD      R0,SP,#+24
   \   00000048   0x.... 0x....      BL       memset
   1622                                      memset(&gsnDnsInitParams,0,sizeof(GSN_DNS_INIT_PARAM_T));
   \   0000004C   0x.... 0x....      BL       ?Subroutine10
   1623                                      GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&ipconfig);
   \                     ??CrossCallReturnLabel_25:
   \   00000050   0x6828             LDR      R0,[R5, #+0]
   \   00000052   0xA906             ADD      R1,SP,#+24
   \   00000054   0x4450             ADD      R0,R10,R0
   \   00000056   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   1624                                      gsnDnsInitParams.flags = IP_VERSION_V4;
   \   0000005A   0x2001             MOVS     R0,#+1
   \   0000005C   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   1625                                      gsnDnsInitParams.serverIpAddr = ipconfig.ipv4.ipAddr;
   1626                                      GsnDnsSrvr_Start(&dnsServer,S2W_DEFAULT_GRP_PROV_DNS_NAME,&gsnDnsInitParams);
   \   00000060   0xAA00             ADD      R2,SP,#+0
   \   00000062   0x9809             LDR      R0,[SP, #+36]
   \   00000064   0x.... 0x....      ADR.W    R1,`?<Constant "config.gainspan\\000">`
   \   00000068   0x9001             STR      R0,[SP, #+4]
   \   0000006A   0x4640             MOV      R0,R8
   \   0000006C   0x.... 0x....      BL       GsnDnsSrvr_Start
   1627                                  }
   1628          #endif
   1629                                  // fill the http server details
   1630                                  // grop prov will not support username/pwd authentication so rest it
   1631                                  memset(&s2wappMainTaskCtxt->WebServerCfg.username,0,sizeof(s2wappMainTaskCtxt->WebServerCfg.username));
   \   00000070   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_14:
   \   00000074   0x3056             ADDS     R0,R0,#+86
   \   00000076   0x.... 0x....      BL       memset
   1632                                  memset(&s2wappMainTaskCtxt->WebServerCfg.passwd,0,sizeof(s2wappMainTaskCtxt->WebServerCfg.passwd));
   \   0000007A   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_15:
   \   0000007E   0x3067             ADDS     R0,R0,#+103
   \   00000080   0x.... 0x....      BL       memset
   1633                                  s2wappMainTaskCtxt->WebServerCfg.sslEnabled = TRUE;
   \   00000084   0x6829             LDR      R1,[R5, #+0]
   \   00000086   0xF646 0x3079      MOVW     R0,#+27513
   \   0000008A   0x2201             MOVS     R2,#+1
   \   0000008C   0x5442             STRB     R2,[R0, R1]
   1634                                  s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut = S2W_DFLT_HTTP_SRVR_IDLE_TIMEOUT;
   \   0000008E   0xF646 0x317A      MOVW     R1,#+27514
   \   00000092   0x6828             LDR      R0,[R5, #+0]
   \   00000094   0x180A             ADDS     R2,R1,R0
   \   00000096   0x2378             MOVS     R3,#+120
   \   00000098   0x8053             STRH     R3,[R2, #+2]
   1635                                  s2wappMainTaskCtxt->WebServerCfg.storeParams = TRUE;
   \   0000009A   0x2201             MOVS     R2,#+1
   \   0000009C   0x540A             STRB     R2,[R1, R0]
   1636                                  // start the L4(web prov) if auto connection enabled
   1637          					    UINT32 message = APP_NOTIFICATION_PROV_START;
   1638                                  s2wappMainTaskCtxt->webProvStatus=START;
   \   0000009E   0xF646 0x402C      MOVW     R0,#+27692
   \   000000A2   0x6829             LDR      R1,[R5, #+0]
   \   000000A4   0x5442             STRB     R2,[R0, R1]
   1639                                  (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   000000A6   0x201E             MOVS     R0,#+30
   \   000000A8   0x....             LDR.N    R2,??DataTable55_48
   \   000000AA   0x6829             LDR      R1,[R5, #+0]
   \   000000AC   0x6812             LDR      R2,[R2, #+0]
   \   000000AE   0x4790             BLX      R2
   \   000000B0   0xE02F             B.N      ??s2w_StartDhcpDnsServer_1
   1640                              }
   1641                          }
   1642          
   1643                          else if(s2wCurrent.lmtdApConf.dhcpServerEnable)
   \                     ??s2w_StartDhcpDnsServer_0:
   \   000000B2   0xF506 0x7723      ADD      R7,R6,#+652
   \   000000B6   0x7B38             LDRB     R0,[R7, #+12]
   \   000000B8   0xB358             CBZ.N    R0,??s2w_StartDhcpDnsServer_1
   1644                          {
   1645          
   1646                              if(!(dhcpServerFlags & S2W_DHCP_SRVR_CFG_DONE))
   \   000000BA   0x....             LDR.N    R0,??DataTable55_49
   \   000000BC   0x7800             LDRB     R0,[R0, #+0]
   \   000000BE   0x0780             LSLS     R0,R0,#+30
   \   000000C0   0xD407             BMI.N    ??s2w_StartDhcpDnsServer_2
   1647                              {
   1648                                memset(&dhcpSrvrCfg,0,sizeof(GSN_DHCP_SRVR_CFG_T));
   \   000000C2   0x.... 0x....      BL       ?Subroutine2
   1649                                dhcpSrvrCfg.numOfClients = s2wCurrent.lmtdApConf.dhcpNumAddresses;
   \                     ??CrossCallReturnLabel_4:
   \   000000C6   0x7B78             LDRB     R0,[R7, #+13]
   \   000000C8   0x6220             STR      R0,[R4, #+32]
   1650                                dhcpSrvrCfg.startIpAddr =  (s2wCurrent.lmtdApConf.dhcpAddressStart);
   \   000000CA   0x6938             LDR      R0,[R7, #+16]
   \   000000CC   0x6060             STR      R0,[R4, #+4]
   1651                                dhcpSrvrCfg.leaseTime = s2wCurrent.lmtdApConf.dhcpLeaseTime;
   \   000000CE   0x6DB8             LDR      R0,[R7, #+88]
   \   000000D0   0x6260             STR      R0,[R4, #+36]
   1652                              }
   1653          
   1654                              memcpy(&dhcpSrvrCfg.serverIpAddr,&s2wCurrent.lmtdApConf.ipAddress,4);
   \                     ??s2w_StartDhcpDnsServer_2:
   \   000000D2   0xF8D6 0x028C      LDR      R0,[R6, #+652]
   \   000000D6   0x6020             STR      R0,[R4, #+0]
   1655          
   1656                              if((dhcpSrvrCfg.startIpAddr & 0xFFFFFF00) != (dhcpSrvrCfg.serverIpAddr & 0xFFFFFF00))
   \   000000D8   0x0A02             LSRS     R2,R0,#+8
   \   000000DA   0x6861             LDR      R1,[R4, #+4]
   \   000000DC   0x0A09             LSRS     R1,R1,#+8
   \   000000DE   0x0209             LSLS     R1,R1,#+8
   \   000000E0   0xEBB1 0x2F02      CMP      R1,R2, LSL #+8
   \   000000E4   0xBF1C             ITT      NE 
   \   000000E6   0x1C41             ADDNE    R1,R0,#+1
   \   000000E8   0x6061             STRNE    R1,[R4, #+4]
   1657                              {
   1658          						dhcpSrvrCfg.startIpAddr = dhcpSrvrCfg.serverIpAddr + 1;
   1659                              }
   1660                              dhcpSrvrCfg.subnetMask = (s2wCurrent.lmtdApConf.subnetmask);
   \   000000EA   0x6879             LDR      R1,[R7, #+4]
   \   000000EC   0x60A1             STR      R1,[R4, #+8]
   1661                              dhcpSrvrCfg.gateway = (s2wCurrent.lmtdApConf.gateway);
   \   000000EE   0x68B9             LDR      R1,[R7, #+8]
   \   000000F0   0x60E1             STR      R1,[R4, #+12]
   1662                              dhcpSrvrCfg.dns1 = dhcpSrvrCfg.serverIpAddr;
   \   000000F2   0x6120             STR      R0,[R4, #+16]
   1663          					dhcpSrvrCfg.pNwif = &s2wappMainTaskCtxt->if0.nwifCtx;
   1664                              GsnDhcpSrvr_Start(&dhcpSrvr, &dhcpSrvrCfg);
   \   000000F4   0x4621             MOV      R1,R4
   \   000000F6   0x.... 0x....      BL       ?Subroutine4
   1665          #ifdef S2W_DNS_SERVER_ENABLE
   1666                              GSN_DNS_INIT_PARAM_T gsnDnsInitParams;
   1667                              if(s2wCurrent.lmtdApConf.dnsServerEnable)
   \                     ??CrossCallReturnLabel_8:
   \   000000FA   0x7D38             LDRB     R0,[R7, #+20]
   \   000000FC   0xB148             CBZ.N    R0,??s2w_StartDhcpDnsServer_1
   1668                              {
   1669                                  memset(&gsnDnsInitParams,0,sizeof(GSN_DNS_INIT_PARAM_T));
   \   000000FE   0x.... 0x....      BL       ?Subroutine10
   1670                                  S2wDnsConfigGet(&gsnDnsInitParams);
   \                     ??CrossCallReturnLabel_24:
   \   00000102   0x.... 0x....      BL       S2wDnsConfigGet
   1671                                  GsnDnsSrvr_Start(&dnsServer,s2wCurrent.lmtdApConf.dnsDomainName,&gsnDnsInitParams);
   \   00000106   0xAA00             ADD      R2,SP,#+0
   \   00000108   0xF206 0x21A1      ADDW     R1,R6,#+673
   \   0000010C   0x4640             MOV      R0,R8
   \   0000010E   0x.... 0x....      BL       GsnDnsSrvr_Start
   1672                              }
   1673          
   1674          #endif
   1675                          }
   1676          #endif
   1677          return 0;
   \                     ??s2w_StartDhcpDnsServer_1:
   \   00000112   0x2000             MOVS     R0,#+0
   \   00000114   0xB02C             ADD      SP,SP,#+176
   \   00000116   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1678          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x2218             MOVS     R2,#+24
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0xF500 0x40D6      ADD      R0,R0,#+27392
   \   00000006   0x2211             MOVS     R2,#+17
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0x4450             ADD      R0,R10,R0
   \   00000004   0x61A0             STR      R0,[R4, #+24]
   \   00000006   0x4648             MOV      R0,R9
   \   00000008   0x.... 0x....      B.W      GsnDhcpSrvr_Start

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "App Main Ctx">`:
   \   00000000   0x41 0x70          DC8 "App Main Ctx"
   \              0x70 0x20    
   \              0x4D 0x61    
   \              0x69 0x6E    
   \              0x20 0x43    
   \              0x74 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "EIM1102">`:
   \   00000000   0x45 0x49          DC8 "EIM1102"
   \              0x4D 0x31    
   \              0x31 0x30    
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ZIM1102">`:
   \   00000000   0x5A 0x49          DC8 "ZIM1102"
   \              0x4D 0x31    
   \              0x31 0x30    
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SEIM1102">`:
   \   00000000   0x53 0x45          DC8 "SEIM1102"
   \              0x49 0x4D    
   \              0x31 0x31    
   \              0x30 0x32    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SPIM1102">`:
   \   00000000   0x53 0x50          DC8 "SPIM1102"
   \              0x49 0x4D    
   \              0x31 0x31    
   \              0x30 0x32    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "EIM0012">`:
   \   00000000   0x45 0x49          DC8 "EIM0012"
   \              0x4D 0x30    
   \              0x30 0x31    
   \              0x32 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PIM0012">`:
   \   00000000   0x50 0x49          DC8 "PIM0012"
   \              0x4D 0x30    
   \              0x30 0x31    
   \              0x32 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {&"Soft Tmr Msg Handler1", softTmrM`:
   \   00000000   0x........         DC32 `?<Constant "Soft Tmr Msg Handler1">`, softTmrMsgHHdlrStack, 2048
   \              0x........   
   \              0x00000800   
   \   0000000C   0x00000001         DC32 1, softTmrMsgHHdlrBuff, 32
   \              0x........   
   \              0x00000020   
   \   00000018   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R0,??DataTable55_21
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemCreate

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable51:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52:
   \   00000000   0x........         DC32     heapBytePool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_1:
   \   00000000   0x20000400         DC32     0x20000400

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable52_2:
   \   00000000   0x........         DC32     pGsnBytePoolHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54:
   \   00000000   0x........         DC32     appMainCtxThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_1:
   \   00000000   0xE000ED10         DC32     0xe000ed10

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_2:
   \   00000000   0x........         DC32     appCtx+0x6AFC

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_3:
   \   00000000   0x........         DC32     appCtx+0x829C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_4:
   \   00000000   0x........         DC32     gsnBrClkCtlCtx2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_5:
   \   00000000   0x........         DC32     AppMainCtx_GsnCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_6:
   \   00000000   0x........         DC32     wddStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_7:
   \   00000000   0x41010020         DC32     0x41010020

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable54_8:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55:
   \   00000000   0x72 0x00          DC8      "r",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_1:
   \   00000000   0x77 0x2B          DC8      0x77, 0x2B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_2:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_3:
   \   00000000   0x41010004         DC32     0x41010004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_4:
   \   00000000   0x40160200         DC32     0x40160200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_5:
   \   00000000   0x4100039C         DC32     0x4100039c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_6:
   \   00000000   0x410002A8         DC32     0x410002a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_7:
   \   00000000   0x40070000         DC32     0x40070000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_8:
   \   00000000   0x41010198         DC32     0x41010198

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_9:
   \   00000000   0x........         DC32     ncmMsgQueueBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_10:
   \   00000000   0x........         DC32     AppS2wNetConnMgr_Cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_11:
   \   00000000   0x........         DC32     NcmCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_12:
   \   00000000   0x........         DC32     NcmCtx+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_13:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_14:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_15:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_16:
   \   00000000   0x........         DC32     ncmAutoMode

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_17:
   \   00000000   0x........         DC32     current_wlan_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_18:
   \   00000000   0x........         DC32     DHCP_notify

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_19:
   \   00000000   0x........         DC32     AppS2w_WddDisconCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_20:
   \   00000000   0x........         DC32     dSendSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_21:
   \   00000000   0x........         DC32     wlanRespTimeoutTmrHndl+0x1C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_22:
   \   00000000   0x........         DC32     wlanRespTimeoutTmrHndl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_23:
   \   00000000   0x........         DC32     isoTxSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_24:
   \   00000000   0x........         DC32     App_IsotxCtrlNotifCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_25:
   \   00000000   0x........         DC32     App_IsotxDataNotifCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_26:
   \   00000000   0x........         DC32     s2wCurrent+0x3B4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_27:
   \   00000000   0x410100A0         DC32     0x410100a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_28:
   \   00000000   0x41100624         DC32     0x41100624

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_29:
   \   00000000   0x........         DC32     ipStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_30:
   \   00000000   0x........         DC32     AppS2wRecv_Filter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_31:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_32:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_33:
   \   00000000   0x........         DC32     App_InterfaceStartCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_34:
   \   00000000   0x........         DC32     App_InterfaceStopCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_35:
   \   00000000   0x41010010         DC32     0x41010010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_36:
   \   00000000   0x........         DC32     romFwImageFlashAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_37:
   \   00000000   0x41100000         DC32     0x41100000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_38:
   \   00000000   0x........         DC32     App_WlanRespTimeoutTmrCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_39:
   \   00000000   0x........         DC32     App_WlanBootIndCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_40:
   \   00000000   0x41000360         DC32     0x41000360

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_41:
   \   00000000   0x4100007C         DC32     0x4100007c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_42:
   \   00000000   0x........         DC32     dnsServer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_43:
   \   00000000   0x........         DC32     dhcpSrvr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_44:
   \   00000000   0x........         DC32     dhcpSrvrCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_45:
   \   00000000   0xC0A8F002         DC32     0xc0a8f002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_46:
   \   00000000   0x00015180         DC32     0x15180

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_47:
   \   00000000   0xC0A8F001         DC32     0xc0a8f001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_48:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable55_49:
   \   00000000   0x........         DC32     dhcpServerFlags

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "send() failed: %d\\r\\n">`:
   \   00000000   0x73 0x65          DC8 "send() failed: %d\015\012"
   \              0x6E 0x64    
   \              0x28 0x29    
   \              0x20 0x66    
   \              0x61 0x69    
   \              0x6C 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000   0x00000000         DC32 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "station">`:
   \   00000000   0x73 0x74          DC8 "station"
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "E:\\\\Gainspan\\\\gs2011mxx...">`:
   \   00000000   0x45 0x3A          DC8 45H, 3AH, 5CH, 47H, 61H, 69H, 6EH, 73H
   \              0x5C 0x47    
   \              0x61 0x69    
   \              0x6E 0x73    
   \   00000008   0x70 0x61          DC8 70H, 61H, 6EH, 5CH, 67H, 73H, 32H, 30H
   \              0x6E 0x5C    
   \              0x67 0x73    
   \              0x32 0x30    
   \   00000010   0x31 0x31          DC8 31H, 31H, 6DH, 78H, 78H, 5FH, 53H, 44H
   \              0x6D 0x78    
   \              0x78 0x5F    
   \              0x53 0x44    
   \   00000018   0x4B 0x5F          DC8 4BH, 5FH, 73H, 32H, 77H, 5FH, 74H, 6CH
   \              0x73 0x32    
   \              0x77 0x5F    
   \              0x74 0x6C    
   \   00000020   0x73 0x5F          DC8 73H, 5FH, 74H, 6CH, 73H, 6CH, 70H, 5FH
   \              0x74 0x6C    
   \              0x73 0x6C    
   \              0x70 0x5F    
   \   00000028   0x35 0x2E          DC8 35H, 2EH, 31H, 2EH, 35H, 5FH, 47H, 41H
   \              0x31 0x2E    
   \              0x35 0x5F    
   \              0x47 0x41    
   \   00000030   0x5C 0x75          DC8 5CH, 75H, 73H, 65H, 72H, 61H, 70H, 70H
   \              0x73 0x65    
   \              0x72 0x61    
   \              0x70 0x70    
   \   00000038   0x73 0x5F          DC8 73H, 5FH, 6DH, 71H, 74H, 74H, 5CH, 73H
   \              0x6D 0x71    
   \              0x74 0x74    
   \              0x5C 0x73    
   \   00000040   0x32 0x77          DC8 32H, 77H, 5CH, 73H, 72H, 63H, 5CH, 6DH
   \              0x5C 0x73    
   \              0x72 0x63    
   \              0x5C 0x6D    
   \   00000048   0x61 0x69          DC8 61H, 69H, 6EH, 5CH, 61H, 70H, 70H, 5FH
   \              0x6E 0x5C    
   \              0x61 0x70    
   \              0x70 0x5F    
   \   00000050   0x6D 0x61          DC8 6DH, 61H, 69H, 6EH, 5FH, 74H, 68H, 72H
   \              0x69 0x6E    
   \              0x5F 0x74    
   \              0x68 0x72    
   \   00000058   0x65 0x61          DC8 65H, 61H, 64H, 2EH, 63H, 0
   \              0x64 0x2E    
   \              0x63 0x00    
   \   0000005E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "A:/WlanRfCalibDataFile">`:
   \   00000000   0x41 0x3A          DC8 "A:/WlanRfCalibDataFile"
   \              0x2F 0x57    
   \              0x6C 0x61    
   \              0x6E 0x52    
   \              0x66 0x43    
   \              0x61 0x6C    
   \              0x69 0x62    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x46 0x69    
   \              0x6C 0x65    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Boot Reason :    %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "Boot Reason :    %d\015\012"
   \              0x6F 0x74    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x73 0x6F    
   \              0x6E 0x20    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Boot Info :      %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "Boot Info :      %d\015\012"
   \              0x6F 0x74    
   \              0x20 0x49    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset Type:      %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Type:      %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset Reason :   %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Reason :   %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x52 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x3A    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset Info Size: %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Info Size: %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x20 0x53    
   \              0x69 0x7A    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Reset Addl Info: 0x%x\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Addl Info: 0x%x\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x64 0x6C    
   \              0x20 0x49    
   \              0x6E 0x66    
   \              0x6F 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ResetInfo:\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "ResetInfo:\015\012"
   \              0x73 0x65    
   \              0x74 0x49    
   \              0x6E 0x66    
   \              0x6F 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\t0x%08x\\r\\n">`:
   \   00000000   0x09 0x30          DC8 "\t0x%08x\015\012"
   \              0x78 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "config.gainspan\\000">`:
   \   00000000   0x63 0x6F          DC8 63H, 6FH, 6EH, 66H, 69H, 67H, 2EH, 67H
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x2E 0x67    
   \   00000008   0x61 0x69          DC8 61H, 69H, 6EH, 73H, 70H, 61H, 6EH, 0
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x00    
   \   00000010   0x00               DC8 0
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 8, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {(NX_IP *)0}>`:
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Soft Tmr Msg Handler1">`:
   \   00000000   0x53 0x6F          DC8 "Soft Tmr Msg Handler1"
   \              0x66 0x74    
   \              0x20 0x54    
   \              0x6D 0x72    
   \              0x20 0x4D    
   \              0x73 0x67    
   \              0x20 0x48    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x72    
   \              0x31 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "r">`:
   \   00000000   0x72 0x00          DC8 "r"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "w+">`:
   \   00000000   0x77 0x2B          DC8 "w+"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   1679          
   1680          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AppMainCtx_GsnCb
         0   -> AppMainCtx_TaskNotify
      32   AppMainCtx_Init
        32   -> GsnOsal_ThreadCreate
        32   -> _tx_queue_create
        32   -> memset
       0   AppMainCtx_IsDpSlpEnabled
       8   AppMainCtx_TaskNotify
         8   -> _tx_queue_send
     136   AppMainCtx_ThreadEntry
       136   -> AppNcm_Init
       136   -> AppS2wHal_AppEntry
       136   -> AppS2wHal_Cm3ClkCfg
       136   -> AppS2wHal_Register
       136   -> AppS2w_ProfileInit
       136   -> AppS2w_RtcCfg
       136   -> App_FsInit
       136   -> App_MsgProcess
       136   -> App_WlanBootReq
       136   -> App_WpaSupplicantInit
       136   -> GsnActlWwdog_Enable
       136   -> GsnClkCtl_CtxGet
       136   -> GsnClkCtl_Init
       136   -> GsnExcpHdlr_Init
       136   -> GsnHeIf_DriverDeinit
       136   -> GsnHeIf_TrangGenerate
       136   -> GsnHi_Init
       136   -> GsnMsgHandler_Create
       136   -> GsnNw_Init
       136   -> GsnNw_PktPoolHndlGet
       136   -> GsnNwif_BsdInitialize
       136   -> GsnOsal_QueueMsgSizeInWords
       136   -> GsnOtpMm_Init
       136   -> GsnOtp_Init
       136   -> GsnPwrMgmt_Init
       136   -> GsnSoftTmr_Init
       136   -> GsnSoftTmr_Start
       136   -> GsnSq_Init
       136   -> GsnSq_TaskMonitorRegister
       136   -> GsnSq_TaskMonitorStart
       136   -> GsnSq_TaskMonitorStop
       136   -> GsnSysCtl_Init_Patch
       136   -> GsnSysif_Init
       136   -> GsnTod_Init
       136   -> GsnWdd_MsgHdlrInit
       136   -> MALLOC
       136   -> __aeabi_memclr4
       136   -> __aeabi_memcpy4
       136   -> _nx_system_ticks_per_second_update
       136   -> _tx_queue_receive
       136   -> _tx_thread_interrupt_control
       136   -> srand
      40   AppNcm_Init
        40   -> GsnNcm_Init
        40   -> GsnOsal_SemCreate
       0   AppNcm_NcmExecuteCb
         0   -> AppMainCtx_TaskNotify
       0   AppS2w_RtcCfg
       0   AppS2w_WddDisconCb
         0   -> GsnOsal_SemRelease
      16   App_CalibDataWrIndCb
        16   -> App_FsInit
       0   App_CreateLock
         0   -> GsnOsal_SemCreate
       0   App_DefaultIfInit
         0   -> App_IfInit
      16   App_IdleHandlerLoop
        16   -> GsnPwrMgmt_DpSlpActivityGet
        16   -> GsnSq_TaskMonitorStarted
        16   -> _tx_byte_pool_create
        16   -> _tx_thread_resume
     152   App_IfInit
       152   -> App_WLRPANinit
       152   -> GsnIsotx_Init
       152   -> GsnIsotxif_Init
       152   -> GsnNwIf_Init
       152   -> GsnNwIf_RecvFilterRegister
       152   -> GsnNw_PktPoolHndlGet
       152   -> GsnOsal_SemCreate
       152   -> GsnWdd_Init
       152   -> GsnWdd_SetAssocTimeout
       152   -> GsnWif_Init
      32   App_IfReinit
        32   -> App_InterfaceStart
        32   -> GsnNwIf_Reinit
        32   -> GsnWdd_Reinit
        32   -> GsnWdd_ScanParamSet
        32   -> GsnWif_Reinit
      40   App_InterfaceStart
        40   -> App_WaitOnLock
        40   -> GsnOsal_SemCreate
        40   -> GsnSysCtl_IfStartReq_Patch
       0   App_InterfaceStartCb
         0   -> GsnOsal_SemRelease
      24   App_InterfaceStop
        24   -> App_WaitOnLock
        24   -> GsnOsal_SemCreate
        24   -> GsnSysCtl_IfStopReq
       0   App_InterfaceStopCb
         0   -> GsnOsal_SemRelease
       0   App_IsotxCtrlNotifCb
         0   -> GsnOsal_SemRelease
       0   App_IsotxDataNotifCb
    1400   App_MsgProcess
      1400   -> AppS2wCmd_MdnsAnnounceAll
      1400   -> AppS2wHal_BattChkProcess
      1400   -> AppS2wHal_MacAddrSet
      1400   -> AppS2wHal_MdnsInit
      1400   -> AppS2wHal_WpsAssociate
      1400   -> AppS2wHttpd_Stop
      1400   -> AppS2wProcess_DhcpFailNotify
      1400   -> AppS2wProcess_DhcpIpChangeNotify
      1400   -> AppS2wProcess_DhcpStop
      1400   -> AppS2wProcess_EventNotify
      1400   -> AppS2wProcess_IpConflict
      1400   -> AppS2wProcess_NcmAutoConnectL4Connect
      1400   -> AppS2wProcess_SntpTimerNotify
      1400   -> AppS2wProcess_StatusNotify
      1400   -> AppS2w_DataBufferTransmit
      1400   -> AppS2w_ExitDpSleep
      1400   -> AppS2w_WebServerStart
      1400   -> App_IfReinit
      1400   -> App_InterfaceStop
      1400   -> GsnMdns_Execute
      1400   -> GsnNcm_ConfigGet
      1400   -> GsnNcm_Execute
      1400   -> GsnNwif_IPv4Configure
      1400   -> GsnOsal_SemAcquire
      1400   -> GsnOsal_SemCreate
      1400   -> GsnOsal_SemRelease
      1400   -> GsnSq_TaskMonitorDeregister
      1400   -> GsnSq_TaskMonitorRegister
      1400   -> GsnSq_TaskMonitorStart
      1400   -> GsnSq_TaskMonitorStop
      1400   -> GsnSys_Reset
      1400   -> GsnTaskSleep
      1400   -> GsnWdd_AssocStatusGet
      1400   -> GsnWdd_Disconnect
      1400   -> GsnWdd_Ioctl
      1400   -> S2wUart_TxStatusGet
      1400   -> S2wWebProv_WebProvStart
      1400   -> S2w_Printf
      1400   -> S2w_macAddrRTCGet
      1400   -> __aeabi_memclr4
      1400   -> memcpy
      1400   -> memset
      1400   -> s2wSpiFs_Flush
      24   App_RtcDump
         0   -> S2w_Printf
        24   -> S2w_Printf
      16   App_SoftTmrMmsgHandlr
        16   -> GsnSoftTmr_Run
        16   -> GsnSq_TaskMonitorStart
        16   -> GsnSq_TaskMonitorStop
       0   App_SysTickCb
       0   App_UnLock
         0   -> GsnOsal_SemRelease
       8   App_WaitOnLock
         8   -> GsnOsal_SemAcquire
         0   -> _tx_semaphore_delete
       8   App_WlanBootIndCb
         0   -> GsnOsal_SemRelease
         8   -> GsnSoftTmr_Stop
     608   App_WlanBootReq
       608   -> GsnOsal_SemCreate
       608   -> GsnOtpMm_Read
       608   -> GsnSoftTmr_Start
       608   -> GsnSysCtl_BootReq_Patch
       608   -> GsnSysCtl_DieTempSendTimerStart
       608   -> __iar_Strstr
       608   -> fsm_close
       608   -> fsm_filelength
       608   -> fsm_open
       608   -> fsm_read
       8   App_WlanRespTimeoutTmrCb
         0   -> GsnSys_Reset
         8   -> memcpy
      16   App_WpaSupplicantInit
        16   -> GsnWdd_WpaSupplicantInit
       0   GsnOsal_QueueMsgSizeInWords
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemCreate
         8   -> _tx_semaphore_create
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
     208   s2w_StartDhcpDnsServer
       208   -- Indirect call
       208   -> GsnDhcpSrvr_Start
       208   -> GsnDnsSrvr_Start
       208   -> GsnNwIf_IpConfigGet
       208   -> S2wDnsConfigGet
       208   -> memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant "A:/WlanRfCalibDataFile">
      16  ?<Constant "App Main Ctx">
      24  ?<Constant "Boot Info :      %d\r\n">
      24  ?<Constant "Boot Reason :    %d\r\n">
      96  ?<Constant "E:\\Gainspan\\gs2011mxx...">
       8  ?<Constant "EIM0012">
       8  ?<Constant "EIM1102">
       8  ?<Constant "PIM0012">
      24  ?<Constant "Reset Addl Info: 0x%x\r\n">
      24  ?<Constant "Reset Info Size: %d\r\n">
      24  ?<Constant "Reset Reason :   %d\r\n">
      24  ?<Constant "Reset Type:      %d\r\n">
      16  ?<Constant "ResetInfo:\r\n">
      12  ?<Constant "SEIM1102">
      12  ?<Constant "SPIM1102">
      24  ?<Constant "Soft Tmr Msg Handler1">
       8  ?<Constant "ZIM1102">
       4  ?<Constant "\r\n">
      12  ?<Constant "\t0x%08x\r\n">
      20  ?<Constant "config.gainspan\000">
       2  ?<Constant "r">
      20  ?<Constant "send() failed: %d\r\n">
       8  ?<Constant "station">
       4  ?<Constant "w+">
      28  ?<Constant {&"Soft Tmr Msg Handler1", softTmrM
      20  ?<Constant {(NX_IP *)0}>
       8  ?<Constant {0}>
      48  ?<Constant {0}>_1
      64  ?<Constant {0}>_2
       4  ?<Constant {0}>_3
       4  ??DataTable51
       4  ??DataTable52
       4  ??DataTable52_1
       4  ??DataTable52_2
       4  ??DataTable54
       4  ??DataTable54_1
       4  ??DataTable54_2
       4  ??DataTable54_3
       4  ??DataTable54_4
       4  ??DataTable54_5
       4  ??DataTable54_6
       4  ??DataTable54_7
       4  ??DataTable54_8
       4  ??DataTable55
       4  ??DataTable55_1
       4  ??DataTable55_10
       4  ??DataTable55_11
       4  ??DataTable55_12
       4  ??DataTable55_13
       4  ??DataTable55_14
       4  ??DataTable55_15
       4  ??DataTable55_16
       4  ??DataTable55_17
       4  ??DataTable55_18
       4  ??DataTable55_19
       4  ??DataTable55_2
       4  ??DataTable55_20
       4  ??DataTable55_21
       4  ??DataTable55_22
       4  ??DataTable55_23
       4  ??DataTable55_24
       4  ??DataTable55_25
       4  ??DataTable55_26
       4  ??DataTable55_27
       4  ??DataTable55_28
       4  ??DataTable55_29
       4  ??DataTable55_3
       4  ??DataTable55_30
       4  ??DataTable55_31
       4  ??DataTable55_32
       4  ??DataTable55_33
       4  ??DataTable55_34
       4  ??DataTable55_35
       4  ??DataTable55_36
       4  ??DataTable55_37
       4  ??DataTable55_38
       4  ??DataTable55_39
       4  ??DataTable55_4
       4  ??DataTable55_40
       4  ??DataTable55_41
       4  ??DataTable55_42
       4  ??DataTable55_43
       4  ??DataTable55_44
       4  ??DataTable55_45
       4  ??DataTable55_46
       4  ??DataTable55_47
       4  ??DataTable55_48
       4  ??DataTable55_49
       4  ??DataTable55_5
       4  ??DataTable55_6
       4  ??DataTable55_7
       4  ??DataTable55_8
       4  ??DataTable55_9
       8  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine10
      10  ?Subroutine2
       8  ?Subroutine3
      12  ?Subroutine4
       6  ?Subroutine5
      12  ?Subroutine6
       8  ?Subroutine7
      10  ?Subroutine8
      16  ?Subroutine9
       2  AppMainCtx_GsnCb
      86  AppMainCtx_Init
       8  AppMainCtx_IsDpSlpEnabled
      16  AppMainCtx_TaskNotify
     940  AppMainCtx_ThreadEntry
      78  AppNcm_Init
      10  AppNcm_NcmExecuteCb
      34  AppS2w_RtcCfg
       8  AppS2w_WddDisconCb
      26  App_CalibDataWrIndCb
      10  App_CreateLock
      20  App_DefaultIfInit
      96  App_IdleHandlerLoop
     316  App_IfInit
     110  App_IfReinit
      58  App_InterfaceStart
       2  App_InterfaceStartCb
      40  App_InterfaceStop
       2  App_InterfaceStopCb
       8  App_IsotxCtrlNotifCb
       4  App_IsotxDataNotifCb
     946  App_MsgProcess
     116  App_RtcDump
      32  App_SoftTmrMmsgHandlr
      18  App_SysTickCb
       2  App_UnLock
      30  App_WaitOnLock
      22  App_WlanBootIndCb
     244  App_WlanBootReq
      46  App_WlanRespTimeoutTmrCb
      34  App_WpaSupplicantInit
      54  GsnOsal_QueueMsgSizeInWords
      18  GsnOsal_SemAcquire
      22  GsnOsal_SemCreate
      18  GsnOsal_SemRelease
      56  GsnOsal_ThreadCreate
      32  NcmCtx
          AppWddDisconSem
   33620  appCtx
          appMainCtxThread
          appMainThreadMsgQueue
          appMainThreadMsgQueueBuf
    4096  appMainCtxThreadStack
     296  gsnBrClkCtlCtx2
          pSysTickTmrHndl
          gsnHifStats
          gsnBrOtpMmCtx1
          gsnBrClkCtlCtx1
          gsnBrOtpCtx1
          sysTickTmr
    5120  ipStack
          arpCache
     128  isoTxSem
          gsnWddStats
          gsnNwifStats
      12  memcpy
      20  memset
      16  ncmMsgQueueBuf
    4096  s2wSerialBuf
    8192  s2wSerialInputTaskStack
    2328  s2wSerialPortHandle
    2328  s2wSerialPortHandle1
     282  s2w_StartDhcpDnsServer
     920  scanDisplayInfo
      32  softTmrMsgHHdlrBuff
    2048  softTmrMsgHHdlrStack
   43008  wddStack
          hifMsgRcvTskStack
          sysCtrlTaskStack
          nwSbufPktPool
          nwLbufPktPool
      88  wlanRespTimeoutTmrHndl
          moduleTypes
          syscSem
          wlanRespTimeoutTmr

 
 38 732 bytes in section .bss
     88 bytes in section .data
 67 528 bytes in section .noinit
    230 bytes in section .rodata
  4 596 bytes in section .text
 
   4 396 bytes of CODE  memory (+ 200 bytes shared)
     230 bytes of CONST memory
 106 348 bytes of DATA  memory

Errors: none
Warnings: none
