###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  14:30:56 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userlib #
#                    \ncm\src\gsn_ncm.c                                       #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userlib #
#                    \ncm\src\gsn_ncm.c -D TX_ENABLE_IAR_LIBRARY_SUPPORT -D   #
#                    IAR -D FIXED_ROM_BUILD -D RUN_ALL_FROM_FLASH -D          #
#                    TM_USE_HTTPD -D S2W_DNS_CLIENT -D                        #
#                    NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE -D   #
#                    S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D           #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ -lA                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ --diag_suppress        #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\Debug\Obj\    #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\core\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\drivers\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\modules\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\rtos\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\netx_bsd_la #
#                    yer\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\main\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\src\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\hw_e #
#                    ngine_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1 #
#                    .5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\sec #
#                    urity\wpa_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp #
#                    _5.1.5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ #
#                    ncm\inc\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1. #
#                    5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ctx\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\hal\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\parser\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\config\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\otafu\inc\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\provisioning\inc\ -I  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_log\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_log\ -Ohz              #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\gsn_ncm.lst             #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\Obj\gsn_ncm.o                #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userlib\ncm\src\gsn_ncm.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2011-2012 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: gsn_ncm.c,v $
     28          *
     29          * Description : This file contains public definitions for nw connection manager.
     30          * It provides APIs for the nw connection manager
     31          *******************************************************************************/
     32          
     33          /*****************************************************************************
     34          * File Inclusion
     35          *****************************************************************************/
     36          #include "gsn_defines.h"
     37          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueueGet(TX_QUEUE *, unsigned char *, UINT32)
   \                     GsnOsal_QueueGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_queue_receive
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_QueueGet_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_QueueGet_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnWdd_DisassocIndCbReg(GSN_WDD_CTX_T *, GSN_WDD_DISASSOC_IND_CB_T, void *)
   \                     GsnWdd_DisassocIndCbReg:
   \   00000000   0x6341             STR      R1,[R0, #+52]
   \   00000002   0x6382             STR      R2,[R0, #+56]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnWdd_BeaconMissCbReg(GSN_WDD_CTX_T *, void (*)(void *, UINT32), void *)
   \                     GsnWdd_BeaconMissCbReg:
   \   00000000   0x63C1             STR      R1,[R0, #+60]
   \   00000002   0x6402             STR      R2,[R0, #+64]
   \   00000004   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnWdd_FrameTxFailIndCbReg(GSN_WDD_CTX_T *, GSN_WDD_FRAME_TXFAIL__IND_CB_T, void *)
   \                     GsnWdd_FrameTxFailIndCbReg:
   \   00000000   0x6641             STR      R1,[R0, #+100]
   \   00000002   0x6682             STR      R2,[R0, #+104]
   \   00000004   0x4770             BX       LR               ;; return
     38          #include "gsn_ncm.h"
     39          #include "gsn_ncm_roam.h"
     40          
     41          #if 0
     42          
     43          #define GSN_NCM_PRINTF  AppTls_DbgPrintf
     44          #else

   \                                 In section .text, align 2, keep-with-next
     45          INT32
     46          GSN_NCM_PRINTF  (const char *format, ...)
     47          {        
   \                     GSN_NCM_PRINTF:
   \   00000000   0xB40E             PUSH     {R1-R3}
     48          	return 0;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xB003             ADD      SP,SP,#+12
   \   00000006   0x4770             BX       LR               ;; return
     49          }
     50          #endif
     51          /**
     52           *******************************************************************************
     53           * @file gsn_ncm.c
     54           * @brief GSN NCM public API implementation.
     55           *    This file contains the public APIs and structures of NCM module.
     56           ******************************************************************************/
     57          /*******************************************************************************
     58          * Private    Function Prototypes
     59          ******************************************************************************/
     60          VOID
     61          GsnNcm_MsgPost(GSN_NCM_CTX_T* pNcm, UINT32 msgId);
     62          
     63          VOID 
     64          GsnNcm_DisassocIndCb(VOID* ctx, GSN_WDD_DISASSOCIATION_CB_INFO *pDisAssocInfo);
     65          
     66          VOID 
     67          GsnNcm_BeconMissIndCb(VOID* ctx, UINT32 beaconMissCnt);
     68          
     69          VOID
     70          GsnNcm_L2ConnectCb(VOID* ctext, INT32 status);
     71          
     72          GSN_STATUS_T
     73          GsnNcm_L2Connect(GSN_NCM_CTX_T* pNcm);
     74          
     75          VOID
     76          GsnNcm_L2DisconnectCb(VOID* ctx, INT32 status);
     77          
     78          GSN_STATUS_T
     79          GsnNcm_L2Disconnect(GSN_NCM_CTX_T* pNcm);
     80          
     81          VOID
     82          GsnNcm_L3ConnectCb(INT32 status, VOID* ctx);
     83          
     84          GSN_STATUS_T
     85          GsnNcm_L3Connect(GSN_NCM_CTX_T* pNcm);
     86          
     87          GSN_STATUS_T
     88          GsnNcm_L3Disconnect(GSN_NCM_CTX_T* pNcm);
     89          
     90          VOID
     91          GsnNcm_L2ConnectFail(GSN_NCM_CTX_T* pNcm);
     92          
     93          VOID
     94          GsnNcm_TimerCb( VOID* context, GSN_SOFT_TMR_HANDLE_T timerHandle );    
     95          
     96          VOID 
     97          GsnNcm_FrameTxFailIndCb(VOID* ctx, GSN_WDD_FRAME_TXFAIL_INFO_T *pFrmTxFailureInfo);
     98          
     99          
    100          /*******************************************************************************
    101           * Public Functions
    102           ******************************************************************************/
    103          /**
    104           *******************************************************************************
    105           *
    106           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    107          PUBLIC GSN_STATUS_T
    108          GsnNcm_Init(GSN_NCM_CTX_T* pNcm, GSN_NCM_INIT_PARAM_T *pParam)
    109          {  
   \                     GsnNcm_Init:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460D             MOV      R5,R1
   \   00000004   0x4604             MOV      R4,R0
    110          	UINT32 msgSize;
    111          
    112          	//GSN_NCM_PRINTF("[NCM] Init\r\n");
    113          
    114          	/*  memset the object memory */
    115          	memset(pNcm,0,sizeof(GSN_NCM_CTX_T));
   \   00000006   0xF44F 0x62F6      MOV      R2,#+1968
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       memset
    116          
    117          	/* Create NCM message queue */          
    118          	msgSize = GsnOsal_QueueMsgSizeInWords(sizeof(GSN_NCM_MSG_T));
    119          	GsnOsal_QueueCreate(&pNcm->msgQueue, msgSize, (UINT8*)pParam->msgQueueBuff,pParam->msgQueueBuffSize);
   \   00000010   0x68E8             LDR      R0,[R5, #+12]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x2201             MOVS     R2,#+1
   \   00000016   0x68AB             LDR      R3,[R5, #+8]
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xF104 0x0030      ADD      R0,R4,#+48
   \   0000001E   0x.... 0x....      BL       _tx_queue_create
    120          
    121          	/* Initialize object members */
    122          	pNcm->pWdd = pParam->pWdd;
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x6720             STR      R0,[R4, #+112]
    123          	pNcm->pNwif = pParam->pNwif;
   \   00000026   0x6868             LDR      R0,[R5, #+4]
   \   00000028   0x6760             STR      R0,[R4, #+116]
    124          
    125          	pNcm->execMsgPostCb = pParam->execMsgPostCb;
   \   0000002A   0x6928             LDR      R0,[R5, #+16]
   \   0000002C   0x66A0             STR      R0,[R4, #+104]
    126          	pNcm->execMsgPostCbCtx = pParam->execMsgPostCbCtx;
   \   0000002E   0x6968             LDR      R0,[R5, #+20]
   \   00000030   0x66E0             STR      R0,[R4, #+108]
    127          
    128          	/* Initialize connection mgr state */
    129          	pNcm->state= GSN_NCM_STATE_INITIALISED;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x7020             STRB     R0,[R4, #+0]
    130          	pNcm->ncmStarted=0;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF884 0x07A9      STRB     R0,[R4, #+1961]
    131          
    132          	return GSN_SUCCESS;
   \   0000003C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    133          }
    134          
    135          /**
    136           *******************************************************************************
    137           *
    138           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    139          PUBLIC GSN_STATUS_T
    140          GsnNcm_ConfigSet(GSN_NCM_CTX_T* pNcm,  GSN_NCM_CONFIG_T* pConfig)
    141          {
   \                     GsnNcm_ConfigSet:
   \   00000000   0xB580             PUSH     {R7,LR}
    142              if (pConfig != &pNcm->config)
   \   00000002   0xF100 0x0278      ADD      R2,R0,#+120
   \   00000006   0x4291             CMP      R1,R2
   \   00000008   0xD004             BEQ.N    ??GsnNcm_ConfigSet_0
    143              {
    144          		memcpy(&pNcm->config, pConfig,  sizeof(GSN_NCM_CONFIG_T));
   \   0000000A   0xF44F 0x629D      MOV      R2,#+1256
   \   0000000E   0x3078             ADDS     R0,R0,#+120
   \   00000010   0x.... 0x....      BL       memcpy
    145              }
    146          	return GSN_SUCCESS;
   \                     ??GsnNcm_ConfigSet_0:
   \   00000014   0x2000             MOVS     R0,#+0
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
    147          }
    148          
    149          /**
    150           *******************************************************************************
    151           *
    152           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    153          PUBLIC GSN_STATUS_T
    154          GsnNcm_ConfigGet(GSN_NCM_CTX_T* pNcm,  GSN_NCM_CONFIG_T* pConfig)
    155          {
   \                     GsnNcm_ConfigGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x000B             MOVS     R3,R1
    156          	if((NULL != pConfig) && (pConfig != &pNcm->config))
   \   00000004   0xBF1C             ITT      NE 
   \   00000006   0xF100 0x0178      ADDNE    R1,R0,#+120
   \   0000000A   0x428B             CMPNE    R3,R1
   \   0000000C   0xD004             BEQ.N    ??GsnNcm_ConfigGet_0
    157          	{
    158          		/* copy back the config to app pointer */
    159          		memcpy(pConfig, &pNcm->config, sizeof(GSN_NCM_CONFIG_T));
   \   0000000E   0xF44F 0x629D      MOV      R2,#+1256
   \   00000012   0x4618             MOV      R0,R3
   \   00000014   0x.... 0x....      BL       memcpy
    160          	}
    161          	return GSN_SUCCESS;
   \                     ??GsnNcm_ConfigGet_0:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return
    162          }
    163          
    164          /**
    165           *******************************************************************************
    166           *
    167           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    168          PUBLIC GSN_NCM_CONFIG_T *
    169          GsnNcm_ConfigPtrGet(GSN_NCM_CTX_T* pNcm)
    170          {    
    171          	return &pNcm->config;
   \                     GsnNcm_ConfigPtrGet:
   \   00000000   0x3078             ADDS     R0,R0,#+120
   \   00000002   0x4770             BX       LR               ;; return
    172          }
    173          
    174          /**
    175           *******************************************************************************
    176           *
    177           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    178          PUBLIC GSN_STATUS_T
    179          GsnNcm_Start(GSN_NCM_CTX_T* pNcm, GSN_NCM_CTX_NOTIF_CB notifCb,	VOID *notifCbCtx)
    180          {
   \                     GsnNcm_Start:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
    181              GSN_STATUS_T retCode = GSN_SUCCESS;
   \   00000006   0x2700             MOVS     R7,#+0
    182              UINT32 msgId;
    183              
    184              /* check the module is in init state */
    185              if (pNcm->state != GSN_NCM_STATE_INITIALISED)
   \   00000008   0x7820             LDRB     R0,[R4, #+0]
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x4616             MOV      R6,R2
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xBF18             IT       NE 
   \   00000012   0xF04F 0x4700      MOVNE    R7,#-2147483648
    186              {
    187                  retCode = GSN_FAILURE;
    188                  goto GsnNcm_StartExit;
   \   00000016   0xD12E             BNE.N    ??GsnNcm_Start_0
    189              }
    190          
    191              GSN_NCM_PRINTF("[NCM] Start\r\n");
   \   00000018   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Start\\r\\n">`
   \   0000001C   0x.... 0x....      BL       GSN_NCM_PRINTF
    192          
    193              /* Register asynchronous notification call backs */
    194              if(GSN_WIF_WLAN_NW_TYPE_STA == pNcm->pWdd->wlanNwType)
   \   00000020   0x6F20             LDR      R0,[R4, #+112]
   \   00000022   0x.... 0x....      ADR.W    R8,GsnNcm_FrameTxFailIndCb
   \   00000026   0xF890 0x1028      LDRB     R1,[R0, #+40]
   \   0000002A   0x.... 0x....      ADR.W    R9,GsnNcm_BeconMissIndCb
   \   0000002E   0x.... 0x....      ADR.W    R10,GsnNcm_DisassocIndCb
   \   00000032   0x2901             CMP      R1,#+1
   \   00000034   0xD107             BNE.N    ??CrossCallReturnLabel_8
    195              {
    196                  GsnWdd_DisassocIndCbReg(pNcm->pWdd,GsnNcm_DisassocIndCb, pNcm);        
   \   00000036   0x4622             MOV      R2,R4
   \   00000038   0x4651             MOV      R1,R10
   \   0000003A   0x.... 0x....      BL       GsnWdd_DisassocIndCbReg
    197                  GsnWdd_BeaconMissCbReg(pNcm->pWdd, GsnNcm_BeconMissIndCb, pNcm);		
   \   0000003E   0x.... 0x....      BL       ?Subroutine5
    198                  GsnWdd_FrameTxFailIndCbReg(pNcm->pWdd, GsnNcm_FrameTxFailIndCb, pNcm);
   \                     ??CrossCallReturnLabel_6:
   \   00000042   0x.... 0x....      BL       ?Subroutine6
    199              }
    200              if(GSN_WIF_WLAN_NW_TYPE_AP == pNcm->pWdd->wlanNwType)
   \                     ??CrossCallReturnLabel_8:
   \   00000046   0x6F20             LDR      R0,[R4, #+112]
   \   00000048   0xF890 0x1028      LDRB     R1,[R0, #+40]
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD107             BNE.N    ??CrossCallReturnLabel_7
    201              {
    202                  /* Register NCM callbacks for various L2 events */
    203                  #if 0
    204                  GsnWdd_StaJoinedIndCbReg(pNcm->pWdd,GsnNcm_StaJoinedIndCb, pNcm);
    205                  GsnWdd_StaDisconctedCbReg(pNcm->pWdd,GsnNcm_StaDisconnectedInd, pNcm);
    206                  #endif
    207                  GsnWdd_DisassocIndCbReg(pNcm->pWdd,GsnNcm_DisassocIndCb, pNcm);        
   \   00000050   0x4622             MOV      R2,R4
   \   00000052   0x4651             MOV      R1,R10
   \   00000054   0x.... 0x....      BL       GsnWdd_DisassocIndCbReg
    208                  GsnWdd_BeaconMissCbReg(pNcm->pWdd, GsnNcm_BeconMissIndCb, pNcm);		
   \   00000058   0x.... 0x....      BL       ?Subroutine5
    209                  GsnWdd_FrameTxFailIndCbReg(pNcm->pWdd, GsnNcm_FrameTxFailIndCb, pNcm);
   \                     ??CrossCallReturnLabel_5:
   \   0000005C   0x.... 0x....      BL       ?Subroutine6
    210              }
    211              
    212              /*[TO DO] Register NCM Callbacks for various L3 events */
    213              /* [TO DO]Register NCM Callbacks for various L4 events */
    214              
    215              pNcm->notifCb = notifCb;
   \                     ??CrossCallReturnLabel_7:
   \   00000060   0xF8C4 0x5560      STR      R5,[R4, #+1376]
    216              pNcm->notifCbCtx = notifCbCtx;
   \   00000064   0xF8C4 0x6564      STR      R6,[R4, #+1380]
    217                  
    218              /* [TO DO]Register the gpio call back for going to provisioning mode if a valid gpio given*/
    219          	msgId = GSN_NCM_CTX_MSG_ID_L2_RESTART;
    220          	//if(TRUE == GsnWdd_AssocStatusGet(pNcm->pWdd))
    221          	//{
    222          	//	msgId = GSN_NCM_CTX_MSG_ID_L2_CONNECTED;
    223          	//}
    224          
    225              GsnNcm_MsgPost(pNcm, msgId);    
   \   00000068   0x2106             MOVS     R1,#+6
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       GsnNcm_MsgPost
    226          	pNcm->ncmStarted=1;
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0xF884 0x07A9      STRB     R0,[R4, #+1961]
    227          
    228          GsnNcm_StartExit:
    229          
    230              return retCode;
   \                     ??GsnNcm_Start_0:
   \   00000076   0x4638             MOV      R0,R7
   \   00000078   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    231          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x6F20             LDR      R0,[R4, #+112]
   \   00000002   0x4622             MOV      R2,R4
   \   00000004   0x4641             MOV      R1,R8
   \   00000006   0x.... 0x....      B.W      GsnWdd_FrameTxFailIndCbReg

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x6F20             LDR      R0,[R4, #+112]
   \   00000002   0x4622             MOV      R2,R4
   \   00000004   0x4649             MOV      R1,R9
   \   00000006   0x.... 0x....      B.W      GsnWdd_BeaconMissCbReg
    232          

   \                                 In section .text, align 2, keep-with-next
    233          PUBLIC GSN_STATUS_T
    234          GsnNcm_ProcessStop(GSN_NCM_CTX_T* pNcm)
    235          {
   \                     GsnNcm_ProcessStop:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
    236          	GSN_NCM_CTX_NOTIF_CB	tmpNotifCb;
    237          	VOID *					tmpNotifCbCtx;
    238              GSN_NCM_MSG_T msg;
    239          	UINT16 disconResonCode = 8;
    240          	GSN_NCM_PRINTF("[NCM] Process Stop\r\n");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Process Stop\\r\\n">`
   \   0000000A   0x.... 0x....      BL       GSN_NCM_PRINTF
    241          
    242              tmpNotifCb = pNcm->notifCb;
   \   0000000E   0xF8D4 0x5560      LDR      R5,[R4, #+1376]
    243              tmpNotifCbCtx = pNcm->notifCbCtx;
   \   00000012   0xF8D4 0x6564      LDR      R6,[R4, #+1380]
    244          
    245              pNcm->notifCb = NULL;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF8C4 0x0560      STR      R0,[R4, #+1376]
    246              pNcm->notifCbCtx = NULL;
   \   0000001C   0xF8C4 0x0564      STR      R0,[R4, #+1380]
    247          
    248          	
    249          	/* Stop NCM timer*/
    250          	if(NULL != pNcm->connMgrTmrHndl)
   \   00000020   0x6AA0             LDR      R0,[R4, #+40]
   \   00000022   0xB118             CBZ.N    R0,??GsnNcm_ProcessStop_0
    251          	{
    252          		GsnSoftTmr_Stop(pNcm->connMgrTmrHndl);
   \   00000024   0x.... 0x....      BL       GsnSoftTmr_Stop
    253          		pNcm->connMgrTmrHndl = NULL;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x62A0             STR      R0,[R4, #+40]
    254          	}
    255          
    256          	GsnNcm_L3Disconnect(pNcm);	
   \                     ??GsnNcm_ProcessStop_0:
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       GsnNcm_L3Disconnect
    257          	GsnWdd_Disconnect(pNcm->pWdd, disconResonCode, NULL, pNcm);
   \   00000032   0x4623             MOV      R3,R4
   \   00000034   0x6F20             LDR      R0,[R4, #+112]
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0x2108             MOVS     R1,#+8
   \   0000003A   0x.... 0x....      BL       GsnWdd_Disconnect
    258                  memset(&pNcm->config.KnownChnlScanEntry,0,sizeof(GSN_WDD_SCAN_ENTRY_T));
   \   0000003E   0x.... 0x....      BL       ?Subroutine3
    259                  pNcm->config.scanEntry = FALSE;
   \                     ??CrossCallReturnLabel_2:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xF884 0x0554      STRB     R0,[R4, #+1364]
    260          
    261          	if(!pNcm->config.ipConfig.ipv4.staticIp)
   \   00000048   0x.... 0x....      BL       ?Subroutine9
    262          	{
    263          		pNcm->config.ipConfig.ipv4.ipAddr = 0;
    264          	}
    265          	pNcm->scanKnownChCnt = pNcm->config.retryCountsConfig.maxScanKnownChCnt;
   \                     ??CrossCallReturnLabel_14:
   \   0000004C   0xF8D4 0x02F0      LDR      R0,[R4, #+752]
   \   00000050   0xF8C4 0x0568      STR      R0,[R4, #+1384]
    266          	pNcm->scanSpecChCnt = pNcm->config.retryCountsConfig.maxScanSpecChCnt;
    267          	pNcm->scanAllChCnt = pNcm->config.retryCountsConfig.maxScanAllChCnt;
    268          	pNcm->L3ConnectCnt = pNcm->config.retryCountsConfig.maxL3ConnectCnt;
    269              pNcm->state = GSN_NCM_STATE_INITIALISED;
    270          
    271          	while(1)
    272          	{
    273                  if(GSN_OSAL_SUCCESS != 
    274          			GsnOsal_QueueGet(&pNcm->msgQueue, ( UINT8* )&msg, GSN_OSAL_NO_WAIT));  
   \   00000054   0x2200             MOVS     R2,#+0
   \   00000056   0xF8D4 0x02F4      LDR      R0,[R4, #+756]
   \   0000005A   0xF8C4 0x056C      STR      R0,[R4, #+1388]
   \   0000005E   0xA900             ADD      R1,SP,#+0
   \   00000060   0xF8D4 0x02F8      LDR      R0,[R4, #+760]
   \   00000064   0xF8C4 0x0570      STR      R0,[R4, #+1392]
   \   00000068   0xF8D4 0x02FC      LDR      R0,[R4, #+764]
   \   0000006C   0xF8C4 0x0574      STR      R0,[R4, #+1396]
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x7020             STRB     R0,[R4, #+0]
   \   00000074   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000078   0x.... 0x....      BL       GsnOsal_QueueGet
    275                  {
    276                      break;
    277                  }
    278          	}
    279              if(tmpNotifCb != NULL)
   \   0000007C   0x0028             MOVS     R0,R5
   \   0000007E   0xD003             BEQ.N    ??GsnNcm_ProcessStop_1
    280              {
    281                  (tmpNotifCb)(tmpNotifCbCtx, pNcm, GSN_NCM_NOTIF_ID_STOP);
   \   00000080   0x2205             MOVS     R2,#+5
   \   00000082   0x4621             MOV      R1,R4
   \   00000084   0x4630             MOV      R0,R6
   \   00000086   0x47A8             BLX      R5
    282              }
    283          	pNcm->stopInProgress=0;
   \                     ??GsnNcm_ProcessStop_1:
   \   00000088   0x2000             MOVS     R0,#+0
   \   0000008A   0xF884 0x07A8      STRB     R0,[R4, #+1960]
    284          	pNcm->ncmStarted=0;
   \   0000008E   0xF884 0x07A9      STRB     R0,[R4, #+1961]
    285              return GSN_SUCCESS;
   \   00000092   0xBD76             POP      {R1,R2,R4-R6,PC}  ;; return
    286          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0xF240 0x222E      MOVW     R2,#+558
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xF204 0x3026      ADDW     R0,R4,#+806
   \   0000000A   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   00000004   0xB908             CBNZ.N   R0,??Subroutine9_0
   \   00000006   0xF8C4 0x01E4      STR      R0,[R4, #+484]
   \                     ??Subroutine9_0:
   \   0000000A   0x4770             BX       LR
    287          /**
    288           *******************************************************************************
    289           *
    290           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    291          PUBLIC GSN_STATUS_T
    292          GsnNcm_Stop(GSN_NCM_CTX_T* pNcm, UINT32 context)
    293          {
   \                     GsnNcm_Stop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    294              GSN_STATUS_T retValue;
    295          
    296              GSN_NCM_PRINTF("[NCM] Stop\r\n");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Stop\\r\\n">`
   \   0000000A   0x.... 0x....      BL       GSN_NCM_PRINTF
    297          
    298          	if( 0 == pNcm->ncmStarted)
   \   0000000E   0xF894 0x07A9      LDRB     R0,[R4, #+1961]
   \   00000012   0xB158             CBZ.N    R0,??GsnNcm_Stop_0
    299          	{
    300          		return GSN_SUCCESS;
    301          	}
    302              if (context == 0)
   \   00000014   0xB935             CBNZ.N   R5,??GsnNcm_Stop_1
    303              {
    304                  GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_STOP);    
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       GsnNcm_MsgPost
    305                  retValue = GSN_OPERATION_IN_PROGRESS;
   \   0000001E   0x.... 0x....      LDR.W    R0,??DataTable25  ;; 0x80000001
   \   00000022   0xBD32             POP      {R1,R4,R5,PC}
    306              }
    307              else
    308              {
    309                  retValue = GsnNcm_ProcessStop(pNcm);
   \                     ??GsnNcm_Stop_1:
   \   00000024   0x4620             MOV      R0,R4
   \   00000026   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000002A   0x....             B.N      GsnNcm_ProcessStop
    310              }
    311          
    312              return retValue;
   \                     ??GsnNcm_Stop_0:
   \   0000002C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    313          
    314          }
    315          
    316          
    317          
    318          /**
    319           *******************************************************************************
    320           *
    321           ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    322          PUBLIC VOID
    323          GsnNcm_Execute(GSN_NCM_CTX_T* pNcm)
    324          {
   \                     GsnNcm_Execute:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB086             SUB      SP,SP,#+24
    325              GSN_STATUS retcode = GSN_SUCCESS;
    326              GSN_OSAL_ERROR_T    errorCode;    
    327              UINT32 waitTicks;
    328              GSN_NCM_MSG_T msg;
    329          	UINT8 alreadyConnectedEvent = 0;
    330              waitTicks = (TRUE == pNcm->blockingOn)?GSN_OSAL_WAIT_FOREVER:GSN_OSAL_NO_WAIT;    
   \   00000006   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xBF0C             ITE      EQ 
   \   00000010   0xF04F 0x36FF      MOVEQ    R6,#-1
   \   00000014   0x2600             MOVNE    R6,#+0
    331              /* Read message from the NCM message queue*/
    332              do
    333              {
    334                  /**< wait on message queue (In Blocking Mode)*/        
    335                  errorCode = GsnOsal_QueueGet(&pNcm->msgQueue, ( UINT8* )&msg, waitTicks);                             
   \                     ??GsnNcm_Execute_1:
   \   00000016   0x4632             MOV      R2,R6
   \   00000018   0xA904             ADD      R1,SP,#+16
   \   0000001A   0xF104 0x0030      ADD      R0,R4,#+48
   \   0000001E   0x.... 0x....      BL       GsnOsal_QueueGet
    336                  if(!pNcm->blockingOn &&  GSN_OSAL_SUCCESS != errorCode)
   \   00000022   0xF894 0x102C      LDRB     R1,[R4, #+44]
   \   00000026   0xB909             CBNZ.N   R1,??GsnNcm_Execute_2
   \   00000028   0x2800             CMP      R0,#+0
   \   0000002A   0xD10D             BNE.N    ??GsnNcm_Execute_3
    337                  {
    338                      break;
    339                  }
    340          
    341                  GSN_NCM_PRINTF("[NCM] Execute: MsgId = %d, state = %d\r\n", msg.msgId, pNcm->state);
   \                     ??GsnNcm_Execute_2:
   \   0000002C   0x7822             LDRB     R2,[R4, #+0]
   \   0000002E   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000032   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Execute: MsgId ...">`
   \   00000036   0x.... 0x....      BL       GSN_NCM_PRINTF
    342          
    343          		if(1 == pNcm->stopInProgress )
   \   0000003A   0xF894 0x07A8      LDRB     R0,[R4, #+1960]
   \   0000003E   0x2801             CMP      R0,#+1
   \   00000040   0xD103             BNE.N    ??GsnNcm_Execute_4
    344          		{
    345          			GsnNcm_ProcessStop(pNcm);
   \   00000042   0x4620             MOV      R0,R4
   \   00000044   0x.... 0x....      BL       GsnNcm_ProcessStop
    346          			break;
   \                     ??GsnNcm_Execute_3:
   \   00000048   0xE0AC             B.N      ??GsnNcm_Execute_5
    347          		}
    348                  switch (msg.msgId)
   \                     ??GsnNcm_Execute_4:
   \   0000004A   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000004E   0x280D             CMP      R0,#+13
   \   00000050   0xD811             BHI.N    ??GsnNcm_Execute_6
   \   00000052   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??GsnNcm_Execute_0:
   \   00000056   0x07 0x24          DC8      0x7,0x24,0x35,0x30
   \              0x35 0x30    
   \   0000005A   0x3A 0x3E          DC8      0x3A,0x3E,0x15,0x47
   \              0x15 0x47    
   \   0000005E   0x61 0x67          DC8      0x61,0x67,0x7D,0x9B
   \              0x7D 0x9B    
   \   00000062   0x34 0x8F          DC8      0x34,0x8F
    349                  {
    350                      case GSN_NCM_CTX_MSG_ID_STOP:            
    351                      {
    352          				if(GSN_NCM_STATE_INITIALISED      == pNcm->state   || 
    353          				   GSN_NCM_STATE_L3_CONNECTED     == pNcm->state   ||
    354          				   GSN_NCM_STATE_NOT_INITIALISED  == pNcm->state  
    355          				  )
   \                     ??GsnNcm_Execute_7:
   \   00000064   0x7820             LDRB     R0,[R4, #+0]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xBF18             IT       NE 
   \   0000006A   0x2809             CMPNE    R0,#+9
   \   0000006C   0xD000             BEQ.N    ??GsnNcm_Execute_8
   \   0000006E   0xB918             CBNZ.N   R0,??GsnNcm_Execute_9
    356          				{			
    357                          GsnNcm_ProcessStop(pNcm);
   \                     ??GsnNcm_Execute_8:
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       GsnNcm_ProcessStop
   \                     ??GsnNcm_Execute_6:
   \   00000076   0xE089             B.N      ??GsnNcm_Execute_10
    358          				}
    359          				else
    360          				{
    361          					pNcm->stopInProgress = 1;
   \                     ??GsnNcm_Execute_9:
   \   00000078   0x2001             MOVS     R0,#+1
   \   0000007A   0xF884 0x07A8      STRB     R0,[R4, #+1960]
   \   0000007E   0xE085             B.N      ??GsnNcm_Execute_10
    362          				}                
    363                          break;
    364                      }            
    365                      case GSN_NCM_CTX_MSG_ID_L2_RESTART:                    
    366                      {
    367                          pNcm->scanKnownChCnt = pNcm->config.retryCountsConfig.maxScanKnownChCnt;
   \                     ??GsnNcm_Execute_11:
   \   00000080   0x.... 0x....      BL       ?Subroutine8
    368                          pNcm->scanSpecChCnt = pNcm->config.retryCountsConfig.maxScanSpecChCnt;
    369                          pNcm->scanAllChCnt = pNcm->config.retryCountsConfig.maxScanAllChCnt;
    370                          pNcm->L3ConnectCnt = pNcm->config.retryCountsConfig.maxL3ConnectCnt;
    371          				if( pNcm->config.scanEntry)  /* If Scan entry is present of previous L2 success  */
   \                     ??CrossCallReturnLabel_12:
   \   00000084   0xF894 0x0554      LDRB     R0,[R4, #+1364]
   \   00000088   0xB108             CBZ.N    R0,??GsnNcm_Execute_12
    372          					pNcm->state=GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP;
   \   0000008A   0x2004             MOVS     R0,#+4
   \   0000008C   0xE005             B.N      ??GsnNcm_Execute_13
    373          				else if(pNcm->config.wlanCfg.channel[0])  /* First time if user gives channel */
   \                     ??GsnNcm_Execute_12:
   \   0000008E   0xF894 0x009F      LDRB     R0,[R4, #+159]
   \   00000092   0x2800             CMP      R0,#+0
   \   00000094   0xBF14             ITE      NE 
   \   00000096   0x2005             MOVNE    R0,#+5
   \   00000098   0x2003             MOVEQ    R0,#+3
    374          					pNcm->state=GSN_NCM_STATE_L2_SCAN_KNOWN_CHNL;
    375          				else
    376          				pNcm->state= GSN_NCM_STATE_L2_DISCONNECTED;              
   \                     ??GsnNcm_Execute_13:
   \   0000009A   0x7020             STRB     R0,[R4, #+0]
    377                          GsnNcm_L2Connect(pNcm);
   \   0000009C   0xE007             B.N      ??GsnNcm_Execute_14
    378                          break;
    379                      }
    380          			case GSN_NCM_CTX_MSG_ID_L2_START:            
    381                      {
    382          				if( pNcm->config.scanEntry)  /* Do onetime If Scan entry is present of previous L2 success */
   \                     ??GsnNcm_Execute_15:
   \   0000009E   0xF894 0x0554      LDRB     R0,[R4, #+1364]
   \   000000A2   0xB108             CBZ.N    R0,??GsnNcm_Execute_16
    383          					pNcm->state=GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP;
   \   000000A4   0x2004             MOVS     R0,#+4
   \   000000A6   0x7020             STRB     R0,[R4, #+0]
    384                          GsnNcm_L3Disconnect(pNcm);                
   \                     ??GsnNcm_Execute_16:
   \   000000A8   0x4620             MOV      R0,R4
   \   000000AA   0x.... 0x....      BL       GsnNcm_L3Disconnect
    385                          GsnNcm_L2Connect (pNcm);
   \                     ??GsnNcm_Execute_14:
   \   000000AE   0x4620             MOV      R0,R4
   \   000000B0   0x.... 0x....      BL       GsnNcm_L2Connect
    386                          break;
   \   000000B4   0xE06A             B.N      ??GsnNcm_Execute_10
    387                      }
    388                      case GSN_NCM_CTX_MSG_ID_L2_CONNECT_FAIL:
    389                      {
    390          				GsnNcm_L2ConnectFail(pNcm);
   \                     ??GsnNcm_Execute_17:
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0x.... 0x....      BL       GsnNcm_L2ConnectFail
    391          				break;
   \   000000BC   0xE066             B.N      ??GsnNcm_Execute_10
    392          			}
    393          			case GSN_NCM_CTX_MSG_ID_L2_ALREADY_CONNECTED:
    394          				alreadyConnectedEvent = 1;
   \                     ??GsnNcm_Execute_18:
   \   000000BE   0x2501             MOVS     R5,#+1
    395          				/* No break!!!!*/
    396                      case GSN_NCM_CTX_MSG_ID_L2_CONNECTED:
    397                      {
    398          				GsnNcm_L2ConnectProcess(pNcm,alreadyConnectedEvent);
   \                     ??GsnNcm_Execute_19:
   \   000000C0   0x4629             MOV      R1,R5
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       GsnNcm_L2ConnectProcess
    399                          break;            
   \   000000C8   0xE060             B.N      ??GsnNcm_Execute_10
    400                      }
    401          #ifdef S2W_NCM_ROAMING_SUPPORT 					
    402          			case GSN_NCM_CTX_MSG_ID_ROAM_L2DISCONNECTED:
    403          			{
    404          				if(	pNcm->config.roamingCfgParams.maintainL3Con == 0)
    405          				{
    406          					 GsnNwIf_Close(pNcm->pNwif);
    407          				}
    408          				pNcm->config.scanEntry = TRUE;
    409                          pNcm->state=GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP;
    410                          memcpy(&pNcm->config.KnownChnlScanEntry,&pNcm->scanResults,sizeof(GSN_WDD_SCAN_ENTRY_T));
    411          
    412          
    413          		GsnNcm_L2Connect(pNcm);
    414          		break;	
    415          			}
    416                  case GSN_NCM_CTX_MSG_ID_ROAM_TRIGGER:
    417          			{
    418          				pNcm->roamingParams.roamingTriggered = 1;
    419          				GsnNcm_L2Disconnect(pNcm);
    420          				break;
    421          			}			
    422          #endif            
    423                      case GSN_NCM_CTX_MSG_ID_L2_DISCONNECTED:
    424                      {				
    425                          GsnNcm_L2DisconnectProcess(pNcm);
   \                     ??GsnNcm_Execute_20:
   \   000000CA   0x4620             MOV      R0,R4
   \   000000CC   0x.... 0x....      BL       GsnNcm_L2DisconnectProcess
    426                          break;
   \   000000D0   0xE05C             B.N      ??GsnNcm_Execute_10
    427                      }
    428                      case GSN_NCM_CTX_MSG_ID_L2_SYNC_LOSS:
    429                      {
    430                          if ((pNcm->state == GSN_NCM_STATE_L3_CONNECTED) ||
    431                              (pNcm->state == GSN_NCM_STATE_L2_CONNECTED))
   \                     ??GsnNcm_Execute_21:
   \   000000D2   0x7820             LDRB     R0,[R4, #+0]
   \   000000D4   0x2809             CMP      R0,#+9
   \   000000D6   0xBF18             IT       NE 
   \   000000D8   0x2808             CMPNE    R0,#+8
   \   000000DA   0xD157             BNE.N    ??GsnNcm_Execute_10
    432          				{
    433          					/* First do the disconnect*/
    434          					GsnNcm_L2Disconnect(pNcm);
   \   000000DC   0x4620             MOV      R0,R4
   \   000000DE   0x.... 0x....      BL       GsnNcm_L2Disconnect
   \   000000E2   0xE053             B.N      ??GsnNcm_Execute_10
    435          				}
    436                          break;
    437          			}
    438          			case GSN_NCM_CTX_MSG_ID_L3_CONNECT:
    439          			{				
    440          				GSN_NCM_PRINTF("Start L3 connect directly\r\n");
   \                     ??GsnNcm_Execute_22:
   \   000000E4   0x.... 0x....      ADR.W    R0,`?<Constant "Start L3 connect dire...">`
   \   000000E8   0x.... 0x....      BL       GSN_NCM_PRINTF
    441          				/* Start L3 Connection */
    442                          retcode = GsnNcm_L3Connect(pNcm);
   \   000000EC   0x4620             MOV      R0,R4
   \   000000EE   0x.... 0x....      BL       GsnNcm_L3Connect
    443          
    444                          if((GSN_OPERATION_IN_PROGRESS != retcode)&&(!pNcm->config.ipConfig.ipv4.staticIp))
   \   000000F2   0x.... 0x....      LDR.W    R1,??DataTable25  ;; 0x80000001
   \   000000F6   0x4288             CMP      R0,R1
   \   000000F8   0xD005             BEQ.N    ??GsnNcm_Execute_23
   \   000000FA   0xF8D4 0x11E0      LDR      R1,[R4, #+480]
   \   000000FE   0xB911             CBNZ.N   R1,??GsnNcm_Execute_23
    445                          {
    446                              GsnNcm_L3ConnectCb(retcode, pNcm);
   \   00000100   0x4621             MOV      R1,R4
   \   00000102   0x.... 0x....      BL       GsnNcm_L3ConnectCb
    447                          }
    448                          if(pNcm->config.ipConfig.ipv4.staticIp)
   \                     ??GsnNcm_Execute_23:
   \   00000106   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   0000010A   0x2800             CMP      R0,#+0
   \   0000010C   0xD03E             BEQ.N    ??GsnNcm_Execute_10
    449                          {
    450                             GsnNcm_L3ConnectCb(GSN_SUCCESS, pNcm);
   \   0000010E   0x4621             MOV      R1,R4
   \   00000110   0x2000             MOVS     R0,#+0
   \   00000112   0x.... 0x....      BL       GsnNcm_L3ConnectCb
   \   00000116   0xE039             B.N      ??GsnNcm_Execute_10
    451                            
    452                          }
    453          				break;
    454          			}
    455                                  
    456          
    457                      case GSN_NCM_CTX_MSG_ID_L3_CONNECTED:
    458          			{
    459                          pNcm->state = GSN_NCM_STATE_L3_CONNECTED;
   \                     ??GsnNcm_Execute_24:
   \   00000118   0x2009             MOVS     R0,#+9
   \   0000011A   0x.... 0x....      BL       ?Subroutine10
    460          
    461                          /* Successfully connected in L3, call the app CB */                
    462                          if(pNcm->notifCb!= NULL)
   \                     ??CrossCallReturnLabel_16:
   \   0000011E   0xD031             BEQ.N    ??GsnNcm_Execute_25
    463                          {
    464                              (pNcm->notifCb)(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L3_CONNECTED);
   \   00000120   0x2202             MOVS     R2,#+2
   \   00000122   0xE02B             B.N      ??GsnNcm_Execute_26
    465                          } 
    466                          pNcm->L3ConnectCnt = pNcm->config.retryCountsConfig.maxL3ConnectCnt;
    467                          //GsnNwIf_DhcpStop(pNcm->pNwif);
    468          #ifdef S2W_NCM_ROAMING_SUPPORT					
    469          				if(pNcm->roamingParams.roamingTriggered == 1)
    470          					GsnNcm_RoamReInit(pNcm);
    471          #endif	                
    472                          break;
    473          			}
    474          #ifdef S2W_NCM_ROAMING_SUPPORT		
    475                      case GSN_NCM_CTX_MSG_ID_ROAM_STARTSCAN:
    476          		{
    477          					/*check whether scan retry count is met or not*/
    478          				if ((pNcm->roamingParams.roamScanRetryCount == pNcm->config.roamingCfgParams.scanRetryCnt)
    479          					&&	(0 != pNcm->config.roamingCfgParams.scanRetryCnt))
    480          				{
    481          					/*start timer for back off*/
    482          					pNcm->roamingParams.roamScanPauseTmrHndl= 
    483          					GsnSoftTmr_Start(&pNcm->roamingParams.roamScanPauseTmr, 
    484          	                                   GSN_SOFT_TMR_ONESHOT,0,
    485          	                                   GSN_SOFT_TMR_MILLISECONDS_TO_TICKS((ULONG64)(pNcm->config.roamingCfgParams.scanPauseTimeMs)),
    486          	                                   ( GSN_SOFT_TMR_CBR_T )GsnNcm_RoamScanPauseTmrCb,pNcm);
    487          				}
    488          				else
    489          				{
    490          					pNcm->config.scanEntry =0;
    491          					memset(&pNcm->scanResults,0,sizeof(GSN_WDD_SCAN_ENTRY_T));
    492          					pNcm->roamingParams.scaInProgress=1;
    493          			retcode = GsnWdd_Scan(pNcm->pWdd,&pNcm->roamingParams.scanParams,(INT8 *)pNcm->roamingParams.scanUserEntryBuff,
    494          				  (2 * sizeof(GSN_WDD_SCAN_ENTRY_T)),(GSN_WDD_SCAN_NOTIF_CB_T)GsnNcm_RoamScanConfirm,pNcm);
    495          			if(retcode != GSN_OPERATION_IN_PROGRESS)
    496          			{
    497          						pNcm->roamingParams.rssiLevelChkTmrHndl = GsnSoftTmr_Start(&pNcm->roamingParams.rssiLevelChkTmr, GSN_SOFT_TMR_ONESHOT,0, (ULONG64)(pNcm->config.roamingCfgParams.rssiLevelChkInterval),
    498          					  ( GSN_SOFT_TMR_CBR_T )GsnNcm_RoamScanTmrCb, pNcm );
    499          					}
    500          			}
    501                          }
    502          		break;
    503          		case GSN_NCM_CTX_MSG_ID_ROAM_SCANTMR_PROCESS:
    504          		{
    505          			GsnNcm_RoamScanTmrProcess(pNcm);
    506          			break;
    507          		}
    508          #endif                
    509                      case GSN_NCM_CTX_MSG_ID_L3_DISCONNECTED:
    510                      {
    511          				if((pNcm->L3ConnectCnt == (pNcm->config.retryCountsConfig.maxL3ConnectCnt) - 1) &&
    512          					(pNcm->notifCb!= NULL))
   \                     ??GsnNcm_Execute_27:
   \   00000124   0xF8D4 0x12FC      LDR      R1,[R4, #+764]
   \   00000128   0xF8D4 0x0574      LDR      R0,[R4, #+1396]
   \   0000012C   0x1E49             SUBS     R1,R1,#+1
   \   0000012E   0x4288             CMP      R0,R1
   \   00000130   0xD107             BNE.N    ??GsnNcm_Execute_28
   \   00000132   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_18:
   \   00000136   0xD004             BEQ.N    ??GsnNcm_Execute_28
    513                          {
    514                              (pNcm->notifCb)(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L3_CONNECT_FAIL);
   \   00000138   0xF8D4 0x0564      LDR      R0,[R4, #+1380]
   \   0000013C   0x2208             MOVS     R2,#+8
   \   0000013E   0x4621             MOV      R1,R4
   \   00000140   0x4798             BLX      R3
    515                          }	
    516          				GsnNcm_L3Disconnect(pNcm);
   \                     ??GsnNcm_Execute_28:
   \   00000142   0x4620             MOV      R0,R4
   \   00000144   0x.... 0x....      BL       GsnNcm_L3Disconnect
    517                          GsnNcm_L3Connect (pNcm);
   \   00000148   0x4620             MOV      R0,R4
   \   0000014A   0x.... 0x....      BL       GsnNcm_L3Connect
    518                      	break;
   \   0000014E   0xE01D             B.N      ??GsnNcm_Execute_10
    519                      }
    520                      case GSN_NCM_CTX_MSG_ID_L2_IDLE:
    521          			{
    522          				pNcm->state = GSN_NCM_STATE_IDLE;/* Initial State*/
   \                     ??GsnNcm_Execute_29:
   \   00000150   0x200A             MOVS     R0,#+10
   \   00000152   0x7020             STRB     R0,[R4, #+0]
    523                          /* start the idle timer */
    524                          pNcm->connMgrTmrHndl = GsnSoftTmr_Start(&pNcm->connMgrTmr, GSN_SOFT_TMR_ONESHOT, 0, 
    525                     									GSN_SOFT_TMR_MILLISECONDS_TO_TICKS(pNcm->config.retryPeriodConfig.cpuWaitPeriod),
    526                                              		( GSN_SOFT_TMR_CBR_T )GsnNcm_TimerCb, pNcm );
   \   00000154   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_24:
   \   00000158   0xF8D4 0x0300      LDR      R0,[R4, #+768]
   \   0000015C   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_4:
   \   00000160   0x62A0             STR      R0,[R4, #+40]
    527                        
    528                          /* also indicate the app that ncm in idle state */
    529                          if(pNcm->notifCb!= NULL)
   \   00000162   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_19:
   \   00000166   0xD011             BEQ.N    ??GsnNcm_Execute_10
    530                          {
    531                              (pNcm->notifCb)(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L2_CONNECT_FAIL);
   \   00000168   0xF8D4 0x0564      LDR      R0,[R4, #+1380]
   \   0000016C   0x2204             MOVS     R2,#+4
   \   0000016E   0x4621             MOV      R1,R4
   \   00000170   0x4798             BLX      R3
   \   00000172   0xE00B             B.N      ??GsnNcm_Execute_10
    532                          }
    533                          break;
    534                      }
    535                     case GSN_NCM_CTX_MSG_ID_L3_RENEWSUCESS:
    536                         if(pNcm->notifCb!= NULL)
   \                     ??GsnNcm_Execute_30:
   \   00000174   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_20:
   \   00000178   0xD004             BEQ.N    ??GsnNcm_Execute_25
    537                          {
    538                              (pNcm->notifCb)(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L3_RENEWSUCCESS);
   \   0000017A   0x2207             MOVS     R2,#+7
   \                     ??GsnNcm_Execute_26:
   \   0000017C   0xF8D4 0x0564      LDR      R0,[R4, #+1380]
   \   00000180   0x4621             MOV      R1,R4
   \   00000182   0x4798             BLX      R3
    539                          } 
    540          			   pNcm->L3ConnectCnt = pNcm->config.retryCountsConfig.maxL3ConnectCnt;
   \                     ??GsnNcm_Execute_25:
   \   00000184   0xF8D4 0x02FC      LDR      R0,[R4, #+764]
   \   00000188   0xF8C4 0x0574      STR      R0,[R4, #+1396]
    541                         break;
    542                      default:
    543          			{
    544                          break;
    545          			}
    546                  }        
    547          
    548                  GSN_NCM_PRINTF("[NCM] Execute End: MsgId = %d, state = %d\r\n", msg.msgId, pNcm->state);
   \                     ??GsnNcm_Execute_10:
   \   0000018C   0x7822             LDRB     R2,[R4, #+0]
   \   0000018E   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   00000192   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Execute End: Ms...">`
   \   00000196   0x.... 0x....      BL       GSN_NCM_PRINTF
    549          
    550              } while(pNcm->blockingOn);
   \   0000019A   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000019E   0x2800             CMP      R0,#+0
   \   000001A0   0xF47F 0xAF39      BNE.W    ??GsnNcm_Execute_1
    551          }
   \                     ??GsnNcm_Execute_5:
   \   000001A4   0xB006             ADD      SP,SP,#+24
   \   000001A6   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x9403             STR      R4,[SP, #+12]
   \   00000002   0xF44F 0x717A      MOV      R1,#+1000
   \   00000006   0x.... 0x....      ADR.W    R0,GsnNcm_TimerCb
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x03C0             LSLS     R0,R0,#+15
   \   00000002   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   0000000C   0x460B             MOV      R3,R1
   \   0000000E   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000012   0x.... 0x....      B.W      GsnSoftTmr_Start

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x7020             STRB     R0,[R4, #+0]
   \                     ??Subroutine10_0:
   \   00000002   0xF8D4 0x3560      LDR      R3,[R4, #+1376]
   \   00000006   0x0018             MOVS     R0,R3
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0xF8D4 0x02F0      LDR      R0,[R4, #+752]
   \   00000004   0xF8C4 0x0568      STR      R0,[R4, #+1384]
   \   00000008   0xF8D4 0x02F4      LDR      R0,[R4, #+756]
   \   0000000C   0xF8C4 0x056C      STR      R0,[R4, #+1388]
   \   00000010   0xF8D4 0x02F8      LDR      R0,[R4, #+760]
   \   00000014   0xF8C4 0x0570      STR      R0,[R4, #+1392]
   \   00000018   0xF8D4 0x02FC      LDR      R0,[R4, #+764]
   \   0000001C   0xF8C4 0x0574      STR      R0,[R4, #+1396]
   \   00000020   0x4770             BX       LR
    552          
    553          /*******************************************************************************
    554           * Private Functions
    555           ******************************************************************************/
    556          

   \                                 In section .text, align 2, keep-with-next
    557          VOID
    558          GsnNcm_MsgPost(GSN_NCM_CTX_T* pNcm, UINT32 msgId)
    559          {
   \                     GsnNcm_MsgPost:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   \   00000004   0x4604             MOV      R4,R0
    560              GSN_NCM_MSG_T msg;
    561          
    562              msg.msgId = (GSN_NCM_MSGID_T)msgId;
   \   00000006   0xF88D 0x1000      STRB     R1,[SP, #+0]
    563              /* Put in the msg queue*/
    564              GsnOsal_QueuePut(&pNcm->msgQueue, (UINT8 *)&msg);
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000012   0x.... 0x....      BL       _tx_queue_send
    565          
    566              /* Call the app Cb*/
    567              if(pNcm->execMsgPostCb != NULL)
   \   00000016   0x6EA2             LDR      R2,[R4, #+104]
   \   00000018   0x0010             MOVS     R0,R2
   \   0000001A   0xD002             BEQ.N    ??GsnNcm_MsgPost_0
    568          	{
    569                  (pNcm->execMsgPostCb)(pNcm->execMsgPostCbCtx, pNcm);
   \   0000001C   0x6EE0             LDR      R0,[R4, #+108]
   \   0000001E   0x4621             MOV      R1,R4
   \   00000020   0x4790             BLX      R2
    570          	}
    571          	return;
   \                     ??GsnNcm_MsgPost_0:
   \   00000022   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    572          }
    573          

   \                                 In section .text, align 4, keep-with-next
    574          VOID 
    575          GsnNcm_DisassocIndCb(VOID* ctx, GSN_WDD_DISASSOCIATION_CB_INFO *pDisAssocInfo)
    576          {
   \                     GsnNcm_DisassocIndCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    577              GSN_NCM_CTX_T *pNcm;
    578          	GSN_STATUS retCode=GSN_SUCCESS;
    579              pNcm = (GSN_NCM_CTX_T*)ctx;
    580          
    581          	GSN_NCM_PRINTF("\r\n[NCM] GsnNcm_DisassocIndCb\r\n");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n[NCM] GsnNcm_Disass...">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
    582          #ifdef S2W_NCM_ROAMING_SUPPORT 	
    583          	
    584          	if(pNcm->config.roamingCfgParams.roamEnable == 1)
    585          	{
    586          		retCode=GsnNcm_RoamStop(pNcm,1);
    587          	}
    588          #endif	
    589          	if(retCode == GSN_SUCCESS)
    590          	{    	
    591              	GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L2_DISCONNECTED);
   \   0000000C   0x....             B.N      ?Subroutine0
    592          	}
    593          	return;
    594          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0xE8BD 0x4010      POP      {R4,LR}
   \   00000006   0x2104             MOVS     R1,#+4
   \   00000008   0x....             B.N      GsnNcm_MsgPost
    595          

   \                                 In section .text, align 4, keep-with-next
    596          VOID 
    597          GsnNcm_BeconMissIndCb(VOID* ctx, UINT32 beaconMissCnt)
    598          {
   \                     GsnNcm_BeconMissIndCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    599              GSN_NCM_CTX_T *pNcm;
    600          	GSN_STATUS retCode=GSN_SUCCESS;
    601              pNcm = (GSN_NCM_CTX_T*)ctx;
    602          
    603          	GSN_NCM_PRINTF("\r\n[NCM] GsnNcm_BeconMissIndCb\r\n");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n[NCM] GsnNcm_BeconM...">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
    604          
    605          	/*
    606          		-If roaming is enabled , stop roaming.
    607          		-if roam stop returns failure , disassociation is not processed
    608          	*/
    609          
    610          #ifdef S2W_NCM_ROAMING_SUPPORT 		
    611          	if(pNcm->config.roamingCfgParams.roamEnable == 1)
    612          	{
    613          		retCode=GsnNcm_RoamStop(pNcm,0);
    614          	}
    615          #endif
    616          
    617          	if(retCode == GSN_SUCCESS)
    618          	{
    619          	    GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L2_SYNC_LOSS);
   \   0000000C   0x....             B.N      ?Subroutine1
    620          	}
    621          	return;
    622          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0xE8BD 0x4010      POP      {R4,LR}
   \   00000006   0x2105             MOVS     R1,#+5
   \   00000008   0x....             B.N      GsnNcm_MsgPost
    623          

   \                                 In section .text, align 4, keep-with-next
    624          VOID 
    625          GsnNcm_FrameTxFailIndCb(VOID* ctx, GSN_WDD_FRAME_TXFAIL_INFO_T *pFrmTxFailureInfo)
    626          {
   \                     GsnNcm_FrameTxFailIndCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    627              GSN_NCM_CTX_T *pNcm;
    628              pNcm = (GSN_NCM_CTX_T*)ctx;
    629          
    630              GSN_NCM_PRINTF("[NCM] Frame Tx Failure %d\r\n", pNcm->state);
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Frame Tx Failur...">`
   \   00000008   0xF894 0x1000      LDRB.W   R1,[R4, #+0]
   \   0000000C   0x.... 0x....      BL       GSN_NCM_PRINTF
    631          
    632              GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L2_SYNC_LOSS);
   \   00000010                      REQUIRE ?Subroutine1
   \   00000010                      ;; // Fall through to label ?Subroutine1
    633          
    634          	return;
    635          }
    636          

   \                                 In section .text, align 2, keep-with-next
    637          VOID
    638          GsnNcm_L2ConnectFail(GSN_NCM_CTX_T* pNcm)
    639          {
   \                     GsnNcm_L2ConnectFail:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    640          	UINT32 timeout = 0;        
    641          	UINT8  switchToIdleState = 0;
    642          	UINT32 msgId;
    643          	
    644              GSN_NCM_PRINTF("[NCM] L2ConnectFail\r\n");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2ConnectFail\\r\\n">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
    645          
    646          	/* L2 failed so start the timer depends on the state */
    647          	if(pNcm->state == GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP)
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x2804             CMP      R0,#+4
   \   00000010   0xD121             BNE.N    ??GsnNcm_L2ConnectFail_0
    648          	{
    649          		memset(&pNcm->config.KnownChnlScanEntry,0,sizeof(GSN_WDD_SCAN_ENTRY_T));
   \   00000012   0x.... 0x....      BL       ?Subroutine3
    650                  pNcm->config.scanEntry = FALSE;
   \                     ??CrossCallReturnLabel_1:
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xF884 0x0554      STRB     R0,[R4, #+1364]
    651          
    652          		timeout = pNcm->config.retryPeriodConfig.scanKnownChRetryIntrvl;
    653          	
    654          		/*Need to change the state*/
    655          		if(pNcm->scanKnownChCnt)
   \   0000001C   0xF8D4 0x1568      LDR      R1,[R4, #+1384]
   \   00000020   0xF8D4 0x0304      LDR      R0,[R4, #+772]
   \   00000024   0xB321             CBZ.N    R1,??GsnNcm_L2ConnectFail_1
    656          		{
    657          			pNcm->state = GSN_NCM_STATE_L2_SCAN_KNOWN_CHNL;
   \   00000026   0x2105             MOVS     R1,#+5
   \                     ??GsnNcm_L2ConnectFail_2:
   \   00000028   0x7021             STRB     R1,[R4, #+0]
    658          		}
    659                  else if(pNcm->scanSpecChCnt)
    660          		{
    661          			pNcm->state = GSN_NCM_STATE_L2_SCAN_SPECIFIC_CHNL;
    662          		}
    663          		else if(pNcm->scanAllChCnt)
    664          		{                            
    665          			pNcm->state = GSN_NCM_STATE_L2_SCAN_ALL_CHNL;
    666          		}
    667          		else
    668          		{
    669          			switchToIdleState = TRUE;
    670          		}
    671          	
    672          	}
    673          	else if ((pNcm->state == GSN_NCM_STATE_L2_DISCONNECTED) || (pNcm->state ==  GSN_NCM_STATE_L2_SCAN_KNOWN_CHNL))
    674          	{
    675          		timeout = pNcm->config.retryPeriodConfig.scanKnownChRetryIntrvl;
    676          		if (pNcm->scanKnownChCnt)
    677          		{
    678          			pNcm->scanKnownChCnt--;
    679          		}
    680          		else/* In Next time out, start with next state*/
    681          		{
    682          			/*Need to change the state*/
    683                      if(pNcm->scanSpecChCnt)
    684          			{
    685          				pNcm->state = GSN_NCM_STATE_L2_SCAN_SPECIFIC_CHNL;
    686          			}
    687          			else if (pNcm->scanAllChCnt)
    688          			{                            
    689          				pNcm->state = GSN_NCM_STATE_L2_SCAN_ALL_CHNL;
    690          			}
    691          			else
    692          			{
    693          				switchToIdleState = TRUE;
    694          			}
    695          		}
    696          	}
    697          	else if (pNcm->state == GSN_NCM_STATE_L2_SCAN_SPECIFIC_CHNL)
    698          	{
    699          		timeout = pNcm->config.retryPeriodConfig.scanSpecChRetryIntrvl;
    700          		if (pNcm->scanSpecChCnt)
    701          		{
    702          			pNcm->scanSpecChCnt--;
    703          		}
    704          		else
    705          		{
    706          			if (pNcm->scanAllChCnt)
    707          			{                            
    708          				pNcm->state = GSN_NCM_STATE_L2_SCAN_ALL_CHNL;
    709          			}
    710          			else
    711          			{				
    712          				switchToIdleState = TRUE;
    713          			}
    714          		}
    715          	}
    716          	else if (pNcm->state == GSN_NCM_STATE_L2_SCAN_ALL_CHNL)
    717          	{
    718          		timeout = pNcm->config.retryPeriodConfig.scanAllChRetryIntrvl;    
    719          		if (pNcm->scanAllChCnt)
    720          		{
    721          			pNcm->scanAllChCnt--;		        
    722          		}
    723          		else
    724          		{
    725          			switchToIdleState = TRUE;
    726          		}
    727          	}        
    728          	if(0 != timeout && !switchToIdleState)/*If switching to idle state, timer is started in Execute()*/
   \                     ??GsnNcm_L2ConnectFail_3:
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD047             BEQ.N    ??GsnNcm_L2ConnectFail_4
    729          	{
    730          		 pNcm->connMgrTmrHndl = GsnSoftTmr_Start(&pNcm->connMgrTmr, GSN_SOFT_TMR_ONESHOT,
    731          									0, GSN_SOFT_TMR_MILLISECONDS_TO_TICKS(timeout),
    732          									( GSN_SOFT_TMR_CBR_T )GsnNcm_TimerCb, pNcm );
   \   0000002E   0x.... 0x....      ADR.W    R1,GsnNcm_TimerCb
   \   00000032   0x9102             STR      R1,[SP, #+8]
   \   00000034   0x03C0             LSLS     R0,R0,#+15
   \   00000036   0xF44F 0x717A      MOV      R1,#+1000
   \   0000003A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000044   0x9403             STR      R4,[SP, #+12]
   \   00000046   0x2200             MOVS     R2,#+0
   \   00000048   0x460B             MOV      R3,R1
   \   0000004A   0xF104 0x0008      ADD      R0,R4,#+8
   \   0000004E   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000052   0x62A0             STR      R0,[R4, #+40]
   \   00000054   0xBD1F             POP      {R0-R4,PC}
    733          	}
   \                     ??GsnNcm_L2ConnectFail_0:
   \   00000056   0x2803             CMP      R0,#+3
   \   00000058   0xBF18             IT       NE 
   \   0000005A   0x2805             CMPNE    R0,#+5
   \   0000005C   0xD10D             BNE.N    ??GsnNcm_L2ConnectFail_5
   \   0000005E   0xF8D4 0x0304      LDR      R0,[R4, #+772]
   \   00000062   0xF8D4 0x1568      LDR      R1,[R4, #+1384]
   \   00000066   0xB119             CBZ.N    R1,??GsnNcm_L2ConnectFail_1
   \   00000068   0x1E49             SUBS     R1,R1,#+1
   \   0000006A   0xF8C4 0x1568      STR      R1,[R4, #+1384]
   \   0000006E   0xE7DC             B.N      ??GsnNcm_L2ConnectFail_3
   \                     ??GsnNcm_L2ConnectFail_1:
   \   00000070   0xF8D4 0x156C      LDR      R1,[R4, #+1388]
   \   00000074   0xB161             CBZ.N    R1,??GsnNcm_L2ConnectFail_6
   \   00000076   0x2106             MOVS     R1,#+6
   \   00000078   0xE7D6             B.N      ??GsnNcm_L2ConnectFail_2
   \                     ??GsnNcm_L2ConnectFail_5:
   \   0000007A   0x2806             CMP      R0,#+6
   \   0000007C   0xD10D             BNE.N    ??GsnNcm_L2ConnectFail_7
   \   0000007E   0xF8D4 0x0308      LDR      R0,[R4, #+776]
   \   00000082   0xF8D4 0x156C      LDR      R1,[R4, #+1388]
   \   00000086   0xB119             CBZ.N    R1,??GsnNcm_L2ConnectFail_6
   \   00000088   0x1E49             SUBS     R1,R1,#+1
   \   0000008A   0xF8C4 0x156C      STR      R1,[R4, #+1388]
   \   0000008E   0xE7CC             B.N      ??GsnNcm_L2ConnectFail_3
   \                     ??GsnNcm_L2ConnectFail_6:
   \   00000090   0xF8D4 0x1570      LDR      R1,[R4, #+1392]
   \   00000094   0xB161             CBZ.N    R1,??GsnNcm_L2ConnectFail_8
   \   00000096   0x2107             MOVS     R1,#+7
   \   00000098   0xE7C6             B.N      ??GsnNcm_L2ConnectFail_2
   \                     ??GsnNcm_L2ConnectFail_7:
   \   0000009A   0x2807             CMP      R0,#+7
   \   0000009C   0xD10F             BNE.N    ??GsnNcm_L2ConnectFail_4
   \   0000009E   0xF8D4 0x030C      LDR      R0,[R4, #+780]
   \   000000A2   0xF8D4 0x1570      LDR      R1,[R4, #+1392]
   \   000000A6   0xB119             CBZ.N    R1,??GsnNcm_L2ConnectFail_8
   \   000000A8   0x1E49             SUBS     R1,R1,#+1
   \   000000AA   0xF8C4 0x1570      STR      R1,[R4, #+1392]
   \   000000AE   0xE7BC             B.N      ??GsnNcm_L2ConnectFail_3
   \                     ??GsnNcm_L2ConnectFail_8:
   \   000000B0   0xF8D4 0x0300      LDR      R0,[R4, #+768]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xBF0C             ITE      EQ 
   \   000000B8   0x2106             MOVEQ    R1,#+6
   \   000000BA   0x210A             MOVNE    R1,#+10
    734          	else
    735          	{
    736          		if(switchToIdleState && pNcm->config.retryPeriodConfig.cpuWaitPeriod)
    737          		{
    738          			msgId = GSN_NCM_CTX_MSG_ID_L2_IDLE;
   \   000000BC   0xE000             B.N      ??GsnNcm_L2ConnectFail_9
    739          		}
    740          		else if(switchToIdleState)
    741          		{			
    742          			msgId = GSN_NCM_CTX_MSG_ID_L2_RESTART;
    743          		}
    744          		else
    745          		{
    746          			msgId = GSN_NCM_CTX_MSG_ID_L2_START;
   \                     ??GsnNcm_L2ConnectFail_4:
   \   000000BE   0x2101             MOVS     R1,#+1
    747          		}				
    748          		GsnNcm_MsgPost(pNcm, msgId);		
   \                     ??GsnNcm_L2ConnectFail_9:
   \   000000C0   0x4620             MOV      R0,R4
   \   000000C2   0xB004             ADD      SP,SP,#+16
   \   000000C4                      REQUIRE ?Subroutine2
   \   000000C4                      ;; // Fall through to label ?Subroutine2
    749          	}
    750          	return;
    751          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0xE8BD 0x4010      POP      {R4,LR}
   \   00000004   0x....             B.N      GsnNcm_MsgPost
    752          

   \                                 In section .text, align 2, keep-with-next
    753          VOID
    754          GsnNcm_L2ConnectCb(VOID* ctext, INT32 status)
    755          {
   \                     GsnNcm_L2ConnectCb:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    756              UINT32 msg;
    757              GSN_NCM_CTX_T *pNcm = (GSN_NCM_CTX_T *)ctext;
    758          
    759              GSN_NCM_PRINTF("[NCM] L2ConnectCb: Status = %x\r\n", status);
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2ConnectCb: St...">`
   \   0000000A   0x.... 0x....      BL       GSN_NCM_PRINTF
    760          
    761           	msg = (status == GSN_SUCCESS)?
    762          			GSN_NCM_CTX_MSG_ID_L2_CONNECTED: GSN_NCM_CTX_MSG_ID_L2_CONNECT_FAIL;
   \   0000000E   0x2D00             CMP      R5,#+0
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0x2102             MOVEQ    R1,#+2
   \   00000014   0x2103             MOVNE    R1,#+3
    763              GsnNcm_MsgPost(pNcm, msg); 
   \   00000016   0x4620             MOV      R0,R4
   \   00000018   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000001C   0x....             B.N      GsnNcm_MsgPost
    764          
    765          	return;
    766          }
    767          

   \                                 In section .text, align 2, keep-with-next
    768          GSN_STATUS_T
    769          GsnNcm_L2Connect(GSN_NCM_CTX_T* pNcm)
    770          {
   \                     GsnNcm_L2Connect:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
    771              GSN_STATUS_T retCode;
    772              UINT32 connectFlags =0;
   \   00000006   0x2700             MOVS     R7,#+0
    773              GSN_WDD_WLAN_CFG_T *pWlanConfig;
    774              GSN_WDD_SCAN_ENTRY_T *pScanFrame=NULL;
    775           	UINT32 msg;
    776              pWlanConfig = GsnWdd_WlanConfigPtrGet(pNcm->pWdd);
   \   00000008   0x6F20             LDR      R0,[R4, #+112]
   \   0000000A   0xF100 0x05B4      ADD      R5,R0,#+180
   \   0000000E   0x46B8             MOV      R8,R7
    777              GsnWdd_WlanConfigDefaultInit(pWlanConfig);
   \   00000010   0x4628             MOV      R0,R5
   \   00000012   0x.... 0x....      BL       GsnWdd_WlanConfigDefaultInit
    778          
    779              GSN_NCM_PRINTF("[NCM] L2Connect\r\n");
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2Connect\\r\\n">`
   \   0000001A   0x.... 0x....      BL       GSN_NCM_PRINTF
    780          
    781              /*Copy SSID */
    782              GSN_WDD_SSID_CPY(&pWlanConfig->ssid,&pNcm->config.wlanCfg.ssid); 
   \   0000001E   0xF104 0x0678      ADD      R6,R4,#+120
   \   00000022   0x1C71             ADDS     R1,R6,#+1
   \   00000024   0x7832             LDRB     R2,[R6, #+0]
   \   00000026   0x1C68             ADDS     R0,R5,#+1
   \   00000028   0x.... 0x....      BL       memcpy
   \   0000002C   0x7830             LDRB     R0,[R6, #+0]
   \   0000002E   0x7028             STRB     R0,[R5, #+0]
   \   00000030   0xF204 0x0199      ADDW     R1,R4,#+153
   \   00000034   0x6F20             LDR      R0,[R4, #+112]
   \   00000036   0xF890 0x0028      LDRB     R0,[R0, #+40]
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xD153             BNE.N    ??GsnNcm_L2Connect_0
    783                  
    784              if(GSN_WIF_WLAN_NW_TYPE_STA == pNcm->pWdd->wlanNwType)/* STA mode */
    785              {
    786                   connectFlags = (GSN_WDD_CONNECT_FLAG_T)(GSN_WDD_CONNECT_FLAG_SCAN_BEFORE_CONNECT | 
    787          													GSN_WDD_CONNECT_FLAG_ACTIVE_SCAN | 
    788          													GSN_WDD_CONNECT_FLAG_HIGHEST_RSSI_NW);
    789          		if(pNcm->config.wlanCfg.ssid.length == 0)
   \   0000003E   0xF894 0x0078      LDRB     R0,[R4, #+120]
   \   00000042   0x2707             MOVS     R7,#+7
   \   00000044   0xB900             CBNZ.N   R0,??GsnNcm_L2Connect_1
    790          		{	
    791          			connectFlags |=  GSN_WDD_CONNECT_FLAG_USE_BSSID ;
   \   00000046   0x2717             MOVS     R7,#+23
    792          		}
    793          		memcpy(pWlanConfig->bssid.array,pNcm->config.wlanCfg.bssid.array,sizeof(GSN_WLAN_MAC_ADDR_T));
   \                     ??GsnNcm_L2Connect_1:
   \   00000048   0x.... 0x....      BL       ?Subroutine7
    794          		
    795                  /* scan channels depends on the current state*/
    796              	if(pNcm->state == GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP)
   \                     ??CrossCallReturnLabel_11:
   \   0000004C   0x7820             LDRB     R0,[R4, #+0]
   \   0000004E   0x2804             CMP      R0,#+4
   \   00000050   0xD11B             BNE.N    ??GsnNcm_L2Connect_2
    797              	{
    798          			if(pNcm->config.scanEntry)
   \   00000052   0xF894 0x0554      LDRB     R0,[R4, #+1364]
   \   00000056   0xB108             CBZ.N    R0,??GsnNcm_L2Connect_3
    799                            pScanFrame=&pNcm->config.KnownChnlScanEntry;
   \   00000058   0xF204 0x3826      ADDW     R8,R4,#+806
    800          			connectFlags = 0;
    801          			/* WDD is not extracting BSSID from mac frame */      
    802          			//memcpy(pWlanConfig->bssid.array,&pNcm->config.wlanCfg.bssid.array,sizeof(GSN_WLAN_MAC_ADDR_T));
    803          			 memcpy(pWlanConfig->ssid.array,&pNcm->config.KnownChnlScanEntry.ssid.array,
    804          			 		pNcm->config.KnownChnlScanEntry.ssid.length);
   \                     ??GsnNcm_L2Connect_3:
   \   0000005C   0xF894 0x2327      LDRB     R2,[R4, #+807]
   \   00000060   0x2700             MOVS     R7,#+0
   \   00000062   0xF504 0x714A      ADD      R1,R4,#+808
   \   00000066   0x1C68             ADDS     R0,R5,#+1
   \   00000068   0x.... 0x....      BL       memcpy
    805          			pWlanConfig->ssid.length=pNcm->config.KnownChnlScanEntry.ssid.length;
   \   0000006C   0xF894 0x0327      LDRB     R0,[R4, #+807]
   \   00000070   0x7028             STRB     R0,[R5, #+0]
    806                      memcpy(pWlanConfig->bssid.array,&pNcm->config.KnownChnlScanEntry.bssid,sizeof(GSN_WLAN_MAC_ADDR_T));
   \   00000072   0x2206             MOVS     R2,#+6
   \   00000074   0xF504 0x7152      ADD      R1,R4,#+840
   \   00000078   0x.... 0x....      BL       ??Subroutine7_0
    807          			pWlanConfig->channel[0] = pNcm->config.KnownChnlScanEntry.channel;
   \                     ??CrossCallReturnLabel_9:
   \   0000007C   0xF894 0x0350      LDRB     R0,[R4, #+848]
   \   00000080   0xF885 0x0027      STRB     R0,[R5, #+39]
    808          			pWlanConfig->channel[1] =0;
   \   00000084   0xF885 0x7028      STRB     R7,[R5, #+40]
   \   00000088   0xE01D             B.N      ??GsnNcm_L2Connect_4
    809          		}
    810                  else if ((pNcm->state == GSN_NCM_STATE_L2_SCAN_KNOWN_CHNL)  ||  (pNcm->state == GSN_NCM_STATE_L2_DISCONNECTED))
   \                     ??GsnNcm_L2Connect_2:
   \   0000008A   0x2805             CMP      R0,#+5
   \   0000008C   0xBF18             IT       NE 
   \   0000008E   0x2803             CMPNE    R0,#+3
   \   00000090   0xD102             BNE.N    ??GsnNcm_L2Connect_5
    811                  {
    812                          pWlanConfig->channel[0]=pNcm->config.wlanCfg.channel[0];
   \   00000092   0x.... 0x....      BL       ?Subroutine11
    813          				pWlanConfig->channel[1]= 0;
    814                  }
   \                     ??CrossCallReturnLabel_22:
   \   00000096   0xE016             B.N      ??GsnNcm_L2Connect_4
    815                  else if (pNcm->state == GSN_NCM_STATE_L2_SCAN_SPECIFIC_CHNL)
   \                     ??GsnNcm_L2Connect_5:
   \   00000098   0x2806             CMP      R0,#+6
   \   0000009A   0xD103             BNE.N    ??GsnNcm_L2Connect_6
    816                  {            
    817                      memcpy(pWlanConfig->channel, pNcm->config.specificChnlList, 
    818                                                          sizeof(pNcm->config.specificChnlList));            
   \   0000009C   0x220F             MOVS     R2,#+15
   \   0000009E   0xF204 0x3115      ADDW     R1,R4,#+789
   \   000000A2   0xE00C             B.N      ??GsnNcm_L2Connect_7
    819                  }
    820                  else if(pNcm->state == GSN_NCM_STATE_L2_SCAN_ALL_CHNL)
   \                     ??GsnNcm_L2Connect_6:
   \   000000A4   0x2807             CMP      R0,#+7
   \   000000A6   0xD107             BNE.N    ??GsnNcm_L2Connect_8
    821                  {
    822          			GsnNcm_ChannelFill(pNcm->pWdd,&(pWlanConfig->channel[0]),pNcm->config.regDomain);
   \   000000A8   0xF894 0x2325      LDRB     R2,[R4, #+805]
   \   000000AC   0x6F20             LDR      R0,[R4, #+112]
   \   000000AE   0xF105 0x0127      ADD      R1,R5,#+39
   \   000000B2   0x.... 0x....      BL       GsnNcm_ChannelFill
   \   000000B6   0xE006             B.N      ??GsnNcm_L2Connect_4
    823                  }
    824                  else            
    825                  {  
    826          			/* GSN_NCM_STATE_L2_DISCONNECTED */		
    827                      memcpy(pWlanConfig->channel, pNcm->config.wlanCfg.channel,
    828                                                                  sizeof(pWlanConfig->channel));            
   \                     ??GsnNcm_L2Connect_8:
   \   000000B8   0x220F             MOVS     R2,#+15
   \   000000BA   0xF104 0x019F      ADD      R1,R4,#+159
   \                     ??GsnNcm_L2Connect_7:
   \   000000BE   0xF105 0x0027      ADD      R0,R5,#+39
   \   000000C2   0x.... 0x....      BL       memcpy
    829                  }
    830          		/* Bug FIX [5177] :DUT not able to associate to second AP through NCM in WPA2 security after first
    831          		   AP is disassociated.This was due to bssid of first ap was set in wlanconfig and so the scan results 
    832          		   were null.
    833          		   Reset the bssid if the state is not GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP and
    834          		   connection flag is not set as GSN_WDD_CONNECT_FLAG_USE_BSSID
    835          		*/
    836          		if(pNcm->state != GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP &&
    837          			((connectFlags & GSN_WDD_CONNECT_FLAG_USE_BSSID) != GSN_WDD_CONNECT_FLAG_USE_BSSID) &&
    838          			(GsnWdd_AssocStatusGet(pNcm->pWdd) == FALSE))
   \                     ??GsnNcm_L2Connect_4:
   \   000000C6   0x7820             LDRB     R0,[R4, #+0]
   \   000000C8   0x2804             CMP      R0,#+4
   \   000000CA   0xD02B             BEQ.N    ??CrossCallReturnLabel_23
   \   000000CC   0x06F8             LSLS     R0,R7,#+27
   \   000000CE   0xD429             BMI.N    ??CrossCallReturnLabel_23
   \   000000D0   0x6F20             LDR      R0,[R4, #+112]
   \   000000D2   0x.... 0x....      BL       GsnWdd_AssocStatusGet
   \   000000D6   0xBB28             CBNZ.N   R0,??CrossCallReturnLabel_23
    839          		{
    840          			memset(pWlanConfig->bssid.array,0,GSN_WLAN_MAC_ADDR_LEN);
   \   000000D8   0x2206             MOVS     R2,#+6
   \   000000DA   0x2100             MOVS     R1,#+0
   \   000000DC   0xF105 0x0021      ADD      R0,R5,#+33
   \   000000E0   0x.... 0x....      BL       memset
   \   000000E4   0xE01E             B.N      ??CrossCallReturnLabel_23
    841          		}
    842          
    843             
    844              }
    845              else if(GSN_WIF_WLAN_NW_TYPE_AP == pNcm->pWdd->wlanNwType)/* AP mode */
   \                     ??GsnNcm_L2Connect_0:
   \   000000E6   0x2802             CMP      R0,#+2
   \   000000E8   0xD11C             BNE.N    ??CrossCallReturnLabel_23
    846              {
    847          		memcpy((INT8 *)pWlanConfig->bssid.array, (INT8 *)pNcm->config.wlanCfg.bssid.array, 6);
   \   000000EA   0x.... 0x....      BL       ?Subroutine7
    848          		pWlanConfig->apSpecificCfg.beaconInterval = pNcm->config.wlanCfg.apSpecificCfg.beaconInterval;
   \                     ??CrossCallReturnLabel_10:
   \   000000EE   0xF8B4 0x00B2      LDRH     R0,[R4, #+178]
   \   000000F2   0x8768             STRH     R0,[R5, #+58]
    849          		pWlanConfig->apSpecificCfg.hiddenSsid= pNcm->config.wlanCfg.apSpecificCfg.hiddenSsid;
   \   000000F4   0xF894 0x00B0      LDRB     R0,[R4, #+176]
   \   000000F8   0xF885 0x0038      STRB     R0,[R5, #+56]
    850          		if(0 != pNcm->config.wlanCfg.apSpecificCfg.dtimPeriod)
   \   000000FC   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000100   0xB900             CBNZ.N   R0,??GsnNcm_L2Connect_9
    851          		{
    852          			pWlanConfig->apSpecificCfg.dtimPeriod= pNcm->config.wlanCfg.apSpecificCfg.dtimPeriod;
    853          		}
    854          		else
    855          		{
    856          			pWlanConfig->apSpecificCfg.dtimPeriod = NCM_DFLT_DTIMPERIOD_VALUE;
   \   00000102   0x2003             MOVS     R0,#+3
   \                     ??GsnNcm_L2Connect_9:
   \   00000104   0xF885 0x003C      STRB     R0,[R5, #+60]
    857          		}
    858          		if(0 != pNcm->config.inactivityTimeoutInSec)
   \   00000108   0xF8B4 0x1556      LDRH     R1,[R4, #+1366]
   \   0000010C   0x6F20             LDR      R0,[R4, #+112]
   \   0000010E   0xB909             CBNZ.N   R1,??GsnNcm_L2Connect_10
    859          		{
    860          			pNcm->pWdd->wlanConfigExtn.inactivityTimeoutInSec= pNcm->config.inactivityTimeoutInSec;
    861          		}
    862          		else
    863          		{
    864          			pNcm->pWdd->wlanConfigExtn.inactivityTimeoutInSec = NCM_DFLT_INACTIVITY_TMEOUT_VALUE;
   \   00000110   0xF44F 0x71B4      MOV      R1,#+360
   \                     ??GsnNcm_L2Connect_10:
   \   00000114   0xF8A0 0x154E      STRH     R1,[R0, #+1358]
    865          		}
    866          		pNcm->pWdd->groupKeyUpdateTime = pNcm->config.groupKeyUpdateTime;
   \   00000118   0xF8D4 0x1558      LDR      R1,[R4, #+1368]
   \   0000011C   0xF8C0 0x1550      STR      R1,[R0, #+1360]
    867          		connectFlags = GSN_WDD_CONNECT_FLAG_NONE;
    868          		pWlanConfig->channel[0] = pNcm->config.wlanCfg.channel[0];
   \   00000120   0x.... 0x....      BL       ?Subroutine11
    869          		pWlanConfig->channel[1] = 0;
    870              }
    871                  
    872              /* copy the security configuration */
    873              memcpy(&pWlanConfig->securityCfg, &pNcm->config.wlanCfg.securityCfg,
    874                                                          sizeof(GSN_WDD_SECURITY_CONFIG_T));             
   \                     ??CrossCallReturnLabel_23:
   \   00000124   0xF44F 0x728E      MOV      R2,#+284
   \   00000128   0xF104 0x01B8      ADD      R1,R4,#+184
   \   0000012C   0xF105 0x0040      ADD      R0,R5,#+64
   \   00000130   0x.... 0x....      BL       memcpy
    875          	
    876          	/* Note : Set this before Nwif init() is done. Initialise mac address*/
    877          	if(GsnWdd_AssocStatusGet(pNcm->pWdd) == TRUE)
   \   00000134   0x6F20             LDR      R0,[R4, #+112]
   \   00000136   0x.... 0x....      BL       GsnWdd_AssocStatusGet
   \   0000013A   0x2801             CMP      R0,#+1
   \   0000013C   0xD105             BNE.N    ??GsnNcm_L2Connect_11
    878          	{
    879          		msg = GSN_NCM_CTX_MSG_ID_L2_ALREADY_CONNECTED;
    880          		GsnNcm_MsgPost(pNcm,msg);
   \   0000013E   0x210C             MOVS     R1,#+12
   \   00000140   0x4620             MOV      R0,R4
   \   00000142   0x.... 0x....      BL       GsnNcm_MsgPost
    881          		return GSN_SUCCESS;;
   \   00000146   0x2000             MOVS     R0,#+0
   \   00000148   0xE01A             B.N      ??GsnNcm_L2Connect_12
    882          	}
    883                  
    884                  
    885              retCode = GsnWdd_Connect(pNcm->pWdd, (GSN_WDD_CONNECT_FLAG_T)connectFlags, pWlanConfig, pScanFrame, GsnNcm_L2ConnectCb,
    886                                       pNcm);      
   \                     ??GsnNcm_L2Connect_11:
   \   0000014A   0x....             LDR.N    R0,??DataTable25_1
   \   0000014C   0x9000             STR      R0,[SP, #+0]
   \   0000014E   0x9401             STR      R4,[SP, #+4]
   \   00000150   0x4643             MOV      R3,R8
   \   00000152   0x6F20             LDR      R0,[R4, #+112]
   \   00000154   0x462A             MOV      R2,R5
   \   00000156   0x4639             MOV      R1,R7
   \   00000158   0x.... 0x....      BL       GsnWdd_Connect
   \   0000015C   0x4606             MOV      R6,R0
    887              GSN_NCM_PRINTF("[NCM] L2Connect Return Code : %x, Channel = %d, State = %x\r\n", retCode, pWlanConfig->channel[0], pNcm->state);
   \   0000015E   0x7823             LDRB     R3,[R4, #+0]
   \   00000160   0xF895 0x2027      LDRB     R2,[R5, #+39]
   \   00000164   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2Connect Retur...">`
   \   00000168   0x4631             MOV      R1,R6
   \   0000016A   0x.... 0x....      BL       GSN_NCM_PRINTF
    888          
    889          	if(retCode != GSN_OPERATION_IN_PROGRESS)
   \   0000016E   0x....             LDR.N    R0,??DataTable25  ;; 0x80000001
   \   00000170   0x4286             CMP      R6,R0
   \   00000172   0xD004             BEQ.N    ??GsnNcm_L2Connect_13
    890          	{
    891          		GsnNcm_L2ConnectCb(pNcm, GSN_FAILURE);
   \   00000174   0xF04F 0x4100      MOV      R1,#-2147483648
   \   00000178   0x4620             MOV      R0,R4
   \   0000017A   0x.... 0x....      BL       GsnNcm_L2ConnectCb
    892          	}
    893              return retCode;
   \                     ??GsnNcm_L2Connect_13:
   \   0000017E   0x4630             MOV      R0,R6
   \                     ??GsnNcm_L2Connect_12:
   \   00000180   0xE8BD 0x81F6      POP      {R1,R2,R4-R8,PC}  ;; return
    894          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0xF894 0x009F      LDRB     R0,[R4, #+159]
   \   00000004   0xF885 0x0027      STRB     R0,[R5, #+39]
   \   00000008   0xF885 0x8028      STRB     R8,[R5, #+40]
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x2206             MOVS     R2,#+6
   \                     ??Subroutine7_0:
   \   00000002   0xF105 0x0021      ADD      R0,R5,#+33
   \   00000006   0x.... 0x....      B.W      memcpy
    895          

   \                                 In section .text, align 2, keep-with-next
    896          VOID
    897          GsnNcm_L2DisconnectCb(VOID* ctx, INT32 status)
    898          {
   \                     GsnNcm_L2DisconnectCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    899              GSN_NCM_CTX_T *pNcm = (GSN_NCM_CTX_T *)ctx;
    900              
    901              GSN_NCM_PRINTF("[NCM] L2DisconnectCb:%x\r\n", status);
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2DisconnectCb:...">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
    902          
    903          #ifdef S2W_NCM_ROAMING_SUPPORT				
    904          	if(pNcm->roamingParams.roamingTriggered  == 1 && status == GSN_SUCCESS )
    905          	{		
    906          		GsnNcm_MsgPost(pNcm,GSN_NCM_CTX_MSG_ID_ROAM_L2DISCONNECTED);
    907          	}
    908          	else
    909          #endif	
    910              
    911              /* Post the message*/
    912              GsnNcm_MsgPost(pNcm,GSN_NCM_CTX_MSG_ID_L2_DISCONNECTED);
   \   0000000C                      REQUIRE ?Subroutine0
   \   0000000C                      ;; // Fall through to label ?Subroutine0
    913          }
    914          

   \                                 In section .text, align 2, keep-with-next
    915          GSN_STATUS_T
    916          GsnNcm_L2Disconnect(GSN_NCM_CTX_T* pNcm)
    917          {
   \                     GsnNcm_L2Disconnect:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    918              GSN_STATUS_T retCode;    
    919              UINT16 disconResonCode = 8;
    920          
    921              GSN_NCM_PRINTF("[NCM] L2Disconnect\r\n");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L2Disconnect\\r\\n">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
    922          
    923              retCode = GsnWdd_Disconnect(pNcm->pWdd, disconResonCode, GsnNcm_L2DisconnectCb, pNcm);
   \   0000000C   0x6F20             LDR      R0,[R4, #+112]
   \   0000000E   0x....             LDR.N    R2,??DataTable25_2
   \   00000010   0x4623             MOV      R3,R4
   \   00000012   0x2108             MOVS     R1,#+8
   \   00000014   0x.... 0x....      BL       GsnWdd_Disconnect
    924          
    925              pNcm->state = GSN_NCM_STATE_L2_DISCONNECTING;
   \   00000018   0x2102             MOVS     R1,#+2
   \   0000001A   0x7021             STRB     R1,[R4, #+0]
    926          
    927              return retCode;
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
    928          }
    929          

   \                                 In section .text, align 2, keep-with-next
    930          VOID
    931          GsnNcm_L3ConnectCb(INT32 status, VOID* ctx)
    932          {
   \                     GsnNcm_L3ConnectCb:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0xB085             SUB      SP,SP,#+20
    933              GSN_NCM_CTX_T *pNcm = (GSN_NCM_CTX_T *)ctx;
    934          
    935              GSN_NCM_PRINTF("[NCM] L3ConnectCb: Status = %x\r\n", status);
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L3ConnectCb: St...">`
   \   0000000E   0x.... 0x....      BL       GSN_NCM_PRINTF
    936          
    937              if(status == GSN_SUCCESS)
   \   00000012   0xB92D             CBNZ.N   R5,??GsnNcm_L3ConnectCb_0
    938              {
    939                  /* If the dhcp renewal happens successfully then no need to post the msg */
    940                  if (pNcm->state != GSN_NCM_STATE_L3_CONNECTED)
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0x2809             CMP      R0,#+9
   \   00000018   0xBF0C             ITE      EQ 
   \   0000001A   0x210D             MOVEQ    R1,#+13
   \   0000001C   0x2108             MOVNE    R1,#+8
    941                  {
    942                      GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L3_CONNECTED);
   \   0000001E   0xE01E             B.N      ??GsnNcm_L3ConnectCb_1
    943                  }
    944                  else if(pNcm->state == GSN_NCM_STATE_L3_CONNECTED)
    945                  {
    946                    /* Always stop DHCP thread , if L3 is success */
    947                    GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L3_RENEWSUCESS);
    948                  }
    949              }
    950              else if(status == GSN_NW_DHCP_LEASE_EXPIRED)
   \                     ??GsnNcm_L3ConnectCb_0:
   \   00000020   0x....             LDR.N    R0,??DataTable25_3  ;; 0xb0000206
   \   00000022   0x4285             CMP      R5,R0
   \   00000024   0xBF08             IT       EQ 
   \   00000026   0x2109             MOVEQ    R1,#+9
    951              {
    952                /* This call back is called in renew timer context */
    953                 GsnNcm_MsgPost(pNcm,GSN_NCM_CTX_MSG_ID_L3_DISCONNECTED);
   \   00000028   0xD019             BEQ.N    ??GsnNcm_L3ConnectCb_1
    954                
    955              }
    956              else
    957              {   
    958          		pNcm->L3ConnFailed=0;                 
   \   0000002A   0xF204 0x5074      ADDW     R0,R4,#+1396
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x7101             STRB     R1,[R0, #+4]
    959                  if(pNcm->L3ConnectCnt && pNcm->config.retryPeriodConfig.l3ConnectRetryIntrvl)
   \   00000032   0xF8D4 0x1574      LDR      R1,[R4, #+1396]
   \   00000036   0x2900             CMP      R1,#+0
   \   00000038   0xBF1C             ITT      NE 
   \   0000003A   0xF8D4 0x2310      LDRNE    R2,[R4, #+784]
   \   0000003E   0x2A00             CMPNE    R2,#+0
   \   00000040   0xD00A             BEQ.N    ??GsnNcm_L3ConnectCb_2
    960                  {                
    961                      pNcm->L3ConnectCnt--;
   \   00000042   0x1E48             SUBS     R0,R1,#+1
   \   00000044   0xF8C4 0x0574      STR      R0,[R4, #+1396]
    962                      pNcm->connMgrTmrHndl = GsnSoftTmr_Start(&pNcm->connMgrTmr, GSN_SOFT_TMR_ONESHOT, 0, 
    963                                        			GSN_SOFT_TMR_MILLISECONDS_TO_TICKS(pNcm->config.retryPeriodConfig.l3ConnectRetryIntrvl),
    964                                        			( GSN_SOFT_TMR_CBR_T )GsnNcm_TimerCb, pNcm );        
   \   00000048   0x.... 0x....      BL       ?Subroutine12
    965                  }
   \                     ??CrossCallReturnLabel_25:
   \   0000004C   0xF8D4 0x0310      LDR      R0,[R4, #+784]
   \   00000050   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   00000054   0x62A0             STR      R0,[R4, #+40]
   \   00000056   0xE007             B.N      ??GsnNcm_L3ConnectCb_3
    966                  else
    967                  {
    968          	        pNcm->L3ConnFailed =1;
   \                     ??GsnNcm_L3ConnectCb_2:
   \   00000058   0x2101             MOVS     R1,#+1
   \   0000005A   0x7101             STRB     R1,[R0, #+4]
    969                      /*[TO DO]Go to CPU wait state or disconnect and connect again*/                                                
    970                      GsnNcm_MsgPost(pNcm, GSN_NCM_CTX_MSG_ID_L2_SYNC_LOSS);    
   \   0000005C   0x2105             MOVS     R1,#+5
   \                     ??GsnNcm_L3ConnectCb_1:
   \   0000005E   0x4620             MOV      R0,R4
   \   00000060   0xB005             ADD      SP,SP,#+20
   \   00000062   0xE8BD 0x4030      POP      {R4,R5,LR}
   \   00000066   0x....             B.N      GsnNcm_MsgPost
    971                  }
    972              }
    973          }
   \                     ??GsnNcm_L3ConnectCb_3:
   \   00000068   0xB005             ADD      SP,SP,#+20
   \   0000006A   0xBD30             POP      {R4,R5,PC}       ;; return
    974          

   \                                 In section .text, align 2, keep-with-next
    975          GSN_STATUS_T
    976          GsnNcm_L3Connect(GSN_NCM_CTX_T* pNcm)
    977          {
   \                     GsnNcm_L3Connect:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    978              GSN_STATUS_T retVal;
    979              pNcm->pNwif->notifyCb = GsnNcm_L3ConnectCb;
   \   00000004   0x....             LDR.N    R2,??DataTable25_4
   \   00000006   0x6F60             LDR      R0,[R4, #+116]
   \   00000008   0xF500 0x41A5      ADD      R1,R0,#+21120
   \   0000000C   0x600A             STR      R2,[R1, #+0]
    980              pNcm->pNwif->notifyCtxt = pNcm;
   \   0000000E   0xF245 0x2188      MOVW     R1,#+21128
   \   00000012   0x500C             STR      R4,[R1, R0]
    981          #ifdef S2W_NCM_ROAMING_SUPPORT	
    982          	if(pNcm->roamingParams.roamingTriggered == 1 && pNcm->config.roamingCfgParams.maintainL3Con == 0)
    983          	{
    984          		retVal = GsnNwIf_Open(pNcm->pNwif, &pNcm->config.ipConfig,&pNcm->config.dhcpV4Cfg);
    985          	}	
    986          	else
    987          #endif    
    988                  {
    989              GSN_NCM_PRINTF("[NCM] L3Connect\r\n");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L3Connect\\r\\n">`
   \   00000018   0x.... 0x....      BL       GSN_NCM_PRINTF
    990              retVal = GsnNwIf_Open(pNcm->pNwif, &pNcm->config.ipConfig, &pNcm->config.dhcpV4Cfg);
    991                  }
    992              return retVal;
   \   0000001C   0x6F60             LDR      R0,[R4, #+116]
   \   0000001E   0xF504 0x721C      ADD      R2,R4,#+624
   \   00000022   0xF504 0x71EC      ADD      R1,R4,#+472
   \   00000026   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002A   0x.... 0x....      B.W      GsnNwIf_Open
    993          }
    994          

   \                                 In section .text, align 2, keep-with-next
    995          GSN_STATUS_T
    996          GsnNcm_L3Disconnect(GSN_NCM_CTX_T* pNcm)
    997          {    
   \                     GsnNcm_L3Disconnect:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    998              GSN_STATUS_T retVal;
    999          
   1000              GSN_NCM_PRINTF("[NCM] L3Disconnect\r\n");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] L3Disconnect\\r\\n">`
   \   00000008   0x.... 0x....      BL       GSN_NCM_PRINTF
   1001          
   1002              pNcm->pNwif->notifyCb = NULL;
   \   0000000C   0x6F60             LDR      R0,[R4, #+116]
   \   0000000E   0xF500 0x41A5      ADD      R1,R0,#+21120
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x600A             STR      R2,[R1, #+0]
   1003              pNcm->pNwif->notifyCtxt = NULL;
   \   00000016   0xF245 0x2188      MOVW     R1,#+21128
   \   0000001A   0x500A             STR      R2,[R1, R0]
   1004              retVal = GsnNwIf_Close(pNcm->pNwif);
   1005          
   1006              return retVal;
   \   0000001C   0xE8BD 0x4010      POP      {R4,LR}
   \   00000020   0x.... 0x....      B.W      GsnNwIf_Close
   1007          }
   1008          

   \                                 In section .text, align 4, keep-with-next
   1009          VOID
   1010          GsnNcm_TimerCb( VOID* context, GSN_SOFT_TMR_HANDLE_T timerHandle )
   1011          {
   \                     GsnNcm_TimerCb:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1012              UINT32 msgId = GSN_NCM_CTX_MSG_ID_MAX;
   1013              GSN_NCM_CTX_T *pNcm = (GSN_NCM_CTX_T *)context;
   1014          
   1015              GSN_NCM_PRINTF("[NCM] Timer Event: %x\r\n", pNcm->state);
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "[NCM] Timer Event: %x\\r\\n">`
   \   00000008   0x7821             LDRB     R1,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       GSN_NCM_PRINTF
   1016          
   1017              switch(pNcm->state)
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x1EC0             SUBS     R0,R0,#+3
   \   00000012   0x2807             CMP      R0,#+7
   \   00000014   0xD80C             BHI.N    ??GsnNcm_TimerCb_1
   \   00000016   0xE8DF 0xF000      TBB      [PC, R0]
   \                     ??GsnNcm_TimerCb_0:
   \   0000001A   0x06 0x04          DC8      0x6,0x4,0x6,0x6
   \              0x06 0x06    
   \   0000001E   0x06 0x08          DC8      0x6,0x8,0x8,0x4
   \              0x08 0x04    
   1018              {
   1019                  case GSN_NCM_STATE_IDLE:
   1020                      msgId = GSN_NCM_CTX_MSG_ID_L2_RESTART;
   1021                      break;
   1022                  case GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP:  /* Onetime scan with known AP */
   1023                  	msgId = GSN_NCM_CTX_MSG_ID_L2_RESTART;
   \                     ??GsnNcm_TimerCb_2:
   \   00000022   0x2106             MOVS     R1,#+6
   1024                  	break;
   \   00000024   0xE002             B.N      ??GsnNcm_TimerCb_3
   1025                  case GSN_NCM_STATE_L2_SCAN_KNOWN_CHNL:
   1026                  case GSN_NCM_STATE_L2_DISCONNECTED:
   1027                  case GSN_NCM_STATE_L2_SCAN_SPECIFIC_CHNL:
   1028                  case GSN_NCM_STATE_L2_SCAN_ALL_CHNL:
   1029                      msgId = GSN_NCM_CTX_MSG_ID_L2_START;
   \                     ??GsnNcm_TimerCb_4:
   \   00000026   0x2101             MOVS     R1,#+1
   1030                      break;
   \   00000028   0xE000             B.N      ??GsnNcm_TimerCb_3
   1031                  case GSN_NCM_STATE_L2_CONNECTED:            
   1032                      msgId = GSN_NCM_CTX_MSG_ID_L3_DISCONNECTED;
   1033          			break;
   1034                  case GSN_NCM_STATE_L3_CONNECTED:     /* Timer is started if L3 fails after leasetime expires */
   1035                      msgId = GSN_NCM_CTX_MSG_ID_L3_DISCONNECTED;
   \                     ??GsnNcm_TimerCb_5:
   \   0000002A   0x2109             MOVS     R1,#+9
   1036                      break;
   1037              }
   1038          	if(msgId < GSN_NCM_CTX_MSG_ID_MAX)
   1039              	GsnNcm_MsgPost(pNcm, msgId);    
   \                     ??GsnNcm_TimerCb_3:
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x....             B.N      ?Subroutine2
   1040          
   1041          	return;
   \                     ??GsnNcm_TimerCb_1:
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
   1042          }
   1043          
   1044          
   1045          /**
   1046           ******************************************************************
   1047           * @ingroup GsnNcm
   1048           * @brief To fill valid channel numbers depending on reg domain 
   1049           *   This function shall be called during scan or connect 
   1050           *  @param pWdd    :  WDD context pointer
   1051           *  @param chTable :  Pointer to array to hold the valid channel numbers
   1052           *  @param domain  :  Regulatory domain
   1053           *  @retval none.
   1054           *  Important Note: chTable[] array size must be GSN_WDD_WLAN_MAX_CHNLS+1
   1055           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1056          VOID 
   1057          GsnNcm_ChannelFill(GSN_WDD_CTX_T *pWdd,UINT8 *chTable,UINT8 domain)
   1058          {
   \                     GsnNcm_ChannelFill:
   \   00000000   0x4608             MOV      R0,R1
   1059          	UINT8 index=0;
   1060          
   1061          	/* fill the channels  */
   1062          	for(index=0;index<=13;index++)
   \   00000002   0x2300             MOVS     R3,#+0
   1063              {
   1064              	chTable[index] = index+1;
   \                     ??GsnNcm_ChannelFill_0:
   \   00000004   0x1C59             ADDS     R1,R3,#+1
   \   00000006   0x5419             STRB     R1,[R3, R0]
   1065             	}
   \   00000008   0x1C5B             ADDS     R3,R3,#+1
   \   0000000A   0x2B0E             CMP      R3,#+14
   \   0000000C   0xDBFA             BLT.N    ??GsnNcm_ChannelFill_0
   1066             	if(domain == GSN_NCM_REG_DOMAIN_FCC)
   \   0000000E   0xB90A             CBNZ.N   R2,??GsnNcm_ChannelFill_1
   1067            	{/* 1 to 11 are valid */
   1068                index=11;
   \   00000010   0x230B             MOVS     R3,#+11
   \   00000012   0xE009             B.N      ??GsnNcm_ChannelFill_2
   1069             	}
   1070             	else if(domain == GSN_NCM_REG_DOMAIN_ETSI)
   \                     ??GsnNcm_ChannelFill_1:
   \   00000014   0x2A01             CMP      R2,#+1
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x230D             MOVEQ    R3,#+13
   1071             	{/* 1 to 13 are valid */
   1072                 index=13;
   \   0000001A   0xD005             BEQ.N    ??GsnNcm_ChannelFill_2
   1073             	}
   1074          	else if(domain ==GSN_NCM_REG_DOMAIN_TELEC)
   \   0000001C   0x2A02             CMP      R2,#+2
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x230E             MOVEQ    R3,#+14
   1075          		index=14;
   \   00000022   0xD001             BEQ.N    ??GsnNcm_ChannelFill_2
   1076             	for(;index<=14;index++)
   \   00000024   0x2B0F             CMP      R3,#+15
   \   00000026   0xDA04             BGE.N    ??GsnNcm_ChannelFill_3
   1077             	{
   1078                 chTable[index] = 0;  /* Mask channels depending on REG domain and last entry must be ZERO */
   \                     ??GsnNcm_ChannelFill_2:
   \   00000028   0xF1C3 0x010F      RSB      R1,R3,#+15
   \   0000002C   0x1818             ADDS     R0,R3,R0
   \   0000002E   0x.... 0x....      B.W      __aeabi_memclr
   1079             	}
   1080          }
   \                     ??GsnNcm_ChannelFill_3:
   \   00000032   0x4770             BX       LR               ;; return
   1081          
   1082          /**
   1083           ******************************************************************
   1084           * @ingroup GsnNcm
   1085           * @brief process the l2 connect event
   1086           *   This function shall be called after l2 connect 
   1087           *  @param pNcm    :  NCM context pointer
   1088           *  @param alreadyConnectedEvent :  flag to check whether L2 is already connected
   1089           *  @retval none.
   1090           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1091          PRIVATE VOID
   1092          GsnNcm_L2ConnectProcess(GSN_NCM_CTX_T* pNcm,UINT8 alreadyConnectedEvent )
   1093          {
   \                     GsnNcm_L2ConnectProcess:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   1094          	GSN_WDD_WLAN_CFG_T *pWlanConfig;
   1095          	GSN_STATUS retcode = GSN_SUCCESS;
   1096          	
   1097          	/* store the wlan config paramteres */
   1098          	pWlanConfig = GsnWdd_WlanConfigPtrGet(pNcm->pWdd);
   \   00000006   0x6F20             LDR      R0,[R4, #+112]
   \   00000008   0xF100 0x06B4      ADD      R6,R0,#+180
   1099          	memcpy(&pNcm->config.wlanCfg, pWlanConfig, sizeof(GSN_WDD_WLAN_CFG_T));
   \   0000000C   0xF44F 0x72AE      MOV      R2,#+348
   \   00000010   0x4631             MOV      R1,R6
   \   00000012   0xF104 0x0078      ADD      R0,R4,#+120
   \   00000016   0x.... 0x....      BL       memcpy
   1100          	if((FALSE == pNcm->config.scanEntry)   && (0 != pNcm->pWdd->scanEntry.frameLen ))
   \   0000001A   0xF894 0x0554      LDRB     R0,[R4, #+1364]
   \   0000001E   0xB970             CBNZ.N   R0,??GsnNcm_L2ConnectProcess_0
   \   00000020   0x6F20             LDR      R0,[R4, #+112]
   \   00000022   0xF8B0 0x1310      LDRH     R1,[R0, #+784]
   \   00000026   0xB151             CBZ.N    R1,??GsnNcm_L2ConnectProcess_0
   1101          	{
   1102          		memcpy(&pNcm->config.KnownChnlScanEntry,&pNcm->pWdd->scanEntry,sizeof(GSN_WDD_SCAN_ENTRY_T));
   \   00000028   0xF500 0x7139      ADD      R1,R0,#+740
   \   0000002C   0xF240 0x222E      MOVW     R2,#+558
   \   00000030   0xF204 0x3026      ADDW     R0,R4,#+806
   \   00000034   0x.... 0x....      BL       memcpy
   1103          	    pNcm->config.scanEntry = TRUE;
   \   00000038   0x2001             MOVS     R0,#+1
   \   0000003A   0xF884 0x0554      STRB     R0,[R4, #+1364]
   1104          	}
   1105          	pNcm->config.wlanCfg.channel[0] = pWlanConfig->channel[0];
   \                     ??GsnNcm_L2ConnectProcess_0:
   \   0000003E   0xF896 0x0027      LDRB     R0,[R6, #+39]
   \   00000042   0xF884 0x009F      STRB     R0,[R4, #+159]
   1106          	
   1107          	/* Change the state to GSN_NCM_STATE_L2_CONNECTED */
   1108          	pNcm->state = GSN_NCM_STATE_L2_CONNECTED;
   \   00000046   0x2008             MOVS     R0,#+8
   \   00000048   0x.... 0x....      BL       ?Subroutine10
   1109          
   1110          	/* Successfully associated, call the app CB */
   1111          	if(pNcm->notifCb != NULL)
   \                     ??CrossCallReturnLabel_17:
   \   0000004C   0xD004             BEQ.N    ??GsnNcm_L2ConnectProcess_1
   1112          	{
   1113          		(pNcm->notifCb)(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L2_CONNECTED);
   \   0000004E   0xF8D4 0x0564      LDR      R0,[R4, #+1380]
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0x4621             MOV      R1,R4
   \   00000056   0x4798             BLX      R3
   1114          	}
   1115          #ifdef S2W_NCM_ROAMING_SUPPORT			
   1116          	if((pNcm->roamingParams.roamingTriggered == TRUE) && (pNcm->config.roamingCfgParams.maintainL3Con == TRUE))				
   1117          	{
   1118          		GsnNcm_RoamReInit(pNcm);	
   1119          		return;
   1120          	}
   1121          	else
   1122          #endif                
   1123          	{
   1124          		
   1125          		/* Start L3 Connection */
   1126          		if(!alreadyConnectedEvent && !pNcm->config.ipConfig.ipv4.staticIp)/* Not the NORMAL BOOT connect*/
   \                     ??GsnNcm_L2ConnectProcess_1:
   \   00000058   0x2D00             CMP      R5,#+0
   \   0000005A   0xBF02             ITTT     EQ 
   \   0000005C   0xF8D4 0x01E0      LDREQ    R0,[R4, #+480]
   \   00000060   0x2800             CMPEQ    R0,#+0
   \   00000062   0xF8C4 0x01E4      STREQ    R0,[R4, #+484]
   1127          		{
   1128          			pNcm->config.ipConfig.ipv4.ipAddr = 0;
   1129          		}
   1130          		retcode = GsnNcm_L3Connect(pNcm);
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0x.... 0x....      BL       GsnNcm_L3Connect
   1131          
   1132          		if((GSN_OPERATION_IN_PROGRESS != retcode)&&(!pNcm->config.ipConfig.ipv4.staticIp))
   \   0000006C   0x....             LDR.N    R1,??DataTable25  ;; 0x80000001
   \   0000006E   0x4288             CMP      R0,R1
   \   00000070   0xD005             BEQ.N    ??GsnNcm_L2ConnectProcess_2
   \   00000072   0xF8D4 0x11E0      LDR      R1,[R4, #+480]
   \   00000076   0xB911             CBNZ.N   R1,??GsnNcm_L2ConnectProcess_2
   1133          		{
   1134          	    	GsnNcm_L3ConnectCb(retcode, pNcm);
   \   00000078   0x4621             MOV      R1,R4
   \   0000007A   0x.... 0x....      BL       GsnNcm_L3ConnectCb
   1135          		}
   1136          		 	if(pNcm->config.ipConfig.ipv4.staticIp)
   \                     ??GsnNcm_L2ConnectProcess_2:
   \   0000007E   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   00000082   0xB120             CBZ.N    R0,??GsnNcm_L2ConnectProcess_3
   1137          		{
   1138          	   		GsnNcm_L3ConnectCb(GSN_SUCCESS, pNcm);                  
   \   00000084   0x4621             MOV      R1,R4
   \   00000086   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000008A   0x2000             MOVS     R0,#+0
   \   0000008C   0x....             B.N      GsnNcm_L3ConnectCb
   1139          		}
   1140          	}
   1141          }
   \                     ??GsnNcm_L2ConnectProcess_3:
   \   0000008E   0xBD70             POP      {R4-R6,PC}       ;; return
   1142          
   1143          /**
   1144           ******************************************************************
   1145           * @ingroup GsnNcm
   1146           * @brief process the l2 disconnect connect event
   1147           *   This function shall be called after l2 connect 
   1148           *  @param pNcm    :  NCM context pointer
   1149           *  @retval none.
   1150           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1151          PRIVATE VOID
   1152          GsnNcm_L2DisconnectProcess(GSN_NCM_CTX_T* pNcm)
   1153          {
   \                     GsnNcm_L2DisconnectProcess:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   1154          	
   1155          	if ((pNcm->state == GSN_NCM_STATE_L2_DISCONNECTING) || 
   1156          		(pNcm->state == GSN_NCM_STATE_L2_CONNECTED) ||
   1157          		(pNcm->state == GSN_NCM_STATE_L3_CONNECTED))
   \   00000004   0x7820             LDRB     R0,[R4, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xBF18             IT       NE 
   \   0000000A   0x2808             CMPNE    R0,#+8
   \   0000000C   0xD006             BEQ.N    ??GsnNcm_L2DisconnectProcess_0
   \   0000000E   0x2809             CMP      R0,#+9
   \   00000010   0xD12A             BNE.N    ??GsnNcm_L2DisconnectProcess_1
   1158          	{
   1159          
   1160          		/* if state is GSN_NCM_STATE_L3_CONNECTED then use scan entry*/
   1161          		if ((pNcm->state == GSN_NCM_STATE_L3_CONNECTED))
   1162          		{
   1163          			if( pNcm->config.scanEntry)  /* Do onetime If Scan entry is present of previous L2 success */
   \   00000012   0xF894 0x0554      LDRB     R0,[R4, #+1364]
   \   00000016   0xB130             CBZ.N    R0,??GsnNcm_L2DisconnectProcess_2
   1164          				pNcm->state=GSN_NCM_STATE_L2_CONCT_TO_KNOWN_AP;
   \   00000018   0x2004             MOVS     R0,#+4
   \   0000001A   0xE005             B.N      ??GsnNcm_L2DisconnectProcess_3
   1165          			else
   1166          				pNcm->state = GSN_NCM_STATE_L2_DISCONNECTED;
   1167          		}
   1168          		else
   1169          		{
   1170          			memset(&pNcm->config.KnownChnlScanEntry,0,sizeof(GSN_WDD_SCAN_ENTRY_T));
   \                     ??GsnNcm_L2DisconnectProcess_0:
   \   0000001C   0x.... 0x....      BL       ?Subroutine3
   1171          			pNcm->config.scanEntry = FALSE;
   \                     ??CrossCallReturnLabel_0:
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0xF884 0x0554      STRB     R0,[R4, #+1364]
   1172          			pNcm->state = GSN_NCM_STATE_L2_DISCONNECTED;
   \                     ??GsnNcm_L2DisconnectProcess_2:
   \   00000026   0x2003             MOVS     R0,#+3
   \                     ??GsnNcm_L2DisconnectProcess_3:
   \   00000028   0x7020             STRB     R0,[R4, #+0]
   1173          		}
   1174          		if(NULL != pNcm->connMgrTmrHndl)
   \   0000002A   0x6AA0             LDR      R0,[R4, #+40]
   \   0000002C   0xB118             CBZ.N    R0,??GsnNcm_L2DisconnectProcess_4
   1175          		{
   1176          			GsnSoftTmr_Stop(pNcm->connMgrTmrHndl);
   \   0000002E   0x.... 0x....      BL       GsnSoftTmr_Stop
   1177          			pNcm->connMgrTmrHndl = NULL;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0x62A0             STR      R0,[R4, #+40]
   1178          		}
   1179          		/* Notify the app */
   1180          		if(pNcm->notifCb != NULL &&  pNcm->L3ConnFailed == 0)
   \                     ??GsnNcm_L2DisconnectProcess_4:
   \   00000036   0x.... 0x....      BL       ??Subroutine10_0
   \                     ??CrossCallReturnLabel_21:
   \   0000003A   0xD007             BEQ.N    ??GsnNcm_L2DisconnectProcess_5
   \   0000003C   0xF894 0x0578      LDRB     R0,[R4, #+1400]
   \   00000040   0xB920             CBNZ.N   R0,??GsnNcm_L2DisconnectProcess_5
   1181          		{
   1182          			(pNcm->notifCb )(pNcm->notifCbCtx, pNcm, GSN_NCM_NOTIF_ID_L2_DISCONNECTED);
   \   00000042   0xF8D4 0x0564      LDR      R0,[R4, #+1380]
   \   00000046   0x2201             MOVS     R2,#+1
   \   00000048   0x4621             MOV      R1,R4
   \   0000004A   0x4798             BLX      R3
   1183          		}
   1184          		pNcm->L3ConnFailed =0;
   \                     ??GsnNcm_L2DisconnectProcess_5:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0xF884 0x0578      STRB     R0,[R4, #+1400]
   1185          		GsnNcm_L3Disconnect(pNcm);				  
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       GsnNcm_L3Disconnect
   1186          
   1187          		/* Reset the IP Address. Handle disassiciation after standby */
   1188          		if(!pNcm->config.ipConfig.ipv4.staticIp)
   \   00000058   0x.... 0x....      BL       ?Subroutine9
   1189          		{
   1190          			pNcm->config.ipConfig.ipv4.ipAddr = 0;
   1191          		}
   1192          		pNcm->scanKnownChCnt = pNcm->config.retryCountsConfig.maxScanKnownChCnt;
   \                     ??CrossCallReturnLabel_15:
   \   0000005C   0x.... 0x....      BL       ?Subroutine8
   1193          		pNcm->scanSpecChCnt = pNcm->config.retryCountsConfig.maxScanSpecChCnt;
   1194          		pNcm->scanAllChCnt = pNcm->config.retryCountsConfig.maxScanAllChCnt;
   1195          		pNcm->L3ConnectCnt = pNcm->config.retryCountsConfig.maxL3ConnectCnt;
   1196          		GsnNcm_L2Connect(pNcm);
   \                     ??CrossCallReturnLabel_13:
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0xE8BD 0x4010      POP      {R4,LR}
   \   00000066   0x....             B.N      GsnNcm_L2Connect
   1197          	}
   1198          }
   \                     ??GsnNcm_L2DisconnectProcess_1:
   \   00000068   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x80000001         DC32     0x80000001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x........         DC32     GsnNcm_L2ConnectCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x........         DC32     GsnNcm_L2DisconnectCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0xB0000206         DC32     0xb0000206

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0x........         DC32     GsnNcm_L3ConnectCb

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Start\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Start\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x53 0x74    
   \              0x61 0x72    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Process Stop\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Process Stop\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x50 0x72    
   \              0x6F 0x63    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Stop\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Stop\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x53 0x74    
   \              0x6F 0x70    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Execute: MsgId ...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Execute: MsgId = %d, state = %d\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x45 0x78    
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x65 0x3A    
   \              0x20 0x4D    
   \              0x73 0x67    
   \              0x49 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Start L3 connect dire...">`:
   \   00000000   0x53 0x74          DC8 "Start L3 connect directly\015\012"
   \              0x61 0x72    
   \              0x74 0x20    
   \              0x4C 0x33    
   \              0x20 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x20 0x64    
   \              0x69 0x72    
   \              0x65 0x63    
   \              0x74 0x6C    
   \              0x79 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Execute End: Ms...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Execute End: MsgId = %d, state = %d\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x45 0x78    
   \              0x65 0x63    
   \              0x75 0x74    
   \              0x65 0x20    
   \              0x45 0x6E    
   \              0x64 0x3A    
   \              0x20 0x4D    
   \              0x73 0x67    
   \              0x49 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x2C    
   \              0x20 0x73    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n[NCM] GsnNcm_Disass...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012[NCM] GsnNcm_DisassocIndCb\015\012"
   \              0x5B 0x4E    
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x47 0x73    
   \              0x6E 0x4E    
   \              0x63 0x6D    
   \              0x5F 0x44    
   \              0x69 0x73    
   \              0x61 0x73    
   \              0x73 0x6F    
   \              0x63 0x49    
   \              0x6E 0x64    
   \              0x43 0x62    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n[NCM] GsnNcm_BeconM...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012[NCM] GsnNcm_BeconMissIndCb\015\012"
   \              0x5B 0x4E    
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x47 0x73    
   \              0x6E 0x4E    
   \              0x63 0x6D    
   \              0x5F 0x42    
   \              0x65 0x63    
   \              0x6F 0x6E    
   \              0x4D 0x69    
   \              0x73 0x73    
   \              0x49 0x6E    
   \              0x64 0x43    
   \              0x62 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Frame Tx Failur...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Frame Tx Failure %d\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x54 0x78    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x75    
   \              0x72 0x65    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2ConnectFail\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L2ConnectFail\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x46    
   \              0x61 0x69    
   \              0x6C 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2ConnectCb: St...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L2ConnectCb: Status = %x\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x43    
   \              0x62 0x3A    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x3D 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2Connect\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L2Connect\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2Connect Retur...">`:
   \   00000000   0x5B 0x4E          DC8 5BH, 4EH, 43H, 4DH, 5DH, 20H, 4CH, 32H
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 20H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x20    
   \   00000010   0x52 0x65          DC8 52H, 65H, 74H, 75H, 72H, 6EH, 20H, 43H
   \              0x74 0x75    
   \              0x72 0x6E    
   \              0x20 0x43    
   \   00000018   0x6F 0x64          DC8 6FH, 64H, 65H, 20H, 3AH, 20H, 25H, 78H
   \              0x65 0x20    
   \              0x3A 0x20    
   \              0x25 0x78    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 43H, 68H, 61H, 6EH, 6EH, 65H
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \   00000028   0x6C 0x20          DC8 6CH, 20H, 3DH, 20H, 25H, 64H, 2CH, 20H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x2C 0x20    
   \   00000030   0x53 0x74          DC8 53H, 74H, 61H, 74H, 65H, 20H, 3DH, 20H
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x3D 0x20    
   \   00000038   0x25 0x78          DC8 25H, 78H, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   0000003D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2DisconnectCb:...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L2DisconnectCb:%x\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \              0x44 0x69    
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x43 0x62    
   \              0x3A 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L2Disconnect\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L2Disconnect\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x32    
   \              0x44 0x69    
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L3ConnectCb: St...">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L3ConnectCb: Status = %x\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x33    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x43    
   \              0x62 0x3A    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x3D 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L3Connect\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L3Connect\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x33    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] L3Disconnect\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] L3Disconnect\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x4C 0x33    
   \              0x44 0x69    
   \              0x73 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "[NCM] Timer Event: %x\\r\\n">`:
   \   00000000   0x5B 0x4E          DC8 "[NCM] Timer Event: %x\015\012"
   \              0x43 0x4D    
   \              0x5D 0x20    
   \              0x54 0x69    
   \              0x6D 0x65    
   \              0x72 0x20    
   \              0x45 0x76    
   \              0x65 0x6E    
   \              0x74 0x3A    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   GSN_NCM_PRINTF
       8   GsnNcm_BeconMissIndCb
         8   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
       0   GsnNcm_ChannelFill
         0   -> __aeabi_memclr
       8   GsnNcm_ConfigGet
         8   -> memcpy
       0   GsnNcm_ConfigPtrGet
       8   GsnNcm_ConfigSet
         8   -> memcpy
       8   GsnNcm_DisassocIndCb
         8   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
      40   GsnNcm_Execute
        40   -- Indirect call
        40   -> GSN_NCM_PRINTF
        40   -> GsnNcm_L2Connect
        40   -> GsnNcm_L2ConnectFail
        40   -> GsnNcm_L2ConnectProcess
        40   -> GsnNcm_L2Disconnect
        40   -> GsnNcm_L2DisconnectProcess
        40   -> GsnNcm_L3Connect
        40   -> GsnNcm_L3ConnectCb
        40   -> GsnNcm_L3Disconnect
        40   -> GsnNcm_ProcessStop
        40   -> GsnOsal_QueueGet
        40   -> GsnSoftTmr_Start
       8   GsnNcm_FrameTxFailIndCb
         8   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
      16   GsnNcm_Init
        16   -> _tx_queue_create
        16   -> memset
      32   GsnNcm_L2Connect
        32   -> GSN_NCM_PRINTF
        32   -> GsnNcm_ChannelFill
        32   -> GsnNcm_L2ConnectCb
        32   -> GsnNcm_MsgPost
        32   -> GsnWdd_AssocStatusGet
        32   -> GsnWdd_Connect
        32   -> GsnWdd_WlanConfigDefaultInit
        32   -> memcpy
        32   -> memset
      16   GsnNcm_L2ConnectCb
        16   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
      24   GsnNcm_L2ConnectFail
        24   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
        24   -> GsnSoftTmr_Start
        24   -> memset
      16   GsnNcm_L2ConnectProcess
        16   -- Indirect call
        16   -> GsnNcm_L3Connect
         0   -> GsnNcm_L3ConnectCb
        16   -> GsnNcm_L3ConnectCb
        16   -> memcpy
       8   GsnNcm_L2Disconnect
         8   -> GSN_NCM_PRINTF
         8   -> GsnWdd_Disconnect
       8   GsnNcm_L2DisconnectCb
         8   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
       8   GsnNcm_L2DisconnectProcess
         8   -- Indirect call
         0   -> GsnNcm_L2Connect
         8   -> GsnNcm_L3Disconnect
         8   -> GsnSoftTmr_Stop
         8   -> memset
       8   GsnNcm_L3Connect
         8   -> GSN_NCM_PRINTF
         0   -> GsnNwIf_Open
      32   GsnNcm_L3ConnectCb
        32   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
        32   -> GsnSoftTmr_Start
       8   GsnNcm_L3Disconnect
         8   -> GSN_NCM_PRINTF
         0   -> GsnNwIf_Close
      16   GsnNcm_MsgPost
        16   -- Indirect call
        16   -> _tx_queue_send
      24   GsnNcm_ProcessStop
        24   -- Indirect call
        24   -> GSN_NCM_PRINTF
        24   -> GsnNcm_L3Disconnect
        24   -> GsnOsal_QueueGet
        24   -> GsnSoftTmr_Stop
        24   -> GsnWdd_Disconnect
        24   -> memset
      32   GsnNcm_Start
        32   -> GSN_NCM_PRINTF
        32   -> GsnNcm_MsgPost
        32   -> GsnWdd_BeaconMissCbReg
        32   -> GsnWdd_DisassocIndCbReg
        32   -> GsnWdd_FrameTxFailIndCbReg
      16   GsnNcm_Stop
        16   -> GSN_NCM_PRINTF
        16   -> GsnNcm_MsgPost
         0   -> GsnNcm_ProcessStop
       8   GsnNcm_TimerCb
         8   -> GSN_NCM_PRINTF
         0   -> GsnNcm_MsgPost
       8   GsnOsal_QueueGet
         8   -> _tx_queue_receive
       0   GsnWdd_BeaconMissCbReg
       0   GsnWdd_DisassocIndCbReg
       0   GsnWdd_FrameTxFailIndCbReg
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      28  ?<Constant "Start L3 connect dire...">
      44  ?<Constant "[NCM] Execute End: Ms...">
      40  ?<Constant "[NCM] Execute: MsgId ...">
      28  ?<Constant "[NCM] Frame Tx Failur...">
      64  ?<Constant "[NCM] L2Connect Retur...">
      36  ?<Constant "[NCM] L2ConnectCb: St...">
      24  ?<Constant "[NCM] L2ConnectFail\r\n">
      20  ?<Constant "[NCM] L2Connect\r\n">
      28  ?<Constant "[NCM] L2DisconnectCb:...">
      24  ?<Constant "[NCM] L2Disconnect\r\n">
      36  ?<Constant "[NCM] L3ConnectCb: St...">
      20  ?<Constant "[NCM] L3Connect\r\n">
      24  ?<Constant "[NCM] L3Disconnect\r\n">
      24  ?<Constant "[NCM] Process Stop\r\n">
      16  ?<Constant "[NCM] Start\r\n">
      16  ?<Constant "[NCM] Stop\r\n">
      24  ?<Constant "[NCM] Timer Event: %x\r\n">
      32  ?<Constant "\r\n[NCM] GsnNcm_BeconM...">
      32  ?<Constant "\r\n[NCM] GsnNcm_Disass...">
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_2
       4  ??DataTable25_3
       4  ??DataTable25_4
      10  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine10
      14  ?Subroutine11
      16  ?Subroutine12
       6  ?Subroutine2
      14  ?Subroutine3
      22  ?Subroutine4
      10  ?Subroutine5
      10  ?Subroutine6
      10  ?Subroutine7
      34  ?Subroutine8
      12  ?Subroutine9
       8  GSN_NCM_PRINTF
      14  GsnNcm_BeconMissIndCb
      52  GsnNcm_ChannelFill
      28  GsnNcm_ConfigGet
       4  GsnNcm_ConfigPtrGet
      24  GsnNcm_ConfigSet
      14  GsnNcm_DisassocIndCb
     424  GsnNcm_Execute
      16  GsnNcm_FrameTxFailIndCb
      62  GsnNcm_Init
     388  GsnNcm_L2Connect
      30  GsnNcm_L2ConnectCb
     196  GsnNcm_L2ConnectFail
     144  GsnNcm_L2ConnectProcess
      30  GsnNcm_L2Disconnect
      12  GsnNcm_L2DisconnectCb
     106  GsnNcm_L2DisconnectProcess
      46  GsnNcm_L3Connect
     108  GsnNcm_L3ConnectCb
      36  GsnNcm_L3Disconnect
      36  GsnNcm_MsgPost
     148  GsnNcm_ProcessStop
     124  GsnNcm_Start
      46  GsnNcm_Stop
      50  GsnNcm_TimerCb
      18  GsnOsal_QueueGet
       6  GsnWdd_BeaconMissCbReg
       6  GsnWdd_DisassocIndCbReg
       6  GsnWdd_FrameTxFailIndCbReg
      12  memcpy
      20  memset

 
 2 972 bytes in section .text
 
 2 904 bytes of CODE memory (+ 68 bytes shared)

Errors: none
Warnings: none
