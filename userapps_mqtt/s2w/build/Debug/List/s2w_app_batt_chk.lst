###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:23:36 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_app_batt_chk.c                    #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_app_batt_chk.c -D                 #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_app_batt_chk.lst         #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_app_batt_chk.o            #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\hal\s2w_app_batt_chk.c
      1          /******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_app_batt_chk.c,v $
     28          *
     29          * Description : application battery check functions
     30          ******************************************************************************/
     31          
     32          /******************************************************************************
     33            * File Inclusions
     34            *****************************************************************************/
     35          
     36          #include "gsn_includes.h"
     37          
     38          //#include "config\app_stat_config.h"
     39          #include "hal/s2w_types.h"
     40          #include "main/app_main_ctx.h"
     41          #include "hal/s2w.h"
     42          
     43          #include "app_rtc_mem.h"
     44          #include "app_events.h"
     45          
     46          
     47          /**
     48           ******************************************************************************
     49           * @file s2w_app_batt_chk.c
     50           * @brief GSN Application Battery check routines.
     51           *      This file contains the application specific Battery check implimentation.
     52          ******************************************************************************/
     53          
     54          /**
     55           ******************************************************************************
     56           * @defgroup GsnAppBattCheck
     57           *    This group contains the application specific battery check implimenation.
     58          ******************************************************************************/
     59          /******************************************************************************
     60            *  Private Definitions
     61            *
     62          ******************************************************************************/
     63          VOID
     64          AppS2wHal_BattChkIndCb(VOID* ctx,GSN_SYS_CTL_BATT_CHK_IND_T *battChkInd);
     65          
     66          
     67          #define  APP_BATT_MAX_VALS_STORED   	4
     68          
     69          /* max change limit between consecutive readings. 0.2V*/
     70          #define APP_BATT_CHK_MAX_CHNG_LIMIT     200 
     71          
     72          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
     73          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
     74          
     75          
     76          /******************************************************************************
     77            *  Public Functions
     78            *
     79          ******************************************************************************/
     80          
     81          /**
     82           ******************************************************************************
     83           * @ingroup GsnAppBattCheck
     84           * @brief Handling the battery check start operation.
     85           *    This function handle the battery check start operation.
     86           *    This function initialize the battery check module and registers the
     87           *    call back function for indication and condition check
     88           * @param data - IN  Battery check frequency
     89           * @retval S2W_SUCCESS.
     90          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
     91          PUBLIC UINT8
     92          AppS2wHal_BattChkStart(UINT32 data)
     93          { 
   \                     AppS2wHal_BattChkStart:
   \   00000000   0xB580             PUSH     {R7,LR}
     94          	GSN_STATUS status;
     95          	GSN_SYS_CTL_BATT_CHK_REQ_PARAM_T battChkReqParam;
     96          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
     97          
     98          
     99          	battChkReqParam.repeatNumTx = data;
    100          	pAppRtcLtchInfo->battchkinfo.chkFreq = data;
   \   00000002   0x....             LDR.N    R1,??DataTable10  ;; 0x410102a4
    101          
    102              /*register with WLAN Interface */
    103          	status = GsnSysCtl_BatteryChkStart(&s2wappMainTaskCtxt->sysCtlCtx,&battChkReqParam,
    104          							   AppS2wHal_BattChkIndCb,NULL);	 
    105              if(GSN_SUCCESS == status)
   \   00000004   0x.... 0x....      ADR.W    R2,AppS2wHal_BattChkIndCb
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x6008             STR      R0,[R1, #+0]
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x....             LDR.N    R0,??DataTable10_1
   \   00000010   0x6800             LDR      R0,[R0, #+0]
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   00000018   0x.... 0x....      BL       GsnSysCtl_BatteryChkStart
   \   0000001C   0x....             B.N      ?Subroutine0
    106          		return S2W_SUCCESS;
    107          	else
    108          		return S2W_FAILURE;
    109          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB100             CBZ.N    R0,??Subroutine0_0
   \   00000002   0x2001             MOVS     R0,#+1
   \                     ??Subroutine0_0:
   \   00000004   0xBD02             POP      {R1,PC}          ;; return
    110          
    111          
    112          /**
    113           ******************************************************************************
    114           * @ingroup GsnAppBattCheck
    115           * @brief Handling the battery check stop operation.
    116           *    This function handle the battery check stop operation.
    117           *    This function modify the call back function registers with battery check
    118           *    module to NULL so that the battery check will not happen.
    119           * @retval S2W_SUCCESS.
    120          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    121          PUBLIC UINT8
    122          AppS2wHal_BattChkStop()
    123          {
   \                     AppS2wHal_BattChkStop:
   \   00000000   0xB580             PUSH     {R7,LR}
    124          	GSN_STATUS status;
    125          	status = GsnSysCtl_BatteryChkStop(&s2wappMainTaskCtxt->sysCtlCtx);
    126          	
    127          	if(GSN_SUCCESS == status)
   \   00000002   0x....             LDR.N    R0,??DataTable10_1
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000000A   0x.... 0x....      BL       GsnSysCtl_BatteryChkStop
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    128          		  return S2W_SUCCESS;
    129          	  else
    130          		  return S2W_FAILURE;
    131          }
    132          
    133          
    134          /**
    135           ******************************************************************************
    136           * @ingroup GsnAppBattCheck
    137           * @brief Handling the battery check set param.
    138           *    This function handle the battery check param set operation.
    139           *    This function modify the battery check frequeny stored in RTC memory.
    140           * @param data - IN  Battery check frequency
    141           * @retval S2W_SUCCESS.
    142          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    143          PUBLIC UINT8
    144          AppS2wHal_BattChkSet(UINT32 data)
    145          {
    146          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    147              pAppRtcLtchInfo->battchkinfo.chkFreq = data ;
   \                     AppS2wHal_BattChkSet:
   \   00000000   0x....             LDR.N    R1,??DataTable10  ;; 0x410102a4
   \   00000002   0x6008             STR      R0,[R1, #+0]
    148              return S2W_SUCCESS;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x4770             BX       LR               ;; return
    149          
    150          }
    151          
    152          /**
    153           ******************************************************************************
    154           * @ingroup GsnAppBattCheck
    155           * @brief Handling the battery check set param.
    156           *    This function handle the battery check param set operation.
    157           *    This function modify the battery check frequeny stored in RTC memory.
    158           * @param data - IN  Battery check frequency
    159           * @retval S2W_SUCCESS.
    160          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    161          PUBLIC UINT8
    162          AppS2wHal_BattChkLvlSet(UINT32 warningLvl, UINT8 warningFreq, UINT32 stdByLvl)
    163          {
    164          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    165          
    166              pAppRtcLtchInfo->battchkinfo.warningLvl = warningLvl ;
   \                     AppS2wHal_BattChkLvlSet:
   \   00000000   0x....             LDR.N    R3,??DataTable10_2  ;; 0x410102b0
   \   00000002   0x6018             STR      R0,[R3, #+0]
    167              pAppRtcLtchInfo->battchkinfo.warngFreq = warningFreq;
   \   00000004   0x7699             STRB     R1,[R3, #+26]
    168              pAppRtcLtchInfo->battchkinfo.stdByLvl = stdByLvl;
   \   00000006   0x605A             STR      R2,[R3, #+4]
    169              return S2W_SUCCESS;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4770             BX       LR               ;; return
    170          
    171          }
    172          
    173          /**
    174           ******************************************************************************
    175           * @ingroup GsnAppBattCheck
    176           * @brief Get the latest battery value stored in RTC memory.
    177           *    This function getting called from application to get the latest battery
    178           *    Value stored in RTC memory.
    179           * @param val   - IN pointer to user memory to which the battery value is getting
    180           *                   copied.
    181           * @retval S2W_SUCCESS or S2W_FAILURE.
    182          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    183          PUBLIC UINT8
    184          AppS2wHal_BattChkValueGet(UINT16* val)
    185          {
    186          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    187          	*val= pAppRtcLtchInfo->battchkinfo.latestVal;
   \                     AppS2wHal_BattChkValueGet:
   \   00000000   0x....             LDR.N    R1,??DataTable10_3  ;; 0x410102a8
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x8001             STRH     R1,[R0, #+0]
    188          	return S2W_SUCCESS;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
    189          }
    190          
    191          /**
    192           ******************************************************************************
    193           * @ingroup GsnAppBattCheck
    194           * @brief Handling the battery check param get.
    195           *    This function handle the battery check param get operation.
    196           *    This function return the battery check freqency to the caller.
    197           * @param data - IN  Address to which the Batt chk param store.
    198           * @retval S2W_SUCCESS.
    199          ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    200          PUBLIC UINT8
    201          AppS2wHal_BattChkParam(UINT32* data)
    202          {
    203          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    204              *data = pAppRtcLtchInfo->battchkinfo.chkFreq;
   \                     AppS2wHal_BattChkParam:
   \   00000000   0x....             LDR.N    R1,??DataTable10  ;; 0x410102a4
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x6001             STR      R1,[R0, #+0]
    205              return S2W_SUCCESS;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
    206          
    207          }
    208          
    209          
    210          /**
    211           ******************************************************************************
    212           * @ingroup GsnAppBattCheck
    213           * @brief Battery check condition.
    214           *      This function handle the battery check condition. It decides whether to
    215           *      trigger battery check or not, depending on the number of packet sent
    216           *      and freq of battery read parameters
    217           * @param ctx    - IN pointer to the context.
    218           * @param ctrl   - IN control.
    219           * @param pData  - IN user data.
    220           * @retval VOID.
    221          ******************************************************************************/

   \                                 In section .text, align 4, keep-with-next
    222          VOID
    223          AppS2wHal_BattChkIndCb(VOID* ctx,GSN_SYS_CTL_BATT_CHK_IND_T *battChkInd)
    224          {
    225          	UINT32 message;
    226          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    227          
    228          	pAppRtcLtchInfo->battchkinfo.latestVal = battChkInd->batteryMeasure;
   \                     AppS2wHal_BattChkIndCb:
   \   00000000   0x....             LDR.N    R0,??DataTable10_3  ;; 0x410102a8
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x6001             STR      R1,[R0, #+0]
    229          	if((0 != pAppRtcLtchInfo->battchkinfo.warningLvl) || (0 != pAppRtcLtchInfo->battchkinfo.stdByLvl))
   \   00000006   0x6881             LDR      R1,[R0, #+8]
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xBF04             ITT      EQ 
   \   0000000C   0x68C0             LDREQ    R0,[R0, #+12]
   \   0000000E   0x2800             CMPEQ    R0,#+0
   \   00000010   0xD005             BEQ.N    ??AppS2wHal_BattChkIndCb_0
    230            	{
    231          		message = APP_NOTIFICATION_BATT_INDICATION;
    232          		(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000012   0x....             LDR.N    R0,??DataTable10_1
   \   00000014   0x....             LDR.N    R2,??DataTable10_4
   \   00000016   0x6801             LDR      R1,[R0, #+0]
   \   00000018   0x6812             LDR      R2,[R2, #+0]
   \   0000001A   0x200D             MOVS     R0,#+13
   \   0000001C   0x4710             BX       R2
    233          	}	
    234          }
   \                     ??AppS2wHal_BattChkIndCb_0:
   \   0000001E   0x4770             BX       LR               ;; return
    235          /**
    236           *****************************************************************************
    237           * @ingroup GsnBattCheck
    238           * @brief Sends a low battery trap.
    239           *    This function sends a low battery trap.
    240           * @param BatteryValue
    241           * @retval VOID.
    242           * @note
    243           *    This function is called to sends a low battery trap.
    244           *****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    245          PRIVATE VOID
    246          AppS2wHal_BattChkDeadLevelProcess()
    247          {
   \                     AppS2wHal_BattChkDeadLevelProcess:
   \   00000000   0xB580             PUSH     {R7,LR}
    248          	ULONG64 duration;
    249          
    250              S2w_Printf("\r\nBattery Dead\r\n");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBattery Dead\\r\\n">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    251          	
    252              /* delay to make sure that betty dead message totally goes out*/
    253              GsnTaskSleep(100);
   \   0000000A   0x2064             MOVS     R0,#+100
   \   0000000C   0x.... 0x....      BL       GsnTaskSleep
    254          	/* request for long stand by */
    255          	duration = GSN_SOFT_TMR_MILLISECONDS_TO_TICKS(APP_BATT_CHK_LONG_STANDBY_WAKEUP_TIME);	
    256          	GsnPwrMgmt_EnterStby(duration);	
   \   00000010   0x....             LDR.N    R0,??DataTable10_5  ;; 0x4bc6a7ce
   \   00000012   0x....             LDR.N    R1,??DataTable10_6  ;; 0x418937
   \   00000014   0xE8BD 0x4004      POP      {R2,LR}
   \   00000018   0x.... 0x....      B.W      GsnPwrMgmt_EnterStby
    257          }
    258          

   \                                 In section .text, align 2, keep-with-next
    259          PRIVATE UINT16
    260          AppS2wHal_BattChkAvgValueGet(VOID)
    261          {
    262              UINT8 count;
    263              UINT32 avgBattValue;
    264          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();	
    265              APP_BATTCHK_INFO_T *pBattChkInfo = &pAppRtcLtchInfo->battchkinfo;
    266          	
    267              /*
    268              	    Find out the Average batt Value of the previous   APP_BATT_CHK_MVNG_AVG_SIZE    battery reading
    269          
    270              	*/
    271              avgBattValue = 0;	
   \                     AppS2wHal_BattChkAvgValueGet:
   \   00000000   0x2000             MOVS     R0,#+0
    272              for( count =0; count < APP_BATT_MAX_VALS_STORED; count++ )
   \   00000002   0x2100             MOVS     R1,#+0
   \                     ??AppS2wHal_BattChkAvgValueGet_0:
   \   00000004   0x....             LDR.N    R2,??DataTable10  ;; 0x410102a4
   \   00000006   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \   0000000A   0x6952             LDR      R2,[R2, #+20]
   \   0000000C   0xB122             CBZ.N    R2,??AppS2wHal_BattChkAvgValueGet_1
    273              {
    274                  if ( 0 == pBattChkInfo->prevReadings[ count ] )
    275                  {
    276                      break;
    277                  }
    278                  avgBattValue += pBattChkInfo->prevReadings[ count ];
   \   0000000E   0x1C49             ADDS     R1,R1,#+1
   \   00000010   0x1810             ADDS     R0,R2,R0
   \   00000012   0xB2C9             UXTB     R1,R1
   \   00000014   0x2904             CMP      R1,#+4
   \   00000016   0xDBF5             BLT.N    ??AppS2wHal_BattChkAvgValueGet_0
    279              }
    280              if( 0 != count )
   \                     ??AppS2wHal_BattChkAvgValueGet_1:
   \   00000018   0xB109             CBZ.N    R1,??AppS2wHal_BattChkAvgValueGet_2
    281              {
    282                  avgBattValue = avgBattValue/count;
   \   0000001A   0xFBB0 0xF0F1      UDIV     R0,R0,R1
    283              }
    284              return avgBattValue;
   \                     ??AppS2wHal_BattChkAvgValueGet_2:
   \   0000001E   0xB280             UXTH     R0,R0
   \   00000020   0x4770             BX       LR               ;; return
    285          }
    286          
    287          
    288          /**
    289           ******************************************************************************
    290           * @ingroup AppBattCheck
    291           * @brief Take action based on the  the Battery Value received.
    292           *    This function is called when application gets battery value indication
    293           *    from Wlan. This function takes appropriate decision depending on the
    294           *    battery vale received.
    295           * @param pAppBattChk - IN pointer to battery chk context.
    296           ******************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    297          PUBLIC VOID
    298          AppS2wHal_BattChkProcess(VOID)
    299          {
   \                     AppS2wHal_BattChkProcess:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    300          
    301          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
    302              APP_BATTCHK_INFO_T *pBattChkInfo = &pAppRtcLtchInfo->battchkinfo;
    303              UINT32 avgBattValue = 0;
    304              UINT32 currentBattVal;
    305              UINT32 maxChangeLimit = APP_BATT_CHK_MAX_CHNG_LIMIT;
    306              currentBattVal = pBattChkInfo->latestVal;
   \   00000002   0x....             LDR.N    R4,??DataTable10_3  ;; 0x410102a8
   \   00000004   0x6825             LDR      R5,[R4, #+0]
    307          	
    308              if ( currentBattVal > 3700 ) /**< Value cannot be more than 3.7Volt */
   \   00000006   0xF640 0x6075      MOVW     R0,#+3701
   \   0000000A   0x4285             CMP      R5,R0
   \   0000000C   0xD24C             BCS.N    ??AppS2wHal_BattChkProcess_0
    309              {
    310                  goto AppBattChk_ProcessExit;
    311              }
    312          
    313              /*Find out the Average batt Value of the previous  battery reading*/
    314              avgBattValue = AppS2wHal_BattChkAvgValueGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_BattChkAvgValueGet
    315              if ( 0 != avgBattValue )
   \   00000012   0xB148             CBZ.N    R0,??AppS2wHal_BattChkProcess_1
    316              {
    317                  /*
    318                  		If the new reading is a sudden dip or a sudden rise  apply correction
    319          		        before storing in to rtc
    320          	       */
    321                  if ( currentBattVal > ( avgBattValue + maxChangeLimit ))
   \   00000014   0xF100 0x01C8      ADD      R1,R0,#+200
   \   00000018   0x42A9             CMP      R1,R5
   \   0000001A   0xBF38             IT       CC 
   \   0000001C   0x460D             MOVCC    R5,R1
    322                  {
    323                      currentBattVal = ( avgBattValue + maxChangeLimit);
   \   0000001E   0xD303             BCC.N    ??AppS2wHal_BattChkProcess_1
    324                  }
    325                  else if( currentBattVal < ( avgBattValue - maxChangeLimit ))
   \   00000020   0x38C8             SUBS     R0,R0,#+200
   \   00000022   0x4285             CMP      R5,R0
   \   00000024   0xBF38             IT       CC 
   \   00000026   0x4605             MOVCC    R5,R0
    326                  {
    327                      currentBattVal = ( avgBattValue - maxChangeLimit);
    328                  }
    329              }
    330          	
    331              /* Store the current Batt Value in the RTC Array*/
    332              pBattChkInfo->prevReadings[pBattChkInfo->indx] = currentBattVal;
   \                     ??AppS2wHal_BattChkProcess_1:
   \   00000028   0x....             LDR.N    R6,??DataTable10_7  ;; 0x410102c8
   \   0000002A   0x....             LDR.N    R1,??DataTable10  ;; 0x410102a4
   \   0000002C   0x7830             LDRB     R0,[R6, #+0]
   \   0000002E   0xEB01 0x0080      ADD      R0,R1,R0, LSL #+2
   \   00000032   0x6145             STR      R5,[R0, #+20]
    333              pBattChkInfo->indx++;
   \   00000034   0x7830             LDRB     R0,[R6, #+0]
   \   00000036   0x1C40             ADDS     R0,R0,#+1
   \   00000038   0x7030             STRB     R0,[R6, #+0]
    334          	
    335              if (APP_BATT_MAX_VALS_STORED == pBattChkInfo->indx)
   \   0000003A   0xB2C0             UXTB     R0,R0
   \   0000003C   0x2804             CMP      R0,#+4
   \   0000003E   0xBF04             ITT      EQ 
   \   00000040   0x2000             MOVEQ    R0,#+0
   \   00000042   0x7030             STRBEQ   R0,[R6, #+0]
    336              {
    337                  pBattChkInfo->indx = 0;
    338              }
    339          
    340              /*Find out the Average batt Value */
    341              avgBattValue = AppS2wHal_BattChkAvgValueGet();
   \   00000044   0x.... 0x....      BL       AppS2wHal_BattChkAvgValueGet
    342          
    343          	    switch(pBattChkInfo->battState)
   \   00000048   0x78F1             LDRB     R1,[R6, #+3]
   \   0000004A   0xB119             CBZ.N    R1,??AppS2wHal_BattChkProcess_2
   \   0000004C   0x2902             CMP      R1,#+2
   \   0000004E   0xD009             BEQ.N    ??AppS2wHal_BattChkProcess_3
   \   00000050   0xD22A             BCS.N    ??AppS2wHal_BattChkProcess_0
    344              {
    345                  case APP_BATT_CHK_BATT_STATE_DEAD:
    346                      /* 
    347                      			battery is bellow stand by level during previous measurements,
    348          			       go to long standby*/
    349                      AppS2wHal_BattChkDeadLevelProcess();
   \   00000052   0xE014             B.N      ??AppS2wHal_BattChkProcess_4
    350                      break;
    351                  case APP_BATT_CHK_BATT_STATE_GOOD:
    352                      if(avgBattValue < pBattChkInfo->stdByLvl)
   \                     ??AppS2wHal_BattChkProcess_2:
   \   00000054   0x68E1             LDR      R1,[R4, #+12]
   \   00000056   0x4288             CMP      R0,R1
   \   00000058   0xD30F             BCC.N    ??AppS2wHal_BattChkProcess_5
    353                      {
    354                          pBattChkInfo->battState = APP_BATT_CHK_BATT_STATE_DEAD;
    355                          AppS2wHal_BattChkDeadLevelProcess();
    356                          break;/* this really will not be executed */
    357                      }
    358                      else if (avgBattValue < pBattChkInfo->warningLvl)
   \   0000005A   0x68A1             LDR      R1,[R4, #+8]
   \   0000005C   0x4288             CMP      R0,R1
   \   0000005E   0xD223             BCS.N    ??AppS2wHal_BattChkProcess_0
    359                      {
    360                          pBattChkInfo->battState = APP_BATT_CHK_BATT_STATE_LOW;
   \   00000060   0x2102             MOVS     R1,#+2
   \   00000062   0x70F1             STRB     R1,[R6, #+3]
    361                          /* intentional follow through. break is in else condition */
    362                      }
    363                      else
    364                      {
    365                          /* Battery level is OK. no action taken */
    366                          break;
    367                      }
    368                  case APP_BATT_CHK_BATT_STATE_LOW:
    369                      /*Increment the Battery val warning counter*/
    370                      pBattChkInfo->warngsCnt++;
   \                     ??AppS2wHal_BattChkProcess_3:
   \   00000064   0x7871             LDRB     R1,[R6, #+1]
   \   00000066   0x1C49             ADDS     R1,R1,#+1
   \   00000068   0x7071             STRB     R1,[R6, #+1]
    371                      if(pBattChkInfo->lowestAvgVal > avgBattValue)
   \   0000006A   0x6861             LDR      R1,[R4, #+4]
   \   0000006C   0x4288             CMP      R0,R1
   \   0000006E   0xBF98             IT       LS 
   \   00000070   0x4601             MOVLS    R1,R0
   \   00000072   0x6061             STR      R1,[R4, #+4]
    372                              pBattChkInfo->lowestAvgVal = avgBattValue;
    373          
    374                      if (avgBattValue < pBattChkInfo->stdByLvl)
   \   00000074   0x68E1             LDR      R1,[R4, #+12]
   \   00000076   0x4288             CMP      R0,R1
   \   00000078   0xD204             BCS.N    ??AppS2wHal_BattChkProcess_6
    375                      {
    376                          pBattChkInfo->battState = APP_BATT_CHK_BATT_STATE_DEAD;
   \                     ??AppS2wHal_BattChkProcess_5:
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x70F0             STRB     R0,[R6, #+3]
    377                          AppS2wHal_BattChkDeadLevelProcess();
   \                     ??AppS2wHal_BattChkProcess_4:
   \   0000007E   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000082   0x....             B.N      AppS2wHal_BattChkDeadLevelProcess
    378          
    379                      }
    380                      else if (avgBattValue < pBattChkInfo->warningLvl)
   \                     ??AppS2wHal_BattChkProcess_6:
   \   00000084   0x68A1             LDR      R1,[R4, #+8]
   \   00000086   0x4288             CMP      R0,R1
   \   00000088   0xD20B             BCS.N    ??AppS2wHal_BattChkProcess_7
    381                      {
    382          
    383                          if ( pBattChkInfo->warngsCnt >=  pBattChkInfo->warngFreq )
   \   0000008A   0x7870             LDRB     R0,[R6, #+1]
   \   0000008C   0x78B1             LDRB     R1,[R6, #+2]
   \   0000008E   0x4288             CMP      R0,R1
   \   00000090   0xD30A             BCC.N    ??AppS2wHal_BattChkProcess_0
    384                          {
    385                              /*Reset the Battery check counter*/
    386                              pBattChkInfo->warngsCnt = 0;
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x7070             STRB     R0,[R6, #+1]
    387                              /* indicate to host about low battery */
    388                              S2w_Printf("\r\nBattery Low\r\n");
   \   00000096   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   0000009A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBattery Low\\r\\n">`
   \   0000009E   0x.... 0x....      B.W      S2w_Printf
    389                          }
    390                      }
    391                      else
    392                      {
    393                          /* dip bellow warning level was temporary and now it is in
    394                          GOOD condition */
    395                          pBattChkInfo->battState = APP_BATT_CHK_BATT_STATE_GOOD;
   \                     ??AppS2wHal_BattChkProcess_7:
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0x70F0             STRB     R0,[R6, #+3]
    396                          pBattChkInfo->warngsCnt = 0;
   \   000000A6   0x7070             STRB     R0,[R6, #+1]
    397                      }
    398          
    399                      break;
    400          
    401                  default:
    402                      break;
    403              }
    404          
    405          
    406          AppBattChk_ProcessExit:		
    407              return;
   \                     ??AppS2wHal_BattChkProcess_0:
   \   000000A8   0xBD70             POP      {R4-R6,PC}       ;; return
    408          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x410102A4         DC32     0x410102a4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x410102B0         DC32     0x410102b0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x410102A8         DC32     0x410102a8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x4BC6A7CE         DC32     0x4bc6a7ce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x00418937         DC32     0x418937

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x410102C8         DC32     0x410102c8

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBattery Dead\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Battery Dead\015\012"
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x44 0x65    
   \              0x61 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBattery Low\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Battery Low\015\012"
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x4C 0x6F    
   \              0x77 0x0D    
   \              0x0A 0x00    
    409          
    410          
    411          #ifdef IOT_APP_ENABLE
    412          
    413          void AppS2wHal_IotBattChkInit(UINT32 data)
    414          {
    415          
    416              BOOL sarAdcPresent;
    417              GSN_BATTCHK_USES_OBJS_T battChkUsesObjs;
    418              GSN_BATTCHK_USES_INFO_T battChkUsesInfo;
    419          
    420              appRtcMemData.battchkinfo.latestVal =0;
    421              appRtcMemData.battchkinfo.chkFreq = data ;
    422          
    423          #ifdef GS1010
    424              {
    425                  sarAdcPresent = FALSE;
    426              }
    427          #else
    428              {
    429                  sarAdcPresent = TRUE;
    430              }
    431          #endif
    432          
    433              battChkUsesObjs.pWifCtx = &appMainTaskCtxt->wifCtx;
    434              battChkUsesObjs.pWlanSys = &appMainTaskCtxt->wlanSys;
    435          
    436              battChkUsesInfo.notifyCb = AppS2wHal_BattChkIndication;
    437              battChkUsesInfo.pNotifyCtx = &appMainTaskCtxt->battChk;
    438              battChkUsesInfo.sarAdcPresent = sarAdcPresent;
    439          
    440              GsnBattChk_Init(&appMainTaskCtxt->battChk.gsnBattChk, NULL,
    441                              &battChkUsesObjs, NULL, &battChkUsesInfo);
    442          
    443          
    444          }
    445          
    446          
    447          
    448          UINT32  
    449          AppS2wHal_IotBattChkValueGet(void)
    450          {
    451             UINT32 battValue=0;
    452          
    453             GsnBattChk_LevelGet(&appMainTaskCtxt->battChk.gsnBattChk,&battValue);
    454          
    455             return battValue;
    456          }
    457          
    458          
    459          /**
    460           ******************************************************************************
    461           * @ingroup app_iot
    462           * @brief Register the battery check/temp monitor with S2w application .
    463           *    This function assign the IOT context
    464           * @param notifier - IN Application notification function.
    465           * @param context  - IN Application context.
    466           * @retval VOID.
    467           * Note:
    468           *          GsnDieTemp_Get() requires this initialisation
    469          ******************************************************************************/
    470          PUBLIC VOID
    471          AppIot_Register( GSN_NOTIFICATION_FUNC_T notifier,  VOID *context)
    472          {
    473           appMainTaskCtxt = context;
    474          }
    475          
    476          PUBLIC GSN_STATUS
    477          AppIot_DieTemp_Get(INT32 *pTemp)
    478          {
    479             GSN_STATUS returnValue=GSN_SUCCESS;
    480             GSN_WIF_SYS_BOOT_REASON_T bootReason=GSN_WIF_SYS_BOOT_FIRST_BOOT;
    481          
    482          returnValue= GsnDieTemp_Get( &appMainTaskCtxt->wifCtx, pTemp,
    483                                       bootReason );
    484          
    485          return returnValue;
    486          
    487          }
    488          
    489          #endif
    490          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AppS2wHal_BattChkAvgValueGet
       8   AppS2wHal_BattChkDeadLevelProcess
         0   -> GsnPwrMgmt_EnterStby
         8   -> GsnTaskSleep
         8   -> S2w_Printf
       0   AppS2wHal_BattChkIndCb
         0   -- Indirect call
       0   AppS2wHal_BattChkLvlSet
       0   AppS2wHal_BattChkParam
      16   AppS2wHal_BattChkProcess
        16   -> AppS2wHal_BattChkAvgValueGet
         0   -> AppS2wHal_BattChkDeadLevelProcess
         0   -> S2w_Printf
       0   AppS2wHal_BattChkSet
       8   AppS2wHal_BattChkStart
         8   -> GsnSysCtl_BatteryChkStart
       8   AppS2wHal_BattChkStop
         8   -> GsnSysCtl_BatteryChkStop
       0   AppS2wHal_BattChkValueGet


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      20  ?<Constant "\r\nBattery Dead\r\n">
      16  ?<Constant "\r\nBattery Low\r\n">
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       6  ?Subroutine0
      34  AppS2wHal_BattChkAvgValueGet
      28  AppS2wHal_BattChkDeadLevelProcess
      32  AppS2wHal_BattChkIndCb
      12  AppS2wHal_BattChkLvlSet
      10  AppS2wHal_BattChkParam
     170  AppS2wHal_BattChkProcess
       8  AppS2wHal_BattChkSet
      30  AppS2wHal_BattChkStart
      14  AppS2wHal_BattChkStop
      10  AppS2wHal_BattChkValueGet

 
 422 bytes in section .text
 
 422 bytes of CODE memory

Errors: none
Warnings: none
