###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      30/Oct/2015  09:57:58 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\clk_tune\app_clk_tune.c                   #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\clk_tune\app_clk_tune.c -D                #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -Ohz                  #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\app_clk_tune.lst             #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\app_clk_tune.o                #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\clk_tune\app_clk_tune.c
      1          #include "gsn_includes.h"
      2          #include "drivers/clk_ctl/gsn_clk_ctl.h"
      3          #include "clk_tune/app_clk_tune.h"
      4          #include "main/app_main_ctx.h"
      5          

   \                                 In section .data, align 4
      6          LP_XTAL_DELTA_T lpXtalDelta[10] = 
   \                     lpXtalDelta:
   \   00000000   0x00000055         DC32 85
   \   00000004   0x80 0x00          DC8 128, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0xFFFFF667         DC32 -2457, 70
   \              0x00000046   
   \   00000010   0xA4 0x00          DC8 164, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0xFFFFF045         DC32 -4027, 55
   \              0x00000037   
   \   0000001C   0xDF 0x00          DC8 223, 0, 0, 0
   \              0x00 0x00    
   \   00000020   0xFFFFF512         DC32 -2798, 40
   \              0x00000028   
   \   00000028   0x08 0x00          DC8 8, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000000         DC32 0, 25
   \              0x00000019   
   \   00000034   0x08 0x00          DC8 8, 0, 0, 0
   \              0x00 0x00    
   \   00000038   0x00000333         DC32 819, 15
   \              0x0000000F   
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000A22         DC32 2594, 0
   \              0x00000000   
   \   0000004C   0xDA 0x00          DC8 218, 0, 0, 0
   \              0x00 0x00    
   \   00000050   0x00000A66         DC32 2662, -15
   \              0xFFFFFFF1   
   \   00000058   0xB3 0x00          DC8 179, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x00000B77         DC32 2935, -30
   \              0xFFFFFFE2   
   \   00000064   0x88 0x00          DC8 136, 0, 0, 0
   \              0x00 0x00    
   \   00000068   0x00000333         DC32 819, -40
   \              0xFFFFFFD8   
   \   00000070   0x80 0x00          DC8 128, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000000         DC32 0
      7          {
      8              { 85, 0x80, -2457},
      9              { 70, 0xA4, -4027},
     10              { 55, 0xDF, -2798},
     11              { 40, 0x08, 0},
     12              { 25, 0x08, 819},
     13              { 15, 0x00, 2594},
     14              { 0 , 0xDA, 2662},
     15              {-15, 0xB3, 2935},
     16              {-30, 0x88, 819},
     17              {-40, 0x80, 0}
     18          };
     19          

   \                                 In section .data, align 4
     20          LP_RC_DELTA_T lpRcDelta[10] = 
   \                     lpRcDelta:
   \   00000000   0x00000055         DC32 85
   \   00000004   0xFF 0x00          DC8 255, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0xFFFFFFBC         DC32 -68, 70
   \              0x00000046   
   \   00000010   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0, 55
   \              0x00000037   
   \   0000001C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000020   0x00000000         DC32 0, 40
   \              0x00000028   
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000000         DC32 0, 25
   \              0x00000019   
   \   00000034   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000038   0x00000000         DC32 0, 15
   \              0x0000000F   
   \   00000040   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0, 0
   \              0x00000000   
   \   0000004C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000050   0x00000088         DC32 136, -15
   \              0xFFFFFFF1   
   \   00000058   0xFE 0x00          DC8 254, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x00000044         DC32 68, -30
   \              0xFFFFFFE2   
   \   00000064   0xFD 0x00          DC8 253, 0, 0, 0
   \              0x00 0x00    
   \   00000068   0x000000CC         DC32 204, -40
   \              0xFFFFFFD8   
   \   00000070   0xFB 0x00          DC8 251, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000000         DC32 0
     21          {
     22              {85, -1, -68},
     23              {70, 0, 0},
     24              {55, 0, 0},
     25              {40, 0, 0},
     26              {25, 0, 0},
     27              {15, 0, 0},
     28              {0, 0, 136},
     29              {-15, (INT8)-2, 68},
     30              {-30, (INT8)-3, 204},
     31              {-40, (INT8)-5, 0}
     32          };
     33          

   \                                 In section .data, align 4
     34          HS_XTAL_DELTA_T hsXtalDelta[11] = 
   \                     hsXtalDelta:
   \   00000000   0xFFFFFFD8         DC32 -40
   \   00000004   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000008   0xFFFFFB34         DC32 -1228, -35
   \              0xFFFFFFDD   
   \   00000010   0x26 0x00          DC8 38, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0xFFFFFD9A         DC32 -614, -25
   \              0xFFFFFFE7   
   \   0000001C   0x2C 0x00          DC8 44, 0, 0, 0
   \              0x00 0x00    
   \   00000020   0x00000199         DC32 409, -15
   \              0xFFFFFFF1   
   \   00000028   0x2A 0x00          DC8 42, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000266         DC32 614, -5
   \              0xFFFFFFFB   
   \   00000034   0x24 0x00          DC8 36, 0, 0, 0
   \              0x00 0x00    
   \   00000038   0x000004CC         DC32 1228, 5
   \              0x00000005   
   \   00000040   0x18 0x00          DC8 24, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x000004CC         DC32 1228, 15
   \              0x0000000F   
   \   0000004C   0x0C 0x00          DC8 12, 0, 0, 0
   \              0x00 0x00    
   \   00000050   0x00000466         DC32 1126, 25
   \              0x00000019   
   \   00000058   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x00000399         DC32 921, 35
   \              0x00000023   
   \   00000064   0xF8 0x00          DC8 248, 0, 0, 0
   \              0x00 0x00    
   \   00000068   0x00000266         DC32 614, 45
   \              0x0000002D   
   \   00000070   0xF2 0x00          DC8 242, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000066         DC32 102, 55
   \              0x00000037   
   \   0000007C   0xF1 0x00          DC8 241, 0, 0, 0
   \              0x00 0x00    
   \   00000080   0x00000000         DC32 0
     35          {
     36              {-40, 0x20, -1228},
     37              {-35, 0x26, -614},
     38              {-25, 0x2c, 409},
     39              {-15, 0x2a, 614},
     40              {-5, 0x24, 1228},
     41              {5, 0x18, 1228},
     42              {15, 0x0c,1126},
     43              {25, 0x01, 921},
     44              {35, 0xf8, 614},
     45              {45, 0xf2, 102},
     46              {55, 0xf1, 0}
     47          };
     48          

   \                                 In section .data, align 4
     49          HS_RC_DELTA_T hsRcDlta[6] = 
   \                     hsRcDlta:
   \   00000000   0x00000055         DC32 85
   \   00000004   0xFFFB             DC16 -5
   \   00000006   0x00 0x00          DC8 0, 0
   \   00000008   0x00000022         DC32 34, 55
   \              0x00000037   
   \   00000010   0xFFFA             DC16 -6
   \   00000012   0x00 0x00          DC8 0, 0
   \   00000014   0xFFFFFF34         DC32 -204, 25
   \              0x00000019   
   \   0000001C   0x0000             DC16 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \   00000020   0xFFFFFE3E         DC32 -450, 0
   \              0x00000000   
   \   00000028   0x000B             DC16 11
   \   0000002A   0x00 0x00          DC8 0, 0
   \   0000002C   0xFFFFFD71         DC32 -655, -25
   \              0xFFFFFFE7   
   \   00000034   0x001B             DC16 27
   \   00000036   0x00 0x00          DC8 0, 0
   \   00000038   0xFFFFFC00         DC32 -1024, -40
   \              0xFFFFFFD8   
   \   00000040   0x002A             DC16 42
   \   00000042   0x00 0x00          DC8 0, 0
   \   00000044   0x00000000         DC32 0
     50          {
     51          	{85, 0xfffb, 34},
     52          	{55, 0xfffa, -204},
     53          	{25, 0x0, -450},
     54          	{0, 0x00b, -655},
     55          	{-25, 0x01b, -1024},
     56          	{-40, 0x02a, 0}
     57          };
     58          
     59          extern UINT32 app_adc_data[];
     60          extern APP_MAIN_CTX_T appCtx;
     61          extern GSN_CLK_CTL_CM3_CLK_CFG_T cm3ClkCfg;
     62          

   \                                 In section .text, align 2, keep-with-next
     63          UINT32 App_AdcOpen()
     64          {
   \                     App_AdcOpen:
   \   00000000   0xB580             PUSH     {R7,LR}
     65              GSN_CLK_CTL_CTX_T *pClkCtlCtx = GsnClkCtl_CtxGet();
   \   00000002   0x.... 0x....      BL       GsnClkCtl_CtxGet
     66          
     67              GsnClkCtl_ClkSrcEnable(pClkCtlCtx, GSN_CLK_CTL_CLK_SRC_HS_XTAL);
   \   00000006   0x2102             MOVS     R1,#+2
   \   00000008   0x.... 0x....      BL       GsnClkCtl_ClkSrcEnable
     68          
     69              CLKCTL_ADC_CLK_SEL_VAL_SET(CLKCTL,1);
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400700e0
   \   00000010   0x6841             LDR      R1,[R0, #+4]
   \   00000012   0x0889             LSRS     R1,R1,#+2
   \   00000014   0x0089             LSLS     R1,R1,#+2
   \   00000016   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000001A   0x6041             STR      R1,[R0, #+4]
   \   0000001C   0xF44F 0x6280      MOV      R2,#+1024
     70              CLKCTL_ADC_STEP_SET(CLKCTL,0x333333);
   \   00000020   0x.... 0x....      LDR.W    R1,??DataTable10_1  ;; 0x333333
   \   00000024   0x60C1             STR      R1,[R0, #+12]
     71              CLKCTL_GTMU_NCO_EN_SET(CLKCTL,0x01);
   \   00000026   0x2101             MOVS     R1,#+1
   \   00000028   0x6101             STR      R1,[R0, #+16]
     72              CLKCTL_ADC_NCO_EN_SET(CLKCTL, NCO_EN);
   \   0000002A   0x6001             STR      R1,[R0, #+0]
     73          
     74              for(UINT8 ik=0;ik<250;ik++);
     75          
     76              AADC_IRQ_FIFO_THRESH_SET(COMMON_AADC,1);
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable10_2  ;; 0x400b0004
   \   00000030   0x6541             STR      R1,[R0, #+84]
     77          
     78              AADC_PCYCLES_SET(COMMON_AADC,200);
   \   00000032   0x21C8             MOVS     R1,#+200
   \   00000034   0x60C1             STR      R1,[R0, #+12]
     79          
     80              AADC_SCYCLES_SET(COMMON_AADC,1);
   \   00000036   0x2101             MOVS     R1,#+1
   \   00000038   0x6101             STR      R1,[R0, #+16]
     81          
     82              *(int *)(0x40140404) = (1 << 10);
   \   0000003A   0x.... 0x....      LDR.W    R1,??DataTable10_3  ;; 0x40140404
   \   0000003E   0x600A             STR      R2,[R1, #+0]
     83              
     84              AADC_PD_POL_SET(COMMON_AADC);
   \   00000040   0x6801             LDR      R1,[R0, #+0]
   \   00000042   0xF041 0x0140      ORR      R1,R1,#0x40
   \   00000046   0x6001             STR      R1,[R0, #+0]
     85              AADC_ADC_EN_SET(COMMON_AADC);
   \   00000048   0x6801             LDR      R1,[R0, #+0]
   \   0000004A   0xF041 0x0101      ORR      R1,R1,#0x1
   \   0000004E   0x....             B.N      ?Subroutine0
     86              return 0;
     87          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x6001             STR      R1,[R0, #+0]
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0xBD02             POP      {R1,PC}          ;; return
     88          
     89          
     90          

   \                                 In section .text, align 2, keep-with-next
     91          UINT32 App_AdcClose()
     92          {
   \                     App_AdcClose:
   \   00000000   0xB580             PUSH     {R7,LR}
     93              GSN_CLK_CTL_CTX_T *pClkCtlCtx = GsnClkCtl_CtxGet();
   \   00000002   0x.... 0x....      BL       GsnClkCtl_CtxGet
     94          
     95              AADC_ADC_EN_CLEAR(COMMON_AADC);
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable10_2  ;; 0x400b0004
   \   0000000A   0x680A             LDR      R2,[R1, #+0]
   \   0000000C   0x0852             LSRS     R2,R2,#+1
   \   0000000E   0x0052             LSLS     R2,R2,#+1
   \   00000010   0x600A             STR      R2,[R1, #+0]
     96              GsnClkCtl_ClkSrcDisable(pClkCtlCtx, GSN_CLK_CTL_CLK_SRC_HS_XTAL);
   \   00000012   0x2102             MOVS     R1,#+2
   \   00000014   0x.... 0x....      BL       GsnClkCtl_ClkSrcDisable
     97              CLKCTL_ADC_CLK_SEL_VAL_SET(CLKCTL,0);
   \   00000018   0x.... 0x....      LDR.W    R0,??DataTable10  ;; 0x400700e0
   \   0000001C   0x6841             LDR      R1,[R0, #+4]
   \   0000001E   0x0889             LSRS     R1,R1,#+2
   \   00000020   0x0089             LSLS     R1,R1,#+2
   \   00000022   0x6041             STR      R1,[R0, #+4]
     98              CLKCTL_GTMU_NCO_EN_SET(CLKCTL,0);
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0x6101             STR      R1,[R0, #+16]
     99              CLKCTL_ADC_NCO_EN_SET(CLKCTL, 0);
   \   00000028                      REQUIRE ?Subroutine0
   \   00000028                      ;; // Fall through to label ?Subroutine0
    100              return 0;
    101          }
    102          

   \                                 In section .text, align 2, keep-with-next
    103          UINT32
    104          Adc_Value_Get(UINT8 channel, BOOL avg)
    105          {
   \                     Adc_Value_Get:
   \   00000000   0xB510             PUSH     {R4,LR}
    106              UINT32 data=0, i;
   \   00000002   0x2200             MOVS     R2,#+0
    107              
    108              if(avg)
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable10_4  ;; 0x400b0008
   \   00000008   0xB171             CBZ.N    R1,??Adc_Value_Get_0
    109              {
    110                  for(i = 0; i < 8; i++)
   \   0000000A   0x2108             MOVS     R1,#+8
    111                  {
    112                      AADC_CHSEL_SET( COMMON_AADC, channel );
   \                     ??Adc_Value_Get_1:
   \   0000000C   0x6018             STR      R0,[R3, #+0]
    113                      AADC_SINGLE_SET( COMMON_AADC,1 );
   \   0000000E   0x2401             MOVS     R4,#+1
   \   00000010   0x619C             STR      R4,[R3, #+24]
    114                      while( AADC_SINGLE_GET(COMMON_AADC) == 1);
   \                     ??Adc_Value_Get_2:
   \   00000012   0x699C             LDR      R4,[R3, #+24]
   \   00000014   0x2C01             CMP      R4,#+1
   \   00000016   0xD0FC             BEQ.N    ??Adc_Value_Get_2
    115                      data += AADC_DATA_GET(COMMON_AADC) & 0xFFF;
   \   00000018   0x6C9C             LDR      R4,[R3, #+72]
   \   0000001A   0x0524             LSLS     R4,R4,#+20
   \   0000001C   0xEB12 0x5214      ADDS     R2,R2,R4, LSR #+20
    116                  }
   \   00000020   0x1E49             SUBS     R1,R1,#+1
   \   00000022   0xD1F3             BNE.N    ??Adc_Value_Get_1
    117                  return data/8;
   \   00000024   0x08D0             LSRS     R0,R2,#+3
   \   00000026   0xBD10             POP      {R4,PC}
    118              }
    119              else
    120              {
    121                  AADC_CHSEL_SET( COMMON_AADC, channel );
   \                     ??Adc_Value_Get_0:
   \   00000028   0x6018             STR      R0,[R3, #+0]
    122                  AADC_SINGLE_SET( COMMON_AADC,1 );
   \   0000002A   0x2001             MOVS     R0,#+1
   \   0000002C   0x6198             STR      R0,[R3, #+24]
    123                  while( AADC_SINGLE_GET(COMMON_AADC) == 1);
   \                     ??Adc_Value_Get_3:
   \   0000002E   0x6998             LDR      R0,[R3, #+24]
   \   00000030   0x2801             CMP      R0,#+1
   \   00000032   0xD0FC             BEQ.N    ??Adc_Value_Get_3
    124                  data = AADC_DATA_GET(COMMON_AADC) & 0xFFF;
   \   00000034   0x6C98             LDR      R0,[R3, #+72]
    125                  return data;
   \   00000036   0x0500             LSLS     R0,R0,#+20
   \   00000038   0x0D00             LSRS     R0,R0,#+20
   \   0000003A   0xBD10             POP      {R4,PC}          ;; return
    126              }
    127          }
    128          
    129          

   \                                 In section .text, align 2, keep-with-next
    130          INT32
    131          App_TemperatureGet()
    132          {
   \                     App_TemperatureGet:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0A3             SUB      SP,SP,#+140
    133              UINT8 data[8] ={0};
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xC006             STM      R0!,{R1,R2}
    134              UINT16 dataLen=0;
   \   0000000E   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    135              INT32 Do_ref= 0, slope = 0x1c;    //Default values
   \   00000012   0x4688             MOV      R8,R1
    136              INT32 TsOut, Tref = 25, delta, Tm;
    137              UINT32 nCoarse, nFine, trim;
    138              INT32 buf[32], i, j, buf_temp, sum = 0;
   \   00000014   0x460E             MOV      R6,R1
   \   00000016   0x271C             MOVS     R7,#+28
    139              if(GSN_SUCCESS == GsnOtpMm_Read(GSN_OTP_MM_ID_ATE_CAL_DATA,GSN_OTP_MM_VER_UNKNOWN,
    140                                            &dataLen, data))
   \   00000018   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_6:
   \   0000001C   0xB990             CBNZ.N   R0,??App_TemperatureGet_0
    141              {
    142                  ULONG64 otpData = *(ULONG64 *)data;
   \   0000001E   0xE9DD 0x4501      LDRD     R4,R5,[SP, #+4]
    143                  Do_ref = (otpData & APP_PTAT_SAR_ADC_SET0_MASK) >> APP_PTAT_SAR_ADC_SET0_BITOFFSET;
    144                  Do_ref = Do_ref << 22;
    145                  Do_ref = Do_ref >> 22;
   \   00000022   0x05A8             LSLS     R0,R5,#+22
   \   00000024   0xEA4F 0x58A0      ASR      R8,R0,#+22
    146                  slope = (otpData & APP_PTAT_SAR_SLOPE_MASK) >> APP_PTAT_SAR_SLOPE_BITOFFSET;
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x4629             MOV      R1,R5
   \   0000002C   0x222A             MOVS     R2,#+42
   \   0000002E   0x.... 0x....      BL       __aeabi_llsr
    147                  trim = (otpData & APP_ATE_CAL_DX_REF_TRIM_MASK) >> APP_ATE_CAL_DX_REF_TRIM_BIT_OFFSET;
   \   00000032   0xF004 0x090F      AND      R9,R4,#0xF
    148                  nFine = (otpData & APP_ATE_CAL_N_FINE_MASK) >> APP_ATE_CAL_N_FINE_BIT_OFFSET;
   \   00000036   0xF3C4 0x2A03      UBFX     R10,R4,#+8,#+4
    149                  nCoarse = (otpData & APP_ATE_CAL_N_COURSE_MASK) >> APP_ATE_CAL_N_COURSE_BIT_OFFSET;
   \   0000003A   0x0424             LSLS     R4,R4,#+16
   \   0000003C   0xF000 0x073F      AND      R7,R0,#0x3F
   \   00000040   0xEA4F 0x7B14      LSR      R11,R4,#+28
    150                  //S2w_Printf("Do_ref: %d, slope: %d, nFine %d, nCoarse %d, Trim %d\n\r", Do_ref, slope, nFine, nCoarse, trim);
    151              } 
    152          
    153              RTC_SX_EN_BIAS_F_SET(RTC);
   \                     ??App_TemperatureGet_0:
   \   00000044   0x....             LDR.N    R4,??DataTable10_5  ;; 0x4100035c
   \   00000046   0x....             LDR.N    R5,??DataTable10_6  ;; 0x40070000
   \   00000048   0x6820             LDR      R0,[R4, #+0]
   \   0000004A   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000004E   0x6020             STR      R0,[R4, #+0]
   \   00000050   0xF009 0x020F      AND      R2,R9,#0xF
    154              RTC_SX_EN_U_LDO_F_SET (RTC);
   \   00000054   0x6860             LDR      R0,[R4, #+4]
   \   00000056   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000005A   0x6060             STR      R0,[R4, #+4]
    155              RTC_SX_EN_TS_F_SET(RTC);
   \   0000005C   0x6C20             LDR      R0,[R4, #+64]
   \   0000005E   0xF040 0x0001      ORR      R0,R0,#0x1
   \   00000062   0x6420             STR      R0,[R4, #+64]
    156          
    157              AADC_ADCEN_TRIM_SET( COMMON_AADC );
   \   00000064   0x....             LDR.N    R0,??DataTable10_2  ;; 0x400b0004
   \   00000066   0x6801             LDR      R1,[R0, #+0]
   \   00000068   0xF041 0x0102      ORR      R1,R1,#0x2
   \   0000006C   0x6001             STR      R1,[R0, #+0]
    158              AADC_ADC_REFTRIM_SET( COMMON_AADC, trim );
   \   0000006E   0x6881             LDR      R1,[R0, #+8]
   \   00000070   0x0909             LSRS     R1,R1,#+4
   \   00000072   0xEA42 0x1101      ORR      R1,R2,R1, LSL #+4
   \   00000076   0x6081             STR      R1,[R0, #+8]
    159              CLKCTL_ACM3_BUS_FORCE_SET(CLKCTL);
   \   00000078   0x6828             LDR      R0,[R5, #+0]
   \   0000007A   0xF040 0x0010      ORR      R0,R0,#0x10
   \   0000007E   0x6028             STR      R0,[R5, #+0]
    160              App_AdcOpen();
   \   00000080   0x.... 0x....      BL       App_AdcOpen
    161          	
    162          	RTC_SX_TS_GAIN_SET(RTC,0);
   \   00000084   0x60E6             STR      R6,[R4, #+12]
    163          	RTC_SX_TSADJ_SET(RTC,(nCoarse << 4) | nFine);
   \   00000086   0xEA4A 0x100B      ORR      R0,R10,R11, LSL #+4
   \   0000008A   0x64E0             STR      R0,[R4, #+76]
    164          
    165              /* read 16 samples */
    166              for(UINT8 count=0;count<16;count++)
   \   0000008C   0x46B2             MOV      R10,R6
   \   0000008E   0xF10D 0x090C      ADD      R9,SP,#+12
    167              {
    168          	    UINT32 temp=0,temp1=0;
    169          
    170                  RTC_SX_OFFSET_SNS_CLEAR(RTC);
   \                     ??App_TemperatureGet_1:
   \   00000092   0x6C60             LDR      R0,[R4, #+68]
   \   00000094   0x0840             LSRS     R0,R0,#+1
   \   00000096   0x0040             LSLS     R0,R0,#+1
   \   00000098   0x6460             STR      R0,[R4, #+68]
    171                  while(RTC_SX_OFFSET_SNS_GET(RTC));
   \                     ??App_TemperatureGet_2:
   \   0000009A   0x6C60             LDR      R0,[R4, #+68]
   \   0000009C   0x07C0             LSLS     R0,R0,#+31
   \   0000009E   0xD4FC             BMI.N    ??App_TemperatureGet_2
    172                  temp =Adc_Value_Get(0xf7, TRUE);
   \   000000A0   0x2101             MOVS     R1,#+1
   \   000000A2   0x20F7             MOVS     R0,#+247
   \   000000A4   0x.... 0x....      BL       Adc_Value_Get
   \   000000A8   0x4683             MOV      R11,R0
    173                  //S2w_Printf("\n\rSNS0: %d", temp); 
    174          
    175                  RTC_SX_OFFSET_SNS_SET(RTC);
   \   000000AA   0x6C60             LDR      R0,[R4, #+68]
   \   000000AC   0xF040 0x0001      ORR      R0,R0,#0x1
   \   000000B0   0x6460             STR      R0,[R4, #+68]
    176                  while(!RTC_SX_OFFSET_SNS_GET(RTC));
   \                     ??App_TemperatureGet_3:
   \   000000B2   0x6C60             LDR      R0,[R4, #+68]
   \   000000B4   0x07C0             LSLS     R0,R0,#+31
   \   000000B6   0xD5FC             BPL.N    ??App_TemperatureGet_3
    177                  temp1=Adc_Value_Get(0xf7, TRUE);
    178                  //S2w_Printf(" SNS1: %d", temp1); 
    179                  //S2w_Printf(" Diff:%d",temp1-temp);
    180                  buf[count] = temp1-temp;
   \   000000B8   0x2101             MOVS     R1,#+1
   \   000000BA   0x20F7             MOVS     R0,#+247
   \   000000BC   0x.... 0x....      BL       Adc_Value_Get
   \   000000C0   0xEBA0 0x000B      SUB      R0,R0,R11
   \   000000C4   0xF849 0x002A      STR      R0,[R9, R10, LSL #+2]
    181          #if 0
    182          		TsOut = (temp1-temp) - Do_ref;
    183          		delta = (-TsOut * slope) >> 9;
    184          		S2w_Printf(" Delta: % d", delta);
    185                          Tm = delta + Tref;
    186          		S2w_Printf(" Tm: %d\n\r", Tm);
    187          #endif
    188             }
   \   000000C8   0xF10A 0x0A01      ADD      R10,R10,#+1
   \   000000CC   0xF1BA 0x0F10      CMP      R10,#+16
   \   000000D0   0xDBDF             BLT.N    ??App_TemperatureGet_1
    189          
    190             /* Sort readings */
    191             for( i=0; i<15 ; i++ )
   \   000000D2   0x2000             MOVS     R0,#+0
    192             { 
    193                for( j=15; j>i; j-- )
   \                     ??App_TemperatureGet_4:
   \   000000D4   0x210F             MOVS     R1,#+15
    194                {
    195                  if(buf[j] > buf[j-1])
   \                     ??App_TemperatureGet_5:
   \   000000D6   0xAA03             ADD      R2,SP,#+12
   \   000000D8   0xEB02 0x0281      ADD      R2,R2,R1, LSL #+2
   \   000000DC   0xF859 0xC021      LDR      R12,[R9, R1, LSL #+2]
   \   000000E0   0xF852 0x3C04      LDR      R3,[R2, #-4]
   \   000000E4   0x4563             CMP      R3,R12
   \   000000E6   0xBFBC             ITT      LT 
   \   000000E8   0xF849 0x3021      STRLT    R3,[R9, R1, LSL #+2]
   \   000000EC   0xF842 0xCC04      STRLT    R12,[R2, #-4]
    196                  {
    197                    buf_temp = buf[j];
    198                    buf[j] = buf[j-1];
    199                    buf[j-1] = buf_temp;
    200                  }
    201                }
   \   000000F0   0x1E49             SUBS     R1,R1,#+1
   \   000000F2   0x4288             CMP      R0,R1
   \   000000F4   0xDBEF             BLT.N    ??App_TemperatureGet_5
    202              }
   \   000000F6   0x1C40             ADDS     R0,R0,#+1
   \   000000F8   0x280F             CMP      R0,#+15
   \   000000FA   0xDBEB             BLT.N    ??App_TemperatureGet_4
    203          
    204              /* Discard 4 lower and 4 upper readings. Take avg of midle 8 samples */
    205              for( i=4;i<12;i++)
   \   000000FC   0x2004             MOVS     R0,#+4
    206              {
    207                sum+=buf[i];
   \                     ??App_TemperatureGet_6:
   \   000000FE   0xF859 0x1020      LDR      R1,[R9, R0, LSL #+2]
   \   00000102   0x198E             ADDS     R6,R1,R6
    208              }  
   \   00000104   0x1C40             ADDS     R0,R0,#+1
   \   00000106   0x280C             CMP      R0,#+12
   \   00000108   0xDBF9             BLT.N    ??App_TemperatureGet_6
    209              TsOut = sum/8;
    210              //S2w_Printf("\n\rAfter taking average of middle 8 samples %d\n\r", TsOut);
    211              TsOut = TsOut - Do_ref;
    212              delta = (-TsOut * slope) >> 9;
    213              //S2w_Printf("Delta %d\n\r", delta);
    214              Tm = delta + Tref;
    215              //S2w_Printf("Tm: %d\n\r", Tm);
    216          
    217              RTC_SX_EN_BIAS_F_CLEAR(RTC);
   \   0000010A   0x6820             LDR      R0,[R4, #+0]
   \   0000010C   0x0840             LSRS     R0,R0,#+1
   \   0000010E   0x0040             LSLS     R0,R0,#+1
   \   00000110   0x6020             STR      R0,[R4, #+0]
    218              RTC_SX_EN_U_LDO_F_CLEAR (RTC);
   \   00000112   0x6860             LDR      R0,[R4, #+4]
   \   00000114   0x0840             LSRS     R0,R0,#+1
   \   00000116   0x0040             LSLS     R0,R0,#+1
   \   00000118   0x6060             STR      R0,[R4, #+4]
    219              RTC_SX_EN_TS_F_CLEAR(RTC);
   \   0000011A   0x6C20             LDR      R0,[R4, #+64]
   \   0000011C   0x0840             LSRS     R0,R0,#+1
   \   0000011E   0x0040             LSLS     R0,R0,#+1
   \   00000120   0x6420             STR      R0,[R4, #+64]
    220              
    221              App_AdcClose();
   \   00000122   0x.... 0x....      BL       App_AdcClose
    222              CLKCTL_ACM3_BUS_FORCE_CLEAR(CLKCTL);
   \   00000126   0x6828             LDR      R0,[R5, #+0]
   \   00000128   0xF020 0x0010      BIC      R0,R0,#0x10
   \   0000012C   0x6028             STR      R0,[R5, #+0]
    223              return Tm;
   \   0000012E   0xB023             ADD      SP,SP,#+140
   \   00000130   0x10B0             ASRS     R0,R6,#+2
   \   00000132   0xEB06 0x7050      ADD      R0,R6,R0, LSR #+29
   \   00000136   0xEBA8 0x00E0      SUB      R0,R8,R0, ASR #+3
   \   0000013A   0x4378             MULS     R0,R0,R7
   \   0000013C   0x1240             ASRS     R0,R0,#+9
   \   0000013E   0x3019             ADDS     R0,R0,#+25
   \   00000140   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    224          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0xAB01             ADD      R3,SP,#+4
   \   00000002   0xAA00             ADD      R2,SP,#+0
   \   00000004   0x2110             MOVS     R1,#+16
   \   00000006   0x2009             MOVS     R0,#+9
   \   00000008   0x.... 0x....      B.W      GsnOtpMm_Read
    225          

   \                                 In section .text, align 2, keep-with-next
    226          UINT16 App_PaVoltGet()
    227          {
   \                     App_PaVoltGet:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    228          	UINT16 adcVal;
    229          
    230              RTC_SX_SX_EN_BO_SAR_SET(RTC);
   \   00000002   0x....             LDR.N    R4,??DataTable10_7  ;; 0x41000374
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0xF040 0x0001      ORR      R0,R0,#0x1
   \   0000000A   0x6020             STR      R0,[R4, #+0]
    231              App_AdcOpen();
   \   0000000C   0x.... 0x....      BL       App_AdcOpen
    232              Adc_Value_Get(0xf6, FALSE);
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x20F6             MOVS     R0,#+246
   \   00000014   0x.... 0x....      BL       Adc_Value_Get
    233              adcVal = Adc_Value_Get(0xf6, FALSE);
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x20F6             MOVS     R0,#+246
   \   0000001C   0x.... 0x....      BL       Adc_Value_Get
   \   00000020   0x4605             MOV      R5,R0
    234          	//S2w_Printf("\n\rraw val: %x\n\r", adcVal);
    235          	App_AdcClose();
   \   00000022   0x.... 0x....      BL       App_AdcClose
    236          	RTC_SX_SX_EN_BO_SAR_CLEAR(RTC);
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x0840             LSRS     R0,R0,#+1
   \   0000002A   0x0040             LSLS     R0,R0,#+1
   \   0000002C   0x6020             STR      R0,[R4, #+0]
    237          	return (3300 * adcVal) >> 12;
   \   0000002E   0xB2AD             UXTH     R5,R5
   \   00000030   0xF640 0x40E4      MOVW     R0,#+3300
   \   00000034   0x4368             MULS     R0,R0,R5
   \   00000036   0x0100             LSLS     R0,R0,#+4
   \   00000038   0x0C00             LSRS     R0,R0,#+16
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    238          }

   \                                 In section .text, align 2, keep-with-next
    239          INT32 App_TuneLpXtal(int temp)
    240          {
   \                     App_TuneLpXtal:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C2             SUB      SP,SP,#+264
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    241              INT32 temperature;
    242              UINT8 data[255] ={0};
    243              UINT16 dataLen=0;
   \                     ??CrossCallReturnLabel_4:
   \   00000008   0x.... 0x....      BL       ?Subroutine2
    244              INT32 xTalC1 = 0, xTalC2 = 0;
    245              if(GSN_SUCCESS == GsnOtpMm_Read(GSN_OTP_MM_ID_MODULE_CAL_DATA, GSN_OTP_MM_VER_UNKNOWN,
    246                                            &dataLen, data))
   \                     ??CrossCallReturnLabel_1:
   \   0000000C   0xB920             CBNZ.N   R0,??App_TuneLpXtal_0
    247              {
    248                  ULONG64 otpData = *(ULONG64 *)data;
   \   0000000E   0xE9DD 0x0101      LDRD     R0,R1,[SP, #+4]
    249                  xTalC1 = (otpData & APP_XTAL_C1_MASK) >> APP_XTAL_C1_BITOFFSET;
   \   00000012   0xB2C5             UXTB     R5,R0
    250                  xTalC2 = (otpData & APP_XTAL_C2_MASK) >> APP_XTAL_C2_BITOFFSET;
   \   00000014   0x0400             LSLS     R0,R0,#+16
   \   00000016   0x0E06             LSRS     R6,R0,#+24
    251              } 
    252          
    253              temperature = temp;
    254          
    255              /* get delta from lookup table and write that into SX_Cx_1_ctrl and SX_Cx_2 */
    256              
    257              for( INT32 i = 0; i < 9; i++)
   \                     ??App_TuneLpXtal_0:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable10_8
    258              {
    259                  if((temperature <= lpXtalDelta[i].temperature) && (temperature >= lpXtalDelta[i + 1].temperature))
   \                     ??App_TuneLpXtal_1:
   \   0000001C   0x220C             MOVS     R2,#+12
   \   0000001E   0x4342             MULS     R2,R2,R0
   \   00000020   0x5853             LDR      R3,[R2, R1]
   \   00000022   0x42A3             CMP      R3,R4
   \   00000024   0xBFA2             ITTT     GE 
   \   00000026   0x1852             ADDGE    R2,R2,R1
   \   00000028   0x68D3             LDRGE    R3,[R2, #+12]
   \   0000002A   0x429C             CMPGE    R4,R3
   \   0000002C   0xDB0F             BLT.N    ??App_TuneLpXtal_2
    260                  {
    261                      //float deltaPerDegreee = (float)(lpXtalDelta[i].delta - lpXtalDelta[i + 1].delta) / (float)( lpXtalDelta[i].temperature - lpXtalDelta[i + 1].temperature);
    262                      int tempDiff = temperature - lpXtalDelta[i + 1].temperature;
   \   0000002E   0x1AE0             SUBS     R0,R4,R3
    263                      if(tempDiff < 0)
   \   00000030   0xBF44             ITT      MI 
   \   00000032   0x43C0             MVNMI    R0,R0
   \   00000034   0x1C40             ADDMI    R0,R0,#+1
    264                          tempDiff = (~tempDiff + 1);
    265                      //INT8 delta = (tempDiff * deltaPerDegreee) + lpXtalDelta[i + 1].delta;
    266                      INT8 delta = ((tempDiff * lpXtalDelta[i].perDegreeAdj) >> 10) + lpXtalDelta[i + 1].delta;
   \   00000036   0x6891             LDR      R1,[R2, #+8]
   \   00000038   0x4348             MULS     R0,R1,R0
   \   0000003A   0x7C11             LDRB     R1,[R2, #+16]
   \   0000003C   0xEB01 0x20A0      ADD      R0,R1,R0, ASR #+10
   \   00000040   0xB2C0             UXTB     R0,R0
    267                      RTC_SX_CX_1_CTRL_SET(RTC, xTalC1 + delta);
   \   00000042   0x....             LDR.N    R1,??DataTable10_9  ;; 0x41000388
   \   00000044   0x1942             ADDS     R2,R0,R5
   \   00000046   0x600A             STR      R2,[R1, #+0]
    268                      RTC_SX_CX_2_CTRL_SET(RTC, xTalC2 + delta);
   \   00000048   0x1980             ADDS     R0,R0,R6
   \   0000004A   0x6048             STR      R0,[R1, #+4]
    269                      //S2w_Printf("\n\ri LpXtal: %d, %x", i + 1, delta);
    270                      return 0;
   \   0000004C   0xE002             B.N      ??App_TuneLpXtal_3
    271                  }
    272              }
   \                     ??App_TuneLpXtal_2:
   \   0000004E   0x1C40             ADDS     R0,R0,#+1
   \   00000050   0x2809             CMP      R0,#+9
   \   00000052   0xDBE3             BLT.N    ??App_TuneLpXtal_1
    273              return 0;
   \                     ??App_TuneLpXtal_3:
   \   00000054   0x....             B.N      ?Subroutine1
    274          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xB042             ADD      SP,SP,#+264
   \   00000004   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0xA801             ADD      R0,SP,#+4
   \   00000004   0xF44F 0x7180      MOV      R1,#+256
   \   00000008   0x.... 0x....      B.W      __aeabi_memclr4

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x2500             MOVS     R5,#+0
   \   0000000A   0xAB01             ADD      R3,SP,#+4
   \   0000000C   0xAA00             ADD      R2,SP,#+0
   \   0000000E   0x2110             MOVS     R1,#+16
   \   00000010   0x200A             MOVS     R0,#+10
   \   00000012   0x.... 0x....      B.W      GsnOtpMm_Read
    275          
    276          
    277          
    278          
    279          
    280          

   \                                 In section .text, align 2, keep-with-next
    281          INT32 App_TuneLpRc(int temp)
    282          {
   \                     App_TuneLpRc:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C2             SUB      SP,SP,#+264
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    283              INT32 temperature;
    284              UINT8 data[255] ={0};
    285              UINT16 dataLen=0;
   \                     ??CrossCallReturnLabel_3:
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    286              INT32 lpRcCL = 0x20, lpRcRL = 0xE0;    //Default values
   \   0000000E   0x2520             MOVS     R5,#+32
   \   00000010   0x26E0             MOVS     R6,#+224
    287              if(GSN_SUCCESS == GsnOtpMm_Read(GSN_OTP_MM_ID_ATE_CAL_DATA,GSN_OTP_MM_VER_UNKNOWN,
    288                                            &dataLen, data))
   \   00000012   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_5:
   \   00000016   0xB920             CBNZ.N   R0,??App_TuneLpRc_0
    289              {
    290                  ULONG64 otpData = *(ULONG64 *)data;
   \   00000018   0xE9DD 0x0101      LDRD     R0,R1,[SP, #+4]
    291                  lpRcCL = (otpData & APP_LP_RC_CL_MASK) >> APP_LP_RC_CL_BITOFFSET;
   \   0000001C   0x0205             LSLS     R5,R0,#+8
   \   0000001E   0x0E2D             LSRS     R5,R5,#+24
    292                  lpRcRL = (otpData & APP_LP_RC_RL_MASK) >> APP_LP_RC_RL_BITOFFSET;
   \   00000020   0x0E06             LSRS     R6,R0,#+24
    293              } 
    294          
    295              temperature = temp;
    296              /* get delta from lookup table and write that into (CL+ delta) -> SX_CL_ctrl  and (RL+ delta) -> SX_RL_ctrl  */
    297              
    298              for( INT32 i = 0; i < 9; i++)
   \                     ??App_TuneLpRc_0:
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x....             LDR.N    R1,??DataTable10_10
    299              {
    300                  if((temperature <= lpRcDelta[i].temperature) && (temperature >= lpRcDelta[i + 1].temperature))
   \                     ??App_TuneLpRc_1:
   \   00000026   0x220C             MOVS     R2,#+12
   \   00000028   0x4342             MULS     R2,R2,R0
   \   0000002A   0x5853             LDR      R3,[R2, R1]
   \   0000002C   0x42A3             CMP      R3,R4
   \   0000002E   0xBFA2             ITTT     GE 
   \   00000030   0x1852             ADDGE    R2,R2,R1
   \   00000032   0x68D3             LDRGE    R3,[R2, #+12]
   \   00000034   0x429C             CMPGE    R4,R3
   \   00000036   0xDB0F             BLT.N    ??App_TuneLpRc_2
    301                  {
    302                      //float deltaPerDegreee = (float)(lpRcDelta[i].delta - lpRcDelta[i + 1].delta) / (float)( lpRcDelta[i].temperature - lpRcDelta[i + 1].temperature);
    303                      int tempDiff = temperature - lpRcDelta[i + 1].temperature;
   \   00000038   0x1AE0             SUBS     R0,R4,R3
    304                      if(tempDiff < 0)
   \   0000003A   0xBF44             ITT      MI 
   \   0000003C   0x43C0             MVNMI    R0,R0
   \   0000003E   0x1C40             ADDMI    R0,R0,#+1
    305                          tempDiff = (~tempDiff + 1);
    306                      //INT8 delta = (tempDiff * deltaPerDegreee) + lpRcDelta[i + 1].delta;
    307                      INT8 delta = ((tempDiff * lpRcDelta[i].perDegreeAdj) >> 10) + lpRcDelta[i + 1].delta;
   \   00000040   0x6891             LDR      R1,[R2, #+8]
   \   00000042   0x4348             MULS     R0,R1,R0
   \   00000044   0x7C11             LDRB     R1,[R2, #+16]
   \   00000046   0xEB01 0x20A0      ADD      R0,R1,R0, ASR #+10
   \   0000004A   0xB2C0             UXTB     R0,R0
    308                      
    309                      RTC_SX_CL_CTRL_SET(RTC, (lpRcCL + delta));
   \   0000004C   0x....             LDR.N    R1,??DataTable10_11  ;; 0x41000390
   \   0000004E   0x1942             ADDS     R2,R0,R5
   \   00000050   0x600A             STR      R2,[R1, #+0]
    310                      RTC_SX_RL_CTRL_SET(RTC, (lpRcRL + delta));
   \   00000052   0x1980             ADDS     R0,R0,R6
   \   00000054   0x6048             STR      R0,[R1, #+4]
    311                      //S2w_Printf("\n\ri LpRc: %d, %x", i + 1, delta);
    312                      return 0;
   \   00000056   0xE002             B.N      ??App_TuneLpRc_3
    313                  }
    314              }
   \                     ??App_TuneLpRc_2:
   \   00000058   0x1C40             ADDS     R0,R0,#+1
   \   0000005A   0x2809             CMP      R0,#+9
   \   0000005C   0xDBE3             BLT.N    ??App_TuneLpRc_1
    315              return 0;
   \                     ??App_TuneLpRc_3:
   \   0000005E                      REQUIRE ?Subroutine1
   \   0000005E                      ;; // Fall through to label ?Subroutine1
    316          }
    317          

   \                                 In section .text, align 2, keep-with-next
    318          INT32 App_TuneHsXtal(int temp)
    319          {
   \                     App_TuneHsXtal:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB0C2             SUB      SP,SP,#+264
   \   00000004   0x.... 0x....      BL       ?Subroutine3
    320          	INT32 temperature;
    321          	UINT8 data[255] ={0};
    322          	UINT16 dataLen=0;
   \                     ??CrossCallReturnLabel_2:
   \   00000008   0x.... 0x....      BL       ?Subroutine2
    323          	INT32 C1 = 0, C2 = 0;    //Default values
    324          	if(GSN_SUCCESS == GsnOtpMm_Read(GSN_OTP_MM_ID_MODULE_CAL_DATA, GSN_OTP_MM_VER_UNKNOWN,
    325          								  &dataLen, data))
   \                     ??CrossCallReturnLabel_0:
   \   0000000C   0xB920             CBNZ.N   R0,??App_TuneHsXtal_0
    326          	{
    327          		ULONG64 otpData = *(ULONG64 *)data;
   \   0000000E   0xE9DD 0x0101      LDRD     R0,R1,[SP, #+4]
    328          		C1 = (otpData & APP_HS_XTAL_C1_MASK) >> APP_HS_XTAL_C1_BITOFFSET;
   \   00000012   0x0205             LSLS     R5,R0,#+8
   \   00000014   0x0E2D             LSRS     R5,R5,#+24
    329          		C2 = (otpData & APP_HS_XTAL_C2_MASK) >> APP_HS_XTAL_C2_BITOFFSET;
   \   00000016   0x0E06             LSRS     R6,R0,#+24
    330          	} 
    331          
    332          	temperature = temp;
    333          	/* get delta from lookup table and write that into (C1+ delta) -> RTC_CX_C1_ctrl   and (C1+ delta) -> RTC_CX_C2_ctrl  */
    334          	
    335          	for(INT32 i = 0; i < 10; i++)
   \                     ??App_TuneHsXtal_0:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x....             LDR.N    R1,??DataTable10_12
    336          	{
    337          	    if( (temperature >= hsXtalDelta[i].temperature) && (temperature <= hsXtalDelta[i + 1].temperature))
   \                     ??App_TuneHsXtal_1:
   \   0000001C   0x220C             MOVS     R2,#+12
   \   0000001E   0x4342             MULS     R2,R2,R0
   \   00000020   0x5853             LDR      R3,[R2, R1]
   \   00000022   0x429C             CMP      R4,R3
   \   00000024   0xBFA2             ITTT     GE 
   \   00000026   0x1852             ADDGE    R2,R2,R1
   \   00000028   0x68D3             LDRGE    R3,[R2, #+12]
   \   0000002A   0x42A3             CMPGE    R3,R4
   \   0000002C   0xDB0D             BLT.N    ??App_TuneHsXtal_2
    338          	    {
    339          	        //float deltaPerDegreee = (float)(hsXtalDelta[i].delta - hsXtalDelta[i + 1].delta) / (float)( hsXtalDelta[i].temperature - hsXtalDelta[i + 1].temperature);
    340                      int tempDiff = temperature - hsXtalDelta[i + 1].temperature;
   \   0000002E   0x1AE0             SUBS     R0,R4,R3
    341                      if(tempDiff < 0)
   \   00000030   0xBF44             ITT      MI 
   \   00000032   0x43C0             MVNMI    R0,R0
   \   00000034   0x1C40             ADDMI    R0,R0,#+1
    342                          tempDiff = (~tempDiff + 1);
    343                      //INT8 delta = (tempDiff * deltaPerDegreee) + hsXtalDelta[i + 1].delta;
    344                      INT8 delta = ((tempDiff * hsXtalDelta[i].perDegreeAdj) >> 10) + hsXtalDelta[i + 1].delta;
   \   00000036   0x6891             LDR      R1,[R2, #+8]
   \   00000038   0x4348             MULS     R0,R1,R0
   \   0000003A   0x7C11             LDRB     R1,[R2, #+16]
    345          	        RTC_CX_C1_CTRL_SET(RTC, (C1 + delta));
   \   0000003C   0x....             LDR.N    R2,??DataTable10_13  ;; 0x410002d4
   \   0000003E   0xEB01 0x20A0      ADD      R0,R1,R0, ASR #+10
   \   00000042   0xB2C0             UXTB     R0,R0
   \   00000044   0x1941             ADDS     R1,R0,R5
   \   00000046   0x6011             STR      R1,[R2, #+0]
    346                      RTC_CX_C2_CTRL_SET(RTC, (C2 + delta));
   \   00000048   0xE009             B.N      ??App_TuneHsXtal_3
    347                      //S2w_Printf("\n\ri HsXtal: %d, %x", i + 1, delta);
    348                      return 0;
    349          	    }
    350          	}
   \                     ??App_TuneHsXtal_2:
   \   0000004A   0x1C40             ADDS     R0,R0,#+1
   \   0000004C   0x280A             CMP      R0,#+10
   \   0000004E   0xDBE5             BLT.N    ??App_TuneHsXtal_1
    351          	RTC_CX_C1_CTRL_SET(RTC, (C1 + hsXtalDelta[10].delta));
   \   00000050   0xF891 0x007C      LDRB     R0,[R1, #+124]
   \   00000054   0x....             LDR.N    R2,??DataTable10_13  ;; 0x410002d4
   \   00000056   0x1940             ADDS     R0,R0,R5
   \   00000058   0x6010             STR      R0,[R2, #+0]
    352              RTC_CX_C2_CTRL_SET(RTC, (C2 + hsXtalDelta[10].delta));
   \   0000005A   0xF891 0x007C      LDRB     R0,[R1, #+124]
   \                     ??App_TuneHsXtal_3:
   \   0000005E   0x1980             ADDS     R0,R0,R6
   \   00000060   0x6050             STR      R0,[R2, #+4]
    353          	return 0;
   \   00000062   0xB042             ADD      SP,SP,#+264
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0xBD70             POP      {R4-R6,PC}       ;; return
    354          }
    355          
    356          
    357          
    358          
    359          

   \                                 In section .text, align 2, keep-with-next
    360          INT32 App_TuneHsRc(INT32 temp)
    361          { 
   \                     App_TuneHsRc:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    362              INT32 temperature;
    363              RTC_CX_CAL_OFF_VALUE_SET(RTC, 0);
   \   00000002   0x....             LDR.N    R4,??DataTable10_14  ;; 0x410002e8
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x0A80             LSRS     R0,R0,#+10
   \   0000000A   0x0280             LSLS     R0,R0,#+10
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    364              GsnClkCtl_HsRcCal(&cm3ClkCfg);
   \   0000000E   0x....             LDR.N    R0,??DataTable10_15
   \   00000010   0x.... 0x....      BL       GsnClkCtl_HsRcCal
    365              //S2w_Printf("\n\rCalOut: %d", RTC_CX_CAL_EXT_INPUT_GET(RTC));
    366              temperature = temp;
    367          
    368              if(temperature >= 85)
   \   00000014   0x....             LDR.N    R0,??DataTable10_16
   \   00000016   0x2D55             CMP      R5,#+85
   \   00000018   0xDB07             BLT.N    ??App_TuneHsRc_0
    369              {
    370                  RTC_CX_CAL_OFF_VALUE_SET(RTC, hsRcDlta[0].delta);
   \   0000001A   0x6821             LDR      R1,[R4, #+0]
   \   0000001C   0x8882             LDRH     R2,[R0, #+4]
   \   0000001E   0x0592             LSLS     R2,R2,#+22
   \   00000020   0x0A89             LSRS     R1,R1,#+10
   \   00000022   0x0D92             LSRS     R2,R2,#+22
   \   00000024   0xEA42 0x2181      ORR      R1,R2,R1, LSL #+10
   \   00000028   0x6021             STR      R1,[R4, #+0]
    371              }
    372              for(INT32 i = 0; i < 5; i++)
   \                     ??App_TuneHsRc_0:
   \   0000002A   0x2100             MOVS     R1,#+0
    373              {
    374                  if((temperature <= hsRcDlta[i].temperature) && (temperature >= hsRcDlta[i + 1].temperature))
   \                     ??App_TuneHsRc_1:
   \   0000002C   0x220C             MOVS     R2,#+12
   \   0000002E   0x434A             MULS     R2,R2,R1
   \   00000030   0x5813             LDR      R3,[R2, R0]
   \   00000032   0x42AB             CMP      R3,R5
   \   00000034   0xBFA2             ITTT     GE 
   \   00000036   0x1812             ADDGE    R2,R2,R0
   \   00000038   0x68D3             LDRGE    R3,[R2, #+12]
   \   0000003A   0x429D             CMPGE    R5,R3
   \   0000003C   0xDB0B             BLT.N    ??App_TuneHsRc_2
    375                  {
    376                      //float deltaPerDegreee = (float)(hsRcDlta[i].delta - hsRcDlta[i + 1].delta) / (float)( hsRcDlta[i].temperature - hsRcDlta[i + 1].temperature);
    377                      int tempDiff = temperature - hsRcDlta[i + 1].temperature;
   \   0000003E   0x1AE8             SUBS     R0,R5,R3
    378                      if(tempDiff < 0)
   \   00000040   0xBF44             ITT      MI 
   \   00000042   0x43C0             MVNMI    R0,R0
   \   00000044   0x1C40             ADDMI    R0,R0,#+1
    379                          tempDiff = (~tempDiff + 1);
    380                      //INT16 delta = (tempDiff * deltaPerDegreee) + hsRcDlta[i + 1].delta;
    381                      INT16 delta = ((tempDiff * hsRcDlta[i].perDegreeAdj) >> 10) + hsRcDlta[i + 1].delta;
    382                      
    383                      RTC_CX_CAL_OFF_VALUE_SET(RTC, delta);
   \   00000046   0x6821             LDR      R1,[R4, #+0]
   \   00000048   0x6893             LDR      R3,[R2, #+8]
   \   0000004A   0x8A12             LDRH     R2,[R2, #+16]
   \   0000004C   0x4358             MULS     R0,R3,R0
   \   0000004E   0x0A89             LSRS     R1,R1,#+10
   \   00000050   0xEB02 0x20A0      ADD      R0,R2,R0, ASR #+10
   \   00000054   0xE006             B.N      ??App_TuneHsRc_3
    384                      //S2w_Printf("\n\ri HsRc: %d, %x", i + 1, delta);
    385                      return 0;
    386                  }
    387              }
   \                     ??App_TuneHsRc_2:
   \   00000056   0x1C49             ADDS     R1,R1,#+1
   \   00000058   0x2905             CMP      R1,#+5
   \   0000005A   0xDBE7             BLT.N    ??App_TuneHsRc_1
    388              RTC_CX_CAL_OFF_VALUE_SET(RTC, hsRcDlta[5].delta);
   \   0000005C   0x6821             LDR      R1,[R4, #+0]
   \   0000005E   0xF8B0 0x0040      LDRH     R0,[R0, #+64]
   \   00000062   0x0A89             LSRS     R1,R1,#+10
   \                     ??App_TuneHsRc_3:
   \   00000064   0x0580             LSLS     R0,R0,#+22
   \   00000066   0x0D80             LSRS     R0,R0,#+22
   \   00000068   0xEA40 0x2081      ORR      R0,R0,R1, LSL #+10
   \   0000006C   0x6020             STR      R0,[R4, #+0]
    389              return 0;
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    390          }
    391          

   \                                 In section .text, align 2, keep-with-next
    392          VOID AppS2w_ClkCalibCb(VOID* context,
    393              GSN_SOFT_TMR_HANDLE_T  timerHandle)
    394          {
   \                     AppS2w_ClkCalibCb:
   \   00000000   0xB510             PUSH     {R4,LR}
    395              INT32 temperature;
    396          
    397              temperature = App_TemperatureGet();
   \   00000002   0x.... 0x....      BL       App_TemperatureGet
   \   00000006   0x4604             MOV      R4,R0
    398              App_TuneLpXtal(temperature);
   \   00000008   0x.... 0x....      BL       App_TuneLpXtal
    399              App_TuneLpRc(temperature);
   \   0000000C   0x4620             MOV      R0,R4
   \   0000000E   0x.... 0x....      BL       App_TuneLpRc
    400              App_TuneHsXtal(temperature);
   \   00000012   0x4620             MOV      R0,R4
   \   00000014   0x.... 0x....      BL       App_TuneHsXtal
    401              App_TuneHsRc(temperature);
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001E   0x....             B.N      App_TuneHsRc
    402          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10:
   \   00000000   0x400700E0         DC32     0x400700e0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_1:
   \   00000000   0x00333333         DC32     0x333333

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_2:
   \   00000000   0x400B0004         DC32     0x400b0004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_3:
   \   00000000   0x40140404         DC32     0x40140404

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_4:
   \   00000000   0x400B0008         DC32     0x400b0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_5:
   \   00000000   0x4100035C         DC32     0x4100035c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_6:
   \   00000000   0x40070000         DC32     0x40070000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_7:
   \   00000000   0x41000374         DC32     0x41000374

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_8:
   \   00000000   0x........         DC32     lpXtalDelta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_9:
   \   00000000   0x41000388         DC32     0x41000388

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_10:
   \   00000000   0x........         DC32     lpRcDelta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_11:
   \   00000000   0x41000390         DC32     0x41000390

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_12:
   \   00000000   0x........         DC32     hsXtalDelta

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_13:
   \   00000000   0x410002D4         DC32     0x410002d4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_14:
   \   00000000   0x410002E8         DC32     0x410002e8

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_15:
   \   00000000   0x........         DC32     cm3ClkCfg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable10_16:
   \   00000000   0x........         DC32     hsRcDlta

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_3`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000021   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000031   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000041   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000051   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000061   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000071   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000081   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000091   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000A1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000B1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000C1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000E1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F1   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
    403          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Adc_Value_Get
       8   AppS2w_ClkCalibCb
         8   -> App_TemperatureGet
         0   -> App_TuneHsRc
         8   -> App_TuneHsXtal
         8   -> App_TuneLpRc
         8   -> App_TuneLpXtal
       8   App_AdcClose
         8   -> GsnClkCtl_ClkSrcDisable
         8   -> GsnClkCtl_CtxGet
       8   App_AdcOpen
         8   -> GsnClkCtl_ClkSrcEnable
         8   -> GsnClkCtl_CtxGet
      16   App_PaVoltGet
        16   -> Adc_Value_Get
        16   -> App_AdcClose
        16   -> App_AdcOpen
     176   App_TemperatureGet
       176   -> Adc_Value_Get
       176   -> App_AdcClose
       176   -> App_AdcOpen
       176   -> GsnOtpMm_Read
       176   -> __aeabi_llsr
      16   App_TuneHsRc
        16   -> GsnClkCtl_HsRcCal
     280   App_TuneHsXtal
       280   -> GsnOtpMm_Read
       280   -> __aeabi_memclr4
     280   App_TuneLpRc
       280   -> GsnOtpMm_Read
       280   -> __aeabi_memclr4
     280   App_TuneLpXtal
       280   -> GsnOtpMm_Read
       280   -> __aeabi_memclr4


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {0}>
     256  ?<Constant {0}>_1
     256  ?<Constant {0}>_2
     256  ?<Constant {0}>_3
       4  ??DataTable10
       4  ??DataTable10_1
       4  ??DataTable10_10
       4  ??DataTable10_11
       4  ??DataTable10_12
       4  ??DataTable10_13
       4  ??DataTable10_14
       4  ??DataTable10_15
       4  ??DataTable10_16
       4  ??DataTable10_2
       4  ??DataTable10_3
       4  ??DataTable10_4
       4  ??DataTable10_5
       4  ??DataTable10_6
       4  ??DataTable10_7
       4  ??DataTable10_8
       4  ??DataTable10_9
       6  ?Subroutine0
       6  ?Subroutine1
      22  ?Subroutine2
      12  ?Subroutine3
      12  ?Subroutine4
      60  Adc_Value_Get
      32  AppS2w_ClkCalibCb
      40  App_AdcClose
      80  App_AdcOpen
      60  App_PaVoltGet
     324  App_TemperatureGet
     114  App_TuneHsRc
     104  App_TuneHsXtal
      94  App_TuneLpRc
      86  App_TuneLpXtal
      72  hsRcDlta
     132  hsXtalDelta
     120  lpRcDelta
     120  lpXtalDelta

 
   444 bytes in section .data
   776 bytes in section .rodata
 1 120 bytes in section .text
 
 1 120 bytes of CODE  memory
   776 bytes of CONST memory
   444 bytes of DATA  memory

Errors: none
Warnings: none
