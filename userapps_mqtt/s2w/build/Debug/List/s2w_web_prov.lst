###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:13:29 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\web_prov\s2w_web_prov.c                   #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\web_prov\s2w_web_prov.c -D                #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_web_prov.lst             #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_web_prov.o                #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\web_prov\s2w_web_prov.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_web_prov.c,v $
     28          *
     29          * Description : s2w GEPS interface file
     30          *******************************************************************************/
     31          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     32          #include "main/app_main_ctx.h"
     33          #include "S2w_process.h"
     34          #include "config/app_resource_config.h"
     35          #ifdef S2W_WEB_PROV
     36          
     37          /*******************************************************************************
     38           * File Inclusions
     39           ******************************************************************************/
     40          #include "modules/http/gsn_httpd.h"
     41          #include "modules/http/gsn_httpd_api.h"
     42          #include "app_rtc_mem.h"
     43          
     44          //#include <trsocket.h>
     45          //#include <trmacro.h>
     46          
     47          //#include <trtype.h>
     48          //#include <trproto.h>
     49          //#include <trglobal.h>
     50          
     51          
     52          
     53          #include <string.h>
     54          
     55          
     56          #include "hal/s2w.h"
     57          
     58          #if 1
     59          #include "modules/http/gsn_httpd.h"
     60          //#include "hal\s2w_types.h"
     61          #include "modules/xml_string_parser/gsn_xml_string_parser.h"
     62          #endif
     63             
     64          #include "hal/s2w_types.h"
     65          #include "hal/s2w_hal.h"
     66          #include "parser/s2w_process.h"
     67          #include "hal/s2w_timer.h"
     68          #include "hal/s2w_net.h"
     69          #include "hal/s2w_config.h"
     70          #include "hal/s2w_cert_mgmt.h"
     71          #include "main/app_main_ctx.h"
     72          #include "s2w_web_prov.h"
     73          #include "config/app_httpd_config.h"
     74          #include "config/app_ncm_config.h"
     75          #include "html/app_http_fs.h"
     76          #include "fs/api/api_safe.h"
     77          
     78          #if 1
     79          #include "modules/http/gsn_httpd.h"
     80          #include "modules/http/gsn_httpd_file_api.h"
     81          #include "gsn_httpd_config.h"
     82          #include "gsn_httpd_prov.h"
     83             
     84          
     85          #include "modules/http/gsn_httpd_logo.h"
     86          //#include "modules/http/gsn_httpd_fw.h"
     87          #include "modules/http/gsn_httpd_file_api.h"
     88          #endif
     89          
     90          #include "config/app_httpd_config.h"
     91          #include "app_mib.h"
     92          
     93          #include "gsn_sys_config.h"
     94          
     95          
     96          #include "web_prov\s2w_web_prov.h"
     97          #ifdef ADK_PROV
     98          static UINT8 prePoplnDone = 0;
     99          #endif
    100          
    101          
    102          /* Define this to test SSL server with the test certificate. Make sure the 
    103             node IP address is kept 192.168.1.99 */
    104          //#define S2W_SSL_SERVER_TEST
    105          #ifdef S2W_SSL_SERVER_TEST
    106          extern const UINT8 server_key[610];
    107          extern const UINT8 server_cert[1001];
    108          extern const UINT8 ca_cert[1391];
    109          #endif
    110          //TODO:::::
    111          //extern UINT8 webProvFlag;
    112          extern S2W_PROFILE_T s2wCurrent;
    113          //extern S2W_WLANINFO_T current_wlan_info;
    114          extern PUBLIC UINT8 *pS2wHttpdTaskStack;
    115          extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[S2W_MAX_NUM_CERT];
    116          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
    117          //#define WEB_DEBUG
    118          
    119          #ifdef WEB_DEBUG
    120          #define webPrintf S2w_Printf
    121          #else
    122          #define webPrintf(...)
    123          #endif
    124          
    125          #ifdef S2W_FILE_UPLOAD_API
    126          #define GSN_SSLCERTUPLOAD_URI   "/gainspan/system/sslcertupload"
    127          #define TAG_SSLCERT 			"SSLCERT"
    128          #endif
    129          /**
    130           *******************************************************************************
    131           * @file s2w_web_prov.c
    132           * @brief S2W Application geps interface routines.
    133           *      This file contains the s2w application specific implimentation which
    134           *      Interface the s2w command processing network stack.
    135           ******************************************************************************/
    136          /*******************************************************************************
    137           *  Private Variables
    138           ******************************************************************************/
    139          //#define S2W_STACK_ALLOC_STATIC
    140          
    141          
    142          
    143          /*******************************************************************************
    144           *  Extern Variables
    145           ******************************************************************************/

   \                                 In section .bss, align 1
    146          UINT8 storeParams = 0;
   \                     storeParams:
   \   00000000                      DS8 1
    147          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
    148          
    149          extern UINT8 s2wNetRecvTaskStack[APP_CFG_NET_RX_STACK_SIZE];
    150          //extern S2W_MIB_PROFILE_T s2wProfileParm;

   \                                 In section .bss, align 8
    151          S2W_MIB_PROFILE_T s2wProfileParm;
   \                     s2wProfileParm:
   \   00000000                      DS8 2032
    152          #ifdef TRROM_FILE_SYS
    153          extern void
    154          tfRomFsInit(ttRomFilePtr romFile, tt16Bit romPageSize,
    155                           tt16Bit romPages, tt16Bit romFiles);
    156          #endif
    157          
    158          #ifdef S2W_FILE_UPLOAD_API
    159          extern BOOL S2wFileUpload_FwupCb(GSN_HTTPD_ELEMENT_INFO_T fileInfo, INT8 *buffer, 
    160          		UINT32 bufferLen, GSN_HTTPD_ELEMENT_EVENTS_T event, 
    161          		GSN_HTTPD_STATUS_INFO_T *statusMsg);
    162          #endif
    163          
    164          extern VOID
    165          GsnHttpd_FileApiDeInit();
    166          extern VOID GsnHttpdApi_LogoDeInit();
    167          extern VOID GsnHttpdApi_FwDeInit();
    168          
    169          /*******************************************************************************
    170           *  Private Definitions
    171           ******************************************************************************/
    172          //#define LOGO_AND_FACT_DFLT_SETNG_PAGE_START   (GSN_FLASH1_BASE_ADDRESS + (122*1024))
    173          
    174          //#define LOGO_LOCATION (GSN_FLASH1_BASE_ADDRESS + (122*1024)+256)
    175          
    176          /*******************************************************************************
    177           *  Private Inline Functions
    178           ******************************************************************************/
    179          
    180          #ifdef ADK_PROV
    181          PRIVATE VOID
    182          S2wWeb_Config(GSN_SYS_CONFIG_T *pConfig, UINT8 method);
    183          /* Put Values into */
    184          PRIVATE VOID
    185          S2wConfig_SetValues(GSN_SYS_CONFIG_T *pConfig);
    186          
    187          /* Get Values from  */
    188          PRIVATE VOID
    189          S2wConfig_GetValues(GSN_SYS_CONFIG_T *pConfig);
    190          
    191          #endif
    192          #if S2W_HTTPD_DATE_CONFIG
    193          GSN_HTTPD_STATUS_T 
    194          AppS2w_configTimecb(ttHttpdUserEvent event, const char* uri,ttHttpdUserConHandle conHandle); 
    195          #endif					
    196          #ifdef S2W_HTTPD_SSLCERT_UPLOAD											
    197          GSN_HTTPD_STATUS_T 
    198          AppS2w_SslCertcb(ttHttpdUserEvent event, const char* uri,ttHttpdUserConHandle conHandle);
    199          #endif
    200          /*******************************************************************************
    201           *  Public Functions
    202           ******************************************************************************/
    203          #ifdef  S2W_FILE_UPLOAD_API
    204          

   \                                 In section .bss, align 4
    205          F_FILE *fd; 
   \                     fd:
   \   00000000                      DS8 4
    206          
    207          
    208          //UINT8 *certName;
    209          #define S2W_CERT_MAX_NAME_LENGTH 32

   \                                 In section .text, align 2, keep-with-next
    210          BOOL
    211          S2wWebProv_FileUploadCb(GSN_HTTPD_ELEMENT_INFO_T fileInfo, INT8 *buffer, 
    212          	UINT32 bufferLen, GSN_HTTPD_ELEMENT_EVENTS_T event, 
    213          	GSN_HTTPD_STATUS_INFO_T *statusInfo)
    214          {
   \                     S2wWebProv_FileUploadCb:
   \   00000000   0xB40F             PUSH     {R0-R3}
   \   00000002   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000006   0xB08C             SUB      SP,SP,#+48
   \   00000008   0xF8DD 0x806C      LDR      R8,[SP, #+108]
   \   0000000C   0xF9BD 0x7074      LDRSH    R7,[SP, #+116]
    215          	UINT8 tagName[S2W_CERT_MAX_NAME_LENGTH+16];
    216          	INT32 status, len;
    217          	webPrintf("\n\rIn file upload CB: %x\n\r", event);
    218          	memset(tagName, 0, S2W_CERT_MAX_NAME_LENGTH+16);
   \   00000010   0x2230             MOVS     R2,#+48
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA800             ADD      R0,SP,#+0
   \   00000016   0x.... 0x....      BL       memset
    219          	switch(event)
   \   0000001A   0x.... 0x....      LDR.W    R6,??DataTable67_2
   \   0000001E   0x.... 0x....      LDR.W    R5,??DataTable67_3
   \   00000022   0x6833             LDR      R3,[R6, #+0]
   \   00000024   0xF647 0x74EC      MOVW     R4,#+32748
   \   00000028   0xF647 0x79F0      MOVW     R9,#+32752
   \   0000002C   0x2F01             CMP      R7,#+1
   \   0000002E   0xD00D             BEQ.N    ??S2wWebProv_FileUploadCb_0
   \   00000030   0x2F02             CMP      R7,#+2
   \   00000032   0xD050             BEQ.N    ??S2wWebProv_FileUploadCb_1
   \   00000034   0x2F04             CMP      R7,#+4
   \   00000036   0xD05D             BEQ.N    ??S2wWebProv_FileUploadCb_2
   \   00000038   0x2F40             CMP      R7,#+64
   \   0000003A   0xD002             BEQ.N    ??S2wWebProv_FileUploadCb_3
   \   0000003C   0x2F80             CMP      R7,#+128
   \   0000003E   0xD069             BEQ.N    ??S2wWebProv_FileUploadCb_4
   \                     ??S2wWebProv_FileUploadCb_5:
   \   00000040   0xE089             B.N      ??S2wWebProv_FileUploadCb_6
    220          	{
    221          		case START_UPLOAD:
    222          			s2wappMainTaskCtxt->fileOperationStatus=0;
   \                     ??S2wWebProv_FileUploadCb_3:
   \   00000042   0x6828             LDR      R0,[R5, #+0]
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xF809 0x1000      STRB     R1,[R9, R0]
    223          			s2wappMainTaskCtxt->fileuploadCnt=0;
   \   0000004A   0xE082             B.N      ??S2wWebProv_FileUploadCb_7
    224          			break;
    225          		case START_FILE:
    226          			webPrintf("TagNameLen: %d", fileInfo.nameLen);
    227          			if(fileInfo.nameLen)
   \                     ??S2wWebProv_FileUploadCb_0:
   \   0000004C   0xF8DD 0x8060      LDR      R8,[SP, #+96]
   \   00000050   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000054   0xD0F4             BEQ.N    ??S2wWebProv_FileUploadCb_5
    228          			{
    229          				status = f_mkdir("A:/certs");
   \   00000056   0x.... 0x....      ADR.W    R0,`?<Constant "A:/certs">`
   \   0000005A   0x.... 0x....      BL       fsm_mkdir
   \   0000005E   0x4607             MOV      R7,R0
    230          				memset(tagName, 0, S2W_CERT_MAX_NAME_LENGTH+8);
   \   00000060   0x2228             MOVS     R2,#+40
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0xA800             ADD      R0,SP,#+0
   \   00000066   0x.... 0x....      BL       memset
    231          				if(status == F_NO_ERROR || status == F_ERR_DUPLICATED )
   \   0000006A   0x2F00             CMP      R7,#+0
   \   0000006C   0xBF18             IT       NE 
   \   0000006E   0x2F06             CMPNE    R7,#+6
   \   00000070   0xD13B             BNE.N    ??S2wWebProv_FileUploadCb_8
    232          				{
    233          					if(strncmp(fileInfo.name,TAG_SSLCERT,fileInfo.nameLen) == 0)
   \   00000072   0xF8DD 0xA05C      LDR      R10,[SP, #+92]
   \   00000076   0x.... 0x....      ADR.W    R7,`?<Constant "A:/certs/">`
   \   0000007A   0x.... 0x....      ADR.W    R1,`?<Constant "SSLCERT">`
   \   0000007E   0x.... 0x....      ADR.W    R9,??DataTable64  ;; "w"
   \   00000082   0x4642             MOV      R2,R8
   \   00000084   0x4650             MOV      R0,R10
   \   00000086   0x.... 0x....      BL       strncmp
   \   0000008A   0xB958             CBNZ.N   R0,??S2wWebProv_FileUploadCb_9
    234          					{
    235          						if(fileInfo.filenameLen > S2W_CERT_MAX_NAME_LENGTH)
   \   0000008C   0x9816             LDR      R0,[SP, #+88]
   \   0000008E   0x2821             CMP      R0,#+33
   \   00000090   0xBFA4             ITT      GE 
   \   00000092   0x201F             MOVGE    R0,#+31
   \   00000094   0x9016             STRGE    R0,[SP, #+88]
    236          							fileInfo.filenameLen = S2W_CERT_MAX_NAME_LENGTH-1;
    237          												
    238          								len= sprintf((char*)tagName,"A:/certs/");
   \   00000096   0x4639             MOV      R1,R7
   \   00000098   0xA800             ADD      R0,SP,#+0
   \   0000009A   0x.... 0x....      BL       sprintf
    239          							memcpy(tagName + len, fileInfo.filename, fileInfo.filenameLen);
   \   0000009E   0x9A16             LDR      R2,[SP, #+88]
   \   000000A0   0x9915             LDR      R1,[SP, #+84]
   \   000000A2   0xE005             B.N      ??S2wWebProv_FileUploadCb_10
    240          							fd= f_open((const char *)tagName, "w");
    241          					}
    242          					else /*EAP Certificates*/
    243          					{
    244          								len= sprintf((char*)tagName,"A:/certs/");
   \                     ??S2wWebProv_FileUploadCb_9:
   \   000000A4   0x4639             MOV      R1,R7
   \   000000A6   0xA800             ADD      R0,SP,#+0
   \   000000A8   0x.... 0x....      BL       sprintf
    245          							memcpy(tagName + len, fileInfo.name, fileInfo.nameLen);
   \   000000AC   0x4642             MOV      R2,R8
   \   000000AE   0x4651             MOV      R1,R10
   \                     ??S2wWebProv_FileUploadCb_10:
   \   000000B0   0xAB00             ADD      R3,SP,#+0
   \   000000B2   0x18C0             ADDS     R0,R0,R3
   \   000000B4   0x.... 0x....      BL       memcpy
    246          							fd= f_open((const char *)tagName, "w");
   \   000000B8   0x4649             MOV      R1,R9
   \   000000BA   0xA800             ADD      R0,SP,#+0
   \   000000BC   0x.... 0x....      BL       fsm_open
   \   000000C0   0x6030             STR      R0,[R6, #+0]
    247          					}
    248          					if(fd == NULL)
   \   000000C2   0x6831             LDR      R1,[R6, #+0]
   \   000000C4   0x6828             LDR      R0,[R5, #+0]
   \   000000C6   0xB919             CBNZ.N   R1,??S2wWebProv_FileUploadCb_11
    249          					{				
    250          						s2wappMainTaskCtxt->fileOperationStatus = 1;
   \   000000C8   0x1820             ADDS     R0,R4,R0
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0x7101             STRB     R1,[R0, #+4]
    251          						return 0;
   \   000000CE   0xE042             B.N      ??S2wWebProv_FileUploadCb_6
    252          					}
    253          					s2wappMainTaskCtxt->fileuploadCnt++;
   \                     ??S2wWebProv_FileUploadCb_11:
   \   000000D0   0x5821             LDR      R1,[R4, R0]
   \   000000D2   0x1C49             ADDS     R1,R1,#+1
   \   000000D4   0xE03E             B.N      ??S2wWebProv_FileUploadCb_12
    254          				}
    255          				else
    256          				{
    257          					s2wappMainTaskCtxt->fileOperationStatus = 1;
    258          				}
    259          				webPrintf("\r\nFile Name is = %s:%d \r\n", tagName,fileInfo.filenameLen);
    260          			}
    261          			break;
    262          		case CONTINUE_FILE:
    263          			webPrintf("\r\nBufferLength=%d\r\n",bufferLen);
    264          			if(fd != NULL)
   \                     ??S2wWebProv_FileUploadCb_1:
   \   000000D6   0x2B00             CMP      R3,#+0
   \   000000D8   0xD03D             BEQ.N    ??S2wWebProv_FileUploadCb_6
   \   000000DA   0x9C1C             LDR      R4,[SP, #+112]
    265          			{
    266          				len = f_write(buffer, 1, bufferLen , fd);
    267          				if(len != bufferLen)
   \   000000DC   0x4622             MOV      R2,R4
   \   000000DE   0x2101             MOVS     R1,#+1
   \   000000E0   0x4640             MOV      R0,R8
   \   000000E2   0x.... 0x....      BL       fsm_write
   \   000000E6   0x42A0             CMP      R0,R4
   \   000000E8   0xD035             BEQ.N    ??S2wWebProv_FileUploadCb_6
    268          					s2wappMainTaskCtxt->fileOperationStatus = 1;	
   \                     ??S2wWebProv_FileUploadCb_8:
   \   000000EA   0x6828             LDR      R0,[R5, #+0]
   \   000000EC   0x2101             MOVS     R1,#+1
   \   000000EE   0xF809 0x1000      STRB     R1,[R9, R0]
   \   000000F2   0xE030             B.N      ??S2wWebProv_FileUploadCb_6
    269          			}
    270          #ifdef WEB_DEBUG			
    271                      UINT32 index=0;
    272          			while(bufferLen)
    273          			{
    274          				webPrintf("%02x",buffer[index++]);
    275          				bufferLen--;
    276          			};
    277          #endif			
    278          			break;
    279          		case END_FILE:
    280          		{
    281          			if(fd!= NULL)
   \                     ??S2wWebProv_FileUploadCb_2:
   \   000000F4   0xB113             CBZ.N    R3,??S2wWebProv_FileUploadCb_13
    282          							{
    283          				f_close(fd);
   \   000000F6   0x4618             MOV      R0,R3
   \   000000F8   0x.... 0x....      BL       fsm_close
    284          
    285          					}
    286          
    287          			if(strcmp((const char *)tagName,S2W_CERT_NAME_CA) == 0)
   \                     ??S2wWebProv_FileUploadCb_13:
   \   000000FC   0xA800             ADD      R0,SP,#+0
   \   000000FE   0x.... 0x....      ADR.W    R1,`?<Constant "TLS_CA">`
   \   00000102   0x.... 0x....      BL       strcmp
   \   00000106   0xBB30             CBNZ.N   R0,??S2wWebProv_FileUploadCb_6
    288          			{
    289          				s2wCurrent.security.eap.useCaCert = 1;
   \   00000108   0x.... 0x....      LDR.W    R0,??DataTable67_4
   \   0000010C   0x2101             MOVS     R1,#+1
   \   0000010E   0xF880 0x1140      STRB     R1,[R0, #+320]
   \   00000112   0xE020             B.N      ??S2wWebProv_FileUploadCb_6
    290          			}
    291          			break;
    292          		}
   \                     ??S2wWebProv_FileUploadCb_4:
   \   00000114   0x9E1E             LDR      R6,[SP, #+120]
    293          		case END_UPLOAD:
    294          			
    295          			webPrintf("END UPLOAD:%d\n\r",s2wappMainTaskCtxt->fileOperationStatus);
    296          			if(s2wappMainTaskCtxt->fileOperationStatus == 0)
   \   00000116   0x6829             LDR      R1,[R5, #+0]
   \   00000118   0x6870             LDR      R0,[R6, #+4]
   \   0000011A   0xF819 0x1001      LDRB     R1,[R9, R1]
   \   0000011E   0xB951             CBNZ.N   R1,??S2wWebProv_FileUploadCb_14
    297          			{
    298          			sprintf(statusInfo->pMsg,"<Response><status>SUCCESS</status><msg>");
   \   00000120   0x.... 0x....      ADR.W    R1,`?<Constant "<Response><status>SUC...">`
   \   00000124   0x.... 0x....      BL       sprintf
    299          				statusInfo->msgLength =	sprintf(statusInfo->pMsg, "%s %d files Uploaded</msg></Response>", \
    300          										statusInfo->pMsg, s2wappMainTaskCtxt->fileuploadCnt);
   \   00000128   0x6828             LDR      R0,[R5, #+0]
   \   0000012A   0x6872             LDR      R2,[R6, #+4]
   \   0000012C   0x5823             LDR      R3,[R4, R0]
   \   0000012E   0x.... 0x....      ADR.W    R1,`?<Constant "%s %d files Uploaded<...">`
   \   00000132   0x4610             MOV      R0,R2
   \   00000134   0xE009             B.N      ??S2wWebProv_FileUploadCb_15
    301          			}
    302          			else
    303          			{
    304          				sprintf(statusInfo->pMsg,"<Response><status>FAILED</status><msg>");
   \                     ??S2wWebProv_FileUploadCb_14:
   \   00000136   0x.... 0x....      ADR.W    R1,`?<Constant "<Response><status>FAI...">`
   \   0000013A   0x.... 0x....      BL       sprintf
    305          				statusInfo->msgLength =	sprintf(statusInfo->pMsg, "%s %d file Uploaded</msg></Response>",\
    306          										statusInfo->pMsg, s2wappMainTaskCtxt->fileuploadCnt);
   \   0000013E   0x6829             LDR      R1,[R5, #+0]
   \   00000140   0x6870             LDR      R0,[R6, #+4]
   \   00000142   0x5863             LDR      R3,[R4, R1]
   \   00000144   0x.... 0x....      ADR.W    R1,`?<Constant "%s %d file Uploaded</...">`
   \   00000148   0x4602             MOV      R2,R0
   \                     ??S2wWebProv_FileUploadCb_15:
   \   0000014A   0x.... 0x....      BL       sprintf
   \   0000014E   0x6030             STR      R0,[R6, #+0]
    307          			}
    308          			s2wappMainTaskCtxt->fileuploadCnt=0;
   \   00000150   0x2100             MOVS     R1,#+0
   \                     ??S2wWebProv_FileUploadCb_7:
   \   00000152   0x6828             LDR      R0,[R5, #+0]
   \                     ??S2wWebProv_FileUploadCb_12:
   \   00000154   0x5021             STR      R1,[R4, R0]
    309          			break;
    310          		case CONNEC_LOST:
    311          #ifdef WEB_DEBUG			
    312          			webPrintf("END CONNEC_LOST\n\r");
    313          #endif			
    314          			break;
    315          	}
    316          return 0;
   \                     ??S2wWebProv_FileUploadCb_6:
   \   00000156   0xB00C             ADD      SP,SP,#+48
   \   00000158   0xE8BD 0x07F0      POP      {R4-R10}
   \   0000015C   0x2000             MOVS     R0,#+0
   \   0000015E   0xF85D 0xFB14      LDR      PC,[SP], #+20    ;; return
    317          }
    318          #endif
    319          
    320          #ifdef ADK_PROV
    321          
    322          #ifdef S2W_SECURITY_WPS_ENABLE
    323          #define APP_WPS_TYPE_PB 1
    324          #define APP_WPS_TYPE_PIN 2

   \                                 In section .text, align 2, keep-with-next
    325          VOID 
    326          S2wWebProv_WpsCbFn(char* mode, char* pin)
    327          {
   \                     S2wWebProv_WpsCbFn:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
    328              UINT8 i, wpsPin[GSN_WDD_SEC_WPS_PIN_LEN];
    329              UINT8* p = &wpsPin[0];
    330          	UINT32 message;
    331          
    332          	memset((INT8 *)&s2wappMainTaskCtxt->wpsapSsid, 0, sizeof(s2wappMainTaskCtxt->wpsapSsid));
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable67_3
   \   00000008   0x4680             MOV      R8,R0
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   00000012   0xB083             SUB      SP,SP,#+12
   \   00000014   0x2221             MOVS     R2,#+33
   \   00000016   0x2100             MOVS     R1,#+0
   \   00000018   0x307C             ADDS     R0,R0,#+124
   \   0000001A   0x.... 0x....      BL       memset
    333              if (!strcmp(mode, "pbc"))
   \   0000001E   0x6826             LDR      R6,[R4, #+0]
   \   00000020   0xF506 0x40EA      ADD      R0,R6,#+29952
   \   00000024   0xF100 0x0958      ADD      R9,R0,#+88
   \   00000028   0xF247 0x5754      MOVW     R7,#+30036
   \   0000002C   0x....             ADR.N    R1,??DataTable64_1  ;; "pbc"
   \   0000002E   0x4640             MOV      R0,R8
   \   00000030   0x.... 0x....      BL       strcmp
   \   00000034   0xB940             CBNZ.N   R0,??S2wWebProv_WpsCbFn_0
    334              {
    335                  //S2w_Printf("[tlswebapp] WPS PBC method requested\r\n");
    336          	  memset(s2wappMainTaskCtxt->wpsParams.pin,0x00,GSN_WDD_SEC_WPS_PIN_LEN);
   \   00000036   0x2208             MOVS     R2,#+8
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x4648             MOV      R0,R9
   \   0000003C   0x.... 0x....      BL       memset
    337                webPrintf("[tlswebapp] WPS PBC method requested\r\n");
    338          		s2wappMainTaskCtxt->wpsParams.type = APP_WPS_TYPE_PB;
   \   00000040   0x6820             LDR      R0,[R4, #+0]
   \   00000042   0x2101             MOVS     R1,#+1
   \   00000044   0x5039             STR      R1,[R7, R0]
   \   00000046   0xE01C             B.N      ??S2wWebProv_WpsCbFn_1
    339              }
    340              else if (!strcmp(mode, "pin"))
   \                     ??S2wWebProv_WpsCbFn_0:
   \   00000048   0x....             ADR.N    R1,??DataTable64_2  ;; "pin"
   \   0000004A   0x4640             MOV      R0,R8
   \   0000004C   0x.... 0x....      BL       strcmp
   \   00000050   0xB9B8             CBNZ.N   R0,??S2wWebProv_WpsCbFn_1
    341              {
    342                  webPrintf("[tlswebapp]  WPS PIN method requested %s\r\n",pin);
    343                  //S2w_Printf("[tlswebapp] WPS PIN method requested %s\r\n", pin);
    344          		s2wappMainTaskCtxt->wpsParams.type = APP_WPS_TYPE_PIN;
   \   00000052   0x2002             MOVS     R0,#+2
   \   00000054   0x51B8             STR      R0,[R7, R6]
    345                  if (GSN_WDD_SEC_WPS_PIN_LEN != strlen((const char*) pin))
   \   00000056   0x4628             MOV      R0,R5
   \   00000058   0x.... 0x....      BL       strlen
   \   0000005C   0x2808             CMP      R0,#+8
   \   0000005E   0xD126             BNE.N    ??S2wWebProv_WpsCbFn_2
    346                  {
    347                      return;
    348                  }
    349                  for (i = 0; i < GSN_WDD_SEC_WPS_PIN_LEN; i++)
   \   00000060   0x2000             MOVS     R0,#+0
    350                  {
    351                      if (*(pin + i) < '0' || *(pin + i) > '9')
   \                     ??S2wWebProv_WpsCbFn_3:
   \   00000062   0x5D41             LDRB     R1,[R0, R5]
   \   00000064   0xF1A1 0x0230      SUB      R2,R1,#+48
   \   00000068   0x2A0A             CMP      R2,#+10
   \   0000006A   0xD220             BCS.N    ??S2wWebProv_WpsCbFn_2
    352                      {
    353                          return;
    354                      }
    355                      //*(p + i) = *(pin + i) - '0'; /* convert to integer */
    356                      *(p+i)= *(pin+i);
   \   0000006C   0xAA00             ADD      R2,SP,#+0
   \   0000006E   0x5481             STRB     R1,[R0, R2]
    357                  }
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0xB2C0             UXTB     R0,R0
   \   00000074   0x2808             CMP      R0,#+8
   \   00000076   0xDBF4             BLT.N    ??S2wWebProv_WpsCbFn_3
    358                  memcpy(s2wappMainTaskCtxt->wpsParams.pin, p, GSN_WDD_SEC_WPS_PIN_LEN);
   \   00000078   0x2208             MOVS     R2,#+8
   \   0000007A   0xA900             ADD      R1,SP,#+0
   \   0000007C   0x4648             MOV      R0,R9
   \   0000007E   0x.... 0x....      BL       memcpy
    359              }
    360          
    361          	/*500 ms delay to complete the post response*/
    362          	GsnTaskSleep(500);
   \                     ??S2wWebProv_WpsCbFn_1:
   \   00000082   0xF44F 0x70FA      MOV      R0,#+500
   \   00000086   0x.... 0x....      BL       GsnTaskSleep
    363          	if(S2W_WEB_PARAMS_STORE == 	storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   \   0000008A   0x.... 0x....      LDR.W    R0,??DataTable68
   \   0000008E   0x7800             LDRB     R0,[R0, #+0]
   \   00000090   0x6821             LDR      R1,[R4, #+0]
   \   00000092   0xF247 0x5278      MOVW     R2,#+30072
   \   00000096   0x2801             CMP      R0,#+1
   \   00000098   0xBF16             ITET     NE 
   \   0000009A   0x2802             CMPNE    R0,#+2
   \   0000009C   0x2001             MOVEQ    R0,#+1
   \   0000009E   0x2000             MOVNE    R0,#+0
    364          		s2wappMainTaskCtxt->wpsParams.storeL2ConInfo=TRUE;
    365          	else
    366          		s2wappMainTaskCtxt->wpsParams.storeL2ConInfo=FALSE;
   \   000000A0   0x5450             STRB     R0,[R2, R1]
    367          	
    368          	message = APP_NOTIFICATION_WPS_START;
    369          	(s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   000000A2   0x2019             MOVS     R0,#+25
   \   000000A4   0x.... 0x....      LDR.W    R2,??DataTable68_1
   \   000000A8   0x6821             LDR      R1,[R4, #+0]
   \   000000AA   0x6812             LDR      R2,[R2, #+0]
   \   000000AC   0x4790             BLX      R2
    370          
    371          	   /* reboot */
    372          			
    373          }
   \                     ??S2wWebProv_WpsCbFn_2:
   \   000000AE   0xE8BD 0x83F7      POP      {R0-R2,R4-R9,PC}  ;; return
    374          #endif
    375          #endif /* #ifdef ADK_PROV */
    376          

   \                                 In section .text, align 2, keep-with-next
    377          PUBLIC VOID
    378          S2wWebProv_WebProvStop()
    379          {
   \                     S2wWebProv_WebProvStop:
   \   00000000   0xB580             PUSH     {R7,LR}
    380          #ifdef ADK_PROV
    381              GsnHttpdApi_ConfigDeInit();
   \   00000002   0x.... 0x....      BL       GsnHttpdApi_ConfigDeInit
    382              GsnHttpdApi_ProvDeInit();
   \   00000006   0x.... 0x....      BL       GsnHttpdApi_ProvDeInit
    383          #endif
    384          
    385          #ifdef S2W_HTTPD_DATE_CONFIG
    386          	GsnHttpd_UriHandlerConfig("/gainspan/system/time", 0, NULL, NULL, 0);
    387          #endif
    388          #ifdef S2W_HTTPD_SSLCERT_UPLOAD
    389          	GsnHttpd_UriHandlerConfig("/gainspan/system/sslcerts", 0, NULL, NULL, 0);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   \   0000000E   0x4602             MOV      R2,R0
   \   00000010   0x4601             MOV      R1,R0
   \   00000012   0x2300             MOVS     R3,#+0
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "/gainspan/system/sslc...">`
   \   00000018   0x.... 0x....      BL       GsnHttpd_UriHandlerConfig
    390          #endif
    391          
    392              GsnHttpdApi_ApiDeInit();
   \   0000001C   0x.... 0x....      BL       GsnHttpdApi_ApiDeInit
    393          #ifdef S2W_WEB_SRVR_LOGO_INTRNL_FLASH
    394              GsnHttpdApi_LogoDeInit(App_LogoInfoCb);
    395          #endif
    396              GsnHttpdApi_FwDeInit();
   \   00000020   0x.... 0x....      BL       GsnHttpdApi_FwDeInit
    397          #ifdef S2W_FILE_UPLOAD_API
    398          	GsnHttpd_FileApiDeInit();
   \   00000024   0x.... 0x....      BL       GsnHttpd_FileApiDeInit
    399          #endif
    400               //webProvFlag = 0;
    401          	s2wappMainTaskCtxt->webProvStatus = IDLE;
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable67_3
   \   0000002C   0x6809             LDR      R1,[R1, #+0]
   \   0000002E   0xF646 0x402C      MOVW     R0,#+27692
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x5442             STRB     R2,[R0, R1]
    402          #ifdef ADK_PROV
    403          	prePoplnDone=0;
   \   00000036   0x.... 0x....      LDR.W    R0,??DataTable68_2
   \   0000003A   0x7002             STRB     R2,[R0, #+0]
    404          #endif
    405          
    406          }
   \   0000003C   0xBD01             POP      {R0,PC}          ;; return
    407          
    408          extern GSN_NW_PKT_POOL_HANDLE   trPktPoolHndl;
    409          extern void                    *s2wHttpdPktPtr;
    410          #define S2W_HTTPD_PKT_POOL  (32*1024)

   \                                 In section .text, align 2, keep-with-next
    411          PUBLIC VOID
    412          S2wWebProv_WebProvStart()
    413          {
   \                     S2wWebProv_WebProvStart:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB0FB             SUB      SP,SP,#+492
    414             	INT8 httpdStatus;
    415              
    416              GSN_HTTPD_CONFIG_T config;
    417              UINT32  index, certLength, wlanVer;
    418              GSN_NWIF_IP_CONFIG_T nwParams;
    419              //GSN_STATUS ret;
    420          #ifdef ADK_PROV 
    421              GSN_HTTPD_PROV_CONFIG_T provConfig;
    422          #endif
    423              
    424              //char ipAddrStr[16];
    425              SERVER_CERT_DETAIL_T certDetail, *pCertDtl = NULL;
   \   00000006   0xF04F 0x0800      MOV      R8,#+0
    426          	
    427          	if(TRUE == GsnHttpd_IsRunning())
   \   0000000A   0xF646 0x3978      MOVW     R9,#+27512
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable67_3
   \   00000012   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xF000 0x80E9      BEQ.W    ??S2wWebProv_WebProvStart_0
    428          	{
    429          		goto WebProvUriRegister;
    430          	}
    431              (VOID)pCertDtl;
    432          	//memset((INT8 *)&certDetail, 0, sizeof(certDetail));
    433              if(!s2wappMainTaskCtxt->fsInit)
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xF248 0x1670      MOVW     R6,#+33136
   \   00000022   0x5C30             LDRB     R0,[R6, R0]
   \   00000024   0xB930             CBNZ.N   R0,??S2wWebProv_WebProvStart_1
    434              {
    435          		App_FsInit();
   \   00000026   0x.... 0x....      BL       App_FsInit
    436          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   0000002A   0x6820             LDR      R0,[R4, #+0]
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0x5431             STRB     R1,[R6, R0]
    437                  f_enterFS();
   \   00000030   0x.... 0x....      BL       fsm_enterFS
    438          	}
    439              if( s2wappMainTaskCtxt->WebServerCfg.sslEnabled )
   \                     ??S2wWebProv_WebProvStart_1:
   \   00000034   0xF646 0x3A79      MOVW     R10,#+27513
   \   00000038   0x6820             LDR      R0,[R4, #+0]
   \   0000003A   0xF81A 0x0000      LDRB     R0,[R10, R0]
   \   0000003E   0x2800             CMP      R0,#+0
   \   00000040   0xD05D             BEQ.N    ??S2wWebProv_WebProvStart_2
    440              {
    441                  pCertDtl = &certDetail;
    442          
    443          #ifndef S2W_SSL_SERVER_TEST
    444                  index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_CA);
   \   00000042   0x.... 0x....      ADR.W    R5,`?<Constant "SSL_CA">`
   \   00000046   0xF10D 0x0890      ADD      R8,SP,#+144
   \   0000004A   0x4628             MOV      R0,R5
   \   0000004C   0x.... 0x....      BL       S2wCert_SearchRamTable
    445          		 if(index == -1)
   \   00000050   0xF110 0x0F01      CMN      R0,#+1
   \   00000054   0xBF04             ITT      EQ 
   \   00000056   0x4628             MOVEQ    R0,R5
   \   00000058   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
    446                  {
    447          			 index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_CA);
    448          		 }
    449          		 if(index == -1)
   \   0000005C   0x.... 0x....      ADR.W    R6,`?<Constant "\\n\\rCertificate %s Not ...">`
   \   00000060   0xF110 0x0F01      CMN      R0,#+1
   \   00000064   0xD105             BNE.N    ??S2wWebProv_WebProvStart_3
    450          		 {
    451          			 s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \   00000066   0x6820             LDR      R0,[R4, #+0]
   \   00000068   0x2101             MOVS     R1,#+1
   \   0000006A   0xF809 0x1000      STRB     R1,[R9, R0]
    452          			 S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_CA);
   \   0000006E   0x4629             MOV      R1,R5
   \   00000070   0xE037             B.N      ??S2wWebProv_WebProvStart_4
    453          			 goto WebProvStartExit;
    454          		 }
    455          		 certDetail.CaCertName = (char const *)s2w_ssl_cert_table[index].name;
   \                     ??S2wWebProv_WebProvStart_3:
   \   00000072   0x250C             MOVS     R5,#+12
   \   00000074   0x4368             MULS     R0,R0,R5
   \   00000076   0x.... 0x....      LDR.W    R7,??DataTable68_3
    456                      certDetail.CaCertLocation = s2w_ssl_cert_table[index].certAddress + 2;        
    457                      certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
    458                      certLength <<= 8;
    459                      certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
    460                      certDetail.CaCertLen = certLength;
    461          		/* CA certificate is optional*/
    462                  /*else return retVal; */
    463                  
    464                  index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_SERVER);
   \   0000007A   0x.... 0x....      ADR.W    R11,`?<Constant "SSL_SERVER">`
   \   0000007E   0x19C1             ADDS     R1,R0,R7
   \   00000080   0x6849             LDR      R1,[R1, #+4]
   \   00000082   0x9124             STR      R1,[SP, #+144]
   \   00000084   0x59C0             LDR      R0,[R0, R7]
   \   00000086   0x1C81             ADDS     R1,R0,#+2
   \   00000088   0x9125             STR      R1,[SP, #+148]
   \   0000008A   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_14:
   \   0000008E   0x9026             STR      R0,[SP, #+152]
   \   00000090   0x4658             MOV      R0,R11
   \   00000092   0x.... 0x....      BL       S2wCert_SearchRamTable
    465          		 if(index == -1)
   \   00000096   0xF110 0x0F01      CMN      R0,#+1
   \   0000009A   0xBF04             ITT      EQ 
   \   0000009C   0x4658             MOVEQ    R0,R11
   \   0000009E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
    466                  {
    467          			 index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_SERVER);
    468          		 }
    469          		 if(index == -1)
   \   000000A2   0xF110 0x0F01      CMN      R0,#+1
   \   000000A6   0xD017             BEQ.N    ??S2wWebProv_WebProvStart_5
    470          		 {
    471          			 s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
    472          			 S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_SERVER);
    473          			 goto WebProvStartExit;
    474          		 }
    475          		 certDetail.ClientCertName = (const char *)s2w_ssl_cert_table[index].name;
   \   000000A8   0x4368             MULS     R0,R0,R5
   \   000000AA   0x19C1             ADDS     R1,R0,R7
    476                      certDetail.ClientCertLocation = s2w_ssl_cert_table[index].certAddress + 2;        
    477                      certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
    478                      certLength <<= 8;
    479                      certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
    480                      certDetail.ClientCertLen = certLength;
    481          		 index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_KEY);
   \   000000AC   0x.... 0x....      ADR.W    R11,`?<Constant "SSL_KEY">`
   \   000000B0   0x6849             LDR      R1,[R1, #+4]
   \   000000B2   0x9127             STR      R1,[SP, #+156]
   \   000000B4   0x59C0             LDR      R0,[R0, R7]
   \   000000B6   0x1C81             ADDS     R1,R0,#+2
   \   000000B8   0x9128             STR      R1,[SP, #+160]
   \   000000BA   0x.... 0x....      BL       ?Subroutine3
   \                     ??CrossCallReturnLabel_15:
   \   000000BE   0x9029             STR      R0,[SP, #+164]
   \   000000C0   0x4658             MOV      R0,R11
   \   000000C2   0x.... 0x....      BL       S2wCert_SearchRamTable
    482          		 if(index == -1)
   \   000000C6   0xF110 0x0F01      CMN      R0,#+1
   \   000000CA   0xBF04             ITT      EQ 
   \   000000CC   0x4658             MOVEQ    R0,R11
   \   000000CE   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
    483          		 {
    484          			 index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_KEY);
    485                  }
    486          		 if(index == -1)
   \   000000D2   0xF110 0x0F01      CMN      R0,#+1
   \   000000D6   0xD108             BNE.N    ??S2wWebProv_WebProvStart_6
    487                  {      	
    488          			s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \                     ??S2wWebProv_WebProvStart_5:
   \   000000D8   0x6820             LDR      R0,[R4, #+0]
   \   000000DA   0x2101             MOVS     R1,#+1
   \   000000DC   0xF809 0x1000      STRB     R1,[R9, R0]
    489          			 S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_KEY);
   \   000000E0   0x4659             MOV      R1,R11
   \                     ??S2wWebProv_WebProvStart_4:
   \   000000E2   0x4630             MOV      R0,R6
   \   000000E4   0x.... 0x....      BL       S2w_Printf
    490          			goto WebProvStartExit;
   \   000000E8   0xE0CF             B.N      ??S2wWebProv_WebProvStart_7
    491                  }
    492          		 certDetail.PrivateKeyName = (const char *)s2w_ssl_cert_table[index].name;
   \                     ??S2wWebProv_WebProvStart_6:
   \   000000EA   0x4368             MULS     R0,R0,R5
   \   000000EC   0x19C1             ADDS     R1,R0,R7
   \   000000EE   0x6849             LDR      R1,[R1, #+4]
   \   000000F0   0x912A             STR      R1,[SP, #+168]
    493                      certDetail.PrivateKeyLocation = s2w_ssl_cert_table[index].certAddress + 2;        
   \   000000F2   0x59C0             LDR      R0,[R0, R7]
   \   000000F4   0x1C81             ADDS     R1,R0,#+2
   \   000000F6   0x912B             STR      R1,[SP, #+172]
    494                      certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
    495                      certLength <<= 8;
    496                      certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
    497                      certDetail.PrivateKeyLen = certLength;
   \   000000F8   0x.... 0x....      BL       ?Subroutine3
    498           
    499          #else
    500          //#else
    501                  certDetail.CaCertName = "ca_cert.crt";
    502                  certDetail.CaCertLocation = ca_cert;
    503                  certDetail.CaCertLen = sizeof(ca_cert);
    504                  certDetail.ClientCertName = "server_cert.crt";
    505                  certDetail.ClientCertLocation = server_cert;
    506                  certDetail.ClientCertLen = sizeof(server_cert);    
    507                  certDetail.PrivateKeyName = "server_key.key";
    508                  certDetail.PrivateKeyLocation = server_key;
    509                  certDetail.PrivateKeyLen = sizeof(server_key);
    510          #endif
    511              }
   \                     ??CrossCallReturnLabel_16:
   \   000000FC   0x902C             STR      R0,[SP, #+176]
    512          	storeParams = s2wappMainTaskCtxt->WebServerCfg.storeParams;
   \                     ??S2wWebProv_WebProvStart_2:
   \   000000FE   0xF646 0x317A      MOVW     R1,#+27514
   \   00000102   0x6820             LDR      R0,[R4, #+0]
   \   00000104   0x.... 0x....      LDR.W    R2,??DataTable68
   \   00000108   0x5C09             LDRB     R1,[R1, R0]
   \   0000010A   0x7011             STRB     R1,[R2, #+0]
    513              /* we will be sharing the stack with n/w receive task */
    514              /*GsnOsal_ThreadDelete(&s2wappMainTaskCtxt->s2wNetRxTask);*/
    515          
    516              /* get the ip information by calling geps API */
    517              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx, &nwParams);
   \   0000010C   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000110   0xA932             ADD      R1,SP,#+200
   \   00000112   0x3050             ADDS     R0,R0,#+80
   \   00000114   0x.... 0x....      BL       GsnNwIf_IpConfigGet
    518              //inet_ntop(AF_INET, &nwParams.ipv4.ipAddr, ipAddrStr, sizeof(ipAddrStr));
    519          #ifdef TRROM_FILE_SYS
    520              /* initialise the Rom File System that contains Welcome Page*/
    521              tfRomFsInit(tlRomFile, tlRomPageSize, tlRomPages, tlRomFiles);
    522          #endif
    523          
    524              /* Initialize web parameters */
    525              memset(&config, 0, sizeof(GSN_HTTPD_CONFIG_T));
   \   00000118   0x228C             MOVS     R2,#+140
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0xA858             ADD      R0,SP,#+352
   \   0000011E   0x.... 0x....      BL       memset
    526          
    527              /* store user mane and passwd*/
    528              strcpy(config.username, s2wappMainTaskCtxt->WebServerCfg.username);
   \   00000122   0xF8D4 0xB000      LDR      R11,[R4, #+0]
   \   00000126   0xF50B 0x41D6      ADD      R1,R11,#+27392
   \   0000012A   0x3156             ADDS     R1,R1,#+86
   \   0000012C   0xA862             ADD      R0,SP,#+392
   \   0000012E   0x.... 0x....      BL       strcpy
    529              strcpy(config.password, s2wappMainTaskCtxt->WebServerCfg.passwd);
   \   00000132   0xF50B 0x41D6      ADD      R1,R11,#+27392
   \   00000136   0x3167             ADDS     R1,R1,#+103
   \   00000138   0xA86A             ADD      R0,SP,#+424
   \   0000013A   0x.... 0x....      BL       strcpy
    530              config.port = APP_HTTPD_PORT;
   \   0000013E   0xAE5D             ADD      R6,SP,#+372
   \   00000140   0x2050             MOVS     R0,#+80
   \   00000142   0x6070             STR      R0,[R6, #+4]
    531              config.maxConnPerIp = APP_HTTPD_MAX_PER_IP_CONN;
    532              config.maxConnTotal = APP_HTTPD_MAX_TOTAL_CONN;
    533              config.blockingState = APP_HTTPD_BLOCKING_STATE;
    534              config.threadPriority = APP_HTTPD_THREAD_PRIORITY;
    535              config.idleTimeout = APP_HTTPD_IDLE_TIMEOUT;
    536          	config.sysQualTskID = APP_CFG_SQ_HTTPD_TASK_ID;
   \   00000144   0xAD76             ADD      R5,SP,#+472
   \   00000146   0x2010             MOVS     R0,#+16
   \   00000148   0x7270             STRB     R0,[R6, #+9]
   \   0000014A   0x2020             MOVS     R0,#+32
   \   0000014C   0x7230             STRB     R0,[R6, #+8]
   \   0000014E   0x2001             MOVS     R0,#+1
   \   00000150   0x72F0             STRB     R0,[R6, #+11]
   \   00000152   0x2010             MOVS     R0,#+16
   \   00000154   0x7330             STRB     R0,[R6, #+12]
   \   00000156   0x2005             MOVS     R0,#+5
   \   00000158   0x72B0             STRB     R0,[R6, #+10]
   \   0000015A   0x2007             MOVS     R0,#+7
   \   0000015C   0x60E8             STR      R0,[R5, #+12]
    537          	config.sysQualTicks = APP_CFG_SQ_TICKS_FOR_HTTPD_TASK;
   \   0000015E   0x2078             MOVS     R0,#+120
   \   00000160   0x6128             STR      R0,[R5, #+16]
   \   00000162   0xF646 0x307C      MOVW     R0,#+27516
   \   00000166   0xF830 0x000B      LDRH     R0,[R0, R11]
   \   0000016A   0xB100             CBZ.N    R0,??S2wWebProv_WebProvStart_8
    538          	if(0 != s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut)
    539          	{
    540          		config.idleTimeout = s2wappMainTaskCtxt->WebServerCfg.IdleTimeOut;
   \   0000016C   0x72B0             STRB     R0,[R6, #+10]
    541          	}
    542          
    543          
    544          #ifdef USE_V6
    545              //memcpy(config.ipAddr, (const INT8 *)nwParams.ipv6.linkLocalAddr, 16);
    546          	config.ip_flag = GSN_USE_IPV6;
    547              memcpy(config.ipAddr6, s2wappMainTaskCtxt->if0.nwifCtx.ipHndl.nx_ip_interface[0].nxd_interface_ipv6_address_list_head->nxd_ipv6_address_next->nxd_ipv6_address, 16);
    548          #else
    549              config.ip_flag = GSN_USE_IPV4;
   \                     ??S2wWebProv_WebProvStart_8:
   \   0000016E   0x2002             MOVS     R0,#+2
   \   00000170   0xF88D 0x0160      STRB     R0,[SP, #+352]
    550              config.ipAddr = nwParams.ipv4.ipAddr;
    551          #endif
    552              config.rootCgiDir = NULL;
    553              config.rootDir = "/";
    554              config.defaultFileName = "index.html";
    555          	config.mallocTimeout = 2 *1000; /* 2 Sec. */
   \   00000174   0xF44F 0x67FA      MOV      R7,#+2000
   \   00000178   0x9835             LDR      R0,[SP, #+212]
   \   0000017A   0x905D             STR      R0,[SP, #+372]
   \   0000017C   0x2000             MOVS     R0,#+0
   \   0000017E   0x65F0             STR      R0,[R6, #+92]
   \   00000180   0x....             ADR.N    R0,??DataTable66  ;; "/"
   \   00000182   0x6570             STR      R0,[R6, #+84]
   \   00000184   0x.... 0x....      ADR.W    R0,`?<Constant "index.html">`
   \   00000188   0x65B0             STR      R0,[R6, #+88]
   \   0000018A   0x606F             STR      R7,[R5, #+4]
    556          
    557              config.stack = S2wApp_WebserverStack_Get(s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \   0000018C   0xF81A 0x000B      LDRB     R0,[R10, R11]
   \   00000190   0x.... 0x....      BL       S2wApp_WebserverStack_Get
    558          	 pS2wHttpdTaskStack = config.stack;
   \   00000194   0x.... 0x....      LDR.W    R10,??DataTable69
   \   00000198   0x6630             STR      R0,[R6, #+96]
   \   0000019A   0xF8CA 0x0000      STR      R0,[R10, #+0]
    559          	 if(NULL == config.stack)
   \   0000019E   0x6E31             LDR      R1,[R6, #+96]
   \   000001A0   0x6820             LDR      R0,[R4, #+0]
   \   000001A2   0xB311             CBZ.N    R1,??S2wWebProv_WebProvStart_9
    560          	{
    561          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
    562          		goto WebProvStartExit;
    563               
    564          	}
    565              config.stackSize  = S2wApp_WebserverStackSize_Get(s2wappMainTaskCtxt->WebServerCfg.sslEnabled);
   \   000001A4   0xF44F 0x5180      MOV      R1,#+4096
   \   000001A8   0xF8AD 0x11D8      STRH     R1,[SP, #+472]
    566              //config.pWdd = &s2wappMainTaskCtxt->wdd;
    567          
    568              //config.pool_hdl = trPktPoolHndl;//&(s2wappMainTaskCtxt->nwCtx.trPktPoolHndl);
    569              //config.pool_hdl = &(s2wappMainTaskCtxt->nwCtx.trPktPoolHndl);
    570              /* Initialize web parameters */
    571              //memset(&trPktPoolHndl, 0, sizeof(trPktPoolHndl));
    572              /* TODO: need to check proper place to free this buffer */
    573          #if 1
    574          
    575              config.pool_hdl = GsnNw_PktPoolHndlGet(&s2wappMainTaskCtxt->nwCtx, GSN_NW_LBUF_PKT_POOL);
   \   000001AC   0xF500 0x6014      ADD      R0,R0,#+2368
   \   000001B0   0x2101             MOVS     R1,#+1
   \   000001B2   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   000001B6   0x60A8             STR      R0,[R5, #+8]
    576          #endif
    577          
    578          
    579              config.mallocTimeout = 2 *1000; /* 2 Sec. */
   \   000001B8   0x606F             STR      R7,[R5, #+4]
    580              /* Start httpd */
    581              httpdStatus = GsnHttpd_Start(config ,pCertDtl  );
    582          	if(httpdStatus == GSN_HTTPD_FAILURE)
   \   000001BA   0xF8CD 0x807C      STR      R8,[SP, #+124]
   \   000001BE   0xA958             ADD      R1,SP,#+352
   \   000001C0   0xB084             SUB      SP,SP,#+16
   \   000001C2   0x4668             MOV      R0,SP
   \   000001C4   0x228C             MOVS     R2,#+140
   \   000001C6   0x.... 0x....      BL       __aeabi_memcpy4
   \   000001CA   0xBC0F             POP      {R0-R3}
   \   000001CC   0x.... 0x....      BL       GsnHttpd_Start
   \   000001D0   0x2801             CMP      R0,#+1
   \   000001D2   0xD10C             BNE.N    ??S2wWebProv_WebProvStart_0
    583          	{
    584                  S2wApp_WebserverStack_Free(config.stack);
   \   000001D4   0x6E30             LDR      R0,[R6, #+96]
   \   000001D6   0x.... 0x....      BL       GsnDynMemMgmt_Free
    585          		pS2wHttpdTaskStack = NULL;
   \   000001DA   0x2000             MOVS     R0,#+0
   \   000001DC   0xF8CA 0x0000      STR      R0,[R10, #+0]
    586          #ifdef  S2W_NCM_SUPPORT_ENABLE
    587          		s2wappMainTaskCtxt->ncmAutoConEn = 0;
   \   000001E0   0x2200             MOVS     R2,#+0
   \   000001E2   0x6820             LDR      R0,[R4, #+0]
   \   000001E4   0xF500 0x41EA      ADD      R1,R0,#+29952
   \   000001E8   0x600A             STR      R2,[R1, #+0]
    588          #endif
    589          		s2wappMainTaskCtxt->WebServerCfg.status = S2W_FAILURE;
   \                     ??S2wWebProv_WebProvStart_9:
   \   000001EA   0x2101             MOVS     R1,#+1
   \   000001EC   0xE04B             B.N      ??S2wWebProv_WebProvStart_10
    590          		goto WebProvStartExit;
    591          	}
    592          WebProvUriRegister:
    593          
    594          #ifdef ADK_PROV
    595              /* System Configuration URI Handler  */
    596              GsnHttpdApi_ConfigInit(S2wWeb_Config);
   \                     ??S2wWebProv_WebProvStart_0:
   \   000001EE   0x.... 0x....      ADR.W    R0,S2wWeb_Config
   \   000001F2   0x.... 0x....      BL       GsnHttpdApi_ConfigInit
    597          
    598              /* Scan Configuration URI Handler */
    599              memset(&provConfig, 0x0, sizeof(provConfig));
   \   000001F6   0x220C             MOVS     R2,#+12
   \   000001F8   0x2100             MOVS     R1,#+0
   \   000001FA   0xA821             ADD      R0,SP,#+132
   \   000001FC   0x.... 0x....      BL       memset
    600            //  provConfig.pWdd = &(s2wappMainTaskCtxt->wdd);
    601              //AppCfg_Get( APP_CFG_REG_DOMAIN_ID, &regDomain);
    602              provConfig.domain = (GSN_WLAN_REG_DOMAIN_T)s2wCurrent.regDomain;
   \   00000200   0x....             LDR.N    R1,??DataTable67_4
   \   00000202   0xF891 0x1395      LDRB     R1,[R1, #+917]
   \   00000206   0xF88D 0x108C      STRB     R1,[SP, #+140]
    603          	provConfig.pWdd = &s2wappMainTaskCtxt->if0.wddCtx;
   \   0000020A   0x6821             LDR      R1,[R4, #+0]
   \   0000020C   0xF601 0x61E0      ADDW     R1,R1,#+3808
   \   00000210   0x9121             STR      R1,[SP, #+132]
    604          #ifdef S2W_SECURITY_WPS_ENABLE
    605              provConfig.pWpsCbFn = (GSN_HTTPD_PROV_WPS_CB_FN_T) S2wWebProv_WpsCbFn;
   \   00000212   0x.... 0x....      LDR.W    R1,??DataTable69_1
   \   00000216   0x9122             STR      R1,[SP, #+136]
    606          #endif
    607              GsnHttpdApi_ProvInit(&provConfig);
   \   00000218   0x.... 0x....      BL       GsnHttpdApi_ProvInit
    608          #endif
    609          
    610          #ifdef S2W_HTTPD_DATE_CONFIG
    611          		GsnHttpd_UriHandlerConfig("/gainspan/system/time", GSN_HTTPD_URI_METHOD_GET_POST,
    612          			"Date/Time Configuration", AppS2w_configTimecb, GSN_HTTPD_CONTENT_APP_XML);
    613          #endif
    614          #ifdef S2W_HTTPD_SSLCERT_UPLOAD
    615          		GsnHttpd_UriHandlerConfig("/gainspan/system/certs", GSN_HTTPD_URI_METHOD_GET_POST,
    616          			"SSL Certificate Configuration", AppS2w_SslCertcb, GSN_HTTPD_CONTENT_APP_XML);
   \   0000021C   0x2000             MOVS     R0,#+0
   \   0000021E   0x9000             STR      R0,[SP, #+0]
   \   00000220   0x2103             MOVS     R1,#+3
   \   00000222   0x.... 0x....      ADR.W    R3,AppS2w_SslCertcb
   \   00000226   0x.... 0x....      ADR.W    R2,`?<Constant "SSL Certificate Confi...">`
   \   0000022A   0x.... 0x....      ADR.W    R0,`?<Constant "/gainspan/system/certs">`
   \   0000022E   0x.... 0x....      BL       GsnHttpd_UriHandlerConfig
    617          #endif
    618              /* API Configuration URI Handler */
    619              GsnHttpdApi_ApiInit();
   \   00000232   0x.... 0x....      BL       GsnHttpdApi_ApiInit
    620             // tfHttpdUserSendFile (1,"/html.html",0);
    621          #ifdef S2W_WEB_SRVR_LOGO_INTRNL_FLASH
    622              /* Logo Configuration URI Handler*/
    623              GsnHttpdApi_LogoInit(App_LogoInfoCb);
    624          #endif
    625              /* Initiailze version handlers */
    626           	GsnSysCtl_WlanFwVerGet(&s2wappMainTaskCtxt->sysCtlCtx,&wlanVer);
   \   00000236   0x6820             LDR      R0,[R4, #+0]
   \   00000238   0xA920             ADD      R1,SP,#+128
   \   0000023A   0xF500 0x60A9      ADD      R0,R0,#+1352
   \   0000023E   0x.... 0x....      BL       GsnSysCtl_WlanFwVerGet
    627              GsnHttpdApi_FwInit(wlanVer, S2W_SW_VERSION);//S2W_BUILD_VERSION);
   \   00000242   0x9820             LDR      R0,[SP, #+128]
   \   00000244   0x.... 0x....      ADR.W    R1,`?<Constant "5.1.5">`
   \   00000248   0x.... 0x....      BL       GsnHttpdApi_FwInit
    628          
    629          
    630          
    631          
    632          #ifdef S2W_FILE_UPLOAD_API
    633          	GsnHttpd_FileApiInit();
   \   0000024C   0x.... 0x....      BL       GsnHttpd_FileApiInit
    634          	/* Register URI handler for certificate upload. */
    635          	GsnHttpd_FileApiConfig("/gainspan/system/wpacertupload", S2wWebProv_FileUploadCb, GSN_HTTPD_URI_METHOD_POST);
   \   00000250   0x.... 0x....      LDR.W    R6,??DataTable69_2
   \   00000254   0x.... 0x....      ADR.W    R0,`?<Constant "/gainspan/system/wpac...">`
   \   00000258   0x2202             MOVS     R2,#+2
   \   0000025A   0x4631             MOV      R1,R6
   \   0000025C   0x.... 0x....      BL       GsnHttpd_FileApiConfig
    636          	GsnHttpd_FileApiConfig(GSN_SSLCERTUPLOAD_URI, S2wWebProv_FileUploadCb, GSN_HTTPD_URI_METHOD_POST);	
   \   00000260   0x2202             MOVS     R2,#+2
   \   00000262   0x4631             MOV      R1,R6
   \   00000264   0x.... 0x....      ADR.W    R0,`?<Constant "/gainspan/system/sslc...">_1`
   \   00000268   0x.... 0x....      BL       GsnHttpd_FileApiConfig
    637          #ifdef S2W_EXT_FLASH_FWUP_PUSH_METHOD
    638          #ifdef ADK_OTAFU
    639          	/* Register URI handler for external flash firmware update */
    640          	//GsnHttpd_FileApiConfig("/gainspan/system/fwuploc", S2wFileUpload_FwupCb, GSN_HTTPD_URI_METHOD_POST);
    641          	AppOtafu_Init(s2wappMainTaskCtxt);
   \   0000026C   0x6820             LDR      R0,[R4, #+0]
   \   0000026E   0x.... 0x....      BL       AppOtafu_Init
    642          	AppExtOtafu_Init(s2wappMainTaskCtxt);
   \   00000272   0x6820             LDR      R0,[R4, #+0]
   \   00000274   0x.... 0x....      BL       AppExtOtafu_Init
    643          
    644          #endif
    645          #endif
    646          #endif	
    647             // webProvFlag = 1;
    648          #ifdef S2W_WEB_PROV
    649          	s2wappMainTaskCtxt->webProvStatus= RUNNING;	
   \   00000278   0x6821             LDR      R1,[R4, #+0]
   \   0000027A   0xF646 0x402C      MOVW     R0,#+27692
   \   0000027E   0x2202             MOVS     R2,#+2
   \   00000280   0x5442             STRB     R2,[R0, R1]
    650          #endif
    651          	s2wappMainTaskCtxt->WebServerCfg.status =S2W_SUCCESS;
   \   00000282   0x2100             MOVS     R1,#+0
   \   00000284   0x6820             LDR      R0,[R4, #+0]
   \                     ??S2wWebProv_WebProvStart_10:
   \   00000286   0xF809 0x1000      STRB     R1,[R9, R0]
    652          WebProvStartExit:	
    653          	GsnOsal_SemRelease(&s2wappMainTaskCtxt->webServerSync);
   \                     ??S2wWebProv_WebProvStart_7:
   \   0000028A   0x6820             LDR      R0,[R4, #+0]
   \   0000028C   0xF500 0x40D7      ADD      R0,R0,#+27520
   \   00000290   0x.... 0x....      BL       _tx_semaphore_put
    654          	// flush the data for spi-dma interface
    655              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   00000294   0x6821             LDR      R1,[R4, #+0]
   \   00000296   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000029A   0x5C40             LDRB     R0,[R0, R1]
   \   0000029C   0x2802             CMP      R0,#+2
   \   0000029E   0xBF08             IT       EQ 
   \   000002A0   0x.... 0x....      BLEQ     s2wSpiFs_Flush
    656              {
    657                  s2wSpiFs_Flush();
    658              }
    659          
    660          }
   \   000002A4   0xB07B             ADD      SP,SP,#+492
   \   000002A6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000008   0x4770             BX       LR
    661          //#endif
    662          #ifdef S2W_WEB_SRVR_LOGO_INTRNL_FLASH
    663          PUBLIC UINT32
    664          S2wWebProv_webLogoStore(UINT8 *pLogo, UINT32 logoLen)
    665          {
    666             UINT8 *p = (UINT8 *)GSN_FACT_DFLT_START_ADDR;
    667             UINT32 tempLen;
    668             UINT32 tempBuff[8];/* 32 bytes buffer*/
    669             UINT32 *factryDfltSetngs;
    670          
    671             if(logoLen > (2044-256))/*2048 - 4: 4 bytes for file length*/
    672             {
    673                  return S2W_FAILURE;
    674             }
    675             
    676             factryDfltSetngs = (UINT32 *)gsn_malloc(256);
    677             
    678             if(NULL == factryDfltSetngs)
    679             {
    680                 return S2W_FAILURE;
    681             }
    682             /* copy factory default settings before erasing the flash*/
    683             memcpy((UINT8 *)factryDfltSetngs, p, 256);
    684             GsnFlash_Erase(p, 2000, 0);
    685             /* write factory default setting back to flash*/
    686             GsnFlash_Write((UINT32 *)p, factryDfltSetngs, 256, 0);
    687             
    688             gsn_free(factryDfltSetngs);
    689          
    690             p = (UINT8 *)GSN_FACT_DFLT_LOGO_ADDR;
    691             GsnFlash_SingleWordWrite((UINT32 *)p, logoLen, 0);
    692             p += sizeof(UINT32);
    693          
    694             tempLen = 0;
    695             while(logoLen)
    696              {
    697                  memset(tempBuff, 0, sizeof(tempBuff));
    698                  tempLen = sizeof(tempBuff);
    699                  if(tempLen > logoLen)
    700                  {
    701                     tempLen =  logoLen;
    702                  }
    703                  memcpy((UINT8 *)tempBuff, pLogo, tempLen);
    704                  
    705                  GsnFlash_Write((UINT32 *)p, tempBuff, tempLen, 0);
    706          
    707                  pLogo += tempLen;
    708                  p += tempLen;
    709                  logoLen -= tempLen;        
    710              }
    711             return S2W_SUCCESS;
    712          }
    713          #endif
    714          
    715          #ifdef S2W_HTTPD_SSLCERT_UPLOAD
    716          
    717          /**
    718           ******************************************************************
    719           * @ingroup S2w-Application
    720           * @brief Process extract SSL certificate name. 
    721           *   This function gets the certificate name from URI.
    722            * @param uri        pointer to to current URI
    723           * @return certName Pointer to certificate name .
    724           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    725          UINT8 * 
    726          AppS2w_CertNameGet(UINT8 *uri)
    727          {
   \                     AppS2w_CertNameGet:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    728          	UINT32 len;
    729          	UINT8 *certName=NULL;
   \   00000004   0x2500             MOVS     R5,#+0
    730          	len = strlen((const char *)uri);
   \   00000006   0x.... 0x....      BL       strlen
   \   0000000A   0xE000             B.N      ??AppS2w_CertNameGet_0
    731          	webPrintf("\r\n URI:%s:%d",uri,len);
    732          	while(len)
    733          	{	
    734          		if(uri[len] == '/')
    735          		{
    736          			certName = (UINT8 *)uri + len + 1;
    737          			break;
    738          		}
    739          		len--;
   \                     ??AppS2w_CertNameGet_1:
   \   0000000C   0x1E40             SUBS     R0,R0,#+1
   \                     ??AppS2w_CertNameGet_0:
   \   0000000E   0xB120             CBZ.N    R0,??AppS2w_CertNameGet_2
   \   00000010   0x5D01             LDRB     R1,[R0, R4]
   \   00000012   0x292F             CMP      R1,#+47
   \   00000014   0xD1FA             BNE.N    ??AppS2w_CertNameGet_1
   \   00000016   0x1900             ADDS     R0,R0,R4
   \   00000018   0x1C45             ADDS     R5,R0,#+1
    740          	}
    741          	webPrintf("\r\n certname:%s",certName);
    742          	return certName;
   \                     ??AppS2w_CertNameGet_2:
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    743          }
    744          
    745          /**
    746           ******************************************************************
    747           * @ingroup S2w-Application
    748           * @brief Process SSL certificate view/delete URI call back. 
    749           *   This function get/delete the certificate loaded basesd on the method. 
    750           * @param event 	ttHttpdUserEvent. 		   						
    751           * @param uri        pointer to current URI
    752           * @param conHandle  Connection handler
    753           * @return o  - operation successful.
    754           * @retval -1  - operation failure-cerificate deletion failed.
    755           ******************************************************************/

   \                                 In section .text, align 4, keep-with-next
    756          GSN_HTTPD_STATUS_T 
    757          AppS2w_SslCertcb(ttHttpdUserEvent event, const char* uri,
    758          										  ttHttpdUserConHandle conHandle)
    759          {
   \                     AppS2w_SslCertcb:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB0EB             SUB      SP,SP,#+428
   \   00000006   0x4605             MOV      R5,R0
    760           	int errorCode;
    761              UINT32 bufferLen=0;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x4688             MOV      R8,R1
   \   0000000C   0x4614             MOV      R4,R2
   \   0000000E   0x9001             STR      R0,[SP, #+4]
    762             
    763          	UINT8* certName;
    764          	F_FIND find;
    765          	INT8* buffer = (INT8 *)GsnHttpd_GetBuffer();	
   \   00000010   0x.... 0x....      BL       GsnHttpd_GetBuffer
   \   00000014   0xEA5F 0x0900      MOVS     R9,R0
    766          	if (!buffer)
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x2001             MOVEQ    R0,#+1
    767          		  return GSN_HTTPD_FAILURE;
   \   0000001C   0xF000 0x8082      BEQ.W    ??AppS2w_SslCertcb_0
    768          	webPrintf("\r\n AppS2w_SslCertcb:%d",event);
    769              switch (event)
   \   00000020   0xF647 0x76F0      MOVW     R6,#+32752
   \   00000024   0x....             LDR.N    R7,??DataTable67_3
   \   00000026   0x2D02             CMP      R5,#+2
   \   00000028   0xD024             BEQ.N    ??AppS2w_SslCertcb_1
   \   0000002A   0x2D06             CMP      R5,#+6
   \   0000002C   0xD176             BNE.N    ??AppS2w_SslCertcb_2
    770          	{
    771          		case TM_HTTPD_EVENT_ALL_RECV:
    772          		{
    773          			if (GsnHttpd_GetHttpMethod(conHandle) ==  TM_HTTP_METHOD_POST)
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       GsnHttpd_GetHttpMethod
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD171             BNE.N    ??AppS2w_SslCertcb_2
    774                  	{
    775          			bufferLen = TM_BODY_BUFFER_LEN;
   \   00000038   0xF44F 0x60C0      MOV      R0,#+1536
   \   0000003C   0x9001             STR      R0,[SP, #+4]
    776          			tfHttpdUserGetRequestBody(conHandle, buffer, (ttUserIntPtr)&bufferLen ,0);
   \   0000003E   0x2300             MOVS     R3,#+0
   \   00000040   0xAA01             ADD      R2,SP,#+4
   \   00000042   0x4649             MOV      R1,R9
   \   00000044   0x4620             MOV      R0,R4
   \   00000046   0x.... 0x....      BL       tfHttpdUserGetRequestBody
    777          			certName = AppS2w_CertNameGet((UINT8 *)uri);
   \   0000004A   0x4640             MOV      R0,R8
   \   0000004C   0x.... 0x....      BL       AppS2w_CertNameGet
   \   00000050   0x0004             MOVS     R4,R0
    778          				if(certName != NULL)
   \   00000052   0xD003             BEQ.N    ??AppS2w_SslCertcb_3
    779          					s2wappMainTaskCtxt->fileOperationStatus = AppS2w_CertDelete(certName);			
   \   00000054   0x.... 0x....      BL       AppS2w_CertDelete
   \   00000058   0x6839             LDR      R1,[R7, #+0]
   \   0000005A   0x5470             STRB     R0,[R6, R1]
    780          			if(strcmp((const char*)certName,S2W_CERT_NAME_CA) == 0) 			
   \                     ??AppS2w_SslCertcb_3:
   \   0000005C   0x4620             MOV      R0,R4
   \   0000005E   0x.... 0x....      ADR.W    R1,`?<Constant "TLS_CA">`
   \   00000062   0x.... 0x....      BL       strcmp
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD158             BNE.N    ??AppS2w_SslCertcb_2
   \   0000006A   0x....             LDR.N    R0,??DataTable67_4
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0xF880 0x1140      STRB     R1,[R0, #+320]
   \   00000072   0xE053             B.N      ??AppS2w_SslCertcb_2
    781          			{
    782          				s2wCurrent.security.eap.useCaCert=0;			
    783          				}
    784          			}
    785          			webPrintf("\r\n STAT:%d",s2wappMainTaskCtxt->fileOperationStatus);
    786          		}
    787          		break;
    788                  case TM_HTTPD_EVENT_SEND_READY:
    789          		{
    790                  	if (GsnHttpd_GetHttpMethod(conHandle) == TM_HTTP_METHOD_GET)
   \                     ??AppS2w_SslCertcb_1:
   \   00000074   0x4620             MOV      R0,R4
   \   00000076   0x.... 0x....      BL       GsnHttpd_GetHttpMethod
   \   0000007A   0x2801             CMP      R0,#+1
   \   0000007C   0xD13A             BNE.N    ??AppS2w_SslCertcb_4
    791                      {
    792                      	bufferLen = sprintf(buffer,"<certs>");	
   \   0000007E   0x4648             MOV      R0,R9
   \   00000080   0x.... 0x....      ADR.W    R1,`?<Constant "<certs>">`
   \   00000084   0x.... 0x....      BL       sprintf
   \   00000088   0x9001             STR      R0,[SP, #+4]
    793          				if (!f_findfirst("A:/certs/*.*",&find)) 
   \   0000008A   0xA903             ADD      R1,SP,#+12
   \   0000008C   0x.... 0x....      ADR.W    R0,`?<Constant "A:/certs/*.*">`
   \   00000090   0x.... 0x....      BL       fsm_findfirst
   \   00000094   0xBB28             CBNZ.N   R0,??AppS2w_SslCertcb_5
    794          				{
    795          				do
    796          				{							
    797          						webPrintf ("filename:%s",find.filename);
    798          						if(find.filename != NULL &&
    799          							(strncmp(find.filename , ".",strlen(find.filename))!=0) && 
    800          							(strncmp(find.filename , "..",strlen(find.filename))!=0))
   \                     ??AppS2w_SslCertcb_6:
   \   00000096   0xF10D 0x000D      ADD      R0,SP,#+13
   \   0000009A   0x.... 0x....      BL       strlen
   \   0000009E   0x4602             MOV      R2,R0
   \   000000A0   0x....             ADR.N    R1,??DataTable67  ;; "."
   \   000000A2   0xF10D 0x000D      ADD      R0,SP,#+13
   \   000000A6   0x.... 0x....      BL       strncmp
   \   000000AA   0xB1A8             CBZ.N    R0,??AppS2w_SslCertcb_7
   \   000000AC   0xF10D 0x000D      ADD      R0,SP,#+13
   \   000000B0   0x.... 0x....      BL       strlen
   \   000000B4   0x4602             MOV      R2,R0
   \   000000B6   0x....             ADR.N    R1,??DataTable67_1  ;; 0x2E, 0x2E, 0x00, 0x00
   \   000000B8   0xF10D 0x000D      ADD      R0,SP,#+13
   \   000000BC   0x.... 0x....      BL       strncmp
   \   000000C0   0xB150             CBZ.N    R0,??AppS2w_SslCertcb_7
    801          					{
    802          							bufferLen += sprintf((buffer+bufferLen),"<cert><name>%s</name></cert>",find.filename);
   \   000000C2   0x9801             LDR      R0,[SP, #+4]
   \   000000C4   0x.... 0x....      ADR.W    R1,`?<Constant "<cert><name>%s</name>...">`
   \   000000C8   0xF10D 0x020D      ADD      R2,SP,#+13
   \   000000CC   0x4448             ADD      R0,R0,R9
   \   000000CE   0x.... 0x....      BL       sprintf
   \   000000D2   0x9901             LDR      R1,[SP, #+4]
   \   000000D4   0x1840             ADDS     R0,R0,R1
   \   000000D6   0x9001             STR      R0,[SP, #+4]
    803          						}
    804          					} while (!f_findnext(&find));
   \                     ??AppS2w_SslCertcb_7:
   \   000000D8   0xA803             ADD      R0,SP,#+12
   \   000000DA   0x.... 0x....      BL       fsm_findnext
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xD0D9             BEQ.N    ??AppS2w_SslCertcb_6
    805          					}
    806          				bufferLen += sprintf((buffer+bufferLen),"</certs>");
   \                     ??AppS2w_SslCertcb_5:
   \   000000E2   0x9801             LDR      R0,[SP, #+4]
   \   000000E4   0x.... 0x....      ADR.W    R1,`?<Constant "</certs>">`
   \   000000E8   0x4448             ADD      R0,R0,R9
   \   000000EA   0x.... 0x....      BL       sprintf
   \   000000EE   0x9901             LDR      R1,[SP, #+4]
   \   000000F0   0x1840             ADDS     R0,R0,R1
   \   000000F2   0xE00A             B.N      ??AppS2w_SslCertcb_8
    807                  	}
    808                      else
    809                      {
    810                      	if(s2wappMainTaskCtxt->fileOperationStatus == S2W_SUCCESS)
   \                     ??AppS2w_SslCertcb_4:
   \   000000F4   0x6838             LDR      R0,[R7, #+0]
   \   000000F6   0x5C30             LDRB     R0,[R6, R0]
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xBF0C             ITE      EQ 
   \   000000FC   0x.... 0x....      ADREQ.W  R1,`?<Constant "<status>ok</status>">`
   \   00000100   0x.... 0x....      ADRNE.W  R1,`?<Constant "<status>error</status>">`
    811                          	bufferLen = sprintf(buffer, "<status>ok</status>");
    812          				else
    813          					bufferLen = sprintf(buffer, "<status>error</status>");
   \   00000104   0x4648             MOV      R0,R9
   \   00000106   0x.... 0x....      BL       sprintf
   \                     ??AppS2w_SslCertcb_8:
   \   0000010A   0x9001             STR      R0,[SP, #+4]
    814                      }
    815                      GsnHttpd_SendBufferAndLastChunk(conHandle, buffer, bufferLen, TM_BLOCKING_ON, &errorCode);
   \   0000010C   0xA802             ADD      R0,SP,#+8
   \   0000010E   0x9000             STR      R0,[SP, #+0]
   \   00000110   0x2301             MOVS     R3,#+1
   \   00000112   0x9A01             LDR      R2,[SP, #+4]
   \   00000114   0x4649             MOV      R1,R9
   \   00000116   0x4620             MOV      R0,R4
   \   00000118   0x.... 0x....      BL       GsnHttpd_SendBufferAndLastChunk
    816          		}
    817          		break;
    818              }
    819              if (buffer)
    820              {
    821              	GsnHttpd_ReleaseBuffer(buffer);
   \                     ??AppS2w_SslCertcb_2:
   \   0000011C   0x4648             MOV      R0,R9
   \   0000011E   0x.... 0x....      BL       GsnHttpd_ReleaseBuffer
    822              	buffer = NULL;
    823              }
    824          	return GSN_HTTPD_SUCCESS;
   \   00000122   0x2000             MOVS     R0,#+0
   \                     ??AppS2w_SslCertcb_0:
   \   00000124   0xB06B             ADD      SP,SP,#+428
   \   00000126   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    825          }
    826          #endif
    827          
    828          #ifdef S2W_HTTPD_DATE_CONFIG
    829          /**
    830           ******************************************************************
    831           * @ingroup S2w-Application
    832           * @brief Process extract time from the http body . 
    833           *   This function parse the time from XML data.
    834            * @param buffer        pointer to buffer
    835            * @param bufferLen   buffer Length
    836           * @return iptime extracted time.
    837           ******************************************************************/
    838          ULONG64
    839          AppS2w_ParseTime(INT8 *buffer ,INT32 bufferLen)
    840          {
    841          	INT8 *start,*end;
    842          	ULONG64 iptime;
    843          	INT8 p[16];
    844          	memset(p,0,16);
    845          	start =  strstr(buffer,">");
    846          	start++;
    847          	end =  strstr(start,"<");	
    848          	memcpy(p,start,(end-start));
    849          	AppS2wParse_64BitNumber(p,&iptime);
    850          	webPrintf("\r\n Time:%lld",iptime);
    851          	return iptime;
    852          }
    853          
    854          /**
    855           ******************************************************************
    856           * @ingroup S2w-Application
    857           * @brief Process time set/get URI call back. 
    858           *   This function get/set the time. 
    859           * @param event 	ttHttpdUserEvent. 		   						
    860           * @param uri        pointer to current URI
    861           * @param conHandle  Connection handler
    862           * @return o  - operation successful.
    863           * @retval -1  - operation failure-cerificate deletion failed.
    864           ******************************************************************/
    865          GSN_HTTPD_STATUS_T 
    866          AppS2w_configTimecb(ttHttpdUserEvent event, const char* uri, 
    867          											ttHttpdUserConHandle conHandle)
    868          {
    869           	int errorCode;
    870              UINT32 bufferLen=0,len=0;
    871          	ULONG64 ipTime;	
    872          	INT8* buffer = (INT8 *)GsnHttpd_GetBuffer();	
    873          	if (!buffer)
    874          		  return GSN_HTTPD_FAILURE;
    875              switch (event)
    876              {
    877          		case TM_HTTPD_EVENT_BODY_RECV:
    878          		{
    879          			bufferLen = TM_BODY_BUFFER_LEN;
    880          			tfHttpdUserGetRequestBody(conHandle, buffer, (ttUserIntPtr)&bufferLen ,0);
    881          			ipTime = AppS2w_ParseTime(buffer,bufferLen);
    882          			AppS2w_SetTime(ipTime);
    883          		}
    884          		break;
    885           		case TM_HTTPD_EVENT_SEND_READY:
    886          		{
    887                  	if (GsnHttpd_GetHttpMethod(conHandle) == TM_HTTP_METHOD_GET)
    888                         	bufferLen = sprintf(buffer,"<time>%lld</time>",AppS2w_GetTime());	
    889          			else		
    890          				bufferLen = sprintf(buffer, "<status>ok</status>"); 		
    891              	    GsnHttpd_SendBufferAndLastChunk(conHandle, buffer, bufferLen, TM_BLOCKING_ON, &errorCode);			
    892          		}
    893          		break;
    894          	}
    895              if (buffer)
    896              {
    897              	GsnHttpd_ReleaseBuffer(buffer);
    898              	buffer = NULL;
    899          	}
    900          	return GSN_HTTPD_SUCCESS;
    901          }
    902          #endif
    903          
    904          #ifdef ADK_PROV
    905          
    906          /*******************************************************************************
    907           *  Private Functions
    908           ******************************************************************************/
    909           /*
    910            * Callback function for the /gainspan/config handler
    911            * It is up to the application to deal with the configuration.
    912            * This function further dispatches GET and POST
    913            * separately.
    914            */

   \                                 In section .text, align 4, keep-with-next
    915           PRIVATE VOID
    916           S2wWeb_Config(GSN_SYS_CONFIG_T *pConfig, UINT8 method)
    917           {
    918               //webPrintf("[S2W] Configuration callback:%d\r\n",method);
    919               if (method == GSN_HTTPD_URI_METHOD_GET)
   \                     S2wWeb_Config:
   \   00000000   0x2901             CMP      R1,#+1
   \   00000002   0xBF08             IT       EQ 
   \   00000004   0x.... 0x....      BEQ.W    S2wConfig_GetValues
    920                   S2wConfig_GetValues(pConfig);
    921               if (method == GSN_HTTPD_URI_METHOD_POST)
   \   00000008   0x2902             CMP      R1,#+2
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x.... 0x....      BEQ.W    S2wConfig_SetValues
    922                        S2wConfig_SetValues(pConfig);
    923               
    924               
    925               return;
   \   00000010   0x4770             BX       LR               ;; return
    926           }

   \                                 In section .data, align 4
   \                     prePoplnDone:
   \   00000000   0x00               DC8 0
   \   00000001   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    927          #endif /*  #ifdef ADK_PROV */
    928          
    929          #if 0
    930          /*Outer type          Inner type           Security*/
    931          
    932          /*.................................................*/
    933          #define S2W_WEB_EAPAUTH_TBL_ENTRY	6
    934          /*Outer type, inner type*/
    935          UINT32 eapAuthTable[S2W_WEB_EAPAUTH_TBL_ENTRY][3]=
    936          {{43, 26, GSN_EAP_TYPE_FAST},/*  EAP- FAST */
    937          {21, 26, GSN_EAP_TYPE_TTLS},/*EAP-TTLS*/
    938          {13, 26, GSN_EAP_TYPE_TLS},/*EAP- TLS*/
    939          {25, 26, GSN_EAP_TYPE_PEAP},/*EAP- PEAPV0*/
    940          {25, 6, GSN_EAP_TYPE_NONE},/*EAP- PEAPV1*/
    941          {43, 6, GSN_EAP_TYPE_NONE},/*EAP- GTC*/
    942          };
    943          
    944          #if 0
    945          PRIVATE GSN_STATUS 
    946          S2wWeb_EapAuthTypeGet(UINT32 eapType, UINT32 *outrAuth, UINT32 *innerAuth)
    947          {
    948          	UINT8 i;
    949          	GSN_STATUS retVal = GSN_FAILURE;
    950          	for(i = 0; i < S2W_WEB_EAPAUTH_TBL_ENTRY; i++)
    951          		{
    952          			if(eapAuthTable[i][2] == eapType)
    953          				{
    954          					*outrAuth = eapAuthTable[i][0];
    955          					*innerAuth = eapAuthTable[i][1];
    956          					retVal = GSN_SUCCESS;
    957          					break;
    958          				}
    959          		}
    960          	return retVal;
    961          }
    962          #endif
    963          #else
    964          /*Outer type          Inner type           Security*/
    965          
    966          /*.................................................*/
    967          #define S2W_WEB_EAPAUTH_TBL_ENTRY	7
    968          /*Outer type, inner type*/
    969          UINT32 eapAuthTable[S2W_WEB_EAPAUTH_TBL_ENTRY][2]=
   \                     eapAuthTable:
   \   00000004   0x0000002B         DC32 43, 26, 21, 26, 13, 26, 25, 26, 25, 6, 43, 6, 0, 0
   \              0x0000001A   
   \              0x00000015   
   \              0x0000001A   
   \              0x0000000D   
   \              0x0000001A   
   \              0x00000019   
   \              0x0000001A   
   \              0x00000019   
   \              0x00000006   
   \              0x0000002B   
   \              0x00000006   
   \              0x00000000   
   \              0x00000000   
    970          {
    971          	{43, 26,},	/*  EAP- FAST */
    972          	{21, 26},	/*EAP-TTLS*/
    973          	{13, 26},	/*EAP- TLS*/
    974          	{25, 26},	/*EAP- PEAPV0*/
    975          	{25, 6 },	/*EAP- PEAPV1*/
    976          	{43, 6 },	/*EAP- GTC*/
    977          	{0,  0 }	/*None*/
    978          };
    979          
    980          PRIVATE UINT32 
    981          S2wWeb_EapAuthTypeGet( UINT8 outrAuth, UINT8 innerAuth)
    982          {
    983          	UINT8 i;
    984          	UINT32 retVal = S2W_WEB_EAPAUTH_TBL_ENTRY;
    985          	for(i = 0; i < S2W_WEB_EAPAUTH_TBL_ENTRY; i++)
    986          		{
    987          		if(outrAuth == eapAuthTable[i][0] && innerAuth == eapAuthTable[i][1])
    988          				{
    989          			retVal = i;
    990          				}
    991          		}
    992          	return retVal;
    993          }

   \                                 In section .text, align 2, keep-with-next
    994          void S2wWeb_EapAuthTypeSet( UINT8 eapType,UINT32 *outrAuth, UINT32 *innerAuth)
    995          {
    996          	if(eapType < S2W_WEB_EAPAUTH_TBL_ENTRY)
   \                     S2wWeb_EapAuthTypeSet:
   \   00000000   0x2807             CMP      R0,#+7
   \   00000002   0xDA07             BGE.N    ??S2wWeb_EapAuthTypeSet_0
    997          	{
    998          		*outrAuth  = eapAuthTable[eapType][0];
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable70
   \   00000008   0xEB03 0x00C0      ADD      R0,R3,R0, LSL #+3
   \   0000000C   0x6843             LDR      R3,[R0, #+4]
   \   0000000E   0x600B             STR      R3,[R1, #+0]
    999          		*innerAuth = eapAuthTable[eapType][1];	
   \   00000010   0x6880             LDR      R0,[R0, #+8]
   \   00000012   0x6010             STR      R0,[R2, #+0]
   1000          	}
   1001          }
   \                     ??S2wWeb_EapAuthTypeSet_0:
   \   00000014   0x4770             BX       LR               ;; return
   1002          
   1003          #endif
   1004          #ifdef ADK_PROV
   1005          
   1006          /* send info to host */

   \                                 In section .text, align 4, keep-with-next
   1007          PRIVATE VOID S2wConfig_SetValues(GSN_SYS_CONFIG_T *pConfig)
   1008          {
   \                     S2wConfig_SetValues:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xF2AD 0x7DFC      SUBW     SP,SP,#+2044
   \   00000008   0x4604             MOV      R4,R0
   1009              UINT32 ipAddr =0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   1010              S2W_FLASH_PARAMS_T flashParams;
   1011              S2W_PROFILE_T *pS2wProfile;
   1012              APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();  
   1013               
   1014              pS2wProfile = &s2wCurrent;/*Store values in current profile*/
   1015             
   1016              memset(&flashParams, 0, sizeof(S2W_FLASH_PARAMS_T));    
   \   0000000E   0xF44F 0x62FE      MOV      R2,#+2032
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0xA802             ADD      R0,SP,#+8
   \   00000016   0x.... 0x....      BL       memset
   1017              if (pConfig->sysConfigChangeApply)
   \   0000001A   0x7820             LDRB     R0,[R4, #+0]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xF000 0x8351      BEQ.W    ??S2wConfig_SetValues_0
   1018              {
   1019          
   1020          #ifdef ADK_PROV_CONFIG_CLIENT
   1021          	if(S2W_WEB_PARAMS_STORE == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   \   00000022   0x.... 0x....      LDR.W    R8,??DataTable68
   \   00000026   0x.... 0x....      LDR.W    R11,??DataTable69_3
   \   0000002A   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   0000002E   0xF204 0x1725      ADDW     R7,R4,#+293
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xBF18             IT       NE 
   \   00000036   0x2802             CMPNE    R0,#+2
   \   00000038   0xF040 0x810B      BNE.W    ??CrossCallReturnLabel_3
   1022          	{
   1023          /*ssid*/
   1024          	    if((strncmp(pS2wProfile->security.wpa.ssid,(char*)pConfig->networkConfig.clientConfig.ssid.array,
   1025          	           pConfig->networkConfig.clientConfig.ssid.length)))
   \   0000003C   0xF20B 0x1A15      ADDW     R10,R11,#+277
   \   00000040   0xF894 0x2124      LDRB     R2,[R4, #+292]
   \   00000044   0xF20B 0x09F3      ADDW     R9,R11,#+243
   \   00000048   0x4639             MOV      R1,R7
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x.... 0x....      BL       strncmp
   \   00000050   0xB108             CBZ.N    R0,??CrossCallReturnLabel_17
   1026          	    {
   1027          			pS2wProfile->security.wpa.ssidLen =0;
   \   00000052   0x.... 0x....      BL       ?Subroutine4
   1028          			pS2wProfile->security.wpa.pskValid = 0;
   1029          	    }
   1030                  pS2wProfile->autoWlandata.ssidLen = pConfig->networkConfig.clientConfig.ssid.length;
   \                     ??CrossCallReturnLabel_17:
   \   00000056   0xF10B 0x0604      ADD      R6,R11,#+4
   \   0000005A   0xF894 0x0124      LDRB     R0,[R4, #+292]
   \   0000005E   0x72B0             STRB     R0,[R6, #+10]
   1031          		memset(pS2wProfile->autoWlandata.ssid,0,S2W_MAX_SSID_LEN);
   \   00000060   0x2220             MOVS     R2,#+32
   \   00000062   0x2100             MOVS     R1,#+0
   \   00000064   0xF10B 0x0016      ADD      R0,R11,#+22
   \   00000068   0x.... 0x....      BL       memset
   1032          	    memcpy(pS2wProfile->autoWlandata.ssid, pConfig->networkConfig.clientConfig.ssid.array, 
   1033          		   pS2wProfile->autoWlandata.ssidLen);
   \   0000006C   0x7AB2             LDRB     R2,[R6, #+10]
   \   0000006E   0x4639             MOV      R1,R7
   \   00000070   0xF10B 0x0016      ADD      R0,R11,#+22
   \   00000074   0x.... 0x....      BL       memcpy
   1034          /*channel*/
   1035          	    pS2wProfile->autoWlandata.channel = pConfig->networkConfig.clientConfig.channel;
   \   00000078   0xF894 0x0197      LDRB     R0,[R4, #+407]
   \   0000007C   0x7270             STRB     R0,[R6, #+9]
   1036          		pS2wProfile->securityType = SECTYPE_AUTO;
   1037          /*wep key*/
   1038          	    if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WEP)
   \   0000007E   0xF10B 0x0578      ADD      R5,R11,#+120
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0xF88B 0x01D5      STRB     R0,[R11, #+469]
   \   00000088   0xF894 0x0199      LDRB     R0,[R4, #+409]
   \   0000008C   0x2802             CMP      R0,#+2
   \   0000008E   0xD11E             BNE.N    ??S2wConfig_SetValues_1
   1039           	    {
   1040          			UINT8 i;
   1041          			UINT8 wepIndx = pConfig->networkConfig.clientConfig.wepKeyConfig.KeyId;
   \   00000090   0xF894 0x0188      LDRB     R0,[R4, #+392]
   1042          
   1043          			pS2wProfile->security.wep.keyIdx = wepIndx;
   \   00000094   0x70A8             STRB     R0,[R5, #+2]
   1044          			pS2wProfile->security.wep.keyLen[wepIndx - 1] = pConfig->networkConfig.clientConfig.wepKeyConfig.KeyLen;
   \   00000096   0xEB00 0x010B      ADD      R1,R0,R11
   \   0000009A   0xF894 0x2187      LDRB     R2,[R4, #+391]
   \   0000009E   0xF881 0x207A      STRB     R2,[R1, #+122]
   1045          			for(i = 0; i< pConfig->networkConfig.clientConfig.wepKeyConfig.KeyLen; i++)
   \   000000A2   0x2100             MOVS     R1,#+0
   \   000000A4   0xE00A             B.N      ??S2wConfig_SetValues_2
   1046          			{
   1047          				pS2wProfile->security.wep.key[wepIndx - 1][i] = pConfig->networkConfig.clientConfig.wepKeyConfig.Key[i];
   \                     ??S2wConfig_SetValues_3:
   \   000000A6   0x220D             MOVS     R2,#+13
   \   000000A8   0x190B             ADDS     R3,R1,R4
   \   000000AA   0xFB02 0xB200      MLA      R2,R2,R0,R11
   \   000000AE   0x188A             ADDS     R2,R1,R2
   \   000000B0   0xF893 0x3189      LDRB     R3,[R3, #+393]
   \   000000B4   0xF882 0x3072      STRB     R3,[R2, #+114]
   1048          			}
   \   000000B8   0x1C49             ADDS     R1,R1,#+1
   \   000000BA   0xB2C9             UXTB     R1,R1
   \                     ??S2wConfig_SetValues_2:
   \   000000BC   0xF894 0x2187      LDRB     R2,[R4, #+391]
   \   000000C0   0x4291             CMP      R1,R2
   \   000000C2   0xDBF0             BLT.N    ??S2wConfig_SetValues_3
   1049          
   1050          			pS2wProfile->security.authMode = pConfig->networkConfig.clientConfig.wepAuthType;
   \   000000C4   0xF894 0x0196      LDRB     R0,[R4, #+406]
   \   000000C8   0xF88B 0x0078      STRB     R0,[R11, #+120]
   \   000000CC   0xE051             B.N      ??S2wConfig_SetValues_4
   1051           	    }
   1052          	    else if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WPA_PERSONAL)
   \                     ??S2wConfig_SetValues_1:
   \   000000CE   0x2803             CMP      R0,#+3
   \   000000D0   0xD129             BNE.N    ??S2wConfig_SetValues_5
   1053              	{
   1054              		/*WPA Personal*/	
   1055                  	// if pass phrase is differnt reset the psk valid
   1056          	        if(strncmp(pS2wProfile->security.wpa.wpaPassPhrase,(char*)pConfig->networkConfig.clientConfig.passphrase.Passphrase,
   1057          	           pConfig->networkConfig.clientConfig.passphrase.Len))
   \   000000D2   0xF20B 0x05B3      ADDW     R5,R11,#+179
   \   000000D6   0xF894 0x2145      LDRB     R2,[R4, #+325]
   \   000000DA   0xF504 0x71A3      ADD      R1,R4,#+326
   \   000000DE   0x4628             MOV      R0,R5
   \   000000E0   0x.... 0x....      BL       strncmp
   \   000000E4   0xB108             CBZ.N    R0,??CrossCallReturnLabel_18
   1058          	        {
   1059          		       pS2wProfile->security.wpa.ssidLen =0;
   \   000000E6   0x.... 0x....      BL       ?Subroutine4
   1060          		       pS2wProfile->security.wpa.pskValid = 0;
   1061          		    }
   1062                      pS2wProfile->security.wpa.passPhraseLen = pConfig->networkConfig.clientConfig.passphrase.Len;
   1063          			memset((VOID *)pS2wProfile->security.wpa.wpaPassPhrase,0,S2W_PSK_PASSPHRASE_LEN_MAX);
   \                     ??CrossCallReturnLabel_18:
   \   000000EA   0x2240             MOVS     R2,#+64
   \   000000EC   0xF894 0x0145      LDRB     R0,[R4, #+325]
   \   000000F0   0xF88B 0x00F3      STRB     R0,[R11, #+243]
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0x4628             MOV      R0,R5
   \   000000F8   0x.... 0x....      BL       memset
   1064          			memset((VOID *)pS2wProfile->security.wpa.ssid,0,S2W_MAX_SSID_LEN);
   \   000000FC   0x2220             MOVS     R2,#+32
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x4650             MOV      R0,R10
   \   00000102   0x.... 0x....      BL       memset
   1065          			memcpy(pS2wProfile->security.wpa.ssid,pConfig->networkConfig.clientConfig.ssid.array, 
   1066          		   			pS2wProfile->autoWlandata.ssidLen); 
   \   00000106   0x7AB2             LDRB     R2,[R6, #+10]
   \   00000108   0x4639             MOV      R1,R7
   \   0000010A   0x4650             MOV      R0,R10
   \   0000010C   0x.... 0x....      BL       memcpy
   1067          			pS2wProfile->security.wpa.ssidLen = pS2wProfile->autoWlandata.ssidLen;
   \   00000110   0x7AB0             LDRB     R0,[R6, #+10]
   1068          		    memcpy(pS2wProfile->security.wpa.wpaPassPhrase, 
   1069          		           pConfig->networkConfig.clientConfig.passphrase.Passphrase,
   1070          			       pS2wProfile->security.wpa.passPhraseLen);
   \   00000112   0xF89B 0x20F3      LDRB     R2,[R11, #+243]
   \   00000116   0xF88B 0x0135      STRB     R0,[R11, #+309]
   \   0000011A   0xF504 0x71A3      ADD      R1,R4,#+326
   \   0000011E   0x4628             MOV      R0,R5
   \   00000120   0x.... 0x....      BL       memcpy
   \   00000124   0xE025             B.N      ??S2wConfig_SetValues_4
   1071                  }
   1072          	    else if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WPA_ENTERPRISE)
   \                     ??S2wConfig_SetValues_5:
   \   00000126   0x2804             CMP      R0,#+4
   \   00000128   0xD123             BNE.N    ??S2wConfig_SetValues_4
   1073          	    {
   1074          			S2wWeb_EapAuthTypeSet(pConfig->networkConfig.clientConfig.eapType,&pS2wProfile->security.eap.outerAuth,
   1075          								&pS2wProfile->security.eap.innerAuth);
   \   0000012A   0xF894 0x019A      LDRB     R0,[R4, #+410]
   \   0000012E   0xF50B 0x729E      ADD      R2,R11,#+316
   \   00000132   0xF50B 0x719C      ADD      R1,R11,#+312
   \   00000136   0x.... 0x....      BL       S2wWeb_EapAuthTypeSet
   1076          		    pS2wProfile->security.eap.passwordLen = pConfig->networkConfig.clientConfig.eapPassword.Length;
   \   0000013A   0xF894 0x01BC      LDRB     R0,[R4, #+444]
   \   0000013E   0xF88B 0x0162      STRB     R0,[R11, #+354]
   1077          
   1078                       memcpy(pS2wProfile->security.eap.password, pConfig->networkConfig.clientConfig.eapPassword.Pwd,
   1079          	              pConfig->networkConfig.clientConfig.eapPassword.Length);
   \   00000142   0xF204 0x11BD      ADDW     R1,R4,#+445
   \   00000146   0xF894 0x21BC      LDRB     R2,[R4, #+444]
   \   0000014A   0xF20B 0x1063      ADDW     R0,R11,#+355
   \   0000014E   0x.... 0x....      BL       memcpy
   1080          
   1081                     	 pS2wProfile->security.eap.usrNameLen = pConfig->networkConfig.clientConfig.eapUsername.Length;
   \   00000152   0xF894 0x019B      LDRB     R0,[R4, #+411]
   \   00000156   0xF88B 0x0141      STRB     R0,[R11, #+321]
   1082          
   1083                        memcpy(pS2wProfile->security.eap.usrName, pConfig->networkConfig.clientConfig.eapUsername.Name,
   1084          	                              pConfig->networkConfig.clientConfig.eapUsername.Length);
   \   0000015A   0xF504 0x71CE      ADD      R1,R4,#+412
   \   0000015E   0xF894 0x219B      LDRB     R2,[R4, #+411]
   \   00000162   0xF50B 0x70A1      ADD      R0,R11,#+322
   \   00000166   0x.... 0x....      BL       memcpy
   1085                        pS2wProfile->security.validKeys |= S2W_SECURITY_VALID_EAP; 	 			 
   \   0000016A   0x7868             LDRB     R0,[R5, #+1]
   \   0000016C   0xF040 0x0004      ORR      R0,R0,#0x4
   \   00000170   0x7068             STRB     R0,[R5, #+1]
   1086          			 
   1087                     }
   1088          
   1089          /*L2 configurations*/
   1090          	pS2wProfile->netConf.dhcp = pConfig->networkConfig.clientConfig.dhcpFlag;
   \                     ??S2wConfig_SetValues_4:
   \   00000172   0xF894 0x0198      LDRB     R0,[R4, #+408]
   \   00000176   0xF88B 0x0188      STRB     R0,[R11, #+392]
   1091          	if(pConfig->networkConfig.clientConfig.dhcpFlag == 0)
   \   0000017A   0xF894 0x0198      LDRB     R0,[R4, #+408]
   \   0000017E   0x2800             CMP      R0,#+0
   \   00000180   0xD167             BNE.N    ??CrossCallReturnLabel_3
   1092          	        {
   1093          	    	    ipAddr = htonl(pConfig->networkConfig.clientConfig.ipAddress);
   \   00000182   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   00000186   0x0A01             LSRS     R1,R0,#+8
   \   00000188   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000018C   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000190   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000194   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000198   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000019C   0x9001             STR      R0,[SP, #+4]
   1094          	            
   1095          	            if(ipAddr) 
   \   0000019E   0x9801             LDR      R0,[SP, #+4]
   \   000001A0   0xB128             CBZ.N    R0,??S2wConfig_SetValues_6
   1096          		    {
   1097          	                memcpy(pS2wProfile->netConf.ipAddr, &(ipAddr), 4);
   \   000001A2   0x2204             MOVS     R2,#+4
   \   000001A4   0xA901             ADD      R1,SP,#+4
   \   000001A6   0xF50B 0x70C6      ADD      R0,R11,#+396
   \   000001AA   0x.... 0x....      BL       memcpy
   1098          		    }
   1099          	            ipAddr = htonl(pConfig->networkConfig.clientConfig.subnetmask);
   \                     ??S2wConfig_SetValues_6:
   \   000001AE   0xF8D4 0x01E4      LDR      R0,[R4, #+484]
   \   000001B2   0x0A01             LSRS     R1,R0,#+8
   \   000001B4   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000001B8   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000001BC   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000001C0   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000001C4   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000001C8   0x9001             STR      R0,[SP, #+4]
   1100          				if(ipAddr)
   \   000001CA   0x9801             LDR      R0,[SP, #+4]
   \   000001CC   0xB128             CBZ.N    R0,??S2wConfig_SetValues_7
   1101          					memcpy(pS2wProfile->netConf.netMask, &ipAddr, 4);
   \   000001CE   0x2204             MOVS     R2,#+4
   \   000001D0   0xA901             ADD      R1,SP,#+4
   \   000001D2   0xF50B 0x70C8      ADD      R0,R11,#+400
   \   000001D6   0x.... 0x....      BL       memcpy
   1102          
   1103          	            ipAddr= htonl(pConfig->networkConfig.clientConfig.gateway);
   \                     ??S2wConfig_SetValues_7:
   \   000001DA   0xF8D4 0x01EC      LDR      R0,[R4, #+492]
   \   000001DE   0x0A01             LSRS     R1,R0,#+8
   \   000001E0   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000001E4   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000001E8   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000001EC   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000001F0   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000001F4   0x9001             STR      R0,[SP, #+4]
   1104          	            if( ipAddr)
   \   000001F6   0x9801             LDR      R0,[SP, #+4]
   \   000001F8   0xB128             CBZ.N    R0,??S2wConfig_SetValues_8
   1105          					memcpy(pS2wProfile->netConf.gateway, &ipAddr, 4);
   \   000001FA   0x2204             MOVS     R2,#+4
   \   000001FC   0xA901             ADD      R1,SP,#+4
   \   000001FE   0xF50B 0x70CA      ADD      R0,R11,#+404
   \   00000202   0x.... 0x....      BL       memcpy
   1106          
   1107          	            ipAddr = htonl(pConfig->networkConfig.clientConfig.dnsServer);
   \                     ??S2wConfig_SetValues_8:
   \   00000206   0xF8D4 0x01E8      LDR      R0,[R4, #+488]
   \   0000020A   0x0A01             LSRS     R1,R0,#+8
   \   0000020C   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000210   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000214   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000218   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000021C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000220   0x9001             STR      R0,[SP, #+4]
   1108          	            if( ipAddr) 
   \   00000222   0xF50B 0x75D4      ADD      R5,R11,#+424
   \   00000226   0x9801             LDR      R0,[SP, #+4]
   \   00000228   0xB108             CBZ.N    R0,??CrossCallReturnLabel_4
   1109          					memcpy(pS2wProfile->dns1, &ipAddr, 4);
   \   0000022A   0x.... 0x....      BL       ?Subroutine1
   1110          	    
   1111          	            ipAddr = htonl(pConfig->networkConfig.clientConfig.dnsServer);
   \                     ??CrossCallReturnLabel_4:
   \   0000022E   0xF8D4 0x01E8      LDR      R0,[R4, #+488]
   \   00000232   0x0A01             LSRS     R1,R0,#+8
   \   00000234   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000238   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000023C   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000240   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000244   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000248   0x9001             STR      R0,[SP, #+4]
   1112          	            if( ipAddr)
   \   0000024A   0x9801             LDR      R0,[SP, #+4]
   \   0000024C   0xB108             CBZ.N    R0,??CrossCallReturnLabel_3
   1113          					memcpy(pS2wProfile->dns1, &ipAddr, 4);
   \   0000024E   0x.... 0x....      BL       ?Subroutine1
   1114          	         }
   1115              }
   1116              if(S2W_WEB_PARAMS_SND_TO_HOST == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   \                     ??CrossCallReturnLabel_3:
   \   00000252   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000256   0x.... 0x....      ADR.W    R10,`?<Constant "%02x">`
   \   0000025A   0xF20F 0x094C      ADR.W    R9,??S2wConfig_SetValues_9  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000025E   0x2800             CMP      R0,#+0
   \   00000260   0xBF18             IT       NE 
   \   00000262   0x2802             CMPNE    R0,#+2
   \   00000264   0xD15C             BNE.N    ??S2wConfig_SetValues_10
   1117              {
   1118                  /* Page 2 values - Basic WiFi*/
   1119          	S2w_Printf("SSID=");
   \   00000266   0x.... 0x....      ADR.W    R0,`?<Constant "SSID=">`
   \   0000026A   0x.... 0x....      BL       S2w_Printf
   1120          	AppS2wHal_CharNPut(pConfig->networkConfig.clientConfig.ssid.array,pConfig->networkConfig.clientConfig.ssid.length);
   \   0000026E   0xF894 0x1124      LDRB     R1,[R4, #+292]
   \   00000272   0x4638             MOV      R0,R7
   \   00000274   0x.... 0x....      BL       AppS2wHal_CharNPut
   1121                  S2w_Printf("\r\nCHNL=%d\r\nCONN_TYPE=%d\r\nMODE=%d\r\nSECURITY=%d\r\n",
   1122                         pConfig->networkConfig.clientConfig.channel,0,0,pConfig->networkConfig.clientConfig.securityType);
   \   00000278   0xF894 0x0199      LDRB     R0,[R4, #+409]
   \   0000027C   0x9000             STR      R0,[SP, #+0]
   \   0000027E   0x2300             MOVS     R3,#+0
   \   00000280   0xF894 0x1197      LDRB     R1,[R4, #+407]
   \   00000284   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCHNL=%d\\r\\nCONN_TYPE=...">`
   \   00000288   0x2200             MOVS     R2,#+0
   \   0000028A   0x.... 0x....      BL       S2w_Printf
   1123              
   1124                  if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WEP)
   \   0000028E   0xF894 0x0199      LDRB     R0,[R4, #+409]
   \   00000292   0x2802             CMP      R0,#+2
   \   00000294   0xD117             BNE.N    ??S2wConfig_SetValues_11
   1125                  {
   1126                      UINT8 i;
   1127                  
   1128                      //webPrintf("WEP_AUTH_MODE=%s\r\n",s2wProvInfo.wepAuthMode);
   1129                      S2w_Printf("WEP_ID=%d\r\nWEP_KEY=",pConfig->networkConfig.clientConfig.wepKeyConfig.KeyId);
   \   00000296   0xF894 0x1188      LDRB     R1,[R4, #+392]
   \   0000029A   0x.... 0x....      ADR.W    R0,`?<Constant "WEP_ID=%d\\r\\nWEP_KEY=">`
   \   0000029E   0x.... 0x....      BL       S2w_Printf
   1130                      //S2w_Printf("WEP_KEY=");
   1131                  
   1132                      for(i = 0; i< pConfig->networkConfig.clientConfig.wepKeyConfig.KeyLen; i++)
   \   000002A2   0x2700             MOVS     R7,#+0
   \   000002A4   0xE009             B.N      ??S2wConfig_SetValues_12
   \   000002A6   0xBF00             Nop      
   \                     ??S2wConfig_SetValues_9:
   \   000002A8   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    
   1133                      {
   1134                          S2w_Printf("%02x",pConfig->networkConfig.clientConfig.wepKeyConfig.Key[i]);
   \                     ??S2wConfig_SetValues_13:
   \   000002AC   0x1938             ADDS     R0,R7,R4
   \   000002AE   0xF890 0x1189      LDRB     R1,[R0, #+393]
   \   000002B2   0x4650             MOV      R0,R10
   \   000002B4   0x.... 0x....      BL       S2w_Printf
   1135                      }
   \   000002B8   0x1C7F             ADDS     R7,R7,#+1
   \                     ??S2wConfig_SetValues_12:
   \   000002BA   0xF894 0x0187      LDRB     R0,[R4, #+391]
   \   000002BE   0xB2FF             UXTB     R7,R7
   \   000002C0   0x4287             CMP      R7,R0
   \   000002C2   0xD3F3             BCC.N    ??S2wConfig_SetValues_13
   1136                      S2w_Printf("\r\n");
   \   000002C4   0xE020             B.N      ??S2wConfig_SetValues_14
   1137                  }
   1138                  else if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WPA_PERSONAL)
   \                     ??S2wConfig_SetValues_11:
   \   000002C6   0x2803             CMP      R0,#+3
   \   000002C8   0xD108             BNE.N    ??S2wConfig_SetValues_15
   1139                       {
   1140                           S2w_Printf("PSK_PASS_PHRASE=");
   \   000002CA   0x.... 0x....      ADR.W    R0,`?<Constant "PSK_PASS_PHRASE=">`
   \   000002CE   0x.... 0x....      BL       S2w_Printf
   1141          		 AppS2wHal_CharNPut(pConfig->networkConfig.clientConfig.passphrase.Passphrase,
   1142          							pConfig->networkConfig.clientConfig.passphrase.Len);
   \   000002D2   0xF894 0x1145      LDRB     R1,[R4, #+325]
   \   000002D6   0xF504 0x70A3      ADD      R0,R4,#+326
   \   000002DA   0xE013             B.N      ??S2wConfig_SetValues_16
   1143          		 S2w_Printf("\r\n");
   1144                       }
   1145          	     else if (pConfig->networkConfig.clientConfig.securityType == GSN_WLAN_WPA_ENTERPRISE)
   \                     ??S2wConfig_SetValues_15:
   \   000002DC   0x2804             CMP      R0,#+4
   \   000002DE   0xD116             BNE.N    ??S2wConfig_SetValues_17
   1146          	          {
   1147                                S2w_Printf("EAP_USERNAME=");
   \   000002E0   0x.... 0x....      ADR.W    R0,`?<Constant "EAP_USERNAME=">`
   \   000002E4   0x.... 0x....      BL       S2w_Printf
   1148          		      AppS2wHal_CharNPut(pConfig->networkConfig.clientConfig.eapUsername.Name,
   1149          			pConfig->networkConfig.clientConfig.eapUsername.Length);
   \   000002E8   0xF894 0x119B      LDRB     R1,[R4, #+411]
   \   000002EC   0xF504 0x70CE      ADD      R0,R4,#+412
   \   000002F0   0x.... 0x....      BL       AppS2wHal_CharNPut
   1150          		
   1151          		      S2w_Printf("\r\nEAP_PASSWORD=");
   \   000002F4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nEAP_PASSWORD=">`
   \   000002F8   0x.... 0x....      BL       S2w_Printf
   1152          		      AppS2wHal_CharNPut(pConfig->networkConfig.clientConfig.eapPassword.Pwd,
   1153                                       pConfig->networkConfig.clientConfig.eapPassword.Length);
   \   000002FC   0xF894 0x11BC      LDRB     R1,[R4, #+444]
   \   00000300   0xF204 0x10BD      ADDW     R0,R4,#+445
   \                     ??S2wConfig_SetValues_16:
   \   00000304   0x.... 0x....      BL       AppS2wHal_CharNPut
   1154          		      
   1155                                S2w_Printf("\r\n");
   \                     ??S2wConfig_SetValues_14:
   \   00000308   0x4648             MOV      R0,R9
   \   0000030A   0x.... 0x....      BL       S2w_Printf
   1156                             }
   1157          
   1158          #ifndef IP2WIFI
   1159              /* Page 3 values - IP Network*/
   1160                  S2w_Printf("DHCP_ENBL=%d\r\n",pConfig->networkConfig.clientConfig.dhcpFlag);
   \                     ??S2wConfig_SetValues_17:
   \   0000030E   0xF894 0x1198      LDRB     R1,[R4, #+408]
   \   00000312   0x.... 0x....      ADR.W    R0,`?<Constant "DHCP_ENBL=%d\\r\\n">`
   \   00000316   0x.... 0x....      BL       S2w_Printf
   1161          
   1162                  if(pConfig->networkConfig.clientConfig.dhcpFlag == 0)
   \   0000031A   0xF894 0x0198      LDRB     R0,[R4, #+408]
   \   0000031E   0x2800             CMP      R0,#+0
   \                     ??S2wConfig_SetValues_10:
   \   00000320   0xD136             BNE.N    ??S2wConfig_SetValues_18
   1163                  {
   1164                      ipAddr= pConfig->networkConfig.clientConfig.ipAddress;
   \   00000322   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   00000326   0x9001             STR      R0,[SP, #+4]
   1165                      if(ipAddr) S2w_Printf("STATIC_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   00000328   0xB128             CBZ.N    R0,??S2wConfig_SetValues_19
   \   0000032A   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_5:
   \   0000032E   0x.... 0x....      ADR.W    R0,`?<Constant "STATIC_IP=%d.%d.%d.%d\\r\\n">`
   \   00000332   0x.... 0x....      BL       S2w_Printf
   1166          
   1167                      ipAddr= pConfig->networkConfig.clientConfig.subnetmask;
   \                     ??S2wConfig_SetValues_19:
   \   00000336   0xF8D4 0x01E4      LDR      R0,[R4, #+484]
   \   0000033A   0x9001             STR      R0,[SP, #+4]
   1168                      if(ipAddr) S2w_Printf("SUBNT_MASK=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   0000033C   0xB128             CBZ.N    R0,??S2wConfig_SetValues_20
   \   0000033E   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_6:
   \   00000342   0x.... 0x....      ADR.W    R0,`?<Constant "SUBNT_MASK=%d.%d.%d.%d\\r\\n">`
   \   00000346   0x.... 0x....      BL       S2w_Printf
   1169             
   1170                      ipAddr= pConfig->networkConfig.clientConfig.gateway;
   \                     ??S2wConfig_SetValues_20:
   \   0000034A   0xF8D4 0x01EC      LDR      R0,[R4, #+492]
   \   0000034E   0x9001             STR      R0,[SP, #+4]
   1171                      if( ipAddr) S2w_Printf("GATEWAY_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   00000350   0xB128             CBZ.N    R0,??S2wConfig_SetValues_21
   \   00000352   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_7:
   \   00000356   0x.... 0x....      ADR.W    R0,`?<Constant "GATEWAY_IP=%d.%d.%d.%d\\r\\n">`
   \   0000035A   0x.... 0x....      BL       S2w_Printf
   1172          
   1173          
   1174                      S2w_Printf("AUTO_DNS_ENBL=%d\r\n",0);
   \                     ??S2wConfig_SetValues_21:
   \   0000035E   0x.... 0x....      ADR.W    R0,`?<Constant "AUTO_DNS_ENBL=%d\\r\\n">`
   \   00000362   0x2100             MOVS     R1,#+0
   \   00000364   0x.... 0x....      BL       S2w_Printf
   1175          
   1176                      ipAddr = pConfig->networkConfig.clientConfig.dnsServer;
   \   00000368   0xF8D4 0x01E8      LDR      R0,[R4, #+488]
   \   0000036C   0x9001             STR      R0,[SP, #+4]
   1177                      if( ipAddr) S2w_Printf("PRIMERY_DNS_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   0000036E   0xB128             CBZ.N    R0,??S2wConfig_SetValues_22
   \   00000370   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_8:
   \   00000374   0x.... 0x....      ADR.W    R0,`?<Constant "PRIMERY_DNS_IP=%d.%d....">`
   \   00000378   0x.... 0x....      BL       S2w_Printf
   1178           
   1179                      ipAddr = pConfig->networkConfig.clientConfig.dnsServer;
   \                     ??S2wConfig_SetValues_22:
   \   0000037C   0xF8D4 0x01E8      LDR      R0,[R4, #+488]
   \   00000380   0x9001             STR      R0,[SP, #+4]
   1180          
   1181                      if(ipAddr) S2w_Printf("SECNDRY_DNS_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   00000382   0xB128             CBZ.N    R0,??S2wConfig_SetValues_18
   \   00000384   0x.... 0x....      BL       ?Subroutine2
   1182                  }
   1183          #endif /* IP2WIFI*/
   1184              }
   \                     ??CrossCallReturnLabel_9:
   \   00000388   0x.... 0x....      ADR.W    R0,`?<Constant "SECNDRY_DNS_IP=%d.%d....">`
   \   0000038C   0x.... 0x....      BL       S2w_Printf
   \                     ??S2wConfig_SetValues_18:
   \   00000390   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000394   0xF204 0x07DD      ADDW     R7,R4,#+221
   \   00000398   0xF50B 0x7515      ADD      R5,R11,#+596
   \   0000039C   0x2801             CMP      R0,#+1
   \   0000039E   0xBF18             IT       NE 
   \   000003A0   0x2802             CMPNE    R0,#+2
   \   000003A2   0xD17B             BNE.N    ??S2wConfig_SetValues_23
   1185          #endif
   1186          #ifdef ADK_PROV_CONFIG_LIMITED_AP
   1187          	if(S2W_WEB_PARAMS_STORE == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   1188          	{
   1189          	        if(pConfig->networkConfig.apConfig.ssid.length)
   \   000003A4   0xF894 0x0050      LDRB     R0,[R4, #+80]
   \   000003A8   0xB168             CBZ.N    R0,??S2wConfig_SetValues_24
   1190                  {
   1191                      pS2wProfile->lmtdApConf.ssid.length = pConfig->networkConfig.apConfig.ssid.length;
   \   000003AA   0xF88B 0x01EC      STRB     R0,[R11, #+492]
   1192          		memset(pS2wProfile->lmtdApConf.ssid.array,0,GSN_MAC_SSID_LEN);
   \   000003AE   0xF20B 0x16ED      ADDW     R6,R11,#+493
   \   000003B2   0x2220             MOVS     R2,#+32
   \   000003B4   0x.... 0x....      BL       ?Subroutine0
   1193          
   1194                      memcpy( pS2wProfile->lmtdApConf.ssid.array, pConfig->networkConfig.apConfig.ssid.array,
   1195          			pConfig->networkConfig.apConfig.ssid.length);
   \                     ??CrossCallReturnLabel_2:
   \   000003B8   0xF894 0x2050      LDRB     R2,[R4, #+80]
   \   000003BC   0xF104 0x0151      ADD      R1,R4,#+81
   \   000003C0   0x4630             MOV      R0,R6
   \   000003C2   0x.... 0x....      BL       memcpy
   1196          	}
   1197          	if(pConfig->networkConfig.apConfig.channel)
   \                     ??S2wConfig_SetValues_24:
   \   000003C6   0xF894 0x00C3      LDRB     R0,[R4, #+195]
   \   000003CA   0xB108             CBZ.N    R0,??S2wConfig_SetValues_25
   1198          	{
   1199                      pS2wProfile->lmtdApConf.channel = pConfig->networkConfig.apConfig.channel;
   \   000003CC   0xF88B 0x0286      STRB     R0,[R11, #+646]
   1200          	}
   1201          
   1202                  if(pConfig->networkConfig.apConfig.beaconInterval)
   \                     ??S2wConfig_SetValues_25:
   \   000003D0   0xF8B4 0x00C4      LDRH     R0,[R4, #+196]
   \   000003D4   0xB108             CBZ.N    R0,??S2wConfig_SetValues_26
   1203                  {
   1204                      pS2wProfile->lmtdApConf.beaconInterval = pConfig->networkConfig.apConfig.beaconInterval;
   \   000003D6   0xF8AB 0x028A      STRH     R0,[R11, #+650]
   1205          	}
   1206              pS2wProfile->lmtdApConf.securityType = (GSN_WLAN_SECURITY_TYPE_T)pConfig->networkConfig.apConfig.securityType;	
   \                     ??S2wConfig_SetValues_26:
   \   000003DA   0xF894 0x00B2      LDRB     R0,[R4, #+178]
   \   000003DE   0xF88B 0x0254      STRB     R0,[R11, #+596]
   1207          	if (pConfig->networkConfig.apConfig.securityType == GSN_WLAN_WPA_PERSONAL)
   \   000003E2   0xF894 0x00B2      LDRB     R0,[R4, #+178]
   \   000003E6   0x2803             CMP      R0,#+3
   \   000003E8   0xD115             BNE.N    ??S2wConfig_SetValues_27
   1208          	{			
   1209                      pS2wProfile->lmtdApConf.passphrase.Len =
   1210          						pConfig->networkConfig.apConfig.passphrase.Len;
   \   000003EA   0xF894 0x0071      LDRB     R0,[R4, #+113]
   \   000003EE   0xF88B 0x0213      STRB     R0,[R11, #+531]
   1211          			memset(pS2wProfile->lmtdApConf.passphrase.Passphrase,0,GSN_WDD_SEC_PASSPHRASE_LEN);
   \   000003F2   0xF50B 0x7605      ADD      R6,R11,#+532
   \   000003F6   0x2240             MOVS     R2,#+64
   \   000003F8   0x.... 0x....      BL       ?Subroutine0
   1212                      memcpy(pS2wProfile->lmtdApConf.passphrase.Passphrase,
   1213          				pConfig->networkConfig.apConfig.passphrase.Passphrase,
   1214          				pConfig->networkConfig.apConfig.passphrase.Len);
   \                     ??CrossCallReturnLabel_1:
   \   000003FC   0xF894 0x2071      LDRB     R2,[R4, #+113]
   \   00000400   0xF104 0x0172      ADD      R1,R4,#+114
   \   00000404   0x4630             MOV      R0,R6
   \   00000406   0x.... 0x....      BL       memcpy
   1215                      pS2wProfile->lmtdApConf.securityType = SECTYPE_WPA2PSK;
   \   0000040A   0x2008             MOVS     R0,#+8
   \   0000040C   0xF88B 0x0254      STRB     R0,[R11, #+596]
   1216          			pS2wProfile->lmtdApConf.lmtdApPskValid =0;
   \   00000410   0x2000             MOVS     R0,#+0
   \   00000412   0x7468             STRB     R0,[R5, #+17]
   \   00000414   0xE015             B.N      ??S2wConfig_SetValues_28
   1217          	}
   1218          	else if (pConfig->networkConfig.apConfig.securityType == GSN_WLAN_WEP)
   \                     ??S2wConfig_SetValues_27:
   \   00000416   0x2802             CMP      R0,#+2
   \   00000418   0xD113             BNE.N    ??S2wConfig_SetValues_28
   1219          	    {
   1220          	        pS2wProfile->lmtdApConf.wepKeyConfig.KeyId = pConfig->networkConfig.apConfig.wepKeyConfig.KeyId;
   1221          			pS2wProfile->lmtdApConf.wepKeyConfig.KeyLen = pConfig->networkConfig.apConfig.wepKeyConfig.KeyLen;
   1222          			memcpy(pS2wProfile->lmtdApConf.wepKeyConfig.Key, pConfig->networkConfig.apConfig.wepKeyConfig.Key,
   1223          			pConfig->networkConfig.apConfig.wepKeyConfig.KeyLen);
   \   0000041A   0xF104 0x01B6      ADD      R1,R4,#+182
   \   0000041E   0xF894 0x00B5      LDRB     R0,[R4, #+181]
   \   00000422   0x70E8             STRB     R0,[R5, #+3]
   \   00000424   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000428   0x70A8             STRB     R0,[R5, #+2]
   \   0000042A   0xF50B 0x7016      ADD      R0,R11,#+600
   \   0000042E   0xF894 0x20B4      LDRB     R2,[R4, #+180]
   \   00000432   0x.... 0x....      BL       memcpy
   1224          			pS2wProfile->lmtdApConf.securityType = SECTYPE_WEP;
   \   00000436   0x2002             MOVS     R0,#+2
   \   00000438   0xF88B 0x0254      STRB     R0,[R11, #+596]
   1225          		pS2wProfile->lmtdApConf.wepKeyConfig.authType = pConfig->networkConfig.apConfig.wepKeyConfig.authType;
   \   0000043C   0xF894 0x00B3      LDRB     R0,[R4, #+179]
   \   00000440   0x7068             STRB     R0,[R5, #+1]
   1226          		}
   1227          		if(pConfig->networkConfig.apConfig.ipAddress)
   \                     ??S2wConfig_SetValues_28:
   \   00000442   0xF8D4 0x00C8      LDR      R0,[R4, #+200]
   \   00000446   0xB138             CBZ.N    R0,??S2wConfig_SetValues_29
   1228          		{
   1229          		     pS2wProfile->lmtdApConf.ipAddress = htonl(pConfig->networkConfig.apConfig.ipAddress);
   \   00000448   0x.... 0x....      BL       ?Subroutine6
   1230          		}
   \                     ??CrossCallReturnLabel_22:
   \   0000044C   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000450   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000454   0xF8CB 0x028C      STR      R0,[R11, #+652]
   1231          		if(pConfig->networkConfig.apConfig.subnetmask)
   \                     ??S2wConfig_SetValues_29:
   \   00000458   0xF50B 0x7023      ADD      R0,R11,#+652
   \   0000045C   0xF8D4 0x10CC      LDR      R1,[R4, #+204]
   \   00000460   0xB111             CBZ.N    R1,??S2wConfig_SetValues_30
   1232          		{
   1233          		   pS2wProfile->lmtdApConf.subnetmask = htonl(pConfig->networkConfig.apConfig.subnetmask);
   \   00000462   0x.... 0x....      BL       ?Subroutine5
   1234          		}
   \                     ??CrossCallReturnLabel_19:
   \   00000466   0x6041             STR      R1,[R0, #+4]
   1235          		if( pConfig->networkConfig.apConfig.gateway)
   \                     ??S2wConfig_SetValues_30:
   \   00000468   0xF8D4 0x10D0      LDR      R1,[R4, #+208]
   \   0000046C   0xB111             CBZ.N    R1,??S2wConfig_SetValues_31
   1236          		{
   1237          			pS2wProfile->lmtdApConf.gateway = htonl(pConfig->networkConfig.apConfig.gateway);
   \   0000046E   0x.... 0x....      BL       ?Subroutine5
   1238          		}
   \                     ??CrossCallReturnLabel_20:
   \   00000472   0x6081             STR      R1,[R0, #+8]
   1239          		pS2wProfile->lmtdApConf.dhcpServerEnable = pConfig->networkConfig.apConfig.dhcpServerEnable;
   \                     ??S2wConfig_SetValues_31:
   \   00000474   0xF894 0x10D4      LDRB     R1,[R4, #+212]
   \   00000478   0x7301             STRB     R1,[R0, #+12]
   1240          
   1241          		if(pConfig->networkConfig.apConfig.dhcpAddressStart)
   \   0000047A   0xF8D4 0x10D8      LDR      R1,[R4, #+216]
   \   0000047E   0xB111             CBZ.N    R1,??S2wConfig_SetValues_32
   1242          		{
   1243          			pS2wProfile->lmtdApConf.dhcpAddressStart = htonl(pConfig->networkConfig.apConfig.dhcpAddressStart);
   \   00000480   0x.... 0x....      BL       ?Subroutine5
   1244          		}
   \                     ??CrossCallReturnLabel_21:
   \   00000484   0x6101             STR      R1,[R0, #+16]
   1245          
   1246          	    pS2wProfile->lmtdApConf.dhcpNumAddresses = pConfig->networkConfig.apConfig.dhcpNumAddresses;
   \                     ??S2wConfig_SetValues_32:
   \   00000486   0xF894 0x10D5      LDRB     R1,[R4, #+213]
   \   0000048A   0x7341             STRB     R1,[R0, #+13]
   1247          	    pS2wProfile->lmtdApConf.dnsServerEnable = pConfig->networkConfig.apConfig.dnsServerEnable;
   \   0000048C   0xF894 0x10DC      LDRB     R1,[R4, #+220]
   \   00000490   0x7501             STRB     R1,[R0, #+20]
   1248          	    strcpy((char *)pS2wProfile->lmtdApConf.dnsDomainName, (const char *)pConfig->networkConfig.apConfig.dnsDomainName);
   \   00000492   0xF20B 0x20A1      ADDW     R0,R11,#+673
   \   00000496   0x4639             MOV      R1,R7
   \   00000498   0x.... 0x....      BL       strcpy
   1249          	}
   1250          	
   1251          	if(S2W_WEB_PARAMS_SND_TO_HOST == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   \                     ??S2wConfig_SetValues_23:
   \   0000049C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000004A0   0x2800             CMP      R0,#+0
   \   000004A2   0xBF18             IT       NE 
   \   000004A4   0x2802             CMPNE    R0,#+2
   \   000004A6   0xD172             BNE.N    ??S2wConfig_SetValues_33
   1252          	{
   1253          	S2w_Printf("AP-SSID=");
   \   000004A8   0x.... 0x....      ADR.W    R0,`?<Constant "AP-SSID=">`
   \   000004AC   0x.... 0x....      BL       S2w_Printf
   1254          	AppS2wHal_CharNPut(pConfig->networkConfig.apConfig.ssid.array,pConfig->networkConfig.apConfig.ssid.length);
   \   000004B0   0xF894 0x1050      LDRB     R1,[R4, #+80]
   \   000004B4   0xF104 0x0051      ADD      R0,R4,#+81
   \   000004B8   0x.... 0x....      BL       AppS2wHal_CharNPut
   1255              S2w_Printf("\r\nAP-CHNL=%d\r\nAP-BEACON-INTRL=%d\r\nAP-SECURITY=%d\r\n",
   1256                          pConfig->networkConfig.apConfig.channel,pConfig->networkConfig.apConfig.beaconInterval,
   1257                          pConfig->networkConfig.apConfig.securityType);
   \   000004BC   0xF894 0x30B2      LDRB     R3,[R4, #+178]
   \   000004C0   0xF8B4 0x20C4      LDRH     R2,[R4, #+196]
   \   000004C4   0xF894 0x10C3      LDRB     R1,[R4, #+195]
   \   000004C8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nAP-CHNL=%d\\r\\nAP-BEAC...">`
   \   000004CC   0x.... 0x....      BL       S2w_Printf
   1258          
   1259                   if (pConfig->networkConfig.apConfig.securityType == GSN_WLAN_WPA_PERSONAL)
   \   000004D0   0xF894 0x00B2      LDRB     R0,[R4, #+178]
   \   000004D4   0x2803             CMP      R0,#+3
   \   000004D6   0xD10A             BNE.N    ??S2wConfig_SetValues_34
   1260                   {
   1261                   	S2w_Printf("AP-PSK_PASS_PHRASE=");
   \   000004D8   0x.... 0x....      ADR.W    R0,`?<Constant "AP-PSK_PASS_PHRASE=">`
   \   000004DC   0x.... 0x....      BL       S2w_Printf
   1262          			AppS2wHal_CharNPut(pConfig->networkConfig.apConfig.passphrase.Passphrase,
   1263          							  pConfig->networkConfig.apConfig.passphrase.Len);
   \   000004E0   0xF894 0x1071      LDRB     R1,[R4, #+113]
   \   000004E4   0xF104 0x0072      ADD      R0,R4,#+114
   \   000004E8   0x.... 0x....      BL       AppS2wHal_CharNPut
   1264          			S2w_Printf("\r\n");
   \   000004EC   0xE015             B.N      ??S2wConfig_SetValues_35
   1265                   }
   1266                   else if (pConfig->networkConfig.apConfig.securityType == GSN_WLAN_WEP)
   \                     ??S2wConfig_SetValues_34:
   \   000004EE   0x2802             CMP      R0,#+2
   \   000004F0   0xD116             BNE.N    ??S2wConfig_SetValues_36
   1267                        {
   1268          			UINT8 i;
   1269                             S2w_Printf("AP-WEP_ID=%d\r\nAP-WEP_KEY=",pConfig->networkConfig.apConfig.wepKeyConfig.KeyId);
   \   000004F2   0xF894 0x10B5      LDRB     R1,[R4, #+181]
   \   000004F6   0x.... 0x....      ADR.W    R0,`?<Constant "AP-WEP_ID=%d\\r\\nAP-WEP_...">`
   \   000004FA   0x.... 0x....      BL       S2w_Printf
   1270          	        for(i = 0; i< pConfig->networkConfig.apConfig.wepKeyConfig.KeyLen; i++)
   \   000004FE   0x2600             MOVS     R6,#+0
   \   00000500   0xE006             B.N      ??S2wConfig_SetValues_37
   1271                            {
   1272                      	S2w_Printf("%02x",pConfig->networkConfig.apConfig.wepKeyConfig.Key[i]);
   \                     ??S2wConfig_SetValues_38:
   \   00000502   0x1930             ADDS     R0,R6,R4
   \   00000504   0xF890 0x10B6      LDRB     R1,[R0, #+182]
   \   00000508   0x4650             MOV      R0,R10
   \   0000050A   0x.... 0x....      BL       S2w_Printf
   1273                            }
   \   0000050E   0x1C76             ADDS     R6,R6,#+1
   \                     ??S2wConfig_SetValues_37:
   \   00000510   0xF894 0x00B4      LDRB     R0,[R4, #+180]
   \   00000514   0xB2F6             UXTB     R6,R6
   \   00000516   0x4286             CMP      R6,R0
   \   00000518   0xD3F3             BCC.N    ??S2wConfig_SetValues_38
   1274                            S2w_Printf("\r\n");
   \                     ??S2wConfig_SetValues_35:
   \   0000051A   0x4648             MOV      R0,R9
   \   0000051C   0x.... 0x....      BL       S2w_Printf
   1275                        }
   1276          
   1277          		    ipAddr= (pConfig->networkConfig.apConfig.ipAddress);		
   \                     ??S2wConfig_SetValues_36:
   \   00000520   0xF8D4 0x00C8      LDR      R0,[R4, #+200]
   \   00000524   0x9001             STR      R0,[SP, #+4]
   1278          		    if(ipAddr) S2w_Printf("AP-STATIC_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   00000526   0xB128             CBZ.N    R0,??S2wConfig_SetValues_39
   \   00000528   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_10:
   \   0000052C   0x.... 0x....      ADR.W    R0,`?<Constant "AP-STATIC_IP=%d.%d.%d...">`
   \   00000530   0x.... 0x....      BL       S2w_Printf
   1279          
   1280              ipAddr= pConfig->networkConfig.apConfig.subnetmask;
   \                     ??S2wConfig_SetValues_39:
   \   00000534   0xF8D4 0x00CC      LDR      R0,[R4, #+204]
   \   00000538   0x9001             STR      R0,[SP, #+4]
   1281          		    if(ipAddr) S2w_Printf("AP-SUBNT_MASK=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   0000053A   0xB128             CBZ.N    R0,??S2wConfig_SetValues_40
   \   0000053C   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_11:
   \   00000540   0x.... 0x....      ADR.W    R0,`?<Constant "AP-SUBNT_MASK=%d.%d.%...">`
   \   00000544   0x.... 0x....      BL       S2w_Printf
   1282          
   1283              ipAddr= pConfig->networkConfig.apConfig.gateway;
   \                     ??S2wConfig_SetValues_40:
   \   00000548   0xF8D4 0x00D0      LDR      R0,[R4, #+208]
   \   0000054C   0x9001             STR      R0,[SP, #+4]
   1284          		    if( ipAddr) S2w_Printf("AP-GATEWAY_IP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   0000054E   0xB128             CBZ.N    R0,??S2wConfig_SetValues_41
   \   00000550   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_12:
   \   00000554   0x.... 0x....      ADR.W    R0,`?<Constant "AP-GATEWAY_IP=%d.%d.%...">`
   \   00000558   0x.... 0x....      BL       S2w_Printf
   1285          
   1286              S2w_Printf("AP-DHCPSRVR-ENABLE=%d\r\n",pConfig->networkConfig.apConfig.dhcpServerEnable);
   \                     ??S2wConfig_SetValues_41:
   \   0000055C   0xF894 0x10D4      LDRB     R1,[R4, #+212]
   \   00000560   0x.... 0x....      ADR.W    R0,`?<Constant "AP-DHCPSRVR-ENABLE=%d\\r\\n">`
   \   00000564   0x.... 0x....      BL       S2w_Printf
   1287              ipAddr= pConfig->networkConfig.apConfig.dhcpAddressStart;
   \   00000568   0xF8D4 0x00D8      LDR      R0,[R4, #+216]
   \   0000056C   0x9001             STR      R0,[SP, #+4]
   1288              if(ipAddr) S2w_Printf("AP-AP-DHCPSRVR-STARTIP=%d.%d.%d.%d\r\n",(ipAddr & 0xff),((ipAddr >>8) & 0xff),((ipAddr >> 16) & 0xff),((ipAddr >>24) & 0xff));
   \   0000056E   0xB128             CBZ.N    R0,??S2wConfig_SetValues_42
   \   00000570   0x.... 0x....      BL       ?Subroutine2
   \                     ??CrossCallReturnLabel_13:
   \   00000574   0x.... 0x....      ADR.W    R0,`?<Constant "AP-AP-DHCPSRVR-STARTI...">`
   \   00000578   0x.... 0x....      BL       S2w_Printf
   1289              S2w_Printf("AP-DHCPSRVR-NO-CONN=%d\r\nAP-DNSSRVR-ENABLE=%d\r\nAP-DNS-DOMAIN-NAME=%s\r\n",
   1290                         pConfig->networkConfig.apConfig.dhcpNumAddresses,pConfig->networkConfig.apConfig.dnsServerEnable,pConfig->networkConfig.apConfig.dnsDomainName);
   \                     ??S2wConfig_SetValues_42:
   \   0000057C   0xF894 0x20DC      LDRB     R2,[R4, #+220]
   \   00000580   0xF894 0x10D5      LDRB     R1,[R4, #+213]
   \   00000584   0x.... 0x....      ADR.W    R0,`?<Constant "AP-DHCPSRVR-NO-CONN=%...">`
   \   00000588   0x463B             MOV      R3,R7
   \   0000058A   0x.... 0x....      BL       S2w_Printf
   \                     ??S2wConfig_SetValues_33:
   \   0000058E   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000592   0x2801             CMP      R0,#+1
   \   00000594   0xBF18             IT       NE 
   \   00000596   0x2802             CMPNE    R0,#+2
   \   00000598   0xD123             BNE.N    ??S2wConfig_SetValues_43
   1291          
   1292          	}
   1293          #endif
   1294          	if(S2W_WEB_PARAMS_STORE ==	storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   1295          	{
   1296          	    /* Page 4 values - Device Configuration*/
   1297          	    if(0 != strlen((char*)pConfig->httpdConfig.username))
   \   0000059A   0x1CA0             ADDS     R0,R4,#+2
   \   0000059C   0x.... 0x....      BL       strlen
   \   000005A0   0xB120             CBZ.N    R0,??S2wConfig_SetValues_44
   1298          	        strcpy((char*)pS2wProfile->httpSrvrConf.username, (const char *)pConfig->httpdConfig.username);
   \   000005A2   0x1CA1             ADDS     R1,R4,#+2
   \   000005A4   0xF50B 0x703A      ADD      R0,R11,#+744
   \   000005A8   0x.... 0x....      BL       strcpy
   1299          	    if(0 != strlen((char*)pConfig->httpdConfig.password))
   \                     ??S2wConfig_SetValues_44:
   \   000005AC   0xF104 0x0022      ADD      R0,R4,#+34
   \   000005B0   0x.... 0x....      BL       strlen
   \   000005B4   0xB128             CBZ.N    R0,??S2wConfig_SetValues_45
   1300          	    {
   1301          	        strcpy((char*)pS2wProfile->httpSrvrConf.password, (const char*)pConfig->httpdConfig.password);
   \   000005B6   0xF104 0x0122      ADD      R1,R4,#+34
   \   000005BA   0xF50B 0x7042      ADD      R0,R11,#+776
   \   000005BE   0x.... 0x....      BL       strcpy
   1302          	    }
   1303          		/* system name*/
   1304          		if(0 != strlen((char*)pConfig->sysIdConfig.name))
   \                     ??S2wConfig_SetValues_45:
   \   000005C2   0xF504 0x77FA      ADD      R7,R4,#+500
   \   000005C6   0x4638             MOV      R0,R7
   \   000005C8   0x.... 0x....      BL       strlen
   \   000005CC   0xB148             CBZ.N    R0,??S2wConfig_SetValues_43
   1305          		{
   1306          			memset(pS2wProfile->hostName,0,GSN_NWIF_HOST_NAME_MAX_LEN+1);
   \   000005CE   0xF50B 0x76EE      ADD      R6,R11,#+476
   \   000005D2   0x2210             MOVS     R2,#+16
   \   000005D4   0x.... 0x....      BL       ?Subroutine0
   1307          			strncpy((char*)pS2wProfile->hostName,(const char *)pConfig->sysIdConfig.name, GSN_NWIF_HOST_NAME_MAX_LEN);
   \                     ??CrossCallReturnLabel_0:
   \   000005D8   0x220F             MOVS     R2,#+15
   \   000005DA   0x4639             MOV      R1,R7
   \   000005DC   0x4630             MOV      R0,R6
   \   000005DE   0x.... 0x....      BL       strncpy
   1308          		}
   1309          		
   1310          	}
   1311          	if(S2W_WEB_PARAMS_SND_TO_HOST == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   \                     ??S2wConfig_SetValues_43:
   \   000005E2   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   000005E6   0x.... 0x....      LDR.W    R7,??DataTable70_1
   \   000005EA   0x2800             CMP      R0,#+0
   \   000005EC   0xBF18             IT       NE 
   \   000005EE   0x2802             CMPNE    R0,#+2
   \   000005F0   0xD124             BNE.N    ??S2wConfig_SetValues_46
   1312          	{
   1313                /* Administartive settings is common to both AP and Client*/
   1314                  if(0 != strlen((char*)pConfig->httpdConfig.username))
   \   000005F2   0x1CA0             ADDS     R0,R4,#+2
   \   000005F4   0x.... 0x....      BL       strlen
   \   000005F8   0xB120             CBZ.N    R0,??S2wConfig_SetValues_47
   1315                      S2w_Printf("NEW_USER_NAME=%s\r\n",pConfig->httpdConfig.username);
   \   000005FA   0x1CA1             ADDS     R1,R4,#+2
   \   000005FC   0x.... 0x....      ADR.W    R0,`?<Constant "NEW_USER_NAME=%s\\r\\n">`
   \   00000600   0x.... 0x....      BL       S2w_Printf
   1316                  if(0 != strlen((char*)pConfig->httpdConfig.password))
   \                     ??S2wConfig_SetValues_47:
   \   00000604   0xF104 0x0022      ADD      R0,R4,#+34
   \   00000608   0x.... 0x....      BL       strlen
   \   0000060C   0xB128             CBZ.N    R0,??S2wConfig_SetValues_48
   1317                  {
   1318                      S2w_Printf("NEW_PASS=%s\r\n",pConfig->httpdConfig.password);
   \   0000060E   0x.... 0x....      ADR.W    R0,`?<Constant "NEW_PASS=%s\\r\\n">`
   \   00000612   0xF104 0x0122      ADD      R1,R4,#+34
   \   00000616   0x.... 0x....      BL       S2w_Printf
   1319          
   1320                  }
   1321          		if(1 == s2wappMainTaskCtxt->formatVersion)
   \                     ??S2wConfig_SetValues_48:
   \   0000061A   0x6839             LDR      R1,[R7, #+0]
   \   0000061C   0xF646 0x30B8      MOVW     R0,#+27576
   \   00000620   0x5840             LDR      R0,[R0, R1]
   \   00000622   0x2801             CMP      R0,#+1
   \   00000624   0xD10A             BNE.N    ??S2wConfig_SetValues_46
   1322          		{
   1323          			S2w_Printf("WEP_AUTH_MODE=%d",pS2wProfile->security.authMode);
   \   00000626   0xF89B 0x1078      LDRB     R1,[R11, #+120]
   \   0000062A   0x.... 0x....      ADR.W    R0,`?<Constant "WEP_AUTH_MODE=%d">`
   \   0000062E   0x.... 0x....      BL       S2w_Printf
   1324          			S2w_Printf("AP-WEP_AUTH_MODE=%d",pS2wProfile->lmtdApConf.wepKeyConfig.authType);			
   \   00000632   0x7869             LDRB     R1,[R5, #+1]
   \   00000634   0x.... 0x....      ADR.W    R0,`?<Constant "AP-WEP_AUTH_MODE=%d">`
   \   00000638   0x.... 0x....      BL       S2w_Printf
   1325          		}
   1326          	}
   1327          
   1328          	// flush the data for spi-dma interface
   1329              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??S2wConfig_SetValues_46:
   \   0000063C   0x6839             LDR      R1,[R7, #+0]
   \   0000063E   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000642   0x5C40             LDRB     R0,[R0, R1]
   \   00000644   0x2802             CMP      R0,#+2
   \   00000646   0xBF08             IT       EQ 
   \   00000648   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1330              {
   1331                  s2wSpiFs_Flush();
   \   0000064C   0xF898 0x0000      LDRB     R0,[R8, #+0]
   \   00000650   0x2801             CMP      R0,#+1
   \   00000652   0xBF18             IT       NE 
   \   00000654   0x2802             CMPNE    R0,#+2
   \   00000656   0xD12C             BNE.N    ??S2wConfig_SetValues_49
   1332              }
   1333          
   1334          
   1335          	if(S2W_WEB_PARAMS_STORE == storeParams || S2W_WEB_PARAMS_SND_AND_STORE == storeParams)
   1336          	{
   1337          #ifdef  S2W_NCM_SUPPORT_ENABLE
   1338          		/*update the mode if ncmauto connect is enabled*/
   1339          	if(s2wappMainTaskCtxt->ncmAutoConEn)
   \   00000658   0x6838             LDR      R0,[R7, #+0]
   \   0000065A   0xF500 0x40EA      ADD      R0,R0,#+29952
   \   0000065E   0x6800             LDR      R0,[R0, #+0]
   \   00000660   0xB100             CBZ.N    R0,??S2wConfig_SetValues_50
   \   00000662   0x2001             MOVS     R0,#+1
   \                     ??S2wConfig_SetValues_50:
   \   00000664   0xF88B 0x032A      STRB     R0,[R11, #+810]
   1340          			pS2wProfile->ncmAutoMgr =  1;			
   1341          		else
   1342          			pS2wProfile->ncmAutoMgr = 0;
   1343          	if(s2wCurrent.mode == S2W_WLANDATA_MODE_PROV_AP)
   \   00000668   0xF89B 0x0004      LDRB     R0,[R11, #+4]
   \   0000066C   0x2806             CMP      R0,#+6
   \   0000066E   0xD103             BNE.N    ??S2wConfig_SetValues_51
   1344          		pAppRtcLtchInfo->grpProvVerify = 1;
   \   00000670   0x.... 0x....      LDR.W    R0,??DataTable70_2  ;; 0x4101009c
   \   00000674   0x2101             MOVS     R1,#+1
   \   00000676   0x7001             STRB     R1,[R0, #+0]
   1345          		
   1346          		pS2wProfile->mode =  (pConfig->networkConfig.networkMode == GSN_LIMITED_AP)	? GSN_LIMITED_AP : GSN_INFRA_CLIENT;
   \                     ??S2wConfig_SetValues_51:
   \   00000678   0xF894 0x0044      LDRB     R0,[R4, #+68]
   \   0000067C   0x2802             CMP      R0,#+2
   \   0000067E   0xBF18             IT       NE 
   \   00000680   0x2001             MOVNE    R0,#+1
   \   00000682   0xF88B 0x0004      STRB     R0,[R11, #+4]
   1347          #endif		
   1348          		/* Store updated profile in NVDS */	
   1349          		memcpy(&flashParams.profile[0], pS2wProfile, sizeof(S2W_PROFILE_T));
   \   00000686   0xF44F 0x727E      MOV      R2,#+1016
   \   0000068A   0x4659             MOV      R1,R11
   \   0000068C   0xA802             ADD      R0,SP,#+8
   \   0000068E   0x.... 0x....      BL       memcpy
   1350              if(!s2wappMainTaskCtxt->fsInit)
   \   00000692   0x6838             LDR      R0,[R7, #+0]
   \   00000694   0xF248 0x1470      MOVW     R4,#+33136
   \   00000698   0x5C20             LDRB     R0,[R4, R0]
   \   0000069A   0xB930             CBNZ.N   R0,??S2wConfig_SetValues_52
   1351              {
   1352          		App_FsInit();
   \   0000069C   0x.... 0x....      BL       App_FsInit
   1353          		s2wappMainTaskCtxt->fsInit = TRUE;
   \   000006A0   0x6838             LDR      R0,[R7, #+0]
   \   000006A2   0x2101             MOVS     R1,#+1
   \   000006A4   0x5421             STRB     R1,[R4, R0]
   1354                  f_enterFS();
   \   000006A6   0x.... 0x....      BL       fsm_enterFS
   1355          	}
   1356          	    S2w_SaveS2wProfile(&flashParams, 0);
   \                     ??S2wConfig_SetValues_52:
   \   000006AA   0x2100             MOVS     R1,#+0
   \   000006AC   0xA802             ADD      R0,SP,#+8
   \   000006AE   0x.... 0x....      BL       S2w_SaveS2wProfile
   1357           	}
   1358           #ifdef  S2W_FS_SPI_ENABLE
   1359               //AppS2w_FsSpiFlush();
   1360            #endif
   1361          #ifdef	S2W_UART_ENABLE
   1362            	while(S2wUart_TxStatusGet());
   \                     ??S2wConfig_SetValues_49:
   \   000006B2   0x.... 0x....      BL       S2wUart_TxStatusGet
   \   000006B6   0x2800             CMP      R0,#+0
   \   000006B8   0xD1FB             BNE.N    ??S2wConfig_SetValues_49
   1363          #endif
   1364               /* reboot */
   1365           		(s2wappMainTaskNotifier)(APP_NOTIFICATION_APPLY_SYS_REST, s2wappMainTaskCtxt);
   \   000006BA   0x....             LDR.N    R2,??DataTable68_1
   \   000006BC   0x6839             LDR      R1,[R7, #+0]
   \   000006BE   0x6812             LDR      R2,[R2, #+0]
   \   000006C0   0x202A             MOVS     R0,#+42
   \   000006C2   0x4790             BLX      R2
   1366           }
   1367          }
   \                     ??S2wConfig_SetValues_0:
   \   000006C4   0xF20D 0x7DFC      ADDW     SP,SP,#+2044
   \   000006C8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x0A0A             LSRS     R2,R1,#+8
   \   00000002   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   00000006   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   0000000A   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   0000000E   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   00000012   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   00000016   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF88B 0x0135      STRB     R0,[R11, #+309]
   \   00000006   0xF889 0x0001      STRB     R0,[R9, #+1]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x0E00             LSRS     R0,R0,#+24
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0x9801             LDR      R0,[SP, #+4]
   \   00000006   0xF3C0 0x4307      UBFX     R3,R0,#+16,#+8
   \   0000000A   0xF3C0 0x2207      UBFX     R2,R0,#+8,#+8
   \   0000000E   0xB2C1             UXTB     R1,R0
   \   00000010   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2204             MOVS     R2,#+4
   \   00000002   0xA901             ADD      R1,SP,#+4
   \   00000004   0x4628             MOV      R0,R5
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x0A01             LSRS     R1,R0,#+8
   \   00000002   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000006   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000000A   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   0000000E   0x4770             BX       LR
   1368          
   1369          #endif /*  #ifdef ADK_PROV */
   1370          
   1371          
   1372           #ifdef ADK_PROV

   \                                 In section .text, align 2, keep-with-next
   1373          PRIVATE VOID 
   1374          S2wConfig_InitValues(GSN_SYS_CONFIG_T *pConfig,UINT8 networkMode)
   1375          {
   \                     S2wConfig_InitValues:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1376          	UINT8 i=0;
   1377          #ifdef ADK_PROV_CONFIG_LIMITED_AP
   1378          	 pConfig->networkConfig.apConfig.ssid.length = s2wCurrent.lmtdApConf.ssid.length;
   \   00000002   0x....             LDR.N    R5,??DataTable69_3
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xF895 0x01EC      LDRB     R0,[R5, #+492]
   \   0000000A   0xF884 0x0050      STRB     R0,[R4, #+80]
   1379          	 memcpy(pConfig->networkConfig.apConfig.ssid.array, s2wCurrent.lmtdApConf.ssid.array,
   1380          				s2wCurrent.lmtdApConf.ssid.length);
   \   0000000E   0xF205 0x11ED      ADDW     R1,R5,#+493
   \   00000012   0xF895 0x21EC      LDRB     R2,[R5, #+492]
   \   00000016   0xF104 0x0051      ADD      R0,R4,#+81
   \   0000001A   0x.... 0x....      BL       memcpy
   1381          	 pConfig->networkConfig.apConfig.channel = s2wCurrent.lmtdApConf.channel;
   \   0000001E   0xF204 0x00B2      ADDW     R0,R4,#+178
   \   00000022   0xF895 0x1286      LDRB     R1,[R5, #+646]
   \   00000026   0x7441             STRB     R1,[R0, #+17]
   1382          	 
   1383          	 pConfig->networkConfig.apConfig.securityType  = GSN_WLAN_SECURITY_NONE;
   \   00000028   0x2101             MOVS     R1,#+1
   \   0000002A   0xF884 0x10B2      STRB     R1,[R4, #+178]
   \   0000002E   0xF895 0x1254      LDRB     R1,[R5, #+596]
   \   00000032   0x2908             CMP      R1,#+8
   \   00000034   0xBF1C             ITT      NE 
   \   00000036   0x2904             CMPNE    R1,#+4
   \   00000038   0x2940             CMPNE    R1,#+64
   \   0000003A   0xD101             BNE.N    ??S2wConfig_InitValues_0
   1384          	 
   1385          	 if ((s2wCurrent.lmtdApConf.securityType == SECTYPE_WPA2PSK) \
   1386          		 || (s2wCurrent.lmtdApConf.securityType == SECTYPE_WPAPSK)	\
   1387          		 || (s2wCurrent.lmtdApConf.securityType == SECTYPE_WPA2PSK_TKIP))
   1388          	 {	 
   1389          		 pConfig->networkConfig.apConfig.securityType =GSN_WLAN_WPA_PERSONAL;
   \   0000003C   0x2103             MOVS     R1,#+3
   \   0000003E   0xE001             B.N      ??S2wConfig_InitValues_1
   1390          	 }
   1391          	 else if (s2wCurrent.lmtdApConf.securityType == SECTYPE_WEP )
   \                     ??S2wConfig_InitValues_0:
   \   00000040   0x2902             CMP      R1,#+2
   \   00000042   0xD101             BNE.N    ??S2wConfig_InitValues_2
   1392          	 {
   1393          	 
   1394          		 pConfig->networkConfig.apConfig.securityType = GSN_WLAN_WEP;		 
   \                     ??S2wConfig_InitValues_1:
   \   00000044   0xF884 0x10B2      STRB     R1,[R4, #+178]
   1395          	 }
   1396           
   1397          	 pConfig->networkConfig.apConfig.beaconInterval = s2wCurrent.lmtdApConf.beaconInterval;
   \                     ??S2wConfig_InitValues_2:
   \   00000048   0xF8B5 0x128A      LDRH     R1,[R5, #+650]
   \   0000004C   0x8241             STRH     R1,[R0, #+18]
   1398          	 
   1399          	 pConfig->networkConfig.apConfig.dhcpNumAddresses = s2wCurrent.lmtdApConf.dhcpNumAddresses;
   \   0000004E   0xF104 0x00C8      ADD      R0,R4,#+200
   \   00000052   0xF505 0x7123      ADD      R1,R5,#+652
   \   00000056   0x7B4A             LDRB     R2,[R1, #+13]
   \   00000058   0x7342             STRB     R2,[R0, #+13]
   1400          	 pConfig->networkConfig.apConfig.ipAddress = ntohl(s2wCurrent.lmtdApConf.ipAddress);
   \   0000005A   0xF8D5 0x228C      LDR      R2,[R5, #+652]
   \   0000005E   0x0A13             LSRS     R3,R2,#+8
   \   00000060   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   00000064   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   00000068   0xF402 0x467F      AND      R6,R2,#0xFF00
   \   0000006C   0xEA43 0x2306      ORR      R3,R3,R6, LSL #+8
   \   00000070   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   00000074   0xF8C4 0x20C8      STR      R2,[R4, #+200]
   1401          	 pConfig->networkConfig.apConfig.subnetmask = ntohl(s2wCurrent.lmtdApConf.subnetmask);
   \   00000078   0x684A             LDR      R2,[R1, #+4]
   \   0000007A   0x0A13             LSRS     R3,R2,#+8
   \   0000007C   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   00000080   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   00000084   0xF402 0x467F      AND      R6,R2,#0xFF00
   \   00000088   0xEA43 0x2306      ORR      R3,R3,R6, LSL #+8
   \   0000008C   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   00000090   0x6042             STR      R2,[R0, #+4]
   1402          	 pConfig->networkConfig.apConfig.gateway = ntohl(s2wCurrent.lmtdApConf.gateway);
   \   00000092   0x688A             LDR      R2,[R1, #+8]
   \   00000094   0x0A13             LSRS     R3,R2,#+8
   \   00000096   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   0000009A   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   0000009E   0xF402 0x467F      AND      R6,R2,#0xFF00
   \   000000A2   0xEA43 0x2306      ORR      R3,R3,R6, LSL #+8
   \   000000A6   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000000AA   0x6082             STR      R2,[R0, #+8]
   1403          	 pConfig->networkConfig.apConfig.dhcpServerEnable = s2wCurrent.lmtdApConf.dhcpServerEnable;
   \   000000AC   0x7B0A             LDRB     R2,[R1, #+12]
   \   000000AE   0x7302             STRB     R2,[R0, #+12]
   1404          	 if(0 != s2wCurrent.lmtdApConf.dhcpServerEnable)
   \   000000B0   0x7B0A             LDRB     R2,[R1, #+12]
   \   000000B2   0xB162             CBZ.N    R2,??S2wConfig_InitValues_3
   1405          	 {
   1406          		  pConfig->networkConfig.apConfig.dhcpAddressStart = ntohl(s2wCurrent.lmtdApConf.dhcpAddressStart);
   \   000000B4   0x690A             LDR      R2,[R1, #+16]
   \   000000B6   0x0A13             LSRS     R3,R2,#+8
   \   000000B8   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   000000BC   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   000000C0   0xF402 0x467F      AND      R6,R2,#0xFF00
   \   000000C4   0xEA43 0x2306      ORR      R3,R3,R6, LSL #+8
   \   000000C8   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000000CC   0x6102             STR      R2,[R0, #+16]
   1407           
   1408          	 }
   1409          
   1410          #ifdef S2W_DNS_SERVER_ENABLE
   1411          	 pConfig->networkConfig.apConfig.dnsServerEnable = s2wCurrent.lmtdApConf.dnsServerEnable;
   \                     ??S2wConfig_InitValues_3:
   \   000000CE   0x7D0A             LDRB     R2,[R1, #+20]
   \   000000D0   0x7502             STRB     R2,[R0, #+20]
   1412          	 if(s2wCurrent.lmtdApConf.dnsServerEnable)
   \   000000D2   0x7D08             LDRB     R0,[R1, #+20]
   \   000000D4   0xB128             CBZ.N    R0,??S2wConfig_InitValues_4
   1413          	 {
   1414          		 strcpy((INT8 *)pConfig->networkConfig.apConfig.dnsDomainName, (const INT8 *)s2wCurrent.lmtdApConf.dnsDomainName);
   \   000000D6   0xF205 0x21A1      ADDW     R1,R5,#+673
   \   000000DA   0xF104 0x00DD      ADD      R0,R4,#+221
   \   000000DE   0x.... 0x....      BL       strcpy
   1415          	 }
   1416          #endif		 	 
   1417          #endif
   1418          #ifdef ADK_PROV_CONFIG_CLIENT
   1419          	 pConfig->networkConfig.clientConfig.channel = s2wCurrent.autoWlandata.channel;
   \                     ??S2wConfig_InitValues_4:
   \   000000E2   0xF204 0x1687      ADDW     R6,R4,#+391
   \   000000E6   0x7B68             LDRB     R0,[R5, #+13]
   \   000000E8   0x7430             STRB     R0,[R6, #+16]
   1420          	 pConfig->networkConfig.clientConfig.ssid.length = s2wCurrent.autoWlandata.ssidLen;
   \   000000EA   0xF205 0x000D      ADDW     R0,R5,#+13
   \   000000EE   0x7841             LDRB     R1,[R0, #+1]
   \   000000F0   0xF884 0x1124      STRB     R1,[R4, #+292]
   1421          	 if(s2wCurrent.autoWlandata.ssidLen)
   \   000000F4   0x7842             LDRB     R2,[R0, #+1]
   \   000000F6   0xB12A             CBZ.N    R2,??S2wConfig_InitValues_5
   1422          	 {
   1423          		 memcpy(pConfig->networkConfig.clientConfig.ssid.array,s2wCurrent.autoWlandata.ssid,
   1424          				s2wCurrent.autoWlandata.ssidLen);
   \   000000F8   0xF105 0x0116      ADD      R1,R5,#+22
   \   000000FC   0xF204 0x1025      ADDW     R0,R4,#+293
   \   00000100   0x.... 0x....      BL       memcpy
   1425          	 }
   1426          	 pConfig->networkConfig.clientConfig.wepKeyConfig.KeyId = s2wCurrent.security.wep.keyIdx-1;
   \                     ??S2wConfig_InitValues_5:
   \   00000104   0xF105 0x0078      ADD      R0,R5,#+120
   \   00000108   0x7881             LDRB     R1,[R0, #+2]
   \   0000010A   0x1E49             SUBS     R1,R1,#+1
   \   0000010C   0x7071             STRB     R1,[R6, #+1]
   1427          	 pConfig->networkConfig.clientConfig.wepKeyConfig.KeyLen =
   1428          									   (GSN_WDD_WEP_KEY_LEN_T)s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx - 1];
   \   0000010E   0x7881             LDRB     R1,[R0, #+2]
   \   00000110   0x1949             ADDS     R1,R1,R5
   \   00000112   0xF891 0x107A      LDRB     R1,[R1, #+122]
   \   00000116   0xF884 0x1187      STRB     R1,[R4, #+391]
   1429          	 for(i = 0; i< s2wCurrent.security.wep.keyLen[s2wCurrent.security.wep.keyIdx - 1]; i++)
   \   0000011A   0x2100             MOVS     R1,#+0
   \   0000011C   0xE00A             B.N      ??S2wConfig_InitValues_6
   1430          	 {
   1431          		 pConfig->networkConfig.clientConfig.wepKeyConfig.Key[i] =
   1432          							 s2wCurrent.security.wep.key[s2wCurrent.security.wep.keyIdx -1 ][i];
   \                     ??S2wConfig_InitValues_7:
   \   0000011E   0x230D             MOVS     R3,#+13
   \   00000120   0xFB03 0x5202      MLA      R2,R3,R2,R5
   \   00000124   0x188A             ADDS     R2,R1,R2
   \   00000126   0x190B             ADDS     R3,R1,R4
   \   00000128   0xF892 0x2072      LDRB     R2,[R2, #+114]
   \   0000012C   0xF883 0x2189      STRB     R2,[R3, #+393]
   1433          	 }
   \   00000130   0x1C49             ADDS     R1,R1,#+1
   \   00000132   0xB2C9             UXTB     R1,R1
   \                     ??S2wConfig_InitValues_6:
   \   00000134   0x7882             LDRB     R2,[R0, #+2]
   \   00000136   0x1953             ADDS     R3,R2,R5
   \   00000138   0xF893 0x307A      LDRB     R3,[R3, #+122]
   \   0000013C   0x4299             CMP      R1,R3
   \   0000013E   0xDBEE             BLT.N    ??S2wConfig_InitValues_7
   1434          	 pConfig->networkConfig.clientConfig.wepAuthType = s2wCurrent.security.authMode ;
   \   00000140   0xF895 0x0078      LDRB     R0,[R5, #+120]
   \   00000144   0x73F0             STRB     R0,[R6, #+15]
   1435          	 pConfig->networkConfig.clientConfig.passphrase.Len = s2wCurrent.security.wpa.passPhraseLen;
   \   00000146   0xF895 0x00F3      LDRB     R0,[R5, #+243]
   \   0000014A   0xF884 0x0145      STRB     R0,[R4, #+325]
   1436          	 if(s2wCurrent.security.wpa.passPhraseLen)
   \   0000014E   0xF895 0x20F3      LDRB     R2,[R5, #+243]
   \   00000152   0xB15A             CBZ.N    R2,??S2wConfig_InitValues_8
   1437          	 {
   1438          		 memcpy(pConfig->networkConfig.clientConfig.passphrase.Passphrase,
   1439          				s2wCurrent.security.wpa.wpaPassPhrase,
   1440          				s2wCurrent.security.wpa.passPhraseLen);
   \   00000154   0xF105 0x01B3      ADD      R1,R5,#+179
   \   00000158   0xF504 0x70A3      ADD      R0,R4,#+326
   \   0000015C   0x.... 0x....      BL       memcpy
   1441          		pConfig->networkConfig.clientConfig.passphrase.Passphrase[pConfig->networkConfig.clientConfig.passphrase.Len+1] = '\0';		 
   \   00000160   0xF894 0x0145      LDRB     R0,[R4, #+325]
   \   00000164   0x1900             ADDS     R0,R0,R4
   \   00000166   0x2100             MOVS     R1,#+0
   \   00000168   0xF880 0x1147      STRB     R1,[R0, #+327]
   1442          	 }
   1443          	 pConfig->networkConfig.clientConfig.dhcpFlag = s2wCurrent.netConf.dhcp ;
   \                     ??S2wConfig_InitValues_8:
   \   0000016C   0xF895 0x0188      LDRB     R0,[R5, #+392]
   \   00000170   0x7470             STRB     R0,[R6, #+17]
   1444          	 if(pConfig->networkConfig.clientConfig.dhcpFlag == 0)
   \   00000172   0x2800             CMP      R0,#+0
   \   00000174   0xD152             BNE.N    ??S2wConfig_InitValues_9
   1445          	 {
   1446          		 memcpy( (UINT8*)&pConfig->networkConfig.clientConfig.ipAddress,(s2wCurrent.netConf.ipAddr), 4);
   \   00000176   0xF504 0x76F0      ADD      R6,R4,#+480
   \   0000017A   0x2204             MOVS     R2,#+4
   \   0000017C   0xF505 0x71C6      ADD      R1,R5,#+396
   \   00000180   0x4630             MOV      R0,R6
   \   00000182   0x.... 0x....      BL       memcpy
   1447          		 memcpy( (UINT8*)&pConfig->networkConfig.clientConfig.subnetmask,(s2wCurrent.netConf.netMask), 4);
   \   00000186   0x2204             MOVS     R2,#+4
   \   00000188   0xF505 0x71C8      ADD      R1,R5,#+400
   \   0000018C   0xF504 0x70F2      ADD      R0,R4,#+484
   \   00000190   0x.... 0x....      BL       memcpy
   1448          		 memcpy( (UINT8*)&pConfig->networkConfig.clientConfig.gateway,(s2wCurrent.netConf.gateway), 4);
   \   00000194   0x2204             MOVS     R2,#+4
   \   00000196   0xF505 0x71CA      ADD      R1,R5,#+404
   \   0000019A   0xF504 0x70F6      ADD      R0,R4,#+492
   \   0000019E   0x.... 0x....      BL       memcpy
   1449          		 memcpy( (UINT8*)&pConfig->networkConfig.clientConfig.dnsServer,(s2wCurrent.dns1), 4);
   \   000001A2   0x2204             MOVS     R2,#+4
   \   000001A4   0xF505 0x71D4      ADD      R1,R5,#+424
   \   000001A8   0xF504 0x70F4      ADD      R0,R4,#+488
   \   000001AC   0x.... 0x....      BL       memcpy
   1450          		 pConfig->networkConfig.clientConfig.ipAddress = ntohl(pConfig->networkConfig.clientConfig.ipAddress);
   \   000001B0   0xF8D4 0x01E0      LDR      R0,[R4, #+480]
   \   000001B4   0x0A01             LSRS     R1,R0,#+8
   \   000001B6   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000001BA   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000001BE   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000001C2   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000001C6   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000001CA   0xF8C4 0x01E0      STR      R0,[R4, #+480]
   1451          		 pConfig->networkConfig.clientConfig.subnetmask = ntohl(pConfig->networkConfig.clientConfig.subnetmask);
   \   000001CE   0x6870             LDR      R0,[R6, #+4]
   \   000001D0   0x0A01             LSRS     R1,R0,#+8
   \   000001D2   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000001D6   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000001DA   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000001DE   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000001E2   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   000001E6   0x6070             STR      R0,[R6, #+4]
   1452          		 pConfig->networkConfig.clientConfig.gateway = ntohl(pConfig->networkConfig.clientConfig.gateway);
   \   000001E8   0x68F0             LDR      R0,[R6, #+12]
   \   000001EA   0x0A01             LSRS     R1,R0,#+8
   \   000001EC   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   000001F0   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   000001F4   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   000001F8   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   000001FC   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000200   0x60F0             STR      R0,[R6, #+12]
   1453          		 pConfig->networkConfig.clientConfig.dnsServer = ntohl(pConfig->networkConfig.clientConfig.dnsServer);
   \   00000202   0x68B0             LDR      R0,[R6, #+8]
   \   00000204   0x0A01             LSRS     R1,R0,#+8
   \   00000206   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000020A   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000020E   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000212   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000216   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000021A   0x60B0             STR      R0,[R6, #+8]
   1454          	}
   1455          #endif	
   1456          }
   \                     ??S2wConfig_InitValues_9:
   \   0000021C   0xBD70             POP      {R4-R6,PC}       ;; return
   1457          
   1458          /* Get Values from NVDS */

   \                                 In section .text, align 2, keep-with-next
   1459          PRIVATE VOID 
   1460          S2wConfig_GetValues(GSN_SYS_CONFIG_T *pConfig)
   1461          {
   \                     S2wConfig_GetValues:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1462              GSN_NWIF_IP_CONFIG_T nwParams;
   1463              UINT8 i=0;
   1464          	GSN_WDD_WLAN_CFG_T *pWlanConfig;
   1465          
   1466          	GSN_WIF_WLAN_NW_TYPE_T networkMode=GSN_WIF_WLAN_NW_TYPE_STA;
   1467              if(prePoplnDone)
   \   00000004   0x....             LDR.N    R6,??DataTable70
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x7830             LDRB     R0,[R6, #+0]
   \   0000000A   0xB0AB             SUB      SP,SP,#+172
   \   0000000C   0x2800             CMP      R0,#+0
   \   0000000E   0xF040 0x81A0      BNE.W    ??S2wConfig_GetValues_0
   1468                  return;
   1469              prePoplnDone = 1;
   \   00000012   0x2001             MOVS     R0,#+1
   \   00000014   0x7030             STRB     R0,[R6, #+0]
   1470          	pWlanConfig = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   1471              S2wConfig_InitValues(pConfig,networkMode);
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0x.... 0x....      LDR.W    R9,??DataTable70_1
   \   0000001C   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000020   0xF600 0x7594      ADDW     R5,R0,#+3988
   \   00000024   0x4650             MOV      R0,R10
   \   00000026   0x.... 0x....      BL       S2wConfig_InitValues
   1472          	networkMode =	s2wappMainTaskCtxt->if0.wddCtx.wlanNwType;
   \   0000002A   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   1473          	
   1474              //AppS2wHal_InfoGet(&info);
   1475              pConfig->networkConfig.networkMode = (GSN_NETWORK_MODE_T)networkMode;
   1476              //AppCfg_Get( APP_CFG_REG_DOMAIN_ID, &regDomain);
   1477              pConfig->networkConfig.regDomain = (GSN_WLAN_REG_DOMAIN_T)s2wCurrent.regDomain;
   \   0000002E   0x....             LDR.N    R7,??DataTable70_3
   \   00000030   0xF890 0x8F08      LDRB     R8,[R0, #+3848]
   \   00000034   0xF88A 0x8044      STRB     R8,[R10, #+68]
   1478          
   1479              /* get the ip information by calling geps API */
   1480              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx, &nwParams);
   \   00000038   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   0000003C   0xF897 0x1395      LDRB     R1,[R7, #+917]
   \   00000040   0xF88A 0x11F0      STRB     R1,[R10, #+496]
   \   00000044   0x3050             ADDS     R0,R0,#+80
   \   00000046   0xA904             ADD      R1,SP,#+16
   \   00000048   0x.... 0x....      BL       GsnNwIf_IpConfigGet
   1481              pConfig->networkConfig.ipConfig.ipAddr = ntohl(nwParams.ipv4.ipAddr);
   \   0000004C   0x9807             LDR      R0,[SP, #+28]
   \   0000004E   0x.... 0x....      BL       ?Subroutine6
   \                     ??CrossCallReturnLabel_23:
   \   00000052   0xF10A 0x0444      ADD      R4,R10,#+68
   \   00000056   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   0000005A   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000005E   0x60A0             STR      R0,[R4, #+8]
   1482          
   1483              GsnWdd_PhyAddrGet(&s2wappMainTaskCtxt->if0.wddCtx, (INT8 *)pConfig->networkConfig.macAddr);
   \   00000060   0xF10A 0x0145      ADD      R1,R10,#+69
   \   00000064   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000068   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000006C   0x.... 0x....      BL       GsnWdd_PhyAddrGet
   1484              sprintf((char*)pConfig->sysIdConfig.uid, "%02x%02x%02x%02x%02x%02x",
   1485                     pConfig->networkConfig.macAddr[0],
   1486                     pConfig->networkConfig.macAddr[1],
   1487                     pConfig->networkConfig.macAddr[2],
   1488                     pConfig->networkConfig.macAddr[3],
   1489                     pConfig->networkConfig.macAddr[4],
   1490                     pConfig->networkConfig.macAddr[5]);
   \   00000070   0x79A0             LDRB     R0,[R4, #+6]
   \   00000072   0x.... 0x....      ADR.W    R1,`?<Constant "%02x%02x%02x%02x%02x%02x">`
   \   00000076   0x9003             STR      R0,[SP, #+12]
   \   00000078   0x7960             LDRB     R0,[R4, #+5]
   \   0000007A   0x9002             STR      R0,[SP, #+8]
   \   0000007C   0x7920             LDRB     R0,[R4, #+4]
   \   0000007E   0x9001             STR      R0,[SP, #+4]
   \   00000080   0x78E0             LDRB     R0,[R4, #+3]
   \   00000082   0x9000             STR      R0,[SP, #+0]
   \   00000084   0x78A3             LDRB     R3,[R4, #+2]
   \   00000086   0x7862             LDRB     R2,[R4, #+1]
   \   00000088   0xF50A 0x700D      ADD      R0,R10,#+564
   \   0000008C   0x.... 0x....      BL       sprintf
   1491          
   1492          	if(strlen((const char *)s2wCurrent.hostName) == 0)
   \   00000090   0xF507 0x7BEE      ADD      R11,R7,#+476
   \   00000094   0xF50A 0x79FA      ADD      R9,R10,#+500
   \   00000098   0x4658             MOV      R0,R11
   \   0000009A   0x.... 0x....      BL       strlen
   \   0000009E   0xB948             CBNZ.N   R0,??S2wConfig_GetValues_1
   1493          	{
   1494          		sprintf((char*)pConfig->sysIdConfig.name, "GS_%02x%02x%02x",
   1495                     pConfig->networkConfig.macAddr[3],
   1496                     pConfig->networkConfig.macAddr[4],
   1497                     pConfig->networkConfig.macAddr[5]);
   \   000000A0   0x79A0             LDRB     R0,[R4, #+6]
   \   000000A2   0x.... 0x....      ADR.W    R1,`?<Constant "GS_%02x%02x%02x">`
   \   000000A6   0x9000             STR      R0,[SP, #+0]
   \   000000A8   0x7963             LDRB     R3,[R4, #+5]
   \   000000AA   0x7922             LDRB     R2,[R4, #+4]
   \   000000AC   0x4648             MOV      R0,R9
   \   000000AE   0x.... 0x....      BL       sprintf
   \   000000B2   0xE003             B.N      ??S2wConfig_GetValues_2
   1498          	}
   1499          	else
   1500          	{
   1501          		strcpy((char *)pConfig->sysIdConfig.name,(char *)s2wCurrent.hostName);
   \                     ??S2wConfig_GetValues_1:
   \   000000B4   0x4659             MOV      R1,R11
   \   000000B6   0x4648             MOV      R0,R9
   \   000000B8   0x.... 0x....      BL       strcpy
   1502          	}
   1503          #ifdef ADK_PROV_CONFIG_LIMITED_AP
   1504          
   1505          	if(networkMode ==  (GSN_WIF_WLAN_NW_TYPE_T)GSN_LIMITED_AP)
   \                     ??S2wConfig_GetValues_2:
   \   000000BC   0xF1B8 0x0F02      CMP      R8,#+2
   \   000000C0   0xF040 0x808E      BNE.W    ??S2wConfig_GetValues_3
   1506          	{
   1507              	pConfig->networkConfig.apConfig.ssid.length = pWlanConfig->ssid.length;			
   \   000000C4   0x7828             LDRB     R0,[R5, #+0]
   \   000000C6   0x7320             STRB     R0,[R4, #+12]
   1508          	    memcpy(pConfig->networkConfig.apConfig.ssid.array, pWlanConfig->ssid.array,
   1509                         pWlanConfig->ssid.length);
   \   000000C8   0x1C69             ADDS     R1,R5,#+1
   \   000000CA   0x782A             LDRB     R2,[R5, #+0]
   \   000000CC   0xF10A 0x0051      ADD      R0,R10,#+81
   \   000000D0   0x.... 0x....      BL       memcpy
   1510              	pConfig->networkConfig.apConfig.channel = pWlanConfig->channel[0];//s2wCurrent.lmtdApConf.channel;
   \   000000D4   0xF20A 0x06B2      ADDW     R6,R10,#+178
   \   000000D8   0xF895 0x0027      LDRB     R0,[R5, #+39]
   \   000000DC   0x7470             STRB     R0,[R6, #+17]
   1511          	
   1512          	pConfig->networkConfig.apConfig.securityType  = GSN_WLAN_SECURITY_NONE;
   \   000000DE   0x2001             MOVS     R0,#+1
   \   000000E0   0xF88A 0x00B2      STRB     R0,[R10, #+178]
   1513          	
   1514          		if ((pWlanConfig->securityCfg.mode== S2W_AUTH_MODE_WPA2) \
   1515          			|| (pWlanConfig->securityCfg.mode  == S2W_AUTH_MODE_WPA) )
   \   000000E4   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   000000E8   0x2820             CMP      R0,#+32
   \   000000EA   0xBF18             IT       NE 
   \   000000EC   0x2808             CMPNE    R0,#+8
   \   000000EE   0xD10E             BNE.N    ??S2wConfig_GetValues_4
   1516          		{	
   1517          			pConfig->networkConfig.apConfig.securityType =GSN_WLAN_WPA_PERSONAL;
   \   000000F0   0x2003             MOVS     R0,#+3
   \   000000F2   0xF88A 0x00B2      STRB     R0,[R10, #+178]
   1518          			pConfig->networkConfig.apConfig.passphrase.Len= pWlanConfig->securityCfg.pskConfig.passPhrase.Len;
   \   000000F6   0xF895 0x0053      LDRB     R0,[R5, #+83]
   \   000000FA   0xF88A 0x0071      STRB     R0,[R10, #+113]
   1519          			 if(pWlanConfig->securityCfg.pskConfig.passPhrase.Len)
   \   000000FE   0xF895 0x2053      LDRB     R2,[R5, #+83]
   \   00000102   0xB1E2             CBZ.N    R2,??S2wConfig_GetValues_5
   1520          		    {
   1521          				memcpy(pConfig->networkConfig.apConfig.passphrase.Passphrase,
   1522          					   pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase,
   1523          					   pWlanConfig->securityCfg.pskConfig.passPhrase.Len);
   \   00000104   0xF105 0x0154      ADD      R1,R5,#+84
   \   00000108   0xF10A 0x0072      ADD      R0,R10,#+114
   \   0000010C   0xE00F             B.N      ??S2wConfig_GetValues_6
   1524          			}
   1525          		}
   1526          		else if (pWlanConfig->securityCfg.mode   == S2W_AUTH_MODE_WEP)
   \                     ??S2wConfig_GetValues_4:
   \   0000010E   0x2804             CMP      R0,#+4
   \   00000110   0xD110             BNE.N    ??S2wConfig_GetValues_7
   1527          
   1528          		{	
   1529          			pConfig->networkConfig.apConfig.securityType = GSN_WLAN_WEP;		
   \   00000112   0x2002             MOVS     R0,#+2
   \   00000114   0xF88A 0x00B2      STRB     R0,[R10, #+178]
   1530          			pConfig->networkConfig.apConfig.wepKeyConfig.KeyId=  pWlanConfig->securityCfg.wepConfig.KeyId+1;
   1531          			pConfig->networkConfig.apConfig.wepKeyConfig.KeyLen=  pWlanConfig->securityCfg.wepConfig.KeyLen;
   1532          			memcpy(pConfig->networkConfig.apConfig.wepKeyConfig.Key,pWlanConfig->securityCfg.wepConfig.Key,
   1533          			pConfig->networkConfig.apConfig.wepKeyConfig.KeyLen);
   \   00000118   0xF105 0x0144      ADD      R1,R5,#+68
   \   0000011C   0xF895 0x0043      LDRB     R0,[R5, #+67]
   \   00000120   0x1C40             ADDS     R0,R0,#+1
   \   00000122   0x70F0             STRB     R0,[R6, #+3]
   \   00000124   0xF10A 0x00B6      ADD      R0,R10,#+182
   \   00000128   0xF895 0x2042      LDRB     R2,[R5, #+66]
   \   0000012C   0x70B2             STRB     R2,[R6, #+2]
   \                     ??S2wConfig_GetValues_6:
   \   0000012E   0x.... 0x....      BL       memcpy
   \   00000132   0xE004             B.N      ??S2wConfig_GetValues_5
   1534          	}
   1535          		else if(pWlanConfig->securityCfg.mode   == S2W_AUTH_MODE_WPA2_ENTERPICE)
   \                     ??S2wConfig_GetValues_7:
   \   00000134   0x2840             CMP      R0,#+64
   \   00000136   0xBF04             ITT      EQ 
   \   00000138   0x2004             MOVEQ    R0,#+4
   \   0000013A   0xF88A 0x00B2      STRBEQ   R0,[R10, #+178]
   1536          			pConfig->networkConfig.apConfig.securityType = GSN_WLAN_WPA_ENTERPRISE;	
   1537          
   1538          	    pConfig->networkConfig.apConfig.beaconInterval = pWlanConfig->apSpecificCfg.beaconInterval;
   1539          
   1540              pConfig->networkConfig.apConfig.dhcpNumAddresses = s2wCurrent.lmtdApConf.dhcpNumAddresses;
   \                     ??S2wConfig_GetValues_5:
   \   0000013E   0xF10A 0x01C8      ADD      R1,R10,#+200
   \   00000142   0x8F68             LDRH     R0,[R5, #+58]
   \   00000144   0x8270             STRH     R0,[R6, #+18]
   \   00000146   0xF507 0x7026      ADD      R0,R7,#+664
   \   0000014A   0x7842             LDRB     R2,[R0, #+1]
   \   0000014C   0x734A             STRB     R2,[R1, #+13]
   1541          
   1542          	    pConfig->networkConfig.apConfig.ipAddress = ntohl(nwParams.ipv4.ipAddr);
   \   0000014E   0x9A07             LDR      R2,[SP, #+28]
   \   00000150   0x0A13             LSRS     R3,R2,#+8
   \   00000152   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   00000156   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   0000015A   0xF402 0x457F      AND      R5,R2,#0xFF00
   \   0000015E   0xEA43 0x2305      ORR      R3,R3,R5, LSL #+8
   \   00000162   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   00000166   0xF8CA 0x20C8      STR      R2,[R10, #+200]
   1543          	    pConfig->networkConfig.apConfig.subnetmask = ntohl(nwParams.ipv4.subnetMask);
   \   0000016A   0x9A08             LDR      R2,[SP, #+32]
   \   0000016C   0x0A13             LSRS     R3,R2,#+8
   \   0000016E   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   00000172   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   00000176   0xF402 0x457F      AND      R5,R2,#0xFF00
   \   0000017A   0xEA43 0x2305      ORR      R3,R3,R5, LSL #+8
   \   0000017E   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   00000182   0x604A             STR      R2,[R1, #+4]
   1544          	    pConfig->networkConfig.apConfig.gateway = ntohl(nwParams.ipv4.gatewayIpAddr);
   \   00000184   0x9A09             LDR      R2,[SP, #+36]
   \   00000186   0x0A13             LSRS     R3,R2,#+8
   \   00000188   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   0000018C   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   00000190   0xF402 0x457F      AND      R5,R2,#0xFF00
   \   00000194   0xEA43 0x2305      ORR      R3,R3,R5, LSL #+8
   \   00000198   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   0000019C   0x608A             STR      R2,[R1, #+8]
   1545              pConfig->networkConfig.apConfig.dhcpServerEnable = s2wCurrent.lmtdApConf.dhcpServerEnable;
   \   0000019E   0xF897 0x2298      LDRB     R2,[R7, #+664]
   \   000001A2   0x730A             STRB     R2,[R1, #+12]
   1546          	    if(0 != pConfig->networkConfig.apConfig.dhcpServerEnable)
   \   000001A4   0xB16A             CBZ.N    R2,??S2wConfig_GetValues_8
   1547          	{
   1548          	         pConfig->networkConfig.apConfig.dhcpAddressStart = (ntohl(nwParams.ipv4.ipAddr + 1));
   \   000001A6   0x9A07             LDR      R2,[SP, #+28]
   \   000001A8   0x1C52             ADDS     R2,R2,#+1
   \   000001AA   0x0A13             LSRS     R3,R2,#+8
   \   000001AC   0xF403 0x437F      AND      R3,R3,#0xFF00
   \   000001B0   0xEA43 0x6312      ORR      R3,R3,R2, LSR #+24
   \   000001B4   0xF402 0x457F      AND      R5,R2,#0xFF00
   \   000001B8   0xEA43 0x2305      ORR      R3,R3,R5, LSL #+8
   \   000001BC   0xEA43 0x6202      ORR      R2,R3,R2, LSL #+24
   \   000001C0   0x610A             STR      R2,[R1, #+16]
   1549          
   1550              }
   1551          #ifdef S2W_DNS_SERVER_ENABLE
   1552          	  pConfig->networkConfig.apConfig.dnsServerEnable = s2wCurrent.lmtdApConf.dnsServerEnable;
   \                     ??S2wConfig_GetValues_8:
   \   000001C2   0x7A02             LDRB     R2,[R0, #+8]
   \   000001C4   0x750A             STRB     R2,[R1, #+20]
   1553          	 if(s2wCurrent.lmtdApConf.dnsServerEnable)
   \   000001C6   0x7A01             LDRB     R1,[R0, #+8]
   \   000001C8   0x2900             CMP      R1,#+0
   \   000001CA   0xBF1C             ITT      NE 
   \   000001CC   0x7A40             LDRBNE   R0,[R0, #+9]
   \   000001CE   0x2800             CMPNE    R0,#+0
   1554              {
   1555          	 	if(s2wCurrent.lmtdApConf.dnsDomainName[0] != 0)
   \   000001D0   0xD005             BEQ.N    ??S2wConfig_GetValues_9
   1556                  strcpy((INT8 *)pConfig->networkConfig.apConfig.dnsDomainName, (const INT8 *)s2wCurrent.lmtdApConf.dnsDomainName);
   \   000001D2   0xF207 0x21A1      ADDW     R1,R7,#+673
   \   000001D6   0xF10A 0x00DD      ADD      R0,R10,#+221
   \   000001DA   0x.... 0x....      BL       strcpy
   \                     ??S2wConfig_GetValues_9:
   \   000001DE   0xE0B8             B.N      ??S2wConfig_GetValues_0
   1557              }
   1558          #endif
   1559          
   1560          	}
   1561              // fill the client info
   1562          #endif    
   1563          #ifdef ADK_PROV_CONFIG_CLIENT
   1564          	if(networkMode ==(GSN_WIF_WLAN_NW_TYPE_T) GSN_INFRA_CLIENT)
   \                     ??S2wConfig_GetValues_3:
   \   000001E0   0xF1B8 0x0F01      CMP      R8,#+1
   \   000001E4   0xD1FB             BNE.N    ??S2wConfig_GetValues_9
   1565          	{
   1566                  pConfig->networkConfig.clientConfig.channel = pWlanConfig->channel[0];
   \   000001E6   0xF20A 0x1787      ADDW     R7,R10,#+391
   \   000001EA   0xF895 0x0027      LDRB     R0,[R5, #+39]
   \   000001EE   0x7438             STRB     R0,[R7, #+16]
   1567              	pConfig->networkConfig.clientConfig.ssid.length = pWlanConfig->ssid.length;
   \   000001F0   0x7828             LDRB     R0,[R5, #+0]
   \   000001F2   0xF88A 0x0124      STRB     R0,[R10, #+292]
   1568          	    if( pWlanConfig->ssid.length)
   \   000001F6   0x782A             LDRB     R2,[R5, #+0]
   \   000001F8   0xB122             CBZ.N    R2,??S2wConfig_GetValues_10
   1569              {
   1570          			memcpy(pConfig->networkConfig.clientConfig.ssid.array, pWlanConfig->ssid.array,
   1571          			        pWlanConfig->ssid.length);
   \   000001FA   0x1C69             ADDS     R1,R5,#+1
   \   000001FC   0xF20A 0x1025      ADDW     R0,R10,#+293
   \   00000200   0x.... 0x....      BL       memcpy
   1572          	}
   1573              // populate wep key
   1574          	    pConfig->networkConfig.clientConfig.wepKeyConfig.KeyId =  pWlanConfig->securityCfg.wepConfig.KeyId+1;
   \                     ??S2wConfig_GetValues_10:
   \   00000204   0xF895 0x0043      LDRB     R0,[R5, #+67]
   \   00000208   0x1C40             ADDS     R0,R0,#+1
   \   0000020A   0x7078             STRB     R0,[R7, #+1]
   1575          
   1576              pConfig->networkConfig.clientConfig.wepKeyConfig.KeyLen =
   1577          														   pWlanConfig->securityCfg.wepConfig.KeyLen;
   \   0000020C   0xF895 0x0042      LDRB     R0,[R5, #+66]
   \   00000210   0xF88A 0x0187      STRB     R0,[R10, #+391]
   1578          
   1579          	    for(i = 0; i< pWlanConfig->securityCfg.wepConfig.KeyLen; i++)
   \   00000214   0x2000             MOVS     R0,#+0
   \   00000216   0xE008             B.N      ??S2wConfig_GetValues_11
   1580              {
   1581                  pConfig->networkConfig.clientConfig.wepKeyConfig.Key[i] =
   1582          	                            pWlanConfig->securityCfg.wepConfig.Key[i];
   \                     ??S2wConfig_GetValues_12:
   \   00000218   0x1942             ADDS     R2,R0,R5
   \   0000021A   0xEB00 0x010A      ADD      R1,R0,R10
   \   0000021E   0xF892 0x2044      LDRB     R2,[R2, #+68]
   \   00000222   0xF881 0x2189      STRB     R2,[R1, #+393]
   1583              }
   \   00000226   0x1C40             ADDS     R0,R0,#+1
   \   00000228   0xB2C0             UXTB     R0,R0
   \                     ??S2wConfig_GetValues_11:
   \   0000022A   0xF895 0x1042      LDRB     R1,[R5, #+66]
   \   0000022E   0x4288             CMP      R0,R1
   \   00000230   0xDBF2             BLT.N    ??S2wConfig_GetValues_12
   1584          		pConfig->networkConfig.clientConfig.securityType = GSN_WLAN_SECURITY_NONE;
   \   00000232   0x2001             MOVS     R0,#+1
   \   00000234   0x74B8             STRB     R0,[R7, #+18]
   1585          		if ((pWlanConfig->securityCfg.mode   == S2W_AUTH_MODE_WPA2) \
   1586          					|| (pWlanConfig->securityCfg.mode == S2W_AUTH_MODE_WPA) )
   \   00000236   0xF895 0x0040      LDRB     R0,[R5, #+64]
   \   0000023A   0x2820             CMP      R0,#+32
   \   0000023C   0xBF18             IT       NE 
   \   0000023E   0x2808             CMPNE    R0,#+8
   \   00000240   0xD102             BNE.N    ??S2wConfig_GetValues_13
   1587          		{	
   1588          			pConfig->networkConfig.clientConfig.securityType = GSN_WLAN_WPA_PERSONAL;
   \   00000242   0x2003             MOVS     R0,#+3
   \   00000244   0x74B8             STRB     R0,[R7, #+18]
   \   00000246   0xE03C             B.N      ??S2wConfig_GetValues_14
   1589          		}
   1590          		else if (pWlanConfig->securityCfg.mode   == S2W_AUTH_MODE_WEP )
   \                     ??S2wConfig_GetValues_13:
   \   00000248   0x2804             CMP      R0,#+4
   \   0000024A   0xD10A             BNE.N    ??S2wConfig_GetValues_15
   1591          		{
   1592          			pConfig->networkConfig.clientConfig.securityType =  GSN_WLAN_WEP;		
   \   0000024C   0x2002             MOVS     R0,#+2
   \   0000024E   0x74B8             STRB     R0,[R7, #+18]
   1593          			pConfig->networkConfig.clientConfig.wepAuthType = GSN_MAC_AUTH_OPEN;
   \   00000250   0x2001             MOVS     R0,#+1
   \   00000252   0x73F8             STRB     R0,[R7, #+15]
   1594          			if(	GSN_WDD_SEC_WEP_SHARED  == pWlanConfig->securityCfg.wepConfig.authType)
   \   00000254   0xF895 0x0041      LDRB     R0,[R5, #+65]
   \   00000258   0x2801             CMP      R0,#+1
   \   0000025A   0xD132             BNE.N    ??S2wConfig_GetValues_14
   1595          				pConfig->networkConfig.clientConfig.wepAuthType =	GSN_MAC_AUTH_SHARED;
   \   0000025C   0x2002             MOVS     R0,#+2
   \   0000025E   0x73F8             STRB     R0,[R7, #+15]
   \   00000260   0xE02F             B.N      ??S2wConfig_GetValues_14
   1596          		}
   1597          		else if(pWlanConfig->securityCfg.mode	 == S2W_AUTH_MODE_WPA_ENTERPICE ||
   1598          			    pWlanConfig->securityCfg.mode	 == S2W_AUTH_MODE_WPA2_ENTERPICE   )
   \                     ??S2wConfig_GetValues_15:
   \   00000262   0x2810             CMP      R0,#+16
   \   00000264   0xBF18             IT       NE 
   \   00000266   0x2840             CMPNE    R0,#+64
   \   00000268   0xD12B             BNE.N    ??S2wConfig_GetValues_14
   1599              	{
   1600          			pConfig->networkConfig.clientConfig.securityType = GSN_WLAN_WPA_ENTERPRISE; 
   \   0000026A   0x2004             MOVS     R0,#+4
   \   0000026C   0x74B8             STRB     R0,[R7, #+18]
   1601          			pConfig->networkConfig.clientConfig.eapType = (GsnProvEapType)S2wWeb_EapAuthTypeGet(pWlanConfig->securityCfg.eapConfig.outerAuthType,
   1602          																				pWlanConfig->securityCfg.eapConfig.innerAuthType); 
   \   0000026E   0x2207             MOVS     R2,#+7
   \   00000270   0xF895 0x00B5      LDRB     R0,[R5, #+181]
   \   00000274   0xF895 0x10B4      LDRB     R1,[R5, #+180]
   \   00000278   0x2300             MOVS     R3,#+0
   \                     ??S2wConfig_GetValues_16:
   \   0000027A   0xEB06 0x04C3      ADD      R4,R6,R3, LSL #+3
   \   0000027E   0xF8D4 0xE004      LDR      LR,[R4, #+4]
   \   00000282   0x4571             CMP      R1,LR
   \   00000284   0xBF02             ITTT     EQ 
   \   00000286   0x68A4             LDREQ    R4,[R4, #+8]
   \   00000288   0x42A0             CMPEQ    R0,R4
   \   0000028A   0x461A             MOVEQ    R2,R3
   \   0000028C   0x1C5B             ADDS     R3,R3,#+1
   \   0000028E   0x2B07             CMP      R3,#+7
   \   00000290   0xDBF3             BLT.N    ??S2wConfig_GetValues_16
   \   00000292   0x74FA             STRB     R2,[R7, #+19]
   1603          			memcpy(pConfig->networkConfig.clientConfig.eapUsername.Name,pWlanConfig->securityCfg.eapConfig.userName.Name, 
   1604          				pWlanConfig->securityCfg.eapConfig.userName.Length);
   \   00000294   0xF105 0x01B7      ADD      R1,R5,#+183
   \   00000298   0xF895 0x20B6      LDRB     R2,[R5, #+182]
   \   0000029C   0xF50A 0x70CE      ADD      R0,R10,#+412
   \   000002A0   0x.... 0x....      BL       memcpy
   1605          			pConfig->networkConfig.clientConfig.eapUsername.Length=pWlanConfig->securityCfg.eapConfig.userName.Length;
   \   000002A4   0xF895 0x00B6      LDRB     R0,[R5, #+182]
   \   000002A8   0x7538             STRB     R0,[R7, #+20]
   1606          			memcpy(pConfig->networkConfig.clientConfig.eapPassword.Pwd, pWlanConfig->securityCfg.eapConfig.password.Pwd, 
   1607          				pWlanConfig->securityCfg.eapConfig.password.Length);
   \   000002AA   0xF105 0x01D8      ADD      R1,R5,#+216
   \   000002AE   0xF895 0x20D7      LDRB     R2,[R5, #+215]
   \   000002B2   0xF20A 0x10BD      ADDW     R0,R10,#+445
   \   000002B6   0x.... 0x....      BL       memcpy
   1608          			pConfig->networkConfig.clientConfig.eapPassword.Length = pWlanConfig->securityCfg.eapConfig.password.Length;
   \   000002BA   0xF895 0x00D7      LDRB     R0,[R5, #+215]
   \   000002BE   0xF88A 0x01BC      STRB     R0,[R10, #+444]
   1609              }
   1610          	    
   1611              // populate client ip info
   1612          	    pConfig->networkConfig.clientConfig.passphrase.Len = pWlanConfig->securityCfg.pskConfig.passPhrase.Len;
   \                     ??S2wConfig_GetValues_14:
   \   000002C2   0xF895 0x0053      LDRB     R0,[R5, #+83]
   \   000002C6   0xF88A 0x0145      STRB     R0,[R10, #+325]
   1613          	    if(pWlanConfig->securityCfg.pskConfig.passPhrase.Len)
   \   000002CA   0xF895 0x2053      LDRB     R2,[R5, #+83]
   \   000002CE   0xB12A             CBZ.N    R2,??S2wConfig_GetValues_17
   1614              {
   1615          			memcpy(pConfig->networkConfig.clientConfig.passphrase.Passphrase,
   1616          				   pWlanConfig->securityCfg.pskConfig.passPhrase.Passphrase,
   1617          				   pWlanConfig->securityCfg.pskConfig.passPhrase.Len);
   \   000002D0   0xF105 0x0154      ADD      R1,R5,#+84
   \   000002D4   0xF50A 0x70A3      ADD      R0,R10,#+326
   \   000002D8   0x.... 0x....      BL       memcpy
   1618          
   1619             }
   1620          	    pConfig->networkConfig.clientConfig.dhcpFlag   = (nwParams.ipv4.staticIp)?0:1;
   \                     ??S2wConfig_GetValues_17:
   \   000002DC   0x9806             LDR      R0,[SP, #+24]
   \   000002DE   0x1E40             SUBS     R0,R0,#+1
   \   000002E0   0x4180             SBCS     R0,R0,R0
   \   000002E2   0x0FC0             LSRS     R0,R0,#+31
   \   000002E4   0x7478             STRB     R0,[R7, #+17]
   1621          		pConfig->networkConfig.clientConfig.ipAddress  = ntohl(nwParams.ipv4.ipAddr);
   \   000002E6   0xF50A 0x70DE      ADD      R0,R10,#+444
   \   000002EA   0x9907             LDR      R1,[SP, #+28]
   \   000002EC   0x0A0A             LSRS     R2,R1,#+8
   \   000002EE   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   000002F2   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   000002F6   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   000002FA   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   000002FE   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   00000302   0x6241             STR      R1,[R0, #+36]
   1622          		pConfig->networkConfig.clientConfig.subnetmask = ntohl(nwParams.ipv4.subnetMask);
   \   00000304   0x9908             LDR      R1,[SP, #+32]
   \   00000306   0x0A0A             LSRS     R2,R1,#+8
   \   00000308   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   0000030C   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   00000310   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   00000314   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   00000318   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   0000031C   0x6281             STR      R1,[R0, #+40]
   1623          	    pConfig->networkConfig.clientConfig.gateway	   = ntohl(nwParams.ipv4.gatewayIpAddr);
   \   0000031E   0x9909             LDR      R1,[SP, #+36]
   \   00000320   0x0A0A             LSRS     R2,R1,#+8
   \   00000322   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   00000326   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   0000032A   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   0000032E   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   00000332   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   00000336   0x6301             STR      R1,[R0, #+48]
   1624          	    pConfig->networkConfig.clientConfig.dnsServer  = ntohl(nwParams.ipv4.dnsPriSrvrIp);
   \   00000338   0x990C             LDR      R1,[SP, #+48]
   \   0000033A   0x0A0A             LSRS     R2,R1,#+8
   \   0000033C   0xF402 0x427F      AND      R2,R2,#0xFF00
   \   00000340   0xEA42 0x6211      ORR      R2,R2,R1, LSR #+24
   \   00000344   0xF401 0x437F      AND      R3,R1,#0xFF00
   \   00000348   0xEA42 0x2203      ORR      R2,R2,R3, LSL #+8
   \   0000034C   0xEA42 0x6101      ORR      R1,R2,R1, LSL #+24
   \   00000350   0x62C1             STR      R1,[R0, #+44]
   1625          
   1626          	}
   1627          	#endif
   1628          }
   \                     ??S2wConfig_GetValues_0:
   \   00000352   0xB02B             ADD      SP,SP,#+172
   \   00000354   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1629          
   1630          
   1631          #ifdef S2W_WEB_SRVR_LOGO_INTRNL_FLASH
   1632          /*
   1633           * Callback function for logo handler. This will be called by the
   1634           * logo URI handler to obtain information about the logo location.
   1635           * This function should fill in the location and size
   1636           */
   1637          PRIVATE VOID
   1638          App_LogoInfoCb(GSN_HTTPD_LOGO_INFO_T* pInfo)
   1639          {
   1640              UINT32 logoSize = 0;
   1641              memcpy(&logoSize, (INT8 *)(GSN_FACT_DFLT_LOGO_ADDR), sizeof(UINT32));
   1642              if(logoSize == 0xffffffff)
   1643              {
   1644                  logoSize = 0;
   1645              }
   1646          
   1647              pInfo->location = (INT8*) GSN_FACT_DFLT_LOGO_ADDR + sizeof(UINT32);
   1648              pInfo->size = logoSize;
   1649          }
   1650          #endif
   1651          #endif
   1652          #endif
   1653          
   1654          
   1655          
   1656          #if defined(S2W_WEB_SERVER) || defined(S2W_WEB_PROV)
   1657          #ifdef S2W_WEB_SRVR_STACK_STATIC
   1658          #pragma ghs section bss = ".bss_NoZeroInit"
   1659          #ifdef S2W_SSL_SERVER_SUPPORT
   1660          	PRIVATE UINT32 s2wWebServerTaskStack[APP_CFG_SSL_WEB_SRVR_STACK_SIZE/4];
   1661          #else
   1662          	PRIVATE UINT32 s2wWebServerTaskStack[APP_CFG_WEB_SRVR_STACK_SIZE/4];
   1663          #endif
   1664          #endif
   1665                  

   \                                 In section .text, align 2, keep-with-next
   1666          PUBLIC UINT8*
   1667          S2wApp_WebserverStack_Get(UINT32 sslEnbl)
   1668          {
   1669          #ifdef S2W_WEB_SRVR_STACK_STATIC
   1670          	return ((UINT8 *)s2wWebServerTaskStack);
   1671          #else
   1672          	UINT32 stackSize = APP_CFG_WEB_SRVR_STACK_SIZE;
   1673          	if(sslEnbl)
   1674          	{
   1675          		stackSize = APP_CFG_SSL_WEB_SRVR_STACK_SIZE;
   1676          	}
   1677          	return (UINT8 *)gsn_malloc(stackSize);
   \                     S2wApp_WebserverStack_Get:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0xF240 0x618D      MOVW     R1,#+1677
   \   00000006   0xF44F 0x5080      MOV      R0,#+4096
   \   0000000A   0x.... 0x....      B.W      GsnDynMemMgmt_Alloc
   1678          #endif	
   1679          }

   \                                 In section .text, align 2, keep-with-next
   1680          PUBLIC UINT32
   1681          S2wApp_WebserverStackSize_Get(UINT32 sslEnbl)
   1682          {
   1683          #ifdef S2W_WEB_SRVR_STACK_STATIC
   1684          	return (sizeof(s2wWebServerTaskStack));
   1685          #else
   1686          	UINT32 stackSize = APP_CFG_WEB_SRVR_STACK_SIZE;
   1687          	if(sslEnbl)
   1688          	{
   1689          		stackSize = APP_CFG_SSL_WEB_SRVR_STACK_SIZE;
   1690          	}
   1691          	return stackSize;
   \                     S2wApp_WebserverStackSize_Get:
   \   00000000   0xF44F 0x5080      MOV      R0,#+4096
   \   00000004   0x4770             BX       LR               ;; return
   1692          #endif
   1693          }

   \                                 In section .text, align 2, keep-with-next
   1694          PUBLIC VOID
   1695          S2wApp_WebserverStack_Free(UINT8* stackPtr)
   1696          {
   1697          #ifndef S2W_WEB_SRVR_STACK_STATIC
   1698          	gsn_free(stackPtr);
   \                     S2wApp_WebserverStack_Free:
   \   00000000   0x.... 0x....      B.W      GsnDynMemMgmt_Free
   1699          #endif
   1700          }

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "A:/certs">`:
   \   00000000   0x41 0x3A          DC8 "A:/certs"
   \              0x2F 0x63    
   \              0x65 0x72    
   \              0x74 0x73    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "A:/certs/">`:
   \   00000000   0x41 0x3A          DC8 "A:/certs/"
   \              0x2F 0x63    
   \              0x65 0x72    
   \              0x74 0x73    
   \              0x2F 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSLCERT">`:
   \   00000000   0x53 0x53          DC8 "SSLCERT"
   \              0x4C 0x43    
   \              0x45 0x52    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<Response><status>SUC...">`:
   \   00000000   0x3C 0x52          DC8 "<Response><status>SUCCESS</status><msg>"
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3E    
   \              0x3C 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x53 0x55    
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x3C    
   \              0x2F 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x3C 0x6D    
   \              0x73 0x67    
   \              0x3E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s %d files Uploaded<...">`:
   \   00000000   0x25 0x73          DC8 "%s %d files Uploaded</msg></Response>"
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x73 0x20    
   \              0x55 0x70    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x65 0x64    
   \              0x3C 0x2F    
   \              0x6D 0x73    
   \              0x67 0x3E    
   \              0x3C 0x2F    
   \              0x52 0x65    
   \              0x73 0x70    
   \              0x6F 0x6E    
   \              0x73 0x65    
   \              0x3E 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<Response><status>FAI...">`:
   \   00000000   0x3C 0x52          DC8 "<Response><status>FAILED</status><msg>"
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3E    
   \              0x3C 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x45 0x44    
   \              0x3C 0x2F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3E 0x3C    
   \              0x6D 0x73    
   \              0x67 0x3E    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s %d file Uploaded</...">`:
   \   00000000   0x25 0x73          DC8 "%s %d file Uploaded</msg></Response>"
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x66 0x69    
   \              0x6C 0x65    
   \              0x20 0x55    
   \              0x70 0x6C    
   \              0x6F 0x61    
   \              0x64 0x65    
   \              0x64 0x3C    
   \              0x2F 0x6D    
   \              0x73 0x67    
   \              0x3E 0x3C    
   \              0x2F 0x52    
   \              0x65 0x73    
   \              0x70 0x6F    
   \              0x6E 0x73    
   \              0x65 0x3E    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   0x77 0x00          DC8      "w",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64_1:
   \   00000000   0x70 0x62          DC8      "pbc"
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64_2:
   \   00000000   0x70 0x69          DC8      "pin"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/gainspan/system/sslc...">`:
   \   00000000   0x2F 0x67          DC8 "/gainspan/system/sslcerts"
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x73    
   \              0x73 0x6C    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_CA">`:
   \   00000000   0x53 0x53          DC8 "SSL_CA"
   \              0x4C 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCertificate %s Not ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Certificate %s Not Found"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x46    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_SERVER">`:
   \   00000000   0x53 0x53          DC8 "SSL_SERVER"
   \              0x4C 0x5F    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_KEY">`:
   \   00000000   0x53 0x53          DC8 "SSL_KEY"
   \              0x4C 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "index.html">`:
   \   00000000   0x69 0x6E          DC8 "index.html"
   \              0x64 0x65    
   \              0x78 0x2E    
   \              0x68 0x74    
   \              0x6D 0x6C    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL Certificate Confi...">`:
   \   00000000   0x53 0x53          DC8 "SSL Certificate Configuration"
   \              0x4C 0x20    
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x75 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/gainspan/system/certs">`:
   \   00000000   0x2F 0x67          DC8 "/gainspan/system/certs"
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x63    
   \              0x65 0x72    
   \              0x74 0x73    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "5.1.5">`:
   \   00000000   0x35 0x2E          DC8 "5.1.5"
   \              0x31 0x2E    
   \              0x35 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/gainspan/system/wpac...">`:
   \   00000000   0x2F 0x67          DC8 "/gainspan/system/wpacertupload"
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x77    
   \              0x70 0x61    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x75 0x70    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "/gainspan/system/sslc...">_1`:
   \   00000000   0x2F 0x67          DC8 "/gainspan/system/sslcertupload"
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2F    
   \              0x73 0x79    
   \              0x73 0x74    
   \              0x65 0x6D    
   \              0x2F 0x73    
   \              0x73 0x6C    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x75 0x70    
   \              0x6C 0x6F    
   \              0x61 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   0x2F 0x00          DC8      "/",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TLS_CA">`:
   \   00000000   0x54 0x4C          DC8 "TLS_CA"
   \              0x53 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<certs>">`:
   \   00000000   0x3C 0x63          DC8 "<certs>"
   \              0x65 0x72    
   \              0x74 0x73    
   \              0x3E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "A:/certs/*.*">`:
   \   00000000   0x41 0x3A          DC8 "A:/certs/*.*"
   \              0x2F 0x63    
   \              0x65 0x72    
   \              0x74 0x73    
   \              0x2F 0x2A    
   \              0x2E 0x2A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<cert><name>%s</name>...">`:
   \   00000000   0x3C 0x63          DC8 "<cert><name>%s</name></cert>"
   \              0x65 0x72    
   \              0x74 0x3E    
   \              0x3C 0x6E    
   \              0x61 0x6D    
   \              0x65 0x3E    
   \              0x25 0x73    
   \              0x3C 0x2F    
   \              0x6E 0x61    
   \              0x6D 0x65    
   \              0x3E 0x3C    
   \              0x2F 0x63    
   \              0x65 0x72    
   \              0x74 0x3E    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "</certs>">`:
   \   00000000   0x3C 0x2F          DC8 "</certs>"
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x73 0x3E    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<status>ok</status>">`:
   \   00000000   0x3C 0x73          DC8 "<status>ok</status>"
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x6F 0x6B    
   \              0x3C 0x2F    
   \              0x73 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x3E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "<status>error</status>">`:
   \   00000000   0x3C 0x73          DC8 "<status>error</status>"
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x3C    
   \              0x2F 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x3E    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67_1:
   \   00000000   0x2E 0x2E          DC8      0x2E, 0x2E, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67_2:
   \   00000000   0x........         DC32     fd

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67_3:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable67_4:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68:
   \   00000000   0x........         DC32     storeParams

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_1:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_2:
   \   00000000   0x........         DC32     prePoplnDone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable68_3:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   0x........         DC32     pS2wHttpdTaskStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_1:
   \   00000000   0x........         DC32     S2wWebProv_WpsCbFn

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_2:
   \   00000000   0x........         DC32     S2wWebProv_FileUploadCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_3:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   0x........         DC32     prePoplnDone

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_1:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_2:
   \   00000000   0x4101009C         DC32     0x4101009c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_3:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSID=">`:
   \   00000000   0x53 0x53          DC8 "SSID="
   \              0x49 0x44    
   \              0x3D 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCHNL=%d\\r\\nCONN_TYPE=...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012CHNL=%d\015\012CONN_TYPE=%d\015\012MODE=%d\015\012SECURITY=%d\015\012"
   \              0x43 0x48    
   \              0x4E 0x4C    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x5F    
   \              0x54 0x59    
   \              0x50 0x45    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x4D    
   \              0x4F 0x44    
   \              0x45 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x53 0x45    
   \              0x43 0x55    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WEP_ID=%d\\r\\nWEP_KEY=">`:
   \   00000000   0x57 0x45          DC8 "WEP_ID=%d\015\012WEP_KEY="
   \              0x50 0x5F    
   \              0x49 0x44    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x57    
   \              0x45 0x50    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x">`:
   \   00000000   0x25 0x30          DC8 "%02x"
   \              0x32 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PSK_PASS_PHRASE=">`:
   \   00000000   0x50 0x53          DC8 "PSK_PASS_PHRASE="
   \              0x4B 0x5F    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x5F 0x50    
   \              0x48 0x52    
   \              0x41 0x53    
   \              0x45 0x3D    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "EAP_USERNAME=">`:
   \   00000000   0x45 0x41          DC8 "EAP_USERNAME="
   \              0x50 0x5F    
   \              0x55 0x53    
   \              0x45 0x52    
   \              0x4E 0x41    
   \              0x4D 0x45    
   \              0x3D 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nEAP_PASSWORD=">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012EAP_PASSWORD="
   \              0x45 0x41    
   \              0x50 0x5F    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x57 0x4F    
   \              0x52 0x44    
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "DHCP_ENBL=%d\\r\\n">`:
   \   00000000   0x44 0x48          DC8 "DHCP_ENBL=%d\015\012"
   \              0x43 0x50    
   \              0x5F 0x45    
   \              0x4E 0x42    
   \              0x4C 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "STATIC_IP=%d.%d.%d.%d\\r\\n">`:
   \   00000000   0x53 0x54          DC8 "STATIC_IP=%d.%d.%d.%d\015\012"
   \              0x41 0x54    
   \              0x49 0x43    
   \              0x5F 0x49    
   \              0x50 0x3D    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SUBNT_MASK=%d.%d.%d.%d\\r\\n">`:
   \   00000000   0x53 0x55          DC8 "SUBNT_MASK=%d.%d.%d.%d\015\012"
   \              0x42 0x4E    
   \              0x54 0x5F    
   \              0x4D 0x41    
   \              0x53 0x4B    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GATEWAY_IP=%d.%d.%d.%d\\r\\n">`:
   \   00000000   0x47 0x41          DC8 "GATEWAY_IP=%d.%d.%d.%d\015\012"
   \              0x54 0x45    
   \              0x57 0x41    
   \              0x59 0x5F    
   \              0x49 0x50    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AUTO_DNS_ENBL=%d\\r\\n">`:
   \   00000000   0x41 0x55          DC8 "AUTO_DNS_ENBL=%d\015\012"
   \              0x54 0x4F    
   \              0x5F 0x44    
   \              0x4E 0x53    
   \              0x5F 0x45    
   \              0x4E 0x42    
   \              0x4C 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "PRIMERY_DNS_IP=%d.%d....">`:
   \   00000000   0x50 0x52          DC8 "PRIMERY_DNS_IP=%d.%d.%d.%d\015\012"
   \              0x49 0x4D    
   \              0x45 0x52    
   \              0x59 0x5F    
   \              0x44 0x4E    
   \              0x53 0x5F    
   \              0x49 0x50    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SECNDRY_DNS_IP=%d.%d....">`:
   \   00000000   0x53 0x45          DC8 "SECNDRY_DNS_IP=%d.%d.%d.%d\015\012"
   \              0x43 0x4E    
   \              0x44 0x52    
   \              0x59 0x5F    
   \              0x44 0x4E    
   \              0x53 0x5F    
   \              0x49 0x50    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-SSID=">`:
   \   00000000   0x41 0x50          DC8 "AP-SSID="
   \              0x2D 0x53    
   \              0x53 0x49    
   \              0x44 0x3D    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nAP-CHNL=%d\\r\\nAP-BEAC...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 41H, 50H, 2DH, 43H, 48H, 4EH
   \              0x41 0x50    
   \              0x2D 0x43    
   \              0x48 0x4E    
   \   00000008   0x4C 0x3D          DC8 4CH, 3DH, 25H, 64H, 0DH, 0AH, 41H, 50H
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x41 0x50    
   \   00000010   0x2D 0x42          DC8 2DH, 42H, 45H, 41H, 43H, 4FH, 4EH, 2DH
   \              0x45 0x41    
   \              0x43 0x4F    
   \              0x4E 0x2D    
   \   00000018   0x49 0x4E          DC8 49H, 4EH, 54H, 52H, 4CH, 3DH, 25H, 64H
   \              0x54 0x52    
   \              0x4C 0x3D    
   \              0x25 0x64    
   \   00000020   0x0D 0x0A          DC8 0DH, 0AH, 41H, 50H, 2DH, 53H, 45H, 43H
   \              0x41 0x50    
   \              0x2D 0x53    
   \              0x45 0x43    
   \   00000028   0x55 0x52          DC8 55H, 52H, 49H, 54H, 59H, 3DH, 25H, 64H
   \              0x49 0x54    
   \              0x59 0x3D    
   \              0x25 0x64    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-PSK_PASS_PHRASE=">`:
   \   00000000   0x41 0x50          DC8 "AP-PSK_PASS_PHRASE="
   \              0x2D 0x50    
   \              0x53 0x4B    
   \              0x5F 0x50    
   \              0x41 0x53    
   \              0x53 0x5F    
   \              0x50 0x48    
   \              0x52 0x41    
   \              0x53 0x45    
   \              0x3D 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-WEP_ID=%d\\r\\nAP-WEP_...">`:
   \   00000000   0x41 0x50          DC8 "AP-WEP_ID=%d\015\012AP-WEP_KEY="
   \              0x2D 0x57    
   \              0x45 0x50    
   \              0x5F 0x49    
   \              0x44 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x41 0x50    
   \              0x2D 0x57    
   \              0x45 0x50    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x3D 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-STATIC_IP=%d.%d.%d...">`:
   \   00000000   0x41 0x50          DC8 "AP-STATIC_IP=%d.%d.%d.%d\015\012"
   \              0x2D 0x53    
   \              0x54 0x41    
   \              0x54 0x49    
   \              0x43 0x5F    
   \              0x49 0x50    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-SUBNT_MASK=%d.%d.%...">`:
   \   00000000   0x41 0x50          DC8 "AP-SUBNT_MASK=%d.%d.%d.%d\015\012"
   \              0x2D 0x53    
   \              0x55 0x42    
   \              0x4E 0x54    
   \              0x5F 0x4D    
   \              0x41 0x53    
   \              0x4B 0x3D    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-GATEWAY_IP=%d.%d.%...">`:
   \   00000000   0x41 0x50          DC8 "AP-GATEWAY_IP=%d.%d.%d.%d\015\012"
   \              0x2D 0x47    
   \              0x41 0x54    
   \              0x45 0x57    
   \              0x41 0x59    
   \              0x5F 0x49    
   \              0x50 0x3D    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-DHCPSRVR-ENABLE=%d\\r\\n">`:
   \   00000000   0x41 0x50          DC8 "AP-DHCPSRVR-ENABLE=%d\015\012"
   \              0x2D 0x44    
   \              0x48 0x43    
   \              0x50 0x53    
   \              0x52 0x56    
   \              0x52 0x2D    
   \              0x45 0x4E    
   \              0x41 0x42    
   \              0x4C 0x45    
   \              0x3D 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-AP-DHCPSRVR-STARTI...">`:
   \   00000000   0x41 0x50          DC8 "AP-AP-DHCPSRVR-STARTIP=%d.%d.%d.%d\015\012"
   \              0x2D 0x41    
   \              0x50 0x2D    
   \              0x44 0x48    
   \              0x43 0x50    
   \              0x53 0x52    
   \              0x56 0x52    
   \              0x2D 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x49 0x50    
   \              0x3D 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-DHCPSRVR-NO-CONN=%...">`:
   \   00000000   0x41 0x50          DC8 41H, 50H, 2DH, 44H, 48H, 43H, 50H, 53H
   \              0x2D 0x44    
   \              0x48 0x43    
   \              0x50 0x53    
   \   00000008   0x52 0x56          DC8 52H, 56H, 52H, 2DH, 4EH, 4FH, 2DH, 43H
   \              0x52 0x2D    
   \              0x4E 0x4F    
   \              0x2D 0x43    
   \   00000010   0x4F 0x4E          DC8 4FH, 4EH, 4EH, 3DH, 25H, 64H, 0DH, 0AH
   \              0x4E 0x3D    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \   00000018   0x41 0x50          DC8 41H, 50H, 2DH, 44H, 4EH, 53H, 53H, 52H
   \              0x2D 0x44    
   \              0x4E 0x53    
   \              0x53 0x52    
   \   00000020   0x56 0x52          DC8 56H, 52H, 2DH, 45H, 4EH, 41H, 42H, 4CH
   \              0x2D 0x45    
   \              0x4E 0x41    
   \              0x42 0x4C    
   \   00000028   0x45 0x3D          DC8 45H, 3DH, 25H, 64H, 0DH, 0AH, 41H, 50H
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x41 0x50    
   \   00000030   0x2D 0x44          DC8 2DH, 44H, 4EH, 53H, 2DH, 44H, 4FH, 4DH
   \              0x4E 0x53    
   \              0x2D 0x44    
   \              0x4F 0x4D    
   \   00000038   0x41 0x49          DC8 41H, 49H, 4EH, 2DH, 4EH, 41H, 4DH, 45H
   \              0x4E 0x2D    
   \              0x4E 0x41    
   \              0x4D 0x45    
   \   00000040   0x3D 0x25          DC8 3DH, 25H, 73H, 0DH, 0AH, 0
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   00000046   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NEW_USER_NAME=%s\\r\\n">`:
   \   00000000   0x4E 0x45          DC8 "NEW_USER_NAME=%s\015\012"
   \              0x57 0x5F    
   \              0x55 0x53    
   \              0x45 0x52    
   \              0x5F 0x4E    
   \              0x41 0x4D    
   \              0x45 0x3D    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "NEW_PASS=%s\\r\\n">`:
   \   00000000   0x4E 0x45          DC8 "NEW_PASS=%s\015\012"
   \              0x57 0x5F    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x3D 0x25    
   \              0x73 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "WEP_AUTH_MODE=%d">`:
   \   00000000   0x57 0x45          DC8 "WEP_AUTH_MODE=%d"
   \              0x50 0x5F    
   \              0x41 0x55    
   \              0x54 0x48    
   \              0x5F 0x4D    
   \              0x4F 0x44    
   \              0x45 0x3D    
   \              0x25 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "AP-WEP_AUTH_MODE=%d">`:
   \   00000000   0x41 0x50          DC8 "AP-WEP_AUTH_MODE=%d"
   \              0x2D 0x57    
   \              0x45 0x50    
   \              0x5F 0x41    
   \              0x55 0x54    
   \              0x48 0x5F    
   \              0x4D 0x4F    
   \              0x44 0x45    
   \              0x3D 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%02x%02x%02x%02x%02x">`:
   \   00000000   0x25 0x30          DC8 "%02x%02x%02x%02x%02x%02x"
   \              0x32 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GS_%02x%02x%02x">`:
   \   00000000   0x47 0x53          DC8 "GS_%02x%02x%02x"
   \              0x5F 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x25    
   \              0x30 0x32    
   \              0x78 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "w">`:
   \   00000000   0x77 0x00          DC8 "w"

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "pbc">`:
   \   00000000   0x70 0x62          DC8 "pbc"
   \              0x63 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "pin">`:
   \   00000000   0x70 0x69          DC8 "pin"
   \              0x6E 0x00    

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant "/">`:
   \   00000000   0x2F 0x00          DC8 "/"

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000   0x2E 0x00          DC8 "."

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "..">`:
   \   00000000   0x2E 0x2E          DC8 ".."
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0
   1701          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   AppS2w_CertNameGet
        16   -> strlen
     456   AppS2w_SslCertcb
       456   -> AppS2w_CertDelete
       456   -> AppS2w_CertNameGet
       456   -> GsnHttpd_GetBuffer
       456   -> GsnHttpd_GetHttpMethod
       456   -> GsnHttpd_ReleaseBuffer
       456   -> GsnHttpd_SendBufferAndLastChunk
       456   -> fsm_findfirst
       456   -> fsm_findnext
       456   -> sprintf
       456   -> strcmp
       456   -> strlen
       456   -> strncmp
       456   -> tfHttpdUserGetRequestBody
       0   S2wApp_WebserverStackSize_Get
       0   S2wApp_WebserverStack_Free
         0   -> GsnDynMemMgmt_Free
       0   S2wApp_WebserverStack_Get
         0   -> GsnDynMemMgmt_Alloc
     208   S2wConfig_GetValues
       208   -> GsnNwIf_IpConfigGet
       208   -> GsnWdd_PhyAddrGet
       208   -> S2wConfig_InitValues
       208   -> memcpy
       208   -> sprintf
       208   -> strcpy
       208   -> strlen
      16   S2wConfig_InitValues
        16   -> memcpy
        16   -> strcpy
    2080   S2wConfig_SetValues
      2080   -- Indirect call
      2080   -> AppS2wHal_CharNPut
      2080   -> App_FsInit
      2080   -> S2wUart_TxStatusGet
      2080   -> S2wWeb_EapAuthTypeSet
      2080   -> S2w_Printf
      2080   -> S2w_SaveS2wProfile
      2080   -> fsm_enterFS
      2080   -> memcpy
      2080   -> memset
      2080   -> s2wSpiFs_Flush
      2080   -> strcpy
      2080   -> strlen
      2080   -> strncmp
      2080   -> strncpy
      96   S2wWebProv_FileUploadCb
        96   -> fsm_close
        96   -> fsm_mkdir
        96   -> fsm_open
        96   -> fsm_write
        96   -> memcpy
        96   -> memset
        96   -> sprintf
        96   -> strcmp
        96   -> strncmp
     544   S2wWebProv_WebProvStart
       528   -> AppExtOtafu_Init
       528   -> AppOtafu_Init
       528   -> App_FsInit
       528   -> GsnDynMemMgmt_Free
       528   -> GsnHttpdApi_ApiInit
       528   -> GsnHttpdApi_ConfigInit
       528   -> GsnHttpdApi_FwInit
       528   -> GsnHttpdApi_ProvInit
       528   -> GsnHttpd_FileApiConfig
       528   -> GsnHttpd_FileApiInit
       528   -> GsnHttpd_IsRunning
       528   -> GsnHttpd_Start
       528   -> GsnHttpd_UriHandlerConfig
       528   -> GsnNwIf_IpConfigGet
       528   -> GsnNw_PktPoolHndlGet
       528   -> GsnSysCtl_WlanFwVerGet
       528   -> S2wApp_WebserverStack_Get
       528   -> S2wCert_FlashFileLoad
       528   -> S2wCert_SearchRamTable
       528   -> S2w_Printf
       544   -> __aeabi_memcpy4
       528   -> _tx_semaphore_put
       528   -> fsm_enterFS
       528   -> memset
       528   -> s2wSpiFs_Flush
       528   -> strcpy
       8   S2wWebProv_WebProvStop
         8   -> GsnHttpdApi_ApiDeInit
         8   -> GsnHttpdApi_ConfigDeInit
         8   -> GsnHttpdApi_FwDeInit
         8   -> GsnHttpdApi_ProvDeInit
         8   -> GsnHttpd_FileApiDeInit
         8   -> GsnHttpd_UriHandlerConfig
      40   S2wWebProv_WpsCbFn
        40   -- Indirect call
        40   -> GsnTaskSleep
        40   -> memcpy
        40   -> memset
        40   -> strcmp
        40   -> strlen
       0   S2wWeb_Config
         0   -> S2wConfig_GetValues
         0   -> S2wConfig_SetValues
       0   S2wWeb_EapAuthTypeSet
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%02x">
      28  ?<Constant "%02x%02x%02x%02x%02x%02x">
      40  ?<Constant "%s %d file Uploaded</...">
      40  ?<Constant "%s %d files Uploaded<...">
       2  ?<Constant ".">
       4  ?<Constant "..">
       2  ?<Constant "/">
      24  ?<Constant "/gainspan/system/certs">
      28  ?<Constant "/gainspan/system/sslc...">
      32  ?<Constant "/gainspan/system/sslc...">_1
      32  ?<Constant "/gainspan/system/wpac...">
       8  ?<Constant "5.1.5">
      12  ?<Constant "</certs>">
      40  ?<Constant "<Response><status>FAI...">
      40  ?<Constant "<Response><status>SUC...">
      32  ?<Constant "<cert><name>%s</name>...">
       8  ?<Constant "<certs>">
      24  ?<Constant "<status>error</status>">
      20  ?<Constant "<status>ok</status>">
      12  ?<Constant "A:/certs">
      12  ?<Constant "A:/certs/">
      16  ?<Constant "A:/certs/*.*">
      40  ?<Constant "AP-AP-DHCPSRVR-STARTI...">
      24  ?<Constant "AP-DHCPSRVR-ENABLE=%d\r\n">
      72  ?<Constant "AP-DHCPSRVR-NO-CONN=%...">
      28  ?<Constant "AP-GATEWAY_IP=%d.%d.%...">
      20  ?<Constant "AP-PSK_PASS_PHRASE=">
      12  ?<Constant "AP-SSID=">
      28  ?<Constant "AP-STATIC_IP=%d.%d.%d...">
      28  ?<Constant "AP-SUBNT_MASK=%d.%d.%...">
      20  ?<Constant "AP-WEP_AUTH_MODE=%d">
      28  ?<Constant "AP-WEP_ID=%d\r\nAP-WEP_...">
      20  ?<Constant "AUTO_DNS_ENBL=%d\r\n">
      16  ?<Constant "DHCP_ENBL=%d\r\n">
      16  ?<Constant "EAP_USERNAME=">
      28  ?<Constant "GATEWAY_IP=%d.%d.%d.%d\r\n">
      16  ?<Constant "GS_%02x%02x%02x">
      16  ?<Constant "NEW_PASS=%s\r\n">
      20  ?<Constant "NEW_USER_NAME=%s\r\n">
      32  ?<Constant "PRIMERY_DNS_IP=%d.%d....">
      20  ?<Constant "PSK_PASS_PHRASE=">
      32  ?<Constant "SECNDRY_DNS_IP=%d.%d....">
       8  ?<Constant "SSID=">
      32  ?<Constant "SSL Certificate Confi...">
       8  ?<Constant "SSLCERT">
       8  ?<Constant "SSL_CA">
       8  ?<Constant "SSL_KEY">
      12  ?<Constant "SSL_SERVER">
      24  ?<Constant "STATIC_IP=%d.%d.%d.%d\r\n">
      28  ?<Constant "SUBNT_MASK=%d.%d.%d.%d\r\n">
       8  ?<Constant "TLS_CA">
      20  ?<Constant "WEP_AUTH_MODE=%d">
      20  ?<Constant "WEP_ID=%d\r\nWEP_KEY=">
      28  ?<Constant "\n\rCertificate %s Not ...">
       4  ?<Constant "\r\n">
      52  ?<Constant "\r\nAP-CHNL=%d\r\nAP-BEAC...">
      48  ?<Constant "\r\nCHNL=%d\r\nCONN_TYPE=...">
      16  ?<Constant "\r\nEAP_PASSWORD=">
      12  ?<Constant "index.html">
       4  ?<Constant "pbc">
       4  ?<Constant "pin">
       2  ?<Constant "w">
       4  ??DataTable64
       4  ??DataTable64_1
       4  ??DataTable64_2
       4  ??DataTable66
       4  ??DataTable67
       4  ??DataTable67_1
       4  ??DataTable67_2
       4  ??DataTable67_3
       4  ??DataTable67_4
       4  ??DataTable68
       4  ??DataTable68_1
       4  ??DataTable68_2
       4  ??DataTable68_3
       4  ??DataTable69
       4  ??DataTable69_1
       4  ??DataTable69_2
       4  ??DataTable69_3
       4  ??DataTable70
       4  ??DataTable70_1
       4  ??DataTable70_2
       4  ??DataTable70_3
       8  ?Subroutine0
      10  ?Subroutine1
      18  ?Subroutine2
      10  ?Subroutine3
      12  ?Subroutine4
      24  ?Subroutine5
      16  ?Subroutine6
      30  AppS2w_CertNameGet
     298  AppS2w_SslCertcb
       6  S2wApp_WebserverStackSize_Get
       4  S2wApp_WebserverStack_Free
      14  S2wApp_WebserverStack_Get
     856  S2wConfig_GetValues
     542  S2wConfig_InitValues
    1740  S2wConfig_SetValues
     354  S2wWebProv_FileUploadCb
     682  S2wWebProv_WebProvStart
      62  S2wWebProv_WebProvStop
     178  S2wWebProv_WpsCbFn
      18  S2wWeb_Config
      22  S2wWeb_EapAuthTypeSet
       4  fd
      12  memcpy
      20  memset
      60  prePoplnDone
          eapAuthTable
    2032  s2wProfileParm
       1  storeParams

 
 2 037 bytes in section .bss
    60 bytes in section .data
    22 bytes in section .rodata
 6 324 bytes in section .text
 
 6 292 bytes of CODE  memory (+ 32 bytes shared)
    22 bytes of CONST memory
 2 097 bytes of DATA  memory

Errors: none
Warnings: none
