###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      30/Oct/2015  09:58:24 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_net_gainspan.c                    #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_net_gainspan.c -D                 #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -Ohz                  #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_net_gainspan.lst         #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_net_gainspan.o            #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\hal\s2w_net_gainspan.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_net_gainspan.c,v $
     28          *
     29          * Description : s2w GEPS interface file
     30          ******************************************************************/
     31          
     32          
     33          /*****************************************************************
     34            * File Inclusions
     35            *****************************************************************/
     36          #include "netx/netx_bsd_layer/nxd_bsd.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     37          #include <string.h>
     38          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnOsal_IntrDisable(void)
   \                     GsnOsal_IntrDisable:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnOsal_IntrEnable(int)
   \                     GsnOsal_IntrEnable:
   \   00000000   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9205             STR      R2,[SP, #+20]
   \   00000010   0x461D             MOV      R5,R3
   \   00000012   0x9B0C             LDR      R3,[SP, #+48]
   \   00000014   0x9303             STR      R3,[SP, #+12]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9302             STR      R3,[SP, #+8]
   \   0000001A   0x9204             STR      R2,[SP, #+16]
   \   0000001C   0x460B             MOV      R3,R1
   \   0000001E   0x9701             STR      R7,[SP, #+4]
   \   00000020   0x9600             STR      R6,[SP, #+0]
   \   00000022   0x4622             MOV      R2,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _tx_thread_create
   \   0000002A   0xB118             CBZ.N    R0,??GsnOsal_ThreadCreate_0
   \   0000002C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000030   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemCreate(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemCreate:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      BL       _tx_semaphore_create
   \   0000000A   0xB118             CBZ.N    R0,??GsnOsal_SemCreate_0
   \   0000000C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000010   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemCreate_0:
   \   00000014   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemDelete(TX_SEMAPHORE *)
   \                     GsnOsal_SemDelete:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_delete
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemDelete_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemDelete_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueuePut(TX_QUEUE *, unsigned char *)
   \                     GsnOsal_QueuePut:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x.... 0x....      BL       _tx_queue_send
   \   00000008   0xB118             CBZ.N    R0,??GsnOsal_QueuePut_0
   \   0000000A   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000E   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_QueuePut_0:
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
     39          #include "hal/s2w.h"
     40          #include "hal/s2w_types.h"
     41          #include "hal/s2w_hal.h"
     42          #include "parser/s2w_process.h"
     43          #include "hal/s2w_timer.h"
     44          #include "hal/s2w_net.h"
     45          #include "hal/s2w_cert_mgmt.h"
     46          #include "parser/s2w_command.h"
     47          
     48          //#include "l2dev\s2w_l2_dev.h"
     49          #include "main/app_main_ctx.h"
     50          #include "config/app_resource_config.h"
     51          #include "app_defines.h"
     52          #include "app_events.h"
     53          #include "config/app_stat_config.h"
     54          #include "app_rtc_mem.h"
     55          #include "s2w_cert.c"

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClientCA[898]
   \                     sslClientCA:
   \   00000000   0x30 0x82          DC8 48, 130, 3, 126, 48, 130, 2, 231, 160, 3, 2, 1, 2, 2, 9, 0, 222
   \              0x03 0x7E    
   \              0x30 0x82    
   \              0x02 0xE7    
   \              0xA0 0x03    
   \              0x02 0x01    
   \              0x02 0x02    
   \              0x09 0x00    
   \              0xDE         
   \   00000011   0x7B 0x5B          DC8 123, 91, 133, 54, 111, 161, 90, 48, 13, 6, 9, 42, 134, 72, 134, 247
   \              0x85 0x36    
   \              0x6F 0xA1    
   \              0x5A 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \   00000021   0x0D 0x01          DC8 13, 1, 1, 5, 5, 0, 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19
   \              0x01 0x05    
   \              0x05 0x00    
   \              0x30 0x81    
   \              0x87 0x31    
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x06    
   \              0x13         
   \   00000034   0x02 0x49          DC8 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49
   \              0x4E 0x31    
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42 0x4C    
   \              0x52 0x31    
   \   00000046   0x0B 0x30          DC8 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55         
   \   00000059   0x04 0x0A          DC8 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06         
   \   0000006A   0x03 0x55          DC8 3, 85, 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F         
   \   0000007D   0x31 0x39          DC8 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20 0x49    
   \              0x4E 0x31    
   \              0x23         
   \   0000008E   0x30 0x21          DC8 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x01 0x16    
   \              0x14 0x73    
   \              0x75         
   \   0000009F   0x70 0x70          DC8 112, 112, 111, 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110
   \              0x6F 0x72    
   \              0x74 0x40    
   \              0x67 0x61    
   \              0x69 0x6E    
   \              0x73 0x70    
   \              0x61 0x6E    
   \   000000AD   0x2E 0x63          DC8 46, 99, 111, 109, 48, 30, 23, 13, 49, 50, 48, 54, 49, 51, 49, 49
   \              0x6F 0x6D    
   \              0x30 0x1E    
   \              0x17 0x0D    
   \              0x31 0x32    
   \              0x30 0x36    
   \              0x31 0x33    
   \              0x31 0x31    
   \   000000BD   0x35 0x37          DC8 53, 55, 48, 53, 90, 23, 13, 49, 51, 48, 54, 49, 51, 49, 49, 53, 55
   \              0x30 0x35    
   \              0x5A 0x17    
   \              0x0D 0x31    
   \              0x33 0x30    
   \              0x36 0x31    
   \              0x33 0x31    
   \              0x31 0x35    
   \              0x37         
   \   000000CE   0x30 0x35          DC8 48, 53, 90, 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 73
   \              0x5A 0x30    
   \              0x81 0x87    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x06 0x13    
   \              0x02 0x49    
   \   000000E0   0x4E 0x31          DC8 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49, 11, 48
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42 0x4C    
   \              0x52 0x31    
   \              0x0B 0x30    
   \   000000F2   0x09 0x06          DC8 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85, 4, 10
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0A         
   \   00000105   0x13 0x08          DC8 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6, 3, 85
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   00000116   0x04 0x0B          DC8 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15, 49
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F 0x31    
   \   00000128   0x39 0x32          DC8 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35, 48
   \              0x2E 0x31    
   \              0x36 0x38    
   \              0x2E 0x32    
   \              0x2E 0x39    
   \              0x34 0x20    
   \              0x49 0x4E    
   \              0x31 0x23    
   \              0x30         
   \   00000139   0x21 0x06          DC8 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117, 112
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16 0x14    
   \              0x73 0x75    
   \              0x70         
   \   0000014A   0x70 0x6F          DC8 112, 111, 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110, 46
   \              0x72 0x74    
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2E    
   \   00000158   0x63 0x6F          DC8 99, 111, 109, 48, 129, 159, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13
   \              0x6D 0x30    
   \              0x81 0x9F    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \   00000168   0x01 0x01          DC8 1, 1, 1, 5, 0, 3, 129, 141, 0, 48, 129, 137, 2, 129, 129, 0, 203
   \              0x01 0x05    
   \              0x00 0x03    
   \              0x81 0x8D    
   \              0x00 0x30    
   \              0x81 0x89    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0xCB         
   \   00000179   0xE5 0xC9          DC8 229, 201, 43, 206, 248, 121, 46, 248, 115, 211, 94, 97, 40, 6, 16
   \              0x2B 0xCE    
   \              0xF8 0x79    
   \              0x2E 0xF8    
   \              0x73 0xD3    
   \              0x5E 0x61    
   \              0x28 0x06    
   \              0x10         
   \   00000188   0x39 0xF1          DC8 57, 241, 215, 117, 213, 97, 232, 101, 248, 129, 51, 34, 98, 103
   \              0xD7 0x75    
   \              0xD5 0x61    
   \              0xE8 0x65    
   \              0xF8 0x81    
   \              0x33 0x22    
   \              0x62 0x67    
   \   00000196   0xD1 0x3D          DC8 209, 61, 112, 109, 78, 7, 196, 173, 243, 28, 39, 114, 212, 19, 122
   \              0x70 0x6D    
   \              0x4E 0x07    
   \              0xC4 0xAD    
   \              0xF3 0x1C    
   \              0x27 0x72    
   \              0xD4 0x13    
   \              0x7A         
   \   000001A5   0x03 0xEE          DC8 3, 238, 42, 103, 84, 177, 207, 95, 194, 166, 233, 221, 201, 45, 210
   \              0x2A 0x67    
   \              0x54 0xB1    
   \              0xCF 0x5F    
   \              0xC2 0xA6    
   \              0xE9 0xDD    
   \              0xC9 0x2D    
   \              0xD2         
   \   000001B4   0x55 0x8C          DC8 85, 140, 10, 207, 39, 213, 197, 26, 177, 222, 247, 140, 29, 76, 5
   \              0x0A 0xCF    
   \              0x27 0xD5    
   \              0xC5 0x1A    
   \              0xB1 0xDE    
   \              0xF7 0x8C    
   \              0x1D 0x4C    
   \              0x05         
   \   000001C3   0x7E 0x11          DC8 126, 17, 20, 172, 111, 165, 167, 100, 114, 17, 76, 115, 27, 202, 67
   \              0x14 0xAC    
   \              0x6F 0xA5    
   \              0xA7 0x64    
   \              0x72 0x11    
   \              0x4C 0x73    
   \              0x1B 0xCA    
   \              0x43         
   \   000001D2   0x2D 0x9D          DC8 45, 157, 239, 11, 180, 135, 10, 252, 130, 22, 85, 171, 191, 253
   \              0xEF 0x0B    
   \              0xB4 0x87    
   \              0x0A 0xFC    
   \              0x82 0x16    
   \              0x55 0xAB    
   \              0xBF 0xFD    
   \   000001E0   0xCE 0xF0          DC8 206, 240, 47, 83, 197, 166, 144, 113, 185, 161, 173, 177, 229, 191
   \              0x2F 0x53    
   \              0xC5 0xA6    
   \              0x90 0x71    
   \              0xB9 0xA1    
   \              0xAD 0xB1    
   \              0xE5 0xBF    
   \   000001EE   0x80 0xBB          DC8 128, 187, 38, 4, 97, 225, 4, 130, 241, 115, 2, 3, 1, 0, 1, 163, 129
   \              0x26 0x04    
   \              0x61 0xE1    
   \              0x04 0x82    
   \              0xF1 0x73    
   \              0x02 0x03    
   \              0x01 0x00    
   \              0x01 0xA3    
   \              0x81         
   \   000001FF   0xEF 0x30          DC8 239, 48, 129, 236, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 72, 62
   \              0x81 0xEC    
   \              0x30 0x1D    
   \              0x06 0x03    
   \              0x55 0x1D    
   \              0x0E 0x04    
   \              0x16 0x04    
   \              0x14 0x48    
   \              0x3E         
   \   00000210   0xF3 0x08          DC8 243, 8, 57, 29, 188, 30, 110, 118, 66, 176, 160, 226, 5, 125, 92
   \              0x39 0x1D    
   \              0xBC 0x1E    
   \              0x6E 0x76    
   \              0x42 0xB0    
   \              0xA0 0xE2    
   \              0x05 0x7D    
   \              0x5C         
   \   0000021F   0xEA 0x64          DC8 234, 100, 21, 48, 129, 188, 6, 3, 85, 29, 35, 4, 129, 180, 48, 129
   \              0x15 0x30    
   \              0x81 0xBC    
   \              0x06 0x03    
   \              0x55 0x1D    
   \              0x23 0x04    
   \              0x81 0xB4    
   \              0x30 0x81    
   \   0000022F   0xB1 0x80          DC8 177, 128, 20, 72, 62, 243, 8, 57, 29, 188, 30, 110, 118, 66, 176
   \              0x14 0x48    
   \              0x3E 0xF3    
   \              0x08 0x39    
   \              0x1D 0xBC    
   \              0x1E 0x6E    
   \              0x76 0x42    
   \              0xB0         
   \   0000023E   0xA0 0xE2          DC8 160, 226, 5, 125, 92, 234, 100, 21, 161, 129, 141, 164, 129, 138
   \              0x05 0x7D    
   \              0x5C 0xEA    
   \              0x64 0x15    
   \              0xA1 0x81    
   \              0x8D 0xA4    
   \              0x81 0x8A    
   \   0000024C   0x30 0x81          DC8 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 73, 78, 49, 12
   \              0x87 0x31    
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x06    
   \              0x13 0x02    
   \              0x49 0x4E    
   \              0x31 0x0C    
   \   0000025E   0x30 0x0A          DC8 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49, 11, 48, 9, 6, 3, 85
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x08 0x13    
   \              0x03 0x42    
   \              0x4C 0x52    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   00000271   0x04 0x07          DC8 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85, 4, 10, 19, 8, 71, 97
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0A 0x13    
   \              0x08 0x47    
   \              0x61         
   \   00000284   0x69 0x6E          DC8 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6, 3, 85, 4, 11, 19, 2
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0B 0x13    
   \              0x02         
   \   00000295   0x51 0x41          DC8 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15, 49, 57, 50, 46, 49
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F 0x31    
   \              0x39 0x32    
   \              0x2E 0x31    
   \   000002A7   0x36 0x38          DC8 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35, 48, 33, 6, 9, 42
   \              0x2E 0x32    
   \              0x2E 0x39    
   \              0x34 0x20    
   \              0x49 0x4E    
   \              0x31 0x23    
   \              0x30 0x21    
   \              0x06 0x09    
   \              0x2A         
   \   000002B8   0x86 0x48          DC8 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117, 112, 112, 111
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16 0x14    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F         
   \   000002C7   0x72 0x74          DC8 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110, 46, 99, 111
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2E    
   \              0x63 0x6F    
   \   000002D5   0x6D 0x82          DC8 109, 130, 9, 0, 222, 123, 91, 133, 54, 111, 161, 90, 48, 12, 6, 3
   \              0x09 0x00    
   \              0xDE 0x7B    
   \              0x5B 0x85    
   \              0x36 0x6F    
   \              0xA1 0x5A    
   \              0x30 0x0C    
   \              0x06 0x03    
   \   000002E5   0x55 0x1D          DC8 85, 29, 19, 4, 5, 48, 3, 1, 1, 255, 48, 13, 6, 9, 42, 134, 72, 134
   \              0x13 0x04    
   \              0x05 0x30    
   \              0x03 0x01    
   \              0x01 0xFF    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \   000002F7   0xF7 0x0D          DC8 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 168, 129, 74, 254, 27, 157
   \              0x01 0x01    
   \              0x05 0x05    
   \              0x00 0x03    
   \              0x81 0x81    
   \              0x00 0xA8    
   \              0x81 0x4A    
   \              0xFE 0x1B    
   \              0x9D         
   \   00000308   0x5D 0x5D          DC8 93, 93, 249, 16, 245, 3, 123, 199, 180, 127, 79, 23, 67, 217, 191
   \              0xF9 0x10    
   \              0xF5 0x03    
   \              0x7B 0xC7    
   \              0xB4 0x7F    
   \              0x4F 0x17    
   \              0x43 0xD9    
   \              0xBF         
   \   00000317   0xBC 0x72          DC8 188, 114, 52, 23, 22, 3, 136, 114, 117, 43, 203, 191, 196, 203, 46
   \              0x34 0x17    
   \              0x16 0x03    
   \              0x88 0x72    
   \              0x75 0x2B    
   \              0xCB 0xBF    
   \              0xC4 0xCB    
   \              0x2E         
   \   00000326   0x97 0x29          DC8 151, 41, 108, 116, 249, 221, 192, 102, 12, 190, 109, 40, 191, 66
   \              0x6C 0x74    
   \              0xF9 0xDD    
   \              0xC0 0x66    
   \              0x0C 0xBE    
   \              0x6D 0x28    
   \              0xBF 0x42    
   \   00000334   0xED 0x86          DC8 237, 134, 10, 133, 24, 7, 214, 151, 69, 60, 71, 48, 161, 235, 12
   \              0x0A 0x85    
   \              0x18 0x07    
   \              0xD6 0x97    
   \              0x45 0x3C    
   \              0x47 0x30    
   \              0xA1 0xEB    
   \              0x0C         
   \   00000343   0x5C 0x6A          DC8 92, 106, 213, 68, 222, 159, 254, 31, 227, 216, 118, 53, 54, 104
   \              0xD5 0x44    
   \              0xDE 0x9F    
   \              0xFE 0x1F    
   \              0xE3 0xD8    
   \              0x76 0x35    
   \              0x36 0x68    
   \   00000351   0xF2 0x76          DC8 242, 118, 161, 210, 127, 241, 121, 10, 18, 130, 155, 227, 101, 212
   \              0xA1 0xD2    
   \              0x7F 0xF1    
   \              0x79 0x0A    
   \              0x12 0x82    
   \              0x9B 0xE3    
   \              0x65 0xD4    
   \   0000035F   0x5C 0xA6          DC8 92, 166, 20, 9, 14, 179, 178, 225, 247, 106, 68, 225, 101, 140, 48
   \              0x14 0x09    
   \              0x0E 0xB3    
   \              0xB2 0xE1    
   \              0xF7 0x6A    
   \              0x44 0xE1    
   \              0x65 0x8C    
   \              0x30         
   \   0000036E   0x01 0x4A          DC8 1, 74, 54, 146, 41, 20, 16, 162, 201, 201, 14, 185, 36, 5, 232, 65
   \              0x36 0x92    
   \              0x29 0x14    
   \              0x10 0xA2    
   \              0xC9 0xC9    
   \              0x0E 0xB9    
   \              0x24 0x05    
   \              0xE8 0x41    
   \   0000037E   0xC9 0xEA          DC8 201, 234, 240, 207, 0, 0
   \              0xF0 0xCF    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClientClient[644]
   \                     sslClientClient:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 128, 48, 130, 1, 233, 2, 1, 11, 48, 13, 6, 9, 42, 134
   \              0x02 0x80    
   \              0x30 0x82    
   \              0x01 0xE9    
   \              0x02 0x01    
   \              0x0B 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86         
   \   00000011   0x48 0x86          DC8 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 129, 135, 49, 11, 48, 9, 6, 3
   \              0xF7 0x0D    
   \              0x01 0x01    
   \              0x05 0x05    
   \              0x00 0x30    
   \              0x81 0x87    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \   00000023   0x55 0x04          DC8 85, 4, 6, 19, 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66
   \              0x06 0x13    
   \              0x02 0x49    
   \              0x4E 0x31    
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42         
   \   00000036   0x4C 0x52          DC8 76, 82, 49, 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x07 0x13    
   \              0x02 0x4B    
   \              0x41 0x31    
   \              0x11 0x30    
   \   00000048   0x0F 0x06          DC8 15, 6, 3, 85, 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49
   \              0x03 0x55    
   \              0x04 0x0A    
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31         
   \   00000059   0x0B 0x30          DC8 11, 48, 9, 6, 3, 85, 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55         
   \   0000006C   0x04 0x03          DC8 4, 3, 19, 15, 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32
   \              0x13 0x0F    
   \              0x31 0x39    
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20         
   \   0000007D   0x49 0x4E          DC8 73, 78, 49, 35, 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1
   \              0x31 0x23    
   \              0x30 0x21    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x01         
   \   0000008E   0x16 0x14          DC8 22, 20, 115, 117, 112, 112, 111, 114, 116, 64, 103, 97, 105, 110
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x40    
   \              0x67 0x61    
   \              0x69 0x6E    
   \   0000009C   0x73 0x70          DC8 115, 112, 97, 110, 46, 99, 111, 109, 48, 30, 23, 13, 49, 50, 48, 54
   \              0x61 0x6E    
   \              0x2E 0x63    
   \              0x6F 0x6D    
   \              0x30 0x1E    
   \              0x17 0x0D    
   \              0x31 0x32    
   \              0x30 0x36    
   \   000000AC   0x31 0x33          DC8 49, 51, 49, 50, 51, 57, 51, 51, 90, 23, 13, 49, 51, 48, 54, 49, 51
   \              0x31 0x32    
   \              0x33 0x39    
   \              0x33 0x33    
   \              0x5A 0x17    
   \              0x0D 0x31    
   \              0x33 0x30    
   \              0x36 0x31    
   \              0x33         
   \   000000BD   0x31 0x32          DC8 49, 50, 51, 57, 51, 51, 90, 48, 129, 136, 49, 11, 48, 9, 6, 3, 85
   \              0x33 0x39    
   \              0x33 0x33    
   \              0x5A 0x30    
   \              0x81 0x88    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   000000CE   0x04 0x06          DC8 4, 6, 19, 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76
   \              0x13 0x02    
   \              0x49 0x4E    
   \              0x31 0x0C    
   \              0x30 0x0A    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x08 0x13    
   \              0x03 0x42    
   \              0x4C         
   \   000000E1   0x52 0x31          DC8 82, 49, 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06         
   \   000000F4   0x03 0x55          DC8 3, 85, 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48
   \              0x04 0x0A    
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30         
   \   00000105   0x09 0x06          DC8 9, 6, 3, 85, 4, 11, 19, 2, 81, 65, 49, 25, 48, 23, 6, 3, 85, 4, 3
   \              0x03 0x55    
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x19    
   \              0x30 0x17    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03         
   \   00000118   0x13 0x10          DC8 19, 16, 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 99, 111
   \              0x31 0x39    
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20 0x63    
   \              0x6F         
   \   00000129   0x6D 0x31          DC8 109, 49, 35, 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22
   \              0x23 0x30    
   \              0x21 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16         
   \   0000013A   0x14 0x73          DC8 20, 115, 117, 112, 112, 111, 114, 116, 64, 103, 97, 105, 110, 115
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \   00000148   0x70 0x61          DC8 112, 97, 110, 46, 99, 111, 109, 48, 129, 159, 48, 13, 6, 9, 42, 134
   \              0x6E 0x2E    
   \              0x63 0x6F    
   \              0x6D 0x30    
   \              0x81 0x9F    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \   00000158   0x48 0x86          DC8 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 129, 141, 0, 48, 129, 137, 2
   \              0xF7 0x0D    
   \              0x01 0x01    
   \              0x01 0x05    
   \              0x00 0x03    
   \              0x81 0x8D    
   \              0x00 0x30    
   \              0x81 0x89    
   \              0x02         
   \   00000169   0x81 0x81          DC8 129, 129, 0, 180, 200, 83, 30, 86, 189, 203, 57, 86, 129, 230, 241
   \              0x00 0xB4    
   \              0xC8 0x53    
   \              0x1E 0x56    
   \              0xBD 0xCB    
   \              0x39 0x56    
   \              0x81 0xE6    
   \              0xF1         
   \   00000178   0xDC 0x88          DC8 220, 136, 68, 179, 194, 66, 127, 34, 190, 63, 124, 233, 37, 166
   \              0x44 0xB3    
   \              0xC2 0x42    
   \              0x7F 0x22    
   \              0xBE 0x3F    
   \              0x7C 0xE9    
   \              0x25 0xA6    
   \   00000186   0x72 0xB7          DC8 114, 183, 115, 227, 96, 149, 99, 111, 216, 202, 244, 188, 154, 14
   \              0x73 0xE3    
   \              0x60 0x95    
   \              0x63 0x6F    
   \              0xD8 0xCA    
   \              0xF4 0xBC    
   \              0x9A 0x0E    
   \   00000194   0x26 0x62          DC8 38, 98, 132, 165, 47, 222, 62, 226, 164, 9, 230, 3, 255, 41, 94, 75
   \              0x84 0xA5    
   \              0x2F 0xDE    
   \              0x3E 0xE2    
   \              0xA4 0x09    
   \              0xE6 0x03    
   \              0xFF 0x29    
   \              0x5E 0x4B    
   \   000001A4   0xCB 0x9B          DC8 203, 155, 248, 245, 139, 182, 168, 173, 90, 216, 229, 121, 67, 74
   \              0xF8 0xF5    
   \              0x8B 0xB6    
   \              0xA8 0xAD    
   \              0x5A 0xD8    
   \              0xE5 0x79    
   \              0x43 0x4A    
   \   000001B2   0xC5 0xAF          DC8 197, 175, 234, 114, 221, 75, 226, 41, 72, 251, 152, 124, 73, 203
   \              0xEA 0x72    
   \              0xDD 0x4B    
   \              0xE2 0x29    
   \              0x48 0xFB    
   \              0x98 0x7C    
   \              0x49 0xCB    
   \   000001C0   0xDC 0x42          DC8 220, 66, 82, 22, 134, 216, 92, 93, 69, 176, 230, 32, 163, 202, 113
   \              0x52 0x16    
   \              0x86 0xD8    
   \              0x5C 0x5D    
   \              0x45 0xB0    
   \              0xE6 0x20    
   \              0xA3 0xCA    
   \              0x71         
   \   000001CF   0x84 0xFE          DC8 132, 254, 104, 178, 0, 13, 234, 178, 206, 38, 114, 52, 111, 220
   \              0x68 0xB2    
   \              0x00 0x0D    
   \              0xEA 0xB2    
   \              0xCE 0x26    
   \              0x72 0x34    
   \              0x6F 0xDC    
   \   000001DD   0xC4 0x45          DC8 196, 69, 77, 27, 224, 64, 110, 28, 39, 137, 166, 208, 53, 212, 235
   \              0x4D 0x1B    
   \              0xE0 0x40    
   \              0x6E 0x1C    
   \              0x27 0x89    
   \              0xA6 0xD0    
   \              0x35 0xD4    
   \              0xEB         
   \   000001EC   0x02 0x03          DC8 2, 3, 1, 0, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5
   \              0x01 0x00    
   \              0x01 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x01 0x05    
   \              0x05         
   \   000001FF   0x00 0x03          DC8 0, 3, 129, 129, 0, 124, 233, 239, 212, 81, 250, 167, 168, 207, 10
   \              0x81 0x81    
   \              0x00 0x7C    
   \              0xE9 0xEF    
   \              0xD4 0x51    
   \              0xFA 0xA7    
   \              0xA8 0xCF    
   \              0x0A         
   \   0000020E   0x24 0x0F          DC8 36, 15, 175, 193, 204, 6, 195, 118, 169, 59, 24, 142, 188, 240, 141
   \              0xAF 0xC1    
   \              0xCC 0x06    
   \              0xC3 0x76    
   \              0xA9 0x3B    
   \              0x18 0x8E    
   \              0xBC 0xF0    
   \              0x8D         
   \   0000021D   0xF6 0x5C          DC8 246, 92, 86, 157, 73, 200, 107, 245, 1, 140, 52, 121, 67, 58, 31
   \              0x56 0x9D    
   \              0x49 0xC8    
   \              0x6B 0xF5    
   \              0x01 0x8C    
   \              0x34 0x79    
   \              0x43 0x3A    
   \              0x1F         
   \   0000022C   0xA9 0xB0          DC8 169, 176, 155, 110, 153, 46, 107, 66, 118, 234, 68, 115, 186, 171
   \              0x9B 0x6E    
   \              0x99 0x2E    
   \              0x6B 0x42    
   \              0x76 0xEA    
   \              0x44 0x73    
   \              0xBA 0xAB    
   \   0000023A   0x21 0x91          DC8 33, 145, 247, 67, 61, 156, 100, 163, 237, 210, 53, 57, 132, 113, 66
   \              0xF7 0x43    
   \              0x3D 0x9C    
   \              0x64 0xA3    
   \              0xED 0xD2    
   \              0x35 0x39    
   \              0x84 0x71    
   \              0x42         
   \   00000249   0xC7 0x63          DC8 199, 99, 187, 4, 71, 114, 147, 47, 14, 238, 70, 21, 1, 207, 217
   \              0xBB 0x04    
   \              0x47 0x72    
   \              0x93 0x2F    
   \              0x0E 0xEE    
   \              0x46 0x15    
   \              0x01 0xCF    
   \              0xD9         
   \   00000258   0xD6 0x09          DC8 214, 9, 73, 8, 46, 13, 223, 144, 6, 109, 253, 109, 125, 17, 39, 158
   \              0x49 0x08    
   \              0x2E 0x0D    
   \              0xDF 0x90    
   \              0x06 0x6D    
   \              0xFD 0x6D    
   \              0x7D 0x11    
   \              0x27 0x9E    
   \   00000268   0x57 0x60          DC8 87, 96, 230, 126, 71, 21, 109, 77, 173, 102, 202, 139, 239, 116
   \              0xE6 0x7E    
   \              0x47 0x15    
   \              0x6D 0x4D    
   \              0xAD 0x66    
   \              0xCA 0x8B    
   \              0xEF 0x74    
   \   00000276   0xDB 0x1F          DC8 219, 31, 5, 115, 15, 242, 222, 17, 146, 244, 123, 186, 68, 233
   \              0x05 0x73    
   \              0x0F 0xF2    
   \              0xDE 0x11    
   \              0x92 0xF4    
   \              0x7B 0xBA    
   \              0x44 0xE9    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClentKey[609]
   \                     sslClentKey:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 93, 2, 1, 0, 2, 129, 129, 0, 180, 200, 83, 30, 86, 189
   \              0x02 0x5D    
   \              0x02 0x01    
   \              0x00 0x02    
   \              0x81 0x81    
   \              0x00 0xB4    
   \              0xC8 0x53    
   \              0x1E 0x56    
   \              0xBD         
   \   00000011   0xCB 0x39          DC8 203, 57, 86, 129, 230, 241, 220, 136, 68, 179, 194, 66, 127, 34
   \              0x56 0x81    
   \              0xE6 0xF1    
   \              0xDC 0x88    
   \              0x44 0xB3    
   \              0xC2 0x42    
   \              0x7F 0x22    
   \   0000001F   0xBE 0x3F          DC8 190, 63, 124, 233, 37, 166, 114, 183, 115, 227, 96, 149, 99, 111
   \              0x7C 0xE9    
   \              0x25 0xA6    
   \              0x72 0xB7    
   \              0x73 0xE3    
   \              0x60 0x95    
   \              0x63 0x6F    
   \   0000002D   0xD8 0xCA          DC8 216, 202, 244, 188, 154, 14, 38, 98, 132, 165, 47, 222, 62, 226
   \              0xF4 0xBC    
   \              0x9A 0x0E    
   \              0x26 0x62    
   \              0x84 0xA5    
   \              0x2F 0xDE    
   \              0x3E 0xE2    
   \   0000003B   0xA4 0x09          DC8 164, 9, 230, 3, 255, 41, 94, 75, 203, 155, 248, 245, 139, 182, 168
   \              0xE6 0x03    
   \              0xFF 0x29    
   \              0x5E 0x4B    
   \              0xCB 0x9B    
   \              0xF8 0xF5    
   \              0x8B 0xB6    
   \              0xA8         
   \   0000004A   0xAD 0x5A          DC8 173, 90, 216, 229, 121, 67, 74, 197, 175, 234, 114, 221, 75, 226
   \              0xD8 0xE5    
   \              0x79 0x43    
   \              0x4A 0xC5    
   \              0xAF 0xEA    
   \              0x72 0xDD    
   \              0x4B 0xE2    
   \   00000058   0x29 0x48          DC8 41, 72, 251, 152, 124, 73, 203, 220, 66, 82, 22, 134, 216, 92, 93
   \              0xFB 0x98    
   \              0x7C 0x49    
   \              0xCB 0xDC    
   \              0x42 0x52    
   \              0x16 0x86    
   \              0xD8 0x5C    
   \              0x5D         
   \   00000067   0x45 0xB0          DC8 69, 176, 230, 32, 163, 202, 113, 132, 254, 104, 178, 0, 13, 234
   \              0xE6 0x20    
   \              0xA3 0xCA    
   \              0x71 0x84    
   \              0xFE 0x68    
   \              0xB2 0x00    
   \              0x0D 0xEA    
   \   00000075   0xB2 0xCE          DC8 178, 206, 38, 114, 52, 111, 220, 196, 69, 77, 27, 224, 64, 110, 28
   \              0x26 0x72    
   \              0x34 0x6F    
   \              0xDC 0xC4    
   \              0x45 0x4D    
   \              0x1B 0xE0    
   \              0x40 0x6E    
   \              0x1C         
   \   00000084   0x27 0x89          DC8 39, 137, 166, 208, 53, 212, 235, 2, 3, 1, 0, 1, 2, 129, 129, 0, 141
   \              0xA6 0xD0    
   \              0x35 0xD4    
   \              0xEB 0x02    
   \              0x03 0x01    
   \              0x00 0x01    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0x8D         
   \   00000095   0xE6 0x23          DC8 230, 35, 159, 207, 180, 31, 188, 252, 210, 239, 228, 110, 22, 163
   \              0x9F 0xCF    
   \              0xB4 0x1F    
   \              0xBC 0xFC    
   \              0xD2 0xEF    
   \              0xE4 0x6E    
   \              0x16 0xA3    
   \   000000A3   0xDE 0x79          DC8 222, 121, 31, 90, 205, 121, 137, 57, 209, 131, 20, 248, 60, 89, 1
   \              0x1F 0x5A    
   \              0xCD 0x79    
   \              0x89 0x39    
   \              0xD1 0x83    
   \              0x14 0xF8    
   \              0x3C 0x59    
   \              0x01         
   \   000000B2   0x63 0x81          DC8 99, 129, 62, 208, 190, 216, 231, 106, 214, 125, 62, 209, 219, 142
   \              0x3E 0xD0    
   \              0xBE 0xD8    
   \              0xE7 0x6A    
   \              0xD6 0x7D    
   \              0x3E 0xD1    
   \              0xDB 0x8E    
   \   000000C0   0x11 0x59          DC8 17, 89, 160, 0, 163, 131, 133, 129, 35, 154, 100, 2, 152, 105, 239
   \              0xA0 0x00    
   \              0xA3 0x83    
   \              0x85 0x81    
   \              0x23 0x9A    
   \              0x64 0x02    
   \              0x98 0x69    
   \              0xEF         
   \   000000CF   0xEB 0x44          DC8 235, 68, 99, 246, 86, 241, 53, 15, 75, 19, 104, 78, 228, 25, 201, 9
   \              0x63 0xF6    
   \              0x56 0xF1    
   \              0x35 0x0F    
   \              0x4B 0x13    
   \              0x68 0x4E    
   \              0xE4 0x19    
   \              0xC9 0x09    
   \   000000DF   0xDC 0xA4          DC8 220, 164, 160, 40, 166, 171, 87, 13, 108, 79, 251, 35, 66, 138, 80
   \              0xA0 0x28    
   \              0xA6 0xAB    
   \              0x57 0x0D    
   \              0x6C 0x4F    
   \              0xFB 0x23    
   \              0x42 0x8A    
   \              0x50         
   \   000000EE   0x6A 0x29          DC8 106, 41, 238, 232, 148, 188, 33, 232, 10, 163, 124, 194, 98, 108
   \              0xEE 0xE8    
   \              0x94 0xBC    
   \              0x21 0xE8    
   \              0x0A 0xA3    
   \              0x7C 0xC2    
   \              0x62 0x6C    
   \   000000FC   0x63 0x42          DC8 99, 66, 77, 232, 230, 198, 149, 147, 82, 112, 250, 172, 179, 3, 235
   \              0x4D 0xE8    
   \              0xE6 0xC6    
   \              0x95 0x93    
   \              0x52 0x70    
   \              0xFA 0xAC    
   \              0xB3 0x03    
   \              0xEB         
   \   0000010B   0xD2 0xFD          DC8 210, 253, 125, 154, 31, 62, 18, 30, 33, 2, 65, 0, 231, 117, 25, 25
   \              0x7D 0x9A    
   \              0x1F 0x3E    
   \              0x12 0x1E    
   \              0x21 0x02    
   \              0x41 0x00    
   \              0xE7 0x75    
   \              0x19 0x19    
   \   0000011B   0xE2 0x68          DC8 226, 104, 165, 122, 139, 13, 103, 29, 209, 91, 215, 216, 132, 216
   \              0xA5 0x7A    
   \              0x8B 0x0D    
   \              0x67 0x1D    
   \              0xD1 0x5B    
   \              0xD7 0xD8    
   \              0x84 0xD8    
   \   00000129   0xFE 0xED          DC8 254, 237, 155, 59, 18, 112, 128, 9, 42, 44, 48, 76, 103, 202, 52
   \              0x9B 0x3B    
   \              0x12 0x70    
   \              0x80 0x09    
   \              0x2A 0x2C    
   \              0x30 0x4C    
   \              0x67 0xCA    
   \              0x34         
   \   00000138   0x63 0xFA          DC8 99, 250, 230, 26, 15, 2, 226, 133, 5, 32, 216, 33, 149, 46, 67, 21
   \              0xE6 0x1A    
   \              0x0F 0x02    
   \              0xE2 0x85    
   \              0x05 0x20    
   \              0xD8 0x21    
   \              0x95 0x2E    
   \              0x43 0x15    
   \   00000148   0x42 0xBA          DC8 66, 186, 101, 22, 212, 155, 77, 122, 234, 149, 160, 34, 239, 89, 81
   \              0x65 0x16    
   \              0xD4 0x9B    
   \              0x4D 0x7A    
   \              0xEA 0x95    
   \              0xA0 0x22    
   \              0xEF 0x59    
   \              0x51         
   \   00000157   0x02 0x41          DC8 2, 65, 0, 199, 243, 168, 158, 196, 62, 98, 146, 245, 112, 123, 69
   \              0x00 0xC7    
   \              0xF3 0xA8    
   \              0x9E 0xC4    
   \              0x3E 0x62    
   \              0x92 0xF5    
   \              0x70 0x7B    
   \              0x45         
   \   00000166   0xC6 0xCE          DC8 198, 206, 138, 86, 217, 26, 210, 45, 239, 218, 104, 146, 144, 185
   \              0x8A 0x56    
   \              0xD9 0x1A    
   \              0xD2 0x2D    
   \              0xEF 0xDA    
   \              0x68 0x92    
   \              0x90 0xB9    
   \   00000174   0xB4 0x6F          DC8 180, 111, 218, 77, 153, 26, 99, 187, 250, 101, 210, 217, 45, 146
   \              0xDA 0x4D    
   \              0x99 0x1A    
   \              0x63 0xBB    
   \              0xFA 0x65    
   \              0xD2 0xD9    
   \              0x2D 0x92    
   \   00000182   0x3F 0x39          DC8 63, 57, 158, 98, 241, 95, 104, 156, 174, 184, 159, 109, 37, 6, 223
   \              0x9E 0x62    
   \              0xF1 0x5F    
   \              0x68 0x9C    
   \              0xAE 0xB8    
   \              0x9F 0x6D    
   \              0x25 0x06    
   \              0xDF         
   \   00000191   0x90 0x16          DC8 144, 22, 175, 242, 233, 127, 140, 123, 123, 2, 64, 126, 67, 19, 193
   \              0xAF 0xF2    
   \              0xE9 0x7F    
   \              0x8C 0x7B    
   \              0x7B 0x02    
   \              0x40 0x7E    
   \              0x43 0x13    
   \              0xC1         
   \   000001A0   0x5A 0x10          DC8 90, 16, 42, 13, 82, 99, 170, 87, 202, 200, 166, 83, 184, 12, 195
   \              0x2A 0x0D    
   \              0x52 0x63    
   \              0xAA 0x57    
   \              0xCA 0xC8    
   \              0xA6 0x53    
   \              0xB8 0x0C    
   \              0xC3         
   \   000001AF   0xEC 0x8C          DC8 236, 140, 92, 202, 47, 82, 185, 45, 39, 83, 229, 170, 76, 213, 13
   \              0x5C 0xCA    
   \              0x2F 0x52    
   \              0xB9 0x2D    
   \              0x27 0x53    
   \              0xE5 0xAA    
   \              0x4C 0xD5    
   \              0x0D         
   \   000001BE   0xA1 0x65          DC8 161, 101, 250, 219, 43, 128, 180, 125, 218, 175, 236, 137, 251, 229
   \              0xFA 0xDB    
   \              0x2B 0x80    
   \              0xB4 0x7D    
   \              0xDA 0xAF    
   \              0xEC 0x89    
   \              0xFB 0xE5    
   \   000001CC   0x9E 0x68          DC8 158, 104, 123, 84, 0, 3, 85, 1, 12, 71, 129, 254, 12, 112, 179, 49
   \              0x7B 0x54    
   \              0x00 0x03    
   \              0x55 0x01    
   \              0x0C 0x47    
   \              0x81 0xFE    
   \              0x0C 0x70    
   \              0xB3 0x31    
   \   000001DC   0x02 0x41          DC8 2, 65, 0, 155, 175, 104, 87, 86, 77, 140, 203, 8, 55, 240, 131, 191
   \              0x00 0x9B    
   \              0xAF 0x68    
   \              0x57 0x56    
   \              0x4D 0x8C    
   \              0xCB 0x08    
   \              0x37 0xF0    
   \              0x83 0xBF    
   \   000001EC   0xEC 0x09          DC8 236, 9, 98, 221, 224, 56, 78, 116, 55, 6, 189, 55, 218, 160, 87
   \              0x62 0xDD    
   \              0xE0 0x38    
   \              0x4E 0x74    
   \              0x37 0x06    
   \              0xBD 0x37    
   \              0xDA 0xA0    
   \              0x57         
   \   000001FB   0x87 0x0E          DC8 135, 14, 108, 107, 83, 196, 133, 142, 202, 193, 54, 238, 108, 52
   \              0x6C 0x6B    
   \              0x53 0xC4    
   \              0x85 0x8E    
   \              0xCA 0xC1    
   \              0x36 0xEE    
   \              0x6C 0x34    
   \   00000209   0x1C 0xD2          DC8 28, 210, 197, 69, 152, 90, 134, 224, 81, 161, 213, 246, 168, 19
   \              0xC5 0x45    
   \              0x98 0x5A    
   \              0x86 0xE0    
   \              0x51 0xA1    
   \              0xD5 0xF6    
   \              0xA8 0x13    
   \   00000217   0xB4 0xD6          DC8 180, 214, 130, 184, 180, 11, 90, 9, 2, 64, 86, 135, 126, 158, 229
   \              0x82 0xB8    
   \              0xB4 0x0B    
   \              0x5A 0x09    
   \              0x02 0x40    
   \              0x56 0x87    
   \              0x7E 0x9E    
   \              0xE5         
   \   00000226   0x3D 0x95          DC8 61, 149, 244, 154, 62, 77, 174, 118, 245, 184, 213, 106, 190, 169
   \              0xF4 0x9A    
   \              0x3E 0x4D    
   \              0xAE 0x76    
   \              0xF5 0xB8    
   \              0xD5 0x6A    
   \              0xBE 0xA9    
   \   00000234   0xD3 0x05          DC8 211, 5, 125, 185, 214, 214, 121, 135, 248, 171, 195, 228, 39, 235
   \              0x7D 0xB9    
   \              0xD6 0xD6    
   \              0x79 0x87    
   \              0xF8 0xAB    
   \              0xC3 0xE4    
   \              0x27 0xEB    
   \   00000242   0x0B 0x92          DC8 11, 146, 107, 180, 61, 193, 171, 223, 178, 109, 63, 101, 134, 206
   \              0x6B 0xB4    
   \              0x3D 0xC1    
   \              0xAB 0xDF    
   \              0xB2 0x6D    
   \              0x3F 0x65    
   \              0x86 0xCE    
   \   00000250   0xF3 0xBB          DC8 243, 187, 69, 40, 166, 138, 56, 52, 54, 110, 229, 152, 124, 159
   \              0x45 0x28    
   \              0xA6 0x8A    
   \              0x38 0x34    
   \              0x36 0x6E    
   \              0xE5 0x98    
   \              0x7C 0x9F    
   \   0000025E   0xE0 0x6C          DC8 224, 108, 78, 0, 0, 0
   \              0x4E 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerCA[1391]
   \                     sslServerCA:
   \   00000000   0x2D 0x2D          DC8 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46         
   \   00000011   0x49 0x43          DC8 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 68, 49, 122
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x4D    
   \              0x49 0x49    
   \              0x44 0x31    
   \              0x7A         
   \   00000022   0x43 0x43          DC8 67, 67, 65, 48, 67, 103, 65, 119, 73, 66, 65, 103, 73, 74, 65, 74
   \              0x41 0x30    
   \              0x43 0x67    
   \              0x41 0x77    
   \              0x49 0x42    
   \              0x41 0x67    
   \              0x49 0x4A    
   \              0x41 0x4A    
   \   00000032   0x64 0x7A          DC8 100, 122, 118, 74, 55, 110, 77, 105, 83, 53, 77, 65, 48, 71, 67, 83
   \              0x76 0x4A    
   \              0x37 0x6E    
   \              0x4D 0x69    
   \              0x53 0x35    
   \              0x4D 0x41    
   \              0x30 0x47    
   \              0x43 0x53    
   \   00000042   0x71 0x47          DC8 113, 71, 83, 73, 98, 51, 68, 81, 69, 66, 66, 81, 85, 65, 77, 73, 71
   \              0x53 0x49    
   \              0x62 0x33    
   \              0x44 0x51    
   \              0x45 0x42    
   \              0x42 0x51    
   \              0x55 0x41    
   \              0x4D 0x49    
   \              0x47         
   \   00000053   0x6B 0x4D          DC8 107, 77, 81, 115, 119, 67, 81, 89, 68, 10, 86, 81, 81, 71, 69, 119
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51 0x59    
   \              0x44 0x0A    
   \              0x56 0x51    
   \              0x51 0x47    
   \              0x45 0x77    
   \   00000063   0x4A 0x4A          DC8 74, 74, 84, 106, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 66, 77
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x43 0x42    
   \              0x4D         
   \   00000074   0x49 0x53          DC8 73, 83, 50, 70, 121, 98, 109, 70, 48, 89, 87, 115, 120, 69, 106, 65
   \              0x32 0x46    
   \              0x79 0x62    
   \              0x6D 0x46    
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \   00000084   0x51 0x42          DC8 81, 66, 103, 78, 86, 66, 65, 99, 84, 67, 85, 74, 104, 98, 109, 100
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x63    
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x68 0x62    
   \              0x6D 0x64    
   \   00000094   0x68 0x62          DC8 104, 98, 71, 57, 121, 90, 84, 69, 82, 10, 77, 65, 56, 71, 65, 49
   \              0x47 0x39    
   \              0x79 0x5A    
   \              0x54 0x45    
   \              0x52 0x0A    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \   000000A4   0x55 0x45          DC8 85, 69, 67, 104, 77, 73, 82, 50, 70, 112, 98, 108, 78, 119, 89, 87
   \              0x43 0x68    
   \              0x4D 0x49    
   \              0x52 0x32    
   \              0x46 0x70    
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x59 0x57    
   \   000000B4   0x34 0x78          DC8 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 115, 84, 67, 48
   \              0x46 0x44    
   \              0x41 0x53    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x73 0x54    
   \              0x43 0x30    
   \   000000C4   0x56 0x75          DC8 86, 117, 90, 50, 108, 117, 90, 87, 86, 121, 97, 87, 53, 110, 77, 82
   \              0x5A 0x32    
   \              0x6C 0x75    
   \              0x5A 0x57    
   \              0x56 0x79    
   \              0x61 0x57    
   \              0x35 0x6E    
   \              0x4D 0x52    
   \   000000D4   0x67 0x77          DC8 103, 119, 70, 103, 89, 68, 86, 81, 81, 68, 10, 69, 119, 56, 120, 79
   \              0x46 0x67    
   \              0x59 0x44    
   \              0x56 0x51    
   \              0x51 0x44    
   \              0x0A 0x45    
   \              0x77 0x38    
   \              0x78 0x4F    
   \   000000E4   0x54 0x49          DC8 84, 73, 117, 77, 84, 89, 52, 76, 106, 69, 117, 79, 84, 107, 103, 83
   \              0x75 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \              0x6A 0x45    
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x67 0x53    
   \   000000F4   0x55 0x34          DC8 85, 52, 120, 75, 122, 65, 112, 66, 103, 107, 113, 104, 107, 105, 71
   \              0x78 0x4B    
   \              0x7A 0x41    
   \              0x70 0x42    
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47         
   \   00000103   0x39 0x77          DC8 57, 119, 48, 66, 67, 81, 69, 87, 72, 72, 78, 112, 89, 109, 70, 122
   \              0x30 0x42    
   \              0x43 0x51    
   \              0x45 0x57    
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \   00000113   0x61 0x58          DC8 97, 88, 77, 117, 99, 72, 86, 121, 98, 50, 104, 112, 10, 100, 69, 66
   \              0x4D 0x75    
   \              0x63 0x48    
   \              0x56 0x79    
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x0A 0x64    
   \              0x45 0x42    
   \   00000123   0x6E 0x59          DC8 110, 89, 87, 108, 117, 99, 51, 66, 104, 98, 105, 53, 106, 98, 50
   \              0x57 0x6C    
   \              0x75 0x63    
   \              0x33 0x42    
   \              0x68 0x62    
   \              0x69 0x35    
   \              0x6A 0x62    
   \              0x32         
   \   00000132   0x30 0x77          DC8 48, 119, 72, 104, 99, 78, 77, 84, 69, 119, 79, 68, 65, 48, 77, 68
   \              0x48 0x68    
   \              0x63 0x4E    
   \              0x4D 0x54    
   \              0x45 0x77    
   \              0x4F 0x44    
   \              0x41 0x30    
   \              0x4D 0x44    
   \   00000142   0x55 0x77          DC8 85, 119, 78, 106, 69, 122, 87, 104, 99, 78, 77, 84, 73, 119, 79, 68
   \              0x4E 0x6A    
   \              0x45 0x7A    
   \              0x57 0x68    
   \              0x63 0x4E    
   \              0x4D 0x54    
   \              0x49 0x77    
   \              0x4F 0x44    
   \   00000152   0x41 0x7A          DC8 65, 122, 77, 68, 85, 119, 78, 106, 69, 122, 87, 106, 67, 66, 10
   \              0x4D 0x44    
   \              0x55 0x77    
   \              0x4E 0x6A    
   \              0x45 0x7A    
   \              0x57 0x6A    
   \              0x43 0x42    
   \              0x0A         
   \   00000161   0x70 0x44          DC8 112, 68, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 66, 104, 77, 67
   \              0x45 0x4C    
   \              0x4D 0x41    
   \              0x6B 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x42 0x68    
   \              0x4D 0x43    
   \   00000171   0x53 0x55          DC8 83, 85, 52, 120, 69, 84, 65, 80, 66, 103, 78, 86, 66, 65, 103, 84
   \              0x34 0x78    
   \              0x45 0x54    
   \              0x41 0x50    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x67 0x54    
   \   00000181   0x43 0x45          DC8 67, 69, 116, 104, 99, 109, 53, 104, 100, 71, 70, 114, 77, 82, 73
   \              0x74 0x68    
   \              0x63 0x6D    
   \              0x35 0x68    
   \              0x64 0x47    
   \              0x46 0x72    
   \              0x4D 0x52    
   \              0x49         
   \   00000190   0x77 0x45          DC8 119, 69, 65, 89, 68, 86, 81, 81, 72, 69, 119, 108, 67, 89, 87, 53
   \              0x41 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x48 0x45    
   \              0x77 0x6C    
   \              0x43 0x59    
   \              0x57 0x35    
   \   000001A0   0x6E 0x0A          DC8 110, 10, 89, 87, 120, 118, 99, 109, 85, 120, 69, 84, 65, 80, 66
   \              0x59 0x57    
   \              0x78 0x76    
   \              0x63 0x6D    
   \              0x55 0x78    
   \              0x45 0x54    
   \              0x41 0x50    
   \              0x42         
   \   000001AF   0x67 0x4E          DC8 103, 78, 86, 66, 65, 111, 84, 67, 69, 100, 104, 97, 87, 53, 84, 99
   \              0x56 0x42    
   \              0x41 0x6F    
   \              0x54 0x43    
   \              0x45 0x64    
   \              0x68 0x61    
   \              0x57 0x35    
   \              0x54 0x63    
   \   000001BF   0x47 0x46          DC8 71, 70, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 76, 69
   \              0x75 0x4D    
   \              0x52 0x51    
   \              0x77 0x45    
   \              0x67 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x4C 0x45    
   \   000001CF   0x77 0x74          DC8 119, 116, 70, 98, 109, 100, 112, 98, 109, 86, 108, 99, 109, 108
   \              0x46 0x62    
   \              0x6D 0x64    
   \              0x70 0x62    
   \              0x6D 0x56    
   \              0x6C 0x63    
   \              0x6D 0x6C    
   \   000001DD   0x75 0x5A          DC8 117, 90, 122, 69, 89, 10, 77, 66, 89, 71, 65, 49, 85, 69, 65, 120
   \              0x7A 0x45    
   \              0x59 0x0A    
   \              0x4D 0x42    
   \              0x59 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x41 0x78    
   \   000001ED   0x4D 0x50          DC8 77, 80, 77, 84, 107, 121, 76, 106, 69, 50, 79, 67, 52, 120, 76, 106
   \              0x4D 0x54    
   \              0x6B 0x79    
   \              0x4C 0x6A    
   \              0x45 0x32    
   \              0x4F 0x43    
   \              0x34 0x78    
   \              0x4C 0x6A    
   \   000001FD   0x6B 0x35          DC8 107, 53, 73, 69, 108, 79, 77, 83, 115, 119, 75, 81, 89, 74, 75, 111
   \              0x49 0x45    
   \              0x6C 0x4F    
   \              0x4D 0x53    
   \              0x73 0x77    
   \              0x4B 0x51    
   \              0x59 0x4A    
   \              0x4B 0x6F    
   \   0000020D   0x5A 0x49          DC8 90, 73, 104, 118, 99, 78, 65, 81, 107, 66, 70, 104, 120, 122, 97
   \              0x68 0x76    
   \              0x63 0x4E    
   \              0x41 0x51    
   \              0x6B 0x42    
   \              0x46 0x68    
   \              0x78 0x7A    
   \              0x61         
   \   0000021C   0x57 0x4A          DC8 87, 74, 104, 99, 50, 108, 122, 10, 76, 110, 66, 49, 99, 109, 57
   \              0x68 0x63    
   \              0x32 0x6C    
   \              0x7A 0x0A    
   \              0x4C 0x6E    
   \              0x42 0x31    
   \              0x63 0x6D    
   \              0x39         
   \   0000022B   0x6F 0x61          DC8 111, 97, 88, 82, 65, 90, 50, 70, 112, 98, 110, 78, 119, 89, 87, 52
   \              0x58 0x52    
   \              0x41 0x5A    
   \              0x32 0x46    
   \              0x70 0x62    
   \              0x6E 0x4E    
   \              0x77 0x59    
   \              0x57 0x34    
   \   0000023B   0x75 0x59          DC8 117, 89, 50, 57, 116, 77, 73, 71, 102, 77, 65, 48, 71, 67, 83, 113
   \              0x32 0x39    
   \              0x74 0x4D    
   \              0x49 0x47    
   \              0x66 0x4D    
   \              0x41 0x30    
   \              0x47 0x43    
   \              0x53 0x71    
   \   0000024B   0x47 0x53          DC8 71, 83, 73, 98, 51, 68, 81, 69, 66, 65, 81, 85, 65, 65, 52, 71, 78
   \              0x49 0x62    
   \              0x33 0x44    
   \              0x51 0x45    
   \              0x42 0x41    
   \              0x51 0x55    
   \              0x41 0x41    
   \              0x34 0x47    
   \              0x4E         
   \   0000025C   0x41 0x44          DC8 65, 68, 67, 66, 105, 81, 75, 66, 10, 103, 81, 67, 49, 55, 117, 82
   \              0x43 0x42    
   \              0x69 0x51    
   \              0x4B 0x42    
   \              0x0A 0x67    
   \              0x51 0x43    
   \              0x31 0x37    
   \              0x75 0x52    
   \   0000026C   0x4E 0x2B          DC8 78, 43, 78, 98, 53, 117, 104, 73, 72, 99, 70, 97, 106, 51, 108, 114
   \              0x4E 0x62    
   \              0x35 0x75    
   \              0x68 0x49    
   \              0x48 0x63    
   \              0x46 0x61    
   \              0x6A 0x33    
   \              0x6C 0x72    
   \   0000027C   0x34 0x37          DC8 52, 55, 71, 69, 111, 116, 53, 98, 108, 70, 54, 90, 76, 81, 68, 82
   \              0x47 0x45    
   \              0x6F 0x74    
   \              0x35 0x62    
   \              0x6C 0x46    
   \              0x36 0x5A    
   \              0x4C 0x51    
   \              0x44 0x52    
   \   0000028C   0x79 0x70          DC8 121, 112, 78, 90, 70, 115, 56, 68, 98, 76, 69, 72, 66, 73, 66, 43
   \              0x4E 0x5A    
   \              0x46 0x73    
   \              0x38 0x44    
   \              0x62 0x4C    
   \              0x45 0x48    
   \              0x42 0x49    
   \              0x42 0x2B    
   \   0000029C   0x61 0x67          DC8 97, 103, 68, 67, 77, 67, 118, 100, 69, 10, 106, 106, 75, 76, 119
   \              0x44 0x43    
   \              0x4D 0x43    
   \              0x76 0x64    
   \              0x45 0x0A    
   \              0x6A 0x6A    
   \              0x4B 0x4C    
   \              0x77         
   \   000002AB   0x55 0x75          DC8 85, 117, 113, 47, 80, 80, 103, 52, 115, 83, 49, 106, 110, 121, 112
   \              0x71 0x2F    
   \              0x50 0x50    
   \              0x67 0x34    
   \              0x73 0x53    
   \              0x31 0x6A    
   \              0x6E 0x79    
   \              0x70         
   \   000002BA   0x30 0x50          DC8 48, 80, 69, 115, 80, 74, 84, 74, 118, 49, 47, 120, 76, 47, 87, 56
   \              0x45 0x73    
   \              0x50 0x4A    
   \              0x54 0x4A    
   \              0x76 0x31    
   \              0x2F 0x78    
   \              0x4C 0x2F    
   \              0x57 0x38    
   \   000002CA   0x78 0x37          DC8 120, 55, 100, 82, 88, 112, 68, 48, 67, 48, 89, 100, 52, 49, 90, 69
   \              0x64 0x52    
   \              0x58 0x70    
   \              0x44 0x30    
   \              0x43 0x30    
   \              0x59 0x64    
   \              0x34 0x31    
   \              0x5A 0x45    
   \   000002DA   0x5A 0x51          DC8 90, 81, 82, 121, 106, 119, 81, 119, 121, 106, 116, 104, 10, 50, 69
   \              0x52 0x79    
   \              0x6A 0x77    
   \              0x51 0x77    
   \              0x79 0x6A    
   \              0x74 0x68    
   \              0x0A 0x32    
   \              0x45         
   \   000002E9   0x33 0x2B          DC8 51, 43, 105, 87, 67, 54, 90, 103, 69, 97, 105, 79, 118, 53, 69, 121
   \              0x69 0x57    
   \              0x43 0x36    
   \              0x5A 0x67    
   \              0x45 0x61    
   \              0x69 0x4F    
   \              0x76 0x35    
   \              0x45 0x79    
   \   000002F9   0x46 0x36          DC8 70, 54, 71, 79, 116, 82, 82, 57, 112, 122, 84, 103, 52, 50, 121
   \              0x47 0x4F    
   \              0x74 0x52    
   \              0x52 0x39    
   \              0x70 0x7A    
   \              0x54 0x67    
   \              0x34 0x32    
   \              0x79         
   \   00000308   0x78 0x6A          DC8 120, 106, 55, 101, 70, 103, 108, 83, 120, 75, 66, 102, 119, 73, 68
   \              0x37 0x65    
   \              0x46 0x67    
   \              0x6C 0x53    
   \              0x78 0x4B    
   \              0x42 0x66    
   \              0x77 0x49    
   \              0x44         
   \   00000317   0x41 0x51          DC8 65, 81, 65, 66, 111, 52, 73, 66, 68, 84, 67, 67, 65, 81, 107, 119
   \              0x41 0x42    
   \              0x6F 0x34    
   \              0x49 0x42    
   \              0x44 0x54    
   \              0x43 0x43    
   \              0x41 0x51    
   \              0x6B 0x77    
   \   00000327   0x0A 0x48          DC8 10, 72, 81, 89, 68, 86, 82, 48, 79, 66, 66, 89, 69, 70, 67, 73, 55
   \              0x51 0x59    
   \              0x44 0x56    
   \              0x52 0x30    
   \              0x4F 0x42    
   \              0x42 0x59    
   \              0x45 0x46    
   \              0x43 0x49    
   \              0x37         
   \   00000338   0x48 0x64          DC8 72, 100, 110, 77, 109, 114, 99, 88, 105, 43, 84, 69, 115, 113, 75
   \              0x6E 0x4D    
   \              0x6D 0x72    
   \              0x63 0x58    
   \              0x69 0x2B    
   \              0x54 0x45    
   \              0x73 0x71    
   \              0x4B         
   \   00000347   0x5A 0x6A          DC8 90, 106, 76, 113, 55, 80, 117, 101, 100, 77, 73, 72, 90, 66, 103
   \              0x4C 0x71    
   \              0x37 0x50    
   \              0x75 0x65    
   \              0x64 0x4D    
   \              0x49 0x48    
   \              0x5A 0x42    
   \              0x67         
   \   00000356   0x4E 0x56          DC8 78, 86, 72, 83, 77, 69, 103, 100, 69, 119, 103, 99, 54, 65, 70, 67
   \              0x48 0x53    
   \              0x4D 0x45    
   \              0x67 0x64    
   \              0x45 0x77    
   \              0x67 0x63    
   \              0x36 0x41    
   \              0x46 0x43    
   \   00000366   0x49 0x37          DC8 73, 55, 10, 72, 100, 110, 77, 109, 114, 99, 88, 105, 43, 84, 69
   \              0x0A 0x48    
   \              0x64 0x6E    
   \              0x4D 0x6D    
   \              0x72 0x63    
   \              0x58 0x69    
   \              0x2B 0x54    
   \              0x45         
   \   00000375   0x73 0x71          DC8 115, 113, 75, 90, 106, 76, 113, 55, 80, 117, 101, 100, 111, 89, 71
   \              0x4B 0x5A    
   \              0x6A 0x4C    
   \              0x71 0x37    
   \              0x50 0x75    
   \              0x65 0x64    
   \              0x6F 0x59    
   \              0x47         
   \   00000384   0x71 0x70          DC8 113, 112, 73, 71, 110, 77, 73, 71, 107, 77, 81, 115, 119, 67, 81
   \              0x49 0x47    
   \              0x6E 0x4D    
   \              0x49 0x47    
   \              0x6B 0x4D    
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51         
   \   00000393   0x59 0x44          DC8 89, 68, 86, 81, 81, 71, 69, 119, 74, 74, 84, 106, 69, 82, 77, 65
   \              0x56 0x51    
   \              0x51 0x47    
   \              0x45 0x77    
   \              0x4A 0x4A    
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \   000003A3   0x38 0x47          DC8 56, 71, 65, 49, 85, 69, 10, 67, 66, 77, 73, 83, 50, 70, 121, 98
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x0A 0x43    
   \              0x42 0x4D    
   \              0x49 0x53    
   \              0x32 0x46    
   \              0x79 0x62    
   \   000003B3   0x6D 0x46          DC8 109, 70, 48, 89, 87, 115, 120, 69, 106, 65, 81, 66, 103, 78, 86, 66
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \              0x51 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \   000003C3   0x41 0x63          DC8 65, 99, 84, 67, 85, 74, 104, 98, 109, 100, 104, 98, 71, 57, 121, 90
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x68 0x62    
   \              0x6D 0x64    
   \              0x68 0x62    
   \              0x47 0x39    
   \              0x79 0x5A    
   \   000003D3   0x54 0x45          DC8 84, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 104, 77, 73, 82, 50
   \              0x52 0x4D    
   \              0x41 0x38    
   \              0x47 0x41    
   \              0x31 0x55    
   \              0x45 0x43    
   \              0x68 0x4D    
   \              0x49 0x52    
   \              0x32         
   \   000003E4   0x46 0x70          DC8 70, 112, 98, 108, 78, 119, 10, 89, 87, 52, 120, 70, 68, 65, 83, 66
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x0A 0x59    
   \              0x57 0x34    
   \              0x78 0x46    
   \              0x44 0x41    
   \              0x53 0x42    
   \   000003F4   0x67 0x4E          DC8 103, 78, 86, 66, 65, 115, 84, 67, 48, 86, 117, 90, 50, 108, 117, 90
   \              0x56 0x42    
   \              0x41 0x73    
   \              0x54 0x43    
   \              0x30 0x56    
   \              0x75 0x5A    
   \              0x32 0x6C    
   \              0x75 0x5A    
   \   00000404   0x57 0x56          DC8 87, 86, 121, 97, 87, 53, 110, 77, 82, 103, 119, 70, 103, 89, 68, 86
   \              0x79 0x61    
   \              0x57 0x35    
   \              0x6E 0x4D    
   \              0x52 0x67    
   \              0x77 0x46    
   \              0x67 0x59    
   \              0x44 0x56    
   \   00000414   0x51 0x51          DC8 81, 81, 68, 69, 119, 56, 120, 79, 84, 73, 117, 77, 84, 89, 52, 76
   \              0x44 0x45    
   \              0x77 0x38    
   \              0x78 0x4F    
   \              0x54 0x49    
   \              0x75 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \   00000424   0x6A 0x45          DC8 106, 69, 117, 79, 84, 107, 103, 10, 83, 85, 52, 120, 75, 122, 65
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x67 0x0A    
   \              0x53 0x55    
   \              0x34 0x78    
   \              0x4B 0x7A    
   \              0x41         
   \   00000433   0x70 0x42          DC8 112, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 67, 81
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47 0x39    
   \              0x77 0x30    
   \              0x42 0x43    
   \              0x51         
   \   00000442   0x45 0x57          DC8 69, 87, 72, 72, 78, 112, 89, 109, 70, 122, 97, 88, 77, 117, 99, 72
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \              0x61 0x58    
   \              0x4D 0x75    
   \              0x63 0x48    
   \   00000452   0x56 0x79          DC8 86, 121, 98, 50, 104, 112, 100, 69, 66, 110, 89, 87, 108, 117, 99
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x64 0x45    
   \              0x42 0x6E    
   \              0x59 0x57    
   \              0x6C 0x75    
   \              0x63         
   \   00000461   0x33 0x42          DC8 51, 66, 104, 98, 105, 53, 106, 98, 50, 50, 67, 10, 67, 81, 67, 88
   \              0x68 0x62    
   \              0x69 0x35    
   \              0x6A 0x62    
   \              0x32 0x32    
   \              0x43 0x0A    
   \              0x43 0x51    
   \              0x43 0x58    
   \   00000471   0x63 0x37          DC8 99, 55, 121, 101, 53, 122, 73, 107, 117, 84, 65, 77, 66, 103, 78
   \              0x79 0x65    
   \              0x35 0x7A    
   \              0x49 0x6B    
   \              0x75 0x54    
   \              0x41 0x4D    
   \              0x42 0x67    
   \              0x4E         
   \   00000480   0x56 0x48          DC8 86, 72, 82, 77, 69, 66, 84, 65, 68, 65, 81, 72, 47, 77, 65, 48, 71
   \              0x52 0x4D    
   \              0x45 0x42    
   \              0x54 0x41    
   \              0x44 0x41    
   \              0x51 0x48    
   \              0x2F 0x4D    
   \              0x41 0x30    
   \              0x47         
   \   00000491   0x43 0x53          DC8 67, 83, 113, 71, 83, 73, 98, 51, 68, 81, 69, 66, 66, 81, 85, 65, 65
   \              0x71 0x47    
   \              0x53 0x49    
   \              0x62 0x33    
   \              0x44 0x51    
   \              0x45 0x42    
   \              0x42 0x51    
   \              0x55 0x41    
   \              0x41         
   \   000004A2   0x34 0x47          DC8 52, 71, 66, 65, 76, 65, 50, 51, 80, 89, 107, 10, 70, 82, 104, 79
   \              0x42 0x41    
   \              0x4C 0x41    
   \              0x32 0x33    
   \              0x50 0x59    
   \              0x6B 0x0A    
   \              0x46 0x52    
   \              0x68 0x4F    
   \   000004B2   0x49 0x4F          DC8 73, 79, 68, 65, 43, 122, 100, 67, 107, 70, 77, 78, 82, 101, 107
   \              0x44 0x41    
   \              0x2B 0x7A    
   \              0x64 0x43    
   \              0x6B 0x46    
   \              0x4D 0x4E    
   \              0x52 0x65    
   \              0x6B         
   \   000004C1   0x65 0x6C          DC8 101, 108, 85, 66, 107, 82, 72, 78, 79, 51, 80, 80, 70, 99, 88, 120
   \              0x55 0x42    
   \              0x6B 0x52    
   \              0x48 0x4E    
   \              0x4F 0x33    
   \              0x50 0x50    
   \              0x46 0x63    
   \              0x58 0x78    
   \   000004D1   0x4A 0x54          DC8 74, 84, 117, 80, 114, 84, 100, 67, 110, 108, 57, 106, 103, 83, 80
   \              0x75 0x50    
   \              0x72 0x54    
   \              0x64 0x43    
   \              0x6E 0x6C    
   \              0x39 0x6A    
   \              0x67 0x53    
   \              0x50         
   \   000004E0   0x66 0x53          DC8 102, 83, 117, 48, 57, 82, 51, 115, 110, 75, 78, 111, 112, 122, 10
   \              0x75 0x30    
   \              0x39 0x52    
   \              0x33 0x73    
   \              0x6E 0x4B    
   \              0x4E 0x6F    
   \              0x70 0x7A    
   \              0x0A         
   \   000004EF   0x6D 0x75          DC8 109, 117, 43, 74, 83, 48, 85, 100, 109, 102, 69, 69, 54, 122, 51
   \              0x2B 0x4A    
   \              0x53 0x30    
   \              0x55 0x64    
   \              0x6D 0x66    
   \              0x45 0x45    
   \              0x36 0x7A    
   \              0x33         
   \   000004FE   0x4A 0x32          DC8 74, 50, 76, 69, 77, 65, 52, 57, 88, 100, 76, 80, 110, 119, 57, 121
   \              0x4C 0x45    
   \              0x4D 0x41    
   \              0x34 0x39    
   \              0x58 0x64    
   \              0x4C 0x50    
   \              0x6E 0x77    
   \              0x39 0x79    
   \   0000050E   0x68 0x75          DC8 104, 117, 110, 98, 99, 56, 116, 108, 75, 78, 115, 109, 84, 89, 117
   \              0x6E 0x62    
   \              0x63 0x38    
   \              0x74 0x6C    
   \              0x4B 0x4E    
   \              0x73 0x6D    
   \              0x54 0x59    
   \              0x75         
   \   0000051D   0x6C 0x4A          DC8 108, 74, 111, 50, 104, 52, 99, 98, 121, 108, 100, 65, 71, 98, 115
   \              0x6F 0x32    
   \              0x68 0x34    
   \              0x63 0x62    
   \              0x79 0x6C    
   \              0x64 0x41    
   \              0x47 0x62    
   \              0x73         
   \   0000052C   0x4B 0x55          DC8 75, 85, 103, 10, 98, 80, 73, 69, 112, 79, 116, 57, 109, 88, 102, 80
   \              0x67 0x0A    
   \              0x62 0x50    
   \              0x49 0x45    
   \              0x70 0x4F    
   \              0x74 0x39    
   \              0x6D 0x58    
   \              0x66 0x50    
   \   0000053C   0x69 0x39          DC8 105, 57, 75, 77, 117, 54, 67, 98, 121, 104, 86, 87, 55, 74, 71, 48
   \              0x4B 0x4D    
   \              0x75 0x36    
   \              0x43 0x62    
   \              0x79 0x68    
   \              0x56 0x57    
   \              0x37 0x4A    
   \              0x47 0x30    
   \   0000054C   0x4F 0x37          DC8 79, 55, 77, 119, 51, 70, 109, 76, 10, 45, 45, 45, 45, 45, 69, 78
   \              0x4D 0x77    
   \              0x33 0x46    
   \              0x6D 0x4C    
   \              0x0A 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x45 0x4E    
   \   0000055C   0x44 0x20          DC8 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45
   \              0x43 0x45    
   \              0x52 0x54    
   \              0x49 0x46    
   \              0x49 0x43    
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D         
   \   0000056D   0x2D 0x0A          DC8 45, 10, 0
   \              0x00         

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerKey[610]
   \                     sslServerKey:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 94, 2, 1, 0, 2, 129, 129, 0, 187, 215, 249, 190, 157
   \              0x02 0x5E    
   \              0x02 0x01    
   \              0x00 0x02    
   \              0x81 0x81    
   \              0x00 0xBB    
   \              0xD7 0xF9    
   \              0xBE 0x9D    
   \   00000010   0x4C 0x3B          DC8 76, 59, 5, 54, 159, 111, 133, 51, 46, 80, 94, 42, 125, 23, 78, 155
   \              0x05 0x36    
   \              0x9F 0x6F    
   \              0x85 0x33    
   \              0x2E 0x50    
   \              0x5E 0x2A    
   \              0x7D 0x17    
   \              0x4E 0x9B    
   \   00000020   0x5E 0x0E          DC8 94, 14, 186, 181, 235, 97, 46, 150, 79, 65, 162, 36, 121, 168, 237
   \              0xBA 0xB5    
   \              0xEB 0x61    
   \              0x2E 0x96    
   \              0x4F 0x41    
   \              0xA2 0x24    
   \              0x79 0xA8    
   \              0xED         
   \   0000002F   0xC4 0x81          DC8 196, 129, 238, 36, 254, 56, 246, 123, 78, 237, 168, 199, 98, 111
   \              0xEE 0x24    
   \              0xFE 0x38    
   \              0xF6 0x7B    
   \              0x4E 0xED    
   \              0xA8 0xC7    
   \              0x62 0x6F    
   \   0000003D   0x52 0x87          DC8 82, 135, 140, 246, 21, 166, 218, 84, 127, 79, 116, 179, 124, 155
   \              0x8C 0xF6    
   \              0x15 0xA6    
   \              0xDA 0x54    
   \              0x7F 0x4F    
   \              0x74 0xB3    
   \              0x7C 0x9B    
   \   0000004B   0x2F 0xA4          DC8 47, 164, 105, 18, 211, 208, 45, 3, 2, 96, 87, 93, 144, 225, 31, 13
   \              0x69 0x12    
   \              0xD3 0xD0    
   \              0x2D 0x03    
   \              0x02 0x60    
   \              0x57 0x5D    
   \              0x90 0xE1    
   \              0x1F 0x0D    
   \   0000005B   0xEA 0x06          DC8 234, 6, 45, 115, 209, 111, 201, 241, 151, 93, 15, 118, 1, 51, 71, 3
   \              0x2D 0x73    
   \              0xD1 0x6F    
   \              0xC9 0xF1    
   \              0x97 0x5D    
   \              0x0F 0x76    
   \              0x01 0x33    
   \              0x47 0x03    
   \   0000006B   0xAC 0x39          DC8 172, 57, 126, 114, 100, 57, 114, 88, 239, 153, 208, 190, 58, 124
   \              0x7E 0x72    
   \              0x64 0x39    
   \              0x72 0x58    
   \              0xEF 0x99    
   \              0xD0 0xBE    
   \              0x3A 0x7C    
   \   00000079   0x6B 0x45          DC8 107, 69, 30, 199, 49, 159, 49, 43, 143, 117, 56, 156, 186, 180, 35
   \              0x1E 0xC7    
   \              0x31 0x9F    
   \              0x31 0x2B    
   \              0x8F 0x75    
   \              0x38 0x9C    
   \              0xBA 0xB4    
   \              0x23         
   \   00000088   0x28 0x8B          DC8 40, 139, 131, 2, 3, 1, 0, 1, 2, 129, 129, 0, 143, 205, 32, 48, 239
   \              0x83 0x02    
   \              0x03 0x01    
   \              0x00 0x01    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0x8F 0xCD    
   \              0x20 0x30    
   \              0xEF         
   \   00000099   0x84 0x5B          DC8 132, 91, 46, 123, 137, 132, 187, 72, 218, 44, 198, 89, 234, 151
   \              0x2E 0x7B    
   \              0x89 0x84    
   \              0xBB 0x48    
   \              0xDA 0x2C    
   \              0xC6 0x59    
   \              0xEA 0x97    
   \   000000A7   0x7C 0x22          DC8 124, 34, 238, 215, 129, 210, 32, 214, 173, 238, 125, 208, 54, 11
   \              0xEE 0xD7    
   \              0x81 0xD2    
   \              0x20 0xD6    
   \              0xAD 0xEE    
   \              0x7D 0xD0    
   \              0x36 0x0B    
   \   000000B5   0x8C 0x63          DC8 140, 99, 105, 90, 101, 73, 101, 98, 133, 67, 20, 84, 241, 21, 163
   \              0x69 0x5A    
   \              0x65 0x49    
   \              0x65 0x62    
   \              0x85 0x43    
   \              0x14 0x54    
   \              0xF1 0x15    
   \              0xA3         
   \   000000C4   0x45 0xD5          DC8 69, 213, 9, 46, 34, 24, 133, 172, 205, 57, 160, 152, 184, 51, 107
   \              0x09 0x2E    
   \              0x22 0x18    
   \              0x85 0xAC    
   \              0xCD 0x39    
   \              0xA0 0x98    
   \              0xB8 0x33    
   \              0x6B         
   \   000000D3   0xB0 0xA5          DC8 176, 165, 184, 205, 79, 84, 110, 89, 64, 157, 239, 147, 253, 107
   \              0xB8 0xCD    
   \              0x4F 0x54    
   \              0x6E 0x59    
   \              0x40 0x9D    
   \              0xEF 0x93    
   \              0xFD 0x6B    
   \   000000E1   0x11 0x09          DC8 17, 9, 178, 169, 14, 92, 45, 104, 70, 112, 54, 78, 21, 218, 248
   \              0xB2 0xA9    
   \              0x0E 0x5C    
   \              0x2D 0x68    
   \              0x46 0x70    
   \              0x36 0x4E    
   \              0x15 0xDA    
   \              0xF8         
   \   000000F0   0x6D 0x6B          DC8 109, 107, 224, 184, 29, 18, 177, 194, 53, 14, 148, 88, 72, 194, 187
   \              0xE0 0xB8    
   \              0x1D 0x12    
   \              0xB1 0xC2    
   \              0x35 0x0E    
   \              0x94 0x58    
   \              0x48 0xC2    
   \              0xBB         
   \   000000FF   0x95 0x49          DC8 149, 73, 217, 198, 98, 199, 149, 182, 125, 202, 233, 227, 18, 227
   \              0xD9 0xC6    
   \              0x62 0xC7    
   \              0x95 0xB6    
   \              0x7D 0xCA    
   \              0xE9 0xE3    
   \              0x12 0xE3    
   \   0000010D   0x2A 0xA0          DC8 42, 160, 161, 207, 28, 192, 113, 2, 65, 0, 228, 107, 23, 201, 164
   \              0xA1 0xCF    
   \              0x1C 0xC0    
   \              0x71 0x02    
   \              0x41 0x00    
   \              0xE4 0x6B    
   \              0x17 0xC9    
   \              0xA4         
   \   0000011C   0x63 0x50          DC8 99, 80, 98, 91, 207, 244, 255, 102, 109, 31, 206, 151, 168, 41, 110
   \              0x62 0x5B    
   \              0xCF 0xF4    
   \              0xFF 0x66    
   \              0x6D 0x1F    
   \              0xCE 0x97    
   \              0xA8 0x29    
   \              0x6E         
   \   0000012B   0x20 0x92          DC8 32, 146, 220, 23, 160, 126, 94, 188, 234, 130, 86, 217, 182, 180
   \              0xDC 0x17    
   \              0xA0 0x7E    
   \              0x5E 0xBC    
   \              0xEA 0x82    
   \              0x56 0xD9    
   \              0xB6 0xB4    
   \   00000139   0xD3 0xE8          DC8 211, 232, 116, 221, 108, 201, 100, 133, 222, 217, 176, 85, 118, 176
   \              0x74 0xDD    
   \              0x6C 0xC9    
   \              0x64 0x85    
   \              0xDE 0xD9    
   \              0xB0 0x55    
   \              0x76 0xB0    
   \   00000147   0xE7 0x04          DC8 231, 4, 193, 3, 204, 178, 226, 200, 214, 44, 138, 70, 50, 192, 214
   \              0xC1 0x03    
   \              0xCC 0xB2    
   \              0xE2 0xC8    
   \              0xD6 0x2C    
   \              0x8A 0x46    
   \              0x32 0xC0    
   \              0xD6         
   \   00000156   0x89 0x02          DC8 137, 2, 65, 0, 210, 134, 161, 149, 130, 176, 182, 72, 53, 10, 159
   \              0x41 0x00    
   \              0xD2 0x86    
   \              0xA1 0x95    
   \              0x82 0xB0    
   \              0xB6 0x48    
   \              0x35 0x0A    
   \              0x9F         
   \   00000165   0x0D 0x6E          DC8 13, 110, 217, 183, 179, 113, 20, 82, 209, 37, 201, 232, 207, 184
   \              0xD9 0xB7    
   \              0xB3 0x71    
   \              0x14 0x52    
   \              0xD1 0x25    
   \              0xC9 0xE8    
   \              0xCF 0xB8    
   \   00000173   0xD5 0x0F          DC8 213, 15, 192, 94, 51, 171, 122, 128, 252, 184, 69, 48, 117, 120
   \              0xC0 0x5E    
   \              0x33 0xAB    
   \              0x7A 0x80    
   \              0xFC 0xB8    
   \              0x45 0x30    
   \              0x75 0x78    
   \   00000181   0x9F 0xB7          DC8 159, 183, 194, 198, 226, 27, 207, 40, 227, 49, 249, 207, 245, 251
   \              0xC2 0xC6    
   \              0xE2 0x1B    
   \              0xCF 0x28    
   \              0xE3 0x31    
   \              0xF9 0xCF    
   \              0xF5 0xFB    
   \   0000018F   0x26 0xBB          DC8 38, 187, 148, 62, 62, 68, 81, 36, 63, 206, 171, 2, 65, 0, 179, 199
   \              0x94 0x3E    
   \              0x3E 0x44    
   \              0x51 0x24    
   \              0x3F 0xCE    
   \              0xAB 0x02    
   \              0x41 0x00    
   \              0xB3 0xC7    
   \   0000019F   0xCE 0x9B          DC8 206, 155, 56, 181, 170, 73, 32, 54, 87, 128, 197, 159, 82, 15, 138
   \              0x38 0xB5    
   \              0xAA 0x49    
   \              0x20 0x36    
   \              0x57 0x80    
   \              0xC5 0x9F    
   \              0x52 0x0F    
   \              0x8A         
   \   000001AE   0xB2 0x22          DC8 178, 34, 153, 185, 45, 157, 233, 66, 186, 243, 218, 1, 65, 193, 21
   \              0x99 0xB9    
   \              0x2D 0x9D    
   \              0xE9 0x42    
   \              0xBA 0xF3    
   \              0xDA 0x01    
   \              0x41 0xC1    
   \              0x15         
   \   000001BD   0xEE 0x85          DC8 238, 133, 248, 219, 215, 79, 136, 22, 34, 246, 114, 230, 39, 177
   \              0xF8 0xDB    
   \              0xD7 0x4F    
   \              0x88 0x16    
   \              0x22 0xF6    
   \              0x72 0xE6    
   \              0x27 0xB1    
   \   000001CB   0xBC 0x8F          DC8 188, 143, 147, 228, 219, 254, 31, 153, 20, 130, 58, 128, 39, 253, 4
   \              0x93 0xE4    
   \              0xDB 0xFE    
   \              0x1F 0x99    
   \              0x14 0x82    
   \              0x3A 0x80    
   \              0x27 0xFD    
   \              0x04         
   \   000001DA   0x69 0x5E          DC8 105, 94, 241, 2, 64, 98, 25, 224, 115, 246, 25, 120, 103, 127, 103
   \              0xF1 0x02    
   \              0x40 0x62    
   \              0x19 0xE0    
   \              0x73 0xF6    
   \              0x19 0x78    
   \              0x67 0x7F    
   \              0x67         
   \   000001E9   0xFA 0xA3          DC8 250, 163, 220, 210, 209, 90, 105, 200, 41, 171, 82, 43, 155, 52, 40
   \              0xDC 0xD2    
   \              0xD1 0x5A    
   \              0x69 0xC8    
   \              0x29 0xAB    
   \              0x52 0x2B    
   \              0x9B 0x34    
   \              0x28         
   \   000001F8   0x92 0x08          DC8 146, 8, 44, 0, 249, 156, 223, 145, 249, 177, 184, 116, 19, 89, 105
   \              0x2C 0x00    
   \              0xF9 0x9C    
   \              0xDF 0x91    
   \              0xF9 0xB1    
   \              0xB8 0x74    
   \              0x13 0x59    
   \              0x69         
   \   00000207   0x3B 0xCD          DC8 59, 205, 36, 182, 58, 117, 55, 61, 95, 141, 100, 77, 224, 129, 181
   \              0x24 0xB6    
   \              0x3A 0x75    
   \              0x37 0x3D    
   \              0x5F 0x8D    
   \              0x64 0x4D    
   \              0xE0 0x81    
   \              0xB5         
   \   00000216   0x09 0x28          DC8 9, 40, 84, 5, 171, 181, 243, 145, 207, 2, 65, 0, 164, 195, 207, 62
   \              0x54 0x05    
   \              0xAB 0xB5    
   \              0xF3 0x91    
   \              0xCF 0x02    
   \              0x41 0x00    
   \              0xA4 0xC3    
   \              0xCF 0x3E    
   \   00000226   0x38 0x47          DC8 56, 71, 164, 117, 18, 73, 37, 202, 156, 65, 116, 28, 17, 20, 124
   \              0xA4 0x75    
   \              0x12 0x49    
   \              0x25 0xCA    
   \              0x9C 0x41    
   \              0x74 0x1C    
   \              0x11 0x14    
   \              0x7C         
   \   00000235   0x3B 0x72          DC8 59, 114, 83, 65, 199, 133, 6, 128, 115, 52, 203, 144, 42, 214, 174
   \              0x53 0x41    
   \              0xC7 0x85    
   \              0x06 0x80    
   \              0x73 0x34    
   \              0xCB 0x90    
   \              0x2A 0xD6    
   \              0xAE         
   \   00000244   0x10 0x52          DC8 16, 82, 15, 247, 103, 110, 189, 139, 148, 37, 100, 102, 84, 41, 255
   \              0x0F 0xF7    
   \              0x67 0x6E    
   \              0xBD 0x8B    
   \              0x94 0x25    
   \              0x64 0x66    
   \              0x54 0x29    
   \              0xFF         
   \   00000253   0xA4 0x77          DC8 164, 119, 189, 72, 216, 247, 128, 25, 126, 50, 226, 229, 205, 128
   \              0xBD 0x48    
   \              0xD8 0xF7    
   \              0x80 0x19    
   \              0x7E 0x32    
   \              0xE2 0xE5    
   \              0xCD 0x80    
   \   00000261   0xA3 0x00          DC8 163, 0, 0
   \              0x00         

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerServer[1001]
   \                     sslServerServer:
   \   00000000   0x2D 0x2D          DC8 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46         
   \   00000011   0x49 0x43          DC8 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 116
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x4D    
   \              0x49 0x49    
   \              0x43 0x74    
   \   00000021   0x6A 0x43          DC8 106, 67, 67, 65, 104, 56, 67, 65, 81, 115, 119, 68, 81, 89, 74, 75
   \              0x43 0x41    
   \              0x68 0x38    
   \              0x43 0x41    
   \              0x51 0x73    
   \              0x77 0x44    
   \              0x51 0x59    
   \              0x4A 0x4B    
   \   00000031   0x6F 0x5A          DC8 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 70, 66, 81, 65, 119, 103
   \              0x49 0x68    
   \              0x76 0x63    
   \              0x4E 0x41    
   \              0x51 0x45    
   \              0x46 0x42    
   \              0x51 0x41    
   \              0x77 0x67    
   \   00000041   0x61 0x51          DC8 97, 81, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65
   \              0x78 0x43    
   \              0x7A 0x41    
   \              0x4A 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x59    
   \              0x54 0x41    
   \   00000051   0x6B 0x6C          DC8 107, 108, 79, 77, 82, 69, 119, 68, 119, 89, 68, 10, 86, 81, 81, 73
   \              0x4F 0x4D    
   \              0x52 0x45    
   \              0x77 0x44    
   \              0x77 0x59    
   \              0x44 0x0A    
   \              0x56 0x51    
   \              0x51 0x49    
   \   00000061   0x45 0x77          DC8 69, 119, 104, 76, 89, 88, 74, 117, 89, 88, 82, 104, 97, 122, 69, 83
   \              0x68 0x4C    
   \              0x59 0x58    
   \              0x4A 0x75    
   \              0x59 0x58    
   \              0x52 0x68    
   \              0x61 0x7A    
   \              0x45 0x53    
   \   00000071   0x4D 0x42          DC8 77, 66, 65, 71, 65, 49, 85, 69, 66, 120, 77, 74, 81, 109, 70, 117
   \              0x41 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x42 0x78    
   \              0x4D 0x4A    
   \              0x51 0x6D    
   \              0x46 0x75    
   \   00000081   0x5A 0x32          DC8 90, 50, 70, 115, 98, 51, 74, 108, 77, 82, 69, 119, 68, 119, 89, 68
   \              0x46 0x73    
   \              0x62 0x33    
   \              0x4A 0x6C    
   \              0x4D 0x52    
   \              0x45 0x77    
   \              0x44 0x77    
   \              0x59 0x44    
   \   00000091   0x56 0x51          DC8 86, 81, 81, 75, 69, 119, 104, 72, 89, 87, 108, 117, 10, 85, 51, 66
   \              0x51 0x4B    
   \              0x45 0x77    
   \              0x68 0x48    
   \              0x59 0x57    
   \              0x6C 0x75    
   \              0x0A 0x55    
   \              0x33 0x42    
   \   000000A1   0x68 0x62          DC8 104, 98, 106, 69, 85, 77, 66, 73, 71, 65, 49, 85, 69, 67, 120, 77
   \              0x6A 0x45    
   \              0x55 0x4D    
   \              0x42 0x49    
   \              0x47 0x41    
   \              0x31 0x55    
   \              0x45 0x43    
   \              0x78 0x4D    
   \   000000B1   0x4C 0x52          DC8 76, 82, 87, 53, 110, 97, 87, 53, 108, 90, 88, 74, 112, 98, 109, 99
   \              0x57 0x35    
   \              0x6E 0x61    
   \              0x57 0x35    
   \              0x6C 0x5A    
   \              0x58 0x4A    
   \              0x70 0x62    
   \              0x6D 0x63    
   \   000000C1   0x78 0x47          DC8 120, 71, 68, 65, 87, 66, 103, 78, 86, 66, 65, 77, 84, 68, 122, 69
   \              0x44 0x41    
   \              0x57 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x4D    
   \              0x54 0x44    
   \              0x7A 0x45    
   \   000000D1   0x35 0x4D          DC8 53, 77, 105, 52, 120, 78, 106, 103, 117, 77, 83, 52, 53, 10, 79, 83
   \              0x69 0x34    
   \              0x78 0x4E    
   \              0x6A 0x67    
   \              0x75 0x4D    
   \              0x53 0x34    
   \              0x35 0x0A    
   \              0x4F 0x53    
   \   000000E1   0x42 0x4A          DC8 66, 74, 84, 106, 69, 114, 77, 67, 107, 71, 67, 83, 113, 71, 83, 73
   \              0x54 0x6A    
   \              0x45 0x72    
   \              0x4D 0x43    
   \              0x6B 0x47    
   \              0x43 0x53    
   \              0x71 0x47    
   \              0x53 0x49    
   \   000000F1   0x62 0x33          DC8 98, 51, 68, 81, 69, 74, 65, 82, 89, 99, 99, 50, 108, 105, 89, 88
   \              0x44 0x51    
   \              0x45 0x4A    
   \              0x41 0x52    
   \              0x59 0x63    
   \              0x63 0x32    
   \              0x6C 0x69    
   \              0x59 0x58    
   \   00000101   0x4E 0x70          DC8 78, 112, 99, 121, 53, 119, 100, 88, 74, 118, 97, 71, 108, 48, 81
   \              0x63 0x79    
   \              0x35 0x77    
   \              0x64 0x58    
   \              0x4A 0x76    
   \              0x61 0x47    
   \              0x6C 0x30    
   \              0x51         
   \   00000110   0x47 0x64          DC8 71, 100, 104, 97, 87, 53, 122, 99, 71, 70, 117, 76, 109, 78, 118
   \              0x68 0x61    
   \              0x57 0x35    
   \              0x7A 0x63    
   \              0x47 0x46    
   \              0x75 0x4C    
   \              0x6D 0x4E    
   \              0x76         
   \   0000011F   0x0A 0x62          DC8 10, 98, 84, 65, 101, 70, 119, 48, 120, 77, 84, 65, 52, 77, 68, 81
   \              0x54 0x41    
   \              0x65 0x46    
   \              0x77 0x30    
   \              0x78 0x4D    
   \              0x54 0x41    
   \              0x34 0x4D    
   \              0x44 0x51    
   \   0000012F   0x77 0x4E          DC8 119, 78, 106, 77, 53, 78, 68, 86, 97, 70, 119, 48, 120, 77, 106, 65
   \              0x6A 0x4D    
   \              0x35 0x4E    
   \              0x44 0x56    
   \              0x61 0x46    
   \              0x77 0x30    
   \              0x78 0x4D    
   \              0x6A 0x41    
   \   0000013F   0x34 0x4D          DC8 52, 77, 68, 77, 119, 78, 106, 77, 53, 78, 68, 86, 97, 77, 73, 71
   \              0x44 0x4D    
   \              0x77 0x4E    
   \              0x6A 0x4D    
   \              0x35 0x4E    
   \              0x44 0x56    
   \              0x61 0x4D    
   \              0x49 0x47    
   \   0000014F   0x68 0x4D          DC8 104, 77, 81, 115, 119, 67, 81, 89, 68, 86, 81, 81, 71, 69, 119, 74
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x47 0x45    
   \              0x77 0x4A    
   \   0000015F   0x4A 0x0A          DC8 74, 10, 84, 106, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 66, 77
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x43 0x42    
   \              0x4D         
   \   00000170   0x49 0x53          DC8 73, 83, 50, 70, 121, 98, 109, 70, 48, 89, 87, 115, 120, 69, 106, 65
   \              0x32 0x46    
   \              0x79 0x62    
   \              0x6D 0x46    
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \   00000180   0x51 0x42          DC8 81, 66, 103, 78, 86, 66, 65, 99, 84, 67, 85, 74, 117, 89, 87, 100
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x63    
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x75 0x59    
   \              0x57 0x64    
   \   00000190   0x68 0x62          DC8 104, 98, 71, 57, 121, 90, 84, 69, 82, 77, 65, 56, 71, 65, 49, 85
   \              0x47 0x39    
   \              0x79 0x5A    
   \              0x54 0x45    
   \              0x52 0x4D    
   \              0x41 0x38    
   \              0x47 0x41    
   \              0x31 0x55    
   \   000001A0   0x45 0x0A          DC8 69, 10, 67, 104, 77, 73, 82, 50, 70, 112, 98, 108, 78, 119, 89, 87
   \              0x43 0x68    
   \              0x4D 0x49    
   \              0x52 0x32    
   \              0x46 0x70    
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x59 0x57    
   \   000001B0   0x34 0x78          DC8 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 115, 84, 67, 48
   \              0x46 0x44    
   \              0x41 0x53    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x73 0x54    
   \              0x43 0x30    
   \   000001C0   0x56 0x75          DC8 86, 117, 90, 50, 108, 117, 90, 87, 86, 121, 97, 87, 53, 110, 77, 82
   \              0x5A 0x32    
   \              0x6C 0x75    
   \              0x5A 0x57    
   \              0x56 0x79    
   \              0x61 0x57    
   \              0x35 0x6E    
   \              0x4D 0x52    
   \   000001D0   0x55 0x77          DC8 85, 119, 69, 119, 89, 68, 86, 81, 81, 68, 69, 119, 119, 120, 79, 84
   \              0x45 0x77    
   \              0x59 0x44    
   \              0x56 0x51    
   \              0x51 0x44    
   \              0x45 0x77    
   \              0x77 0x78    
   \              0x4F 0x54    
   \   000001E0   0x49 0x75          DC8 73, 117, 10, 77, 84, 89, 52, 76, 106, 69, 117, 79, 84, 107, 120, 75
   \              0x0A 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \              0x6A 0x45    
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x78 0x4B    
   \   000001F0   0x7A 0x41          DC8 122, 65, 112, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66
   \              0x70 0x42    
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47 0x39    
   \              0x77 0x30    
   \              0x42         
   \   000001FF   0x43 0x51          DC8 67, 81, 69, 87, 72, 72, 78, 112, 89, 109, 70, 122, 97, 88, 77, 117
   \              0x45 0x57    
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \              0x61 0x58    
   \              0x4D 0x75    
   \   0000020F   0x63 0x48          DC8 99, 72, 86, 121, 98, 50, 104, 112, 100, 69, 66, 110, 89, 87, 108
   \              0x56 0x79    
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x64 0x45    
   \              0x42 0x6E    
   \              0x59 0x57    
   \              0x6C         
   \   0000021E   0x75 0x63          DC8 117, 99, 51, 66, 104, 10, 98, 105, 53, 106, 98, 50, 48, 119, 103
   \              0x33 0x42    
   \              0x68 0x0A    
   \              0x62 0x69    
   \              0x35 0x6A    
   \              0x62 0x32    
   \              0x30 0x77    
   \              0x67         
   \   0000022D   0x5A 0x38          DC8 90, 56, 119, 68, 81, 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65
   \              0x77 0x44    
   \              0x51 0x59    
   \              0x4A 0x4B    
   \              0x6F 0x5A    
   \              0x49 0x68    
   \              0x76 0x63    
   \              0x4E 0x41    
   \   0000023D   0x51 0x45          DC8 81, 69, 66, 66, 81, 65, 68, 103, 89, 48, 65, 77, 73, 71, 74, 65
   \              0x42 0x42    
   \              0x51 0x41    
   \              0x44 0x67    
   \              0x59 0x30    
   \              0x41 0x4D    
   \              0x49 0x47    
   \              0x4A 0x41    
   \   0000024D   0x6F 0x47          DC8 111, 71, 66, 65, 76, 118, 88, 43, 98, 54, 100, 84, 68, 115, 70, 78
   \              0x42 0x41    
   \              0x4C 0x76    
   \              0x58 0x2B    
   \              0x62 0x36    
   \              0x64 0x54    
   \              0x44 0x73    
   \              0x46 0x4E    
   \   0000025D   0x70 0x39          DC8 112, 57, 118, 104, 84, 77, 117, 10, 85, 70, 52, 113, 102, 82, 100
   \              0x76 0x68    
   \              0x54 0x4D    
   \              0x75 0x0A    
   \              0x55 0x46    
   \              0x34 0x71    
   \              0x66 0x52    
   \              0x64         
   \   0000026C   0x4F 0x6D          DC8 79, 109, 49, 52, 79, 117, 114, 88, 114, 89, 83, 54, 87, 84, 48, 71
   \              0x31 0x34    
   \              0x4F 0x75    
   \              0x72 0x58    
   \              0x72 0x59    
   \              0x53 0x36    
   \              0x57 0x54    
   \              0x30 0x47    
   \   0000027C   0x69 0x4A          DC8 105, 74, 72, 109, 111, 55, 99, 83, 66, 55, 105, 84, 43, 79, 80, 90
   \              0x48 0x6D    
   \              0x6F 0x37    
   \              0x63 0x53    
   \              0x42 0x37    
   \              0x69 0x54    
   \              0x2B 0x4F    
   \              0x50 0x5A    
   \   0000028C   0x37 0x54          DC8 55, 84, 117, 50, 111, 120, 50, 74, 118, 85, 111, 101, 77, 57, 104
   \              0x75 0x32    
   \              0x6F 0x78    
   \              0x32 0x4A    
   \              0x76 0x55    
   \              0x6F 0x65    
   \              0x4D 0x39    
   \              0x68         
   \   0000029B   0x57 0x6D          DC8 87, 109, 50, 108, 82, 47, 84, 51, 83, 122, 10, 102, 74, 115, 118
   \              0x32 0x6C    
   \              0x52 0x2F    
   \              0x54 0x33    
   \              0x53 0x7A    
   \              0x0A 0x66    
   \              0x4A 0x73    
   \              0x76         
   \   000002AA   0x70 0x47          DC8 112, 71, 107, 83, 48, 57, 65, 116, 65, 119, 74, 103, 86, 49, 50, 81
   \              0x6B 0x53    
   \              0x30 0x39    
   \              0x41 0x74    
   \              0x41 0x77    
   \              0x4A 0x67    
   \              0x56 0x31    
   \              0x32 0x51    
   \   000002BA   0x34 0x52          DC8 52, 82, 56, 78, 54, 103, 89, 116, 99, 57, 70, 118, 121, 102, 71, 88
   \              0x38 0x4E    
   \              0x36 0x67    
   \              0x59 0x74    
   \              0x63 0x39    
   \              0x46 0x76    
   \              0x79 0x66    
   \              0x47 0x58    
   \   000002CA   0x58 0x51          DC8 88, 81, 57, 50, 65, 84, 78, 72, 65, 54, 119, 53, 102, 110, 74, 107
   \              0x39 0x32    
   \              0x41 0x54    
   \              0x4E 0x48    
   \              0x41 0x36    
   \              0x77 0x35    
   \              0x66 0x6E    
   \              0x4A 0x6B    
   \   000002DA   0x4F 0x58          DC8 79, 88, 74, 89, 55, 53, 110, 81, 118, 106, 112, 56, 10, 97, 48, 85
   \              0x4A 0x59    
   \              0x37 0x35    
   \              0x6E 0x51    
   \              0x76 0x6A    
   \              0x70 0x38    
   \              0x0A 0x61    
   \              0x30 0x55    
   \   000002EA   0x65 0x78          DC8 101, 120, 122, 71, 102, 77, 83, 117, 80, 100, 84, 105, 99, 117, 114
   \              0x7A 0x47    
   \              0x66 0x4D    
   \              0x53 0x75    
   \              0x50 0x64    
   \              0x54 0x69    
   \              0x63 0x75    
   \              0x72         
   \   000002F9   0x51 0x6A          DC8 81, 106, 75, 73, 117, 68, 65, 103, 77, 66, 65, 65, 69, 119, 68, 81
   \              0x4B 0x49    
   \              0x75 0x44    
   \              0x41 0x67    
   \              0x4D 0x42    
   \              0x41 0x41    
   \              0x45 0x77    
   \              0x44 0x51    
   \   00000309   0x59 0x4A          DC8 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 70, 66, 81
   \              0x4B 0x6F    
   \              0x5A 0x49    
   \              0x68 0x76    
   \              0x63 0x4E    
   \              0x41 0x51    
   \              0x45 0x46    
   \              0x42 0x51    
   \   00000319   0x41 0x44          DC8 65, 68, 103, 89, 69, 65, 109, 122, 47, 89, 66, 77, 83, 57, 10, 72
   \              0x67 0x59    
   \              0x45 0x41    
   \              0x6D 0x7A    
   \              0x2F 0x59    
   \              0x42 0x4D    
   \              0x53 0x39    
   \              0x0A 0x48    
   \   00000329   0x6B 0x79          DC8 107, 121, 98, 121, 119, 116, 89, 43, 54, 67, 83, 73, 76, 118, 118
   \              0x62 0x79    
   \              0x77 0x74    
   \              0x59 0x2B    
   \              0x36 0x43    
   \              0x53 0x49    
   \              0x4C 0x76    
   \              0x76         
   \   00000338   0x49 0x45          DC8 73, 69, 49, 70, 73, 115, 82, 53, 72, 121, 76, 97, 55, 114, 107, 81
   \              0x31 0x46    
   \              0x49 0x73    
   \              0x52 0x35    
   \              0x48 0x79    
   \              0x4C 0x61    
   \              0x37 0x72    
   \              0x6B 0x51    
   \   00000348   0x41 0x68          DC8 65, 104, 75, 57, 69, 43, 56, 68, 87, 99, 54, 50, 90, 104, 50, 105
   \              0x4B 0x39    
   \              0x45 0x2B    
   \              0x38 0x44    
   \              0x57 0x63    
   \              0x36 0x32    
   \              0x5A 0x68    
   \              0x32 0x69    
   \   00000358   0x39 0x71          DC8 57, 113, 50, 115, 68, 67, 77, 51, 119, 51, 72, 75, 113, 81, 51, 70
   \              0x32 0x73    
   \              0x44 0x43    
   \              0x4D 0x33    
   \              0x77 0x33    
   \              0x48 0x4B    
   \              0x71 0x51    
   \              0x33 0x46    
   \   00000368   0x0A 0x52          DC8 10, 82, 84, 117, 117, 107, 49, 88, 99, 83, 107, 76, 47, 116, 115
   \              0x54 0x75    
   \              0x75 0x6B    
   \              0x31 0x58    
   \              0x63 0x53    
   \              0x6B 0x4C    
   \              0x2F 0x74    
   \              0x73         
   \   00000377   0x78 0x36          DC8 120, 54, 110, 54, 97, 99, 47, 47, 97, 84, 122, 98, 120, 102, 118
   \              0x6E 0x36    
   \              0x61 0x63    
   \              0x2F 0x2F    
   \              0x61 0x54    
   \              0x7A 0x62    
   \              0x78 0x66    
   \              0x76         
   \   00000386   0x72 0x49          DC8 114, 73, 79, 48, 68, 101, 122, 50, 108, 88, 52, 48, 97, 121, 102
   \              0x4F 0x30    
   \              0x44 0x65    
   \              0x7A 0x32    
   \              0x6C 0x58    
   \              0x34 0x30    
   \              0x61 0x79    
   \              0x66         
   \   00000395   0x70 0x65          DC8 112, 101, 119, 55, 55, 48, 78, 81, 97, 77, 116, 108, 68, 73, 67, 76
   \              0x77 0x37    
   \              0x37 0x30    
   \              0x4E 0x51    
   \              0x61 0x4D    
   \              0x74 0x6C    
   \              0x44 0x49    
   \              0x43 0x4C    
   \   000003A5   0x53 0x70          DC8 83, 112, 49, 100, 10, 74, 52, 85, 68, 51, 89, 53, 77, 116, 78, 87
   \              0x31 0x64    
   \              0x0A 0x4A    
   \              0x34 0x55    
   \              0x44 0x33    
   \              0x59 0x35    
   \              0x4D 0x74    
   \              0x4E 0x57    
   \   000003B5   0x4A 0x52          DC8 74, 82, 80, 55, 54, 99, 89, 89, 83, 99, 74, 57, 81, 102, 119, 74
   \              0x50 0x37    
   \              0x36 0x63    
   \              0x59 0x59    
   \              0x53 0x63    
   \              0x4A 0x39    
   \              0x51 0x66    
   \              0x77 0x4A    
   \   000003C5   0x4E 0x77          DC8 78, 119, 80, 81, 122, 89, 73, 48, 61, 10, 45, 45, 45, 45, 45, 69
   \              0x50 0x51    
   \              0x7A 0x59    
   \              0x49 0x30    
   \              0x3D 0x0A    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \   000003D5   0x4E 0x44          DC8 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D         
   \   000003E6   0x2D 0x2D          DC8 45, 45, 10, 0, 0, 0
   \              0x0A 0x00    
   \              0x00 0x00    
     56          #include "modules/http/gsn_httpc.h"
     57          #include "parser/s2w_command.h"
     58          #include "parser/s2w_parse.h"
     59          #ifdef S2W_COAP_SUPPORT
     60          #include "modules/coap/gsn_coap.h"
     61          #include "modules/coap/gsn_coap_impl.h"
     62          #endif
     63          
     64          //#define GSN_SSL_CLIENT_SUPPORT
     65          //#define GSN_SSL_SERVER_SUPPORT
     66          #ifdef S2W_SSL_SERVER_SUPPORT
     67          #include "modules/ssl/gsn_ssl.h"
     68          #endif
     69          #if defined(S2W_DTLS_CLIENT_SUPPORT)
     70          #include "modules/dtls/gsn_dtls.h"
     71          #endif
     72          #ifdef S2W_IPv6_SUPPORT
     73          #include "Nx_icmp.h"
     74          #endif
     75          /**
     76           ******************************************************************************
     77           * @file s2w_net_gainspan.c
     78           * @brief S2W Application geps interface routines.
     79           *      This file contains the s2w application specific implimentation which
     80           *      Interface the s2w command processing network stack.
     81          ******************************************************************************/
     82          
     83          
     84          /*****************************************************************************
     85            *  Public Variables
     86            *****************************************************************************/
     87          
     88          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
     89          //extern UINT32 nwConfigSuccess ;
     90          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
     91          extern S2W_PROFILE_T s2wCurrent;
     92          extern UINT8 s2wAutoConnState ;
     93          extern S2W_PROFILE_PARAMS_T profile_params;
     94          /*****************************************************************************
     95            *  Private Variables
     96            *****************************************************************************/
     97          

   \                                 In section .bss, align 4
     98          GSN_OSAL_SEM_T s2wSocketCloseSem;
   \                     s2wSocketCloseSem:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
     99          GSN_OSAL_SEM_T s2wUdpSocketCloseSem;
   \                     s2wUdpSocketCloseSem:
   \   00000000                      DS8 28
    100          
    101          #define S2W_TLS_DEFAULT_FRAGMENT_SIZE 1398
    102          #define S2W_TLS_HEADER_LENGTH 5
    103          #define S2W_TLS_CONN_ALERT_FATAL 2
    104          #define S2W_TLS_CONN_STATUS_FAIL 0
    105          #define S2W_TLS_CONN_STATUS_SUCCESS 1
    106          
    107          /* Socket descriptor value to indicate unused S2W_CID_T
    108           */
    109          
    110          /* Definitions for conType of S2W_CID_T
    111           */
    112          #define UDP 1
    113          #define TCP 2
    114          
    115          /* Timer for TCP connection timeout
    116           */
    117          //PRIVATE S2W_TIMER_T s2wTcpConnectTimer;
    118          
    119          /* Timer for UDP connection close
    120           */
    121          //PRIVATE S2W_TIMER_T s2wUdpCloseTimer;
    122          
    123          /* Event flags for TCP connection timeout
    124           */
    125          //PRIVATE GH_EFLAGS s2wTcpConnectEflags;
    126          
    127          /* Possible values for s2wTcpConnectEflags
    128           */
    129          #define CONNECT_SUCCESS  0x01
    130          #define CONNECT_FAIL     0x02
    131          #define CONNECT_TIMEOUT  0x04
    132          
    133          
    134          __no_init S2W_CID_T s2wCidList[MAX_CID_RANGE];
    135          
    136          /**
    137           * @brief Buffer to hold the recieved data.
    138           */
    139          __no_init UINT8 s2wRxBuf[S2W_RX_BUF_SIZE];
    140          
    141          /* Events to register the socket callback for
    142           */
    143          #define S2W_RXCALLBACK_FLAGS (NX_BSD_CB_TCP_RECIEVE | NX_BSD_CB_UDP_RECIEVE | NX_BSD_CB_TCP_LISTEN | NX_BSD_CB_TCP_DISCONNECT |	NX_BSD_CB_SOCKET_ERROR)
    144          //#define S2W_RXCALLBACK_FLAGS NX_BSD_CB_TCP_LISTEN
    145          /* stack for net rx task
    146           */
    147          __no_init PUBLIC UINT8 s2wNetRecvTaskStack[APP_CFG_NET_RX_STACK_SIZE];
    148          
    149          extern GSN_OSAL_QUEUE_T appMainThreadMsgQueue;
    150          #ifdef S2W_PING_TRACE
    151          extern UINT8 s2wPingStarted;
    152          #endif
    153          /* Queue for the receive task
    154           */
    155          PUBLIC GSN_OSAL_QUEUE_T s2wNetQueue;
   \                     s2wNetQueue:
   \   0000001C                      DS8 56

   \                                 In section .noinit, align 8
   \                     s2wCidList:
   \   00000000                      DS8 4736
   \                     s2wNetRecvTaskStack:
   \   00001280                      DS8 4096
    156          __no_init UINT32 s2wNetQueueBuffer[ ((APP_CFG_NET_RX_MAX_MSG_IN_MBOX) * sizeof(S2W_MSG_T)) / sizeof(UINT32)];
   \                     s2wNetQueueBuffer:
   \   00002280                      DS8 512

   \                                 In section .noinit, align 4
   \                     s2wRxBuf:
   \   00000000                      DS8 1500
    157          
    158          extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[];
    159          
    160          #define GSN_MAX_NUM_CERT        8
    161          #define S2W_CERT_NAME_CA        "TLS_CA"
    162          #define S2W_CERT_NAME_CLIENT    "TLS_CLIENT"
    163          #define S2W_CERT_NAME_KEY       "TLS_KEY"
    164          
    165          #define S2W_SSL_CERT_NAME_CA        "SSL_CA"
    166          #define S2W_SSL_CERT_NAME_SERVER    "SSL_SERVER"
    167          #define S2W_SSL_CERT_NAME_KEY       "SSL_KEY"
    168          
    169          /*****************************************************************************
    170            *  Private Functions
    171            *****************************************************************************/
    172          
    173          VOID
    174          AppS2wHal_NetRecvTask(UINT32 u32Address);
    175          
    176          
    177          UINT8
    178          AppS2wHal_CidGet(VOID);
    179          
    180          UINT8
    181          AppS2wHal_CidFind(INT32 sd);
    182          
    183          PRIVATE VOID
    184          AppS2wHal_RxCallBack(INT32 sock, NX_BSD_CB_EVENT_TYPE_T flags,UINT32 port);
    185          
    186          
    187          PRIVATE UINT8
    188          AppS2wHal_NetImmediateClose(UINT8 cid);
    189          
    190          PUBLIC UINT8
    191          AppS2wHal_CidGet(VOID);
    192          
    193          PRIVATE GSN_STATUS
    194          AppS2w_SslLocalClose(UINT8 cid);
    195          
    196          PRIVATE VOID
    197          AppS2wHal_HttpCloseTimeout(VOID *unused);
    198          
    199          #ifdef S2W_HTTPC_SUPPORT
    200          PRIVATE UINT8
    201          AppS2wHal_HttpLocalClose(UINT32 cid);
    202          #endif
    203          PUBLIC GSN_STATUS 
    204          AppS2w_SslClose(UINT8 cid);
    205          
    206          #ifdef S2W_COAP_SUPPORT
    207          PUBLIC GSN_COAP_CONTEXT_T*
    208          AppS2wHal_CoapHandleGet(UINT8 cid);
    209          #endif
    210          extern GSN_HTTPC_CONF_INFO_T httpConfInfo;
    211          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypes[];
    212          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[];
    213          extern int tlsv1_client_established(struct tlsv1_client *conn);
    214          
    215          
    216          
    217          /*****************************************************************************
    218            *  Public Functions
    219            *****************************************************************************/
    220          /**
    221           ******************************************************************
    222           * @ingroup S2w-Application
    223           * @brief Get the pointer to s2wCidList entry for a given cid.
    224           *
    225           ******************************************************************/
    226          

   \                                 In section .text, align 2, keep-with-next
    227          PUBLIC S2W_CID_T*
    228          AppS2wHal_CidListElementGet(UINT8 cid)
    229          {
    230          	return (&s2wCidList[cid]);
   \                     AppS2wHal_CidListElementGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable62
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x4770             BX       LR               ;; return
    231          }
    232          /**
    233           ******************************************************************
    234           * @ingroup S2w-Application
    235           * @brief S2w udp client open function.
    236           *    This function opens a new udp client socket and store the socket info
    237           *    into the corresponding Cid list and registers any receive events on this
    238           *    socket with network stack.
    239           * @param peerData - IN the address of the data structure contain the udp server
    240           *                      info.
    241           *.@param cidNo    - IN the address to which the cid number to be stored.
    242           *.@param srcPort  - IN the source port to which the the udp client socket
    243           *                     to be bind.
    244           * @retval S2W_SUCCESS     - operation successfull.
    245           * @retval S2W_SOCKFAILURE - operation failed
    246           * @retval S2W_ENCID       - operation failed- no valid cid.
    247           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    248          PUBLIC UINT8
    249          AppS2wHal_NetUdpClient(S2W_NETDATA_T *peerData, UINT8 *cidNo, UINT16 srcPort)
    250          {
   \                     AppS2wHal_NetUdpClient:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x4616             MOV      R6,R2
    251              UINT8 cid;
    252              INT32 sd,addressLength, ret;
    253          
    254              struct sockaddr_in srcAddr;
    255              struct sockaddr localAddress;
    256              
    257              /* Get free connection identifier list entry. */
    258              cid = AppS2wHal_CidGet();
   \   0000000C   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000010   0x4607             MOV      R7,R0
    259              if (cid == INVALID_CID)
   \   00000012   0x2FFF             CMP      R7,#+255
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x2004             MOVEQ    R0,#+4
    260              {
    261                  return S2W_ENCID;
   \   00000018   0xD05D             BEQ.N    ??AppS2wHal_NetUdpClient_0
    262              }
    263              /* check the node has a valid ip */
    264               //if(nwConfigSuccess != TRUE)
    265               {
    266                  // return S2W_SOCKFAILURE;
    267               }
    268          
    269              if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
   \   0000001A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   0000001E   0x4680             MOV      R8,R0
   \   00000020   0xF118 0x0F01      CMN      R8,#+1
   \   00000024   0xD050             BEQ.N    ??AppS2wHal_NetUdpClient_1
    270              {
    271                  return S2W_SOCKFAILURE;
    272              }
    273              /* if a valid src port passed bind with that else leave it */
    274              if(srcPort > 0)
   \   00000026   0xB1EE             CBZ.N    R6,??AppS2wHal_NetUdpClient_2
    275              {
    276                  srcAddr.sin_family = AF_INET;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    277                  srcAddr.sin_port = htons(srcPort);
    278                  srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    279                  if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
   \   0000002E   0x2210             MOVS     R2,#+16
   \   00000030   0x0230             LSLS     R0,R6,#+8
   \   00000032   0xEA40 0x2016      ORR      R0,R0,R6, LSR #+8
   \   00000036   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   \   0000003A   0xA904             ADD      R1,SP,#+16
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x.... 0x....      BL       ?Subroutine10
    280                  {
    281                      soc_close(sd);
    282                      return S2W_SOCKFAILURE;
    283                  }
    284              }
   \                     ??CrossCallReturnLabel_20:
   \   00000044   0xF110 0x0F01      CMN      R0,#+1
   \   00000048   0xD01A             BEQ.N    ??AppS2wHal_NetUdpClient_3
    285              else
    286              {
    287                srcAddr.sin_family = AF_INET;
    288                srcAddr.sin_port = NX_ANY_PORT;
    289                srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    290                if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
    291                {
    292                    soc_close(sd);
    293                    return S2W_SOCKFAILURE;
    294                }
    295                
    296              }
    297              
    298             
    299                
    300               
    301              /* Update the connection identifier list with the server information. */
    302              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetUdpClient_4:
   \   0000004A   0x.... 0x....      BL       ?Subroutine13
    303              s2wCidList[cid].conType = UDP;
   \                     ??CrossCallReturnLabel_29:
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0xF8C5 0x801C      STR      R8,[R5, #+28]
   \   00000054   0x5442             STRB     R2,[R0, R1]
    304              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7068             STRB     R0,[R5, #+1]
    305              s2wCidList[cid].remotePort = (peerData->port);
   \   0000005A   0x8860             LDRH     R0,[R4, #+2]
   \   0000005C   0x80A8             STRH     R0,[R5, #+4]
    306              if(srcPort > 0)
   \   0000005E   0xB196             CBZ.N    R6,??AppS2wHal_NetUdpClient_5
    307              {
    308                  s2wCidList[cid].localPort = srcPort;
   \   00000060   0x806E             STRH     R6,[R5, #+2]
   \   00000062   0xE01F             B.N      ??AppS2wHal_NetUdpClient_6
    309              }
   \                     ??AppS2wHal_NetUdpClient_2:
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   0000006A   0x2210             MOVS     R2,#+16
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   \   00000072   0x9005             STR      R0,[SP, #+20]
   \   00000074   0xA904             ADD      R1,SP,#+16
   \   00000076   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_19:
   \   0000007A   0xF110 0x0F01      CMN      R0,#+1
   \   0000007E   0xD1E4             BNE.N    ??AppS2wHal_NetUdpClient_4
   \                     ??AppS2wHal_NetUdpClient_3:
   \   00000080   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_24:
   \   00000084   0xE020             B.N      ??AppS2wHal_NetUdpClient_1
    310              else
    311              {
    312                 addressLength = sizeof(localAddress);
   \                     ??AppS2wHal_NetUdpClient_5:
   \   00000086   0x2010             MOVS     R0,#+16
   \   00000088   0x9001             STR      R0,[SP, #+4]
    313                 ret = getsockname(sd,&localAddress,&addressLength);
    314                 if(ret < 0)
   \   0000008A   0xAA01             ADD      R2,SP,#+4
   \   0000008C   0xA908             ADD      R1,SP,#+32
   \   0000008E   0x4640             MOV      R0,R8
   \   00000090   0x.... 0x....      BL       getsockname
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD414             BMI.N    ??AppS2wHal_NetUdpClient_7
    315                 {
    316                     AppS2wHal_NetClose(cid);
    317                     return S2W_SOCKFAILURE;
    318                 }
    319                 s2wCidList[cid].localPort = htons(((struct sockaddr_in*)&localAddress)->sin_port);
   \   00000098   0xF8BD 0x0022      LDRH     R0,[SP, #+34]
   \   0000009C   0x0201             LSLS     R1,R0,#+8
   \   0000009E   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   000000A2   0x8068             STRH     R0,[R5, #+2]
    320              }
    321              
    322                memcpy(s2wCidList[cid].remoteIp,peerData->ipAddr,4);
   \                     ??AppS2wHal_NetUdpClient_6:
   \   000000A4   0x2204             MOVS     R2,#+4
   \   000000A6   0x1D21             ADDS     R1,R4,#+4
   \   000000A8   0x1DA8             ADDS     R0,R5,#+6
   \   000000AA   0x.... 0x....      BL       memcpy
    323              
    324               
    325          
    326              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    327              // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    328              
    329              struct timeval TimeOut;
    330                  TimeOut.tv_sec =  0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9002             STR      R0,[SP, #+8]
    331                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    332                 // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    333                  ret = setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    334                  if(ret < 0)
   \   000000B2   0xAB02             ADD      R3,SP,#+8
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x186a0
   \   000000B8   0x9003             STR      R0,[SP, #+12]
   \   000000BA   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_41:
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD504             BPL.N    ??AppS2wHal_NetUdpClient_8
    335                  {
    336                      AppS2wHal_NetClose(cid);
   \                     ??AppS2wHal_NetUdpClient_7:
   \   000000C2   0x4638             MOV      R0,R7
   \   000000C4   0x.... 0x....      BL       AppS2wHal_NetClose
    337                      return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetUdpClient_1:
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0xE004             B.N      ??AppS2wHal_NetUdpClient_0
    338                  }
    339               
    340              /* Register the socket callback function to receive the events. */
    341              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetUdpClient_8:
   \   000000CC   0x.... 0x....      BL       ?Subroutine19
    342              *cidNo = cid;
   \                     ??CrossCallReturnLabel_43:
   \   000000D0   0xF889 0x7000      STRB     R7,[R9, #+0]
    343              return S2W_SUCCESS;
   \   000000D4   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetUdpClient_0:
   \   000000D6   0xB00D             ADD      SP,SP,#+52
   \   000000D8   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    344          
    345          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x4378             MULS     R0,R0,R7
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable62
   \   0000000A   0x1845             ADDS     R5,R0,R1
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      soc_close

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      bind

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x2102             MOVS     R1,#+2
   \                     ??Subroutine5_0:
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      B.W      socket

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0x69E8             LDR      R0,[R5, #+28]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable102
   \   00000006   0x223D             MOVS     R2,#+61
   \   00000008   0x.... 0x....      B.W      nx_bsd_callback_register

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x2214             MOVS     R2,#+20
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x69E8             LDR      R0,[R5, #+28]
   \   0000000A   0x.... 0x....      B.W      setsockopt
    346          
    347          #ifdef S2W_IPv6_SUPPORT
    348          
    349          PUBLIC UINT8
    350          AppS2wHal_NetUdpClientv6(S2W_NETDATA_T *remoteServerData, UINT8 *cidNo, UINT16 srcPort)
    351          {
    352              UINT8 cid;
    353              INT status;
    354              INT32 sd;
    355              GSN_NWIF_IP_CONFIG_T nwParams;
    356              struct sockaddr_in6 CliAddr;
    357          
    358                if ((sd = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    359                   {
    360                    return S2W_SOCKFAILURE;
    361                   }
    362          
    363               memset(&CliAddr,0,sizeof(struct sockaddr_in6));
    364               
    365              if(srcPort > 0)
    366              {
    367                
    368                  CliAddr.sin6_family = AF_INET6;
    369                  CliAddr.sin6_port = srcPort;
    370                 
    371                  GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    372                  
    373                  if(nwParams.ipv6.globalAddr)
    374                    COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(CliAddr.sin6_addr._S6_un._S6_u32));
    375                  else
    376                    COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(CliAddr.sin6_addr._S6_un._S6_u32));
    377                   GSN_IPv6_CHANGE_ENDIAN((UINT32 *)CliAddr.sin6_addr._S6_un._S6_u32);
    378                  status = bind (sd, (struct sockaddr *) &CliAddr, sizeof(CliAddr));
    379                    
    380                  if(status < 0)
    381                  {
    382                    soc_close(sd);
    383                    return S2W_SOCKFAILURE;
    384                  }
    385                  
    386              }
    387              
    388              /* Get free connection identifier list entry. */
    389              
    390              cid = AppS2wHal_CidGet();
    391              if (cid == INVALID_CID)
    392              {
    393                  return S2W_ENCID;
    394              }
    395            
    396               /* Update the connection identifier list with the server information. */
    397              
    398              s2wCidList[cid].sd = sd;
    399              s2wCidList[cid].conType = UDP;
    400              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
    401              s2wCidList[cid].remotePort = remoteServerData->port;
    402              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    403              if(srcPort > 0)
    404              {
    405                  s2wCidList[cid].localPort = remoteServerData->port;
    406              }
    407              
    408              memcpy(s2wCidList[cid].remoteIpv6,remoteServerData->ipv6Addr,16);
    409              
    410               
    411              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    412               
    413              // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    414              struct timeval TimeOut;
    415                  TimeOut.tv_sec =  0;
    416                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    417                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    418                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    419              
    420              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    421              
    422              *cidNo = cid;
    423              
    424              return S2W_SUCCESS;
    425          }
    426          
    427          PUBLIC UINT8
    428          AppS2wHal_NetUdpServerv6(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    429          {
    430            UINT8 cid;
    431            INT32 sd;
    432            struct sockaddr_in6 servAddr;
    433            GSN_NWIF_IP_CONFIG_T nwParams;
    434            
    435            cid = AppS2wHal_CidGet();
    436              if (cid == INVALID_CID)
    437              {
    438                  return S2W_ENCID;
    439              }
    440              
    441              if ((sd = socket( AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    442              {
    443                  return S2W_SOCKFAILURE;
    444              }
    445              memset(&servAddr,0,sizeof(struct sockaddr_in6));    
    446              servAddr.sin6_family = AF_INET6;
    447              servAddr.sin6_port = htons(serverData->port);
    448              
    449              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    450                  
    451              if(nwParams.ipv6.globalAddr)
    452                COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    453              else
    454                COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    455              GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32);
    456               if (bind(sd,  (struct sockaddr *)&servAddr, sizeof(servAddr)) == -1)
    457              {
    458                  soc_close(sd);
    459                  return S2W_SOCKFAILURE;
    460              }
    461              
    462              s2wCidList[cid].sd = sd;
    463              s2wCidList[cid].conType = UDP;
    464              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
    465              s2wCidList[cid].localPort = serverData->port;
    466              s2wCidList[cid].remotePort = 0;
    467              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    468              memset(s2wCidList[cid].remoteIpv6,0,16);
    469          
    470               
    471               //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    472               
    473               // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    474              
    475              struct timeval TimeOut;
    476                  TimeOut.tv_sec =  0;
    477                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    478                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    479                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    480              
    481              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    482          
    483              *cidNo = cid;
    484              
    485              return S2W_SUCCESS;
    486             
    487          }
    488          
    489          
    490          PUBLIC UINT8
    491          AppS2wHal_NetTcpClientv6(S2W_NETDATA_T *remoteServerData, UINT8 *cidNo)
    492          {
    493            
    494              UINT32 cid;
    495              INT32 sd;
    496              INT32 status;
    497              struct sockaddr_in6 destAddr;
    498              
    499              cid = AppS2wHal_CidGet();
    500              if (cid == INVALID_CID)
    501              {
    502                  return S2W_ENCID;
    503              }
    504              
    505              if ((sd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP)) == -1)
    506              {
    507                  return S2W_SOCKFAILURE;
    508              }
    509              
    510              memset(&destAddr, 0, sizeof(destAddr));
    511              
    512              destAddr.sin6_family = AF_INET6;
    513              COPY_IPV6_ADDRESS((ULONG*)remoteServerData->ipv6Addr, (ULONG *)&(destAddr.sin6_addr._S6_un._S6_u32));
    514              destAddr.sin6_port = htons(remoteServerData->port);
    515               GSN_IPv6_CHANGE_ENDIAN((UINT32 *)destAddr.sin6_addr._S6_un._S6_u32);
    516              
    517              s2wCidList[cid].sd = sd;
    518              s2wCidList[cid].conType = TCP;
    519              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
    520              s2wCidList[cid].remotePort = remoteServerData->port;
    521              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    522              
    523              memcpy(s2wCidList[cid].remoteIpv6,remoteServerData->ipv6Addr,16);
    524              
    525               
    526              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    527               
    528                
    529                
    530              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    531              
    532              status = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
    533              
    534              if (status < 0 )
    535              {
    536                  AppS2wHal_NetClose(cid);
    537                  return S2W_SOCKFAILURE;
    538              }
    539          
    540              *cidNo = cid;
    541          
    542              s2wCidList[cid].sslflag = FALSE;
    543              
    544              //fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    545              struct timeval TimeOut;
    546                  TimeOut.tv_sec =  0;
    547                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    548                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    549                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    550          
    551              return S2W_SUCCESS;
    552            
    553          }
    554          
    555          
    556          PUBLIC UINT8
    557          AppS2wHal_NetTcpServerv6(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    558          {
    559            INT32 sd;
    560            UINT8 cid;
    561            struct sockaddr_in6 servAddr;
    562            GSN_NWIF_IP_CONFIG_T nwParams;
    563          
    564            cid = AppS2wHal_CidGet();
    565            if (cid == INVALID_CID)
    566            {
    567                return S2W_ENCID;
    568            }
    569            
    570            if ((sd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP)) == -1)
    571              {
    572                  return S2W_SOCKFAILURE;
    573              }
    574            
    575            memset(&servAddr, 0, sizeof(servAddr));
    576            
    577            servAddr.sin6_family = AF_INET6;
    578            servAddr.sin6_port = htons(serverData->port);
    579            
    580            GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    581                  
    582            if(nwParams.ipv6.globalAddr)
    583               COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    584            else
    585               COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    586               GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32);
    587              if (bind(sd, (struct sockaddr *) &servAddr, sizeof(servAddr)) ==  -1)
    588              {
    589                  soc_close(sd);
    590                  return S2W_SOCKFAILURE;
    591              }
    592              
    593                if (listen(sd, 5) < 0)
    594              {
    595                  soc_close(sd);
    596                  return S2W_SOCKFAILURE;
    597              }
    598          
    599              
    600              s2wCidList[cid].sd = sd;
    601              s2wCidList[cid].conType = TCP;
    602              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
    603              s2wCidList[cid].localPort = serverData->port;
    604              s2wCidList[cid].remotePort = 0;
    605              memset(s2wCidList[cid].remoteIpv6,0,16);
    606              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    607              
    608               
    609              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    610              
    611              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    612          
    613              *cidNo = cid;
    614          
    615              return S2W_SUCCESS;
    616           
    617          }
    618          
    619          
    620          
    621          #endif
    622          

   \                                 In section .text, align 2, keep-with-next
    623          PUBLIC UINT8 AppS2w_ConnModeGet(UINT8 cid)
    624          {
    625              return (s2wCidList[cid].conMode);
   \                     AppS2w_ConnModeGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable62
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x4770             BX       LR               ;; return
    626          }
    627          
    628          
    629          /**
    630           ******************************************************************
    631           * @ingroup S2w-Application
    632           * @brief S2w tcp client open function.
    633           *    This function opens a new tcp client socket and store the socket info
    634           *    into the corresponding Cid list and registers any receive events on this
    635           *    socket with network stack.
    636           *    This fuction tries to connect to the remote server.
    637           * @param peerData - IN the address of the data structure contain the tcp server
    638           *                      info.
    639           *.@param cidNo    - IN the address to which the cid number to be stored.
    640           * @retval S2W_SUCCESS     - operation successfull.
    641           * @retval S2W_SOCKFAILURE - operation failed
    642           * @retval S2W_ENCID       - operation failed- no valid cid
    643           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    644          PUBLIC UINT8
    645          AppS2wHal_NetTcpClient(S2W_NETDATA_T *peerData, UINT8 *cidNo)
    646          {
   \                     AppS2wHal_NetTcpClient:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine7
    647              struct sockaddr_in destAddr;
    648              UINT32 cid;
    649              INT32 sd;
    650              INT32 ret;
    651              ULONG connect_timeout =  (s2wCurrent.registers[S2W_REG_TCP_CONNECT_TIMEOUT]/100);
   \                     ??CrossCallReturnLabel_11:
   \   00000008   0x468A             MOV      R10,R1
   \   0000000A   0xB08A             SUB      SP,SP,#+40
   \   0000000C   0x2164             MOVS     R1,#+100
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x9001             STR      R0,[SP, #+4]
    652              ULONG rexTimeOut=75,retransRate=1;
   \   00000014   0x204B             MOVS     R0,#+75
   \   00000016   0x9005             STR      R0,[SP, #+20]
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x9004             STR      R0,[SP, #+16]
    653          
    654              /* get  a valid cid */
    655              cid = AppS2wHal_CidGet();
   \   0000001C   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000020   0x4607             MOV      R7,R0
    656              S2w_Printf("\r\n CID value in NetTcpClient func 1 : %d",cid);
   \   00000022   0x4639             MOV      R1,R7
   \   00000024   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n CID value in NetTc...">`
   \   00000028   0x.... 0x....      BL       S2w_Printf
    657              if (cid == INVALID_CID)
   \   0000002C   0x2FFF             CMP      R7,#+255
   \   0000002E   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_0
    658              {
    659          	    S2w_Printf("\r\n error 1");
   \   00000030   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 1">`
   \   00000034   0x.... 0x....      BL       S2w_Printf
    660                  return S2W_ENCID;
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0xE07A             B.N      ??AppS2wHal_NetTcpClient_1
    661              }
    662          
    663              /* open a tcp client socket */
    664              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \                     ??AppS2wHal_NetTcpClient_0:
   \   0000003C   0x2200             MOVS     R2,#+0
   \   0000003E   0x2101             MOVS     R1,#+1
   \   00000040   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_6:
   \   00000044   0x4680             MOV      R8,R0
   \   00000046   0xF118 0x0F01      CMN      R8,#+1
   \   0000004A   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_2
    665              {
    666          	    S2w_Printf("\r\n error 2");
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 2">`
   \   00000050   0x.... 0x....      BL       S2w_Printf
    667                  return S2W_SOCKFAILURE;
   \   00000054   0x2003             MOVS     R0,#+3
   \   00000056   0xE06C             B.N      ??AppS2wHal_NetTcpClient_1
    668              }
    669          
    670              /** Make the socket non blocking. */
    671              //tfBlockingState(sd, TM_BLOCKING_OFF);
    672          
    673              ret = setsockopt(sd,IP_PROTOTCP,TCP_REX_TIMER_RATE,(void*)&retransRate,4);
    674              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_2:
   \   00000058   0x2004             MOVS     R0,#+4
   \   0000005A   0x9000             STR      R0,[SP, #+0]
   \   0000005C   0xAB04             ADD      R3,SP,#+16
   \   0000005E   0x222B             MOVS     R2,#+43
   \   00000060   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_26:
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_3
    675              {
    676          	    S2w_Printf("\r\n error 3");
   \   00000068   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 3">`
   \   0000006C   0xE012             B.N      ??AppS2wHal_NetTcpClient_4
    677              	soc_close(sd);
    678                  return S2W_FAILURE;
    679              }
    680              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    681              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_3:
   \   0000006E   0x2004             MOVS     R0,#+4
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0xAB05             ADD      R3,SP,#+20
   \   00000074   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_28:
   \   00000078   0x2800             CMP      R0,#+0
   \   0000007A   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_5
    682              {
    683          	    S2w_Printf("\r\n error 4");
   \   0000007C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 4">`
   \   00000080   0xE008             B.N      ??AppS2wHal_NetTcpClient_4
    684              	soc_close(sd);
    685                  return S2W_FAILURE;
    686              }
    687          
    688              ret = setsockopt(sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
    689              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_5:
   \   00000082   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   00000086   0x2240             MOVS     R2,#+64
   \   00000088   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_25:
   \   0000008C   0x2800             CMP      R0,#+0
   \   0000008E   0xD506             BPL.N    ??AppS2wHal_NetTcpClient_6
    690              {
    691          	    S2w_Printf("\r\n error 5");
   \   00000090   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 5">`
   \                     ??AppS2wHal_NetTcpClient_4:
   \   00000094   0x.... 0x....      BL       S2w_Printf
    692              	soc_close(sd);
   \   00000098   0x.... 0x....      BL       ?Subroutine11
    693                  return S2W_FAILURE;
   \                     ??CrossCallReturnLabel_23:
   \   0000009C   0xE027             B.N      ??AppS2wHal_NetTcpClient_7
    694              }
    695          
    696              /** Connect the socket to the server. */
    697              destAddr.sin_family = AF_INET;
   \                     ??AppS2wHal_NetTcpClient_6:
   \   0000009E   0x.... 0x....      BL       ?Subroutine3
    698              destAddr.sin_port = htons(peerData->port);
    699              memcpy(&(destAddr.sin_addr.s_addr),&peerData->ipAddr,sizeof(destAddr.sin_addr.s_addr));
    700          
    701          
    702              /* register the callback for any socket events */
    703              nx_bsd_callback_register(sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_1:
   \   000000A2   0x223D             MOVS     R2,#+61
   \   000000A4   0x.... 0x....      LDR.W    R1,??DataTable62_2
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       nx_bsd_callback_register
    704          
    705              ret = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
   \   000000AE   0x2210             MOVS     R2,#+16
   \   000000B0   0xA906             ADD      R1,SP,#+24
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x.... 0x....      BL       connect
   \   000000B8   0x4681             MOV      R9,R0
    706               /*
    707               * Update the connection identifier list with connection information
    708               * except the type.
    709               */
    710              s2wCidList[cid].sd = sd;
   \   000000BA   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_30:
   \   000000BE   0x1D2E             ADDS     R6,R5,#+4
    711              s2wCidList[cid].conType = TCP;
   \   000000C0   0x2202             MOVS     R2,#+2
   \   000000C2   0xF8C6 0x8018      STR      R8,[R6, #+24]
   \   000000C6   0x5442             STRB     R2,[R0, R1]
    712              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
   \   000000C8   0x2007             MOVS     R0,#+7
   \   000000CA   0x7068             STRB     R0,[R5, #+1]
    713              s2wCidList[cid].remotePort = peerData->port;
    714              memcpy(s2wCidList[cid].remoteIp,(UINT8*)peerData->ipAddr,4);
   \   000000CC   0x2204             MOVS     R2,#+4
   \   000000CE   0x8860             LDRH     R0,[R4, #+2]
   \   000000D0   0x80A8             STRH     R0,[R5, #+4]
   \   000000D2   0x1D21             ADDS     R1,R4,#+4
   \   000000D4   0x1DA8             ADDS     R0,R5,#+6
   \   000000D6   0x.... 0x....      BL       memcpy
    715          
    716              if (ret < 0 )
   \   000000DA   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000DE   0xD508             BPL.N    ??AppS2wHal_NetTcpClient_8
    717              {
    718                  //S2w_Debug("connect failed: %d\r\n", tfGetSocketError(sd));
    719                  S2w_Printf("\r\n error 6");
   \   000000E0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 6">`
   \   000000E4   0x.... 0x....      BL       S2w_Printf
    720                  AppS2wHal_NetClose(cid);
   \   000000E8   0x4638             MOV      R0,R7
   \   000000EA   0x.... 0x....      BL       AppS2wHal_NetClose
    721                  return S2W_FAILURE;
   \                     ??AppS2wHal_NetTcpClient_7:
   \   000000EE   0x2001             MOVS     R0,#+1
   \   000000F0   0xE01F             B.N      ??AppS2wHal_NetTcpClient_1
    722              }
    723              *cidNo = cid;
   \                     ??AppS2wHal_NetTcpClient_8:
   \   000000F2   0xF88A 0x7000      STRB     R7,[R10, #+0]
    724          	S2w_Printf("\r\n CID value in NetTcpClient func 2 : %d",cid);
   \   000000F6   0x4639             MOV      R1,R7
   \   000000F8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n CID value in NetTc...">_1`
   \   000000FC   0x.... 0x....      BL       S2w_Printf
    725          	S2w_Printf("\r\n cidNo value in NetTcpClient func : %d", *cidNo);
   \   00000100   0xF89A 0x1000      LDRB     R1,[R10, #+0]
   \   00000104   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n cidNo value in Net...">`
   \   00000108   0x.... 0x....      BL       S2w_Printf
    726          	s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   0000010C   0x2000             MOVS     R0,#+0
   \   0000010E   0x7068             STRB     R0,[R5, #+1]
    727              s2wCidList[cid].sslflag = FALSE;
   \   00000110   0xF885 0x002C      STRB     R0,[R5, #+44]
    728          	 s2wCidList[cid].serverCid = INVALID_CID;
    729              /* reconfigure connect timeout, since we are making it non blocking */
    730              connect_timeout =5;
    731              
    732              //fcntl(sd , F_SETFL, O_NONBLOCK);
    733              struct timeval TimeOut;
    734              TimeOut.tv_sec =  0;
    735              TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    736              setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   00000114   0xAB02             ADD      R3,SP,#+8
   \   00000116   0x20FF             MOVS     R0,#+255
   \   00000118   0xF885 0x002E      STRB     R0,[R5, #+46]
   \   0000011C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_15:
   \   00000120   0x69B0             LDR      R0,[R6, #+24]
   \   00000122   0x.... 0x....      BL       setsockopt
    737              setsockopt(s2wCidList[cid].sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
   \   00000126   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   0000012A   0x69B0             LDR      R0,[R6, #+24]
   \   0000012C   0x.... 0x....      BL       ?Subroutine22
    738          
    739              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_51:
   \   00000130   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpClient_1:
   \   00000132   0xB00A             ADD      SP,SP,#+40
   \   00000134   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    740          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0x2240             MOVS     R2,#+64
   \                     ??Subroutine22_0:
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x.... 0x....      B.W      setsockopt

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0xAB01             ADD      R3,SP,#+4
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2214             MOVS     R2,#+20
   \   00000002   0x2005             MOVS     R0,#+5
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x186a0
   \   00000010   0x9003             STR      R0,[SP, #+12]
   \   00000012   0x2008             MOVS     R0,#+8
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable69
   \   00000006   0xF8B0 0x01C8      LDRH     R0,[R0, #+456]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0xF8AD 0x0018      STRH     R0,[SP, #+24]
   \   00000006   0x2204             MOVS     R2,#+4
   \   00000008   0x8860             LDRH     R0,[R4, #+2]
   \   0000000A   0x0201             LSLS     R1,R0,#+8
   \   0000000C   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000010   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   \   00000014   0x1D21             ADDS     R1,R4,#+4
   \   00000016   0xA807             ADD      R0,SP,#+28
   \   00000018   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x2229             MOVS     R2,#+41
   \                     ??Subroutine12_0:
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      setsockopt
    741          

   \                                 In section .text, align 2, keep-with-next
    742          PUBLIC UINT8
    743          AppS2wHal_NetTcpClient_test(S2W_NETDATA_T *peerData, UINT8 *cidNo)
    744          {
   \                     AppS2wHal_NetTcpClient_test:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine7
    745              struct sockaddr_in destAddr;
    746              UINT32 cid;
    747              INT32 sd;
    748              INT32 ret;
    749              ULONG connect_timeout =  (s2wCurrent.registers[S2W_REG_TCP_CONNECT_TIMEOUT]/100);
   \                     ??CrossCallReturnLabel_12:
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0xB08A             SUB      SP,SP,#+40
   \   0000000C   0x2164             MOVS     R1,#+100
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x9001             STR      R0,[SP, #+4]
    750              ULONG rexTimeOut=75,retransRate=1;
    751          
    752              /* get  a valid cid */
    753              //cid = AppS2wHal_CidGet();
    754          	cid = 0;
    755              if (cid == INVALID_CID)
    756              {
    757          	    S2w_Printf("\r\n error 1");
    758                  return S2W_ENCID;
    759              }
    760          
    761              /* open a tcp client socket */
    762              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x204B             MOVS     R0,#+75
   \   00000018   0x9005             STR      R0,[SP, #+20]
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x9004             STR      R0,[SP, #+16]
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_5:
   \   00000024   0x4606             MOV      R6,R0
   \   00000026   0xF116 0x0F01      CMN      R6,#+1
   \   0000002A   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_test_0
    763              {
    764          	    S2w_Printf("\r\n error 2");
   \   0000002C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 2">`
   \   00000030   0x.... 0x....      BL       S2w_Printf
    765                  return S2W_SOCKFAILURE;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0xE060             B.N      ??AppS2wHal_NetTcpClient_test_1
    766              }
    767          
    768              /** Make the socket non blocking. */
    769              //tfBlockingState(sd, TM_BLOCKING_OFF);
    770          
    771              ret = setsockopt(sd,IP_PROTOTCP,TCP_REX_TIMER_RATE,(void*)&retransRate,4);
    772              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_0:
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0xAB04             ADD      R3,SP,#+16
   \   0000003E   0x222B             MOVS     R2,#+43
   \   00000040   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_55:
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_test_2
    773              {
    774          	    S2w_Printf("\r\n error 3");
   \   00000048   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 3">`
   \   0000004C   0xE013             B.N      ??AppS2wHal_NetTcpClient_test_3
    775              	soc_close(sd);
    776                  return S2W_FAILURE;
    777              }
    778              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    779              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_2:
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0xAB05             ADD      R3,SP,#+20
   \   00000054   0x2229             MOVS     R2,#+41
   \   00000056   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_54:
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_test_4
    780              {
    781          	    S2w_Printf("\r\n error 4");
   \   0000005E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 4">`
   \   00000062   0xE008             B.N      ??AppS2wHal_NetTcpClient_test_3
    782              	soc_close(sd);
    783                  return S2W_FAILURE;
    784              }
    785          
    786              ret = setsockopt(sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
    787              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_4:
   \   00000064   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   00000068   0x2240             MOVS     R2,#+64
   \   0000006A   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_53:
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD507             BPL.N    ??AppS2wHal_NetTcpClient_test_5
    788              {
    789          	    S2w_Printf("\r\n error 5");
   \   00000072   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 5">`
   \                     ??AppS2wHal_NetTcpClient_test_3:
   \   00000076   0x.... 0x....      BL       S2w_Printf
    790              	soc_close(sd);
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       soc_close
    791                  return S2W_FAILURE;
   \   00000080   0xE025             B.N      ??AppS2wHal_NetTcpClient_test_6
    792              }
    793          
    794              /** Connect the socket to the server. */
    795              destAddr.sin_family = AF_INET;
   \                     ??AppS2wHal_NetTcpClient_test_5:
   \   00000082   0x.... 0x....      BL       ?Subroutine3
    796              destAddr.sin_port = htons(peerData->port);
    797              memcpy(&(destAddr.sin_addr.s_addr),&peerData->ipAddr,sizeof(destAddr.sin_addr.s_addr));
    798          
    799          
    800              /* register the callback for any socket events */
    801              nx_bsd_callback_register(sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_0:
   \   00000086   0x223D             MOVS     R2,#+61
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable62_2
   \   0000008C   0x4630             MOV      R0,R6
   \   0000008E   0x.... 0x....      BL       nx_bsd_callback_register
    802          
    803              ret = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
   \   00000092   0x2210             MOVS     R2,#+16
   \   00000094   0xA906             ADD      R1,SP,#+24
   \   00000096   0x4630             MOV      R0,R6
   \   00000098   0x.... 0x....      BL       connect
   \   0000009C   0x4680             MOV      R8,R0
    804               /*
    805               * Update the connection identifier list with connection information
    806               * except the type.
    807               */
    808              s2wCidList[cid].sd = sd;
   \   0000009E   0x.... 0x....      LDR.W    R7,??DataTable62
   \   000000A2   0x61FE             STR      R6,[R7, #+28]
    809              s2wCidList[cid].conType = TCP;
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x7038             STRB     R0,[R7, #+0]
    810              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
    811              s2wCidList[cid].remotePort = peerData->port;
    812              memcpy(s2wCidList[cid].remoteIp,(UINT8*)peerData->ipAddr,4);
   \   000000A8   0x2204             MOVS     R2,#+4
   \   000000AA   0x2007             MOVS     R0,#+7
   \   000000AC   0x7078             STRB     R0,[R7, #+1]
   \   000000AE   0x1D21             ADDS     R1,R4,#+4
   \   000000B0   0x8860             LDRH     R0,[R4, #+2]
   \   000000B2   0x80B8             STRH     R0,[R7, #+4]
   \   000000B4   0x1DB8             ADDS     R0,R7,#+6
   \   000000B6   0x.... 0x....      BL       memcpy
    813          
    814              if (ret < 0 )
   \   000000BA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000BE   0xD508             BPL.N    ??AppS2wHal_NetTcpClient_test_7
    815              {
    816                  //S2w_Debug("connect failed: %d\r\n", tfGetSocketError(sd));
    817                  S2w_Printf("\r\n error 6");
   \   000000C0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 6">`
   \   000000C4   0x.... 0x....      BL       S2w_Printf
    818                  AppS2wHal_NetClose(cid);
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       AppS2wHal_NetClose
    819                  return S2W_FAILURE;
   \                     ??AppS2wHal_NetTcpClient_test_6:
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xE013             B.N      ??AppS2wHal_NetTcpClient_test_1
    820              }
    821              *cidNo = cid;
   \                     ??AppS2wHal_NetTcpClient_test_7:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x7028             STRB     R0,[R5, #+0]
    822          	s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   000000D6   0x7078             STRB     R0,[R7, #+1]
    823              s2wCidList[cid].sslflag = FALSE;
   \   000000D8   0xF887 0x002C      STRB     R0,[R7, #+44]
    824          	 s2wCidList[cid].serverCid = INVALID_CID;
    825              /* reconfigure connect timeout, since we are making it non blocking */
    826              connect_timeout =5;
    827              
    828              //fcntl(sd , F_SETFL, O_NONBLOCK);
    829              struct timeval TimeOut;
    830              TimeOut.tv_sec =  0;
    831              TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    832              setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   000000DC   0xAB02             ADD      R3,SP,#+8
   \   000000DE   0x20FF             MOVS     R0,#+255
   \   000000E0   0xF887 0x002E      STRB     R0,[R7, #+46]
   \   000000E4   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_16:
   \   000000E8   0x69F8             LDR      R0,[R7, #+28]
   \   000000EA   0x.... 0x....      BL       setsockopt
    833              setsockopt(s2wCidList[cid].sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
   \   000000EE   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_63:
   \   000000F2   0x69F8             LDR      R0,[R7, #+28]
   \   000000F4   0x.... 0x....      BL       ?Subroutine22
    834          
    835              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_50:
   \   000000F8   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpClient_test_1:
   \   000000FA   0xB00A             ADD      SP,SP,#+40
   \   000000FC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    836          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0x2103             MOVS     R1,#+3
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      setsockopt
    837          
    838          
    839          
    840          
    841          /**
    842           ******************************************************************
    843           * @ingroup S2w-Application
    844           * @brief S2w udp server open function.
    845           *    This function opens a new udp server socket and store the socket info
    846           *    into the corresponding Cid list and registers any receive events on this
    847           *    socket with network stack.
    848           * @param serverData - IN the address of the data structure contain the udp
    849           *                     server info.
    850           *.@param cidNo      - IN the address to which the cid number to be stored.
    851           * @retval S2W_SUCCESS     - operation successfull.
    852           * @retval S2W_SOCKFAILURE - operation failed
    853           * @retval S2W_ENCID       - operation failed- no valid cid
    854           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    855          PUBLIC UINT8
    856          AppS2wHal_NetUdpServer(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    857          {
   \                     AppS2wHal_NetUdpServer:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x460C             MOV      R4,R1
    858              UINT8 cid;
    859              INT32 sd, ret;
    860              struct sockaddr_in srcAddr;
    861          
    862              cid = AppS2wHal_CidGet();
   \   0000000A   0x.... 0x....      BL       AppS2wHal_CidGet
   \   0000000E   0x4605             MOV      R5,R0
    863              if (cid == INVALID_CID)
   \   00000010   0x2DFF             CMP      R5,#+255
   \   00000012   0xBF08             IT       EQ 
   \   00000014   0x2004             MOVEQ    R0,#+4
    864              {
    865                  return S2W_ENCID;
   \   00000016   0xD043             BEQ.N    ??AppS2wHal_NetUdpServer_0
    866              }
    867          
    868              /* check the node has a valid ip
    869               */
    870               //if(nwConfigSuccess != TRUE)
    871               {
    872                   //return S2W_SOCKFAILURE;
    873               }
    874              /* open the udp server socket
    875               */
    876              if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
   \   00000018   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   0000001C   0x4680             MOV      R8,R0
   \   0000001E   0xF118 0x0F01      CMN      R8,#+1
   \   00000022   0xD037             BEQ.N    ??AppS2wHal_NetUdpServer_1
    877              {
    878                  return S2W_SOCKFAILURE;
    879              }
    880              srcAddr.sin_family = AF_INET;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    881              srcAddr.sin_port = htons(serverData->port);
    882              srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    883          
    884              /* bind the socket with source addess
    885               */
    886              if (bind(sd, (struct sockaddr *)&srcAddr,
    887                    sizeof(srcAddr)) == -1)
   \   0000002A   0x2210             MOVS     R2,#+16
   \   0000002C   0x8870             LDRH     R0,[R6, #+2]
   \   0000002E   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_38:
   \   00000032   0xA903             ADD      R1,SP,#+12
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_18:
   \   0000003C   0xF110 0x0F01      CMN      R0,#+1
   \   00000040   0xD102             BNE.N    ??AppS2wHal_NetUdpServer_2
    888              {
    889                  soc_close(sd);
   \   00000042   0x.... 0x....      BL       ?Subroutine11
    890                  return S2W_SOCKFAILURE;
   \                     ??CrossCallReturnLabel_22:
   \   00000046   0xE025             B.N      ??AppS2wHal_NetUdpServer_1
    891              }
    892          
    893              /* fill the cid list the socket parameters
    894               */
    895              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetUdpServer_2:
   \   00000048   0xF44F 0x7094      MOV      R0,#+296
   \   0000004C   0x4368             MULS     R0,R0,R5
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable62
   \   00000052   0x1847             ADDS     R7,R0,R1
    896              s2wCidList[cid].conType = UDP;
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0xF8C7 0x801C      STR      R8,[R7, #+28]
   \   0000005A   0x5442             STRB     R2,[R0, R1]
    897              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
   \   0000005C   0x707A             STRB     R2,[R7, #+1]
    898              s2wCidList[cid].localPort = serverData->port;
    899              s2wCidList[cid].remotePort = 0;
    900              memset(s2wCidList[cid].remoteIp,0,4);
   \   0000005E   0x2204             MOVS     R2,#+4
   \   00000060   0x8870             LDRH     R0,[R6, #+2]
   \   00000062   0x8078             STRH     R0,[R7, #+2]
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x80B8             STRH     R0,[R7, #+4]
   \   0000006A   0x1DB8             ADDS     R0,R7,#+6
   \   0000006C   0x.... 0x....      BL       memset
    901              
    902              
    903               
    904              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    905               
    906                   //    fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    907              struct timeval TimeOut;
    908                  TimeOut.tv_sec =  0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9001             STR      R0,[SP, #+4]
    909                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    910                 // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    911                  ret = setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    912                  if(ret < 0)
   \   00000074   0xAB01             ADD      R3,SP,#+4
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable62_1  ;; 0x186a0
   \   0000007A   0x9002             STR      R0,[SP, #+8]
   \   0000007C   0x2214             MOVS     R2,#+20
   \   0000007E   0x2008             MOVS     R0,#+8
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x69F8             LDR      R0,[R7, #+28]
   \   00000086   0x.... 0x....      BL       setsockopt
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD504             BPL.N    ??AppS2wHal_NetUdpServer_3
    913                  {
    914                      AppS2wHal_NetClose(cid);
   \   0000008E   0x4628             MOV      R0,R5
   \   00000090   0x.... 0x....      BL       AppS2wHal_NetClose
    915                      return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetUdpServer_1:
   \   00000094   0x2003             MOVS     R0,#+3
   \   00000096   0xE003             B.N      ??AppS2wHal_NetUdpServer_0
    916                  }
    917          
    918            
    919                /* register the callback for any socket events
    920               */
    921              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetUdpServer_3:
   \   00000098   0x.... 0x....      BL       ?Subroutine20
    922          
    923              *cidNo = cid;
   \                     ??CrossCallReturnLabel_46:
   \   0000009C   0x7025             STRB     R5,[R4, #+0]
    924              return S2W_SUCCESS;
   \   0000009E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetUdpServer_0:
   \   000000A0   0xB008             ADD      SP,SP,#+32
   \   000000A2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    925          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x69F8             LDR      R0,[R7, #+28]
   \                     ??Subroutine20_0:
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable64
   \   00000006   0x223D             MOVS     R2,#+61
   \   00000008   0x.... 0x....      B.W      nx_bsd_callback_register

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x0201             LSLS     R1,R0,#+8
   \   00000002   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000006   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000000A   0x4770             BX       LR
    926          
    927          
    928          /**
    929           ******************************************************************
    930           * @ingroup S2w-Application
    931           * @brief S2w tcp server open function.
    932           *    This function opens a new tcp server socket and store the socket info
    933           *    into the corresponding Cid list and registers any receive events on this
    934           *    socket with network stack.
    935           * @param serverData - IN the address of the data structure contain the tcp
    936           *                     server info.
    937           *.@param cidNo      - IN the address to which the cid number to be stored.
    938           * @retval S2W_SUCCESS     - operation successfull.
    939           * @retval S2W_SOCKFAILURE - operation failed
    940           * @retval S2W_ENCID       - operation failed- no valid cid
    941           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    942          PUBLIC UINT8
    943          AppS2wHal_NetTcpServer(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    944          {
   \                     AppS2wHal_NetTcpServer:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4604             MOV      R4,R0
    945              INT32 sd, ret;
    946              struct sockaddr_in srcAddr;
    947              UINT8 cid;
    948              ULONG rexTimeOut=25;
   \   00000008   0x2019             MOVS     R0,#+25
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    949          
    950              cid = AppS2wHal_CidGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000012   0x4606             MOV      R6,R0
    951              if (cid == INVALID_CID)
   \   00000014   0x2EFF             CMP      R6,#+255
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x2004             MOVEQ    R0,#+4
    952              {
    953                  return S2W_ENCID;
   \   0000001A   0xD049             BEQ.N    ??AppS2wHal_NetTcpServer_0
    954              }
    955          
    956              /* open the tcp server socket */
    957              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_4:
   \   00000024   0x4680             MOV      R8,R0
   \   00000026   0xF118 0x0F01      CMN      R8,#+1
   \   0000002A   0xD03B             BEQ.N    ??AppS2wHal_NetTcpServer_1
    958              {
    959                  return S2W_SOCKFAILURE;
    960              }
    961          
    962              srcAddr.sin_family = AF_INET;
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    963              srcAddr.sin_port = htons(serverData->port);
    964              srcAddr.sin_addr.s_addr = htonl(0);
    965          
    966              /*  bind the source port  */
    967              if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
   \   00000032   0x2210             MOVS     R2,#+16
   \   00000034   0x8860             LDRH     R0,[R4, #+2]
   \   00000036   0x0201             LSLS     R1,R0,#+8
   \   00000038   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000003C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \   00000040   0xA902             ADD      R1,SP,#+8
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_17:
   \   0000004A   0xF110 0x0F01      CMN      R0,#+1
   \   0000004E   0xD005             BEQ.N    ??AppS2wHal_NetTcpServer_2
    968              {
    969                  soc_close(sd);
    970                  return S2W_SOCKFAILURE;
    971              }
    972              if (listen(sd, 5) < 0)
   \   00000050   0x2105             MOVS     R1,#+5
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       listen
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD502             BPL.N    ??AppS2wHal_NetTcpServer_3
    973              {
    974                  soc_close(sd);
   \                     ??AppS2wHal_NetTcpServer_2:
   \   0000005C   0x.... 0x....      BL       ?Subroutine11
    975                  return S2W_SOCKFAILURE;
   \                     ??CrossCallReturnLabel_21:
   \   00000060   0xE020             B.N      ??AppS2wHal_NetTcpServer_1
    976              }
    977          
    978              /* fill the cid list */
    979              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetTcpServer_3:
   \   00000062   0xF44F 0x7094      MOV      R0,#+296
   \   00000066   0x4370             MULS     R0,R0,R6
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable62
   \   0000006C   0x1847             ADDS     R7,R0,R1
    980              s2wCidList[cid].conType = TCP;
   \   0000006E   0x2202             MOVS     R2,#+2
   \   00000070   0xF8C7 0x801C      STR      R8,[R7, #+28]
   \   00000074   0x5442             STRB     R2,[R0, R1]
    981              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x7078             STRB     R0,[R7, #+1]
    982              s2wCidList[cid].localPort = serverData->port;
    983              s2wCidList[cid].remotePort = 0;
    984              s2wCidList[cid].maxConn = 15;
    985              memset(s2wCidList[cid].remoteIp,0,4);
   \   0000007A   0x2204             MOVS     R2,#+4
   \   0000007C   0x8860             LDRH     R0,[R4, #+2]
   \   0000007E   0x8078             STRH     R0,[R7, #+2]
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x80B8             STRH     R0,[R7, #+4]
   \   00000086   0x200F             MOVS     R0,#+15
   \   00000088   0xF887 0x0020      STRB     R0,[R7, #+32]
   \   0000008C   0x1DB8             ADDS     R0,R7,#+6
   \   0000008E   0x.... 0x....      BL       memset
    986              //sockOption = -1;
    987              //setsockopt(sd, 0, TCP_MAXRT, (const char*)&sockOption,
    988              //           sizeof(sockOption));
    989              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    990              if(ret < 0)
   \   00000092   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_64:
   \   00000096   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_27:
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD504             BPL.N    ??AppS2wHal_NetTcpServer_4
    991              {
    992                  AppS2wHal_NetClose(cid);
   \   0000009E   0x4630             MOV      R0,R6
   \   000000A0   0x.... 0x....      BL       AppS2wHal_NetClose
    993                  return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetTcpServer_1:
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0xE003             B.N      ??AppS2wHal_NetTcpServer_0
    994              }
    995              //sockOption1 = 2000;
    996              //setsockopt(sd, SOL_SOCKET, SO_RCVBUF,(const char*)&sockOption1,
    997               //          sizeof(sockOption1));
    998              
    999              
   1000               
   1001               //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
   1002              /* register the callback for any socket events */
   1003           
   1004              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetTcpServer_4:
   \   000000A8   0x.... 0x....      BL       ?Subroutine20
   1005              *cidNo = cid;
   \                     ??CrossCallReturnLabel_45:
   \   000000AC   0x702E             STRB     R6,[R5, #+0]
   1006              return S2W_SUCCESS;
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpServer_0:
   \   000000B0   0x.... 0x....      B.W      ?Subroutine0
   1007          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB006             ADD      SP,SP,#+24
   \   00000002   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1008          

   \                                 In section .text, align 2, keep-with-next
   1009          VOID AppS2wHal_TcpSrvMaxConSet(UINT8 cid,UINT32 maxCon)
   1010          {
   1011          	s2wCidList[cid].maxConn= maxCon;
   \                     AppS2wHal_TcpSrvMaxConSet:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable69_1
   \   00000008   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000C   0xF880 0x1020      STRB     R1,[R0, #+32]
   1012          }
   \   00000010   0x4770             BX       LR               ;; return
   1013          
   1014          /**
   1015           ******************************************************************
   1016           * @ingroup S2w-Application
   1017           * @brief S2w socket close function.
   1018           *    This function close the particular tcp/udp connection specified by cid no.
   1019           *.@param cidNo      - IN the cid number corresponding to the socket to be closed.
   1020           * @retval S2W_SUCCESS     - operation successfull.
   1021           * @retval S2W_FAILURE     - operation failed
   1022           * @retval S2W_EBADCID     - operation failed- cid passed is not valid.
   1023           ******************************************************************/
   1024          

   \                                 In section .text, align 2, keep-with-next
   1025          VOID GsnSocketCallback ( INT32 SocketDescriptor, INT32 Flags )
   1026          {
   1027              GsnOsal_SemRelease(&s2wSocketCloseSem);
   \                     GsnSocketCallback:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable69_2
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease
   1028          }
   1029          

   \                                 In section .text, align 2, keep-with-next
   1030          PUBLIC UINT8
   1031          AppS2wHal_NetClose(UINT8 cid)
   1032          {
   \                     AppS2wHal_NetClose:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   1033              S2W_CID_T *p;
   1034              UINT32 opt=2;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   1035              /* Validate the connection identifier.
   1036               */
   1037              if (cid >= MAX_CID_RANGE)
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xDA0D             BGE.N    ??AppS2wHal_NetClose_0
   1038              {
   1039                  return S2W_EBADCID;
   1040              }
   1041          
   1042              p = &s2wCidList[cid];
   \   00000010   0xF44F 0x7894      MOV      R8,#+296
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable62
   \   00000018   0xFB08 0x7504      MLA      R5,R8,R4,R7
   1043              if ((p->sd == CID_NOTINUSE) || (p->s2wCidCloseInProgress == TRUE))
   \   0000001C   0x69E8             LDR      R0,[R5, #+28]
   \   0000001E   0xF110 0x0F01      CMN      R0,#+1
   \   00000022   0xBF1C             ITT      NE 
   \   00000024   0xF895 0x1118      LDRBNE   R1,[R5, #+280]
   \   00000028   0x2901             CMPNE    R1,#+1
   \   0000002A   0xD101             BNE.N    ??AppS2wHal_NetClose_1
   1044              {
   1045                  return S2W_EBADCID;
   \                     ??AppS2wHal_NetClose_0:
   \   0000002C   0x2005             MOVS     R0,#+5
   \   0000002E   0xE05B             B.N      ??AppS2wHal_NetClose_2
   1046              }
   1047              p->s2wCidCloseInProgress = TRUE;
   \                     ??AppS2wHal_NetClose_1:
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0xF885 0x1118      STRB     R1,[R5, #+280]
   1048              /* Close the connection.
   1049               */
   1050               if(s2wCidList[cid].allocatedTo == 1)
   \   00000036   0xF895 0x1030      LDRB     R1,[R5, #+48]
   \   0000003A   0x2901             CMP      R1,#+1
   \   0000003C   0xBF08             IT       EQ 
   \   0000003E   0x2001             MOVEQ    R0,#+1
   1051          	 	return S2W_FAILURE;
   \   00000040   0xD052             BEQ.N    ??AppS2wHal_NetClose_2
   1052          
   1053              if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \   00000042   0x7829             LDRB     R1,[R5, #+0]
   \   00000044   0x2902             CMP      R1,#+2
   \   00000046   0xBF04             ITT      EQ 
   \   00000048   0x7869             LDRBEQ   R1,[R5, #+1]
   \   0000004A   0x2900             CMPEQ    R1,#+0
   \   0000004C   0xD105             BNE.N    ??CrossCallReturnLabel_49
   1054              {
   1055              	setsockopt(p->sd, IP_PROTOTCP, TCP_MAX_REXMIT, (const char*)&opt,
   1056                         sizeof(opt));
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x9100             STR      R1,[SP, #+0]
   \   00000052   0xAB01             ADD      R3,SP,#+4
   \   00000054   0x222A             MOVS     R2,#+42
   \   00000056   0x.... 0x....      BL       ??Subroutine22_0
   1057              }
   1058          	nx_bsd_callback_register(p->sd, NULL, 0);
   \                     ??CrossCallReturnLabel_49:
   \   0000005A   0x69E8             LDR      R0,[R5, #+28]
   \   0000005C   0x.... 0x....      BL       ?Subroutine24
   1059          
   1060          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   1061              /* if an http connection close using http close */
   1062              if(p->httpflag == 1 )
   \                     ??CrossCallReturnLabel_58:
   \   00000060   0xF895 0x002F      LDRB     R0,[R5, #+47]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD103             BNE.N    ??AppS2wHal_NetClose_3
   1063              {
   1064                  AppS2wHal_HttpLocalClose(cid);
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   \   0000006E   0xE00A             B.N      ??AppS2wHal_NetClose_4
   1065              }
   1066              else
   1067          #endif
   1068          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1069              if(p->sslflag == 1 )
   \                     ??AppS2wHal_NetClose_3:
   \   00000070   0xF895 0x002C      LDRB     R0,[R5, #+44]
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD103             BNE.N    ??AppS2wHal_NetClose_5
   1070              {
   1071                  AppS2w_SslLocalClose(cid);
   \   00000078   0x4620             MOV      R0,R4
   \   0000007A   0x.... 0x....      BL       AppS2w_SslLocalClose
   \   0000007E   0xE002             B.N      ??AppS2wHal_NetClose_4
   1072              }
   1073              else
   1074          #endif
   1075          
   1076              {
   1077                  soc_close(p->sd);
   \                     ??AppS2wHal_NetClose_5:
   \   00000080   0x69E8             LDR      R0,[R5, #+28]
   \   00000082   0x.... 0x....      BL       soc_close
   1078          	}
   1079                  if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \                     ??AppS2wHal_NetClose_4:
   \   00000086   0x7828             LDRB     R0,[R5, #+0]
   \   00000088   0x2802             CMP      R0,#+2
   \   0000008A   0xBF04             ITT      EQ 
   \   0000008C   0x7868             LDRBEQ   R0,[R5, #+1]
   \   0000008E   0x2800             CMPEQ    R0,#+0
   \   00000090   0xD11E             BNE.N    ??AppS2wHal_NetClose_6
   1080                  {
   1081          		 	if(s2wCidList[cid].serverCid != INVALID_CID)
   \   00000092   0xF895 0x002E      LDRB     R0,[R5, #+46]
   \   00000096   0x28FF             CMP      R0,#+255
   \   00000098   0xD01A             BEQ.N    ??AppS2wHal_NetClose_6
   1082          		 	{
   1083          		 		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER );
   \   0000009A   0x.... 0x....      LDR.W    R6,??DataTable70
   \   0000009E   0x6830             LDR      R0,[R6, #+0]
   \   000000A0   0xF248 0x14CC      MOVW     R4,#+33228
   \   000000A4   0xF04F 0x31FF      MOV      R1,#-1
   \   000000A8   0x1820             ADDS     R0,R4,R0
   \   000000AA   0x.... 0x....      BL       GsnOsal_SemAcquire
   1084          				s2wCidList[s2wCidList[cid].serverCid].clientConCount--;
   \   000000AE   0xF895 0x102E      LDRB     R1,[R5, #+46]
   \   000000B2   0xF895 0x002E      LDRB     R0,[R5, #+46]
   \   000000B6   0xFB08 0x7101      MLA      R1,R8,R1,R7
   \   000000BA   0xFB08 0x7000      MLA      R0,R8,R0,R7
   \   000000BE   0xF891 0x1021      LDRB     R1,[R1, #+33]
   \   000000C2   0x1E49             SUBS     R1,R1,#+1
   \   000000C4   0xF880 0x1021      STRB     R1,[R0, #+33]
   1085          			 	GsnOsal_SemRelease(&s2wappMainTaskCtxt->s2wTcpClientCntSyncSem);
   \   000000C8   0x6830             LDR      R0,[R6, #+0]
   \   000000CA   0x1820             ADDS     R0,R4,R0
   \   000000CC   0x.... 0x....      BL       GsnOsal_SemRelease
   1086          		 	}
   1087                  }
   1088              
   1089          #if 0   
   1090               UINT32 i=0;
   1091               if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_SERVER))
   1092               {
   1093                 /* Close all the client CIDs connected to server as well */
   1094                  for (i = 0; i < MAX_CID_RANGE; i++)
   1095                  {
   1096                    if(s2wCidList[i].serverCid == cid)
   1097                    {
   1098                      soc_close(s2wCidList[i].sd);
   1099                      nx_bsd_callback_register(p->sd, NULL, 0);
   1100                      s2wCidList[i].sd = CID_NOTINUSE;
   1101                      s2wCidList[i].localPort = 0;
   1102                      s2wCidList[i].remotePort = 0;
   1103                      s2wCidList[i].addrType = 0;
   1104                      s2wCidList[i].s2wCidCloseInProgress = FALSE;
   1105                      
   1106                    }
   1107                  }
   1108               }
   1109          #endif
   1110              /* Remove the entry from the connection identifier list.
   1111               */
   1112          
   1113              p->sd = CID_NOTINUSE;
   \                     ??AppS2wHal_NetClose_6:
   \   000000D0   0xF04F 0x30FF      MOV      R0,#-1
   \   000000D4   0x61E8             STR      R0,[R5, #+28]
   1114              s2wCidList[cid].localPort = 0;
   1115              s2wCidList[cid].remotePort = 0;
   \   000000D6   0x2100             MOVS     R1,#+0
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x8068             STRH     R0,[R5, #+2]
   \   000000DC   0x1CA8             ADDS     R0,R5,#+2
   \   000000DE   0x8041             STRH     R1,[R0, #+2]
   1116              s2wCidList[cid].addrType = 0;
   \   000000E0   0x7641             STRB     R1,[R0, #+25]
   1117              p->s2wCidCloseInProgress = FALSE;
   \   000000E2   0x2000             MOVS     R0,#+0
   \   000000E4   0xF885 0x0118      STRB     R0,[R5, #+280]
   1118              return S2W_SUCCESS;
   \                     ??AppS2wHal_NetClose_2:
   \   000000E8   0xB004             ADD      SP,SP,#+16
   \   000000EA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1119          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0x2200             MOVS     R2,#+0
   \                     ??Subroutine24_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      nx_bsd_callback_register
   1120          
   1121          
   1122          PRIVATE UINT8
   1123          AppS2wHal_NetImmediateClose(UINT8 cid)
   1124          {
   1125              S2W_CID_T *p;
   1126              UINT32 opt=2;
   1127          
   1128              /* Validate the connection identifier.
   1129               */
   1130              if (cid >= MAX_CID_RANGE)
   1131              {
   1132                  return S2W_EBADCID;
   1133              }
   1134          
   1135              p = &s2wCidList[cid];
   1136              if ((p->sd == CID_NOTINUSE) || (p->s2wCidCloseInProgress == TRUE))
   1137              {
   1138                  return S2W_EBADCID;
   1139              }
   1140          
   1141              /* Close the connection.*/
   1142              p->s2wCidCloseInProgress = TRUE;
   1143              setsockopt(p->sd, IP_PROTOTCP, TCP_MAX_REXMIT, (const char*)&opt,
   1144                         sizeof(opt));
   1145           #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   1146               if(p->httpflag == 1 )
   1147               {
   1148                   AppS2wHal_HttpLocalClose(cid);
   1149               }
   1150               else
   1151           #endif
   1152           #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1153               if(p->sslflag == 1 )
   1154               {
   1155                   AppS2w_SslLocalClose(cid);
   1156          
   1157               }
   1158               else
   1159           #endif
   1160              {
   1161            		nx_bsd_callback_register(p->sd, NULL, 0);
   1162                  soc_close(p->sd);
   1163          
   1164             }
   1165          
   1166          
   1167              p->sd = CID_NOTINUSE;
   1168              s2wCidList[cid].localPort = 0;
   1169              s2wCidList[cid].remotePort = 0;
   1170              p->s2wCidCloseInProgress = FALSE;
   1171              return S2W_SUCCESS;
   1172          }
   1173          
   1174          
   1175          
   1176          /**
   1177           ******************************************************************
   1178           * @ingroup S2w-Application
   1179           * @brief S2w all socket close function.
   1180           *    This function close all tcp/udp connection established in s2w.
   1181           * @retval S2W_SUCCESS     - operation successfull.
   1182           * @retval S2W_FAILURE     - operation failed
   1183           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1184          PUBLIC UINT8
   1185          AppS2wHal_NetCloseAll(UINT8 flag)
   1186          {
   \                     AppS2wHal_NetCloseAll:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB084             SUB      SP,SP,#+16
   1187              UINT8 status = S2W_SUCCESS;
   \   00000008   0x2000             MOVS     R0,#+0
   1188              INT32 i;
   1189          
   1190              for (i = 0; i < MAX_CID_RANGE; i++)
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xF44F 0x7894      MOV      R8,#+296
   \   00000010   0x.... 0x....      LDR.W    R10,??DataTable69_1
   1191              {
   1192                  if (s2wCidList[i].sd != CID_NOTINUSE && s2wCidList[i].allocatedTo != 1)
   \                     ??AppS2wHal_NetCloseAll_0:
   \   00000014   0xFB08 0xA605      MLA      R6,R8,R5,R10
   \   00000018   0x69F1             LDR      R1,[R6, #+28]
   \   0000001A   0xF111 0x0F01      CMN      R1,#+1
   \   0000001E   0xBF1C             ITT      NE 
   \   00000020   0xF896 0x1030      LDRBNE   R1,[R6, #+48]
   \   00000024   0x2901             CMPNE    R1,#+1
   \   00000026   0xD03B             BEQ.N    ??AppS2wHal_NetCloseAll_1
   1193                  {
   1194          	         if(flag == CID_NCLOSE)
   \   00000028   0xB91C             CBNZ.N   R4,??AppS2wHal_NetCloseAll_2
   1195          	         {
   1196          	            status = AppS2wHal_NetClose(i);
   \   0000002A   0xB2E8             UXTB     R0,R5
   \   0000002C   0x.... 0x....      BL       AppS2wHal_NetClose
   \   00000030   0xE036             B.N      ??AppS2wHal_NetCloseAll_1
   1197          	         }
   1198          	         else
   1199          	         {
   1200          	            status = AppS2wHal_NetImmediateClose(i);
   \                     ??AppS2wHal_NetCloseAll_2:
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xFA5F 0xF985      UXTB     R9,R5
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0xFB08 0xA709      MLA      R7,R8,R9,R10
   \   0000003E   0x69F8             LDR      R0,[R7, #+28]
   \   00000040   0xF110 0x0F01      CMN      R0,#+1
   \   00000044   0xBF1C             ITT      NE 
   \   00000046   0xF897 0x1118      LDRBNE   R1,[R7, #+280]
   \   0000004A   0x2901             CMPNE    R1,#+1
   \   0000004C   0xD027             BEQ.N    ??AppS2wHal_NetCloseAll_3
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0xF887 0x1118      STRB     R1,[R7, #+280]
   \   00000054   0xAB01             ADD      R3,SP,#+4
   \   00000056   0x2104             MOVS     R1,#+4
   \   00000058   0x9100             STR      R1,[SP, #+0]
   \   0000005A   0x222A             MOVS     R2,#+42
   \   0000005C   0x.... 0x....      BL       ??Subroutine22_0
   1201          	         }
   1202          
   1203                  }
   \                     ??CrossCallReturnLabel_52:
   \   00000060   0xF107 0x001C      ADD      R0,R7,#+28
   \   00000064   0x7CC1             LDRB     R1,[R0, #+19]
   \   00000066   0x2901             CMP      R1,#+1
   \   00000068   0xD103             BNE.N    ??AppS2wHal_NetCloseAll_4
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   \   00000070   0xE00C             B.N      ??AppS2wHal_NetCloseAll_5
   \                     ??AppS2wHal_NetCloseAll_4:
   \   00000072   0x7C00             LDRB     R0,[R0, #+16]
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD103             BNE.N    ??AppS2wHal_NetCloseAll_6
   \   00000078   0x4648             MOV      R0,R9
   \   0000007A   0x.... 0x....      BL       AppS2w_SslLocalClose
   \   0000007E   0xE005             B.N      ??AppS2wHal_NetCloseAll_5
   \                     ??AppS2wHal_NetCloseAll_6:
   \   00000080   0x69F8             LDR      R0,[R7, #+28]
   \   00000082   0x.... 0x....      BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_59:
   \   00000086   0x69F8             LDR      R0,[R7, #+28]
   \   00000088   0x.... 0x....      BL       soc_close
   \                     ??AppS2wHal_NetCloseAll_5:
   \   0000008C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000090   0x61F8             STR      R0,[R7, #+28]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x8078             STRH     R0,[R7, #+2]
   \   00000096   0x80B8             STRH     R0,[R7, #+4]
   \   00000098   0xF887 0x0118      STRB     R0,[R7, #+280]
   \   0000009C   0xE000             B.N      ??AppS2wHal_NetCloseAll_1
   \                     ??AppS2wHal_NetCloseAll_3:
   \   0000009E   0x2005             MOVS     R0,#+5
   1204                  s2wCidList[i].localPort = 0;
   \                     ??AppS2wHal_NetCloseAll_1:
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x8071             STRH     R1,[R6, #+2]
   1205                  s2wCidList[i].remotePort = 0;
   1206              }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \   000000A6   0x80B1             STRH     R1,[R6, #+4]
   \   000000A8   0x2D10             CMP      R5,#+16
   \   000000AA   0xDBB3             BLT.N    ??AppS2wHal_NetCloseAll_0
   1207              return status;
   \   000000AC   0xB004             ADD      SP,SP,#+16
   \   000000AE   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1208          }
   1209          
   1210          
   1211          /**
   1212           ******************************************************************
   1213           * @ingroup S2w-Application
   1214           * @brief S2w udp/tcp tx function
   1215           *    This function send the data to the remote machine specified. This
   1216           *    fuction use either tcp or udp as the protocol type.
   1217           * @param cid      - IN the cid number corresponding to the socket connection.
   1218           * @param destAddr - IN the socket structure for remote machine.
   1219           * @param destPort - IN the remote port.
   1220           * @param buf      - IN the data pointer.
   1221           *.@param len      - IN the length of the buf to send.
   1222           * @retval S2W_SUCCESS           - operation successfull.
   1223           * @retval S2W_ENCID/S2W_EBADCID - operation failed-no valid cid
   1224           * @@retval S2W_FAILURE          - operation failed.
   1225           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1226          PUBLIC UINT8
   1227          AppS2wHal_NetTx(UINT8 cid, UINT8 *destAddr, UINT16 destPort,
   1228                           VOID *buf, UINT32 len)
   1229          {
   \                     AppS2wHal_NetTx:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x4699             MOV      R9,R3
   1230              UINT32 status = S2W_SUCCESS;
   1231              S2W_CID_T *p;
   1232          	UINT8 *outDataBuf;
   1233              p = &s2wCidList[cid];
   \   00000008   0xF44F 0x7094      MOV      R0,#+296
   \   0000000C   0x....             LDR.N    R3,??DataTable62
   \   0000000E   0xFB00 0x340A      MLA      R4,R0,R10,R3
   \   00000012   0xB087             SUB      SP,SP,#+28
   \   00000014   0x7863             LDRB     R3,[R4, #+1]
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x9F10             LDR      R7,[SP, #+64]
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x2B01             CMP      R3,#+1
   \   0000001E   0xD112             BNE.N    ??AppS2wHal_NetTx_0
   1234              if (p->conMode == S2W_NETDATA_MODE_SERVER)
   1235              {
   1236                  struct sockaddr_in addr;
   1237                  if (p->conType == TCP)
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD04E             BEQ.N    ??AppS2wHal_NetTx_1
   1238                  {
   1239                      return S2W_FAILURE;
   1240                  }
   1241          #ifdef S2W_IPv6_SUPPORT
   1242                
   1243                  if(p->addrType & ADDR_TYPE_IPv6)
   1244                  {
   1245                    struct sockaddr_in6 servAddr;
   1246                    servAddr.sin6_family = AF_INET6;
   1247                    servAddr.sin6_port = htons(destPort);
   1248                    
   1249                    memcpy(servAddr.sin6_addr._S6_un._S6_u32,destAddr,16);
   1250                    GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32); 
   1251                      if (sendto(p->sd, buf, len, 0,(struct sockaddr *)&servAddr, sizeof(servAddr)) < 0)
   1252                  {
   1253                      status = S2W_FAILURE;
   1254                  }
   1255                    
   1256                  }
   1257                else
   1258                
   1259          #endif //S2W_IPv6_SUPPORT 
   1260                {
   1261                  addr.sin_family = AF_INET;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1262                  addr.sin_port = htons(destPort);
   \   0000002A   0x0210             LSLS     R0,R2,#+8
   \   0000002C   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000030   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1263                  //*(ULONG*)destAddr = htonl(*(ULONG*)destAddr);
   1264                  memcpy(&(addr.sin_addr.s_addr), destAddr, sizeof(addr.sin_addr.s_addr));
   \   00000034   0x2204             MOVS     R2,#+4
   \   00000036   0xA804             ADD      R0,SP,#+16
   \   00000038   0x.... 0x....      BL       memcpy
   1265          
   1266                  GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \   0000003C   0x.... 0x....      BL       ?Subroutine32
   1267                  if (sendto(p->sd, buf, len, 0,
   1268                     (struct sockaddr *)&addr, sizeof(addr)) < 0)
   \                     ??CrossCallReturnLabel_82:
   \   00000040   0x.... 0x....      BL       ?Subroutine16
   1269                  {
   1270                      //S2w_Debug("udp sendto fail: %d\r\n", tfGetSocketError(p->sd));
   1271                      //S2w_Debug("destaddr = %x\n\r", *(UINT32 *) destAddr);
   1272                      //S2w_Debug("destport = %x\n\r", destPort);
   1273                      status = S2W_FAILURE;
   1274                  }
   1275                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   1276                }
   1277              }
   \                     ??CrossCallReturnLabel_37:
   \   00000044   0xE047             B.N      ??AppS2wHal_NetTx_2
   1278              else if((p->conType == UDP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \                     ??AppS2wHal_NetTx_0:
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xBF08             IT       EQ 
   \   0000004A   0x2B00             CMPEQ    R3,#+0
   \   0000004C   0xD10F             BNE.N    ??AppS2wHal_NetTx_3
   1279              {
   1280          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1281                  if ((s2wCidList[cid].sslflag == TRUE))
   1282           		{
   1283           			/*NOTE: IMP: The ssl can encode a max of 1338 bytes. Its beter to encode 1K at a time
   1284           			and send it. So we need a loop mechanism to send the incomming data in 1K encoded
   1285           			chunks....*/
   1286           			//UINT32 outDataLen;
   1287                      UINT32 dataSent = 0;
   1288           			UINT32 sendLen = 0;
   1289           			while(len)
   1290           			{
   1291           				sendLen = (len > 1024)?1024:len;
   1292                          GsnDtls_Send( (GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn,
   1293                          		(UINT8 *)((UINT8*)buf + dataSent), sendLen, 0 );
   1294           				dataSent += sendLen;
   1295           				len -= sendLen;
   1296           			}
   1297           		}
   1298                  else
   1299          #endif
   1300                  {
   1301                #ifdef S2W_IPv6_SUPPORT
   1302                  if(p->addrType & ADDR_TYPE_IPv6)
   1303                  {
   1304                    struct sockaddr_in6 servAddr;
   1305                    servAddr.sin6_family = AF_INET6;
   1306                    servAddr.sin6_port = htons(s2wCidList[cid].remotePort);
   1307                    
   1308                    
   1309                    memcpy(servAddr.sin6_addr._S6_un._S6_u32,s2wCidList[cid].remoteIpv6,16);
   1310                    GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32); 
   1311                      if (sendto(p->sd, buf, len, 0,(struct sockaddr *)&servAddr, sizeof(servAddr)) < 0)
   1312                  {
   1313                      status = S2W_FAILURE;
   1314                  }
   1315          
   1316                  }
   1317                else
   1318                
   1319          #endif //S2W_IPv6_SUPPORT       
   1320                {
   1321                  struct sockaddr_in addr1;
   1322                  addr1.sin_family = AF_INET;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1323                  addr1.sin_port = htons(s2wCidList[cid].remotePort);
   1324                  memcpy(&(addr1.sin_addr.s_addr),s2wCidList[cid].remoteIp ,
   1325                            sizeof(addr1.sin_addr.s_addr));
   \   00000054   0x2204             MOVS     R2,#+4
   \   00000056   0x88A0             LDRH     R0,[R4, #+4]
   \   00000058   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_39:
   \   0000005C   0x1DA1             ADDS     R1,R4,#+6
   \   0000005E   0xA804             ADD      R0,SP,#+16
   \   00000060   0x.... 0x....      BL       memcpy
   1326          
   1327                  GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \   00000064   0x.... 0x....      BL       ?Subroutine32
   1328                  if (sendto(p->sd, buf, len, 0,
   1329                     (struct sockaddr *)&addr1, sizeof(addr1)) < 0)
   \                     ??CrossCallReturnLabel_81:
   \   00000068   0x.... 0x....      BL       ?Subroutine16
   1330                  {
   1331                      S2w_Debug("udp sendto fail: %d\r\n", 1);
   1332                  }
   1333                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   1334                }
   1335              }
   1336              }
   \                     ??CrossCallReturnLabel_36:
   \   0000006C   0xE036             B.N      ??AppS2wHal_NetTx_4
   1337              else
   1338              {
   1339                  /* do a socket send
   1340                   */
   1341          
   1342                  //S2w_Debug("\r\nData sd %d, %d\r\n",s2wCidList[cid].sd,
   1343                      //tlsv1_client_established(s2wCidList[cid].ssl.sslConn->tlsv1Conn));
   1344          
   1345           #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1346          
   1347                   if ((s2wCidList[cid].sslflag == TRUE))
   \                     ??AppS2wHal_NetTx_3:
   \   0000006E   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD127             BNE.N    ??AppS2wHal_NetTx_5
   1348           		{
   1349           			/*NOTE: IMP: The ssl can encode a max of 1338 bytes. Its beter to encode 1K at a time
   1350           			and send it. So we need a loop mechanism to send the incomming data in 1K encoded
   1351           			chunks....*/
   1352           			UINT32 outDataLen, u32NoOfBytesSent;
   1353           			UINT32 dataSent = 0;
   \   00000076   0x46AB             MOV      R11,R5
   1354           			UINT32 sendLen = 0;
   \   00000078   0xE002             B.N      ??AppS2wHal_NetTx_6
   1355           			while(len)
   1356           			{
   1357           				sendLen = (len > 1024)?1024:len;
   1358           #ifdef S2W_APP_SSL_PROVISION
   1359           				ULONG64 curTime;
   1360           				UINT32 diffTime, timeInMsec;
   1361          
   1362           				encryptStartTime = GsnSoftTmr_CurrentSystemTime();
   1363           #endif
   1364           				GsnSsl_Encode(s2wCidList[cid].ssl.sslConn, (UINT8 *)((UINT8*)buf + dataSent),
   1365           							  sendLen, &outDataBuf,&outDataLen);
   1366           #ifdef S2W_APP_SSL_PROVISION
   1367           				curTime  = GsnSoftTmr_CurrentSystemTime();
   1368           				diffTime = (curTime - encryptStartTime);
   1369           				timeInMsec =   diffTime/(TIMER_INTERRUPT_1_MS);
   1370           				S2w_Printf("\r\nSSL Tx Encryption Time in ms %d\r\n", timeInMsec);
   1371           #endif
   1372          
   1373           				u32NoOfBytesSent = send(s2wCidList[cid].sd, (const char*)outDataBuf,
   1374           										outDataLen, 0);
   1375          
   1376           				GsnSsl_Free(outDataBuf);
   1377          
   1378           				if ( outDataLen != u32NoOfBytesSent )
   1379           				{
   1380           					AppS2w_SslClose(cid);
   1381           					return S2W_FAILURE;
   1382           				}
   1383           				dataSent += sendLen;
   \                     ??AppS2wHal_NetTx_7:
   \   0000007A   0x44C3             ADD      R11,R8,R11
   1384           				len -= sendLen;
   \   0000007C   0xEBA7 0x0708      SUB      R7,R7,R8
   \                     ??AppS2wHal_NetTx_6:
   \   00000080   0xB367             CBZ.N    R7,??AppS2wHal_NetTx_4
   \   00000082   0xF5B7 0x6F80      CMP      R7,#+1024
   \   00000086   0xBF8C             ITE      HI 
   \   00000088   0xF44F 0x6880      MOVHI    R8,#+1024
   \   0000008C   0x46B8             MOVLS    R8,R7
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x1D26             ADDS     R6,R4,#+4
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0xAB02             ADD      R3,SP,#+8
   \   00000096   0x6A70             LDR      R0,[R6, #+36]
   \   00000098   0x4642             MOV      R2,R8
   \   0000009A   0xEB0B 0x0109      ADD      R1,R11,R9
   \   0000009E   0x.... 0x....      BL       GsnSsl_Encode
   \   000000A2   0x9A01             LDR      R2,[SP, #+4]
   \   000000A4   0x9902             LDR      R1,[SP, #+8]
   \   000000A6   0x69B0             LDR      R0,[R6, #+24]
   \   000000A8   0x2300             MOVS     R3,#+0
   \   000000AA   0x.... 0x....      BL       send
   \   000000AE   0x4606             MOV      R6,R0
   \   000000B0   0x9802             LDR      R0,[SP, #+8]
   \   000000B2   0x.... 0x....      BL       GsnSsl_Free
   \   000000B6   0x9801             LDR      R0,[SP, #+4]
   \   000000B8   0x42B0             CMP      R0,R6
   \   000000BA   0xD0DE             BEQ.N    ??AppS2wHal_NetTx_7
   \   000000BC   0x4650             MOV      R0,R10
   \   000000BE   0x.... 0x....      BL       AppS2w_SslClose
   \                     ??AppS2wHal_NetTx_1:
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE018             B.N      ??AppS2wHal_NetTx_8
   1385           			}
   1386           		}
   1387                   else
   1388          #endif
   1389                  {
   1390                     GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \                     ??AppS2wHal_NetTx_5:
   \   000000C6   0x.... 0x....      BL       ?Subroutine32
   1391                    
   1392          #ifdef S2W_IPv6_SUPPORT
   1393                  if(p->addrType & ADDR_TYPE_IPv6)
   1394                  {
   1395                    if (send(p->sd, buf, len, 0) < 0)
   1396                  {
   1397          	        /*GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1398          	        // if the auto connection is enabled do not print this message
   1399          	             if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   1400                 	      {
   1401                      			//S2w_Printf("send() failed: %d\r\n", 1);
   1402          			 }
   1403          		         GsnOsal_SemRelease(&s2wSyncSemID);
   1404                      		*/
   1405                      status = S2W_FAILURE;
   1406                  }
   1407                    
   1408                    
   1409                  }
   1410                  else
   1411          #endif //S2W_IPv6_SUPPORT 
   1412                  {
   1413                  if (send(p->sd, buf, len, 0) < 0)
   \                     ??CrossCallReturnLabel_80:
   \   000000CA   0x69E0             LDR      R0,[R4, #+28]
   \   000000CC   0x2300             MOVS     R3,#+0
   \   000000CE   0x463A             MOV      R2,R7
   \   000000D0   0x4649             MOV      R1,R9
   \   000000D2   0x.... 0x....      BL       send
   \                     ??AppS2wHal_NetTx_2:
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xBF48             IT       MI 
   \   000000DA   0x2501             MOVMI    R5,#+1
   1414                  {
   1415                      //GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1416                      //if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   1417                      //{
   1418                      //S2w_Printf("send() failed: %d\r\n", 1);
   1419          			//}
   1420                      //GsnOsal_SemRelease(&s2wSyncSemID);
   1421                      status = S2W_FAILURE;
   1422                  }
   1423          	}
   1424                  }
   1425                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   \                     ??AppS2wHal_NetTx_4:
   \   000000DC   0x200A             MOVS     R0,#+10
   \   000000DE   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1426          
   1427              }
   1428              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable75
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000EC   0x5C40             LDRB     R0,[R0, R1]
   \   000000EE   0x2802             CMP      R0,#+2
   \   000000F0   0xBF08             IT       EQ 
   \   000000F2   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1429              {
   1430                   s2wSpiFs_Flush();
   1431              }
   1432              return status;
   \   000000F6   0x4628             MOV      R0,R5
   \                     ??AppS2wHal_NetTx_8:
   \   000000F8   0x....             B.N      ?Subroutine1
   1433          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0x4651             MOV      R1,R10
   \   00000002   0x200A             MOVS     R0,#+10
   \   00000004   0x.... 0x....      B.W      GsnSq_TaskMonitorStart

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x2010             MOVS     R0,#+16
   \   00000002   0x9001             STR      R0,[SP, #+4]
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x463A             MOV      R2,R7
   \   0000000C   0x69E0             LDR      R0,[R4, #+28]
   \   0000000E   0x4649             MOV      R1,R9
   \   00000010   0x.... 0x....      B.W      sendto

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xB007             ADD      SP,SP,#+28
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1434          
   1435          
   1436          /**
   1437           ******************************************************************
   1438           * @brief S2w cid info get function.
   1439           *    This function get all info of the active active cids present.
   1440           *.@param cidInfo      - IN the cid info structure pointer.
   1441           * @param nos          - IN the address to which the number of active
   1442           *                           cids to be stored.
   1443           * @retval S2W_SUCCESS     - operation successfull.
   1444           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1445          PUBLIC UINT8
   1446          AppS2wHal_CidInfoGet(S2W_CID_INFO_T cidInfo[],UINT32* nos)
   1447          {
   \                     AppS2wHal_CidInfoGet:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   1448              UINT8 i=0,j=0;
   1449              struct sockaddr_in sockAddr;
   1450              INT32 len = sizeof(sockAddr), ret;
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   1451              for(i=0;i<MAX_CID_RANGE;i++)
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x.... 0x....      LDR.W    R11,??DataTable62
   1452              {
   1453                  if(s2wCidList[i].sd != CID_NOTINUSE) // valid cid
   \                     ??AppS2wHal_CidInfoGet_0:
   \   00000014   0xF44F 0x7094      MOV      R0,#+296
   \   00000018   0xFB00 0xF806      MUL      R8,R0,R6
   \   0000001C   0xEB08 0x040B      ADD      R4,R8,R11
   \   00000020   0x69E0             LDR      R0,[R4, #+28]
   \   00000022   0xF110 0x0F01      CMN      R0,#+1
   \   00000026   0xD02C             BEQ.N    ??AppS2wHal_CidInfoGet_1
   1454                  {
   1455                      cidInfo[j].cid = AppS2wHal_CidFind(s2wCidList[i].sd);
   \   00000028   0x210C             MOVS     R1,#+12
   \   0000002A   0xFB01 0xFA05      MUL      R10,R1,R5
   \   0000002E   0x9906             LDR      R1,[SP, #+24]
   \   00000030   0xEB0A 0x0701      ADD      R7,R10,R1
   \   00000034   0x.... 0x....      BL       AppS2wHal_CidFind
   \   00000038   0x72B8             STRB     R0,[R7, #+10]
   1456                      if(s2wCidList[i].localPort > 0)
   \   0000003A   0x8860             LDRH     R0,[R4, #+2]
   \   0000003C   0xB968             CBNZ.N   R0,??AppS2wHal_CidInfoGet_2
   1457                      {
   1458                          cidInfo[j].localPort = s2wCidList[i].localPort;
   1459                      }
   1460                      else
   1461                      {
   1462                          ret = getsockname(s2wCidList[i].sd, (struct sockaddr *)&sockAddr,
   1463                                       &len);
   1464                          if(ret < 0)
   \   0000003E   0x69E0             LDR      R0,[R4, #+28]
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      BL       getsockname
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD501             BPL.N    ??AppS2wHal_CidInfoGet_3
   1465                          {
   1466                              //AppS2wHal_NetClose(cid);
   1467                              return S2W_SOCKFAILURE;
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0xE01F             B.N      ??AppS2wHal_CidInfoGet_4
   1468                          }
   1469                          cidInfo[j].localPort = ntohs(sockAddr.sin_port);
   \                     ??AppS2wHal_CidInfoGet_3:
   \   00000050   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000054   0x0201             LSLS     R1,R0,#+8
   \   00000056   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \                     ??AppS2wHal_CidInfoGet_2:
   \   0000005A   0x8078             STRH     R0,[R7, #+2]
   1470                      }
   1471                      if (s2wCidList[i].conMode != S2W_NETDATA_MODE_SERVER)
   \   0000005C   0x7860             LDRB     R0,[R4, #+1]
   \   0000005E   0x2801             CMP      R0,#+1
   \   00000060   0xD004             BEQ.N    ??AppS2wHal_CidInfoGet_5
   1472                      {
   1473                          memcpy(cidInfo[j].remoteIp, s2wCidList[i].remoteIp,4);
   \   00000062   0x2204             MOVS     R2,#+4
   \   00000064   0x1DA1             ADDS     R1,R4,#+6
   \   00000066   0x1DB8             ADDS     R0,R7,#+6
   \   00000068   0x.... 0x....      BL       memcpy
   1474                      }
   1475                      cidInfo[j].remotePort = s2wCidList[i].remotePort;
   \                     ??AppS2wHal_CidInfoGet_5:
   \   0000006C   0x88A0             LDRH     R0,[R4, #+4]
   \   0000006E   0x80B8             STRH     R0,[R7, #+4]
   1476                      cidInfo[j].conType = s2wCidList[i].conType;
   1477                      cidInfo[j].conMode = s2wCidList[i].conMode;
   1478                      j = j+1;
   \   00000070   0x1C6D             ADDS     R5,R5,#+1
   \   00000072   0x9806             LDR      R0,[SP, #+24]
   \   00000074   0xF818 0x100B      LDRB     R1,[R8, R11]
   \   00000078   0xF80A 0x1000      STRB     R1,[R10, R0]
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0x7860             LDRB     R0,[R4, #+1]
   \   00000080   0x7078             STRB     R0,[R7, #+1]
   1479                  }
   1480          
   1481              }
   \                     ??AppS2wHal_CidInfoGet_1:
   \   00000082   0x1C76             ADDS     R6,R6,#+1
   \   00000084   0xB2F6             UXTB     R6,R6
   \   00000086   0x2E10             CMP      R6,#+16
   \   00000088   0xDBC4             BLT.N    ??AppS2wHal_CidInfoGet_0
   1482              *nos = j;
   \   0000008A   0xF8C9 0x5000      STR      R5,[R9, #+0]
   1483              return S2W_SUCCESS;
   \   0000008E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_CidInfoGet_4:
   \   00000090                      REQUIRE ?Subroutine1
   \   00000090                      ;; // Fall through to label ?Subroutine1
   1484          }
   1485          
   1486          
   1487          /**
   1488           ******************************************************************
   1489           * @ingroup S2w-Application
   1490           * @brief s2w network cid status get function.
   1491           *    This function returns the status of the socket corresponding to
   1492           *    the cid.
   1493           * @param cid - IN the cid number
   1494           * @retval TRUE  - the socket opened for that cid.
   1495           * @retval FALSE - the socket not open for that cid.
   1496           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1497          PUBLIC UINT8
   1498          AppS2wHal_NetIsCidOpen(UINT8 cid)
   1499          {
   1500              return !(cid >= MAX_CID_RANGE || s2wCidList[cid].sd == CID_NOTINUSE);
   \                     AppS2wHal_NetIsCidOpen:
   \   00000000   0x2810             CMP      R0,#+16
   \   00000002   0xDA0B             BGE.N    ??AppS2wHal_NetIsCidOpen_0
   \   00000004   0xF44F 0x7194      MOV      R1,#+296
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable69_1
   \   0000000C   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000010   0x69C0             LDR      R0,[R0, #+28]
   \   00000012   0xF110 0x0F01      CMN      R0,#+1
   \   00000016   0xD001             BEQ.N    ??AppS2wHal_NetIsCidOpen_0
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x4770             BX       LR
   \                     ??AppS2wHal_NetIsCidOpen_0:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x4770             BX       LR               ;; return
   1501          }
   1502          
   1503          
   1504          /**
   1505           ******************************************************************
   1506           * @ingroup S2w-Application
   1507           * @brief s2w Network initialize function
   1508           *    This function create the network recv task and create queue for that
   1509                task.
   1510           * @retval VOID - None.
   1511           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1512          PUBLIC VOID
   1513          AppS2wHal_NetInit(VOID)
   1514          {
   \                     AppS2wHal_NetInit:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   1515              UINT32 i;
   1516          
   1517              /* Mark all socket descriptor as 'not in use'.
   1518               */
   1519              for (i = 0; i < MAX_CID_RANGE; i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R4,??DataTable62
   1520              {
   1521                  s2wCidList[i].sd = CID_NOTINUSE;
   \                     ??AppS2wHal_NetInit_0:
   \   00000006   0xF44F 0x7194      MOV      R1,#+296
   \   0000000A   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   0000000E   0xF04F 0x32FF      MOV      R2,#-1
   \   00000012   0x61CA             STR      R2,[R1, #+28]
   1522                  s2wCidList[i].httpflag = 0;
   1523                  s2wCidList[i].localPort = 0;
   1524              }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF881 0x202F      STRB     R2,[R1, #+47]
   \   0000001C   0x804A             STRH     R2,[R1, #+2]
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xD3F1             BCC.N    ??AppS2wHal_NetInit_0
   1525              s2wappMainTaskCtxt->lastCidCreated = MAX_CID_RANGE-1;
   \   00000022   0x.... 0x....      LDR.W    R5,??DataTable70
   1526          
   1527              //AppS2wHal_TimerInit(&s2wTcpConnectTimer, AppS2wHal_ConnectTimeout, NULL);
   1528              //gh_eflags_create(&s2wTcpConnectEflags);
   1529          
   1530              GsnOsal_SemCreate  ( &s2wUdpSocketCloseSem, 0 );
   \   00000026   0x.... 0x....      LDR.W    R6,??DataTable75_1
   \   0000002A   0x6829             LDR      R1,[R5, #+0]
   \   0000002C   0xF647 0x70E8      MOVW     R0,#+32744
   \   00000030   0x220F             MOVS     R2,#+15
   \   00000032   0x5442             STRB     R2,[R0, R1]
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       GsnOsal_SemCreate
   1531              //AppS2wHal_TimerInit(&s2wUdpCloseTimer, AppS2wHal_CloseTimeout, NULL);
   1532          
   1533              /* create the queue for the network receive task
   1534               */
   1535              GsnOsal_QueueCreate(&s2wNetQueue, 2,
   1536                                    (UINT8*)s2wNetQueueBuffer,
   1537                                    (sizeof(s2wNetQueueBuffer)));
   \   0000003C   0xF44F 0x7000      MOV      R0,#+512
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0xF504 0x530A      ADD      R3,R4,#+8832
   \   00000046   0x2202             MOVS     R2,#+2
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xF106 0x001C      ADD      R0,R6,#+28
   \   0000004E   0x.... 0x....      BL       _tx_queue_create
   1538          
   1539              /* create the network  receive task
   1540               */
   1541          
   1542              GsnOsal_ThreadCreate(AppS2wHal_NetRecvTask,s2wappMainTaskCtxt,
   1543                                          &s2wappMainTaskCtxt->s2wNetRxTask,
   1544                                          "s2wNetRecvtask",
   1545                                          APP_CFG_NET_RX_THREAD_PRIORITY,
   1546                                          s2wNetRecvTaskStack,
   1547                                          sizeof(s2wNetRecvTaskStack),
   1548                                          GSN_OSAL_THREAD_INITIAL_READY);
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9003             STR      R0,[SP, #+12]
   \   00000056   0xF44F 0x5080      MOV      R0,#+4096
   \   0000005A   0x9002             STR      R0,[SP, #+8]
   \   0000005C   0xF504 0x5094      ADD      R0,R4,#+4736
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x6829             LDR      R1,[R5, #+0]
   \   00000066   0x.... 0x....      ADR.W    R3,`?<Constant "s2wNetRecvtask">`
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0xF501 0x42D0      ADD      R2,R1,#+26624
   \   00000070   0x32DC             ADDS     R2,R2,#+220
   \   00000072   0x.... 0x....      ADR.W    R0,AppS2wHal_NetRecvTask
   \   00000076   0x.... 0x....      BL       GsnOsal_ThreadCreate
   1549          
   1550          }
   \   0000007A   0xBD7F             POP      {R0-R6,PC}       ;; return
   1551          
   1552          
   1553          /**
   1554           ******************************************************************
   1555           * @ingroup S2w-Application
   1556           * @brief s2w Data receive task.
   1557           *    This task waits on a message queue.  The network stack callback function
   1558           *    will, when the event that data is available on a socket is received, send a
   1559           *    message to this message queue containing the socket descriptor.  This task
   1560           *    will receive the data from the socket and pass it on to the Serial2WiFi
   1561           *    core, which will output the data on the serial port.
   1562           *
   1563           *   The purpose of this task is to avoid doing too much work in the
   1564           *   network stack's callback function.
   1565           ******************************************************************/
   1566          extern GSN_OSAL_QUEUE_T MQTT_RECEIVE_QUEUE;

   \                                 In section .text, align 4, keep-with-next
   1567          VOID
   1568          AppS2wHal_NetRecvTask(UINT32 ctx)
   1569          {
   \                     AppS2wHal_NetRecvTask:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   1570              INT32 dataLen=0,buffOfset,totalBytesToSnd;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9003             STR      R0,[SP, #+12]
   1571              UINT8 cid,newcid,status;
   1572              INT32 new_sd;
   1573              struct sockaddr_in addr;
   1574          #ifdef S2W_IPv6_SUPPORT
   1575              struct sockaddr_in6 fromAddr;
   1576              INT32 addrlen1 = sizeof(struct sockaddr_in6);
   1577              S2W_IPv6ADDR_T ipv6;
   1578          
   1579          #endif
   1580              INT32 addrlen = sizeof(struct sockaddr_in);//, ret;
   1581              
   1582              UINT16 port;
   1583              S2W_IPADDR_T ip;
   1584              S2W_MSG_T recvMsg;
   1585              UINT8 *rxDataBuf;
   1586              INT32 semStat;
   1587              UINT32 sentLen=0;
   1588          
   1589              //UINT8 status, *rcvBuf = NULL;
   1590              //UINT32 rcvLen;
   1591              INT32 ret;
   1592          #ifdef S2W_THROUGHPUT_TEST                       	
   1593          	UINT32 *seqNo;	
   1594          	GSN_SYSTEM_TIME_T endTime,totalTime;	
   1595          #endif	
   1596          #ifdef S2W_HTTPC_SUPPORT
   1597              ttHttpcConEntryPtr      conEntryPtr;
   1598          #ifndef S2W_IP2WIFI_SUPPORT
   1599          #ifdef S2W_HTTPS_SUPPORT
   1600          
   1601              UINT8 *rcvBuf = NULL;
   1602              UINT32 rcvLen;
   1603          #endif
   1604          #endif
   1605          #endif
   1606              //INT32 semStat;
   1607          	GSN_STATUS sslRet=GSN_FAILURE;
   1608          #ifndef S2W_IP2WIFI_SUPPORT
   1609              INT32 sslDataRxTimeout=5;
   \   0000000A   0xF04F 0x0905      MOV      R9,#+5
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0x900C             STR      R0,[SP, #+48]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x900A             STR      R0,[SP, #+40]
   \   00000016   0xF04F 0x4000      MOV      R0,#-2147483648
   \   0000001A   0x9009             STR      R0,[SP, #+36]
   \   0000001C   0xE131             B.N      ??AppS2wHal_NetRecvTask_0
   1610          #endif
   1611              UINT8 socketRecvLoopCount=0;
   1612          	
   1613          	UINT8* mqtt_temp;
   1614              while (1)
   1615          
   1616              {
   1617                  /* Task done with job, stop monitoring */
   1618                  /*GsnSq_TaskMonitorEnd( APP_SQ_NET_RX_TASK_ID);*/
   1619          
   1620                  GsnOsal_QueueGet(&s2wNetQueue, (UINT8 *)&recvMsg, GSN_OSAL_WAIT_FOREVER);
   1621                  /* Task starting to process a job, start monitoring */
   1622                  switch (recvMsg.msgType)
   1623                  {
   1624          			case S2W_RECV_TYPE_SOCK_DATA_DISCONNECT:
   1625                      case S2W_RECV_TYPE_SOCKET:
   1626                      {
   1627                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   1628                          if (cid == INVALID_CID)
   1629                          {
   1630                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   1631                              	continue;
   1632          					#else
   1633          						break;
   1634          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   1635                          }
   1636                          S2W_ASSERT(s2wCidList[cid].conType != 0);
   1637          
   1638          					INT32 intrStatus;
   1639          
   1640          					intrStatus = GsnOsal_IntrDisable();
   1641          					s2wCidList[cid].s2wSockDataPending = 0;
   1642          					/*re-enable all interrupts */
   1643                              GsnOsal_IntrEnable(intrStatus );
   1644                              socketRecvLoopCount=0;
   1645                          do
   1646                          {
   1647                              socketRecvLoopCount++;
   1648                              GsnSq_TaskMonitorStart(APP_CFG_SQ_NETRX_TASK_ID, cid);
   1649                              if (s2wCidList[cid].conType == UDP)
   1650                              {
   1651          #ifdef S2W_IPv6_SUPPORT                              
   1652                                if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1653                                  dataLen = recvfrom(recvMsg.rData.dataSock,(char *)s2wRxBuf,sizeof(s2wRxBuf), 0,(struct sockaddr *) &fromAddr, &addrlen1);
   1654                                else
   1655          #endif //S2W_IPv6_SUPPORT
   1656          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1657                        			if (s2wCidList[cid].sslflag == TRUE /*&& (dataLen > 0)*/)
   1658                                  {
   1659                                      dataLen = sizeof(s2wRxBuf);
   1660                                      addrlen = sizeof(struct sockaddr_in);
   1661                        			    GsnDtls_Receive( (GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn,
   1662                        				    /*rxDataBuf*/s2wRxBuf, (UINT32*)&dataLen, 0/*MSG_DONTWAIT*/,
   1663                        				    (struct sockaddr *)&addr, &addrlen );
   1664                        			}
   1665                        			else
   1666          #endif
   1667                                  dataLen = recvfrom(recvMsg.rData.dataSock, (char *)s2wRxBuf,
   1668                                            sizeof(s2wRxBuf), 0,
   1669                                            (struct sockaddr *)&addr, &addrlen);
   1670          
   1671                                  if (dataLen > 0)
   1672                                  {
   1673                                      if( s2wCidList[cid].conMode == S2W_NETDATA_MODE_SERVER)
   1674                                      {
   1675          #ifdef S2W_IPv6_SUPPORT                              
   1676                                        if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1677                                        {
   1678                                          //port = ntohs(fromAddr.sin6_port);
   1679                                          port = htons(fromAddr.sin6_port);
   1680                                          memcpy(ipv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   1681                                          GSN_IPv6_CHANGE_ENDIAN((UINT32 *)ipv6);
   1682                                        }
   1683                                        else
   1684          #endif //S2W_IPv6_SUPPORT                                
   1685                                        {                                
   1686                                          port = htons(addr.sin_port);
   1687                                          memcpy(ip, &(addr.sin_addr.s_addr), sizeof(ip));
   1688                                          *(ULONG*)ip = htonl(*(ULONG*)ip);
   1689                                        }
   1690                                      }
   1691                                      else  /* Client  */
   1692                                      {
   1693          #ifdef S2W_IPv6_SUPPORT
   1694                                        if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)  /* IPv6 */
   1695                                        {
   1696                                          //if(!memcmp(s2wCidList[cid].remoteIpv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(fromAddr.sin6_addr._S6_un._S6_u32)))
   1697                                          {
   1698                                            //port = ntohs(fromAddr.sin6_port);
   1699                                            port = htons(fromAddr.sin6_port);
   1700                                            memcpy(ipv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   1701                                            GSN_IPv6_CHANGE_ENDIAN(ipv6);
   1702                                          }
   1703                                                                          
   1704                                        }
   1705                                        else 
   1706                                        
   1707          #endif  //S2W_IPv6_SUPPORT
   1708                                        {
   1709          
   1710                                              //port = ntohs(addr.sin_port);
   1711                                          port = 0;
   \                     ??AppS2wHal_NetRecvTask_1:
   \   0000001E   0x2400             MOVS     R4,#+0
   1712                                              //memcpy(ip, &(addr.sin_addr.s_addr), sizeof(ip));
   1713                                              //*(ULONG*)ip = htonl(*(ULONG*)ip);
   1714                                          *(ULONG*)ip=0;
   \   00000020   0x9402             STR      R4,[SP, #+8]
   1715                                          }
   1716          
   1717                                        }
   1718                                      }
   1719                                  }
   1720                              else
   1721                              {
   1722          #ifndef S2W_IP2WIFI_SUPPORT
   1723                                  /*dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf,
   1724                                  sizeof(s2wRxBuf), MSG_DONTWAIT);*/
   1725                                  port = 0;
   1726          
   1727                                  if (s2wCidList[cid].sslflag == TRUE /*&& (dataLen > 0)*/)
   1728                                  {
   1729          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1730          //#if 0
   1731                                      s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   1732          #ifdef S2W_SSL_SERVER_SUPPORT
   1733          							if(TRUE == s2wCidList[cid].sslRemoteCliConctng)
   1734          							{
   1735          								/* a Remote client is setting up the ssl connection with tcp server.
   1736          								  ssl connenction is done in WDD task context*/
   1737          								//UINT32 msg;
   1738          								GSN_SSL_RECV_PARAMS_T sslRecvParams;
   1739          								sslRecvParams.pSslConn = s2wCidList[cid].ssl.sslConn;
   1740          								sslRecvParams.sockDes = s2wCidList[cid].sd;
   1741          								sslRecvParams.rxDataBuf = &rxDataBuf;
   1742          								sslRecvParams.rxDataLen = (UINT32 *)&dataLen;
   1743          								sslRecvParams.timeOut = 5;
   1744          								//GsnOsal_SemCreate(&s2wCidList[cid].s2wSslRecvInProgress, 0);
   1745          								s2wCidList[cid].pSslRecvParams = &sslRecvParams;
   1746          								//msg = (S2W_MOD_NOTIF_CONN_START + cid);
   1747          								//GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   1748          								//GsnOsal_SemAcquire(&s2wCidList[cid].s2wSslRecvInProgress,GSN_OSAL_WAIT_FOREVER);
   1749          								ret = s2wCidList[cid].recvStatus;
   1750          								//GsnOsal_SemDelete(&s2wCidList[cid].s2wSslRecvInProgress);
   1751          								port = htons(s2wCidList[cid].remotePort);
   1752          								memcpy(ip, &(s2wCidList[cid].remoteIp), sizeof(ip));
   1753          								*(UINT32*)ip = htonl(*(UINT32*)ip);
   1754          								ret = AppS2wProcess_NetAccept(s2wCidList[cid].serverCid,
   1755          															  cid, ip,port);
   1756          						        if (ret != S2W_SUCCESS)
   1757          						        {
   1758          						            soc_close(s2wCidList[cid].sd);
   1759          						            return;
   1760          						        }
   1761          #if 1
   1762                                      	ret = GsnSsl_DataReceive(s2wCidList[cid].ssl.sslConn,
   1763                                                                   s2wCidList[cid].sd,
   1764                                                                   &rxDataBuf,
   1765                                                                   (UINT32 *)&dataLen,
   1766                                                                   5);
   1767          #endif
   1768          								s2wCidList[cid].sslRemoteCliConctng = FALSE;
   1769          							}
   1770          							else
   1771          #endif
   1772          							{
   1773          								if(0 == sslDataRxTimeout)
   1774          								{
   1775          									/* if the timeout is zero, make the socket as non blocking*/
   1776          									fcntl(s2wCidList[cid].sd, F_SETFL, O_NONBLOCK);
   1777          								}
   1778                                          
   1779                                      	sslRet = GsnSsl_DataReceive(s2wCidList[cid].ssl.sslConn,
   1780                                                                   s2wCidList[cid].sd,
   1781                                                                   &rxDataBuf,
   1782                                                                   (UINT32 *)&dataLen,
   1783                                                                   sslDataRxTimeout);
   1784                                                                   
   1785                                          
   1786          								/*if(rxDataBuf[0] == 0x20 || rxDataBuf[0] == 0x40 || rxDataBuf[0] == 0x50 || rxDataBuf[0] == 0x70 || rxDataBuf[0] == 0xC0 || rxDataBuf[0] == 0xE0)						 
   1787          								{
   1788                                            S2w_Printf("\r\nSSL Data Receive in receive task : %X %X %X %X",rxDataBuf[0],rxDataBuf[1],rxDataBuf[2],rxDataBuf[3]);
   1789          								  status = tx_queue_send(&MQTT_RECEIVE_QUEUE,rxDataBuf,TX_NO_WAIT);
   1790          								}*/
   1791          								if(0 == sslDataRxTimeout)
   1792          								{
   1793          									/*restore back to blocking*/
   1794          									fcntl(s2wCidList[cid].sd, F_SETFL, 0);
   1795          								}
   1796          							}
   1797                                      if(sslRet != GSN_SUCCESS)
   1798                                      {/*Error!*/
   1799                                      	dataLen = 0;/*Need to set explicitely as DataReceive() does not do so*/
   1800                                      }
   1801          							sslDataRxTimeout=1;
   1802          #endif
   1803                                  }
   1804                                  else if(s2wCidList[cid].httpflag ==  1)
   1805                                  { /* This section should be executed when http send not in progress.
   1806                                       This is ensured by opInProgress semophore */
   1807          #ifdef S2W_HTTPS_SUPPORT
   1808                                      conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   1809                                      semStat = GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_NO_WAIT);
   1810                                      if((semStat == GSN_OSAL_SUCCESS) && (conEntryPtr->hconHttpType == GSN_HTTPS))
   1811                                      {
   1812                                          /* http send not in progress. Docode the data recieved */
   1813                                          ret = GsnHttps_DataReceive(conEntryPtr->hConSsl, s2wCidList[cid].sd, &rcvBuf, &rcvLen, 5);
   1814                                          if(rcvBuf != NULL)
   1815                                          {
   1816                                              GsnSsl_Free(rcvBuf);
   1817                                          }
   1818                                          if(ret == GSN_SSL_CLOSE_ALERT)
   1819                                          {
   1820                                              /* Recieved data is a Close alert. Send the alert back to server */
   1821                                              GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   1822          
   1823                                          }
   1824          
   1825                                      }
   1826                                      dataLen = 0;
   1827                                      if(semStat == GSN_OSAL_SUCCESS)
   1828                                      {
   1829                                          GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   1830                                      }
   1831          #endif
   1832                                  }
   1833          
   1834                                  else
   1835                                  {
   1836                                    
   1837          #ifdef S2W_IPv6_SUPPORT
   1838                                    if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1839                                      dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf,sizeof(s2wRxBuf), 0);
   1840                                    else
   1841          #endif //S2W_IPv6_SUPPORT 
   1842          						  {
   1843                                      dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf,
   1844                                                sizeof(s2wRxBuf), 0);
   1845          							/*if(s2wRxBuf[0] == 0x20 || s2wRxBuf[0] == 0x40 || s2wRxBuf[0] == 0x50 || s2wRxBuf[0] == 0x70 || s2wRxBuf[0] == 0xC0 || s2wRxBuf[0] == 0xE0)						 
   1846          							{
   1847                                            S2w_Printf("\r\nData Receive in receive task 1 : %X %X %X %X",s2wRxBuf[0],s2wRxBuf[1],s2wRxBuf[2],s2wRxBuf[3]);
   1848          								  status = tx_queue_send(&MQTT_RECEIVE_QUEUE,s2wRxBuf,TX_NO_WAIT);
   1849          							}*/
   1850          						  }
   1851                                  }
   1852          #endif
   1853                              }
   1854                              if (dataLen <= 0)
   1855                              {
   1856                                  S2w_Debug("Data len: %d\r\n", dataLen);
   1857          						if(s2wCidList[cid].sslflag == TRUE && (sslRet == GSN_SUCCESS))
   1858          							dataLen=1;
   1859                              }
   1860                              else
   1861                              {
   1862                                  if((s2wCidList[cid].sslflag == TRUE) && (s2wCidList[cid].conType == TCP))
   \                     ??AppS2wHal_NetRecvTask_2:
   \   00000022   0xF898 0x002C      LDRB     R0,[R8, #+44]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xBF01             ITTTT    EQ 
   \   0000002A   0x9808             LDREQ    R0,[SP, #+32]
   \   0000002C   0x.... 0x....      LDREQ.W  R1,??DataTable69_1
   \   00000030   0x5C40             LDRBEQ   R0,[R0, R1]
   \   00000032   0x2802             CMPEQ    R0,#+2
   \   00000034   0xF040 0x80C2      BNE.W    ??AppS2wHal_NetRecvTask_3
   1863                                  {
   1864                                  	totalBytesToSnd = dataLen;
   \   00000038   0x9E03             LDR      R6,[SP, #+12]
   1865                                  	buffOfset=0;
   \   0000003A   0xF04F 0x0B00      MOV      R11,#+0
   1866                                 		while(totalBytesToSnd)
   1867                                 		{
   1868                                 			GsnSq_TaskMonitorStop( APP_CFG_SQ_NETRX_TASK_ID);
   \                     ??AppS2wHal_NetRecvTask_4:
   \   0000003E   0x2009             MOVS     R0,#+9
   \   00000040   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1869          								GsnSq_TaskMonitorStart(APP_CFG_SQ_NETRX_TASK_ID, cid);
   \   00000044   0x4651             MOV      R1,R10
   \   00000046   0x2009             MOVS     R0,#+9
   \   00000048   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   1870          								sentLen =totalBytesToSnd >= S2W_RX_BUF_SIZE? S2W_RX_BUF_SIZE:totalBytesToSnd;
   \   0000004C   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000050   0x4286             CMP      R6,R0
   \   00000052   0xBFAC             ITE      GE 
   \   00000054   0x9001             STRGE    R0,[SP, #+4]
   \   00000056   0x9601             STRLT    R6,[SP, #+4]
   \   00000058   0xE0A0             B.N      ??AppS2wHal_NetRecvTask_5
   \                     ??AppS2wHal_NetRecvTask_6:
   \   0000005A   0xF898 0x002C      LDRB     R0,[R8, #+44]
   \   0000005E   0x2400             MOVS     R4,#+0
   \   00000060   0x2801             CMP      R0,#+1
   \   00000062   0xD15A             BNE.N    ??AppS2wHal_NetRecvTask_7
   \   00000064   0x6A78             LDR      R0,[R7, #+36]
   \   00000066   0x8204             STRH     R4,[R0, #+16]
   \   00000068   0x7868             LDRB     R0,[R5, #+1]
   \   0000006A   0x2801             CMP      R0,#+1
   \   0000006C   0xD131             BNE.N    ??AppS2wHal_NetRecvTask_8
   \   0000006E   0x6A78             LDR      R0,[R7, #+36]
   \   00000070   0x900D             STR      R0,[SP, #+52]
   \   00000072   0x2204             MOVS     R2,#+4
   \   00000074   0x69B8             LDR      R0,[R7, #+24]
   \   00000076   0x900E             STR      R0,[SP, #+56]
   \   00000078   0xA807             ADD      R0,SP,#+28
   \   0000007A   0x900F             STR      R0,[SP, #+60]
   \   0000007C   0xA803             ADD      R0,SP,#+12
   \   0000007E   0x9010             STR      R0,[SP, #+64]
   \   00000080   0x2005             MOVS     R0,#+5
   \   00000082   0x9011             STR      R0,[SP, #+68]
   \   00000084   0xA80D             ADD      R0,SP,#+52
   \   00000086   0xF8C8 0x0110      STR      R0,[R8, #+272]
   \   0000008A   0xF8B8 0x0004      LDRH     R0,[R8, #+4]
   \   0000008E   0x0201             LSLS     R1,R0,#+8
   \   00000090   0xEA41 0x2410      ORR      R4,R1,R0, LSR #+8
   \   00000094   0xF108 0x0106      ADD      R1,R8,#+6
   \   00000098   0xA802             ADD      R0,SP,#+8
   \   0000009A   0x.... 0x....      BL       memcpy
   \   0000009E   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_77:
   \   000000A2   0xB2A3             UXTH     R3,R4
   \   000000A4   0x78A8             LDRB     R0,[R5, #+2]
   \   000000A6   0xAA02             ADD      R2,SP,#+8
   \   000000A8   0x4651             MOV      R1,R10
   \   000000AA   0x.... 0x....      BL       AppS2wProcess_NetAccept
   \   000000AE   0xB128             CBZ.N    R0,??AppS2wHal_NetRecvTask_9
   \   000000B0   0x69B8             LDR      R0,[R7, #+24]
   \   000000B2   0x.... 0x....      BL       soc_close
   \   000000B6   0xB017             ADD      SP,SP,#+92
   \   000000B8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??AppS2wHal_NetRecvTask_9:
   \   000000BC   0x2005             MOVS     R0,#+5
   \   000000BE   0x9000             STR      R0,[SP, #+0]
   \   000000C0   0xAB03             ADD      R3,SP,#+12
   \   000000C2   0x69B9             LDR      R1,[R7, #+24]
   \   000000C4   0x6A78             LDR      R0,[R7, #+36]
   \   000000C6   0xAA07             ADD      R2,SP,#+28
   \   000000C8   0x.... 0x....      BL       GsnSsl_DataReceive
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x7068             STRB     R0,[R5, #+1]
   \   000000D0   0xE019             B.N      ??AppS2wHal_NetRecvTask_10
   \                     ??AppS2wHal_NetRecvTask_8:
   \   000000D2   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000D6   0xD105             BNE.N    ??AppS2wHal_NetRecvTask_11
   \   000000D8   0xF44F 0x4280      MOV      R2,#+16384
   \   000000DC   0x69B8             LDR      R0,[R7, #+24]
   \   000000DE   0x2104             MOVS     R1,#+4
   \   000000E0   0x.... 0x....      BL       fcntl
   \                     ??AppS2wHal_NetRecvTask_11:
   \   000000E4   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   000000E8   0x69B9             LDR      R1,[R7, #+24]
   \   000000EA   0x6A78             LDR      R0,[R7, #+36]
   \   000000EC   0xAB03             ADD      R3,SP,#+12
   \   000000EE   0xAA07             ADD      R2,SP,#+28
   \   000000F0   0x.... 0x....      BL       GsnSsl_DataReceive
   \   000000F4   0x9009             STR      R0,[SP, #+36]
   \   000000F6   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000FA   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_10
   \   000000FC   0x69B8             LDR      R0,[R7, #+24]
   \   000000FE   0x2200             MOVS     R2,#+0
   \   00000100   0x2104             MOVS     R1,#+4
   \   00000102   0x.... 0x....      BL       fcntl
   \                     ??AppS2wHal_NetRecvTask_10:
   \   00000106   0x9809             LDR      R0,[SP, #+36]
   \   00000108   0xB120             CBZ.N    R0,??AppS2wHal_NetRecvTask_12
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x9003             STR      R0,[SP, #+12]
   \   0000010E   0xF04F 0x0901      MOV      R9,#+1
   \   00000112   0xE095             B.N      ??CrossCallReturnLabel_108
   \                     ??AppS2wHal_NetRecvTask_12:
   \   00000114   0xF04F 0x0901      MOV      R9,#+1
   \   00000118   0xE032             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_7:
   \   0000011A   0x78E8             LDRB     R0,[R5, #+3]
   \   0000011C   0x2801             CMP      R0,#+1
   \   0000011E   0xD126             BNE.N    ??AppS2wHal_NetRecvTask_14
   \   00000120   0x68A8             LDR      R0,[R5, #+8]
   \   00000122   0xF850 0x6B30      LDR      R6,[R0], #+48
   \   00000126   0x2100             MOVS     R1,#+0
   \   00000128   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   0000012C   0xB9E8             CBNZ.N   R0,??AppS2wHal_NetRecvTask_15
   \   0000012E   0xF8D6 0x00BC      LDR      R0,[R6, #+188]
   \   00000132   0x2801             CMP      R0,#+1
   \   00000134   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_16
   \                     ??AppS2wHal_NetRecvTask_17:
   \   00000136   0x9403             STR      R4,[SP, #+12]
   \   00000138   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_86:
   \   0000013C   0xE020             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_16:
   \   0000013E   0x2005             MOVS     R0,#+5
   \   00000140   0x9000             STR      R0,[SP, #+0]
   \   00000142   0xAB0B             ADD      R3,SP,#+44
   \   00000144   0x69B9             LDR      R1,[R7, #+24]
   \   00000146   0xF8D6 0x00B8      LDR      R0,[R6, #+184]
   \   0000014A   0xAA0A             ADD      R2,SP,#+40
   \   0000014C   0x.... 0x....      BL       GsnHttps_DataReceive
   \   00000150   0x4606             MOV      R6,R0
   \   00000152   0x980A             LDR      R0,[SP, #+40]
   \   00000154   0xB108             CBZ.N    R0,??AppS2wHal_NetRecvTask_18
   \   00000156   0x.... 0x....      BL       GsnSsl_Free
   \                     ??AppS2wHal_NetRecvTask_18:
   \   0000015A   0x.... 0x....      LDR.W    R0,??DataTable77_1  ;; 0xb0000600
   \   0000015E   0x4286             CMP      R6,R0
   \   00000160   0xD1E9             BNE.N    ??AppS2wHal_NetRecvTask_17
   \   00000162   0x68A8             LDR      R0,[R5, #+8]
   \   00000164   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_107:
   \   00000168   0xE7E5             B.N      ??AppS2wHal_NetRecvTask_17
   \                     ??AppS2wHal_NetRecvTask_15:
   \   0000016A   0x9403             STR      R4,[SP, #+12]
   \   0000016C   0xE00C             B.N      ??AppS2wHal_NetRecvTask_19
   \                     ??AppS2wHal_NetRecvTask_14:
   \   0000016E   0x9805             LDR      R0,[SP, #+20]
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable78
   \   00000174   0x2300             MOVS     R3,#+0
   \   00000176   0xF240 0x52DC      MOVW     R2,#+1500
   \   0000017A   0x.... 0x....      BL       recv
   \   0000017E   0x9003             STR      R0,[SP, #+12]
   \                     ??AppS2wHal_NetRecvTask_13:
   \   00000180   0x9803             LDR      R0,[SP, #+12]
   \   00000182   0x2801             CMP      R0,#+1
   \   00000184   0xF6BF 0xAF4D      BGE.W    ??AppS2wHal_NetRecvTask_2
   \                     ??AppS2wHal_NetRecvTask_19:
   \   00000188   0xF898 0x002C      LDRB     R0,[R8, #+44]
   \   0000018C   0x2801             CMP      R0,#+1
   \   0000018E   0xBF04             ITT      EQ 
   \   00000190   0x9809             LDREQ    R0,[SP, #+36]
   \   00000192   0x2800             CMPEQ    R0,#+0
   \   00000194   0xD154             BNE.N    ??CrossCallReturnLabel_108
   \   00000196   0x2001             MOVS     R0,#+1
   \   00000198   0x9003             STR      R0,[SP, #+12]
   \   0000019A   0xE051             B.N      ??CrossCallReturnLabel_108
   1871                                  		AppS2wProcess_NetRx(cid, (rxDataBuf+buffOfset), sentLen, 
   1872          														(UINT8*)ip, port);
   \                     ??AppS2wHal_NetRecvTask_5:
   \   0000019C   0x9807             LDR      R0,[SP, #+28]
   \   0000019E   0x9A01             LDR      R2,[SP, #+4]
   \   000001A0   0xB2A4             UXTH     R4,R4
   \   000001A2   0xEB0B 0x0100      ADD      R1,R11,R0
   \   000001A6   0x.... 0x....      BL       ?Subroutine41
   1873            								buffOfset += sentLen;
   \                     ??CrossCallReturnLabel_109:
   \   000001AA   0x9801             LDR      R0,[SP, #+4]
   \   000001AC   0x4483             ADD      R11,R0,R11
   1874          								totalBytesToSnd -= sentLen;                        		
   \   000001AE   0x1A36             SUBS     R6,R6,R0
   1875                                  	}
   \   000001B0   0xF47F 0xAF45      BNE.W    ??AppS2wHal_NetRecvTask_4
   1876                                      GsnSsl_Free(rxDataBuf);
   \   000001B4   0x9807             LDR      R0,[SP, #+28]
   \   000001B6   0x.... 0x....      BL       GsnSsl_Free
   \   000001BA   0xE041             B.N      ??CrossCallReturnLabel_108
   1877                                  }
   \                     ??AppS2wHal_NetRecvTask_3:
   \   000001BC   0x.... 0x....      LDR.W    R0,??DataTable78
   \   000001C0   0x7800             LDRB     R0,[R0, #+0]
   \   000001C2   0x2820             CMP      R0,#+32
   \   000001C4   0xBF18             IT       NE 
   \   000001C6   0x2840             CMPNE    R0,#+64
   \   000001C8   0xD007             BEQ.N    ??AppS2wHal_NetRecvTask_20
   \   000001CA   0x2850             CMP      R0,#+80
   \   000001CC   0xBF18             IT       NE 
   \   000001CE   0x2870             CMPNE    R0,#+112
   \   000001D0   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_20
   \   000001D2   0x28C0             CMP      R0,#+192
   \   000001D4   0xBF18             IT       NE 
   \   000001D6   0x28E0             CMPNE    R0,#+224
   \   000001D8   0xD12C             BNE.N    ??AppS2wHal_NetRecvTask_21
   1878          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1879                                  else if((s2wCidList[cid].sslflag == TRUE) && (s2wCidList[cid].conType == UDP))
   1880                                  {
   1881                                      /* For DTLS client*/
   1882                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ip, port);
   1883                                      dataLen = 0;
   1884          							GsnSsl_Free(rxDataBuf);
   1885                                  }
   1886          #endif
   1887                                  else
   1888                                  {
   1889          #ifdef S2W_THROUGHPUT_TEST                       
   1890                                  	if(s2wCidList[cid].tpTestInProgress == 0)	
   1891                                  	{
   1892          #endif                        	
   1893          #ifdef S2W_IPv6_SUPPORT
   1894                                    if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1895                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ipv6, port);
   1896                                    else
   1897          						  
   1898          #endif
   1899          						  {
   1900          							if(s2wRxBuf[0] == 0x20 || s2wRxBuf[0] == 0x40 || s2wRxBuf[0] == 0x50 || s2wRxBuf[0] == 0x70 || s2wRxBuf[0] == 0xC0 || s2wRxBuf[0] == 0xE0)						 
   1901          							{
   1902                                           
   1903          								  mqtt_temp = malloc(4);
   \                     ??AppS2wHal_NetRecvTask_20:
   \   000001DA   0x2004             MOVS     R0,#+4
   \   000001DC   0x.... 0x....      BL       malloc
   \   000001E0   0x4606             MOV      R6,R0
   1904          								  memset(mqtt_temp,0,4);
   \   000001E2   0x2204             MOVS     R2,#+4
   \   000001E4   0x2100             MOVS     R1,#+0
   \   000001E6   0x.... 0x....      BL       memset
   1905          								  memcpy(mqtt_temp,s2wRxBuf,4);
   \   000001EA   0x2204             MOVS     R2,#+4
   \   000001EC   0x.... 0x....      LDR.W    R1,??DataTable78
   \   000001F0   0x4630             MOV      R0,R6
   \   000001F2   0x.... 0x....      BL       memcpy
   1906          								  //status = tx_queue_send(&MQTT_RECEIVE_QUEUE, s2wRxBuf, TX_NO_WAIT);
   1907          								  status = tx_queue_send(&MQTT_RECEIVE_QUEUE, mqtt_temp, TX_NO_WAIT);
   \   000001F6   0x2200             MOVS     R2,#+0
   \   000001F8   0x4631             MOV      R1,R6
   \   000001FA   0x.... 0x....      LDR.W    R0,??DataTable78_1
   \   000001FE   0x.... 0x....      BL       _tx_queue_send
   1908          								  S2w_Printf("\r\nData Receive in receive task s2wRxBuf : %X %X %X %X",s2wRxBuf[0],s2wRxBuf[1],s2wRxBuf[2],s2wRxBuf[3]);
   \   00000202   0x.... 0x....      LDR.W    R0,??DataTable78
   \   00000206   0x78C0             LDRB     R0,[R0, #+3]
   \   00000208   0x9000             STR      R0,[SP, #+0]
   \   0000020A   0x.... 0x....      LDR.W    R0,??DataTable78
   \   0000020E   0x7883             LDRB     R3,[R0, #+2]
   \   00000210   0x7842             LDRB     R2,[R0, #+1]
   \   00000212   0x7801             LDRB     R1,[R0, #+0]
   \   00000214   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nData Receive in rec...">`
   \   00000218   0x.... 0x....      BL       S2w_Printf
   1909          								  S2w_Printf("\r\nData Receive in receive task mqtt_temp : %X %X %X %X",mqtt_temp[0],mqtt_temp[1],mqtt_temp[2],mqtt_temp[3]);
   \   0000021C   0x78F0             LDRB     R0,[R6, #+3]
   \   0000021E   0x9000             STR      R0,[SP, #+0]
   \   00000220   0x78B3             LDRB     R3,[R6, #+2]
   \   00000222   0x7872             LDRB     R2,[R6, #+1]
   \   00000224   0x7831             LDRB     R1,[R6, #+0]
   \   00000226   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nData Receive in rec...">_1`
   \   0000022A   0x.... 0x....      BL       S2w_Printf
   1910          								  free(mqtt_temp);
   \   0000022E   0x4630             MOV      R0,R6
   \   00000230   0x.... 0x....      BL       free
   1911          							}
   1912                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ip, port);
   \                     ??AppS2wHal_NetRecvTask_21:
   \   00000234   0x9A03             LDR      R2,[SP, #+12]
   \   00000236   0x.... 0x....      LDR.W    R1,??DataTable78
   \   0000023A   0xB2A4             UXTH     R4,R4
   \   0000023C   0x.... 0x....      BL       ?Subroutine41
   1913          						  }
   1914          #ifdef S2W_THROUGHPUT_TEST                       
   1915                                  	}
   1916          							else
   1917          							{
   1918          								if(s2wCidList[cid].stats.packetsReceived== 0)
   1919          								{
   1920          									s2wCidList[cid].stats.startTime = GsnSoftTmr_CurrentSystemTime();										
   1921          								}
   1922          								//dataPattern = (UINT32 *)&s2wRxBuf[8];		
   1923          								if(s2wCidList[cid].conType == UDP)
   1924          								{
   1925          									seqNo= (UINT32 *)&s2wRxBuf[0];																
   1926          									if(s2wCidList[cid].stats.udpNxtSeqNo  !=  *seqNo )
   1927          										s2wCidList[cid].stats.rxErr += (*seqNo - s2wCidList[cid].stats.udpNxtSeqNo);
   1928          									s2wCidList[cid].stats.udpNxtSeqNo =  *seqNo + 1; 
   1929          									s2wCidList[cid].stats.packetsReceived++;
   1930          									s2wCidList[cid].stats.bytesReceived += dataLen;										
   1931          								}
   1932          								else
   1933          								{
   1934          									s2wCidList[cid].stats.packetsReceived++;
   1935          									s2wCidList[cid].stats.bytesReceived += dataLen;
   1936          								}
   1937          								if(s2wCidList[cid].testMode == 4)
   1938          								{
   1939          									endTime = GsnSoftTmr_CurrentSystemTime();									
   1940          									totalTime = SYSTIME_TO_SEC(endTime - s2wCidList[cid].stats.startTime);
   1941          									s2wCidList[cid].stats.totalTime=totalTime;
   1942          								}
   1943          								else if(s2wCidList[cid].bytesToReceive == s2wCidList[cid].stats.bytesReceived)
   1944          								{
   1945          									endTime = GsnSoftTmr_CurrentSystemTime();									
   1946          									totalTime = SYSTIME_TO_SEC(endTime - s2wCidList[cid].stats.startTime);
   1947          									if(s2wCidList[cid].conType == UDP)
   1948          									{
   1949          									    S2w_Printf("\r\n Packet Received  : %d",s2wCidList[cid].stats.packetsReceived);
   1950          										S2w_Printf("\r\n Packet Lost      : %d",s2wCidList[cid].stats.rxErr);
   1951          									}
   1952          									else
   1953          									{
   1954          										S2w_Printf("\r\n Bytes Received   : %lld",s2wCidList[cid].stats.bytesReceived); 
   1955          									}									
   1956          									S2w_Printf("\r\n Total Time Taken : %lld sec",totalTime);																		
   1957          									S2w_Printf("\r\n Throuhput        : %lld Kbps",((s2wCidList[cid].stats.bytesReceived*8)/(1024*totalTime)));										
   1958          									s2wCidList[cid].tpTestInProgress=0;										
   1959          									if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   1960          									{
   1961          									    s2wSpiFs_Flush();
   1962                                              }
   1963          								}
   1964                                  	}
   1965          #endif                          						
   1966                                  }
   1967                              }
   1968                              GsnSq_TaskMonitorStop( APP_CFG_SQ_NETRX_TASK_ID);
   \                     ??CrossCallReturnLabel_108:
   \   00000240   0x2009             MOVS     R0,#+9
   \   00000242   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1969                          }while((dataLen>0) && (socketRecvLoopCount<s2wCurrent.socRdCnt)); // max three packets read at a time, if data pending schedule the
   \   00000246   0x9803             LDR      R0,[SP, #+12]
   \   00000248   0x2801             CMP      R0,#+1
   \   0000024A   0xF2C0 0x8086      BLT.W    ??AppS2wHal_NetRecvTask_22
   \   0000024E   0x.... 0x....      LDR.W    R1,??DataTable69
   \   00000252   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   00000256   0xF891 0x13C0      LDRB     R1,[R1, #+960]
   \   0000025A   0x4288             CMP      R0,R1
   \   0000025C   0xD34C             BCC.N    ??AppS2wHal_NetRecvTask_23
   \   0000025E   0xF108 0x0090      ADD      R0,R8,#+144
   \   00000262   0x7840             LDRB     R0,[R0, #+1]
   \   00000264   0x2800             CMP      R0,#+0
   \   00000266   0xD178             BNE.N    ??AppS2wHal_NetRecvTask_22
   1970                                                                          // task again so that data from other socket not get delayed.
   1971          
   1972                          // post a msg to its own
   1973                          if((dataLen > 0) && (s2wCidList[cid].s2wSockDataPending == 0))
   1974                          {
   1975          
   1976                              intrStatus = GsnOsal_IntrDisable();
   \   00000268   0x.... 0x....      BL       GsnOsal_IntrDisable
   1977                              s2wCidList[cid].s2wSockDataPending = 1;
   \   0000026C   0xF108 0x0190      ADD      R1,R8,#+144
   \   00000270   0x2201             MOVS     R2,#+1
   \   00000272   0x704A             STRB     R2,[R1, #+1]
   1978                              /*re-enable all interrupts */
   1979                              GsnOsal_IntrEnable(intrStatus );
   \   00000274   0x.... 0x....      BL       GsnOsal_IntrEnable
   1980                              GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   1981                              break;
   1982          			    }
   1983          
   1984                          if(S2W_RECV_TYPE_SOCK_DATA_DISCONNECT == recvMsg.msgType)
   1985          
   1986                          {
   1987          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1988          //#if 0
   1989                              if (s2wCidList[cid].sslflag == TRUE)
   1990                              {
   1991                                  if(s2wCidList[cid].s2wUsrCloseFlag)
   1992                                  {
   1993                                      /* stop the http close waiting timer */
   1994          							if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   1995          							{
   1996          							  	/* release the semaphore so the close can finish */
   1997          								GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   1998          							}
   1999          
   2000          							#ifdef S2W_SEPARATE_NET_RX_TASK
   2001                                      	continue;/*!! Donot remove this*/
   2002          							#else
   2003          								break; /*!! Do not remove this*/
   2004          							#endif/*S2W_SEPARATE_NET_RX_TASK*/
   2005                                  }
   2006          						/* Close is not initialted by user. s2wCidList[cid].s2wUsrCloseFlag = 0
   2007          						That's why we are here*/
   2008          					   	GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   2009          
   2010                              }
   2011          #else
   2012          					if(0)
   2013          					{
   2014                              }
   2015          #endif      					
   2016          #ifdef S2W_HTTPC_SUPPORT
   2017          					else if(s2wCidList[cid].httpflag && s2wCidList[cid].pHttpData)
   2018          					{
   2019          
   2020          #ifdef S2W_HTTPS_SUPPORT
   2021                                  conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2022          						if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   2023          						{
   2024          							/* stop the http close waiting timer */
   2025          							if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2026          							{
   2027          								/* release the semaphore so the close can finish */
   2028          								GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2029          							}
   2030          
   2031          							#ifdef S2W_SEPARATE_NET_RX_TASK
   2032                                      	continue;
   2033          							#else
   2034          								break;
   2035          							#endif/*S2W_SEPARATE_NET_RX_TASK*/
   2036          						}
   2037          						/* Close is not initialted by user. s2wCidList[cid].s2wUsrCloseFlag = 0
   2038          						That's why we are here*/
   2039          						if(conEntryPtr->hconHttpType == GSN_HTTPS)
   2040          						{
   2041          							GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2042          							GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   2043          							GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   2044          						}
   2045          #endif /*S2W_HTTPS_SUPPORT*/
   2046          						if(s2wCidList[cid].httpflag && s2wCidList[cid].pHttpData && s2wCidList[cid].pHttpData->httpType == GSN_HTTP)
   2047          						{
   2048          							GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2049          							/* opInProgress semaphore will be deleted in AppS2wHal_NetClose, release it here */
   2050          							GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   2051          						}
   2052          					}
   2053          
   2054          #endif
   2055          
   2056          					status = AppS2wHal_NetClose(cid);
   2057          					if(s2wCidList[cid].s2wUsrCloseFlag == 0 && status == S2W_SUCCESS)
   2058          					{
   2059          /* Check the L2 connection exists
   2060              Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2061          */						
   2062          						if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   2063          						{
   2064          							break;
   2065          						}
   2066          											
   2067              	                GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2068          #ifdef S2W_ASYNC_MSG
   2069          						if(s2wCurrent.asyncMsgFormat)
   2070          						{
   2071          							AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   2072          						}
   2073          						else
   2074          #endif
   2075                             		{
   2076                                  	AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   2077                              	}
   2078          	                    GsnOsal_SemRelease(&s2wSyncSemID);
   2079          					}
   2080                              if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2081                                 || profile_params.autoConnect )
   2082                              {
   2083                                  UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2084                                  (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   2085                              }
   2086                          }
   2087                      }
   2088                      break;
   2089          
   2090          #ifndef S2W_IP2WIFI_SUPPORT
   2091                      case S2W_RECV_TYPE_SOCK_ERROR:
   2092          
   2093                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   2094                          if (cid == INVALID_CID)
   2095                          {
   2096                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   2097                              	continue;
   2098          					#else
   2099          						break;
   2100          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2101                          }
   2102                          // if data is pending on that socket defer the socket close
   2103                          if(s2wCidList[cid].s2wSockDataPending)
   2104                          {
   2105          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   2106          					break;
   2107          				}
   2108          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   2109          //#if 0
   2110          				if (s2wCidList[cid].sslflag == TRUE)
   2111                          {
   2112                               if(s2wCidList[cid].s2wUsrCloseFlag)
   2113                               {
   2114                                  /* stop the http close waiting timer */
   2115          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2116          						{
   2117          						  	/* release the semaphore so the close can finish */
   2118          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2119          						}
   2120                                    #ifdef S2W_SEPARATE_NET_RX_TASK
   2121                                    	continue;
   2122          						  #else
   2123          						  	break;
   2124          						  #endif /*S2W_SEPARATE_NET_RX_TASK*/
   2125                               }
   2126                          }
   2127          #ifdef S2W_HTTPS_SUPPORT
   2128          				else if(s2wCidList[cid].httpflag ==  1 && s2wCidList[cid].pHttpData)
   2129                          {
   2130          					conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2131          
   2132          					if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   2133          					{
   2134          						/* stop the http close waiting timer */
   2135          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2136          						{
   2137          						  	/* release the semaphore so the close can finish */
   2138          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2139          						}
   2140          						#ifdef S2W_SEPARATE_NET_RX_TASK
   2141          							continue; /*!! Donot remove this*/
   2142          						#else
   2143          							break; /*!! Donot remove this*/
   2144          						#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2145          					}
   2146                          }
   2147          #endif /*GSN_HTTPS_SUPPORT*/
   2148          #endif
   2149              			AppS2wHal_NetClose(cid);
   2150          				/* Check the L2 connection exists
   2151          					Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2152          				*/						
   2153          				if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   2154          				{
   2155          					break;
   2156          				}
   2157          
   2158          
   2159                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2160          #ifdef S2W_UART_ENABLE
   2161                          //while(0 == S2wUart_TxStatusGet());
   2162          #endif
   2163                          if((!s2wAutoConnState ) ||(( s2wState == S2W_STATE_CMD) && (s2wIsAutoconnected)))
   2164                          {
   2165          #ifdef S2W_ASYNC_MSG                
   2166          					if(s2wCurrent.asyncMsgFormat)
   2167          					{
   2168          						AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_SOCKFAILURE, cid);
   2169          					}
   2170          					else
   2171          #endif
   2172          	                {
   2173          	                    AppS2wProcess_StatusNotify(S2W_SOCKFAILURE, cid);
   2174          	                }
   2175          			    }
   2176          #ifdef S2W_UART_ENABLE
   2177                          // while(0 == S2wUart_TxStatusGet());
   2178          #endif
   2179                           GsnOsal_SemRelease(&s2wSyncSemID);
   2180                       
   2181                          if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2182                             || profile_params.autoConnect )
   2183                          {
   2184                              UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2185                              //S2w_Printf("\r\n Rclose-connect back\r\n");
   2186                              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   2187                          }
   2188                      break;
   2189          
   2190                      case S2W_RECV_TYPE_SOCK_DISCONNECT:
   2191          
   2192                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   2193                          if (cid == INVALID_CID)
   2194                          {
   2195                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   2196                              	continue;
   2197          					#else
   2198          						break;
   2199          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2200                          }
   2201                          // if data is pending on that socket defer the socket close
   2202                          if(s2wCidList[cid].s2wSockDataPending)
   2203                          {
   2204          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \                     ??AppS2wHal_NetRecvTask_24:
   \   00000278   0xA905             ADD      R1,SP,#+20
   \   0000027A   0x.... 0x....      LDR.W    R0,??DataTable80
   \   0000027E   0x.... 0x....      BL       GsnOsal_QueuePut
   2205          					break;
   \                     ??AppS2wHal_NetRecvTask_0:
   \   00000282   0x.... 0x....      LDR.W    R0,??DataTable80
   \   00000286   0xF04F 0x32FF      MOV      R2,#-1
   \   0000028A   0xA905             ADD      R1,SP,#+20
   2206          				}
   \   0000028C   0x.... 0x....      BL       _tx_queue_receive
   \   00000290   0xF9BD 0x001A      LDRSH    R0,[SP, #+26]
   \   00000294   0x282F             CMP      R0,#+47
   \   00000296   0xD011             BEQ.N    ??AppS2wHal_NetRecvTask_25
   \   00000298   0x2831             CMP      R0,#+49
   \   0000029A   0xF000 0x80A2      BEQ.W    ??AppS2wHal_NetRecvTask_26
   \   0000029E   0x2832             CMP      R0,#+50
   \   000002A0   0xF000 0x80DE      BEQ.W    ??AppS2wHal_NetRecvTask_27
   \   000002A4   0x2833             CMP      R0,#+51
   \   000002A6   0xF000 0x8197      BEQ.W    ??AppS2wHal_NetRecvTask_28
   \   000002AA   0x2834             CMP      R0,#+52
   \   000002AC   0xF000 0x8160      BEQ.W    ??AppS2wHal_NetRecvTask_29
   \   000002B0   0x2835             CMP      R0,#+53
   \   000002B2   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_25
   \   000002B4   0x2836             CMP      R0,#+54
   \   000002B6   0xF000 0x8189      BEQ.W    ??AppS2wHal_NetRecvTask_30
   \   000002BA   0xE7E2             B.N      ??AppS2wHal_NetRecvTask_0
   \                     ??AppS2wHal_NetRecvTask_25:
   \   000002BC   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_95:
   \   000002C0   0x4682             MOV      R10,R0
   \   000002C2   0xF1BA 0x0FFF      CMP      R10,#+255
   \   000002C6   0xD0DC             BEQ.N    ??AppS2wHal_NetRecvTask_0
   \   000002C8   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   000002CC   0xF44F 0x7194      MOV      R1,#+296
   \   000002D0   0xFB01 0xF10A      MUL      R1,R1,R10
   \   000002D4   0x9108             STR      R1,[SP, #+32]
   \   000002D6   0x.... 0x....      LDR.W    R2,??DataTable69_1
   \   000002DA   0xEB01 0x0802      ADD      R8,R1,R2
   \   000002DE   0xF108 0x0190      ADD      R1,R8,#+144
   \   000002E2   0x2200             MOVS     R2,#+0
   \   000002E4   0x704A             STRB     R2,[R1, #+1]
   \   000002E6   0x.... 0x....      BL       GsnOsal_IntrEnable
   \   000002EA   0x2000             MOVS     R0,#+0
   \   000002EC   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   000002F0   0xF108 0x0704      ADD      R7,R8,#+4
   \   000002F4   0xF108 0x052C      ADD      R5,R8,#+44
   \                     ??AppS2wHal_NetRecvTask_23:
   \   000002F8   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   000002FC   0x1C40             ADDS     R0,R0,#+1
   \   000002FE   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   00000302   0x4651             MOV      R1,R10
   \   00000304   0x2009             MOVS     R0,#+9
   \   00000306   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   \   0000030A   0x9808             LDR      R0,[SP, #+32]
   \   0000030C   0x.... 0x....      LDR.W    R1,??DataTable69_1
   \   00000310   0x5C40             LDRB     R0,[R0, R1]
   \   00000312   0x2801             CMP      R0,#+1
   \   00000314   0xF47F 0xAEA1      BNE.W    ??AppS2wHal_NetRecvTask_6
   \   00000318   0xA80C             ADD      R0,SP,#+48
   \   0000031A   0x9001             STR      R0,[SP, #+4]
   \   0000031C   0x2300             MOVS     R3,#+0
   \   0000031E   0xA812             ADD      R0,SP,#+72
   \   00000320   0x9000             STR      R0,[SP, #+0]
   \   00000322   0xF240 0x52DC      MOVW     R2,#+1500
   \   00000326   0x9805             LDR      R0,[SP, #+20]
   \   00000328   0x.... 0x....      LDR.W    R1,??DataTable78
   \   0000032C   0x.... 0x....      BL       recvfrom
   \   00000330   0x9003             STR      R0,[SP, #+12]
   \   00000332   0x2801             CMP      R0,#+1
   \   00000334   0xDB10             BLT.N    ??CrossCallReturnLabel_78
   \   00000336   0xF898 0x0001      LDRB     R0,[R8, #+1]
   \   0000033A   0x2801             CMP      R0,#+1
   \   0000033C   0xF47F 0xAE6F      BNE.W    ??AppS2wHal_NetRecvTask_1
   \   00000340   0xF8BD 0x004A      LDRH     R0,[SP, #+74]
   \   00000344   0x0201             LSLS     R1,R0,#+8
   \   00000346   0xEA41 0x2410      ORR      R4,R1,R0, LSR #+8
   \   0000034A   0x2204             MOVS     R2,#+4
   \   0000034C   0xA913             ADD      R1,SP,#+76
   \   0000034E   0xA802             ADD      R0,SP,#+8
   \   00000350   0x.... 0x....      BL       memcpy
   \   00000354   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_78:
   \   00000358   0xE712             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_22:
   \   0000035A   0xF9BD 0x001A      LDRSH    R0,[SP, #+26]
   \   0000035E   0x2835             CMP      R0,#+53
   \                     ??AppS2wHal_NetRecvTask_31:
   \   00000360   0xD18F             BNE.N    ??AppS2wHal_NetRecvTask_0
   \   00000362   0xF898 0x002C      LDRB     R0,[R8, #+44]
   \   00000366   0x2801             CMP      R0,#+1
   \   00000368   0xD108             BNE.N    ??AppS2wHal_NetRecvTask_32
   \   0000036A   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   0000036E   0x2800             CMP      R0,#+0
   \   00000370   0xD110             BNE.N    ??AppS2wHal_NetRecvTask_33
   \   00000372   0x69B9             LDR      R1,[R7, #+24]
   \   00000374   0x6A78             LDR      R0,[R7, #+36]
   \   00000376   0x.... 0x....      BL       GsnSsl_Alert
   \   0000037A   0xE022             B.N      ??CrossCallReturnLabel_84
   \                     ??AppS2wHal_NetRecvTask_32:
   \   0000037C   0x78E8             LDRB     R0,[R5, #+3]
   \   0000037E   0x2800             CMP      R0,#+0
   \   00000380   0xBF1C             ITT      NE 
   \   00000382   0x68A8             LDRNE    R0,[R5, #+8]
   \   00000384   0x2800             CMPNE    R0,#+0
   \   00000386   0xD01C             BEQ.N    ??CrossCallReturnLabel_84
   \   00000388   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_101:
   \   0000038C   0xD10D             BNE.N    ??CrossCallReturnLabel_85
   \   0000038E   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   00000392   0x2800             CMP      R0,#+0
   \                     ??AppS2wHal_NetRecvTask_33:
   \   00000394   0xF040 0x807B      BNE.W    ??AppS2wHal_NetRecvTask_34
   \   00000398   0x68A8             LDR      R0,[R5, #+8]
   \   0000039A   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_72:
   \   0000039E   0x69B9             LDR      R1,[R7, #+24]
   \   000003A0   0x6A78             LDR      R0,[R7, #+36]
   \   000003A2   0x.... 0x....      BL       GsnSsl_Alert
   \   000003A6   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_85:
   \   000003AA   0x78E8             LDRB     R0,[R5, #+3]
   \   000003AC   0x2800             CMP      R0,#+0
   \   000003AE   0xBF1C             ITT      NE 
   \   000003B0   0x68A8             LDRNE    R0,[R5, #+8]
   \   000003B2   0x2800             CMPNE    R0,#+0
   \   000003B4   0xD005             BEQ.N    ??CrossCallReturnLabel_84
   \   000003B6   0x7B01             LDRB     R1,[R0, #+12]
   \   000003B8   0xB919             CBNZ.N   R1,??CrossCallReturnLabel_84
   \   000003BA   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_71:
   \   000003BE   0x.... 0x....      BL       ?Subroutine33
   \                     ??CrossCallReturnLabel_84:
   \   000003C2   0x4650             MOV      R0,R10
   \   000003C4   0x.... 0x....      BL       AppS2wHal_NetClose
   \   000003C8   0x4607             MOV      R7,R0
   \   000003CA   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   000003CE   0x4338             ORRS     R0,R7,R0
   \   000003D0   0xF040 0x80B2      BNE.W    ??AppS2wHal_NetRecvTask_35
   \   000003D4   0x.... 0x....      BL       ?Subroutine38
   \                     ??CrossCallReturnLabel_100:
   \   000003D8   0x2801             CMP      R0,#+1
   \   000003DA   0xD1C1             BNE.N    ??AppS2wHal_NetRecvTask_31
   \   000003DC   0x.... 0x....      BL       ?Subroutine27
   \                     ??CrossCallReturnLabel_69:
   \   000003E0   0xE09C             B.N      ??AppS2wHal_NetRecvTask_36
   \                     ??AppS2wHal_NetRecvTask_26:
   \   000003E2   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_94:
   \   000003E6   0x4682             MOV      R10,R0
   \   000003E8   0xF1BA 0x0FFF      CMP      R10,#+255
   \   000003EC   0xD075             BEQ.N    ??AppS2wHal_NetRecvTask_37
   \   000003EE   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_31:
   \   000003F2   0xF890 0x1091      LDRB     R1,[R0, #+145]
   \   000003F6   0x2900             CMP      R1,#+0
   \   000003F8   0xD13F             BNE.N    ??AppS2wHal_NetRecvTask_38
   \   000003FA   0xF890 0x102C      LDRB     R1,[R0, #+44]
   \   000003FE   0x2901             CMP      R1,#+1
   \   00000400   0xD00B             BEQ.N    ??AppS2wHal_NetRecvTask_39
   \   00000402   0xF100 0x012C      ADD      R1,R0,#+44
   \   00000406   0x78CA             LDRB     R2,[R1, #+3]
   \   00000408   0x2A01             CMP      R2,#+1
   \   0000040A   0xD10B             BNE.N    ??AppS2wHal_NetRecvTask_40
   \   0000040C   0x6889             LDR      R1,[R1, #+8]
   \   0000040E   0xB149             CBZ.N    R1,??AppS2wHal_NetRecvTask_40
   \   00000410   0x6809             LDR      R1,[R1, #+0]
   \   00000412   0xF8D1 0x10BC      LDR      R1,[R1, #+188]
   \   00000416   0x2901             CMP      R1,#+1
   \   00000418   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_40
   \                     ??AppS2wHal_NetRecvTask_39:
   \   0000041A   0xF890 0x1090      LDRB     R1,[R0, #+144]
   \   0000041E   0xB109             CBZ.N    R1,??AppS2wHal_NetRecvTask_40
   \   00000420   0x3058             ADDS     R0,R0,#+88
   \   00000422   0xE036             B.N      ??AppS2wHal_NetRecvTask_41
   \                     ??AppS2wHal_NetRecvTask_40:
   \   00000424   0x4650             MOV      R0,R10
   \   00000426   0x.... 0x....      BL       AppS2wHal_NetClose
   \   0000042A   0x.... 0x....      BL       ?Subroutine38
   \                     ??CrossCallReturnLabel_99:
   \   0000042E   0x2801             CMP      R0,#+1
   \   00000430   0xD153             BNE.N    ??AppS2wHal_NetRecvTask_37
   \   00000432   0x.... 0x....      BL       ?Subroutine27
   \                     ??CrossCallReturnLabel_68:
   \   00000436   0x.... 0x....      LDR.W    R0,??DataTable82
   \   0000043A   0x7800             LDRB     R0,[R0, #+0]
   \   0000043C   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_42
   \   0000043E   0x.... 0x....      LDR.W    R0,??DataTable82_1
   \   00000442   0x7800             LDRB     R0,[R0, #+0]
   \   00000444   0x2800             CMP      R0,#+0
   \   00000446   0xD173             BNE.N    ??AppS2wHal_NetRecvTask_43
   \   00000448   0x.... 0x....      LDR.W    R0,??DataTable82_2
   \   0000044C   0x7800             LDRB     R0,[R0, #+0]
   \   0000044E   0x2800             CMP      R0,#+0
   \   00000450   0xD06E             BEQ.N    ??AppS2wHal_NetRecvTask_43
   \                     ??AppS2wHal_NetRecvTask_42:
   \   00000452   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_47:
   \   00000456   0xBF18             IT       NE 
   \   00000458   0x2000             MOVNE    R0,#+0
   \   0000045A   0xD163             BNE.N    ??AppS2wHal_NetRecvTask_44
   \   0000045C   0x2003             MOVS     R0,#+3
   \   0000045E   0xE065             B.N      ??AppS2wHal_NetRecvTask_45
   \                     ??AppS2wHal_NetRecvTask_27:
   \   00000460   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_93:
   \   00000464   0x4682             MOV      R10,R0
   \   00000466   0xF1BA 0x0FFF      CMP      R10,#+255
   \   0000046A   0xD036             BEQ.N    ??AppS2wHal_NetRecvTask_37
   \   0000046C   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_33:
   \   00000470   0xFB00 0x180A      MLA      R8,R0,R10,R1
   \   00000474   0xF898 0x0091      LDRB     R0,[R8, #+145]
   \   00000478   0x2800             CMP      R0,#+0
   \                     ??AppS2wHal_NetRecvTask_38:
   \   0000047A   0xF47F 0xAEFD      BNE.W    ??AppS2wHal_NetRecvTask_24
   2207          
   2208          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   2209          //#if 0                
   2210          				if (s2wCidList[cid].sslflag == TRUE)
   \   0000047E   0xF108 0x071C      ADD      R7,R8,#+28
   \   00000482   0x7C38             LDRB     R0,[R7, #+16]
   \   00000484   0x2801             CMP      R0,#+1
   \   00000486   0xD10F             BNE.N    ??AppS2wHal_NetRecvTask_46
   2211                          {
   2212                               if(s2wCidList[cid].s2wUsrCloseFlag)
   \   00000488   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   0000048C   0xB130             CBZ.N    R0,??AppS2wHal_NetRecvTask_47
   2213                               {
   2214          						  if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   \                     ??AppS2wHal_NetRecvTask_34:
   \   0000048E   0xF108 0x0058      ADD      R0,R8,#+88
   \                     ??AppS2wHal_NetRecvTask_41:
   \   00000492   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   00000496   0x2800             CMP      R0,#+0
   \   00000498   0xD11F             BNE.N    ??AppS2wHal_NetRecvTask_37
   \   0000049A   0xE019             B.N      ??AppS2wHal_NetRecvTask_48
   2215          						  {
   2216          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2217          						  }
   2218                                    #ifdef S2W_SEPARATE_NET_RX_TASK
   2219                                    	continue;
   2220          						  #else
   2221          							break;
   2222          						  #endif /*S2W_SEPARATE_NET_RX_TASK*/
   2223                               }
   2224           					/* Send Alert*/
   2225                  			GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   \                     ??AppS2wHal_NetRecvTask_47:
   \   0000049C   0xF8D8 0x101C      LDR      R1,[R8, #+28]
   \   000004A0   0x68F8             LDR      R0,[R7, #+12]
   \   000004A2   0x.... 0x....      BL       GsnSsl_Alert
   \   000004A6   0xE01F             B.N      ??CrossCallReturnLabel_83
   2226                          }
   2227          #else
   2228          				if(0)
   2229          				{
   2230          				}
   2231          #endif    
   2232          #ifdef S2W_HTTPC_SUPPORT	
   2233          				else if(s2wCidList[cid].httpflag ==  1 && s2wCidList[cid].pHttpData)
   \                     ??AppS2wHal_NetRecvTask_46:
   \   000004A8   0x7CF8             LDRB     R0,[R7, #+19]
   \   000004AA   0x2801             CMP      R0,#+1
   \   000004AC   0xD11C             BNE.N    ??CrossCallReturnLabel_83
   \   000004AE   0x69B8             LDR      R0,[R7, #+24]
   \   000004B0   0xB1D0             CBZ.N    R0,??CrossCallReturnLabel_83
   2234                          {
   2235          
   2236          					semStat =GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   \   000004B2   0x.... 0x....      BL       ?Subroutine28
   2237          #ifdef S2W_HTTPS_SUPPORT                
   2238          					conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2239          					/* The remote close can along with the data so if the send acquired the semaphore then need to
   2240          					wait here so that the close operation can be performed.
   2241          					*/
   2242          					if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   \                     ??CrossCallReturnLabel_70:
   \   000004B6   0x69B8             LDR      R0,[R7, #+24]
   \   000004B8   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_102:
   \   000004BC   0xD10E             BNE.N    ??AppS2wHal_NetRecvTask_49
   \   000004BE   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   000004C2   0xB158             CBZ.N    R0,??AppS2wHal_NetRecvTask_49
   2243          					{
   2244          						/* stop the http close waiting timer */
   2245          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   \   000004C4   0xF108 0x0058      ADD      R0,R8,#+88
   \   000004C8   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   000004CC   0x2800             CMP      R0,#+0
   \   000004CE   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_37
   2246          						{
   2247          						  	/* release the semaphore so the close can finish */
   2248          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     ??AppS2wHal_NetRecvTask_48:
   \   000004D0   0x.... 0x....      BL       ?Subroutine14
   2249          						}
   2250          
   2251          						#ifdef S2W_SEPARATE_NET_RX_TASK
   2252          							continue; /*!! Donot remove this*/
   2253          						#else
   2254          							break; /*!! Donot remove this*/
   2255          						#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2256          					}
   \                     ??CrossCallReturnLabel_32:
   \   000004D4   0x3038             ADDS     R0,R0,#+56
   \                     ??AppS2wHal_NetRecvTask_50:
   \   000004D6   0x.... 0x....      BL       GsnOsal_SemRelease
   \                     ??AppS2wHal_NetRecvTask_37:
   \   000004DA   0xE6D2             B.N      ??AppS2wHal_NetRecvTask_0
   2257          					/* The close is from remote and no alert gone out. Send an alert */
   2258          					GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??AppS2wHal_NetRecvTask_49:
   \   000004DC   0x69B8             LDR      R0,[R7, #+24]
   \   000004DE   0x.... 0x....      BL       ?Subroutine40
   2259          #endif
   2260          					//if(s2wCidList[cid].pHttpData->httpType == GSN_HTTP)
   2261          						//GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2262          					GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   \                     ??CrossCallReturnLabel_106:
   \   000004E2   0x69B8             LDR      R0,[R7, #+24]
   \   000004E4   0x.... 0x....      BL       ??Subroutine33_0
   2263          				}
   2264          
   2265          #endif
   2266          				status = AppS2wHal_NetClose(cid);
   \                     ??CrossCallReturnLabel_83:
   \   000004E8   0x4650             MOV      R0,R10
   \   000004EA   0x.... 0x....      BL       AppS2wHal_NetClose
   \   000004EE   0x4607             MOV      R7,R0
   2267          				/* Check the L2 connection exists
   2268          					Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2269          				*/						
   2270          				if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   \   000004F0   0x.... 0x....      BL       ?Subroutine38
   \                     ??CrossCallReturnLabel_98:
   \   000004F4   0x2801             CMP      R0,#+1
   \   000004F6   0xD1F0             BNE.N    ??AppS2wHal_NetRecvTask_37
   2271          				{
   2272          					break;
   2273          				}
   2274          
   2275                          
   2276          				
   2277          				if(s2wCidList[cid].s2wUsrCloseFlag == 0 && status == S2W_SUCCESS)
   \   000004F8   0xF898 0x0090      LDRB     R0,[R8, #+144]
   \   000004FC   0x4338             ORRS     R0,R7,R0
   \   000004FE   0xD11B             BNE.N    ??AppS2wHal_NetRecvTask_35
   2278          				{
   2279          					GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000500   0x.... 0x....      BL       ?Subroutine27
   2280          					if((!s2wAutoConnState ) ||(( s2wState == S2W_STATE_CMD) && (s2wIsAutoconnected)))
   \                     ??CrossCallReturnLabel_67:
   \   00000504   0x.... 0x....      LDR.W    R0,??DataTable82
   \   00000508   0x7800             LDRB     R0,[R0, #+0]
   \   0000050A   0xB138             CBZ.N    R0,??AppS2wHal_NetRecvTask_36
   \   0000050C   0x.... 0x....      LDR.W    R0,??DataTable82_1
   \   00000510   0x7800             LDRB     R0,[R0, #+0]
   \   00000512   0xB968             CBNZ.N   R0,??AppS2wHal_NetRecvTask_43
   \   00000514   0x.... 0x....      LDR.W    R0,??DataTable82_2
   \   00000518   0x7800             LDRB     R0,[R0, #+0]
   \   0000051A   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_43
   2281          				 	{
   2282          #ifdef S2W_ASYNC_MSG
   2283          						if(s2wCurrent.asyncMsgFormat)
   \                     ??AppS2wHal_NetRecvTask_36:
   \   0000051C   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_48:
   \   00000520   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_51
   2284          				   		{
   2285          					   		AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   \   00000522   0x2002             MOVS     R0,#+2
   \                     ??AppS2wHal_NetRecvTask_44:
   \   00000524   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000528   0xE002             B.N      ??AppS2wHal_NetRecvTask_43
   2286          				   		}
   2287          				   		else
   2288          #endif
   2289                          		{
   2290          		                    AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   \                     ??AppS2wHal_NetRecvTask_51:
   \   0000052A   0x2008             MOVS     R0,#+8
   \                     ??AppS2wHal_NetRecvTask_45:
   \   0000052C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2291                  		        }
   2292          			       }                
   2293          					GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wHal_NetRecvTask_43:
   \   00000530   0x.... 0x....      LDR.W    R0,??DataTable87
   \   00000534   0x.... 0x....      BL       GsnOsal_SemRelease
   2294          				}
   2295                          
   2296                          
   2297                          if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2298                             || profile_params.autoConnect )
   \                     ??AppS2wHal_NetRecvTask_35:
   \   00000538   0x....             LDR.N    R0,??DataTable69
   \   0000053A   0xF890 0x032B      LDRB     R0,[R0, #+811]
   \   0000053E   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_52
   \   00000540   0x....             LDR.N    R0,??DataTable69
   \   00000542   0xF890 0x0394      LDRB     R0,[R0, #+916]
   \   00000546   0x4582             CMP      R10,R0
   \   00000548   0xBF02             ITTT     EQ 
   \   0000054A   0x....             LDREQ.N  R0,??DataTable69
   \   0000054C   0xF890 0x032A      LDRBEQ   R0,[R0, #+810]
   \   00000550   0x2801             CMPEQ    R0,#+1
   \   00000552   0xD004             BEQ.N    ??AppS2wHal_NetRecvTask_53
   \                     ??AppS2wHal_NetRecvTask_52:
   \   00000554   0x.... 0x....      LDR.W    R0,??DataTable87_1
   \   00000558   0x7900             LDRB     R0,[R0, #+4]
   \   0000055A   0x2800             CMP      R0,#+0
   \   0000055C   0xD007             BEQ.N    ??AppS2wHal_NetRecvTask_54
   2299                          {
   2300          
   2301                              UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2302                              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     ??AppS2wHal_NetRecvTask_53:
   \   0000055E   0x.... 0x....      LDR.W    R0,??DataTable75
   \   00000562   0x.... 0x....      LDR.W    R2,??DataTable87_2
   \   00000566   0x6801             LDR      R1,[R0, #+0]
   \   00000568   0x6812             LDR      R2,[R2, #+0]
   \   0000056A   0x2018             MOVS     R0,#+24
   \   0000056C   0x4790             BLX      R2
   \                     ??AppS2wHal_NetRecvTask_54:
   \   0000056E   0xE688             B.N      ??AppS2wHal_NetRecvTask_0
   2303                          }
   2304                      break;
   2305          
   2306          #endif
   2307          #ifdef S2W_HTTPC_SUPPORT
   2308                      case S2W_RECV_TYPE_HTTPS_CLOSE:
   2309          				/*Control is here, becase an Alert has been received*/
   2310                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   \                     ??AppS2wHal_NetRecvTask_29:
   \   00000570   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_92:
   \   00000574   0x4607             MOV      R7,R0
   2311                          if (cid == INVALID_CID)
   \   00000576   0x2FFF             CMP      R7,#+255
   \   00000578   0xD0F9             BEQ.N    ??AppS2wHal_NetRecvTask_54
   2312                          {
   2313                              #ifdef S2W_SEPARATE_NET_RX_TASK
   2314                              	continue;
   2315          					#else
   2316          						break;
   2317          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2318                          }
   2319                          // if data is pending on that socket defer the socket close
   2320                          if(s2wCidList[cid].s2wSockDataPending)
   \   0000057A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_34:
   \   0000057E   0xFB00 0x1807      MLA      R8,R0,R7,R1
   \   00000582   0xF898 0x0091      LDRB     R0,[R8, #+145]
   \   00000586   0xB120             CBZ.N    R0,??AppS2wHal_NetRecvTask_55
   2321                          {
   2322          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000588   0x.... 0x....      LDR.W    R0,??DataTable80
   \   0000058C   0xA905             ADD      R1,SP,#+20
   \   0000058E   0x.... 0x....      BL       GsnOsal_QueuePut
   2323          				}
   2324          				/*Send Alert back*/
   2325                          GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??AppS2wHal_NetRecvTask_55:
   \   00000592   0xF8D8 0x0034      LDR      R0,[R8, #+52]
   \   00000596   0x.... 0x....      BL       ?Subroutine40
   2326          
   2327          				/* Close HTTP connection*/
   2328          				AppS2wHal_HttpLocalClose(cid);
   \                     ??CrossCallReturnLabel_105:
   \   0000059A   0x4638             MOV      R0,R7
   \   0000059C   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   2329          
   2330                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   000005A0   0x.... 0x....      LDR.W    R0,??DataTable87
   \   000005A4   0xF04F 0x31FF      MOV      R1,#-1
   \   000005A8   0x.... 0x....      BL       GsnOsal_SemAcquire
   2331          #ifdef S2W_UART_ENABLE
   2332                          //while(0 == S2wUart_TxStatusGet());
   2333          #endif
   2334          #ifdef S2W_ASYNC_MSG
   2335                          if(s2wCurrent.asyncMsgFormat)
   \   000005AC   0x....             LDR.N    R0,??DataTable69
   \   000005AE   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   000005B2   0x2800             CMP      R0,#+0
   \   000005B4   0x4639             MOV      R1,R7
   \   000005B6   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_56
   2336                          {
   2337                              AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   \   000005B8   0x2002             MOVS     R0,#+2
   \   000005BA   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   000005BE   0xE002             B.N      ??AppS2wHal_NetRecvTask_57
   2338                          }
   2339                          else
   2340          #endif
   2341                          {
   2342                              AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   \                     ??AppS2wHal_NetRecvTask_56:
   \   000005C0   0x2008             MOVS     R0,#+8
   \   000005C2   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2343                          }
   2344          #ifdef S2W_UART_ENABLE
   2345                         // while(0 == S2wUart_TxStatusGet());
   2346          #endif
   2347                          GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wHal_NetRecvTask_57:
   \   000005C6   0x.... 0x....      LDR.W    R0,??DataTable87
   \   000005CA   0xE784             B.N      ??AppS2wHal_NetRecvTask_50
   2348          
   2349                          break;
   2350          #endif
   2351          #ifdef S2W_IP2WIFI_SUPPORT
   2352                          case S2W_RECV_TYPE_RAWDATA:
   2353                          {
   2354          
   2355                              S2w_RawNetRx (recvMsg.rData.dataPtr, recvMsg.msgLen);
   2356          
   2357                          }
   2358                          break;
   2359          #endif
   2360          
   2361          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   2362                          case S2W_RECV_TYPE_UAMDATA:
   2363                          {
   2364          
   2365                              S2w_UamRx (recvMsg.rData.dataPtr, recvMsg.msgLen);
   \                     ??AppS2wHal_NetRecvTask_30:
   \   000005CC   0xF9BD 0x1018      LDRSH    R1,[SP, #+24]
   \   000005D0   0x9805             LDR      R0,[SP, #+20]
   \   000005D2   0x.... 0x....      BL       S2w_UamRx
   2366          
   2367                          }
   2368                          break;
   \   000005D6   0xE654             B.N      ??AppS2wHal_NetRecvTask_0
   2369          #endif
   2370          
   2371          			    case S2W_RECV_TYPE_SOCK_ACCEPT:
   2372          			        newcid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   \                     ??AppS2wHal_NetRecvTask_28:
   \   000005D8   0x.... 0x....      BL       ?Subroutine36
   2373          			        cid = s2wCidList[newcid].serverCid;
   \                     ??CrossCallReturnLabel_91:
   \   000005DC   0x....             LDR.N    R1,??DataTable69_1
   \   000005DE   0x4605             MOV      R5,R0
   \   000005E0   0xF44F 0x7094      MOV      R0,#+296
   \   000005E4   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   000005E8   0xF890 0x602E      LDRB     R6,[R0, #+46]
   2374          			        new_sd =   s2wCidList[newcid].sd;
   \   000005EC   0x69C7             LDR      R7,[R0, #+28]
   2375          			        port = s2wCidList[newcid].remotePort;
   \   000005EE   0x8884             LDRH     R4,[R0, #+4]
   2376          #ifdef S2W_IPv6_SUPPORT
   2377                              if(s2wCidList[newcid].addrType & ADDR_TYPE_IPv6)
   2378                              {
   2379                                  ret = AppS2wProcess_NetAccept(cid, newcid, (UINT8*)s2wCidList[newcid].remoteIpv6, port);
   2380          				    }
   2381          				    else
   2382          #endif
   2383                              {
   2384          		                memcpy((UINT8*)ip,s2wCidList[newcid].remoteIp,4);
   \   000005F0   0x1D81             ADDS     R1,R0,#+6
   \   000005F2   0x2204             MOVS     R2,#+4
   \   000005F4   0xA802             ADD      R0,SP,#+8
   \   000005F6   0x.... 0x....      BL       memcpy
   2385          		                *(UINT32*)ip = htonl(*(UINT32*)ip);
   \   000005FA   0x.... 0x....      BL       ?Subroutine31
   2386          				        ret = AppS2wProcess_NetAccept(cid, newcid, (UINT8*)ip, port);
   2387          				    }
   2388          				    if (ret != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_79:
   \   000005FE   0x4623             MOV      R3,R4
   \   00000600   0xAA02             ADD      R2,SP,#+8
   \   00000602   0x4629             MOV      R1,R5
   \   00000604   0x4630             MOV      R0,R6
   \   00000606   0x.... 0x....      BL       AppS2wProcess_NetAccept
   \   0000060A   0x2800             CMP      R0,#+0
   \   0000060C   0xD002             BEQ.N    ??AppS2wHal_NetRecvTask_58
   2389          				    {
   2390          					    soc_close(new_sd);
   \   0000060E   0x4638             MOV      R0,R7
   \   00000610   0x.... 0x....      BL       soc_close
   \                     ??AppS2wHal_NetRecvTask_58:
   \   00000614   0xE635             B.N      ??AppS2wHal_NetRecvTask_0
   2391          					    //return;
   2392          	                }
   2393          				break;
   2394                      default :
   2395                          break;
   2396          }
   2397          
   2398              }
   2399          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0x9400             STR      R4,[SP, #+0]
   \   00000002   0xAB02             ADD      R3,SP,#+8
   \   00000004   0x4650             MOV      R0,R10
   \   00000006   0x.... 0x....      B.W      AppS2wProcess_NetRx

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable75
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x.... 0x....      B.W      GsnWdd_AssocStatusGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0x9805             LDR      R0,[SP, #+20]
   \   00000002   0x....             B.N      AppS2wHal_CidFind

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0x68A8             LDR      R0,[R5, #+8]
   \                     ??Subroutine33_0:
   \   00000002   0x3030             ADDS     R0,R0,#+48
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0x9802             LDR      R0,[SP, #+8]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9902             LDR      R1,[SP, #+8]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9902             LDR      R1,[SP, #+8]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x3030             ADDS     R0,R0,#+48
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable87
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x....             LDR.N    R0,??DataTable69
   \   00000002   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0x4651             MOV      R1,R10
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x....             LDR.N    R1,??DataTable69_1
   \   00000006   0xFB00 0x100A      MLA      R0,R0,R10,R1
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable94
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0x.... 0x....      B.W      GsnHttp_Alert

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xF8D0 0x00BC      LDR      R0,[R0, #+188]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0x4770             BX       LR
   2400          
   2401          
   2402          /**
   2403           ******************************************************************
   2404           * @ingroup S2w-Application
   2405          <<<<<<< s2w_net_gainspan.c
   2406           * @brief Get the free connection identifier.
   2407           * @retval Connection Identifier on success
   2408           *         Error on failure
   2409           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2410          UINT8
   2411          AppS2wHal_CidGet(VOID)
   2412          {
   \                     AppS2wHal_CidGet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   2413              INT32 i,j,k;
   2414              j= ((s2wappMainTaskCtxt->lastCidCreated+1)&(MAX_CID_RANGE-1));
   2415              for (i = j,k=0; k < MAX_CID_RANGE ;(i=((i+1)&(MAX_CID_RANGE-1))),k++)
   \   00000002   0x....             LDR.N    R5,??DataTable70
   \   00000004   0x....             LDR.N    R2,??DataTable69_1
   \   00000006   0x6828             LDR      R0,[R5, #+0]
   \   00000008   0xF647 0x74E8      MOVW     R4,#+32744
   \   0000000C   0x5C20             LDRB     R0,[R4, R0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xF000 0x060F      AND      R6,R0,#0xF
   \   00000014   0x2010             MOVS     R0,#+16
   2416              {
   2417                  if (s2wCidList[i].sd == CID_NOTINUSE)
   \                     ??AppS2wHal_CidGet_0:
   \   00000016   0xF44F 0x7194      MOV      R1,#+296
   \   0000001A   0xFB01 0x2706      MLA      R7,R1,R6,R2
   \   0000001E   0x69F9             LDR      R1,[R7, #+28]
   \   00000020   0xF111 0x0F01      CMN      R1,#+1
   \   00000024   0xD10C             BNE.N    ??AppS2wHal_CidGet_1
   2418                  {
   2419                  	memset((INT8 *)&s2wCidList[i], 0, sizeof(S2W_CID_T));
   \   00000026   0xF44F 0x7294      MOV      R2,#+296
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x4638             MOV      R0,R7
   \   0000002E   0x.... 0x....      BL       memset
   2420          			s2wCidList[i].sd = CID_NOTINUSE;
   \   00000032   0xF04F 0x30FF      MOV      R0,#-1
   \   00000036   0x61F8             STR      R0,[R7, #+28]
   2421          			s2wappMainTaskCtxt->lastCidCreated = i;
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0x5426             STRB     R6,[R4, R0]
   2422                      return i;
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}
   2423                  }
   2424              }
   \                     ??AppS2wHal_CidGet_1:
   \   00000040   0x1C71             ADDS     R1,R6,#+1
   \   00000042   0xF001 0x060F      AND      R6,R1,#0xF
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0xD1E5             BNE.N    ??AppS2wHal_CidGet_0
   2425              return INVALID_CID;
   \   0000004A   0x20FF             MOVS     R0,#+255
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2426          }
   2427          
   2428          
   2429          /**
   2430           ******************************************************************
   2431           * @ingroup S2w-Application
   2432          =======
   2433          >>>>>>> 1.48.2.11
   2434           * @brief Searches for the connection identifier
   2435           *         corresponding to specified socket descriptor.
   2436           * @param  sd the socket descriptor to be searched in the list.
   2437           * @retval Connection identifier on success (value 0 - F).
   2438           *          Error on failure (value 0xFF).
   2439           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2440          UINT8
   2441          AppS2wHal_CidFind(INT32 sd)
   2442          {
   2443              UINT32 i;
   2444              for (i = 0; i < MAX_CID_RANGE; i++)
   \                     AppS2wHal_CidFind:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R2,??DataTable69_1
   2445              {
   2446                  if (sd == s2wCidList[i].sd)
   \                     ??AppS2wHal_CidFind_0:
   \   00000004   0xF44F 0x7394      MOV      R3,#+296
   \   00000008   0xFB03 0x2301      MLA      R3,R3,R1,R2
   \   0000000C   0x69DB             LDR      R3,[R3, #+28]
   \   0000000E   0x4298             CMP      R0,R3
   \   00000010   0xD101             BNE.N    ??AppS2wHal_CidFind_1
   2447                 {
   2448                     return i;
   \   00000012   0xB2C8             UXTB     R0,R1
   \   00000014   0x4770             BX       LR
   2449                 }
   2450              }
   \                     ??AppS2wHal_CidFind_1:
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x2910             CMP      R1,#+16
   \   0000001A   0xD3F3             BCC.N    ??AppS2wHal_CidFind_0
   2451              return INVALID_CID;
   \   0000001C   0x20FF             MOVS     R0,#+255
   \   0000001E   0x4770             BX       LR               ;; return
   2452          }
   2453          /**
   2454           ******************************************************************
   2455           * @ingroup S2w-Application
   2456           * @brief Callback registerd to the network stack to recieve the socket events.
   2457           * @param sock - IN the Socket descriptor on which event occurred.
   2458           * @param flags- IN bit mask for events.
   2459           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2460          PRIVATE VOID
   2461          AppS2wHal_RxCallBack(INT32 sock, NX_BSD_CB_EVENT_TYPE_T flags, UINT port)
   2462          {
   \                     AppS2wHal_RxCallBack:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x460E             MOV      R6,R1
   2463              struct sockaddr_in srcAddr;
   2464              UINT8 cid;
   2465              INT32 dataLen;
   2466              S2W_MSG_T recvMsg;
   2467              //GSN_OSAL_ERROR_T err;
   2468              cid = AppS2wHal_CidFind(sock);
   \   0000000A   0x.... 0x....      BL       AppS2wHal_CidFind
   \   0000000E   0x9005             STR      R0,[SP, #+20]
   2469              if (cid == INVALID_CID)
   \   00000010   0x28FF             CMP      R0,#+255
   \   00000012   0xF000 0x810F      BEQ.W    ??AppS2wHal_RxCallBack_0
   2470              {
   2471                  S2W_ASSERT(0);
   2472                  return;
   2473              }
   2474              if(s2wappMainTaskCtxt->dpSleep )
   \   00000016   0x....             LDR.N    R4,??DataTable70
   \   00000018   0x6821             LDR      R1,[R4, #+0]
   \   0000001A   0xF646 0x20FC      MOVW     R0,#+27388
   \   0000001E   0x5840             LDR      R0,[R0, R1]
   \   00000020   0xB118             CBZ.N    R0,??AppS2wHal_RxCallBack_1
   2475          
   2476              {
   2477                  AppS2w_GpioWkUpDisable();
   \   00000022   0x.... 0x....      BL       AppS2w_GpioWkUpDisable
   2478          		AppS2w_ExitDpSleep();
   \   00000026   0x.... 0x....      BL       AppS2w_ExitDpSleep
   \                     ??AppS2wHal_RxCallBack_1:
   \   0000002A   0x9805             LDR      R0,[SP, #+20]
   \   0000002C   0x.... 0x....      LDR.W    R10,??DataTable94
   \   00000030   0xF44F 0x7194      MOV      R1,#+296
   \   00000034   0xFB01 0xF900      MUL      R9,R1,R0
   \   00000038   0x2105             MOVS     R1,#+5
   \   0000003A   0xEB09 0x0B0A      ADD      R11,R9,R10
   \   0000003E   0xF006 0x0508      AND      R5,R6,#0x8
   \   00000042   0x420E             TST      R6,R1
   \   00000044   0xD020             BEQ.N    ??CrossCallReturnLabel_66
   2479              }
   2480              /* Data is available     */
   2481              if ((NX_BSD_CB_TCP_RECIEVE & flags) || (NX_BSD_CB_UDP_RECIEVE & flags))
   2482              {
   2483          
   2484                  recvMsg.rData.dataSock = sock;
   2485                  recvMsg.msgLen = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9702             STR      R7,[SP, #+8]
   \   0000004A   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   2486          		if (NX_BSD_CB_TCP_DISCONNECT & flags)
   \   0000004E   0xB13D             CBZ.N    R5,??AppS2wHal_RxCallBack_2
   2487          		{
   2488          		    S2w_Printf("\r\n TCP DISCONNECT 1");
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP DISCONNECT 1">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   2489          	        recvMsg.msgType = S2W_RECV_TYPE_SOCK_DATA_DISCONNECT;
   \   00000058   0x2035             MOVS     R0,#+53
   \   0000005A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000005E   0xE00A             B.N      ??AppS2wHal_RxCallBack_3
   2490          		}
   2491          		else
   2492          		{
   2493          		    S2w_Printf("\r\n TCP RECIEVE");
   \                     ??AppS2wHal_RxCallBack_2:
   \   00000060   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP RECIEVE">`
   \   00000064   0x.... 0x....      BL       S2w_Printf
   2494          			recvMsg.msgType = S2W_RECV_TYPE_SOCKET;
   \   00000068   0x202F             MOVS     R0,#+47
   \   0000006A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2495                          }
   2496          		if((s2wCidList[cid].s2wSockDataPending !=1) ||
   2497          		   (recvMsg.msgType == S2W_RECV_TYPE_SOCK_DATA_DISCONNECT))
   \   0000006E   0xF89B 0x0091      LDRB     R0,[R11, #+145]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD008             BEQ.N    ??CrossCallReturnLabel_66
   2498          		{
   2499          			INT32 intrStatus;
   2500                      intrStatus = GsnOsal_IntrDisable();
   \                     ??AppS2wHal_RxCallBack_3:
   \   00000076   0x.... 0x....      BL       GsnOsal_IntrDisable
   2501                      s2wCidList[cid].s2wSockDataPending = 1;
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0xF88B 0x1091      STRB     R1,[R11, #+145]
   2502                      /*re-enable all interrupts */
   2503                      GsnOsal_IntrEnable(intrStatus );
   \   00000080   0x.... 0x....      BL       GsnOsal_IntrEnable
   2504          			GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000084   0x.... 0x....      BL       ?Subroutine26
   2505                      //err = AppS2wHal_NetRxMsgPost(&recvMsg);
   2506          
   2507          		}
   2508          
   2509              }
   2510          
   2511              /* Incoming connection (TCP servers only) */
   2512              if (NX_BSD_CB_TCP_LISTEN & flags)
   \                     ??CrossCallReturnLabel_66:
   \   00000088   0x06F0             LSLS     R0,R6,#+27
   \   0000008A   0xF140 0x80A9      BPL.W    ??AppS2wHal_RxCallBack_4
   2513              {
   2514                  UINT8 newcid;
   2515                  INT32 new_sd;
   2516                  S2W_IPADDR_T ip;
   2517          #ifdef S2W_IPv6_SUPPORT
   2518                  S2W_IPv6ADDR_T ipv6;
   2519                  struct sockaddr_in6 ClientAddr;
   2520                  INT32 Clientlen;
   2521          #endif
   2522                  UINT16 localport;
   2523                  INT32 ret;
   2524                  struct timeval TimeOut;
   2525                  dataLen = sizeof(srcAddr);
   \   0000008E   0x2010             MOVS     R0,#+16
   \   00000090   0x9007             STR      R0,[SP, #+28]
   2526          
   2527          #ifdef S2W_IPv6_SUPPORT
   2528                
   2529                  if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   2530                  {
   2531                    Clientlen = sizeof(struct sockaddr_in6); 
   2532                  new_sd = accept(sock, (struct sockaddr*)&ClientAddr, &Clientlen);
   2533                  }
   2534                  else
   2535          #endif
   2536                  {
   2537                  new_sd = accept(sock, (struct sockaddr *)&srcAddr, &dataLen);
   \   00000092   0xAA07             ADD      R2,SP,#+28
   \   00000094   0xA90B             ADD      R1,SP,#+44
   \   00000096   0x4638             MOV      R0,R7
   \   00000098   0x.... 0x....      BL       accept
   \   0000009C   0x0007             MOVS     R7,R0
   2538          	    }
   2539                  if (new_sd < 0)
   \   0000009E   0xD463             BMI.N    ??AppS2wHal_RxCallBack_5
   2540                  {
   2541                      return;
   2542                  }
   2543          
   2544                  if ((newcid = AppS2wHal_CidGet()) == INVALID_CID)
   \   000000A0   0x.... 0x....      BL       AppS2wHal_CidGet
   \   000000A4   0x9006             STR      R0,[SP, #+24]
   \   000000A6   0x28FF             CMP      R0,#+255
   \   000000A8   0xD05B             BEQ.N    ??AppS2wHal_RxCallBack_6
   2545                  {
   2546                      soc_close(new_sd);
   2547                      return;
   2548                  }
   2549          		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER);
   \   000000AA   0x6820             LDR      R0,[R4, #+0]
   \   000000AC   0xF248 0x18CC      MOVW     R8,#+33228
   \   000000B0   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_76:
   \   000000B4   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000000B8   0xF89B 0x1020      LDRB     R1,[R11, #+32]
   \   000000BC   0x7840             LDRB     R0,[R0, #+1]
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD306             BCC.N    ??AppS2wHal_RxCallBack_7
   2550          		if(s2wCidList[cid].maxConn <= s2wCidList[cid].clientConCount)
   2551          		{
   2552          			tfResetConnection(new_sd);
   \   000000C2   0x4638             MOV      R0,R7
   \   000000C4   0x.... 0x....      BL       tfResetConnection
   2553          			tfClose(new_sd);
   \   000000C8   0x4638             MOV      R0,R7
   \   000000CA   0x.... 0x....      BL       tfClose
   2554          			GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \   000000CE   0xE082             B.N      ??AppS2wHal_RxCallBack_8
   2555                      return;
   2556                  }
   2557          		GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \                     ??AppS2wHal_RxCallBack_7:
   \   000000D0   0x6820             LDR      R0,[R4, #+0]
   \   000000D2   0x4440             ADD      R0,R8,R0
   \   000000D4   0x.... 0x....      BL       GsnOsal_SemRelease
   2558                  
   2559                  if (s2wCidList[cid].sslflag != TRUE)
   \   000000D8   0x9806             LDR      R0,[SP, #+24]
   \   000000DA   0xF44F 0x7194      MOV      R1,#+296
   \   000000DE   0xFB01 0xF900      MUL      R9,R1,R0
   \   000000E2   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000000E6   0xEB09 0x050A      ADD      R5,R9,R10
   \   000000EA   0x7B00             LDRB     R0,[R0, #+12]
   \   000000EC   0xF105 0x061C      ADD      R6,R5,#+28
   \   000000F0   0x2801             CMP      R0,#+1
   \   000000F2   0xD02B             BEQ.N    ??AppS2wHal_RxCallBack_9
   2560                  {
   2561          #ifdef S2W_IPv6_SUPPORT
   2562                      if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   2563                      {
   2564                          localport = htons(ClientAddr.sin6_port);
   2565                          memcpy(ipv6,ClientAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   2566                                  GSN_IPv6_CHANGE_ENDIAN(ipv6);
   2567                  
   2568                          s2wCidList[newcid].addrType |= ADDR_TYPE_IPv6;
   2569                          memcpy(s2wCidList[newcid].remoteIpv6,(UINT8*)ipv6,16);
   2570                      }
   2571                      else
   2572          #endif //S2W_IPv6_SUPPORT
   2573                      {
   2574                          localport = htons(srcAddr.sin_port);
   \   000000F4   0x.... 0x....      BL       ?Subroutine4
   2575                          memcpy(ip, &(srcAddr.sin_addr.s_addr), sizeof(ip));
   2576                          *(UINT32*)ip = htonl(*(UINT32*)ip);
   \                     ??CrossCallReturnLabel_3:
   \   000000F8   0x.... 0x....      BL       ?Subroutine34
   2577          
   2578          
   2579                          memcpy(s2wCidList[newcid].remoteIp,(UINT8*)ip,4);
   \                     ??CrossCallReturnLabel_87:
   \   000000FC   0x2204             MOVS     R2,#+4
   \   000000FE   0xA901             ADD      R1,SP,#+4
   \   00000100   0x1DA8             ADDS     R0,R5,#+6
   \   00000102   0x.... 0x....      BL       memcpy
   2580          	            *((ULONG*)s2wCidList[newcid].remoteIp) = htonl(*(ULONG*)s2wCidList[newcid].remoteIp);
   \   00000106   0x.... 0x....      BL       ?Subroutine37
   2581          	        }
   2582          	        ULONG rexTimeOut=75;
   2583          	        setsockopt(new_sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
   \                     ??CrossCallReturnLabel_96:
   \   0000010A   0xAB08             ADD      R3,SP,#+32
   \   0000010C   0x204B             MOVS     R0,#+75
   \   0000010E   0x9008             STR      R0,[SP, #+32]
   \   00000110   0x2229             MOVS     R2,#+41
   \   00000112   0x2004             MOVS     R0,#+4
   \   00000114   0x9000             STR      R0,[SP, #+0]
   \   00000116   0x2103             MOVS     R1,#+3
   \   00000118   0x4638             MOV      R0,R7
   \   0000011A   0x.... 0x....      BL       setsockopt
   2584          			// update the new cid table
   2585                      s2wCidList[newcid].conType = TCP;
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0xF809 0x000A      STRB     R0,[R9, R10]
   2586                      s2wCidList[newcid].conMode = S2W_NETDATA_MODE_CLIENT;
   2587                      s2wCidList[newcid].sd = new_sd;
   2588                      s2wCidList[newcid].remotePort = localport;
   2589          	        s2wCidList[newcid].serverCid = cid;
   2590                      // fill the msg que structure
   2591          		    recvMsg.msgType = S2W_RECV_TYPE_SOCK_ACCEPT;
   2592          		    recvMsg.rData.dataSock = new_sd;
   2593          		    recvMsg.msgLen = 0;
   2594          		    // post a msg to netRx task
   2595          			GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000124   0xA902             ADD      R1,SP,#+8
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x7068             STRB     R0,[R5, #+1]
   \   0000012A   0x61EF             STR      R7,[R5, #+28]
   \   0000012C   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000130   0x80A8             STRH     R0,[R5, #+4]
   \   00000132   0x9805             LDR      R0,[SP, #+20]
   \   00000134   0x74B0             STRB     R0,[R6, #+18]
   \   00000136   0x9702             STR      R7,[SP, #+8]
   \   00000138   0x2033             MOVS     R0,#+51
   \   0000013A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000013E   0x.... 0x....      BL       ?Subroutine8
   2596                  }
   2597                  
   2598          #ifdef S2W_SSL_SERVER_SUPPORT
   2599                  if (s2wCidList[cid].sslflag == TRUE)
   \                     ??CrossCallReturnLabel_14:
   \   00000142   0xF10B 0x0020      ADD      R0,R11,#+32
   \   00000146   0x7B00             LDRB     R0,[R0, #+12]
   \   00000148   0x2801             CMP      R0,#+1
   \   0000014A   0xD130             BNE.N    ??AppS2wHal_RxCallBack_10
   2600                  {
   2601          
   2602          
   2603          
   2604                  localport = htons(srcAddr.sin_port);
   \                     ??AppS2wHal_RxCallBack_9:
   \   0000014C   0x.... 0x....      BL       ?Subroutine4
   2605                  memcpy(ip, &(srcAddr.sin_addr.s_addr), sizeof(ip));
   2606                  *(UINT32*)ip = htonl(*(UINT32*)ip);
   \                     ??CrossCallReturnLabel_2:
   \   00000150   0x.... 0x....      BL       ?Subroutine34
   2607          
   2608          
   2609          
   2610          
   2611                      s2wCidList[newcid].ssl.sslServer =
   2612                          GsnSsl_Accept( s2wCidList[cid].ssl.sslServer );
   \                     ??CrossCallReturnLabel_88:
   \   00000154   0xF10B 0x0020      ADD      R0,R11,#+32
   \   00000158   0x6880             LDR      R0,[R0, #+8]
   \   0000015A   0x.... 0x....      BL       GsnSsl_Accept
   \   0000015E   0x60F0             STR      R0,[R6, #+12]
   2613                      if( NULL == s2wCidList[newcid].ssl.sslServer )
   \   00000160   0xB918             CBNZ.N   R0,??AppS2wHal_RxCallBack_11
   2614                      {
   2615                          soc_close(new_sd);
   \                     ??AppS2wHal_RxCallBack_6:
   \   00000162   0x4638             MOV      R0,R7
   \   00000164   0x.... 0x....      BL       soc_close
   2616                          return;
   \                     ??AppS2wHal_RxCallBack_5:
   \   00000168   0xE064             B.N      ??AppS2wHal_RxCallBack_0
   2617                      }
   2618          
   2619                  s2wCidList[newcid].conType = TCP;
   \                     ??AppS2wHal_RxCallBack_11:
   \   0000016A   0x2002             MOVS     R0,#+2
   \   0000016C   0xF809 0x000A      STRB     R0,[R9, R10]
   2620                  s2wCidList[newcid].conMode = S2W_NETDATA_MODE_CLIENT;
   2621                  s2wCidList[newcid].sd = new_sd;
   2622                  s2wCidList[newcid].remotePort = localport;
   2623                  memcpy(s2wCidList[newcid].remoteIp,(UINT8*)ip,4);
   \   00000170   0x2204             MOVS     R2,#+4
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x7068             STRB     R0,[R5, #+1]
   \   00000176   0x61EF             STR      R7,[R5, #+28]
   \   00000178   0xA901             ADD      R1,SP,#+4
   \   0000017A   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   0000017E   0x80A8             STRH     R0,[R5, #+4]
   \   00000180   0x1DA8             ADDS     R0,R5,#+6
   \   00000182   0x.... 0x....      BL       memcpy
   2624          		s2wCidList[newcid].serverCid = cid;
   \   00000186   0x9805             LDR      R0,[SP, #+20]
   \   00000188   0x74B0             STRB     R0,[R6, #+18]
   2625                  *((ULONG*)s2wCidList[newcid].remoteIp) = htonl(*(ULONG*)s2wCidList[newcid].remoteIp);
   \   0000018A   0x.... 0x....      BL       ?Subroutine37
   2626          
   2627          
   2628                      s2wCidList[newcid].sslflag = TRUE;
   2629          	        s2wCidList[newcid].sslRemoteCliConctng = TRUE;
   2630          			GsnOsal_SemCreate(&s2wCidList[newcid].s2wUserCloseInProgress, 0);			
   \                     ??CrossCallReturnLabel_97:
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x2001             MOVS     R0,#+1
   \   00000192   0x7430             STRB     R0,[R6, #+16]
   \   00000194   0x7470             STRB     R0,[R6, #+17]
   \   00000196   0xF105 0x0038      ADD      R0,R5,#+56
   \   0000019A   0x.... 0x....      BL       GsnOsal_SemCreate
   2631          			AppS2wHal_TimerInit(&s2wCidList[newcid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)newcid);
   \   0000019E   0xA806             ADD      R0,SP,#+24
   \   000001A0   0x.... 0x....      ADR.W    R1,AppS2wHal_HttpCloseTimeout
   \   000001A4   0x7802             LDRB     R2,[R0, #+0]
   \   000001A6   0xF105 0x0058      ADD      R0,R5,#+88
   \   000001AA   0x.... 0x....      BL       AppS2wHal_TimerInit
   2632                  }
   2633          #endif
   2634          
   2635                  TimeOut.tv_sec =  0;
   \                     ??AppS2wHal_RxCallBack_10:
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0x9009             STR      R0,[SP, #+36]
   2636                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;/* 1 tick*/
   2637                  ret = setsockopt(s2wCidList[newcid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   000001B2   0xAB09             ADD      R3,SP,#+36
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable100  ;; 0x186a0
   \   000001B8   0x900A             STR      R0,[SP, #+40]
   \   000001BA   0x.... 0x....      BL       ?Subroutine18
   2638                  if(ret < 0)
   2639                  {
   2640                      //AppS2wHal_NetClose(cid);
   2641                      //return;
   2642                  }
   2643                  nx_bsd_callback_register(s2wCidList[newcid].sd,AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_40:
   \   000001BE   0x.... 0x....      BL       ?Subroutine19
   2644          		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_42:
   \   000001C2   0x6820             LDR      R0,[R4, #+0]
   \   000001C4   0x.... 0x....      BL       ?Subroutine30
   2645          		s2wCidList[cid].clientConCount++;
   \                     ??CrossCallReturnLabel_75:
   \   000001C8   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000001CC   0xF10B 0x0120      ADD      R1,R11,#+32
   \   000001D0   0x7840             LDRB     R0,[R0, #+1]
   \   000001D2   0x1C40             ADDS     R0,R0,#+1
   \   000001D4   0x7048             STRB     R0,[R1, #+1]
   2646          		GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \                     ??AppS2wHal_RxCallBack_8:
   \   000001D6   0x6820             LDR      R0,[R4, #+0]
   \   000001D8   0x4440             ADD      R0,R8,R0
   \   000001DA   0x.... 0x....      BL       GsnOsal_SemRelease
   2647          
   2648                  return;
   \   000001DE   0xE029             B.N      ??AppS2wHal_RxCallBack_0
   2649              }
   2650          
   2651              /* Socket error */
   2652              if (NX_BSD_CB_SOCKET_ERROR & flags)
   \                     ??AppS2wHal_RxCallBack_4:
   \   000001E0   0x.... 0x....      LDR.W    R4,??DataTable82_2
   \   000001E4   0x06B0             LSLS     R0,R6,#+26
   \   000001E6   0xD514             BPL.N    ??AppS2wHal_RxCallBack_12
   2653              {
   2654                  if (s2wCidList[cid].conType != 0)
   \   000001E8   0xF819 0x000A      LDRB     R0,[R9, R10]
   \   000001EC   0xB188             CBZ.N    R0,??AppS2wHal_RxCallBack_12
   2655                  {
   2656          			/* for auto connection (data pipe make the async gpio low-so that host will not send data)
   2657          			 */
   2658          		    if(s2wIsAutoconnected)
   \   000001EE   0x7820             LDRB     R0,[R4, #+0]
   \   000001F0   0xB110             CBZ.N    R0,??AppS2wHal_RxCallBack_13
   2659          		    {
   2660          			   S2w_AsyncMsgGpioOp(0);
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   2661                      }
   2662                     recvMsg.msgType = S2W_RECV_TYPE_SOCK_ERROR;
   \                     ??AppS2wHal_RxCallBack_13:
   \   000001F8   0x2031             MOVS     R0,#+49
   \   000001FA   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2663                     recvMsg.rData.dataSock = sock;
   \   000001FE   0x9702             STR      R7,[SP, #+8]
   2664                     recvMsg.msgLen = 0;
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   2665                     GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000206   0x.... 0x....      BL       ?Subroutine26
   2666          		   S2w_Printf("\r\n SOCKET ERROR");
   \                     ??CrossCallReturnLabel_65:
   \   0000020A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SOCKET ERROR">`
   \   0000020E   0x.... 0x....      BL       S2w_Printf
   2667                  }
   2668          
   2669              }
   2670          
   2671              /* Remote close (for TCP sockets)
   2672               */
   2673              if (NX_BSD_CB_TCP_DISCONNECT & flags)
   \                     ??AppS2wHal_RxCallBack_12:
   \   00000212   0xB17D             CBZ.N    R5,??AppS2wHal_RxCallBack_0
   2674              {
   2675          
   2676                  {
   2677          	        /* for auto connection (data pipe make the async gpio low-so that host will not send data)
   2678          			 */
   2679          		    if(s2wIsAutoconnected)
   \   00000214   0x7820             LDRB     R0,[R4, #+0]
   \   00000216   0xB110             CBZ.N    R0,??AppS2wHal_RxCallBack_14
   2680          		    {
   2681          			   S2w_AsyncMsgGpioOp(0);
   \   00000218   0x2000             MOVS     R0,#+0
   \   0000021A   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   2682                      }
   2683                     recvMsg.msgType = S2W_RECV_TYPE_SOCK_DISCONNECT;
   2684                     recvMsg.rData.dataSock = sock;
   \                     ??AppS2wHal_RxCallBack_14:
   \   0000021E   0x9702             STR      R7,[SP, #+8]
   \   00000220   0x2032             MOVS     R0,#+50
   \   00000222   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2685                     recvMsg.msgLen = 0;
   2686          
   2687                     GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000226   0xA902             ADD      R1,SP,#+8
   \   00000228   0x.... 0x....      BL       ?Subroutine8
   2688          		   S2w_Printf("\r\n TCP DISCONNECT 2");
   \                     ??CrossCallReturnLabel_13:
   \   0000022C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP DISCONNECT 2">`
   \   00000230   0x.... 0x....      BL       S2w_Printf
   2689                  }
   2690              }
   2691          }
   \                     ??AppS2wHal_RxCallBack_0:
   \   00000234   0xB00F             ADD      SP,SP,#+60
   \   00000236   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0xF8D5 0x0006      LDR      R0,[R5, #+6]
   \   00000004   0x0A01             LSRS     R1,R0,#+8
   \   00000006   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000000A   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000000E   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000012   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000016   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000001A   0xF8C5 0x0006      STR      R0,[R5, #+6]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   0x9801             LDR      R0,[SP, #+4]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9901             LDR      R1,[SP, #+4]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9901             LDR      R1,[SP, #+4]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4440             ADD      R0,R8,R0
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable80
   \   00000006   0x.... 0x....      B.W      GsnOsal_QueuePut

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable80
   \   0000000A   0x.... 0x....      B.W      GsnOsal_QueuePut

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0xF8BD 0x002E      LDRH     R0,[SP, #+46]
   \   00000004   0x0201             LSLS     R1,R0,#+8
   \   00000006   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000000A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   0000000E   0x2204             MOVS     R2,#+4
   \   00000010   0xA90C             ADD      R1,SP,#+48
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      B.W      memcpy
   2692          

   \                                 In section .text, align 2, keep-with-next
   2693          UINT8
   2694          AppS2wHal_SockOpSet(S2W_SOCK_OP_T* params)
   2695          {
   \                     AppS2wHal_SockOpSet:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   2696               //UINT8 status;
   2697               VOID *optValue;
   2698               S2W_CID_T *p;
   2699               struct sock_linger linger;
   2700               INT32 ret;
   2701               
   2702              if (params->cid >= MAX_CID_RANGE)
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2910             CMP      R1,#+16
   \   00000006   0xD209             BCS.N    ??AppS2wHal_SockOpSet_0
   2703              {
   2704                  return S2W_EBADCID;
   2705              }
   2706          
   2707              p = &s2wCidList[params->cid];
   \   00000008   0xF44F 0x7294      MOV      R2,#+296
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable94
   \   00000010   0xFB02 0x3401      MLA      R4,R2,R1,R3
   2708              if (p->sd == CID_NOTINUSE)
   \   00000014   0x69E1             LDR      R1,[R4, #+28]
   \   00000016   0xF111 0x0F01      CMN      R1,#+1
   \   0000001A   0xD101             BNE.N    ??AppS2wHal_SockOpSet_1
   2709              {
   2710                  return S2W_EBADCID;
   \                     ??AppS2wHal_SockOpSet_0:
   \   0000001C   0x2005             MOVS     R0,#+5
   \   0000001E   0xE020             B.N      ??AppS2wHal_SockOpSet_2
   2711              }
   2712          
   2713              switch(params->param)
   \                     ??AppS2wHal_SockOpSet_1:
   \   00000020   0x6881             LDR      R1,[R0, #+8]
   \   00000022   0x290D             CMP      R1,#+13
   \   00000024   0xD004             BEQ.N    ??AppS2wHal_SockOpSet_3
   \   00000026   0x2914             CMP      R1,#+20
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0x2915             CMPNE    R1,#+21
   \   0000002C   0xD006             BEQ.N    ??AppS2wHal_SockOpSet_4
   \   0000002E   0xE00B             B.N      ??AppS2wHal_SockOpSet_5
   2714              {
   2715                  case SO_LINGER:
   2716                  {
   2717                      linger.l_onoff = TRUE;
   \                     ??AppS2wHal_SockOpSet_3:
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x9102             STR      R1,[SP, #+8]
   2718                      linger.l_linger = params->paramValue;
   2719                      optValue = (void*)&linger;
   \   00000034   0xAB02             ADD      R3,SP,#+8
   \   00000036   0x68C1             LDR      R1,[R0, #+12]
   \   00000038   0x9103             STR      R1,[SP, #+12]
   2720                  }
   2721                  break;
   \   0000003A   0xE007             B.N      ??AppS2wHal_SockOpSet_6
   2722          
   2723                  case SO_RCVTIMEO:
   2724                  {
   2725                      struct timeval RecvTime;
   2726                      RecvTime.tv_sec =  params->paramValue;
   2727                      RecvTime.tv_usec = 0;
   2728                      optValue = (void*)&RecvTime;
   2729                  }
   2730                  break;
   2731          
   2732                  case SO_SNDTIMEO:
   2733                  {
   2734                      struct timeval SendTime;
   2735                      SendTime.tv_sec =  params->paramValue;
   2736                      SendTime.tv_usec = 0;
   2737                      optValue = (void*)&SendTime;
   \                     ??AppS2wHal_SockOpSet_4:
   \   0000003C   0xAB00             ADD      R3,SP,#+0
   \   0000003E   0x68C1             LDR      R1,[R0, #+12]
   \   00000040   0x9100             STR      R1,[SP, #+0]
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x9101             STR      R1,[SP, #+4]
   2738                  }
   2739                  break;
   \   00000046   0xE001             B.N      ??AppS2wHal_SockOpSet_6
   2740                  default:
   2741                  {
   2742                      optValue = (void*)&params->paramValue;
   \                     ??AppS2wHal_SockOpSet_5:
   \   00000048   0xF100 0x030C      ADD      R3,R0,#+12
   2743                  }
   2744                  break;
   2745              }
   2746              
   2747              ret = setsockopt(p->sd,params->type,params->param,optValue,params->paramSize);
   2748              if(ret < 0)
   \                     ??AppS2wHal_SockOpSet_6:
   \   0000004C   0x6901             LDR      R1,[R0, #+16]
   \   0000004E   0x9100             STR      R1,[SP, #+0]
   \   00000050   0x6882             LDR      R2,[R0, #+8]
   \   00000052   0x6841             LDR      R1,[R0, #+4]
   \   00000054   0x69E0             LDR      R0,[R4, #+28]
   \   00000056   0x.... 0x....      BL       setsockopt
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xBF4C             ITE      MI 
   \   0000005E   0x2003             MOVMI    R0,#+3
   \   00000060   0x2000             MOVPL    R0,#+0
   2749              {
   2750                  return S2W_SOCKFAILURE;
   2751              }
   2752            
   2753          	return S2W_SUCCESS;
   \                     ??AppS2wHal_SockOpSet_2:
   \   00000062   0xB004             ADD      SP,SP,#+16
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
   2754          }
   2755          
   2756          
   2757          #if defined(S2W_SSL_CLIENT_SUPPORT)
   2758          
   2759          extern S2W_SSL_CONF_T s2wSslConf;

   \                                 In section .text, align 2, keep-with-next
   2760          UINT8
   2761          AppS2wHal_HttpCheckDns(UINT8 *reqPath)
   2762          {
   \                     AppS2wHal_HttpCheckDns:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   2763              unsigned char *name = s2wSslConf.dnsNameBuf, *tmp = NULL;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable102_1
   \   00000008   0x6865             LDR      R5,[R4, #+4]
   \   0000000A   0x4680             MOV      R8,R0
   2764              int i = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x....             ADR.N    R7,??DataTable77  ;; "."
   \   00000010   0xE004             B.N      ??AppS2wHal_HttpCheckDns_0
   2765              while((name[i]) && (i < s2wSslConf.dnsBufferLen))
   2766              {
   2767              	if(!strncmp((const char*)name+i, (const char*)reqPath, strlen((const char*)name+i)))
   2768              	{
   2769              		return S2W_SUCCESS;
   2770              	}
   2771                  else if(('*' == *(name+i)) && ('.' == *(name+i+1)))
   2772                  {
   2773                      /* for removing 'www.' */
   2774                      tmp = (unsigned char*)strstr((const char*)reqPath, ".");
   2775                      tmp++;
   2776                      if(!strncmp((const char*)name+i+2, (const char*)reqPath, strlen((const char*)name+i+2)))
   2777                      {
   2778                          return S2W_SUCCESS;
   2779                      }
   2780          
   2781                      else if(!strncmp((const char*)name+i+2, (const char*)tmp, strlen((const char*)name+i+2)))
   2782                      {
   2783                          return S2W_SUCCESS;
   2784                      }
   2785                      else
   2786                      {
   2787                          i += strlen((const char*)name+i);
   2788                          i++;
   \                     ??AppS2wHal_HttpCheckDns_1:
   \   00000012   0x1970             ADDS     R0,R6,R5
   \   00000014   0x.... 0x....      BL       strlen
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x1986             ADDS     R6,R0,R6
   2789                      }
   \                     ??AppS2wHal_HttpCheckDns_0:
   \   0000001C   0x5D70             LDRB     R0,[R6, R5]
   \   0000001E   0xB388             CBZ.N    R0,??AppS2wHal_HttpCheckDns_2
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x4286             CMP      R6,R0
   \   00000024   0xD22E             BCS.N    ??AppS2wHal_HttpCheckDns_2
   \   00000026   0x1970             ADDS     R0,R6,R5
   \   00000028   0x.... 0x....      BL       strlen
   \   0000002C   0x4602             MOV      R2,R0
   \   0000002E   0x4641             MOV      R1,R8
   \   00000030   0x1970             ADDS     R0,R6,R5
   \   00000032   0x.... 0x....      BL       strncmp
   \   00000036   0xB318             CBZ.N    R0,??AppS2wHal_HttpCheckDns_3
   \   00000038   0x5D70             LDRB     R0,[R6, R5]
   \   0000003A   0x282A             CMP      R0,#+42
   \   0000003C   0xBF02             ITTT     EQ 
   \   0000003E   0x1970             ADDEQ    R0,R6,R5
   \   00000040   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000042   0x282E             CMPEQ    R0,#+46
   \   00000044   0xD1E5             BNE.N    ??AppS2wHal_HttpCheckDns_1
   \   00000046   0x4639             MOV      R1,R7
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0x.... 0x....      BL       __iar_Strstr
   \   0000004E   0x4681             MOV      R9,R0
   \   00000050   0x1970             ADDS     R0,R6,R5
   \   00000052   0x1C80             ADDS     R0,R0,#+2
   \   00000054   0x.... 0x....      BL       strlen
   \   00000058   0x4602             MOV      R2,R0
   \   0000005A   0x1970             ADDS     R0,R6,R5
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0x1C80             ADDS     R0,R0,#+2
   \   00000060   0x.... 0x....      BL       strncmp
   \   00000064   0xB160             CBZ.N    R0,??AppS2wHal_HttpCheckDns_3
   \   00000066   0x1970             ADDS     R0,R6,R5
   \   00000068   0x1C80             ADDS     R0,R0,#+2
   \   0000006A   0x.... 0x....      BL       strlen
   \   0000006E   0x4602             MOV      R2,R0
   \   00000070   0x1970             ADDS     R0,R6,R5
   \   00000072   0xF109 0x0101      ADD      R1,R9,#+1
   \   00000076   0x1C80             ADDS     R0,R0,#+2
   \   00000078   0x.... 0x....      BL       strncmp
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD1C8             BNE.N    ??AppS2wHal_HttpCheckDns_1
   \                     ??AppS2wHal_HttpCheckDns_3:
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE024             B.N      ??AppS2wHal_HttpCheckDns_4
   2790                  }
   2791              	else
   2792              	{
   2793              		i += strlen((const char*)name+i);
   2794              		i++;
   2795              	}
   2796              }
   \                     ??AppS2wHal_HttpCheckDns_2:
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable102_2
   \   00000088   0xF890 0x03A8      LDRB     R0,[R0, #+936]
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD104             BNE.N    ??AppS2wHal_HttpCheckDns_5
   2797              if(1 == s2wCurrent.logLevel)
   2798              {
   2799              	S2w_Printf("\r\n warning: certificate mismatch");
   \   00000090   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n warning: certifica...">`
   \   00000094   0x.... 0x....      BL       S2w_Printf
   \   00000098   0xE018             B.N      ??AppS2wHal_HttpCheckDns_6
   2800              }
   2801              else if(2 == s2wCurrent.logLevel)
   \                     ??AppS2wHal_HttpCheckDns_5:
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD116             BNE.N    ??AppS2wHal_HttpCheckDns_6
   2802              {
   2803              	S2w_Printf("\r\n warning: certificate mismatch:");
   \   0000009E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n warning: certifica...">_1`
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   2804              	name = s2wSslConf.dnsNameBuf;
   \   000000A6   0x6865             LDR      R5,[R4, #+4]
   2805                  i = 0;
   \   000000A8   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n %s">`
   \   000000AC   0xE008             B.N      ??AppS2wHal_HttpCheckDns_7
   2806          		while(*name && (i < s2wSslConf.dnsBufferLen))
   2807          		{
   2808          			S2w_Printf("\r\n %s", name);
   \                     ??AppS2wHal_HttpCheckDns_8:
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       S2w_Printf
   2809              		name += strlen((const char*)name);
   2810              		name++;
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       strlen
   \   000000BC   0x1940             ADDS     R0,R0,R5
   \   000000BE   0x1C45             ADDS     R5,R0,#+1
   2811          		}
   \                     ??AppS2wHal_HttpCheckDns_7:
   \   000000C0   0x7828             LDRB     R0,[R5, #+0]
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xBF1C             ITT      NE 
   \   000000C6   0x6820             LDRNE    R0,[R4, #+0]
   \   000000C8   0x2800             CMPNE    R0,#+0
   \   000000CA   0xD1F0             BNE.N    ??AppS2wHal_HttpCheckDns_8
   2812              }
   2813              return S2W_FAILURE;
   \                     ??AppS2wHal_HttpCheckDns_6:
   \   000000CC   0x2001             MOVS     R0,#+1
   \                     ??AppS2wHal_HttpCheckDns_4:
   \   000000CE   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   2814          }

   \                                 In section .text, align 2, keep-with-next
   2815          UINT8 AppS2w_SslClientOpen(UINT8 cliCid, char* caCertName,
   2816                                     UINT8 *clientCertName, UINT8 *clientKeyName)
   2817          {
   \                     AppS2w_SslClientOpen:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x468B             MOV      R11,R1
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0x461D             MOV      R5,R3
   2818              //INT32 u32NoOfBytesSent;
   2819              UINT32 status;
   2820              UINT8 *certBuf = NULL;
   2821              UINT16 caCertsize = 0;
   2822              INT32  index=0;
   2823              //void *pSslConn;
   2824              GSN_SSL_CONN_PARAMS_T sslConnParams;
   2825          	UINT32 cid = cliCid;
   2826          
   2827          #ifdef S2W_APP_SSL_PROVISION
   2828              initStartTime = GsnSoftTmr_CurrentSystemTime();
   2829          #endif
   2830          
   2831              /* Avoid warning*/
   2832              (void)certBuf ;
   2833              (void)caCertsize ;
   2834              memset((INT8 *)&sslConnParams, 0, sizeof(sslConnParams));
   \   0000000E   0x2228             MOVS     R2,#+40
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x.... 0x....      BL       memset
   2835              if (s2wCidList[cid].sslflag == TRUE)
   \   00000018   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_35:
   \   0000001C   0xFB00 0x160A      MLA      R6,R0,R10,R1
   \   00000020   0xF106 0x071C      ADD      R7,R6,#+28
   \   00000024   0x7C38             LDRB     R0,[R7, #+16]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD104             BNE.N    ??AppS2w_SslClientOpen_0
   2836              {
   2837                  S2w_Printf("\r\nSocket is already SSL Enabled");
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSocket is already S...">`
   \   0000002E   0x.... 0x....      BL       S2w_Printf
   2838                  return S2W_FAILURE;
   \   00000032   0xE08C             B.N      ??AppS2w_SslClientOpen_1
   2839              }
   2840          
   2841              if(caCertName != NULL)
   \                     ??AppS2w_SslClientOpen_0:
   \   00000034   0xF04F 0x080C      MOV      R8,#+12
   \   00000038   0x.... 0x....      LDR.W    R9,??DataTable103_1
   \   0000003C   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000040   0xD015             BEQ.N    ??AppS2w_SslClientOpen_2
   2842              {
   2843                  index = S2wCert_SearchRamTable(caCertName);
   \   00000042   0x4658             MOV      R0,R11
   \   00000044   0x.... 0x....      BL       S2wCert_SearchRamTable
   2844                  if(index == -1)
   \   00000048   0xF110 0x0F01      CMN      R0,#+1
   \   0000004C   0xBF04             ITT      EQ 
   \   0000004E   0x4658             MOVEQ    R0,R11
   \   00000050   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2845                  {
   2846                  	index = S2wCert_FlashFileLoad(caCertName);
   2847                  }
   2848                  if(index == -1)
   \   00000054   0xF110 0x0F01      CMN      R0,#+1
   \   00000058   0xD103             BNE.N    ??AppS2w_SslClientOpen_3
   2849                  {
   2850                      S2w_Printf("\n\rca Certificate %s Not Found", caCertName);
   \   0000005A   0x4659             MOV      R1,R11
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rca Certificate %s N...">`
   \   00000060   0xE02B             B.N      ??AppS2w_SslClientOpen_4
   2851                      return S2W_FAILURE;
   2852                  }
   \                     ??AppS2w_SslClientOpen_3:
   \   00000062   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_119:
   \   00000066   0x9102             STR      R1,[SP, #+8]
   2853          
   2854                  // currently use the hardcoded certificate
   2855                  sslConnParams.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2856                  sslConnParams.caCert = s2w_ssl_cert_table[index].certAddress + 2;
   \   00000068   0x9001             STR      R0,[SP, #+4]
   2857                  sslConnParams.caCertName = (char const*)caCertName;
   \   0000006A   0xF8CD 0xB000      STR      R11,[SP, #+0]
   2858              }
   2859          
   2860          
   2861              if(clientCertName != NULL)
   \                     ??AppS2w_SslClientOpen_2:
   \   0000006E   0xB1A4             CBZ.N    R4,??AppS2w_SslClientOpen_5
   2862              {
   2863                  index = S2wCert_SearchRamTable((char*)clientCertName);
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       S2wCert_SearchRamTable
   2864                  if(index == -1)
   \   00000076   0xF110 0x0F01      CMN      R0,#+1
   \   0000007A   0xBF04             ITT      EQ 
   \   0000007C   0x4620             MOVEQ    R0,R4
   \   0000007E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2865                  {
   2866                  	index = S2wCert_FlashFileLoad((char*)clientCertName);
   2867                  }
   2868                  if(index == -1)
   \   00000082   0xF110 0x0F01      CMN      R0,#+1
   \   00000086   0xD103             BNE.N    ??AppS2w_SslClientOpen_6
   2869                  {
   2870                      S2w_Printf("\n\rclient Certificate %s Not Found", clientCertName);
   \   00000088   0x4621             MOV      R1,R4
   \   0000008A   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rclient Certificate ...">`
   \   0000008E   0xE014             B.N      ??AppS2w_SslClientOpen_4
   2871                      return S2W_FAILURE;
   2872                  }
   \                     ??AppS2w_SslClientOpen_6:
   \   00000090   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_120:
   \   00000094   0x9105             STR      R1,[SP, #+20]
   2873                  sslConnParams.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2874                  sslConnParams.clientCert =  s2w_ssl_cert_table[index].certAddress + 2;
   \   00000096   0x9004             STR      R0,[SP, #+16]
   2875                  sslConnParams.clientCertName = (char const*)clientCertName;
   \   00000098   0x9403             STR      R4,[SP, #+12]
   2876          
   2877              }
   2878          
   2879          
   2880              if(clientKeyName != NULL)
   \                     ??AppS2w_SslClientOpen_5:
   \   0000009A   0xB1B5             CBZ.N    R5,??AppS2w_SslClientOpen_7
   2881              {
   2882                  index = S2wCert_SearchRamTable((char*)clientKeyName);
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       S2wCert_SearchRamTable
   2883                  if(index == -1)
   \   000000A2   0xF110 0x0F01      CMN      R0,#+1
   \   000000A6   0xBF04             ITT      EQ 
   \   000000A8   0x4628             MOVEQ    R0,R5
   \   000000AA   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2884                  {
   2885                  	index = S2wCert_FlashFileLoad((char*)clientKeyName);
   2886                  }
   2887                  if(index == -1)
   \   000000AE   0xF110 0x0F01      CMN      R0,#+1
   \   000000B2   0xD105             BNE.N    ??AppS2w_SslClientOpen_8
   2888                  {
   2889                      S2w_Printf("\n\rclient key Certificate %s Not Found", clientKeyName);
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rclient key Certific...">`
   \                     ??AppS2w_SslClientOpen_4:
   \   000000BA   0x.... 0x....      BL       S2w_Printf
   2890                      return S2W_FAILURE;
   \   000000BE   0xE046             B.N      ??AppS2w_SslClientOpen_1
   2891                  }
   \                     ??AppS2w_SslClientOpen_8:
   \   000000C0   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_121:
   \   000000C4   0x9108             STR      R1,[SP, #+32]
   2892                  sslConnParams.clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2893                  sslConnParams.clientKey =  s2w_ssl_cert_table[index].certAddress + 2;
   \   000000C6   0x9007             STR      R0,[SP, #+28]
   2894                  sslConnParams.clientKeyName = (char const*)clientKeyName;
   \   000000C8   0x9506             STR      R5,[SP, #+24]
   2895          
   2896              }
   2897          
   2898              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);    //deregister callback
   \                     ??AppS2w_SslClientOpen_7:
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x69F0             LDR      R0,[R6, #+28]
   \   000000CE   0x.... 0x....      BL       ??Subroutine24_0
   2899          
   2900              s2wCidList[cid].ssl.sslConn = (GSN_SSL_CONN_T*)MALLOC(sizeof(GSN_SSL_CONN_T));
   \                     ??CrossCallReturnLabel_57:
   \   000000D2   0x2034             MOVS     R0,#+52
   \   000000D4   0x.... 0x....      BL       MALLOC
   \   000000D8   0x60F8             STR      R0,[R7, #+12]
   2901          
   2902              if(NULL == s2wCidList[cid].ssl.sslConn)
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD037             BEQ.N    ??AppS2w_SslClientOpen_1
   2903              {
   2904                  return S2W_FAILURE;
   2905              }
   2906          	memset((INT8 *)s2wCidList[cid].ssl.sslConn, 0, sizeof(GSN_SSL_CONN_T));
   \   000000DE   0x2234             MOVS     R2,#+52
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0x.... 0x....      BL       memset
   2907                 s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   \   000000E6   0x68F8             LDR      R0,[R7, #+12]
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x8201             STRH     R1,[R0, #+16]
   2908          	s2wCidList[cid].ssl.sslConn->connMode = GSN_SSL_CONN_MODE_CLIENT;
   2909          	s2wCidList[cid].sslflag = TRUE;
   2910          
   2911          #ifdef S2W_SSL_EXT_MAX_FRAG_LEN
   2912              s2wCidList[cid].ssl.sslConn->maxFragLen = S2W_SSL_EXT_MAX_FRAG_LEN;
   2913          #else
   2914              s2wCidList[cid].ssl.sslConn->maxFragLen = 0;
   2915          #endif
   2916          
   2917          #if 1 /*SSl open is now done in Wdd task context*/
   2918              status = GsnSsl_Open(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd,
   2919                                   &sslConnParams);
   2920          #else
   2921          	{
   2922          		UINT32 msg;
   2923          		/*create open sem*/
   2924          		GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   2925          		s2wCidList[cid].pConnOpenParams = &sslConnParams;
   2926          		/*post message */
   2927          		msg = (S2W_MOD_NOTIF_CONN_START + cid);
   2928          		GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   2929          		GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress,GSN_OSAL_WAIT_FOREVER);
   2930          		status = s2wCidList[cid].openStatus;
   2931          		/*Delete the semaphore*/
   2932          		GsnOsal_SemDelete(&s2wCidList[cid].s2wUserOpenInProgress);
   2933          	}
   2934          #endif
   2935              if(status == GSN_SUCCESS)
   \   000000EC   0xAA00             ADD      R2,SP,#+0
   \   000000EE   0x68F8             LDR      R0,[R7, #+12]
   \   000000F0   0x6001             STR      R1,[R0, #+0]
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x7438             STRB     R0,[R7, #+16]
   \   000000F6   0x68F8             LDR      R0,[R7, #+12]
   \   000000F8   0xF880 0x1028      STRB     R1,[R0, #+40]
   \   000000FC   0x68F8             LDR      R0,[R7, #+12]
   \   000000FE   0x69F1             LDR      R1,[R6, #+28]
   \   00000100   0x.... 0x....      BL       GsnSsl_Open
   \   00000104   0xB9A0             CBNZ.N   R0,??AppS2w_SslClientOpen_9
   2936              {
   2937                  nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   \   00000106   0x69F0             LDR      R0,[R6, #+28]
   \   00000108   0x.... 0x....      BL       ??Subroutine20_0
   2938          		s2wCidList[cid].sslflag = TRUE;
   \                     ??CrossCallReturnLabel_44:
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x7438             STRB     R0,[R7, #+16]
   2939          
   2940                  GsnOsal_SemCreate(&s2wCidList[cid].s2wUserCloseInProgress, 0);
   \   00000110   0x2100             MOVS     R1,#+0
   \   00000112   0xF106 0x0038      ADD      R0,R6,#+56
   \   00000116   0x.... 0x....      BL       GsnOsal_SemCreate
   2941                  AppS2wHal_TimerInit(&s2wCidList[cid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)cid);
   \   0000011A   0x4652             MOV      R2,R10
   \   0000011C   0x.... 0x....      ADR.W    R1,AppS2wHal_HttpCloseTimeout
   \   00000120   0xF106 0x0058      ADD      R0,R6,#+88
   \   00000124   0x.... 0x....      BL       AppS2wHal_TimerInit
   2942                  s2wCidList[cid].s2wUsrCloseFlag = 0;
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0xF886 0x0090      STRB     R0,[R6, #+144]
   2943                  return S2W_SUCCESS;
   \   0000012E   0xE00F             B.N      ??AppS2w_SslClientOpen_10
   2944              }
   2945              else
   2946              {
   2947                  s2wCidList[cid].sslflag = 0;
   \                     ??AppS2w_SslClientOpen_9:
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x7438             STRB     R0,[R7, #+16]
   2948                  if(s2wCidList[cid].ssl.sslConn != NULL)
   \   00000134   0x68F8             LDR      R0,[R7, #+12]
   \   00000136   0xB108             CBZ.N    R0,??AppS2w_SslClientOpen_11
   2949                  {
   2950                      gsn_free(s2wCidList[cid].ssl.sslConn);
   \   00000138   0x.... 0x....      BL       GsnDynMemMgmt_Free
   2951                  }
   2952          
   2953                     soc_close(s2wCidList[cid].sd);
   \                     ??AppS2w_SslClientOpen_11:
   \   0000013C   0x69F0             LDR      R0,[R6, #+28]
   \   0000013E   0x.... 0x....      BL       soc_close
   2954                     s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000142   0xF04F 0x30FF      MOV      R0,#-1
   \   00000146   0x61F0             STR      R0,[R6, #+28]
   2955                     s2wCidList[cid].localPort = 0;
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x8070             STRH     R0,[R6, #+2]
   2956                     s2wCidList[cid].remotePort = 0;
   \   0000014C   0x80B0             STRH     R0,[R6, #+4]
   2957                  return S2W_FAILURE;
   \                     ??AppS2w_SslClientOpen_1:
   \   0000014E   0x2001             MOVS     R0,#+1
   \                     ??AppS2w_SslClientOpen_10:
   \   00000150   0xB00B             ADD      SP,SP,#+44
   \   00000152   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2958              }
   2959          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0xFB08 0x9000      MLA      R0,R8,R0,R9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF830 0x1B02      LDRH     R1,[R0], #+2
   \   0000000A   0x4770             BX       LR
   2960          #endif
   2961          
   2962          
   2963          #ifdef S2W_SSL_SERVER_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   2964          GSN_STATUS AppS2w_SslServerOpen(UINT8 cid, char* sslCACertName)
   2965          {
   \                     AppS2w_SslServerOpen:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2966              //UINT8 retVal = S2W_FAILURE;
   2967              //INT32 u32NoOfBytesSent;
   2968              UINT32 /*status,*/ certLength ;
   2969              INT32  index=0;
   2970              SERVER_CERT_DETAIL_T certDetail;
   2971          #ifdef S2W_APP_SSL_PROVISION
   2972              initStartTime = GsnSoftTmr_CurrentSystemTime();
   2973          #endif
   2974          
   2975              if (s2wCidList[cid].sslflag == TRUE)
   \   00000004   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_89:
   \   00000008   0xF104 0x0028      ADD      R0,R4,#+40
   \   0000000C   0xB08E             SUB      SP,SP,#+56
   \   0000000E   0x7901             LDRB     R1,[R0, #+4]
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD104             BNE.N    ??AppS2w_SslServerOpen_0
   2976              {
   2977                  S2w_Printf("\r\nSocket is already SSL Enabled");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSocket is already S...">`
   \   00000018   0x.... 0x....      BL       S2w_Printf
   2978                  return S2W_FAILURE;
   \   0000001C   0xE04F             B.N      ??AppS2w_SslServerOpen_1
   2979              }
   2980          
   2981          
   2982              s2wCidList[cid].sslflag = TRUE;
   \                     ??AppS2w_SslServerOpen_0:
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x7101             STRB     R1,[R0, #+4]
   2983              /* Fill the certificate details here. For testing it takes the below
   2984                 certificates */
   2985           #ifndef S2W_SSL_SERVER_TEST
   2986           	memset((INT8 *)&certDetail, 0, sizeof(certDetail));
   \   00000022   0x2234             MOVS     R2,#+52
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x.... 0x....      BL       memset
   2987          
   2988              index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_CA);
   \   0000002C   0x.... 0x....      ADR.W    R6,`?<Constant "SSL_CA">`
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       S2wCert_SearchRamTable
   2989              if(index == -1)
   \   00000036   0xF110 0x0F01      CMN      R0,#+1
   \   0000003A   0xBF04             ITT      EQ 
   \   0000003C   0x4630             MOVEQ    R0,R6
   \   0000003E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2990              {
   2991              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_CA);
   2992              }
   2993              if(index == -1)
   \   00000042   0x.... 0x....      ADR.W    R5,`?<Constant "\\n\\rCertificate %s Not ...">`
   \   00000046   0xF110 0x0F01      CMN      R0,#+1
   \   0000004A   0xBF08             IT       EQ 
   \   0000004C   0x4631             MOVEQ    R1,R6
   2994              {
   2995                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_CA);
   \   0000004E   0xD033             BEQ.N    ??AppS2w_SslServerOpen_2
   2996                  return S2W_FAILURE;
   2997              }
   2998          
   2999              certDetail.CaCertName = (char const *)s2w_ssl_cert_table[index].name;
   \   00000050   0x260C             MOVS     R6,#+12
   \   00000052   0x4370             MULS     R0,R6,R0
   \   00000054   0x.... 0x....      LDR.W    R7,??DataTable103_1
   3000              certDetail.CaCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   3001              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   3002              certLength <<= 8;
   3003              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   3004              certDetail.CaCertLen = certLength;
   3005          
   3006          	index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_SERVER);
   \   00000058   0x.... 0x....      ADR.W    R8,`?<Constant "SSL_SERVER">`
   \   0000005C   0x19C1             ADDS     R1,R0,R7
   \   0000005E   0x6849             LDR      R1,[R1, #+4]
   \   00000060   0x9100             STR      R1,[SP, #+0]
   \   00000062   0x59C0             LDR      R0,[R0, R7]
   \   00000064   0x1C81             ADDS     R1,R0,#+2
   \   00000066   0x9101             STR      R1,[SP, #+4]
   \   00000068   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_124:
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       S2wCert_SearchRamTable
   3007              if(index == -1)
   \   00000074   0xF110 0x0F01      CMN      R0,#+1
   \   00000078   0xBF04             ITT      EQ 
   \   0000007A   0x4640             MOVEQ    R0,R8
   \   0000007C   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   3008              {
   3009              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_SERVER);
   3010              }
   3011              if(index == -1)
   \   00000080   0xF110 0x0F01      CMN      R0,#+1
   \   00000084   0xD017             BEQ.N    ??AppS2w_SslServerOpen_3
   3012              {
   3013                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_SERVER);
   3014                  return S2W_FAILURE;
   3015              }
   3016          
   3017              certDetail.ClientCertName = (char const *)s2w_ssl_cert_table[index].name;
   \   00000086   0x4370             MULS     R0,R6,R0
   \   00000088   0x19C1             ADDS     R1,R0,R7
   3018              certDetail.ClientCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   3019              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   3020              certLength <<= 8;
   3021              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   3022              certDetail.ClientCertLen = certLength;
   3023          
   3024          	index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_KEY);
   \   0000008A   0x.... 0x....      ADR.W    R8,`?<Constant "SSL_KEY">`
   \   0000008E   0x6849             LDR      R1,[R1, #+4]
   \   00000090   0x9103             STR      R1,[SP, #+12]
   \   00000092   0x59C0             LDR      R0,[R0, R7]
   \   00000094   0x1C81             ADDS     R1,R0,#+2
   \   00000096   0x9104             STR      R1,[SP, #+16]
   \   00000098   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_125:
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x4640             MOV      R0,R8
   \   000000A0   0x.... 0x....      BL       S2wCert_SearchRamTable
   3025              if(index == -1)
   \   000000A4   0xF110 0x0F01      CMN      R0,#+1
   \   000000A8   0xBF04             ITT      EQ 
   \   000000AA   0x4640             MOVEQ    R0,R8
   \   000000AC   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   3026              {
   3027              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_KEY);
   3028              }
   3029              if(index == -1)
   \   000000B0   0xF110 0x0F01      CMN      R0,#+1
   \   000000B4   0xD105             BNE.N    ??AppS2w_SslServerOpen_4
   3030              {
   3031                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_KEY);
   \                     ??AppS2w_SslServerOpen_3:
   \   000000B6   0x4641             MOV      R1,R8
   \                     ??AppS2w_SslServerOpen_2:
   \   000000B8   0x4628             MOV      R0,R5
   \   000000BA   0x.... 0x....      BL       S2w_Printf
   3032                  return S2W_FAILURE;
   \                     ??AppS2w_SslServerOpen_1:
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE012             B.N      ??AppS2w_SslServerOpen_5
   3033              }
   3034              
   3035              certDetail.PrivateKeyName = (char const *)s2w_ssl_cert_table[index].name;
   \                     ??AppS2w_SslServerOpen_4:
   \   000000C2   0x4370             MULS     R0,R6,R0
   \   000000C4   0x19C1             ADDS     R1,R0,R7
   \   000000C6   0x6849             LDR      R1,[R1, #+4]
   \   000000C8   0x9106             STR      R1,[SP, #+24]
   3036              certDetail.PrivateKeyLocation = s2w_ssl_cert_table[index].certAddress + 2;
   \   000000CA   0x59C0             LDR      R0,[R0, R7]
   \   000000CC   0x1C81             ADDS     R1,R0,#+2
   \   000000CE   0x9107             STR      R1,[SP, #+28]
   3037              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   3038              certLength <<= 8;
   3039              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   3040              certDetail.PrivateKeyLen = certLength;
   \   000000D0   0x.... 0x....      BL       ?Subroutine45
   \                     ??CrossCallReturnLabel_126:
   \   000000D4   0x9008             STR      R0,[SP, #+32]
   3041          
   3042          #else
   3043          
   3044              certDetail.CaCertName = "ca_cert.crt";
   3045              certDetail.CaCertLocation = ca_cert;
   3046              certDetail.CaCertLen = sizeof(ca_cert);
   3047              certDetail.ClientCertName = "server_cert.crt";
   3048              certDetail.ClientCertLocation = server_cert;
   3049              certDetail.ClientCertLen = sizeof(server_cert);
   3050              certDetail.PrivateKeyName = "server_key.key";
   3051              certDetail.PrivateKeyLocation = server_key;
   3052              certDetail.PrivateKeyLen = sizeof(server_key);
   3053          #endif
   3054              s2wCidList[cid].ssl.pServerCred =
   3055                  GsnSsl_ServerInit( &certDetail );
   \   000000D6   0xA800             ADD      R0,SP,#+0
   \   000000D8   0x.... 0x....      BL       GsnSsl_ServerInit
   \   000000DC   0x62A0             STR      R0,[R4, #+40]
   3056          
   3057              if(s2wCidList[cid].ssl.pServerCred == NULL )
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xBF0C             ITE      EQ 
   \   000000E2   0xF04F 0x4000      MOVEQ    R0,#-2147483648
   \   000000E6   0x2000             MOVNE    R0,#+0
   3058                  return GSN_FAILURE;
   3059              return S2W_SUCCESS;
   \                     ??AppS2w_SslServerOpen_5:
   \   000000E8   0xB00E             ADD      SP,SP,#+56
   \   000000EA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3060          
   3061          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable94
   \   00000008   0xFB01 0x2400      MLA      R4,R1,R0,R2
   \   0000000C   0x4770             BX       LR
   3062          #endif
   3063          
   3064          

   \                                 In section .text, align 2, keep-with-next
   3065          PUBLIC GSN_STATUS
   3066          AppS2w_SslClose(UINT8 cid)
   3067          {
   \                     AppS2w_SslClose:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   3068              if (s2wCidList[cid].sslflag == TRUE)
   \   00000004   0xF44F 0x7094      MOV      R0,#+296
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable94
   \   0000000C   0xFB00 0x1504      MLA      R5,R0,R4,R1
   \   00000010   0xF105 0x061C      ADD      R6,R5,#+28
   \   00000014   0x7C30             LDRB     R0,[R6, #+16]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD111             BNE.N    ??AppS2w_SslClose_0
   3069              {
   3070              	if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_CLIENT)
   \   0000001A   0x7868             LDRB     R0,[R5, #+1]
   \   0000001C   0xB950             CBNZ.N   R0,??CrossCallReturnLabel_74
   3071              	{
   3072          	        s2wCidList[cid].s2wUsrCloseFlag = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xF885 0x0090      STRB     R0,[R5, #+144]
   3073          			/* start a timer for 10 seconds, to come ou if the sever does not respond
   3074          			*/
   3075          	        AppS2wHal_TimerStart(&s2wCidList[cid].s2wUserCloseTimer, 1000);
   \   00000024   0x.... 0x....      BL       ?Subroutine44
   3076          			/* Send Alert*/
   3077          	        GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   \                     ??CrossCallReturnLabel_123:
   \   00000028   0x69E9             LDR      R1,[R5, #+28]
   \   0000002A   0x68F0             LDR      R0,[R6, #+12]
   \   0000002C   0x.... 0x....      BL       GsnSsl_Alert
   3078          			/* wait on the semaphore to recv the remote close. This semaphore will be relesed in case of
   3079          			1. Socket error OR
   3080          			2. Remote socket close OR
   3081          			3. Socket Disconnect OR
   3082          			4. Time out
   3083          			*/
   3084          	        GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserCloseInProgress, GSN_OSAL_WAIT_FOREVER);
   \   00000030   0x.... 0x....      BL       ?Subroutine29
   3085              	}
   3086          		/*Either close or Timeout happened*/
   3087          		AppS2w_SslLocalClose(cid);
   \                     ??CrossCallReturnLabel_74:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       AppS2w_SslLocalClose
   3088                  return S2W_SUCCESS;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xBD70             POP      {R4-R6,PC}
   3089              }
   3090              else
   3091              {
   3092                  return S2W_EBADCID;
   \                     ??AppS2w_SslClose_0:
   \   0000003E   0x2005             MOVS     R0,#+5
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
   3093              }
   3094          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0xF44F 0x717A      MOV      R1,#+1000
   \   00000004   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000008   0x.... 0x....      B.W      AppS2wHal_TimerStart

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0xF105 0x0038      ADD      R0,R5,#+56
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3095          

   \                                 In section .text, align 2, keep-with-next
   3096          PRIVATE GSN_STATUS
   3097          AppS2w_SslLocalClose(UINT8 cid)
   3098          {
   \                     AppS2w_SslLocalClose:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   3099              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);
   \   00000002   0x.... 0x....      BL       ?Subroutine35
   \                     ??CrossCallReturnLabel_90:
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x69E0             LDR      R0,[R4, #+28]
   \   0000000A   0x.... 0x....      BL       ??Subroutine24_0
   3100          	if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_CLIENT)
   \                     ??CrossCallReturnLabel_56:
   \   0000000E   0x7860             LDRB     R0,[R4, #+1]
   \   00000010   0xF104 0x051C      ADD      R5,R4,#+28
   \   00000014   0xB918             CBNZ.N   R0,??AppS2w_SslLocalClose_0
   3101              {
   3102                  GsnSsl_Close(s2wCidList[cid].ssl.sslConn);
   \   00000016   0x68E8             LDR      R0,[R5, #+12]
   \   00000018   0x.... 0x....      BL       GsnSsl_Close
   \   0000001C   0xE004             B.N      ??AppS2w_SslLocalClose_1
   3103          	}
   3104          	else if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_SERVER)
   \                     ??AppS2w_SslLocalClose_0:
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xBF04             ITT      EQ 
   \   00000022   0x68E8             LDREQ    R0,[R5, #+12]
   \   00000024   0x.... 0x....      BLEQ     GsnSsl_ServerDeInit
   3105          	{
   3106          #ifdef S2W_SSL_SERVER_SUPPORT
   3107          		GsnSsl_ServerDeInit(s2wCidList[cid].ssl.pServerCred);
   3108          #endif
   3109          	}
   3110              s2wCidList[cid].ssl.sslConn = NULL;
   \                     ??AppS2w_SslLocalClose_1:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x60E8             STR      R0,[R5, #+12]
   3111              s2wCidList[cid].sslflag = FALSE;
   \   0000002C   0x7428             STRB     R0,[R5, #+16]
   3112              soc_close(s2wCidList[cid].sd);
   \   0000002E   0x69E0             LDR      R0,[R4, #+28]
   \   00000030   0x.... 0x....      BL       soc_close
   3113              s2wCidList[cid].localPort = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x8060             STRH     R0,[R4, #+2]
   3114              s2wCidList[cid].remotePort = 0;
   \   00000038   0x80A0             STRH     R0,[R4, #+4]
   3115          
   3116          	/* Delete Close In progress semaphore*/
   3117          	GsnOsal_SemDelete(&s2wCidList[cid].s2wUserCloseInProgress);
   \   0000003A   0xF104 0x0038      ADD      R0,R4,#+56
   \   0000003E   0x.... 0x....      BL       GsnOsal_SemDelete
   3118          	s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000042   0xF04F 0x30FF      MOV      R0,#-1
   \   00000046   0x61E0             STR      R0,[R4, #+28]
   3119              return S2W_SUCCESS;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   3120          }
   3121          

   \                                 In section .text, align 4, keep-with-next
   3122          PRIVATE VOID
   3123          AppS2wHal_HttpCloseTimeout(VOID *data)
   3124          {
   3125              UINT32 cid = (UINT32)data;
   3126              GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     AppS2wHal_HttpCloseTimeout:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable94
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x3038             ADDS     R0,R0,#+56
   \   0000000E   0x.... 0x....      B.W      GsnOsal_SemRelease
   3127          }
   3128          
   3129          #ifdef S2W_HTTPC_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   3130          UINT8
   3131          AppS2wHal_HttpClose(UINT32 cid)
   3132          {
   \                     AppS2wHal_HttpClose:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   3133          #ifdef S2W_HTTPS_SUPPORT
   3134          		ttHttpcConEntryPtr		conEntryPtr;
   3135          #endif
   3136          	s2wCidList[cid].s2wUsrCloseFlag = 1;
   \   00000004   0xF44F 0x7094      MOV      R0,#+296
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable94
   \   0000000C   0xFB00 0x1504      MLA      R5,R0,R4,R1
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF885 0x0090      STRB     R0,[R5, #+144]
   3137                   if(s2wCidList[cid].pHttpData)
   \   00000016   0x6B68             LDR      R0,[R5, #+52]
   \   00000018   0xB170             CBZ.N    R0,??AppS2wHal_HttpClose_0
   3138                   {
   3139          #ifdef S2W_HTTPS_SUPPORT
   3140          		conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   3141          		if(conEntryPtr->hconHttpType == GSN_HTTPS)
   \   0000001A   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_103:
   \   0000001E   0xD106             BNE.N    ??CrossCallReturnLabel_73
   3142                      {
   3143          
   3144          			AppS2wHal_TimerStart(&s2wCidList[cid].s2wUserCloseTimer, 1000);
   \   00000020   0x.... 0x....      BL       ?Subroutine44
   3145          			GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??CrossCallReturnLabel_122:
   \   00000024   0x6B68             LDR      R0,[R5, #+52]
   \   00000026   0x.... 0x....      BL       ?Subroutine40
   3146          			GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserCloseInProgress, GSN_OSAL_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_104:
   \   0000002A   0x.... 0x....      BL       ?Subroutine29
   3147          			AppS2wHal_HttpLocalClose(cid);
   3148                      }
   3149          		else /* normal http directly close the connection */
   3150          #endif    
   3151          		{
   3152          			AppS2wHal_HttpLocalClose(cid);
   \                     ??CrossCallReturnLabel_73:
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   3153                  }
   3154          	}
   3155                  else
   3156                  {
   3157                      return S2W_EBADCID;
   3158              }
   3159              return S2W_SUCCESS;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??AppS2wHal_HttpClose_0:
   \   00000038   0x2005             MOVS     R0,#+5
   \   0000003A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   3160          }
   3161          

   \                                 In section .text, align 2, keep-with-next
   3162          UINT8
   3163          AppS2wHal_HttpOpen(S2W_HTTP_DATA_T *pHttpData, UINT32 *cid)
   3164          {
   \                     AppS2wHal_HttpOpen:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB096             SUB      SP,SP,#+88
   \   00000006   0x4604             MOV      R4,R0
   3165              GSN_STATUS status;
   3166              //UINT32 ip;
   3167              GSN_HTTPC_CONN_PARAMS_T connParams;
   3168          	struct sockaddr_in sockAddr;
   3169          	INT32 len = sizeof(sockAddr), ret;
   \   00000008   0x2010             MOVS     R0,#+16
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   3170          
   3171              *cid = AppS2wHal_CidGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000012   0x6028             STR      R0,[R5, #+0]
   3172              if (*cid == INVALID_CID)
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x2004             MOVEQ    R0,#+4
   3173              {
   3174                      return S2W_ENCID;
   \   0000001A   0xD064             BEQ.N    ??AppS2wHal_HttpOpen_0
   3175              }
   3176          
   3177              connParams.ConTimeout = pHttpData->connTimeOut;
   \   0000001C   0x6CE0             LDR      R0,[R4, #+76]
   3178              connParams.proxyPresent = pHttpData->proxyServer;
   3179              connParams.type = pHttpData->httpType;
   3180          #if defined(S2W_SSL_CLIENT_SUPPORT)
   3181              connParams.sslParams.caCert = pHttpData->pCaCert;
   3182              connParams.sslParams.caCertLen = pHttpData->caCertLen;
   3183              connParams.sslParams.caCertName = NULL;
   3184          
   3185              connParams.sslParams.clientCert= pHttpData->pClientCert;
   3186              connParams.sslParams.clientCertLen = pHttpData->clientCertLen;
   3187              connParams.sslParams.clientCertName = NULL;
   3188          
   3189              connParams.sslParams.clientKey = pHttpData->pClientKey;
   3190              connParams.sslParams.clientKeyLen = pHttpData->clientKeyLen;
   3191              connParams.sslParams.clientKeyName = NULL;
   3192          #endif    
   3193          	s2wCidList[*cid].httpflag = 1;
   \   0000001E   0x.... 0x....      LDR.W    R8,??DataTable94
   \   00000022   0x9002             STR      R0,[SP, #+8]
   \   00000024   0xF44F 0x7694      MOV      R6,#+296
   \   00000028   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000002C   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x7B20             LDRB     R0,[R4, #+12]
   \   00000034   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x88E0             LDRH     R0,[R4, #+6]
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0x6D60             LDR      R0,[R4, #+84]
   \   00000046   0x9007             STR      R0,[SP, #+28]
   \   00000048   0xF8B4 0x0050      LDRH     R0,[R4, #+80]
   \   0000004C   0x9008             STR      R0,[SP, #+32]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9006             STR      R0,[SP, #+24]
   \   00000052   0x6DE0             LDR      R0,[R4, #+92]
   \   00000054   0x900A             STR      R0,[SP, #+40]
   \   00000056   0xF8B4 0x0058      LDRH     R0,[R4, #+88]
   \   0000005A   0x900B             STR      R0,[SP, #+44]
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9009             STR      R0,[SP, #+36]
   \   00000060   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_110:
   \   00000064   0xF880 0x102F      STRB     R1,[R0, #+47]
   3194              s2wCidList[*cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
   \   00000068   0x2107             MOVS     R1,#+7
   \   0000006A   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_111:
   \   0000006E   0x7041             STRB     R1,[R0, #+1]
   3195          
   3196          #ifdef S2W_SSL_EXT_MAX_FRAG_LEN
   3197              connParams.sslExtnMaxFragLen = S2W_SSL_EXT_MAX_FRAG_LEN;
   3198          #else
   3199              connParams.sslExtnMaxFragLen = 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x900E             STR      R0,[SP, #+56]
   3200          #endif
   3201          
   3202          	//if(pHttpData->httpType == GSN_HTTP)
   3203          	{
   3204          		//httpConfInfo.pktPoolHndl = GsnNw_PktPoolHndlGet(&appCtx.nwCtx, GSN_NW_LBUF_PKT_POOL);
   3205          #if defined(S2W_SSL_CLIENT_SUPPORT)
   3206              	if((pHttpData->httpType == GSN_HTTPS) && (0 != s2wSslConf.dnsBufferLen))
   \   00000074   0x7B20             LDRB     R0,[R4, #+12]
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD11C             BNE.N    ??AppS2wHal_HttpOpen_1
   \   0000007A   0x.... 0x....      LDR.W    R7,??DataTable102_1
   \   0000007E   0x6838             LDR      R0,[R7, #+0]
   \   00000080   0xB1C0             CBZ.N    R0,??AppS2wHal_HttpOpen_1
   3207              	{
   3208          			connParams.dnsBuf = gsn_malloc(sizeof(GSN_SSL_DNS_BUF_INFO_T));
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0xF640 0x4188      MOVW     R1,#+3208
   \   00000088   0x200C             MOVS     R0,#+12
   \   0000008A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000008E   0x9010             STR      R0,[SP, #+64]
   3209          			s2wSslConf.dnsNameBuf = gsn_malloc(s2wSslConf.dnsBufferLen);
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x6838             LDR      R0,[R7, #+0]
   \   00000094   0xF640 0x4189      MOVW     R1,#+3209
   \   00000098   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000009C   0x6078             STR      R0,[R7, #+4]
   3210          			memset(s2wSslConf.dnsNameBuf, 0, s2wSslConf.dnsBufferLen);
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x683A             LDR      R2,[R7, #+0]
   \   000000A2   0x.... 0x....      BL       memset
   3211          			connParams.dnsBuf->bufStart = connParams.dnsBuf->bufCurrent =  s2wSslConf.dnsNameBuf;
   \   000000A6   0x9910             LDR      R1,[SP, #+64]
   \   000000A8   0x6878             LDR      R0,[R7, #+4]
   \   000000AA   0x6088             STR      R0,[R1, #+8]
   \   000000AC   0x6008             STR      R0,[R1, #+0]
   3212          			connParams.dnsBuf->bufLen = s2wSslConf.dnsBufferLen;
   \   000000AE   0x6838             LDR      R0,[R7, #+0]
   \   000000B0   0x6048             STR      R0,[R1, #+4]
   \   000000B2   0xE001             B.N      ??AppS2wHal_HttpOpen_2
   3213              	}
   3214              	else
   3215              	{
   3216              		connParams.dnsBuf = NULL;
   \                     ??AppS2wHal_HttpOpen_1:
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9010             STR      R0,[SP, #+64]
   3217              	}
   3218          #endif		
   3219                  status = GsnHttp_Start(&pHttpData->pHttpHandle, &pHttpData->sockAddr,
   3220                      &connParams, &httpConfInfo);
   \                     ??AppS2wHal_HttpOpen_2:
   \   000000B8   0xAA01             ADD      R2,SP,#+4
   \   000000BA   0x.... 0x....      LDR.W    R3,??DataTable109
   \   000000BE   0xF104 0x0110      ADD      R1,R4,#+16
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       GsnHttp_Start
   \   000000C8   0x4607             MOV      R7,R0
   3221                  if(NULL != connParams.dnsBuf)
   \   000000CA   0x9810             LDR      R0,[SP, #+64]
   \   000000CC   0xB108             CBZ.N    R0,??AppS2wHal_HttpOpen_3
   3222                  	gsn_free(connParams.dnsBuf);
   \   000000CE   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3223                  connParams.dnsBuf = NULL;
   \                     ??AppS2wHal_HttpOpen_3:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9010             STR      R0,[SP, #+64]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   000000DC   0xB127             CBZ.N    R7,??AppS2wHal_HttpOpen_4
   3224          	}
   3225          	
   3226          
   3227              if(status != GSN_SUCCESS)
   3228              {
   3229          		s2wCidList[*cid].httpflag = 0;
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0xF880 0x102F      STRB     R1,[R0, #+47]
   3230                  return S2W_FAILURE;
   \   000000E4   0x2001             MOVS     R0,#+1
   \                     ??AppS2wHal_HttpOpen_0:
   \   000000E6   0xE05E             B.N      ??AppS2wHal_HttpOpen_5
   3231              }
   3232          
   3233              s2wCidList[*cid].sd = ((ttHttpcConEntryPtr)pHttpData->pHttpHandle)->hconSd;
   \                     ??AppS2wHal_HttpOpen_4:
   \   000000E8   0x6821             LDR      R1,[R4, #+0]
   \   000000EA   0xF8D1 0x10A8      LDR      R1,[R1, #+168]
   \   000000EE   0x61C1             STR      R1,[R0, #+28]
   3234              s2wCidList[*cid].conType = TCP;
   \   000000F0   0x2102             MOVS     R1,#+2
   \   000000F2   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_112:
   \   000000F6   0x7001             STRB     R1,[R0, #+0]
   3235              s2wCidList[*cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_113:
   \   000000FE   0x7041             STRB     R1,[R0, #+1]
   \   00000100   0x6828             LDR      R0,[R5, #+0]
   \   00000102   0x8A61             LDRH     R1,[R4, #+18]
   \   00000104   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   00000108   0x020A             LSLS     R2,R1,#+8
   \   0000010A   0xEA42 0x2111      ORR      R1,R2,R1, LSR #+8
   \   0000010E   0x8081             STRH     R1,[R0, #+4]
   3236              s2wCidList[*cid].remotePort = ntohs(pHttpData->sockAddr.ss_port);
   3237              s2wCidList[*cid].pHttpData = pHttpData;
   \   00000110   0x6344             STR      R4,[R0, #+52]
   3238              s2wCidList[*cid].httpflag = 1;
   \   00000112   0x2101             MOVS     R1,#+1
   \   00000114   0xF880 0x102F      STRB     R1,[R0, #+47]
   3239          	s2wCidList[*cid].serverCid = INVALID_CID;
   \   00000118   0x21FF             MOVS     R1,#+255
   \   0000011A   0x.... 0x....      BL       ?Subroutine42
   3240          	ret = getsockname(s2wCidList[*cid].sd, (struct sockaddr *)&sockAddr,&len);
   3241              if(ret < 0)
   \                     ??CrossCallReturnLabel_114:
   \   0000011E   0xAA00             ADD      R2,SP,#+0
   \   00000120   0xF880 0x102E      STRB     R1,[R0, #+46]
   \   00000124   0xA911             ADD      R1,SP,#+68
   \   00000126   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_115:
   \   0000012A   0x69C0             LDR      R0,[R0, #+28]
   \   0000012C   0x.... 0x....      BL       getsockname
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD505             BPL.N    ??AppS2wHal_HttpOpen_6
   3242              {
   3243                  AppS2wHal_NetClose(*cid);
   \   00000134   0x6828             LDR      R0,[R5, #+0]
   \   00000136   0xB2C0             UXTB     R0,R0
   \   00000138   0x.... 0x....      BL       AppS2wHal_NetClose
   3244                  return S2W_SOCKFAILURE;
   \   0000013C   0x2003             MOVS     R0,#+3
   \   0000013E   0xE032             B.N      ??AppS2wHal_HttpOpen_5
   3245              }
   3246          	s2wCidList[*cid].localPort  = ntohs(sockAddr.sin_port);
   \                     ??AppS2wHal_HttpOpen_6:
   \   00000140   0xF8BD 0x0046      LDRH     R0,[SP, #+70]
   \   00000144   0x6829             LDR      R1,[R5, #+0]
   \   00000146   0xFB06 0x8101      MLA      R1,R6,R1,R8
   \   0000014A   0x0202             LSLS     R2,R0,#+8
   \   0000014C   0xEA42 0x2010      ORR      R0,R2,R0, LSR #+8
   \   00000150   0x8048             STRH     R0,[R1, #+2]
   3247              GsnOsal_SemCreate(&pHttpData->opInProgress, 1);
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000158   0x.... 0x....      BL       GsnOsal_SemCreate
   3248              /* create the samaphore for close */
   3249              GsnOsal_SemCreate(&s2wCidList[*cid].s2wUserCloseInProgress, 0);
   \   0000015C   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_116:
   \   00000160   0x2100             MOVS     R1,#+0
   \   00000162   0x3038             ADDS     R0,R0,#+56
   \   00000164   0x.... 0x....      BL       GsnOsal_SemCreate
   3250          	s2wCidList[*cid].s2wUsrCloseFlag = 0;
   \   00000168   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_117:
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0xF880 0x1090      STRB     R1,[R0, #+144]
   3251          
   3252              AppS2wHal_TimerInit(&s2wCidList[*cid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)*cid);
   \   00000172   0x682A             LDR      R2,[R5, #+0]
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable109_1
   \   00000178   0xFB06 0x8002      MLA      R0,R6,R2,R8
   \   0000017C   0x3058             ADDS     R0,R0,#+88
   \   0000017E   0x.... 0x....      BL       AppS2wHal_TimerInit
   3253          
   3254              memcpy(s2wCidList[*cid].remoteIp,(UINT8*)&(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr),4);
   \   00000182   0x.... 0x....      BL       ?Subroutine42
   \                     ??CrossCallReturnLabel_118:
   \   00000186   0x2204             MOVS     R2,#+4
   \   00000188   0xF104 0x0114      ADD      R1,R4,#+20
   \   0000018C   0x1D80             ADDS     R0,R0,#+6
   \   0000018E   0x.... 0x....      BL       memcpy
   3255          
   3256              /* register the callback for any socket events
   3257               */
   3258              nx_bsd_callback_register(s2wCidList[*cid].sd, AppS2wHal_RxCallBack, NX_BSD_CB_TCP_DISCONNECT |	NX_BSD_CB_SOCKET_ERROR);
   \   00000192   0x6828             LDR      R0,[R5, #+0]
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable102
   \   00000198   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   0000019C   0x2228             MOVS     R2,#+40
   \   0000019E   0x69C0             LDR      R0,[R0, #+28]
   \   000001A0   0x.... 0x....      BL       nx_bsd_callback_register
   3259              return S2W_SUCCESS;
   \   000001A4   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_HttpOpen_5:
   \   000001A6   0xB016             ADD      SP,SP,#+88
   \   000001A8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3260          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   00000006   0x4770             BX       LR
   3261          

   \                                 In section .text, align 2, keep-with-next
   3262          PRIVATE UINT8
   3263          AppS2wHal_HttpLocalClose(UINT32 cid)
   3264          {
   \                     AppS2wHal_HttpLocalClose:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   3265              UINT8 status = GSN_SUCCESS;
   3266              if(!s2wCidList[cid].httpflag)
   \   00000004   0xF44F 0x7194      MOV      R1,#+296
   \   00000008   0xFB01 0xF600      MUL      R6,R1,R0
   \   0000000C   0x....             LDR.N    R7,??DataTable94
   \   0000000E   0x19F4             ADDS     R4,R6,R7
   \   00000010   0xF104 0x051C      ADD      R5,R4,#+28
   \   00000014   0x7CE8             LDRB     R0,[R5, #+19]
   \   00000016   0xB300             CBZ.N    R0,??AppS2wHal_HttpLocalClose_0
   3267              {
   3268                  return GSN_SUCCESS;
   3269              }
   3270              s2wCidList[cid].httpflag = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x74E8             STRB     R0,[R5, #+19]
   3271              /* close the connection and release the resources..*/
   3272              status = GsnHttp_Close(s2wCidList[cid].pHttpData->pHttpHandle);
   \   0000001C   0x69A8             LDR      R0,[R5, #+24]
   \   0000001E   0x6800             LDR      R0,[R0, #+0]
   \   00000020   0x.... 0x....      BL       GsnHttp_Close
   3273              if( status == GSN_SUCCESS )
   \   00000024   0xFA5F 0xF880      UXTB     R8,R0
   \   00000028   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000002C   0xD10D             BNE.N    ??AppS2wHal_HttpLocalClose_1
   3274              {
   3275                  s2wCidList[cid].httpflag = 0;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x74E8             STRB     R0,[R5, #+19]
   3276                  s2wCidList[cid].conMode= 0;
   \   00000032   0x7060             STRB     R0,[R4, #+1]
   3277              	s2wCidList[cid].conType = 0;
   \   00000034   0x55F0             STRB     R0,[R6, R7]
   3278                  if(s2wCidList[cid].pHttpData != NULL)
   \   00000036   0x69A8             LDR      R0,[R5, #+24]
   \   00000038   0xB138             CBZ.N    R0,??AppS2wHal_HttpLocalClose_1
   3279                  {
   3280                      GsnOsal_SemDelete(&s2wCidList[cid].pHttpData->opInProgress);
   \   0000003A   0x3030             ADDS     R0,R0,#+48
   \   0000003C   0x.... 0x....      BL       GsnOsal_SemDelete
   3281                      gsn_free(s2wCidList[cid].pHttpData);
   \   00000040   0x69A8             LDR      R0,[R5, #+24]
   \   00000042   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3282                      s2wCidList[cid].pHttpData = NULL;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x61A8             STR      R0,[R5, #+24]
   3283                  }
   3284          
   3285              }
   3286              
   3287              /* Delete Close In progress semaphore*/ 
   3288              GsnOsal_SemDelete(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     ??AppS2wHal_HttpLocalClose_1:
   \   0000004A   0xF104 0x0038      ADD      R0,R4,#+56
   \   0000004E   0x.... 0x....      BL       GsnOsal_SemDelete
   3289                  s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000052   0xF04F 0x30FF      MOV      R0,#-1
   \   00000056   0x61E0             STR      R0,[R4, #+28]
   3290              return status;
   \   00000058   0x4640             MOV      R0,R8
   \                     ??AppS2wHal_HttpLocalClose_0:
   \   0000005A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3291          }
   3292          

   \                                 In section .text, align 2, keep-with-next
   3293          PUBLIC S2W_HTTP_DATA_T *
   3294          AppS2wHal_HttpHandleGet(UINT8 cid)
   3295          {
   3296              return s2wCidList[cid].pHttpData;
   \                     AppS2wHal_HttpHandleGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable94
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0x6B40             LDR      R0,[R0, #+52]
   \   0000000C   0x4770             BX       LR               ;; return
   3297          }
   3298          
   3299          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3300          PUBLIC void
   3301          AppS2w_HttpRxHdrsCb (GSN_HTTPC_CONN_HANDLE conHandle,
   3302                               INT32              statusCode,
   3303                               INT8              *reasonPhrase,
   3304                               INT8             **resHeadersPtr,
   3305                               ttHttpcCustomHdr  *customHdrPtr)
   3306          {
   3307              UINT8 cid;
   3308              UINT32 i;
   3309              UINT32 bitmap;
   3310              UINT32 count;
   3311              UINT32 len;
   3312          	UINT8 delim = ':';
   3313              ttHttpcConEntryPtr conEntryPtr = (ttHttpcConEntryPtr)conHandle;
   3314              INT8 header[15],headerLen;
   3315          
   3316              if((NULL == conEntryPtr) || (1 == httpConfInfo.hconHttpcHdrSent))
   3317              {
   3318                  return;
   3319              }
   3320              cid = AppS2wHal_CidFind(conEntryPtr->hconSd);
   3321          
   3322              if((1 == httpConfInfo.sendStatus) && (NULL != reasonPhrase))
   3323              {
   3324                  /* arg_len should be request uri length + 3 char of status code + 1 char of delim ':' */
   3325                  len = strlen(reasonPhrase) + 3 + 1;
   3326                  headerLen = sprintf((char *)header,"%cG%x%d%04d%03d%c", S2W_ESC, cid, S2W_HTTP_RESPONSE_LINE, len, statusCode, S2W_COLON);
   3327          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3328                  AppS2wHal_CharNPut(header, headerLen);
   3329                  AppS2wHal_CharNPut(reasonPhrase, (len - 4));
   3330          #else
   3331                  AppS2wHal_CharNPut1(header, headerLen);
   3332                  AppS2wHal_CharNPut1(reasonPhrase, (len - 4));
   3333          #endif
   3334              }
   3335              /* If http header bitmap is not registered */
   3336              if(0 == httpConfInfo.httpcHdrBmap)
   3337              {
   3338                  goto AppS2w_HttpRxHdrsCbExit;
   3339              }
   3340              bitmap = httpConfInfo.httpcHdrBmap;
   3341              count = 1;
   3342              /* Parse all the headers given by Http server */
   3343              for(i = 1; i < TM_HTTP_HEADER_COUNT ; i++)
   3344              {
   3345                   if((NULL != resHeadersPtr[i]) && (bitmap & count))
   3346                   {
   3347                       /* hdr_len should be 2 chars of hdr_type number + hdr_val + 1 char of delim ':' */
   3348                       len = strlen(tvHttpHeaderNames[i]) + strlen(resHeadersPtr[i]) + 1;
   3349                       headerLen = sprintf((char *)header,"%cG%x%d%04d", S2W_ESC, cid, S2W_HTTP_HEADER, len);
   3350          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3351                       AppS2wHal_CharNPut(header, headerLen);
   3352                       AppS2wHal_CharNPut(tvHttpHeaderNames[i], strlen(tvHttpHeaderNames[i]));
   3353                       AppS2wHal_CharNPut(&delim,1);
   3354                       AppS2wHal_CharNPut(resHeadersPtr[i], strlen(resHeadersPtr[i]));
   3355          #else
   3356                       AppS2wHal_CharNPut1(header, headerLen);
   3357                       AppS2wHal_CharNPut1(tvHttpHeaderNames[i], strlen(tvHttpHeaderNames[i]));
   3358                       AppS2wHal_CharNPut1(&delim,1);
   3359                       AppS2wHal_CharNPut1(resHeadersPtr[i], strlen(resHeadersPtr[i]));
   3360          #endif
   3361                   }
   3362                   count = (count << 1);
   3363              }
   3364              /* If user has registered for custom headers and custom headers are present, pass it */
   3365              bitmap = bitmap >> 31;
   3366              if((NULL != customHdrPtr) && (0 != customHdrPtr->hconCustomHdrcount) && (bitmap))
   3367              {
   3368                  for(i = 0; i < customHdrPtr->hconCustomHdrcount ; i++)
   3369                  {
   3370                      len = strlen(customHdrPtr->hconCustomHeaderstype[i]) + strlen(customHdrPtr->hconCustomHeadersval[i] + 1);
   3371                      headerLen = sprintf((char *)header,"%cG%x%d%04d", S2W_ESC, cid, S2W_HTTP_HEADER, len);
   3372          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3373                      AppS2wHal_CharNPut(header, headerLen);
   3374                      AppS2wHal_CharNPut(customHdrPtr->hconCustomHeaderstype[i], strlen(customHdrPtr->hconCustomHeaderstype[i]));
   3375                      AppS2wHal_CharNPut(&delim,1);
   3376                      AppS2wHal_CharNPut(customHdrPtr->hconCustomHeadersval[i], strlen(customHdrPtr->hconCustomHeadersval[i]));
   3377          #else
   3378                      AppS2wHal_CharNPut1(header, headerLen);
   3379                      AppS2wHal_CharNPut1(customHdrPtr->hconCustomHeaderstype[i], strlen(customHdrPtr->hconCustomHeaderstype[i]));
   3380                      AppS2wHal_CharNPut1(&delim,1);
   3381                      AppS2wHal_CharNPut1(customHdrPtr->hconCustomHeadersval[i], strlen(customHdrPtr->hconCustomHeadersval[i]));
   3382          #endif
   3383                  }
   3384              }
   3385          AppS2w_HttpRxHdrsCbExit:
   3386              httpConfInfo.hconHttpcHdrSent = 1;
   3387          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3388              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   3389              {
   3390                  s2wSpiFs_Flush();
   3391              }
   3392          #else
   3393              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3394              {
   3395                  s2wSpiFs_Flush1();
   3396              }
   3397          #endif
   3398              return;
   3399          }
   3400          #endif
   3401          
   3402          #endif
   3403          
   3404          

   \                                 In section .text, align 2, keep-with-next
   3405          PUBLIC void
   3406          AppS2w_HttpRxBufferMgmtCb(VOID *context,
   3407          	             	 GSN_HTTPC_CONN_HANDLE conHandle,
   3408                               INT8 *httpRxDataBuf,
   3409                               INT32 httpRxDataLen,
   3410                               INT32* rxBufferOffset)
   3411          {
   \                     AppS2w_HttpRxBufferMgmtCb:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   3412              UINT8 cid;
   3413              INT8 startMark[10];
   3414              ttHttpcConEntryPtr conEntryPtr = (ttHttpcConEntryPtr)conHandle;
   3415          
   3416              cid = AppS2wHal_CidFind(conEntryPtr->hconSd);
   \   00000004   0xF8D1 0x00A8      LDR      R0,[R1, #+168]
   \   00000008   0x9E0A             LDR      R6,[SP, #+40]
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0x461D             MOV      R5,R3
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidFind
   3417          #ifdef S2W_THROUGHPUT_TEST                       
   3418          	if( s2wCidList[cid].tpTestInProgress == 1)
   3419          	{
   3420          		s2wCidList[cid].stats.bytesReceived += httpRxDataLen;
   3421          	}
   3422          	else
   3423          #endif				
   3424          	{
   3425              sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,httpRxDataLen);
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9501             STR      R5,[SP, #+4]
   \   00000016   0x2348             MOVS     R3,#+72
   \   00000018   0x221B             MOVS     R2,#+27
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "%c%c%x%04d">`
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x.... 0x....      BL       sprintf
   3426          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3427              AppS2wHal_CharNPut(startMark, strlen(startMark));
   \   00000024   0xA802             ADD      R0,SP,#+8
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x4601             MOV      R1,R0
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x.... 0x....      BL       AppS2wHal_CharNPut
   3428          
   3429              AppS2wHal_CharNPut(httpRxDataBuf, httpRxDataLen);
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       AppS2wHal_CharNPut
   3430          #else
   3431              AppS2wHal_CharNPut1(startMark, strlen(startMark));
   3432              AppS2wHal_CharNPut1(httpRxDataBuf, httpRxDataLen);
   3433          #endif
   3434          
   3435              *rxBufferOffset = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   3436          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3437                  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable109_2
   \   00000040   0x6030             STR      R0,[R6, #+0]
   \   00000042   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0x5C40             LDRB     R0,[R0, R1]
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xBF08             IT       EQ 
   \   0000004E   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3438                  {
   3439                       s2wSpiFs_Flush();
   3440                  }
   3441          #else
   3442                  if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3443                  {
   3444                      s2wSpiFs_Flush1();
   3445                  }
   3446          #endif
   3447          	}
   3448              return;
   \   00000052   0xB006             ADD      SP,SP,#+24
   \   00000054   0xBD70             POP      {R4-R6,PC}       ;; return
   3449          
   3450          }
   3451          #ifdef S2W_GSLINK

   \                                 In section .text, align 2, keep-with-next
   3452          PUBLIC VOID AppS2w_HttpdSemCreate(UINT8 cid)
   3453          {
   3454          	GsnOsal_SemCreate  ( &s2wCidList[cid].httpdCtx.s2wGsLinkemID, 0 );
   \                     AppS2w_HttpdSemCreate:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x....             LDR.N    R3,??DataTable94
   \   00000006   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x30A4             ADDS     R0,R0,#+164
   \   0000000E   0x.... 0x....      B.W      GsnOsal_SemCreate
   3455          }

   \                                 In section .text, align 2, keep-with-next
   3456          PUBLIC VOID AppS2w_HttpSemAquire(UINT8 cid)
   3457          {
   3458          	GsnOsal_SemAcquire(&s2wCidList[cid].httpdCtx.s2wGsLinkemID,GSN_OSAL_WAIT_FOREVER);
   \                     AppS2w_HttpSemAquire:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x....             LDR.N    R3,??DataTable94
   \   00000006   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000A   0xF04F 0x31FF      MOV      R1,#-1
   \   0000000E   0x30A4             ADDS     R0,R0,#+164
   \   00000010   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3459          
   3460          }

   \                                 In section .text, align 2, keep-with-next
   3461          PUBLIC VOID AppS2w_HttpSemRelease(UINT8 cid)
   3462          {
   3463          	GsnOsal_SemRelease(&s2wCidList[cid].httpdCtx.s2wGsLinkemID);
   \                     AppS2w_HttpSemRelease:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable94
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0x30A4             ADDS     R0,R0,#+164
   \   0000000C   0x.... 0x....      B.W      GsnOsal_SemRelease
   3464          #if 0
   3465          	GsnOsal_SemRelease(&s2wappMainTaskCtxt->gslinkSync);
   3466          #endif
   3467          
   3468          }

   \                                 In section .text, align 2, keep-with-next
   3469          PUBLIC VOID AppS2w_HttpdSemDelete(UINT8 cid)
   3470          {
   3471          	GsnOsal_SemDelete(&s2wCidList[cid].httpdCtx.s2wGsLinkemID);
   \                     AppS2w_HttpdSemDelete:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable94
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0x30A4             ADDS     R0,R0,#+164
   \   0000000C   0x.... 0x....      B.W      GsnOsal_SemDelete
   3472          }
   3473          
   3474          
   3475          #endif

   \                                 In section .text, align 2, keep-with-next
   3476          PUBLIC UINT8 AppS2w_ConnStateGet(UINT8 cid)
   3477          {
   \                     AppS2w_ConnStateGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   3478              return tlsv1_client_established(s2wCidList[cid].ssl.sslConn->tlsv1Conn);
   \   00000002   0xF44F 0x7194      MOV      R1,#+296
   \   00000006   0x....             LDR.N    R2,??DataTable94
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x6A80             LDR      R0,[R0, #+40]
   \   0000000E   0x6840             LDR      R0,[R0, #+4]
   \   00000010   0x.... 0x....      BL       tlsv1_client_established
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   3479          }

   \                                 In section .text, align 2, keep-with-next
   3480          PUBLIC UINT8 AppS2w_ConnHttpStateGet(UINT8 cid)
   3481          {
   3482              return (s2wCidList[cid].httpflag);
   \                     AppS2w_ConnHttpStateGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable94
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0xF890 0x002F      LDRB     R0,[R0, #+47]
   \   0000000E   0x4770             BX       LR               ;; return
   3483          }
   3484          #ifdef S2W_HTTPC_SUPPORT
   3485          
   3486          /**
   3487           ******************************************************************
   3488           * @ingroup S2w-Application
   3489           * @brief Http client send function.
   3490           * @param cid                - IN the cid needs to be closed
   3491           * @retval S2W_SUCCESS     - operation successfull.
   3492           * @retval S2W_EBADCID     - cid is not valid.
   3493           * @retval S2W_FAILURE     - operation failed.
   3494           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3495          PUBLIC GSN_STATUS 
   3496          S2wHttp_Send(UINT8 cid)
   3497          {
   \                     S2wHttp_Send:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   3498              UINT8 *httpRxDataBuf = NULL;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x4605             MOV      R5,R0
   3499              UINT32 httpRxDataLen = 0;
   \   0000000A   0x9602             STR      R6,[SP, #+8]
   3500              UINT32 ret = S2W_SUCCESS;//et1= S2W_SUCCESS, bytesLeft = 0;
   3501              S2W_HTTP_DATA_T *pHttpData;
   3502              INT8 startMark[10];
   3503              //UINT8 *rcvBuf = NULL;
   3504              //UINT32 rcvLen;
   3505          #ifdef S2W_HTTPS_SUPPORT
   3506              //ttHttpcConEntryPtr      conEntryPtr;
   3507          #endif
   3508              //S2W_MSG_T recvMsg;
   3509          
   3510              pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   \   0000000C   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   00000010   0xEA5F 0x0800      MOVS     R8,R0
   3511          
   3512              if(pHttpData == NULL)
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x2001             MOVEQ    R0,#+1
   3513              {
   3514                   return S2W_FAILURE;
   \   00000018   0xD05E             BEQ.N    ??S2wHttp_Send_0
   3515              }
   3516          
   3517              if(0 == httpConfInfo.moredata)
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable109
   \   0000001E   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000022   0x1D27             ADDS     R7,R4,#+4
   \   00000024   0xB968             CBNZ.N   R0,??S2wHttp_Send_1
   3518              {/* prepare to receive response */
   3519                  httpRxDataLen = 2048 ;
   \   00000026   0xF44F 0x6000      MOV      R0,#+2048
   \   0000002A   0x9002             STR      R0,[SP, #+8]
   3520                  httpRxDataBuf = gsn_malloc(2048);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0xF44F 0x615C      MOV      R1,#+3520
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000036   0x4606             MOV      R6,R0
   3521                  if(NULL == httpRxDataBuf)
   3522                  {
   3523                      ret = S2W_FAILURE;
   3524                  }
   3525                  httpConfInfo.rxBufferMgmtCb = AppS2w_HttpRxBufferMgmtCb;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable109_3
   \   0000003C   0x63B8             STR      R0,[R7, #+56]
   3526          		httpConfInfo.rxBufferMgmtCbCtx = NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x63F8             STR      R0,[R7, #+60]
   3527          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3528                  httpConfInfo.rxHdrsCb = AppS2w_HttpRxHdrsCb;
   3529          		httpConfInfo.hconHttpcHdrSent = 0;
   3530          #endif
   3531              }
   3532          	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
   3533          	compiled with header type array being defined as array of UINT8 */
   3534          	{
   3535          		UINT8 i;
   3536          		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   \                     ??S2wHttp_Send_1:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable109_4
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable109_5
   3537                  {
   3538                  	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM)
   \                     ??S2wHttp_Send_2:
   \   0000004C   0xF852 0x3020      LDR      R3,[R2, R0, LSL #+2]
   \   00000050   0x2BFF             CMP      R3,#+255
   \   00000052   0xBF28             IT       CS 
   \   00000054   0x23FF             MOVCS    R3,#+255
   3539          			{
   3540          				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM;
   3541          			}
   3542          			else
   3543          			{
   3544                  		headerTypesModified[i] = headerTypes[i];
   \   00000056   0xF841 0x3020      STR      R3,[R1, R0, LSL #+2]
   3545          			}
   3546                  }
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x2819             CMP      R0,#+25
   \   0000005E   0xD3F5             BCC.N    ??S2wHttp_Send_2
   3547          	}
   3548              ret = GsnHttp_Send(pHttpData->pHttpHandle, (INT8 *)httpRxDataBuf,
   3549                                 &httpRxDataLen, httpConfInfo.httpTimeOut, &httpConfInfo);
   3550          
   3551              if(GSN_SUCCESS == ret)
   \   00000060   0x9400             STR      R4,[SP, #+0]
   \   00000062   0x6C3B             LDR      R3,[R7, #+64]
   \   00000064   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000068   0xAA02             ADD      R2,SP,#+8
   \   0000006A   0x4631             MOV      R1,R6
   \   0000006C   0x.... 0x....      BL       GsnHttp_Send
   \   00000070   0xB9E0             CBNZ.N   R0,??S2wHttp_Send_3
   3552              {
   3553                  if(0 == httpConfInfo.moredata)
   \   00000072   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000076   0xB9B8             CBNZ.N   R0,??S2wHttp_Send_4
   3554                  {
   3555          #ifdef S2W_THROUGHPUT_TEST                       
   3556                  	if( s2wCidList[cid].tpTestInProgress == 1)
   3557          			{
   3558          				s2wCidList[cid].stats.bytesReceived += httpRxDataLen;
   3559                  	}
   3560          			else
   3561          #endif				
   3562          			{
   3563                          if(GSN_HTTP_METHOD_HEAD != httpConfInfo.reqMethod)
   \   00000078   0x7860             LDRB     R0,[R4, #+1]
   \   0000007A   0x2802             CMP      R0,#+2
   \   0000007C   0xD014             BEQ.N    ??S2wHttp_Send_4
   3564                          {
   3565                              sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,httpRxDataLen);
   \   0000007E   0x9802             LDR      R0,[SP, #+8]
   \   00000080   0x.... 0x....      ADR.W    R1,`?<Constant "%c%c%x%04d">`
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x9500             STR      R5,[SP, #+0]
   \   00000088   0x2348             MOVS     R3,#+72
   \   0000008A   0x221B             MOVS     R2,#+27
   \   0000008C   0xA803             ADD      R0,SP,#+12
   \   0000008E   0x.... 0x....      BL       sprintf
   3566          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3567                              AppS2wHal_CharNPut(startMark, strlen(startMark));
   \   00000092   0xA803             ADD      R0,SP,#+12
   \   00000094   0x.... 0x....      BL       strlen
   \   00000098   0x4601             MOV      R1,R0
   \   0000009A   0xA803             ADD      R0,SP,#+12
   \   0000009C   0x.... 0x....      BL       AppS2wHal_CharNPut
   3568                              AppS2wHal_CharNPut(httpRxDataBuf, httpRxDataLen);
   \   000000A0   0x9902             LDR      R1,[SP, #+8]
   \   000000A2   0x4630             MOV      R0,R6
   \   000000A4   0x.... 0x....      BL       AppS2wHal_CharNPut
   3569          #else
   3570                              AppS2wHal_CharNPut1(startMark, strlen(startMark));
   3571                              AppS2wHal_CharNPut1(httpRxDataBuf, httpRxDataLen);
   3572          #endif
   3573                          }
   3574          			}
   3575                  }
   3576                  ret = S2W_SUCCESS;
   \                     ??S2wHttp_Send_4:
   \   000000A8   0x2500             MOVS     R5,#+0
   \   000000AA   0xE000             B.N      ??S2wHttp_Send_5
   3577              }
   3578              else /* ERROR or TimeOut */
   3579              {
   3580                  ret = S2W_FAILURE;
   \                     ??S2wHttp_Send_3:
   \   000000AC   0x2501             MOVS     R5,#+1
   3581              }
   3582          
   3583              if(NULL != httpRxDataBuf)
   \                     ??S2wHttp_Send_5:
   \   000000AE   0xB116             CBZ.N    R6,??S2wHttp_Send_6
   3584              {
   3585                  gsn_free(httpRxDataBuf);
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3586                  httpRxDataBuf = NULL;
   3587              }
   3588              if(NULL != httpConfInfo.reqPathPtr 
   3589          #ifdef S2W_THROUGHPUT_TEST
   3590          		&& ( s2wCidList[cid].tpTestInProgress == 0)
   3591          #endif		
   3592          	   )
   \                     ??S2wHttp_Send_6:
   \   000000B6   0x6860             LDR      R0,[R4, #+4]
   \   000000B8   0xB118             CBZ.N    R0,??S2wHttp_Send_7
   3593              {
   3594                  gsn_free(httpConfInfo.reqPathPtr);
   \   000000BA   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3595                  httpConfInfo.reqPathPtr = NULL;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x6060             STR      R0,[R4, #+4]
   3596              }
   3597          #if 0//def GSN_HTTPS_SUPPORT
   3598              conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   3599              if(0 == httpConfInfo.moredata)
   3600              {
   3601                  /* check whether some data still remaining in nw buffer or not */
   3602                  bytesLeft = tfGetWaitingBytes(s2wCidList[cid].sd);
   3603              }
   3604              if((bytesLeft > 0) && (conEntryPtr->hconHttpType == GSN_HTTPS))
   3605              {
   3606                  /* Still data remaining in NW buffer. Decode that data */
   3607                  ret1 = GsnSsl_DataReceive(conEntryPtr->hConSsl, s2wCidList[cid].sd, &rcvBuf, &rcvLen, 5);
   3608                  if(rcvBuf != NULL)
   3609                  {
   3610                      GsnSsl_Free(rcvBuf);
   3611                  }
   3612                  if(ret1 == GSN_SSL_CLOSE_ALERT)
   3613                  {
   3614                      /* Data is a Close alert from server. Post message to rcv task */
   3615                      recvMsg.msgType = S2W_RECV_TYPE_HTTPS_CLOSE;
   3616                      recvMsg.rData.dataSock = s2wCidList[cid].sd;
   3617                      recvMsg.msgLen = 0;
   3618                      AppS2wHal_NetRxMsgPost(&recvMsg);
   3619                  }
   3620          
   3621              }
   3622          #endif
   3623          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3624              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??S2wHttp_Send_7:
   \   000000C2   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable109_2
   \   000000CA   0x6809             LDR      R1,[R1, #+0]
   \   000000CC   0x5C40             LDRB     R0,[R0, R1]
   \   000000CE   0x2802             CMP      R0,#+2
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3625              {
   3626                  s2wSpiFs_Flush();
   3627              }
   3628          #else
   3629              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3630              {
   3631                  s2wSpiFs_Flush1();
   3632              }
   3633          #endif
   3634              return ret;
   \   000000D6   0x4628             MOV      R0,R5
   \                     ??S2wHttp_Send_0:
   \   000000D8                      REQUIRE ?Subroutine0
   \   000000D8                      ;; // Fall through to label ?Subroutine0
   3635          
   3636          }
   3637          #endif
   3638          

   \                                 In section .text, align 2, keep-with-next
   3639          PUBLIC VOID
   3640          AppS2wHal_HttpdClose(UINT8 parentTask)
   3641          {
   \                     AppS2wHal_HttpdClose:
   \   00000000   0xB510             PUSH     {R4,LR}
   3642              UINT32 message;
   3643          #if defined(S2W_WEB_SERVER) || defined(S2W_WEB_PROV)
   3644              if(!parentTask)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable109_2
   \   00000006   0xB990             CBNZ.N   R0,??AppS2wHal_HttpdClose_0
   3645              {
   3646                  if( TRUE == GsnHttpd_IsRunning())
   \   00000008   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD12E             BNE.N    ??AppS2wHal_HttpdClose_1
   3647                  {
   3648                      message = APP_NOTIFICATION_SRVR_STOP;
   3649                      (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable109_6
   \   00000014   0x6821             LDR      R1,[R4, #+0]
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x201A             MOVS     R0,#+26
   \   0000001A   0x4790             BLX      R2
   3650                      GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0xF04F 0x31FF      MOV      R1,#-1
   \   00000026   0xF500 0x40D7      ADD      R0,R0,#+27520
   \   0000002A   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3651                  }
   3652              }
   3653              else
   3654              {
   3655                  if( TRUE == GsnHttpd_IsRunning() )
   \                     ??AppS2wHal_HttpdClose_0:
   \   0000002E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD11B             BNE.N    ??AppS2wHal_HttpdClose_1
   3656                  {
   3657          #ifdef S2W_WEB_PROV
   3658                      if((TRUE == GsnHttpd_IsRunning() )&& s2wappMainTaskCtxt->webProvStatus== RUNNING)
   \   00000036   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xBF01             ITTTT    EQ 
   \   0000003E   0x6820             LDREQ    R0,[R4, #+0]
   \   00000040   0xF646 0x412C      MOVWEQ   R1,#+27692
   \   00000044   0x5C0A             LDRBEQ   R2,[R1, R0]
   \   00000046   0x2A02             CMPEQ    R2,#+2
   \   00000048   0xBF04             ITT      EQ 
   \   0000004A   0x2203             MOVEQ    R2,#+3
   \   0000004C   0x540A             STRBEQ   R2,[R1, R0]
   3659                          s2wappMainTaskCtxt->webProvStatus=STOP;
   3660          #endif
   3661          #ifdef S2W_WEB_SERVER
   3662                      if((TRUE == GsnHttpd_IsRunning() )&& s2wappMainTaskCtxt->webServerStatus == RUNNING)
   \   0000004E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xBF01             ITTTT    EQ 
   \   00000056   0x6820             LDREQ    R0,[R4, #+0]
   \   00000058   0xF646 0x31C4      MOVWEQ   R1,#+27588
   \   0000005C   0x5C0A             LDRBEQ   R2,[R1, R0]
   \   0000005E   0x2A02             CMPEQ    R2,#+2
   \   00000060   0xBF04             ITT      EQ 
   \   00000062   0x2203             MOVEQ    R2,#+3
   \   00000064   0x540A             STRBEQ   R2,[R1, R0]
   3663                          s2wappMainTaskCtxt->webServerStatus=STOP;
   3664          #endif
   3665                      AppS2wHttpd_Stop();
   \   00000066   0xE8BD 0x4010      POP      {R4,LR}
   \   0000006A   0x.... 0x....      B.W      AppS2wHttpd_Stop
   3666                  }
   3667              }
   3668          #endif
   3669          }
   \                     ??AppS2wHal_HttpdClose_1:
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
   3670          
   3671          
   3672          #ifdef S2W_MDNS_ENABLE

   \                                 In section .text, align 2, keep-with-next
   3673          PUBLIC VOID
   3674          AppS2wHal_MdnsRegCb(void *pCtx, UINT8 *rrName, UINT32 status)
   3675          {
   3676          	UINT8 syncId,asyncId;
   3677              if(GSN_MDNS_REG_CONFLICT == status)
   \                     AppS2wHal_MdnsRegCb:
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xBF07             ITTEE    EQ 
   \   00000004   0x2220             MOVEQ    R2,#+32
   \   00000006   0x201A             MOVEQ    R0,#+26
   \   00000008   0x2221             MOVNE    R2,#+33
   \   0000000A   0x201B             MOVNE    R0,#+27
   3678              {
   3679          	    syncId =  S2W_MDNS_REG_FAILED_ID;
   3680          		asyncId = S2W_ASYNC_MDNS_REG_FAILED_ID;
   3681              }
   3682              else
   3683              {
   3684          	    syncId =  S2W_MDNS_REG_SUCESS_ID;
   3685          		asyncId = S2W_ASYNC_MDNS_REG_SUCESS_ID;
   3686              }
   3687          	if(s2wCurrent.asyncMsgFormat == 1)
   \   0000000C   0x....             LDR.N    R3,??DataTable102_2
   \   0000000E   0xF893 0x31D8      LDRB     R3,[R3, #+472]
   \   00000012   0x2B01             CMP      R3,#+1
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      BEQ.W    AppS2wProcess_AsyncStatusNotify
   3688          	{
   3689          		AppS2wProcess_AsyncStatusNotify(asyncId,(UINT32)rrName);
   3690          	}
   3691          	else
   3692          	{
   3693          		AppS2wProcess_StatusNotify(syncId,(UINT32)rrName);
   \   0000001A   0x4610             MOV      R0,R2
   \   0000001C   0x.... 0x....      B.W      AppS2wProcess_StatusNotify
   3694          	}
   3695          }
   3696          
   3697          //GSN_MDNS_T mdns;

   \                                 In section .bss, align 4
   3698          S2W_MDNS_HN_PARAM_T mdnsHnParam;
   \                     mdnsHnParam:
   \   00000000                      DS8 24
   3699          
   3700          //#define APP_MDNS_STACK_SIZE     4*1024
   3701          //#define APP_MDNS_MSG_Q_BUFF_SIZE        256
   3702          
   3703          
   3704          //UINT8  mdnsMsgBuff[APP_MDNS_MSG_Q_BUFF_SIZE];
   3705          

   \                                 In section .text, align 2, keep-with-next
   3706          VOID s2w_mdnsCb(VOID *cbCtx, VOID *pMdns)
   3707          {
   3708            AppMainCtx_TaskNotify(APP_EVENT_MDNS_EXECUTE);
   \                     s2w_mdnsCb:
   \   00000000   0x2025             MOVS     R0,#+37
   \   00000002   0x.... 0x....      B.W      AppMainCtx_TaskNotify
   3709            
   3710          }
   3711          
   3712          #if 0
   3713          
   3714          PRIVATE VOID   
   3715          App_MdnsThreadEntry(UINT32 ctx)
   3716          {
   3717          
   3718              /*UINT status;*/
   3719              //UINT32 msg = 0;
   3720          
   3721             /* Start debug UART before starting the idle handler because the 
   3722                 debug UART flushing is done in idle handler context */
   3723          
   3724              /**< Initialize debug module */
   3725             APP_MAIN_CTX_T *pAppCtx;
   3726             pAppCtx = (APP_MAIN_CTX_T *)ctx;
   3727             
   3728             
   3729              GsnMdns_Execute(&pAppCtx->mdns);/* This will not exit*/
   3730          }
   3731          #endif
   3732          
   3733          

   \                                 In section .bss, align 1
   3734          UINT8 mdnsFlag=0;
   \                     mdnsFlag:
   \   00000000                      DS8 1

   \                                 In section .noinit, align 4
   3735          __no_init UINT8 mdnsMsgQueueBuf[512];
   \                     mdnsMsgQueueBuf:
   \   00000000                      DS8 512
   3736          

   \                                 In section .text, align 2, keep-with-next
   3737          VOID
   3738          AppS2wHal_MdnsInit(UINT8 *ptr)
   3739          {
   \                     AppS2wHal_MdnsInit:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   3740              GSN_MDNS_INIT_PARAM_T initParam;
   3741              UINT32 param;
   3742              UINT8 *p;
   3743              if(mdnsFlag)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable109_7
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0xB08E             SUB      SP,SP,#+56
   \   0000000A   0xBB90             CBNZ.N   R0,??AppS2wHal_MdnsInit_0
   3744              return ;
   3745              memset((INT8*)&initParam, 0, sizeof(initParam));
   \   0000000C   0x2230             MOVS     R2,#+48
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0x.... 0x....      BL       memset
   3746          
   3747              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000016   0xA80E             ADD      R0,SP,#+56
   \   00000018   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable109_8
   \   00000020   0xB140             CBZ.N    R0,??AppS2wHal_MdnsInit_1
   3748              {    
   3749              AppS2wParse_Int(p, &param);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x.... 0x....      BL       AppS2wParse_Int
   3750              if(param == 6)
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x2806             CMP      R0,#+6
   \   0000002C   0xD106             BNE.N    ??AppS2wHal_MdnsInit_2
   3751              memcpy(initParam.ipV6Addr,appCtx.if0.nwifCtx.ipConfig.ipv6.globalAddr,16);
   \   0000002E   0x.... 0x....      BL       ?Subroutine6
   3752              }
   \                     ??CrossCallReturnLabel_10:
   \   00000032   0xE003             B.N      ??AppS2wHal_MdnsInit_2
   3753              else
   3754              initParam.ipV4Addr = appCtx.if0.nwifCtx.ipConfig.ipv4.ipAddr;
   \                     ??AppS2wHal_MdnsInit_1:
   \   00000034   0xF246 0x6044      MOVW     R0,#+26180
   \   00000038   0x5940             LDR      R0,[R0, R5]
   \   0000003A   0x9002             STR      R0,[SP, #+8]
   3755              
   3756              initParam.pNwif = &appCtx.if0.nwifCtx;
   \                     ??AppS2wHal_MdnsInit_2:
   \   0000003C   0xF505 0x50A0      ADD      R0,R5,#+5120
   \   00000040   0x3050             ADDS     R0,R0,#+80
   \   00000042   0x9001             STR      R0,[SP, #+4]
   3757          
   3758                        
   3759              initParam.msgQueueBuff = mdnsMsgQueueBuf;                           /**< pointer to message queue buffer*/
   3760              initParam.msgQueueBuffSize = 512;       /**< messsage queue buffer size*/                                      
   3761              initParam.noSeparatetsk = 0;
   3762              initParam.blockingOn = 0;
   3763              //initParam.msgPostCb = NULL;
   3764              initParam.msgPostCb = s2w_mdnsCb;
   3765              initParam.msgPostCbCtx = NULL;
   3766          
   3767              GsnMdns_Init(&appCtx.mdns, &initParam);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable109_9
   \   0000004A   0x9008             STR      R0,[SP, #+32]
   \   0000004C   0xF44F 0x7000      MOV      R0,#+512
   \   00000050   0x9009             STR      R0,[SP, #+36]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x900A             STR      R0,[SP, #+40]
   \   00000056   0xF88D 0x001C      STRB     R0,[SP, #+28]
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable109_10
   \   0000005E   0x900B             STR      R0,[SP, #+44]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x900C             STR      R0,[SP, #+48]
   \   00000064   0xF505 0x40D8      ADD      R0,R5,#+27648
   \   00000068   0x3030             ADDS     R0,R0,#+48
   \   0000006A   0x.... 0x....      BL       GsnMdns_Init
   3768              mdnsFlag=1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x7020             STRB     R0,[R4, #+0]
   3769              /* create a mdns task*/
   3770             //GsnOsal_ThreadCreate(App_MdnsThreadEntry, &appCtx, &appMdnsThread,
   3771             //     "App Mdns Ctx", APP_MDNS_THREAD_PRI, (UINT8 *)appMdnsThreadStack,
   3772             //     sizeof(appMdnsThreadStack), GSN_OSAL_THREAD_INITIAL_READY);
   3773          }
   \                     ??AppS2wHal_MdnsInit_0:
   \   00000072   0xB00F             ADD      SP,SP,#+60
   \   00000074   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0xF505 0x41CC      ADD      R1,R5,#+26112
   \   00000004   0x2210             MOVS     R2,#+16
   \   00000006   0x3184             ADDS     R1,R1,#+132
   \   00000008   0xA803             ADD      R0,SP,#+12
   \   0000000A   0x.... 0x....      B.W      memcpy
   3774          

   \                                 In section .text, align 2, keep-with-next
   3775          VOID
   3776          AppS2wHal_MdnsDeInit()
   3777          {
   \                     AppS2wHal_MdnsDeInit:
   \   00000000   0xB580             PUSH     {R7,LR}
   3778                  
   3779          	GsnMdns_DeInit(&appCtx.mdns);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   00000006   0x.... 0x....      BL       GsnMdns_DeInit
   3780                  mdnsFlag=0;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable109_7
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7001             STRB     R1,[R0, #+0]
   3781          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
   3782          
   3783          
   3784          

   \                                 In section .text, align 2, keep-with-next
   3785          PUBLIC UINT8
   3786          AppS2wHal_MdnsHostNameReg(S2W_MDNS_HN_PARAM_T *pHNparam)
   3787          {
   \                     AppS2wHal_MdnsHostNameReg:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   3788              GSN_STATUS retVal;
   3789              GSN_MDNS_HNREG_PARAM_T pParam;
   3790              //UINT32 arr[4];
   3791              //UINT8 i;
   3792              
   3793              pParam.hostname = pHNparam ->hostname;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   3794              pParam.domain   = pHNparam -> domain;
   3795              pParam.ttl   = pHNparam ->ttl;
   3796              pParam.scope = pHNparam->scope;
   3797               
   3798              pParam.autoCorrect  = pHNparam ->autoCorrect;
   3799              pParam.conflctDetect = pHNparam ->conflctDetect;
   3800          
   3801              if(pHNparam->IpVersion & ADDR_TYPE_IPv6)
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable109_8
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0xAC01             ADD      R4,SP,#+4
   \   0000000E   0x6841             LDR      R1,[R0, #+4]
   \   00000010   0x9101             STR      R1,[SP, #+4]
   \   00000012   0x6901             LDR      R1,[R0, #+16]
   \   00000014   0x61A1             STR      R1,[R4, #+24]
   \   00000016   0x7B41             LDRB     R1,[R0, #+13]
   \   00000018   0x7761             STRB     R1,[R4, #+29]
   \   0000001A   0x7B01             LDRB     R1,[R0, #+12]
   \   0000001C   0x7721             STRB     R1,[R4, #+28]
   \   0000001E   0x7B81             LDRB     R1,[R0, #+14]
   \   00000020   0x77A1             STRB     R1,[R4, #+30]
   \   00000022   0x7D00             LDRB     R0,[R0, #+20]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD504             BPL.N    ??AppS2wHal_MdnsHostNameReg_0
   3802              {
   3803                  memcpy(pParam.ipAddr.addr.v6,appCtx.if0.nwifCtx.ipConfig.ipv6.globalAddr,16);
   \   00000028   0x.... 0x....      BL       ?Subroutine6
   3804                  pParam.ipAddr.ipVer = GSN_NWIF_IP_VERSION_V6;
   \                     ??CrossCallReturnLabel_9:
   \   0000002C   0x2006             MOVS     R0,#+6
   \   0000002E   0x6060             STR      R0,[R4, #+4]
   \   00000030   0xE003             B.N      ??AppS2wHal_MdnsHostNameReg_1
   3805              }
   3806              else
   3807                  pParam.ipAddr.addr.v4 = appCtx.if0.nwifCtx.ipConfig.ipv4.ipAddr;
   \                     ??AppS2wHal_MdnsHostNameReg_0:
   \   00000032   0xF246 0x6044      MOVW     R0,#+26180
   \   00000036   0x5940             LDR      R0,[R0, R5]
   \   00000038   0x60A0             STR      R0,[R4, #+8]
   3808          
   3809              pParam.cb           = AppS2wHal_MdnsRegCb;
   3810              pParam.cbCtx        = NULL;
   3811              
   3812              retVal = GsnMdns_HostnameRegister(&appCtx.mdns, &pParam);
   3813          
   3814              if(GSN_SUCCESS != retVal)
   \                     ??AppS2wHal_MdnsHostNameReg_1:
   \   0000003A   0xA900             ADD      R1,SP,#+0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable109_12
   \   00000040   0x6220             STR      R0,[R4, #+32]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x6260             STR      R0,[R4, #+36]
   \   00000046   0xF505 0x40D8      ADD      R0,R5,#+27648
   \   0000004A   0x3030             ADDS     R0,R0,#+48
   \   0000004C   0x.... 0x....      BL       GsnMdns_HostnameRegister
   \   00000050   0xB100             CBZ.N    R0,??AppS2wHal_MdnsHostNameReg_2
   3815                  return S2W_FAILURE;
   \   00000052   0x2001             MOVS     R0,#+1
   3816              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsHostNameReg_2:
   \   00000054   0xB00B             ADD      SP,SP,#+44
   \   00000056   0xBD30             POP      {R4,R5,PC}       ;; return
   3817          }
   3818          
   3819          

   \                                 In section .text, align 2, keep-with-next
   3820          PUBLIC UINT8
   3821          AppS2wHal_MdnsServiceReg(S2W_MDNS_SRV_PARAM_T *pSrvParam)
   3822          {
   \                     AppS2wHal_MdnsServiceReg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   3823              GSN_STATUS retVal;
   3824              GSN_MDNS_SRVCREG_PARAM_T pParam;
   3825              
   3826              pParam.srvceName     = pSrvParam ->srvcInstance;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3827              pParam.srvceSubType  = pSrvParam ->subType;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3828              pParam.srvceType     = pSrvParam ->srvcType;
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x68C2             LDR      R2,[R0, #+12]
   \   00000010   0x604A             STR      R2,[R1, #+4]
   3829              pParam.srvceProto    = pSrvParam ->proto;
   \   00000012   0x6902             LDR      R2,[R0, #+16]
   \   00000014   0x608A             STR      R2,[R1, #+8]
   3830              pParam.domain        = pSrvParam ->domain;
   \   00000016   0x6942             LDR      R2,[R0, #+20]
   \   00000018   0x60CA             STR      R2,[R1, #+12]
   3831              pParam.port          = pSrvParam ->port;
   \   0000001A   0x8B02             LDRH     R2,[R0, #+24]
   \   0000001C   0x828A             STRH     R2,[R1, #+20]
   3832              pParam.ttl           = pSrvParam ->ttl;
   \   0000001E   0x6B42             LDR      R2,[R0, #+52]
   \   00000020   0x618A             STR      R2,[R1, #+24]
   3833              pParam.keyVal        = pSrvParam ->keyVal;
   \   00000022   0xF100 0x021C      ADD      R2,R0,#+28
   \   00000026   0x610A             STR      R2,[R1, #+16]
   3834              pParam.autoCorrect   = pSrvParam ->autoCorrect;
   \   00000028   0xF890 0x2030      LDRB     R2,[R0, #+48]
   \   0000002C   0x770A             STRB     R2,[R1, #+28]
   3835              pParam.scope         = pSrvParam ->scope;
   \   0000002E   0x7E82             LDRB     R2,[R0, #+26]
   \   00000030   0x774A             STRB     R2,[R1, #+29]
   3836              pParam.conflctDetect = pSrvParam ->conflctDetect;
   \   00000032   0xF890 0x0031      LDRB     R0,[R0, #+49]
   \   00000036   0x7788             STRB     R0,[R1, #+30]
   3837                
   3838              pParam.cb           =   AppS2wHal_MdnsRegCb;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable109_12
   \   0000003C   0x6208             STR      R0,[R1, #+32]
   3839              pParam.cbCtx        =   NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x6248             STR      R0,[R1, #+36]
   3840              
   3841               retVal = GsnMdns_ServiceRegister(&appCtx.mdns,&pParam);
   3842          
   3843          
   3844                if(GSN_SUCCESS != retVal)
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   00000048   0x.... 0x....      BL       GsnMdns_ServiceRegister
   \   0000004C   0xB100             CBZ.N    R0,??AppS2wHal_MdnsServiceReg_0
   3845                  return S2W_FAILURE;
   \   0000004E   0x2001             MOVS     R0,#+1
   3846              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsServiceReg_0:
   \   00000050   0xB00B             ADD      SP,SP,#+44
   \   00000052   0xBD00             POP      {PC}             ;; return
   3847          }
   3848          
   3849          

   \                                 In section .text, align 2, keep-with-next
   3850          PUBLIC UINT8
   3851          AppS2wHal_MdnsHostNameDereg(S2W_MDNS_HN_PARAM_T *pHNparam)
   3852          {
   \                     AppS2wHal_MdnsHostNameDereg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   3853              GSN_MDNS_HNDEREG_PAARAM_T pParam;
   3854              
   3855              pParam.hostname = pHNparam->hostname;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3856              pParam.domain   = pHNparam -> domain;
   3857          
   3858             GsnMdns_HostnameDeregister(&appCtx.mdns, &pParam);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   00000012   0x.... 0x....      BL       GsnMdns_HostnameDeregister
   3859          
   3860              return S2W_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD0E             POP      {R1-R3,PC}       ;; return
   3861          }
   3862          

   \                                 In section .text, align 2, keep-with-next
   3863          PUBLIC UINT8
   3864          AppS2wHal_MdnsServiceDereg(S2W_MDNS_SRV_PARAM_T *pSrvParam)
   3865          {
   \                     AppS2wHal_MdnsServiceDereg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   3866               GSN_MDNS_SRVCDEREG_PARAM_T pParam;
   3867               
   3868               pParam.srvceName = pSrvParam->srvcInstance;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3869               pParam.srvceSubType = pSrvParam->subType;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3870               pParam.srvceType = pSrvParam -> srvcType;
   \   0000000C   0x68C1             LDR      R1,[R0, #+12]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   3871               pParam.srvceProto = pSrvParam -> proto;
   \   00000010   0x6901             LDR      R1,[R0, #+16]
   \   00000012   0x9103             STR      R1,[SP, #+12]
   3872               pParam.domain = pSrvParam -> domain;
   3873                 
   3874              GsnMdns_ServiceDeRegister(&appCtx.mdns, &pParam);
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x6940             LDR      R0,[R0, #+20]
   \   00000018   0x9004             STR      R0,[SP, #+16]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   0000001E   0x.... 0x....      BL       GsnMdns_ServiceDeRegister
   3875              return S2W_SUCCESS;
   \   00000022   0x....             B.N      ?Subroutine2
   3876          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xB005             ADD      SP,SP,#+20
   \   00000004   0xBD00             POP      {PC}             ;; return
   3877          

   \                                 In section .text, align 2, keep-with-next
   3878          PUBLIC VOID
   3879          AppS2wHal_MdnsSdCb(void *pCtx, const GSN_MDNS_SRVC_INFO_T *srvinfo, UINT32 status)
   3880          {
   \                     AppS2wHal_MdnsSdCb:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x460D             MOV      R5,R1
   3881              UINT8 *addr = (UINT8 *)&srvinfo->ipAddr;
   3882          	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000006   0x.... 0x....      LDR.W    R8,??DataTable109_13
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0xF105 0x07C0      ADD      R7,R5,#+192
   \   00000010   0xF04F 0x31FF      MOV      R1,#-1
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x.... 0x....      BL       GsnOsal_SemAcquire
   3883              if(GSN_MDNS_SD_NO_SRVC_INFO == status)
   \   0000001A   0xB926             CBNZ.N   R6,??AppS2wHal_MdnsSdCb_0
   3884              {
   3885                  S2w_Printf("Service Discovery Failed\r\n");
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "Service Discovery Fai...">`
   \   00000020   0x.... 0x....      BL       S2w_Printf
   \   00000024   0xE044             B.N      ??AppS2wHal_MdnsSdCb_1
   3886              }
   3887              else
   3888              {
   3889                  S2w_Printf("\nA Service Discovered: %d\r\n", status);
   \                     ??AppS2wHal_MdnsSdCb_0:
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x.... 0x....      ADR.W    R0,`?<Constant "\\nA Service Discovered...">`
   \   0000002C   0x.... 0x....      BL       S2w_Printf
   3890                  S2w_Printf("\r\n");
   \   00000030   0x....             ADR.N    R0,??DataTable103  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000032   0x.... 0x....      BL       S2w_Printf
   3891                  S2w_Printf("Service Instance name     = %s\r\n", srvinfo->instance);
   \   00000036   0x.... 0x....      ADR.W    R0,`?<Constant "Service Instance name...">`
   \   0000003A   0x1D29             ADDS     R1,R5,#+4
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   3892                  S2w_Printf("Service Sub type          = %s\r\r", srvinfo->subType);
   \   00000040   0xF105 0x0144      ADD      R1,R5,#+68
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "Service Sub type     ...">`
   \   00000048   0x.... 0x....      BL       S2w_Printf
   3893                  S2w_Printf("Service app protocol      = %s\r\n", srvinfo->srvcType);
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant "Service app protocol ...">`
   \   00000050   0xF105 0x0184      ADD      R1,R5,#+132
   \   00000054   0x.... 0x....      BL       S2w_Printf
   3894                  S2w_Printf("Service protocol          = %s\r\n", srvinfo->protocol);
   \   00000058   0xF105 0x019C      ADD      R1,R5,#+156
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "Service protocol     ...">`
   \   00000060   0x.... 0x....      BL       S2w_Printf
   3895                  S2w_Printf("Service domain            = %s\r\n", srvinfo->domain);         
   \   00000064   0x.... 0x....      ADR.W    R0,`?<Constant "Service domain       ...">`
   \   00000068   0xF105 0x01AC      ADD      R1,R5,#+172
   \   0000006C   0x.... 0x....      BL       S2w_Printf
   3896                  
   3897                  S2w_Printf("Service IP address        = %d.%d.%d.%d  Port = %d\r\n",
   3898                      addr[0], addr[1], addr[2], addr[3], srvinfo->port);
   \   00000070   0xF8B5 0x00BC      LDRH     R0,[R5, #+188]
   \   00000074   0x9001             STR      R0,[SP, #+4]
   \   00000076   0x78F8             LDRB     R0,[R7, #+3]
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x78BB             LDRB     R3,[R7, #+2]
   \   0000007C   0x787A             LDRB     R2,[R7, #+1]
   \   0000007E   0x7839             LDRB     R1,[R7, #+0]
   \   00000080   0x.... 0x....      ADR.W    R0,`?<Constant "Service IP address   ...">`
   \   00000084   0x.... 0x....      BL       S2w_Printf
   3899                  if(NULL != srvinfo->txtInfo)
   \   00000088   0xF8D5 0x00B8      LDR      R0,[R5, #+184]
   \   0000008C   0xB180             CBZ.N    R0,??AppS2wHal_MdnsSdCb_1
   3900                  {
   3901                      UINT8 txtStrLen = *(srvinfo->txtInfo);
   \   0000008E   0x7805             LDRB     R5,[R0, #+0]
   3902                      UINT8 txtNxtStrLen ;
   3903                      UINT8 *txtInfo = srvinfo->txtInfo ;
   3904          
   3905          			txtInfo ++;
   \   00000090   0x.... 0x....      ADR.W    R7,`?<Constant "\\nService Text Info   ...">`
   \   00000094   0x1C46             ADDS     R6,R0,#+1
   \   00000096   0xE009             B.N      ??AppS2wHal_MdnsSdCb_2
   3906                      while(txtStrLen)
   3907                      {
   3908                          txtNxtStrLen = *(txtInfo + txtStrLen);
   \                     ??AppS2wHal_MdnsSdCb_3:
   \   00000098   0x5DAC             LDRB     R4,[R5, R6]
   3909          				*(txtInfo + txtStrLen)  = 0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x55A8             STRB     R0,[R5, R6]
   3910          
   3911          				S2w_Printf("\nService Text Info          = %s\r\n", txtInfo);
   \   0000009E   0x4631             MOV      R1,R6
   \   000000A0   0x4638             MOV      R0,R7
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   3912                          txtInfo += (txtStrLen + 1);
   \   000000A6   0x19A8             ADDS     R0,R5,R6
   \   000000A8   0x1C46             ADDS     R6,R0,#+1
   3913                          txtStrLen = txtNxtStrLen;
   \   000000AA   0x4625             MOV      R5,R4
   3914                      }
   \                     ??AppS2wHal_MdnsSdCb_2:
   \   000000AC   0x2D00             CMP      R5,#+0
   \   000000AE   0xD1F3             BNE.N    ??AppS2wHal_MdnsSdCb_3
   3915                  }
   3916              }
   3917              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wHal_MdnsSdCb_1:
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable109_2
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000BA   0x5C40             LDRB     R0,[R0, R1]
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xBF08             IT       EQ 
   \   000000C0   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3918              {
   3919                  s2wSpiFs_Flush();
   3920              }
   3921          	GsnOsal_SemRelease(&s2wSyncSemID);
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000CA   0x.... 0x....      B.W      GsnOsal_SemRelease
   3922          }

   \                                 In section .text, align 2, keep-with-next
   3923          PUBLIC UINT8
   3924          AppS2wHal_MdnsSrvcDiscover(S2W_MDNS_SRVCDISCVR_PARAM_T *mdnsSrvDscr)
   3925          {
   \                     AppS2wHal_MdnsSrvcDiscover:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   3926              GSN_STATUS retVal;
   3927              GSN_MDNS_SRVCDISCVR_PARAM_T pParam;
   3928              
   3929              
   3930              pParam.srvcSubType = mdnsSrvDscr ->srvcSubType;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3931              pParam.srvcType    = mdnsSrvDscr ->srvcType;
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3932              pParam.srvcProto   = mdnsSrvDscr ->srvcProto;
   \   0000000C   0x6881             LDR      R1,[R0, #+8]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   3933              pParam.domain      = mdnsSrvDscr ->domain;
   \   00000010   0x68C1             LDR      R1,[R0, #+12]
   \   00000012   0x9103             STR      R1,[SP, #+12]
   3934             
   3935              pParam.scope       = mdnsSrvDscr ->scope;
   3936              pParam.cb          =  AppS2wHal_MdnsSdCb;
   3937              pParam.cbCtx       =  NULL;
   3938              
   3939          
   3940              retVal = GsnMdns_ServiceDiscover(&appCtx.mdns, &pParam);
   3941               if(GSN_SUCCESS != retVal)
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x7C00             LDRB     R0,[R0, #+16]
   \   00000018   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable109_14
   \   00000020   0x9005             STR      R0,[SP, #+20]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   0000002A   0x.... 0x....      BL       GsnMdns_ServiceDiscover
   \   0000002E   0xB100             CBZ.N    R0,??AppS2wHal_MdnsSrvcDiscover_0
   3942                  return S2W_FAILURE;
   \   00000030   0x2001             MOVS     R0,#+1
   3943              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsSrvcDiscover_0:
   \   00000032   0xB007             ADD      SP,SP,#+28
   \   00000034   0xBD00             POP      {PC}             ;; return
   3944          }
   3945          

   \                                 In section .text, align 2, keep-with-next
   3946          PUBLIC UINT8
   3947          AppS2wHal_MdnsAnnounce(S2W_MDNS_ANNOUNCE_PARAM_T *mdnsAnnceParam)
   3948          {
   \                     AppS2wHal_MdnsAnnounce:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   3949              GSN_MDNS_ANNOUNCE_PARAM_T pParam;
   3950              
   3951              pParam.srvceName = mdnsAnnceParam->srvceName;
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3952              pParam.domain = mdnsAnnceParam->domain;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9104             STR      R1,[SP, #+16]
   3953              
   3954              if(mdnsAnnceParam->type == 2)
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD105             BNE.N    ??AppS2wHal_MdnsAnnounce_0
   3955              {
   3956                  pParam.srvceSubType = mdnsAnnceParam ->srvceSubType;
   \   00000012   0x68C1             LDR      R1,[R0, #+12]
   \   00000014   0x9101             STR      R1,[SP, #+4]
   3957                  pParam.srvceType = mdnsAnnceParam->srvceType;
   \   00000016   0x6901             LDR      R1,[R0, #+16]
   \   00000018   0x9102             STR      R1,[SP, #+8]
   3958                  pParam.srvceProto = mdnsAnnceParam ->srvceProto;
   \   0000001A   0x6940             LDR      R0,[R0, #+20]
   \   0000001C   0xE002             B.N      ??AppS2wHal_MdnsAnnounce_1
   3959              } 
   3960              else
   3961              {
   3962                   pParam.srvceSubType = NULL;
   \                     ??AppS2wHal_MdnsAnnounce_0:
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9001             STR      R0,[SP, #+4]
   3963                   pParam.srvceType = NULL;
   \   00000022   0x9002             STR      R0,[SP, #+8]
   3964                   pParam.srvceProto = NULL;
   \                     ??AppS2wHal_MdnsAnnounce_1:
   \   00000024   0x9003             STR      R0,[SP, #+12]
   3965              }
   3966              GsnMdns_Announce(&appCtx.mdns, &pParam);
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable109_11
   \   0000002C   0x.... 0x....      BL       GsnMdns_Announce
   3967          
   3968              return S2W_SUCCESS;
   \   00000030                      REQUIRE ?Subroutine2
   \   00000030                      ;; // Fall through to label ?Subroutine2
   3969          }
   3970          
   3971          #endif
   3972          #define S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND   0.030517578125
   3973          #ifdef S2W_PING_TRACE

   \                                 In section .bss, align 4
   3974          S2W_PING_STATS_T s2wPingStats;
   \                     s2wPingStats:
   \   00000000                      DS8 20
   3975          

   \                                 In section .text, align 2, keep-with-next
   3976          VOID s2wPingStart()
   3977          {
   \                     s2wPingStart:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   3978              NX_PACKET *response_ptr;
   3979              ULONG rtt0,rtt1,ttl=64;
   3980              UINT32 interval;
   3981              UINT8 *pingBuf;
   3982            	INT32 icmpRetVal;
   3983          	UINT32 milliSecPerTick = (1000/NX_CPU_TICKS_PER_SECOND); 
   3984              interval = (s2wappMainTaskCtxt->pingParams.interval != 0) ? (s2wappMainTaskCtxt->pingParams.interval) : 3000;
   \   00000004   0x.... 0x....      LDR.W    R6,??DataTable109_2
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0xF247 0x5130      MOVW     R1,#+30000
   \   0000000E   0xB085             SUB      SP,SP,#+20
   \   00000010   0x580A             LDR      R2,[R1, R0]
   \   00000012   0xB90A             CBNZ.N   R2,??s2wPingStart_0
   \   00000014   0xF640 0x32B8      MOVW     R2,#+3000
   3985          	/* Convert from milli sec to ticks*/
   3986          	interval  = (interval / milliSecPerTick);
   3987          #ifdef S2W_IPv6_SUPPORT
   3988              INT8 ipv6str[INET6_ADDRSTRLEN];
   3989              S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
   3990          #endif
   3991           
   3992              if(s2wPingStarted == TRUE)
   \                     ??s2wPingStart_0:
   \   00000018   0x.... 0x....      LDR.W    R10,??DataTable109_15
   \   0000001C   0x2364             MOVS     R3,#+100
   \   0000001E   0xFBB2 0xF7F3      UDIV     R7,R2,R3
   \   00000022   0xF89A 0x2000      LDRB     R2,[R10, #+0]
   \   00000026   0x2A01             CMP      R2,#+1
   \   00000028   0xF040 0x80DD      BNE.W    ??s2wPingStart_1
   3993              {
   3994                  if(s2wappMainTaskCtxt->pingParams.payload[0])
   \   0000002C   0x1809             ADDS     R1,R1,R0
   \   0000002E   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000030   0xB1CA             CBZ.N    R2,??s2wPingStart_2
   3995                  {
   3996                      pingBuf = (UINT8 *)MALLOC(strlen(s2wappMainTaskCtxt->pingParams.payload) + 1);
   \   00000032   0xF247 0x5444      MOVW     R4,#+30020
   \   00000036   0x1820             ADDS     R0,R4,R0
   \   00000038   0x.... 0x....      BL       strlen
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x.... 0x....      BL       MALLOC
   \   00000042   0xEA5F 0x0800      MOVS     R8,R0
   3997                      if(NULL == pingBuf)
   \   00000046   0xD02D             BEQ.N    ??s2wPingStart_3
   3998                      {
   3999                          return;
   4000                      }
   4001                      memcpy(pingBuf,s2wappMainTaskCtxt->pingParams.payload,strlen(s2wappMainTaskCtxt->pingParams.payload));
   \   00000048   0x6830             LDR      R0,[R6, #+0]
   \   0000004A   0x1825             ADDS     R5,R4,R0
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       strlen
   \   00000052   0x4602             MOV      R2,R0
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4640             MOV      R0,R8
   \   00000058   0x.... 0x....      BL       memcpy
   4002                      pingBuf[strlen(s2wappMainTaskCtxt->pingParams.payload)] = '\0';
   \   0000005C   0x6830             LDR      R0,[R6, #+0]
   \   0000005E   0x1820             ADDS     R0,R4,R0
   \   00000060   0x.... 0x....      BL       strlen
   \   00000064   0xE015             B.N      ??s2wPingStart_4
   4003                  }
   4004                  else if(s2wappMainTaskCtxt->pingParams.dataLen)
   \                     ??s2wPingStart_2:
   \   00000066   0x6848             LDR      R0,[R1, #+4]
   \   00000068   0xB1B8             CBZ.N    R0,??s2wPingStart_5
   4005                  {
   4006                      if(s2wappMainTaskCtxt->pingParams.dataLen >= 1024)
   \   0000006A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000006E   0xF080 0x80BA      BCS.W    ??s2wPingStart_1
   4007                      {
   4008                          return;
   4009                      }
   4010                      pingBuf = (UINT8 *)MALLOC(s2wappMainTaskCtxt->pingParams.dataLen + 1);
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x.... 0x....      BL       MALLOC
   \   00000078   0xEA5F 0x0800      MOVS     R8,R0
   4011                      if(NULL == pingBuf)
   \   0000007C   0xD012             BEQ.N    ??s2wPingStart_3
   4012                      {
   4013                          return;
   4014                      }
   4015                      memset(pingBuf,'G',s2wappMainTaskCtxt->pingParams.dataLen);
   \   0000007E   0x6830             LDR      R0,[R6, #+0]
   \   00000080   0xF247 0x5434      MOVW     R4,#+30004
   \   00000084   0x2147             MOVS     R1,#+71
   \   00000086   0x5822             LDR      R2,[R4, R0]
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x.... 0x....      BL       memset
   4016                      pingBuf[s2wappMainTaskCtxt->pingParams.dataLen]='\0';
   \   0000008E   0x6830             LDR      R0,[R6, #+0]
   \   00000090   0x5820             LDR      R0,[R4, R0]
   \                     ??s2wPingStart_4:
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0xF800 0x1008      STRB     R1,[R0, R8]
   \   00000098   0xE00D             B.N      ??s2wPingStart_6
   4017                  }
   4018                  else
   4019                  {
   4020                      pingBuf = (UINT8 *)MALLOC(56 + 1);
   \                     ??s2wPingStart_5:
   \   0000009A   0x2039             MOVS     R0,#+57
   \   0000009C   0x.... 0x....      BL       MALLOC
   \   000000A0   0xEA5F 0x0800      MOVS     R8,R0
   4021                      if(NULL == pingBuf)
   \                     ??s2wPingStart_3:
   \   000000A4   0xF000 0x809F      BEQ.W    ??s2wPingStart_1
   4022                      {
   4023                          return;
   4024                      }
   4025                      memset(pingBuf,'G',56);
   \   000000A8   0x2238             MOVS     R2,#+56
   \   000000AA   0x2147             MOVS     R1,#+71
   \   000000AC   0x.... 0x....      BL       memset
   4026                      pingBuf[56]='\0';
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xF888 0x0038      STRB     R0,[R8, #+56]
   4027                  }
   4028          
   4029          #ifdef S2W_IPv6_SUPPORT
   4030                  if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4031                  {
   4032                      rtt0 = GsnTod_Get();
   4033               icmpRetVal =  _nxd_icmp_ping(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,&s2wappMainTaskCtxt->pingParams.ip_address, (INT8*)pingBuf,strlen((const char*)pingBuf),&response_ptr, interval);
   4034                  }
   4035                  else
   4036          #endif   
   4037                  {
   4038                      rtt0 = GsnTod_Get();
   \                     ??s2wPingStart_6:
   \   000000B6   0x.... 0x....      BL       GsnTod_Get
   \   000000BA   0x4604             MOV      R4,R0
   4039                icmpRetVal = nx_icmp_ping(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,(s2wappMainTaskCtxt->pingParams.Ipv4Addr),(INT8*)pingBuf,strlen((const char*)pingBuf)/*strlen((const char*)s2wappMainTaskCtxt->pingParams.payload)*/,&response_ptr,interval);
   \   000000BC   0x4640             MOV      R0,R8
   \   000000BE   0x.... 0x....      BL       strlen
   \   000000C2   0x4603             MOV      R3,R0
   \   000000C4   0x6830             LDR      R0,[R6, #+0]
   \   000000C6   0x9701             STR      R7,[SP, #+4]
   \   000000C8   0xA904             ADD      R1,SP,#+16
   \   000000CA   0xF247 0x592C      MOVW     R9,#+29996
   \   000000CE   0x9100             STR      R1,[SP, #+0]
   \   000000D0   0x4642             MOV      R2,R8
   \   000000D2   0xF859 0x1000      LDR      R1,[R9, R0]
   \   000000D6   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   000000DA   0x.... 0x....      BL       _nxe_icmp_ping
   4040                  }
   4041                  s2wPingStats.pingSentCnt++;
   \   000000DE   0x.... 0x....      LDR.W    R7,??DataTable109_16
   4042                  GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   000000E2   0x.... 0x....      LDR.W    R11,??DataTable109_13
   \   000000E6   0x4605             MOV      R5,R0
   \   000000E8   0x68F8             LDR      R0,[R7, #+12]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x60F8             STR      R0,[R7, #+12]
   \   000000EE   0xF04F 0x31FF      MOV      R1,#-1
   \   000000F2   0x4658             MOV      R0,R11
   \   000000F4   0x.... 0x....      BL       GsnOsal_SemAcquire
   4043                  FREE(pingBuf);
   \   000000F8   0x4640             MOV      R0,R8
   \   000000FA   0x.... 0x....      BL       FREE
   4044                if(icmpRetVal == S2W_SUCCESS && response_ptr != NULL )
   \   000000FE   0x2D00             CMP      R5,#+0
   \   00000100   0xD151             BNE.N    ??s2wPingStart_7
   \   00000102   0x9804             LDR      R0,[SP, #+16]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD04E             BEQ.N    ??s2wPingStart_7
   4045                  {
   4046                      rtt1 = GsnTod_Get();
   \   00000108   0x.... 0x....      BL       GsnTod_Get
   4047          #ifdef S2W_IPv6_SUPPORT    
   4048                      if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4049                      {
   4050                          S2w_Printf("\r\nReply from %s bytes=%d time=%d ms TTL %d",ipv6str,response_ptr->nx_packet_length,(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND),ttl );
   4051                      }
   4052                      else
   4053          #endif     
   4054                      {
   4055                          S2w_Printf("\r\nReply from %d.%d.%d.%d: bytes=%d time=%d ms TTL %d",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff),response_ptr->nx_packet_length,(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND),ttl );
   \   0000010C   0x1B00             SUBS     R0,R0,R4
   \   0000010E   0x.... 0x....      BL       __aeabi_ui2d
   \   00000112   0x2200             MOVS     R2,#+0
   \   00000114   0x.... 0x....      LDR.W    R3,??DataTable109_17  ;; 0x3f9f4000
   \   00000118   0x.... 0x....      BL       __aeabi_dmul
   \   0000011C   0x4604             MOV      R4,R0
   \   0000011E   0x4688             MOV      R8,R1
   \   00000120   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000124   0x4605             MOV      R5,R0
   \   00000126   0x6830             LDR      R0,[R6, #+0]
   \   00000128   0xF859 0x0000      LDR      R0,[R9, R0]
   \   0000012C   0x2140             MOVS     R1,#+64
   \   0000012E   0x9103             STR      R1,[SP, #+12]
   \   00000130   0x9502             STR      R5,[SP, #+8]
   \   00000132   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000136   0x9904             LDR      R1,[SP, #+16]
   \   00000138   0x6989             LDR      R1,[R1, #+24]
   \   0000013A   0x9101             STR      R1,[SP, #+4]
   \   0000013C   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   00000140   0xB2C1             UXTB     R1,R0
   \   00000142   0x9100             STR      R1,[SP, #+0]
   \   00000144   0x0E01             LSRS     R1,R0,#+24
   \   00000146   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nReply from %d.%d.%d...">`
   \   0000014A   0x.... 0x....      BL       S2w_Printf
   4056                      }
   4057                      s2wPingStats.pingRecvCnt++;
   \   0000014E   0x6938             LDR      R0,[R7, #+16]
   \   00000150   0x1C40             ADDS     R0,R0,#+1
   \   00000152   0x6138             STR      R0,[R7, #+16]
   4058                      if(((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND)>s2wPingStats.rttMax)
   \   00000154   0x6838             LDR      R0,[R7, #+0]
   \   00000156   0x.... 0x....      BL       __aeabi_ui2d
   \   0000015A   0x4622             MOV      R2,R4
   \   0000015C   0x4643             MOV      R3,R8
   \   0000015E   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000162   0xBF38             IT       CC 
   \   00000164   0x603D             STRCC    R5,[R7, #+0]
   4059                      {
   4060                          s2wPingStats.rttMax=(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   4061                      }
   4062                      if(!s2wPingStats.rttMin)
   \   00000166   0x6878             LDR      R0,[R7, #+4]
   \   00000168   0xB908             CBNZ.N   R0,??s2wPingStart_8
   4063                      {
   4064                          s2wPingStats.rttMin=s2wPingStats.rttMax;
   \   0000016A   0x6838             LDR      R0,[R7, #+0]
   \   0000016C   0x6078             STR      R0,[R7, #+4]
   4065                      }
   4066                      if(((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND) < s2wPingStats.rttMin)
   \                     ??s2wPingStart_8:
   \   0000016E   0x6878             LDR      R0,[R7, #+4]
   \   00000170   0x.... 0x....      BL       __aeabi_ui2d
   \   00000174   0x4602             MOV      R2,R0
   \   00000176   0x460B             MOV      R3,R1
   \   00000178   0x4620             MOV      R0,R4
   \   0000017A   0x4641             MOV      R1,R8
   \   0000017C   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000180   0xBF38             IT       CC 
   \   00000182   0x607D             STRCC    R5,[R7, #+4]
   4067                      {
   4068                          s2wPingStats.rttMin=(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   4069                      }
   4070                      s2wPingStats.rttAvg +=((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   \   00000184   0x68B8             LDR      R0,[R7, #+8]
   \   00000186   0x.... 0x....      BL       __aeabi_ui2d
   \   0000018A   0x4622             MOV      R2,R4
   \   0000018C   0x4643             MOV      R3,R8
   \   0000018E   0x.... 0x....      BL       __aeabi_dadd
   \   00000192   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000196   0x60B8             STR      R0,[R7, #+8]
   4071          			nx_packet_release(response_ptr);
   \   00000198   0xA804             ADD      R0,SP,#+16
   \   0000019A   0x.... 0x....      BL       _nxe_packet_release
   4072                      GsnTaskSleep(100);
   \   0000019E   0x2064             MOVS     R0,#+100
   \   000001A0   0x.... 0x....      BL       GsnTaskSleep
   \   000001A4   0xE003             B.N      ??s2wPingStart_9
   4073                  }
   4074                  else
   4075                  {
   4076                     S2w_Printf("\r\nRequest timed out" );
   \                     ??s2wPingStart_7:
   \   000001A6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nRequest timed out">`
   \   000001AA   0x.... 0x....      BL       S2w_Printf
   4077                  }     
   4078          
   4079                  if(s2wappMainTaskCtxt->pingParams.trails)
   \                     ??s2wPingStart_9:
   \   000001AE   0x6830             LDR      R0,[R6, #+0]
   \   000001B0   0xF247 0x5140      MOVW     R1,#+30016
   \   000001B4   0x580A             LDR      R2,[R1, R0]
   \   000001B6   0xB142             CBZ.N    R2,??s2wPingStart_10
   4080                  {
   4081                      s2wappMainTaskCtxt->pingParams.trails--;
   \   000001B8   0x1E52             SUBS     R2,R2,#+1
   \   000001BA   0x500A             STR      R2,[R1, R0]
   4082                      if(!s2wappMainTaskCtxt->pingParams.trails)
   \   000001BC   0xD105             BNE.N    ??s2wPingStart_10
   4083                      {
   4084                           s2wPingStarted = FALSE;
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0xF88A 0x0000      STRB     R0,[R10, #+0]
   4085          				AppS2w_PingTaskNotify(APP_EVENT_PING_STOP);
   \   000001C4   0x2023             MOVS     R0,#+35
   \   000001C6   0x.... 0x....      BL       AppS2w_PingTaskNotify
   4086                      }
   4087                  }
   4088                    
   4089          		  AppS2w_PingTaskNotify(APP_EVENT_PING_REQUEST);
   \                     ??s2wPingStart_10:
   \   000001CA   0x2022             MOVS     R0,#+34
   \   000001CC   0x.... 0x....      BL       AppS2w_PingTaskNotify
   4090          		  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000001D0   0x6831             LDR      R1,[R6, #+0]
   \   000001D2   0xF646 0x20F8      MOVW     R0,#+27384
   \   000001D6   0x5C40             LDRB     R0,[R0, R1]
   \   000001D8   0x2802             CMP      R0,#+2
   \   000001DA   0xBF08             IT       EQ 
   \   000001DC   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   4091          		  {
   4092          		      s2wSpiFs_Flush();
   4093                    }
   4094                    GsnOsal_SemRelease(&s2wSyncSemID);
   \   000001E0   0x4658             MOV      R0,R11
   \   000001E2   0x.... 0x....      BL       GsnOsal_SemRelease
   4095              }
   4096          
   4097          }
   \                     ??s2wPingStart_1:
   \   000001E6   0xB005             ADD      SP,SP,#+20
   \   000001E8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4098                                  

   \                                 In section .text, align 2, keep-with-next
   4099          VOID s2wPingStop()
   4100          {
   \                     s2wPingStop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   4101            if( s2wPingStarted == FALSE)
   \   00000002   0x....             LDR.N    R0,??DataTable109_15
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD139             BNE.N    ??s2wPingStop_0
   4102            {
   4103                GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   0000000A   0x....             LDR.N    R4,??DataTable109_13
   \   0000000C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   00000016   0x....             LDR.N    R1,??DataTable109_2
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0xF247 0x502C      MOVW     R0,#+29996
   \   0000001E   0x5840             LDR      R0,[R0, R1]
   \   00000020   0xB2C1             UXTB     R1,R0
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000028   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000002C   0x0E01             LSRS     R1,R0,#+24
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPing Statistics for...">`
   4104          
   4105          #ifdef S2W_IPv6_SUPPORT    
   4106                   if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4107                   {
   4108                     INT8 ipv6str[INET6_ADDRSTRLEN];
   4109                     S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
   4110                     S2w_Printf("\r\nPing Statistics for %s \r\n",ipv6str);
   4111                   }
   4112                   else
   4113          #endif     
   4114                  S2w_Printf("\r\nPing Statistics for %d.%d.%d.%d:\r\n",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff));
   \   00000032   0x.... 0x....      BL       S2w_Printf
   4115                  S2w_Printf("\r\tPackets: Sent = %d, Received = %d, Lost = %d percent\r\n",s2wPingStats.pingSentCnt,s2wPingStats.pingRecvCnt,((s2wPingStats.pingSentCnt-s2wPingStats.pingRecvCnt)*100)/s2wPingStats.pingSentCnt);
   \   00000036   0x....             LDR.N    R5,??DataTable109_16
   \   00000038   0x692A             LDR      R2,[R5, #+16]
   \   0000003A   0x68E9             LDR      R1,[R5, #+12]
   \   0000003C   0x1A88             SUBS     R0,R1,R2
   \   0000003E   0x2364             MOVS     R3,#+100
   \   00000040   0x4358             MULS     R0,R3,R0
   \   00000042   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   00000046   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\tPackets: Sent = %d,...">`
   \   0000004A   0x.... 0x....      BL       S2w_Printf
   4116                  S2w_Printf("\rApproximate round trip times in milliseconds\r\n");
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant "\\rApproximate round tr...">`
   \   00000052   0x.... 0x....      BL       S2w_Printf
   4117                  S2w_Printf("\r\tMinimum = %dms, Maximum = %dms, Average = %dms\r\n",s2wPingStats.rttMin,s2wPingStats.rttMax,s2wPingStats.rttAvg/s2wPingStats.pingRecvCnt);
   \   00000056   0x68A8             LDR      R0,[R5, #+8]
   \   00000058   0x6929             LDR      R1,[R5, #+16]
   \   0000005A   0x682A             LDR      R2,[R5, #+0]
   \   0000005C   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   00000060   0x6869             LDR      R1,[R5, #+4]
   \   00000062   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\tMinimum = %dms, Max...">`
   \   00000066   0x.... 0x....      BL       S2w_Printf
   4118                  GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       GsnOsal_SemRelease
   4119                  memset(&s2wPingStats,0,sizeof(S2W_PING_STATS_T));
   \   00000070   0x4628             MOV      R0,R5
   \   00000072   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x.... 0x....      B.W      memset
   4120            }
   4121          
   4122          }
   \                     ??s2wPingStop_0:
   \   0000007E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   4123          VOID AppS2wHal_PingClose()
   4124          {
   4125                s2wPingStarted = FALSE;
   \                     AppS2wHal_PingClose:
   \   00000000   0x....             LDR.N    R0,??DataTable109_15
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   4126          	  AppS2w_PingTaskNotify(APP_EVENT_PING_STOP);
   \   00000006   0x2023             MOVS     R0,#+35
   \   00000008   0x.... 0x....      B.W      AppS2w_PingTaskNotify
   4127          }
   4128          
   4129          #endif
   4130          

   \                                 In section .text, align 2, keep-with-next
   4131          BOOL 
   4132          App_IsArpReqstPkt(GSN_NWIF_CTX_T *pNwIf, GSN_ETHERNET_FRAME_T *pEthFrame, 
   4133          								UINT32 protocol)
   4134          {
   \                     App_IsArpReqstPkt:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0xF245 0x11F4      MOVW     R1,#+20980
   \   00000008   0x5808             LDR      R0,[R1, R0]
   \   0000000A   0x0A01             LSRS     R1,R0,#+8
   \   0000000C   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000010   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000014   0xF400 0x437F      AND      R3,R0,#0xFF00
   \   00000018   0xEA41 0x2103      ORR      R1,R1,R3, LSL #+8
   \   0000001C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000020   0x9000             STR      R0,[SP, #+0]
   4135          	UINT32 ipAddr;
   4136          	ipAddr = htonl(GsnNwIf_IpV4AddrGet(pNwIf));
   4137          	/* An ARP Request Pkt with  Destination address being  the node address */
   4138          	return ((GSN_ETH_PROTO_TYPE_ARP == protocol) &&
   4139          		  	(GSN_NW_ARP_REQUEST ==
   4140          					  htons((GsnNwIf_U16FieldGet)(pEthFrame->Data + GSN_NW_ARP_OP_OFFSET))) &&
   4141          			(0 == memcmp(&ipAddr, (pEthFrame->Data + GSN_NW_ARP_TAGET_IP_OFFSET), 4)));
   \   00000022   0xF640 0x0006      MOVW     R0,#+2054
   \   00000026   0x4282             CMP      R2,R0
   \   00000028   0xD112             BNE.N    ??App_IsArpReqstPkt_0
   \   0000002A   0x.... 0x....      BL       ??Subroutine46_0
   \                     ??CrossCallReturnLabel_128:
   \   0000002E   0x.... 0x....      BL       ?Subroutine46
   \                     ??CrossCallReturnLabel_130:
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0xEA45 0x2000      ORR      R0,R5,R0, LSL #+8
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD109             BNE.N    ??App_IsArpReqstPkt_0
   \   0000003C   0x2204             MOVS     R2,#+4
   \   0000003E   0xF104 0x0126      ADD      R1,R4,#+38
   \   00000042   0xA800             ADD      R0,SP,#+0
   \   00000044   0x.... 0x....      BL       memcmp
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0x4180             SBCS     R0,R0,R0
   \   0000004C   0x0FC0             LSRS     R0,R0,#+31
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??App_IsArpReqstPkt_0:
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   4142          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   0x0A05             LSRS     R5,R0,#+8
   \                     ??Subroutine46_0:
   \   00000002   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000006   0x.... 0x....      B.W      GsnNwIf_U16FieldGet
   4143          

   \                                 In section .text, align 2, keep-with-next
   4144          BOOL 
   4145          App_IsArpReplyPkt(GSN_NWIF_CTX_T *pNwIf, GSN_ETHERNET_FRAME_T *pEthFrame, 
   4146          								UINT32 protocol)
   4147          {
   \                     App_IsArpReplyPkt:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   4148          	//UINT32 ipAddr;
   4149          	//ipAddr = htonl(GsnNwIf_IpV4AddrGet(pNwIf));
   4150          	/* An ARP Request Pkt with  Destination address being  the node address */
   4151          	return ((GSN_ETH_PROTO_TYPE_ARP == protocol) &&
   4152          		  	(GSN_NW_ARP_RESPONSE ==
   4153          					  htons((GsnNwIf_U16FieldGet)(pEthFrame->Data + GSN_NW_ARP_OP_OFFSET))));
   \   00000002   0xF640 0x0006      MOVW     R0,#+2054
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4282             CMP      R2,R0
   \   0000000A   0xD10A             BNE.N    ??App_IsArpReplyPkt_0
   \   0000000C   0x.... 0x....      BL       ??Subroutine46_0
   \                     ??CrossCallReturnLabel_127:
   \   00000010   0x.... 0x....      BL       ?Subroutine46
   \                     ??CrossCallReturnLabel_129:
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xEA45 0x2000      ORR      R0,R5,R0, LSL #+8
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD101             BNE.N    ??App_IsArpReplyPkt_0
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??App_IsArpReplyPkt_0:
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   4154          }
   4155          

   \                                 In section .text, align 2, keep-with-next
   4156          PRIVATE INLINE UINT16
   4157          AppS2w_NwIfU16FieldGet(UINT8 *pPkt)
   4158          {
   \                     AppS2w_NwIfU16FieldGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   4159              UINT16 val = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   4160              memcpy(&val, pPkt, sizeof(UINT16));
   \   00000008   0x2202             MOVS     R2,#+2
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       memcpy
   4161              return val;
   \   00000012   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   4162          }

   \                                 In section .text, align 2, keep-with-next
   4163          UINT32 AppS2w_isForValidCid(UINT16 dst_port , UINT16 src_port)
   4164          {
   \                     AppS2w_isForValidCid:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x460A             MOV      R2,R1
   4165              BOOL filterPass = FALSE;
   \   00000004   0x2100             MOVS     R1,#+0
   4166              UINT32 i;
   4167              for (i = 0; i < MAX_CID_RANGE; i++)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xF44F 0x7394      MOV      R3,#+296
   \   0000000C   0x....             LDR.N    R4,??DataTable109_18
   4168              {
   4169                  if (((s2wCidList[i].sd != CID_NOTINUSE) &&((dst_port == s2wCidList[i].localPort ) ||
   4170                      (s2wCidList[i].conMode == S2W_NETDATA_MODE_CLIENT_TRANSIENT)))||
   4171                      ((s2wCidList[i].conMode == S2W_NETDATA_MODE_CLIENT_TRANSIENT) && 
   4172                      (s2wCidList[i].httpflag == 1) &&  ((src_port == S2W_HTTPS_PORT ) || (src_port == S2W_HTTP_PORT ))))
   \                     ??AppS2w_isForValidCid_0:
   \   0000000E   0xFB03 0x4605      MLA      R6,R3,R5,R4
   \   00000012   0x69F7             LDR      R7,[R6, #+28]
   \   00000014   0xF117 0x0F01      CMN      R7,#+1
   \   00000018   0xD005             BEQ.N    ??AppS2w_isForValidCid_1
   \   0000001A   0x8877             LDRH     R7,[R6, #+2]
   \   0000001C   0x42B8             CMP      R0,R7
   \   0000001E   0xBF1C             ITT      NE 
   \   00000020   0x7877             LDRBNE   R7,[R6, #+1]
   \   00000022   0x2F07             CMPNE    R7,#+7
   \   00000024   0xD00C             BEQ.N    ??AppS2w_isForValidCid_2
   \                     ??AppS2w_isForValidCid_1:
   \   00000026   0x7877             LDRB     R7,[R6, #+1]
   \   00000028   0x2F07             CMP      R7,#+7
   \   0000002A   0xBF04             ITT      EQ 
   \   0000002C   0xF896 0x602F      LDRBEQ   R6,[R6, #+47]
   \   00000030   0x2E01             CMPEQ    R6,#+1
   \   00000032   0xD107             BNE.N    ??AppS2w_isForValidCid_3
   \   00000034   0xF240 0x16BB      MOVW     R6,#+443
   \   00000038   0x42B2             CMP      R2,R6
   \   0000003A   0xBF18             IT       NE 
   \   0000003C   0x2A50             CMPNE    R2,#+80
   \   0000003E   0xD101             BNE.N    ??AppS2w_isForValidCid_3
   4173                     {
   4174                         filterPass = TRUE;
   \                     ??AppS2w_isForValidCid_2:
   \   00000040   0x2101             MOVS     R1,#+1
   4175                         break;
   \   00000042   0xE002             B.N      ??AppS2w_isForValidCid_4
   4176                     }
   4177              }
   \                     ??AppS2w_isForValidCid_3:
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0x2D10             CMP      R5,#+16
   \   00000048   0xD3E1             BCC.N    ??AppS2w_isForValidCid_0
   4178          #ifdef S2W_COAP_SUPPORT
   4179              for (i = 0; i < MAX_CID_RANGE; i++)
   \                     ??AppS2w_isForValidCid_4:
   \   0000004A   0x2000             MOVS     R0,#+0
   4180              {
   4181                  if ((s2wCidList[i].sd != CID_NOTINUSE) &&
   4182                      (s2wCidList[i].conType == UDP) &&
   4183                      (src_port == S2W_COAP_PORT ) && (s2wCidList[i].coapContext != NULL))
   \                     ??AppS2w_isForValidCid_5:
   \   0000004C   0xFB03 0xF500      MUL      R5,R3,R0
   \   00000050   0x192E             ADDS     R6,R5,R4
   \   00000052   0x69F7             LDR      R7,[R6, #+28]
   \   00000054   0xF117 0x0F01      CMN      R7,#+1
   \   00000058   0xD00B             BEQ.N    ??AppS2w_isForValidCid_6
   \   0000005A   0x5D2D             LDRB     R5,[R5, R4]
   \   0000005C   0x2D01             CMP      R5,#+1
   \   0000005E   0xBF04             ITT      EQ 
   \   00000060   0xF241 0x6533      MOVWEQ   R5,#+5683
   \   00000064   0x42AA             CMPEQ    R2,R5
   \   00000066   0xD104             BNE.N    ??AppS2w_isForValidCid_6
   \   00000068   0xF8D6 0x511C      LDR      R5,[R6, #+284]
   \   0000006C   0xB10D             CBZ.N    R5,??AppS2w_isForValidCid_6
   4184                     {
   4185                         filterPass = TRUE;
   \   0000006E   0x2101             MOVS     R1,#+1
   4186                         break;
   \   00000070   0xE002             B.N      ??AppS2w_isForValidCid_7
   4187                     }
   4188              }
   \                     ??AppS2w_isForValidCid_6:
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x2810             CMP      R0,#+16
   \   00000076   0xD3E9             BCC.N    ??AppS2w_isForValidCid_5
   4189          #endif
   4190              return filterPass;
   \                     ??AppS2w_isForValidCid_7:
   \   00000078   0x4608             MOV      R0,R1
   \   0000007A   0xBDF0             POP      {R4-R7,PC}       ;; return
   4191          }

   \                                 In section .text, align 2, keep-with-next
   4192          BOOL
   4193          AppS2wRecv_Filter(GSN_NWIF_CTX_T *pNwIf, UINT32 pktLen,
   4194                              GSN_ETHERNET_FRAME_T *pEthFrame
   4195                              )
   4196          {
   \                     AppS2wRecv_Filter:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x4614             MOV      R4,R2
   4197          	BOOL filterPass = TRUE;
   \   00000008   0x2501             MOVS     R5,#+1
   4198          	UINT16 protocol;
   4199          	UINT8 getOutOfDpSleep = 0;
   \   0000000A   0xF04F 0x0800      MOV      R8,#+0
   4200          	
   4201          	UINT16 dst_port= htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data
   4202          				                                                    + GSN_NW_IP_HEADER_LEN
   4203                                                              + GSN_NW_UDP_DST_PORT_OFFSET));
   \   0000000E   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_134:
   \   00000012   0x4607             MOV      R7,R0
   \   00000014   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_133:
   \   00000018   0x0200             LSLS     R0,R0,#+8
   \   0000001A   0xEA40 0x2717      ORR      R7,R0,R7, LSR #+8
   \   0000001E   0xB2BF             UXTH     R7,R7
   4204          	UINT16 src_port =htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data+ GSN_NW_IP_HEADER_LEN
   4205          																	+ GSN_NW_UDP_SRC_PORT_OFFSET));	 
   \   00000020   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_138:
   \   00000024   0x4606             MOV      R6,R0
   \   00000026   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_137:
   \   0000002A   0x0200             LSLS     R0,R0,#+8
   \   0000002C   0xEA40 0x2616      ORR      R6,R0,R6, LSR #+8
   4206          																	
   4207          	protocol = swap_16(pEthFrame->UpperProtocolType);
   \   00000030   0x89A0             LDRH     R0,[R4, #+12]
   \   00000032   0x0201             LSLS     R1,R0,#+8
   \   00000034   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000038   0xFA1F 0xF980      UXTH     R9,R0
   4208              if(GSN_ETH_PROTO_TYPE_ARP == protocol)
   \   0000003C   0xF640 0x0006      MOVW     R0,#+2054
   \   00000040   0x4581             CMP      R9,R0
   \   00000042   0xD10F             BNE.N    ??AppS2wRecv_Filter_0
   4209              {
   4210          		filterPass = FALSE;
   \   00000044   0x2500             MOVS     R5,#+0
   4211          		if(TRUE == App_IsArpReqstPkt(pNwIf, pEthFrame, protocol) || 
   4212          			TRUE == App_IsArpReplyPkt(pNwIf, pEthFrame, protocol))
   \   00000046   0x464A             MOV      R2,R9
   \   00000048   0x4621             MOV      R1,R4
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x.... 0x....      BL       App_IsArpReqstPkt
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD006             BEQ.N    ??AppS2wRecv_Filter_1
   \   00000054   0x464A             MOV      R2,R9
   \   00000056   0x4621             MOV      R1,R4
   \   00000058   0x4650             MOV      R0,R10
   \   0000005A   0x.... 0x....      BL       App_IsArpReplyPkt
   \   0000005E   0x2801             CMP      R0,#+1
   \   00000060   0xD100             BNE.N    ??AppS2wRecv_Filter_0
   4213          		{
   4214          			filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_1:
   \   00000062   0x2501             MOVS     R5,#+1
   4215          		}
   4216          	}
   4217          
   4218              /* Get protocol type if the l2 is configured to disable any protocol*/
   4219              if(s2wappMainTaskCtxt->l2ConfigBitField)
   \                     ??AppS2wRecv_Filter_0:
   \   00000064   0x.... 0x....      LDR.W    R10,??DataTable109_2
   \   00000068   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   0000006C   0xF647 0x70F1      MOVW     R0,#+32753
   \   00000070   0xF240 0x1BBB      MOVW     R11,#+443
   \   00000074   0x5C40             LDRB     R0,[R0, R1]
   \   00000076   0xB388             CBZ.N    R0,??AppS2wRecv_Filter_2
   4220              {
   4221          	    if (GSN_ETH_PROTO_TYPE_IP == protocol)
   \   00000078   0xF5B9 0x6F00      CMP      R9,#+2048
   \   0000007C   0xD13B             BNE.N    ??AppS2wRecv_Filter_3
   4222          	    {
   4223          			/* If it is an ICMP and disable flag enabled by the at command, then return false */
   4224          		    if((GSN_NW_ICMP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) &&
   4225          		       (s2wappMainTaskCtxt->l2ConfigBitField & S2W_ICMP_MASK))
   \   0000007E   0x7DE1             LDRB     R1,[R4, #+23]
   \   00000080   0x2901             CMP      R1,#+1
   \   00000082   0xD103             BNE.N    ??AppS2wRecv_Filter_4
   \   00000084   0x07C2             LSLS     R2,R0,#+31
   \   00000086   0xBF48             IT       MI 
   \   00000088   0x2500             MOVMI    R5,#+0
   4226          		    {
   4227          				filterPass = FALSE;
   \   0000008A   0xD434             BMI.N    ??AppS2wRecv_Filter_3
   4228          			}
   4229          
   4230          		    /* If it is an UDP/TCP and disable flag enabled by the at command, then return false */
   4231          		    else if(((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4232          		    (GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))&&
   4233          			    (s2wappMainTaskCtxt->l2ConfigBitField & S2W_UDP_TCP_MASK))
   \                     ??AppS2wRecv_Filter_4:
   \   0000008C   0x2911             CMP      R1,#+17
   \   0000008E   0xBF18             IT       NE 
   \   00000090   0x2906             CMPNE    R1,#+6
   \   00000092   0xD130             BNE.N    ??AppS2wRecv_Filter_3
   \   00000094   0x0780             LSLS     R0,R0,#+30
   \   00000096   0xD52E             BPL.N    ??AppS2wRecv_Filter_3
   4234          		    {
   4235          				filterPass = FALSE;
   \   00000098   0x2500             MOVS     R5,#+0
   4236                          /* It has to be packet for an existing socket */
   4237          				if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \   0000009A   0x2911             CMP      R1,#+17
   \   0000009C   0xD104             BNE.N    ??AppS2wRecv_Filter_5
   4238          				{
   4239          					if((S2W_DNS_PORT == src_port)|| (S2W_SNTP_PORT == src_port))
   \   0000009E   0xB2B6             UXTH     R6,R6
   \   000000A0   0x2E35             CMP      R6,#+53
   \   000000A2   0xBF18             IT       NE 
   \   000000A4   0x2E7B             CMPNE    R6,#+123
   \   000000A6   0xD010             BEQ.N    ??AppS2wRecv_Filter_6
   4240          					{
   4241          						filterPass = TRUE;
   4242                              	goto AppS2wRecv_Filter_1;
   4243          					}
   4244          				}	
   4245                          // check first the pkt is dhcp/dns/mdns/http
   4246                          if( (S2W_MDNS_PORT == dst_port) || (GSN_NW_BOOTPS_PORT == dst_port)
   4247                              ||  (GSN_NW_BOOTP_PORT == dst_port)|| (S2W_DNS_PORT == dst_port)                   
   4248          #ifdef S2W_WEB_SERVER                   
   4249                               ||  (((S2W_HTTPS_PORT == dst_port) || (S2W_HTTP_PORT == dst_port)) && (GsnHttpd_IsRunning()))
   4250          #endif                    
   4251                              )
   \                     ??AppS2wRecv_Filter_5:
   \   000000A8   0xF241 0x40E9      MOVW     R0,#+5353
   \   000000AC   0x4287             CMP      R7,R0
   \   000000AE   0xBF18             IT       NE 
   \   000000B0   0x2F43             CMPNE    R7,#+67
   \   000000B2   0xD00A             BEQ.N    ??AppS2wRecv_Filter_6
   \   000000B4   0x2F44             CMP      R7,#+68
   \   000000B6   0xBF18             IT       NE 
   \   000000B8   0x2F35             CMPNE    R7,#+53
   \   000000BA   0xD006             BEQ.N    ??AppS2wRecv_Filter_6
   \   000000BC   0x455F             CMP      R7,R11
   \   000000BE   0xBF18             IT       NE 
   \   000000C0   0x2F50             CMPNE    R7,#+80
   \   000000C2   0xD104             BNE.N    ??AppS2wRecv_Filter_7
   \   000000C4   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   000000C8   0xB108             CBZ.N    R0,??AppS2wRecv_Filter_7
   4252                          {
   4253                              filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_6:
   \   000000CA   0x2501             MOVS     R5,#+1
   4254                              goto AppS2wRecv_Filter_1;
   \   000000CC   0xE013             B.N      ??AppS2wRecv_Filter_3
   4255          				}
   4256                          // check the port exists in the cid list, if not drop the pkt
   4257                          if(AppS2w_isForValidCid(dst_port, src_port) == TRUE)
   \                     ??AppS2wRecv_Filter_7:
   \   000000CE   0xB2B1             UXTH     R1,R6
   \   000000D0   0x4638             MOV      R0,R7
   \   000000D2   0x.... 0x....      BL       AppS2w_isForValidCid
   \   000000D6   0x2801             CMP      R0,#+1
   \   000000D8   0xD10D             BNE.N    ??AppS2wRecv_Filter_3
   \   000000DA   0xE00A             B.N      ??AppS2wRecv_Filter_8
   4258                          {
   4259                              filterPass = TRUE;
   4260                              getOutOfDpSleep = 1;
   4261                          }
   4262                          
   4263            		    }
   4264          	    }
   4265          	}
   4266          	else if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4267          	    			(GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \                     ??AppS2wRecv_Filter_2:
   \   000000DC   0x7DE0             LDRB     R0,[R4, #+23]
   \   000000DE   0x2811             CMP      R0,#+17
   \   000000E0   0xBF18             IT       NE 
   \   000000E2   0x2806             CMPNE    R0,#+6
   \   000000E4   0xD107             BNE.N    ??AppS2wRecv_Filter_3
   4268              {
   4269                  if(AppS2w_isForValidCid(dst_port, src_port) == TRUE)
   \   000000E6   0xB2B1             UXTH     R1,R6
   \   000000E8   0x4638             MOV      R0,R7
   \   000000EA   0x.... 0x....      BL       AppS2w_isForValidCid
   \   000000EE   0x2801             CMP      R0,#+1
   \   000000F0   0xD101             BNE.N    ??AppS2wRecv_Filter_3
   4270                  {
   4271                      filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_8:
   \   000000F2   0x2501             MOVS     R5,#+1
   4272                      getOutOfDpSleep = 1;
   \   000000F4   0x46A8             MOV      R8,R5
   4273                  }
   4274              }
   4275          	
   4276          
   4277          AppS2wRecv_Filter_1:
   4278          
   4279          	if(s2wappMainTaskCtxt->dpSleep)
   \                     ??AppS2wRecv_Filter_3:
   \   000000F6   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000FA   0xF646 0x27FC      MOVW     R7,#+27388
   \   000000FE   0x5838             LDR      R0,[R7, R0]
   \   00000100   0xB318             CBZ.N    R0,??AppS2wRecv_Filter_9
   4280          	{
   4281          	    /* If it is an UDP/TCP and disable flag enabled by the at command, then return false */
   4282          	    if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4283          	    			(GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \   00000102   0x7DE0             LDRB     R0,[R4, #+23]
   \   00000104   0x2811             CMP      R0,#+17
   \   00000106   0xBF18             IT       NE 
   \   00000108   0x2806             CMPNE    R0,#+6
   \   0000010A   0xD115             BNE.N    ??AppS2wRecv_Filter_10
   4284          	    {
   4285          			//filterPass = FALSE;
   4286          	        /* It has to be packet for an existing socket */
   4287          	        UINT16 dst_port= htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data
   4288          			                                                    + GSN_NW_IP_HEADER_LEN
   4289          	                                            + GSN_NW_UDP_DST_PORT_OFFSET));
   \   0000010C   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_132:
   \   00000110   0x4606             MOV      R6,R0
   \   00000112   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_131:
   \   00000116   0x0200             LSLS     R0,R0,#+8
   \   00000118   0xEA40 0x2016      ORR      R0,R0,R6, LSR #+8
   \   0000011C   0xB286             UXTH     R6,R0
   4290          			UINT16 src_port =htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data+ GSN_NW_IP_HEADER_LEN
   4291          																+ GSN_NW_UDP_SRC_PORT_OFFSET));				
   \   0000011E   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_136:
   \   00000122   0x.... 0x....      BL       ?Subroutine48
   4292          #ifdef S2W_WEB_SERVER
   4293          	        if(((S2W_HTTPS_PORT == dst_port) || (S2W_HTTP_PORT == dst_port)) && (GsnHttpd_IsRunning()))
   \                     ??CrossCallReturnLabel_135:
   \   00000126   0x455E             CMP      R6,R11
   \   00000128   0xBF18             IT       NE 
   \   0000012A   0x2E50             CMPNE    R6,#+80
   \   0000012C   0xD104             BNE.N    ??AppS2wRecv_Filter_10
   \   0000012E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000132   0xB108             CBZ.N    R0,??AppS2wRecv_Filter_10
   4294          	        {
   4295          	            getOutOfDpSleep = 1;
   \   00000134   0xF04F 0x0801      MOV      R8,#+1
   4296          			}
   4297          #endif          			
   4298          	        
   4299          		}
   4300          		if(s2wappMainTaskCtxt->dpSleep && (1 == getOutOfDpSleep))
   \                     ??AppS2wRecv_Filter_10:
   \   00000138   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000013C   0x5838             LDR      R0,[R7, R0]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xBF1C             ITT      NE 
   \   00000142   0xF1B8 0x0F00      CMPNE    R8,#+0
   \   00000146   0x.... 0x....      BLNE     AppS2w_ExitDpSleep
   4301          		{
   4302          			AppS2w_ExitDpSleep();
   4303          		}
   4304          	}
   4305              return filterPass;
   \                     ??AppS2wRecv_Filter_9:
   \   0000014A   0x4628             MOV      R0,R5
   \   0000014C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   4306          
   4307          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   0xF104 0x0022      ADD      R0,R4,#+34
   \   00000004   0x....             B.N      AppS2w_NwIfU16FieldGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   0xF104 0x0024      ADD      R0,R4,#+36
   \   00000004   0x....             B.N      AppS2w_NwIfU16FieldGet
   4308          
   4309          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   4310          extern const unsigned char dtlsClientCA[895];
   4311          extern const unsigned char dtlsClientClient[641];
   4312          extern const unsigned char dtlsClentKey[608];
   4313          
   4314          VOID  AppS2w_DtslClientCb( VOID * pCtx, UINT8 event )
   4315          {
   4316          	int i;
   4317          	for(i = 0; i< MAX_CID_RANGE; i++)
   4318          	{
   4319          		if(pCtx == (void*)s2wCidList[i].ssl.sslConn)
   4320          		{
   4321          			break;
   4322          		}
   4323          	}
   4324          	if((i < MAX_CID_RANGE) && (GSN_DTLS_HANDSHAKE_DONE == event))
   4325          	{
   4326          		GsnOsal_SemRelease(&s2wCidList[i].s2wUserOpenInProgress);
   4327          	}
   4328          }
   4329          
   4330          UINT8 AppS2w_DtslClientOpen(UINT8 cliCid, char* caCertName,
   4331                                     UINT8 *clientCertName, UINT8 *clientKeyName)
   4332          {
   4333              //INT32 u32NoOfBytesSent;
   4334              UINT32 status;
   4335              UINT8 *certBuf = NULL;
   4336              UINT16 caCertsize = 0;
   4337              INT32  index=0;
   4338              //void *pSslConn;
   4339              GSN_SSL_CONN_PARAMS_T sslConnParams;
   4340          	UINT32 cid = cliCid;
   4341          #if 1
   4342          #ifdef S2W_APP_SSL_PROVISION
   4343              initStartTime = GsnSoftTmr_CurrentSystemTime();
   4344          #endif
   4345          
   4346              /* Avoid warning*/
   4347              (void)certBuf ;
   4348              (void)caCertsize ;
   4349              memset((INT8 *)&sslConnParams, 0, sizeof(sslConnParams));
   4350              if (s2wCidList[cid].sslflag == TRUE)
   4351              {
   4352                  S2w_Printf("\r\nSocket is already SSL Enabled");
   4353                  return S2W_FAILURE;
   4354              }
   4355          
   4356              if(caCertName != NULL)
   4357              {
   4358                  index = S2wCert_SearchRamTable(caCertName);
   4359                  if(index == -1)
   4360                  {
   4361                  	index = S2wCert_FlashFileLoad(caCertName);
   4362                  }
   4363                  if(index == -1)
   4364                  {
   4365                      S2w_Printf("\n\rca Certificate %s Not Found", caCertName);
   4366                      return S2W_FAILURE;
   4367                  }
   4368          
   4369                  // currently use the hardcoded certificate
   4370                  sslConnParams.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4371                  sslConnParams.caCert = s2w_ssl_cert_table[index].certAddress + 2;
   4372                  sslConnParams.caCertName = (char const*)caCertName;
   4373              }
   4374          
   4375          
   4376              if(clientCertName != NULL)
   4377              {
   4378                  index = S2wCert_SearchRamTable((char*)clientCertName);
   4379                  if(index == -1)
   4380                  {
   4381                  	index = S2wCert_FlashFileLoad((char*)clientCertName);
   4382                  }
   4383                  if(index == -1)
   4384                  {
   4385                      S2w_Printf("\n\rclient Certificate %s Not Found", clientCertName);
   4386                      return S2W_FAILURE;
   4387                  }
   4388                  sslConnParams.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4389                  sslConnParams.clientCert =  s2w_ssl_cert_table[index].certAddress + 2;
   4390                  sslConnParams.clientCertName = (char const*)clientCertName;
   4391          
   4392              }
   4393          
   4394          
   4395              if(clientKeyName != NULL)
   4396              {
   4397                  index = S2wCert_SearchRamTable((char*)clientKeyName);
   4398                  if(index == -1)
   4399                  {
   4400                  	index = S2wCert_FlashFileLoad((char*)clientKeyName);
   4401                  }
   4402                  if(index == -1)
   4403                  {
   4404                      S2w_Printf("\n\rclient key Certificate %s Not Found", clientKeyName);
   4405                      return S2W_FAILURE;
   4406                  }
   4407                  sslConnParams.clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4408                  sslConnParams.clientKey =  s2w_ssl_cert_table[index].certAddress + 2;
   4409                  sslConnParams.clientKeyName = (char const*)clientKeyName;
   4410          
   4411              }
   4412          
   4413          #if 0
   4414              //if(caCertName != NULL)
   4415              {
   4416          
   4417                  sslConnParams.caCertLen = sizeof(dtlsClientCA);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4418                  sslConnParams.caCert =  (UINT8*)dtlsClientCA;//s2w_ssl_cert_table[index].certAddress + 2;
   4419                  sslConnParams.caCertName = NULL;
   4420              }
   4421          
   4422          
   4423              //if(clientCertName != NULL)
   4424              {
   4425                  sslConnParams.clientCertLen = sizeof(dtlsClientClient);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4426                  sslConnParams.clientCert =  (UINT8*)dtlsClientClient;//s2w_ssl_cert_table[index].certAddress + 2;
   4427                  sslConnParams.clientCertName = NULL;
   4428          
   4429              }
   4430          
   4431          
   4432              //(clientKeyName != NULL)
   4433              {
   4434          
   4435                  sslConnParams.clientKeyLen = sizeof(dtlsClentKey);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4436                  sslConnParams.clientKey =  (UINT8*)dtlsClentKey;//s2w_ssl_cert_table[index].certAddress + 2;
   4437                  sslConnParams.clientKeyName = NULL;
   4438          
   4439              }
   4440          #endif
   4441              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);    //deregister callback
   4442          
   4443              s2wCidList[cid].ssl.sslConn = (GSN_SSL_CONN_T*)gsn_malloc(sizeof(GSN_DTLS_CONN_T));
   4444          
   4445              if(NULL == s2wCidList[cid].ssl.sslConn)
   4446              {
   4447                  return S2W_FAILURE;
   4448              }
   4449          	memset((INT8 *)s2wCidList[cid].ssl.sslConn, 0, sizeof(GSN_DTLS_CONN_T));
   4450              s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   4451          	s2wCidList[cid].ssl.sslConn->connMode = GSN_SSL_CONN_MODE_CLIENT;
   4452          	s2wCidList[cid].sslflag = TRUE;
   4453          	((GSN_DTLS_CONN_T *)(s2wCidList[cid].ssl.sslConn))->cb = AppS2w_DtslClientCb;
   4454          	GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   4455          #endif
   4456          #if 1 /*SSl open is now done in Wdd task context*/
   4457          //S2w_Printf("Calling DTLS OPEN\r\n");
   4458          {
   4459              //UINT8 *pOutData, outDataLen = 0;
   4460              struct sockaddr_in *srvaddr = gsn_malloc(sizeof(struct sockaddr_in));
   4461              SOCKET_INFO_T sockInfo;
   4462              srvaddr->sin_family = AF_INET;
   4463              srvaddr->sin_port = htons(s2wCidList[cid].remotePort);
   4464              memcpy(&srvaddr->sin_addr.s_addr,s2wCidList[cid].remoteIp, 4);//inet_addr((char *)"192.168.1.146");
   4465          
   4466              sockInfo.sd = s2wCidList[cid].sd;
   4467              sockInfo.dstAddrLen = sizeof(struct sockaddr_in);
   4468              sockInfo.dstAddr = (char*)srvaddr;
   4469          
   4470              status = GsnDtls_Open((GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn, &sockInfo,
   4471                  &sslConnParams );
   4472              //S2w_Printf("Status = %d\r\n", status);
   4473          }
   4474          #else
   4475          	{
   4476          		UINT32 msg;
   4477          		/*create open sem*/
   4478          		GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   4479          		s2wCidList[cid].pConnOpenParams = &sslConnParams;
   4480          		/*post message */
   4481          		msg = (S2W_MOD_NOTIF_CONN_START + cid);
   4482          		GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   4483          		GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress,GSN_OSAL_WAIT_FOREVER);
   4484          		status = s2wCidList[cid].openStatus;
   4485          		/*Delete the semaphore*/
   4486          		GsnOsal_SemDelete(&s2wCidList[cid].s2wUserOpenInProgress);
   4487          	}
   4488          #endif
   4489              if(status == GSN_SUCCESS)
   4490              {
   4491                  nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   4492          		s2wCidList[cid].sslflag = TRUE;
   4493          	    if(GSN_OSAL_RESOURCE_NOT_AVAILABLE == GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress, 2000))
   4494                      return S2W_FAILURE;
   4495                  else
   4496                      return S2W_SUCCESS;
   4497              }
   4498              else
   4499              {
   4500                  s2wCidList[cid].sslflag = 0;
   4501                  if(s2wCidList[cid].ssl.sslConn != NULL)
   4502                  {
   4503                      gsn_free(s2wCidList[cid].ssl.sslConn);
   4504                  }
   4505          
   4506                     soc_close(s2wCidList[cid].sd);
   4507                     s2wCidList[cid].sd = CID_NOTINUSE;
   4508                     s2wCidList[cid].localPort = 0;
   4509                     s2wCidList[cid].remotePort = 0;
   4510                  return S2W_FAILURE;
   4511              }
   4512          
   4513          }
   4514          #endif
   4515          #ifdef S2W_COAP_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   4516          PUBLIC GSN_COAP_CONTEXT_T*
   4517          AppS2wHal_CoapHandleGet(UINT8 cid)
   4518          {
   4519          	return s2wCidList[cid].coapContext;
   \                     AppS2wHal_CoapHandleGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable109_18
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0xF8D0 0x011C      LDR      R0,[R0, #+284]
   \   0000000E   0x4770             BX       LR               ;; return
   4520          }
   4521          

   \                                 In section .text, align 2, keep-with-next
   4522          PUBLIC GSN_COAP_CONN_PARAMS_T*
   4523          AppS2wHal_CoapParamsGet(UINT8 cid)
   4524          {
   4525          	return s2wCidList[cid].coapConnParams;
   \                     AppS2wHal_CoapParamsGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable109_18
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0xF8D0 0x0120      LDR      R0,[R0, #+288]
   \   0000000E   0x4770             BX       LR               ;; return
   4526          }

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000   0x2E 0x00          DC8 "."

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n CID value in NetTc...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 CID value in NetTcpClient func 1 : %d"
   \              0x20 0x43    
   \              0x49 0x44    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x4E 0x65    
   \              0x74 0x54    
   \              0x63 0x70    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x63 0x20    
   \              0x31 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 1">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 1"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x31    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n CID value in NetTc...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 CID value in NetTcpClient func 2 : %d"
   \              0x20 0x43    
   \              0x49 0x44    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x4E 0x65    
   \              0x74 0x54    
   \              0x63 0x70    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x63 0x20    
   \              0x32 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n cidNo value in Net...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 cidNo value in NetTcpClient func : %d"
   \              0x20 0x63    
   \              0x69 0x64    
   \              0x4E 0x6F    
   \              0x20 0x76    
   \              0x61 0x6C    
   \              0x75 0x65    
   \              0x20 0x69    
   \              0x6E 0x20    
   \              0x4E 0x65    
   \              0x74 0x54    
   \              0x63 0x70    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x63 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 2">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 2"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x32    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 3">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 3"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x33    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 4">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 4"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x34    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 5">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 5"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x35    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 6">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 6"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x36    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62_1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable62_2:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "s2wNetRecvtask">`:
   \   00000000   0x73 0x32          DC8 "s2wNetRecvtask"
   \              0x77 0x4E    
   \              0x65 0x74    
   \              0x52 0x65    
   \              0x63 0x76    
   \              0x74 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nData Receive in rec...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 44H, 61H, 74H, 61H, 20H, 52H
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x52    
   \   00000008   0x65 0x63          DC8 65H, 63H, 65H, 69H, 76H, 65H, 20H, 69H
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x20 0x69    
   \   00000010   0x6E 0x20          DC8 6EH, 20H, 72H, 65H, 63H, 65H, 69H, 76H
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \   00000018   0x65 0x20          DC8 65H, 20H, 74H, 61H, 73H, 6BH, 20H, 73H
   \              0x74 0x61    
   \              0x73 0x6B    
   \              0x20 0x73    
   \   00000020   0x32 0x77          DC8 32H, 77H, 52H, 78H, 42H, 75H, 66H, 20H
   \              0x52 0x78    
   \              0x42 0x75    
   \              0x66 0x20    
   \   00000028   0x3A 0x20          DC8 3AH, 20H, 25H, 58H, 20H, 25H, 58H, 20H
   \              0x25 0x58    
   \              0x20 0x25    
   \              0x58 0x20    
   \   00000030   0x25 0x58          DC8 25H, 58H, 20H, 25H, 58H, 0
   \              0x20 0x25    
   \              0x58 0x00    
   \   00000036   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nData Receive in rec...">_1`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 44H, 61H, 74H, 61H, 20H, 52H
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x52    
   \   00000008   0x65 0x63          DC8 65H, 63H, 65H, 69H, 76H, 65H, 20H, 69H
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x20 0x69    
   \   00000010   0x6E 0x20          DC8 6EH, 20H, 72H, 65H, 63H, 65H, 69H, 76H
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \   00000018   0x65 0x20          DC8 65H, 20H, 74H, 61H, 73H, 6BH, 20H, 6DH
   \              0x74 0x61    
   \              0x73 0x6B    
   \              0x20 0x6D    
   \   00000020   0x71 0x74          DC8 71H, 74H, 74H, 5FH, 74H, 65H, 6DH, 70H
   \              0x74 0x5F    
   \              0x74 0x65    
   \              0x6D 0x70    
   \   00000028   0x20 0x3A          DC8 20H, 3AH, 20H, 25H, 58H, 20H, 25H, 58H
   \              0x20 0x25    
   \              0x58 0x20    
   \              0x25 0x58    
   \   00000030   0x20 0x25          DC8 20H, 25H, 58H, 20H, 25H, 58H, 0
   \              0x58 0x20    
   \              0x25 0x58    
   \              0x00         
   \   00000037   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable64:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_1:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69_2:
   \   00000000   0x........         DC32     s2wSocketCloseSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP DISCONNECT 1">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP DISCONNECT 1"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x31 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP RECIEVE">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP RECIEVE"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x52    
   \              0x45 0x43    
   \              0x49 0x45    
   \              0x56 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SOCKET ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SOCKET ERROR"
   \              0x20 0x53    
   \              0x4F 0x43    
   \              0x4B 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP DISCONNECT 2">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP DISCONNECT 2"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x32 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75_1:
   \   00000000   0x........         DC32     s2wUdpSocketCloseSem

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n warning: certifica...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 warning: certificate mismatch"
   \              0x20 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n warning: certifica...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 warning: certificate mismatch:"
   \              0x20 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n %s">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rca Certificate %s N...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015ca Certificate %s Not Found"
   \              0x63 0x61    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rclient Certificate ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015client Certificate %s Not Found"
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rclient key Certific...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015client key Certificate %s Not Found"
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77_1:
   \   00000000   0xB0000600         DC32     0xb0000600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   0x........         DC32     s2wRxBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \   00000000   0x........         DC32     MQTT_RECEIVE_QUEUE

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSocket is already S...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Socket is already SSL Enabled"
   \              0x53 0x6F    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_CA">`:
   \   00000000   0x53 0x53          DC8 "SSL_CA"
   \              0x4C 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCertificate %s Not ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Certificate %s Not Found"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x46    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_SERVER">`:
   \   00000000   0x53 0x53          DC8 "SSL_SERVER"
   \              0x4C 0x5F    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_KEY">`:
   \   00000000   0x53 0x53          DC8 "SSL_KEY"
   \              0x4C 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable80:
   \   00000000   0x........         DC32     s2wUdpSocketCloseSem+0x1C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82:
   \   00000000   0x........         DC32     s2wAutoConnState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_1:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable82_2:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_1:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable87_2:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable94:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable100:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_1:
   \   00000000   0x........         DC32     s2wSslConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable102_2:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable103_1:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_1:
   \   00000000   0x........         DC32     AppS2wHal_HttpCloseTimeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_3:
   \   00000000   0x........         DC32     AppS2w_HttpRxBufferMgmtCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_4:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_5:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_6:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_7:
   \   00000000   0x........         DC32     mdnsFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_8:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_9:
   \   00000000   0x........         DC32     mdnsMsgQueueBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_10:
   \   00000000   0x........         DC32     s2w_mdnsCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_11:
   \   00000000   0x........         DC32     appCtx+0x6C30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_12:
   \   00000000   0x........         DC32     AppS2wHal_MdnsRegCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_13:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_14:
   \   00000000   0x........         DC32     AppS2wHal_MdnsSdCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_15:
   \   00000000   0x........         DC32     s2wPingStarted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_16:
   \   00000000   0x........         DC32     s2wPingStats

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_17:
   \   00000000   0x3F9F4000         DC32     0x3f9f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable109_18:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c%x%04d">`:
   \   00000000   0x25 0x63          DC8 "%c%c%x%04d"
   \              0x25 0x63    
   \              0x25 0x78    
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Discovery Fai...">`:
   \   00000000   0x53 0x65          DC8 "Service Discovery Failed\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x44 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nA Service Discovered...">`:
   \   00000000   0x0A 0x41          DC8 "\012A Service Discovered: %d\015\012"
   \              0x20 0x53    
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Instance name...">`:
   \   00000000   0x53 0x65          DC8 "Service Instance name     = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x49 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x63 0x65    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Sub type     ...">`:
   \   00000000   0x53 0x65          DC8 "Service Sub type          = %s\015\015"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x53 0x75    
   \              0x62 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0D    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service app protocol ...">`:
   \   00000000   0x53 0x65          DC8 "Service app protocol      = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x61 0x70    
   \              0x70 0x20    
   \              0x70 0x72    
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service protocol     ...">`:
   \   00000000   0x53 0x65          DC8 "Service protocol          = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x70 0x72    
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service domain       ...">`:
   \   00000000   0x53 0x65          DC8 "Service domain            = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service IP address   ...">`:
   \   00000000   0x53 0x65          DC8 53H, 65H, 72H, 76H, 69H, 63H, 65H, 20H
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \   00000008   0x49 0x50          DC8 49H, 50H, 20H, 61H, 64H, 64H, 72H, 65H
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \   00000010   0x73 0x73          DC8 73H, 73H, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000018   0x20 0x20          DC8 20H, 20H, 3DH, 20H, 25H, 64H, 2EH, 25H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \   00000020   0x64 0x2E          DC8 64H, 2EH, 25H, 64H, 2EH, 25H, 64H, 20H
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \   00000028   0x20 0x50          DC8 20H, 50H, 6FH, 72H, 74H, 20H, 3DH, 20H
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x3D 0x20    
   \   00000030   0x25 0x64          DC8 25H, 64H, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nService Text Info   ...">`:
   \   00000000   0x0A 0x53          DC8 "\012Service Text Info          = %s\015\012"
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x54    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nReply from %d.%d.%d...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 52H, 65H, 70H, 6CH, 79H, 20H
   \              0x52 0x65    
   \              0x70 0x6C    
   \              0x79 0x20    
   \   00000008   0x66 0x72          DC8 66H, 72H, 6FH, 6DH, 20H, 25H, 64H, 2EH
   \              0x6F 0x6D    
   \              0x20 0x25    
   \              0x64 0x2E    
   \   00000010   0x25 0x64          DC8 25H, 64H, 2EH, 25H, 64H, 2EH, 25H, 64H
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 62H, 79H, 74H, 65H, 73H, 3DH
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x3D    
   \   00000020   0x25 0x64          DC8 25H, 64H, 20H, 74H, 69H, 6DH, 65H, 3DH
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \   00000028   0x25 0x64          DC8 25H, 64H, 20H, 6DH, 73H, 20H, 54H, 54H
   \              0x20 0x6D    
   \              0x73 0x20    
   \              0x54 0x54    
   \   00000030   0x4C 0x20          DC8 4CH, 20H, 25H, 64H, 0
   \              0x25 0x64    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nRequest timed out">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Request timed out"
   \              0x52 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x64 0x20    
   \              0x6F 0x75    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPing Statistics for...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Ping Statistics for %d.%d.%d.%d:\015\012"
   \              0x50 0x69    
   \              0x6E 0x67    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x69    
   \              0x73 0x74    
   \              0x69 0x63    
   \              0x73 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\tPackets: Sent = %d,...">`:
   \   00000000   0x0D 0x09          DC8 0DH, 9, 50H, 61H, 63H, 6BH, 65H, 74H
   \              0x50 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \   00000008   0x73 0x3A          DC8 73H, 3AH, 20H, 53H, 65H, 6EH, 74H, 20H
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x74 0x20    
   \   00000010   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 2CH, 20H, 52H, 65H
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x52 0x65    
   \   00000018   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 3DH
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \   00000020   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 4CH, 6FH, 73H
   \              0x64 0x2C    
   \              0x20 0x4C    
   \              0x6F 0x73    
   \   00000028   0x74 0x20          DC8 74H, 20H, 3DH, 20H, 25H, 64H, 20H, 70H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x20 0x70    
   \   00000030   0x65 0x72          DC8 65H, 72H, 63H, 65H, 6EH, 74H, 0DH, 0AH
   \              0x63 0x65    
   \              0x6E 0x74    
   \              0x0D 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\rApproximate round tr...">`:
   \   00000000   0x0D 0x41          DC8 "\015Approximate round trip times in milliseconds\015\012"
   \              0x70 0x70    
   \              0x72 0x6F    
   \              0x78 0x69    
   \              0x6D 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x72 0x69    
   \              0x70 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x6D    
   \              0x69 0x6C    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\tMinimum = %dms, Max...">`:
   \   00000000   0x0D 0x09          DC8 0DH, 9, 4DH, 69H, 6EH, 69H, 6DH, 75H
   \              0x4D 0x69    
   \              0x6E 0x69    
   \              0x6D 0x75    
   \   00000008   0x6D 0x20          DC8 6DH, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000010   0x2C 0x20          DC8 2CH, 20H, 4DH, 61H, 78H, 69H, 6DH, 75H
   \              0x4D 0x61    
   \              0x78 0x69    
   \              0x6D 0x75    
   \   00000018   0x6D 0x20          DC8 6DH, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 41H, 76H, 65H, 72H, 61H, 67H
   \              0x41 0x76    
   \              0x65 0x72    
   \              0x61 0x67    
   \   00000028   0x65 0x20          DC8 65H, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0
   4527          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AppS2wHal_CidFind
      24   AppS2wHal_CidGet
        24   -> memset
      64   AppS2wHal_CidInfoGet
        64   -> AppS2wHal_CidFind
        64   -> getsockname
        64   -> memcpy
       0   AppS2wHal_CidListElementGet
       0   AppS2wHal_CoapHandleGet
       0   AppS2wHal_CoapParamsGet
      32   AppS2wHal_HttpCheckDns
        32   -> S2w_Printf
        32   -> __iar_Strstr
        32   -> strlen
        32   -> strncmp
      16   AppS2wHal_HttpClose
        16   -> AppS2wHal_HttpLocalClose
        16   -> AppS2wHal_TimerStart
        16   -> GsnHttp_Alert
        16   -> GsnOsal_SemAcquire
       0   AppS2wHal_HttpCloseTimeout
         0   -> GsnOsal_SemRelease
       0   AppS2wHal_HttpHandleGet
      24   AppS2wHal_HttpLocalClose
        24   -> GsnDynMemMgmt_Free
        24   -> GsnHttp_Close
        24   -> GsnOsal_SemDelete
     112   AppS2wHal_HttpOpen
       112   -> AppS2wHal_CidGet
       112   -> AppS2wHal_NetClose
       112   -> AppS2wHal_TimerInit
       112   -> GsnDynMemMgmt_Alloc
       112   -> GsnDynMemMgmt_Free
       112   -> GsnHttp_Start
       112   -> GsnOsal_SemCreate
       112   -> getsockname
       112   -> memcpy
       112   -> memset
       112   -> nx_bsd_callback_register
       8   AppS2wHal_HttpdClose
         8   -- Indirect call
         0   -> AppS2wHttpd_Stop
         8   -> GsnHttpd_IsRunning
         0   -> GsnOsal_SemAcquire
      24   AppS2wHal_MdnsAnnounce
        24   -> GsnMdns_Announce
       8   AppS2wHal_MdnsDeInit
         8   -> GsnMdns_DeInit
      16   AppS2wHal_MdnsHostNameDereg
        16   -> GsnMdns_HostnameDeregister
      56   AppS2wHal_MdnsHostNameReg
        56   -> GsnMdns_HostnameRegister
        56   -> memcpy
      72   AppS2wHal_MdnsInit
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> GsnMdns_Init
        72   -> memcpy
        72   -> memset
       0   AppS2wHal_MdnsRegCb
         0   -> AppS2wProcess_AsyncStatusNotify
         0   -> AppS2wProcess_StatusNotify
      32   AppS2wHal_MdnsSdCb
        32   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        32   -> S2w_Printf
        32   -> s2wSpiFs_Flush
      24   AppS2wHal_MdnsServiceDereg
        24   -> GsnMdns_ServiceDeRegister
      48   AppS2wHal_MdnsServiceReg
        48   -> GsnMdns_ServiceRegister
      32   AppS2wHal_MdnsSrvcDiscover
        32   -> GsnMdns_ServiceDiscover
      40   AppS2wHal_NetClose
        40   -> AppS2wHal_HttpLocalClose
        40   -> AppS2w_SslLocalClose
        40   -> GsnOsal_SemAcquire
        40   -> GsnOsal_SemRelease
        40   -> nx_bsd_callback_register
        40   -> setsockopt
        40   -> soc_close
      48   AppS2wHal_NetCloseAll
        48   -> AppS2wHal_HttpLocalClose
        48   -> AppS2wHal_NetClose
        48   -> AppS2w_SslLocalClose
        48   -> nx_bsd_callback_register
        48   -> setsockopt
        48   -> soc_close
      32   AppS2wHal_NetInit
        32   -> GsnOsal_SemCreate
        32   -> GsnOsal_ThreadCreate
        32   -> _tx_queue_create
       0   AppS2wHal_NetIsCidOpen
     128   AppS2wHal_NetRecvTask
       128   -- Indirect call
       128   -> AppS2wHal_CidFind
       128   -> AppS2wHal_HttpLocalClose
       128   -> AppS2wHal_NetClose
       128   -> AppS2wHal_TimerStop
       128   -> AppS2wProcess_AsyncStatusNotify
       128   -> AppS2wProcess_NetAccept
       128   -> AppS2wProcess_NetRx
       128   -> AppS2wProcess_StatusNotify
       128   -> GsnHttp_Alert
       128   -> GsnHttps_DataReceive
       128   -> GsnOsal_IntrDisable
       128   -> GsnOsal_IntrEnable
       128   -> GsnOsal_QueuePut
       128   -> GsnOsal_SemAcquire
       128   -> GsnOsal_SemRelease
       128   -> GsnSq_TaskMonitorStart
       128   -> GsnSq_TaskMonitorStop
       128   -> GsnSsl_Alert
       128   -> GsnSsl_DataReceive
       128   -> GsnSsl_Free
       128   -> GsnWdd_AssocStatusGet
       128   -> S2w_Printf
       128   -> S2w_UamRx
       128   -> _tx_queue_receive
       128   -> _tx_queue_send
       128   -> fcntl
       128   -> free
       128   -> malloc
       128   -> memcpy
       128   -> memset
       128   -> recv
       128   -> recvfrom
       128   -> soc_close
      72   AppS2wHal_NetTcpClient
        72   -> AppS2wHal_CidGet
        72   -> AppS2wHal_NetClose
        72   -> S2w_Printf
        72   -> connect
        72   -> memcpy
        72   -> nx_bsd_callback_register
        72   -> setsockopt
        72   -> soc_close
        72   -> socket
      64   AppS2wHal_NetTcpClient_test
        64   -> AppS2wHal_NetClose
        64   -> S2w_Printf
        64   -> connect
        64   -> memcpy
        64   -> nx_bsd_callback_register
        64   -> setsockopt
        64   -> soc_close
        64   -> socket
      48   AppS2wHal_NetTcpServer
        48   -> AppS2wHal_CidGet
        48   -> AppS2wHal_NetClose
        48   -> bind
        48   -> listen
        48   -> memset
        48   -> nx_bsd_callback_register
        48   -> setsockopt
        48   -> soc_close
        48   -> socket
      64   AppS2wHal_NetTx
        64   -> AppS2w_SslClose
        64   -> GsnSq_TaskMonitorStart
        64   -> GsnSq_TaskMonitorStop
        64   -> GsnSsl_Encode
        64   -> GsnSsl_Free
        64   -> memcpy
        64   -> s2wSpiFs_Flush
        64   -> send
        64   -> sendto
      80   AppS2wHal_NetUdpClient
        80   -> AppS2wHal_CidGet
        80   -> AppS2wHal_NetClose
        80   -> bind
        80   -> getsockname
        80   -> memcpy
        80   -> nx_bsd_callback_register
        80   -> setsockopt
        80   -> soc_close
        80   -> socket
      56   AppS2wHal_NetUdpServer
        56   -> AppS2wHal_CidGet
        56   -> AppS2wHal_NetClose
        56   -> bind
        56   -> memset
        56   -> nx_bsd_callback_register
        56   -> setsockopt
        56   -> soc_close
        56   -> socket
       0   AppS2wHal_PingClose
         0   -> AppS2w_PingTaskNotify
      96   AppS2wHal_RxCallBack
        96   -> AppS2wHal_CidFind
        96   -> AppS2wHal_CidGet
        96   -> AppS2wHal_TimerInit
        96   -> AppS2w_ExitDpSleep
        96   -> AppS2w_GpioWkUpDisable
        96   -> GsnOsal_IntrDisable
        96   -> GsnOsal_IntrEnable
        96   -> GsnOsal_QueuePut
        96   -> GsnOsal_SemAcquire
        96   -> GsnOsal_SemCreate
        96   -> GsnOsal_SemRelease
        96   -> GsnSsl_Accept
        96   -> S2w_AsyncMsgGpioOp
        96   -> S2w_Printf
        96   -> accept
        96   -> memcpy
        96   -> nx_bsd_callback_register
        96   -> setsockopt
        96   -> soc_close
        96   -> tfClose
        96   -> tfResetConnection
      24   AppS2wHal_SockOpSet
        24   -> setsockopt
       0   AppS2wHal_TcpSrvMaxConSet
      40   AppS2wRecv_Filter
        40   -> AppS2w_ExitDpSleep
        40   -> AppS2w_NwIfU16FieldGet
        40   -> AppS2w_isForValidCid
        40   -> App_IsArpReplyPkt
        40   -> App_IsArpReqstPkt
        40   -> GsnHttpd_IsRunning
       0   AppS2w_ConnHttpStateGet
       0   AppS2w_ConnModeGet
       8   AppS2w_ConnStateGet
         8   -> tlsv1_client_established
      40   AppS2w_HttpRxBufferMgmtCb
        40   -> AppS2wHal_CharNPut
        40   -> AppS2wHal_CidFind
        40   -> s2wSpiFs_Flush
        40   -> sprintf
        40   -> strlen
       0   AppS2w_HttpSemAquire
         0   -> GsnOsal_SemAcquire
       0   AppS2w_HttpSemRelease
         0   -> GsnOsal_SemRelease
       0   AppS2w_HttpdSemCreate
         0   -> GsnOsal_SemCreate
       0   AppS2w_HttpdSemDelete
         0   -> GsnOsal_SemDelete
       8   AppS2w_NwIfU16FieldGet
         8   -> memcpy
      80   AppS2w_SslClientOpen
        80   -> AppS2wHal_TimerInit
        80   -> GsnDynMemMgmt_Free
        80   -> GsnOsal_SemCreate
        80   -> GsnSsl_Open
        80   -> MALLOC
        80   -> S2wCert_FlashFileLoad
        80   -> S2wCert_SearchRamTable
        80   -> S2w_Printf
        80   -> memset
        80   -> nx_bsd_callback_register
        80   -> soc_close
      16   AppS2w_SslClose
        16   -> AppS2wHal_TimerStart
        16   -> AppS2w_SslLocalClose
        16   -> GsnOsal_SemAcquire
        16   -> GsnSsl_Alert
      16   AppS2w_SslLocalClose
        16   -> GsnOsal_SemDelete
        16   -> GsnSsl_Close
        16   -> GsnSsl_ServerDeInit
        16   -> nx_bsd_callback_register
        16   -> soc_close
      80   AppS2w_SslServerOpen
        80   -> GsnSsl_ServerInit
        80   -> S2wCert_FlashFileLoad
        80   -> S2wCert_SearchRamTable
        80   -> S2w_Printf
        80   -> memset
      20   AppS2w_isForValidCid
      16   App_IsArpReplyPkt
        16   -> GsnNwIf_U16FieldGet
      16   App_IsArpReqstPkt
        16   -> GsnNwIf_U16FieldGet
        16   -> memcmp
       0   GsnOsal_IntrDisable
         0   -> _tx_thread_interrupt_control
       0   GsnOsal_IntrEnable
         0   -> _tx_thread_interrupt_control
       8   GsnOsal_QueuePut
         8   -> _tx_queue_send
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemCreate
         8   -> _tx_semaphore_create
       8   GsnOsal_SemDelete
         8   -> _tx_semaphore_delete
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
       0   GsnSocketCallback
         0   -> GsnOsal_SemRelease
      48   S2wHttp_Send
        48   -> AppS2wHal_CharNPut
        48   -> AppS2wHal_HttpHandleGet
        48   -> GsnDynMemMgmt_Alloc
        48   -> GsnDynMemMgmt_Free
        48   -> GsnHttp_Send
        48   -> s2wSpiFs_Flush
        48   -> sprintf
        48   -> strlen
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
      56   s2wPingStart
        56   -> AppS2w_PingTaskNotify
        56   -> FREE
        56   -> GsnOsal_SemAcquire
        56   -> GsnOsal_SemRelease
        56   -> GsnTaskSleep
        56   -> GsnTod_Get
        56   -> MALLOC
        56   -> S2w_Printf
        56   -> __aeabi_cdcmple
        56   -> __aeabi_d2uiz
        56   -> __aeabi_dadd
        56   -> __aeabi_dmul
        56   -> __aeabi_ui2d
        56   -> _nxe_icmp_ping
        56   -> _nxe_packet_release
        56   -> memcpy
        56   -> memset
        56   -> s2wSpiFs_Flush
        56   -> strlen
      16   s2wPingStop
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> S2w_Printf
         0   -> memset
       0   s2w_mdnsCb
         0   -> AppMainCtx_TaskNotify


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%c%c%x%04d">
       2  ?<Constant ".">
       8  ?<Constant "SSL_CA">
       8  ?<Constant "SSL_KEY">
      12  ?<Constant "SSL_SERVER">
      28  ?<Constant "Service Discovery Fai...">
      56  ?<Constant "Service IP address   ...">
      36  ?<Constant "Service Instance name...">
      36  ?<Constant "Service Sub type     ...">
      36  ?<Constant "Service app protocol ...">
      36  ?<Constant "Service domain       ...">
      36  ?<Constant "Service protocol     ...">
      28  ?<Constant "\nA Service Discovered...">
      36  ?<Constant "\nService Text Info   ...">
      28  ?<Constant "\n\rCertificate %s Not ...">
      32  ?<Constant "\n\rca Certificate %s N...">
      36  ?<Constant "\n\rclient Certificate ...">
      40  ?<Constant "\n\rclient key Certific...">
      48  ?<Constant "\rApproximate round tr...">
       8  ?<Constant "\r\n %s">
      44  ?<Constant "\r\n CID value in NetTc...">
      44  ?<Constant "\r\n CID value in NetTc...">_1
      16  ?<Constant "\r\n SOCKET ERROR">
      20  ?<Constant "\r\n TCP DISCONNECT 1">
      20  ?<Constant "\r\n TCP DISCONNECT 2">
      16  ?<Constant "\r\n TCP RECIEVE">
      44  ?<Constant "\r\n cidNo value in Net...">
      12  ?<Constant "\r\n error 1">
      12  ?<Constant "\r\n error 2">
      12  ?<Constant "\r\n error 3">
      12  ?<Constant "\r\n error 4">
      12  ?<Constant "\r\n error 5">
      12  ?<Constant "\r\n error 6">
      36  ?<Constant "\r\n warning: certifica...">
      36  ?<Constant "\r\n warning: certifica...">_1
       4  ?<Constant "\r\n">
      56  ?<Constant "\r\nData Receive in rec...">
      56  ?<Constant "\r\nData Receive in rec...">_1
      40  ?<Constant "\r\nPing Statistics for...">
      56  ?<Constant "\r\nReply from %d.%d.%d...">
      20  ?<Constant "\r\nRequest timed out">
      32  ?<Constant "\r\nSocket is already S...">
      52  ?<Constant "\r\tMinimum = %dms, Max...">
      60  ?<Constant "\r\tPackets: Sent = %d,...">
      16  ?<Constant "s2wNetRecvtask">
       4  ??DataTable100
       4  ??DataTable102
       4  ??DataTable102_1
       4  ??DataTable102_2
       4  ??DataTable103
       4  ??DataTable103_1
       4  ??DataTable109
       4  ??DataTable109_1
       4  ??DataTable109_10
       4  ??DataTable109_11
       4  ??DataTable109_12
       4  ??DataTable109_13
       4  ??DataTable109_14
       4  ??DataTable109_15
       4  ??DataTable109_16
       4  ??DataTable109_17
       4  ??DataTable109_18
       4  ??DataTable109_2
       4  ??DataTable109_3
       4  ??DataTable109_4
       4  ??DataTable109_5
       4  ??DataTable109_6
       4  ??DataTable109_7
       4  ??DataTable109_8
       4  ??DataTable109_9
       4  ??DataTable62
       4  ??DataTable62_1
       4  ??DataTable62_2
       4  ??DataTable64
       4  ??DataTable69
       4  ??DataTable69_1
       4  ??DataTable69_2
       4  ??DataTable70
       4  ??DataTable75
       4  ??DataTable75_1
       4  ??DataTable77
       4  ??DataTable77_1
       4  ??DataTable78
       4  ??DataTable78_1
       4  ??DataTable80
       4  ??DataTable82
       4  ??DataTable82_1
       4  ??DataTable82_2
       4  ??DataTable87
       4  ??DataTable87_1
       4  ??DataTable87_2
       4  ??DataTable94
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine10
       6  ?Subroutine11
      10  ?Subroutine12
      14  ?Subroutine13
      12  ?Subroutine14
      10  ?Subroutine15
      20  ?Subroutine16
      12  ?Subroutine17
      14  ?Subroutine18
      12  ?Subroutine19
       6  ?Subroutine2
      12  ?Subroutine20
      12  ?Subroutine21
       8  ?Subroutine22
       8  ?Subroutine23
       8  ?Subroutine24
       8  ?Subroutine25
      10  ?Subroutine26
      12  ?Subroutine27
      10  ?Subroutine28
      12  ?Subroutine29
      28  ?Subroutine3
      10  ?Subroutine30
      32  ?Subroutine31
       8  ?Subroutine32
       8  ?Subroutine33
      32  ?Subroutine34
      14  ?Subroutine35
       4  ?Subroutine36
      32  ?Subroutine37
      14  ?Subroutine38
      10  ?Subroutine39
      24  ?Subroutine4
       6  ?Subroutine40
      10  ?Subroutine41
       8  ?Subroutine42
      12  ?Subroutine43
      12  ?Subroutine44
      10  ?Subroutine45
      10  ?Subroutine46
       6  ?Subroutine47
       6  ?Subroutine48
      10  ?Subroutine5
      14  ?Subroutine6
      12  ?Subroutine7
      14  ?Subroutine8
      24  ?Subroutine9
      32  AppS2wHal_CidFind
      78  AppS2wHal_CidGet
     144  AppS2wHal_CidInfoGet
      14  AppS2wHal_CidListElementGet
      16  AppS2wHal_CoapHandleGet
      16  AppS2wHal_CoapParamsGet
     210  AppS2wHal_HttpCheckDns
      60  AppS2wHal_HttpClose
      18  AppS2wHal_HttpCloseTimeout
      14  AppS2wHal_HttpHandleGet
      94  AppS2wHal_HttpLocalClose
     428  AppS2wHal_HttpOpen
     112  AppS2wHal_HttpdClose
      48  AppS2wHal_MdnsAnnounce
      20  AppS2wHal_MdnsDeInit
      26  AppS2wHal_MdnsHostNameDereg
      88  AppS2wHal_MdnsHostNameReg
     118  AppS2wHal_MdnsInit
      32  AppS2wHal_MdnsRegCb
     206  AppS2wHal_MdnsSdCb
      36  AppS2wHal_MdnsServiceDereg
      84  AppS2wHal_MdnsServiceReg
      54  AppS2wHal_MdnsSrvcDiscover
     238  AppS2wHal_NetClose
     178  AppS2wHal_NetCloseAll
     124  AppS2wHal_NetInit
      32  AppS2wHal_NetIsCidOpen
    1558  AppS2wHal_NetRecvTask
     312  AppS2wHal_NetTcpClient
     256  AppS2wHal_NetTcpClient_test
     180  AppS2wHal_NetTcpServer
     250  AppS2wHal_NetTx
     220  AppS2wHal_NetUdpClient
     166  AppS2wHal_NetUdpServer
      12  AppS2wHal_PingClose
     570  AppS2wHal_RxCallBack
     102  AppS2wHal_SockOpSet
      18  AppS2wHal_TcpSrvMaxConSet
     336  AppS2wRecv_Filter
      16  AppS2w_ConnHttpStateGet
      16  AppS2w_ConnModeGet
      24  AppS2w_ConnStateGet
      86  AppS2w_HttpRxBufferMgmtCb
      20  AppS2w_HttpSemAquire
      16  AppS2w_HttpSemRelease
      18  AppS2w_HttpdSemCreate
      16  AppS2w_HttpdSemDelete
      24  AppS2w_NwIfU16FieldGet
     342  AppS2w_SslClientOpen
      66  AppS2w_SslClose
      76  AppS2w_SslLocalClose
     238  AppS2w_SslServerOpen
     124  AppS2w_isForValidCid
      38  App_IsArpReplyPkt
      84  App_IsArpReqstPkt
       6  GsnOsal_IntrDisable
       4  GsnOsal_IntrEnable
      20  GsnOsal_QueuePut
      18  GsnOsal_SemAcquire
      22  GsnOsal_SemCreate
      18  GsnOsal_SemDelete
      18  GsnOsal_SemRelease
      56  GsnOsal_ThreadCreate
       8  GsnSocketCallback
     216  S2wHttp_Send
       1  mdnsFlag
      24  mdnsHnParam
     512  mdnsMsgQueueBuf
      12  memcpy
      20  memset
    9344  s2wCidList
          s2wNetRecvTaskStack
          s2wNetQueueBuffer
     492  s2wPingStart
      20  s2wPingStats
     128  s2wPingStop
    1500  s2wRxBuf
      28  s2wSocketCloseSem
      84  s2wUdpSocketCloseSem
          s2wNetQueue
       6  s2w_mdnsCb
     612  sslClentKey
     900  sslClientCA
     644  sslClientClient
    1392  sslServerCA
     612  sslServerKey
    1004  sslServerServer

 
    157 bytes in section .bss
  5 164 bytes in section .data
 11 356 bytes in section .noinit
      6 bytes in section .rodata
 10 836 bytes in section .text
 
 10 642 bytes of CODE  memory (+ 194 bytes shared)
      6 bytes of CONST memory
 16 677 bytes of DATA  memory

Errors: none
Warnings: none
