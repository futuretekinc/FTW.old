###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:13:26 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_net_gainspan.c                    #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\hal\s2w_net_gainspan.c -D                 #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_net_gainspan.lst         #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_net_gainspan.o            #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\hal\s2w_net_gainspan.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_net_gainspan.c,v $
     28          *
     29          * Description : s2w GEPS interface file
     30          ******************************************************************/
     31          
     32          
     33          /*****************************************************************
     34            * File Inclusions
     35            *****************************************************************/
     36          #include "netx/netx_bsd_layer/nxd_bsd.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     37          #include <string.h>
     38          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnOsal_IntrDisable(void)
   \                     GsnOsal_IntrDisable:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnOsal_IntrEnable(int)
   \                     GsnOsal_IntrEnable:
   \   00000000   0x.... 0x....      B.W      _tx_thread_interrupt_control

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9205             STR      R2,[SP, #+20]
   \   00000010   0x461D             MOV      R5,R3
   \   00000012   0x9B0C             LDR      R3,[SP, #+48]
   \   00000014   0x9303             STR      R3,[SP, #+12]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9302             STR      R3,[SP, #+8]
   \   0000001A   0x9204             STR      R2,[SP, #+16]
   \   0000001C   0x460B             MOV      R3,R1
   \   0000001E   0x9701             STR      R7,[SP, #+4]
   \   00000020   0x9600             STR      R6,[SP, #+0]
   \   00000022   0x4622             MOV      R2,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _tx_thread_create
   \   0000002A   0xB118             CBZ.N    R0,??GsnOsal_ThreadCreate_0
   \   0000002C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000030   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemCreate(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemCreate:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x460A             MOV      R2,R1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      BL       _tx_semaphore_create
   \   0000000A   0xB118             CBZ.N    R0,??GsnOsal_SemCreate_0
   \   0000000C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000010   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemCreate_0:
   \   00000014   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemDelete(TX_SEMAPHORE *)
   \                     GsnOsal_SemDelete:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_delete
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemDelete_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemDelete_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueuePut(TX_QUEUE *, unsigned char *)
   \                     GsnOsal_QueuePut:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x.... 0x....      BL       _tx_queue_send
   \   00000008   0xB118             CBZ.N    R0,??GsnOsal_QueuePut_0
   \   0000000A   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000E   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_QueuePut_0:
   \   00000012   0xBD02             POP      {R1,PC}          ;; return
     39          #include "hal/s2w.h"
     40          #include "hal/s2w_types.h"
     41          #include "hal/s2w_hal.h"
     42          #include "parser/s2w_process.h"
     43          #include "hal/s2w_timer.h"
     44          #include "hal/s2w_net.h"
     45          #include "hal/s2w_cert_mgmt.h"
     46          #include "parser/s2w_command.h"
     47          
     48          //#include "l2dev\s2w_l2_dev.h"
     49          #include "main/app_main_ctx.h"
     50          #include "config/app_resource_config.h"
     51          #include "app_defines.h"
     52          #include "app_events.h"
     53          #include "config/app_stat_config.h"
     54          #include "app_rtc_mem.h"
     55          #include "s2w_cert.c"

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClientCA[898]
   \                     sslClientCA:
   \   00000000   0x30 0x82          DC8 48, 130, 3, 126, 48, 130, 2, 231, 160, 3, 2, 1, 2, 2, 9, 0, 222
   \              0x03 0x7E    
   \              0x30 0x82    
   \              0x02 0xE7    
   \              0xA0 0x03    
   \              0x02 0x01    
   \              0x02 0x02    
   \              0x09 0x00    
   \              0xDE         
   \   00000011   0x7B 0x5B          DC8 123, 91, 133, 54, 111, 161, 90, 48, 13, 6, 9, 42, 134, 72, 134, 247
   \              0x85 0x36    
   \              0x6F 0xA1    
   \              0x5A 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \   00000021   0x0D 0x01          DC8 13, 1, 1, 5, 5, 0, 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19
   \              0x01 0x05    
   \              0x05 0x00    
   \              0x30 0x81    
   \              0x87 0x31    
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x06    
   \              0x13         
   \   00000034   0x02 0x49          DC8 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49
   \              0x4E 0x31    
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42 0x4C    
   \              0x52 0x31    
   \   00000046   0x0B 0x30          DC8 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55         
   \   00000059   0x04 0x0A          DC8 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06         
   \   0000006A   0x03 0x55          DC8 3, 85, 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F         
   \   0000007D   0x31 0x39          DC8 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20 0x49    
   \              0x4E 0x31    
   \              0x23         
   \   0000008E   0x30 0x21          DC8 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x01 0x16    
   \              0x14 0x73    
   \              0x75         
   \   0000009F   0x70 0x70          DC8 112, 112, 111, 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110
   \              0x6F 0x72    
   \              0x74 0x40    
   \              0x67 0x61    
   \              0x69 0x6E    
   \              0x73 0x70    
   \              0x61 0x6E    
   \   000000AD   0x2E 0x63          DC8 46, 99, 111, 109, 48, 30, 23, 13, 49, 50, 48, 54, 49, 51, 49, 49
   \              0x6F 0x6D    
   \              0x30 0x1E    
   \              0x17 0x0D    
   \              0x31 0x32    
   \              0x30 0x36    
   \              0x31 0x33    
   \              0x31 0x31    
   \   000000BD   0x35 0x37          DC8 53, 55, 48, 53, 90, 23, 13, 49, 51, 48, 54, 49, 51, 49, 49, 53, 55
   \              0x30 0x35    
   \              0x5A 0x17    
   \              0x0D 0x31    
   \              0x33 0x30    
   \              0x36 0x31    
   \              0x33 0x31    
   \              0x31 0x35    
   \              0x37         
   \   000000CE   0x30 0x35          DC8 48, 53, 90, 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 73
   \              0x5A 0x30    
   \              0x81 0x87    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x06 0x13    
   \              0x02 0x49    
   \   000000E0   0x4E 0x31          DC8 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49, 11, 48
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42 0x4C    
   \              0x52 0x31    
   \              0x0B 0x30    
   \   000000F2   0x09 0x06          DC8 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85, 4, 10
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0A         
   \   00000105   0x13 0x08          DC8 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6, 3, 85
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   00000116   0x04 0x0B          DC8 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15, 49
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F 0x31    
   \   00000128   0x39 0x32          DC8 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35, 48
   \              0x2E 0x31    
   \              0x36 0x38    
   \              0x2E 0x32    
   \              0x2E 0x39    
   \              0x34 0x20    
   \              0x49 0x4E    
   \              0x31 0x23    
   \              0x30         
   \   00000139   0x21 0x06          DC8 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117, 112
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16 0x14    
   \              0x73 0x75    
   \              0x70         
   \   0000014A   0x70 0x6F          DC8 112, 111, 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110, 46
   \              0x72 0x74    
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2E    
   \   00000158   0x63 0x6F          DC8 99, 111, 109, 48, 129, 159, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13
   \              0x6D 0x30    
   \              0x81 0x9F    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \   00000168   0x01 0x01          DC8 1, 1, 1, 5, 0, 3, 129, 141, 0, 48, 129, 137, 2, 129, 129, 0, 203
   \              0x01 0x05    
   \              0x00 0x03    
   \              0x81 0x8D    
   \              0x00 0x30    
   \              0x81 0x89    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0xCB         
   \   00000179   0xE5 0xC9          DC8 229, 201, 43, 206, 248, 121, 46, 248, 115, 211, 94, 97, 40, 6, 16
   \              0x2B 0xCE    
   \              0xF8 0x79    
   \              0x2E 0xF8    
   \              0x73 0xD3    
   \              0x5E 0x61    
   \              0x28 0x06    
   \              0x10         
   \   00000188   0x39 0xF1          DC8 57, 241, 215, 117, 213, 97, 232, 101, 248, 129, 51, 34, 98, 103
   \              0xD7 0x75    
   \              0xD5 0x61    
   \              0xE8 0x65    
   \              0xF8 0x81    
   \              0x33 0x22    
   \              0x62 0x67    
   \   00000196   0xD1 0x3D          DC8 209, 61, 112, 109, 78, 7, 196, 173, 243, 28, 39, 114, 212, 19, 122
   \              0x70 0x6D    
   \              0x4E 0x07    
   \              0xC4 0xAD    
   \              0xF3 0x1C    
   \              0x27 0x72    
   \              0xD4 0x13    
   \              0x7A         
   \   000001A5   0x03 0xEE          DC8 3, 238, 42, 103, 84, 177, 207, 95, 194, 166, 233, 221, 201, 45, 210
   \              0x2A 0x67    
   \              0x54 0xB1    
   \              0xCF 0x5F    
   \              0xC2 0xA6    
   \              0xE9 0xDD    
   \              0xC9 0x2D    
   \              0xD2         
   \   000001B4   0x55 0x8C          DC8 85, 140, 10, 207, 39, 213, 197, 26, 177, 222, 247, 140, 29, 76, 5
   \              0x0A 0xCF    
   \              0x27 0xD5    
   \              0xC5 0x1A    
   \              0xB1 0xDE    
   \              0xF7 0x8C    
   \              0x1D 0x4C    
   \              0x05         
   \   000001C3   0x7E 0x11          DC8 126, 17, 20, 172, 111, 165, 167, 100, 114, 17, 76, 115, 27, 202, 67
   \              0x14 0xAC    
   \              0x6F 0xA5    
   \              0xA7 0x64    
   \              0x72 0x11    
   \              0x4C 0x73    
   \              0x1B 0xCA    
   \              0x43         
   \   000001D2   0x2D 0x9D          DC8 45, 157, 239, 11, 180, 135, 10, 252, 130, 22, 85, 171, 191, 253
   \              0xEF 0x0B    
   \              0xB4 0x87    
   \              0x0A 0xFC    
   \              0x82 0x16    
   \              0x55 0xAB    
   \              0xBF 0xFD    
   \   000001E0   0xCE 0xF0          DC8 206, 240, 47, 83, 197, 166, 144, 113, 185, 161, 173, 177, 229, 191
   \              0x2F 0x53    
   \              0xC5 0xA6    
   \              0x90 0x71    
   \              0xB9 0xA1    
   \              0xAD 0xB1    
   \              0xE5 0xBF    
   \   000001EE   0x80 0xBB          DC8 128, 187, 38, 4, 97, 225, 4, 130, 241, 115, 2, 3, 1, 0, 1, 163, 129
   \              0x26 0x04    
   \              0x61 0xE1    
   \              0x04 0x82    
   \              0xF1 0x73    
   \              0x02 0x03    
   \              0x01 0x00    
   \              0x01 0xA3    
   \              0x81         
   \   000001FF   0xEF 0x30          DC8 239, 48, 129, 236, 48, 29, 6, 3, 85, 29, 14, 4, 22, 4, 20, 72, 62
   \              0x81 0xEC    
   \              0x30 0x1D    
   \              0x06 0x03    
   \              0x55 0x1D    
   \              0x0E 0x04    
   \              0x16 0x04    
   \              0x14 0x48    
   \              0x3E         
   \   00000210   0xF3 0x08          DC8 243, 8, 57, 29, 188, 30, 110, 118, 66, 176, 160, 226, 5, 125, 92
   \              0x39 0x1D    
   \              0xBC 0x1E    
   \              0x6E 0x76    
   \              0x42 0xB0    
   \              0xA0 0xE2    
   \              0x05 0x7D    
   \              0x5C         
   \   0000021F   0xEA 0x64          DC8 234, 100, 21, 48, 129, 188, 6, 3, 85, 29, 35, 4, 129, 180, 48, 129
   \              0x15 0x30    
   \              0x81 0xBC    
   \              0x06 0x03    
   \              0x55 0x1D    
   \              0x23 0x04    
   \              0x81 0xB4    
   \              0x30 0x81    
   \   0000022F   0xB1 0x80          DC8 177, 128, 20, 72, 62, 243, 8, 57, 29, 188, 30, 110, 118, 66, 176
   \              0x14 0x48    
   \              0x3E 0xF3    
   \              0x08 0x39    
   \              0x1D 0xBC    
   \              0x1E 0x6E    
   \              0x76 0x42    
   \              0xB0         
   \   0000023E   0xA0 0xE2          DC8 160, 226, 5, 125, 92, 234, 100, 21, 161, 129, 141, 164, 129, 138
   \              0x05 0x7D    
   \              0x5C 0xEA    
   \              0x64 0x15    
   \              0xA1 0x81    
   \              0x8D 0xA4    
   \              0x81 0x8A    
   \   0000024C   0x30 0x81          DC8 48, 129, 135, 49, 11, 48, 9, 6, 3, 85, 4, 6, 19, 2, 73, 78, 49, 12
   \              0x87 0x31    
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x06    
   \              0x13 0x02    
   \              0x49 0x4E    
   \              0x31 0x0C    
   \   0000025E   0x30 0x0A          DC8 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76, 82, 49, 11, 48, 9, 6, 3, 85
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x08 0x13    
   \              0x03 0x42    
   \              0x4C 0x52    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   00000271   0x04 0x07          DC8 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6, 3, 85, 4, 10, 19, 8, 71, 97
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0A 0x13    
   \              0x08 0x47    
   \              0x61         
   \   00000284   0x69 0x6E          DC8 105, 110, 83, 112, 97, 110, 49, 11, 48, 9, 6, 3, 85, 4, 11, 19, 2
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x0B 0x13    
   \              0x02         
   \   00000295   0x51 0x41          DC8 81, 65, 49, 24, 48, 22, 6, 3, 85, 4, 3, 19, 15, 49, 57, 50, 46, 49
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03 0x13    
   \              0x0F 0x31    
   \              0x39 0x32    
   \              0x2E 0x31    
   \   000002A7   0x36 0x38          DC8 54, 56, 46, 50, 46, 57, 52, 32, 73, 78, 49, 35, 48, 33, 6, 9, 42
   \              0x2E 0x32    
   \              0x2E 0x39    
   \              0x34 0x20    
   \              0x49 0x4E    
   \              0x31 0x23    
   \              0x30 0x21    
   \              0x06 0x09    
   \              0x2A         
   \   000002B8   0x86 0x48          DC8 134, 72, 134, 247, 13, 1, 9, 1, 22, 20, 115, 117, 112, 112, 111
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16 0x14    
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F         
   \   000002C7   0x72 0x74          DC8 114, 116, 64, 103, 97, 105, 110, 115, 112, 97, 110, 46, 99, 111
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x2E    
   \              0x63 0x6F    
   \   000002D5   0x6D 0x82          DC8 109, 130, 9, 0, 222, 123, 91, 133, 54, 111, 161, 90, 48, 12, 6, 3
   \              0x09 0x00    
   \              0xDE 0x7B    
   \              0x5B 0x85    
   \              0x36 0x6F    
   \              0xA1 0x5A    
   \              0x30 0x0C    
   \              0x06 0x03    
   \   000002E5   0x55 0x1D          DC8 85, 29, 19, 4, 5, 48, 3, 1, 1, 255, 48, 13, 6, 9, 42, 134, 72, 134
   \              0x13 0x04    
   \              0x05 0x30    
   \              0x03 0x01    
   \              0x01 0xFF    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \   000002F7   0xF7 0x0D          DC8 247, 13, 1, 1, 5, 5, 0, 3, 129, 129, 0, 168, 129, 74, 254, 27, 157
   \              0x01 0x01    
   \              0x05 0x05    
   \              0x00 0x03    
   \              0x81 0x81    
   \              0x00 0xA8    
   \              0x81 0x4A    
   \              0xFE 0x1B    
   \              0x9D         
   \   00000308   0x5D 0x5D          DC8 93, 93, 249, 16, 245, 3, 123, 199, 180, 127, 79, 23, 67, 217, 191
   \              0xF9 0x10    
   \              0xF5 0x03    
   \              0x7B 0xC7    
   \              0xB4 0x7F    
   \              0x4F 0x17    
   \              0x43 0xD9    
   \              0xBF         
   \   00000317   0xBC 0x72          DC8 188, 114, 52, 23, 22, 3, 136, 114, 117, 43, 203, 191, 196, 203, 46
   \              0x34 0x17    
   \              0x16 0x03    
   \              0x88 0x72    
   \              0x75 0x2B    
   \              0xCB 0xBF    
   \              0xC4 0xCB    
   \              0x2E         
   \   00000326   0x97 0x29          DC8 151, 41, 108, 116, 249, 221, 192, 102, 12, 190, 109, 40, 191, 66
   \              0x6C 0x74    
   \              0xF9 0xDD    
   \              0xC0 0x66    
   \              0x0C 0xBE    
   \              0x6D 0x28    
   \              0xBF 0x42    
   \   00000334   0xED 0x86          DC8 237, 134, 10, 133, 24, 7, 214, 151, 69, 60, 71, 48, 161, 235, 12
   \              0x0A 0x85    
   \              0x18 0x07    
   \              0xD6 0x97    
   \              0x45 0x3C    
   \              0x47 0x30    
   \              0xA1 0xEB    
   \              0x0C         
   \   00000343   0x5C 0x6A          DC8 92, 106, 213, 68, 222, 159, 254, 31, 227, 216, 118, 53, 54, 104
   \              0xD5 0x44    
   \              0xDE 0x9F    
   \              0xFE 0x1F    
   \              0xE3 0xD8    
   \              0x76 0x35    
   \              0x36 0x68    
   \   00000351   0xF2 0x76          DC8 242, 118, 161, 210, 127, 241, 121, 10, 18, 130, 155, 227, 101, 212
   \              0xA1 0xD2    
   \              0x7F 0xF1    
   \              0x79 0x0A    
   \              0x12 0x82    
   \              0x9B 0xE3    
   \              0x65 0xD4    
   \   0000035F   0x5C 0xA6          DC8 92, 166, 20, 9, 14, 179, 178, 225, 247, 106, 68, 225, 101, 140, 48
   \              0x14 0x09    
   \              0x0E 0xB3    
   \              0xB2 0xE1    
   \              0xF7 0x6A    
   \              0x44 0xE1    
   \              0x65 0x8C    
   \              0x30         
   \   0000036E   0x01 0x4A          DC8 1, 74, 54, 146, 41, 20, 16, 162, 201, 201, 14, 185, 36, 5, 232, 65
   \              0x36 0x92    
   \              0x29 0x14    
   \              0x10 0xA2    
   \              0xC9 0xC9    
   \              0x0E 0xB9    
   \              0x24 0x05    
   \              0xE8 0x41    
   \   0000037E   0xC9 0xEA          DC8 201, 234, 240, 207, 0, 0
   \              0xF0 0xCF    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClientClient[644]
   \                     sslClientClient:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 128, 48, 130, 1, 233, 2, 1, 11, 48, 13, 6, 9, 42, 134
   \              0x02 0x80    
   \              0x30 0x82    
   \              0x01 0xE9    
   \              0x02 0x01    
   \              0x0B 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86         
   \   00000011   0x48 0x86          DC8 72, 134, 247, 13, 1, 1, 5, 5, 0, 48, 129, 135, 49, 11, 48, 9, 6, 3
   \              0xF7 0x0D    
   \              0x01 0x01    
   \              0x05 0x05    
   \              0x00 0x30    
   \              0x81 0x87    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \   00000023   0x55 0x04          DC8 85, 4, 6, 19, 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66
   \              0x06 0x13    
   \              0x02 0x49    
   \              0x4E 0x31    
   \              0x0C 0x30    
   \              0x0A 0x06    
   \              0x03 0x55    
   \              0x04 0x08    
   \              0x13 0x03    
   \              0x42         
   \   00000036   0x4C 0x52          DC8 76, 82, 49, 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x07 0x13    
   \              0x02 0x4B    
   \              0x41 0x31    
   \              0x11 0x30    
   \   00000048   0x0F 0x06          DC8 15, 6, 3, 85, 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49
   \              0x03 0x55    
   \              0x04 0x0A    
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31         
   \   00000059   0x0B 0x30          DC8 11, 48, 9, 6, 3, 85, 4, 11, 19, 2, 81, 65, 49, 24, 48, 22, 6, 3, 85
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x18    
   \              0x30 0x16    
   \              0x06 0x03    
   \              0x55         
   \   0000006C   0x04 0x03          DC8 4, 3, 19, 15, 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32
   \              0x13 0x0F    
   \              0x31 0x39    
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20         
   \   0000007D   0x49 0x4E          DC8 73, 78, 49, 35, 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1
   \              0x31 0x23    
   \              0x30 0x21    
   \              0x06 0x09    
   \              0x2A 0x86    
   \              0x48 0x86    
   \              0xF7 0x0D    
   \              0x01 0x09    
   \              0x01         
   \   0000008E   0x16 0x14          DC8 22, 20, 115, 117, 112, 112, 111, 114, 116, 64, 103, 97, 105, 110
   \              0x73 0x75    
   \              0x70 0x70    
   \              0x6F 0x72    
   \              0x74 0x40    
   \              0x67 0x61    
   \              0x69 0x6E    
   \   0000009C   0x73 0x70          DC8 115, 112, 97, 110, 46, 99, 111, 109, 48, 30, 23, 13, 49, 50, 48, 54
   \              0x61 0x6E    
   \              0x2E 0x63    
   \              0x6F 0x6D    
   \              0x30 0x1E    
   \              0x17 0x0D    
   \              0x31 0x32    
   \              0x30 0x36    
   \   000000AC   0x31 0x33          DC8 49, 51, 49, 50, 51, 57, 51, 51, 90, 23, 13, 49, 51, 48, 54, 49, 51
   \              0x31 0x32    
   \              0x33 0x39    
   \              0x33 0x33    
   \              0x5A 0x17    
   \              0x0D 0x31    
   \              0x33 0x30    
   \              0x36 0x31    
   \              0x33         
   \   000000BD   0x31 0x32          DC8 49, 50, 51, 57, 51, 51, 90, 48, 129, 136, 49, 11, 48, 9, 6, 3, 85
   \              0x33 0x39    
   \              0x33 0x33    
   \              0x5A 0x30    
   \              0x81 0x88    
   \              0x31 0x0B    
   \              0x30 0x09    
   \              0x06 0x03    
   \              0x55         
   \   000000CE   0x04 0x06          DC8 4, 6, 19, 2, 73, 78, 49, 12, 48, 10, 6, 3, 85, 4, 8, 19, 3, 66, 76
   \              0x13 0x02    
   \              0x49 0x4E    
   \              0x31 0x0C    
   \              0x30 0x0A    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x08 0x13    
   \              0x03 0x42    
   \              0x4C         
   \   000000E1   0x52 0x31          DC8 82, 49, 11, 48, 9, 6, 3, 85, 4, 7, 19, 2, 75, 65, 49, 17, 48, 15, 6
   \              0x0B 0x30    
   \              0x09 0x06    
   \              0x03 0x55    
   \              0x04 0x07    
   \              0x13 0x02    
   \              0x4B 0x41    
   \              0x31 0x11    
   \              0x30 0x0F    
   \              0x06         
   \   000000F4   0x03 0x55          DC8 3, 85, 4, 10, 19, 8, 71, 97, 105, 110, 83, 112, 97, 110, 49, 11, 48
   \              0x04 0x0A    
   \              0x13 0x08    
   \              0x47 0x61    
   \              0x69 0x6E    
   \              0x53 0x70    
   \              0x61 0x6E    
   \              0x31 0x0B    
   \              0x30         
   \   00000105   0x09 0x06          DC8 9, 6, 3, 85, 4, 11, 19, 2, 81, 65, 49, 25, 48, 23, 6, 3, 85, 4, 3
   \              0x03 0x55    
   \              0x04 0x0B    
   \              0x13 0x02    
   \              0x51 0x41    
   \              0x31 0x19    
   \              0x30 0x17    
   \              0x06 0x03    
   \              0x55 0x04    
   \              0x03         
   \   00000118   0x13 0x10          DC8 19, 16, 49, 57, 50, 46, 49, 54, 56, 46, 50, 46, 57, 52, 32, 99, 111
   \              0x31 0x39    
   \              0x32 0x2E    
   \              0x31 0x36    
   \              0x38 0x2E    
   \              0x32 0x2E    
   \              0x39 0x34    
   \              0x20 0x63    
   \              0x6F         
   \   00000129   0x6D 0x31          DC8 109, 49, 35, 48, 33, 6, 9, 42, 134, 72, 134, 247, 13, 1, 9, 1, 22
   \              0x23 0x30    
   \              0x21 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x09 0x01    
   \              0x16         
   \   0000013A   0x14 0x73          DC8 20, 115, 117, 112, 112, 111, 114, 116, 64, 103, 97, 105, 110, 115
   \              0x75 0x70    
   \              0x70 0x6F    
   \              0x72 0x74    
   \              0x40 0x67    
   \              0x61 0x69    
   \              0x6E 0x73    
   \   00000148   0x70 0x61          DC8 112, 97, 110, 46, 99, 111, 109, 48, 129, 159, 48, 13, 6, 9, 42, 134
   \              0x6E 0x2E    
   \              0x63 0x6F    
   \              0x6D 0x30    
   \              0x81 0x9F    
   \              0x30 0x0D    
   \              0x06 0x09    
   \              0x2A 0x86    
   \   00000158   0x48 0x86          DC8 72, 134, 247, 13, 1, 1, 1, 5, 0, 3, 129, 141, 0, 48, 129, 137, 2
   \              0xF7 0x0D    
   \              0x01 0x01    
   \              0x01 0x05    
   \              0x00 0x03    
   \              0x81 0x8D    
   \              0x00 0x30    
   \              0x81 0x89    
   \              0x02         
   \   00000169   0x81 0x81          DC8 129, 129, 0, 180, 200, 83, 30, 86, 189, 203, 57, 86, 129, 230, 241
   \              0x00 0xB4    
   \              0xC8 0x53    
   \              0x1E 0x56    
   \              0xBD 0xCB    
   \              0x39 0x56    
   \              0x81 0xE6    
   \              0xF1         
   \   00000178   0xDC 0x88          DC8 220, 136, 68, 179, 194, 66, 127, 34, 190, 63, 124, 233, 37, 166
   \              0x44 0xB3    
   \              0xC2 0x42    
   \              0x7F 0x22    
   \              0xBE 0x3F    
   \              0x7C 0xE9    
   \              0x25 0xA6    
   \   00000186   0x72 0xB7          DC8 114, 183, 115, 227, 96, 149, 99, 111, 216, 202, 244, 188, 154, 14
   \              0x73 0xE3    
   \              0x60 0x95    
   \              0x63 0x6F    
   \              0xD8 0xCA    
   \              0xF4 0xBC    
   \              0x9A 0x0E    
   \   00000194   0x26 0x62          DC8 38, 98, 132, 165, 47, 222, 62, 226, 164, 9, 230, 3, 255, 41, 94, 75
   \              0x84 0xA5    
   \              0x2F 0xDE    
   \              0x3E 0xE2    
   \              0xA4 0x09    
   \              0xE6 0x03    
   \              0xFF 0x29    
   \              0x5E 0x4B    
   \   000001A4   0xCB 0x9B          DC8 203, 155, 248, 245, 139, 182, 168, 173, 90, 216, 229, 121, 67, 74
   \              0xF8 0xF5    
   \              0x8B 0xB6    
   \              0xA8 0xAD    
   \              0x5A 0xD8    
   \              0xE5 0x79    
   \              0x43 0x4A    
   \   000001B2   0xC5 0xAF          DC8 197, 175, 234, 114, 221, 75, 226, 41, 72, 251, 152, 124, 73, 203
   \              0xEA 0x72    
   \              0xDD 0x4B    
   \              0xE2 0x29    
   \              0x48 0xFB    
   \              0x98 0x7C    
   \              0x49 0xCB    
   \   000001C0   0xDC 0x42          DC8 220, 66, 82, 22, 134, 216, 92, 93, 69, 176, 230, 32, 163, 202, 113
   \              0x52 0x16    
   \              0x86 0xD8    
   \              0x5C 0x5D    
   \              0x45 0xB0    
   \              0xE6 0x20    
   \              0xA3 0xCA    
   \              0x71         
   \   000001CF   0x84 0xFE          DC8 132, 254, 104, 178, 0, 13, 234, 178, 206, 38, 114, 52, 111, 220
   \              0x68 0xB2    
   \              0x00 0x0D    
   \              0xEA 0xB2    
   \              0xCE 0x26    
   \              0x72 0x34    
   \              0x6F 0xDC    
   \   000001DD   0xC4 0x45          DC8 196, 69, 77, 27, 224, 64, 110, 28, 39, 137, 166, 208, 53, 212, 235
   \              0x4D 0x1B    
   \              0xE0 0x40    
   \              0x6E 0x1C    
   \              0x27 0x89    
   \              0xA6 0xD0    
   \              0x35 0xD4    
   \              0xEB         
   \   000001EC   0x02 0x03          DC8 2, 3, 1, 0, 1, 48, 13, 6, 9, 42, 134, 72, 134, 247, 13, 1, 1, 5, 5
   \              0x01 0x00    
   \              0x01 0x30    
   \              0x0D 0x06    
   \              0x09 0x2A    
   \              0x86 0x48    
   \              0x86 0xF7    
   \              0x0D 0x01    
   \              0x01 0x05    
   \              0x05         
   \   000001FF   0x00 0x03          DC8 0, 3, 129, 129, 0, 124, 233, 239, 212, 81, 250, 167, 168, 207, 10
   \              0x81 0x81    
   \              0x00 0x7C    
   \              0xE9 0xEF    
   \              0xD4 0x51    
   \              0xFA 0xA7    
   \              0xA8 0xCF    
   \              0x0A         
   \   0000020E   0x24 0x0F          DC8 36, 15, 175, 193, 204, 6, 195, 118, 169, 59, 24, 142, 188, 240, 141
   \              0xAF 0xC1    
   \              0xCC 0x06    
   \              0xC3 0x76    
   \              0xA9 0x3B    
   \              0x18 0x8E    
   \              0xBC 0xF0    
   \              0x8D         
   \   0000021D   0xF6 0x5C          DC8 246, 92, 86, 157, 73, 200, 107, 245, 1, 140, 52, 121, 67, 58, 31
   \              0x56 0x9D    
   \              0x49 0xC8    
   \              0x6B 0xF5    
   \              0x01 0x8C    
   \              0x34 0x79    
   \              0x43 0x3A    
   \              0x1F         
   \   0000022C   0xA9 0xB0          DC8 169, 176, 155, 110, 153, 46, 107, 66, 118, 234, 68, 115, 186, 171
   \              0x9B 0x6E    
   \              0x99 0x2E    
   \              0x6B 0x42    
   \              0x76 0xEA    
   \              0x44 0x73    
   \              0xBA 0xAB    
   \   0000023A   0x21 0x91          DC8 33, 145, 247, 67, 61, 156, 100, 163, 237, 210, 53, 57, 132, 113, 66
   \              0xF7 0x43    
   \              0x3D 0x9C    
   \              0x64 0xA3    
   \              0xED 0xD2    
   \              0x35 0x39    
   \              0x84 0x71    
   \              0x42         
   \   00000249   0xC7 0x63          DC8 199, 99, 187, 4, 71, 114, 147, 47, 14, 238, 70, 21, 1, 207, 217
   \              0xBB 0x04    
   \              0x47 0x72    
   \              0x93 0x2F    
   \              0x0E 0xEE    
   \              0x46 0x15    
   \              0x01 0xCF    
   \              0xD9         
   \   00000258   0xD6 0x09          DC8 214, 9, 73, 8, 46, 13, 223, 144, 6, 109, 253, 109, 125, 17, 39, 158
   \              0x49 0x08    
   \              0x2E 0x0D    
   \              0xDF 0x90    
   \              0x06 0x6D    
   \              0xFD 0x6D    
   \              0x7D 0x11    
   \              0x27 0x9E    
   \   00000268   0x57 0x60          DC8 87, 96, 230, 126, 71, 21, 109, 77, 173, 102, 202, 139, 239, 116
   \              0xE6 0x7E    
   \              0x47 0x15    
   \              0x6D 0x4D    
   \              0xAD 0x66    
   \              0xCA 0x8B    
   \              0xEF 0x74    
   \   00000276   0xDB 0x1F          DC8 219, 31, 5, 115, 15, 242, 222, 17, 146, 244, 123, 186, 68, 233
   \              0x05 0x73    
   \              0x0F 0xF2    
   \              0xDE 0x11    
   \              0x92 0xF4    
   \              0x7B 0xBA    
   \              0x44 0xE9    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslClentKey[609]
   \                     sslClentKey:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 93, 2, 1, 0, 2, 129, 129, 0, 180, 200, 83, 30, 86, 189
   \              0x02 0x5D    
   \              0x02 0x01    
   \              0x00 0x02    
   \              0x81 0x81    
   \              0x00 0xB4    
   \              0xC8 0x53    
   \              0x1E 0x56    
   \              0xBD         
   \   00000011   0xCB 0x39          DC8 203, 57, 86, 129, 230, 241, 220, 136, 68, 179, 194, 66, 127, 34
   \              0x56 0x81    
   \              0xE6 0xF1    
   \              0xDC 0x88    
   \              0x44 0xB3    
   \              0xC2 0x42    
   \              0x7F 0x22    
   \   0000001F   0xBE 0x3F          DC8 190, 63, 124, 233, 37, 166, 114, 183, 115, 227, 96, 149, 99, 111
   \              0x7C 0xE9    
   \              0x25 0xA6    
   \              0x72 0xB7    
   \              0x73 0xE3    
   \              0x60 0x95    
   \              0x63 0x6F    
   \   0000002D   0xD8 0xCA          DC8 216, 202, 244, 188, 154, 14, 38, 98, 132, 165, 47, 222, 62, 226
   \              0xF4 0xBC    
   \              0x9A 0x0E    
   \              0x26 0x62    
   \              0x84 0xA5    
   \              0x2F 0xDE    
   \              0x3E 0xE2    
   \   0000003B   0xA4 0x09          DC8 164, 9, 230, 3, 255, 41, 94, 75, 203, 155, 248, 245, 139, 182, 168
   \              0xE6 0x03    
   \              0xFF 0x29    
   \              0x5E 0x4B    
   \              0xCB 0x9B    
   \              0xF8 0xF5    
   \              0x8B 0xB6    
   \              0xA8         
   \   0000004A   0xAD 0x5A          DC8 173, 90, 216, 229, 121, 67, 74, 197, 175, 234, 114, 221, 75, 226
   \              0xD8 0xE5    
   \              0x79 0x43    
   \              0x4A 0xC5    
   \              0xAF 0xEA    
   \              0x72 0xDD    
   \              0x4B 0xE2    
   \   00000058   0x29 0x48          DC8 41, 72, 251, 152, 124, 73, 203, 220, 66, 82, 22, 134, 216, 92, 93
   \              0xFB 0x98    
   \              0x7C 0x49    
   \              0xCB 0xDC    
   \              0x42 0x52    
   \              0x16 0x86    
   \              0xD8 0x5C    
   \              0x5D         
   \   00000067   0x45 0xB0          DC8 69, 176, 230, 32, 163, 202, 113, 132, 254, 104, 178, 0, 13, 234
   \              0xE6 0x20    
   \              0xA3 0xCA    
   \              0x71 0x84    
   \              0xFE 0x68    
   \              0xB2 0x00    
   \              0x0D 0xEA    
   \   00000075   0xB2 0xCE          DC8 178, 206, 38, 114, 52, 111, 220, 196, 69, 77, 27, 224, 64, 110, 28
   \              0x26 0x72    
   \              0x34 0x6F    
   \              0xDC 0xC4    
   \              0x45 0x4D    
   \              0x1B 0xE0    
   \              0x40 0x6E    
   \              0x1C         
   \   00000084   0x27 0x89          DC8 39, 137, 166, 208, 53, 212, 235, 2, 3, 1, 0, 1, 2, 129, 129, 0, 141
   \              0xA6 0xD0    
   \              0x35 0xD4    
   \              0xEB 0x02    
   \              0x03 0x01    
   \              0x00 0x01    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0x8D         
   \   00000095   0xE6 0x23          DC8 230, 35, 159, 207, 180, 31, 188, 252, 210, 239, 228, 110, 22, 163
   \              0x9F 0xCF    
   \              0xB4 0x1F    
   \              0xBC 0xFC    
   \              0xD2 0xEF    
   \              0xE4 0x6E    
   \              0x16 0xA3    
   \   000000A3   0xDE 0x79          DC8 222, 121, 31, 90, 205, 121, 137, 57, 209, 131, 20, 248, 60, 89, 1
   \              0x1F 0x5A    
   \              0xCD 0x79    
   \              0x89 0x39    
   \              0xD1 0x83    
   \              0x14 0xF8    
   \              0x3C 0x59    
   \              0x01         
   \   000000B2   0x63 0x81          DC8 99, 129, 62, 208, 190, 216, 231, 106, 214, 125, 62, 209, 219, 142
   \              0x3E 0xD0    
   \              0xBE 0xD8    
   \              0xE7 0x6A    
   \              0xD6 0x7D    
   \              0x3E 0xD1    
   \              0xDB 0x8E    
   \   000000C0   0x11 0x59          DC8 17, 89, 160, 0, 163, 131, 133, 129, 35, 154, 100, 2, 152, 105, 239
   \              0xA0 0x00    
   \              0xA3 0x83    
   \              0x85 0x81    
   \              0x23 0x9A    
   \              0x64 0x02    
   \              0x98 0x69    
   \              0xEF         
   \   000000CF   0xEB 0x44          DC8 235, 68, 99, 246, 86, 241, 53, 15, 75, 19, 104, 78, 228, 25, 201, 9
   \              0x63 0xF6    
   \              0x56 0xF1    
   \              0x35 0x0F    
   \              0x4B 0x13    
   \              0x68 0x4E    
   \              0xE4 0x19    
   \              0xC9 0x09    
   \   000000DF   0xDC 0xA4          DC8 220, 164, 160, 40, 166, 171, 87, 13, 108, 79, 251, 35, 66, 138, 80
   \              0xA0 0x28    
   \              0xA6 0xAB    
   \              0x57 0x0D    
   \              0x6C 0x4F    
   \              0xFB 0x23    
   \              0x42 0x8A    
   \              0x50         
   \   000000EE   0x6A 0x29          DC8 106, 41, 238, 232, 148, 188, 33, 232, 10, 163, 124, 194, 98, 108
   \              0xEE 0xE8    
   \              0x94 0xBC    
   \              0x21 0xE8    
   \              0x0A 0xA3    
   \              0x7C 0xC2    
   \              0x62 0x6C    
   \   000000FC   0x63 0x42          DC8 99, 66, 77, 232, 230, 198, 149, 147, 82, 112, 250, 172, 179, 3, 235
   \              0x4D 0xE8    
   \              0xE6 0xC6    
   \              0x95 0x93    
   \              0x52 0x70    
   \              0xFA 0xAC    
   \              0xB3 0x03    
   \              0xEB         
   \   0000010B   0xD2 0xFD          DC8 210, 253, 125, 154, 31, 62, 18, 30, 33, 2, 65, 0, 231, 117, 25, 25
   \              0x7D 0x9A    
   \              0x1F 0x3E    
   \              0x12 0x1E    
   \              0x21 0x02    
   \              0x41 0x00    
   \              0xE7 0x75    
   \              0x19 0x19    
   \   0000011B   0xE2 0x68          DC8 226, 104, 165, 122, 139, 13, 103, 29, 209, 91, 215, 216, 132, 216
   \              0xA5 0x7A    
   \              0x8B 0x0D    
   \              0x67 0x1D    
   \              0xD1 0x5B    
   \              0xD7 0xD8    
   \              0x84 0xD8    
   \   00000129   0xFE 0xED          DC8 254, 237, 155, 59, 18, 112, 128, 9, 42, 44, 48, 76, 103, 202, 52
   \              0x9B 0x3B    
   \              0x12 0x70    
   \              0x80 0x09    
   \              0x2A 0x2C    
   \              0x30 0x4C    
   \              0x67 0xCA    
   \              0x34         
   \   00000138   0x63 0xFA          DC8 99, 250, 230, 26, 15, 2, 226, 133, 5, 32, 216, 33, 149, 46, 67, 21
   \              0xE6 0x1A    
   \              0x0F 0x02    
   \              0xE2 0x85    
   \              0x05 0x20    
   \              0xD8 0x21    
   \              0x95 0x2E    
   \              0x43 0x15    
   \   00000148   0x42 0xBA          DC8 66, 186, 101, 22, 212, 155, 77, 122, 234, 149, 160, 34, 239, 89, 81
   \              0x65 0x16    
   \              0xD4 0x9B    
   \              0x4D 0x7A    
   \              0xEA 0x95    
   \              0xA0 0x22    
   \              0xEF 0x59    
   \              0x51         
   \   00000157   0x02 0x41          DC8 2, 65, 0, 199, 243, 168, 158, 196, 62, 98, 146, 245, 112, 123, 69
   \              0x00 0xC7    
   \              0xF3 0xA8    
   \              0x9E 0xC4    
   \              0x3E 0x62    
   \              0x92 0xF5    
   \              0x70 0x7B    
   \              0x45         
   \   00000166   0xC6 0xCE          DC8 198, 206, 138, 86, 217, 26, 210, 45, 239, 218, 104, 146, 144, 185
   \              0x8A 0x56    
   \              0xD9 0x1A    
   \              0xD2 0x2D    
   \              0xEF 0xDA    
   \              0x68 0x92    
   \              0x90 0xB9    
   \   00000174   0xB4 0x6F          DC8 180, 111, 218, 77, 153, 26, 99, 187, 250, 101, 210, 217, 45, 146
   \              0xDA 0x4D    
   \              0x99 0x1A    
   \              0x63 0xBB    
   \              0xFA 0x65    
   \              0xD2 0xD9    
   \              0x2D 0x92    
   \   00000182   0x3F 0x39          DC8 63, 57, 158, 98, 241, 95, 104, 156, 174, 184, 159, 109, 37, 6, 223
   \              0x9E 0x62    
   \              0xF1 0x5F    
   \              0x68 0x9C    
   \              0xAE 0xB8    
   \              0x9F 0x6D    
   \              0x25 0x06    
   \              0xDF         
   \   00000191   0x90 0x16          DC8 144, 22, 175, 242, 233, 127, 140, 123, 123, 2, 64, 126, 67, 19, 193
   \              0xAF 0xF2    
   \              0xE9 0x7F    
   \              0x8C 0x7B    
   \              0x7B 0x02    
   \              0x40 0x7E    
   \              0x43 0x13    
   \              0xC1         
   \   000001A0   0x5A 0x10          DC8 90, 16, 42, 13, 82, 99, 170, 87, 202, 200, 166, 83, 184, 12, 195
   \              0x2A 0x0D    
   \              0x52 0x63    
   \              0xAA 0x57    
   \              0xCA 0xC8    
   \              0xA6 0x53    
   \              0xB8 0x0C    
   \              0xC3         
   \   000001AF   0xEC 0x8C          DC8 236, 140, 92, 202, 47, 82, 185, 45, 39, 83, 229, 170, 76, 213, 13
   \              0x5C 0xCA    
   \              0x2F 0x52    
   \              0xB9 0x2D    
   \              0x27 0x53    
   \              0xE5 0xAA    
   \              0x4C 0xD5    
   \              0x0D         
   \   000001BE   0xA1 0x65          DC8 161, 101, 250, 219, 43, 128, 180, 125, 218, 175, 236, 137, 251, 229
   \              0xFA 0xDB    
   \              0x2B 0x80    
   \              0xB4 0x7D    
   \              0xDA 0xAF    
   \              0xEC 0x89    
   \              0xFB 0xE5    
   \   000001CC   0x9E 0x68          DC8 158, 104, 123, 84, 0, 3, 85, 1, 12, 71, 129, 254, 12, 112, 179, 49
   \              0x7B 0x54    
   \              0x00 0x03    
   \              0x55 0x01    
   \              0x0C 0x47    
   \              0x81 0xFE    
   \              0x0C 0x70    
   \              0xB3 0x31    
   \   000001DC   0x02 0x41          DC8 2, 65, 0, 155, 175, 104, 87, 86, 77, 140, 203, 8, 55, 240, 131, 191
   \              0x00 0x9B    
   \              0xAF 0x68    
   \              0x57 0x56    
   \              0x4D 0x8C    
   \              0xCB 0x08    
   \              0x37 0xF0    
   \              0x83 0xBF    
   \   000001EC   0xEC 0x09          DC8 236, 9, 98, 221, 224, 56, 78, 116, 55, 6, 189, 55, 218, 160, 87
   \              0x62 0xDD    
   \              0xE0 0x38    
   \              0x4E 0x74    
   \              0x37 0x06    
   \              0xBD 0x37    
   \              0xDA 0xA0    
   \              0x57         
   \   000001FB   0x87 0x0E          DC8 135, 14, 108, 107, 83, 196, 133, 142, 202, 193, 54, 238, 108, 52
   \              0x6C 0x6B    
   \              0x53 0xC4    
   \              0x85 0x8E    
   \              0xCA 0xC1    
   \              0x36 0xEE    
   \              0x6C 0x34    
   \   00000209   0x1C 0xD2          DC8 28, 210, 197, 69, 152, 90, 134, 224, 81, 161, 213, 246, 168, 19
   \              0xC5 0x45    
   \              0x98 0x5A    
   \              0x86 0xE0    
   \              0x51 0xA1    
   \              0xD5 0xF6    
   \              0xA8 0x13    
   \   00000217   0xB4 0xD6          DC8 180, 214, 130, 184, 180, 11, 90, 9, 2, 64, 86, 135, 126, 158, 229
   \              0x82 0xB8    
   \              0xB4 0x0B    
   \              0x5A 0x09    
   \              0x02 0x40    
   \              0x56 0x87    
   \              0x7E 0x9E    
   \              0xE5         
   \   00000226   0x3D 0x95          DC8 61, 149, 244, 154, 62, 77, 174, 118, 245, 184, 213, 106, 190, 169
   \              0xF4 0x9A    
   \              0x3E 0x4D    
   \              0xAE 0x76    
   \              0xF5 0xB8    
   \              0xD5 0x6A    
   \              0xBE 0xA9    
   \   00000234   0xD3 0x05          DC8 211, 5, 125, 185, 214, 214, 121, 135, 248, 171, 195, 228, 39, 235
   \              0x7D 0xB9    
   \              0xD6 0xD6    
   \              0x79 0x87    
   \              0xF8 0xAB    
   \              0xC3 0xE4    
   \              0x27 0xEB    
   \   00000242   0x0B 0x92          DC8 11, 146, 107, 180, 61, 193, 171, 223, 178, 109, 63, 101, 134, 206
   \              0x6B 0xB4    
   \              0x3D 0xC1    
   \              0xAB 0xDF    
   \              0xB2 0x6D    
   \              0x3F 0x65    
   \              0x86 0xCE    
   \   00000250   0xF3 0xBB          DC8 243, 187, 69, 40, 166, 138, 56, 52, 54, 110, 229, 152, 124, 159
   \              0x45 0x28    
   \              0xA6 0x8A    
   \              0x38 0x34    
   \              0x36 0x6E    
   \              0xE5 0x98    
   \              0x7C 0x9F    
   \   0000025E   0xE0 0x6C          DC8 224, 108, 78, 0, 0, 0
   \              0x4E 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerCA[1391]
   \                     sslServerCA:
   \   00000000   0x2D 0x2D          DC8 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46         
   \   00000011   0x49 0x43          DC8 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 68, 49, 122
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x4D    
   \              0x49 0x49    
   \              0x44 0x31    
   \              0x7A         
   \   00000022   0x43 0x43          DC8 67, 67, 65, 48, 67, 103, 65, 119, 73, 66, 65, 103, 73, 74, 65, 74
   \              0x41 0x30    
   \              0x43 0x67    
   \              0x41 0x77    
   \              0x49 0x42    
   \              0x41 0x67    
   \              0x49 0x4A    
   \              0x41 0x4A    
   \   00000032   0x64 0x7A          DC8 100, 122, 118, 74, 55, 110, 77, 105, 83, 53, 77, 65, 48, 71, 67, 83
   \              0x76 0x4A    
   \              0x37 0x6E    
   \              0x4D 0x69    
   \              0x53 0x35    
   \              0x4D 0x41    
   \              0x30 0x47    
   \              0x43 0x53    
   \   00000042   0x71 0x47          DC8 113, 71, 83, 73, 98, 51, 68, 81, 69, 66, 66, 81, 85, 65, 77, 73, 71
   \              0x53 0x49    
   \              0x62 0x33    
   \              0x44 0x51    
   \              0x45 0x42    
   \              0x42 0x51    
   \              0x55 0x41    
   \              0x4D 0x49    
   \              0x47         
   \   00000053   0x6B 0x4D          DC8 107, 77, 81, 115, 119, 67, 81, 89, 68, 10, 86, 81, 81, 71, 69, 119
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51 0x59    
   \              0x44 0x0A    
   \              0x56 0x51    
   \              0x51 0x47    
   \              0x45 0x77    
   \   00000063   0x4A 0x4A          DC8 74, 74, 84, 106, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 66, 77
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x43 0x42    
   \              0x4D         
   \   00000074   0x49 0x53          DC8 73, 83, 50, 70, 121, 98, 109, 70, 48, 89, 87, 115, 120, 69, 106, 65
   \              0x32 0x46    
   \              0x79 0x62    
   \              0x6D 0x46    
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \   00000084   0x51 0x42          DC8 81, 66, 103, 78, 86, 66, 65, 99, 84, 67, 85, 74, 104, 98, 109, 100
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x63    
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x68 0x62    
   \              0x6D 0x64    
   \   00000094   0x68 0x62          DC8 104, 98, 71, 57, 121, 90, 84, 69, 82, 10, 77, 65, 56, 71, 65, 49
   \              0x47 0x39    
   \              0x79 0x5A    
   \              0x54 0x45    
   \              0x52 0x0A    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \   000000A4   0x55 0x45          DC8 85, 69, 67, 104, 77, 73, 82, 50, 70, 112, 98, 108, 78, 119, 89, 87
   \              0x43 0x68    
   \              0x4D 0x49    
   \              0x52 0x32    
   \              0x46 0x70    
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x59 0x57    
   \   000000B4   0x34 0x78          DC8 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 115, 84, 67, 48
   \              0x46 0x44    
   \              0x41 0x53    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x73 0x54    
   \              0x43 0x30    
   \   000000C4   0x56 0x75          DC8 86, 117, 90, 50, 108, 117, 90, 87, 86, 121, 97, 87, 53, 110, 77, 82
   \              0x5A 0x32    
   \              0x6C 0x75    
   \              0x5A 0x57    
   \              0x56 0x79    
   \              0x61 0x57    
   \              0x35 0x6E    
   \              0x4D 0x52    
   \   000000D4   0x67 0x77          DC8 103, 119, 70, 103, 89, 68, 86, 81, 81, 68, 10, 69, 119, 56, 120, 79
   \              0x46 0x67    
   \              0x59 0x44    
   \              0x56 0x51    
   \              0x51 0x44    
   \              0x0A 0x45    
   \              0x77 0x38    
   \              0x78 0x4F    
   \   000000E4   0x54 0x49          DC8 84, 73, 117, 77, 84, 89, 52, 76, 106, 69, 117, 79, 84, 107, 103, 83
   \              0x75 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \              0x6A 0x45    
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x67 0x53    
   \   000000F4   0x55 0x34          DC8 85, 52, 120, 75, 122, 65, 112, 66, 103, 107, 113, 104, 107, 105, 71
   \              0x78 0x4B    
   \              0x7A 0x41    
   \              0x70 0x42    
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47         
   \   00000103   0x39 0x77          DC8 57, 119, 48, 66, 67, 81, 69, 87, 72, 72, 78, 112, 89, 109, 70, 122
   \              0x30 0x42    
   \              0x43 0x51    
   \              0x45 0x57    
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \   00000113   0x61 0x58          DC8 97, 88, 77, 117, 99, 72, 86, 121, 98, 50, 104, 112, 10, 100, 69, 66
   \              0x4D 0x75    
   \              0x63 0x48    
   \              0x56 0x79    
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x0A 0x64    
   \              0x45 0x42    
   \   00000123   0x6E 0x59          DC8 110, 89, 87, 108, 117, 99, 51, 66, 104, 98, 105, 53, 106, 98, 50
   \              0x57 0x6C    
   \              0x75 0x63    
   \              0x33 0x42    
   \              0x68 0x62    
   \              0x69 0x35    
   \              0x6A 0x62    
   \              0x32         
   \   00000132   0x30 0x77          DC8 48, 119, 72, 104, 99, 78, 77, 84, 69, 119, 79, 68, 65, 48, 77, 68
   \              0x48 0x68    
   \              0x63 0x4E    
   \              0x4D 0x54    
   \              0x45 0x77    
   \              0x4F 0x44    
   \              0x41 0x30    
   \              0x4D 0x44    
   \   00000142   0x55 0x77          DC8 85, 119, 78, 106, 69, 122, 87, 104, 99, 78, 77, 84, 73, 119, 79, 68
   \              0x4E 0x6A    
   \              0x45 0x7A    
   \              0x57 0x68    
   \              0x63 0x4E    
   \              0x4D 0x54    
   \              0x49 0x77    
   \              0x4F 0x44    
   \   00000152   0x41 0x7A          DC8 65, 122, 77, 68, 85, 119, 78, 106, 69, 122, 87, 106, 67, 66, 10
   \              0x4D 0x44    
   \              0x55 0x77    
   \              0x4E 0x6A    
   \              0x45 0x7A    
   \              0x57 0x6A    
   \              0x43 0x42    
   \              0x0A         
   \   00000161   0x70 0x44          DC8 112, 68, 69, 76, 77, 65, 107, 71, 65, 49, 85, 69, 66, 104, 77, 67
   \              0x45 0x4C    
   \              0x4D 0x41    
   \              0x6B 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x42 0x68    
   \              0x4D 0x43    
   \   00000171   0x53 0x55          DC8 83, 85, 52, 120, 69, 84, 65, 80, 66, 103, 78, 86, 66, 65, 103, 84
   \              0x34 0x78    
   \              0x45 0x54    
   \              0x41 0x50    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x67 0x54    
   \   00000181   0x43 0x45          DC8 67, 69, 116, 104, 99, 109, 53, 104, 100, 71, 70, 114, 77, 82, 73
   \              0x74 0x68    
   \              0x63 0x6D    
   \              0x35 0x68    
   \              0x64 0x47    
   \              0x46 0x72    
   \              0x4D 0x52    
   \              0x49         
   \   00000190   0x77 0x45          DC8 119, 69, 65, 89, 68, 86, 81, 81, 72, 69, 119, 108, 67, 89, 87, 53
   \              0x41 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x48 0x45    
   \              0x77 0x6C    
   \              0x43 0x59    
   \              0x57 0x35    
   \   000001A0   0x6E 0x0A          DC8 110, 10, 89, 87, 120, 118, 99, 109, 85, 120, 69, 84, 65, 80, 66
   \              0x59 0x57    
   \              0x78 0x76    
   \              0x63 0x6D    
   \              0x55 0x78    
   \              0x45 0x54    
   \              0x41 0x50    
   \              0x42         
   \   000001AF   0x67 0x4E          DC8 103, 78, 86, 66, 65, 111, 84, 67, 69, 100, 104, 97, 87, 53, 84, 99
   \              0x56 0x42    
   \              0x41 0x6F    
   \              0x54 0x43    
   \              0x45 0x64    
   \              0x68 0x61    
   \              0x57 0x35    
   \              0x54 0x63    
   \   000001BF   0x47 0x46          DC8 71, 70, 117, 77, 82, 81, 119, 69, 103, 89, 68, 86, 81, 81, 76, 69
   \              0x75 0x4D    
   \              0x52 0x51    
   \              0x77 0x45    
   \              0x67 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x4C 0x45    
   \   000001CF   0x77 0x74          DC8 119, 116, 70, 98, 109, 100, 112, 98, 109, 86, 108, 99, 109, 108
   \              0x46 0x62    
   \              0x6D 0x64    
   \              0x70 0x62    
   \              0x6D 0x56    
   \              0x6C 0x63    
   \              0x6D 0x6C    
   \   000001DD   0x75 0x5A          DC8 117, 90, 122, 69, 89, 10, 77, 66, 89, 71, 65, 49, 85, 69, 65, 120
   \              0x7A 0x45    
   \              0x59 0x0A    
   \              0x4D 0x42    
   \              0x59 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x41 0x78    
   \   000001ED   0x4D 0x50          DC8 77, 80, 77, 84, 107, 121, 76, 106, 69, 50, 79, 67, 52, 120, 76, 106
   \              0x4D 0x54    
   \              0x6B 0x79    
   \              0x4C 0x6A    
   \              0x45 0x32    
   \              0x4F 0x43    
   \              0x34 0x78    
   \              0x4C 0x6A    
   \   000001FD   0x6B 0x35          DC8 107, 53, 73, 69, 108, 79, 77, 83, 115, 119, 75, 81, 89, 74, 75, 111
   \              0x49 0x45    
   \              0x6C 0x4F    
   \              0x4D 0x53    
   \              0x73 0x77    
   \              0x4B 0x51    
   \              0x59 0x4A    
   \              0x4B 0x6F    
   \   0000020D   0x5A 0x49          DC8 90, 73, 104, 118, 99, 78, 65, 81, 107, 66, 70, 104, 120, 122, 97
   \              0x68 0x76    
   \              0x63 0x4E    
   \              0x41 0x51    
   \              0x6B 0x42    
   \              0x46 0x68    
   \              0x78 0x7A    
   \              0x61         
   \   0000021C   0x57 0x4A          DC8 87, 74, 104, 99, 50, 108, 122, 10, 76, 110, 66, 49, 99, 109, 57
   \              0x68 0x63    
   \              0x32 0x6C    
   \              0x7A 0x0A    
   \              0x4C 0x6E    
   \              0x42 0x31    
   \              0x63 0x6D    
   \              0x39         
   \   0000022B   0x6F 0x61          DC8 111, 97, 88, 82, 65, 90, 50, 70, 112, 98, 110, 78, 119, 89, 87, 52
   \              0x58 0x52    
   \              0x41 0x5A    
   \              0x32 0x46    
   \              0x70 0x62    
   \              0x6E 0x4E    
   \              0x77 0x59    
   \              0x57 0x34    
   \   0000023B   0x75 0x59          DC8 117, 89, 50, 57, 116, 77, 73, 71, 102, 77, 65, 48, 71, 67, 83, 113
   \              0x32 0x39    
   \              0x74 0x4D    
   \              0x49 0x47    
   \              0x66 0x4D    
   \              0x41 0x30    
   \              0x47 0x43    
   \              0x53 0x71    
   \   0000024B   0x47 0x53          DC8 71, 83, 73, 98, 51, 68, 81, 69, 66, 65, 81, 85, 65, 65, 52, 71, 78
   \              0x49 0x62    
   \              0x33 0x44    
   \              0x51 0x45    
   \              0x42 0x41    
   \              0x51 0x55    
   \              0x41 0x41    
   \              0x34 0x47    
   \              0x4E         
   \   0000025C   0x41 0x44          DC8 65, 68, 67, 66, 105, 81, 75, 66, 10, 103, 81, 67, 49, 55, 117, 82
   \              0x43 0x42    
   \              0x69 0x51    
   \              0x4B 0x42    
   \              0x0A 0x67    
   \              0x51 0x43    
   \              0x31 0x37    
   \              0x75 0x52    
   \   0000026C   0x4E 0x2B          DC8 78, 43, 78, 98, 53, 117, 104, 73, 72, 99, 70, 97, 106, 51, 108, 114
   \              0x4E 0x62    
   \              0x35 0x75    
   \              0x68 0x49    
   \              0x48 0x63    
   \              0x46 0x61    
   \              0x6A 0x33    
   \              0x6C 0x72    
   \   0000027C   0x34 0x37          DC8 52, 55, 71, 69, 111, 116, 53, 98, 108, 70, 54, 90, 76, 81, 68, 82
   \              0x47 0x45    
   \              0x6F 0x74    
   \              0x35 0x62    
   \              0x6C 0x46    
   \              0x36 0x5A    
   \              0x4C 0x51    
   \              0x44 0x52    
   \   0000028C   0x79 0x70          DC8 121, 112, 78, 90, 70, 115, 56, 68, 98, 76, 69, 72, 66, 73, 66, 43
   \              0x4E 0x5A    
   \              0x46 0x73    
   \              0x38 0x44    
   \              0x62 0x4C    
   \              0x45 0x48    
   \              0x42 0x49    
   \              0x42 0x2B    
   \   0000029C   0x61 0x67          DC8 97, 103, 68, 67, 77, 67, 118, 100, 69, 10, 106, 106, 75, 76, 119
   \              0x44 0x43    
   \              0x4D 0x43    
   \              0x76 0x64    
   \              0x45 0x0A    
   \              0x6A 0x6A    
   \              0x4B 0x4C    
   \              0x77         
   \   000002AB   0x55 0x75          DC8 85, 117, 113, 47, 80, 80, 103, 52, 115, 83, 49, 106, 110, 121, 112
   \              0x71 0x2F    
   \              0x50 0x50    
   \              0x67 0x34    
   \              0x73 0x53    
   \              0x31 0x6A    
   \              0x6E 0x79    
   \              0x70         
   \   000002BA   0x30 0x50          DC8 48, 80, 69, 115, 80, 74, 84, 74, 118, 49, 47, 120, 76, 47, 87, 56
   \              0x45 0x73    
   \              0x50 0x4A    
   \              0x54 0x4A    
   \              0x76 0x31    
   \              0x2F 0x78    
   \              0x4C 0x2F    
   \              0x57 0x38    
   \   000002CA   0x78 0x37          DC8 120, 55, 100, 82, 88, 112, 68, 48, 67, 48, 89, 100, 52, 49, 90, 69
   \              0x64 0x52    
   \              0x58 0x70    
   \              0x44 0x30    
   \              0x43 0x30    
   \              0x59 0x64    
   \              0x34 0x31    
   \              0x5A 0x45    
   \   000002DA   0x5A 0x51          DC8 90, 81, 82, 121, 106, 119, 81, 119, 121, 106, 116, 104, 10, 50, 69
   \              0x52 0x79    
   \              0x6A 0x77    
   \              0x51 0x77    
   \              0x79 0x6A    
   \              0x74 0x68    
   \              0x0A 0x32    
   \              0x45         
   \   000002E9   0x33 0x2B          DC8 51, 43, 105, 87, 67, 54, 90, 103, 69, 97, 105, 79, 118, 53, 69, 121
   \              0x69 0x57    
   \              0x43 0x36    
   \              0x5A 0x67    
   \              0x45 0x61    
   \              0x69 0x4F    
   \              0x76 0x35    
   \              0x45 0x79    
   \   000002F9   0x46 0x36          DC8 70, 54, 71, 79, 116, 82, 82, 57, 112, 122, 84, 103, 52, 50, 121
   \              0x47 0x4F    
   \              0x74 0x52    
   \              0x52 0x39    
   \              0x70 0x7A    
   \              0x54 0x67    
   \              0x34 0x32    
   \              0x79         
   \   00000308   0x78 0x6A          DC8 120, 106, 55, 101, 70, 103, 108, 83, 120, 75, 66, 102, 119, 73, 68
   \              0x37 0x65    
   \              0x46 0x67    
   \              0x6C 0x53    
   \              0x78 0x4B    
   \              0x42 0x66    
   \              0x77 0x49    
   \              0x44         
   \   00000317   0x41 0x51          DC8 65, 81, 65, 66, 111, 52, 73, 66, 68, 84, 67, 67, 65, 81, 107, 119
   \              0x41 0x42    
   \              0x6F 0x34    
   \              0x49 0x42    
   \              0x44 0x54    
   \              0x43 0x43    
   \              0x41 0x51    
   \              0x6B 0x77    
   \   00000327   0x0A 0x48          DC8 10, 72, 81, 89, 68, 86, 82, 48, 79, 66, 66, 89, 69, 70, 67, 73, 55
   \              0x51 0x59    
   \              0x44 0x56    
   \              0x52 0x30    
   \              0x4F 0x42    
   \              0x42 0x59    
   \              0x45 0x46    
   \              0x43 0x49    
   \              0x37         
   \   00000338   0x48 0x64          DC8 72, 100, 110, 77, 109, 114, 99, 88, 105, 43, 84, 69, 115, 113, 75
   \              0x6E 0x4D    
   \              0x6D 0x72    
   \              0x63 0x58    
   \              0x69 0x2B    
   \              0x54 0x45    
   \              0x73 0x71    
   \              0x4B         
   \   00000347   0x5A 0x6A          DC8 90, 106, 76, 113, 55, 80, 117, 101, 100, 77, 73, 72, 90, 66, 103
   \              0x4C 0x71    
   \              0x37 0x50    
   \              0x75 0x65    
   \              0x64 0x4D    
   \              0x49 0x48    
   \              0x5A 0x42    
   \              0x67         
   \   00000356   0x4E 0x56          DC8 78, 86, 72, 83, 77, 69, 103, 100, 69, 119, 103, 99, 54, 65, 70, 67
   \              0x48 0x53    
   \              0x4D 0x45    
   \              0x67 0x64    
   \              0x45 0x77    
   \              0x67 0x63    
   \              0x36 0x41    
   \              0x46 0x43    
   \   00000366   0x49 0x37          DC8 73, 55, 10, 72, 100, 110, 77, 109, 114, 99, 88, 105, 43, 84, 69
   \              0x0A 0x48    
   \              0x64 0x6E    
   \              0x4D 0x6D    
   \              0x72 0x63    
   \              0x58 0x69    
   \              0x2B 0x54    
   \              0x45         
   \   00000375   0x73 0x71          DC8 115, 113, 75, 90, 106, 76, 113, 55, 80, 117, 101, 100, 111, 89, 71
   \              0x4B 0x5A    
   \              0x6A 0x4C    
   \              0x71 0x37    
   \              0x50 0x75    
   \              0x65 0x64    
   \              0x6F 0x59    
   \              0x47         
   \   00000384   0x71 0x70          DC8 113, 112, 73, 71, 110, 77, 73, 71, 107, 77, 81, 115, 119, 67, 81
   \              0x49 0x47    
   \              0x6E 0x4D    
   \              0x49 0x47    
   \              0x6B 0x4D    
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51         
   \   00000393   0x59 0x44          DC8 89, 68, 86, 81, 81, 71, 69, 119, 74, 74, 84, 106, 69, 82, 77, 65
   \              0x56 0x51    
   \              0x51 0x47    
   \              0x45 0x77    
   \              0x4A 0x4A    
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \   000003A3   0x38 0x47          DC8 56, 71, 65, 49, 85, 69, 10, 67, 66, 77, 73, 83, 50, 70, 121, 98
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x0A 0x43    
   \              0x42 0x4D    
   \              0x49 0x53    
   \              0x32 0x46    
   \              0x79 0x62    
   \   000003B3   0x6D 0x46          DC8 109, 70, 48, 89, 87, 115, 120, 69, 106, 65, 81, 66, 103, 78, 86, 66
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \              0x51 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \   000003C3   0x41 0x63          DC8 65, 99, 84, 67, 85, 74, 104, 98, 109, 100, 104, 98, 71, 57, 121, 90
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x68 0x62    
   \              0x6D 0x64    
   \              0x68 0x62    
   \              0x47 0x39    
   \              0x79 0x5A    
   \   000003D3   0x54 0x45          DC8 84, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 104, 77, 73, 82, 50
   \              0x52 0x4D    
   \              0x41 0x38    
   \              0x47 0x41    
   \              0x31 0x55    
   \              0x45 0x43    
   \              0x68 0x4D    
   \              0x49 0x52    
   \              0x32         
   \   000003E4   0x46 0x70          DC8 70, 112, 98, 108, 78, 119, 10, 89, 87, 52, 120, 70, 68, 65, 83, 66
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x0A 0x59    
   \              0x57 0x34    
   \              0x78 0x46    
   \              0x44 0x41    
   \              0x53 0x42    
   \   000003F4   0x67 0x4E          DC8 103, 78, 86, 66, 65, 115, 84, 67, 48, 86, 117, 90, 50, 108, 117, 90
   \              0x56 0x42    
   \              0x41 0x73    
   \              0x54 0x43    
   \              0x30 0x56    
   \              0x75 0x5A    
   \              0x32 0x6C    
   \              0x75 0x5A    
   \   00000404   0x57 0x56          DC8 87, 86, 121, 97, 87, 53, 110, 77, 82, 103, 119, 70, 103, 89, 68, 86
   \              0x79 0x61    
   \              0x57 0x35    
   \              0x6E 0x4D    
   \              0x52 0x67    
   \              0x77 0x46    
   \              0x67 0x59    
   \              0x44 0x56    
   \   00000414   0x51 0x51          DC8 81, 81, 68, 69, 119, 56, 120, 79, 84, 73, 117, 77, 84, 89, 52, 76
   \              0x44 0x45    
   \              0x77 0x38    
   \              0x78 0x4F    
   \              0x54 0x49    
   \              0x75 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \   00000424   0x6A 0x45          DC8 106, 69, 117, 79, 84, 107, 103, 10, 83, 85, 52, 120, 75, 122, 65
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x67 0x0A    
   \              0x53 0x55    
   \              0x34 0x78    
   \              0x4B 0x7A    
   \              0x41         
   \   00000433   0x70 0x42          DC8 112, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66, 67, 81
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47 0x39    
   \              0x77 0x30    
   \              0x42 0x43    
   \              0x51         
   \   00000442   0x45 0x57          DC8 69, 87, 72, 72, 78, 112, 89, 109, 70, 122, 97, 88, 77, 117, 99, 72
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \              0x61 0x58    
   \              0x4D 0x75    
   \              0x63 0x48    
   \   00000452   0x56 0x79          DC8 86, 121, 98, 50, 104, 112, 100, 69, 66, 110, 89, 87, 108, 117, 99
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x64 0x45    
   \              0x42 0x6E    
   \              0x59 0x57    
   \              0x6C 0x75    
   \              0x63         
   \   00000461   0x33 0x42          DC8 51, 66, 104, 98, 105, 53, 106, 98, 50, 50, 67, 10, 67, 81, 67, 88
   \              0x68 0x62    
   \              0x69 0x35    
   \              0x6A 0x62    
   \              0x32 0x32    
   \              0x43 0x0A    
   \              0x43 0x51    
   \              0x43 0x58    
   \   00000471   0x63 0x37          DC8 99, 55, 121, 101, 53, 122, 73, 107, 117, 84, 65, 77, 66, 103, 78
   \              0x79 0x65    
   \              0x35 0x7A    
   \              0x49 0x6B    
   \              0x75 0x54    
   \              0x41 0x4D    
   \              0x42 0x67    
   \              0x4E         
   \   00000480   0x56 0x48          DC8 86, 72, 82, 77, 69, 66, 84, 65, 68, 65, 81, 72, 47, 77, 65, 48, 71
   \              0x52 0x4D    
   \              0x45 0x42    
   \              0x54 0x41    
   \              0x44 0x41    
   \              0x51 0x48    
   \              0x2F 0x4D    
   \              0x41 0x30    
   \              0x47         
   \   00000491   0x43 0x53          DC8 67, 83, 113, 71, 83, 73, 98, 51, 68, 81, 69, 66, 66, 81, 85, 65, 65
   \              0x71 0x47    
   \              0x53 0x49    
   \              0x62 0x33    
   \              0x44 0x51    
   \              0x45 0x42    
   \              0x42 0x51    
   \              0x55 0x41    
   \              0x41         
   \   000004A2   0x34 0x47          DC8 52, 71, 66, 65, 76, 65, 50, 51, 80, 89, 107, 10, 70, 82, 104, 79
   \              0x42 0x41    
   \              0x4C 0x41    
   \              0x32 0x33    
   \              0x50 0x59    
   \              0x6B 0x0A    
   \              0x46 0x52    
   \              0x68 0x4F    
   \   000004B2   0x49 0x4F          DC8 73, 79, 68, 65, 43, 122, 100, 67, 107, 70, 77, 78, 82, 101, 107
   \              0x44 0x41    
   \              0x2B 0x7A    
   \              0x64 0x43    
   \              0x6B 0x46    
   \              0x4D 0x4E    
   \              0x52 0x65    
   \              0x6B         
   \   000004C1   0x65 0x6C          DC8 101, 108, 85, 66, 107, 82, 72, 78, 79, 51, 80, 80, 70, 99, 88, 120
   \              0x55 0x42    
   \              0x6B 0x52    
   \              0x48 0x4E    
   \              0x4F 0x33    
   \              0x50 0x50    
   \              0x46 0x63    
   \              0x58 0x78    
   \   000004D1   0x4A 0x54          DC8 74, 84, 117, 80, 114, 84, 100, 67, 110, 108, 57, 106, 103, 83, 80
   \              0x75 0x50    
   \              0x72 0x54    
   \              0x64 0x43    
   \              0x6E 0x6C    
   \              0x39 0x6A    
   \              0x67 0x53    
   \              0x50         
   \   000004E0   0x66 0x53          DC8 102, 83, 117, 48, 57, 82, 51, 115, 110, 75, 78, 111, 112, 122, 10
   \              0x75 0x30    
   \              0x39 0x52    
   \              0x33 0x73    
   \              0x6E 0x4B    
   \              0x4E 0x6F    
   \              0x70 0x7A    
   \              0x0A         
   \   000004EF   0x6D 0x75          DC8 109, 117, 43, 74, 83, 48, 85, 100, 109, 102, 69, 69, 54, 122, 51
   \              0x2B 0x4A    
   \              0x53 0x30    
   \              0x55 0x64    
   \              0x6D 0x66    
   \              0x45 0x45    
   \              0x36 0x7A    
   \              0x33         
   \   000004FE   0x4A 0x32          DC8 74, 50, 76, 69, 77, 65, 52, 57, 88, 100, 76, 80, 110, 119, 57, 121
   \              0x4C 0x45    
   \              0x4D 0x41    
   \              0x34 0x39    
   \              0x58 0x64    
   \              0x4C 0x50    
   \              0x6E 0x77    
   \              0x39 0x79    
   \   0000050E   0x68 0x75          DC8 104, 117, 110, 98, 99, 56, 116, 108, 75, 78, 115, 109, 84, 89, 117
   \              0x6E 0x62    
   \              0x63 0x38    
   \              0x74 0x6C    
   \              0x4B 0x4E    
   \              0x73 0x6D    
   \              0x54 0x59    
   \              0x75         
   \   0000051D   0x6C 0x4A          DC8 108, 74, 111, 50, 104, 52, 99, 98, 121, 108, 100, 65, 71, 98, 115
   \              0x6F 0x32    
   \              0x68 0x34    
   \              0x63 0x62    
   \              0x79 0x6C    
   \              0x64 0x41    
   \              0x47 0x62    
   \              0x73         
   \   0000052C   0x4B 0x55          DC8 75, 85, 103, 10, 98, 80, 73, 69, 112, 79, 116, 57, 109, 88, 102, 80
   \              0x67 0x0A    
   \              0x62 0x50    
   \              0x49 0x45    
   \              0x70 0x4F    
   \              0x74 0x39    
   \              0x6D 0x58    
   \              0x66 0x50    
   \   0000053C   0x69 0x39          DC8 105, 57, 75, 77, 117, 54, 67, 98, 121, 104, 86, 87, 55, 74, 71, 48
   \              0x4B 0x4D    
   \              0x75 0x36    
   \              0x43 0x62    
   \              0x79 0x68    
   \              0x56 0x57    
   \              0x37 0x4A    
   \              0x47 0x30    
   \   0000054C   0x4F 0x37          DC8 79, 55, 77, 119, 51, 70, 109, 76, 10, 45, 45, 45, 45, 45, 69, 78
   \              0x4D 0x77    
   \              0x33 0x46    
   \              0x6D 0x4C    
   \              0x0A 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x45 0x4E    
   \   0000055C   0x44 0x20          DC8 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45, 45
   \              0x43 0x45    
   \              0x52 0x54    
   \              0x49 0x46    
   \              0x49 0x43    
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D         
   \   0000056D   0x2D 0x0A          DC8 45, 10, 0
   \              0x00         

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerKey[610]
   \                     sslServerKey:
   \   00000000   0x30 0x82          DC8 48, 130, 2, 94, 2, 1, 0, 2, 129, 129, 0, 187, 215, 249, 190, 157
   \              0x02 0x5E    
   \              0x02 0x01    
   \              0x00 0x02    
   \              0x81 0x81    
   \              0x00 0xBB    
   \              0xD7 0xF9    
   \              0xBE 0x9D    
   \   00000010   0x4C 0x3B          DC8 76, 59, 5, 54, 159, 111, 133, 51, 46, 80, 94, 42, 125, 23, 78, 155
   \              0x05 0x36    
   \              0x9F 0x6F    
   \              0x85 0x33    
   \              0x2E 0x50    
   \              0x5E 0x2A    
   \              0x7D 0x17    
   \              0x4E 0x9B    
   \   00000020   0x5E 0x0E          DC8 94, 14, 186, 181, 235, 97, 46, 150, 79, 65, 162, 36, 121, 168, 237
   \              0xBA 0xB5    
   \              0xEB 0x61    
   \              0x2E 0x96    
   \              0x4F 0x41    
   \              0xA2 0x24    
   \              0x79 0xA8    
   \              0xED         
   \   0000002F   0xC4 0x81          DC8 196, 129, 238, 36, 254, 56, 246, 123, 78, 237, 168, 199, 98, 111
   \              0xEE 0x24    
   \              0xFE 0x38    
   \              0xF6 0x7B    
   \              0x4E 0xED    
   \              0xA8 0xC7    
   \              0x62 0x6F    
   \   0000003D   0x52 0x87          DC8 82, 135, 140, 246, 21, 166, 218, 84, 127, 79, 116, 179, 124, 155
   \              0x8C 0xF6    
   \              0x15 0xA6    
   \              0xDA 0x54    
   \              0x7F 0x4F    
   \              0x74 0xB3    
   \              0x7C 0x9B    
   \   0000004B   0x2F 0xA4          DC8 47, 164, 105, 18, 211, 208, 45, 3, 2, 96, 87, 93, 144, 225, 31, 13
   \              0x69 0x12    
   \              0xD3 0xD0    
   \              0x2D 0x03    
   \              0x02 0x60    
   \              0x57 0x5D    
   \              0x90 0xE1    
   \              0x1F 0x0D    
   \   0000005B   0xEA 0x06          DC8 234, 6, 45, 115, 209, 111, 201, 241, 151, 93, 15, 118, 1, 51, 71, 3
   \              0x2D 0x73    
   \              0xD1 0x6F    
   \              0xC9 0xF1    
   \              0x97 0x5D    
   \              0x0F 0x76    
   \              0x01 0x33    
   \              0x47 0x03    
   \   0000006B   0xAC 0x39          DC8 172, 57, 126, 114, 100, 57, 114, 88, 239, 153, 208, 190, 58, 124
   \              0x7E 0x72    
   \              0x64 0x39    
   \              0x72 0x58    
   \              0xEF 0x99    
   \              0xD0 0xBE    
   \              0x3A 0x7C    
   \   00000079   0x6B 0x45          DC8 107, 69, 30, 199, 49, 159, 49, 43, 143, 117, 56, 156, 186, 180, 35
   \              0x1E 0xC7    
   \              0x31 0x9F    
   \              0x31 0x2B    
   \              0x8F 0x75    
   \              0x38 0x9C    
   \              0xBA 0xB4    
   \              0x23         
   \   00000088   0x28 0x8B          DC8 40, 139, 131, 2, 3, 1, 0, 1, 2, 129, 129, 0, 143, 205, 32, 48, 239
   \              0x83 0x02    
   \              0x03 0x01    
   \              0x00 0x01    
   \              0x02 0x81    
   \              0x81 0x00    
   \              0x8F 0xCD    
   \              0x20 0x30    
   \              0xEF         
   \   00000099   0x84 0x5B          DC8 132, 91, 46, 123, 137, 132, 187, 72, 218, 44, 198, 89, 234, 151
   \              0x2E 0x7B    
   \              0x89 0x84    
   \              0xBB 0x48    
   \              0xDA 0x2C    
   \              0xC6 0x59    
   \              0xEA 0x97    
   \   000000A7   0x7C 0x22          DC8 124, 34, 238, 215, 129, 210, 32, 214, 173, 238, 125, 208, 54, 11
   \              0xEE 0xD7    
   \              0x81 0xD2    
   \              0x20 0xD6    
   \              0xAD 0xEE    
   \              0x7D 0xD0    
   \              0x36 0x0B    
   \   000000B5   0x8C 0x63          DC8 140, 99, 105, 90, 101, 73, 101, 98, 133, 67, 20, 84, 241, 21, 163
   \              0x69 0x5A    
   \              0x65 0x49    
   \              0x65 0x62    
   \              0x85 0x43    
   \              0x14 0x54    
   \              0xF1 0x15    
   \              0xA3         
   \   000000C4   0x45 0xD5          DC8 69, 213, 9, 46, 34, 24, 133, 172, 205, 57, 160, 152, 184, 51, 107
   \              0x09 0x2E    
   \              0x22 0x18    
   \              0x85 0xAC    
   \              0xCD 0x39    
   \              0xA0 0x98    
   \              0xB8 0x33    
   \              0x6B         
   \   000000D3   0xB0 0xA5          DC8 176, 165, 184, 205, 79, 84, 110, 89, 64, 157, 239, 147, 253, 107
   \              0xB8 0xCD    
   \              0x4F 0x54    
   \              0x6E 0x59    
   \              0x40 0x9D    
   \              0xEF 0x93    
   \              0xFD 0x6B    
   \   000000E1   0x11 0x09          DC8 17, 9, 178, 169, 14, 92, 45, 104, 70, 112, 54, 78, 21, 218, 248
   \              0xB2 0xA9    
   \              0x0E 0x5C    
   \              0x2D 0x68    
   \              0x46 0x70    
   \              0x36 0x4E    
   \              0x15 0xDA    
   \              0xF8         
   \   000000F0   0x6D 0x6B          DC8 109, 107, 224, 184, 29, 18, 177, 194, 53, 14, 148, 88, 72, 194, 187
   \              0xE0 0xB8    
   \              0x1D 0x12    
   \              0xB1 0xC2    
   \              0x35 0x0E    
   \              0x94 0x58    
   \              0x48 0xC2    
   \              0xBB         
   \   000000FF   0x95 0x49          DC8 149, 73, 217, 198, 98, 199, 149, 182, 125, 202, 233, 227, 18, 227
   \              0xD9 0xC6    
   \              0x62 0xC7    
   \              0x95 0xB6    
   \              0x7D 0xCA    
   \              0xE9 0xE3    
   \              0x12 0xE3    
   \   0000010D   0x2A 0xA0          DC8 42, 160, 161, 207, 28, 192, 113, 2, 65, 0, 228, 107, 23, 201, 164
   \              0xA1 0xCF    
   \              0x1C 0xC0    
   \              0x71 0x02    
   \              0x41 0x00    
   \              0xE4 0x6B    
   \              0x17 0xC9    
   \              0xA4         
   \   0000011C   0x63 0x50          DC8 99, 80, 98, 91, 207, 244, 255, 102, 109, 31, 206, 151, 168, 41, 110
   \              0x62 0x5B    
   \              0xCF 0xF4    
   \              0xFF 0x66    
   \              0x6D 0x1F    
   \              0xCE 0x97    
   \              0xA8 0x29    
   \              0x6E         
   \   0000012B   0x20 0x92          DC8 32, 146, 220, 23, 160, 126, 94, 188, 234, 130, 86, 217, 182, 180
   \              0xDC 0x17    
   \              0xA0 0x7E    
   \              0x5E 0xBC    
   \              0xEA 0x82    
   \              0x56 0xD9    
   \              0xB6 0xB4    
   \   00000139   0xD3 0xE8          DC8 211, 232, 116, 221, 108, 201, 100, 133, 222, 217, 176, 85, 118, 176
   \              0x74 0xDD    
   \              0x6C 0xC9    
   \              0x64 0x85    
   \              0xDE 0xD9    
   \              0xB0 0x55    
   \              0x76 0xB0    
   \   00000147   0xE7 0x04          DC8 231, 4, 193, 3, 204, 178, 226, 200, 214, 44, 138, 70, 50, 192, 214
   \              0xC1 0x03    
   \              0xCC 0xB2    
   \              0xE2 0xC8    
   \              0xD6 0x2C    
   \              0x8A 0x46    
   \              0x32 0xC0    
   \              0xD6         
   \   00000156   0x89 0x02          DC8 137, 2, 65, 0, 210, 134, 161, 149, 130, 176, 182, 72, 53, 10, 159
   \              0x41 0x00    
   \              0xD2 0x86    
   \              0xA1 0x95    
   \              0x82 0xB0    
   \              0xB6 0x48    
   \              0x35 0x0A    
   \              0x9F         
   \   00000165   0x0D 0x6E          DC8 13, 110, 217, 183, 179, 113, 20, 82, 209, 37, 201, 232, 207, 184
   \              0xD9 0xB7    
   \              0xB3 0x71    
   \              0x14 0x52    
   \              0xD1 0x25    
   \              0xC9 0xE8    
   \              0xCF 0xB8    
   \   00000173   0xD5 0x0F          DC8 213, 15, 192, 94, 51, 171, 122, 128, 252, 184, 69, 48, 117, 120
   \              0xC0 0x5E    
   \              0x33 0xAB    
   \              0x7A 0x80    
   \              0xFC 0xB8    
   \              0x45 0x30    
   \              0x75 0x78    
   \   00000181   0x9F 0xB7          DC8 159, 183, 194, 198, 226, 27, 207, 40, 227, 49, 249, 207, 245, 251
   \              0xC2 0xC6    
   \              0xE2 0x1B    
   \              0xCF 0x28    
   \              0xE3 0x31    
   \              0xF9 0xCF    
   \              0xF5 0xFB    
   \   0000018F   0x26 0xBB          DC8 38, 187, 148, 62, 62, 68, 81, 36, 63, 206, 171, 2, 65, 0, 179, 199
   \              0x94 0x3E    
   \              0x3E 0x44    
   \              0x51 0x24    
   \              0x3F 0xCE    
   \              0xAB 0x02    
   \              0x41 0x00    
   \              0xB3 0xC7    
   \   0000019F   0xCE 0x9B          DC8 206, 155, 56, 181, 170, 73, 32, 54, 87, 128, 197, 159, 82, 15, 138
   \              0x38 0xB5    
   \              0xAA 0x49    
   \              0x20 0x36    
   \              0x57 0x80    
   \              0xC5 0x9F    
   \              0x52 0x0F    
   \              0x8A         
   \   000001AE   0xB2 0x22          DC8 178, 34, 153, 185, 45, 157, 233, 66, 186, 243, 218, 1, 65, 193, 21
   \              0x99 0xB9    
   \              0x2D 0x9D    
   \              0xE9 0x42    
   \              0xBA 0xF3    
   \              0xDA 0x01    
   \              0x41 0xC1    
   \              0x15         
   \   000001BD   0xEE 0x85          DC8 238, 133, 248, 219, 215, 79, 136, 22, 34, 246, 114, 230, 39, 177
   \              0xF8 0xDB    
   \              0xD7 0x4F    
   \              0x88 0x16    
   \              0x22 0xF6    
   \              0x72 0xE6    
   \              0x27 0xB1    
   \   000001CB   0xBC 0x8F          DC8 188, 143, 147, 228, 219, 254, 31, 153, 20, 130, 58, 128, 39, 253, 4
   \              0x93 0xE4    
   \              0xDB 0xFE    
   \              0x1F 0x99    
   \              0x14 0x82    
   \              0x3A 0x80    
   \              0x27 0xFD    
   \              0x04         
   \   000001DA   0x69 0x5E          DC8 105, 94, 241, 2, 64, 98, 25, 224, 115, 246, 25, 120, 103, 127, 103
   \              0xF1 0x02    
   \              0x40 0x62    
   \              0x19 0xE0    
   \              0x73 0xF6    
   \              0x19 0x78    
   \              0x67 0x7F    
   \              0x67         
   \   000001E9   0xFA 0xA3          DC8 250, 163, 220, 210, 209, 90, 105, 200, 41, 171, 82, 43, 155, 52, 40
   \              0xDC 0xD2    
   \              0xD1 0x5A    
   \              0x69 0xC8    
   \              0x29 0xAB    
   \              0x52 0x2B    
   \              0x9B 0x34    
   \              0x28         
   \   000001F8   0x92 0x08          DC8 146, 8, 44, 0, 249, 156, 223, 145, 249, 177, 184, 116, 19, 89, 105
   \              0x2C 0x00    
   \              0xF9 0x9C    
   \              0xDF 0x91    
   \              0xF9 0xB1    
   \              0xB8 0x74    
   \              0x13 0x59    
   \              0x69         
   \   00000207   0x3B 0xCD          DC8 59, 205, 36, 182, 58, 117, 55, 61, 95, 141, 100, 77, 224, 129, 181
   \              0x24 0xB6    
   \              0x3A 0x75    
   \              0x37 0x3D    
   \              0x5F 0x8D    
   \              0x64 0x4D    
   \              0xE0 0x81    
   \              0xB5         
   \   00000216   0x09 0x28          DC8 9, 40, 84, 5, 171, 181, 243, 145, 207, 2, 65, 0, 164, 195, 207, 62
   \              0x54 0x05    
   \              0xAB 0xB5    
   \              0xF3 0x91    
   \              0xCF 0x02    
   \              0x41 0x00    
   \              0xA4 0xC3    
   \              0xCF 0x3E    
   \   00000226   0x38 0x47          DC8 56, 71, 164, 117, 18, 73, 37, 202, 156, 65, 116, 28, 17, 20, 124
   \              0xA4 0x75    
   \              0x12 0x49    
   \              0x25 0xCA    
   \              0x9C 0x41    
   \              0x74 0x1C    
   \              0x11 0x14    
   \              0x7C         
   \   00000235   0x3B 0x72          DC8 59, 114, 83, 65, 199, 133, 6, 128, 115, 52, 203, 144, 42, 214, 174
   \              0x53 0x41    
   \              0xC7 0x85    
   \              0x06 0x80    
   \              0x73 0x34    
   \              0xCB 0x90    
   \              0x2A 0xD6    
   \              0xAE         
   \   00000244   0x10 0x52          DC8 16, 82, 15, 247, 103, 110, 189, 139, 148, 37, 100, 102, 84, 41, 255
   \              0x0F 0xF7    
   \              0x67 0x6E    
   \              0xBD 0x8B    
   \              0x94 0x25    
   \              0x64 0x66    
   \              0x54 0x29    
   \              0xFF         
   \   00000253   0xA4 0x77          DC8 164, 119, 189, 72, 216, 247, 128, 25, 126, 50, 226, 229, 205, 128
   \              0xBD 0x48    
   \              0xD8 0xF7    
   \              0x80 0x19    
   \              0x7E 0x32    
   \              0xE2 0xE5    
   \              0xCD 0x80    
   \   00000261   0xA3 0x00          DC8 163, 0, 0
   \              0x00         

   \                                 In section .data, align 4
   \   __absolute unsigned char sslServerServer[1001]
   \                     sslServerServer:
   \   00000000   0x2D 0x2D          DC8 45, 45, 45, 45, 45, 66, 69, 71, 73, 78, 32, 67, 69, 82, 84, 73, 70
   \              0x2D 0x2D    
   \              0x2D 0x42    
   \              0x45 0x47    
   \              0x49 0x4E    
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46         
   \   00000011   0x49 0x43          DC8 73, 67, 65, 84, 69, 45, 45, 45, 45, 45, 10, 77, 73, 73, 67, 116
   \              0x41 0x54    
   \              0x45 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x0A 0x4D    
   \              0x49 0x49    
   \              0x43 0x74    
   \   00000021   0x6A 0x43          DC8 106, 67, 67, 65, 104, 56, 67, 65, 81, 115, 119, 68, 81, 89, 74, 75
   \              0x43 0x41    
   \              0x68 0x38    
   \              0x43 0x41    
   \              0x51 0x73    
   \              0x77 0x44    
   \              0x51 0x59    
   \              0x4A 0x4B    
   \   00000031   0x6F 0x5A          DC8 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 70, 66, 81, 65, 119, 103
   \              0x49 0x68    
   \              0x76 0x63    
   \              0x4E 0x41    
   \              0x51 0x45    
   \              0x46 0x42    
   \              0x51 0x41    
   \              0x77 0x67    
   \   00000041   0x61 0x51          DC8 97, 81, 120, 67, 122, 65, 74, 66, 103, 78, 86, 66, 65, 89, 84, 65
   \              0x78 0x43    
   \              0x7A 0x41    
   \              0x4A 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x59    
   \              0x54 0x41    
   \   00000051   0x6B 0x6C          DC8 107, 108, 79, 77, 82, 69, 119, 68, 119, 89, 68, 10, 86, 81, 81, 73
   \              0x4F 0x4D    
   \              0x52 0x45    
   \              0x77 0x44    
   \              0x77 0x59    
   \              0x44 0x0A    
   \              0x56 0x51    
   \              0x51 0x49    
   \   00000061   0x45 0x77          DC8 69, 119, 104, 76, 89, 88, 74, 117, 89, 88, 82, 104, 97, 122, 69, 83
   \              0x68 0x4C    
   \              0x59 0x58    
   \              0x4A 0x75    
   \              0x59 0x58    
   \              0x52 0x68    
   \              0x61 0x7A    
   \              0x45 0x53    
   \   00000071   0x4D 0x42          DC8 77, 66, 65, 71, 65, 49, 85, 69, 66, 120, 77, 74, 81, 109, 70, 117
   \              0x41 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x42 0x78    
   \              0x4D 0x4A    
   \              0x51 0x6D    
   \              0x46 0x75    
   \   00000081   0x5A 0x32          DC8 90, 50, 70, 115, 98, 51, 74, 108, 77, 82, 69, 119, 68, 119, 89, 68
   \              0x46 0x73    
   \              0x62 0x33    
   \              0x4A 0x6C    
   \              0x4D 0x52    
   \              0x45 0x77    
   \              0x44 0x77    
   \              0x59 0x44    
   \   00000091   0x56 0x51          DC8 86, 81, 81, 75, 69, 119, 104, 72, 89, 87, 108, 117, 10, 85, 51, 66
   \              0x51 0x4B    
   \              0x45 0x77    
   \              0x68 0x48    
   \              0x59 0x57    
   \              0x6C 0x75    
   \              0x0A 0x55    
   \              0x33 0x42    
   \   000000A1   0x68 0x62          DC8 104, 98, 106, 69, 85, 77, 66, 73, 71, 65, 49, 85, 69, 67, 120, 77
   \              0x6A 0x45    
   \              0x55 0x4D    
   \              0x42 0x49    
   \              0x47 0x41    
   \              0x31 0x55    
   \              0x45 0x43    
   \              0x78 0x4D    
   \   000000B1   0x4C 0x52          DC8 76, 82, 87, 53, 110, 97, 87, 53, 108, 90, 88, 74, 112, 98, 109, 99
   \              0x57 0x35    
   \              0x6E 0x61    
   \              0x57 0x35    
   \              0x6C 0x5A    
   \              0x58 0x4A    
   \              0x70 0x62    
   \              0x6D 0x63    
   \   000000C1   0x78 0x47          DC8 120, 71, 68, 65, 87, 66, 103, 78, 86, 66, 65, 77, 84, 68, 122, 69
   \              0x44 0x41    
   \              0x57 0x42    
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x4D    
   \              0x54 0x44    
   \              0x7A 0x45    
   \   000000D1   0x35 0x4D          DC8 53, 77, 105, 52, 120, 78, 106, 103, 117, 77, 83, 52, 53, 10, 79, 83
   \              0x69 0x34    
   \              0x78 0x4E    
   \              0x6A 0x67    
   \              0x75 0x4D    
   \              0x53 0x34    
   \              0x35 0x0A    
   \              0x4F 0x53    
   \   000000E1   0x42 0x4A          DC8 66, 74, 84, 106, 69, 114, 77, 67, 107, 71, 67, 83, 113, 71, 83, 73
   \              0x54 0x6A    
   \              0x45 0x72    
   \              0x4D 0x43    
   \              0x6B 0x47    
   \              0x43 0x53    
   \              0x71 0x47    
   \              0x53 0x49    
   \   000000F1   0x62 0x33          DC8 98, 51, 68, 81, 69, 74, 65, 82, 89, 99, 99, 50, 108, 105, 89, 88
   \              0x44 0x51    
   \              0x45 0x4A    
   \              0x41 0x52    
   \              0x59 0x63    
   \              0x63 0x32    
   \              0x6C 0x69    
   \              0x59 0x58    
   \   00000101   0x4E 0x70          DC8 78, 112, 99, 121, 53, 119, 100, 88, 74, 118, 97, 71, 108, 48, 81
   \              0x63 0x79    
   \              0x35 0x77    
   \              0x64 0x58    
   \              0x4A 0x76    
   \              0x61 0x47    
   \              0x6C 0x30    
   \              0x51         
   \   00000110   0x47 0x64          DC8 71, 100, 104, 97, 87, 53, 122, 99, 71, 70, 117, 76, 109, 78, 118
   \              0x68 0x61    
   \              0x57 0x35    
   \              0x7A 0x63    
   \              0x47 0x46    
   \              0x75 0x4C    
   \              0x6D 0x4E    
   \              0x76         
   \   0000011F   0x0A 0x62          DC8 10, 98, 84, 65, 101, 70, 119, 48, 120, 77, 84, 65, 52, 77, 68, 81
   \              0x54 0x41    
   \              0x65 0x46    
   \              0x77 0x30    
   \              0x78 0x4D    
   \              0x54 0x41    
   \              0x34 0x4D    
   \              0x44 0x51    
   \   0000012F   0x77 0x4E          DC8 119, 78, 106, 77, 53, 78, 68, 86, 97, 70, 119, 48, 120, 77, 106, 65
   \              0x6A 0x4D    
   \              0x35 0x4E    
   \              0x44 0x56    
   \              0x61 0x46    
   \              0x77 0x30    
   \              0x78 0x4D    
   \              0x6A 0x41    
   \   0000013F   0x34 0x4D          DC8 52, 77, 68, 77, 119, 78, 106, 77, 53, 78, 68, 86, 97, 77, 73, 71
   \              0x44 0x4D    
   \              0x77 0x4E    
   \              0x6A 0x4D    
   \              0x35 0x4E    
   \              0x44 0x56    
   \              0x61 0x4D    
   \              0x49 0x47    
   \   0000014F   0x68 0x4D          DC8 104, 77, 81, 115, 119, 67, 81, 89, 68, 86, 81, 81, 71, 69, 119, 74
   \              0x51 0x73    
   \              0x77 0x43    
   \              0x51 0x59    
   \              0x44 0x56    
   \              0x51 0x51    
   \              0x47 0x45    
   \              0x77 0x4A    
   \   0000015F   0x4A 0x0A          DC8 74, 10, 84, 106, 69, 82, 77, 65, 56, 71, 65, 49, 85, 69, 67, 66, 77
   \              0x54 0x6A    
   \              0x45 0x52    
   \              0x4D 0x41    
   \              0x38 0x47    
   \              0x41 0x31    
   \              0x55 0x45    
   \              0x43 0x42    
   \              0x4D         
   \   00000170   0x49 0x53          DC8 73, 83, 50, 70, 121, 98, 109, 70, 48, 89, 87, 115, 120, 69, 106, 65
   \              0x32 0x46    
   \              0x79 0x62    
   \              0x6D 0x46    
   \              0x30 0x59    
   \              0x57 0x73    
   \              0x78 0x45    
   \              0x6A 0x41    
   \   00000180   0x51 0x42          DC8 81, 66, 103, 78, 86, 66, 65, 99, 84, 67, 85, 74, 117, 89, 87, 100
   \              0x67 0x4E    
   \              0x56 0x42    
   \              0x41 0x63    
   \              0x54 0x43    
   \              0x55 0x4A    
   \              0x75 0x59    
   \              0x57 0x64    
   \   00000190   0x68 0x62          DC8 104, 98, 71, 57, 121, 90, 84, 69, 82, 77, 65, 56, 71, 65, 49, 85
   \              0x47 0x39    
   \              0x79 0x5A    
   \              0x54 0x45    
   \              0x52 0x4D    
   \              0x41 0x38    
   \              0x47 0x41    
   \              0x31 0x55    
   \   000001A0   0x45 0x0A          DC8 69, 10, 67, 104, 77, 73, 82, 50, 70, 112, 98, 108, 78, 119, 89, 87
   \              0x43 0x68    
   \              0x4D 0x49    
   \              0x52 0x32    
   \              0x46 0x70    
   \              0x62 0x6C    
   \              0x4E 0x77    
   \              0x59 0x57    
   \   000001B0   0x34 0x78          DC8 52, 120, 70, 68, 65, 83, 66, 103, 78, 86, 66, 65, 115, 84, 67, 48
   \              0x46 0x44    
   \              0x41 0x53    
   \              0x42 0x67    
   \              0x4E 0x56    
   \              0x42 0x41    
   \              0x73 0x54    
   \              0x43 0x30    
   \   000001C0   0x56 0x75          DC8 86, 117, 90, 50, 108, 117, 90, 87, 86, 121, 97, 87, 53, 110, 77, 82
   \              0x5A 0x32    
   \              0x6C 0x75    
   \              0x5A 0x57    
   \              0x56 0x79    
   \              0x61 0x57    
   \              0x35 0x6E    
   \              0x4D 0x52    
   \   000001D0   0x55 0x77          DC8 85, 119, 69, 119, 89, 68, 86, 81, 81, 68, 69, 119, 119, 120, 79, 84
   \              0x45 0x77    
   \              0x59 0x44    
   \              0x56 0x51    
   \              0x51 0x44    
   \              0x45 0x77    
   \              0x77 0x78    
   \              0x4F 0x54    
   \   000001E0   0x49 0x75          DC8 73, 117, 10, 77, 84, 89, 52, 76, 106, 69, 117, 79, 84, 107, 120, 75
   \              0x0A 0x4D    
   \              0x54 0x59    
   \              0x34 0x4C    
   \              0x6A 0x45    
   \              0x75 0x4F    
   \              0x54 0x6B    
   \              0x78 0x4B    
   \   000001F0   0x7A 0x41          DC8 122, 65, 112, 66, 103, 107, 113, 104, 107, 105, 71, 57, 119, 48, 66
   \              0x70 0x42    
   \              0x67 0x6B    
   \              0x71 0x68    
   \              0x6B 0x69    
   \              0x47 0x39    
   \              0x77 0x30    
   \              0x42         
   \   000001FF   0x43 0x51          DC8 67, 81, 69, 87, 72, 72, 78, 112, 89, 109, 70, 122, 97, 88, 77, 117
   \              0x45 0x57    
   \              0x48 0x48    
   \              0x4E 0x70    
   \              0x59 0x6D    
   \              0x46 0x7A    
   \              0x61 0x58    
   \              0x4D 0x75    
   \   0000020F   0x63 0x48          DC8 99, 72, 86, 121, 98, 50, 104, 112, 100, 69, 66, 110, 89, 87, 108
   \              0x56 0x79    
   \              0x62 0x32    
   \              0x68 0x70    
   \              0x64 0x45    
   \              0x42 0x6E    
   \              0x59 0x57    
   \              0x6C         
   \   0000021E   0x75 0x63          DC8 117, 99, 51, 66, 104, 10, 98, 105, 53, 106, 98, 50, 48, 119, 103
   \              0x33 0x42    
   \              0x68 0x0A    
   \              0x62 0x69    
   \              0x35 0x6A    
   \              0x62 0x32    
   \              0x30 0x77    
   \              0x67         
   \   0000022D   0x5A 0x38          DC8 90, 56, 119, 68, 81, 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65
   \              0x77 0x44    
   \              0x51 0x59    
   \              0x4A 0x4B    
   \              0x6F 0x5A    
   \              0x49 0x68    
   \              0x76 0x63    
   \              0x4E 0x41    
   \   0000023D   0x51 0x45          DC8 81, 69, 66, 66, 81, 65, 68, 103, 89, 48, 65, 77, 73, 71, 74, 65
   \              0x42 0x42    
   \              0x51 0x41    
   \              0x44 0x67    
   \              0x59 0x30    
   \              0x41 0x4D    
   \              0x49 0x47    
   \              0x4A 0x41    
   \   0000024D   0x6F 0x47          DC8 111, 71, 66, 65, 76, 118, 88, 43, 98, 54, 100, 84, 68, 115, 70, 78
   \              0x42 0x41    
   \              0x4C 0x76    
   \              0x58 0x2B    
   \              0x62 0x36    
   \              0x64 0x54    
   \              0x44 0x73    
   \              0x46 0x4E    
   \   0000025D   0x70 0x39          DC8 112, 57, 118, 104, 84, 77, 117, 10, 85, 70, 52, 113, 102, 82, 100
   \              0x76 0x68    
   \              0x54 0x4D    
   \              0x75 0x0A    
   \              0x55 0x46    
   \              0x34 0x71    
   \              0x66 0x52    
   \              0x64         
   \   0000026C   0x4F 0x6D          DC8 79, 109, 49, 52, 79, 117, 114, 88, 114, 89, 83, 54, 87, 84, 48, 71
   \              0x31 0x34    
   \              0x4F 0x75    
   \              0x72 0x58    
   \              0x72 0x59    
   \              0x53 0x36    
   \              0x57 0x54    
   \              0x30 0x47    
   \   0000027C   0x69 0x4A          DC8 105, 74, 72, 109, 111, 55, 99, 83, 66, 55, 105, 84, 43, 79, 80, 90
   \              0x48 0x6D    
   \              0x6F 0x37    
   \              0x63 0x53    
   \              0x42 0x37    
   \              0x69 0x54    
   \              0x2B 0x4F    
   \              0x50 0x5A    
   \   0000028C   0x37 0x54          DC8 55, 84, 117, 50, 111, 120, 50, 74, 118, 85, 111, 101, 77, 57, 104
   \              0x75 0x32    
   \              0x6F 0x78    
   \              0x32 0x4A    
   \              0x76 0x55    
   \              0x6F 0x65    
   \              0x4D 0x39    
   \              0x68         
   \   0000029B   0x57 0x6D          DC8 87, 109, 50, 108, 82, 47, 84, 51, 83, 122, 10, 102, 74, 115, 118
   \              0x32 0x6C    
   \              0x52 0x2F    
   \              0x54 0x33    
   \              0x53 0x7A    
   \              0x0A 0x66    
   \              0x4A 0x73    
   \              0x76         
   \   000002AA   0x70 0x47          DC8 112, 71, 107, 83, 48, 57, 65, 116, 65, 119, 74, 103, 86, 49, 50, 81
   \              0x6B 0x53    
   \              0x30 0x39    
   \              0x41 0x74    
   \              0x41 0x77    
   \              0x4A 0x67    
   \              0x56 0x31    
   \              0x32 0x51    
   \   000002BA   0x34 0x52          DC8 52, 82, 56, 78, 54, 103, 89, 116, 99, 57, 70, 118, 121, 102, 71, 88
   \              0x38 0x4E    
   \              0x36 0x67    
   \              0x59 0x74    
   \              0x63 0x39    
   \              0x46 0x76    
   \              0x79 0x66    
   \              0x47 0x58    
   \   000002CA   0x58 0x51          DC8 88, 81, 57, 50, 65, 84, 78, 72, 65, 54, 119, 53, 102, 110, 74, 107
   \              0x39 0x32    
   \              0x41 0x54    
   \              0x4E 0x48    
   \              0x41 0x36    
   \              0x77 0x35    
   \              0x66 0x6E    
   \              0x4A 0x6B    
   \   000002DA   0x4F 0x58          DC8 79, 88, 74, 89, 55, 53, 110, 81, 118, 106, 112, 56, 10, 97, 48, 85
   \              0x4A 0x59    
   \              0x37 0x35    
   \              0x6E 0x51    
   \              0x76 0x6A    
   \              0x70 0x38    
   \              0x0A 0x61    
   \              0x30 0x55    
   \   000002EA   0x65 0x78          DC8 101, 120, 122, 71, 102, 77, 83, 117, 80, 100, 84, 105, 99, 117, 114
   \              0x7A 0x47    
   \              0x66 0x4D    
   \              0x53 0x75    
   \              0x50 0x64    
   \              0x54 0x69    
   \              0x63 0x75    
   \              0x72         
   \   000002F9   0x51 0x6A          DC8 81, 106, 75, 73, 117, 68, 65, 103, 77, 66, 65, 65, 69, 119, 68, 81
   \              0x4B 0x49    
   \              0x75 0x44    
   \              0x41 0x67    
   \              0x4D 0x42    
   \              0x41 0x41    
   \              0x45 0x77    
   \              0x44 0x51    
   \   00000309   0x59 0x4A          DC8 89, 74, 75, 111, 90, 73, 104, 118, 99, 78, 65, 81, 69, 70, 66, 81
   \              0x4B 0x6F    
   \              0x5A 0x49    
   \              0x68 0x76    
   \              0x63 0x4E    
   \              0x41 0x51    
   \              0x45 0x46    
   \              0x42 0x51    
   \   00000319   0x41 0x44          DC8 65, 68, 103, 89, 69, 65, 109, 122, 47, 89, 66, 77, 83, 57, 10, 72
   \              0x67 0x59    
   \              0x45 0x41    
   \              0x6D 0x7A    
   \              0x2F 0x59    
   \              0x42 0x4D    
   \              0x53 0x39    
   \              0x0A 0x48    
   \   00000329   0x6B 0x79          DC8 107, 121, 98, 121, 119, 116, 89, 43, 54, 67, 83, 73, 76, 118, 118
   \              0x62 0x79    
   \              0x77 0x74    
   \              0x59 0x2B    
   \              0x36 0x43    
   \              0x53 0x49    
   \              0x4C 0x76    
   \              0x76         
   \   00000338   0x49 0x45          DC8 73, 69, 49, 70, 73, 115, 82, 53, 72, 121, 76, 97, 55, 114, 107, 81
   \              0x31 0x46    
   \              0x49 0x73    
   \              0x52 0x35    
   \              0x48 0x79    
   \              0x4C 0x61    
   \              0x37 0x72    
   \              0x6B 0x51    
   \   00000348   0x41 0x68          DC8 65, 104, 75, 57, 69, 43, 56, 68, 87, 99, 54, 50, 90, 104, 50, 105
   \              0x4B 0x39    
   \              0x45 0x2B    
   \              0x38 0x44    
   \              0x57 0x63    
   \              0x36 0x32    
   \              0x5A 0x68    
   \              0x32 0x69    
   \   00000358   0x39 0x71          DC8 57, 113, 50, 115, 68, 67, 77, 51, 119, 51, 72, 75, 113, 81, 51, 70
   \              0x32 0x73    
   \              0x44 0x43    
   \              0x4D 0x33    
   \              0x77 0x33    
   \              0x48 0x4B    
   \              0x71 0x51    
   \              0x33 0x46    
   \   00000368   0x0A 0x52          DC8 10, 82, 84, 117, 117, 107, 49, 88, 99, 83, 107, 76, 47, 116, 115
   \              0x54 0x75    
   \              0x75 0x6B    
   \              0x31 0x58    
   \              0x63 0x53    
   \              0x6B 0x4C    
   \              0x2F 0x74    
   \              0x73         
   \   00000377   0x78 0x36          DC8 120, 54, 110, 54, 97, 99, 47, 47, 97, 84, 122, 98, 120, 102, 118
   \              0x6E 0x36    
   \              0x61 0x63    
   \              0x2F 0x2F    
   \              0x61 0x54    
   \              0x7A 0x62    
   \              0x78 0x66    
   \              0x76         
   \   00000386   0x72 0x49          DC8 114, 73, 79, 48, 68, 101, 122, 50, 108, 88, 52, 48, 97, 121, 102
   \              0x4F 0x30    
   \              0x44 0x65    
   \              0x7A 0x32    
   \              0x6C 0x58    
   \              0x34 0x30    
   \              0x61 0x79    
   \              0x66         
   \   00000395   0x70 0x65          DC8 112, 101, 119, 55, 55, 48, 78, 81, 97, 77, 116, 108, 68, 73, 67, 76
   \              0x77 0x37    
   \              0x37 0x30    
   \              0x4E 0x51    
   \              0x61 0x4D    
   \              0x74 0x6C    
   \              0x44 0x49    
   \              0x43 0x4C    
   \   000003A5   0x53 0x70          DC8 83, 112, 49, 100, 10, 74, 52, 85, 68, 51, 89, 53, 77, 116, 78, 87
   \              0x31 0x64    
   \              0x0A 0x4A    
   \              0x34 0x55    
   \              0x44 0x33    
   \              0x59 0x35    
   \              0x4D 0x74    
   \              0x4E 0x57    
   \   000003B5   0x4A 0x52          DC8 74, 82, 80, 55, 54, 99, 89, 89, 83, 99, 74, 57, 81, 102, 119, 74
   \              0x50 0x37    
   \              0x36 0x63    
   \              0x59 0x59    
   \              0x53 0x63    
   \              0x4A 0x39    
   \              0x51 0x66    
   \              0x77 0x4A    
   \   000003C5   0x4E 0x77          DC8 78, 119, 80, 81, 122, 89, 73, 48, 61, 10, 45, 45, 45, 45, 45, 69
   \              0x50 0x51    
   \              0x7A 0x59    
   \              0x49 0x30    
   \              0x3D 0x0A    
   \              0x2D 0x2D    
   \              0x2D 0x2D    
   \              0x2D 0x45    
   \   000003D5   0x4E 0x44          DC8 78, 68, 32, 67, 69, 82, 84, 73, 70, 73, 67, 65, 84, 69, 45, 45, 45
   \              0x20 0x43    
   \              0x45 0x52    
   \              0x54 0x49    
   \              0x46 0x49    
   \              0x43 0x41    
   \              0x54 0x45    
   \              0x2D 0x2D    
   \              0x2D         
   \   000003E6   0x2D 0x2D          DC8 45, 45, 10, 0, 0, 0
   \              0x0A 0x00    
   \              0x00 0x00    
     56          #include "modules/http/gsn_httpc.h"
     57          #include "parser/s2w_command.h"
     58          #include "parser/s2w_parse.h"
     59          #ifdef S2W_COAP_SUPPORT
     60          #include "modules/coap/gsn_coap.h"
     61          #include "modules/coap/gsn_coap_impl.h"
     62          #endif
     63          
     64          //#define GSN_SSL_CLIENT_SUPPORT
     65          //#define GSN_SSL_SERVER_SUPPORT
     66          #ifdef S2W_SSL_SERVER_SUPPORT
     67          #include "modules/ssl/gsn_ssl.h"
     68          #endif
     69          #if defined(S2W_DTLS_CLIENT_SUPPORT)
     70          #include "modules/dtls/gsn_dtls.h"
     71          #endif
     72          #ifdef S2W_IPv6_SUPPORT
     73          #include "Nx_icmp.h"
     74          #endif
     75          
     76          #include "mqtt_main/mqtt_main.h"
     77          /**
     78           ******************************************************************************
     79           * @file s2w_net_gainspan.c
     80           * @brief S2W Application geps interface routines.
     81           *      This file contains the s2w application specific implimentation which
     82           *      Interface the s2w command processing network stack.
     83          ******************************************************************************/
     84          
     85          
     86          /*****************************************************************************
     87            *  Public Variables
     88            *****************************************************************************/
     89          
     90          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
     91          //extern UINT32 nwConfigSuccess ;
     92          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
     93          extern S2W_PROFILE_T s2wCurrent;
     94          extern UINT8 s2wAutoConnState ;
     95          extern S2W_PROFILE_PARAMS_T profile_params;
     96          /*****************************************************************************
     97            *  Private Variables
     98            *****************************************************************************/
     99          

   \                                 In section .bss, align 4
    100          GSN_OSAL_SEM_T s2wSocketCloseSem;
   \                     s2wSocketCloseSem:
   \   00000000                      DS8 28

   \                                 In section .bss, align 4
    101          GSN_OSAL_SEM_T s2wUdpSocketCloseSem;
   \                     s2wUdpSocketCloseSem:
   \   00000000                      DS8 28
    102          
    103          #define S2W_TLS_DEFAULT_FRAGMENT_SIZE 1398
    104          #define S2W_TLS_HEADER_LENGTH 5
    105          #define S2W_TLS_CONN_ALERT_FATAL 2
    106          #define S2W_TLS_CONN_STATUS_FAIL 0
    107          #define S2W_TLS_CONN_STATUS_SUCCESS 1
    108          
    109          /* Socket descriptor value to indicate unused S2W_CID_T
    110           */
    111          
    112          /* Definitions for conType of S2W_CID_T
    113           */
    114          #define UDP 1
    115          #define TCP 2
    116          
    117          /* Timer for TCP connection timeout
    118           */
    119          //PRIVATE S2W_TIMER_T s2wTcpConnectTimer;
    120          
    121          /* Timer for UDP connection close
    122           */
    123          //PRIVATE S2W_TIMER_T s2wUdpCloseTimer;
    124          
    125          /* Event flags for TCP connection timeout
    126           */
    127          //PRIVATE GH_EFLAGS s2wTcpConnectEflags;
    128          
    129          /* Possible values for s2wTcpConnectEflags
    130           */
    131          #define CONNECT_SUCCESS  0x01
    132          #define CONNECT_FAIL     0x02
    133          #define CONNECT_TIMEOUT  0x04
    134          
    135          
    136          __no_init S2W_CID_T s2wCidList[MAX_CID_RANGE];
    137          
    138          /**
    139           * @brief Buffer to hold the recieved data.
    140           */
    141          __no_init UINT8 s2wRxBuf[S2W_RX_BUF_SIZE];
    142          
    143          /* Events to register the socket callback for
    144           */
    145          #define S2W_RXCALLBACK_FLAGS (NX_BSD_CB_TCP_RECIEVE | NX_BSD_CB_UDP_RECIEVE | NX_BSD_CB_TCP_LISTEN | NX_BSD_CB_TCP_DISCONNECT |	NX_BSD_CB_SOCKET_ERROR)
    146          //#define S2W_RXCALLBACK_FLAGS NX_BSD_CB_TCP_LISTEN
    147          /* stack for net rx task
    148           */
    149          __no_init PUBLIC UINT8 s2wNetRecvTaskStack[APP_CFG_NET_RX_STACK_SIZE];
    150          
    151          extern GSN_OSAL_QUEUE_T appMainThreadMsgQueue;
    152          #ifdef S2W_PING_TRACE
    153          extern UINT8 s2wPingStarted;
    154          #endif
    155          /* Queue for the receive task
    156           */
    157          PUBLIC GSN_OSAL_QUEUE_T s2wNetQueue;
   \                     s2wNetQueue:
   \   0000001C                      DS8 56

   \                                 In section .noinit, align 8
   \                     s2wCidList:
   \   00000000                      DS8 4736
   \                     s2wNetRecvTaskStack:
   \   00001280                      DS8 4096
    158          __no_init UINT32 s2wNetQueueBuffer[ ((APP_CFG_NET_RX_MAX_MSG_IN_MBOX) * sizeof(S2W_MSG_T)) / sizeof(UINT32)];
   \                     s2wNetQueueBuffer:
   \   00002280                      DS8 512

   \                                 In section .noinit, align 4
   \                     s2wRxBuf:
   \   00000000                      DS8 1500
    159          
    160          extern S2W_SSL_CERT_SRAM_TABLE_T s2w_ssl_cert_table[];
    161          
    162          #define GSN_MAX_NUM_CERT        8
    163          #define S2W_CERT_NAME_CA        "TLS_CA"
    164          #define S2W_CERT_NAME_CLIENT    "TLS_CLIENT"
    165          #define S2W_CERT_NAME_KEY       "TLS_KEY"
    166          
    167          #define S2W_SSL_CERT_NAME_CA        "SSL_CA"
    168          #define S2W_SSL_CERT_NAME_SERVER    "SSL_SERVER"
    169          #define S2W_SSL_CERT_NAME_KEY       "SSL_KEY"
    170          
    171          /*****************************************************************************
    172            *  Private Functions
    173            *****************************************************************************/
    174          
    175          VOID
    176          AppS2wHal_NetRecvTask(UINT32 u32Address);
    177          
    178          
    179          UINT8
    180          AppS2wHal_CidGet(VOID);
    181          
    182          UINT8
    183          AppS2wHal_CidFind(INT32 sd);
    184          
    185          PRIVATE VOID
    186          AppS2wHal_RxCallBack(INT32 sock, NX_BSD_CB_EVENT_TYPE_T flags,UINT32 port);
    187          
    188          
    189          PRIVATE UINT8
    190          AppS2wHal_NetImmediateClose(UINT8 cid);
    191          
    192          PUBLIC UINT8
    193          AppS2wHal_CidGet(VOID);
    194          
    195          PRIVATE GSN_STATUS
    196          AppS2w_SslLocalClose(UINT8 cid);
    197          
    198          PRIVATE VOID
    199          AppS2wHal_HttpCloseTimeout(VOID *unused);
    200          
    201          #ifdef S2W_HTTPC_SUPPORT
    202          PRIVATE UINT8
    203          AppS2wHal_HttpLocalClose(UINT32 cid);
    204          #endif
    205          PUBLIC GSN_STATUS 
    206          AppS2w_SslClose(UINT8 cid);
    207          
    208          #ifdef S2W_COAP_SUPPORT
    209          PUBLIC GSN_COAP_CONTEXT_T*
    210          AppS2wHal_CoapHandleGet(UINT8 cid);
    211          #endif
    212          extern GSN_HTTPC_CONF_INFO_T httpConfInfo;
    213          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypes[];
    214          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[];
    215          extern int tlsv1_client_established(struct tlsv1_client *conn);
    216          
    217          
    218          
    219          /*****************************************************************************
    220            *  Public Functions
    221            *****************************************************************************/
    222          /**
    223           ******************************************************************
    224           * @ingroup S2w-Application
    225           * @brief Get the pointer to s2wCidList entry for a given cid.
    226           *
    227           ******************************************************************/
    228          

   \                                 In section .text, align 2, keep-with-next
    229          PUBLIC S2W_CID_T*
    230          AppS2wHal_CidListElementGet(UINT8 cid)
    231          {
    232          	return (&s2wCidList[cid]);
   \                     AppS2wHal_CidListElementGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable58
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x4770             BX       LR               ;; return
    233          }
    234          /**
    235           ******************************************************************
    236           * @ingroup S2w-Application
    237           * @brief S2w udp client open function.
    238           *    This function opens a new udp client socket and store the socket info
    239           *    into the corresponding Cid list and registers any receive events on this
    240           *    socket with network stack.
    241           * @param peerData - IN the address of the data structure contain the udp server
    242           *                      info.
    243           *.@param cidNo    - IN the address to which the cid number to be stored.
    244           *.@param srcPort  - IN the source port to which the the udp client socket
    245           *                     to be bind.
    246           * @retval S2W_SUCCESS     - operation successfull.
    247           * @retval S2W_SOCKFAILURE - operation failed
    248           * @retval S2W_ENCID       - operation failed- no valid cid.
    249           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    250          PUBLIC UINT8
    251          AppS2wHal_NetUdpClient(S2W_NETDATA_T *peerData, UINT8 *cidNo, UINT16 srcPort)
    252          {
   \                     AppS2wHal_NetUdpClient:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB08D             SUB      SP,SP,#+52
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x4616             MOV      R6,R2
    253              UINT8 cid;
    254              INT32 sd,addressLength, ret;
    255          
    256              struct sockaddr_in srcAddr;
    257              struct sockaddr localAddress;
    258              
    259              /* Get free connection identifier list entry. */
    260              cid = AppS2wHal_CidGet();
   \   0000000C   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000010   0x4607             MOV      R7,R0
    261              if (cid == INVALID_CID)
   \   00000012   0x2FFF             CMP      R7,#+255
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x2004             MOVEQ    R0,#+4
    262              {
    263                  return S2W_ENCID;
   \   00000018   0xD05D             BEQ.N    ??AppS2wHal_NetUdpClient_0
    264              }
    265              /* check the node has a valid ip */
    266               //if(nwConfigSuccess != TRUE)
    267               {
    268                  // return S2W_SOCKFAILURE;
    269               }
    270          
    271              if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
   \   0000001A   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_8:
   \   0000001E   0x4680             MOV      R8,R0
   \   00000020   0xF118 0x0F01      CMN      R8,#+1
   \   00000024   0xD050             BEQ.N    ??AppS2wHal_NetUdpClient_1
    272              {
    273                  return S2W_SOCKFAILURE;
    274              }
    275              /* if a valid src port passed bind with that else leave it */
    276              if(srcPort > 0)
   \   00000026   0xB1EE             CBZ.N    R6,??AppS2wHal_NetUdpClient_2
    277              {
    278                  srcAddr.sin_family = AF_INET;
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    279                  srcAddr.sin_port = htons(srcPort);
    280                  srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    281                  if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
   \   0000002E   0x2210             MOVS     R2,#+16
   \   00000030   0x0230             LSLS     R0,R6,#+8
   \   00000032   0xEA40 0x2016      ORR      R0,R0,R6, LSR #+8
   \   00000036   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   \   0000003A   0xA904             ADD      R1,SP,#+16
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x.... 0x....      BL       ?Subroutine10
    282                  {
    283                      soc_close(sd);
    284                      return S2W_SOCKFAILURE;
    285                  }
    286              }
   \                     ??CrossCallReturnLabel_20:
   \   00000044   0xF110 0x0F01      CMN      R0,#+1
   \   00000048   0xD01A             BEQ.N    ??AppS2wHal_NetUdpClient_3
    287              else
    288              {
    289                srcAddr.sin_family = AF_INET;
    290                srcAddr.sin_port = NX_ANY_PORT;
    291                srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    292                if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
    293                {
    294                    soc_close(sd);
    295                    return S2W_SOCKFAILURE;
    296                }
    297                
    298              }
    299              
    300             
    301                
    302               
    303              /* Update the connection identifier list with the server information. */
    304              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetUdpClient_4:
   \   0000004A   0x.... 0x....      BL       ?Subroutine13
    305              s2wCidList[cid].conType = UDP;
   \                     ??CrossCallReturnLabel_29:
   \   0000004E   0x2201             MOVS     R2,#+1
   \   00000050   0xF8C5 0x801C      STR      R8,[R5, #+28]
   \   00000054   0x5442             STRB     R2,[R0, R1]
    306              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7068             STRB     R0,[R5, #+1]
    307              s2wCidList[cid].remotePort = (peerData->port);
   \   0000005A   0x8860             LDRH     R0,[R4, #+2]
   \   0000005C   0x80A8             STRH     R0,[R5, #+4]
    308              if(srcPort > 0)
   \   0000005E   0xB196             CBZ.N    R6,??AppS2wHal_NetUdpClient_5
    309              {
    310                  s2wCidList[cid].localPort = srcPort;
   \   00000060   0x806E             STRH     R6,[R5, #+2]
   \   00000062   0xE01F             B.N      ??AppS2wHal_NetUdpClient_6
    311              }
   \                     ??AppS2wHal_NetUdpClient_2:
   \   00000064   0x2002             MOVS     R0,#+2
   \   00000066   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   0000006A   0x2210             MOVS     R2,#+16
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   \   00000072   0x9005             STR      R0,[SP, #+20]
   \   00000074   0xA904             ADD      R1,SP,#+16
   \   00000076   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_19:
   \   0000007A   0xF110 0x0F01      CMN      R0,#+1
   \   0000007E   0xD1E4             BNE.N    ??AppS2wHal_NetUdpClient_4
   \                     ??AppS2wHal_NetUdpClient_3:
   \   00000080   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_24:
   \   00000084   0xE020             B.N      ??AppS2wHal_NetUdpClient_1
    312              else
    313              {
    314                 addressLength = sizeof(localAddress);
   \                     ??AppS2wHal_NetUdpClient_5:
   \   00000086   0x2010             MOVS     R0,#+16
   \   00000088   0x9001             STR      R0,[SP, #+4]
    315                 ret = getsockname(sd,&localAddress,&addressLength);
    316                 if(ret < 0)
   \   0000008A   0xAA01             ADD      R2,SP,#+4
   \   0000008C   0xA908             ADD      R1,SP,#+32
   \   0000008E   0x4640             MOV      R0,R8
   \   00000090   0x.... 0x....      BL       getsockname
   \   00000094   0x2800             CMP      R0,#+0
   \   00000096   0xD414             BMI.N    ??AppS2wHal_NetUdpClient_7
    317                 {
    318                     AppS2wHal_NetClose(cid);
    319                     return S2W_SOCKFAILURE;
    320                 }
    321                 s2wCidList[cid].localPort = htons(((struct sockaddr_in*)&localAddress)->sin_port);
   \   00000098   0xF8BD 0x0022      LDRH     R0,[SP, #+34]
   \   0000009C   0x0201             LSLS     R1,R0,#+8
   \   0000009E   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   000000A2   0x8068             STRH     R0,[R5, #+2]
    322              }
    323              
    324                memcpy(s2wCidList[cid].remoteIp,peerData->ipAddr,4);
   \                     ??AppS2wHal_NetUdpClient_6:
   \   000000A4   0x2204             MOVS     R2,#+4
   \   000000A6   0x1D21             ADDS     R1,R4,#+4
   \   000000A8   0x1DA8             ADDS     R0,R5,#+6
   \   000000AA   0x.... 0x....      BL       memcpy
    325              
    326               
    327          
    328              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    329              // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    330              
    331              struct timeval TimeOut;
    332                  TimeOut.tv_sec =  0;
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x9002             STR      R0,[SP, #+8]
    333                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    334                 // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    335                  ret = setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    336                  if(ret < 0)
   \   000000B2   0xAB02             ADD      R3,SP,#+8
   \   000000B4   0x.... 0x....      LDR.W    R0,??DataTable58_1  ;; 0x186a0
   \   000000B8   0x9003             STR      R0,[SP, #+12]
   \   000000BA   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_41:
   \   000000BE   0x2800             CMP      R0,#+0
   \   000000C0   0xD504             BPL.N    ??AppS2wHal_NetUdpClient_8
    337                  {
    338                      AppS2wHal_NetClose(cid);
   \                     ??AppS2wHal_NetUdpClient_7:
   \   000000C2   0x4638             MOV      R0,R7
   \   000000C4   0x.... 0x....      BL       AppS2wHal_NetClose
    339                      return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetUdpClient_1:
   \   000000C8   0x2003             MOVS     R0,#+3
   \   000000CA   0xE004             B.N      ??AppS2wHal_NetUdpClient_0
    340                  }
    341               
    342              /* Register the socket callback function to receive the events. */
    343              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetUdpClient_8:
   \   000000CC   0x.... 0x....      BL       ?Subroutine19
    344              *cidNo = cid;
   \                     ??CrossCallReturnLabel_43:
   \   000000D0   0xF889 0x7000      STRB     R7,[R9, #+0]
    345              return S2W_SUCCESS;
   \   000000D4   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetUdpClient_0:
   \   000000D6   0xB00D             ADD      SP,SP,#+52
   \   000000D8   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    346          
    347          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x4378             MULS     R0,R0,R7
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable58
   \   0000000A   0x1845             ADDS     R5,R0,R1
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      soc_close

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x4640             MOV      R0,R8
   \   00000002   0x.... 0x....      B.W      bind

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x2102             MOVS     R1,#+2
   \                     ??Subroutine5_0:
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      B.W      socket

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0x69E8             LDR      R0,[R5, #+28]
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable98
   \   00000006   0x223D             MOVS     R2,#+61
   \   00000008   0x.... 0x....      B.W      nx_bsd_callback_register

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x2214             MOVS     R2,#+20
   \   00000002   0x2008             MOVS     R0,#+8
   \   00000004   0x9000             STR      R0,[SP, #+0]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x69E8             LDR      R0,[R5, #+28]
   \   0000000A   0x.... 0x....      B.W      setsockopt
    348          
    349          #ifdef S2W_IPv6_SUPPORT
    350          
    351          PUBLIC UINT8
    352          AppS2wHal_NetUdpClientv6(S2W_NETDATA_T *remoteServerData, UINT8 *cidNo, UINT16 srcPort)
    353          {
    354              UINT8 cid;
    355              INT status;
    356              INT32 sd;
    357              GSN_NWIF_IP_CONFIG_T nwParams;
    358              struct sockaddr_in6 CliAddr;
    359          
    360                if ((sd = socket(AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    361                   {
    362                    return S2W_SOCKFAILURE;
    363                   }
    364          
    365               memset(&CliAddr,0,sizeof(struct sockaddr_in6));
    366               
    367              if(srcPort > 0)
    368              {
    369                
    370                  CliAddr.sin6_family = AF_INET6;
    371                  CliAddr.sin6_port = srcPort;
    372                 
    373                  GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    374                  
    375                  if(nwParams.ipv6.globalAddr)
    376                    COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(CliAddr.sin6_addr._S6_un._S6_u32));
    377                  else
    378                    COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(CliAddr.sin6_addr._S6_un._S6_u32));
    379                   GSN_IPv6_CHANGE_ENDIAN((UINT32 *)CliAddr.sin6_addr._S6_un._S6_u32);
    380                  status = bind (sd, (struct sockaddr *) &CliAddr, sizeof(CliAddr));
    381                    
    382                  if(status < 0)
    383                  {
    384                    soc_close(sd);
    385                    return S2W_SOCKFAILURE;
    386                  }
    387                  
    388              }
    389              
    390              /* Get free connection identifier list entry. */
    391              
    392              cid = AppS2wHal_CidGet();
    393              if (cid == INVALID_CID)
    394              {
    395                  return S2W_ENCID;
    396              }
    397            
    398               /* Update the connection identifier list with the server information. */
    399              
    400              s2wCidList[cid].sd = sd;
    401              s2wCidList[cid].conType = UDP;
    402              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
    403              s2wCidList[cid].remotePort = remoteServerData->port;
    404              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    405              if(srcPort > 0)
    406              {
    407                  s2wCidList[cid].localPort = remoteServerData->port;
    408              }
    409              
    410              memcpy(s2wCidList[cid].remoteIpv6,remoteServerData->ipv6Addr,16);
    411              
    412               
    413              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    414               
    415              // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    416              struct timeval TimeOut;
    417                  TimeOut.tv_sec =  0;
    418                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    419                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    420                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    421              
    422              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    423              
    424              *cidNo = cid;
    425              
    426              return S2W_SUCCESS;
    427          }
    428          
    429          PUBLIC UINT8
    430          AppS2wHal_NetUdpServerv6(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    431          {
    432            UINT8 cid;
    433            INT32 sd;
    434            struct sockaddr_in6 servAddr;
    435            GSN_NWIF_IP_CONFIG_T nwParams;
    436            
    437            cid = AppS2wHal_CidGet();
    438              if (cid == INVALID_CID)
    439              {
    440                  return S2W_ENCID;
    441              }
    442              
    443              if ((sd = socket( AF_INET6, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    444              {
    445                  return S2W_SOCKFAILURE;
    446              }
    447              memset(&servAddr,0,sizeof(struct sockaddr_in6));    
    448              servAddr.sin6_family = AF_INET6;
    449              servAddr.sin6_port = htons(serverData->port);
    450              
    451              GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    452                  
    453              if(nwParams.ipv6.globalAddr)
    454                COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    455              else
    456                COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    457              GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32);
    458               if (bind(sd,  (struct sockaddr *)&servAddr, sizeof(servAddr)) == -1)
    459              {
    460                  soc_close(sd);
    461                  return S2W_SOCKFAILURE;
    462              }
    463              
    464              s2wCidList[cid].sd = sd;
    465              s2wCidList[cid].conType = UDP;
    466              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
    467              s2wCidList[cid].localPort = serverData->port;
    468              s2wCidList[cid].remotePort = 0;
    469              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    470              memset(s2wCidList[cid].remoteIpv6,0,16);
    471          
    472               
    473               //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    474               
    475               // fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    476              
    477              struct timeval TimeOut;
    478                  TimeOut.tv_sec =  0;
    479                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    480                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    481                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    482              
    483              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    484          
    485              *cidNo = cid;
    486              
    487              return S2W_SUCCESS;
    488             
    489          }
    490          
    491          
    492          PUBLIC UINT8
    493          AppS2wHal_NetTcpClientv6(S2W_NETDATA_T *remoteServerData, UINT8 *cidNo)
    494          {
    495            
    496              UINT32 cid;
    497              INT32 sd;
    498              INT32 status;
    499              struct sockaddr_in6 destAddr;
    500              
    501              cid = AppS2wHal_CidGet();
    502              if (cid == INVALID_CID)
    503              {
    504                  return S2W_ENCID;
    505              }
    506              
    507              if ((sd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP)) == -1)
    508              {
    509                  return S2W_SOCKFAILURE;
    510              }
    511              
    512              memset(&destAddr, 0, sizeof(destAddr));
    513              
    514              destAddr.sin6_family = AF_INET6;
    515              COPY_IPV6_ADDRESS((ULONG*)remoteServerData->ipv6Addr, (ULONG *)&(destAddr.sin6_addr._S6_un._S6_u32));
    516              destAddr.sin6_port = htons(remoteServerData->port);
    517               GSN_IPv6_CHANGE_ENDIAN((UINT32 *)destAddr.sin6_addr._S6_un._S6_u32);
    518              
    519              s2wCidList[cid].sd = sd;
    520              s2wCidList[cid].conType = TCP;
    521              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
    522              s2wCidList[cid].remotePort = remoteServerData->port;
    523              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    524              
    525              memcpy(s2wCidList[cid].remoteIpv6,remoteServerData->ipv6Addr,16);
    526              
    527               
    528              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    529               
    530                
    531                
    532              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    533              
    534              status = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
    535              
    536              if (status < 0 )
    537              {
    538                  AppS2wHal_NetClose(cid);
    539                  return S2W_SOCKFAILURE;
    540              }
    541          
    542              *cidNo = cid;
    543          
    544              s2wCidList[cid].sslflag = FALSE;
    545              
    546              //fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    547              struct timeval TimeOut;
    548                  TimeOut.tv_sec =  0;
    549                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    550                  //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    551                  setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    552          
    553              return S2W_SUCCESS;
    554            
    555          }
    556          
    557          
    558          PUBLIC UINT8
    559          AppS2wHal_NetTcpServerv6(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    560          {
    561            INT32 sd;
    562            UINT8 cid;
    563            struct sockaddr_in6 servAddr;
    564            GSN_NWIF_IP_CONFIG_T nwParams;
    565          
    566            cid = AppS2wHal_CidGet();
    567            if (cid == INVALID_CID)
    568            {
    569                return S2W_ENCID;
    570            }
    571            
    572            if ((sd = socket(AF_INET6, SOCK_STREAM, IPPROTO_TCP)) == -1)
    573              {
    574                  return S2W_SOCKFAILURE;
    575              }
    576            
    577            memset(&servAddr, 0, sizeof(servAddr));
    578            
    579            servAddr.sin6_family = AF_INET6;
    580            servAddr.sin6_port = htons(serverData->port);
    581            
    582            GsnNwIf_IpConfigGet(&s2wappMainTaskCtxt->if0.nwifCtx,&nwParams);
    583                  
    584            if(nwParams.ipv6.globalAddr)
    585               COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.globalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    586            else
    587               COPY_IPV6_ADDRESS(((ULONG *)&nwParams.ipv6.linkLocalAddr), (ULONG *)&(servAddr.sin6_addr._S6_un._S6_u32));
    588               GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32);
    589              if (bind(sd, (struct sockaddr *) &servAddr, sizeof(servAddr)) ==  -1)
    590              {
    591                  soc_close(sd);
    592                  return S2W_SOCKFAILURE;
    593              }
    594              
    595                if (listen(sd, 5) < 0)
    596              {
    597                  soc_close(sd);
    598                  return S2W_SOCKFAILURE;
    599              }
    600          
    601              
    602              s2wCidList[cid].sd = sd;
    603              s2wCidList[cid].conType = TCP;
    604              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
    605              s2wCidList[cid].localPort = serverData->port;
    606              s2wCidList[cid].remotePort = 0;
    607              memset(s2wCidList[cid].remoteIpv6,0,16);
    608              s2wCidList[cid].addrType = ADDR_TYPE_IPv6;
    609              
    610               
    611              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    612              
    613              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
    614          
    615              *cidNo = cid;
    616          
    617              return S2W_SUCCESS;
    618           
    619          }
    620          
    621          
    622          
    623          #endif
    624          

   \                                 In section .text, align 2, keep-with-next
    625          PUBLIC UINT8 AppS2w_ConnModeGet(UINT8 cid)
    626          {
    627              return (s2wCidList[cid].conMode);
   \                     AppS2w_ConnModeGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable58
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x7840             LDRB     R0,[R0, #+1]
   \   0000000E   0x4770             BX       LR               ;; return
    628          }
    629          
    630          
    631          /**
    632           ******************************************************************
    633           * @ingroup S2w-Application
    634           * @brief S2w tcp client open function.
    635           *    This function opens a new tcp client socket and store the socket info
    636           *    into the corresponding Cid list and registers any receive events on this
    637           *    socket with network stack.
    638           *    This fuction tries to connect to the remote server.
    639           * @param peerData - IN the address of the data structure contain the tcp server
    640           *                      info.
    641           *.@param cidNo    - IN the address to which the cid number to be stored.
    642           * @retval S2W_SUCCESS     - operation successfull.
    643           * @retval S2W_SOCKFAILURE - operation failed
    644           * @retval S2W_ENCID       - operation failed- no valid cid
    645           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    646          PUBLIC UINT8
    647          AppS2wHal_NetTcpClient(S2W_NETDATA_T *peerData, UINT8 *cidNo)
    648          {
   \                     AppS2wHal_NetTcpClient:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine7
    649              struct sockaddr_in destAddr;
    650              UINT32 cid;
    651              INT32 sd;
    652              INT32 ret;
    653              ULONG connect_timeout =  (s2wCurrent.registers[S2W_REG_TCP_CONNECT_TIMEOUT]/100);
   \                     ??CrossCallReturnLabel_11:
   \   00000008   0x468A             MOV      R10,R1
   \   0000000A   0xB08A             SUB      SP,SP,#+40
   \   0000000C   0x2164             MOVS     R1,#+100
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x9001             STR      R0,[SP, #+4]
    654              ULONG rexTimeOut=75,retransRate=1;
   \   00000014   0x204B             MOVS     R0,#+75
   \   00000016   0x9005             STR      R0,[SP, #+20]
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x9004             STR      R0,[SP, #+16]
    655          
    656              /* get  a valid cid */
    657              cid = AppS2wHal_CidGet();
   \   0000001C   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000020   0x4607             MOV      R7,R0
    658              if (cid == INVALID_CID)
   \   00000022   0x2FFF             CMP      R7,#+255
   \   00000024   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_0
    659              {
    660          	    S2w_Printf("\r\n error 1");
   \   00000026   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 1">`
   \   0000002A   0x.... 0x....      BL       S2w_Printf
    661                  return S2W_ENCID;
   \   0000002E   0x2004             MOVS     R0,#+4
   \   00000030   0xE06F             B.N      ??AppS2wHal_NetTcpClient_1
    662              }
    663          
    664              /* open a tcp client socket */
    665              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \                     ??AppS2wHal_NetTcpClient_0:
   \   00000032   0x2200             MOVS     R2,#+0
   \   00000034   0x2101             MOVS     R1,#+1
   \   00000036   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_6:
   \   0000003A   0x4680             MOV      R8,R0
   \   0000003C   0xF118 0x0F01      CMN      R8,#+1
   \   00000040   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_2
    666              {
    667          	    S2w_Printf("\r\n error 2");
   \   00000042   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 2">`
   \   00000046   0x.... 0x....      BL       S2w_Printf
    668                  return S2W_SOCKFAILURE;
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0xE061             B.N      ??AppS2wHal_NetTcpClient_1
    669              }
    670          
    671              /** Make the socket non blocking. */
    672              //tfBlockingState(sd, TM_BLOCKING_OFF);
    673          
    674              ret = setsockopt(sd,IP_PROTOTCP,TCP_REX_TIMER_RATE,(void*)&retransRate,4);
    675              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_2:
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0xAB04             ADD      R3,SP,#+16
   \   00000054   0x222B             MOVS     R2,#+43
   \   00000056   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_26:
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_3
    676              {
    677          	    S2w_Printf("\r\n error 3");
   \   0000005E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 3">`
   \   00000062   0xE012             B.N      ??AppS2wHal_NetTcpClient_4
    678              	soc_close(sd);
    679                  return S2W_FAILURE;
    680              }
    681              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    682              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_3:
   \   00000064   0x2004             MOVS     R0,#+4
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0xAB05             ADD      R3,SP,#+20
   \   0000006A   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_28:
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_5
    683              {
    684          	    S2w_Printf("\r\n error 4");
   \   00000072   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 4">`
   \   00000076   0xE008             B.N      ??AppS2wHal_NetTcpClient_4
    685              	soc_close(sd);
    686                  return S2W_FAILURE;
    687              }
    688          
    689              ret = setsockopt(sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
    690              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_5:
   \   00000078   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_60:
   \   0000007C   0x2240             MOVS     R2,#+64
   \   0000007E   0x.... 0x....      BL       ??Subroutine12_0
   \                     ??CrossCallReturnLabel_25:
   \   00000082   0x2800             CMP      R0,#+0
   \   00000084   0xD506             BPL.N    ??AppS2wHal_NetTcpClient_6
    691              {
    692          	    S2w_Printf("\r\n error 5");
   \   00000086   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 5">`
   \                     ??AppS2wHal_NetTcpClient_4:
   \   0000008A   0x.... 0x....      BL       S2w_Printf
    693              	soc_close(sd);
   \   0000008E   0x.... 0x....      BL       ?Subroutine11
    694                  return S2W_FAILURE;
   \                     ??CrossCallReturnLabel_23:
   \   00000092   0xE027             B.N      ??AppS2wHal_NetTcpClient_7
    695              }
    696          
    697              /** Connect the socket to the server. */
    698              destAddr.sin_family = AF_INET;
   \                     ??AppS2wHal_NetTcpClient_6:
   \   00000094   0x.... 0x....      BL       ?Subroutine3
    699              destAddr.sin_port = htons(peerData->port);
    700              memcpy(&(destAddr.sin_addr.s_addr),&peerData->ipAddr,sizeof(destAddr.sin_addr.s_addr));
    701          
    702          
    703              /* register the callback for any socket events */
    704              nx_bsd_callback_register(sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_1:
   \   00000098   0x223D             MOVS     R2,#+61
   \   0000009A   0x.... 0x....      LDR.W    R1,??DataTable58_2
   \   0000009E   0x4640             MOV      R0,R8
   \   000000A0   0x.... 0x....      BL       nx_bsd_callback_register
    705          
    706              ret = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
   \   000000A4   0x2210             MOVS     R2,#+16
   \   000000A6   0xA906             ADD      R1,SP,#+24
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       connect
   \   000000AE   0x4681             MOV      R9,R0
    707               /*
    708               * Update the connection identifier list with connection information
    709               * except the type.
    710               */
    711              s2wCidList[cid].sd = sd;
   \   000000B0   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_30:
   \   000000B4   0x1D2E             ADDS     R6,R5,#+4
    712              s2wCidList[cid].conType = TCP;
   \   000000B6   0x2202             MOVS     R2,#+2
   \   000000B8   0xF8C6 0x8018      STR      R8,[R6, #+24]
   \   000000BC   0x5442             STRB     R2,[R0, R1]
    713              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
   \   000000BE   0x2007             MOVS     R0,#+7
   \   000000C0   0x7068             STRB     R0,[R5, #+1]
    714              s2wCidList[cid].remotePort = peerData->port;
    715              memcpy(s2wCidList[cid].remoteIp,(UINT8*)peerData->ipAddr,4);
   \   000000C2   0x2204             MOVS     R2,#+4
   \   000000C4   0x8860             LDRH     R0,[R4, #+2]
   \   000000C6   0x80A8             STRH     R0,[R5, #+4]
   \   000000C8   0x1D21             ADDS     R1,R4,#+4
   \   000000CA   0x1DA8             ADDS     R0,R5,#+6
   \   000000CC   0x.... 0x....      BL       memcpy
    716          
    717              if (ret < 0 )
   \   000000D0   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000D4   0xD508             BPL.N    ??AppS2wHal_NetTcpClient_8
    718              {
    719                  //S2w_Debug("connect failed: %d\r\n", tfGetSocketError(sd));
    720                  S2w_Printf("\r\n error 6");
   \   000000D6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 6">`
   \   000000DA   0x.... 0x....      BL       S2w_Printf
    721                  AppS2wHal_NetClose(cid);
   \   000000DE   0x4638             MOV      R0,R7
   \   000000E0   0x.... 0x....      BL       AppS2wHal_NetClose
    722                  return S2W_FAILURE;
   \                     ??AppS2wHal_NetTcpClient_7:
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0xE014             B.N      ??AppS2wHal_NetTcpClient_1
    723              }
    724              *cidNo = cid;
   \                     ??AppS2wHal_NetTcpClient_8:
   \   000000E8   0xF88A 0x7000      STRB     R7,[R10, #+0]
    725          	s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0x7068             STRB     R0,[R5, #+1]
    726              s2wCidList[cid].sslflag = FALSE;
   \   000000F0   0xF885 0x002C      STRB     R0,[R5, #+44]
    727          	 s2wCidList[cid].serverCid = INVALID_CID;
    728              /* reconfigure connect timeout, since we are making it non blocking */
    729              connect_timeout =5;
    730              
    731              //fcntl(sd , F_SETFL, O_NONBLOCK);
    732              struct timeval TimeOut;
    733              TimeOut.tv_sec =  0;
    734              TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    735              setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   000000F4   0xAB02             ADD      R3,SP,#+8
   \   000000F6   0x20FF             MOVS     R0,#+255
   \   000000F8   0xF885 0x002E      STRB     R0,[R5, #+46]
   \   000000FC   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_15:
   \   00000100   0x69B0             LDR      R0,[R6, #+24]
   \   00000102   0x.... 0x....      BL       setsockopt
    736              setsockopt(s2wCidList[cid].sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
   \   00000106   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_61:
   \   0000010A   0x69B0             LDR      R0,[R6, #+24]
   \   0000010C   0x.... 0x....      BL       ?Subroutine22
    737          
    738              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_51:
   \   00000110   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpClient_1:
   \   00000112   0xB00A             ADD      SP,SP,#+40
   \   00000114   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
    739          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0x2240             MOVS     R2,#+64
   \                     ??Subroutine22_0:
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x.... 0x....      B.W      setsockopt

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0x2004             MOVS     R0,#+4
   \   00000002   0x9000             STR      R0,[SP, #+0]
   \   00000004   0xAB01             ADD      R3,SP,#+4
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2214             MOVS     R2,#+20
   \   00000002   0x2005             MOVS     R0,#+5
   \   00000004   0x9001             STR      R0,[SP, #+4]
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x.... 0x....      LDR.W    R0,??DataTable58_1  ;; 0x186a0
   \   00000010   0x9003             STR      R0,[SP, #+12]
   \   00000012   0x2008             MOVS     R0,#+8
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable65
   \   00000006   0xF8B0 0x01C8      LDRH     R0,[R0, #+456]
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x2002             MOVS     R0,#+2
   \   00000002   0xF8AD 0x0018      STRH     R0,[SP, #+24]
   \   00000006   0x2204             MOVS     R2,#+4
   \   00000008   0x8860             LDRH     R0,[R4, #+2]
   \   0000000A   0x0201             LSLS     R1,R0,#+8
   \   0000000C   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000010   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   \   00000014   0x1D21             ADDS     R1,R4,#+4
   \   00000016   0xA807             ADD      R0,SP,#+28
   \   00000018   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0x2229             MOVS     R2,#+41
   \                     ??Subroutine12_0:
   \   00000002   0x2103             MOVS     R1,#+3
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      setsockopt
    740          

   \                                 In section .text, align 2, keep-with-next
    741          PUBLIC UINT8
    742          AppS2wHal_NetTcpClient_test(S2W_NETDATA_T *peerData, UINT8 *cidNo)
    743          {
   \                     AppS2wHal_NetTcpClient_test:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x.... 0x....      BL       ?Subroutine7
    744              struct sockaddr_in destAddr;
    745              UINT32 cid;
    746              INT32 sd;
    747              INT32 ret;
    748              ULONG connect_timeout =  (s2wCurrent.registers[S2W_REG_TCP_CONNECT_TIMEOUT]/100);
   \                     ??CrossCallReturnLabel_12:
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0xB08A             SUB      SP,SP,#+40
   \   0000000C   0x2164             MOVS     R1,#+100
   \   0000000E   0xFB90 0xF0F1      SDIV     R0,R0,R1
   \   00000012   0x9001             STR      R0,[SP, #+4]
    749              ULONG rexTimeOut=75,retransRate=1;
    750          
    751              /* get  a valid cid */
    752              //cid = AppS2wHal_CidGet();
    753          	cid = 0;
    754              if (cid == INVALID_CID)
    755              {
    756          	    S2w_Printf("\r\n error 1");
    757                  return S2W_ENCID;
    758              }
    759          
    760              /* open a tcp client socket */
    761              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x204B             MOVS     R0,#+75
   \   00000018   0x9005             STR      R0,[SP, #+20]
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x9004             STR      R0,[SP, #+16]
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_5:
   \   00000024   0x4606             MOV      R6,R0
   \   00000026   0xF116 0x0F01      CMN      R6,#+1
   \   0000002A   0xD105             BNE.N    ??AppS2wHal_NetTcpClient_test_0
    762              {
    763          	    S2w_Printf("\r\n error 2");
   \   0000002C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 2">`
   \   00000030   0x.... 0x....      BL       S2w_Printf
    764                  return S2W_SOCKFAILURE;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0xE060             B.N      ??AppS2wHal_NetTcpClient_test_1
    765              }
    766          
    767              /** Make the socket non blocking. */
    768              //tfBlockingState(sd, TM_BLOCKING_OFF);
    769          
    770              ret = setsockopt(sd,IP_PROTOTCP,TCP_REX_TIMER_RATE,(void*)&retransRate,4);
    771              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_0:
   \   00000038   0x2004             MOVS     R0,#+4
   \   0000003A   0x9000             STR      R0,[SP, #+0]
   \   0000003C   0xAB04             ADD      R3,SP,#+16
   \   0000003E   0x222B             MOVS     R2,#+43
   \   00000040   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_55:
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_test_2
    772              {
    773          	    S2w_Printf("\r\n error 3");
   \   00000048   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 3">`
   \   0000004C   0xE013             B.N      ??AppS2wHal_NetTcpClient_test_3
    774              	soc_close(sd);
    775                  return S2W_FAILURE;
    776              }
    777              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    778              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_2:
   \   0000004E   0x2004             MOVS     R0,#+4
   \   00000050   0x9000             STR      R0,[SP, #+0]
   \   00000052   0xAB05             ADD      R3,SP,#+20
   \   00000054   0x2229             MOVS     R2,#+41
   \   00000056   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_54:
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xD502             BPL.N    ??AppS2wHal_NetTcpClient_test_4
    779              {
    780          	    S2w_Printf("\r\n error 4");
   \   0000005E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 4">`
   \   00000062   0xE008             B.N      ??AppS2wHal_NetTcpClient_test_3
    781              	soc_close(sd);
    782                  return S2W_FAILURE;
    783              }
    784          
    785              ret = setsockopt(sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
    786              if (ret < 0 )
   \                     ??AppS2wHal_NetTcpClient_test_4:
   \   00000064   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_62:
   \   00000068   0x2240             MOVS     R2,#+64
   \   0000006A   0x.... 0x....      BL       ?Subroutine23
   \                     ??CrossCallReturnLabel_53:
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD507             BPL.N    ??AppS2wHal_NetTcpClient_test_5
    787              {
    788          	    S2w_Printf("\r\n error 5");
   \   00000072   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 5">`
   \                     ??AppS2wHal_NetTcpClient_test_3:
   \   00000076   0x.... 0x....      BL       S2w_Printf
    789              	soc_close(sd);
   \   0000007A   0x4630             MOV      R0,R6
   \   0000007C   0x.... 0x....      BL       soc_close
    790                  return S2W_FAILURE;
   \   00000080   0xE025             B.N      ??AppS2wHal_NetTcpClient_test_6
    791              }
    792          
    793              /** Connect the socket to the server. */
    794              destAddr.sin_family = AF_INET;
   \                     ??AppS2wHal_NetTcpClient_test_5:
   \   00000082   0x.... 0x....      BL       ?Subroutine3
    795              destAddr.sin_port = htons(peerData->port);
    796              memcpy(&(destAddr.sin_addr.s_addr),&peerData->ipAddr,sizeof(destAddr.sin_addr.s_addr));
    797          
    798          
    799              /* register the callback for any socket events */
    800              nx_bsd_callback_register(sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_0:
   \   00000086   0x223D             MOVS     R2,#+61
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable58_2
   \   0000008C   0x4630             MOV      R0,R6
   \   0000008E   0x.... 0x....      BL       nx_bsd_callback_register
    801          
    802              ret = connect(sd, (struct sockaddr *)&destAddr, sizeof(destAddr));
   \   00000092   0x2210             MOVS     R2,#+16
   \   00000094   0xA906             ADD      R1,SP,#+24
   \   00000096   0x4630             MOV      R0,R6
   \   00000098   0x.... 0x....      BL       connect
   \   0000009C   0x4680             MOV      R8,R0
    803               /*
    804               * Update the connection identifier list with connection information
    805               * except the type.
    806               */
    807              s2wCidList[cid].sd = sd;
   \   0000009E   0x.... 0x....      LDR.W    R7,??DataTable58
   \   000000A2   0x61FE             STR      R6,[R7, #+28]
    808              s2wCidList[cid].conType = TCP;
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x7038             STRB     R0,[R7, #+0]
    809              s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
    810              s2wCidList[cid].remotePort = peerData->port;
    811              memcpy(s2wCidList[cid].remoteIp,(UINT8*)peerData->ipAddr,4);
   \   000000A8   0x2204             MOVS     R2,#+4
   \   000000AA   0x2007             MOVS     R0,#+7
   \   000000AC   0x7078             STRB     R0,[R7, #+1]
   \   000000AE   0x1D21             ADDS     R1,R4,#+4
   \   000000B0   0x8860             LDRH     R0,[R4, #+2]
   \   000000B2   0x80B8             STRH     R0,[R7, #+4]
   \   000000B4   0x1DB8             ADDS     R0,R7,#+6
   \   000000B6   0x.... 0x....      BL       memcpy
    812          
    813              if (ret < 0 )
   \   000000BA   0xF1B8 0x0F00      CMP      R8,#+0
   \   000000BE   0xD508             BPL.N    ??AppS2wHal_NetTcpClient_test_7
    814              {
    815                  //S2w_Debug("connect failed: %d\r\n", tfGetSocketError(sd));
    816                  S2w_Printf("\r\n error 6");
   \   000000C0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n error 6">`
   \   000000C4   0x.... 0x....      BL       S2w_Printf
    817                  AppS2wHal_NetClose(cid);
   \   000000C8   0x2000             MOVS     R0,#+0
   \   000000CA   0x.... 0x....      BL       AppS2wHal_NetClose
    818                  return S2W_FAILURE;
   \                     ??AppS2wHal_NetTcpClient_test_6:
   \   000000CE   0x2001             MOVS     R0,#+1
   \   000000D0   0xE013             B.N      ??AppS2wHal_NetTcpClient_test_1
    819              }
    820              *cidNo = cid;
   \                     ??AppS2wHal_NetTcpClient_test_7:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x7028             STRB     R0,[R5, #+0]
    821          	s2wCidList[cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   000000D6   0x7078             STRB     R0,[R7, #+1]
    822              s2wCidList[cid].sslflag = FALSE;
   \   000000D8   0xF887 0x002C      STRB     R0,[R7, #+44]
    823          	 s2wCidList[cid].serverCid = INVALID_CID;
    824              /* reconfigure connect timeout, since we are making it non blocking */
    825              connect_timeout =5;
    826              
    827              //fcntl(sd , F_SETFL, O_NONBLOCK);
    828              struct timeval TimeOut;
    829              TimeOut.tv_sec =  0;
    830              TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    831              setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   000000DC   0xAB02             ADD      R3,SP,#+8
   \   000000DE   0x20FF             MOVS     R0,#+255
   \   000000E0   0xF887 0x002E      STRB     R0,[R7, #+46]
   \   000000E4   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_16:
   \   000000E8   0x69F8             LDR      R0,[R7, #+28]
   \   000000EA   0x.... 0x....      BL       setsockopt
    832              setsockopt(s2wCidList[cid].sd,IP_PROTOTCP,CONNECT_TIMEOUT_TM,(void*)&connect_timeout,4);
   \   000000EE   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_63:
   \   000000F2   0x69F8             LDR      R0,[R7, #+28]
   \   000000F4   0x.... 0x....      BL       ?Subroutine22
    833          
    834              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_50:
   \   000000F8   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpClient_test_1:
   \   000000FA   0xB00A             ADD      SP,SP,#+40
   \   000000FC   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    835          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0x2103             MOVS     R1,#+3
   \   00000002   0x4630             MOV      R0,R6
   \   00000004   0x.... 0x....      B.W      setsockopt
    836          
    837          
    838          
    839          
    840          /**
    841           ******************************************************************
    842           * @ingroup S2w-Application
    843           * @brief S2w udp server open function.
    844           *    This function opens a new udp server socket and store the socket info
    845           *    into the corresponding Cid list and registers any receive events on this
    846           *    socket with network stack.
    847           * @param serverData - IN the address of the data structure contain the udp
    848           *                     server info.
    849           *.@param cidNo      - IN the address to which the cid number to be stored.
    850           * @retval S2W_SUCCESS     - operation successfull.
    851           * @retval S2W_SOCKFAILURE - operation failed
    852           * @retval S2W_ENCID       - operation failed- no valid cid
    853           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    854          PUBLIC UINT8
    855          AppS2wHal_NetUdpServer(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    856          {
   \                     AppS2wHal_NetUdpServer:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x4606             MOV      R6,R0
   \   00000008   0x460C             MOV      R4,R1
    857              UINT8 cid;
    858              INT32 sd, ret;
    859              struct sockaddr_in srcAddr;
    860          
    861              cid = AppS2wHal_CidGet();
   \   0000000A   0x.... 0x....      BL       AppS2wHal_CidGet
   \   0000000E   0x4605             MOV      R5,R0
    862              if (cid == INVALID_CID)
   \   00000010   0x2DFF             CMP      R5,#+255
   \   00000012   0xBF08             IT       EQ 
   \   00000014   0x2004             MOVEQ    R0,#+4
    863              {
    864                  return S2W_ENCID;
   \   00000016   0xD043             BEQ.N    ??AppS2wHal_NetUdpServer_0
    865              }
    866          
    867              /* check the node has a valid ip
    868               */
    869               //if(nwConfigSuccess != TRUE)
    870               {
    871                   //return S2W_SOCKFAILURE;
    872               }
    873              /* open the udp server socket
    874               */
    875              if ((sd = socket(AF_INET, SOCK_DGRAM, 0)) == -1)
   \   00000018   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_7:
   \   0000001C   0x4680             MOV      R8,R0
   \   0000001E   0xF118 0x0F01      CMN      R8,#+1
   \   00000022   0xD037             BEQ.N    ??AppS2wHal_NetUdpServer_1
    876              {
    877                  return S2W_SOCKFAILURE;
    878              }
    879              srcAddr.sin_family = AF_INET;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    880              srcAddr.sin_port = htons(serverData->port);
    881              srcAddr.sin_addr.s_addr = 0;//htonl(INADDR_ANY);
    882          
    883              /* bind the socket with source addess
    884               */
    885              if (bind(sd, (struct sockaddr *)&srcAddr,
    886                    sizeof(srcAddr)) == -1)
   \   0000002A   0x2210             MOVS     R2,#+16
   \   0000002C   0x8870             LDRH     R0,[R6, #+2]
   \   0000002E   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_38:
   \   00000032   0xA903             ADD      R1,SP,#+12
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x9004             STR      R0,[SP, #+16]
   \   00000038   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_18:
   \   0000003C   0xF110 0x0F01      CMN      R0,#+1
   \   00000040   0xD102             BNE.N    ??AppS2wHal_NetUdpServer_2
    887              {
    888                  soc_close(sd);
   \   00000042   0x.... 0x....      BL       ?Subroutine11
    889                  return S2W_SOCKFAILURE;
   \                     ??CrossCallReturnLabel_22:
   \   00000046   0xE025             B.N      ??AppS2wHal_NetUdpServer_1
    890              }
    891          
    892              /* fill the cid list the socket parameters
    893               */
    894              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetUdpServer_2:
   \   00000048   0xF44F 0x7094      MOV      R0,#+296
   \   0000004C   0x4368             MULS     R0,R0,R5
   \   0000004E   0x.... 0x....      LDR.W    R1,??DataTable58
   \   00000052   0x1847             ADDS     R7,R0,R1
    895              s2wCidList[cid].conType = UDP;
   \   00000054   0x2201             MOVS     R2,#+1
   \   00000056   0xF8C7 0x801C      STR      R8,[R7, #+28]
   \   0000005A   0x5442             STRB     R2,[R0, R1]
    896              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
   \   0000005C   0x707A             STRB     R2,[R7, #+1]
    897              s2wCidList[cid].localPort = serverData->port;
    898              s2wCidList[cid].remotePort = 0;
    899              memset(s2wCidList[cid].remoteIp,0,4);
   \   0000005E   0x2204             MOVS     R2,#+4
   \   00000060   0x8870             LDRH     R0,[R6, #+2]
   \   00000062   0x8078             STRH     R0,[R7, #+2]
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0x2000             MOVS     R0,#+0
   \   00000068   0x80B8             STRH     R0,[R7, #+4]
   \   0000006A   0x1DB8             ADDS     R0,R7,#+6
   \   0000006C   0x.... 0x....      BL       memset
    900              
    901              
    902               
    903              // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
    904               
    905                   //    fcntl(s2wCidList[cid].sd , F_SETFL, O_NONBLOCK);
    906              struct timeval TimeOut;
    907                  TimeOut.tv_sec =  0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x9001             STR      R0,[SP, #+4]
    908                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;
    909                 // setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&TimeOut,8);
    910                  ret = setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
    911                  if(ret < 0)
   \   00000074   0xAB01             ADD      R3,SP,#+4
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable58_1  ;; 0x186a0
   \   0000007A   0x9002             STR      R0,[SP, #+8]
   \   0000007C   0x2214             MOVS     R2,#+20
   \   0000007E   0x2008             MOVS     R0,#+8
   \   00000080   0x9000             STR      R0,[SP, #+0]
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x69F8             LDR      R0,[R7, #+28]
   \   00000086   0x.... 0x....      BL       setsockopt
   \   0000008A   0x2800             CMP      R0,#+0
   \   0000008C   0xD504             BPL.N    ??AppS2wHal_NetUdpServer_3
    912                  {
    913                      AppS2wHal_NetClose(cid);
   \   0000008E   0x4628             MOV      R0,R5
   \   00000090   0x.... 0x....      BL       AppS2wHal_NetClose
    914                      return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetUdpServer_1:
   \   00000094   0x2003             MOVS     R0,#+3
   \   00000096   0xE003             B.N      ??AppS2wHal_NetUdpServer_0
    915                  }
    916          
    917            
    918                /* register the callback for any socket events
    919               */
    920              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetUdpServer_3:
   \   00000098   0x.... 0x....      BL       ?Subroutine20
    921          
    922              *cidNo = cid;
   \                     ??CrossCallReturnLabel_46:
   \   0000009C   0x7025             STRB     R5,[R4, #+0]
    923              return S2W_SUCCESS;
   \   0000009E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetUdpServer_0:
   \   000000A0   0xB008             ADD      SP,SP,#+32
   \   000000A2   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    924          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x69F8             LDR      R0,[R7, #+28]
   \                     ??Subroutine20_0:
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable63
   \   00000006   0x223D             MOVS     R2,#+61
   \   00000008   0x.... 0x....      B.W      nx_bsd_callback_register

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x0201             LSLS     R1,R0,#+8
   \   00000002   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000006   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000000A   0x4770             BX       LR
    925          
    926          
    927          /**
    928           ******************************************************************
    929           * @ingroup S2w-Application
    930           * @brief S2w tcp server open function.
    931           *    This function opens a new tcp server socket and store the socket info
    932           *    into the corresponding Cid list and registers any receive events on this
    933           *    socket with network stack.
    934           * @param serverData - IN the address of the data structure contain the tcp
    935           *                     server info.
    936           *.@param cidNo      - IN the address to which the cid number to be stored.
    937           * @retval S2W_SUCCESS     - operation successfull.
    938           * @retval S2W_SOCKFAILURE - operation failed
    939           * @retval S2W_ENCID       - operation failed- no valid cid
    940           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
    941          PUBLIC UINT8
    942          AppS2wHal_NetTcpServer(S2W_NETDATA_T *serverData, UINT8 *cidNo)
    943          {
   \                     AppS2wHal_NetTcpServer:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4604             MOV      R4,R0
    944              INT32 sd, ret;
    945              struct sockaddr_in srcAddr;
    946              UINT8 cid;
    947              ULONG rexTimeOut=25;
   \   00000008   0x2019             MOVS     R0,#+25
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    948          
    949              cid = AppS2wHal_CidGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000012   0x4606             MOV      R6,R0
    950              if (cid == INVALID_CID)
   \   00000014   0x2EFF             CMP      R6,#+255
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x2004             MOVEQ    R0,#+4
    951              {
    952                  return S2W_ENCID;
   \   0000001A   0xD049             BEQ.N    ??AppS2wHal_NetTcpServer_0
    953              }
    954          
    955              /* open the tcp server socket */
    956              if ((sd = socket(AF_INET, SOCK_STREAM, 0)) == -1)
   \   0000001C   0x2200             MOVS     R2,#+0
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x.... 0x....      BL       ??Subroutine5_0
   \                     ??CrossCallReturnLabel_4:
   \   00000024   0x4680             MOV      R8,R0
   \   00000026   0xF118 0x0F01      CMN      R8,#+1
   \   0000002A   0xD03B             BEQ.N    ??AppS2wHal_NetTcpServer_1
    957              {
    958                  return S2W_SOCKFAILURE;
    959              }
    960          
    961              srcAddr.sin_family = AF_INET;
   \   0000002C   0x2002             MOVS     R0,#+2
   \   0000002E   0xF8AD 0x0008      STRH     R0,[SP, #+8]
    962              srcAddr.sin_port = htons(serverData->port);
    963              srcAddr.sin_addr.s_addr = htonl(0);
    964          
    965              /*  bind the source port  */
    966              if (bind(sd, (struct sockaddr *)&srcAddr, sizeof(srcAddr)) == -1)
   \   00000032   0x2210             MOVS     R2,#+16
   \   00000034   0x8860             LDRH     R0,[R4, #+2]
   \   00000036   0x0201             LSLS     R1,R0,#+8
   \   00000038   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000003C   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \   00000040   0xA902             ADD      R1,SP,#+8
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_17:
   \   0000004A   0xF110 0x0F01      CMN      R0,#+1
   \   0000004E   0xD005             BEQ.N    ??AppS2wHal_NetTcpServer_2
    967              {
    968                  soc_close(sd);
    969                  return S2W_SOCKFAILURE;
    970              }
    971              if (listen(sd, 5) < 0)
   \   00000050   0x2105             MOVS     R1,#+5
   \   00000052   0x4640             MOV      R0,R8
   \   00000054   0x.... 0x....      BL       listen
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD502             BPL.N    ??AppS2wHal_NetTcpServer_3
    972              {
    973                  soc_close(sd);
   \                     ??AppS2wHal_NetTcpServer_2:
   \   0000005C   0x.... 0x....      BL       ?Subroutine11
    974                  return S2W_SOCKFAILURE;
   \                     ??CrossCallReturnLabel_21:
   \   00000060   0xE020             B.N      ??AppS2wHal_NetTcpServer_1
    975              }
    976          
    977              /* fill the cid list */
    978              s2wCidList[cid].sd = sd;
   \                     ??AppS2wHal_NetTcpServer_3:
   \   00000062   0xF44F 0x7094      MOV      R0,#+296
   \   00000066   0x4370             MULS     R0,R0,R6
   \   00000068   0x.... 0x....      LDR.W    R1,??DataTable58
   \   0000006C   0x1847             ADDS     R7,R0,R1
    979              s2wCidList[cid].conType = TCP;
   \   0000006E   0x2202             MOVS     R2,#+2
   \   00000070   0xF8C7 0x801C      STR      R8,[R7, #+28]
   \   00000074   0x5442             STRB     R2,[R0, R1]
    980              s2wCidList[cid].conMode = S2W_NETDATA_MODE_SERVER;
   \   00000076   0x2001             MOVS     R0,#+1
   \   00000078   0x7078             STRB     R0,[R7, #+1]
    981              s2wCidList[cid].localPort = serverData->port;
    982              s2wCidList[cid].remotePort = 0;
    983              s2wCidList[cid].maxConn = 15;
    984              memset(s2wCidList[cid].remoteIp,0,4);
   \   0000007A   0x2204             MOVS     R2,#+4
   \   0000007C   0x8860             LDRH     R0,[R4, #+2]
   \   0000007E   0x8078             STRH     R0,[R7, #+2]
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x2000             MOVS     R0,#+0
   \   00000084   0x80B8             STRH     R0,[R7, #+4]
   \   00000086   0x200F             MOVS     R0,#+15
   \   00000088   0xF887 0x0020      STRB     R0,[R7, #+32]
   \   0000008C   0x1DB8             ADDS     R0,R7,#+6
   \   0000008E   0x.... 0x....      BL       memset
    985              //sockOption = -1;
    986              //setsockopt(sd, 0, TCP_MAXRT, (const char*)&sockOption,
    987              //           sizeof(sockOption));
    988              ret = setsockopt(sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
    989              if(ret < 0)
   \   00000092   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_64:
   \   00000096   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_27:
   \   0000009A   0x2800             CMP      R0,#+0
   \   0000009C   0xD504             BPL.N    ??AppS2wHal_NetTcpServer_4
    990              {
    991                  AppS2wHal_NetClose(cid);
   \   0000009E   0x4630             MOV      R0,R6
   \   000000A0   0x.... 0x....      BL       AppS2wHal_NetClose
    992                  return S2W_SOCKFAILURE;
   \                     ??AppS2wHal_NetTcpServer_1:
   \   000000A4   0x2003             MOVS     R0,#+3
   \   000000A6   0xE003             B.N      ??AppS2wHal_NetTcpServer_0
    993              }
    994              //sockOption1 = 2000;
    995              //setsockopt(sd, SOL_SOCKET, SO_RCVBUF,(const char*)&sockOption1,
    996               //          sizeof(sockOption1));
    997              
    998              
    999               
   1000               //setsockopt(s2wCidList[cid].sd,SOL_SOCKET,SO_SNDTIMEO,(void*)&RecvTime,8);
   1001              /* register the callback for any socket events */
   1002           
   1003              nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack,S2W_RXCALLBACK_FLAGS);
   \                     ??AppS2wHal_NetTcpServer_4:
   \   000000A8   0x.... 0x....      BL       ?Subroutine20
   1004              *cidNo = cid;
   \                     ??CrossCallReturnLabel_45:
   \   000000AC   0x702E             STRB     R6,[R5, #+0]
   1005              return S2W_SUCCESS;
   \   000000AE   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_NetTcpServer_0:
   \   000000B0   0x.... 0x....      B.W      ?Subroutine0
   1006          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xB006             ADD      SP,SP,#+24
   \   00000002   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1007          

   \                                 In section .text, align 2, keep-with-next
   1008          VOID AppS2wHal_TcpSrvMaxConSet(UINT8 cid,UINT32 maxCon)
   1009          {
   1010          	s2wCidList[cid].maxConn= maxCon;
   \                     AppS2wHal_TcpSrvMaxConSet:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable66
   \   00000008   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000C   0xF880 0x1020      STRB     R1,[R0, #+32]
   1011          }
   \   00000010   0x4770             BX       LR               ;; return
   1012          
   1013          /**
   1014           ******************************************************************
   1015           * @ingroup S2w-Application
   1016           * @brief S2w socket close function.
   1017           *    This function close the particular tcp/udp connection specified by cid no.
   1018           *.@param cidNo      - IN the cid number corresponding to the socket to be closed.
   1019           * @retval S2W_SUCCESS     - operation successfull.
   1020           * @retval S2W_FAILURE     - operation failed
   1021           * @retval S2W_EBADCID     - operation failed- cid passed is not valid.
   1022           ******************************************************************/
   1023          

   \                                 In section .text, align 2, keep-with-next
   1024          VOID GsnSocketCallback ( INT32 SocketDescriptor, INT32 Flags )
   1025          {
   1026              GsnOsal_SemRelease(&s2wSocketCloseSem);
   \                     GsnSocketCallback:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable66_1
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease
   1027          }
   1028          

   \                                 In section .text, align 2, keep-with-next
   1029          PUBLIC UINT8
   1030          AppS2wHal_NetClose(UINT8 cid)
   1031          {
   \                     AppS2wHal_NetClose:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
   1032              S2W_CID_T *p;
   1033              UINT32 opt=2;
   \   00000008   0x2002             MOVS     R0,#+2
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   1034              /* Validate the connection identifier.
   1035               */
   1036              if (cid >= MAX_CID_RANGE)
   \   0000000C   0x2C10             CMP      R4,#+16
   \   0000000E   0xDA0D             BGE.N    ??AppS2wHal_NetClose_0
   1037              {
   1038                  return S2W_EBADCID;
   1039              }
   1040          
   1041              p = &s2wCidList[cid];
   \   00000010   0xF44F 0x7894      MOV      R8,#+296
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable58
   \   00000018   0xFB08 0x7504      MLA      R5,R8,R4,R7
   1042              if ((p->sd == CID_NOTINUSE) || (p->s2wCidCloseInProgress == TRUE))
   \   0000001C   0x69E8             LDR      R0,[R5, #+28]
   \   0000001E   0xF110 0x0F01      CMN      R0,#+1
   \   00000022   0xBF1C             ITT      NE 
   \   00000024   0xF895 0x1118      LDRBNE   R1,[R5, #+280]
   \   00000028   0x2901             CMPNE    R1,#+1
   \   0000002A   0xD101             BNE.N    ??AppS2wHal_NetClose_1
   1043              {
   1044                  return S2W_EBADCID;
   \                     ??AppS2wHal_NetClose_0:
   \   0000002C   0x2005             MOVS     R0,#+5
   \   0000002E   0xE05A             B.N      ??AppS2wHal_NetClose_2
   1045              }
   1046              p->s2wCidCloseInProgress = TRUE;
   \                     ??AppS2wHal_NetClose_1:
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0xF885 0x1118      STRB     R1,[R5, #+280]
   1047              /* Close the connection.
   1048               */
   1049               if(s2wCidList[cid].allocatedTo == 1)
   \   00000036   0xF895 0x1030      LDRB     R1,[R5, #+48]
   \   0000003A   0x2901             CMP      R1,#+1
   \   0000003C   0xBF08             IT       EQ 
   \   0000003E   0x2001             MOVEQ    R0,#+1
   1050          	 	return S2W_FAILURE;
   \   00000040   0xD051             BEQ.N    ??AppS2wHal_NetClose_2
   1051          
   1052              if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \   00000042   0x7829             LDRB     R1,[R5, #+0]
   \   00000044   0x2902             CMP      R1,#+2
   \   00000046   0xBF04             ITT      EQ 
   \   00000048   0x7869             LDRBEQ   R1,[R5, #+1]
   \   0000004A   0x2900             CMPEQ    R1,#+0
   \   0000004C   0xD105             BNE.N    ??CrossCallReturnLabel_49
   1053              {
   1054              	setsockopt(p->sd, IP_PROTOTCP, TCP_MAX_REXMIT, (const char*)&opt,
   1055                         sizeof(opt));
   \   0000004E   0x2104             MOVS     R1,#+4
   \   00000050   0x9100             STR      R1,[SP, #+0]
   \   00000052   0xAB01             ADD      R3,SP,#+4
   \   00000054   0x222A             MOVS     R2,#+42
   \   00000056   0x.... 0x....      BL       ??Subroutine22_0
   1056              }
   1057          	nx_bsd_callback_register(p->sd, NULL, 0);
   \                     ??CrossCallReturnLabel_49:
   \   0000005A   0x69E8             LDR      R0,[R5, #+28]
   \   0000005C   0x.... 0x....      BL       ?Subroutine24
   1058          
   1059          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   1060              /* if an http connection close using http close */
   1061              if(p->httpflag == 1 )
   \                     ??CrossCallReturnLabel_58:
   \   00000060   0xF895 0x002F      LDRB     R0,[R5, #+47]
   \   00000064   0x2801             CMP      R0,#+1
   \   00000066   0xD103             BNE.N    ??AppS2wHal_NetClose_3
   1062              {
   1063                  AppS2wHal_HttpLocalClose(cid);
   \   00000068   0x4620             MOV      R0,R4
   \   0000006A   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   \   0000006E   0xE009             B.N      ??AppS2wHal_NetClose_4
   1064              }
   1065              else
   1066          #endif
   1067          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1068              if(p->sslflag == 1 )
   \                     ??AppS2wHal_NetClose_3:
   \   00000070   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_77:
   \   00000074   0xD103             BNE.N    ??AppS2wHal_NetClose_5
   1069              {
   1070                  AppS2w_SslLocalClose(cid);
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       AppS2w_SslLocalClose
   \   0000007C   0xE002             B.N      ??AppS2wHal_NetClose_4
   1071              }
   1072              else
   1073          #endif
   1074          
   1075              {
   1076                  soc_close(p->sd);
   \                     ??AppS2wHal_NetClose_5:
   \   0000007E   0x69E8             LDR      R0,[R5, #+28]
   \   00000080   0x.... 0x....      BL       soc_close
   1077          	}
   1078                  if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \                     ??AppS2wHal_NetClose_4:
   \   00000084   0x7828             LDRB     R0,[R5, #+0]
   \   00000086   0x2802             CMP      R0,#+2
   \   00000088   0xBF04             ITT      EQ 
   \   0000008A   0x7868             LDRBEQ   R0,[R5, #+1]
   \   0000008C   0x2800             CMPEQ    R0,#+0
   \   0000008E   0xD11E             BNE.N    ??AppS2wHal_NetClose_6
   1079                  {
   1080          		 	if(s2wCidList[cid].serverCid != INVALID_CID)
   \   00000090   0xF895 0x002E      LDRB     R0,[R5, #+46]
   \   00000094   0x28FF             CMP      R0,#+255
   \   00000096   0xD01A             BEQ.N    ??AppS2wHal_NetClose_6
   1081          		 	{
   1082          		 		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER );
   \   00000098   0x.... 0x....      LDR.W    R6,??DataTable69
   \   0000009C   0x6830             LDR      R0,[R6, #+0]
   \   0000009E   0xF248 0x14CC      MOVW     R4,#+33228
   \   000000A2   0xF04F 0x31FF      MOV      R1,#-1
   \   000000A6   0x1820             ADDS     R0,R4,R0
   \   000000A8   0x.... 0x....      BL       GsnOsal_SemAcquire
   1083          				s2wCidList[s2wCidList[cid].serverCid].clientConCount--;
   \   000000AC   0xF895 0x102E      LDRB     R1,[R5, #+46]
   \   000000B0   0xF895 0x002E      LDRB     R0,[R5, #+46]
   \   000000B4   0xFB08 0x7101      MLA      R1,R8,R1,R7
   \   000000B8   0xFB08 0x7000      MLA      R0,R8,R0,R7
   \   000000BC   0xF891 0x1021      LDRB     R1,[R1, #+33]
   \   000000C0   0x1E49             SUBS     R1,R1,#+1
   \   000000C2   0xF880 0x1021      STRB     R1,[R0, #+33]
   1084          			 	GsnOsal_SemRelease(&s2wappMainTaskCtxt->s2wTcpClientCntSyncSem);
   \   000000C6   0x6830             LDR      R0,[R6, #+0]
   \   000000C8   0x1820             ADDS     R0,R4,R0
   \   000000CA   0x.... 0x....      BL       GsnOsal_SemRelease
   1085          		 	}
   1086                  }
   1087              
   1088          #if 0   
   1089               UINT32 i=0;
   1090               if((p->conType == TCP) && (p->conMode == S2W_NETDATA_MODE_SERVER))
   1091               {
   1092                 /* Close all the client CIDs connected to server as well */
   1093                  for (i = 0; i < MAX_CID_RANGE; i++)
   1094                  {
   1095                    if(s2wCidList[i].serverCid == cid)
   1096                    {
   1097                      soc_close(s2wCidList[i].sd);
   1098                      nx_bsd_callback_register(p->sd, NULL, 0);
   1099                      s2wCidList[i].sd = CID_NOTINUSE;
   1100                      s2wCidList[i].localPort = 0;
   1101                      s2wCidList[i].remotePort = 0;
   1102                      s2wCidList[i].addrType = 0;
   1103                      s2wCidList[i].s2wCidCloseInProgress = FALSE;
   1104                      
   1105                    }
   1106                  }
   1107               }
   1108          #endif
   1109              /* Remove the entry from the connection identifier list.
   1110               */
   1111          
   1112              p->sd = CID_NOTINUSE;
   \                     ??AppS2wHal_NetClose_6:
   \   000000CE   0xF04F 0x30FF      MOV      R0,#-1
   \   000000D2   0x61E8             STR      R0,[R5, #+28]
   1113              s2wCidList[cid].localPort = 0;
   1114              s2wCidList[cid].remotePort = 0;
   \   000000D4   0x2100             MOVS     R1,#+0
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x8068             STRH     R0,[R5, #+2]
   \   000000DA   0x1CA8             ADDS     R0,R5,#+2
   \   000000DC   0x8041             STRH     R1,[R0, #+2]
   1115              s2wCidList[cid].addrType = 0;
   \   000000DE   0x7641             STRB     R1,[R0, #+25]
   1116              p->s2wCidCloseInProgress = FALSE;
   \   000000E0   0x2000             MOVS     R0,#+0
   \   000000E2   0xF885 0x0118      STRB     R0,[R5, #+280]
   1117              return S2W_SUCCESS;
   \                     ??AppS2wHal_NetClose_2:
   \   000000E6   0xB004             ADD      SP,SP,#+16
   \   000000E8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   1118          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0x2200             MOVS     R2,#+0
   \                     ??Subroutine24_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      nx_bsd_callback_register

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0xF895 0x002C      LDRB     R0,[R5, #+44]
   \   00000004   0x2801             CMP      R0,#+1
   \   00000006   0x4770             BX       LR
   1119          
   1120          
   1121          PRIVATE UINT8
   1122          AppS2wHal_NetImmediateClose(UINT8 cid)
   1123          {
   1124              S2W_CID_T *p;
   1125              UINT32 opt=2;
   1126          
   1127              /* Validate the connection identifier.
   1128               */
   1129              if (cid >= MAX_CID_RANGE)
   1130              {
   1131                  return S2W_EBADCID;
   1132              }
   1133          
   1134              p = &s2wCidList[cid];
   1135              if ((p->sd == CID_NOTINUSE) || (p->s2wCidCloseInProgress == TRUE))
   1136              {
   1137                  return S2W_EBADCID;
   1138              }
   1139          
   1140              /* Close the connection.*/
   1141              p->s2wCidCloseInProgress = TRUE;
   1142              setsockopt(p->sd, IP_PROTOTCP, TCP_MAX_REXMIT, (const char*)&opt,
   1143                         sizeof(opt));
   1144           #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   1145               if(p->httpflag == 1 )
   1146               {
   1147                   AppS2wHal_HttpLocalClose(cid);
   1148               }
   1149               else
   1150           #endif
   1151           #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1152               if(p->sslflag == 1 )
   1153               {
   1154                   AppS2w_SslLocalClose(cid);
   1155          
   1156               }
   1157               else
   1158           #endif
   1159              {
   1160            		nx_bsd_callback_register(p->sd, NULL, 0);
   1161                  soc_close(p->sd);
   1162          
   1163             }
   1164          
   1165          
   1166              p->sd = CID_NOTINUSE;
   1167              s2wCidList[cid].localPort = 0;
   1168              s2wCidList[cid].remotePort = 0;
   1169              p->s2wCidCloseInProgress = FALSE;
   1170              return S2W_SUCCESS;
   1171          }
   1172          
   1173          
   1174          
   1175          /**
   1176           ******************************************************************
   1177           * @ingroup S2w-Application
   1178           * @brief S2w all socket close function.
   1179           *    This function close all tcp/udp connection established in s2w.
   1180           * @retval S2W_SUCCESS     - operation successfull.
   1181           * @retval S2W_FAILURE     - operation failed
   1182           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1183          PUBLIC UINT8
   1184          AppS2wHal_NetCloseAll(UINT8 flag)
   1185          {
   \                     AppS2wHal_NetCloseAll:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB084             SUB      SP,SP,#+16
   1186              UINT8 status = S2W_SUCCESS;
   \   00000008   0x2000             MOVS     R0,#+0
   1187              INT32 i;
   1188          
   1189              for (i = 0; i < MAX_CID_RANGE; i++)
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0xF44F 0x7894      MOV      R8,#+296
   \   00000010   0x.... 0x....      LDR.W    R10,??DataTable66
   1190              {
   1191                  if (s2wCidList[i].sd != CID_NOTINUSE && s2wCidList[i].allocatedTo != 1)
   \                     ??AppS2wHal_NetCloseAll_0:
   \   00000014   0xFB08 0xA605      MLA      R6,R8,R5,R10
   \   00000018   0x69F1             LDR      R1,[R6, #+28]
   \   0000001A   0xF111 0x0F01      CMN      R1,#+1
   \   0000001E   0xBF1C             ITT      NE 
   \   00000020   0xF896 0x1030      LDRBNE   R1,[R6, #+48]
   \   00000024   0x2901             CMPNE    R1,#+1
   \   00000026   0xD03B             BEQ.N    ??AppS2wHal_NetCloseAll_1
   1192                  {
   1193          	         if(flag == CID_NCLOSE)
   \   00000028   0xB91C             CBNZ.N   R4,??AppS2wHal_NetCloseAll_2
   1194          	         {
   1195          	            status = AppS2wHal_NetClose(i);
   \   0000002A   0xB2E8             UXTB     R0,R5
   \   0000002C   0x.... 0x....      BL       AppS2wHal_NetClose
   \   00000030   0xE036             B.N      ??AppS2wHal_NetCloseAll_1
   1196          	         }
   1197          	         else
   1198          	         {
   1199          	            status = AppS2wHal_NetImmediateClose(i);
   \                     ??AppS2wHal_NetCloseAll_2:
   \   00000032   0x2002             MOVS     R0,#+2
   \   00000034   0xFA5F 0xF985      UXTB     R9,R5
   \   00000038   0x9001             STR      R0,[SP, #+4]
   \   0000003A   0xFB08 0xA709      MLA      R7,R8,R9,R10
   \   0000003E   0x69F8             LDR      R0,[R7, #+28]
   \   00000040   0xF110 0x0F01      CMN      R0,#+1
   \   00000044   0xBF1C             ITT      NE 
   \   00000046   0xF897 0x1118      LDRBNE   R1,[R7, #+280]
   \   0000004A   0x2901             CMPNE    R1,#+1
   \   0000004C   0xD027             BEQ.N    ??AppS2wHal_NetCloseAll_3
   \   0000004E   0x2101             MOVS     R1,#+1
   \   00000050   0xF887 0x1118      STRB     R1,[R7, #+280]
   \   00000054   0xAB01             ADD      R3,SP,#+4
   \   00000056   0x2104             MOVS     R1,#+4
   \   00000058   0x9100             STR      R1,[SP, #+0]
   \   0000005A   0x222A             MOVS     R2,#+42
   \   0000005C   0x.... 0x....      BL       ??Subroutine22_0
   1200          	         }
   1201          
   1202                  }
   \                     ??CrossCallReturnLabel_52:
   \   00000060   0xF107 0x001C      ADD      R0,R7,#+28
   \   00000064   0x7CC1             LDRB     R1,[R0, #+19]
   \   00000066   0x2901             CMP      R1,#+1
   \   00000068   0xD103             BNE.N    ??AppS2wHal_NetCloseAll_4
   \   0000006A   0x4648             MOV      R0,R9
   \   0000006C   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   \   00000070   0xE00C             B.N      ??AppS2wHal_NetCloseAll_5
   \                     ??AppS2wHal_NetCloseAll_4:
   \   00000072   0x7C00             LDRB     R0,[R0, #+16]
   \   00000074   0x2801             CMP      R0,#+1
   \   00000076   0xD103             BNE.N    ??AppS2wHal_NetCloseAll_6
   \   00000078   0x4648             MOV      R0,R9
   \   0000007A   0x.... 0x....      BL       AppS2w_SslLocalClose
   \   0000007E   0xE005             B.N      ??AppS2wHal_NetCloseAll_5
   \                     ??AppS2wHal_NetCloseAll_6:
   \   00000080   0x69F8             LDR      R0,[R7, #+28]
   \   00000082   0x.... 0x....      BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_59:
   \   00000086   0x69F8             LDR      R0,[R7, #+28]
   \   00000088   0x.... 0x....      BL       soc_close
   \                     ??AppS2wHal_NetCloseAll_5:
   \   0000008C   0xF04F 0x30FF      MOV      R0,#-1
   \   00000090   0x61F8             STR      R0,[R7, #+28]
   \   00000092   0x2000             MOVS     R0,#+0
   \   00000094   0x8078             STRH     R0,[R7, #+2]
   \   00000096   0x80B8             STRH     R0,[R7, #+4]
   \   00000098   0xF887 0x0118      STRB     R0,[R7, #+280]
   \   0000009C   0xE000             B.N      ??AppS2wHal_NetCloseAll_1
   \                     ??AppS2wHal_NetCloseAll_3:
   \   0000009E   0x2005             MOVS     R0,#+5
   1203                  s2wCidList[i].localPort = 0;
   \                     ??AppS2wHal_NetCloseAll_1:
   \   000000A0   0x2100             MOVS     R1,#+0
   \   000000A2   0x8071             STRH     R1,[R6, #+2]
   1204                  s2wCidList[i].remotePort = 0;
   1205              }
   \   000000A4   0x1C6D             ADDS     R5,R5,#+1
   \   000000A6   0x80B1             STRH     R1,[R6, #+4]
   \   000000A8   0x2D10             CMP      R5,#+16
   \   000000AA   0xDBB3             BLT.N    ??AppS2wHal_NetCloseAll_0
   1206              return status;
   \   000000AC   0xB004             ADD      SP,SP,#+16
   \   000000AE   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   1207          }
   1208          
   1209          
   1210          /**
   1211           ******************************************************************
   1212           * @ingroup S2w-Application
   1213           * @brief S2w udp/tcp tx function
   1214           *    This function send the data to the remote machine specified. This
   1215           *    fuction use either tcp or udp as the protocol type.
   1216           * @param cid      - IN the cid number corresponding to the socket connection.
   1217           * @param destAddr - IN the socket structure for remote machine.
   1218           * @param destPort - IN the remote port.
   1219           * @param buf      - IN the data pointer.
   1220           *.@param len      - IN the length of the buf to send.
   1221           * @retval S2W_SUCCESS           - operation successfull.
   1222           * @retval S2W_ENCID/S2W_EBADCID - operation failed-no valid cid
   1223           * @@retval S2W_FAILURE          - operation failed.
   1224           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1225          PUBLIC UINT8
   1226          AppS2wHal_NetTx(UINT8 cid, UINT8 *destAddr, UINT16 destPort,
   1227                           VOID *buf, UINT32 len)
   1228          {
   \                     AppS2wHal_NetTx:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x4699             MOV      R9,R3
   1229              UINT32 status = S2W_SUCCESS;
   1230              S2W_CID_T *p;
   1231          	UINT8 *outDataBuf;
   1232              p = &s2wCidList[cid];
   \   00000008   0xF44F 0x7094      MOV      R0,#+296
   \   0000000C   0x....             LDR.N    R3,??DataTable58
   \   0000000E   0xFB00 0x340A      MLA      R4,R0,R10,R3
   \   00000012   0xB087             SUB      SP,SP,#+28
   \   00000014   0x7863             LDRB     R3,[R4, #+1]
   \   00000016   0x7820             LDRB     R0,[R4, #+0]
   \   00000018   0x9F10             LDR      R7,[SP, #+64]
   \   0000001A   0x2500             MOVS     R5,#+0
   \   0000001C   0x2B01             CMP      R3,#+1
   \   0000001E   0xD112             BNE.N    ??AppS2wHal_NetTx_0
   1233              if (p->conMode == S2W_NETDATA_MODE_SERVER)
   1234              {
   1235                  struct sockaddr_in addr;
   1236                  if (p->conType == TCP)
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD04E             BEQ.N    ??AppS2wHal_NetTx_1
   1237                  {
   1238                      return S2W_FAILURE;
   1239                  }
   1240          #ifdef S2W_IPv6_SUPPORT
   1241                
   1242                  if(p->addrType & ADDR_TYPE_IPv6)
   1243                  {
   1244                    struct sockaddr_in6 servAddr;
   1245                    servAddr.sin6_family = AF_INET6;
   1246                    servAddr.sin6_port = htons(destPort);
   1247                    
   1248                    memcpy(servAddr.sin6_addr._S6_un._S6_u32,destAddr,16);
   1249                    GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32); 
   1250                      if (sendto(p->sd, buf, len, 0,(struct sockaddr *)&servAddr, sizeof(servAddr)) < 0)
   1251                  {
   1252                      status = S2W_FAILURE;
   1253                  }
   1254                    
   1255                  }
   1256                else
   1257                
   1258          #endif //S2W_IPv6_SUPPORT 
   1259                {
   1260                  addr.sin_family = AF_INET;
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1261                  addr.sin_port = htons(destPort);
   \   0000002A   0x0210             LSLS     R0,R2,#+8
   \   0000002C   0xEA40 0x2012      ORR      R0,R0,R2, LSR #+8
   \   00000030   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   1262                  //*(ULONG*)destAddr = htonl(*(ULONG*)destAddr);
   1263                  memcpy(&(addr.sin_addr.s_addr), destAddr, sizeof(addr.sin_addr.s_addr));
   \   00000034   0x2204             MOVS     R2,#+4
   \   00000036   0xA804             ADD      R0,SP,#+16
   \   00000038   0x.... 0x....      BL       memcpy
   1264          
   1265                  GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \   0000003C   0x.... 0x....      BL       ?Subroutine33
   1266                  if (sendto(p->sd, buf, len, 0,
   1267                     (struct sockaddr *)&addr, sizeof(addr)) < 0)
   \                     ??CrossCallReturnLabel_86:
   \   00000040   0x.... 0x....      BL       ?Subroutine16
   1268                  {
   1269                      //S2w_Debug("udp sendto fail: %d\r\n", tfGetSocketError(p->sd));
   1270                      //S2w_Debug("destaddr = %x\n\r", *(UINT32 *) destAddr);
   1271                      //S2w_Debug("destport = %x\n\r", destPort);
   1272                      status = S2W_FAILURE;
   1273                  }
   1274                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   1275                }
   1276              }
   \                     ??CrossCallReturnLabel_37:
   \   00000044   0xE047             B.N      ??AppS2wHal_NetTx_2
   1277              else if((p->conType == UDP) && (p->conMode == S2W_NETDATA_MODE_CLIENT))
   \                     ??AppS2wHal_NetTx_0:
   \   00000046   0x2801             CMP      R0,#+1
   \   00000048   0xBF08             IT       EQ 
   \   0000004A   0x2B00             CMPEQ    R3,#+0
   \   0000004C   0xD10F             BNE.N    ??AppS2wHal_NetTx_3
   1278              {
   1279          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1280                  if ((s2wCidList[cid].sslflag == TRUE))
   1281           		{
   1282           			/*NOTE: IMP: The ssl can encode a max of 1338 bytes. Its beter to encode 1K at a time
   1283           			and send it. So we need a loop mechanism to send the incomming data in 1K encoded
   1284           			chunks....*/
   1285           			//UINT32 outDataLen;
   1286                      UINT32 dataSent = 0;
   1287           			UINT32 sendLen = 0;
   1288           			while(len)
   1289           			{
   1290           				sendLen = (len > 1024)?1024:len;
   1291                          GsnDtls_Send( (GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn,
   1292                          		(UINT8 *)((UINT8*)buf + dataSent), sendLen, 0 );
   1293           				dataSent += sendLen;
   1294           				len -= sendLen;
   1295           			}
   1296           		}
   1297                  else
   1298          #endif
   1299                  {
   1300                #ifdef S2W_IPv6_SUPPORT
   1301                  if(p->addrType & ADDR_TYPE_IPv6)
   1302                  {
   1303                    struct sockaddr_in6 servAddr;
   1304                    servAddr.sin6_family = AF_INET6;
   1305                    servAddr.sin6_port = htons(s2wCidList[cid].remotePort);
   1306                    
   1307                    
   1308                    memcpy(servAddr.sin6_addr._S6_un._S6_u32,s2wCidList[cid].remoteIpv6,16);
   1309                    GSN_IPv6_CHANGE_ENDIAN((UINT32 *)servAddr.sin6_addr._S6_un._S6_u32); 
   1310                      if (sendto(p->sd, buf, len, 0,(struct sockaddr *)&servAddr, sizeof(servAddr)) < 0)
   1311                  {
   1312                      status = S2W_FAILURE;
   1313                  }
   1314          
   1315                  }
   1316                else
   1317                
   1318          #endif //S2W_IPv6_SUPPORT       
   1319                {
   1320                  struct sockaddr_in addr1;
   1321                  addr1.sin_family = AF_INET;
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   1322                  addr1.sin_port = htons(s2wCidList[cid].remotePort);
   1323                  memcpy(&(addr1.sin_addr.s_addr),s2wCidList[cid].remoteIp ,
   1324                            sizeof(addr1.sin_addr.s_addr));
   \   00000054   0x2204             MOVS     R2,#+4
   \   00000056   0x88A0             LDRH     R0,[R4, #+4]
   \   00000058   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_39:
   \   0000005C   0x1DA1             ADDS     R1,R4,#+6
   \   0000005E   0xA804             ADD      R0,SP,#+16
   \   00000060   0x.... 0x....      BL       memcpy
   1325          
   1326                  GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \   00000064   0x.... 0x....      BL       ?Subroutine33
   1327                  if (sendto(p->sd, buf, len, 0,
   1328                     (struct sockaddr *)&addr1, sizeof(addr1)) < 0)
   \                     ??CrossCallReturnLabel_85:
   \   00000068   0x.... 0x....      BL       ?Subroutine16
   1329                  {
   1330                      S2w_Debug("udp sendto fail: %d\r\n", 1);
   1331                  }
   1332                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   1333                }
   1334              }
   1335              }
   \                     ??CrossCallReturnLabel_36:
   \   0000006C   0xE036             B.N      ??AppS2wHal_NetTx_4
   1336              else
   1337              {
   1338                  /* do a socket send
   1339                   */
   1340          
   1341                  //S2w_Debug("\r\nData sd %d, %d\r\n",s2wCidList[cid].sd,
   1342                      //tlsv1_client_established(s2wCidList[cid].ssl.sslConn->tlsv1Conn));
   1343          
   1344           #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1345          
   1346                   if ((s2wCidList[cid].sslflag == TRUE))
   \                     ??AppS2wHal_NetTx_3:
   \   0000006E   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD127             BNE.N    ??AppS2wHal_NetTx_5
   1347           		{
   1348           			/*NOTE: IMP: The ssl can encode a max of 1338 bytes. Its beter to encode 1K at a time
   1349           			and send it. So we need a loop mechanism to send the incomming data in 1K encoded
   1350           			chunks....*/
   1351           			UINT32 outDataLen, u32NoOfBytesSent;
   1352           			UINT32 dataSent = 0;
   \   00000076   0x46AB             MOV      R11,R5
   1353           			UINT32 sendLen = 0;
   \   00000078   0xE002             B.N      ??AppS2wHal_NetTx_6
   1354           			while(len)
   1355           			{
   1356           				sendLen = (len > 1024)?1024:len;
   1357           #ifdef S2W_APP_SSL_PROVISION
   1358           				ULONG64 curTime;
   1359           				UINT32 diffTime, timeInMsec;
   1360          
   1361           				encryptStartTime = GsnSoftTmr_CurrentSystemTime();
   1362           #endif
   1363           				GsnSsl_Encode(s2wCidList[cid].ssl.sslConn, (UINT8 *)((UINT8*)buf + dataSent),
   1364           							  sendLen, &outDataBuf,&outDataLen);
   1365           #ifdef S2W_APP_SSL_PROVISION
   1366           				curTime  = GsnSoftTmr_CurrentSystemTime();
   1367           				diffTime = (curTime - encryptStartTime);
   1368           				timeInMsec =   diffTime/(TIMER_INTERRUPT_1_MS);
   1369           				S2w_Printf("\r\nSSL Tx Encryption Time in ms %d\r\n", timeInMsec);
   1370           #endif
   1371          
   1372           				u32NoOfBytesSent = send(s2wCidList[cid].sd, (const char*)outDataBuf,
   1373           										outDataLen, 0);
   1374          
   1375           				GsnSsl_Free(outDataBuf);
   1376          
   1377           				if ( outDataLen != u32NoOfBytesSent )
   1378           				{
   1379           					AppS2w_SslClose(cid);
   1380           					return S2W_FAILURE;
   1381           				}
   1382           				dataSent += sendLen;
   \                     ??AppS2wHal_NetTx_7:
   \   0000007A   0x44C3             ADD      R11,R8,R11
   1383           				len -= sendLen;
   \   0000007C   0xEBA7 0x0708      SUB      R7,R7,R8
   \                     ??AppS2wHal_NetTx_6:
   \   00000080   0xB367             CBZ.N    R7,??AppS2wHal_NetTx_4
   \   00000082   0xF5B7 0x6F80      CMP      R7,#+1024
   \   00000086   0xBF8C             ITE      HI 
   \   00000088   0xF44F 0x6880      MOVHI    R8,#+1024
   \   0000008C   0x46B8             MOVLS    R8,R7
   \   0000008E   0xA801             ADD      R0,SP,#+4
   \   00000090   0x1D26             ADDS     R6,R4,#+4
   \   00000092   0x9000             STR      R0,[SP, #+0]
   \   00000094   0xAB02             ADD      R3,SP,#+8
   \   00000096   0x6A70             LDR      R0,[R6, #+36]
   \   00000098   0x4642             MOV      R2,R8
   \   0000009A   0xEB0B 0x0109      ADD      R1,R11,R9
   \   0000009E   0x.... 0x....      BL       GsnSsl_Encode
   \   000000A2   0x9A01             LDR      R2,[SP, #+4]
   \   000000A4   0x9902             LDR      R1,[SP, #+8]
   \   000000A6   0x69B0             LDR      R0,[R6, #+24]
   \   000000A8   0x2300             MOVS     R3,#+0
   \   000000AA   0x.... 0x....      BL       send
   \   000000AE   0x4606             MOV      R6,R0
   \   000000B0   0x9802             LDR      R0,[SP, #+8]
   \   000000B2   0x.... 0x....      BL       GsnSsl_Free
   \   000000B6   0x9801             LDR      R0,[SP, #+4]
   \   000000B8   0x42B0             CMP      R0,R6
   \   000000BA   0xD0DE             BEQ.N    ??AppS2wHal_NetTx_7
   \   000000BC   0x4650             MOV      R0,R10
   \   000000BE   0x.... 0x....      BL       AppS2w_SslClose
   \                     ??AppS2wHal_NetTx_1:
   \   000000C2   0x2001             MOVS     R0,#+1
   \   000000C4   0xE018             B.N      ??AppS2wHal_NetTx_8
   1384           			}
   1385           		}
   1386                   else
   1387          #endif
   1388                  {
   1389                     GsnSq_TaskMonitorStart(APP_CFG_SQ_SERIAL_INPUT_TASK_ID, (UINT32)cid);
   \                     ??AppS2wHal_NetTx_5:
   \   000000C6   0x.... 0x....      BL       ?Subroutine33
   1390                    
   1391          #ifdef S2W_IPv6_SUPPORT
   1392                  if(p->addrType & ADDR_TYPE_IPv6)
   1393                  {
   1394                    if (send(p->sd, buf, len, 0) < 0)
   1395                  {
   1396          	        /*GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1397          	        // if the auto connection is enabled do not print this message
   1398          	             if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   1399                 	      {
   1400                      			//S2w_Printf("send() failed: %d\r\n", 1);
   1401          			 }
   1402          		         GsnOsal_SemRelease(&s2wSyncSemID);
   1403                      		*/
   1404                      status = S2W_FAILURE;
   1405                  }
   1406                    
   1407                    
   1408                  }
   1409                  else
   1410          #endif //S2W_IPv6_SUPPORT 
   1411                  {
   1412                  if (send(p->sd, buf, len, 0) < 0)
   \                     ??CrossCallReturnLabel_84:
   \   000000CA   0x69E0             LDR      R0,[R4, #+28]
   \   000000CC   0x2300             MOVS     R3,#+0
   \   000000CE   0x463A             MOV      R2,R7
   \   000000D0   0x4649             MOV      R1,R9
   \   000000D2   0x.... 0x....      BL       send
   \                     ??AppS2wHal_NetTx_2:
   \   000000D6   0x2800             CMP      R0,#+0
   \   000000D8   0xBF48             IT       MI 
   \   000000DA   0x2501             MOVMI    R5,#+1
   1413                  {
   1414                      //GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1415                      //if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   1416                      //{
   1417                      //S2w_Printf("send() failed: %d\r\n", 1);
   1418          			//}
   1419                      //GsnOsal_SemRelease(&s2wSyncSemID);
   1420                      status = S2W_FAILURE;
   1421                  }
   1422          	}
   1423                  }
   1424                  GsnSq_TaskMonitorStop( APP_CFG_SQ_SERIAL_INPUT_TASK_ID);
   \                     ??AppS2wHal_NetTx_4:
   \   000000DC   0x200A             MOVS     R0,#+10
   \   000000DE   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1425          
   1426              }
   1427              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000000E2   0x.... 0x....      LDR.W    R1,??DataTable71
   \   000000E6   0x6809             LDR      R1,[R1, #+0]
   \   000000E8   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000EC   0x5C40             LDRB     R0,[R0, R1]
   \   000000EE   0x2802             CMP      R0,#+2
   \   000000F0   0xBF08             IT       EQ 
   \   000000F2   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1428              {
   1429                   s2wSpiFs_Flush();
   1430              }
   1431              return status;
   \   000000F6   0x4628             MOV      R0,R5
   \                     ??AppS2wHal_NetTx_8:
   \   000000F8   0x....             B.N      ?Subroutine1
   1432          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0x4651             MOV      R1,R10
   \   00000002   0x200A             MOVS     R0,#+10
   \   00000004   0x.... 0x....      B.W      GsnSq_TaskMonitorStart

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x2010             MOVS     R0,#+16
   \   00000002   0x9001             STR      R0,[SP, #+4]
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0xA803             ADD      R0,SP,#+12
   \   00000008   0x9000             STR      R0,[SP, #+0]
   \   0000000A   0x463A             MOV      R2,R7
   \   0000000C   0x69E0             LDR      R0,[R4, #+28]
   \   0000000E   0x4649             MOV      R1,R9
   \   00000010   0x.... 0x....      B.W      sendto

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0xB007             ADD      SP,SP,#+28
   \   00000002   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1433          
   1434          
   1435          /**
   1436           ******************************************************************
   1437           * @brief S2w cid info get function.
   1438           *    This function get all info of the active active cids present.
   1439           *.@param cidInfo      - IN the cid info structure pointer.
   1440           * @param nos          - IN the address to which the number of active
   1441           *                           cids to be stored.
   1442           * @retval S2W_SUCCESS     - operation successfull.
   1443           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1444          PUBLIC UINT8
   1445          AppS2wHal_CidInfoGet(S2W_CID_INFO_T cidInfo[],UINT32* nos)
   1446          {
   \                     AppS2wHal_CidInfoGet:
   \   00000000   0xE92D 0x4FF1      PUSH     {R0,R4-R11,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   1447              UINT8 i=0,j=0;
   1448              struct sockaddr_in sockAddr;
   1449              INT32 len = sizeof(sockAddr), ret;
   \   00000006   0x2010             MOVS     R0,#+16
   \   00000008   0x4689             MOV      R9,R1
   \   0000000A   0x2500             MOVS     R5,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   1450              for(i=0;i<MAX_CID_RANGE;i++)
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x.... 0x....      LDR.W    R11,??DataTable58
   1451              {
   1452                  if(s2wCidList[i].sd != CID_NOTINUSE) // valid cid
   \                     ??AppS2wHal_CidInfoGet_0:
   \   00000014   0xF44F 0x7094      MOV      R0,#+296
   \   00000018   0xFB00 0xF806      MUL      R8,R0,R6
   \   0000001C   0xEB08 0x040B      ADD      R4,R8,R11
   \   00000020   0x69E0             LDR      R0,[R4, #+28]
   \   00000022   0xF110 0x0F01      CMN      R0,#+1
   \   00000026   0xD02C             BEQ.N    ??AppS2wHal_CidInfoGet_1
   1453                  {
   1454                      cidInfo[j].cid = AppS2wHal_CidFind(s2wCidList[i].sd);
   \   00000028   0x210C             MOVS     R1,#+12
   \   0000002A   0xFB01 0xFA05      MUL      R10,R1,R5
   \   0000002E   0x9906             LDR      R1,[SP, #+24]
   \   00000030   0xEB0A 0x0701      ADD      R7,R10,R1
   \   00000034   0x.... 0x....      BL       AppS2wHal_CidFind
   \   00000038   0x72B8             STRB     R0,[R7, #+10]
   1455                      if(s2wCidList[i].localPort > 0)
   \   0000003A   0x8860             LDRH     R0,[R4, #+2]
   \   0000003C   0xB968             CBNZ.N   R0,??AppS2wHal_CidInfoGet_2
   1456                      {
   1457                          cidInfo[j].localPort = s2wCidList[i].localPort;
   1458                      }
   1459                      else
   1460                      {
   1461                          ret = getsockname(s2wCidList[i].sd, (struct sockaddr *)&sockAddr,
   1462                                       &len);
   1463                          if(ret < 0)
   \   0000003E   0x69E0             LDR      R0,[R4, #+28]
   \   00000040   0xAA00             ADD      R2,SP,#+0
   \   00000042   0xA901             ADD      R1,SP,#+4
   \   00000044   0x.... 0x....      BL       getsockname
   \   00000048   0x2800             CMP      R0,#+0
   \   0000004A   0xD501             BPL.N    ??AppS2wHal_CidInfoGet_3
   1464                          {
   1465                              //AppS2wHal_NetClose(cid);
   1466                              return S2W_SOCKFAILURE;
   \   0000004C   0x2003             MOVS     R0,#+3
   \   0000004E   0xE01F             B.N      ??AppS2wHal_CidInfoGet_4
   1467                          }
   1468                          cidInfo[j].localPort = ntohs(sockAddr.sin_port);
   \                     ??AppS2wHal_CidInfoGet_3:
   \   00000050   0xF8BD 0x0006      LDRH     R0,[SP, #+6]
   \   00000054   0x0201             LSLS     R1,R0,#+8
   \   00000056   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \                     ??AppS2wHal_CidInfoGet_2:
   \   0000005A   0x8078             STRH     R0,[R7, #+2]
   1469                      }
   1470                      if (s2wCidList[i].conMode != S2W_NETDATA_MODE_SERVER)
   \   0000005C   0x7860             LDRB     R0,[R4, #+1]
   \   0000005E   0x2801             CMP      R0,#+1
   \   00000060   0xD004             BEQ.N    ??AppS2wHal_CidInfoGet_5
   1471                      {
   1472                          memcpy(cidInfo[j].remoteIp, s2wCidList[i].remoteIp,4);
   \   00000062   0x2204             MOVS     R2,#+4
   \   00000064   0x1DA1             ADDS     R1,R4,#+6
   \   00000066   0x1DB8             ADDS     R0,R7,#+6
   \   00000068   0x.... 0x....      BL       memcpy
   1473                      }
   1474                      cidInfo[j].remotePort = s2wCidList[i].remotePort;
   \                     ??AppS2wHal_CidInfoGet_5:
   \   0000006C   0x88A0             LDRH     R0,[R4, #+4]
   \   0000006E   0x80B8             STRH     R0,[R7, #+4]
   1475                      cidInfo[j].conType = s2wCidList[i].conType;
   1476                      cidInfo[j].conMode = s2wCidList[i].conMode;
   1477                      j = j+1;
   \   00000070   0x1C6D             ADDS     R5,R5,#+1
   \   00000072   0x9806             LDR      R0,[SP, #+24]
   \   00000074   0xF818 0x100B      LDRB     R1,[R8, R11]
   \   00000078   0xF80A 0x1000      STRB     R1,[R10, R0]
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0x7860             LDRB     R0,[R4, #+1]
   \   00000080   0x7078             STRB     R0,[R7, #+1]
   1478                  }
   1479          
   1480              }
   \                     ??AppS2wHal_CidInfoGet_1:
   \   00000082   0x1C76             ADDS     R6,R6,#+1
   \   00000084   0xB2F6             UXTB     R6,R6
   \   00000086   0x2E10             CMP      R6,#+16
   \   00000088   0xDBC4             BLT.N    ??AppS2wHal_CidInfoGet_0
   1481              *nos = j;
   \   0000008A   0xF8C9 0x5000      STR      R5,[R9, #+0]
   1482              return S2W_SUCCESS;
   \   0000008E   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_CidInfoGet_4:
   \   00000090                      REQUIRE ?Subroutine1
   \   00000090                      ;; // Fall through to label ?Subroutine1
   1483          }
   1484          
   1485          
   1486          /**
   1487           ******************************************************************
   1488           * @ingroup S2w-Application
   1489           * @brief s2w network cid status get function.
   1490           *    This function returns the status of the socket corresponding to
   1491           *    the cid.
   1492           * @param cid - IN the cid number
   1493           * @retval TRUE  - the socket opened for that cid.
   1494           * @retval FALSE - the socket not open for that cid.
   1495           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1496          PUBLIC UINT8
   1497          AppS2wHal_NetIsCidOpen(UINT8 cid)
   1498          {
   1499              return !(cid >= MAX_CID_RANGE || s2wCidList[cid].sd == CID_NOTINUSE);
   \                     AppS2wHal_NetIsCidOpen:
   \   00000000   0x2810             CMP      R0,#+16
   \   00000002   0xDA0B             BGE.N    ??AppS2wHal_NetIsCidOpen_0
   \   00000004   0xF44F 0x7194      MOV      R1,#+296
   \   00000008   0x.... 0x....      LDR.W    R2,??DataTable66
   \   0000000C   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   00000010   0x69C0             LDR      R0,[R0, #+28]
   \   00000012   0xF110 0x0F01      CMN      R0,#+1
   \   00000016   0xD001             BEQ.N    ??AppS2wHal_NetIsCidOpen_0
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x4770             BX       LR
   \                     ??AppS2wHal_NetIsCidOpen_0:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x4770             BX       LR               ;; return
   1500          }
   1501          
   1502          
   1503          /**
   1504           ******************************************************************
   1505           * @ingroup S2w-Application
   1506           * @brief s2w Network initialize function
   1507           *    This function create the network recv task and create queue for that
   1508                task.
   1509           * @retval VOID - None.
   1510           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1511          PUBLIC VOID
   1512          AppS2wHal_NetInit(VOID)
   1513          {
   \                     AppS2wHal_NetInit:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
   1514              UINT32 i;
   1515          
   1516              /* Mark all socket descriptor as 'not in use'.
   1517               */
   1518              for (i = 0; i < MAX_CID_RANGE; i++)
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x....             LDR.N    R4,??DataTable58
   1519              {
   1520                  s2wCidList[i].sd = CID_NOTINUSE;
   \                     ??AppS2wHal_NetInit_0:
   \   00000006   0xF44F 0x7194      MOV      R1,#+296
   \   0000000A   0xFB01 0x4100      MLA      R1,R1,R0,R4
   \   0000000E   0xF04F 0x32FF      MOV      R2,#-1
   \   00000012   0x61CA             STR      R2,[R1, #+28]
   1521                  s2wCidList[i].httpflag = 0;
   1522                  s2wCidList[i].localPort = 0;
   1523              }
   \   00000014   0x1C40             ADDS     R0,R0,#+1
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF881 0x202F      STRB     R2,[R1, #+47]
   \   0000001C   0x804A             STRH     R2,[R1, #+2]
   \   0000001E   0x2810             CMP      R0,#+16
   \   00000020   0xD3F1             BCC.N    ??AppS2wHal_NetInit_0
   1524              s2wappMainTaskCtxt->lastCidCreated = MAX_CID_RANGE-1;
   \   00000022   0x.... 0x....      LDR.W    R5,??DataTable69
   1525          
   1526              //AppS2wHal_TimerInit(&s2wTcpConnectTimer, AppS2wHal_ConnectTimeout, NULL);
   1527              //gh_eflags_create(&s2wTcpConnectEflags);
   1528          
   1529              GsnOsal_SemCreate  ( &s2wUdpSocketCloseSem, 0 );
   \   00000026   0x.... 0x....      LDR.W    R6,??DataTable72
   \   0000002A   0x6829             LDR      R1,[R5, #+0]
   \   0000002C   0xF647 0x70E8      MOVW     R0,#+32744
   \   00000030   0x220F             MOVS     R2,#+15
   \   00000032   0x5442             STRB     R2,[R0, R1]
   \   00000034   0x2100             MOVS     R1,#+0
   \   00000036   0x4630             MOV      R0,R6
   \   00000038   0x.... 0x....      BL       GsnOsal_SemCreate
   1530              //AppS2wHal_TimerInit(&s2wUdpCloseTimer, AppS2wHal_CloseTimeout, NULL);
   1531          
   1532              /* create the queue for the network receive task
   1533               */
   1534              GsnOsal_QueueCreate(&s2wNetQueue, 2,
   1535                                    (UINT8*)s2wNetQueueBuffer,
   1536                                    (sizeof(s2wNetQueueBuffer)));
   \   0000003C   0xF44F 0x7000      MOV      R0,#+512
   \   00000040   0x9000             STR      R0,[SP, #+0]
   \   00000042   0xF504 0x530A      ADD      R3,R4,#+8832
   \   00000046   0x2202             MOVS     R2,#+2
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0xF106 0x001C      ADD      R0,R6,#+28
   \   0000004E   0x.... 0x....      BL       _tx_queue_create
   1537          
   1538              /* create the network  receive task
   1539               */
   1540          
   1541              GsnOsal_ThreadCreate(AppS2wHal_NetRecvTask,s2wappMainTaskCtxt,
   1542                                          &s2wappMainTaskCtxt->s2wNetRxTask,
   1543                                          "s2wNetRecvtask",
   1544                                          APP_CFG_NET_RX_THREAD_PRIORITY,
   1545                                          s2wNetRecvTaskStack,
   1546                                          sizeof(s2wNetRecvTaskStack),
   1547                                          GSN_OSAL_THREAD_INITIAL_READY);
   \   00000052   0x2001             MOVS     R0,#+1
   \   00000054   0x9003             STR      R0,[SP, #+12]
   \   00000056   0xF44F 0x5080      MOV      R0,#+4096
   \   0000005A   0x9002             STR      R0,[SP, #+8]
   \   0000005C   0xF504 0x5094      ADD      R0,R4,#+4736
   \   00000060   0x9001             STR      R0,[SP, #+4]
   \   00000062   0x200A             MOVS     R0,#+10
   \   00000064   0x6829             LDR      R1,[R5, #+0]
   \   00000066   0x.... 0x....      ADR.W    R3,`?<Constant "s2wNetRecvtask">`
   \   0000006A   0x9000             STR      R0,[SP, #+0]
   \   0000006C   0xF501 0x42D0      ADD      R2,R1,#+26624
   \   00000070   0x32DC             ADDS     R2,R2,#+220
   \   00000072   0x.... 0x....      ADR.W    R0,AppS2wHal_NetRecvTask
   \   00000076   0x.... 0x....      BL       GsnOsal_ThreadCreate
   1548          
   1549          }
   \   0000007A   0xBD7F             POP      {R0-R6,PC}       ;; return
   1550          
   1551          
   1552          /**
   1553           ******************************************************************
   1554           * @ingroup S2w-Application
   1555           * @brief s2w Data receive task.
   1556           *    This task waits on a message queue.  The network stack callback function
   1557           *    will, when the event that data is available on a socket is received, send a
   1558           *    message to this message queue containing the socket descriptor.  This task
   1559           *    will receive the data from the socket and pass it on to the Serial2WiFi
   1560           *    core, which will output the data on the serial port.
   1561           *
   1562           *   The purpose of this task is to avoid doing too much work in the
   1563           *   network stack's callback function.
   1564           ******************************************************************/
   1565          extern GSN_OSAL_QUEUE_T MQTT_RECEIVE_QUEUE;

   \                                 In section .text, align 4, keep-with-next
   1566          VOID
   1567          AppS2wHal_NetRecvTask(UINT32 ctx)
   1568          {
   \                     AppS2wHal_NetRecvTask:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB097             SUB      SP,SP,#+92
   1569              INT32 dataLen=0,buffOfset,totalBytesToSnd;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9003             STR      R0,[SP, #+12]
   1570              UINT8 cid,newcid,status;
   1571              INT32 new_sd;
   1572              struct sockaddr_in addr;
   1573          #ifdef S2W_IPv6_SUPPORT
   1574              struct sockaddr_in6 fromAddr;
   1575              INT32 addrlen1 = sizeof(struct sockaddr_in6);
   1576              S2W_IPv6ADDR_T ipv6;
   1577          
   1578          #endif
   1579              INT32 addrlen = sizeof(struct sockaddr_in);//, ret;
   1580              
   1581              UINT16 port;
   1582              S2W_IPADDR_T ip;
   1583              S2W_MSG_T recvMsg;
   1584              UINT8 *rxDataBuf;
   1585              INT32 semStat;
   1586              UINT32 sentLen=0;
   1587          
   1588              //UINT8 status, *rcvBuf = NULL;
   1589              //UINT32 rcvLen;
   1590              INT32 ret;
   1591          #ifdef S2W_THROUGHPUT_TEST                       	
   1592          	UINT32 *seqNo;	
   1593          	GSN_SYSTEM_TIME_T endTime,totalTime;	
   1594          #endif	
   1595          #ifdef S2W_HTTPC_SUPPORT
   1596              ttHttpcConEntryPtr      conEntryPtr;
   1597          #ifndef S2W_IP2WIFI_SUPPORT
   1598          #ifdef S2W_HTTPS_SUPPORT
   1599          
   1600              UINT8 *rcvBuf = NULL;
   1601              UINT32 rcvLen;
   1602          #endif
   1603          #endif
   1604          #endif
   1605              //INT32 semStat;
   1606          	GSN_STATUS sslRet=GSN_FAILURE;
   1607          #ifndef S2W_IP2WIFI_SUPPORT
   1608              INT32 sslDataRxTimeout=5;
   \   0000000A   0xF04F 0x0905      MOV      R9,#+5
   \   0000000E   0x2010             MOVS     R0,#+16
   \   00000010   0x900C             STR      R0,[SP, #+48]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x900A             STR      R0,[SP, #+40]
   \   00000016   0xF04F 0x4000      MOV      R0,#-2147483648
   \   0000001A   0x9009             STR      R0,[SP, #+36]
   \   0000001C   0xE114             B.N      ??AppS2wHal_NetRecvTask_0
   1609          #endif
   1610              UINT8 socketRecvLoopCount=0;
   1611          	
   1612              while (1)
   1613          
   1614              {
   1615                  /* Task done with job, stop monitoring */
   1616                  /*GsnSq_TaskMonitorEnd( APP_SQ_NET_RX_TASK_ID);*/
   1617          
   1618                  GsnOsal_QueueGet(&s2wNetQueue, (UINT8 *)&recvMsg, GSN_OSAL_WAIT_FOREVER);
   1619                  /* Task starting to process a job, start monitoring */
   1620                  switch (recvMsg.msgType)
   1621                  {
   1622          			case S2W_RECV_TYPE_SOCK_DATA_DISCONNECT:
   1623                      case S2W_RECV_TYPE_SOCKET:
   1624                      {
   1625                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   1626                          if (cid == INVALID_CID)
   1627                          {
   1628                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   1629                              	continue;
   1630          					#else
   1631          						break;
   1632          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   1633                          }
   1634                          S2W_ASSERT(s2wCidList[cid].conType != 0);
   1635          
   1636          					INT32 intrStatus;
   1637          
   1638          					intrStatus = GsnOsal_IntrDisable();
   1639          					s2wCidList[cid].s2wSockDataPending = 0;
   1640          					/*re-enable all interrupts */
   1641                              GsnOsal_IntrEnable(intrStatus );
   1642                              socketRecvLoopCount=0;
   1643                          do
   1644                          {
   1645                              socketRecvLoopCount++;
   1646                              GsnSq_TaskMonitorStart(APP_CFG_SQ_NETRX_TASK_ID, cid);
   1647                              if (s2wCidList[cid].conType == UDP)
   1648                              {
   1649          #ifdef S2W_IPv6_SUPPORT                              
   1650                                if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1651                                  dataLen = recvfrom(recvMsg.rData.dataSock,(char *)s2wRxBuf,sizeof(s2wRxBuf), 0,(struct sockaddr *) &fromAddr, &addrlen1);
   1652                                else
   1653          #endif //S2W_IPv6_SUPPORT
   1654          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1655                        			if (s2wCidList[cid].sslflag == TRUE /*&& (dataLen > 0)*/)
   1656                                  {
   1657                                      dataLen = sizeof(s2wRxBuf);
   1658                                      addrlen = sizeof(struct sockaddr_in);
   1659                        			    GsnDtls_Receive( (GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn,
   1660                        				    /*rxDataBuf*/s2wRxBuf, (UINT32*)&dataLen, 0/*MSG_DONTWAIT*/,
   1661                        				    (struct sockaddr *)&addr, &addrlen );
   1662                        			}
   1663                        			else
   1664          #endif
   1665                                  dataLen = recvfrom(recvMsg.rData.dataSock, (char *)s2wRxBuf,
   1666                                            sizeof(s2wRxBuf), 0,
   1667                                            (struct sockaddr *)&addr, &addrlen);
   1668          
   1669                                  if (dataLen > 0)
   1670                                  {
   1671                                      if( s2wCidList[cid].conMode == S2W_NETDATA_MODE_SERVER)
   1672                                      {
   1673          #ifdef S2W_IPv6_SUPPORT                              
   1674                                        if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1675                                        {
   1676                                          //port = ntohs(fromAddr.sin6_port);
   1677                                          port = htons(fromAddr.sin6_port);
   1678                                          memcpy(ipv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   1679                                          GSN_IPv6_CHANGE_ENDIAN((UINT32 *)ipv6);
   1680                                        }
   1681                                        else
   1682          #endif //S2W_IPv6_SUPPORT                                
   1683                                        {                                
   1684                                          port = htons(addr.sin_port);
   1685                                          memcpy(ip, &(addr.sin_addr.s_addr), sizeof(ip));
   1686                                          *(ULONG*)ip = htonl(*(ULONG*)ip);
   1687                                        }
   1688                                      }
   1689                                      else  /* Client  */
   1690                                      {
   1691          #ifdef S2W_IPv6_SUPPORT
   1692                                        if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)  /* IPv6 */
   1693                                        {
   1694                                          //if(!memcmp(s2wCidList[cid].remoteIpv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(fromAddr.sin6_addr._S6_un._S6_u32)))
   1695                                          {
   1696                                            //port = ntohs(fromAddr.sin6_port);
   1697                                            port = htons(fromAddr.sin6_port);
   1698                                            memcpy(ipv6,fromAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   1699                                            GSN_IPv6_CHANGE_ENDIAN(ipv6);
   1700                                          }
   1701                                                                          
   1702                                        }
   1703                                        else 
   1704                                        
   1705          #endif  //S2W_IPv6_SUPPORT
   1706                                        {
   1707          
   1708                                              //port = ntohs(addr.sin_port);
   1709                                          port = 0;
   \                     ??AppS2wHal_NetRecvTask_1:
   \   0000001E   0x2400             MOVS     R4,#+0
   1710                                              //memcpy(ip, &(addr.sin_addr.s_addr), sizeof(ip));
   1711                                              //*(ULONG*)ip = htonl(*(ULONG*)ip);
   1712                                          *(ULONG*)ip=0;
   \   00000020   0x9402             STR      R4,[SP, #+8]
   1713                                          }
   1714          
   1715                                        }
   1716                                      }
   1717                                  }
   1718                              else
   1719                              {
   1720          #ifndef S2W_IP2WIFI_SUPPORT
   1721                                  /*dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf,
   1722                                  sizeof(s2wRxBuf), MSG_DONTWAIT);*/
   1723                                  port = 0;
   1724          
   1725                                  if (s2wCidList[cid].sslflag == TRUE /*&& (dataLen > 0)*/)
   1726                                  {
   1727          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1728          //#if 0
   1729                                      s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   1730          #ifdef S2W_SSL_SERVER_SUPPORT
   1731          							if(TRUE == s2wCidList[cid].sslRemoteCliConctng)
   1732          							{
   1733          								/* a Remote client is setting up the ssl connection with tcp server.
   1734          								  ssl connenction is done in WDD task context*/
   1735          								//UINT32 msg;
   1736          								GSN_SSL_RECV_PARAMS_T sslRecvParams;
   1737          								sslRecvParams.pSslConn = s2wCidList[cid].ssl.sslConn;
   1738          								sslRecvParams.sockDes = s2wCidList[cid].sd;
   1739          								sslRecvParams.rxDataBuf = &rxDataBuf;
   1740          								sslRecvParams.rxDataLen = (UINT32 *)&dataLen;
   1741          								sslRecvParams.timeOut = 5;
   1742          								//GsnOsal_SemCreate(&s2wCidList[cid].s2wSslRecvInProgress, 0);
   1743          								s2wCidList[cid].pSslRecvParams = &sslRecvParams;
   1744          								//msg = (S2W_MOD_NOTIF_CONN_START + cid);
   1745          								//GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   1746          								//GsnOsal_SemAcquire(&s2wCidList[cid].s2wSslRecvInProgress,GSN_OSAL_WAIT_FOREVER);
   1747          								ret = s2wCidList[cid].recvStatus;
   1748          								//GsnOsal_SemDelete(&s2wCidList[cid].s2wSslRecvInProgress);
   1749          								port = htons(s2wCidList[cid].remotePort);
   1750          								memcpy(ip, &(s2wCidList[cid].remoteIp), sizeof(ip));
   1751          								*(UINT32*)ip = htonl(*(UINT32*)ip);
   1752          								ret = AppS2wProcess_NetAccept(s2wCidList[cid].serverCid,
   1753          															  cid, ip,port);
   1754          						        if (ret != S2W_SUCCESS)
   1755          						        {
   1756          						            soc_close(s2wCidList[cid].sd);
   1757          						            return;
   1758          						        }
   1759          #if 1
   1760                                      	ret = GsnSsl_DataReceive(s2wCidList[cid].ssl.sslConn,
   1761                                                                   s2wCidList[cid].sd,
   1762                                                                   &rxDataBuf,
   1763                                                                   (UINT32 *)&dataLen,
   1764                                                                   5);
   1765          #endif
   1766          								s2wCidList[cid].sslRemoteCliConctng = FALSE;
   1767          							}
   1768          							else
   1769          #endif
   1770          							{
   1771          								if(0 == sslDataRxTimeout)
   1772          								{
   1773          									/* if the timeout is zero, make the socket as non blocking*/
   1774          									fcntl(s2wCidList[cid].sd, F_SETFL, O_NONBLOCK);
   1775          								}
   1776                                          
   1777                                      	sslRet = GsnSsl_DataReceive(s2wCidList[cid].ssl.sslConn,
   1778                                                                   s2wCidList[cid].sd,
   1779                                                                   &rxDataBuf,
   1780                                                                   (UINT32 *)&dataLen,
   1781                                                                   sslDataRxTimeout);
   1782                                                             
   1783          #ifdef THINGPLUS
   1784          								if(rxDataBuf[0] == 0x20 || rxDataBuf[0] == 0x40 || rxDataBuf[0] == 0x50 || rxDataBuf[0] == 0x70 || rxDataBuf[0] == 0x90 || rxDataBuf[0] == 0xB0 || rxDataBuf[0] == 0xD0)
   1785          								{
   1786                                           
   1787          		
   1788          								  S2w_Printf("\r\n Receive Data rxDataBuf : %x %x %x %x",rxDataBuf[0],rxDataBuf[1],rxDataBuf[2],rxDataBuf[3]);
   1789          								  S2w_Printf("\r\n QUEUE COUNT 1 : %d",MQTT_RECEIVE_QUEUE.tx_queue_available_storage);
   1790          								  status = tx_queue_send(&MQTT_RECEIVE_QUEUE, rxDataBuf, TX_NO_WAIT);
   1791          								  
   1792          								}
   1793          #endif
   1794          								if(0 == sslDataRxTimeout)
   1795          								{
   1796          									/*restore back to blocking*/
   1797          									fcntl(s2wCidList[cid].sd, F_SETFL, 0);
   1798          								}
   1799          							}
   1800                                      if(sslRet != GSN_SUCCESS)
   1801                                      {/*Error!*/
   1802                                      	dataLen = 0;/*Need to set explicitely as DataReceive() does not do so*/
   1803                                      }
   1804          							sslDataRxTimeout=1;
   1805          #endif
   1806                                  }
   1807                                  else if(s2wCidList[cid].httpflag ==  1)
   1808                                  { /* This section should be executed when http send not in progress.
   1809                                       This is ensured by opInProgress semophore */
   1810          #ifdef S2W_HTTPS_SUPPORT
   1811                                      conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   1812                                      semStat = GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_NO_WAIT);
   1813                                      if((semStat == GSN_OSAL_SUCCESS) && (conEntryPtr->hconHttpType == GSN_HTTPS))
   1814                                      {
   1815                                          /* http send not in progress. Docode the data recieved */
   1816                                          ret = GsnHttps_DataReceive(conEntryPtr->hConSsl, s2wCidList[cid].sd, &rcvBuf, &rcvLen, 5);
   1817                                          if(rcvBuf != NULL)
   1818                                          {
   1819                                              GsnSsl_Free(rcvBuf);
   1820                                          }
   1821                                          if(ret == GSN_SSL_CLOSE_ALERT)
   1822                                          {
   1823                                              /* Recieved data is a Close alert. Send the alert back to server */
   1824                                              GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   1825          
   1826                                          }
   1827          
   1828                                      }
   1829                                      dataLen = 0;
   1830                                      if(semStat == GSN_OSAL_SUCCESS)
   1831                                      {
   1832                                          GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   1833                                      }
   1834          #endif
   1835                                  }
   1836          
   1837                                  else
   1838                                  {
   1839                                    
   1840          #ifdef S2W_IPv6_SUPPORT
   1841                                    if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1842                                      dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf,sizeof(s2wRxBuf), 0);
   1843                                    else
   1844          #endif //S2W_IPv6_SUPPORT 
   1845          						  {
   1846                                      dataLen = recv(recvMsg.rData.dataSock, (char *)s2wRxBuf, sizeof(s2wRxBuf), 0);
   1847          						  }
   1848                                  }
   1849          #endif
   1850                              }
   1851                              if (dataLen <= 0)
   1852                              {
   1853                                  S2w_Debug("Data len: %d\r\n", dataLen);
   1854          						if(s2wCidList[cid].sslflag == TRUE && (sslRet == GSN_SUCCESS))
   1855          							dataLen=1;
   1856                              }
   1857                              else
   1858                              {
   1859                                  if((s2wCidList[cid].sslflag == TRUE) && (s2wCidList[cid].conType == TCP))
   \                     ??AppS2wHal_NetRecvTask_2:
   \   00000022   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_78:
   \   00000026   0xBF01             ITTTT    EQ 
   \   00000028   0x9808             LDREQ    R0,[SP, #+32]
   \   0000002A   0x.... 0x....      LDREQ.W  R1,??DataTable66
   \   0000002E   0x5C40             LDRBEQ   R0,[R0, R1]
   \   00000030   0x2802             CMPEQ    R0,#+2
   \   00000032   0xF040 0x80C2      BNE.W    ??AppS2wHal_NetRecvTask_3
   1860                                  {
   1861                                  	totalBytesToSnd = dataLen;
   \   00000036   0xF8DD 0xA00C      LDR      R10,[SP, #+12]
   1862                                  	buffOfset=0;
   \   0000003A   0xF04F 0x0B00      MOV      R11,#+0
   1863                                 		while(totalBytesToSnd)
   1864                                 		{
   1865                                 			GsnSq_TaskMonitorStop( APP_CFG_SQ_NETRX_TASK_ID);
   \                     ??AppS2wHal_NetRecvTask_4:
   \   0000003E   0x2009             MOVS     R0,#+9
   \   00000040   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1866          								GsnSq_TaskMonitorStart(APP_CFG_SQ_NETRX_TASK_ID, cid);
   \   00000044   0x4641             MOV      R1,R8
   \   00000046   0x2009             MOVS     R0,#+9
   \   00000048   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   1867          								sentLen =totalBytesToSnd >= S2W_RX_BUF_SIZE? S2W_RX_BUF_SIZE:totalBytesToSnd;
   \   0000004C   0xF240 0x50DC      MOVW     R0,#+1500
   \   00000050   0x4582             CMP      R10,R0
   \   00000052   0xBFAC             ITE      GE 
   \   00000054   0x9001             STRGE    R0,[SP, #+4]
   \   00000056   0xF8CD 0xA004      STRLT    R10,[SP, #+4]
   \   0000005A   0xE09D             B.N      ??AppS2wHal_NetRecvTask_5
   \                     ??AppS2wHal_NetRecvTask_6:
   \   0000005C   0xF895 0x002C      LDRB     R0,[R5, #+44]
   \   00000060   0x2400             MOVS     R4,#+0
   \   00000062   0x2801             CMP      R0,#+1
   \   00000064   0xD158             BNE.N    ??AppS2wHal_NetRecvTask_7
   \   00000066   0x6A78             LDR      R0,[R7, #+36]
   \   00000068   0x8204             STRH     R4,[R0, #+16]
   \   0000006A   0x7870             LDRB     R0,[R6, #+1]
   \   0000006C   0x2801             CMP      R0,#+1
   \   0000006E   0xD12F             BNE.N    ??AppS2wHal_NetRecvTask_8
   \   00000070   0x6A78             LDR      R0,[R7, #+36]
   \   00000072   0x900D             STR      R0,[SP, #+52]
   \   00000074   0x2204             MOVS     R2,#+4
   \   00000076   0x69B8             LDR      R0,[R7, #+24]
   \   00000078   0x900E             STR      R0,[SP, #+56]
   \   0000007A   0xA807             ADD      R0,SP,#+28
   \   0000007C   0x900F             STR      R0,[SP, #+60]
   \   0000007E   0xA803             ADD      R0,SP,#+12
   \   00000080   0x9010             STR      R0,[SP, #+64]
   \   00000082   0x2005             MOVS     R0,#+5
   \   00000084   0x9011             STR      R0,[SP, #+68]
   \   00000086   0xA80D             ADD      R0,SP,#+52
   \   00000088   0xF8C5 0x0110      STR      R0,[R5, #+272]
   \   0000008C   0x88A8             LDRH     R0,[R5, #+4]
   \   0000008E   0x0201             LSLS     R1,R0,#+8
   \   00000090   0xEA41 0x2410      ORR      R4,R1,R0, LSR #+8
   \   00000094   0x1DA9             ADDS     R1,R5,#+6
   \   00000096   0xA802             ADD      R0,SP,#+8
   \   00000098   0x.... 0x....      BL       memcpy
   \   0000009C   0x.... 0x....      BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_81:
   \   000000A0   0xB2A3             UXTH     R3,R4
   \   000000A2   0x78B0             LDRB     R0,[R6, #+2]
   \   000000A4   0xAA02             ADD      R2,SP,#+8
   \   000000A6   0x4641             MOV      R1,R8
   \   000000A8   0x.... 0x....      BL       AppS2wProcess_NetAccept
   \   000000AC   0xB128             CBZ.N    R0,??AppS2wHal_NetRecvTask_9
   \   000000AE   0x69B8             LDR      R0,[R7, #+24]
   \   000000B0   0x.... 0x....      BL       soc_close
   \   000000B4   0xB017             ADD      SP,SP,#+92
   \   000000B6   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   \                     ??AppS2wHal_NetRecvTask_9:
   \   000000BA   0x2005             MOVS     R0,#+5
   \   000000BC   0x9000             STR      R0,[SP, #+0]
   \   000000BE   0xAB03             ADD      R3,SP,#+12
   \   000000C0   0x69B9             LDR      R1,[R7, #+24]
   \   000000C2   0x6A78             LDR      R0,[R7, #+36]
   \   000000C4   0xAA07             ADD      R2,SP,#+28
   \   000000C6   0x.... 0x....      BL       GsnSsl_DataReceive
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x7070             STRB     R0,[R6, #+1]
   \   000000CE   0xE019             B.N      ??AppS2wHal_NetRecvTask_10
   \                     ??AppS2wHal_NetRecvTask_8:
   \   000000D0   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000D4   0xD105             BNE.N    ??AppS2wHal_NetRecvTask_11
   \   000000D6   0xF44F 0x4280      MOV      R2,#+16384
   \   000000DA   0x69B8             LDR      R0,[R7, #+24]
   \   000000DC   0x2104             MOVS     R1,#+4
   \   000000DE   0x.... 0x....      BL       fcntl
   \                     ??AppS2wHal_NetRecvTask_11:
   \   000000E2   0xF8CD 0x9000      STR      R9,[SP, #+0]
   \   000000E6   0x69B9             LDR      R1,[R7, #+24]
   \   000000E8   0x6A78             LDR      R0,[R7, #+36]
   \   000000EA   0xAB03             ADD      R3,SP,#+12
   \   000000EC   0xAA07             ADD      R2,SP,#+28
   \   000000EE   0x.... 0x....      BL       GsnSsl_DataReceive
   \   000000F2   0x9009             STR      R0,[SP, #+36]
   \   000000F4   0xF1B9 0x0F00      CMP      R9,#+0
   \   000000F8   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_10
   \   000000FA   0x69B8             LDR      R0,[R7, #+24]
   \   000000FC   0x2200             MOVS     R2,#+0
   \   000000FE   0x2104             MOVS     R1,#+4
   \   00000100   0x.... 0x....      BL       fcntl
   \                     ??AppS2wHal_NetRecvTask_10:
   \   00000104   0x9809             LDR      R0,[SP, #+36]
   \   00000106   0xB120             CBZ.N    R0,??AppS2wHal_NetRecvTask_12
   \   00000108   0x2000             MOVS     R0,#+0
   \   0000010A   0x9003             STR      R0,[SP, #+12]
   \   0000010C   0xF04F 0x0901      MOV      R9,#+1
   \   00000110   0xE079             B.N      ??CrossCallReturnLabel_112
   \                     ??AppS2wHal_NetRecvTask_12:
   \   00000112   0xF04F 0x0901      MOV      R9,#+1
   \   00000116   0xE032             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_7:
   \   00000118   0x78F0             LDRB     R0,[R6, #+3]
   \   0000011A   0x2801             CMP      R0,#+1
   \   0000011C   0xD126             BNE.N    ??AppS2wHal_NetRecvTask_14
   \   0000011E   0x68B0             LDR      R0,[R6, #+8]
   \   00000120   0xF850 0xAB30      LDR      R10,[R0], #+48
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   0000012A   0xB9E8             CBNZ.N   R0,??AppS2wHal_NetRecvTask_15
   \   0000012C   0xF8DA 0x00BC      LDR      R0,[R10, #+188]
   \   00000130   0x2801             CMP      R0,#+1
   \   00000132   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_16
   \                     ??AppS2wHal_NetRecvTask_17:
   \   00000134   0x9403             STR      R4,[SP, #+12]
   \   00000136   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_90:
   \   0000013A   0xE020             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_16:
   \   0000013C   0x2005             MOVS     R0,#+5
   \   0000013E   0x9000             STR      R0,[SP, #+0]
   \   00000140   0xAB0B             ADD      R3,SP,#+44
   \   00000142   0x69B9             LDR      R1,[R7, #+24]
   \   00000144   0xF8DA 0x00B8      LDR      R0,[R10, #+184]
   \   00000148   0xAA0A             ADD      R2,SP,#+40
   \   0000014A   0x.... 0x....      BL       GsnHttps_DataReceive
   \   0000014E   0x4682             MOV      R10,R0
   \   00000150   0x980A             LDR      R0,[SP, #+40]
   \   00000152   0xB108             CBZ.N    R0,??AppS2wHal_NetRecvTask_18
   \   00000154   0x.... 0x....      BL       GsnSsl_Free
   \                     ??AppS2wHal_NetRecvTask_18:
   \   00000158   0x.... 0x....      LDR.W    R0,??DataTable74  ;; 0xb0000600
   \   0000015C   0x4582             CMP      R10,R0
   \   0000015E   0xD1E9             BNE.N    ??AppS2wHal_NetRecvTask_17
   \   00000160   0x68B0             LDR      R0,[R6, #+8]
   \   00000162   0x.... 0x....      BL       ??Subroutine41_0
   \                     ??CrossCallReturnLabel_109:
   \   00000166   0xE7E5             B.N      ??AppS2wHal_NetRecvTask_17
   \                     ??AppS2wHal_NetRecvTask_15:
   \   00000168   0x9403             STR      R4,[SP, #+12]
   \   0000016A   0xE00C             B.N      ??AppS2wHal_NetRecvTask_19
   \                     ??AppS2wHal_NetRecvTask_14:
   \   0000016C   0x9805             LDR      R0,[SP, #+20]
   \   0000016E   0x.... 0x....      LDR.W    R1,??DataTable74_1
   \   00000172   0x2300             MOVS     R3,#+0
   \   00000174   0xF240 0x52DC      MOVW     R2,#+1500
   \   00000178   0x.... 0x....      BL       recv
   \   0000017C   0x9003             STR      R0,[SP, #+12]
   \                     ??AppS2wHal_NetRecvTask_13:
   \   0000017E   0x9803             LDR      R0,[SP, #+12]
   \   00000180   0x2801             CMP      R0,#+1
   \   00000182   0xF6BF 0xAF4E      BGE.W    ??AppS2wHal_NetRecvTask_2
   \                     ??AppS2wHal_NetRecvTask_19:
   \   00000186   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_79:
   \   0000018A   0xBF04             ITT      EQ 
   \   0000018C   0x9809             LDREQ    R0,[SP, #+36]
   \   0000018E   0x2800             CMPEQ    R0,#+0
   \   00000190   0xD139             BNE.N    ??CrossCallReturnLabel_112
   \   00000192   0x2001             MOVS     R0,#+1
   \   00000194   0x9003             STR      R0,[SP, #+12]
   \   00000196   0xE036             B.N      ??CrossCallReturnLabel_112
   1868                                  		AppS2wProcess_NetRx(cid, (rxDataBuf+buffOfset), sentLen, 
   1869          														(UINT8*)ip, port);
   \                     ??AppS2wHal_NetRecvTask_5:
   \   00000198   0x9807             LDR      R0,[SP, #+28]
   \   0000019A   0x9A01             LDR      R2,[SP, #+4]
   \   0000019C   0xB2A4             UXTH     R4,R4
   \   0000019E   0xEB0B 0x0100      ADD      R1,R11,R0
   \   000001A2   0x.... 0x....      BL       ?Subroutine42
   1870            								buffOfset += sentLen;
   \                     ??CrossCallReturnLabel_113:
   \   000001A6   0x9801             LDR      R0,[SP, #+4]
   \   000001A8   0x4483             ADD      R11,R0,R11
   1871          								totalBytesToSnd -= sentLen;                        		
   \   000001AA   0xEBBA 0x0A00      SUBS     R10,R10,R0
   1872                                  	}
   \   000001AE   0xF47F 0xAF46      BNE.W    ??AppS2wHal_NetRecvTask_4
   1873                                      GsnSsl_Free(rxDataBuf);
   \   000001B2   0x9807             LDR      R0,[SP, #+28]
   \   000001B4   0x.... 0x....      BL       GsnSsl_Free
   \   000001B8   0xE025             B.N      ??CrossCallReturnLabel_112
   1874                                  }
   \                     ??AppS2wHal_NetRecvTask_3:
   \   000001BA   0x.... 0x....      LDR.W    R0,??DataTable74_1
   \   000001BE   0x7801             LDRB     R1,[R0, #+0]
   \   000001C0   0x2920             CMP      R1,#+32
   \   000001C2   0xBF18             IT       NE 
   \   000001C4   0x2940             CMPNE    R1,#+64
   \   000001C6   0xD008             BEQ.N    ??AppS2wHal_NetRecvTask_20
   \   000001C8   0x2950             CMP      R1,#+80
   \   000001CA   0xBF18             IT       NE 
   \   000001CC   0x2970             CMPNE    R1,#+112
   \   000001CE   0xD004             BEQ.N    ??AppS2wHal_NetRecvTask_20
   \   000001D0   0x2990             CMP      R1,#+144
   \   000001D2   0xBF1C             ITT      NE 
   \   000001D4   0x29B0             CMPNE    R1,#+176
   \   000001D6   0x29D0             CMPNE    R1,#+208
   \   000001D8   0xD10F             BNE.N    ??AppS2wHal_NetRecvTask_21
   1875          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   1876                                  else if((s2wCidList[cid].sslflag == TRUE) && (s2wCidList[cid].conType == UDP))
   1877                                  {
   1878                                      /* For DTLS client*/
   1879                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ip, port);
   1880                                      dataLen = 0;
   1881          							GsnSsl_Free(rxDataBuf);
   1882                                  }
   1883          #endif
   1884                                  else
   1885                                  {
   1886          #ifdef LOCAL
   1887          							if(s2wRxBuf[0] == 0x20 || s2wRxBuf[0] == 0x40 || s2wRxBuf[0] == 0x50 || s2wRxBuf[0] == 0x70 || s2wRxBuf[0] == 0x90 || s2wRxBuf[0] == 0xB0 || s2wRxBuf[0] == 0xD0)
   1888          							{
   1889                                            S2w_Printf("\r\n Receive Data s2wRxBuf : %x %x %x %x",s2wRxBuf[0],s2wRxBuf[1],s2wRxBuf[2],s2wRxBuf[3]);
   \                     ??AppS2wHal_NetRecvTask_20:
   \   000001DA   0x78C0             LDRB     R0,[R0, #+3]
   \   000001DC   0x9000             STR      R0,[SP, #+0]
   \   000001DE   0x.... 0x....      LDR.W    R0,??DataTable74_1
   \   000001E2   0x7883             LDRB     R3,[R0, #+2]
   \   000001E4   0x7842             LDRB     R2,[R0, #+1]
   \   000001E6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n Receive Data s2wRx...">`
   \   000001EA   0x.... 0x....      BL       S2w_Printf
   1890          								  GsnOsal_QueuePut(&MQTT_RECEIVE_QUEUE, s2wRxBuf);
   \   000001EE   0x.... 0x....      LDR.W    R1,??DataTable74_1
   \   000001F2   0x.... 0x....      LDR.W    R0,??DataTable75
   \   000001F6   0x.... 0x....      BL       GsnOsal_QueuePut
   1891          								  //status = tx_queue_send(&MQTT_RECEIVE_QUEUE, s2wRxBuf, TX_NO_WAIT);
   1892          							}
   1893          #endif
   1894          #ifdef S2W_THROUGHPUT_TEST                       
   1895                                  	if(s2wCidList[cid].tpTestInProgress == 0)	
   1896                                  	{
   1897          #endif                        	
   1898          #ifdef S2W_IPv6_SUPPORT
   1899                                    if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1900                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ipv6, port);
   1901                                    else
   1902          						  
   1903          #endif
   1904          						  {
   1905                                      AppS2wProcess_NetRx(cid, s2wRxBuf, dataLen, (UINT8*)ip, port);
   \                     ??AppS2wHal_NetRecvTask_21:
   \   000001FA   0x9A03             LDR      R2,[SP, #+12]
   \   000001FC   0x.... 0x....      LDR.W    R1,??DataTable74_1
   \   00000200   0xB2A4             UXTH     R4,R4
   \   00000202   0x.... 0x....      BL       ?Subroutine42
   1906          						  }
   1907          #ifdef S2W_THROUGHPUT_TEST                       
   1908                                  	}
   1909          							else
   1910          							{
   1911          								if(s2wCidList[cid].stats.packetsReceived== 0)
   1912          								{
   1913          									s2wCidList[cid].stats.startTime = GsnSoftTmr_CurrentSystemTime();										
   1914          								}
   1915          								//dataPattern = (UINT32 *)&s2wRxBuf[8];		
   1916          								if(s2wCidList[cid].conType == UDP)
   1917          								{
   1918          									seqNo= (UINT32 *)&s2wRxBuf[0];																
   1919          									if(s2wCidList[cid].stats.udpNxtSeqNo  !=  *seqNo )
   1920          										s2wCidList[cid].stats.rxErr += (*seqNo - s2wCidList[cid].stats.udpNxtSeqNo);
   1921          									s2wCidList[cid].stats.udpNxtSeqNo =  *seqNo + 1; 
   1922          									s2wCidList[cid].stats.packetsReceived++;
   1923          									s2wCidList[cid].stats.bytesReceived += dataLen;										
   1924          								}
   1925          								else
   1926          								{
   1927          									s2wCidList[cid].stats.packetsReceived++;
   1928          									s2wCidList[cid].stats.bytesReceived += dataLen;
   1929          								}
   1930          								if(s2wCidList[cid].testMode == 4)
   1931          								{
   1932          									endTime = GsnSoftTmr_CurrentSystemTime();									
   1933          									totalTime = SYSTIME_TO_SEC(endTime - s2wCidList[cid].stats.startTime);
   1934          									s2wCidList[cid].stats.totalTime=totalTime;
   1935          								}
   1936          								else if(s2wCidList[cid].bytesToReceive == s2wCidList[cid].stats.bytesReceived)
   1937          								{
   1938          									endTime = GsnSoftTmr_CurrentSystemTime();									
   1939          									totalTime = SYSTIME_TO_SEC(endTime - s2wCidList[cid].stats.startTime);
   1940          									if(s2wCidList[cid].conType == UDP)
   1941          									{
   1942          									    S2w_Printf("\r\n Packet Received  : %d",s2wCidList[cid].stats.packetsReceived);
   1943          										S2w_Printf("\r\n Packet Lost      : %d",s2wCidList[cid].stats.rxErr);
   1944          									}
   1945          									else
   1946          									{
   1947          										S2w_Printf("\r\n Bytes Received   : %lld",s2wCidList[cid].stats.bytesReceived); 
   1948          									}									
   1949          									S2w_Printf("\r\n Total Time Taken : %lld sec",totalTime);																		
   1950          									S2w_Printf("\r\n Throuhput        : %lld Kbps",((s2wCidList[cid].stats.bytesReceived*8)/(1024*totalTime)));										
   1951          									s2wCidList[cid].tpTestInProgress=0;										
   1952          									if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   1953          									{
   1954          									    s2wSpiFs_Flush();
   1955                                              }
   1956          								}
   1957                                  	}
   1958          #endif                          						
   1959                                  }
   1960                              }
   1961                              GsnSq_TaskMonitorStop( APP_CFG_SQ_NETRX_TASK_ID);
   \                     ??CrossCallReturnLabel_112:
   \   00000206   0x2009             MOVS     R0,#+9
   \   00000208   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   1962                          }while((dataLen>0) && (socketRecvLoopCount<s2wCurrent.socRdCnt)); // max three packets read at a time, if data pending schedule the
   \   0000020C   0x9803             LDR      R0,[SP, #+12]
   \   0000020E   0x2801             CMP      R0,#+1
   \   00000210   0xF2C0 0x8083      BLT.W    ??AppS2wHal_NetRecvTask_22
   \   00000214   0x.... 0x....      LDR.W    R1,??DataTable65
   \   00000218   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   0000021C   0xF891 0x13C0      LDRB     R1,[R1, #+960]
   \   00000220   0x4288             CMP      R0,R1
   \   00000222   0xD34A             BCC.N    ??AppS2wHal_NetRecvTask_23
   \   00000224   0xF105 0x0090      ADD      R0,R5,#+144
   \   00000228   0x7840             LDRB     R0,[R0, #+1]
   \   0000022A   0x2800             CMP      R0,#+0
   \   0000022C   0xD175             BNE.N    ??AppS2wHal_NetRecvTask_22
   1963                                                                          // task again so that data from other socket not get delayed.
   1964          
   1965                          // post a msg to its own
   1966                          if((dataLen > 0) && (s2wCidList[cid].s2wSockDataPending == 0))
   1967                          {
   1968          
   1969                              intrStatus = GsnOsal_IntrDisable();
   \   0000022E   0x.... 0x....      BL       GsnOsal_IntrDisable
   1970                              s2wCidList[cid].s2wSockDataPending = 1;
   \   00000232   0xF105 0x0190      ADD      R1,R5,#+144
   \   00000236   0x2201             MOVS     R2,#+1
   \   00000238   0x704A             STRB     R2,[R1, #+1]
   1971                              /*re-enable all interrupts */
   1972                              GsnOsal_IntrEnable(intrStatus );
   \   0000023A   0x.... 0x....      BL       GsnOsal_IntrEnable
   1973                              GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   1974                              break;
   1975          			    }
   1976          
   1977                          if(S2W_RECV_TYPE_SOCK_DATA_DISCONNECT == recvMsg.msgType)
   1978          
   1979                          {
   1980          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   1981          //#if 0
   1982                              if (s2wCidList[cid].sslflag == TRUE)
   1983                              {
   1984                                  if(s2wCidList[cid].s2wUsrCloseFlag)
   1985                                  {
   1986                                      /* stop the http close waiting timer */
   1987          							if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   1988          							{
   1989          							  	/* release the semaphore so the close can finish */
   1990          								GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   1991          							}
   1992          
   1993          							#ifdef S2W_SEPARATE_NET_RX_TASK
   1994                                      	continue;/*!! Donot remove this*/
   1995          							#else
   1996          								break; /*!! Do not remove this*/
   1997          							#endif/*S2W_SEPARATE_NET_RX_TASK*/
   1998                                  }
   1999          						/* Close is not initialted by user. s2wCidList[cid].s2wUsrCloseFlag = 0
   2000          						That's why we are here*/
   2001          					   	GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   2002          
   2003                              }
   2004          #else
   2005          					if(0)
   2006          					{
   2007                              }
   2008          #endif      					
   2009          #ifdef S2W_HTTPC_SUPPORT
   2010          					else if(s2wCidList[cid].httpflag && s2wCidList[cid].pHttpData)
   2011          					{
   2012          
   2013          #ifdef S2W_HTTPS_SUPPORT
   2014                                  conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2015          						if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   2016          						{
   2017          							/* stop the http close waiting timer */
   2018          							if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2019          							{
   2020          								/* release the semaphore so the close can finish */
   2021          								GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2022          							}
   2023          
   2024          							#ifdef S2W_SEPARATE_NET_RX_TASK
   2025                                      	continue;
   2026          							#else
   2027          								break;
   2028          							#endif/*S2W_SEPARATE_NET_RX_TASK*/
   2029          						}
   2030          						/* Close is not initialted by user. s2wCidList[cid].s2wUsrCloseFlag = 0
   2031          						That's why we are here*/
   2032          						if(conEntryPtr->hconHttpType == GSN_HTTPS)
   2033          						{
   2034          							GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2035          							GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   2036          							GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   2037          						}
   2038          #endif /*S2W_HTTPS_SUPPORT*/
   2039          						if(s2wCidList[cid].httpflag && s2wCidList[cid].pHttpData && s2wCidList[cid].pHttpData->httpType == GSN_HTTP)
   2040          						{
   2041          							GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2042          							/* opInProgress semaphore will be deleted in AppS2wHal_NetClose, release it here */
   2043          							GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   2044          						}
   2045          					}
   2046          
   2047          #endif
   2048          
   2049          					status = AppS2wHal_NetClose(cid);
   2050          					if(s2wCidList[cid].s2wUsrCloseFlag == 0 && status == S2W_SUCCESS)
   2051          					{
   2052          /* Check the L2 connection exists
   2053              Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2054          */						
   2055          						if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   2056          						{
   2057          							break;
   2058          						}
   2059          											
   2060              	                GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2061          #ifdef S2W_ASYNC_MSG
   2062          						if(s2wCurrent.asyncMsgFormat)
   2063          						{
   2064          							AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   2065          						}
   2066          						else
   2067          #endif
   2068                             		{
   2069                                  	AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   2070                              	}
   2071          	                    GsnOsal_SemRelease(&s2wSyncSemID);
   2072          					}
   2073                              if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2074                                 || profile_params.autoConnect )
   2075                              {
   2076                                  UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2077                                  (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   2078                              }
   2079                          }
   2080                      }
   2081                      break;
   2082          
   2083          #ifndef S2W_IP2WIFI_SUPPORT
   2084                      case S2W_RECV_TYPE_SOCK_ERROR:
   2085          
   2086                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   2087                          if (cid == INVALID_CID)
   2088                          {
   2089                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   2090                              	continue;
   2091          					#else
   2092          						break;
   2093          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2094                          }
   2095                          // if data is pending on that socket defer the socket close
   2096                          if(s2wCidList[cid].s2wSockDataPending)
   2097                          {
   2098          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   2099          					break;
   2100          				}
   2101          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   2102          //#if 0
   2103          				if (s2wCidList[cid].sslflag == TRUE)
   2104                          {
   2105                               if(s2wCidList[cid].s2wUsrCloseFlag)
   2106                               {
   2107                                  /* stop the http close waiting timer */
   2108          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2109          						{
   2110          						  	/* release the semaphore so the close can finish */
   2111          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2112          						}
   2113                                    #ifdef S2W_SEPARATE_NET_RX_TASK
   2114                                    	continue;
   2115          						  #else
   2116          						  	break;
   2117          						  #endif /*S2W_SEPARATE_NET_RX_TASK*/
   2118                               }
   2119                          }
   2120          #ifdef S2W_HTTPS_SUPPORT
   2121          				else if(s2wCidList[cid].httpflag ==  1 && s2wCidList[cid].pHttpData)
   2122                          {
   2123          					conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2124          
   2125          					if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   2126          					{
   2127          						/* stop the http close waiting timer */
   2128          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   2129          						{
   2130          						  	/* release the semaphore so the close can finish */
   2131          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2132          						}
   2133          						#ifdef S2W_SEPARATE_NET_RX_TASK
   2134          							continue; /*!! Donot remove this*/
   2135          						#else
   2136          							break; /*!! Donot remove this*/
   2137          						#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2138          					}
   2139                          }
   2140          #endif /*GSN_HTTPS_SUPPORT*/
   2141          #endif
   2142              			AppS2wHal_NetClose(cid);
   2143          				/* Check the L2 connection exists
   2144          					Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2145          				*/						
   2146          				if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   2147          				{
   2148          					break;
   2149          				}
   2150          
   2151          
   2152                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2153          #ifdef S2W_UART_ENABLE
   2154                          //while(0 == S2wUart_TxStatusGet());
   2155          #endif
   2156                          if((!s2wAutoConnState ) ||(( s2wState == S2W_STATE_CMD) && (s2wIsAutoconnected)))
   2157                          {
   2158          #ifdef S2W_ASYNC_MSG                
   2159          					if(s2wCurrent.asyncMsgFormat)
   2160          					{
   2161          						AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_SOCKFAILURE, cid);
   2162          					}
   2163          					else
   2164          #endif
   2165          	                {
   2166          	                    AppS2wProcess_StatusNotify(S2W_SOCKFAILURE, cid);
   2167          	                }
   2168          			    }
   2169          #ifdef S2W_UART_ENABLE
   2170                          // while(0 == S2wUart_TxStatusGet());
   2171          #endif
   2172                           GsnOsal_SemRelease(&s2wSyncSemID);
   2173                       
   2174                          if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2175                             || profile_params.autoConnect )
   2176                          {
   2177                              UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2178                              //S2w_Printf("\r\n Rclose-connect back\r\n");
   2179                              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   2180                          }
   2181                      break;
   2182          
   2183                      case S2W_RECV_TYPE_SOCK_DISCONNECT:
   2184          
   2185                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   2186                          if (cid == INVALID_CID)
   2187                          {
   2188                          	#ifdef S2W_SEPARATE_NET_RX_TASK
   2189                              	continue;
   2190          					#else
   2191          						break;
   2192          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2193                          }
   2194                          // if data is pending on that socket defer the socket close
   2195                          if(s2wCidList[cid].s2wSockDataPending)
   2196                          {
   2197          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \                     ??AppS2wHal_NetRecvTask_24:
   \   0000023E   0xA905             ADD      R1,SP,#+20
   \   00000240   0x.... 0x....      LDR.W    R0,??DataTable77
   \   00000244   0x.... 0x....      BL       GsnOsal_QueuePut
   2198          					break;
   \                     ??AppS2wHal_NetRecvTask_0:
   \   00000248   0x.... 0x....      LDR.W    R0,??DataTable77
   \   0000024C   0xF04F 0x32FF      MOV      R2,#-1
   \   00000250   0xA905             ADD      R1,SP,#+20
   2199          				}
   \   00000252   0x.... 0x....      BL       _tx_queue_receive
   \   00000256   0xF9BD 0x001A      LDRSH    R0,[SP, #+26]
   \   0000025A   0x282F             CMP      R0,#+47
   \   0000025C   0xD011             BEQ.N    ??AppS2wHal_NetRecvTask_25
   \   0000025E   0x2831             CMP      R0,#+49
   \   00000260   0xF000 0x809E      BEQ.W    ??AppS2wHal_NetRecvTask_26
   \   00000264   0x2832             CMP      R0,#+50
   \   00000266   0xF000 0x80DA      BEQ.W    ??AppS2wHal_NetRecvTask_27
   \   0000026A   0x2833             CMP      R0,#+51
   \   0000026C   0xF000 0x8190      BEQ.W    ??AppS2wHal_NetRecvTask_28
   \   00000270   0x2834             CMP      R0,#+52
   \   00000272   0xF000 0x815B      BEQ.W    ??AppS2wHal_NetRecvTask_29
   \   00000276   0x2835             CMP      R0,#+53
   \   00000278   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_25
   \   0000027A   0x2836             CMP      R0,#+54
   \   0000027C   0xF000 0x8182      BEQ.W    ??AppS2wHal_NetRecvTask_30
   \   00000280   0xE7E2             B.N      ??AppS2wHal_NetRecvTask_0
   \                     ??AppS2wHal_NetRecvTask_25:
   \   00000282   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_99:
   \   00000286   0x4680             MOV      R8,R0
   \   00000288   0xF1B8 0x0FFF      CMP      R8,#+255
   \   0000028C   0xD0DC             BEQ.N    ??AppS2wHal_NetRecvTask_0
   \   0000028E   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000292   0xF44F 0x7194      MOV      R1,#+296
   \   00000296   0xFB01 0xF108      MUL      R1,R1,R8
   \   0000029A   0x9108             STR      R1,[SP, #+32]
   \   0000029C   0x.... 0x....      LDR.W    R2,??DataTable66
   \   000002A0   0x188D             ADDS     R5,R1,R2
   \   000002A2   0xF105 0x0190      ADD      R1,R5,#+144
   \   000002A6   0x2200             MOVS     R2,#+0
   \   000002A8   0x704A             STRB     R2,[R1, #+1]
   \   000002AA   0x.... 0x....      BL       GsnOsal_IntrEnable
   \   000002AE   0x2000             MOVS     R0,#+0
   \   000002B0   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   000002B4   0x1D2F             ADDS     R7,R5,#+4
   \   000002B6   0xF105 0x062C      ADD      R6,R5,#+44
   \                     ??AppS2wHal_NetRecvTask_23:
   \   000002BA   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   000002BE   0x1C40             ADDS     R0,R0,#+1
   \   000002C0   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   000002C4   0x4641             MOV      R1,R8
   \   000002C6   0x2009             MOVS     R0,#+9
   \   000002C8   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   \   000002CC   0x9808             LDR      R0,[SP, #+32]
   \   000002CE   0x.... 0x....      LDR.W    R1,??DataTable66
   \   000002D2   0x5C40             LDRB     R0,[R0, R1]
   \   000002D4   0x2801             CMP      R0,#+1
   \   000002D6   0xF47F 0xAEC1      BNE.W    ??AppS2wHal_NetRecvTask_6
   \   000002DA   0xA80C             ADD      R0,SP,#+48
   \   000002DC   0x9001             STR      R0,[SP, #+4]
   \   000002DE   0x2300             MOVS     R3,#+0
   \   000002E0   0xA812             ADD      R0,SP,#+72
   \   000002E2   0x9000             STR      R0,[SP, #+0]
   \   000002E4   0xF240 0x52DC      MOVW     R2,#+1500
   \   000002E8   0x9805             LDR      R0,[SP, #+20]
   \   000002EA   0x.... 0x....      LDR.W    R1,??DataTable74_1
   \   000002EE   0x.... 0x....      BL       recvfrom
   \   000002F2   0x9003             STR      R0,[SP, #+12]
   \   000002F4   0x2801             CMP      R0,#+1
   \   000002F6   0xDB0F             BLT.N    ??CrossCallReturnLabel_82
   \   000002F8   0x7868             LDRB     R0,[R5, #+1]
   \   000002FA   0x2801             CMP      R0,#+1
   \   000002FC   0xF47F 0xAE8F      BNE.W    ??AppS2wHal_NetRecvTask_1
   \   00000300   0xF8BD 0x004A      LDRH     R0,[SP, #+74]
   \   00000304   0x0201             LSLS     R1,R0,#+8
   \   00000306   0xEA41 0x2410      ORR      R4,R1,R0, LSR #+8
   \   0000030A   0x2204             MOVS     R2,#+4
   \   0000030C   0xA913             ADD      R1,SP,#+76
   \   0000030E   0xA802             ADD      R0,SP,#+8
   \   00000310   0x.... 0x....      BL       memcpy
   \   00000314   0x.... 0x....      BL       ?Subroutine32
   \                     ??CrossCallReturnLabel_82:
   \   00000318   0xE731             B.N      ??AppS2wHal_NetRecvTask_13
   \                     ??AppS2wHal_NetRecvTask_22:
   \   0000031A   0xF9BD 0x001A      LDRSH    R0,[SP, #+26]
   \   0000031E   0x2835             CMP      R0,#+53
   \                     ??AppS2wHal_NetRecvTask_31:
   \   00000320   0xD192             BNE.N    ??AppS2wHal_NetRecvTask_0
   \   00000322   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_80:
   \   00000326   0xD108             BNE.N    ??AppS2wHal_NetRecvTask_32
   \   00000328   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   0000032C   0x2800             CMP      R0,#+0
   \   0000032E   0xD110             BNE.N    ??AppS2wHal_NetRecvTask_33
   \   00000330   0x69B9             LDR      R1,[R7, #+24]
   \   00000332   0x6A78             LDR      R0,[R7, #+36]
   \   00000334   0x.... 0x....      BL       GsnSsl_Alert
   \   00000338   0xE022             B.N      ??CrossCallReturnLabel_88
   \                     ??AppS2wHal_NetRecvTask_32:
   \   0000033A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000033C   0x2800             CMP      R0,#+0
   \   0000033E   0xBF1C             ITT      NE 
   \   00000340   0x68B0             LDRNE    R0,[R6, #+8]
   \   00000342   0x2800             CMPNE    R0,#+0
   \   00000344   0xD01C             BEQ.N    ??CrossCallReturnLabel_88
   \   00000346   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_105:
   \   0000034A   0xD10D             BNE.N    ??CrossCallReturnLabel_89
   \   0000034C   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   00000350   0x2800             CMP      R0,#+0
   \                     ??AppS2wHal_NetRecvTask_33:
   \   00000352   0xF040 0x807B      BNE.W    ??AppS2wHal_NetRecvTask_34
   \   00000356   0x68B0             LDR      R0,[R6, #+8]
   \   00000358   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_72:
   \   0000035C   0x69B9             LDR      R1,[R7, #+24]
   \   0000035E   0x6A78             LDR      R0,[R7, #+36]
   \   00000360   0x.... 0x....      BL       GsnSsl_Alert
   \   00000364   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_89:
   \   00000368   0x78F0             LDRB     R0,[R6, #+3]
   \   0000036A   0x2800             CMP      R0,#+0
   \   0000036C   0xBF1C             ITT      NE 
   \   0000036E   0x68B0             LDRNE    R0,[R6, #+8]
   \   00000370   0x2800             CMPNE    R0,#+0
   \   00000372   0xD005             BEQ.N    ??CrossCallReturnLabel_88
   \   00000374   0x7B01             LDRB     R1,[R0, #+12]
   \   00000376   0xB919             CBNZ.N   R1,??CrossCallReturnLabel_88
   \   00000378   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_71:
   \   0000037C   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_88:
   \   00000380   0x4640             MOV      R0,R8
   \   00000382   0x.... 0x....      BL       AppS2wHal_NetClose
   \   00000386   0x4607             MOV      R7,R0
   \   00000388   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   0000038C   0x4338             ORRS     R0,R7,R0
   \   0000038E   0xF040 0x80B1      BNE.W    ??AppS2wHal_NetRecvTask_35
   \   00000392   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_104:
   \   00000396   0x2801             CMP      R0,#+1
   \   00000398   0xD1C2             BNE.N    ??AppS2wHal_NetRecvTask_31
   \   0000039A   0x.... 0x....      BL       ?Subroutine27
   \                     ??CrossCallReturnLabel_69:
   \   0000039E   0xE09B             B.N      ??AppS2wHal_NetRecvTask_36
   \                     ??AppS2wHal_NetRecvTask_26:
   \   000003A0   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_98:
   \   000003A4   0x4680             MOV      R8,R0
   \   000003A6   0xF1B8 0x0FFF      CMP      R8,#+255
   \   000003AA   0xD074             BEQ.N    ??AppS2wHal_NetRecvTask_37
   \   000003AC   0x.... 0x....      BL       ?Subroutine14
   \                     ??CrossCallReturnLabel_31:
   \   000003B0   0xF890 0x1091      LDRB     R1,[R0, #+145]
   \   000003B4   0x2900             CMP      R1,#+0
   \   000003B6   0xD13F             BNE.N    ??AppS2wHal_NetRecvTask_38
   \   000003B8   0xF890 0x102C      LDRB     R1,[R0, #+44]
   \   000003BC   0x2901             CMP      R1,#+1
   \   000003BE   0xD00B             BEQ.N    ??AppS2wHal_NetRecvTask_39
   \   000003C0   0xF100 0x012C      ADD      R1,R0,#+44
   \   000003C4   0x78CA             LDRB     R2,[R1, #+3]
   \   000003C6   0x2A01             CMP      R2,#+1
   \   000003C8   0xD10B             BNE.N    ??AppS2wHal_NetRecvTask_40
   \   000003CA   0x6889             LDR      R1,[R1, #+8]
   \   000003CC   0xB149             CBZ.N    R1,??AppS2wHal_NetRecvTask_40
   \   000003CE   0x6809             LDR      R1,[R1, #+0]
   \   000003D0   0xF8D1 0x10BC      LDR      R1,[R1, #+188]
   \   000003D4   0x2901             CMP      R1,#+1
   \   000003D6   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_40
   \                     ??AppS2wHal_NetRecvTask_39:
   \   000003D8   0xF890 0x1090      LDRB     R1,[R0, #+144]
   \   000003DC   0xB109             CBZ.N    R1,??AppS2wHal_NetRecvTask_40
   \   000003DE   0x3058             ADDS     R0,R0,#+88
   \   000003E0   0xE036             B.N      ??AppS2wHal_NetRecvTask_41
   \                     ??AppS2wHal_NetRecvTask_40:
   \   000003E2   0x4640             MOV      R0,R8
   \   000003E4   0x.... 0x....      BL       AppS2wHal_NetClose
   \   000003E8   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_103:
   \   000003EC   0x2801             CMP      R0,#+1
   \   000003EE   0xD152             BNE.N    ??AppS2wHal_NetRecvTask_37
   \   000003F0   0x.... 0x....      BL       ?Subroutine27
   \                     ??CrossCallReturnLabel_68:
   \   000003F4   0x.... 0x....      LDR.W    R0,??DataTable78
   \   000003F8   0x7800             LDRB     R0,[R0, #+0]
   \   000003FA   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_42
   \   000003FC   0x.... 0x....      LDR.W    R0,??DataTable78_1
   \   00000400   0x7800             LDRB     R0,[R0, #+0]
   \   00000402   0x2800             CMP      R0,#+0
   \   00000404   0xD172             BNE.N    ??AppS2wHal_NetRecvTask_43
   \   00000406   0x.... 0x....      LDR.W    R0,??DataTable78_2
   \   0000040A   0x7800             LDRB     R0,[R0, #+0]
   \   0000040C   0x2800             CMP      R0,#+0
   \   0000040E   0xD06D             BEQ.N    ??AppS2wHal_NetRecvTask_43
   \                     ??AppS2wHal_NetRecvTask_42:
   \   00000410   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_47:
   \   00000414   0xBF18             IT       NE 
   \   00000416   0x2000             MOVNE    R0,#+0
   \   00000418   0xD162             BNE.N    ??AppS2wHal_NetRecvTask_44
   \   0000041A   0x2003             MOVS     R0,#+3
   \   0000041C   0xE064             B.N      ??AppS2wHal_NetRecvTask_45
   \                     ??AppS2wHal_NetRecvTask_27:
   \   0000041E   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_97:
   \   00000422   0x4680             MOV      R8,R0
   \   00000424   0xF1B8 0x0FFF      CMP      R8,#+255
   \   00000428   0xD035             BEQ.N    ??AppS2wHal_NetRecvTask_37
   \   0000042A   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_33:
   \   0000042E   0xFB00 0x1508      MLA      R5,R0,R8,R1
   \   00000432   0xF895 0x0091      LDRB     R0,[R5, #+145]
   \   00000436   0x2800             CMP      R0,#+0
   \                     ??AppS2wHal_NetRecvTask_38:
   \   00000438   0xF47F 0xAF01      BNE.W    ??AppS2wHal_NetRecvTask_24
   2200          
   2201          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
   2202          //#if 0                
   2203          				if (s2wCidList[cid].sslflag == TRUE)
   \   0000043C   0xF105 0x071C      ADD      R7,R5,#+28
   \   00000440   0x7C38             LDRB     R0,[R7, #+16]
   \   00000442   0x2801             CMP      R0,#+1
   \   00000444   0xD10E             BNE.N    ??AppS2wHal_NetRecvTask_46
   2204                          {
   2205                               if(s2wCidList[cid].s2wUsrCloseFlag)
   \   00000446   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   0000044A   0xB130             CBZ.N    R0,??AppS2wHal_NetRecvTask_47
   2206                               {
   2207          						  if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   \                     ??AppS2wHal_NetRecvTask_34:
   \   0000044C   0xF105 0x0058      ADD      R0,R5,#+88
   \                     ??AppS2wHal_NetRecvTask_41:
   \   00000450   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   00000454   0x2800             CMP      R0,#+0
   \   00000456   0xD11E             BNE.N    ??AppS2wHal_NetRecvTask_37
   \   00000458   0xE018             B.N      ??AppS2wHal_NetRecvTask_48
   2208          						  {
   2209          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   2210          						  }
   2211                                    #ifdef S2W_SEPARATE_NET_RX_TASK
   2212                                    	continue;
   2213          						  #else
   2214          							break;
   2215          						  #endif /*S2W_SEPARATE_NET_RX_TASK*/
   2216                               }
   2217           					/* Send Alert*/
   2218                  			GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   \                     ??AppS2wHal_NetRecvTask_47:
   \   0000045A   0x69E9             LDR      R1,[R5, #+28]
   \   0000045C   0x68F8             LDR      R0,[R7, #+12]
   \   0000045E   0x.... 0x....      BL       GsnSsl_Alert
   \   00000462   0xE01F             B.N      ??CrossCallReturnLabel_87
   2219                          }
   2220          #else
   2221          				if(0)
   2222          				{
   2223          				}
   2224          #endif    
   2225          #ifdef S2W_HTTPC_SUPPORT	
   2226          				else if(s2wCidList[cid].httpflag ==  1 && s2wCidList[cid].pHttpData)
   \                     ??AppS2wHal_NetRecvTask_46:
   \   00000464   0x7CF8             LDRB     R0,[R7, #+19]
   \   00000466   0x2801             CMP      R0,#+1
   \   00000468   0xD11C             BNE.N    ??CrossCallReturnLabel_87
   \   0000046A   0x69B8             LDR      R0,[R7, #+24]
   \   0000046C   0xB1D0             CBZ.N    R0,??CrossCallReturnLabel_87
   2227                          {
   2228          
   2229          					semStat =GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   \   0000046E   0x.... 0x....      BL       ?Subroutine28
   2230          #ifdef S2W_HTTPS_SUPPORT                
   2231          					conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   2232          					/* The remote close can along with the data so if the send acquired the semaphore then need to
   2233          					wait here so that the close operation can be performed.
   2234          					*/
   2235          					if(conEntryPtr->hconHttpType == GSN_HTTPS && s2wCidList[cid].s2wUsrCloseFlag)
   \                     ??CrossCallReturnLabel_70:
   \   00000472   0x69B8             LDR      R0,[R7, #+24]
   \   00000474   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_106:
   \   00000478   0xD10E             BNE.N    ??AppS2wHal_NetRecvTask_49
   \   0000047A   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   0000047E   0xB158             CBZ.N    R0,??AppS2wHal_NetRecvTask_49
   2236          					{
   2237          						/* stop the http close waiting timer */
   2238          						if(GSN_SUCCESS == AppS2wHal_TimerStop(&s2wCidList[cid].s2wUserCloseTimer))
   \   00000480   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000484   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   00000488   0x2800             CMP      R0,#+0
   \   0000048A   0xD104             BNE.N    ??AppS2wHal_NetRecvTask_37
   2239          						{
   2240          						  	/* release the semaphore so the close can finish */
   2241          							GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     ??AppS2wHal_NetRecvTask_48:
   \   0000048C   0x.... 0x....      BL       ?Subroutine14
   2242          						}
   2243          
   2244          						#ifdef S2W_SEPARATE_NET_RX_TASK
   2245          							continue; /*!! Donot remove this*/
   2246          						#else
   2247          							break; /*!! Donot remove this*/
   2248          						#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2249          					}
   \                     ??CrossCallReturnLabel_32:
   \   00000490   0x3038             ADDS     R0,R0,#+56
   \                     ??AppS2wHal_NetRecvTask_50:
   \   00000492   0x.... 0x....      BL       GsnOsal_SemRelease
   \                     ??AppS2wHal_NetRecvTask_37:
   \   00000496   0xE6D7             B.N      ??AppS2wHal_NetRecvTask_0
   2250          					/* The close is from remote and no alert gone out. Send an alert */
   2251          					GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??AppS2wHal_NetRecvTask_49:
   \   00000498   0x69B8             LDR      R0,[R7, #+24]
   \   0000049A   0x.... 0x....      BL       ??Subroutine41_0
   2252          #endif
   2253          					//if(s2wCidList[cid].pHttpData->httpType == GSN_HTTP)
   2254          						//GsnOsal_SemAcquire(&s2wCidList[cid].pHttpData->opInProgress, GSN_OSAL_WAIT_FOREVER);
   2255          					GsnOsal_SemRelease(&s2wCidList[cid].pHttpData->opInProgress);
   \                     ??CrossCallReturnLabel_108:
   \   0000049E   0x69B8             LDR      R0,[R7, #+24]
   \   000004A0   0x.... 0x....      BL       ??Subroutine34_0
   2256          				}
   2257          
   2258          #endif
   2259          				status = AppS2wHal_NetClose(cid);
   \                     ??CrossCallReturnLabel_87:
   \   000004A4   0x4640             MOV      R0,R8
   \   000004A6   0x.... 0x....      BL       AppS2wHal_NetClose
   \   000004AA   0x4607             MOV      R7,R0
   2260          				/* Check the L2 connection exists
   2261          					Bug FIX 5083 - L2 disconnection while getting the data throws ERROR:SOCKET FAILURE and Disassociation Event
   2262          				*/						
   2263          				if(TRUE != GsnWdd_AssocStatusGet(&s2wappMainTaskCtxt->if0.wddCtx))
   \   000004AC   0x.... 0x....      BL       ?Subroutine39
   \                     ??CrossCallReturnLabel_102:
   \   000004B0   0x2801             CMP      R0,#+1
   \   000004B2   0xD1F0             BNE.N    ??AppS2wHal_NetRecvTask_37
   2264          				{
   2265          					break;
   2266          				}
   2267          
   2268                          
   2269          				
   2270          				if(s2wCidList[cid].s2wUsrCloseFlag == 0 && status == S2W_SUCCESS)
   \   000004B4   0xF895 0x0090      LDRB     R0,[R5, #+144]
   \   000004B8   0x4338             ORRS     R0,R7,R0
   \   000004BA   0xD11B             BNE.N    ??AppS2wHal_NetRecvTask_35
   2271          				{
   2272          					GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   000004BC   0x.... 0x....      BL       ?Subroutine27
   2273          					if((!s2wAutoConnState ) ||(( s2wState == S2W_STATE_CMD) && (s2wIsAutoconnected)))
   \                     ??CrossCallReturnLabel_67:
   \   000004C0   0x.... 0x....      LDR.W    R0,??DataTable78
   \   000004C4   0x7800             LDRB     R0,[R0, #+0]
   \   000004C6   0xB138             CBZ.N    R0,??AppS2wHal_NetRecvTask_36
   \   000004C8   0x.... 0x....      LDR.W    R0,??DataTable78_1
   \   000004CC   0x7800             LDRB     R0,[R0, #+0]
   \   000004CE   0xB968             CBNZ.N   R0,??AppS2wHal_NetRecvTask_43
   \   000004D0   0x.... 0x....      LDR.W    R0,??DataTable78_2
   \   000004D4   0x7800             LDRB     R0,[R0, #+0]
   \   000004D6   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_43
   2274          				 	{
   2275          #ifdef S2W_ASYNC_MSG
   2276          						if(s2wCurrent.asyncMsgFormat)
   \                     ??AppS2wHal_NetRecvTask_36:
   \   000004D8   0x.... 0x....      BL       ?Subroutine21
   \                     ??CrossCallReturnLabel_48:
   \   000004DC   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_51
   2277          				   		{
   2278          					   		AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   \   000004DE   0x2002             MOVS     R0,#+2
   \                     ??AppS2wHal_NetRecvTask_44:
   \   000004E0   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   000004E4   0xE002             B.N      ??AppS2wHal_NetRecvTask_43
   2279          				   		}
   2280          				   		else
   2281          #endif
   2282                          		{
   2283          		                    AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   \                     ??AppS2wHal_NetRecvTask_51:
   \   000004E6   0x2008             MOVS     R0,#+8
   \                     ??AppS2wHal_NetRecvTask_45:
   \   000004E8   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2284                  		        }
   2285          			       }                
   2286          					GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wHal_NetRecvTask_43:
   \   000004EC   0x.... 0x....      LDR.W    R0,??DataTable86
   \   000004F0   0x.... 0x....      BL       GsnOsal_SemRelease
   2287          				}
   2288                          
   2289                          
   2290                          if(((s2wCurrent.ncmAutoLvl != 0)  && (cid == s2wCurrent.ncmAutoCid) && (s2wCurrent.ncmAutoMgr == 1))
   2291                             || profile_params.autoConnect )
   \                     ??AppS2wHal_NetRecvTask_35:
   \   000004F4   0x....             LDR.N    R0,??DataTable65
   \   000004F6   0xF890 0x032B      LDRB     R0,[R0, #+811]
   \   000004FA   0xB148             CBZ.N    R0,??AppS2wHal_NetRecvTask_52
   \   000004FC   0x....             LDR.N    R0,??DataTable65
   \   000004FE   0xF890 0x0394      LDRB     R0,[R0, #+916]
   \   00000502   0x4580             CMP      R8,R0
   \   00000504   0xBF02             ITTT     EQ 
   \   00000506   0x....             LDREQ.N  R0,??DataTable65
   \   00000508   0xF890 0x032A      LDRBEQ   R0,[R0, #+810]
   \   0000050C   0x2801             CMPEQ    R0,#+1
   \   0000050E   0xD004             BEQ.N    ??AppS2wHal_NetRecvTask_53
   \                     ??AppS2wHal_NetRecvTask_52:
   \   00000510   0x.... 0x....      LDR.W    R0,??DataTable85
   \   00000514   0x7900             LDRB     R0,[R0, #+4]
   \   00000516   0x2800             CMP      R0,#+0
   \   00000518   0xD007             BEQ.N    ??AppS2wHal_NetRecvTask_54
   2292                          {
   2293          
   2294                              UINT32 message = APP_EVENT_NCM_L4CONNECT;
   2295                              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     ??AppS2wHal_NetRecvTask_53:
   \   0000051A   0x.... 0x....      LDR.W    R0,??DataTable71
   \   0000051E   0x.... 0x....      LDR.W    R2,??DataTable86_1
   \   00000522   0x6801             LDR      R1,[R0, #+0]
   \   00000524   0x6812             LDR      R2,[R2, #+0]
   \   00000526   0x2018             MOVS     R0,#+24
   \   00000528   0x4790             BLX      R2
   \                     ??AppS2wHal_NetRecvTask_54:
   \   0000052A   0xE68D             B.N      ??AppS2wHal_NetRecvTask_0
   2296                          }
   2297                      break;
   2298          
   2299          #endif
   2300          #ifdef S2W_HTTPC_SUPPORT
   2301                      case S2W_RECV_TYPE_HTTPS_CLOSE:
   2302          				/*Control is here, becase an Alert has been received*/
   2303                          cid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   \                     ??AppS2wHal_NetRecvTask_29:
   \   0000052C   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_96:
   \   00000530   0x4607             MOV      R7,R0
   2304                          if (cid == INVALID_CID)
   \   00000532   0x2FFF             CMP      R7,#+255
   \   00000534   0xD0F9             BEQ.N    ??AppS2wHal_NetRecvTask_54
   2305                          {
   2306                              #ifdef S2W_SEPARATE_NET_RX_TASK
   2307                              	continue;
   2308          					#else
   2309          						break;
   2310          					#endif /*S2W_SEPARATE_NET_RX_TASK*/
   2311                          }
   2312                          // if data is pending on that socket defer the socket close
   2313                          if(s2wCidList[cid].s2wSockDataPending)
   \   00000536   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_34:
   \   0000053A   0xFB00 0x1507      MLA      R5,R0,R7,R1
   \   0000053E   0xF895 0x0091      LDRB     R0,[R5, #+145]
   \   00000542   0xB120             CBZ.N    R0,??AppS2wHal_NetRecvTask_55
   2314                          {
   2315          					GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000544   0x.... 0x....      LDR.W    R0,??DataTable77
   \   00000548   0xA905             ADD      R1,SP,#+20
   \   0000054A   0x.... 0x....      BL       GsnOsal_QueuePut
   2316          				}
   2317          				/*Send Alert back*/
   2318                          GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??AppS2wHal_NetRecvTask_55:
   \   0000054E   0x.... 0x....      BL       ?Subroutine41
   2319          
   2320          				/* Close HTTP connection*/
   2321          				AppS2wHal_HttpLocalClose(cid);
   \                     ??CrossCallReturnLabel_111:
   \   00000552   0x4638             MOV      R0,R7
   \   00000554   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   2322          
   2323                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000558   0x.... 0x....      LDR.W    R0,??DataTable86
   \   0000055C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000560   0x.... 0x....      BL       GsnOsal_SemAcquire
   2324          #ifdef S2W_UART_ENABLE
   2325                          //while(0 == S2wUart_TxStatusGet());
   2326          #endif
   2327          #ifdef S2W_ASYNC_MSG
   2328                          if(s2wCurrent.asyncMsgFormat)
   \   00000564   0x....             LDR.N    R0,??DataTable65
   \   00000566   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   0000056A   0x2800             CMP      R0,#+0
   \   0000056C   0x4639             MOV      R1,R7
   \   0000056E   0xD003             BEQ.N    ??AppS2wHal_NetRecvTask_56
   2329                          {
   2330                              AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ECIDCLOSE, cid);
   \   00000570   0x2002             MOVS     R0,#+2
   \   00000572   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000576   0xE002             B.N      ??AppS2wHal_NetRecvTask_57
   2331                          }
   2332                          else
   2333          #endif
   2334                          {
   2335                              AppS2wProcess_StatusNotify(S2W_ECIDCLOSE, cid);
   \                     ??AppS2wHal_NetRecvTask_56:
   \   00000578   0x2008             MOVS     R0,#+8
   \   0000057A   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   2336                          }
   2337          #ifdef S2W_UART_ENABLE
   2338                         // while(0 == S2wUart_TxStatusGet());
   2339          #endif
   2340                          GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wHal_NetRecvTask_57:
   \   0000057E   0x.... 0x....      LDR.W    R0,??DataTable86
   \   00000582   0xE786             B.N      ??AppS2wHal_NetRecvTask_50
   2341          
   2342                          break;
   2343          #endif
   2344          #ifdef S2W_IP2WIFI_SUPPORT
   2345                          case S2W_RECV_TYPE_RAWDATA:
   2346                          {
   2347          
   2348                              S2w_RawNetRx (recvMsg.rData.dataPtr, recvMsg.msgLen);
   2349          
   2350                          }
   2351                          break;
   2352          #endif
   2353          
   2354          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   2355                          case S2W_RECV_TYPE_UAMDATA:
   2356                          {
   2357          
   2358                              S2w_UamRx (recvMsg.rData.dataPtr, recvMsg.msgLen);
   \                     ??AppS2wHal_NetRecvTask_30:
   \   00000584   0xF9BD 0x1018      LDRSH    R1,[SP, #+24]
   \   00000588   0x9805             LDR      R0,[SP, #+20]
   \   0000058A   0x.... 0x....      BL       S2w_UamRx
   2359          
   2360                          }
   2361                          break;
   \   0000058E   0xE65B             B.N      ??AppS2wHal_NetRecvTask_0
   2362          #endif
   2363          
   2364          			    case S2W_RECV_TYPE_SOCK_ACCEPT:
   2365          			        newcid = AppS2wHal_CidFind(recvMsg.rData.dataSock);
   \                     ??AppS2wHal_NetRecvTask_28:
   \   00000590   0x.... 0x....      BL       ?Subroutine37
   2366          			        cid = s2wCidList[newcid].serverCid;
   \                     ??CrossCallReturnLabel_95:
   \   00000594   0x....             LDR.N    R1,??DataTable66
   \   00000596   0x4605             MOV      R5,R0
   \   00000598   0xF44F 0x7094      MOV      R0,#+296
   \   0000059C   0xFB00 0x1005      MLA      R0,R0,R5,R1
   \   000005A0   0xF890 0x602E      LDRB     R6,[R0, #+46]
   2367          			        new_sd =   s2wCidList[newcid].sd;
   \   000005A4   0x69C7             LDR      R7,[R0, #+28]
   2368          			        port = s2wCidList[newcid].remotePort;
   \   000005A6   0x8884             LDRH     R4,[R0, #+4]
   2369          #ifdef S2W_IPv6_SUPPORT
   2370                              if(s2wCidList[newcid].addrType & ADDR_TYPE_IPv6)
   2371                              {
   2372                                  ret = AppS2wProcess_NetAccept(cid, newcid, (UINT8*)s2wCidList[newcid].remoteIpv6, port);
   2373          				    }
   2374          				    else
   2375          #endif
   2376                              {
   2377          		                memcpy((UINT8*)ip,s2wCidList[newcid].remoteIp,4);
   \   000005A8   0x1D81             ADDS     R1,R0,#+6
   \   000005AA   0x2204             MOVS     R2,#+4
   \   000005AC   0xA802             ADD      R0,SP,#+8
   \   000005AE   0x.... 0x....      BL       memcpy
   2378          		                *(UINT32*)ip = htonl(*(UINT32*)ip);
   \   000005B2   0x.... 0x....      BL       ?Subroutine32
   2379          				        ret = AppS2wProcess_NetAccept(cid, newcid, (UINT8*)ip, port);
   2380          				    }
   2381          				    if (ret != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_83:
   \   000005B6   0x4623             MOV      R3,R4
   \   000005B8   0xAA02             ADD      R2,SP,#+8
   \   000005BA   0x4629             MOV      R1,R5
   \   000005BC   0x4630             MOV      R0,R6
   \   000005BE   0x.... 0x....      BL       AppS2wProcess_NetAccept
   \   000005C2   0x2800             CMP      R0,#+0
   \   000005C4   0xD002             BEQ.N    ??AppS2wHal_NetRecvTask_58
   2382          				    {
   2383          					    soc_close(new_sd);
   \   000005C6   0x4638             MOV      R0,R7
   \   000005C8   0x.... 0x....      BL       soc_close
   \                     ??AppS2wHal_NetRecvTask_58:
   \   000005CC   0xE63C             B.N      ??AppS2wHal_NetRecvTask_0
   2384          					    //return;
   2385          	                }
   2386          				break;
   2387                      default :
   2388                          break;
   2389          }
   2390          
   2391              }
   2392          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine42:
   \   00000000   0x9400             STR      R4,[SP, #+0]
   \   00000002   0xAB02             ADD      R3,SP,#+8
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      AppS2wProcess_NetRx

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable71
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000000A   0x.... 0x....      B.W      GsnWdd_AssocStatusGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0x9805             LDR      R0,[SP, #+20]
   \   00000002   0x....             B.N      AppS2wHal_CidFind

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   0x68B0             LDR      R0,[R6, #+8]
   \                     ??Subroutine34_0:
   \   00000002   0x3030             ADDS     R0,R0,#+48
   \   00000004   0x.... 0x....      B.W      GsnOsal_SemRelease

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0x9802             LDR      R0,[SP, #+8]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9902             LDR      R1,[SP, #+8]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9902             LDR      R1,[SP, #+8]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9002             STR      R0,[SP, #+8]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x3030             ADDS     R0,R0,#+48
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable86
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x....             LDR.N    R0,??DataTable65
   \   00000002   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0x4641             MOV      R1,R8
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x....             LDR.N    R1,??DataTable66
   \   00000006   0xFB00 0x1008      MLA      R0,R0,R8,R1
   \   0000000A   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0xF44F 0x7094      MOV      R0,#+296
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable98_1
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine41:
   \   00000000   0x6B68             LDR      R0,[R5, #+52]
   \                     ??Subroutine41_0:
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0x.... 0x....      B.W      GsnHttp_Alert

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0x6800             LDR      R0,[R0, #+0]
   \   00000002   0xF8D0 0x00BC      LDR      R0,[R0, #+188]
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0x4770             BX       LR
   2393          
   2394          
   2395          /**
   2396           ******************************************************************
   2397           * @ingroup S2w-Application
   2398          <<<<<<< s2w_net_gainspan.c
   2399           * @brief Get the free connection identifier.
   2400           * @retval Connection Identifier on success
   2401           *         Error on failure
   2402           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2403          UINT8
   2404          AppS2wHal_CidGet(VOID)
   2405          {
   \                     AppS2wHal_CidGet:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   2406              INT32 i,j,k;
   2407              j= ((s2wappMainTaskCtxt->lastCidCreated+1)&(MAX_CID_RANGE-1));
   2408              for (i = j,k=0; k < MAX_CID_RANGE ;(i=((i+1)&(MAX_CID_RANGE-1))),k++)
   \   00000002   0x....             LDR.N    R5,??DataTable69
   \   00000004   0x....             LDR.N    R2,??DataTable66
   \   00000006   0x6828             LDR      R0,[R5, #+0]
   \   00000008   0xF647 0x74E8      MOVW     R4,#+32744
   \   0000000C   0x5C20             LDRB     R0,[R4, R0]
   \   0000000E   0x1C40             ADDS     R0,R0,#+1
   \   00000010   0xF000 0x060F      AND      R6,R0,#0xF
   \   00000014   0x2010             MOVS     R0,#+16
   2409              {
   2410                  if (s2wCidList[i].sd == CID_NOTINUSE)
   \                     ??AppS2wHal_CidGet_0:
   \   00000016   0xF44F 0x7194      MOV      R1,#+296
   \   0000001A   0xFB01 0x2706      MLA      R7,R1,R6,R2
   \   0000001E   0x69F9             LDR      R1,[R7, #+28]
   \   00000020   0xF111 0x0F01      CMN      R1,#+1
   \   00000024   0xD10C             BNE.N    ??AppS2wHal_CidGet_1
   2411                  {
   2412                  	memset((INT8 *)&s2wCidList[i], 0, sizeof(S2W_CID_T));
   \   00000026   0xF44F 0x7294      MOV      R2,#+296
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x4638             MOV      R0,R7
   \   0000002E   0x.... 0x....      BL       memset
   2413          			s2wCidList[i].sd = CID_NOTINUSE;
   \   00000032   0xF04F 0x30FF      MOV      R0,#-1
   \   00000036   0x61F8             STR      R0,[R7, #+28]
   2414          			s2wappMainTaskCtxt->lastCidCreated = i;
   \   00000038   0x6828             LDR      R0,[R5, #+0]
   \   0000003A   0x5426             STRB     R6,[R4, R0]
   2415                      return i;
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0xBDF2             POP      {R1,R4-R7,PC}
   2416                  }
   2417              }
   \                     ??AppS2wHal_CidGet_1:
   \   00000040   0x1C71             ADDS     R1,R6,#+1
   \   00000042   0xF001 0x060F      AND      R6,R1,#0xF
   \   00000046   0x1E40             SUBS     R0,R0,#+1
   \   00000048   0xD1E5             BNE.N    ??AppS2wHal_CidGet_0
   2418              return INVALID_CID;
   \   0000004A   0x20FF             MOVS     R0,#+255
   \   0000004C   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2419          }
   2420          
   2421          
   2422          /**
   2423           ******************************************************************
   2424           * @ingroup S2w-Application
   2425          =======
   2426          >>>>>>> 1.48.2.11
   2427           * @brief Searches for the connection identifier
   2428           *         corresponding to specified socket descriptor.
   2429           * @param  sd the socket descriptor to be searched in the list.
   2430           * @retval Connection identifier on success (value 0 - F).
   2431           *          Error on failure (value 0xFF).
   2432           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2433          UINT8
   2434          AppS2wHal_CidFind(INT32 sd)
   2435          {
   2436              UINT32 i;
   2437              for (i = 0; i < MAX_CID_RANGE; i++)
   \                     AppS2wHal_CidFind:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x....             LDR.N    R2,??DataTable66
   2438              {
   2439                  if (sd == s2wCidList[i].sd)
   \                     ??AppS2wHal_CidFind_0:
   \   00000004   0xF44F 0x7394      MOV      R3,#+296
   \   00000008   0xFB03 0x2301      MLA      R3,R3,R1,R2
   \   0000000C   0x69DB             LDR      R3,[R3, #+28]
   \   0000000E   0x4298             CMP      R0,R3
   \   00000010   0xD101             BNE.N    ??AppS2wHal_CidFind_1
   2440                 {
   2441                     return i;
   \   00000012   0xB2C8             UXTB     R0,R1
   \   00000014   0x4770             BX       LR
   2442                 }
   2443              }
   \                     ??AppS2wHal_CidFind_1:
   \   00000016   0x1C49             ADDS     R1,R1,#+1
   \   00000018   0x2910             CMP      R1,#+16
   \   0000001A   0xD3F3             BCC.N    ??AppS2wHal_CidFind_0
   2444              return INVALID_CID;
   \   0000001C   0x20FF             MOVS     R0,#+255
   \   0000001E   0x4770             BX       LR               ;; return
   2445          }
   2446          /**
   2447           ******************************************************************
   2448           * @ingroup S2w-Application
   2449           * @brief Callback registerd to the network stack to recieve the socket events.
   2450           * @param sock - IN the Socket descriptor on which event occurred.
   2451           * @param flags- IN bit mask for events.
   2452           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2453          PRIVATE VOID
   2454          AppS2wHal_RxCallBack(INT32 sock, NX_BSD_CB_EVENT_TYPE_T flags, UINT port)
   2455          {
   \                     AppS2wHal_RxCallBack:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08F             SUB      SP,SP,#+60
   \   00000006   0x4607             MOV      R7,R0
   \   00000008   0x460E             MOV      R6,R1
   2456              struct sockaddr_in srcAddr;
   2457              UINT8 cid;
   2458              INT32 dataLen;
   2459              S2W_MSG_T recvMsg;
   2460              //GSN_OSAL_ERROR_T err;
   2461              cid = AppS2wHal_CidFind(sock);
   \   0000000A   0x.... 0x....      BL       AppS2wHal_CidFind
   \   0000000E   0x9005             STR      R0,[SP, #+20]
   2462              if (cid == INVALID_CID)
   \   00000010   0x28FF             CMP      R0,#+255
   \   00000012   0xF000 0x810F      BEQ.W    ??AppS2wHal_RxCallBack_0
   2463              {
   2464                  S2W_ASSERT(0);
   2465                  return;
   2466              }
   2467              if(s2wappMainTaskCtxt->dpSleep )
   \   00000016   0x....             LDR.N    R4,??DataTable69
   \   00000018   0x6821             LDR      R1,[R4, #+0]
   \   0000001A   0xF646 0x20FC      MOVW     R0,#+27388
   \   0000001E   0x5840             LDR      R0,[R0, R1]
   \   00000020   0xB118             CBZ.N    R0,??AppS2wHal_RxCallBack_1
   2468          
   2469              {
   2470                  AppS2w_GpioWkUpDisable();
   \   00000022   0x.... 0x....      BL       AppS2w_GpioWkUpDisable
   2471          		AppS2w_ExitDpSleep();
   \   00000026   0x.... 0x....      BL       AppS2w_ExitDpSleep
   \                     ??AppS2wHal_RxCallBack_1:
   \   0000002A   0x9805             LDR      R0,[SP, #+20]
   \   0000002C   0x.... 0x....      LDR.W    R10,??DataTable66
   \   00000030   0xF44F 0x7194      MOV      R1,#+296
   \   00000034   0xFB01 0xF900      MUL      R9,R1,R0
   \   00000038   0x2105             MOVS     R1,#+5
   \   0000003A   0xEB09 0x0B0A      ADD      R11,R9,R10
   \   0000003E   0xF006 0x0508      AND      R5,R6,#0x8
   \   00000042   0x420E             TST      R6,R1
   \   00000044   0xD020             BEQ.N    ??CrossCallReturnLabel_66
   2472              }
   2473              /* Data is available     */
   2474              if ((NX_BSD_CB_TCP_RECIEVE & flags) || (NX_BSD_CB_UDP_RECIEVE & flags))
   2475              {
   2476          
   2477                  recvMsg.rData.dataSock = sock;
   2478                  recvMsg.msgLen = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0x9702             STR      R7,[SP, #+8]
   \   0000004A   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   2479          		if (NX_BSD_CB_TCP_DISCONNECT & flags)
   \   0000004E   0xB13D             CBZ.N    R5,??AppS2wHal_RxCallBack_2
   2480          		{
   2481          		    S2w_Printf("\r\n TCP DISCONNECT 1");
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP DISCONNECT 1">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   2482          	        recvMsg.msgType = S2W_RECV_TYPE_SOCK_DATA_DISCONNECT;
   \   00000058   0x2035             MOVS     R0,#+53
   \   0000005A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000005E   0xE00A             B.N      ??AppS2wHal_RxCallBack_3
   2483          		}
   2484          		else
   2485          		{
   2486          		    S2w_Printf("\r\n TCP RECIEVE");
   \                     ??AppS2wHal_RxCallBack_2:
   \   00000060   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP RECIEVE">`
   \   00000064   0x.... 0x....      BL       S2w_Printf
   2487          			recvMsg.msgType = S2W_RECV_TYPE_SOCKET;
   \   00000068   0x202F             MOVS     R0,#+47
   \   0000006A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2488                          }
   2489          		if((s2wCidList[cid].s2wSockDataPending !=1) ||
   2490          		   (recvMsg.msgType == S2W_RECV_TYPE_SOCK_DATA_DISCONNECT))
   \   0000006E   0xF89B 0x0091      LDRB     R0,[R11, #+145]
   \   00000072   0x2801             CMP      R0,#+1
   \   00000074   0xD008             BEQ.N    ??CrossCallReturnLabel_66
   2491          		{
   2492          			INT32 intrStatus;
   2493                      intrStatus = GsnOsal_IntrDisable();
   \                     ??AppS2wHal_RxCallBack_3:
   \   00000076   0x.... 0x....      BL       GsnOsal_IntrDisable
   2494                      s2wCidList[cid].s2wSockDataPending = 1;
   \   0000007A   0x2101             MOVS     R1,#+1
   \   0000007C   0xF88B 0x1091      STRB     R1,[R11, #+145]
   2495                      /*re-enable all interrupts */
   2496                      GsnOsal_IntrEnable(intrStatus );
   \   00000080   0x.... 0x....      BL       GsnOsal_IntrEnable
   2497          			GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000084   0x.... 0x....      BL       ?Subroutine26
   2498                      //err = AppS2wHal_NetRxMsgPost(&recvMsg);
   2499          
   2500          		}
   2501          
   2502              }
   2503          
   2504              /* Incoming connection (TCP servers only) */
   2505              if (NX_BSD_CB_TCP_LISTEN & flags)
   \                     ??CrossCallReturnLabel_66:
   \   00000088   0x06F0             LSLS     R0,R6,#+27
   \   0000008A   0xF140 0x80A9      BPL.W    ??AppS2wHal_RxCallBack_4
   2506              {
   2507                  UINT8 newcid;
   2508                  INT32 new_sd;
   2509                  S2W_IPADDR_T ip;
   2510          #ifdef S2W_IPv6_SUPPORT
   2511                  S2W_IPv6ADDR_T ipv6;
   2512                  struct sockaddr_in6 ClientAddr;
   2513                  INT32 Clientlen;
   2514          #endif
   2515                  UINT16 localport;
   2516                  INT32 ret;
   2517                  struct timeval TimeOut;
   2518                  dataLen = sizeof(srcAddr);
   \   0000008E   0x2010             MOVS     R0,#+16
   \   00000090   0x9007             STR      R0,[SP, #+28]
   2519          
   2520          #ifdef S2W_IPv6_SUPPORT
   2521                
   2522                  if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   2523                  {
   2524                    Clientlen = sizeof(struct sockaddr_in6); 
   2525                  new_sd = accept(sock, (struct sockaddr*)&ClientAddr, &Clientlen);
   2526                  }
   2527                  else
   2528          #endif
   2529                  {
   2530                  new_sd = accept(sock, (struct sockaddr *)&srcAddr, &dataLen);
   \   00000092   0xAA07             ADD      R2,SP,#+28
   \   00000094   0xA90B             ADD      R1,SP,#+44
   \   00000096   0x4638             MOV      R0,R7
   \   00000098   0x.... 0x....      BL       accept
   \   0000009C   0x0007             MOVS     R7,R0
   2531          	    }
   2532                  if (new_sd < 0)
   \   0000009E   0xD463             BMI.N    ??AppS2wHal_RxCallBack_5
   2533                  {
   2534                      return;
   2535                  }
   2536          
   2537                  if ((newcid = AppS2wHal_CidGet()) == INVALID_CID)
   \   000000A0   0x.... 0x....      BL       AppS2wHal_CidGet
   \   000000A4   0x9006             STR      R0,[SP, #+24]
   \   000000A6   0x28FF             CMP      R0,#+255
   \   000000A8   0xD05B             BEQ.N    ??AppS2wHal_RxCallBack_6
   2538                  {
   2539                      soc_close(new_sd);
   2540                      return;
   2541                  }
   2542          		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER);
   \   000000AA   0x6820             LDR      R0,[R4, #+0]
   \   000000AC   0xF248 0x18CC      MOVW     R8,#+33228
   \   000000B0   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_76:
   \   000000B4   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000000B8   0xF89B 0x1020      LDRB     R1,[R11, #+32]
   \   000000BC   0x7840             LDRB     R0,[R0, #+1]
   \   000000BE   0x4288             CMP      R0,R1
   \   000000C0   0xD306             BCC.N    ??AppS2wHal_RxCallBack_7
   2543          		if(s2wCidList[cid].maxConn <= s2wCidList[cid].clientConCount)
   2544          		{
   2545          			tfResetConnection(new_sd);
   \   000000C2   0x4638             MOV      R0,R7
   \   000000C4   0x.... 0x....      BL       tfResetConnection
   2546          			tfClose(new_sd);
   \   000000C8   0x4638             MOV      R0,R7
   \   000000CA   0x.... 0x....      BL       tfClose
   2547          			GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \   000000CE   0xE082             B.N      ??AppS2wHal_RxCallBack_8
   2548                      return;
   2549                  }
   2550          		GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \                     ??AppS2wHal_RxCallBack_7:
   \   000000D0   0x6820             LDR      R0,[R4, #+0]
   \   000000D2   0x4440             ADD      R0,R8,R0
   \   000000D4   0x.... 0x....      BL       GsnOsal_SemRelease
   2551                  
   2552                  if (s2wCidList[cid].sslflag != TRUE)
   \   000000D8   0x9806             LDR      R0,[SP, #+24]
   \   000000DA   0xF44F 0x7194      MOV      R1,#+296
   \   000000DE   0xFB01 0xF900      MUL      R9,R1,R0
   \   000000E2   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000000E6   0xEB09 0x050A      ADD      R5,R9,R10
   \   000000EA   0x7B00             LDRB     R0,[R0, #+12]
   \   000000EC   0xF105 0x061C      ADD      R6,R5,#+28
   \   000000F0   0x2801             CMP      R0,#+1
   \   000000F2   0xD02B             BEQ.N    ??AppS2wHal_RxCallBack_9
   2553                  {
   2554          #ifdef S2W_IPv6_SUPPORT
   2555                      if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   2556                      {
   2557                          localport = htons(ClientAddr.sin6_port);
   2558                          memcpy(ipv6,ClientAddr.sin6_addr._S6_un._S6_u32,sizeof(ipv6));
   2559                                  GSN_IPv6_CHANGE_ENDIAN(ipv6);
   2560                  
   2561                          s2wCidList[newcid].addrType |= ADDR_TYPE_IPv6;
   2562                          memcpy(s2wCidList[newcid].remoteIpv6,(UINT8*)ipv6,16);
   2563                      }
   2564                      else
   2565          #endif //S2W_IPv6_SUPPORT
   2566                      {
   2567                          localport = htons(srcAddr.sin_port);
   \   000000F4   0x.... 0x....      BL       ?Subroutine4
   2568                          memcpy(ip, &(srcAddr.sin_addr.s_addr), sizeof(ip));
   2569                          *(UINT32*)ip = htonl(*(UINT32*)ip);
   \                     ??CrossCallReturnLabel_3:
   \   000000F8   0x.... 0x....      BL       ?Subroutine35
   2570          
   2571          
   2572                          memcpy(s2wCidList[newcid].remoteIp,(UINT8*)ip,4);
   \                     ??CrossCallReturnLabel_91:
   \   000000FC   0x2204             MOVS     R2,#+4
   \   000000FE   0xA901             ADD      R1,SP,#+4
   \   00000100   0x1DA8             ADDS     R0,R5,#+6
   \   00000102   0x.... 0x....      BL       memcpy
   2573          	            *((ULONG*)s2wCidList[newcid].remoteIp) = htonl(*(ULONG*)s2wCidList[newcid].remoteIp);
   \   00000106   0x.... 0x....      BL       ?Subroutine38
   2574          	        }
   2575          	        ULONG rexTimeOut=75;
   2576          	        setsockopt(new_sd,IP_PROTOTCP,TCP_MAXRT,(void*)&rexTimeOut,4);
   \                     ??CrossCallReturnLabel_100:
   \   0000010A   0xAB08             ADD      R3,SP,#+32
   \   0000010C   0x204B             MOVS     R0,#+75
   \   0000010E   0x9008             STR      R0,[SP, #+32]
   \   00000110   0x2229             MOVS     R2,#+41
   \   00000112   0x2004             MOVS     R0,#+4
   \   00000114   0x9000             STR      R0,[SP, #+0]
   \   00000116   0x2103             MOVS     R1,#+3
   \   00000118   0x4638             MOV      R0,R7
   \   0000011A   0x.... 0x....      BL       setsockopt
   2577          			// update the new cid table
   2578                      s2wCidList[newcid].conType = TCP;
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0xF809 0x000A      STRB     R0,[R9, R10]
   2579                      s2wCidList[newcid].conMode = S2W_NETDATA_MODE_CLIENT;
   2580                      s2wCidList[newcid].sd = new_sd;
   2581                      s2wCidList[newcid].remotePort = localport;
   2582          	        s2wCidList[newcid].serverCid = cid;
   2583                      // fill the msg que structure
   2584          		    recvMsg.msgType = S2W_RECV_TYPE_SOCK_ACCEPT;
   2585          		    recvMsg.rData.dataSock = new_sd;
   2586          		    recvMsg.msgLen = 0;
   2587          		    // post a msg to netRx task
   2588          			GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000124   0xA902             ADD      R1,SP,#+8
   \   00000126   0x2000             MOVS     R0,#+0
   \   00000128   0x7068             STRB     R0,[R5, #+1]
   \   0000012A   0x61EF             STR      R7,[R5, #+28]
   \   0000012C   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   00000130   0x80A8             STRH     R0,[R5, #+4]
   \   00000132   0x9805             LDR      R0,[SP, #+20]
   \   00000134   0x74B0             STRB     R0,[R6, #+18]
   \   00000136   0x9702             STR      R7,[SP, #+8]
   \   00000138   0x2033             MOVS     R0,#+51
   \   0000013A   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   \   0000013E   0x.... 0x....      BL       ?Subroutine8
   2589                  }
   2590                  
   2591          #ifdef S2W_SSL_SERVER_SUPPORT
   2592                  if (s2wCidList[cid].sslflag == TRUE)
   \                     ??CrossCallReturnLabel_14:
   \   00000142   0xF10B 0x0020      ADD      R0,R11,#+32
   \   00000146   0x7B00             LDRB     R0,[R0, #+12]
   \   00000148   0x2801             CMP      R0,#+1
   \   0000014A   0xD130             BNE.N    ??AppS2wHal_RxCallBack_10
   2593                  {
   2594          
   2595          
   2596          
   2597                  localport = htons(srcAddr.sin_port);
   \                     ??AppS2wHal_RxCallBack_9:
   \   0000014C   0x.... 0x....      BL       ?Subroutine4
   2598                  memcpy(ip, &(srcAddr.sin_addr.s_addr), sizeof(ip));
   2599                  *(UINT32*)ip = htonl(*(UINT32*)ip);
   \                     ??CrossCallReturnLabel_2:
   \   00000150   0x.... 0x....      BL       ?Subroutine35
   2600          
   2601          
   2602          
   2603          
   2604                      s2wCidList[newcid].ssl.sslServer =
   2605                          GsnSsl_Accept( s2wCidList[cid].ssl.sslServer );
   \                     ??CrossCallReturnLabel_92:
   \   00000154   0xF10B 0x0020      ADD      R0,R11,#+32
   \   00000158   0x6880             LDR      R0,[R0, #+8]
   \   0000015A   0x.... 0x....      BL       GsnSsl_Accept
   \   0000015E   0x60F0             STR      R0,[R6, #+12]
   2606                      if( NULL == s2wCidList[newcid].ssl.sslServer )
   \   00000160   0xB918             CBNZ.N   R0,??AppS2wHal_RxCallBack_11
   2607                      {
   2608                          soc_close(new_sd);
   \                     ??AppS2wHal_RxCallBack_6:
   \   00000162   0x4638             MOV      R0,R7
   \   00000164   0x.... 0x....      BL       soc_close
   2609                          return;
   \                     ??AppS2wHal_RxCallBack_5:
   \   00000168   0xE064             B.N      ??AppS2wHal_RxCallBack_0
   2610                      }
   2611          
   2612                  s2wCidList[newcid].conType = TCP;
   \                     ??AppS2wHal_RxCallBack_11:
   \   0000016A   0x2002             MOVS     R0,#+2
   \   0000016C   0xF809 0x000A      STRB     R0,[R9, R10]
   2613                  s2wCidList[newcid].conMode = S2W_NETDATA_MODE_CLIENT;
   2614                  s2wCidList[newcid].sd = new_sd;
   2615                  s2wCidList[newcid].remotePort = localport;
   2616                  memcpy(s2wCidList[newcid].remoteIp,(UINT8*)ip,4);
   \   00000170   0x2204             MOVS     R2,#+4
   \   00000172   0x2000             MOVS     R0,#+0
   \   00000174   0x7068             STRB     R0,[R5, #+1]
   \   00000176   0x61EF             STR      R7,[R5, #+28]
   \   00000178   0xA901             ADD      R1,SP,#+4
   \   0000017A   0xF8BD 0x0010      LDRH     R0,[SP, #+16]
   \   0000017E   0x80A8             STRH     R0,[R5, #+4]
   \   00000180   0x1DA8             ADDS     R0,R5,#+6
   \   00000182   0x.... 0x....      BL       memcpy
   2617          		s2wCidList[newcid].serverCid = cid;
   \   00000186   0x9805             LDR      R0,[SP, #+20]
   \   00000188   0x74B0             STRB     R0,[R6, #+18]
   2618                  *((ULONG*)s2wCidList[newcid].remoteIp) = htonl(*(ULONG*)s2wCidList[newcid].remoteIp);
   \   0000018A   0x.... 0x....      BL       ?Subroutine38
   2619          
   2620          
   2621                      s2wCidList[newcid].sslflag = TRUE;
   2622          	        s2wCidList[newcid].sslRemoteCliConctng = TRUE;
   2623          			GsnOsal_SemCreate(&s2wCidList[newcid].s2wUserCloseInProgress, 0);			
   \                     ??CrossCallReturnLabel_101:
   \   0000018E   0x2100             MOVS     R1,#+0
   \   00000190   0x2001             MOVS     R0,#+1
   \   00000192   0x7430             STRB     R0,[R6, #+16]
   \   00000194   0x7470             STRB     R0,[R6, #+17]
   \   00000196   0xF105 0x0038      ADD      R0,R5,#+56
   \   0000019A   0x.... 0x....      BL       GsnOsal_SemCreate
   2624          			AppS2wHal_TimerInit(&s2wCidList[newcid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)newcid);
   \   0000019E   0xA806             ADD      R0,SP,#+24
   \   000001A0   0x.... 0x....      ADR.W    R1,AppS2wHal_HttpCloseTimeout
   \   000001A4   0x7802             LDRB     R2,[R0, #+0]
   \   000001A6   0xF105 0x0058      ADD      R0,R5,#+88
   \   000001AA   0x.... 0x....      BL       AppS2wHal_TimerInit
   2625                  }
   2626          #endif
   2627          
   2628                  TimeOut.tv_sec =  0;
   \                     ??AppS2wHal_RxCallBack_10:
   \   000001AE   0x2000             MOVS     R0,#+0
   \   000001B0   0x9009             STR      R0,[SP, #+36]
   2629                  TimeOut.tv_usec = 1 * NX_MICROSECOND_PER_CPU_TICK;/* 1 tick*/
   2630                  ret = setsockopt(s2wCidList[newcid].sd,SOL_SOCKET,SO_RCVTIMEO,(void*)&TimeOut,8);
   \   000001B2   0xAB09             ADD      R3,SP,#+36
   \   000001B4   0x.... 0x....      LDR.W    R0,??DataTable96  ;; 0x186a0
   \   000001B8   0x900A             STR      R0,[SP, #+40]
   \   000001BA   0x.... 0x....      BL       ?Subroutine18
   2631                  if(ret < 0)
   2632                  {
   2633                      //AppS2wHal_NetClose(cid);
   2634                      //return;
   2635                  }
   2636                  nx_bsd_callback_register(s2wCidList[newcid].sd,AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   \                     ??CrossCallReturnLabel_40:
   \   000001BE   0x.... 0x....      BL       ?Subroutine19
   2637          		GsnOsal_SemAcquire ( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem), GSN_OSAL_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_42:
   \   000001C2   0x6820             LDR      R0,[R4, #+0]
   \   000001C4   0x.... 0x....      BL       ?Subroutine30
   2638          		s2wCidList[cid].clientConCount++;
   \                     ??CrossCallReturnLabel_75:
   \   000001C8   0xF10B 0x0020      ADD      R0,R11,#+32
   \   000001CC   0xF10B 0x0120      ADD      R1,R11,#+32
   \   000001D0   0x7840             LDRB     R0,[R0, #+1]
   \   000001D2   0x1C40             ADDS     R0,R0,#+1
   \   000001D4   0x7048             STRB     R0,[R1, #+1]
   2639          		GsnOsal_SemRelease( &(s2wappMainTaskCtxt->s2wTcpClientCntSyncSem));
   \                     ??AppS2wHal_RxCallBack_8:
   \   000001D6   0x6820             LDR      R0,[R4, #+0]
   \   000001D8   0x4440             ADD      R0,R8,R0
   \   000001DA   0x.... 0x....      BL       GsnOsal_SemRelease
   2640          
   2641                  return;
   \   000001DE   0xE029             B.N      ??AppS2wHal_RxCallBack_0
   2642              }
   2643          
   2644              /* Socket error */
   2645              if (NX_BSD_CB_SOCKET_ERROR & flags)
   \                     ??AppS2wHal_RxCallBack_4:
   \   000001E0   0x.... 0x....      LDR.W    R4,??DataTable78_2
   \   000001E4   0x06B0             LSLS     R0,R6,#+26
   \   000001E6   0xD514             BPL.N    ??AppS2wHal_RxCallBack_12
   2646              {
   2647                  if (s2wCidList[cid].conType != 0)
   \   000001E8   0xF819 0x000A      LDRB     R0,[R9, R10]
   \   000001EC   0xB188             CBZ.N    R0,??AppS2wHal_RxCallBack_12
   2648                  {
   2649          			/* for auto connection (data pipe make the async gpio low-so that host will not send data)
   2650          			 */
   2651          		    if(s2wIsAutoconnected)
   \   000001EE   0x7820             LDRB     R0,[R4, #+0]
   \   000001F0   0xB110             CBZ.N    R0,??AppS2wHal_RxCallBack_13
   2652          		    {
   2653          			   S2w_AsyncMsgGpioOp(0);
   \   000001F2   0x2000             MOVS     R0,#+0
   \   000001F4   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   2654                      }
   2655                     recvMsg.msgType = S2W_RECV_TYPE_SOCK_ERROR;
   \                     ??AppS2wHal_RxCallBack_13:
   \   000001F8   0x2031             MOVS     R0,#+49
   \   000001FA   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2656                     recvMsg.rData.dataSock = sock;
   \   000001FE   0x9702             STR      R7,[SP, #+8]
   2657                     recvMsg.msgLen = 0;
   \   00000200   0x2000             MOVS     R0,#+0
   \   00000202   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   2658                     GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000206   0x.... 0x....      BL       ?Subroutine26
   2659          		   S2w_Printf("\r\n SOCKET ERROR");
   \                     ??CrossCallReturnLabel_65:
   \   0000020A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SOCKET ERROR">`
   \   0000020E   0x.... 0x....      BL       S2w_Printf
   2660                  }
   2661          
   2662              }
   2663          
   2664              /* Remote close (for TCP sockets)
   2665               */
   2666              if (NX_BSD_CB_TCP_DISCONNECT & flags)
   \                     ??AppS2wHal_RxCallBack_12:
   \   00000212   0xB17D             CBZ.N    R5,??AppS2wHal_RxCallBack_0
   2667              {
   2668          
   2669                  {
   2670          	        /* for auto connection (data pipe make the async gpio low-so that host will not send data)
   2671          			 */
   2672          		    if(s2wIsAutoconnected)
   \   00000214   0x7820             LDRB     R0,[R4, #+0]
   \   00000216   0xB110             CBZ.N    R0,??AppS2wHal_RxCallBack_14
   2673          		    {
   2674          			   S2w_AsyncMsgGpioOp(0);
   \   00000218   0x2000             MOVS     R0,#+0
   \   0000021A   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   2675                      }
   2676                     recvMsg.msgType = S2W_RECV_TYPE_SOCK_DISCONNECT;
   2677                     recvMsg.rData.dataSock = sock;
   \                     ??AppS2wHal_RxCallBack_14:
   \   0000021E   0x9702             STR      R7,[SP, #+8]
   \   00000220   0x2032             MOVS     R0,#+50
   \   00000222   0xF8AD 0x000E      STRH     R0,[SP, #+14]
   2678                     recvMsg.msgLen = 0;
   2679          
   2680                     GsnOsal_QueuePut(&s2wNetQueue,(UINT8*)&recvMsg);
   \   00000226   0xA902             ADD      R1,SP,#+8
   \   00000228   0x.... 0x....      BL       ?Subroutine8
   2681          		   S2w_Printf("\r\n TCP DISCONNECT 2");
   \                     ??CrossCallReturnLabel_13:
   \   0000022C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP DISCONNECT 2">`
   \   00000230   0x.... 0x....      BL       S2w_Printf
   2682                  }
   2683              }
   2684          }
   \                     ??AppS2wHal_RxCallBack_0:
   \   00000234   0xB00F             ADD      SP,SP,#+60
   \   00000236   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0xF8D5 0x0006      LDR      R0,[R5, #+6]
   \   00000004   0x0A01             LSRS     R1,R0,#+8
   \   00000006   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000000A   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000000E   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   00000012   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000016   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   0000001A   0xF8C5 0x0006      STR      R0,[R5, #+6]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0x9801             LDR      R0,[SP, #+4]
   \   00000002   0x0A01             LSRS     R1,R0,#+8
   \   00000004   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000008   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   0000000C   0x9901             LDR      R1,[SP, #+4]
   \   0000000E   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000012   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000016   0x9901             LDR      R1,[SP, #+4]
   \   00000018   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   0000001C   0x9001             STR      R0,[SP, #+4]
   \   0000001E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4440             ADD      R0,R8,R0
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable77
   \   00000006   0x.... 0x....      B.W      GsnOsal_QueuePut

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xF8AD 0x000C      STRH     R0,[SP, #+12]
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable77
   \   0000000A   0x.... 0x....      B.W      GsnOsal_QueuePut

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0xF8BD 0x002E      LDRH     R0,[SP, #+46]
   \   00000004   0x0201             LSLS     R1,R0,#+8
   \   00000006   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   0000000A   0xF8AD 0x0010      STRH     R0,[SP, #+16]
   \   0000000E   0x2204             MOVS     R2,#+4
   \   00000010   0xA90C             ADD      R1,SP,#+48
   \   00000012   0xA801             ADD      R0,SP,#+4
   \   00000014   0x.... 0x....      B.W      memcpy
   2685          

   \                                 In section .text, align 2, keep-with-next
   2686          UINT8
   2687          AppS2wHal_SockOpSet(S2W_SOCK_OP_T* params)
   2688          {
   \                     AppS2wHal_SockOpSet:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   2689               //UINT8 status;
   2690               VOID *optValue;
   2691               S2W_CID_T *p;
   2692               struct sock_linger linger;
   2693               INT32 ret;
   2694               
   2695              if (params->cid >= MAX_CID_RANGE)
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0x2910             CMP      R1,#+16
   \   00000006   0xD209             BCS.N    ??AppS2wHal_SockOpSet_0
   2696              {
   2697                  return S2W_EBADCID;
   2698              }
   2699          
   2700              p = &s2wCidList[params->cid];
   \   00000008   0xF44F 0x7294      MOV      R2,#+296
   \   0000000C   0x.... 0x....      LDR.W    R3,??DataTable98_1
   \   00000010   0xFB02 0x3401      MLA      R4,R2,R1,R3
   2701              if (p->sd == CID_NOTINUSE)
   \   00000014   0x69E1             LDR      R1,[R4, #+28]
   \   00000016   0xF111 0x0F01      CMN      R1,#+1
   \   0000001A   0xD101             BNE.N    ??AppS2wHal_SockOpSet_1
   2702              {
   2703                  return S2W_EBADCID;
   \                     ??AppS2wHal_SockOpSet_0:
   \   0000001C   0x2005             MOVS     R0,#+5
   \   0000001E   0xE020             B.N      ??AppS2wHal_SockOpSet_2
   2704              }
   2705          
   2706              switch(params->param)
   \                     ??AppS2wHal_SockOpSet_1:
   \   00000020   0x6881             LDR      R1,[R0, #+8]
   \   00000022   0x290D             CMP      R1,#+13
   \   00000024   0xD004             BEQ.N    ??AppS2wHal_SockOpSet_3
   \   00000026   0x2914             CMP      R1,#+20
   \   00000028   0xBF18             IT       NE 
   \   0000002A   0x2915             CMPNE    R1,#+21
   \   0000002C   0xD006             BEQ.N    ??AppS2wHal_SockOpSet_4
   \   0000002E   0xE00B             B.N      ??AppS2wHal_SockOpSet_5
   2707              {
   2708                  case SO_LINGER:
   2709                  {
   2710                      linger.l_onoff = TRUE;
   \                     ??AppS2wHal_SockOpSet_3:
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x9102             STR      R1,[SP, #+8]
   2711                      linger.l_linger = params->paramValue;
   2712                      optValue = (void*)&linger;
   \   00000034   0xAB02             ADD      R3,SP,#+8
   \   00000036   0x68C1             LDR      R1,[R0, #+12]
   \   00000038   0x9103             STR      R1,[SP, #+12]
   2713                  }
   2714                  break;
   \   0000003A   0xE007             B.N      ??AppS2wHal_SockOpSet_6
   2715          
   2716                  case SO_RCVTIMEO:
   2717                  {
   2718                      struct timeval RecvTime;
   2719                      RecvTime.tv_sec =  params->paramValue;
   2720                      RecvTime.tv_usec = 0;
   2721                      optValue = (void*)&RecvTime;
   2722                  }
   2723                  break;
   2724          
   2725                  case SO_SNDTIMEO:
   2726                  {
   2727                      struct timeval SendTime;
   2728                      SendTime.tv_sec =  params->paramValue;
   2729                      SendTime.tv_usec = 0;
   2730                      optValue = (void*)&SendTime;
   \                     ??AppS2wHal_SockOpSet_4:
   \   0000003C   0xAB00             ADD      R3,SP,#+0
   \   0000003E   0x68C1             LDR      R1,[R0, #+12]
   \   00000040   0x9100             STR      R1,[SP, #+0]
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0x9101             STR      R1,[SP, #+4]
   2731                  }
   2732                  break;
   \   00000046   0xE001             B.N      ??AppS2wHal_SockOpSet_6
   2733                  default:
   2734                  {
   2735                      optValue = (void*)&params->paramValue;
   \                     ??AppS2wHal_SockOpSet_5:
   \   00000048   0xF100 0x030C      ADD      R3,R0,#+12
   2736                  }
   2737                  break;
   2738              }
   2739              
   2740              ret = setsockopt(p->sd,params->type,params->param,optValue,params->paramSize);
   2741              if(ret < 0)
   \                     ??AppS2wHal_SockOpSet_6:
   \   0000004C   0x6901             LDR      R1,[R0, #+16]
   \   0000004E   0x9100             STR      R1,[SP, #+0]
   \   00000050   0x6882             LDR      R2,[R0, #+8]
   \   00000052   0x6841             LDR      R1,[R0, #+4]
   \   00000054   0x69E0             LDR      R0,[R4, #+28]
   \   00000056   0x.... 0x....      BL       setsockopt
   \   0000005A   0x2800             CMP      R0,#+0
   \   0000005C   0xBF4C             ITE      MI 
   \   0000005E   0x2003             MOVMI    R0,#+3
   \   00000060   0x2000             MOVPL    R0,#+0
   2742              {
   2743                  return S2W_SOCKFAILURE;
   2744              }
   2745            
   2746          	return S2W_SUCCESS;
   \                     ??AppS2wHal_SockOpSet_2:
   \   00000062   0xB004             ADD      SP,SP,#+16
   \   00000064   0xBD10             POP      {R4,PC}          ;; return
   2747          }
   2748          
   2749          
   2750          #if defined(S2W_SSL_CLIENT_SUPPORT)
   2751          
   2752          extern S2W_SSL_CONF_T s2wSslConf;

   \                                 In section .text, align 2, keep-with-next
   2753          UINT8
   2754          AppS2wHal_HttpCheckDns(UINT8 *reqPath)
   2755          {
   \                     AppS2wHal_HttpCheckDns:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
   2756              unsigned char *name = s2wSslConf.dnsNameBuf, *tmp = NULL;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable98_2
   \   00000008   0x6865             LDR      R5,[R4, #+4]
   \   0000000A   0x4680             MOV      R8,R0
   2757              int i = 0;
   \   0000000C   0x2600             MOVS     R6,#+0
   \   0000000E   0x....             ADR.N    R7,??DataTable73  ;; "."
   \   00000010   0xE004             B.N      ??AppS2wHal_HttpCheckDns_0
   2758              while((name[i]) && (i < s2wSslConf.dnsBufferLen))
   2759              {
   2760              	if(!strncmp((const char*)name+i, (const char*)reqPath, strlen((const char*)name+i)))
   2761              	{
   2762              		return S2W_SUCCESS;
   2763              	}
   2764                  else if(('*' == *(name+i)) && ('.' == *(name+i+1)))
   2765                  {
   2766                      /* for removing 'www.' */
   2767                      tmp = (unsigned char*)strstr((const char*)reqPath, ".");
   2768                      tmp++;
   2769                      if(!strncmp((const char*)name+i+2, (const char*)reqPath, strlen((const char*)name+i+2)))
   2770                      {
   2771                          return S2W_SUCCESS;
   2772                      }
   2773          
   2774                      else if(!strncmp((const char*)name+i+2, (const char*)tmp, strlen((const char*)name+i+2)))
   2775                      {
   2776                          return S2W_SUCCESS;
   2777                      }
   2778                      else
   2779                      {
   2780                          i += strlen((const char*)name+i);
   2781                          i++;
   \                     ??AppS2wHal_HttpCheckDns_1:
   \   00000012   0x1970             ADDS     R0,R6,R5
   \   00000014   0x.... 0x....      BL       strlen
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x1986             ADDS     R6,R0,R6
   2782                      }
   \                     ??AppS2wHal_HttpCheckDns_0:
   \   0000001C   0x5D70             LDRB     R0,[R6, R5]
   \   0000001E   0xB388             CBZ.N    R0,??AppS2wHal_HttpCheckDns_2
   \   00000020   0x6820             LDR      R0,[R4, #+0]
   \   00000022   0x4286             CMP      R6,R0
   \   00000024   0xD22E             BCS.N    ??AppS2wHal_HttpCheckDns_2
   \   00000026   0x1970             ADDS     R0,R6,R5
   \   00000028   0x.... 0x....      BL       strlen
   \   0000002C   0x4602             MOV      R2,R0
   \   0000002E   0x4641             MOV      R1,R8
   \   00000030   0x1970             ADDS     R0,R6,R5
   \   00000032   0x.... 0x....      BL       strncmp
   \   00000036   0xB318             CBZ.N    R0,??AppS2wHal_HttpCheckDns_3
   \   00000038   0x5D70             LDRB     R0,[R6, R5]
   \   0000003A   0x282A             CMP      R0,#+42
   \   0000003C   0xBF02             ITTT     EQ 
   \   0000003E   0x1970             ADDEQ    R0,R6,R5
   \   00000040   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000042   0x282E             CMPEQ    R0,#+46
   \   00000044   0xD1E5             BNE.N    ??AppS2wHal_HttpCheckDns_1
   \   00000046   0x4639             MOV      R1,R7
   \   00000048   0x4640             MOV      R0,R8
   \   0000004A   0x.... 0x....      BL       __iar_Strstr
   \   0000004E   0x4681             MOV      R9,R0
   \   00000050   0x1970             ADDS     R0,R6,R5
   \   00000052   0x1C80             ADDS     R0,R0,#+2
   \   00000054   0x.... 0x....      BL       strlen
   \   00000058   0x4602             MOV      R2,R0
   \   0000005A   0x1970             ADDS     R0,R6,R5
   \   0000005C   0x4641             MOV      R1,R8
   \   0000005E   0x1C80             ADDS     R0,R0,#+2
   \   00000060   0x.... 0x....      BL       strncmp
   \   00000064   0xB160             CBZ.N    R0,??AppS2wHal_HttpCheckDns_3
   \   00000066   0x1970             ADDS     R0,R6,R5
   \   00000068   0x1C80             ADDS     R0,R0,#+2
   \   0000006A   0x.... 0x....      BL       strlen
   \   0000006E   0x4602             MOV      R2,R0
   \   00000070   0x1970             ADDS     R0,R6,R5
   \   00000072   0xF109 0x0101      ADD      R1,R9,#+1
   \   00000076   0x1C80             ADDS     R0,R0,#+2
   \   00000078   0x.... 0x....      BL       strncmp
   \   0000007C   0x2800             CMP      R0,#+0
   \   0000007E   0xD1C8             BNE.N    ??AppS2wHal_HttpCheckDns_1
   \                     ??AppS2wHal_HttpCheckDns_3:
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xE024             B.N      ??AppS2wHal_HttpCheckDns_4
   2783                  }
   2784              	else
   2785              	{
   2786              		i += strlen((const char*)name+i);
   2787              		i++;
   2788              	}
   2789              }
   \                     ??AppS2wHal_HttpCheckDns_2:
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable98_3
   \   00000088   0xF890 0x03A8      LDRB     R0,[R0, #+936]
   \   0000008C   0x2801             CMP      R0,#+1
   \   0000008E   0xD104             BNE.N    ??AppS2wHal_HttpCheckDns_5
   2790              if(1 == s2wCurrent.logLevel)
   2791              {
   2792              	S2w_Printf("\r\n warning: certificate mismatch");
   \   00000090   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n warning: certifica...">`
   \   00000094   0x.... 0x....      BL       S2w_Printf
   \   00000098   0xE018             B.N      ??AppS2wHal_HttpCheckDns_6
   2793              }
   2794              else if(2 == s2wCurrent.logLevel)
   \                     ??AppS2wHal_HttpCheckDns_5:
   \   0000009A   0x2802             CMP      R0,#+2
   \   0000009C   0xD116             BNE.N    ??AppS2wHal_HttpCheckDns_6
   2795              {
   2796              	S2w_Printf("\r\n warning: certificate mismatch:");
   \   0000009E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n warning: certifica...">_1`
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   2797              	name = s2wSslConf.dnsNameBuf;
   \   000000A6   0x6865             LDR      R5,[R4, #+4]
   2798                  i = 0;
   \   000000A8   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n %s">`
   \   000000AC   0xE008             B.N      ??AppS2wHal_HttpCheckDns_7
   2799          		while(*name && (i < s2wSslConf.dnsBufferLen))
   2800          		{
   2801          			S2w_Printf("\r\n %s", name);
   \                     ??AppS2wHal_HttpCheckDns_8:
   \   000000AE   0x4629             MOV      R1,R5
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       S2w_Printf
   2802              		name += strlen((const char*)name);
   2803              		name++;
   \   000000B6   0x4628             MOV      R0,R5
   \   000000B8   0x.... 0x....      BL       strlen
   \   000000BC   0x1940             ADDS     R0,R0,R5
   \   000000BE   0x1C45             ADDS     R5,R0,#+1
   2804          		}
   \                     ??AppS2wHal_HttpCheckDns_7:
   \   000000C0   0x7828             LDRB     R0,[R5, #+0]
   \   000000C2   0x2800             CMP      R0,#+0
   \   000000C4   0xBF1C             ITT      NE 
   \   000000C6   0x6820             LDRNE    R0,[R4, #+0]
   \   000000C8   0x2800             CMPNE    R0,#+0
   \   000000CA   0xD1F0             BNE.N    ??AppS2wHal_HttpCheckDns_8
   2805              }
   2806              return S2W_FAILURE;
   \                     ??AppS2wHal_HttpCheckDns_6:
   \   000000CC   0x2001             MOVS     R0,#+1
   \                     ??AppS2wHal_HttpCheckDns_4:
   \   000000CE   0xE8BD 0x83F2      POP      {R1,R4-R9,PC}    ;; return
   2807          }

   \                                 In section .text, align 2, keep-with-next
   2808          UINT8 AppS2w_SslClientOpen(UINT8 cliCid, char* caCertName,
   2809                                     UINT8 *clientCertName, UINT8 *clientKeyName)
   2810          {
   \                     AppS2w_SslClientOpen:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB08B             SUB      SP,SP,#+44
   \   00000006   0x4682             MOV      R10,R0
   \   00000008   0x468B             MOV      R11,R1
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0x461D             MOV      R5,R3
   2811              //INT32 u32NoOfBytesSent;
   2812              UINT32 status;
   2813              UINT8 *certBuf = NULL;
   2814              UINT16 caCertsize = 0;
   2815              INT32  index=0;
   2816              //void *pSslConn;
   2817              GSN_SSL_CONN_PARAMS_T sslConnParams;
   2818          	UINT32 cid = cliCid;
   2819          
   2820          #ifdef S2W_APP_SSL_PROVISION
   2821              initStartTime = GsnSoftTmr_CurrentSystemTime();
   2822          #endif
   2823          
   2824              /* Avoid warning*/
   2825              (void)certBuf ;
   2826              (void)caCertsize ;
   2827              memset((INT8 *)&sslConnParams, 0, sizeof(sslConnParams));
   \   0000000E   0x2228             MOVS     R2,#+40
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x.... 0x....      BL       memset
   2828              if (s2wCidList[cid].sslflag == TRUE)
   \   00000018   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_35:
   \   0000001C   0xFB00 0x160A      MLA      R6,R0,R10,R1
   \   00000020   0xF106 0x071C      ADD      R7,R6,#+28
   \   00000024   0x7C38             LDRB     R0,[R7, #+16]
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xD104             BNE.N    ??AppS2w_SslClientOpen_0
   2829              {
   2830                  S2w_Printf("\r\nSocket is already SSL Enabled");
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSocket is already S...">`
   \   0000002E   0x.... 0x....      BL       S2w_Printf
   2831                  return S2W_FAILURE;
   \   00000032   0xE08C             B.N      ??AppS2w_SslClientOpen_1
   2832              }
   2833          
   2834              if(caCertName != NULL)
   \                     ??AppS2w_SslClientOpen_0:
   \   00000034   0xF04F 0x080C      MOV      R8,#+12
   \   00000038   0x.... 0x....      LDR.W    R9,??DataTable99_1
   \   0000003C   0xF1BB 0x0F00      CMP      R11,#+0
   \   00000040   0xD015             BEQ.N    ??AppS2w_SslClientOpen_2
   2835              {
   2836                  index = S2wCert_SearchRamTable(caCertName);
   \   00000042   0x4658             MOV      R0,R11
   \   00000044   0x.... 0x....      BL       S2wCert_SearchRamTable
   2837                  if(index == -1)
   \   00000048   0xF110 0x0F01      CMN      R0,#+1
   \   0000004C   0xBF04             ITT      EQ 
   \   0000004E   0x4658             MOVEQ    R0,R11
   \   00000050   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2838                  {
   2839                  	index = S2wCert_FlashFileLoad(caCertName);
   2840                  }
   2841                  if(index == -1)
   \   00000054   0xF110 0x0F01      CMN      R0,#+1
   \   00000058   0xD103             BNE.N    ??AppS2w_SslClientOpen_3
   2842                  {
   2843                      S2w_Printf("\n\rca Certificate %s Not Found", caCertName);
   \   0000005A   0x4659             MOV      R1,R11
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rca Certificate %s N...">`
   \   00000060   0xE02B             B.N      ??AppS2w_SslClientOpen_4
   2844                      return S2W_FAILURE;
   2845                  }
   \                     ??AppS2w_SslClientOpen_3:
   \   00000062   0x.... 0x....      BL       ?Subroutine44
   \                     ??CrossCallReturnLabel_123:
   \   00000066   0x9102             STR      R1,[SP, #+8]
   2846          
   2847                  // currently use the hardcoded certificate
   2848                  sslConnParams.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2849                  sslConnParams.caCert = s2w_ssl_cert_table[index].certAddress + 2;
   \   00000068   0x9001             STR      R0,[SP, #+4]
   2850                  sslConnParams.caCertName = (char const*)caCertName;
   \   0000006A   0xF8CD 0xB000      STR      R11,[SP, #+0]
   2851              }
   2852          
   2853          
   2854              if(clientCertName != NULL)
   \                     ??AppS2w_SslClientOpen_2:
   \   0000006E   0xB1A4             CBZ.N    R4,??AppS2w_SslClientOpen_5
   2855              {
   2856                  index = S2wCert_SearchRamTable((char*)clientCertName);
   \   00000070   0x4620             MOV      R0,R4
   \   00000072   0x.... 0x....      BL       S2wCert_SearchRamTable
   2857                  if(index == -1)
   \   00000076   0xF110 0x0F01      CMN      R0,#+1
   \   0000007A   0xBF04             ITT      EQ 
   \   0000007C   0x4620             MOVEQ    R0,R4
   \   0000007E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2858                  {
   2859                  	index = S2wCert_FlashFileLoad((char*)clientCertName);
   2860                  }
   2861                  if(index == -1)
   \   00000082   0xF110 0x0F01      CMN      R0,#+1
   \   00000086   0xD103             BNE.N    ??AppS2w_SslClientOpen_6
   2862                  {
   2863                      S2w_Printf("\n\rclient Certificate %s Not Found", clientCertName);
   \   00000088   0x4621             MOV      R1,R4
   \   0000008A   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rclient Certificate ...">`
   \   0000008E   0xE014             B.N      ??AppS2w_SslClientOpen_4
   2864                      return S2W_FAILURE;
   2865                  }
   \                     ??AppS2w_SslClientOpen_6:
   \   00000090   0x.... 0x....      BL       ?Subroutine44
   \                     ??CrossCallReturnLabel_124:
   \   00000094   0x9105             STR      R1,[SP, #+20]
   2866                  sslConnParams.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2867                  sslConnParams.clientCert =  s2w_ssl_cert_table[index].certAddress + 2;
   \   00000096   0x9004             STR      R0,[SP, #+16]
   2868                  sslConnParams.clientCertName = (char const*)clientCertName;
   \   00000098   0x9403             STR      R4,[SP, #+12]
   2869          
   2870              }
   2871          
   2872          
   2873              if(clientKeyName != NULL)
   \                     ??AppS2w_SslClientOpen_5:
   \   0000009A   0xB1B5             CBZ.N    R5,??AppS2w_SslClientOpen_7
   2874              {
   2875                  index = S2wCert_SearchRamTable((char*)clientKeyName);
   \   0000009C   0x4628             MOV      R0,R5
   \   0000009E   0x.... 0x....      BL       S2wCert_SearchRamTable
   2876                  if(index == -1)
   \   000000A2   0xF110 0x0F01      CMN      R0,#+1
   \   000000A6   0xBF04             ITT      EQ 
   \   000000A8   0x4628             MOVEQ    R0,R5
   \   000000AA   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2877                  {
   2878                  	index = S2wCert_FlashFileLoad((char*)clientKeyName);
   2879                  }
   2880                  if(index == -1)
   \   000000AE   0xF110 0x0F01      CMN      R0,#+1
   \   000000B2   0xD105             BNE.N    ??AppS2w_SslClientOpen_8
   2881                  {
   2882                      S2w_Printf("\n\rclient key Certificate %s Not Found", clientKeyName);
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\rclient key Certific...">`
   \                     ??AppS2w_SslClientOpen_4:
   \   000000BA   0x.... 0x....      BL       S2w_Printf
   2883                      return S2W_FAILURE;
   \   000000BE   0xE046             B.N      ??AppS2w_SslClientOpen_1
   2884                  }
   \                     ??AppS2w_SslClientOpen_8:
   \   000000C0   0x.... 0x....      BL       ?Subroutine44
   \                     ??CrossCallReturnLabel_125:
   \   000000C4   0x9108             STR      R1,[SP, #+32]
   2885                  sslConnParams.clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   2886                  sslConnParams.clientKey =  s2w_ssl_cert_table[index].certAddress + 2;
   \   000000C6   0x9007             STR      R0,[SP, #+28]
   2887                  sslConnParams.clientKeyName = (char const*)clientKeyName;
   \   000000C8   0x9506             STR      R5,[SP, #+24]
   2888          
   2889              }
   2890          
   2891              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);    //deregister callback
   \                     ??AppS2w_SslClientOpen_7:
   \   000000CA   0x2200             MOVS     R2,#+0
   \   000000CC   0x69F0             LDR      R0,[R6, #+28]
   \   000000CE   0x.... 0x....      BL       ??Subroutine24_0
   2892          
   2893              s2wCidList[cid].ssl.sslConn = (GSN_SSL_CONN_T*)MALLOC(sizeof(GSN_SSL_CONN_T));
   \                     ??CrossCallReturnLabel_57:
   \   000000D2   0x2034             MOVS     R0,#+52
   \   000000D4   0x.... 0x....      BL       MALLOC
   \   000000D8   0x60F8             STR      R0,[R7, #+12]
   2894          
   2895              if(NULL == s2wCidList[cid].ssl.sslConn)
   \   000000DA   0x2800             CMP      R0,#+0
   \   000000DC   0xD037             BEQ.N    ??AppS2w_SslClientOpen_1
   2896              {
   2897                  return S2W_FAILURE;
   2898              }
   2899          	memset((INT8 *)s2wCidList[cid].ssl.sslConn, 0, sizeof(GSN_SSL_CONN_T));
   \   000000DE   0x2234             MOVS     R2,#+52
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0x.... 0x....      BL       memset
   2900                 s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   \   000000E6   0x68F8             LDR      R0,[R7, #+12]
   \   000000E8   0x2100             MOVS     R1,#+0
   \   000000EA   0x8201             STRH     R1,[R0, #+16]
   2901          	s2wCidList[cid].ssl.sslConn->connMode = GSN_SSL_CONN_MODE_CLIENT;
   2902          	s2wCidList[cid].sslflag = TRUE;
   2903          
   2904          #ifdef S2W_SSL_EXT_MAX_FRAG_LEN
   2905              s2wCidList[cid].ssl.sslConn->maxFragLen = S2W_SSL_EXT_MAX_FRAG_LEN;
   2906          #else
   2907              s2wCidList[cid].ssl.sslConn->maxFragLen = 0;
   2908          #endif
   2909          
   2910          #if 1 /*SSl open is now done in Wdd task context*/
   2911              status = GsnSsl_Open(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd,
   2912                                   &sslConnParams);
   2913          #else
   2914          	{
   2915          		UINT32 msg;
   2916          		/*create open sem*/
   2917          		GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   2918          		s2wCidList[cid].pConnOpenParams = &sslConnParams;
   2919          		/*post message */
   2920          		msg = (S2W_MOD_NOTIF_CONN_START + cid);
   2921          		GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   2922          		GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress,GSN_OSAL_WAIT_FOREVER);
   2923          		status = s2wCidList[cid].openStatus;
   2924          		/*Delete the semaphore*/
   2925          		GsnOsal_SemDelete(&s2wCidList[cid].s2wUserOpenInProgress);
   2926          	}
   2927          #endif
   2928              if(status == GSN_SUCCESS)
   \   000000EC   0xAA00             ADD      R2,SP,#+0
   \   000000EE   0x68F8             LDR      R0,[R7, #+12]
   \   000000F0   0x6001             STR      R1,[R0, #+0]
   \   000000F2   0x2001             MOVS     R0,#+1
   \   000000F4   0x7438             STRB     R0,[R7, #+16]
   \   000000F6   0x68F8             LDR      R0,[R7, #+12]
   \   000000F8   0xF880 0x1028      STRB     R1,[R0, #+40]
   \   000000FC   0x68F8             LDR      R0,[R7, #+12]
   \   000000FE   0x69F1             LDR      R1,[R6, #+28]
   \   00000100   0x.... 0x....      BL       GsnSsl_Open
   \   00000104   0xB9A0             CBNZ.N   R0,??AppS2w_SslClientOpen_9
   2929              {
   2930                  nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   \   00000106   0x69F0             LDR      R0,[R6, #+28]
   \   00000108   0x.... 0x....      BL       ??Subroutine20_0
   2931          		s2wCidList[cid].sslflag = TRUE;
   \                     ??CrossCallReturnLabel_44:
   \   0000010C   0x2001             MOVS     R0,#+1
   \   0000010E   0x7438             STRB     R0,[R7, #+16]
   2932          
   2933                  GsnOsal_SemCreate(&s2wCidList[cid].s2wUserCloseInProgress, 0);
   \   00000110   0x2100             MOVS     R1,#+0
   \   00000112   0xF106 0x0038      ADD      R0,R6,#+56
   \   00000116   0x.... 0x....      BL       GsnOsal_SemCreate
   2934                  AppS2wHal_TimerInit(&s2wCidList[cid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)cid);
   \   0000011A   0x4652             MOV      R2,R10
   \   0000011C   0x.... 0x....      ADR.W    R1,AppS2wHal_HttpCloseTimeout
   \   00000120   0xF106 0x0058      ADD      R0,R6,#+88
   \   00000124   0x.... 0x....      BL       AppS2wHal_TimerInit
   2935                  s2wCidList[cid].s2wUsrCloseFlag = 0;
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0xF886 0x0090      STRB     R0,[R6, #+144]
   2936                  return S2W_SUCCESS;
   \   0000012E   0xE00F             B.N      ??AppS2w_SslClientOpen_10
   2937              }
   2938              else
   2939              {
   2940                  s2wCidList[cid].sslflag = 0;
   \                     ??AppS2w_SslClientOpen_9:
   \   00000130   0x2000             MOVS     R0,#+0
   \   00000132   0x7438             STRB     R0,[R7, #+16]
   2941                  if(s2wCidList[cid].ssl.sslConn != NULL)
   \   00000134   0x68F8             LDR      R0,[R7, #+12]
   \   00000136   0xB108             CBZ.N    R0,??AppS2w_SslClientOpen_11
   2942                  {
   2943                      gsn_free(s2wCidList[cid].ssl.sslConn);
   \   00000138   0x.... 0x....      BL       GsnDynMemMgmt_Free
   2944                  }
   2945          
   2946                     soc_close(s2wCidList[cid].sd);
   \                     ??AppS2w_SslClientOpen_11:
   \   0000013C   0x69F0             LDR      R0,[R6, #+28]
   \   0000013E   0x.... 0x....      BL       soc_close
   2947                     s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000142   0xF04F 0x30FF      MOV      R0,#-1
   \   00000146   0x61F0             STR      R0,[R6, #+28]
   2948                     s2wCidList[cid].localPort = 0;
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x8070             STRH     R0,[R6, #+2]
   2949                     s2wCidList[cid].remotePort = 0;
   \   0000014C   0x80B0             STRH     R0,[R6, #+4]
   2950                  return S2W_FAILURE;
   \                     ??AppS2w_SslClientOpen_1:
   \   0000014E   0x2001             MOVS     R0,#+1
   \                     ??AppS2w_SslClientOpen_10:
   \   00000150   0xB00B             ADD      SP,SP,#+44
   \   00000152   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2951              }
   2952          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine44:
   \   00000000   0xFB08 0x9000      MLA      R0,R8,R0,R9
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0xF830 0x1B02      LDRH     R1,[R0], #+2
   \   0000000A   0x4770             BX       LR
   2953          #endif
   2954          
   2955          
   2956          #ifdef S2W_SSL_SERVER_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   2957          GSN_STATUS AppS2w_SslServerOpen(UINT8 cid, char* sslCACertName)
   2958          {
   \                     AppS2w_SslServerOpen:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2959              //UINT8 retVal = S2W_FAILURE;
   2960              //INT32 u32NoOfBytesSent;
   2961              UINT32 /*status,*/ certLength ;
   2962              INT32  index=0;
   2963              SERVER_CERT_DETAIL_T certDetail;
   2964          #ifdef S2W_APP_SSL_PROVISION
   2965              initStartTime = GsnSoftTmr_CurrentSystemTime();
   2966          #endif
   2967          
   2968              if (s2wCidList[cid].sslflag == TRUE)
   \   00000004   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_93:
   \   00000008   0xF104 0x0028      ADD      R0,R4,#+40
   \   0000000C   0xB08E             SUB      SP,SP,#+56
   \   0000000E   0x7901             LDRB     R1,[R0, #+4]
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD104             BNE.N    ??AppS2w_SslServerOpen_0
   2969              {
   2970                  S2w_Printf("\r\nSocket is already SSL Enabled");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSocket is already S...">`
   \   00000018   0x.... 0x....      BL       S2w_Printf
   2971                  return S2W_FAILURE;
   \   0000001C   0xE04F             B.N      ??AppS2w_SslServerOpen_1
   2972              }
   2973          
   2974          
   2975              s2wCidList[cid].sslflag = TRUE;
   \                     ??AppS2w_SslServerOpen_0:
   \   0000001E   0x2101             MOVS     R1,#+1
   \   00000020   0x7101             STRB     R1,[R0, #+4]
   2976              /* Fill the certificate details here. For testing it takes the below
   2977                 certificates */
   2978           #ifndef S2W_SSL_SERVER_TEST
   2979           	memset((INT8 *)&certDetail, 0, sizeof(certDetail));
   \   00000022   0x2234             MOVS     R2,#+52
   \   00000024   0x2100             MOVS     R1,#+0
   \   00000026   0xA800             ADD      R0,SP,#+0
   \   00000028   0x.... 0x....      BL       memset
   2980          
   2981              index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_CA);
   \   0000002C   0x.... 0x....      ADR.W    R6,`?<Constant "SSL_CA">`
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       S2wCert_SearchRamTable
   2982              if(index == -1)
   \   00000036   0xF110 0x0F01      CMN      R0,#+1
   \   0000003A   0xBF04             ITT      EQ 
   \   0000003C   0x4630             MOVEQ    R0,R6
   \   0000003E   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   2983              {
   2984              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_CA);
   2985              }
   2986              if(index == -1)
   \   00000042   0x.... 0x....      ADR.W    R5,`?<Constant "\\n\\rCertificate %s Not ...">`
   \   00000046   0xF110 0x0F01      CMN      R0,#+1
   \   0000004A   0xBF08             IT       EQ 
   \   0000004C   0x4631             MOVEQ    R1,R6
   2987              {
   2988                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_CA);
   \   0000004E   0xD033             BEQ.N    ??AppS2w_SslServerOpen_2
   2989                  return S2W_FAILURE;
   2990              }
   2991          
   2992              certDetail.CaCertName = (char const *)s2w_ssl_cert_table[index].name;
   \   00000050   0x260C             MOVS     R6,#+12
   \   00000052   0x4370             MULS     R0,R6,R0
   \   00000054   0x.... 0x....      LDR.W    R7,??DataTable99_1
   2993              certDetail.CaCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   2994              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   2995              certLength <<= 8;
   2996              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   2997              certDetail.CaCertLen = certLength;
   2998          
   2999          	index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_SERVER);
   \   00000058   0x.... 0x....      ADR.W    R8,`?<Constant "SSL_SERVER">`
   \   0000005C   0x19C1             ADDS     R1,R0,R7
   \   0000005E   0x6849             LDR      R1,[R1, #+4]
   \   00000060   0x9100             STR      R1,[SP, #+0]
   \   00000062   0x59C0             LDR      R0,[R0, R7]
   \   00000064   0x1C81             ADDS     R1,R0,#+2
   \   00000066   0x9101             STR      R1,[SP, #+4]
   \   00000068   0x.... 0x....      BL       ?Subroutine46
   \                     ??CrossCallReturnLabel_128:
   \   0000006C   0x9002             STR      R0,[SP, #+8]
   \   0000006E   0x4640             MOV      R0,R8
   \   00000070   0x.... 0x....      BL       S2wCert_SearchRamTable
   3000              if(index == -1)
   \   00000074   0xF110 0x0F01      CMN      R0,#+1
   \   00000078   0xBF04             ITT      EQ 
   \   0000007A   0x4640             MOVEQ    R0,R8
   \   0000007C   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   3001              {
   3002              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_SERVER);
   3003              }
   3004              if(index == -1)
   \   00000080   0xF110 0x0F01      CMN      R0,#+1
   \   00000084   0xD017             BEQ.N    ??AppS2w_SslServerOpen_3
   3005              {
   3006                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_SERVER);
   3007                  return S2W_FAILURE;
   3008              }
   3009          
   3010              certDetail.ClientCertName = (char const *)s2w_ssl_cert_table[index].name;
   \   00000086   0x4370             MULS     R0,R6,R0
   \   00000088   0x19C1             ADDS     R1,R0,R7
   3011              certDetail.ClientCertLocation = s2w_ssl_cert_table[index].certAddress + 2;
   3012              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   3013              certLength <<= 8;
   3014              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   3015              certDetail.ClientCertLen = certLength;
   3016          
   3017          	index = S2wCert_SearchRamTable(S2W_SSL_CERT_NAME_KEY);
   \   0000008A   0x.... 0x....      ADR.W    R8,`?<Constant "SSL_KEY">`
   \   0000008E   0x6849             LDR      R1,[R1, #+4]
   \   00000090   0x9103             STR      R1,[SP, #+12]
   \   00000092   0x59C0             LDR      R0,[R0, R7]
   \   00000094   0x1C81             ADDS     R1,R0,#+2
   \   00000096   0x9104             STR      R1,[SP, #+16]
   \   00000098   0x.... 0x....      BL       ?Subroutine46
   \                     ??CrossCallReturnLabel_129:
   \   0000009C   0x9005             STR      R0,[SP, #+20]
   \   0000009E   0x4640             MOV      R0,R8
   \   000000A0   0x.... 0x....      BL       S2wCert_SearchRamTable
   3018              if(index == -1)
   \   000000A4   0xF110 0x0F01      CMN      R0,#+1
   \   000000A8   0xBF04             ITT      EQ 
   \   000000AA   0x4640             MOVEQ    R0,R8
   \   000000AC   0x.... 0x....      BLEQ     S2wCert_FlashFileLoad
   3019              {
   3020              	index = S2wCert_FlashFileLoad(S2W_SSL_CERT_NAME_KEY);
   3021              }
   3022              if(index == -1)
   \   000000B0   0xF110 0x0F01      CMN      R0,#+1
   \   000000B4   0xD105             BNE.N    ??AppS2w_SslServerOpen_4
   3023              {
   3024                  S2w_Printf("\n\rCertificate %s Not Found", S2W_SSL_CERT_NAME_KEY);
   \                     ??AppS2w_SslServerOpen_3:
   \   000000B6   0x4641             MOV      R1,R8
   \                     ??AppS2w_SslServerOpen_2:
   \   000000B8   0x4628             MOV      R0,R5
   \   000000BA   0x.... 0x....      BL       S2w_Printf
   3025                  return S2W_FAILURE;
   \                     ??AppS2w_SslServerOpen_1:
   \   000000BE   0x2001             MOVS     R0,#+1
   \   000000C0   0xE012             B.N      ??AppS2w_SslServerOpen_5
   3026              }
   3027              
   3028              certDetail.PrivateKeyName = (char const *)s2w_ssl_cert_table[index].name;
   \                     ??AppS2w_SslServerOpen_4:
   \   000000C2   0x4370             MULS     R0,R6,R0
   \   000000C4   0x19C1             ADDS     R1,R0,R7
   \   000000C6   0x6849             LDR      R1,[R1, #+4]
   \   000000C8   0x9106             STR      R1,[SP, #+24]
   3029              certDetail.PrivateKeyLocation = s2w_ssl_cert_table[index].certAddress + 2;
   \   000000CA   0x59C0             LDR      R0,[R0, R7]
   \   000000CC   0x1C81             ADDS     R1,R0,#+2
   \   000000CE   0x9107             STR      R1,[SP, #+28]
   3030              certLength = *(s2w_ssl_cert_table[index].certAddress + 1);
   3031              certLength <<= 8;
   3032              certLength = certLength | (*(s2w_ssl_cert_table[index].certAddress));
   3033              certDetail.PrivateKeyLen = certLength;
   \   000000D0   0x.... 0x....      BL       ?Subroutine46
   \                     ??CrossCallReturnLabel_130:
   \   000000D4   0x9008             STR      R0,[SP, #+32]
   3034          
   3035          #else
   3036          
   3037              certDetail.CaCertName = "ca_cert.crt";
   3038              certDetail.CaCertLocation = ca_cert;
   3039              certDetail.CaCertLen = sizeof(ca_cert);
   3040              certDetail.ClientCertName = "server_cert.crt";
   3041              certDetail.ClientCertLocation = server_cert;
   3042              certDetail.ClientCertLen = sizeof(server_cert);
   3043              certDetail.PrivateKeyName = "server_key.key";
   3044              certDetail.PrivateKeyLocation = server_key;
   3045              certDetail.PrivateKeyLen = sizeof(server_key);
   3046          #endif
   3047              s2wCidList[cid].ssl.pServerCred =
   3048                  GsnSsl_ServerInit( &certDetail );
   \   000000D6   0xA800             ADD      R0,SP,#+0
   \   000000D8   0x.... 0x....      BL       GsnSsl_ServerInit
   \   000000DC   0x62A0             STR      R0,[R4, #+40]
   3049          
   3050              if(s2wCidList[cid].ssl.pServerCred == NULL )
   \   000000DE   0x2800             CMP      R0,#+0
   \   000000E0   0xBF0C             ITE      EQ 
   \   000000E2   0xF04F 0x4000      MOVEQ    R0,#-2147483648
   \   000000E6   0x2000             MOVNE    R0,#+0
   3051                  return GSN_FAILURE;
   3052              return S2W_SUCCESS;
   \                     ??AppS2w_SslServerOpen_5:
   \   000000E8   0xB00E             ADD      SP,SP,#+56
   \   000000EA   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3053          
   3054          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine46:
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   00000008   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2400      MLA      R4,R1,R0,R2
   \   0000000C   0x4770             BX       LR
   3055          #endif
   3056          
   3057          

   \                                 In section .text, align 2, keep-with-next
   3058          PUBLIC GSN_STATUS
   3059          AppS2w_SslClose(UINT8 cid)
   3060          {
   \                     AppS2w_SslClose:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   3061              if (s2wCidList[cid].sslflag == TRUE)
   \   00000004   0xF44F 0x7094      MOV      R0,#+296
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable98_1
   \   0000000C   0xFB00 0x1504      MLA      R5,R0,R4,R1
   \   00000010   0xF105 0x061C      ADD      R6,R5,#+28
   \   00000014   0x7C30             LDRB     R0,[R6, #+16]
   \   00000016   0x2801             CMP      R0,#+1
   \   00000018   0xD111             BNE.N    ??AppS2w_SslClose_0
   3062              {
   3063              	if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_CLIENT)
   \   0000001A   0x7868             LDRB     R0,[R5, #+1]
   \   0000001C   0xB950             CBNZ.N   R0,??CrossCallReturnLabel_74
   3064              	{
   3065          	        s2wCidList[cid].s2wUsrCloseFlag = 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xF885 0x0090      STRB     R0,[R5, #+144]
   3066          			/* start a timer for 10 seconds, to come ou if the sever does not respond
   3067          			*/
   3068          	        AppS2wHal_TimerStart(&s2wCidList[cid].s2wUserCloseTimer, 1000);
   \   00000024   0x.... 0x....      BL       ?Subroutine45
   3069          			/* Send Alert*/
   3070          	        GsnSsl_Alert(s2wCidList[cid].ssl.sslConn, s2wCidList[cid].sd);
   \                     ??CrossCallReturnLabel_127:
   \   00000028   0x69E9             LDR      R1,[R5, #+28]
   \   0000002A   0x68F0             LDR      R0,[R6, #+12]
   \   0000002C   0x.... 0x....      BL       GsnSsl_Alert
   3071          			/* wait on the semaphore to recv the remote close. This semaphore will be relesed in case of
   3072          			1. Socket error OR
   3073          			2. Remote socket close OR
   3074          			3. Socket Disconnect OR
   3075          			4. Time out
   3076          			*/
   3077          	        GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserCloseInProgress, GSN_OSAL_WAIT_FOREVER);
   \   00000030   0x.... 0x....      BL       ?Subroutine29
   3078              	}
   3079          		/*Either close or Timeout happened*/
   3080          		AppS2w_SslLocalClose(cid);
   \                     ??CrossCallReturnLabel_74:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       AppS2w_SslLocalClose
   3081                  return S2W_SUCCESS;
   \   0000003A   0x2000             MOVS     R0,#+0
   \   0000003C   0xBD70             POP      {R4-R6,PC}
   3082              }
   3083              else
   3084              {
   3085                  return S2W_EBADCID;
   \                     ??AppS2w_SslClose_0:
   \   0000003E   0x2005             MOVS     R0,#+5
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return
   3086              }
   3087          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine45:
   \   00000000   0xF44F 0x717A      MOV      R1,#+1000
   \   00000004   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000008   0x.... 0x....      B.W      AppS2wHal_TimerStart

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0xF105 0x0038      ADD      R0,R5,#+56
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3088          

   \                                 In section .text, align 2, keep-with-next
   3089          PRIVATE GSN_STATUS
   3090          AppS2w_SslLocalClose(UINT8 cid)
   3091          {
   \                     AppS2w_SslLocalClose:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   3092              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);
   \   00000002   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_94:
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x69E0             LDR      R0,[R4, #+28]
   \   0000000A   0x.... 0x....      BL       ??Subroutine24_0
   3093          	if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_CLIENT)
   \                     ??CrossCallReturnLabel_56:
   \   0000000E   0x7860             LDRB     R0,[R4, #+1]
   \   00000010   0xF104 0x051C      ADD      R5,R4,#+28
   \   00000014   0xB918             CBNZ.N   R0,??AppS2w_SslLocalClose_0
   3094              {
   3095                  GsnSsl_Close(s2wCidList[cid].ssl.sslConn);
   \   00000016   0x68E8             LDR      R0,[R5, #+12]
   \   00000018   0x.... 0x....      BL       GsnSsl_Close
   \   0000001C   0xE004             B.N      ??AppS2w_SslLocalClose_1
   3096          	}
   3097          	else if(s2wCidList[cid].conMode == S2W_NETDATA_MODE_SERVER)
   \                     ??AppS2w_SslLocalClose_0:
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xBF04             ITT      EQ 
   \   00000022   0x68E8             LDREQ    R0,[R5, #+12]
   \   00000024   0x.... 0x....      BLEQ     GsnSsl_ServerDeInit
   3098          	{
   3099          #ifdef S2W_SSL_SERVER_SUPPORT
   3100          		GsnSsl_ServerDeInit(s2wCidList[cid].ssl.pServerCred);
   3101          #endif
   3102          	}
   3103              s2wCidList[cid].ssl.sslConn = NULL;
   \                     ??AppS2w_SslLocalClose_1:
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x60E8             STR      R0,[R5, #+12]
   3104              s2wCidList[cid].sslflag = FALSE;
   \   0000002C   0x7428             STRB     R0,[R5, #+16]
   3105              soc_close(s2wCidList[cid].sd);
   \   0000002E   0x69E0             LDR      R0,[R4, #+28]
   \   00000030   0x.... 0x....      BL       soc_close
   3106              s2wCidList[cid].localPort = 0;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x8060             STRH     R0,[R4, #+2]
   3107              s2wCidList[cid].remotePort = 0;
   \   00000038   0x80A0             STRH     R0,[R4, #+4]
   3108          
   3109          	/* Delete Close In progress semaphore*/
   3110          	GsnOsal_SemDelete(&s2wCidList[cid].s2wUserCloseInProgress);
   \   0000003A   0xF104 0x0038      ADD      R0,R4,#+56
   \   0000003E   0x.... 0x....      BL       GsnOsal_SemDelete
   3111          	s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000042   0xF04F 0x30FF      MOV      R0,#-1
   \   00000046   0x61E0             STR      R0,[R4, #+28]
   3112              return S2W_SUCCESS;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   3113          }
   3114          

   \                                 In section .text, align 4, keep-with-next
   3115          PRIVATE VOID
   3116          AppS2wHal_HttpCloseTimeout(VOID *data)
   3117          {
   3118              UINT32 cid = (UINT32)data;
   3119              GsnOsal_SemRelease(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     AppS2wHal_HttpCloseTimeout:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x3038             ADDS     R0,R0,#+56
   \   0000000E   0x.... 0x....      B.W      GsnOsal_SemRelease
   3120          }
   3121          
   3122          #ifdef S2W_HTTPC_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   3123          UINT8
   3124          AppS2wHal_HttpClose(UINT32 cid)
   3125          {
   \                     AppS2wHal_HttpClose:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   3126          #ifdef S2W_HTTPS_SUPPORT
   3127          		ttHttpcConEntryPtr		conEntryPtr;
   3128          #endif
   3129          	s2wCidList[cid].s2wUsrCloseFlag = 1;
   \   00000004   0xF44F 0x7094      MOV      R0,#+296
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable98_1
   \   0000000C   0xFB00 0x1504      MLA      R5,R0,R4,R1
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0xF885 0x0090      STRB     R0,[R5, #+144]
   3130                   if(s2wCidList[cid].pHttpData)
   \   00000016   0x6B68             LDR      R0,[R5, #+52]
   \   00000018   0xB168             CBZ.N    R0,??AppS2wHal_HttpClose_0
   3131                   {
   3132          #ifdef S2W_HTTPS_SUPPORT
   3133          		conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   3134          		if(conEntryPtr->hconHttpType == GSN_HTTPS)
   \   0000001A   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_107:
   \   0000001E   0xD105             BNE.N    ??CrossCallReturnLabel_73
   3135                      {
   3136          
   3137          			AppS2wHal_TimerStart(&s2wCidList[cid].s2wUserCloseTimer, 1000);
   \   00000020   0x.... 0x....      BL       ?Subroutine45
   3138          			GsnHttp_Alert(s2wCidList[cid].pHttpData->pHttpHandle);
   \                     ??CrossCallReturnLabel_126:
   \   00000024   0x.... 0x....      BL       ?Subroutine41
   3139          			GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserCloseInProgress, GSN_OSAL_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_110:
   \   00000028   0x.... 0x....      BL       ?Subroutine29
   3140          			AppS2wHal_HttpLocalClose(cid);
   3141                      }
   3142          		else /* normal http directly close the connection */
   3143          #endif    
   3144          		{
   3145          			AppS2wHal_HttpLocalClose(cid);
   \                     ??CrossCallReturnLabel_73:
   \   0000002C   0x4620             MOV      R0,R4
   \   0000002E   0x.... 0x....      BL       AppS2wHal_HttpLocalClose
   3146                  }
   3147          	}
   3148                  else
   3149                  {
   3150                      return S2W_EBADCID;
   3151              }
   3152              return S2W_SUCCESS;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??AppS2wHal_HttpClose_0:
   \   00000036   0x2005             MOVS     R0,#+5
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   3153          }
   3154          

   \                                 In section .text, align 2, keep-with-next
   3155          UINT8
   3156          AppS2wHal_HttpOpen(S2W_HTTP_DATA_T *pHttpData, UINT32 *cid)
   3157          {
   \                     AppS2wHal_HttpOpen:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB096             SUB      SP,SP,#+88
   \   00000006   0x4604             MOV      R4,R0
   3158              GSN_STATUS status;
   3159              //UINT32 ip;
   3160              GSN_HTTPC_CONN_PARAMS_T connParams;
   3161          	struct sockaddr_in sockAddr;
   3162          	INT32 len = sizeof(sockAddr), ret;
   \   00000008   0x2010             MOVS     R0,#+16
   \   0000000A   0x460D             MOV      R5,R1
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   3163          
   3164              *cid = AppS2wHal_CidGet();
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidGet
   \   00000012   0x6028             STR      R0,[R5, #+0]
   3165              if (*cid == INVALID_CID)
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x2004             MOVEQ    R0,#+4
   3166              {
   3167                      return S2W_ENCID;
   \   0000001A   0xD064             BEQ.N    ??AppS2wHal_HttpOpen_0
   3168              }
   3169          
   3170              connParams.ConTimeout = pHttpData->connTimeOut;
   \   0000001C   0x6CE0             LDR      R0,[R4, #+76]
   3171              connParams.proxyPresent = pHttpData->proxyServer;
   3172              connParams.type = pHttpData->httpType;
   3173          #if defined(S2W_SSL_CLIENT_SUPPORT)
   3174              connParams.sslParams.caCert = pHttpData->pCaCert;
   3175              connParams.sslParams.caCertLen = pHttpData->caCertLen;
   3176              connParams.sslParams.caCertName = NULL;
   3177          
   3178              connParams.sslParams.clientCert= pHttpData->pClientCert;
   3179              connParams.sslParams.clientCertLen = pHttpData->clientCertLen;
   3180              connParams.sslParams.clientCertName = NULL;
   3181          
   3182              connParams.sslParams.clientKey = pHttpData->pClientKey;
   3183              connParams.sslParams.clientKeyLen = pHttpData->clientKeyLen;
   3184              connParams.sslParams.clientKeyName = NULL;
   3185          #endif    
   3186          	s2wCidList[*cid].httpflag = 1;
   \   0000001E   0x.... 0x....      LDR.W    R8,??DataTable98_1
   \   00000022   0x9002             STR      R0,[SP, #+8]
   \   00000024   0xF44F 0x7694      MOV      R6,#+296
   \   00000028   0xF894 0x002C      LDRB     R0,[R4, #+44]
   \   0000002C   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000030   0x2101             MOVS     R1,#+1
   \   00000032   0x7B20             LDRB     R0,[R4, #+12]
   \   00000034   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000038   0x68A0             LDR      R0,[R4, #+8]
   \   0000003A   0x9004             STR      R0,[SP, #+16]
   \   0000003C   0x88E0             LDRH     R0,[R4, #+6]
   \   0000003E   0x9005             STR      R0,[SP, #+20]
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x9003             STR      R0,[SP, #+12]
   \   00000044   0x6D60             LDR      R0,[R4, #+84]
   \   00000046   0x9007             STR      R0,[SP, #+28]
   \   00000048   0xF8B4 0x0050      LDRH     R0,[R4, #+80]
   \   0000004C   0x9008             STR      R0,[SP, #+32]
   \   0000004E   0x2000             MOVS     R0,#+0
   \   00000050   0x9006             STR      R0,[SP, #+24]
   \   00000052   0x6DE0             LDR      R0,[R4, #+92]
   \   00000054   0x900A             STR      R0,[SP, #+40]
   \   00000056   0xF8B4 0x0058      LDRH     R0,[R4, #+88]
   \   0000005A   0x900B             STR      R0,[SP, #+44]
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x9009             STR      R0,[SP, #+36]
   \   00000060   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_114:
   \   00000064   0xF880 0x102F      STRB     R1,[R0, #+47]
   3187              s2wCidList[*cid].conMode = S2W_NETDATA_MODE_CLIENT_TRANSIENT;
   \   00000068   0x2107             MOVS     R1,#+7
   \   0000006A   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_115:
   \   0000006E   0x7041             STRB     R1,[R0, #+1]
   3188          
   3189          #ifdef S2W_SSL_EXT_MAX_FRAG_LEN
   3190              connParams.sslExtnMaxFragLen = S2W_SSL_EXT_MAX_FRAG_LEN;
   3191          #else
   3192              connParams.sslExtnMaxFragLen = 0;
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x900E             STR      R0,[SP, #+56]
   3193          #endif
   3194          
   3195          	//if(pHttpData->httpType == GSN_HTTP)
   3196          	{
   3197          		//httpConfInfo.pktPoolHndl = GsnNw_PktPoolHndlGet(&appCtx.nwCtx, GSN_NW_LBUF_PKT_POOL);
   3198          #if defined(S2W_SSL_CLIENT_SUPPORT)
   3199              	if((pHttpData->httpType == GSN_HTTPS) && (0 != s2wSslConf.dnsBufferLen))
   \   00000074   0x7B20             LDRB     R0,[R4, #+12]
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD11C             BNE.N    ??AppS2wHal_HttpOpen_1
   \   0000007A   0x.... 0x....      LDR.W    R7,??DataTable98_2
   \   0000007E   0x6838             LDR      R0,[R7, #+0]
   \   00000080   0xB1C0             CBZ.N    R0,??AppS2wHal_HttpOpen_1
   3200              	{
   3201          			connParams.dnsBuf = gsn_malloc(sizeof(GSN_SSL_DNS_BUF_INFO_T));
   \   00000082   0x2200             MOVS     R2,#+0
   \   00000084   0xF640 0x4181      MOVW     R1,#+3201
   \   00000088   0x200C             MOVS     R0,#+12
   \   0000008A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000008E   0x9010             STR      R0,[SP, #+64]
   3202          			s2wSslConf.dnsNameBuf = gsn_malloc(s2wSslConf.dnsBufferLen);
   \   00000090   0x2200             MOVS     R2,#+0
   \   00000092   0x6838             LDR      R0,[R7, #+0]
   \   00000094   0xF640 0x4182      MOVW     R1,#+3202
   \   00000098   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000009C   0x6078             STR      R0,[R7, #+4]
   3203          			memset(s2wSslConf.dnsNameBuf, 0, s2wSslConf.dnsBufferLen);
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x683A             LDR      R2,[R7, #+0]
   \   000000A2   0x.... 0x....      BL       memset
   3204          			connParams.dnsBuf->bufStart = connParams.dnsBuf->bufCurrent =  s2wSslConf.dnsNameBuf;
   \   000000A6   0x9910             LDR      R1,[SP, #+64]
   \   000000A8   0x6878             LDR      R0,[R7, #+4]
   \   000000AA   0x6088             STR      R0,[R1, #+8]
   \   000000AC   0x6008             STR      R0,[R1, #+0]
   3205          			connParams.dnsBuf->bufLen = s2wSslConf.dnsBufferLen;
   \   000000AE   0x6838             LDR      R0,[R7, #+0]
   \   000000B0   0x6048             STR      R0,[R1, #+4]
   \   000000B2   0xE001             B.N      ??AppS2wHal_HttpOpen_2
   3206              	}
   3207              	else
   3208              	{
   3209              		connParams.dnsBuf = NULL;
   \                     ??AppS2wHal_HttpOpen_1:
   \   000000B4   0x2000             MOVS     R0,#+0
   \   000000B6   0x9010             STR      R0,[SP, #+64]
   3210              	}
   3211          #endif		
   3212                  status = GsnHttp_Start(&pHttpData->pHttpHandle, &pHttpData->sockAddr,
   3213                      &connParams, &httpConfInfo);
   \                     ??AppS2wHal_HttpOpen_2:
   \   000000B8   0xAA01             ADD      R2,SP,#+4
   \   000000BA   0x.... 0x....      LDR.W    R3,??DataTable105
   \   000000BE   0xF104 0x0110      ADD      R1,R4,#+16
   \   000000C2   0x4620             MOV      R0,R4
   \   000000C4   0x.... 0x....      BL       GsnHttp_Start
   \   000000C8   0x4607             MOV      R7,R0
   3214                  if(NULL != connParams.dnsBuf)
   \   000000CA   0x9810             LDR      R0,[SP, #+64]
   \   000000CC   0xB108             CBZ.N    R0,??AppS2wHal_HttpOpen_3
   3215                  	gsn_free(connParams.dnsBuf);
   \   000000CE   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3216                  connParams.dnsBuf = NULL;
   \                     ??AppS2wHal_HttpOpen_3:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x9010             STR      R0,[SP, #+64]
   \   000000D6   0x6828             LDR      R0,[R5, #+0]
   \   000000D8   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   000000DC   0xB127             CBZ.N    R7,??AppS2wHal_HttpOpen_4
   3217          	}
   3218          	
   3219          
   3220              if(status != GSN_SUCCESS)
   3221              {
   3222          		s2wCidList[*cid].httpflag = 0;
   \   000000DE   0x2100             MOVS     R1,#+0
   \   000000E0   0xF880 0x102F      STRB     R1,[R0, #+47]
   3223                  return S2W_FAILURE;
   \   000000E4   0x2001             MOVS     R0,#+1
   \                     ??AppS2wHal_HttpOpen_0:
   \   000000E6   0xE05E             B.N      ??AppS2wHal_HttpOpen_5
   3224              }
   3225          
   3226              s2wCidList[*cid].sd = ((ttHttpcConEntryPtr)pHttpData->pHttpHandle)->hconSd;
   \                     ??AppS2wHal_HttpOpen_4:
   \   000000E8   0x6821             LDR      R1,[R4, #+0]
   \   000000EA   0xF8D1 0x10A8      LDR      R1,[R1, #+168]
   \   000000EE   0x61C1             STR      R1,[R0, #+28]
   3227              s2wCidList[*cid].conType = TCP;
   \   000000F0   0x2102             MOVS     R1,#+2
   \   000000F2   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_116:
   \   000000F6   0x7001             STRB     R1,[R0, #+0]
   3228              s2wCidList[*cid].conMode = S2W_NETDATA_MODE_CLIENT;
   \   000000F8   0x2100             MOVS     R1,#+0
   \   000000FA   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_117:
   \   000000FE   0x7041             STRB     R1,[R0, #+1]
   \   00000100   0x6828             LDR      R0,[R5, #+0]
   \   00000102   0x8A61             LDRH     R1,[R4, #+18]
   \   00000104   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   00000108   0x020A             LSLS     R2,R1,#+8
   \   0000010A   0xEA42 0x2111      ORR      R1,R2,R1, LSR #+8
   \   0000010E   0x8081             STRH     R1,[R0, #+4]
   3229              s2wCidList[*cid].remotePort = ntohs(pHttpData->sockAddr.ss_port);
   3230              s2wCidList[*cid].pHttpData = pHttpData;
   \   00000110   0x6344             STR      R4,[R0, #+52]
   3231              s2wCidList[*cid].httpflag = 1;
   \   00000112   0x2101             MOVS     R1,#+1
   \   00000114   0xF880 0x102F      STRB     R1,[R0, #+47]
   3232          	s2wCidList[*cid].serverCid = INVALID_CID;
   \   00000118   0x21FF             MOVS     R1,#+255
   \   0000011A   0x.... 0x....      BL       ?Subroutine43
   3233          	ret = getsockname(s2wCidList[*cid].sd, (struct sockaddr *)&sockAddr,&len);
   3234              if(ret < 0)
   \                     ??CrossCallReturnLabel_118:
   \   0000011E   0xAA00             ADD      R2,SP,#+0
   \   00000120   0xF880 0x102E      STRB     R1,[R0, #+46]
   \   00000124   0xA911             ADD      R1,SP,#+68
   \   00000126   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_119:
   \   0000012A   0x69C0             LDR      R0,[R0, #+28]
   \   0000012C   0x.... 0x....      BL       getsockname
   \   00000130   0x2800             CMP      R0,#+0
   \   00000132   0xD505             BPL.N    ??AppS2wHal_HttpOpen_6
   3235              {
   3236                  AppS2wHal_NetClose(*cid);
   \   00000134   0x6828             LDR      R0,[R5, #+0]
   \   00000136   0xB2C0             UXTB     R0,R0
   \   00000138   0x.... 0x....      BL       AppS2wHal_NetClose
   3237                  return S2W_SOCKFAILURE;
   \   0000013C   0x2003             MOVS     R0,#+3
   \   0000013E   0xE032             B.N      ??AppS2wHal_HttpOpen_5
   3238              }
   3239          	s2wCidList[*cid].localPort  = ntohs(sockAddr.sin_port);
   \                     ??AppS2wHal_HttpOpen_6:
   \   00000140   0xF8BD 0x0046      LDRH     R0,[SP, #+70]
   \   00000144   0x6829             LDR      R1,[R5, #+0]
   \   00000146   0xFB06 0x8101      MLA      R1,R6,R1,R8
   \   0000014A   0x0202             LSLS     R2,R0,#+8
   \   0000014C   0xEA42 0x2010      ORR      R0,R2,R0, LSR #+8
   \   00000150   0x8048             STRH     R0,[R1, #+2]
   3240              GsnOsal_SemCreate(&pHttpData->opInProgress, 1);
   \   00000152   0x2101             MOVS     R1,#+1
   \   00000154   0xF104 0x0030      ADD      R0,R4,#+48
   \   00000158   0x.... 0x....      BL       GsnOsal_SemCreate
   3241              /* create the samaphore for close */
   3242              GsnOsal_SemCreate(&s2wCidList[*cid].s2wUserCloseInProgress, 0);
   \   0000015C   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_120:
   \   00000160   0x2100             MOVS     R1,#+0
   \   00000162   0x3038             ADDS     R0,R0,#+56
   \   00000164   0x.... 0x....      BL       GsnOsal_SemCreate
   3243          	s2wCidList[*cid].s2wUsrCloseFlag = 0;
   \   00000168   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_121:
   \   0000016C   0x2100             MOVS     R1,#+0
   \   0000016E   0xF880 0x1090      STRB     R1,[R0, #+144]
   3244          
   3245              AppS2wHal_TimerInit(&s2wCidList[*cid].s2wUserCloseTimer, AppS2wHal_HttpCloseTimeout, (VOID*)*cid);
   \   00000172   0x682A             LDR      R2,[R5, #+0]
   \   00000174   0x.... 0x....      LDR.W    R1,??DataTable105_1
   \   00000178   0xFB06 0x8002      MLA      R0,R6,R2,R8
   \   0000017C   0x3058             ADDS     R0,R0,#+88
   \   0000017E   0x.... 0x....      BL       AppS2wHal_TimerInit
   3246          
   3247              memcpy(s2wCidList[*cid].remoteIp,(UINT8*)&(pHttpData->sockAddr.addr.ipv4.sin_addr.s_addr),4);
   \   00000182   0x.... 0x....      BL       ?Subroutine43
   \                     ??CrossCallReturnLabel_122:
   \   00000186   0x2204             MOVS     R2,#+4
   \   00000188   0xF104 0x0114      ADD      R1,R4,#+20
   \   0000018C   0x1D80             ADDS     R0,R0,#+6
   \   0000018E   0x.... 0x....      BL       memcpy
   3248          
   3249              /* register the callback for any socket events
   3250               */
   3251              nx_bsd_callback_register(s2wCidList[*cid].sd, AppS2wHal_RxCallBack, NX_BSD_CB_TCP_DISCONNECT |	NX_BSD_CB_SOCKET_ERROR);
   \   00000192   0x6828             LDR      R0,[R5, #+0]
   \   00000194   0x.... 0x....      LDR.W    R1,??DataTable98
   \   00000198   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   0000019C   0x2228             MOVS     R2,#+40
   \   0000019E   0x69C0             LDR      R0,[R0, #+28]
   \   000001A0   0x.... 0x....      BL       nx_bsd_callback_register
   3252              return S2W_SUCCESS;
   \   000001A4   0x2000             MOVS     R0,#+0
   \                     ??AppS2wHal_HttpOpen_5:
   \   000001A6   0xB016             ADD      SP,SP,#+88
   \   000001A8   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3253          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine43:
   \   00000000   0x6828             LDR      R0,[R5, #+0]
   \   00000002   0xFB06 0x8000      MLA      R0,R6,R0,R8
   \   00000006   0x4770             BX       LR
   3254          

   \                                 In section .text, align 2, keep-with-next
   3255          PRIVATE UINT8
   3256          AppS2wHal_HttpLocalClose(UINT32 cid)
   3257          {
   \                     AppS2wHal_HttpLocalClose:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   3258              UINT8 status = GSN_SUCCESS;
   3259              if(!s2wCidList[cid].httpflag)
   \   00000004   0xF44F 0x7194      MOV      R1,#+296
   \   00000008   0xFB01 0xF600      MUL      R6,R1,R0
   \   0000000C   0x.... 0x....      LDR.W    R7,??DataTable98_1
   \   00000010   0x19F4             ADDS     R4,R6,R7
   \   00000012   0xF104 0x051C      ADD      R5,R4,#+28
   \   00000016   0x7CE8             LDRB     R0,[R5, #+19]
   \   00000018   0xB300             CBZ.N    R0,??AppS2wHal_HttpLocalClose_0
   3260              {
   3261                  return GSN_SUCCESS;
   3262              }
   3263              s2wCidList[cid].httpflag = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x74E8             STRB     R0,[R5, #+19]
   3264              /* close the connection and release the resources..*/
   3265              status = GsnHttp_Close(s2wCidList[cid].pHttpData->pHttpHandle);
   \   0000001E   0x69A8             LDR      R0,[R5, #+24]
   \   00000020   0x6800             LDR      R0,[R0, #+0]
   \   00000022   0x.... 0x....      BL       GsnHttp_Close
   3266              if( status == GSN_SUCCESS )
   \   00000026   0xFA5F 0xF880      UXTB     R8,R0
   \   0000002A   0xF1B8 0x0F00      CMP      R8,#+0
   \   0000002E   0xD10D             BNE.N    ??AppS2wHal_HttpLocalClose_1
   3267              {
   3268                  s2wCidList[cid].httpflag = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x74E8             STRB     R0,[R5, #+19]
   3269                  s2wCidList[cid].conMode= 0;
   \   00000034   0x7060             STRB     R0,[R4, #+1]
   3270              	s2wCidList[cid].conType = 0;
   \   00000036   0x55F0             STRB     R0,[R6, R7]
   3271                  if(s2wCidList[cid].pHttpData != NULL)
   \   00000038   0x69A8             LDR      R0,[R5, #+24]
   \   0000003A   0xB138             CBZ.N    R0,??AppS2wHal_HttpLocalClose_1
   3272                  {
   3273                      GsnOsal_SemDelete(&s2wCidList[cid].pHttpData->opInProgress);
   \   0000003C   0x3030             ADDS     R0,R0,#+48
   \   0000003E   0x.... 0x....      BL       GsnOsal_SemDelete
   3274                      gsn_free(s2wCidList[cid].pHttpData);
   \   00000042   0x69A8             LDR      R0,[R5, #+24]
   \   00000044   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3275                      s2wCidList[cid].pHttpData = NULL;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x61A8             STR      R0,[R5, #+24]
   3276                  }
   3277          
   3278              }
   3279              
   3280              /* Delete Close In progress semaphore*/ 
   3281              GsnOsal_SemDelete(&s2wCidList[cid].s2wUserCloseInProgress);
   \                     ??AppS2wHal_HttpLocalClose_1:
   \   0000004C   0xF104 0x0038      ADD      R0,R4,#+56
   \   00000050   0x.... 0x....      BL       GsnOsal_SemDelete
   3282                  s2wCidList[cid].sd = CID_NOTINUSE;
   \   00000054   0xF04F 0x30FF      MOV      R0,#-1
   \   00000058   0x61E0             STR      R0,[R4, #+28]
   3283              return status;
   \   0000005A   0x4640             MOV      R0,R8
   \                     ??AppS2wHal_HttpLocalClose_0:
   \   0000005C   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   3284          }
   3285          

   \                                 In section .text, align 2, keep-with-next
   3286          PUBLIC S2W_HTTP_DATA_T *
   3287          AppS2wHal_HttpHandleGet(UINT8 cid)
   3288          {
   3289              return s2wCidList[cid].pHttpData;
   \                     AppS2wHal_HttpHandleGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x6B40             LDR      R0,[R0, #+52]
   \   0000000E   0x4770             BX       LR               ;; return
   3290          }
   3291          
   3292          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3293          PUBLIC void
   3294          AppS2w_HttpRxHdrsCb (GSN_HTTPC_CONN_HANDLE conHandle,
   3295                               INT32              statusCode,
   3296                               INT8              *reasonPhrase,
   3297                               INT8             **resHeadersPtr,
   3298                               ttHttpcCustomHdr  *customHdrPtr)
   3299          {
   3300              UINT8 cid;
   3301              UINT32 i;
   3302              UINT32 bitmap;
   3303              UINT32 count;
   3304              UINT32 len;
   3305          	UINT8 delim = ':';
   3306              ttHttpcConEntryPtr conEntryPtr = (ttHttpcConEntryPtr)conHandle;
   3307              INT8 header[15],headerLen;
   3308          
   3309              if((NULL == conEntryPtr) || (1 == httpConfInfo.hconHttpcHdrSent))
   3310              {
   3311                  return;
   3312              }
   3313              cid = AppS2wHal_CidFind(conEntryPtr->hconSd);
   3314          
   3315              if((1 == httpConfInfo.sendStatus) && (NULL != reasonPhrase))
   3316              {
   3317                  /* arg_len should be request uri length + 3 char of status code + 1 char of delim ':' */
   3318                  len = strlen(reasonPhrase) + 3 + 1;
   3319                  headerLen = sprintf((char *)header,"%cG%x%d%04d%03d%c", S2W_ESC, cid, S2W_HTTP_RESPONSE_LINE, len, statusCode, S2W_COLON);
   3320          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3321                  AppS2wHal_CharNPut(header, headerLen);
   3322                  AppS2wHal_CharNPut(reasonPhrase, (len - 4));
   3323          #else
   3324                  AppS2wHal_CharNPut1(header, headerLen);
   3325                  AppS2wHal_CharNPut1(reasonPhrase, (len - 4));
   3326          #endif
   3327              }
   3328              /* If http header bitmap is not registered */
   3329              if(0 == httpConfInfo.httpcHdrBmap)
   3330              {
   3331                  goto AppS2w_HttpRxHdrsCbExit;
   3332              }
   3333              bitmap = httpConfInfo.httpcHdrBmap;
   3334              count = 1;
   3335              /* Parse all the headers given by Http server */
   3336              for(i = 1; i < TM_HTTP_HEADER_COUNT ; i++)
   3337              {
   3338                   if((NULL != resHeadersPtr[i]) && (bitmap & count))
   3339                   {
   3340                       /* hdr_len should be 2 chars of hdr_type number + hdr_val + 1 char of delim ':' */
   3341                       len = strlen(tvHttpHeaderNames[i]) + strlen(resHeadersPtr[i]) + 1;
   3342                       headerLen = sprintf((char *)header,"%cG%x%d%04d", S2W_ESC, cid, S2W_HTTP_HEADER, len);
   3343          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3344                       AppS2wHal_CharNPut(header, headerLen);
   3345                       AppS2wHal_CharNPut(tvHttpHeaderNames[i], strlen(tvHttpHeaderNames[i]));
   3346                       AppS2wHal_CharNPut(&delim,1);
   3347                       AppS2wHal_CharNPut(resHeadersPtr[i], strlen(resHeadersPtr[i]));
   3348          #else
   3349                       AppS2wHal_CharNPut1(header, headerLen);
   3350                       AppS2wHal_CharNPut1(tvHttpHeaderNames[i], strlen(tvHttpHeaderNames[i]));
   3351                       AppS2wHal_CharNPut1(&delim,1);
   3352                       AppS2wHal_CharNPut1(resHeadersPtr[i], strlen(resHeadersPtr[i]));
   3353          #endif
   3354                   }
   3355                   count = (count << 1);
   3356              }
   3357              /* If user has registered for custom headers and custom headers are present, pass it */
   3358              bitmap = bitmap >> 31;
   3359              if((NULL != customHdrPtr) && (0 != customHdrPtr->hconCustomHdrcount) && (bitmap))
   3360              {
   3361                  for(i = 0; i < customHdrPtr->hconCustomHdrcount ; i++)
   3362                  {
   3363                      len = strlen(customHdrPtr->hconCustomHeaderstype[i]) + strlen(customHdrPtr->hconCustomHeadersval[i] + 1);
   3364                      headerLen = sprintf((char *)header,"%cG%x%d%04d", S2W_ESC, cid, S2W_HTTP_HEADER, len);
   3365          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3366                      AppS2wHal_CharNPut(header, headerLen);
   3367                      AppS2wHal_CharNPut(customHdrPtr->hconCustomHeaderstype[i], strlen(customHdrPtr->hconCustomHeaderstype[i]));
   3368                      AppS2wHal_CharNPut(&delim,1);
   3369                      AppS2wHal_CharNPut(customHdrPtr->hconCustomHeadersval[i], strlen(customHdrPtr->hconCustomHeadersval[i]));
   3370          #else
   3371                      AppS2wHal_CharNPut1(header, headerLen);
   3372                      AppS2wHal_CharNPut1(customHdrPtr->hconCustomHeaderstype[i], strlen(customHdrPtr->hconCustomHeaderstype[i]));
   3373                      AppS2wHal_CharNPut1(&delim,1);
   3374                      AppS2wHal_CharNPut1(customHdrPtr->hconCustomHeadersval[i], strlen(customHdrPtr->hconCustomHeadersval[i]));
   3375          #endif
   3376                  }
   3377              }
   3378          AppS2w_HttpRxHdrsCbExit:
   3379              httpConfInfo.hconHttpcHdrSent = 1;
   3380          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3381              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   3382              {
   3383                  s2wSpiFs_Flush();
   3384              }
   3385          #else
   3386              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3387              {
   3388                  s2wSpiFs_Flush1();
   3389              }
   3390          #endif
   3391              return;
   3392          }
   3393          #endif
   3394          
   3395          #endif
   3396          
   3397          

   \                                 In section .text, align 2, keep-with-next
   3398          PUBLIC void
   3399          AppS2w_HttpRxBufferMgmtCb(VOID *context,
   3400          	             	 GSN_HTTPC_CONN_HANDLE conHandle,
   3401                               INT8 *httpRxDataBuf,
   3402                               INT32 httpRxDataLen,
   3403                               INT32* rxBufferOffset)
   3404          {
   \                     AppS2w_HttpRxBufferMgmtCb:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   3405              UINT8 cid;
   3406              INT8 startMark[10];
   3407              ttHttpcConEntryPtr conEntryPtr = (ttHttpcConEntryPtr)conHandle;
   3408          
   3409              cid = AppS2wHal_CidFind(conEntryPtr->hconSd);
   \   00000004   0xF8D1 0x00A8      LDR      R0,[R1, #+168]
   \   00000008   0x9E0A             LDR      R6,[SP, #+40]
   \   0000000A   0x4614             MOV      R4,R2
   \   0000000C   0x461D             MOV      R5,R3
   \   0000000E   0x.... 0x....      BL       AppS2wHal_CidFind
   3410          #ifdef S2W_THROUGHPUT_TEST                       
   3411          	if( s2wCidList[cid].tpTestInProgress == 1)
   3412          	{
   3413          		s2wCidList[cid].stats.bytesReceived += httpRxDataLen;
   3414          	}
   3415          	else
   3416          #endif				
   3417          	{
   3418              sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,httpRxDataLen);
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x9501             STR      R5,[SP, #+4]
   \   00000016   0x2348             MOVS     R3,#+72
   \   00000018   0x221B             MOVS     R2,#+27
   \   0000001A   0x.... 0x....      ADR.W    R1,`?<Constant "%c%c%x%04d">`
   \   0000001E   0xA802             ADD      R0,SP,#+8
   \   00000020   0x.... 0x....      BL       sprintf
   3419          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3420              AppS2wHal_CharNPut(startMark, strlen(startMark));
   \   00000024   0xA802             ADD      R0,SP,#+8
   \   00000026   0x.... 0x....      BL       strlen
   \   0000002A   0x4601             MOV      R1,R0
   \   0000002C   0xA802             ADD      R0,SP,#+8
   \   0000002E   0x.... 0x....      BL       AppS2wHal_CharNPut
   3421          
   3422              AppS2wHal_CharNPut(httpRxDataBuf, httpRxDataLen);
   \   00000032   0x4629             MOV      R1,R5
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       AppS2wHal_CharNPut
   3423          #else
   3424              AppS2wHal_CharNPut1(startMark, strlen(startMark));
   3425              AppS2wHal_CharNPut1(httpRxDataBuf, httpRxDataLen);
   3426          #endif
   3427          
   3428              *rxBufferOffset = 0;
   \   0000003A   0x2000             MOVS     R0,#+0
   3429          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3430                  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable105_2
   \   00000040   0x6030             STR      R0,[R6, #+0]
   \   00000042   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000046   0x6809             LDR      R1,[R1, #+0]
   \   00000048   0x5C40             LDRB     R0,[R0, R1]
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xBF08             IT       EQ 
   \   0000004E   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3431                  {
   3432                       s2wSpiFs_Flush();
   3433                  }
   3434          #else
   3435                  if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3436                  {
   3437                      s2wSpiFs_Flush1();
   3438                  }
   3439          #endif
   3440          	}
   3441              return;
   \   00000052   0xB006             ADD      SP,SP,#+24
   \   00000054   0xBD70             POP      {R4-R6,PC}       ;; return
   3442          
   3443          }
   3444          #ifdef S2W_GSLINK

   \                                 In section .text, align 2, keep-with-next
   3445          PUBLIC VOID AppS2w_HttpdSemCreate(UINT8 cid)
   3446          {
   3447          	GsnOsal_SemCreate  ( &s2wCidList[cid].httpdCtx.s2wGsLinkemID, 0 );
   \                     AppS2w_HttpdSemCreate:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable98_1
   \   00000008   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x30A4             ADDS     R0,R0,#+164
   \   00000010   0x.... 0x....      B.W      GsnOsal_SemCreate
   3448          }

   \                                 In section .text, align 2, keep-with-next
   3449          PUBLIC VOID AppS2w_HttpSemAquire(UINT8 cid)
   3450          {
   3451          	GsnOsal_SemAcquire(&s2wCidList[cid].httpdCtx.s2wGsLinkemID,GSN_OSAL_WAIT_FOREVER);
   \                     AppS2w_HttpSemAquire:
   \   00000000   0xF44F 0x7294      MOV      R2,#+296
   \   00000004   0x.... 0x....      LDR.W    R3,??DataTable98_1
   \   00000008   0xFB02 0x3000      MLA      R0,R2,R0,R3
   \   0000000C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000010   0x30A4             ADDS     R0,R0,#+164
   \   00000012   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3452          
   3453          }

   \                                 In section .text, align 2, keep-with-next
   3454          PUBLIC VOID AppS2w_HttpSemRelease(UINT8 cid)
   3455          {
   3456          	GsnOsal_SemRelease(&s2wCidList[cid].httpdCtx.s2wGsLinkemID);
   \                     AppS2w_HttpSemRelease:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x30A4             ADDS     R0,R0,#+164
   \   0000000E   0x.... 0x....      B.W      GsnOsal_SemRelease
   3457          #if 0
   3458          	GsnOsal_SemRelease(&s2wappMainTaskCtxt->gslinkSync);
   3459          #endif
   3460          
   3461          }

   \                                 In section .text, align 2, keep-with-next
   3462          PUBLIC VOID AppS2w_HttpdSemDelete(UINT8 cid)
   3463          {
   3464          	GsnOsal_SemDelete(&s2wCidList[cid].httpdCtx.s2wGsLinkemID);
   \                     AppS2w_HttpdSemDelete:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0x30A4             ADDS     R0,R0,#+164
   \   0000000E   0x.... 0x....      B.W      GsnOsal_SemDelete
   3465          }
   3466          
   3467          
   3468          #endif

   \                                 In section .text, align 2, keep-with-next
   3469          PUBLIC UINT8 AppS2w_ConnStateGet(UINT8 cid)
   3470          {
   \                     AppS2w_ConnStateGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   3471              return tlsv1_client_established(s2wCidList[cid].ssl.sslConn->tlsv1Conn);
   \   00000002   0xF44F 0x7194      MOV      R1,#+296
   \   00000006   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   0000000A   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000E   0x6A80             LDR      R0,[R0, #+40]
   \   00000010   0x6840             LDR      R0,[R0, #+4]
   \   00000012   0x.... 0x....      BL       tlsv1_client_established
   \   00000016   0xB2C0             UXTB     R0,R0
   \   00000018   0xBD02             POP      {R1,PC}          ;; return
   3472          }

   \                                 In section .text, align 2, keep-with-next
   3473          PUBLIC UINT8 AppS2w_ConnHttpStateGet(UINT8 cid)
   3474          {
   3475              return (s2wCidList[cid].httpflag);
   \                     AppS2w_ConnHttpStateGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable98_1
   \   00000008   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000C   0xF890 0x002F      LDRB     R0,[R0, #+47]
   \   00000010   0x4770             BX       LR               ;; return
   3476          }
   3477          #ifdef S2W_HTTPC_SUPPORT
   3478          
   3479          /**
   3480           ******************************************************************
   3481           * @ingroup S2w-Application
   3482           * @brief Http client send function.
   3483           * @param cid                - IN the cid needs to be closed
   3484           * @retval S2W_SUCCESS     - operation successfull.
   3485           * @retval S2W_EBADCID     - cid is not valid.
   3486           * @retval S2W_FAILURE     - operation failed.
   3487           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3488          PUBLIC GSN_STATUS 
   3489          S2wHttp_Send(UINT8 cid)
   3490          {
   \                     S2wHttp_Send:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB086             SUB      SP,SP,#+24
   3491              UINT8 *httpRxDataBuf = NULL;
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x4605             MOV      R5,R0
   3492              UINT32 httpRxDataLen = 0;
   \   0000000A   0x9602             STR      R6,[SP, #+8]
   3493              UINT32 ret = S2W_SUCCESS;//et1= S2W_SUCCESS, bytesLeft = 0;
   3494              S2W_HTTP_DATA_T *pHttpData;
   3495              INT8 startMark[10];
   3496              //UINT8 *rcvBuf = NULL;
   3497              //UINT32 rcvLen;
   3498          #ifdef S2W_HTTPS_SUPPORT
   3499              //ttHttpcConEntryPtr      conEntryPtr;
   3500          #endif
   3501              //S2W_MSG_T recvMsg;
   3502          
   3503              pHttpData = (S2W_HTTP_DATA_T *)AppS2wHal_HttpHandleGet(cid);
   \   0000000C   0x.... 0x....      BL       AppS2wHal_HttpHandleGet
   \   00000010   0xEA5F 0x0800      MOVS     R8,R0
   3504          
   3505              if(pHttpData == NULL)
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x2001             MOVEQ    R0,#+1
   3506              {
   3507                   return S2W_FAILURE;
   \   00000018   0xD05E             BEQ.N    ??S2wHttp_Send_0
   3508              }
   3509          
   3510              if(0 == httpConfInfo.moredata)
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable105
   \   0000001E   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000022   0x1D27             ADDS     R7,R4,#+4
   \   00000024   0xB968             CBNZ.N   R0,??S2wHttp_Send_1
   3511              {/* prepare to receive response */
   3512                  httpRxDataLen = 2048 ;
   \   00000026   0xF44F 0x6000      MOV      R0,#+2048
   \   0000002A   0x9002             STR      R0,[SP, #+8]
   3513                  httpRxDataBuf = gsn_malloc(2048);
   \   0000002C   0x2200             MOVS     R2,#+0
   \   0000002E   0xF640 0x51B9      MOVW     R1,#+3513
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000036   0x4606             MOV      R6,R0
   3514                  if(NULL == httpRxDataBuf)
   3515                  {
   3516                      ret = S2W_FAILURE;
   3517                  }
   3518                  httpConfInfo.rxBufferMgmtCb = AppS2w_HttpRxBufferMgmtCb;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable105_3
   \   0000003C   0x63B8             STR      R0,[R7, #+56]
   3519          		httpConfInfo.rxBufferMgmtCbCtx = NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x63F8             STR      R0,[R7, #+60]
   3520          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   3521                  httpConfInfo.rxHdrsCb = AppS2w_HttpRxHdrsCb;
   3522          		httpConfInfo.hconHttpcHdrSent = 0;
   3523          #endif
   3524              }
   3525          	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
   3526          	compiled with header type array being defined as array of UINT8 */
   3527          	{
   3528          		UINT8 i;
   3529          		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   \                     ??S2wHttp_Send_1:
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable105_4
   \   00000048   0x.... 0x....      LDR.W    R2,??DataTable105_5
   3530                  {
   3531                  	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM)
   \                     ??S2wHttp_Send_2:
   \   0000004C   0xF852 0x3020      LDR      R3,[R2, R0, LSL #+2]
   \   00000050   0x2BFF             CMP      R3,#+255
   \   00000052   0xBF28             IT       CS 
   \   00000054   0x23FF             MOVCS    R3,#+255
   3532          			{
   3533          				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM;
   3534          			}
   3535          			else
   3536          			{
   3537                  		headerTypesModified[i] = headerTypes[i];
   \   00000056   0xF841 0x3020      STR      R3,[R1, R0, LSL #+2]
   3538          			}
   3539                  }
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x2819             CMP      R0,#+25
   \   0000005E   0xD3F5             BCC.N    ??S2wHttp_Send_2
   3540          	}
   3541              ret = GsnHttp_Send(pHttpData->pHttpHandle, (INT8 *)httpRxDataBuf,
   3542                                 &httpRxDataLen, httpConfInfo.httpTimeOut, &httpConfInfo);
   3543          
   3544              if(GSN_SUCCESS == ret)
   \   00000060   0x9400             STR      R4,[SP, #+0]
   \   00000062   0x6C3B             LDR      R3,[R7, #+64]
   \   00000064   0xF8D8 0x0000      LDR      R0,[R8, #+0]
   \   00000068   0xAA02             ADD      R2,SP,#+8
   \   0000006A   0x4631             MOV      R1,R6
   \   0000006C   0x.... 0x....      BL       GsnHttp_Send
   \   00000070   0xB9E0             CBNZ.N   R0,??S2wHttp_Send_3
   3545              {
   3546                  if(0 == httpConfInfo.moredata)
   \   00000072   0xF894 0x0048      LDRB     R0,[R4, #+72]
   \   00000076   0xB9B8             CBNZ.N   R0,??S2wHttp_Send_4
   3547                  {
   3548          #ifdef S2W_THROUGHPUT_TEST                       
   3549                  	if( s2wCidList[cid].tpTestInProgress == 1)
   3550          			{
   3551          				s2wCidList[cid].stats.bytesReceived += httpRxDataLen;
   3552                  	}
   3553          			else
   3554          #endif				
   3555          			{
   3556                          if(GSN_HTTP_METHOD_HEAD != httpConfInfo.reqMethod)
   \   00000078   0x7860             LDRB     R0,[R4, #+1]
   \   0000007A   0x2802             CMP      R0,#+2
   \   0000007C   0xD014             BEQ.N    ??S2wHttp_Send_4
   3557                          {
   3558                              sprintf(startMark,"%c%c%x%04d", S2W_ESC, 'H', cid,httpRxDataLen);
   \   0000007E   0x9802             LDR      R0,[SP, #+8]
   \   00000080   0x.... 0x....      ADR.W    R1,`?<Constant "%c%c%x%04d">`
   \   00000084   0x9001             STR      R0,[SP, #+4]
   \   00000086   0x9500             STR      R5,[SP, #+0]
   \   00000088   0x2348             MOVS     R3,#+72
   \   0000008A   0x221B             MOVS     R2,#+27
   \   0000008C   0xA803             ADD      R0,SP,#+12
   \   0000008E   0x.... 0x....      BL       sprintf
   3559          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3560                              AppS2wHal_CharNPut(startMark, strlen(startMark));
   \   00000092   0xA803             ADD      R0,SP,#+12
   \   00000094   0x.... 0x....      BL       strlen
   \   00000098   0x4601             MOV      R1,R0
   \   0000009A   0xA803             ADD      R0,SP,#+12
   \   0000009C   0x.... 0x....      BL       AppS2wHal_CharNPut
   3561                              AppS2wHal_CharNPut(httpRxDataBuf, httpRxDataLen);
   \   000000A0   0x9902             LDR      R1,[SP, #+8]
   \   000000A2   0x4630             MOV      R0,R6
   \   000000A4   0x.... 0x....      BL       AppS2wHal_CharNPut
   3562          #else
   3563                              AppS2wHal_CharNPut1(startMark, strlen(startMark));
   3564                              AppS2wHal_CharNPut1(httpRxDataBuf, httpRxDataLen);
   3565          #endif
   3566                          }
   3567          			}
   3568                  }
   3569                  ret = S2W_SUCCESS;
   \                     ??S2wHttp_Send_4:
   \   000000A8   0x2500             MOVS     R5,#+0
   \   000000AA   0xE000             B.N      ??S2wHttp_Send_5
   3570              }
   3571              else /* ERROR or TimeOut */
   3572              {
   3573                  ret = S2W_FAILURE;
   \                     ??S2wHttp_Send_3:
   \   000000AC   0x2501             MOVS     R5,#+1
   3574              }
   3575          
   3576              if(NULL != httpRxDataBuf)
   \                     ??S2wHttp_Send_5:
   \   000000AE   0xB116             CBZ.N    R6,??S2wHttp_Send_6
   3577              {
   3578                  gsn_free(httpRxDataBuf);
   \   000000B0   0x4630             MOV      R0,R6
   \   000000B2   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3579                  httpRxDataBuf = NULL;
   3580              }
   3581              if(NULL != httpConfInfo.reqPathPtr 
   3582          #ifdef S2W_THROUGHPUT_TEST
   3583          		&& ( s2wCidList[cid].tpTestInProgress == 0)
   3584          #endif		
   3585          	   )
   \                     ??S2wHttp_Send_6:
   \   000000B6   0x6860             LDR      R0,[R4, #+4]
   \   000000B8   0xB118             CBZ.N    R0,??S2wHttp_Send_7
   3586              {
   3587                  gsn_free(httpConfInfo.reqPathPtr);
   \   000000BA   0x.... 0x....      BL       GsnDynMemMgmt_Free
   3588                  httpConfInfo.reqPathPtr = NULL;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0x6060             STR      R0,[R4, #+4]
   3589              }
   3590          #if 0//def GSN_HTTPS_SUPPORT
   3591              conEntryPtr = (ttHttpcConEntryPtr)s2wCidList[cid].pHttpData->pHttpHandle;
   3592              if(0 == httpConfInfo.moredata)
   3593              {
   3594                  /* check whether some data still remaining in nw buffer or not */
   3595                  bytesLeft = tfGetWaitingBytes(s2wCidList[cid].sd);
   3596              }
   3597              if((bytesLeft > 0) && (conEntryPtr->hconHttpType == GSN_HTTPS))
   3598              {
   3599                  /* Still data remaining in NW buffer. Decode that data */
   3600                  ret1 = GsnSsl_DataReceive(conEntryPtr->hConSsl, s2wCidList[cid].sd, &rcvBuf, &rcvLen, 5);
   3601                  if(rcvBuf != NULL)
   3602                  {
   3603                      GsnSsl_Free(rcvBuf);
   3604                  }
   3605                  if(ret1 == GSN_SSL_CLOSE_ALERT)
   3606                  {
   3607                      /* Data is a Close alert from server. Post message to rcv task */
   3608                      recvMsg.msgType = S2W_RECV_TYPE_HTTPS_CLOSE;
   3609                      recvMsg.rData.dataSock = s2wCidList[cid].sd;
   3610                      recvMsg.msgLen = 0;
   3611                      AppS2wHal_NetRxMsgPost(&recvMsg);
   3612                  }
   3613          
   3614              }
   3615          #endif
   3616          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3617              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??S2wHttp_Send_7:
   \   000000C2   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000C6   0x.... 0x....      LDR.W    R1,??DataTable105_2
   \   000000CA   0x6809             LDR      R1,[R1, #+0]
   \   000000CC   0x5C40             LDRB     R0,[R0, R1]
   \   000000CE   0x2802             CMP      R0,#+2
   \   000000D0   0xBF08             IT       EQ 
   \   000000D2   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3618              {
   3619                  s2wSpiFs_Flush();
   3620              }
   3621          #else
   3622              if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3623              {
   3624                  s2wSpiFs_Flush1();
   3625              }
   3626          #endif
   3627              return ret;
   \   000000D6   0x4628             MOV      R0,R5
   \                     ??S2wHttp_Send_0:
   \   000000D8                      REQUIRE ?Subroutine0
   \   000000D8                      ;; // Fall through to label ?Subroutine0
   3628          
   3629          }
   3630          #endif
   3631          

   \                                 In section .text, align 2, keep-with-next
   3632          PUBLIC VOID
   3633          AppS2wHal_HttpdClose(UINT8 parentTask)
   3634          {
   \                     AppS2wHal_HttpdClose:
   \   00000000   0xB510             PUSH     {R4,LR}
   3635              UINT32 message;
   3636          #if defined(S2W_WEB_SERVER) || defined(S2W_WEB_PROV)
   3637              if(!parentTask)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable105_2
   \   00000006   0xB990             CBNZ.N   R0,??AppS2wHal_HttpdClose_0
   3638              {
   3639                  if( TRUE == GsnHttpd_IsRunning())
   \   00000008   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD12E             BNE.N    ??AppS2wHal_HttpdClose_1
   3640                  {
   3641                      message = APP_NOTIFICATION_SRVR_STOP;
   3642                      (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000010   0x.... 0x....      LDR.W    R2,??DataTable105_6
   \   00000014   0x6821             LDR      R1,[R4, #+0]
   \   00000016   0x6812             LDR      R2,[R2, #+0]
   \   00000018   0x201A             MOVS     R0,#+26
   \   0000001A   0x4790             BLX      R2
   3643                      GsnOsal_SemAcquire(&s2wappMainTaskCtxt->webServerSync,GSN_OSAL_WAIT_FOREVER);
   \   0000001C   0x6820             LDR      R0,[R4, #+0]
   \   0000001E   0xE8BD 0x4010      POP      {R4,LR}
   \   00000022   0xF04F 0x31FF      MOV      R1,#-1
   \   00000026   0xF500 0x40D7      ADD      R0,R0,#+27520
   \   0000002A   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3644                  }
   3645              }
   3646              else
   3647              {
   3648                  if( TRUE == GsnHttpd_IsRunning() )
   \                     ??AppS2wHal_HttpdClose_0:
   \   0000002E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000032   0x2801             CMP      R0,#+1
   \   00000034   0xD11B             BNE.N    ??AppS2wHal_HttpdClose_1
   3649                  {
   3650          #ifdef S2W_WEB_PROV
   3651                      if((TRUE == GsnHttpd_IsRunning() )&& s2wappMainTaskCtxt->webProvStatus== RUNNING)
   \   00000036   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   0000003A   0x2801             CMP      R0,#+1
   \   0000003C   0xBF01             ITTTT    EQ 
   \   0000003E   0x6820             LDREQ    R0,[R4, #+0]
   \   00000040   0xF646 0x412C      MOVWEQ   R1,#+27692
   \   00000044   0x5C0A             LDRBEQ   R2,[R1, R0]
   \   00000046   0x2A02             CMPEQ    R2,#+2
   \   00000048   0xBF04             ITT      EQ 
   \   0000004A   0x2203             MOVEQ    R2,#+3
   \   0000004C   0x540A             STRBEQ   R2,[R1, R0]
   3652                          s2wappMainTaskCtxt->webProvStatus=STOP;
   3653          #endif
   3654          #ifdef S2W_WEB_SERVER
   3655                      if((TRUE == GsnHttpd_IsRunning() )&& s2wappMainTaskCtxt->webServerStatus == RUNNING)
   \   0000004E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000052   0x2801             CMP      R0,#+1
   \   00000054   0xBF01             ITTTT    EQ 
   \   00000056   0x6820             LDREQ    R0,[R4, #+0]
   \   00000058   0xF646 0x31C4      MOVWEQ   R1,#+27588
   \   0000005C   0x5C0A             LDRBEQ   R2,[R1, R0]
   \   0000005E   0x2A02             CMPEQ    R2,#+2
   \   00000060   0xBF04             ITT      EQ 
   \   00000062   0x2203             MOVEQ    R2,#+3
   \   00000064   0x540A             STRBEQ   R2,[R1, R0]
   3656                          s2wappMainTaskCtxt->webServerStatus=STOP;
   3657          #endif
   3658                      AppS2wHttpd_Stop();
   \   00000066   0xE8BD 0x4010      POP      {R4,LR}
   \   0000006A   0x.... 0x....      B.W      AppS2wHttpd_Stop
   3659                  }
   3660              }
   3661          #endif
   3662          }
   \                     ??AppS2wHal_HttpdClose_1:
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
   3663          
   3664          
   3665          #ifdef S2W_MDNS_ENABLE

   \                                 In section .text, align 2, keep-with-next
   3666          PUBLIC VOID
   3667          AppS2wHal_MdnsRegCb(void *pCtx, UINT8 *rrName, UINT32 status)
   3668          {
   3669          	UINT8 syncId,asyncId;
   3670              if(GSN_MDNS_REG_CONFLICT == status)
   \                     AppS2wHal_MdnsRegCb:
   \   00000000   0x2A00             CMP      R2,#+0
   \   00000002   0xBF07             ITTEE    EQ 
   \   00000004   0x2220             MOVEQ    R2,#+32
   \   00000006   0x201A             MOVEQ    R0,#+26
   \   00000008   0x2221             MOVNE    R2,#+33
   \   0000000A   0x201B             MOVNE    R0,#+27
   3671              {
   3672          	    syncId =  S2W_MDNS_REG_FAILED_ID;
   3673          		asyncId = S2W_ASYNC_MDNS_REG_FAILED_ID;
   3674              }
   3675              else
   3676              {
   3677          	    syncId =  S2W_MDNS_REG_SUCESS_ID;
   3678          		asyncId = S2W_ASYNC_MDNS_REG_SUCESS_ID;
   3679              }
   3680          	if(s2wCurrent.asyncMsgFormat == 1)
   \   0000000C   0x....             LDR.N    R3,??DataTable98_3
   \   0000000E   0xF893 0x31D8      LDRB     R3,[R3, #+472]
   \   00000012   0x2B01             CMP      R3,#+1
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      BEQ.W    AppS2wProcess_AsyncStatusNotify
   3681          	{
   3682          		AppS2wProcess_AsyncStatusNotify(asyncId,(UINT32)rrName);
   3683          	}
   3684          	else
   3685          	{
   3686          		AppS2wProcess_StatusNotify(syncId,(UINT32)rrName);
   \   0000001A   0x4610             MOV      R0,R2
   \   0000001C   0x.... 0x....      B.W      AppS2wProcess_StatusNotify
   3687          	}
   3688          }
   3689          
   3690          //GSN_MDNS_T mdns;

   \                                 In section .bss, align 4
   3691          S2W_MDNS_HN_PARAM_T mdnsHnParam;
   \                     mdnsHnParam:
   \   00000000                      DS8 24
   3692          
   3693          //#define APP_MDNS_STACK_SIZE     4*1024
   3694          //#define APP_MDNS_MSG_Q_BUFF_SIZE        256
   3695          
   3696          
   3697          //UINT8  mdnsMsgBuff[APP_MDNS_MSG_Q_BUFF_SIZE];
   3698          

   \                                 In section .text, align 2, keep-with-next
   3699          VOID s2w_mdnsCb(VOID *cbCtx, VOID *pMdns)
   3700          {
   3701            AppMainCtx_TaskNotify(APP_EVENT_MDNS_EXECUTE);
   \                     s2w_mdnsCb:
   \   00000000   0x2025             MOVS     R0,#+37
   \   00000002   0x.... 0x....      B.W      AppMainCtx_TaskNotify
   3702            
   3703          }
   3704          
   3705          #if 0
   3706          
   3707          PRIVATE VOID   
   3708          App_MdnsThreadEntry(UINT32 ctx)
   3709          {
   3710          
   3711              /*UINT status;*/
   3712              //UINT32 msg = 0;
   3713          
   3714             /* Start debug UART before starting the idle handler because the 
   3715                 debug UART flushing is done in idle handler context */
   3716          
   3717              /**< Initialize debug module */
   3718             APP_MAIN_CTX_T *pAppCtx;
   3719             pAppCtx = (APP_MAIN_CTX_T *)ctx;
   3720             
   3721             
   3722              GsnMdns_Execute(&pAppCtx->mdns);/* This will not exit*/
   3723          }
   3724          #endif
   3725          
   3726          

   \                                 In section .bss, align 1
   3727          UINT8 mdnsFlag=0;
   \                     mdnsFlag:
   \   00000000                      DS8 1

   \                                 In section .noinit, align 4
   3728          __no_init UINT8 mdnsMsgQueueBuf[512];
   \                     mdnsMsgQueueBuf:
   \   00000000                      DS8 512
   3729          

   \                                 In section .text, align 2, keep-with-next
   3730          VOID
   3731          AppS2wHal_MdnsInit(UINT8 *ptr)
   3732          {
   \                     AppS2wHal_MdnsInit:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   3733              GSN_MDNS_INIT_PARAM_T initParam;
   3734              UINT32 param;
   3735              UINT8 *p;
   3736              if(mdnsFlag)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable105_7
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0xB08E             SUB      SP,SP,#+56
   \   0000000A   0xBB90             CBNZ.N   R0,??AppS2wHal_MdnsInit_0
   3737              return ;
   3738              memset((INT8*)&initParam, 0, sizeof(initParam));
   \   0000000C   0x2230             MOVS     R2,#+48
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0xA801             ADD      R0,SP,#+4
   \   00000012   0x.... 0x....      BL       memset
   3739          
   3740              if((p=(UINT8*)AppS2wParse_NextParamGet(&ptr)) != NULL)
   \   00000016   0xA80E             ADD      R0,SP,#+56
   \   00000018   0x.... 0x....      BL       AppS2wParse_NextParamGet
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable105_8
   \   00000020   0xB140             CBZ.N    R0,??AppS2wHal_MdnsInit_1
   3741              {    
   3742              AppS2wParse_Int(p, &param);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0x.... 0x....      BL       AppS2wParse_Int
   3743              if(param == 6)
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x2806             CMP      R0,#+6
   \   0000002C   0xD106             BNE.N    ??AppS2wHal_MdnsInit_2
   3744              memcpy(initParam.ipV6Addr,appCtx.if0.nwifCtx.ipConfig.ipv6.globalAddr,16);
   \   0000002E   0x.... 0x....      BL       ?Subroutine6
   3745              }
   \                     ??CrossCallReturnLabel_10:
   \   00000032   0xE003             B.N      ??AppS2wHal_MdnsInit_2
   3746              else
   3747              initParam.ipV4Addr = appCtx.if0.nwifCtx.ipConfig.ipv4.ipAddr;
   \                     ??AppS2wHal_MdnsInit_1:
   \   00000034   0xF246 0x6044      MOVW     R0,#+26180
   \   00000038   0x5940             LDR      R0,[R0, R5]
   \   0000003A   0x9002             STR      R0,[SP, #+8]
   3748              
   3749              initParam.pNwif = &appCtx.if0.nwifCtx;
   \                     ??AppS2wHal_MdnsInit_2:
   \   0000003C   0xF505 0x50A0      ADD      R0,R5,#+5120
   \   00000040   0x3050             ADDS     R0,R0,#+80
   \   00000042   0x9001             STR      R0,[SP, #+4]
   3750          
   3751                        
   3752              initParam.msgQueueBuff = mdnsMsgQueueBuf;                           /**< pointer to message queue buffer*/
   3753              initParam.msgQueueBuffSize = 512;       /**< messsage queue buffer size*/                                      
   3754              initParam.noSeparatetsk = 0;
   3755              initParam.blockingOn = 0;
   3756              //initParam.msgPostCb = NULL;
   3757              initParam.msgPostCb = s2w_mdnsCb;
   3758              initParam.msgPostCbCtx = NULL;
   3759          
   3760              GsnMdns_Init(&appCtx.mdns, &initParam);
   \   00000044   0xA901             ADD      R1,SP,#+4
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable105_9
   \   0000004A   0x9008             STR      R0,[SP, #+32]
   \   0000004C   0xF44F 0x7000      MOV      R0,#+512
   \   00000050   0x9009             STR      R0,[SP, #+36]
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0x900A             STR      R0,[SP, #+40]
   \   00000056   0xF88D 0x001C      STRB     R0,[SP, #+28]
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable105_10
   \   0000005E   0x900B             STR      R0,[SP, #+44]
   \   00000060   0x2000             MOVS     R0,#+0
   \   00000062   0x900C             STR      R0,[SP, #+48]
   \   00000064   0xF505 0x40D8      ADD      R0,R5,#+27648
   \   00000068   0x3030             ADDS     R0,R0,#+48
   \   0000006A   0x.... 0x....      BL       GsnMdns_Init
   3761              mdnsFlag=1;
   \   0000006E   0x2001             MOVS     R0,#+1
   \   00000070   0x7020             STRB     R0,[R4, #+0]
   3762              /* create a mdns task*/
   3763             //GsnOsal_ThreadCreate(App_MdnsThreadEntry, &appCtx, &appMdnsThread,
   3764             //     "App Mdns Ctx", APP_MDNS_THREAD_PRI, (UINT8 *)appMdnsThreadStack,
   3765             //     sizeof(appMdnsThreadStack), GSN_OSAL_THREAD_INITIAL_READY);
   3766          }
   \                     ??AppS2wHal_MdnsInit_0:
   \   00000072   0xB00F             ADD      SP,SP,#+60
   \   00000074   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0xF505 0x41CC      ADD      R1,R5,#+26112
   \   00000004   0x2210             MOVS     R2,#+16
   \   00000006   0x3184             ADDS     R1,R1,#+132
   \   00000008   0xA803             ADD      R0,SP,#+12
   \   0000000A   0x.... 0x....      B.W      memcpy
   3767          

   \                                 In section .text, align 2, keep-with-next
   3768          VOID
   3769          AppS2wHal_MdnsDeInit()
   3770          {
   \                     AppS2wHal_MdnsDeInit:
   \   00000000   0xB580             PUSH     {R7,LR}
   3771                  
   3772          	GsnMdns_DeInit(&appCtx.mdns);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   00000006   0x.... 0x....      BL       GsnMdns_DeInit
   3773                  mdnsFlag=0;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable105_7
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x7001             STRB     R1,[R0, #+0]
   3774          }
   \   00000012   0xBD01             POP      {R0,PC}          ;; return
   3775          
   3776          
   3777          

   \                                 In section .text, align 2, keep-with-next
   3778          PUBLIC UINT8
   3779          AppS2wHal_MdnsHostNameReg(S2W_MDNS_HN_PARAM_T *pHNparam)
   3780          {
   \                     AppS2wHal_MdnsHostNameReg:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   3781              GSN_STATUS retVal;
   3782              GSN_MDNS_HNREG_PARAM_T pParam;
   3783              //UINT32 arr[4];
   3784              //UINT8 i;
   3785              
   3786              pParam.hostname = pHNparam ->hostname;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   3787              pParam.domain   = pHNparam -> domain;
   3788              pParam.ttl   = pHNparam ->ttl;
   3789              pParam.scope = pHNparam->scope;
   3790               
   3791              pParam.autoCorrect  = pHNparam ->autoCorrect;
   3792              pParam.conflctDetect = pHNparam ->conflctDetect;
   3793          
   3794              if(pHNparam->IpVersion & ADDR_TYPE_IPv6)
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable105_8
   \   0000000A   0x9100             STR      R1,[SP, #+0]
   \   0000000C   0xAC01             ADD      R4,SP,#+4
   \   0000000E   0x6841             LDR      R1,[R0, #+4]
   \   00000010   0x9101             STR      R1,[SP, #+4]
   \   00000012   0x6901             LDR      R1,[R0, #+16]
   \   00000014   0x61A1             STR      R1,[R4, #+24]
   \   00000016   0x7B41             LDRB     R1,[R0, #+13]
   \   00000018   0x7761             STRB     R1,[R4, #+29]
   \   0000001A   0x7B01             LDRB     R1,[R0, #+12]
   \   0000001C   0x7721             STRB     R1,[R4, #+28]
   \   0000001E   0x7B81             LDRB     R1,[R0, #+14]
   \   00000020   0x77A1             STRB     R1,[R4, #+30]
   \   00000022   0x7D00             LDRB     R0,[R0, #+20]
   \   00000024   0x07C0             LSLS     R0,R0,#+31
   \   00000026   0xD504             BPL.N    ??AppS2wHal_MdnsHostNameReg_0
   3795              {
   3796                  memcpy(pParam.ipAddr.addr.v6,appCtx.if0.nwifCtx.ipConfig.ipv6.globalAddr,16);
   \   00000028   0x.... 0x....      BL       ?Subroutine6
   3797                  pParam.ipAddr.ipVer = GSN_NWIF_IP_VERSION_V6;
   \                     ??CrossCallReturnLabel_9:
   \   0000002C   0x2006             MOVS     R0,#+6
   \   0000002E   0x6060             STR      R0,[R4, #+4]
   \   00000030   0xE003             B.N      ??AppS2wHal_MdnsHostNameReg_1
   3798              }
   3799              else
   3800                  pParam.ipAddr.addr.v4 = appCtx.if0.nwifCtx.ipConfig.ipv4.ipAddr;
   \                     ??AppS2wHal_MdnsHostNameReg_0:
   \   00000032   0xF246 0x6044      MOVW     R0,#+26180
   \   00000036   0x5940             LDR      R0,[R0, R5]
   \   00000038   0x60A0             STR      R0,[R4, #+8]
   3801          
   3802              pParam.cb           = AppS2wHal_MdnsRegCb;
   3803              pParam.cbCtx        = NULL;
   3804              
   3805              retVal = GsnMdns_HostnameRegister(&appCtx.mdns, &pParam);
   3806          
   3807              if(GSN_SUCCESS != retVal)
   \                     ??AppS2wHal_MdnsHostNameReg_1:
   \   0000003A   0xA900             ADD      R1,SP,#+0
   \   0000003C   0x.... 0x....      LDR.W    R0,??DataTable105_12
   \   00000040   0x6220             STR      R0,[R4, #+32]
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x6260             STR      R0,[R4, #+36]
   \   00000046   0xF505 0x40D8      ADD      R0,R5,#+27648
   \   0000004A   0x3030             ADDS     R0,R0,#+48
   \   0000004C   0x.... 0x....      BL       GsnMdns_HostnameRegister
   \   00000050   0xB100             CBZ.N    R0,??AppS2wHal_MdnsHostNameReg_2
   3808                  return S2W_FAILURE;
   \   00000052   0x2001             MOVS     R0,#+1
   3809              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsHostNameReg_2:
   \   00000054   0xB00B             ADD      SP,SP,#+44
   \   00000056   0xBD30             POP      {R4,R5,PC}       ;; return
   3810          }
   3811          
   3812          

   \                                 In section .text, align 2, keep-with-next
   3813          PUBLIC UINT8
   3814          AppS2wHal_MdnsServiceReg(S2W_MDNS_SRV_PARAM_T *pSrvParam)
   3815          {
   \                     AppS2wHal_MdnsServiceReg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
   3816              GSN_STATUS retVal;
   3817              GSN_MDNS_SRVCREG_PARAM_T pParam;
   3818              
   3819              pParam.srvceName     = pSrvParam ->srvcInstance;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3820              pParam.srvceSubType  = pSrvParam ->subType;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3821              pParam.srvceType     = pSrvParam ->srvcType;
   \   0000000C   0xA901             ADD      R1,SP,#+4
   \   0000000E   0x68C2             LDR      R2,[R0, #+12]
   \   00000010   0x604A             STR      R2,[R1, #+4]
   3822              pParam.srvceProto    = pSrvParam ->proto;
   \   00000012   0x6902             LDR      R2,[R0, #+16]
   \   00000014   0x608A             STR      R2,[R1, #+8]
   3823              pParam.domain        = pSrvParam ->domain;
   \   00000016   0x6942             LDR      R2,[R0, #+20]
   \   00000018   0x60CA             STR      R2,[R1, #+12]
   3824              pParam.port          = pSrvParam ->port;
   \   0000001A   0x8B02             LDRH     R2,[R0, #+24]
   \   0000001C   0x828A             STRH     R2,[R1, #+20]
   3825              pParam.ttl           = pSrvParam ->ttl;
   \   0000001E   0x6B42             LDR      R2,[R0, #+52]
   \   00000020   0x618A             STR      R2,[R1, #+24]
   3826              pParam.keyVal        = pSrvParam ->keyVal;
   \   00000022   0xF100 0x021C      ADD      R2,R0,#+28
   \   00000026   0x610A             STR      R2,[R1, #+16]
   3827              pParam.autoCorrect   = pSrvParam ->autoCorrect;
   \   00000028   0xF890 0x2030      LDRB     R2,[R0, #+48]
   \   0000002C   0x770A             STRB     R2,[R1, #+28]
   3828              pParam.scope         = pSrvParam ->scope;
   \   0000002E   0x7E82             LDRB     R2,[R0, #+26]
   \   00000030   0x774A             STRB     R2,[R1, #+29]
   3829              pParam.conflctDetect = pSrvParam ->conflctDetect;
   \   00000032   0xF890 0x0031      LDRB     R0,[R0, #+49]
   \   00000036   0x7788             STRB     R0,[R1, #+30]
   3830                
   3831              pParam.cb           =   AppS2wHal_MdnsRegCb;
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable105_12
   \   0000003C   0x6208             STR      R0,[R1, #+32]
   3832              pParam.cbCtx        =   NULL;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x6248             STR      R0,[R1, #+36]
   3833              
   3834               retVal = GsnMdns_ServiceRegister(&appCtx.mdns,&pParam);
   3835          
   3836          
   3837                if(GSN_SUCCESS != retVal)
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   00000048   0x.... 0x....      BL       GsnMdns_ServiceRegister
   \   0000004C   0xB100             CBZ.N    R0,??AppS2wHal_MdnsServiceReg_0
   3838                  return S2W_FAILURE;
   \   0000004E   0x2001             MOVS     R0,#+1
   3839              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsServiceReg_0:
   \   00000050   0xB00B             ADD      SP,SP,#+44
   \   00000052   0xBD00             POP      {PC}             ;; return
   3840          }
   3841          
   3842          

   \                                 In section .text, align 2, keep-with-next
   3843          PUBLIC UINT8
   3844          AppS2wHal_MdnsHostNameDereg(S2W_MDNS_HN_PARAM_T *pHNparam)
   3845          {
   \                     AppS2wHal_MdnsHostNameDereg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   3846              GSN_MDNS_HNDEREG_PAARAM_T pParam;
   3847              
   3848              pParam.hostname = pHNparam->hostname;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3849              pParam.domain   = pHNparam -> domain;
   3850          
   3851             GsnMdns_HostnameDeregister(&appCtx.mdns, &pParam);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x9001             STR      R0,[SP, #+4]
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   00000012   0x.... 0x....      BL       GsnMdns_HostnameDeregister
   3852          
   3853              return S2W_SUCCESS;
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0xBD0E             POP      {R1-R3,PC}       ;; return
   3854          }
   3855          

   \                                 In section .text, align 2, keep-with-next
   3856          PUBLIC UINT8
   3857          AppS2wHal_MdnsServiceDereg(S2W_MDNS_SRV_PARAM_T *pSrvParam)
   3858          {
   \                     AppS2wHal_MdnsServiceDereg:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   3859               GSN_MDNS_SRVCDEREG_PARAM_T pParam;
   3860               
   3861               pParam.srvceName = pSrvParam->srvcInstance;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3862               pParam.srvceSubType = pSrvParam->subType;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3863               pParam.srvceType = pSrvParam -> srvcType;
   \   0000000C   0x68C1             LDR      R1,[R0, #+12]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   3864               pParam.srvceProto = pSrvParam -> proto;
   \   00000010   0x6901             LDR      R1,[R0, #+16]
   \   00000012   0x9103             STR      R1,[SP, #+12]
   3865               pParam.domain = pSrvParam -> domain;
   3866                 
   3867              GsnMdns_ServiceDeRegister(&appCtx.mdns, &pParam);
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x6940             LDR      R0,[R0, #+20]
   \   00000018   0x9004             STR      R0,[SP, #+16]
   \   0000001A   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   0000001E   0x.... 0x....      BL       GsnMdns_ServiceDeRegister
   3868              return S2W_SUCCESS;
   \   00000022   0x....             B.N      ?Subroutine2
   3869          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0xB005             ADD      SP,SP,#+20
   \   00000004   0xBD00             POP      {PC}             ;; return
   3870          

   \                                 In section .text, align 2, keep-with-next
   3871          PUBLIC VOID
   3872          AppS2wHal_MdnsSdCb(void *pCtx, const GSN_MDNS_SRVC_INFO_T *srvinfo, UINT32 status)
   3873          {
   \                     AppS2wHal_MdnsSdCb:
   \   00000000   0xE92D 0x41FC      PUSH     {R2-R8,LR}
   \   00000004   0x460D             MOV      R5,R1
   3874              UINT8 *addr = (UINT8 *)&srvinfo->ipAddr;
   3875          	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000006   0x.... 0x....      LDR.W    R8,??DataTable105_13
   \   0000000A   0x4616             MOV      R6,R2
   \   0000000C   0xF105 0x07C0      ADD      R7,R5,#+192
   \   00000010   0xF04F 0x31FF      MOV      R1,#-1
   \   00000014   0x4640             MOV      R0,R8
   \   00000016   0x.... 0x....      BL       GsnOsal_SemAcquire
   3876              if(GSN_MDNS_SD_NO_SRVC_INFO == status)
   \   0000001A   0xB926             CBNZ.N   R6,??AppS2wHal_MdnsSdCb_0
   3877              {
   3878                  S2w_Printf("Service Discovery Failed\r\n");
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "Service Discovery Fai...">`
   \   00000020   0x.... 0x....      BL       S2w_Printf
   \   00000024   0xE044             B.N      ??AppS2wHal_MdnsSdCb_1
   3879              }
   3880              else
   3881              {
   3882                  S2w_Printf("\nA Service Discovered: %d\r\n", status);
   \                     ??AppS2wHal_MdnsSdCb_0:
   \   00000026   0x4631             MOV      R1,R6
   \   00000028   0x.... 0x....      ADR.W    R0,`?<Constant "\\nA Service Discovered...">`
   \   0000002C   0x.... 0x....      BL       S2w_Printf
   3883                  S2w_Printf("\r\n");
   \   00000030   0x....             ADR.N    R0,??DataTable99  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000032   0x.... 0x....      BL       S2w_Printf
   3884                  S2w_Printf("Service Instance name     = %s\r\n", srvinfo->instance);
   \   00000036   0x.... 0x....      ADR.W    R0,`?<Constant "Service Instance name...">`
   \   0000003A   0x1D29             ADDS     R1,R5,#+4
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   3885                  S2w_Printf("Service Sub type          = %s\r\r", srvinfo->subType);
   \   00000040   0xF105 0x0144      ADD      R1,R5,#+68
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "Service Sub type     ...">`
   \   00000048   0x.... 0x....      BL       S2w_Printf
   3886                  S2w_Printf("Service app protocol      = %s\r\n", srvinfo->srvcType);
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant "Service app protocol ...">`
   \   00000050   0xF105 0x0184      ADD      R1,R5,#+132
   \   00000054   0x.... 0x....      BL       S2w_Printf
   3887                  S2w_Printf("Service protocol          = %s\r\n", srvinfo->protocol);
   \   00000058   0xF105 0x019C      ADD      R1,R5,#+156
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "Service protocol     ...">`
   \   00000060   0x.... 0x....      BL       S2w_Printf
   3888                  S2w_Printf("Service domain            = %s\r\n", srvinfo->domain);         
   \   00000064   0x.... 0x....      ADR.W    R0,`?<Constant "Service domain       ...">`
   \   00000068   0xF105 0x01AC      ADD      R1,R5,#+172
   \   0000006C   0x.... 0x....      BL       S2w_Printf
   3889                  
   3890                  S2w_Printf("Service IP address        = %d.%d.%d.%d  Port = %d\r\n",
   3891                      addr[0], addr[1], addr[2], addr[3], srvinfo->port);
   \   00000070   0xF8B5 0x00BC      LDRH     R0,[R5, #+188]
   \   00000074   0x9001             STR      R0,[SP, #+4]
   \   00000076   0x78F8             LDRB     R0,[R7, #+3]
   \   00000078   0x9000             STR      R0,[SP, #+0]
   \   0000007A   0x78BB             LDRB     R3,[R7, #+2]
   \   0000007C   0x787A             LDRB     R2,[R7, #+1]
   \   0000007E   0x7839             LDRB     R1,[R7, #+0]
   \   00000080   0x.... 0x....      ADR.W    R0,`?<Constant "Service IP address   ...">`
   \   00000084   0x.... 0x....      BL       S2w_Printf
   3892                  if(NULL != srvinfo->txtInfo)
   \   00000088   0xF8D5 0x00B8      LDR      R0,[R5, #+184]
   \   0000008C   0xB180             CBZ.N    R0,??AppS2wHal_MdnsSdCb_1
   3893                  {
   3894                      UINT8 txtStrLen = *(srvinfo->txtInfo);
   \   0000008E   0x7805             LDRB     R5,[R0, #+0]
   3895                      UINT8 txtNxtStrLen ;
   3896                      UINT8 *txtInfo = srvinfo->txtInfo ;
   3897          
   3898          			txtInfo ++;
   \   00000090   0x.... 0x....      ADR.W    R7,`?<Constant "\\nService Text Info   ...">`
   \   00000094   0x1C46             ADDS     R6,R0,#+1
   \   00000096   0xE009             B.N      ??AppS2wHal_MdnsSdCb_2
   3899                      while(txtStrLen)
   3900                      {
   3901                          txtNxtStrLen = *(txtInfo + txtStrLen);
   \                     ??AppS2wHal_MdnsSdCb_3:
   \   00000098   0x5DAC             LDRB     R4,[R5, R6]
   3902          				*(txtInfo + txtStrLen)  = 0;
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x55A8             STRB     R0,[R5, R6]
   3903          
   3904          				S2w_Printf("\nService Text Info          = %s\r\n", txtInfo);
   \   0000009E   0x4631             MOV      R1,R6
   \   000000A0   0x4638             MOV      R0,R7
   \   000000A2   0x.... 0x....      BL       S2w_Printf
   3905                          txtInfo += (txtStrLen + 1);
   \   000000A6   0x19A8             ADDS     R0,R5,R6
   \   000000A8   0x1C46             ADDS     R6,R0,#+1
   3906                          txtStrLen = txtNxtStrLen;
   \   000000AA   0x4625             MOV      R5,R4
   3907                      }
   \                     ??AppS2wHal_MdnsSdCb_2:
   \   000000AC   0x2D00             CMP      R5,#+0
   \   000000AE   0xD1F3             BNE.N    ??AppS2wHal_MdnsSdCb_3
   3908                  }
   3909              }
   3910              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wHal_MdnsSdCb_1:
   \   000000B0   0x.... 0x....      LDR.W    R1,??DataTable105_2
   \   000000B4   0x6809             LDR      R1,[R1, #+0]
   \   000000B6   0xF646 0x20F8      MOVW     R0,#+27384
   \   000000BA   0x5C40             LDRB     R0,[R0, R1]
   \   000000BC   0x2802             CMP      R0,#+2
   \   000000BE   0xBF08             IT       EQ 
   \   000000C0   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3911              {
   3912                  s2wSpiFs_Flush();
   3913              }
   3914          	GsnOsal_SemRelease(&s2wSyncSemID);
   \   000000C4   0x4640             MOV      R0,R8
   \   000000C6   0xE8BD 0x41F6      POP      {R1,R2,R4-R8,LR}
   \   000000CA   0x.... 0x....      B.W      GsnOsal_SemRelease
   3915          }

   \                                 In section .text, align 2, keep-with-next
   3916          PUBLIC UINT8
   3917          AppS2wHal_MdnsSrvcDiscover(S2W_MDNS_SRVCDISCVR_PARAM_T *mdnsSrvDscr)
   3918          {
   \                     AppS2wHal_MdnsSrvcDiscover:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   3919              GSN_STATUS retVal;
   3920              GSN_MDNS_SRVCDISCVR_PARAM_T pParam;
   3921              
   3922              
   3923              pParam.srvcSubType = mdnsSrvDscr ->srvcSubType;
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3924              pParam.srvcType    = mdnsSrvDscr ->srvcType;
   \   00000008   0x6841             LDR      R1,[R0, #+4]
   \   0000000A   0x9101             STR      R1,[SP, #+4]
   3925              pParam.srvcProto   = mdnsSrvDscr ->srvcProto;
   \   0000000C   0x6881             LDR      R1,[R0, #+8]
   \   0000000E   0x9102             STR      R1,[SP, #+8]
   3926              pParam.domain      = mdnsSrvDscr ->domain;
   \   00000010   0x68C1             LDR      R1,[R0, #+12]
   \   00000012   0x9103             STR      R1,[SP, #+12]
   3927             
   3928              pParam.scope       = mdnsSrvDscr ->scope;
   3929              pParam.cb          =  AppS2wHal_MdnsSdCb;
   3930              pParam.cbCtx       =  NULL;
   3931              
   3932          
   3933              retVal = GsnMdns_ServiceDiscover(&appCtx.mdns, &pParam);
   3934               if(GSN_SUCCESS != retVal)
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x7C00             LDRB     R0,[R0, #+16]
   \   00000018   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   0000001C   0x.... 0x....      LDR.W    R0,??DataTable105_14
   \   00000020   0x9005             STR      R0,[SP, #+20]
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9006             STR      R0,[SP, #+24]
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   0000002A   0x.... 0x....      BL       GsnMdns_ServiceDiscover
   \   0000002E   0xB100             CBZ.N    R0,??AppS2wHal_MdnsSrvcDiscover_0
   3935                  return S2W_FAILURE;
   \   00000030   0x2001             MOVS     R0,#+1
   3936              return S2W_SUCCESS;
   \                     ??AppS2wHal_MdnsSrvcDiscover_0:
   \   00000032   0xB007             ADD      SP,SP,#+28
   \   00000034   0xBD00             POP      {PC}             ;; return
   3937          }
   3938          

   \                                 In section .text, align 2, keep-with-next
   3939          PUBLIC UINT8
   3940          AppS2wHal_MdnsAnnounce(S2W_MDNS_ANNOUNCE_PARAM_T *mdnsAnnceParam)
   3941          {
   \                     AppS2wHal_MdnsAnnounce:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   3942              GSN_MDNS_ANNOUNCE_PARAM_T pParam;
   3943              
   3944              pParam.srvceName = mdnsAnnceParam->srvceName;
   \   00000004   0x6841             LDR      R1,[R0, #+4]
   \   00000006   0x9100             STR      R1,[SP, #+0]
   3945              pParam.domain = mdnsAnnceParam->domain;
   \   00000008   0x6881             LDR      R1,[R0, #+8]
   \   0000000A   0x9104             STR      R1,[SP, #+16]
   3946              
   3947              if(mdnsAnnceParam->type == 2)
   \   0000000C   0x7801             LDRB     R1,[R0, #+0]
   \   0000000E   0x2902             CMP      R1,#+2
   \   00000010   0xD105             BNE.N    ??AppS2wHal_MdnsAnnounce_0
   3948              {
   3949                  pParam.srvceSubType = mdnsAnnceParam ->srvceSubType;
   \   00000012   0x68C1             LDR      R1,[R0, #+12]
   \   00000014   0x9101             STR      R1,[SP, #+4]
   3950                  pParam.srvceType = mdnsAnnceParam->srvceType;
   \   00000016   0x6901             LDR      R1,[R0, #+16]
   \   00000018   0x9102             STR      R1,[SP, #+8]
   3951                  pParam.srvceProto = mdnsAnnceParam ->srvceProto;
   \   0000001A   0x6940             LDR      R0,[R0, #+20]
   \   0000001C   0xE002             B.N      ??AppS2wHal_MdnsAnnounce_1
   3952              } 
   3953              else
   3954              {
   3955                   pParam.srvceSubType = NULL;
   \                     ??AppS2wHal_MdnsAnnounce_0:
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9001             STR      R0,[SP, #+4]
   3956                   pParam.srvceType = NULL;
   \   00000022   0x9002             STR      R0,[SP, #+8]
   3957                   pParam.srvceProto = NULL;
   \                     ??AppS2wHal_MdnsAnnounce_1:
   \   00000024   0x9003             STR      R0,[SP, #+12]
   3958              }
   3959              GsnMdns_Announce(&appCtx.mdns, &pParam);
   \   00000026   0xA900             ADD      R1,SP,#+0
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable105_11
   \   0000002C   0x.... 0x....      BL       GsnMdns_Announce
   3960          
   3961              return S2W_SUCCESS;
   \   00000030                      REQUIRE ?Subroutine2
   \   00000030                      ;; // Fall through to label ?Subroutine2
   3962          }
   3963          
   3964          #endif
   3965          #define S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND   0.030517578125
   3966          #ifdef S2W_PING_TRACE

   \                                 In section .bss, align 4
   3967          S2W_PING_STATS_T s2wPingStats;
   \                     s2wPingStats:
   \   00000000                      DS8 20
   3968          

   \                                 In section .text, align 2, keep-with-next
   3969          VOID s2wPingStart()
   3970          {
   \                     s2wPingStart:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   3971              NX_PACKET *response_ptr;
   3972              ULONG rtt0,rtt1,ttl=64;
   3973              UINT32 interval;
   3974              UINT8 *pingBuf;
   3975            	INT32 icmpRetVal;
   3976          	UINT32 milliSecPerTick = (1000/NX_CPU_TICKS_PER_SECOND); 
   3977              interval = (s2wappMainTaskCtxt->pingParams.interval != 0) ? (s2wappMainTaskCtxt->pingParams.interval) : 3000;
   \   00000004   0x.... 0x....      LDR.W    R6,??DataTable105_2
   \   00000008   0x6830             LDR      R0,[R6, #+0]
   \   0000000A   0xF247 0x5130      MOVW     R1,#+30000
   \   0000000E   0xB085             SUB      SP,SP,#+20
   \   00000010   0x580A             LDR      R2,[R1, R0]
   \   00000012   0xB90A             CBNZ.N   R2,??s2wPingStart_0
   \   00000014   0xF640 0x32B8      MOVW     R2,#+3000
   3978          	/* Convert from milli sec to ticks*/
   3979          	interval  = (interval / milliSecPerTick);
   3980          #ifdef S2W_IPv6_SUPPORT
   3981              INT8 ipv6str[INET6_ADDRSTRLEN];
   3982              S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
   3983          #endif
   3984           
   3985              if(s2wPingStarted == TRUE)
   \                     ??s2wPingStart_0:
   \   00000018   0x.... 0x....      LDR.W    R10,??DataTable105_15
   \   0000001C   0x2364             MOVS     R3,#+100
   \   0000001E   0xFBB2 0xF7F3      UDIV     R7,R2,R3
   \   00000022   0xF89A 0x2000      LDRB     R2,[R10, #+0]
   \   00000026   0x2A01             CMP      R2,#+1
   \   00000028   0xF040 0x80DD      BNE.W    ??s2wPingStart_1
   3986              {
   3987                  if(s2wappMainTaskCtxt->pingParams.payload[0])
   \   0000002C   0x1809             ADDS     R1,R1,R0
   \   0000002E   0x7D0A             LDRB     R2,[R1, #+20]
   \   00000030   0xB1CA             CBZ.N    R2,??s2wPingStart_2
   3988                  {
   3989                      pingBuf = (UINT8 *)MALLOC(strlen(s2wappMainTaskCtxt->pingParams.payload) + 1);
   \   00000032   0xF247 0x5444      MOVW     R4,#+30020
   \   00000036   0x1820             ADDS     R0,R4,R0
   \   00000038   0x.... 0x....      BL       strlen
   \   0000003C   0x1C40             ADDS     R0,R0,#+1
   \   0000003E   0x.... 0x....      BL       MALLOC
   \   00000042   0xEA5F 0x0800      MOVS     R8,R0
   3990                      if(NULL == pingBuf)
   \   00000046   0xD02D             BEQ.N    ??s2wPingStart_3
   3991                      {
   3992                          return;
   3993                      }
   3994                      memcpy(pingBuf,s2wappMainTaskCtxt->pingParams.payload,strlen(s2wappMainTaskCtxt->pingParams.payload));
   \   00000048   0x6830             LDR      R0,[R6, #+0]
   \   0000004A   0x1825             ADDS     R5,R4,R0
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       strlen
   \   00000052   0x4602             MOV      R2,R0
   \   00000054   0x4629             MOV      R1,R5
   \   00000056   0x4640             MOV      R0,R8
   \   00000058   0x.... 0x....      BL       memcpy
   3995                      pingBuf[strlen(s2wappMainTaskCtxt->pingParams.payload)] = '\0';
   \   0000005C   0x6830             LDR      R0,[R6, #+0]
   \   0000005E   0x1820             ADDS     R0,R4,R0
   \   00000060   0x.... 0x....      BL       strlen
   \   00000064   0xE015             B.N      ??s2wPingStart_4
   3996                  }
   3997                  else if(s2wappMainTaskCtxt->pingParams.dataLen)
   \                     ??s2wPingStart_2:
   \   00000066   0x6848             LDR      R0,[R1, #+4]
   \   00000068   0xB1B8             CBZ.N    R0,??s2wPingStart_5
   3998                  {
   3999                      if(s2wappMainTaskCtxt->pingParams.dataLen >= 1024)
   \   0000006A   0xF5B0 0x6F80      CMP      R0,#+1024
   \   0000006E   0xF080 0x80BA      BCS.W    ??s2wPingStart_1
   4000                      {
   4001                          return;
   4002                      }
   4003                      pingBuf = (UINT8 *)MALLOC(s2wappMainTaskCtxt->pingParams.dataLen + 1);
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x.... 0x....      BL       MALLOC
   \   00000078   0xEA5F 0x0800      MOVS     R8,R0
   4004                      if(NULL == pingBuf)
   \   0000007C   0xD012             BEQ.N    ??s2wPingStart_3
   4005                      {
   4006                          return;
   4007                      }
   4008                      memset(pingBuf,'G',s2wappMainTaskCtxt->pingParams.dataLen);
   \   0000007E   0x6830             LDR      R0,[R6, #+0]
   \   00000080   0xF247 0x5434      MOVW     R4,#+30004
   \   00000084   0x2147             MOVS     R1,#+71
   \   00000086   0x5822             LDR      R2,[R4, R0]
   \   00000088   0x4640             MOV      R0,R8
   \   0000008A   0x.... 0x....      BL       memset
   4009                      pingBuf[s2wappMainTaskCtxt->pingParams.dataLen]='\0';
   \   0000008E   0x6830             LDR      R0,[R6, #+0]
   \   00000090   0x5820             LDR      R0,[R4, R0]
   \                     ??s2wPingStart_4:
   \   00000092   0x2100             MOVS     R1,#+0
   \   00000094   0xF800 0x1008      STRB     R1,[R0, R8]
   \   00000098   0xE00D             B.N      ??s2wPingStart_6
   4010                  }
   4011                  else
   4012                  {
   4013                      pingBuf = (UINT8 *)MALLOC(56 + 1);
   \                     ??s2wPingStart_5:
   \   0000009A   0x2039             MOVS     R0,#+57
   \   0000009C   0x.... 0x....      BL       MALLOC
   \   000000A0   0xEA5F 0x0800      MOVS     R8,R0
   4014                      if(NULL == pingBuf)
   \                     ??s2wPingStart_3:
   \   000000A4   0xF000 0x809F      BEQ.W    ??s2wPingStart_1
   4015                      {
   4016                          return;
   4017                      }
   4018                      memset(pingBuf,'G',56);
   \   000000A8   0x2238             MOVS     R2,#+56
   \   000000AA   0x2147             MOVS     R1,#+71
   \   000000AC   0x.... 0x....      BL       memset
   4019                      pingBuf[56]='\0';
   \   000000B0   0x2000             MOVS     R0,#+0
   \   000000B2   0xF888 0x0038      STRB     R0,[R8, #+56]
   4020                  }
   4021          
   4022          #ifdef S2W_IPv6_SUPPORT
   4023                  if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4024                  {
   4025                      rtt0 = GsnTod_Get();
   4026               icmpRetVal =  _nxd_icmp_ping(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,&s2wappMainTaskCtxt->pingParams.ip_address, (INT8*)pingBuf,strlen((const char*)pingBuf),&response_ptr, interval);
   4027                  }
   4028                  else
   4029          #endif   
   4030                  {
   4031                      rtt0 = GsnTod_Get();
   \                     ??s2wPingStart_6:
   \   000000B6   0x.... 0x....      BL       GsnTod_Get
   \   000000BA   0x4604             MOV      R4,R0
   4032                icmpRetVal = nx_icmp_ping(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,(s2wappMainTaskCtxt->pingParams.Ipv4Addr),(INT8*)pingBuf,strlen((const char*)pingBuf)/*strlen((const char*)s2wappMainTaskCtxt->pingParams.payload)*/,&response_ptr,interval);
   \   000000BC   0x4640             MOV      R0,R8
   \   000000BE   0x.... 0x....      BL       strlen
   \   000000C2   0x4603             MOV      R3,R0
   \   000000C4   0x6830             LDR      R0,[R6, #+0]
   \   000000C6   0x9701             STR      R7,[SP, #+4]
   \   000000C8   0xA904             ADD      R1,SP,#+16
   \   000000CA   0xF247 0x592C      MOVW     R9,#+29996
   \   000000CE   0x9100             STR      R1,[SP, #+0]
   \   000000D0   0x4642             MOV      R2,R8
   \   000000D2   0xF859 0x1000      LDR      R1,[R9, R0]
   \   000000D6   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   000000DA   0x.... 0x....      BL       _nxe_icmp_ping
   4033                  }
   4034                  s2wPingStats.pingSentCnt++;
   \   000000DE   0x.... 0x....      LDR.W    R7,??DataTable105_16
   4035                  GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   000000E2   0x.... 0x....      LDR.W    R11,??DataTable105_13
   \   000000E6   0x4605             MOV      R5,R0
   \   000000E8   0x68F8             LDR      R0,[R7, #+12]
   \   000000EA   0x1C40             ADDS     R0,R0,#+1
   \   000000EC   0x60F8             STR      R0,[R7, #+12]
   \   000000EE   0xF04F 0x31FF      MOV      R1,#-1
   \   000000F2   0x4658             MOV      R0,R11
   \   000000F4   0x.... 0x....      BL       GsnOsal_SemAcquire
   4036                  FREE(pingBuf);
   \   000000F8   0x4640             MOV      R0,R8
   \   000000FA   0x.... 0x....      BL       FREE
   4037                if(icmpRetVal == S2W_SUCCESS && response_ptr != NULL )
   \   000000FE   0x2D00             CMP      R5,#+0
   \   00000100   0xD151             BNE.N    ??s2wPingStart_7
   \   00000102   0x9804             LDR      R0,[SP, #+16]
   \   00000104   0x2800             CMP      R0,#+0
   \   00000106   0xD04E             BEQ.N    ??s2wPingStart_7
   4038                  {
   4039                      rtt1 = GsnTod_Get();
   \   00000108   0x.... 0x....      BL       GsnTod_Get
   4040          #ifdef S2W_IPv6_SUPPORT    
   4041                      if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4042                      {
   4043                          S2w_Printf("\r\nReply from %s bytes=%d time=%d ms TTL %d",ipv6str,response_ptr->nx_packet_length,(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND),ttl );
   4044                      }
   4045                      else
   4046          #endif     
   4047                      {
   4048                          S2w_Printf("\r\nReply from %d.%d.%d.%d: bytes=%d time=%d ms TTL %d",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff),response_ptr->nx_packet_length,(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND),ttl );
   \   0000010C   0x1B00             SUBS     R0,R0,R4
   \   0000010E   0x.... 0x....      BL       __aeabi_ui2d
   \   00000112   0x2200             MOVS     R2,#+0
   \   00000114   0x.... 0x....      LDR.W    R3,??DataTable105_17  ;; 0x3f9f4000
   \   00000118   0x.... 0x....      BL       __aeabi_dmul
   \   0000011C   0x4604             MOV      R4,R0
   \   0000011E   0x4688             MOV      R8,R1
   \   00000120   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000124   0x4605             MOV      R5,R0
   \   00000126   0x6830             LDR      R0,[R6, #+0]
   \   00000128   0xF859 0x0000      LDR      R0,[R9, R0]
   \   0000012C   0x2140             MOVS     R1,#+64
   \   0000012E   0x9103             STR      R1,[SP, #+12]
   \   00000130   0x9502             STR      R5,[SP, #+8]
   \   00000132   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000136   0x9904             LDR      R1,[SP, #+16]
   \   00000138   0x6989             LDR      R1,[R1, #+24]
   \   0000013A   0x9101             STR      R1,[SP, #+4]
   \   0000013C   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   00000140   0xB2C1             UXTB     R1,R0
   \   00000142   0x9100             STR      R1,[SP, #+0]
   \   00000144   0x0E01             LSRS     R1,R0,#+24
   \   00000146   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nReply from %d.%d.%d...">`
   \   0000014A   0x.... 0x....      BL       S2w_Printf
   4049                      }
   4050                      s2wPingStats.pingRecvCnt++;
   \   0000014E   0x6938             LDR      R0,[R7, #+16]
   \   00000150   0x1C40             ADDS     R0,R0,#+1
   \   00000152   0x6138             STR      R0,[R7, #+16]
   4051                      if(((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND)>s2wPingStats.rttMax)
   \   00000154   0x6838             LDR      R0,[R7, #+0]
   \   00000156   0x.... 0x....      BL       __aeabi_ui2d
   \   0000015A   0x4622             MOV      R2,R4
   \   0000015C   0x4643             MOV      R3,R8
   \   0000015E   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000162   0xBF38             IT       CC 
   \   00000164   0x603D             STRCC    R5,[R7, #+0]
   4052                      {
   4053                          s2wPingStats.rttMax=(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   4054                      }
   4055                      if(!s2wPingStats.rttMin)
   \   00000166   0x6878             LDR      R0,[R7, #+4]
   \   00000168   0xB908             CBNZ.N   R0,??s2wPingStart_8
   4056                      {
   4057                          s2wPingStats.rttMin=s2wPingStats.rttMax;
   \   0000016A   0x6838             LDR      R0,[R7, #+0]
   \   0000016C   0x6078             STR      R0,[R7, #+4]
   4058                      }
   4059                      if(((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND) < s2wPingStats.rttMin)
   \                     ??s2wPingStart_8:
   \   0000016E   0x6878             LDR      R0,[R7, #+4]
   \   00000170   0x.... 0x....      BL       __aeabi_ui2d
   \   00000174   0x4602             MOV      R2,R0
   \   00000176   0x460B             MOV      R3,R1
   \   00000178   0x4620             MOV      R0,R4
   \   0000017A   0x4641             MOV      R1,R8
   \   0000017C   0x.... 0x....      BL       __aeabi_cdcmple
   \   00000180   0xBF38             IT       CC 
   \   00000182   0x607D             STRCC    R5,[R7, #+4]
   4060                      {
   4061                          s2wPingStats.rttMin=(ULONG)((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   4062                      }
   4063                      s2wPingStats.rttAvg +=((rtt1-rtt0)*S2W_GS2000_TIMER_TICK_IN_MILLI_SECOND);
   \   00000184   0x68B8             LDR      R0,[R7, #+8]
   \   00000186   0x.... 0x....      BL       __aeabi_ui2d
   \   0000018A   0x4622             MOV      R2,R4
   \   0000018C   0x4643             MOV      R3,R8
   \   0000018E   0x.... 0x....      BL       __aeabi_dadd
   \   00000192   0x.... 0x....      BL       __aeabi_d2uiz
   \   00000196   0x60B8             STR      R0,[R7, #+8]
   4064          			nx_packet_release(response_ptr);
   \   00000198   0xA804             ADD      R0,SP,#+16
   \   0000019A   0x.... 0x....      BL       _nxe_packet_release
   4065                      GsnTaskSleep(100);
   \   0000019E   0x2064             MOVS     R0,#+100
   \   000001A0   0x.... 0x....      BL       GsnTaskSleep
   \   000001A4   0xE003             B.N      ??s2wPingStart_9
   4066                  }
   4067                  else
   4068                  {
   4069                     S2w_Printf("\r\nRequest timed out" );
   \                     ??s2wPingStart_7:
   \   000001A6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nRequest timed out">`
   \   000001AA   0x.... 0x....      BL       S2w_Printf
   4070                  }     
   4071          
   4072                  if(s2wappMainTaskCtxt->pingParams.trails)
   \                     ??s2wPingStart_9:
   \   000001AE   0x6830             LDR      R0,[R6, #+0]
   \   000001B0   0xF247 0x5140      MOVW     R1,#+30016
   \   000001B4   0x580A             LDR      R2,[R1, R0]
   \   000001B6   0xB142             CBZ.N    R2,??s2wPingStart_10
   4073                  {
   4074                      s2wappMainTaskCtxt->pingParams.trails--;
   \   000001B8   0x1E52             SUBS     R2,R2,#+1
   \   000001BA   0x500A             STR      R2,[R1, R0]
   4075                      if(!s2wappMainTaskCtxt->pingParams.trails)
   \   000001BC   0xD105             BNE.N    ??s2wPingStart_10
   4076                      {
   4077                           s2wPingStarted = FALSE;
   \   000001BE   0x2000             MOVS     R0,#+0
   \   000001C0   0xF88A 0x0000      STRB     R0,[R10, #+0]
   4078          				AppS2w_PingTaskNotify(APP_EVENT_PING_STOP);
   \   000001C4   0x2023             MOVS     R0,#+35
   \   000001C6   0x.... 0x....      BL       AppS2w_PingTaskNotify
   4079                      }
   4080                  }
   4081                    
   4082          		  AppS2w_PingTaskNotify(APP_EVENT_PING_REQUEST);
   \                     ??s2wPingStart_10:
   \   000001CA   0x2022             MOVS     R0,#+34
   \   000001CC   0x.... 0x....      BL       AppS2w_PingTaskNotify
   4083          		  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000001D0   0x6831             LDR      R1,[R6, #+0]
   \   000001D2   0xF646 0x20F8      MOVW     R0,#+27384
   \   000001D6   0x5C40             LDRB     R0,[R0, R1]
   \   000001D8   0x2802             CMP      R0,#+2
   \   000001DA   0xBF08             IT       EQ 
   \   000001DC   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   4084          		  {
   4085          		      s2wSpiFs_Flush();
   4086                    }
   4087                    GsnOsal_SemRelease(&s2wSyncSemID);
   \   000001E0   0x4658             MOV      R0,R11
   \   000001E2   0x.... 0x....      BL       GsnOsal_SemRelease
   4088              }
   4089          
   4090          }
   \                     ??s2wPingStart_1:
   \   000001E6   0xB005             ADD      SP,SP,#+20
   \   000001E8   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   4091                                  

   \                                 In section .text, align 2, keep-with-next
   4092          VOID s2wPingStop()
   4093          {
   \                     s2wPingStop:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   4094            if( s2wPingStarted == FALSE)
   \   00000002   0x....             LDR.N    R0,??DataTable105_15
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD139             BNE.N    ??s2wPingStop_0
   4095            {
   4096                GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   0000000A   0x....             LDR.N    R4,??DataTable105_13
   \   0000000C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       GsnOsal_SemAcquire
   \   00000016   0x....             LDR.N    R1,??DataTable105_2
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0xF247 0x502C      MOVW     R0,#+29996
   \   0000001E   0x5840             LDR      R0,[R0, R1]
   \   00000020   0xB2C1             UXTB     R1,R0
   \   00000022   0x9100             STR      R1,[SP, #+0]
   \   00000024   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000028   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000002C   0x0E01             LSRS     R1,R0,#+24
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPing Statistics for...">`
   4097          
   4098          #ifdef S2W_IPv6_SUPPORT    
   4099                   if(s2wappMainTaskCtxt->pingParams.IpVersion & ADDR_TYPE_IPv6)
   4100                   {
   4101                     INT8 ipv6str[INET6_ADDRSTRLEN];
   4102                     S2w_ntop(s2wappMainTaskCtxt->pingParams.ip_address.nxd_ip_address.v6,ipv6str);
   4103                     S2w_Printf("\r\nPing Statistics for %s \r\n",ipv6str);
   4104                   }
   4105                   else
   4106          #endif     
   4107                  S2w_Printf("\r\nPing Statistics for %d.%d.%d.%d:\r\n",(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0xff000000)>>24,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x00ff0000)>>16,(s2wappMainTaskCtxt->pingParams.Ipv4Addr& 0x0000ff00)>>8,(s2wappMainTaskCtxt->pingParams.Ipv4Addr & 0x000000ff));
   \   00000032   0x.... 0x....      BL       S2w_Printf
   4108                  S2w_Printf("\r\tPackets: Sent = %d, Received = %d, Lost = %d percent\r\n",s2wPingStats.pingSentCnt,s2wPingStats.pingRecvCnt,((s2wPingStats.pingSentCnt-s2wPingStats.pingRecvCnt)*100)/s2wPingStats.pingSentCnt);
   \   00000036   0x....             LDR.N    R5,??DataTable105_16
   \   00000038   0x692A             LDR      R2,[R5, #+16]
   \   0000003A   0x68E9             LDR      R1,[R5, #+12]
   \   0000003C   0x1A88             SUBS     R0,R1,R2
   \   0000003E   0x2364             MOVS     R3,#+100
   \   00000040   0x4358             MULS     R0,R3,R0
   \   00000042   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   00000046   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\tPackets: Sent = %d,...">`
   \   0000004A   0x.... 0x....      BL       S2w_Printf
   4109                  S2w_Printf("\rApproximate round trip times in milliseconds\r\n");
   \   0000004E   0x.... 0x....      ADR.W    R0,`?<Constant "\\rApproximate round tr...">`
   \   00000052   0x.... 0x....      BL       S2w_Printf
   4110                  S2w_Printf("\r\tMinimum = %dms, Maximum = %dms, Average = %dms\r\n",s2wPingStats.rttMin,s2wPingStats.rttMax,s2wPingStats.rttAvg/s2wPingStats.pingRecvCnt);
   \   00000056   0x68A8             LDR      R0,[R5, #+8]
   \   00000058   0x6929             LDR      R1,[R5, #+16]
   \   0000005A   0x682A             LDR      R2,[R5, #+0]
   \   0000005C   0xFBB0 0xF3F1      UDIV     R3,R0,R1
   \   00000060   0x6869             LDR      R1,[R5, #+4]
   \   00000062   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\tMinimum = %dms, Max...">`
   \   00000066   0x.... 0x....      BL       S2w_Printf
   4111                  GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000006A   0x4620             MOV      R0,R4
   \   0000006C   0x.... 0x....      BL       GsnOsal_SemRelease
   4112                  memset(&s2wPingStats,0,sizeof(S2W_PING_STATS_T));
   \   00000070   0x4628             MOV      R0,R5
   \   00000072   0xE8BD 0x4038      POP      {R3-R5,LR}
   \   00000076   0x2214             MOVS     R2,#+20
   \   00000078   0x2100             MOVS     R1,#+0
   \   0000007A   0x.... 0x....      B.W      memset
   4113            }
   4114          
   4115          }
   \                     ??s2wPingStop_0:
   \   0000007E   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   4116          VOID AppS2wHal_PingClose()
   4117          {
   4118                s2wPingStarted = FALSE;
   \                     AppS2wHal_PingClose:
   \   00000000   0x....             LDR.N    R0,??DataTable105_15
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7001             STRB     R1,[R0, #+0]
   4119          	  AppS2w_PingTaskNotify(APP_EVENT_PING_STOP);
   \   00000006   0x2023             MOVS     R0,#+35
   \   00000008   0x.... 0x....      B.W      AppS2w_PingTaskNotify
   4120          }
   4121          
   4122          #endif
   4123          

   \                                 In section .text, align 2, keep-with-next
   4124          BOOL 
   4125          App_IsArpReqstPkt(GSN_NWIF_CTX_T *pNwIf, GSN_ETHERNET_FRAME_T *pEthFrame, 
   4126          								UINT32 protocol)
   4127          {
   \                     App_IsArpReqstPkt:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x460C             MOV      R4,R1
   \   00000004   0xF245 0x11F4      MOVW     R1,#+20980
   \   00000008   0x5808             LDR      R0,[R1, R0]
   \   0000000A   0x0A01             LSRS     R1,R0,#+8
   \   0000000C   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000010   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   00000014   0xF400 0x437F      AND      R3,R0,#0xFF00
   \   00000018   0xEA41 0x2103      ORR      R1,R1,R3, LSL #+8
   \   0000001C   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000020   0x9000             STR      R0,[SP, #+0]
   4128          	UINT32 ipAddr;
   4129          	ipAddr = htonl(GsnNwIf_IpV4AddrGet(pNwIf));
   4130          	/* An ARP Request Pkt with  Destination address being  the node address */
   4131          	return ((GSN_ETH_PROTO_TYPE_ARP == protocol) &&
   4132          		  	(GSN_NW_ARP_REQUEST ==
   4133          					  htons((GsnNwIf_U16FieldGet)(pEthFrame->Data + GSN_NW_ARP_OP_OFFSET))) &&
   4134          			(0 == memcmp(&ipAddr, (pEthFrame->Data + GSN_NW_ARP_TAGET_IP_OFFSET), 4)));
   \   00000022   0xF640 0x0006      MOVW     R0,#+2054
   \   00000026   0x4282             CMP      R2,R0
   \   00000028   0xD112             BNE.N    ??App_IsArpReqstPkt_0
   \   0000002A   0x.... 0x....      BL       ??Subroutine47_0
   \                     ??CrossCallReturnLabel_132:
   \   0000002E   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_134:
   \   00000032   0xB2C0             UXTB     R0,R0
   \   00000034   0xEA45 0x2000      ORR      R0,R5,R0, LSL #+8
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD109             BNE.N    ??App_IsArpReqstPkt_0
   \   0000003C   0x2204             MOVS     R2,#+4
   \   0000003E   0xF104 0x0126      ADD      R1,R4,#+38
   \   00000042   0xA800             ADD      R0,SP,#+0
   \   00000044   0x.... 0x....      BL       memcmp
   \   00000048   0x1E40             SUBS     R0,R0,#+1
   \   0000004A   0x4180             SBCS     R0,R0,R0
   \   0000004C   0x0FC0             LSRS     R0,R0,#+31
   \   0000004E   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??App_IsArpReqstPkt_0:
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   4135          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine47:
   \   00000000   0x0A05             LSRS     R5,R0,#+8
   \                     ??Subroutine47_0:
   \   00000002   0xF104 0x0014      ADD      R0,R4,#+20
   \   00000006   0x.... 0x....      B.W      GsnNwIf_U16FieldGet
   4136          

   \                                 In section .text, align 2, keep-with-next
   4137          BOOL 
   4138          App_IsArpReplyPkt(GSN_NWIF_CTX_T *pNwIf, GSN_ETHERNET_FRAME_T *pEthFrame, 
   4139          								UINT32 protocol)
   4140          {
   \                     App_IsArpReplyPkt:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   4141          	//UINT32 ipAddr;
   4142          	//ipAddr = htonl(GsnNwIf_IpV4AddrGet(pNwIf));
   4143          	/* An ARP Request Pkt with  Destination address being  the node address */
   4144          	return ((GSN_ETH_PROTO_TYPE_ARP == protocol) &&
   4145          		  	(GSN_NW_ARP_RESPONSE ==
   4146          					  htons((GsnNwIf_U16FieldGet)(pEthFrame->Data + GSN_NW_ARP_OP_OFFSET))));
   \   00000002   0xF640 0x0006      MOVW     R0,#+2054
   \   00000006   0x460C             MOV      R4,R1
   \   00000008   0x4282             CMP      R2,R0
   \   0000000A   0xD10A             BNE.N    ??App_IsArpReplyPkt_0
   \   0000000C   0x.... 0x....      BL       ??Subroutine47_0
   \                     ??CrossCallReturnLabel_131:
   \   00000010   0x.... 0x....      BL       ?Subroutine47
   \                     ??CrossCallReturnLabel_133:
   \   00000014   0xB2C0             UXTB     R0,R0
   \   00000016   0xEA45 0x2000      ORR      R0,R5,R0, LSL #+8
   \   0000001A   0x2802             CMP      R0,#+2
   \   0000001C   0xD101             BNE.N    ??App_IsArpReplyPkt_0
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD32             POP      {R1,R4,R5,PC}
   \                     ??App_IsArpReplyPkt_0:
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
   4147          }
   4148          

   \                                 In section .text, align 2, keep-with-next
   4149          PRIVATE INLINE UINT16
   4150          AppS2w_NwIfU16FieldGet(UINT8 *pPkt)
   4151          {
   \                     AppS2w_NwIfU16FieldGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   4152              UINT16 val = 0;
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   4153              memcpy(&val, pPkt, sizeof(UINT16));
   \   00000008   0x2202             MOVS     R2,#+2
   \   0000000A   0x4601             MOV      R1,R0
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       memcpy
   4154              return val;
   \   00000012   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000016   0xBD02             POP      {R1,PC}          ;; return
   4155          }

   \                                 In section .text, align 2, keep-with-next
   4156          UINT32 AppS2w_isForValidCid(UINT16 dst_port , UINT16 src_port)
   4157          {
   \                     AppS2w_isForValidCid:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x460A             MOV      R2,R1
   4158              BOOL filterPass = FALSE;
   \   00000004   0x2100             MOVS     R1,#+0
   4159              UINT32 i;
   4160              for (i = 0; i < MAX_CID_RANGE; i++)
   \   00000006   0x2500             MOVS     R5,#+0
   \   00000008   0xF44F 0x7394      MOV      R3,#+296
   \   0000000C   0x....             LDR.N    R4,??DataTable105_18
   4161              {
   4162                  if (((s2wCidList[i].sd != CID_NOTINUSE) &&((dst_port == s2wCidList[i].localPort ) ||
   4163                      (s2wCidList[i].conMode == S2W_NETDATA_MODE_CLIENT_TRANSIENT)))||
   4164                      ((s2wCidList[i].conMode == S2W_NETDATA_MODE_CLIENT_TRANSIENT) && 
   4165                      (s2wCidList[i].httpflag == 1) &&  ((src_port == S2W_HTTPS_PORT ) || (src_port == S2W_HTTP_PORT ))))
   \                     ??AppS2w_isForValidCid_0:
   \   0000000E   0xFB03 0x4605      MLA      R6,R3,R5,R4
   \   00000012   0x69F7             LDR      R7,[R6, #+28]
   \   00000014   0xF117 0x0F01      CMN      R7,#+1
   \   00000018   0xD005             BEQ.N    ??AppS2w_isForValidCid_1
   \   0000001A   0x8877             LDRH     R7,[R6, #+2]
   \   0000001C   0x42B8             CMP      R0,R7
   \   0000001E   0xBF1C             ITT      NE 
   \   00000020   0x7877             LDRBNE   R7,[R6, #+1]
   \   00000022   0x2F07             CMPNE    R7,#+7
   \   00000024   0xD00C             BEQ.N    ??AppS2w_isForValidCid_2
   \                     ??AppS2w_isForValidCid_1:
   \   00000026   0x7877             LDRB     R7,[R6, #+1]
   \   00000028   0x2F07             CMP      R7,#+7
   \   0000002A   0xBF04             ITT      EQ 
   \   0000002C   0xF896 0x602F      LDRBEQ   R6,[R6, #+47]
   \   00000030   0x2E01             CMPEQ    R6,#+1
   \   00000032   0xD107             BNE.N    ??AppS2w_isForValidCid_3
   \   00000034   0xF240 0x16BB      MOVW     R6,#+443
   \   00000038   0x42B2             CMP      R2,R6
   \   0000003A   0xBF18             IT       NE 
   \   0000003C   0x2A50             CMPNE    R2,#+80
   \   0000003E   0xD101             BNE.N    ??AppS2w_isForValidCid_3
   4166                     {
   4167                         filterPass = TRUE;
   \                     ??AppS2w_isForValidCid_2:
   \   00000040   0x2101             MOVS     R1,#+1
   4168                         break;
   \   00000042   0xE002             B.N      ??AppS2w_isForValidCid_4
   4169                     }
   4170              }
   \                     ??AppS2w_isForValidCid_3:
   \   00000044   0x1C6D             ADDS     R5,R5,#+1
   \   00000046   0x2D10             CMP      R5,#+16
   \   00000048   0xD3E1             BCC.N    ??AppS2w_isForValidCid_0
   4171          #ifdef S2W_COAP_SUPPORT
   4172              for (i = 0; i < MAX_CID_RANGE; i++)
   \                     ??AppS2w_isForValidCid_4:
   \   0000004A   0x2000             MOVS     R0,#+0
   4173              {
   4174                  if ((s2wCidList[i].sd != CID_NOTINUSE) &&
   4175                      (s2wCidList[i].conType == UDP) &&
   4176                      (src_port == S2W_COAP_PORT ) && (s2wCidList[i].coapContext != NULL))
   \                     ??AppS2w_isForValidCid_5:
   \   0000004C   0xFB03 0xF500      MUL      R5,R3,R0
   \   00000050   0x192E             ADDS     R6,R5,R4
   \   00000052   0x69F7             LDR      R7,[R6, #+28]
   \   00000054   0xF117 0x0F01      CMN      R7,#+1
   \   00000058   0xD00B             BEQ.N    ??AppS2w_isForValidCid_6
   \   0000005A   0x5D2D             LDRB     R5,[R5, R4]
   \   0000005C   0x2D01             CMP      R5,#+1
   \   0000005E   0xBF04             ITT      EQ 
   \   00000060   0xF241 0x6533      MOVWEQ   R5,#+5683
   \   00000064   0x42AA             CMPEQ    R2,R5
   \   00000066   0xD104             BNE.N    ??AppS2w_isForValidCid_6
   \   00000068   0xF8D6 0x511C      LDR      R5,[R6, #+284]
   \   0000006C   0xB10D             CBZ.N    R5,??AppS2w_isForValidCid_6
   4177                     {
   4178                         filterPass = TRUE;
   \   0000006E   0x2101             MOVS     R1,#+1
   4179                         break;
   \   00000070   0xE002             B.N      ??AppS2w_isForValidCid_7
   4180                     }
   4181              }
   \                     ??AppS2w_isForValidCid_6:
   \   00000072   0x1C40             ADDS     R0,R0,#+1
   \   00000074   0x2810             CMP      R0,#+16
   \   00000076   0xD3E9             BCC.N    ??AppS2w_isForValidCid_5
   4182          #endif
   4183              return filterPass;
   \                     ??AppS2w_isForValidCid_7:
   \   00000078   0x4608             MOV      R0,R1
   \   0000007A   0xBDF0             POP      {R4-R7,PC}       ;; return
   4184          }

   \                                 In section .text, align 2, keep-with-next
   4185          BOOL
   4186          AppS2wRecv_Filter(GSN_NWIF_CTX_T *pNwIf, UINT32 pktLen,
   4187                              GSN_ETHERNET_FRAME_T *pEthFrame
   4188                              )
   4189          {
   \                     AppS2wRecv_Filter:
   \   00000000   0xE92D 0x4FF8      PUSH     {R3-R11,LR}
   \   00000004   0x4682             MOV      R10,R0
   \   00000006   0x4614             MOV      R4,R2
   4190          	BOOL filterPass = TRUE;
   \   00000008   0x2501             MOVS     R5,#+1
   4191          	UINT16 protocol;
   4192          	UINT8 getOutOfDpSleep = 0;
   \   0000000A   0xF04F 0x0800      MOV      R8,#+0
   4193          	
   4194          	UINT16 dst_port= htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data
   4195          				                                                    + GSN_NW_IP_HEADER_LEN
   4196                                                              + GSN_NW_UDP_DST_PORT_OFFSET));
   \   0000000E   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_138:
   \   00000012   0x4607             MOV      R7,R0
   \   00000014   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_137:
   \   00000018   0x0200             LSLS     R0,R0,#+8
   \   0000001A   0xEA40 0x2717      ORR      R7,R0,R7, LSR #+8
   \   0000001E   0xB2BF             UXTH     R7,R7
   4197          	UINT16 src_port =htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data+ GSN_NW_IP_HEADER_LEN
   4198          																	+ GSN_NW_UDP_SRC_PORT_OFFSET));	 
   \   00000020   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_142:
   \   00000024   0x4606             MOV      R6,R0
   \   00000026   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_141:
   \   0000002A   0x0200             LSLS     R0,R0,#+8
   \   0000002C   0xEA40 0x2616      ORR      R6,R0,R6, LSR #+8
   4199          																	
   4200          	protocol = swap_16(pEthFrame->UpperProtocolType);
   \   00000030   0x89A0             LDRH     R0,[R4, #+12]
   \   00000032   0x0201             LSLS     R1,R0,#+8
   \   00000034   0xEA41 0x2010      ORR      R0,R1,R0, LSR #+8
   \   00000038   0xFA1F 0xF980      UXTH     R9,R0
   4201              if(GSN_ETH_PROTO_TYPE_ARP == protocol)
   \   0000003C   0xF640 0x0006      MOVW     R0,#+2054
   \   00000040   0x4581             CMP      R9,R0
   \   00000042   0xD10F             BNE.N    ??AppS2wRecv_Filter_0
   4202              {
   4203          		filterPass = FALSE;
   \   00000044   0x2500             MOVS     R5,#+0
   4204          		if(TRUE == App_IsArpReqstPkt(pNwIf, pEthFrame, protocol) || 
   4205          			TRUE == App_IsArpReplyPkt(pNwIf, pEthFrame, protocol))
   \   00000046   0x464A             MOV      R2,R9
   \   00000048   0x4621             MOV      R1,R4
   \   0000004A   0x4650             MOV      R0,R10
   \   0000004C   0x.... 0x....      BL       App_IsArpReqstPkt
   \   00000050   0x2801             CMP      R0,#+1
   \   00000052   0xD006             BEQ.N    ??AppS2wRecv_Filter_1
   \   00000054   0x464A             MOV      R2,R9
   \   00000056   0x4621             MOV      R1,R4
   \   00000058   0x4650             MOV      R0,R10
   \   0000005A   0x.... 0x....      BL       App_IsArpReplyPkt
   \   0000005E   0x2801             CMP      R0,#+1
   \   00000060   0xD100             BNE.N    ??AppS2wRecv_Filter_0
   4206          		{
   4207          			filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_1:
   \   00000062   0x2501             MOVS     R5,#+1
   4208          		}
   4209          	}
   4210          
   4211              /* Get protocol type if the l2 is configured to disable any protocol*/
   4212              if(s2wappMainTaskCtxt->l2ConfigBitField)
   \                     ??AppS2wRecv_Filter_0:
   \   00000064   0x.... 0x....      LDR.W    R10,??DataTable105_2
   \   00000068   0xF8DA 0x1000      LDR      R1,[R10, #+0]
   \   0000006C   0xF647 0x70F1      MOVW     R0,#+32753
   \   00000070   0xF240 0x1BBB      MOVW     R11,#+443
   \   00000074   0x5C40             LDRB     R0,[R0, R1]
   \   00000076   0xB388             CBZ.N    R0,??AppS2wRecv_Filter_2
   4213              {
   4214          	    if (GSN_ETH_PROTO_TYPE_IP == protocol)
   \   00000078   0xF5B9 0x6F00      CMP      R9,#+2048
   \   0000007C   0xD13B             BNE.N    ??AppS2wRecv_Filter_3
   4215          	    {
   4216          			/* If it is an ICMP and disable flag enabled by the at command, then return false */
   4217          		    if((GSN_NW_ICMP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) &&
   4218          		       (s2wappMainTaskCtxt->l2ConfigBitField & S2W_ICMP_MASK))
   \   0000007E   0x7DE1             LDRB     R1,[R4, #+23]
   \   00000080   0x2901             CMP      R1,#+1
   \   00000082   0xD103             BNE.N    ??AppS2wRecv_Filter_4
   \   00000084   0x07C2             LSLS     R2,R0,#+31
   \   00000086   0xBF48             IT       MI 
   \   00000088   0x2500             MOVMI    R5,#+0
   4219          		    {
   4220          				filterPass = FALSE;
   \   0000008A   0xD434             BMI.N    ??AppS2wRecv_Filter_3
   4221          			}
   4222          
   4223          		    /* If it is an UDP/TCP and disable flag enabled by the at command, then return false */
   4224          		    else if(((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4225          		    (GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))&&
   4226          			    (s2wappMainTaskCtxt->l2ConfigBitField & S2W_UDP_TCP_MASK))
   \                     ??AppS2wRecv_Filter_4:
   \   0000008C   0x2911             CMP      R1,#+17
   \   0000008E   0xBF18             IT       NE 
   \   00000090   0x2906             CMPNE    R1,#+6
   \   00000092   0xD130             BNE.N    ??AppS2wRecv_Filter_3
   \   00000094   0x0780             LSLS     R0,R0,#+30
   \   00000096   0xD52E             BPL.N    ??AppS2wRecv_Filter_3
   4227          		    {
   4228          				filterPass = FALSE;
   \   00000098   0x2500             MOVS     R5,#+0
   4229                          /* It has to be packet for an existing socket */
   4230          				if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \   0000009A   0x2911             CMP      R1,#+17
   \   0000009C   0xD104             BNE.N    ??AppS2wRecv_Filter_5
   4231          				{
   4232          					if((S2W_DNS_PORT == src_port)|| (S2W_SNTP_PORT == src_port))
   \   0000009E   0xB2B6             UXTH     R6,R6
   \   000000A0   0x2E35             CMP      R6,#+53
   \   000000A2   0xBF18             IT       NE 
   \   000000A4   0x2E7B             CMPNE    R6,#+123
   \   000000A6   0xD010             BEQ.N    ??AppS2wRecv_Filter_6
   4233          					{
   4234          						filterPass = TRUE;
   4235                              	goto AppS2wRecv_Filter_1;
   4236          					}
   4237          				}	
   4238                          // check first the pkt is dhcp/dns/mdns/http
   4239                          if( (S2W_MDNS_PORT == dst_port) || (GSN_NW_BOOTPS_PORT == dst_port)
   4240                              ||  (GSN_NW_BOOTP_PORT == dst_port)|| (S2W_DNS_PORT == dst_port)                   
   4241          #ifdef S2W_WEB_SERVER                   
   4242                               ||  (((S2W_HTTPS_PORT == dst_port) || (S2W_HTTP_PORT == dst_port)) && (GsnHttpd_IsRunning()))
   4243          #endif                    
   4244                              )
   \                     ??AppS2wRecv_Filter_5:
   \   000000A8   0xF241 0x40E9      MOVW     R0,#+5353
   \   000000AC   0x4287             CMP      R7,R0
   \   000000AE   0xBF18             IT       NE 
   \   000000B0   0x2F43             CMPNE    R7,#+67
   \   000000B2   0xD00A             BEQ.N    ??AppS2wRecv_Filter_6
   \   000000B4   0x2F44             CMP      R7,#+68
   \   000000B6   0xBF18             IT       NE 
   \   000000B8   0x2F35             CMPNE    R7,#+53
   \   000000BA   0xD006             BEQ.N    ??AppS2wRecv_Filter_6
   \   000000BC   0x455F             CMP      R7,R11
   \   000000BE   0xBF18             IT       NE 
   \   000000C0   0x2F50             CMPNE    R7,#+80
   \   000000C2   0xD104             BNE.N    ??AppS2wRecv_Filter_7
   \   000000C4   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   000000C8   0xB108             CBZ.N    R0,??AppS2wRecv_Filter_7
   4245                          {
   4246                              filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_6:
   \   000000CA   0x2501             MOVS     R5,#+1
   4247                              goto AppS2wRecv_Filter_1;
   \   000000CC   0xE013             B.N      ??AppS2wRecv_Filter_3
   4248          				}
   4249                          // check the port exists in the cid list, if not drop the pkt
   4250                          if(AppS2w_isForValidCid(dst_port, src_port) == TRUE)
   \                     ??AppS2wRecv_Filter_7:
   \   000000CE   0xB2B1             UXTH     R1,R6
   \   000000D0   0x4638             MOV      R0,R7
   \   000000D2   0x.... 0x....      BL       AppS2w_isForValidCid
   \   000000D6   0x2801             CMP      R0,#+1
   \   000000D8   0xD10D             BNE.N    ??AppS2wRecv_Filter_3
   \   000000DA   0xE00A             B.N      ??AppS2wRecv_Filter_8
   4251                          {
   4252                              filterPass = TRUE;
   4253                              getOutOfDpSleep = 1;
   4254                          }
   4255                          
   4256            		    }
   4257          	    }
   4258          	}
   4259          	else if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4260          	    			(GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \                     ??AppS2wRecv_Filter_2:
   \   000000DC   0x7DE0             LDRB     R0,[R4, #+23]
   \   000000DE   0x2811             CMP      R0,#+17
   \   000000E0   0xBF18             IT       NE 
   \   000000E2   0x2806             CMPNE    R0,#+6
   \   000000E4   0xD107             BNE.N    ??AppS2wRecv_Filter_3
   4261              {
   4262                  if(AppS2w_isForValidCid(dst_port, src_port) == TRUE)
   \   000000E6   0xB2B1             UXTH     R1,R6
   \   000000E8   0x4638             MOV      R0,R7
   \   000000EA   0x.... 0x....      BL       AppS2w_isForValidCid
   \   000000EE   0x2801             CMP      R0,#+1
   \   000000F0   0xD101             BNE.N    ??AppS2wRecv_Filter_3
   4263                  {
   4264                      filterPass = TRUE;
   \                     ??AppS2wRecv_Filter_8:
   \   000000F2   0x2501             MOVS     R5,#+1
   4265                      getOutOfDpSleep = 1;
   \   000000F4   0x46A8             MOV      R8,R5
   4266                  }
   4267              }
   4268          	
   4269          
   4270          AppS2wRecv_Filter_1:
   4271          
   4272          	if(s2wappMainTaskCtxt->dpSleep)
   \                     ??AppS2wRecv_Filter_3:
   \   000000F6   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   000000FA   0xF646 0x27FC      MOVW     R7,#+27388
   \   000000FE   0x5838             LDR      R0,[R7, R0]
   \   00000100   0xB318             CBZ.N    R0,??AppS2wRecv_Filter_9
   4273          	{
   4274          	    /* If it is an UDP/TCP and disable flag enabled by the at command, then return false */
   4275          	    if((GSN_NW_UDP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)) ||
   4276          	    			(GSN_NW_TCP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET)))
   \   00000102   0x7DE0             LDRB     R0,[R4, #+23]
   \   00000104   0x2811             CMP      R0,#+17
   \   00000106   0xBF18             IT       NE 
   \   00000108   0x2806             CMPNE    R0,#+6
   \   0000010A   0xD115             BNE.N    ??AppS2wRecv_Filter_10
   4277          	    {
   4278          			//filterPass = FALSE;
   4279          	        /* It has to be packet for an existing socket */
   4280          	        UINT16 dst_port= htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data
   4281          			                                                    + GSN_NW_IP_HEADER_LEN
   4282          	                                            + GSN_NW_UDP_DST_PORT_OFFSET));
   \   0000010C   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_136:
   \   00000110   0x4606             MOV      R6,R0
   \   00000112   0x.... 0x....      BL       ?Subroutine48
   \                     ??CrossCallReturnLabel_135:
   \   00000116   0x0200             LSLS     R0,R0,#+8
   \   00000118   0xEA40 0x2016      ORR      R0,R0,R6, LSR #+8
   \   0000011C   0xB286             UXTH     R6,R0
   4283          			UINT16 src_port =htons(AppS2w_NwIfU16FieldGet(pEthFrame->Data+ GSN_NW_IP_HEADER_LEN
   4284          																+ GSN_NW_UDP_SRC_PORT_OFFSET));				
   \   0000011E   0x.... 0x....      BL       ?Subroutine49
   \                     ??CrossCallReturnLabel_140:
   \   00000122   0x.... 0x....      BL       ?Subroutine49
   4285          #ifdef S2W_WEB_SERVER
   4286          	        if(((S2W_HTTPS_PORT == dst_port) || (S2W_HTTP_PORT == dst_port)) && (GsnHttpd_IsRunning()))
   \                     ??CrossCallReturnLabel_139:
   \   00000126   0x455E             CMP      R6,R11
   \   00000128   0xBF18             IT       NE 
   \   0000012A   0x2E50             CMPNE    R6,#+80
   \   0000012C   0xD104             BNE.N    ??AppS2wRecv_Filter_10
   \   0000012E   0x.... 0x....      BL       GsnHttpd_IsRunning
   \   00000132   0xB108             CBZ.N    R0,??AppS2wRecv_Filter_10
   4287          	        {
   4288          	            getOutOfDpSleep = 1;
   \   00000134   0xF04F 0x0801      MOV      R8,#+1
   4289          			}
   4290          #endif          			
   4291          	        
   4292          		}
   4293          		if(s2wappMainTaskCtxt->dpSleep && (1 == getOutOfDpSleep))
   \                     ??AppS2wRecv_Filter_10:
   \   00000138   0xF8DA 0x0000      LDR      R0,[R10, #+0]
   \   0000013C   0x5838             LDR      R0,[R7, R0]
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xBF1C             ITT      NE 
   \   00000142   0xF1B8 0x0F00      CMPNE    R8,#+0
   \   00000146   0x.... 0x....      BLNE     AppS2w_ExitDpSleep
   4294          		{
   4295          			AppS2w_ExitDpSleep();
   4296          		}
   4297          	}
   4298              return filterPass;
   \                     ??AppS2wRecv_Filter_9:
   \   0000014A   0x4628             MOV      R0,R5
   \   0000014C   0xE8BD 0x8FF2      POP      {R1,R4-R11,PC}   ;; return
   4299          
   4300          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine49:
   \   00000000   0xF104 0x0022      ADD      R0,R4,#+34
   \   00000004   0x....             B.N      AppS2w_NwIfU16FieldGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine48:
   \   00000000   0xF104 0x0024      ADD      R0,R4,#+36
   \   00000004   0x....             B.N      AppS2w_NwIfU16FieldGet
   4301          
   4302          #if defined(S2W_DTLS_CLIENT_SUPPORT)
   4303          extern const unsigned char dtlsClientCA[895];
   4304          extern const unsigned char dtlsClientClient[641];
   4305          extern const unsigned char dtlsClentKey[608];
   4306          
   4307          VOID  AppS2w_DtslClientCb( VOID * pCtx, UINT8 event )
   4308          {
   4309          	int i;
   4310          	for(i = 0; i< MAX_CID_RANGE; i++)
   4311          	{
   4312          		if(pCtx == (void*)s2wCidList[i].ssl.sslConn)
   4313          		{
   4314          			break;
   4315          		}
   4316          	}
   4317          	if((i < MAX_CID_RANGE) && (GSN_DTLS_HANDSHAKE_DONE == event))
   4318          	{
   4319          		GsnOsal_SemRelease(&s2wCidList[i].s2wUserOpenInProgress);
   4320          	}
   4321          }
   4322          
   4323          UINT8 AppS2w_DtslClientOpen(UINT8 cliCid, char* caCertName,
   4324                                     UINT8 *clientCertName, UINT8 *clientKeyName)
   4325          {
   4326              //INT32 u32NoOfBytesSent;
   4327              UINT32 status;
   4328              UINT8 *certBuf = NULL;
   4329              UINT16 caCertsize = 0;
   4330              INT32  index=0;
   4331              //void *pSslConn;
   4332              GSN_SSL_CONN_PARAMS_T sslConnParams;
   4333          	UINT32 cid = cliCid;
   4334          #if 1
   4335          #ifdef S2W_APP_SSL_PROVISION
   4336              initStartTime = GsnSoftTmr_CurrentSystemTime();
   4337          #endif
   4338          
   4339              /* Avoid warning*/
   4340              (void)certBuf ;
   4341              (void)caCertsize ;
   4342              memset((INT8 *)&sslConnParams, 0, sizeof(sslConnParams));
   4343              if (s2wCidList[cid].sslflag == TRUE)
   4344              {
   4345                  S2w_Printf("\r\nSocket is already SSL Enabled");
   4346                  return S2W_FAILURE;
   4347              }
   4348          
   4349              if(caCertName != NULL)
   4350              {
   4351                  index = S2wCert_SearchRamTable(caCertName);
   4352                  if(index == -1)
   4353                  {
   4354                  	index = S2wCert_FlashFileLoad(caCertName);
   4355                  }
   4356                  if(index == -1)
   4357                  {
   4358                      S2w_Printf("\n\rca Certificate %s Not Found", caCertName);
   4359                      return S2W_FAILURE;
   4360                  }
   4361          
   4362                  // currently use the hardcoded certificate
   4363                  sslConnParams.caCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4364                  sslConnParams.caCert = s2w_ssl_cert_table[index].certAddress + 2;
   4365                  sslConnParams.caCertName = (char const*)caCertName;
   4366              }
   4367          
   4368          
   4369              if(clientCertName != NULL)
   4370              {
   4371                  index = S2wCert_SearchRamTable((char*)clientCertName);
   4372                  if(index == -1)
   4373                  {
   4374                  	index = S2wCert_FlashFileLoad((char*)clientCertName);
   4375                  }
   4376                  if(index == -1)
   4377                  {
   4378                      S2w_Printf("\n\rclient Certificate %s Not Found", clientCertName);
   4379                      return S2W_FAILURE;
   4380                  }
   4381                  sslConnParams.clientCertLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4382                  sslConnParams.clientCert =  s2w_ssl_cert_table[index].certAddress + 2;
   4383                  sslConnParams.clientCertName = (char const*)clientCertName;
   4384          
   4385              }
   4386          
   4387          
   4388              if(clientKeyName != NULL)
   4389              {
   4390                  index = S2wCert_SearchRamTable((char*)clientKeyName);
   4391                  if(index == -1)
   4392                  {
   4393                  	index = S2wCert_FlashFileLoad((char*)clientKeyName);
   4394                  }
   4395                  if(index == -1)
   4396                  {
   4397                      S2w_Printf("\n\rclient key Certificate %s Not Found", clientKeyName);
   4398                      return S2W_FAILURE;
   4399                  }
   4400                  sslConnParams.clientKeyLen = *(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4401                  sslConnParams.clientKey =  s2w_ssl_cert_table[index].certAddress + 2;
   4402                  sslConnParams.clientKeyName = (char const*)clientKeyName;
   4403          
   4404              }
   4405          
   4406          #if 0
   4407              //if(caCertName != NULL)
   4408              {
   4409          
   4410                  sslConnParams.caCertLen = sizeof(dtlsClientCA);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4411                  sslConnParams.caCert =  (UINT8*)dtlsClientCA;//s2w_ssl_cert_table[index].certAddress + 2;
   4412                  sslConnParams.caCertName = NULL;
   4413              }
   4414          
   4415          
   4416              //if(clientCertName != NULL)
   4417              {
   4418                  sslConnParams.clientCertLen = sizeof(dtlsClientClient);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4419                  sslConnParams.clientCert =  (UINT8*)dtlsClientClient;//s2w_ssl_cert_table[index].certAddress + 2;
   4420                  sslConnParams.clientCertName = NULL;
   4421          
   4422              }
   4423          
   4424          
   4425              //(clientKeyName != NULL)
   4426              {
   4427          
   4428                  sslConnParams.clientKeyLen = sizeof(dtlsClentKey);//*(UINT16 *)s2w_ssl_cert_table[index].certAddress;
   4429                  sslConnParams.clientKey =  (UINT8*)dtlsClentKey;//s2w_ssl_cert_table[index].certAddress + 2;
   4430                  sslConnParams.clientKeyName = NULL;
   4431          
   4432              }
   4433          #endif
   4434              nx_bsd_callback_register(s2wCidList[cid].sd, NULL, 0);    //deregister callback
   4435          
   4436              s2wCidList[cid].ssl.sslConn = (GSN_SSL_CONN_T*)gsn_malloc(sizeof(GSN_DTLS_CONN_T));
   4437          
   4438              if(NULL == s2wCidList[cid].ssl.sslConn)
   4439              {
   4440                  return S2W_FAILURE;
   4441              }
   4442          	memset((INT8 *)s2wCidList[cid].ssl.sslConn, 0, sizeof(GSN_DTLS_CONN_T));
   4443              s2wCidList[cid].ssl.sslConn->sslState = GSN_SSL_STATE_INIT;
   4444          	s2wCidList[cid].ssl.sslConn->connMode = GSN_SSL_CONN_MODE_CLIENT;
   4445          	s2wCidList[cid].sslflag = TRUE;
   4446          	((GSN_DTLS_CONN_T *)(s2wCidList[cid].ssl.sslConn))->cb = AppS2w_DtslClientCb;
   4447          	GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   4448          #endif
   4449          #if 1 /*SSl open is now done in Wdd task context*/
   4450          //S2w_Printf("Calling DTLS OPEN\r\n");
   4451          {
   4452              //UINT8 *pOutData, outDataLen = 0;
   4453              struct sockaddr_in *srvaddr = gsn_malloc(sizeof(struct sockaddr_in));
   4454              SOCKET_INFO_T sockInfo;
   4455              srvaddr->sin_family = AF_INET;
   4456              srvaddr->sin_port = htons(s2wCidList[cid].remotePort);
   4457              memcpy(&srvaddr->sin_addr.s_addr,s2wCidList[cid].remoteIp, 4);//inet_addr((char *)"192.168.1.146");
   4458          
   4459              sockInfo.sd = s2wCidList[cid].sd;
   4460              sockInfo.dstAddrLen = sizeof(struct sockaddr_in);
   4461              sockInfo.dstAddr = (char*)srvaddr;
   4462          
   4463              status = GsnDtls_Open((GSN_DTLS_CONN_T *)s2wCidList[cid].ssl.sslConn, &sockInfo,
   4464                  &sslConnParams );
   4465              //S2w_Printf("Status = %d\r\n", status);
   4466          }
   4467          #else
   4468          	{
   4469          		UINT32 msg;
   4470          		/*create open sem*/
   4471          		GsnOsal_SemCreate(&s2wCidList[cid].s2wUserOpenInProgress, 0);
   4472          		s2wCidList[cid].pConnOpenParams = &sslConnParams;
   4473          		/*post message */
   4474          		msg = (S2W_MOD_NOTIF_CONN_START + cid);
   4475          		GsnMsgHandler_Post(s2wappMainTaskCtxt->pMsgHdlrExecInWddTsk, &msg);
   4476          		GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress,GSN_OSAL_WAIT_FOREVER);
   4477          		status = s2wCidList[cid].openStatus;
   4478          		/*Delete the semaphore*/
   4479          		GsnOsal_SemDelete(&s2wCidList[cid].s2wUserOpenInProgress);
   4480          	}
   4481          #endif
   4482              if(status == GSN_SUCCESS)
   4483              {
   4484                  nx_bsd_callback_register(s2wCidList[cid].sd, AppS2wHal_RxCallBack, S2W_RXCALLBACK_FLAGS);
   4485          		s2wCidList[cid].sslflag = TRUE;
   4486          	    if(GSN_OSAL_RESOURCE_NOT_AVAILABLE == GsnOsal_SemAcquire(&s2wCidList[cid].s2wUserOpenInProgress, 2000))
   4487                      return S2W_FAILURE;
   4488                  else
   4489                      return S2W_SUCCESS;
   4490              }
   4491              else
   4492              {
   4493                  s2wCidList[cid].sslflag = 0;
   4494                  if(s2wCidList[cid].ssl.sslConn != NULL)
   4495                  {
   4496                      gsn_free(s2wCidList[cid].ssl.sslConn);
   4497                  }
   4498          
   4499                     soc_close(s2wCidList[cid].sd);
   4500                     s2wCidList[cid].sd = CID_NOTINUSE;
   4501                     s2wCidList[cid].localPort = 0;
   4502                     s2wCidList[cid].remotePort = 0;
   4503                  return S2W_FAILURE;
   4504              }
   4505          
   4506          }
   4507          #endif
   4508          #ifdef S2W_COAP_SUPPORT

   \                                 In section .text, align 2, keep-with-next
   4509          PUBLIC GSN_COAP_CONTEXT_T*
   4510          AppS2wHal_CoapHandleGet(UINT8 cid)
   4511          {
   4512          	return s2wCidList[cid].coapContext;
   \                     AppS2wHal_CoapHandleGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable105_18
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0xF8D0 0x011C      LDR      R0,[R0, #+284]
   \   0000000E   0x4770             BX       LR               ;; return
   4513          }
   4514          

   \                                 In section .text, align 2, keep-with-next
   4515          PUBLIC GSN_COAP_CONN_PARAMS_T*
   4516          AppS2wHal_CoapParamsGet(UINT8 cid)
   4517          {
   4518          	return s2wCidList[cid].coapConnParams;
   \                     AppS2wHal_CoapParamsGet:
   \   00000000   0xF44F 0x7194      MOV      R1,#+296
   \   00000004   0x....             LDR.N    R2,??DataTable105_18
   \   00000006   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   0000000A   0xF8D0 0x0120      LDR      R0,[R0, #+288]
   \   0000000E   0x4770             BX       LR               ;; return
   4519          }

   \                                 In section .rodata, align 2, keep-with-next
   \                     `?<Constant ".">`:
   \   00000000   0x2E 0x00          DC8 "."

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 1">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 1"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x31    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 2">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 2"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x32    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 3">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 3"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x33    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 4">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 4"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x34    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 5">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 5"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x35    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n error 6">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 error 6"
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x20 0x36    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58_1:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable58_2:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "s2wNetRecvtask">`:
   \   00000000   0x73 0x32          DC8 "s2wNetRecvtask"
   \              0x77 0x4E    
   \              0x65 0x74    
   \              0x52 0x65    
   \              0x63 0x76    
   \              0x74 0x61    
   \              0x73 0x6B    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Receive Data s2wRx...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Receive Data s2wRxBuf : %x %x %x %x"
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x20 0x44    
   \              0x61 0x74    
   \              0x61 0x20    
   \              0x73 0x32    
   \              0x77 0x52    
   \              0x78 0x42    
   \              0x75 0x66    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable63:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable65:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable66:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable66_1:
   \   00000000   0x........         DC32     s2wSocketCloseSem

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP DISCONNECT 1">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP DISCONNECT 1"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x31 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP RECIEVE">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP RECIEVE"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x52    
   \              0x45 0x43    
   \              0x49 0x45    
   \              0x56 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SOCKET ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SOCKET ERROR"
   \              0x20 0x53    
   \              0x4F 0x43    
   \              0x4B 0x45    
   \              0x54 0x20    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP DISCONNECT 2">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP DISCONNECT 2"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x44    
   \              0x49 0x53    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x32 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable69:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable71:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n warning: certifica...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 warning: certificate mismatch"
   \              0x20 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n warning: certifica...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 warning: certificate mismatch:"
   \              0x20 0x77    
   \              0x61 0x72    
   \              0x6E 0x69    
   \              0x6E 0x67    
   \              0x3A 0x20    
   \              0x63 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x6D 0x69    
   \              0x73 0x6D    
   \              0x61 0x74    
   \              0x63 0x68    
   \              0x3A 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n %s">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 %s"
   \              0x20 0x25    
   \              0x73 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable72:
   \   00000000   0x........         DC32     s2wUdpSocketCloseSem

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rca Certificate %s N...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015ca Certificate %s Not Found"
   \              0x63 0x61    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rclient Certificate ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015client Certificate %s Not Found"
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rclient key Certific...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015client key Certificate %s Not Found"
   \              0x63 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x6B    
   \              0x65 0x79    
   \              0x20 0x43    
   \              0x65 0x72    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x63 0x61    
   \              0x74 0x65    
   \              0x20 0x25    
   \              0x73 0x20    
   \              0x4E 0x6F    
   \              0x74 0x20    
   \              0x46 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable73:
   \   00000000   0x2E 0x00          DC8      ".",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74:
   \   00000000   0xB0000600         DC32     0xb0000600

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable74_1:
   \   00000000   0x........         DC32     s2wRxBuf

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSocket is already S...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Socket is already SSL Enabled"
   \              0x53 0x6F    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x61 0x6C    
   \              0x72 0x65    
   \              0x61 0x64    
   \              0x79 0x20    
   \              0x53 0x53    
   \              0x4C 0x20    
   \              0x45 0x6E    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_CA">`:
   \   00000000   0x53 0x53          DC8 "SSL_CA"
   \              0x4C 0x5F    
   \              0x43 0x41    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\rCertificate %s Not ...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Certificate %s Not Found"
   \              0x43 0x65    
   \              0x72 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x25 0x73    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x20 0x46    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_SERVER">`:
   \   00000000   0x53 0x53          DC8 "SSL_SERVER"
   \              0x4C 0x5F    
   \              0x53 0x45    
   \              0x52 0x56    
   \              0x45 0x52    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "SSL_KEY">`:
   \   00000000   0x53 0x53          DC8 "SSL_KEY"
   \              0x4C 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable75:
   \   00000000   0x........         DC32     MQTT_RECEIVE_QUEUE

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable77:
   \   00000000   0x........         DC32     s2wUdpSocketCloseSem+0x1C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78:
   \   00000000   0x........         DC32     s2wAutoConnState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_1:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable78_2:
   \   00000000   0x........         DC32     s2wIsAutoconnected

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable85:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable86_1:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable96:
   \   00000000   0x000186A0         DC32     0x186a0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98:
   \   00000000   0x........         DC32     AppS2wHal_RxCallBack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_1:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_2:
   \   00000000   0x........         DC32     s2wSslConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable98_3:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable99_1:
   \   00000000   0x........         DC32     s2w_ssl_cert_table

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_1:
   \   00000000   0x........         DC32     AppS2wHal_HttpCloseTimeout

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_3:
   \   00000000   0x........         DC32     AppS2w_HttpRxBufferMgmtCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_4:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_5:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_6:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_7:
   \   00000000   0x........         DC32     mdnsFlag

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_8:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_9:
   \   00000000   0x........         DC32     mdnsMsgQueueBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_10:
   \   00000000   0x........         DC32     s2w_mdnsCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_11:
   \   00000000   0x........         DC32     appCtx+0x6C30

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_12:
   \   00000000   0x........         DC32     AppS2wHal_MdnsRegCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_13:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_14:
   \   00000000   0x........         DC32     AppS2wHal_MdnsSdCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_15:
   \   00000000   0x........         DC32     s2wPingStarted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_16:
   \   00000000   0x........         DC32     s2wPingStats

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_17:
   \   00000000   0x3F9F4000         DC32     0x3f9f4000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable105_18:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c%x%04d">`:
   \   00000000   0x25 0x63          DC8 "%c%c%x%04d"
   \              0x25 0x63    
   \              0x25 0x78    
   \              0x25 0x30    
   \              0x34 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Discovery Fai...">`:
   \   00000000   0x53 0x65          DC8 "Service Discovery Failed\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x44 0x69    
   \              0x73 0x63    
   \              0x6F 0x76    
   \              0x65 0x72    
   \              0x79 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nA Service Discovered...">`:
   \   00000000   0x0A 0x41          DC8 "\012A Service Discovered: %d\015\012"
   \              0x20 0x53    
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x76 0x65    
   \              0x72 0x65    
   \              0x64 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Instance name...">`:
   \   00000000   0x53 0x65          DC8 "Service Instance name     = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x49 0x6E    
   \              0x73 0x74    
   \              0x61 0x6E    
   \              0x63 0x65    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service Sub type     ...">`:
   \   00000000   0x53 0x65          DC8 "Service Sub type          = %s\015\015"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x53 0x75    
   \              0x62 0x20    
   \              0x74 0x79    
   \              0x70 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0D    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service app protocol ...">`:
   \   00000000   0x53 0x65          DC8 "Service app protocol      = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x61 0x70    
   \              0x70 0x20    
   \              0x70 0x72    
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service protocol     ...">`:
   \   00000000   0x53 0x65          DC8 "Service protocol          = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x70 0x72    
   \              0x6F 0x74    
   \              0x6F 0x63    
   \              0x6F 0x6C    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service domain       ...">`:
   \   00000000   0x53 0x65          DC8 "Service domain            = %s\015\012"
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \              0x64 0x6F    
   \              0x6D 0x61    
   \              0x69 0x6E    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Service IP address   ...">`:
   \   00000000   0x53 0x65          DC8 53H, 65H, 72H, 76H, 69H, 63H, 65H, 20H
   \              0x72 0x76    
   \              0x69 0x63    
   \              0x65 0x20    
   \   00000008   0x49 0x50          DC8 49H, 50H, 20H, 61H, 64H, 64H, 72H, 65H
   \              0x20 0x61    
   \              0x64 0x64    
   \              0x72 0x65    
   \   00000010   0x73 0x73          DC8 73H, 73H, 20H, 20H, 20H, 20H, 20H, 20H
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \   00000018   0x20 0x20          DC8 20H, 20H, 3DH, 20H, 25H, 64H, 2EH, 25H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \   00000020   0x64 0x2E          DC8 64H, 2EH, 25H, 64H, 2EH, 25H, 64H, 20H
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x20    
   \   00000028   0x20 0x50          DC8 20H, 50H, 6FH, 72H, 74H, 20H, 3DH, 20H
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x3D 0x20    
   \   00000030   0x25 0x64          DC8 25H, 64H, 0DH, 0AH, 0
   \              0x0D 0x0A    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\nService Text Info   ...">`:
   \   00000000   0x0A 0x53          DC8 "\012Service Text Info          = %s\015\012"
   \              0x65 0x72    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x54    
   \              0x65 0x78    
   \              0x74 0x20    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3D 0x20    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nReply from %d.%d.%d...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 52H, 65H, 70H, 6CH, 79H, 20H
   \              0x52 0x65    
   \              0x70 0x6C    
   \              0x79 0x20    
   \   00000008   0x66 0x72          DC8 66H, 72H, 6FH, 6DH, 20H, 25H, 64H, 2EH
   \              0x6F 0x6D    
   \              0x20 0x25    
   \              0x64 0x2E    
   \   00000010   0x25 0x64          DC8 25H, 64H, 2EH, 25H, 64H, 2EH, 25H, 64H
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \   00000018   0x3A 0x20          DC8 3AH, 20H, 62H, 79H, 74H, 65H, 73H, 3DH
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x3D    
   \   00000020   0x25 0x64          DC8 25H, 64H, 20H, 74H, 69H, 6DH, 65H, 3DH
   \              0x20 0x74    
   \              0x69 0x6D    
   \              0x65 0x3D    
   \   00000028   0x25 0x64          DC8 25H, 64H, 20H, 6DH, 73H, 20H, 54H, 54H
   \              0x20 0x6D    
   \              0x73 0x20    
   \              0x54 0x54    
   \   00000030   0x4C 0x20          DC8 4CH, 20H, 25H, 64H, 0
   \              0x25 0x64    
   \              0x00         
   \   00000035   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nRequest timed out">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Request timed out"
   \              0x52 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x64 0x20    
   \              0x6F 0x75    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPing Statistics for...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Ping Statistics for %d.%d.%d.%d:\015\012"
   \              0x50 0x69    
   \              0x6E 0x67    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x69    
   \              0x73 0x74    
   \              0x69 0x63    
   \              0x73 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\tPackets: Sent = %d,...">`:
   \   00000000   0x0D 0x09          DC8 0DH, 9, 50H, 61H, 63H, 6BH, 65H, 74H
   \              0x50 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \   00000008   0x73 0x3A          DC8 73H, 3AH, 20H, 53H, 65H, 6EH, 74H, 20H
   \              0x20 0x53    
   \              0x65 0x6E    
   \              0x74 0x20    
   \   00000010   0x3D 0x20          DC8 3DH, 20H, 25H, 64H, 2CH, 20H, 52H, 65H
   \              0x25 0x64    
   \              0x2C 0x20    
   \              0x52 0x65    
   \   00000018   0x63 0x65          DC8 63H, 65H, 69H, 76H, 65H, 64H, 20H, 3DH
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \   00000020   0x20 0x25          DC8 20H, 25H, 64H, 2CH, 20H, 4CH, 6FH, 73H
   \              0x64 0x2C    
   \              0x20 0x4C    
   \              0x6F 0x73    
   \   00000028   0x74 0x20          DC8 74H, 20H, 3DH, 20H, 25H, 64H, 20H, 70H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x20 0x70    
   \   00000030   0x65 0x72          DC8 65H, 72H, 63H, 65H, 6EH, 74H, 0DH, 0AH
   \              0x63 0x65    
   \              0x6E 0x74    
   \              0x0D 0x0A    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\rApproximate round tr...">`:
   \   00000000   0x0D 0x41          DC8 "\015Approximate round trip times in milliseconds\015\012"
   \              0x70 0x70    
   \              0x72 0x6F    
   \              0x78 0x69    
   \              0x6D 0x61    
   \              0x74 0x65    
   \              0x20 0x72    
   \              0x6F 0x75    
   \              0x6E 0x64    
   \              0x20 0x74    
   \              0x72 0x69    
   \              0x70 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x73 0x20    
   \              0x69 0x6E    
   \              0x20 0x6D    
   \              0x69 0x6C    
   \              0x6C 0x69    
   \              0x73 0x65    
   \              0x63 0x6F    
   \              0x6E 0x64    
   \              0x73 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\tMinimum = %dms, Max...">`:
   \   00000000   0x0D 0x09          DC8 0DH, 9, 4DH, 69H, 6EH, 69H, 6DH, 75H
   \              0x4D 0x69    
   \              0x6E 0x69    
   \              0x6D 0x75    
   \   00000008   0x6D 0x20          DC8 6DH, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000010   0x2C 0x20          DC8 2CH, 20H, 4DH, 61H, 78H, 69H, 6DH, 75H
   \              0x4D 0x61    
   \              0x78 0x69    
   \              0x6D 0x75    
   \   00000018   0x6D 0x20          DC8 6DH, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000020   0x2C 0x20          DC8 2CH, 20H, 41H, 76H, 65H, 72H, 61H, 67H
   \              0x41 0x76    
   \              0x65 0x72    
   \              0x61 0x67    
   \   00000028   0x65 0x20          DC8 65H, 20H, 3DH, 20H, 25H, 64H, 6DH, 73H
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x6D 0x73    
   \   00000030   0x0D 0x0A          DC8 0DH, 0AH, 0
   \              0x00         
   \   00000033   0x00               DC8 0
   4520          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   AppS2wHal_CidFind
      24   AppS2wHal_CidGet
        24   -> memset
      64   AppS2wHal_CidInfoGet
        64   -> AppS2wHal_CidFind
        64   -> getsockname
        64   -> memcpy
       0   AppS2wHal_CidListElementGet
       0   AppS2wHal_CoapHandleGet
       0   AppS2wHal_CoapParamsGet
      32   AppS2wHal_HttpCheckDns
        32   -> S2w_Printf
        32   -> __iar_Strstr
        32   -> strlen
        32   -> strncmp
      16   AppS2wHal_HttpClose
        16   -> AppS2wHal_HttpLocalClose
        16   -> AppS2wHal_TimerStart
        16   -> GsnHttp_Alert
        16   -> GsnOsal_SemAcquire
       0   AppS2wHal_HttpCloseTimeout
         0   -> GsnOsal_SemRelease
       0   AppS2wHal_HttpHandleGet
      24   AppS2wHal_HttpLocalClose
        24   -> GsnDynMemMgmt_Free
        24   -> GsnHttp_Close
        24   -> GsnOsal_SemDelete
     112   AppS2wHal_HttpOpen
       112   -> AppS2wHal_CidGet
       112   -> AppS2wHal_NetClose
       112   -> AppS2wHal_TimerInit
       112   -> GsnDynMemMgmt_Alloc
       112   -> GsnDynMemMgmt_Free
       112   -> GsnHttp_Start
       112   -> GsnOsal_SemCreate
       112   -> getsockname
       112   -> memcpy
       112   -> memset
       112   -> nx_bsd_callback_register
       8   AppS2wHal_HttpdClose
         8   -- Indirect call
         0   -> AppS2wHttpd_Stop
         8   -> GsnHttpd_IsRunning
         0   -> GsnOsal_SemAcquire
      24   AppS2wHal_MdnsAnnounce
        24   -> GsnMdns_Announce
       8   AppS2wHal_MdnsDeInit
         8   -> GsnMdns_DeInit
      16   AppS2wHal_MdnsHostNameDereg
        16   -> GsnMdns_HostnameDeregister
      56   AppS2wHal_MdnsHostNameReg
        56   -> GsnMdns_HostnameRegister
        56   -> memcpy
      72   AppS2wHal_MdnsInit
        72   -> AppS2wParse_Int
        72   -> AppS2wParse_NextParamGet
        72   -> GsnMdns_Init
        72   -> memcpy
        72   -> memset
       0   AppS2wHal_MdnsRegCb
         0   -> AppS2wProcess_AsyncStatusNotify
         0   -> AppS2wProcess_StatusNotify
      32   AppS2wHal_MdnsSdCb
        32   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        32   -> S2w_Printf
        32   -> s2wSpiFs_Flush
      24   AppS2wHal_MdnsServiceDereg
        24   -> GsnMdns_ServiceDeRegister
      48   AppS2wHal_MdnsServiceReg
        48   -> GsnMdns_ServiceRegister
      32   AppS2wHal_MdnsSrvcDiscover
        32   -> GsnMdns_ServiceDiscover
      40   AppS2wHal_NetClose
        40   -> AppS2wHal_HttpLocalClose
        40   -> AppS2w_SslLocalClose
        40   -> GsnOsal_SemAcquire
        40   -> GsnOsal_SemRelease
        40   -> nx_bsd_callback_register
        40   -> setsockopt
        40   -> soc_close
      48   AppS2wHal_NetCloseAll
        48   -> AppS2wHal_HttpLocalClose
        48   -> AppS2wHal_NetClose
        48   -> AppS2w_SslLocalClose
        48   -> nx_bsd_callback_register
        48   -> setsockopt
        48   -> soc_close
      32   AppS2wHal_NetInit
        32   -> GsnOsal_SemCreate
        32   -> GsnOsal_ThreadCreate
        32   -> _tx_queue_create
       0   AppS2wHal_NetIsCidOpen
     128   AppS2wHal_NetRecvTask
       128   -- Indirect call
       128   -> AppS2wHal_CidFind
       128   -> AppS2wHal_HttpLocalClose
       128   -> AppS2wHal_NetClose
       128   -> AppS2wHal_TimerStop
       128   -> AppS2wProcess_AsyncStatusNotify
       128   -> AppS2wProcess_NetAccept
       128   -> AppS2wProcess_NetRx
       128   -> AppS2wProcess_StatusNotify
       128   -> GsnHttp_Alert
       128   -> GsnHttps_DataReceive
       128   -> GsnOsal_IntrDisable
       128   -> GsnOsal_IntrEnable
       128   -> GsnOsal_QueuePut
       128   -> GsnOsal_SemAcquire
       128   -> GsnOsal_SemRelease
       128   -> GsnSq_TaskMonitorStart
       128   -> GsnSq_TaskMonitorStop
       128   -> GsnSsl_Alert
       128   -> GsnSsl_DataReceive
       128   -> GsnSsl_Free
       128   -> GsnWdd_AssocStatusGet
       128   -> S2w_Printf
       128   -> S2w_UamRx
       128   -> _tx_queue_receive
       128   -> fcntl
       128   -> memcpy
       128   -> recv
       128   -> recvfrom
       128   -> soc_close
      72   AppS2wHal_NetTcpClient
        72   -> AppS2wHal_CidGet
        72   -> AppS2wHal_NetClose
        72   -> S2w_Printf
        72   -> connect
        72   -> memcpy
        72   -> nx_bsd_callback_register
        72   -> setsockopt
        72   -> soc_close
        72   -> socket
      64   AppS2wHal_NetTcpClient_test
        64   -> AppS2wHal_NetClose
        64   -> S2w_Printf
        64   -> connect
        64   -> memcpy
        64   -> nx_bsd_callback_register
        64   -> setsockopt
        64   -> soc_close
        64   -> socket
      48   AppS2wHal_NetTcpServer
        48   -> AppS2wHal_CidGet
        48   -> AppS2wHal_NetClose
        48   -> bind
        48   -> listen
        48   -> memset
        48   -> nx_bsd_callback_register
        48   -> setsockopt
        48   -> soc_close
        48   -> socket
      64   AppS2wHal_NetTx
        64   -> AppS2w_SslClose
        64   -> GsnSq_TaskMonitorStart
        64   -> GsnSq_TaskMonitorStop
        64   -> GsnSsl_Encode
        64   -> GsnSsl_Free
        64   -> memcpy
        64   -> s2wSpiFs_Flush
        64   -> send
        64   -> sendto
      80   AppS2wHal_NetUdpClient
        80   -> AppS2wHal_CidGet
        80   -> AppS2wHal_NetClose
        80   -> bind
        80   -> getsockname
        80   -> memcpy
        80   -> nx_bsd_callback_register
        80   -> setsockopt
        80   -> soc_close
        80   -> socket
      56   AppS2wHal_NetUdpServer
        56   -> AppS2wHal_CidGet
        56   -> AppS2wHal_NetClose
        56   -> bind
        56   -> memset
        56   -> nx_bsd_callback_register
        56   -> setsockopt
        56   -> soc_close
        56   -> socket
       0   AppS2wHal_PingClose
         0   -> AppS2w_PingTaskNotify
      96   AppS2wHal_RxCallBack
        96   -> AppS2wHal_CidFind
        96   -> AppS2wHal_CidGet
        96   -> AppS2wHal_TimerInit
        96   -> AppS2w_ExitDpSleep
        96   -> AppS2w_GpioWkUpDisable
        96   -> GsnOsal_IntrDisable
        96   -> GsnOsal_IntrEnable
        96   -> GsnOsal_QueuePut
        96   -> GsnOsal_SemAcquire
        96   -> GsnOsal_SemCreate
        96   -> GsnOsal_SemRelease
        96   -> GsnSsl_Accept
        96   -> S2w_AsyncMsgGpioOp
        96   -> S2w_Printf
        96   -> accept
        96   -> memcpy
        96   -> nx_bsd_callback_register
        96   -> setsockopt
        96   -> soc_close
        96   -> tfClose
        96   -> tfResetConnection
      24   AppS2wHal_SockOpSet
        24   -> setsockopt
       0   AppS2wHal_TcpSrvMaxConSet
      40   AppS2wRecv_Filter
        40   -> AppS2w_ExitDpSleep
        40   -> AppS2w_NwIfU16FieldGet
        40   -> AppS2w_isForValidCid
        40   -> App_IsArpReplyPkt
        40   -> App_IsArpReqstPkt
        40   -> GsnHttpd_IsRunning
       0   AppS2w_ConnHttpStateGet
       0   AppS2w_ConnModeGet
       8   AppS2w_ConnStateGet
         8   -> tlsv1_client_established
      40   AppS2w_HttpRxBufferMgmtCb
        40   -> AppS2wHal_CharNPut
        40   -> AppS2wHal_CidFind
        40   -> s2wSpiFs_Flush
        40   -> sprintf
        40   -> strlen
       0   AppS2w_HttpSemAquire
         0   -> GsnOsal_SemAcquire
       0   AppS2w_HttpSemRelease
         0   -> GsnOsal_SemRelease
       0   AppS2w_HttpdSemCreate
         0   -> GsnOsal_SemCreate
       0   AppS2w_HttpdSemDelete
         0   -> GsnOsal_SemDelete
       8   AppS2w_NwIfU16FieldGet
         8   -> memcpy
      80   AppS2w_SslClientOpen
        80   -> AppS2wHal_TimerInit
        80   -> GsnDynMemMgmt_Free
        80   -> GsnOsal_SemCreate
        80   -> GsnSsl_Open
        80   -> MALLOC
        80   -> S2wCert_FlashFileLoad
        80   -> S2wCert_SearchRamTable
        80   -> S2w_Printf
        80   -> memset
        80   -> nx_bsd_callback_register
        80   -> soc_close
      16   AppS2w_SslClose
        16   -> AppS2wHal_TimerStart
        16   -> AppS2w_SslLocalClose
        16   -> GsnOsal_SemAcquire
        16   -> GsnSsl_Alert
      16   AppS2w_SslLocalClose
        16   -> GsnOsal_SemDelete
        16   -> GsnSsl_Close
        16   -> GsnSsl_ServerDeInit
        16   -> nx_bsd_callback_register
        16   -> soc_close
      80   AppS2w_SslServerOpen
        80   -> GsnSsl_ServerInit
        80   -> S2wCert_FlashFileLoad
        80   -> S2wCert_SearchRamTable
        80   -> S2w_Printf
        80   -> memset
      20   AppS2w_isForValidCid
      16   App_IsArpReplyPkt
        16   -> GsnNwIf_U16FieldGet
      16   App_IsArpReqstPkt
        16   -> GsnNwIf_U16FieldGet
        16   -> memcmp
       0   GsnOsal_IntrDisable
         0   -> _tx_thread_interrupt_control
       0   GsnOsal_IntrEnable
         0   -> _tx_thread_interrupt_control
       8   GsnOsal_QueuePut
         8   -> _tx_queue_send
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemCreate
         8   -> _tx_semaphore_create
       8   GsnOsal_SemDelete
         8   -> _tx_semaphore_delete
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
       0   GsnSocketCallback
         0   -> GsnOsal_SemRelease
      48   S2wHttp_Send
        48   -> AppS2wHal_CharNPut
        48   -> AppS2wHal_HttpHandleGet
        48   -> GsnDynMemMgmt_Alloc
        48   -> GsnDynMemMgmt_Free
        48   -> GsnHttp_Send
        48   -> s2wSpiFs_Flush
        48   -> sprintf
        48   -> strlen
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
      56   s2wPingStart
        56   -> AppS2w_PingTaskNotify
        56   -> FREE
        56   -> GsnOsal_SemAcquire
        56   -> GsnOsal_SemRelease
        56   -> GsnTaskSleep
        56   -> GsnTod_Get
        56   -> MALLOC
        56   -> S2w_Printf
        56   -> __aeabi_cdcmple
        56   -> __aeabi_d2uiz
        56   -> __aeabi_dadd
        56   -> __aeabi_dmul
        56   -> __aeabi_ui2d
        56   -> _nxe_icmp_ping
        56   -> _nxe_packet_release
        56   -> memcpy
        56   -> memset
        56   -> s2wSpiFs_Flush
        56   -> strlen
      16   s2wPingStop
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> S2w_Printf
         0   -> memset
       0   s2w_mdnsCb
         0   -> AppMainCtx_TaskNotify


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%c%c%x%04d">
       2  ?<Constant ".">
       8  ?<Constant "SSL_CA">
       8  ?<Constant "SSL_KEY">
      12  ?<Constant "SSL_SERVER">
      28  ?<Constant "Service Discovery Fai...">
      56  ?<Constant "Service IP address   ...">
      36  ?<Constant "Service Instance name...">
      36  ?<Constant "Service Sub type     ...">
      36  ?<Constant "Service app protocol ...">
      36  ?<Constant "Service domain       ...">
      36  ?<Constant "Service protocol     ...">
      28  ?<Constant "\nA Service Discovered...">
      36  ?<Constant "\nService Text Info   ...">
      28  ?<Constant "\n\rCertificate %s Not ...">
      32  ?<Constant "\n\rca Certificate %s N...">
      36  ?<Constant "\n\rclient Certificate ...">
      40  ?<Constant "\n\rclient key Certific...">
      48  ?<Constant "\rApproximate round tr...">
       8  ?<Constant "\r\n %s">
      40  ?<Constant "\r\n Receive Data s2wRx...">
      16  ?<Constant "\r\n SOCKET ERROR">
      20  ?<Constant "\r\n TCP DISCONNECT 1">
      20  ?<Constant "\r\n TCP DISCONNECT 2">
      16  ?<Constant "\r\n TCP RECIEVE">
      12  ?<Constant "\r\n error 1">
      12  ?<Constant "\r\n error 2">
      12  ?<Constant "\r\n error 3">
      12  ?<Constant "\r\n error 4">
      12  ?<Constant "\r\n error 5">
      12  ?<Constant "\r\n error 6">
      36  ?<Constant "\r\n warning: certifica...">
      36  ?<Constant "\r\n warning: certifica...">_1
       4  ?<Constant "\r\n">
      40  ?<Constant "\r\nPing Statistics for...">
      56  ?<Constant "\r\nReply from %d.%d.%d...">
      20  ?<Constant "\r\nRequest timed out">
      32  ?<Constant "\r\nSocket is already S...">
      52  ?<Constant "\r\tMinimum = %dms, Max...">
      60  ?<Constant "\r\tPackets: Sent = %d,...">
      16  ?<Constant "s2wNetRecvtask">
       4  ??DataTable105
       4  ??DataTable105_1
       4  ??DataTable105_10
       4  ??DataTable105_11
       4  ??DataTable105_12
       4  ??DataTable105_13
       4  ??DataTable105_14
       4  ??DataTable105_15
       4  ??DataTable105_16
       4  ??DataTable105_17
       4  ??DataTable105_18
       4  ??DataTable105_2
       4  ??DataTable105_3
       4  ??DataTable105_4
       4  ??DataTable105_5
       4  ??DataTable105_6
       4  ??DataTable105_7
       4  ??DataTable105_8
       4  ??DataTable105_9
       4  ??DataTable58
       4  ??DataTable58_1
       4  ??DataTable58_2
       4  ??DataTable63
       4  ??DataTable65
       4  ??DataTable66
       4  ??DataTable66_1
       4  ??DataTable69
       4  ??DataTable71
       4  ??DataTable72
       4  ??DataTable73
       4  ??DataTable74
       4  ??DataTable74_1
       4  ??DataTable75
       4  ??DataTable77
       4  ??DataTable78
       4  ??DataTable78_1
       4  ??DataTable78_2
       4  ??DataTable85
       4  ??DataTable86
       4  ??DataTable86_1
       4  ??DataTable96
       4  ??DataTable98
       4  ??DataTable98_1
       4  ??DataTable98_2
       4  ??DataTable98_3
       4  ??DataTable99
       4  ??DataTable99_1
       6  ?Subroutine0
       6  ?Subroutine1
       6  ?Subroutine10
       6  ?Subroutine11
      10  ?Subroutine12
      14  ?Subroutine13
      12  ?Subroutine14
      10  ?Subroutine15
      20  ?Subroutine16
      12  ?Subroutine17
      14  ?Subroutine18
      12  ?Subroutine19
       6  ?Subroutine2
      12  ?Subroutine20
      12  ?Subroutine21
       8  ?Subroutine22
       8  ?Subroutine23
       8  ?Subroutine24
       8  ?Subroutine25
      10  ?Subroutine26
      12  ?Subroutine27
      10  ?Subroutine28
      12  ?Subroutine29
      28  ?Subroutine3
      10  ?Subroutine30
       8  ?Subroutine31
      32  ?Subroutine32
       8  ?Subroutine33
       8  ?Subroutine34
      32  ?Subroutine35
      14  ?Subroutine36
       4  ?Subroutine37
      32  ?Subroutine38
      14  ?Subroutine39
      24  ?Subroutine4
      10  ?Subroutine40
       8  ?Subroutine41
      10  ?Subroutine42
       8  ?Subroutine43
      12  ?Subroutine44
      12  ?Subroutine45
      10  ?Subroutine46
      10  ?Subroutine47
       6  ?Subroutine48
       6  ?Subroutine49
      10  ?Subroutine5
      14  ?Subroutine6
      12  ?Subroutine7
      14  ?Subroutine8
      24  ?Subroutine9
      32  AppS2wHal_CidFind
      78  AppS2wHal_CidGet
     144  AppS2wHal_CidInfoGet
      14  AppS2wHal_CidListElementGet
      16  AppS2wHal_CoapHandleGet
      16  AppS2wHal_CoapParamsGet
     210  AppS2wHal_HttpCheckDns
      58  AppS2wHal_HttpClose
      18  AppS2wHal_HttpCloseTimeout
      16  AppS2wHal_HttpHandleGet
      96  AppS2wHal_HttpLocalClose
     428  AppS2wHal_HttpOpen
     112  AppS2wHal_HttpdClose
      48  AppS2wHal_MdnsAnnounce
      20  AppS2wHal_MdnsDeInit
      26  AppS2wHal_MdnsHostNameDereg
      88  AppS2wHal_MdnsHostNameReg
     118  AppS2wHal_MdnsInit
      32  AppS2wHal_MdnsRegCb
     206  AppS2wHal_MdnsSdCb
      36  AppS2wHal_MdnsServiceDereg
      84  AppS2wHal_MdnsServiceReg
      54  AppS2wHal_MdnsSrvcDiscover
     236  AppS2wHal_NetClose
     178  AppS2wHal_NetCloseAll
     124  AppS2wHal_NetInit
      32  AppS2wHal_NetIsCidOpen
    1486  AppS2wHal_NetRecvTask
     280  AppS2wHal_NetTcpClient
     256  AppS2wHal_NetTcpClient_test
     180  AppS2wHal_NetTcpServer
     250  AppS2wHal_NetTx
     220  AppS2wHal_NetUdpClient
     166  AppS2wHal_NetUdpServer
      12  AppS2wHal_PingClose
     570  AppS2wHal_RxCallBack
     102  AppS2wHal_SockOpSet
      18  AppS2wHal_TcpSrvMaxConSet
     336  AppS2wRecv_Filter
      18  AppS2w_ConnHttpStateGet
      16  AppS2w_ConnModeGet
      26  AppS2w_ConnStateGet
      86  AppS2w_HttpRxBufferMgmtCb
      22  AppS2w_HttpSemAquire
      18  AppS2w_HttpSemRelease
      20  AppS2w_HttpdSemCreate
      18  AppS2w_HttpdSemDelete
      24  AppS2w_NwIfU16FieldGet
     342  AppS2w_SslClientOpen
      66  AppS2w_SslClose
      76  AppS2w_SslLocalClose
     238  AppS2w_SslServerOpen
     124  AppS2w_isForValidCid
      38  App_IsArpReplyPkt
      84  App_IsArpReqstPkt
       6  GsnOsal_IntrDisable
       4  GsnOsal_IntrEnable
      20  GsnOsal_QueuePut
      18  GsnOsal_SemAcquire
      22  GsnOsal_SemCreate
      18  GsnOsal_SemDelete
      18  GsnOsal_SemRelease
      56  GsnOsal_ThreadCreate
       8  GsnSocketCallback
     216  S2wHttp_Send
       1  mdnsFlag
      24  mdnsHnParam
     512  mdnsMsgQueueBuf
      12  memcpy
      20  memset
    9344  s2wCidList
          s2wNetRecvTaskStack
          s2wNetQueueBuffer
     492  s2wPingStart
      20  s2wPingStats
     128  s2wPingStop
    1500  s2wRxBuf
      28  s2wSocketCloseSem
      84  s2wUdpSocketCloseSem
          s2wNetQueue
       6  s2w_mdnsCb
     612  sslClentKey
     900  sslClientCA
     644  sslClientClient
    1392  sslServerCA
     612  sslServerKey
    1004  sslServerServer

 
    157 bytes in section .bss
  5 164 bytes in section .data
 11 356 bytes in section .noinit
      6 bytes in section .rodata
 10 550 bytes in section .text
 
 10 356 bytes of CODE  memory (+ 194 bytes shared)
      6 bytes of CONST memory
 16 677 bytes of DATA  memory

Errors: none
Warnings: none
