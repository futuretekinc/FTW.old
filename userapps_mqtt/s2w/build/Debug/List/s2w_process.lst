###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      30/Oct/2015  09:58:00 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_process.c                      #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_process.c -D                   #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -Ohz                  #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_process.lst              #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_process.o                 #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\parser\s2w_process.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_process.c,v $
     28          *
     29          * Description : s2w command processor file
     30          ******************************************************************/
     31          
     32          
     33          /*****************************************************************
     34            * File Inclusions
     35            *****************************************************************/
     36          #include <stdio.h>
     37          #include <stdarg.h>
     38          #include <ctype.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp int isdigit(int)
   \                     isdigit:
   \   00000000   0x3830             SUBS     R0,R0,#+48
   \   00000002   0x280A             CMP      R0,#+10
   \   00000004   0x4180             SBCS     R0,R0,R0
   \   00000006   0x0FC0             LSRS     R0,R0,#+31
   \   00000008   0x4770             BX       LR               ;; return
     39          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     40          #include <stdlib.h>
     41          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
     42          #include "app_defines_builder.h"
     43          #include "hal/s2w.h"
     44          #include "hal/s2w_types.h"
     45          #include "hal/s2w_hal.h"
     46          #include "hal/s2w_net.h"
     47          #include "hal/s2w_timer.h"
     48          #include "parser/s2w_parse.h"
     49          #include "hal/s2w_config.h"

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_AC_WLAN_BSSID[6]
   \                     S2W_DEFAULT_AC_WLAN_BSSID:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_STA_MAC_ADDR[6]
   \                     S2W_DEFAULT_STA_MAC_ADDR:
   \   00000000   0x00 0x1D          DC8 0, 29, 201, 0, 0, 0, 0, 0
   \              0xC9 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_WEP_KEY[5]
   \                     S2W_DEFAULT_WEP_KEY:
   \   00000000   0x12 0x34          DC8 18, 52, 86, 120, 144, 0, 0, 0
   \              0x56 0x78    
   \              0x90 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_AP_WEP_KEY[5]
   \                     S2W_DEFAULT_AP_WEP_KEY:
   \   00000000   0x12 0x34          DC8 18, 52, 86, 120, 144, 0, 0, 0
   \              0x56 0x78    
   \              0x90 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \   static __absolute unsigned char const S2W_DEFAULT_AP_MAC_ADDR[6]
   \                     S2W_DEFAULT_AP_MAC_ADDR:
   \   00000000   0x00 0x1D          DC8 0, 29, 201, 0, 0, 0, 0, 0
   \              0xC9 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
     50          #include "parser/s2w_command.h"
     51          #include "main/app_main_ctx.h"
     52          #include "config/app_resource_config.h"
     53          #include "config/app_ncm_config.h"
     54          #include "app_events.h"
     55          #include "hal/s2w_config.h"
     56          
     57          #include "config/app_stat_config.h"
     58          #include "app_rtc_mem.h"
     59          #include "parser/s2w_process.h"
     60          #include "clk_tune/app_clk_tune.h"
     61          

   \                                 In section .bss, align 1
     62          UINT8 s2wNRAWState = S2W_NRAW_NONE;
   \                     s2wNRAWState:
   \   00000000                      DS8 1
     63          
     64          /**
     65           ******************************************************************************
     66           * @file s2w_process.c
     67           * @brief S2W Application command process routines.
     68           *      This file contains the s2w application specific implimentation for
     69           *      command processing.
     70          ******************************************************************************/
     71          
     72          
     73          /*****************************************************************************
     74            *  Public Variables
     75            *****************************************************************************/
     76          
     77          /** Current state of the serial handler
     78           */
     79          enum S2W_STATE s2wState;
     80          #ifdef S2W_PING_TRACE
     81          extern INT32 s2wPingStarted;
     82          extern INT32 s2wTrcStarted;
     83          #endif
     84          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
     85          S2W_LINK_STATE_T s2wLinkState ;
     86          #ifdef S2W_HTTPC_SUPPORT
     87          extern GSN_HTTPC_CONF_INFO_T httpConfInfo;
     88          #endif
     89          extern GSN_NOTIFICATION_FUNC_T s2wappMainTaskNotifier;
     90          extern UINT8 frameTransmissionType;
     91          #ifdef S2W_UNASSOC_TXRX_SUPPORT
     92          extern S2W_UNSOLICITED_FRAME_T frame;
     93          #endif
     94          //extern GSN_WIF_MM_STARTASYNCHRONOUSTX_FRAME_T pFrame;
     95          static UINT8 hCid=INVALID_CID;
     96          //#define EXTFLASH_DRIVER_TEST
     97          //#define S2W_FILE_SYS
     98          
     99          /** Number of bytes transmitted */
    100          UINT32 s2wTxBytes;
    101          
    102          /** Number of bytes received */
    103          UINT32 s2wRxBytes;
    104          
    105          extern S2W_CID_T s2wCidList[];
    106          
    107          extern UINT8 macArray[];
    108          extern S2W_PROFILE_PARAMS_T profile_params;
    109          
    110          extern S2W_WLANINFO_T current_wlan_info;
    111          extern void nx_dns_retry_count_set(NX_DNS *dns_ptr,UINT retries);
    112          
    113          /**
    114           * Indicates that an auto connected connection is present.  If this is set, no
    115           * other connections can be created, until a disconnect (which will unset
    116           * this).
    117           */
    118          #define S2W_AUTO_CONN_DATA_PIPE 0x01
    119          #define S2W_AUTO_CONN_DATA_L4_BREAK 0x02
    120          #define S2W_AUTO_CONN_DATA_L3_BREAK 0x04
    121          #define S2W_AUTO_CONN_DATA_L2_BREAK 0x08
    122          
    123          UINT8 s2wIsAutoconnected = 0;
    124          UINT8 s2wAutoConnState=0;
    125          
    126          /** Current configuration settings */
    127          extern S2W_PROFILE_T s2wCurrent;
    128          
    129          /** Parameters read from and to be written to flash */
    130          S2W_FLASH_PARAMS_T *s2wFlashParams;
    131          
    132          /** Connection the current data transfer is taking place on */
    133          UINT8 curCid = INVALID_CID;
    134          
    135          UINT16 lengthSpecialCmd = 0;
    136          UINT8 lengthConvertIndex = 0;
    137          
    138          extern UINT32 S2wL3Wait;
    139          
    140          
    141          /*****************************************************************************
    142            *  Private Variables
    143            *****************************************************************************/
    144          
    145          #define S2W_DECLARE_INT_FLAGS(flags) UV_VALUE flags
    146          #if 0
    147          #pragma ghs section bss=".bss_NoZeroInit"
    148          PRIVATE UINT8 S2wSendTaskStack[APP_CFG_NET_TX_STACK_SIZE];
    149          #pragma ghs section bss=default
    150          
    151          /** Queue for the receive task */
    152          PRIVATE GH_QUEUE s2wSendQueue;
    153          PRIVATE GH_QUEUE_AREA_DEFINE(s2wSendQueueBuffer, GH_MSG_0_WORDS,
    154                                       APP_CFG_NET_TX_MAX_MSG_IN_MBOX);
    155          #endif
    156          /**
    157           * Timeout for the +++ escape sequence in auto-connect mode.  Unit is 10ms.
    158           */
    159          #define S2W_AUTO_ESC_TIMEOUT 100
    160          
    161          /** Destination address for the current data transfer (only for UDP servers) */
    162          PRIVATE S2W_IPADDR_T destAddr;
    163          
    164          #ifdef S2W_IPv6_SUPPORT
    165          PRIVATE S2W_IPv6ADDR_T destIpv6Addr;
    166          #endif
    167          /** Destination port for the current data transfer (only for UDP servers) */
    168          PRIVATE UINT16 destPort;
    169          
    170          /** Timer for Nagle algorithm */
    171          PRIVATE S2W_TIMER_T nagleTimer;
    172          S2W_TIMER_T auto_esc_timer;
    173          
    174          /** Timer for auto connect failure */
    175          PRIVATE S2W_TIMER_T acTimer;
    176          
    177          #ifdef S2W_NCM_SUPPORT_ENABLE
    178          S2W_TIMER_T acNcmTimer;
    179          #endif //NCM_SUPPORT_ENABLE
    180          
    181          
    182          /** Buffer for data to be transmitted */
    183          #ifdef IP2WIFI
    184          __no_init PRIVATE UINT8 dataBuffer[S2W_DATABUF_SIZE];
    185          #else

   \                                 In section .noinit, align 4
    186          __no_init PRIVATE UINT8 dataBuffer[S2W_DATABUF_SIZE-200];
   \                     dataBuffer:
   \   00000000                      DS8 1400
    187          #endif
    188          
    189          /** Index into dataBuffer to indicate used amount */
    190          PRIVATE UINT32 dataIndex=0;
    191          
    192          
    193          /** Buffer for raw data len */

   \                                 In section .noinit, align 4
    194          __no_init PRIVATE UINT8 rawLenBuff[20];
   \                     rawLenBuff:
   \   00000000                      DS8 20
    195          PRIVATE UINT32 rawLenIndex=0;
    196          PRIVATE UINT32 rawLen=0;
    197          #ifdef S2W_IP2WIFI_SUPPORT
    198          PRIVATE UINT32 rawTotalIndex=0;
    199          PRIVATE UINT32 rawColon =0;
    200          #endif
    201          
    202          GSN_OSAL_SEM_T dSendSem;
    203          
    204          /** unsolicited frame*/
    205          
    206          //PRIVATE UINT8 unsolFrameLenBuff[2];
    207          //PRIVATE UINT32 unFramIndex=0;
    208          //PRIVATE UINT16 unFramLen=0;
    209          //PRIVATE UINT32 unSolicitesTotalIndex =0;
    210          
    211          #ifdef S2W_RFTEST
    212          PRIVATE UINT32 asyncFramIndex=0;
    213          //PRIVATE UINT16 asyncFramLen=0;
    214          
    215          #endif
    216          UINT8 AppS2wHal_CharGet(UINT8*buf);
    217          
    218          #ifdef S2W_COAP_SUPPORT
    219          	extern UINT8 AppS2wHal_CoapContentDataGet( UINT8 hCid);
    220          #endif
    221          
    222          /**
    223           * @brief Array which contains the status messages.
    224           */
    225          PRIVATE const char *S2W_StatusList[] =
    226          {
    227              "OK",                   /* S2W_SUCCESS */
    228              "ERROR",                /* S2W_FAILURE */
    229              "ERROR: INVALID INPUT",         /* S2W_EINVAL */
    230              "ERROR: SOCKET FAILURE",        /* S2W_SOCKFAILURE */
    231              "ERROR: NO CID",                /* S2W_ENCID */
    232              "ERROR: INVALID CID",           /* S2W_EBADCID */
    233              "ERROR: NOT SUPPORTED",         /* S2W_ENOTSUP */
    234              "\r\nCONNECT %x\r\n",           /* S2W_CON_SUCCESS */
    235              "\r\nDISCONNECT %x\r\n",        /* S2W_ECIDCLOSE */
    236              "DISASSOCIATED",                /* S2W_LINK_LOST_EVT */
    237              "\r\nDisassociation Event\r\n", /* S2W_DISASSO_EVT */
    238              "\n\rOut of StandBy-Timer\r\n", /* S2W_STBY_TMR_EVT */
    239              "\n\rOut of StandBy-Alarm\r\n", /* S2W_STBY_ALM_EVT */
    240              "\r\nOut of Deep Sleep\r\n",    /* S2W_DPSLEEP_EVT */
    241              "\r\nUnExpected Warm Boot(Possibly Low Battery)\r\n",
    242                                             /* S2W_BOOT_UNEXPECTED_EVT */
    243              "ERROR: IP CONFIG FAIL",       /* S2W_ENOIP */
    244          #ifdef S2W_IP2WIFI_SUPPORT
    245              "Ip2WiFi APP",
    246              "Ip2WiFi APP-Ext.PA",
    247          #else
    248              "Serial2WiFi APP",
    249              "Serial2WiFi APP-Ext.PA",
    250          #endif
    251              "NWCONN-SUCCESS",
    252              "IP CONFIG-NEW IP",
    253          	"\n\rAPP Reset-Wlan-Wd\r\n",
    254          	"\n\rAPP Reset-App-Wd\r\n",
    255          	"\n\rAPP Reset-Wlan SW Reset\r\n",
    256          	"APP Reset-APP SW Reset",
    257          	"\n\rAPP Reset-Wlan Except\r\n",
    258          	"APP Reset External Flash FW-UP-SUCCESS",
    259          	"\n\rSerial2WiFi APP Unknown boot\r\n",
    260          	"\r\nExternal Reset Boot\r\n",
    261          	"\n\nHW Crypto Boot\r\n",
    262          	"\n\rJTAG Reset Boot\r\n",
    263          	"\n\rBrownout Reset Boot\r\n",
    264              "\n\rIP Conflict Detected\r\n",
    265              " Registration Failed for RR: ",
    266          	" Registration Success!! for RR: ",
    267          };
    268          
    269          /**
    270           * @brief Array which contains the status messages for async message.
    271           */
    272          
    273          PRIVATE const char *S2W_AsyncStatusList[] =
    274          {
    275              "ERROR: SOCKET FAILURE",        /* S2W_ASYNC_SOCKFAILURE-->0 */
    276              "CONNECT",           /* S2W_ASYNC_CON_SUCCESS -->1 */
    277              "DISCONNECT",        /* S2W_ASYNC_ECIDCLOSE -->2 */
    278              "Disassociation Event", /* S2W_ASYNC_DISASSO_EVT -->3 */
    279              "Out of StandBy-Timer", /* S2W_ASYNC_STBY_TMR_EVT -->4 */
    280              "Out of StandBy-Alarm", /* S2W_ASYNC_STBY_ALM_EVT -->5*/
    281              "Out of Deep Sleep",    /* S2W_ASYNC_DPSLEEP_EVT  -->6*/
    282              "UnExpected Warm Boot(Possibly Low Battery)",
    283                                             /* S2W_BOOT_UNEXPECTED_EVT -->7 */
    284              "ERROR: IP CONFIG FAIL",   /* S2W_ASYNC_DHCP_FAIL_EVT -->8 */
    285          #ifdef S2W_IP2WIFI_SUPPORT
    286              "Ip2WiFi APP",
    287              "Ip2WiFi APP-Ext.PA",
    288          #else
    289              "Serial2WiFi APP",
    290              "Serial2WiFi APP-Ext.PA",
    291          #endif
    292              "ERROR"  ,    // error msg
    293              "NWCONN-SUCCESS",
    294              "IP CONFIG-NEW IP",
    295            	"APP Reset-Wlan-Wd" ,
    296            	"APP Reset-App-Wd" ,
    297            	"APP Reset-Wlan SW Reset" ,
    298             	"APP Reset-APP SW Reset" ,
    299            	"APP Reset-Wlan Except" ,
    300            	"APP Reset External Flash FW-UP-SUCCESS" ,
    301            	"Serial2WiFi APP Unknown boot" ,
    302            	"External Reset Boot" ,
    303            	"HW Crypto Boot" ,
    304            	"JTAG Reset Boot" ,
    305            	"Brownout Reset Boot",
    306                  "IP Conflict Detected",
    307              " Registration Failed for RR: ",
    308              " Registration Success!! for RR: ",
    309          };
    310          
    311          
    312          extern S2W_USR_BUF_T s2wUserBuf;
    313          /**
    314           * @brief Macro to calculate the table size.
    315           */
    316          #define    S_STATUS_TBL    (sizeof(S2W_StatusList) / sizeof(S2W_StatusList[0]))
    317          
    318          
    319          /*****************************************************************************
    320            *  Private functions
    321            *****************************************************************************/
    322          PRIVATE INLINE INT32
    323          AppS2w_VPrintf(const INT8 *format, va_list ap);
    324          #ifdef S2W_DUAL_INTERFACE_SUPPORT
    325          PRIVATE INLINE INT32
    326          AppS2w_VPrintf1(const INT8 *format, va_list ap);
    327          #endif
    328          PRIVATE VOID
    329          AppS2w_AcTimeoutHandler(VOID *data);
    330          PRIVATE VOID
    331          AppS2w_AcNcmTimeoutHandler(VOID *data);
    332          
    333          PRIVATE UINT8
    334          AppS2w_Connect(S2W_NETDATA_T *peer_data,UINT16 UdpSrcPort, UINT8 *cid);
    335          
    336          #ifndef IOT_APP_ENABLE
    337          PRIVATE VOID
    338          AppS2w_CommandCharProcess(UINT8 ch);
    339          #endif  /* IOT_APP_ENABLE */
    340          
    341          
    342          PUBLIC UINT8
    343          AppS2w_DataTransmit(UINT8 *data);
    344          
    345          
    346          PRIVATE VOID
    347          AppS2w_DataCharProcess(UINT8 ch);
    348          
    349          PRIVATE VOID
    350          AppS2w_AutoEscTimeout(VOID *data);
    351          
    352          PUBLIC UINT8
    353          AppS2w_CidValidate(UINT8 ch);
    354          
    355          PRIVATE VOID
    356          AppS2w_FailEscParse(VOID);
    357          
    358          PUBLIC UINT32
    359          AppS2wCertificateData(UINT8 ch1);
    360          PRIVATE VOID
    361          AppS2w_NagleExpiry(VOID *data);
    362          #ifdef S2W_IP2WIFI_SUPPORT
    363          PRIVATE UINT8
    364          S2w_RawDataBufferTransmit(VOID);
    365          #endif
    366          #ifdef S2W_DUAL_INTERFACE_SUPPORT
    367          VOID
    368          s2wSpiFs_Flush1();
    369          #endif
    370          /**
    371           * @brief Process the incoming raw data character.
    372           * @param ch incoming data character
    373           */
    374          PRIVATE VOID
    375          S2w_RawLenCharProcess(UINT8 ch)
    376          {
    377          
    378              rawLenBuff[rawLenIndex] = ch;
    379              rawLenIndex++;
    380          
    381          }
    382          
    383          PRIVATE UINT32
    384          S2w_RawLenCalculate()
    385          {
    386              UINT32 len = 0;
    387          
    388              rawLenBuff[rawLenIndex] = '\0';
    389              /* parse the ascii to get the len as integer */
    390              AppS2wParse_Int(rawLenBuff,&len);
    391              rawLenIndex = 0;
    392              return len;
    393          }
    394          
    395          #ifdef S2W_RFTEST
    396          PRIVATE VOID
    397          S2w_asyncCharProcess(UINT8 ch);
    398          #endif
    399          #ifdef IOT_APP_ENABLE
    400          PRIVATE VOID AppIot_CommandCharProcess(UINT8 ch);
    401          #endif  /* IOT_APP_ENABLE */
    402          
    403          /*****************************************************************************
    404            *  Public functions
    405            *****************************************************************************/
    406          
    407          
    408          /**
    409           ************************************************************************
    410           * @ingroup S2w-Application
    411           * @brief Formatted print function to print the message on the serial port.
    412           * @param format- IN  Format string.
    413           * @param -  IN Variable arguments.
    414           * @retval Total number of bytes printed.
    415           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    416          PUBLIC INT32
    417          S2w_Printf(const char *format, ...)
    418          {
   \                     S2w_Printf:
   \   00000000   0xB40E             PUSH     {R1-R3}
   \   00000002   0xB530             PUSH     {R4,R5,LR}
    419              va_list args;
    420              INT32 len;
    421          
    422              va_start(args, format);
    423              len = AppS2w_VPrintf(format, args);
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable114_1
   \   00000008   0x4602             MOV      R2,R0
   \   0000000A   0xAB03             ADD      R3,SP,#+12
   \   0000000C   0xF44F 0x7180      MOV      R1,#+256
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0x.... 0x....      BL       vsnprintf
   \   00000016   0x0005             MOVS     R5,R0
   \   00000018   0xBF48             IT       MI 
   \   0000001A   0xF04F 0x35FF      MOVMI    R5,#-1
   \   0000001E   0xD406             BMI.N    ??S2w_Printf_0
   \   00000020   0x2DFF             CMP      R5,#+255
   \   00000022   0xBF88             IT       HI 
   \   00000024   0x25FF             MOVHI    R5,#+255
   \   00000026   0x4629             MOV      R1,R5
   \   00000028   0x4620             MOV      R0,R4
   \   0000002A   0x.... 0x....      BL       AppS2wHal_CharNPut
    424              va_end(args);
    425              return len;
   \                     ??S2w_Printf_0:
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0xBC30             POP      {R4,R5}
   \   00000032   0xF85D 0xFB10      LDR      PC,[SP], #+16    ;; return
    426          }
    427          
    428          #ifdef S2W_DUAL_INTERFACE_SUPPORT
    429          PUBLIC INT32
    430          S2w_Printf1(const char *format, ...)
    431          {
    432          
    433              va_list args;
    434              INT32 len;
    435          
    436              va_start(args, format);
    437              len = AppS2w_VPrintf1(format, args);
    438              va_end(args);
    439          
    440              return len;
    441          }
    442          #endif
    443          
    444          
    445          /**
    446           ************************************************************************
    447           * @ingroup S2w-Application.
    448           * @brief Auto connection timeout function.
    449           *
    450           * @retval none.
    451           ************************************************************************/
    452          

   \                                 In section .text, align 2, keep-with-next
    453          PRIVATE VOID
    454          AppS2w_AcTimeoutHandler(void *data)
    455          {
    456              //acTimedOut = 1;
    457          }
   \                     AppS2w_AcTimeoutHandler:
   \   00000000   0x4770             BX       LR               ;; return
    458          
    459          #ifdef S2W_NCM_SUPPORT_ENABLE
    460          

   \                                 In section .text, align 2, keep-with-next
    461          PRIVATE VOID
    462          AppS2w_AcNcmTimeoutHandler(void *data)
    463          {
    464              UINT32 message = APP_EVENT_NCM_L4CONNECT;
    465              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     AppS2w_AcNcmTimeoutHandler:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable114_2
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable114_3
   \   00000008   0x6801             LDR      R1,[R0, #+0]
   \   0000000A   0x6812             LDR      R2,[R2, #+0]
   \   0000000C   0x2018             MOVS     R0,#+24
   \   0000000E   0x4710             BX       R2
    466          }
    467          
    468          
    469          #endif
    470          
    471          
    472          /**
    473           ************************************************************************
    474           * @ingroup S2w-Application
    475           * @brief Loads settings from the specified profile.
    476           *     This function will first disconnect and close all network connections,
    477           *     and then load the settings from the specified profile.
    478           * @param profileNum - IN Profile to load from.  Either 0 or 1.
    479           * @retval none.
    480           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    481          VOID AppS2w_SetWlanDfltParams(UINT8 profileNum)
    482          {
   \                     AppS2w_SetWlanDfltParams:
   \   00000000   0xB57F             PUSH     {R0-R6,LR}
    483              UINT32 bootReason;
    484              UINT8 macAddr[6];
    485          
    486              /* disassociate if connected */
    487              if (s2wLinkState == S2W_LINK_STATE_CONNECTED)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable114_5
   \   00000006   0x7840             LDRB     R0,[R0, #+1]
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xBF04             ITT      EQ 
   \   0000000C   0x2000             MOVEQ    R0,#+0
   \   0000000E   0x.... 0x....      BLEQ     AppS2wHal_Disassociate
    488              {			  
    489                  AppS2wHal_Disassociate(0);
    490              }
    491          
    492              bootReason = GSN_BOOT_REASON_GET();
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable114_6  ;; 0x41010004
    493              
    494              if(s2wCurrent.mode == S2W_WLANDATA_MODE_INFRA)
   \   00000016   0x.... 0x....      LDR.W    R4,??DataTable114_7
   \   0000001A   0x6806             LDR      R6,[R0, #+0]
   \   0000001C   0x7920             LDRB     R0,[R4, #+4]
   \   0000001E   0x2801             CMP      R0,#+1
   \   00000020   0xD103             BNE.N    ??AppS2w_SetWlanDfltParams_0
    495              {
    496                 S2w_macAddrRTCGet(macAddr);
   \   00000022   0xA800             ADD      R0,SP,#+0
   \   00000024   0x.... 0x....      BL       S2w_macAddrRTCGet
   \   00000028   0xE005             B.N      ??AppS2w_SetWlanDfltParams_1
    497          	}
    498          	else
    499          	{
    500          		memcpy(macAddr,s2wCurrent.lmtdApConf.macAddr.array, 6);
   \                     ??AppS2w_SetWlanDfltParams_0:
   \   0000002A   0x2206             MOVS     R2,#+6
   \   0000002C   0xF204 0x210D      ADDW     R1,R4,#+525
   \   00000030   0xA800             ADD      R0,SP,#+0
   \   00000032   0x.... 0x....      BL       memcpy
   \                     ??AppS2w_SetWlanDfltParams_1:
   \   00000036   0x7920             LDRB     R0,[R4, #+4]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xBF1C             ITT      NE 
   \   0000003C   0x2802             CMPNE    R0,#+2
   \   0000003E   0x2806             CMPNE    R0,#+6
   \   00000040   0xD148             BNE.N    ??AppS2w_SetWlanDfltParams_2
    501          	}
    502          	
    503          	if( GSN_WIF_WLAN_NW_TYPE_STA == s2wCurrent.mode ||
    504          		GSN_WIF_WLAN_NW_TYPE_AP == s2wCurrent.mode  ||
    505          		S2W_WLANDATA_MODE_PROV_AP == s2wCurrent.mode )           
    506          	//!( defined S2W_ISOTX_SUPPORT  && defined S2W_15DOT4_SUPPORT ))
    507          	{
    508              	if(bootReason != GSN_WIF_SYS_BOOT_NORMAL_BOOT)
   \   00000042   0x.... 0x....      LDR.W    R5,??DataTable114_2
   \   00000046   0x2E01             CMP      R6,#+1
   \   00000048   0xD036             BEQ.N    ??AppS2w_SetWlanDfltParams_3
    509              	{
    510          		    /* set MAC address from flash params */
    511              		 AppS2wHal_MacAddrSet(macAddr, TRUE);
   \   0000004A   0x2101             MOVS     R1,#+1
   \   0000004C   0xA800             ADD      R0,SP,#+0
   \   0000004E   0x.... 0x....      BL       AppS2wHal_MacAddrSet
    512              
    513          
    514          		    /* set the Tx power
    515          		     */
    516          		     if(s2wCurrent.txPower < 16) // the max value allowed is 0-15
   \   00000052   0x1D26             ADDS     R6,R4,#+4
   \   00000054   0x7870             LDRB     R0,[R6, #+1]
   \   00000056   0x2810             CMP      R0,#+16
   \   00000058   0xDA0B             BGE.N    ??AppS2w_SetWlanDfltParams_4
    517          		     {
    518          				 GSN_WDD_TX_POW_SET_PARAM_T param;
    519          				 int i=0;
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0xA902             ADD      R1,SP,#+8
    520          				 for(i=0;i<5;i++)
    521          				 {
    522          					 param.txPow[i]=s2wCurrent.txPower;
   \                     ??AppS2w_SetWlanDfltParams_5:
   \   0000005E   0x7872             LDRB     R2,[R6, #+1]
   \   00000060   0x5442             STRB     R2,[R0, R1]
    523          				 }
   \   00000062   0x1C40             ADDS     R0,R0,#+1
   \   00000064   0x2805             CMP      R0,#+5
   \   00000066   0xDBFA             BLT.N    ??AppS2w_SetWlanDfltParams_5
    524          				 GsnWdd_TxPowerSet(&s2wappMainTaskCtxt->if0.wddCtx, &param);
   \   00000068   0x6828             LDR      R0,[R5, #+0]
   \   0000006A   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000006E   0x.... 0x....      BL       GsnWdd_TxPowerSet
    525          			 }
    526          
    527          			 /* set the retry count    */
    528          	
    529              		GsnWdd_TxNumRetrySet(&s2wappMainTaskCtxt->if0.wddCtx, s2wCurrent.retryCount);
   \                     ??AppS2w_SetWlanDfltParams_4:
   \   00000072   0x6828             LDR      R0,[R5, #+0]
   \   00000074   0x78B1             LDRB     R1,[R6, #+2]
   \   00000076   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000007A   0x.... 0x....      BL       GsnWdd_TxNumRetrySet
    530          
    531          		    /* configure the power save */			
    532          			GsnWdd_PsCfgBeaconWaitDurSet(&s2wappMainTaskCtxt->if0.wddCtx, 10);			
   \   0000007E   0x6829             LDR      R1,[R5, #+0]
   \   00000080   0xF241 0x00F0      MOVW     R0,#+4336
   \   00000084   0x5840             LDR      R0,[R0, R1]
   \   00000086   0x210A             MOVS     R1,#+10
   \   00000088   0xF8C0 0x1090      STR      R1,[R0, #+144]
    533          		    AppS2wHal_PowerSaveConfigSet();
   \   0000008C   0x.... 0x....      BL       AppS2wHal_PowerSaveConfigSet
    534          			if(s2wCurrent.powerSave == 1)
   \   00000090   0x78F0             LDRB     R0,[R6, #+3]
   \   00000092   0x2801             CMP      R0,#+1
   \   00000094   0xD102             BNE.N    ??AppS2w_SetWlanDfltParams_6
    535          			{
    536          		    AppS2wHal_PowerSaveConfig(s2wCurrent.powerSave);
   \   00000096   0x.... 0x....      BL       AppS2wHal_PowerSaveConfig
   \   0000009A   0xE003             B.N      ??AppS2w_SetWlanDfltParams_7
    537          			}
    538          			else
    539          				AppS2wHal_IeeePSConfig(s2wCurrent.ieeePScfgEn);
   \                     ??AppS2w_SetWlanDfltParams_6:
   \   0000009C   0xF894 0x03B0      LDRB     R0,[R4, #+944]
   \   000000A0   0x.... 0x....      BL       AppS2wHal_IeeePSConfig
    540          			/* configure the active radio mode 	*/
    541          		    AppS2wHal_RadioModeConfig(s2wCurrent.radio);
   \                     ??AppS2w_SetWlanDfltParams_7:
   \   000000A4   0x7930             LDRB     R0,[R6, #+4]
   \   000000A6   0x.... 0x....      BL       AppS2wHal_RadioModeConfig
    542          			AppS2wHal_PsPollIntervelset(S2W_DEFAULT_KEEPALIVE_INTERVAL);
   \   000000AA   0x202D             MOVS     R0,#+45
   \   000000AC   0x.... 0x....      BL       AppS2wHal_PsPollIntervelset
    543          			AppS2wHal_McastRecvSet(S2W_DEFAULT_MCAST_RX);
   \   000000B0   0x2001             MOVS     R0,#+1
   \   000000B2   0x.... 0x....      BL       AppS2wHal_McastRecvSet
   \   000000B6   0xE003             B.N      ??AppS2w_SetWlanDfltParams_8
    544          		}
    545          		else
    546          		{
    547          	    	AppS2wHal_MacAddrSet(macAddr, FALSE);
   \                     ??AppS2w_SetWlanDfltParams_3:
   \   000000B8   0x2100             MOVS     R1,#+0
   \   000000BA   0xA800             ADD      R0,SP,#+0
   \   000000BC   0x.... 0x....      BL       AppS2wHal_MacAddrSet
    548          		}
    549          
    550          	    /* set the min and max scan time msec     */
    551              	GsnWdd_ScanParamSet(&s2wappMainTaskCtxt->if0.wddCtx,s2wCurrent.minScanTime,
    552                                  s2wCurrent.registers[S2W_REG_SCAN_TIME],0);
   \                     ??AppS2w_SetWlanDfltParams_8:
   \   000000C0   0x6828             LDR      R0,[R5, #+0]
   \   000000C2   0xF8B4 0x21CE      LDRH     R2,[R4, #+462]
   \   000000C6   0xF8B4 0x11D6      LDRH     R1,[R4, #+470]
   \   000000CA   0x2300             MOVS     R3,#+0
   \   000000CC   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000000D0   0x.... 0x....      BL       GsnWdd_ScanParamSet
    553          	}
    554          	//#endif
    555          }
   \                     ??AppS2w_SetWlanDfltParams_2:
   \   000000D4   0xBD7F             POP      {R0-R6,PC}       ;; return
    556          /**
    557           ************************************************************************
    558           * @ingroup S2w-Application
    559           * @brief Loads settings from the specified profile.
    560           *     This function will first disconnect and close all network connections,
    561           *     and then load the settings from the specified profile.
    562           * @param profileNum - IN Profile to load from.  Either 0 or 1.
    563           * @retval none.
    564           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    565          PUBLIC VOID
    566          AppS2wProcess_LoadProfile(UINT8 profileNum)
    567          {
   \                     AppS2wProcess_LoadProfile:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    568              S2W_PROFILE_T *profile = &s2wFlashParams->profile[profileNum];
   \   00000002   0x.... 0x....      LDR.W    R1,??DataTable114_5
   \   00000006   0x6A8B             LDR      R3,[R1, #+40]
   \   00000008   0xF44F 0x727E      MOV      R2,#+1016
   \   0000000C   0xFB02 0x3400      MLA      R4,R2,R0,R3
    569          
    570              s2wIsAutoconnected = 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x70C8             STRB     R0,[R1, #+3]
    571          
    572              /* close all cids
    573               */
    574              AppS2wHal_NetCloseAll(0);
   \   00000014   0x.... 0x....      BL       AppS2wHal_NetCloseAll
    575          
    576              memcpy(&s2wCurrent, profile, sizeof(s2wCurrent));
   \   00000018   0xF44F 0x727E      MOV      R2,#+1016
   \   0000001C   0x.... 0x....      LDR.W    R5,??DataTable114_7
   \   00000020   0x4621             MOV      R1,R4
   \   00000022   0x4628             MOV      R0,R5
   \   00000024   0x.... 0x....      BL       memcpy
    577          
    578              /* configure the ip parameters
    579               */
    580              AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
   \   00000028   0xF505 0x70C4      ADD      R0,R5,#+392
   \   0000002C   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000030   0x.... 0x....      B.W      AppS2wHal_NetworkConfig
    581              
    582              
    583          }
    584          
    585          
    586          
    587          /**
    588           ************************************************************************
    589           * @ingroup S2w-Application
    590           * @brief Load the Serial2WiFi default configurations to the global structure.
    591           * @param params  - Pointer to the Global settings structure, which will be
    592           *                  loaded with the configurations.
    593           * @retval VOID - none
    594           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    595          PUBLIC VOID
    596          AppS2wProcess_DefaulConfigtLoad(S2W_FLASH_PARAMS_T *params)
    597          {
   \                     AppS2wProcess_DefaulConfigtLoad:
   \   00000000   0xE92D 0x47FF      PUSH     {R0-R10,LR}
   \   00000004   0x4604             MOV      R4,R0
    598              UINT32 temp;
    599              S2W_PROFILE_T *profile;
    600              S2W_WLANDATA_T *wlan;
    601              S2W_NETDATA_T *net;
    602              S2W_NETCONF_T *netconf;
    603              S2W_SERIAL_PORT_CONF_T *ptSerialPort;
    604          	UINT32 dnsSrvrIp;
    605              S2W_SECURITY_T *sec;
    606          	UINT8 mac[6];
    607          
    608          
    609              profile = &params->profile[0];
    610              memset(profile, 0, sizeof(S2W_PROFILE_T));
   \   00000006   0xF44F 0x727E      MOV      R2,#+1016
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x.... 0x....      BL       memset
    611          
    612              wlan = &profile->autoWlandata;
    613              net = &profile->autoNetdata;
    614              netconf = &profile->netConf;
    615          
    616             ptSerialPort = &(profile->serialPortConf);
    617          
    618              sec = &profile->security;
    619          	profile->securityType = S2W_DEFAULT_SECURITY;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0xF884 0x01D5      STRB     R0,[R4, #+469]
   \   00000016   0xF104 0x070C      ADD      R7,R4,#+12
    620              profile->version = S2W_PROFILE_DFLT_VERSION;
   \   0000001A   0xF44F 0x7080      MOV      R0,#+256
   \   0000001E   0x6020             STR      R0,[R4, #+0]
   \   00000020   0xF104 0x093C      ADD      R9,R4,#+60
    621          	profile->regDomain = S2W_DEFAULT_REG_DOMAIN;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0xF884 0x0395      STRB     R0,[R4, #+917]
    622          	profile->ncmAutoMgr = 	S2W_DEFAULT_AUTO_START;
   \   0000002A   0xF884 0x032A      STRB     R0,[R4, #+810]
   \   0000002E   0xF504 0x78C4      ADD      R8,R4,#+392
    623              profile->mode = S2W_DEFAULT_WLAN_MODE;
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x7120             STRB     R0,[R4, #+4]
    624          
    625              wlan->mode = S2W_DEFAULT_AC_WLAN_MODE;
   \   00000036   0x7038             STRB     R0,[R7, #+0]
    626          
    627              wlan->channel = S2W_DEFAULT_AC_WLAN_CHANNEL;
   \   00000038   0x7078             STRB     R0,[R7, #+1]
   \   0000003A   0xF504 0x76D8      ADD      R6,R4,#+432
    628          
    629              wlan->ssidLen = sizeof(S2W_DEFAULT_AC_WLAN_SSID) - 1;
   \   0000003E   0x2009             MOVS     R0,#+9
   \   00000040   0x70B8             STRB     R0,[R7, #+2]
   \   00000042   0xF104 0x0578      ADD      R5,R4,#+120
    630              memcpy(&wlan->ssid, S2W_DEFAULT_AC_WLAN_SSID, wlan->ssidLen);
   \   00000046   0x.... 0x....      ADR.W    R10,`?<Constant "GSDemoKit">`
   \   0000004A   0x2209             MOVS     R2,#+9
   \   0000004C   0x4651             MOV      R1,R10
   \   0000004E   0xF107 0x000A      ADD      R0,R7,#+10
   \   00000052   0x.... 0x....      BL       memcpy
    631          	if(otpMac_Read(mac,GSN_OTP_MM_ID_MAC_ID0) == S2W_SUCCESS)
   \   00000056   0x21F8             MOVS     R1,#+248
   \   00000058   0xA802             ADD      R0,SP,#+8
   \   0000005A   0x.... 0x....      BL       otpMac_Read
   \   0000005E   0xB918             CBNZ.N   R0,??AppS2wProcess_DefaulConfigtLoad_0
    632          	{
    633          		S2w_macAddrRTCSet(mac); // set in the rtc also
   \   00000060   0xA802             ADD      R0,SP,#+8
   \   00000062   0x.... 0x....      BL       S2w_macAddrRTCSet
   \   00000066   0xE003             B.N      ??AppS2wProcess_DefaulConfigtLoad_1
    634          	}
    635          	else
    636          	{
    637          		S2w_macAddrRTCSet((UINT8*)S2W_DEFAULT_STA_MAC_ADDR); // set in the rtc also
   \                     ??AppS2wProcess_DefaulConfigtLoad_0:
   \   00000068   0x.... 0x....      ADR.W    R0,S2W_DEFAULT_STA_MAC_ADDR
   \   0000006C   0x.... 0x....      BL       S2w_macAddrRTCSet
    638          	}
    639          
    640          
    641              wlan->validBssid = S2W_DEFAULT_AC_WLAN_BSSID_VALID;
   \                     ??AppS2wProcess_DefaulConfigtLoad_1:
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0x70F8             STRB     R0,[R7, #+3]
    642              memcpy(wlan->bssid, S2W_DEFAULT_AC_WLAN_BSSID, sizeof(wlan->bssid));
   \   00000074   0x2206             MOVS     R2,#+6
   \   00000076   0x.... 0x....      ADR.W    R1,S2W_DEFAULT_AC_WLAN_BSSID
   \   0000007A   0x1D38             ADDS     R0,R7,#+4
   \   0000007C   0x.... 0x....      BL       memcpy
    643          
    644              net->mode = S2W_DEFAULT_AC_NET_MODE;
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xF889 0x0000      STRB     R0,[R9, #+0]
    645          
    646              net->proto = S2W_DEFAULT_AC_NET_PROTO;
    647          
    648              net->port = S2W_DEFAULT_AC_NET_PORT;
    649          
    650              if (S2W_DEFAULT_AC_NET_IP_ADDR)
    651              {
    652                  temp = S2W_DEFAULT_AC_NET_IP_ADDR;
    653                  memcpy(&net->ipAddr, &temp, sizeof(net->ipAddr));
   \   00000086   0x2204             MOVS     R2,#+4
   \   00000088   0x2001             MOVS     R0,#+1
   \   0000008A   0xF889 0x0001      STRB     R0,[R9, #+1]
   \   0000008E   0xA900             ADD      R1,SP,#+0
   \   00000090   0x2008             MOVS     R0,#+8
   \   00000092   0xF8A9 0x0002      STRH     R0,[R9, #+2]
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable114_8  ;; 0x101a8c0
   \   0000009A   0x9000             STR      R0,[SP, #+0]
   \   0000009C   0xF109 0x0004      ADD      R0,R9,#+4
   \   000000A0   0x.... 0x....      BL       memcpy
    654              }
    655          
    656              sec->authMode = S2W_DEFAULT_WEP_AUTH_MODE;
   \   000000A4   0x2000             MOVS     R0,#+0
   \   000000A6   0x7028             STRB     R0,[R5, #+0]
    657          
    658              sec->validKeys = S2W_DEFAULT_VALID_KEYS;
    659          
    660              sec->wep.keyIdx = S2W_DEFAULT_WEP_KEY_ID;
    661          
    662              sec->wep.keyLen[S2W_DEFAULT_WEP_KEY_ID-1] = S2W_DEFAULT_WEP_KEY_LEN;
    663              memcpy(sec->wep.key[S2W_DEFAULT_WEP_KEY_ID-1], S2W_DEFAULT_WEP_KEY,
    664                     S2W_DEFAULT_WEP_KEY_LEN);
   \   000000A8   0x2205             MOVS     R2,#+5
   \   000000AA   0x2003             MOVS     R0,#+3
   \   000000AC   0x7068             STRB     R0,[R5, #+1]
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x70A8             STRB     R0,[R5, #+2]
   \   000000B2   0x2005             MOVS     R0,#+5
   \   000000B4   0x70E8             STRB     R0,[R5, #+3]
   \   000000B6   0x1DE8             ADDS     R0,R5,#+7
   \   000000B8   0x.... 0x....      ADR.W    R1,S2W_DEFAULT_WEP_KEY
   \   000000BC   0x.... 0x....      BL       memcpy
    665          
    666          
    667              S2W_ASSERT(sizeof(S2W_DEFAULT_WPA_PASSPHRASE) >= 8
    668                         && sizeof(S2W_DEFAULT_WPA_PASSPHRASE) <= 64);
    669              sec->wpa.passPhraseLen = strlen(S2W_DEFAULT_WPA_PASSPHRASE);
    670              memcpy(sec->wpa.wpaPassPhrase, S2W_DEFAULT_WPA_PASSPHRASE,
    671                     sec->wpa.passPhraseLen);
   \   000000C0   0x.... 0x....      ADR.W    R1,`?<Constant "Serial2Wifi">`
   \   000000C4   0x200B             MOVS     R0,#+11
   \   000000C6   0xF885 0x007B      STRB     R0,[R5, #+123]
   \   000000CA   0x4602             MOV      R2,R0
   \   000000CC   0xF105 0x003B      ADD      R0,R5,#+59
   \   000000D0   0x.... 0x....      BL       memcpy
    672          
    673          
    674          /* load default eap */
    675             sec->eap.outerAuth = S2W_DEFAULT_EAP_OUTERAUTH;
   \   000000D4   0x2000             MOVS     R0,#+0
   \   000000D6   0xF8C5 0x00C0      STR      R0,[R5, #+192]
    676             sec->eap.innerAuth = S2W_DEFAULT_EAP_INNERAUTH;
   \   000000DA   0xF8C5 0x00C4      STR      R0,[R5, #+196]
    677             sec->eap.usrNameLen = sizeof(S2W_DEFAULT_EAP_USERNAME) - 1;	
    678             memset(sec->eap.usrName,0,S2W_MAX_EAP_USR_NAME_LEN);
   \   000000DE   0xF205 0x09CA      ADDW     R9,R5,#+202
   \   000000E2   0x2003             MOVS     R0,#+3
   \   000000E4   0xF885 0x00C9      STRB     R0,[R5, #+201]
   \   000000E8   0x.... 0x....      BL       ?Subroutine9
    679             memcpy(sec->eap.usrName,S2W_DEFAULT_EAP_USERNAME,sec->eap.usrNameLen);
   \                     ??CrossCallReturnLabel_18:
   \   000000EC   0xF895 0x20C9      LDRB     R2,[R5, #+201]
   \   000000F0   0x....             ADR.N    R1,??DataTable104  ;; "gsn"
   \   000000F2   0x4648             MOV      R0,R9
   \   000000F4   0x.... 0x....      BL       memcpy
    680             sec->eap.passwordLen= sizeof(S2W_DEFAULT_EAP_PWD)- 1; 
   \   000000F8   0x2009             MOVS     R0,#+9
   \   000000FA   0xF885 0x00EA      STRB     R0,[R5, #+234]
    681                memset(sec->eap.password,0,S2W_MAX_EAP_PASSWORD_LEN);
   \   000000FE   0xF205 0x09EB      ADDW     R9,R5,#+235
   \   00000102   0x.... 0x....      BL       ?Subroutine9
    682             memcpy(sec->eap.password,S2W_DEFAULT_EAP_PWD,  sec->eap.passwordLen);
   \                     ??CrossCallReturnLabel_17:
   \   00000106   0xF895 0x20EA      LDRB     R2,[R5, #+234]
   \   0000010A   0x.... 0x....      ADR.W    R1,`?<Constant "GSDemo123">`
   \   0000010E   0x4648             MOV      R0,R9
   \   00000110   0x.... 0x....      BL       memcpy
    683             sec->eap.useCaCert =S2W_DEFAULT_EAP_USE_CA_CERT;
   \   00000114   0x2000             MOVS     R0,#+0
   \   00000116   0xF885 0x00C8      STRB     R0,[R5, #+200]
    684          
    685              profile->txPower = S2W_DEFAULT_TX_POWER;
   \   0000011A   0x7160             STRB     R0,[R4, #+5]
    686          
    687              profile->retryCount = S2W_DEFAULT_RETRY_COUNT;
    688          
    689              profile->powerSave = S2W_DEFAULT_POWER_SAVE;
    690          
    691              profile->radio = S2W_DEFAULT_RADIO_MODE;
    692          
    693              netconf->dhcp = S2W_DEFAULT_USE_DHCP;
    694          
    695              if (S2W_DEFAULT_IP_ADDR)
    696              {
    697                  temp = S2W_DEFAULT_IP_ADDR;
    698                  memcpy(&netconf->ipAddr, &temp, sizeof(netconf->ipAddr));
   \   0000011C   0x2204             MOVS     R2,#+4
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x71A0             STRB     R0,[R4, #+6]
   \   00000122   0xA900             ADD      R1,SP,#+0
   \   00000124   0x2001             MOVS     R0,#+1
   \   00000126   0x71E0             STRB     R0,[R4, #+7]
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x7220             STRB     R0,[R4, #+8]
   \   0000012C   0x2001             MOVS     R0,#+1
   \   0000012E   0xF888 0x0000      STRB     R0,[R8, #+0]
   \   00000132   0x.... 0x....      LDR.W    R0,??DataTable114_9  ;; 0xc0a80163
   \   00000136   0x9000             STR      R0,[SP, #+0]
   \   00000138   0xF108 0x0004      ADD      R0,R8,#+4
   \   0000013C   0x.... 0x....      BL       memcpy
    699              }
    700          
    701              if (S2W_DEFAULT_NET_MASK)
    702              {
    703                  temp = S2W_DEFAULT_NET_MASK;
   \   00000140   0xF06F 0x05FF      MVN      R5,#+255
   \   00000144   0x9500             STR      R5,[SP, #+0]
    704                  memcpy(&netconf->netMask, &temp, sizeof(netconf->netMask));
   \   00000146   0x2204             MOVS     R2,#+4
   \   00000148   0xA900             ADD      R1,SP,#+0
   \   0000014A   0xF108 0x0008      ADD      R0,R8,#+8
   \   0000014E   0x.... 0x....      BL       memcpy
    705              }
    706          
    707              if (S2W_DEFAULT_GATEWAY)
    708              {
    709                  temp = S2W_DEFAULT_GATEWAY;
   \   00000152   0x.... 0x....      LDR.W    R0,??DataTable114_10  ;; 0xc0a80101
   \   00000156   0x9000             STR      R0,[SP, #+0]
    710                  memcpy(&netconf->gateway, &temp, sizeof(netconf->gateway));
   \   00000158   0x2204             MOVS     R2,#+4
   \   0000015A   0xA900             ADD      R1,SP,#+0
   \   0000015C   0xF108 0x000C      ADD      R0,R8,#+12
   \   00000160   0x.... 0x....      BL       memcpy
    711              }
    712          
    713          #ifdef S2W_UART_ENABLE
    714          //if(S2W_PORT_UART == APP_S2W_GET_SERIAL_DEVICE_ID())
    715          //if(1)
    716          {/* UART specific initialisation */
    717          
    718              ptSerialPort->conf.uart.bits = S2W_DEFAULT_BITS_PER_CHAR;;
    719          
    720          
    721              ptSerialPort->conf.uart.stop = S2W_DEFAULT_STOP_BITS;
    722          
    723              ptSerialPort->conf.uart.parity =  S2W_DEFAULT_PARITY;
    724          
    725              ptSerialPort->conf.uart.softflow = S2W_DEFAULT_SOFTWARE_FLOW_CONTROL;
    726          
    727              ptSerialPort->conf.uart.hardflow = S2W_DEFAULT_HARDWARE_FLOW_CONTROL;
   \   00000164   0x6871             LDR      R1,[R6, #+4]
   \   00000166   0x2003             MOVS     R0,#+3
   \   00000168   0xF360 0x0107      BFI      R1,R0,#+0,#+8
   \   0000016C   0x6071             STR      R1,[R6, #+4]
    728          
    729              ptSerialPort->conf.uart.baudrate= S2W_DEFAULT_BAUD_RATE;
   \   0000016E   0xF44F 0x5016      MOV      R0,#+9600
   \   00000172   0x60B0             STR      R0,[R6, #+8]
    730          
    731          }
    732          //else
    733          #endif  /* GSN_UART_ENABLE */
    734          {/* SPI specific initialisation */
    735          /* SPI specific initialisation */
    736          #if defined(S2W_FS_SPI_ENABLE) || defined(S2W_FS_SPI_HI_ENABLE)
    737          
    738             #if S2W_DEFAULT_SPI_ECHO
    739              ptSerialPort->commonConf.echo = S2W_DEFAULT_SPI_ECHO;
    740             #endif
    741          
    742             #if S2W_DEFAULT_SPI_VERBOSE
    743             ptSerialPort->commonConf.verbose = S2W_DEFAULT_SPI_VERBOSE;
    744             #endif
    745          
    746          	ptSerialPort->conf.spi.clockPhase    = (GSN_SPI_CLOCKPHASE_T)S2W_DEFAULT_SPI_PHASE;
    747          	ptSerialPort->conf.spi.clockPolarity = (GSN_SPI_CLOCKPOLARITY_T)S2W_DEFAULT_SPI_POLARITY;
    748          
    749          #endif /* GSN_FS_SPI_ENABLE */
    750          
    751          }
    752          
    753          	ptSerialPort->commonConf.echo = S2W_DEFAULT_ECHO;
    754          	ptSerialPort->commonConf.verbose = S2W_DEFAULT_VERBOSE;
    755          
    756              profile->registers[S2W_REG_TCP_CONNECT_TIMEOUT] =
    757                               S2W_DEFAULT_TCP_CONNECT_TIMEOUT;
    758          
    759              profile->registers[S2W_REG_NAGLE_WAIT_TIME] =
    760                               S2W_DEFAULT_NAGLE_WAIT_TIME;
    761          
    762              profile->registers[S2W_REG_AUTO_ASSOC_TIMEOUT] =
    763                                S2W_DEFAULT_AUTO_ASSOC_TIMEOUT;
    764          
    765              profile->registers[S2W_REG_NET_CONNECTION_TIMEOUT] =
    766                                S2W_DEFAULT_NET_CONNECTION_TIMEOUT;
    767              profile->registers[S2W_REG_ASSOC_RETRY_COUNT] =
    768                                 S2W_DEFAULT_ASSOCIATION_RETRY_COUNT;
   \   00000174   0x2103             MOVS     R1,#+3
   \   00000176   0x2001             MOVS     R0,#+1
   \   00000178   0x7030             STRB     R0,[R6, #+0]
   \   0000017A   0x7070             STRB     R0,[R6, #+1]
   \   0000017C   0xF641 0x504C      MOVW     R0,#+7500
   \   00000180   0xF8A4 0x01C8      STRH     R0,[R4, #+456]
   \   00000184   0x200A             MOVS     R0,#+10
   \   00000186   0xF8A4 0x01CC      STRH     R0,[R4, #+460]
   \   0000018A   0xF44F 0x70FA      MOV      R0,#+500
   \   0000018E   0xF8A4 0x01C6      STRH     R0,[R4, #+454]
   \   00000192   0xF44F 0x707A      MOV      R0,#+1000
   \   00000196   0xF8A4 0x01C4      STRH     R0,[R4, #+452]
   \   0000019A   0xF8A4 0x11CA      STRH     R1,[R4, #+458]
    769          
    770              profile->registers[S2W_REG_SCAN_TIME] =
    771                                S2W_DEFAULT_SCAN_TIME;
   \   0000019E   0x2196             MOVS     R1,#+150
   \   000001A0   0xF8A4 0x11CE      STRH     R1,[R4, #+462]
    772              profile->minScanTime = S2W_DEFAULT_SCAN_MIN_TIME;
   \   000001A4   0xF8A4 0x11D6      STRH     R1,[R4, #+470]
    773          
    774              profile->registers[S2W_NCM_AUTO_L4_TIME] = S2W_NCM_DFLT_L4CONNECT_PERIOD  ;
   \   000001A8   0xF8A4 0x01D0      STRH     R0,[R4, #+464]
    775              profile->registers[S2W_NCM_AUTO_L4_RETRY] = S2W_NCM_DFLT_L4CONNECT_COUNT;
    776          
    777              // Load the limited AP parameters
    778              profile->lmtdApConf.channel = S2W_DEFAULT_AP_WLAN_CHANNEL;
    779              profile->lmtdApConf.ssid.length = sizeof(S2W_DEFAULT_AP_WLAN_SSID) - 1;
    780              memcpy(&profile->lmtdApConf.ssid.array, S2W_DEFAULT_AP_WLAN_SSID, profile->lmtdApConf.ssid.length);
   \   000001AC   0x4651             MOV      R1,R10
   \   000001AE   0x2064             MOVS     R0,#+100
   \   000001B0   0xF8A4 0x01D2      STRH     R0,[R4, #+466]
   \   000001B4   0x2001             MOVS     R0,#+1
   \   000001B6   0xF884 0x0286      STRB     R0,[R4, #+646]
   \   000001BA   0x2009             MOVS     R0,#+9
   \   000001BC   0xF884 0x01EC      STRB     R0,[R4, #+492]
   \   000001C0   0x4602             MOV      R2,R0
   \   000001C2   0xF204 0x10ED      ADDW     R0,R4,#+493
   \   000001C6   0x.... 0x....      BL       memcpy
    781              // read the otp to get the mac for limited AP,
    782                  if(otpMac_Read(mac,GSN_OTP_MM_ID_MAC_ID1) == S2W_SUCCESS)
   \   000001CA   0xF204 0x280D      ADDW     R8,R4,#+525
   \   000001CE   0x21F9             MOVS     R1,#+249
   \   000001D0   0xA802             ADD      R0,SP,#+8
   \   000001D2   0x.... 0x....      BL       otpMac_Read
   \   000001D6   0xB928             CBNZ.N   R0,??AppS2wProcess_DefaulConfigtLoad_2
    783                  {
    784          			memcpy(&profile->lmtdApConf.macAddr, mac, sizeof(profile->lmtdApConf.macAddr));
   \   000001D8   0x2206             MOVS     R2,#+6
   \   000001DA   0xA902             ADD      R1,SP,#+8
   \   000001DC   0x4640             MOV      R0,R8
   \   000001DE   0x.... 0x....      BL       memcpy
   \   000001E2   0xE005             B.N      ??AppS2wProcess_DefaulConfigtLoad_3
    785          		}
    786          		else
    787          		{
    788                      memcpy(&profile->lmtdApConf.macAddr, S2W_DEFAULT_AP_MAC_ADDR, sizeof(profile->lmtdApConf.macAddr));
   \                     ??AppS2wProcess_DefaulConfigtLoad_2:
   \   000001E4   0x2206             MOVS     R2,#+6
   \   000001E6   0x.... 0x....      ADR.W    R1,S2W_DEFAULT_AP_MAC_ADDR
   \   000001EA   0x4640             MOV      R0,R8
   \   000001EC   0x.... 0x....      BL       memcpy
    789          	}
    790          
    791          	profile->lmtdApConf.noStations = S2W_DEFAULT_AP_SUPPORTED_STATIONS;
   \                     ??AppS2wProcess_DefaulConfigtLoad_3:
   \   000001F0   0x2040             MOVS     R0,#+64
   \   000001F2   0xF884 0x0287      STRB     R0,[R4, #+647]
    792              profile->lmtdApConf.securityType = S2W_DEFAULT_AP_SECURITY;
   \   000001F6   0x2001             MOVS     R0,#+1
   \   000001F8   0xF884 0x0254      STRB     R0,[R4, #+596]
    793              profile->lmtdApConf.regDomain = S2W_DEFAULT_AP_REG_DOMAIN;
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0xF884 0x0288      STRB     R0,[R4, #+648]
    794              profile->lmtdApConf.beaconInterval = S2W_DEFAULT_AP_BEACON_INTERVAL;
   \   00000202   0x2064             MOVS     R0,#+100
   \   00000204   0xF8A4 0x028A      STRH     R0,[R4, #+650]
    795              profile->lmtdApConf.dhcpServerEnable = S2W_DFLT_AP_DHCPSRVR_ENABLE;
   \   00000208   0x2001             MOVS     R0,#+1
   \   0000020A   0xF884 0x0298      STRB     R0,[R4, #+664]
    796              profile->lmtdApConf.dnsServerEnable = S2W_DFLT_AP_DNSSRVR_ENABLE;
   \   0000020E   0xF884 0x02A0      STRB     R0,[R4, #+672]
    797              profile->lmtdApConf.dhcpAddressStart = S2W_DFLT_AP_IP_START_ADDRESS;
    798              profile->lmtdApConf.dhcpNumAddresses = S2W_DHCP_SRVR_MAX_CLIENTS;
    799              profile->lmtdApConf.ipAddress = S2W_DFLT_AP_IP_ADDRESS;
    800              profile->lmtdApConf.subnetmask = S2W_DFLT_AP_SUBNET_ADDRESS;
    801              profile->lmtdApConf.gateway = S2W_DFLT_AP_GATE_ADDRESS;
    802              profile->lmtdApConf.dhcpLeaseTime =  htonl((UINT32)S2W_DFLT_AP_DHCPSRVR_LEASE_TIME);
    803          	profile->lmtdApConf.wepKeyConfig.KeyId = S2W_DEFAULT_AP_WEP_KEY_INDEX;
    804          	profile->lmtdApConf.wepKeyConfig.authType = (GSN_WDD_WEP_AUTH_TYPE_T) S2W_DEFAULT_AP_AUTH_MODE;
    805          #if (S2W_DEFAULT_AP_WEP_KEY_LEN == 5) || (S2W_DEFAULT_AP_WEP_KEY_LEN == 13)
    806          		profile->lmtdApConf.wepKeyConfig.KeyLen= (GSN_WDD_WEP_KEY_LEN_T)S2W_DEFAULT_AP_WEP_KEY_LEN;
    807          		memcpy(profile->lmtdApConf.wepKeyConfig.Key, S2W_DEFAULT_AP_WEP_KEY,
    808          			   S2W_DEFAULT_AP_WEP_KEY_LEN);
   \   00000212   0x2205             MOVS     R2,#+5
   \   00000214   0x.... 0x....      LDR.W    R0,??DataTable114_11  ;; 0xc0a8f002
   \   00000218   0x.... 0x....      LDR.W    R6,??DataTable114_12  ;; 0xc0a8f001
   \   0000021C   0x.... 0x....      ADR.W    R1,S2W_DEFAULT_AP_WEP_KEY
   \   00000220   0xF8C4 0x029C      STR      R0,[R4, #+668]
   \   00000224   0x2040             MOVS     R0,#+64
   \   00000226   0xF884 0x0299      STRB     R0,[R4, #+665]
   \   0000022A   0xF8C4 0x628C      STR      R6,[R4, #+652]
   \   0000022E   0xF8C4 0x5290      STR      R5,[R4, #+656]
   \   00000232   0xF8C4 0x6294      STR      R6,[R4, #+660]
   \   00000236   0x.... 0x....      LDR.W    R0,??DataTable114_13  ;; 0x80510100
   \   0000023A   0xF8C4 0x02E4      STR      R0,[R4, #+740]
   \   0000023E   0x2001             MOVS     R0,#+1
   \   00000240   0xF884 0x0257      STRB     R0,[R4, #+599]
   \   00000244   0x2000             MOVS     R0,#+0
   \   00000246   0xF884 0x0255      STRB     R0,[R4, #+597]
   \   0000024A   0x2005             MOVS     R0,#+5
   \   0000024C   0xF884 0x0256      STRB     R0,[R4, #+598]
   \   00000250   0xF504 0x7016      ADD      R0,R4,#+600
   \   00000254   0x.... 0x....      BL       memcpy
    809          #endif
    810          	S2W_ASSERT(sizeof(S2W_DEFAULT_AP_WPA_PASSPHRASE) >= 8
    811          				   && sizeof(S2W_DEFAULT_AP_WPA_PASSPHRASE) <= 64);
    812          	profile->lmtdApConf.passphrase.Len = strlen(S2W_DEFAULT_AP_WPA_PASSPHRASE);
   \   00000258   0x200A             MOVS     R0,#+10
   \   0000025A   0xF884 0x0213      STRB     R0,[R4, #+531]
    813          	memcpy(profile->lmtdApConf.passphrase.Passphrase, S2W_DEFAULT_AP_WPA_PASSPHRASE,
    814          		   profile->lmtdApConf.passphrase.Len);
   \   0000025E   0x4602             MOV      R2,R0
   \   00000260   0x.... 0x....      ADR.W    R1,`?<Constant "1234567890">`
   \   00000264   0xF504 0x7005      ADD      R0,R4,#+532
   \   00000268   0x.... 0x....      BL       memcpy
    815          	
    816          
    817          	dnsSrvrIp = S2W_DFLT_AP_DNS_IP1;
   \   0000026C   0x9601             STR      R6,[SP, #+4]
    818          	memcpy(&profile->dns1,(char*)&dnsSrvrIp,4);
   \   0000026E   0x2204             MOVS     R2,#+4
   \   00000270   0xA901             ADD      R1,SP,#+4
   \   00000272   0xF504 0x70D4      ADD      R0,R4,#+424
   \   00000276   0x.... 0x....      BL       memcpy
    819          	dnsSrvrIp = S2W_DFLT_AP_DNS_IP2;
   \   0000027A   0x9601             STR      R6,[SP, #+4]
    820          	memcpy(&profile->dns2,(char*)&dnsSrvrIp,4);
   \   0000027C   0x2204             MOVS     R2,#+4
   \   0000027E   0xA901             ADD      R1,SP,#+4
   \   00000280   0xF504 0x70D6      ADD      R0,R4,#+428
   \   00000284   0x.... 0x....      BL       memcpy
    821          
    822              memcpy(&profile->lmtdApConf.dnsDomainName,S2W_DFLT_AP_DNS_NAME,sizeof(S2W_DFLT_AP_DNS_NAME) - 1);
   \   00000288   0x2210             MOVS     R2,#+16
   \   0000028A   0x.... 0x....      ADR.W    R1,`?<Constant "config.gainspan\\000">`
   \   0000028E   0xF204 0x20A1      ADDW     R0,R4,#+673
   \   00000292   0x.... 0x....      BL       memcpy
    823          
    824              //http server
    825              memcpy(&profile->httpSrvrConf.username,S2W_DFLT_HTTP_SRVR_USRNAME,sizeof(S2W_DFLT_HTTP_SRVR_USRNAME));
   \   00000296   0x.... 0x....      ADR.W    R5,`?<Constant "admin">`
   \   0000029A   0x2206             MOVS     R2,#+6
   \   0000029C   0x4629             MOV      R1,R5
   \   0000029E   0xF504 0x703A      ADD      R0,R4,#+744
   \   000002A2   0x.... 0x....      BL       memcpy
    826              memcpy(&profile->httpSrvrConf.password,S2W_DFLT_HTTP_SRVR_PWD,sizeof(S2W_DFLT_HTTP_SRVR_PWD));
   \   000002A6   0x2206             MOVS     R2,#+6
   \   000002A8   0x4629             MOV      R1,R5
   \   000002AA   0xF504 0x7042      ADD      R0,R4,#+776
   \   000002AE   0x.... 0x....      BL       memcpy
    827          	/*ieee ps configuration*/
    828          	profile->ieeePScfgEn = S2W_DFLT_IEEE_PS_CFG_ENABLE;
   \   000002B2   0x2000             MOVS     R0,#+0
   \   000002B4   0xF884 0x03B0      STRB     R0,[R4, #+944]
    829          	profile->ieeePScfg.wakeupType = (GSN_WIF_WLAN_STA_PS_WAKEUP_T)S2W_DFLT_IEEE_PS_CFG_WAKEUP_TYPE;
    830          	profile->ieeePScfg.wakeupInterval = S2W_DFLT_IEEE_PS_CFG_WAKEUP_INTERVAL;
    831          	profile->ieeePScfg.listenIntervalAssoc = S2W_DFLT_IEEE_PS_CFG_LISTN_INTVL_ASSOC;
    832          	profile->ieeePScfg.dataRxType = (GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_T)S2W_DFLT_IEEE_PS_CFG_DATA_RX_TYPE;
    833          	profile->ieeePScfg.uapsdEnable = 0x0f;
    834          	profile->ieeePScfg.txAtTbttWakeup = 0;
    835          	profile->ieeePScfg.beaconWaitTimeout = S2W_DFLT_IEEE_PS_CFG_BEACON_WAIT_DURATION;
    836              profile->ieeePScfg.activeToOffTimeout = 10;
    837              // set the default mac address
    838          
    839              // set the remaining
    840              profile->asyncMsgFormat  = 0;
    841              //profile->ncmAutoMgr = 0;
    842          
    843              profile->ncmAutoLvl=0;
    844              profile->ncmAutoCid =0;
    845          	profile->ncmAutoConf[S2W_NCM_HIDDENSSID_VALUE]= S2W_DEFAULT_AP_SSID_BROADCAST;
    846              profile->logLevel = S2W_DEFAULT_APP_LOG_LEVEL;
    847          	profile->eapCertTimeValidChkDisbl=0;
    848              profile->dhcpRequestLeaseTime = 0;    
    849              profile->dhcpRetryTimeout = 0;
    850          	profile->socRdCnt=3;
    851          	profile->autoExitTimeout = S2W_DFLT_AUTO_EXIT_TIMEOUT;
    852              memcpy(&params->profile[1], profile, sizeof(S2W_PROFILE_T));
   \   000002B8   0xF44F 0x727E      MOV      R2,#+1016
   \   000002BC   0x2003             MOVS     R0,#+3
   \   000002BE   0xF884 0x0396      STRB     R0,[R4, #+918]
   \   000002C2   0x4621             MOV      R1,R4
   \   000002C4   0x2001             MOVS     R0,#+1
   \   000002C6   0xF8A4 0x0398      STRH     R0,[R4, #+920]
   \   000002CA   0xF44F 0x7016      MOV      R0,#+600
   \   000002CE   0xF8A4 0x039A      STRH     R0,[R4, #+922]
   \   000002D2   0x2001             MOVS     R0,#+1
   \   000002D4   0xF884 0x039C      STRB     R0,[R4, #+924]
   \   000002D8   0x200F             MOVS     R0,#+15
   \   000002DA   0xF884 0x039D      STRB     R0,[R4, #+925]
   \   000002DE   0x2000             MOVS     R0,#+0
   \   000002E0   0xF884 0x039E      STRB     R0,[R4, #+926]
   \   000002E4   0x200A             MOVS     R0,#+10
   \   000002E6   0xF8A4 0x03A0      STRH     R0,[R4, #+928]
   \   000002EA   0xF8A4 0x03A2      STRH     R0,[R4, #+930]
   \   000002EE   0x2000             MOVS     R0,#+0
   \   000002F0   0xF884 0x01D8      STRB     R0,[R4, #+472]
   \   000002F4   0xF884 0x032B      STRB     R0,[R4, #+811]
   \   000002F8   0xF884 0x0394      STRB     R0,[R4, #+916]
   \   000002FC   0xF8C4 0x035C      STR      R0,[R4, #+860]
   \   00000300   0xF884 0x03A8      STRB     R0,[R4, #+936]
   \   00000304   0xF884 0x03BC      STRB     R0,[R4, #+956]
   \   00000308   0xF8C4 0x03C8      STR      R0,[R4, #+968]
   \   0000030C   0xF8C4 0x03CC      STR      R0,[R4, #+972]
   \   00000310   0x2003             MOVS     R0,#+3
   \   00000312   0xF884 0x03C0      STRB     R0,[R4, #+960]
   \   00000316   0x2064             MOVS     R0,#+100
   \   00000318   0xF8C4 0x03C4      STR      R0,[R4, #+964]
   \   0000031C   0xF504 0x707E      ADD      R0,R4,#+1016
   \   00000320   0x.... 0x....      BL       memcpy
    853          }
   \   00000324   0xE8BD 0x87FF      POP      {R0-R10,PC}      ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2220             MOVS     R2,#+32
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x4648             MOV      R0,R9
   \   00000006   0x.... 0x....      B.W      memset
    854          
    855          /**
    856           ************************************************************************
    857           * @ingroup S2w-Application
    858           * @brief Notify the status of an operation.
    859           *   This function sends the status information of each command/action to
    860           *   the serial interface.
    861           * @param status - IN the status value.
    862           * @param arg    - IN the arg passed with status
    863           * @retval VOID  - none.
    864           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    865          PUBLIC VOID
    866          AppS2wProcess_StatusNotify(UINT8 status, UINT32 arg)
    867          {
   \                     AppS2wProcess_StatusNotify:
   \   00000000   0xE92D 0x45F8      PUSH     {R3-R8,R10,LR}
   \   00000004   0x4605             MOV      R5,R0
   \   00000006   0x4688             MOV      R8,R1
    868              const char *msg;
    869          
    870              if (status == S2W_CMD_INPROCESS)
   \   00000008   0x2D32             CMP      R5,#+50
   \   0000000A   0xD056             BEQ.N    ??AppS2wProcess_StatusNotify_0
    871              {
    872                  return;
    873              }
    874          
    875              if (status == S2W_LINK_LOST_EVT)
   \   0000000C   0x24FF             MOVS     R4,#+255
   \   0000000E   0x.... 0x....      LDR.W    R10,??DataTable114_7
   \   00000012   0x.... 0x....      LDR.W    R6,??DataTable114_5
   \   00000016   0x2D09             CMP      R5,#+9
   \   00000018   0xD10B             BNE.N    ??AppS2wProcess_StatusNotify_1
    876              {
    877                  s2wIsAutoconnected = 0;
   \   0000001A   0x2000             MOVS     R0,#+0
   \   0000001C   0x70F0             STRB     R0,[R6, #+3]
    878                  AppS2wHal_NetCloseAll(1);
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x.... 0x....      BL       AppS2wHal_NetCloseAll
    879                  curCid = INVALID_CID;
   \   00000024   0x7174             STRB     R4,[R6, #+5]
    880          
    881                  if (s2wState == S2W_STATE_DATA_AUTO)
   \   00000026   0x7830             LDRB     R0,[R6, #+0]
   \   00000028   0x280D             CMP      R0,#+13
   \   0000002A   0xD117             BNE.N    ??AppS2wProcess_StatusNotify_2
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x7030             STRB     R0,[R6, #+0]
   \   00000030   0xE014             B.N      ??AppS2wProcess_StatusNotify_2
    882                  {
    883                      s2wState = S2W_STATE_CMD;
    884                  }
    885              }
    886          
    887              if ((status == S2W_ECIDCLOSE || status == S2W_SOCKFAILURE)
    888                   && s2wIsAutoconnected && curCid == arg)
   \                     ??AppS2wProcess_StatusNotify_1:
   \   00000032   0x2D08             CMP      R5,#+8
   \   00000034   0xBF18             IT       NE 
   \   00000036   0x2D03             CMPNE    R5,#+3
   \   00000038   0xD110             BNE.N    ??AppS2wProcess_StatusNotify_2
   \   0000003A   0x78F0             LDRB     R0,[R6, #+3]
   \   0000003C   0xB170             CBZ.N    R0,??AppS2wProcess_StatusNotify_2
   \   0000003E   0x7970             LDRB     R0,[R6, #+5]
   \   00000040   0x4540             CMP      R0,R8
   \   00000042   0xD10B             BNE.N    ??AppS2wProcess_StatusNotify_2
    889              {
    890                  curCid = INVALID_CID;
   \   00000044   0x7174             STRB     R4,[R6, #+5]
    891          
    892                  /* Drop to command mode if the auto connected network
    893                   * connection is closed, except if running as a TCP server
    894                   */
    895                   if (!(s2wCurrent.autoNetdata.proto == S2W_NETDATA_PROTO_TCP
    896                       && s2wCurrent.autoNetdata.mode == S2W_NETDATA_MODE_SERVER))
   \   00000046   0xF89A 0x003D      LDRB     R0,[R10, #+61]
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xBF04             ITT      EQ 
   \   0000004E   0xF89A 0x003C      LDRBEQ   R0,[R10, #+60]
   \   00000052   0x2801             CMPEQ    R0,#+1
   \   00000054   0xD002             BEQ.N    ??AppS2wProcess_StatusNotify_2
    897                   {
    898                       s2wState = S2W_STATE_CMD;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7030             STRB     R0,[R6, #+0]
    899                       s2wIsAutoconnected = 0;
   \   0000005A   0x70F0             STRB     R0,[R6, #+3]
    900                   }
    901              }
    902          
    903              /* Validate the status value.
    904               */
    905              if (status > S_STATUS_TBL - 1)
   \                     ??AppS2wProcess_StatusNotify_2:
   \   0000005C   0x2D22             CMP      R5,#+34
   \   0000005E   0xF080 0x807F      BCS.W    ??AppS2wProcess_StatusNotify_3
    906              {
    907                  //S2w_Debug("unknown error: %d\r\n", status);
    908                  return;
   \   00000062   0xF646 0x24F8      MOVW     R4,#+27384
   \   00000066   0x7831             LDRB     R1,[R6, #+0]
   \   00000068   0x.... 0x....      LDR.W    R7,??DataTable114_2
   \   0000006C   0x2902             CMP      R1,#+2
   \   0000006E   0xBF18             IT       NE 
   \   00000070   0x2904             CMPNE    R1,#+4
   \   00000072   0xD005             BEQ.N    ??AppS2wProcess_StatusNotify_4
   \   00000074   0x290B             CMP      R1,#+11
   \   00000076   0xD10A             BNE.N    ??AppS2wProcess_StatusNotify_5
   \   00000078   0x2001             MOVS     R0,#+1
   \                     ??AppS2wProcess_StatusNotify_6:
   \   0000007A   0x2200             MOVS     R2,#+0
   \                     ??AppS2wProcess_StatusNotify_7:
   \   0000007C   0x4310             ORRS     R0,R2,R0
   \   0000007E   0xD015             BEQ.N    ??AppS2wProcess_StatusNotify_8
   \                     ??AppS2wProcess_StatusNotify_4:
   \   00000080   0x2D08             CMP      R5,#+8
   \   00000082   0xD013             BEQ.N    ??AppS2wProcess_StatusNotify_8
    909              }
    910          
    911              /* Use <Esc><'O'> or <Esc><'F'> for status in data mode */
    912              if ((s2wState == S2W_STATE_DATA_ESC
    913                  || s2wState == S2W_STATE_CID
    914                  || s2wState == S2W_STATE_IP_STRING
    915                  | s2wState == S2W_STATE_PORT_STRING) && (status != S2W_ECIDCLOSE))
    916              {
    917                  S2w_Printf("%c%c", S2W_ESC, status == S2W_SUCCESS ? 'O' : 'F');
   \   00000084   0x2D00             CMP      R5,#+0
   \   00000086   0xBF0C             ITE      EQ 
   \   00000088   0x224F             MOVEQ    R2,#+79
   \   0000008A   0x2246             MOVNE    R2,#+70
   \   0000008C   0xE004             B.N      ??AppS2wProcess_StatusNotify_9
   \                     ??AppS2wProcess_StatusNotify_5:
   \   0000008E   0x2000             MOVS     R0,#+0
   \   00000090   0x290C             CMP      R1,#+12
   \   00000092   0xD1F2             BNE.N    ??AppS2wProcess_StatusNotify_6
   \   00000094   0x2201             MOVS     R2,#+1
   \   00000096   0xE7F1             B.N      ??AppS2wProcess_StatusNotify_7
   \                     ??AppS2wProcess_StatusNotify_9:
   \   00000098   0x211B             MOVS     R1,#+27
   \   0000009A   0x.... 0x....      ADR.W    R0,`?<Constant "%c%c">`
   \   0000009E   0x.... 0x....      BL       S2w_Printf
    918                  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000000A2   0x6838             LDR      R0,[R7, #+0]
   \   000000A4   0x5C20             LDRB     R0,[R4, R0]
   \   000000A6   0x2802             CMP      R0,#+2
   \   000000A8   0xD15A             BNE.N    ??AppS2wProcess_StatusNotify_3
    919                  {
    920                     s2wSpiFs_Flush();
   \   000000AA   0xE055             B.N      ??AppS2wProcess_StatusNotify_10
    921                  }
    922                  return;
    923              }
    924          
    925              /* If verbose response is enabled, display the status in the verbose
    926               * format, if no verbose enabled, display the status in the numeric
    927               * format.
    928               */
    929          
    930             if (s2wCurrent.serialPortConf.commonConf.verbose)
   \                     ??AppS2wProcess_StatusNotify_8:
   \   000000AC   0xF89A 0x01B1      LDRB     R0,[R10, #+433]
   \   000000B0   0xB388             CBZ.N    R0,??AppS2wProcess_StatusNotify_11
    931              {
    932                  msg = S2W_StatusList[status];
   \   000000B2   0xEB06 0x0085      ADD      R0,R6,R5, LSL #+2
   \   000000B6   0x6B80             LDR      R0,[R0, #+56]
    933                  if (!msg)
   \   000000B8   0x2800             CMP      R0,#+0
   \                     ??AppS2wProcess_StatusNotify_0:
   \   000000BA   0xD051             BEQ.N    ??AppS2wProcess_StatusNotify_3
    934                  {
    935                      return;
    936                  }
    937                  if (status == S2W_SUCCESS && s2wState == S2W_STATE_DATA)
   \   000000BC   0x2D00             CMP      R5,#+0
   \   000000BE   0xBF08             IT       EQ 
   \   000000C0   0x2901             CMPEQ    R1,#+1
   \   000000C2   0xD103             BNE.N    ??AppS2wProcess_StatusNotify_12
    938                  {
    939                      S2w_Printf("%cOK", S2W_ESC);
   \   000000C4   0x211B             MOVS     R1,#+27
   \   000000C6   0x.... 0x....      ADR.W    R0,`?<Constant "%cOK">`
   \   000000CA   0xE03D             B.N      ??AppS2wProcess_StatusNotify_13
    940                  }
    941                  else if (status == S2W_CON_SUCCESS || ((status == S2W_ECIDCLOSE)
    942                                                         &&(!s2wIsAutoconnected)))
   \                     ??AppS2wProcess_StatusNotify_12:
   \   000000CC   0x2D07             CMP      R5,#+7
   \   000000CE   0xBF18             IT       NE 
   \   000000D0   0x2D08             CMPNE    R5,#+8
   \   000000D2   0xD00A             BEQ.N    ??AppS2wProcess_StatusNotify_14
    943                  {
    944                      S2w_Printf(msg, arg);
    945                      if(status == S2W_ECIDCLOSE)
    946                      {
    947                          //s2wState = S2W_STATE_CMD;
    948                          //dataIndex = 0;
    949                      }
    950                  }
    951                  else if ((status == S2W_SOCKFAILURE) &&(!s2wIsAutoconnected))
   \   000000D4   0x2D03             CMP      R5,#+3
   \   000000D6   0xD010             BEQ.N    ??AppS2wProcess_StatusNotify_15
    952                  {
    953                      S2w_Printf("\r\nERROR: SOCKET FAILURE %x\r\n",arg);
    954                      //s2wState = S2W_STATE_CMD;
    955                      //dataIndex = 0;
    956                  }
    957          		else if ((status == S2W_MDNS_REG_FAILED_ID) || (status == S2W_MDNS_REG_SUCESS_ID))
   \   000000D8   0x2D20             CMP      R5,#+32
   \   000000DA   0xBF18             IT       NE 
   \   000000DC   0x2D21             CMPNE    R5,#+33
   \   000000DE   0xD106             BNE.N    ??AppS2wProcess_StatusNotify_16
    958                  {
    959                  	UINT8 *str;
    960          			str = (UINT8 *)arg;
    961          			S2w_Printf("%s%s\r\n",msg,str);
   \   000000E0   0x4601             MOV      R1,R0
   \   000000E2   0x4642             MOV      R2,R8
   \   000000E4   0x.... 0x....      ADR.W    R0,`?<Constant "%s%s\\r\\n">`
   \   000000E8   0xE025             B.N      ??AppS2wProcess_StatusNotify_17
    962          		}
    963                  else
    964                  {
    965                      if((status == S2W_ECIDCLOSE) &&(s2wIsAutoconnected))
    966                      {
    967                          S2w_Printf(msg, arg);
   \                     ??AppS2wProcess_StatusNotify_14:
   \   000000EA   0x4641             MOV      R1,R8
   \   000000EC   0xE02C             B.N      ??AppS2wProcess_StatusNotify_13
    968                      }
    969                      else if(status == S2W_BOOT_RST_APP_SW)
   \                     ??AppS2wProcess_StatusNotify_16:
   \   000000EE   0x2D17             CMP      R5,#+23
   \   000000F0   0x4601             MOV      R1,R0
   \   000000F2   0xD106             BNE.N    ??AppS2wProcess_StatusNotify_18
    970                          S2w_Printf("\n\r%s\r\n", msg);				
   \   000000F4   0x.... 0x....      ADR.W    R0,`?<Constant "\\n\\r%s\\r\\n">`
   \   000000F8   0xE026             B.N      ??AppS2wProcess_StatusNotify_13
    971                      else if((status == S2W_SOCKFAILURE) &&(s2wIsAutoconnected))
    972                      {
    973                          S2w_Printf("\r\nERROR: SOCKET FAILURE %x\r\n",arg);
   \                     ??AppS2wProcess_StatusNotify_15:
   \   000000FA   0x4641             MOV      R1,R8
   \   000000FC   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nERROR: SOCKET FAILU...">`
   \   00000100   0xE022             B.N      ??AppS2wProcess_StatusNotify_13
    974                      }
    975                      else
    976                      {
    977          
    978                          S2w_Printf("\r\n%s\r\n", msg);
   \                     ??AppS2wProcess_StatusNotify_18:
   \   00000102   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%s\\r\\n">`
   \   00000106   0x.... 0x....      BL       S2w_Printf
    979                          if(status == S2W_EBADCID)
   \   0000010A   0x2D05             CMP      R5,#+5
   \   0000010C   0xD11E             BNE.N    ??AppS2wProcess_StatusNotify_19
    980                          {
    981                              s2wState = S2W_STATE_CMD;
   \   0000010E   0x2000             MOVS     R0,#+0
   \   00000110   0x7030             STRB     R0,[R6, #+0]
    982                              dataIndex = 0;
   \   00000112   0x62F0             STR      R0,[R6, #+44]
   \   00000114   0xE01A             B.N      ??AppS2wProcess_StatusNotify_19
    983                          }
    984                      }
    985                  }
    986              }
    987              else if ((status == S2W_CON_SUCCESS) || (status == S2W_ECIDCLOSE)
    988                       || (status == S2W_SOCKFAILURE))
   \                     ??AppS2wProcess_StatusNotify_11:
   \   00000116   0x2D07             CMP      R5,#+7
   \   00000118   0xBF1C             ITT      NE 
   \   0000011A   0x2D08             CMPNE    R5,#+8
   \   0000011C   0x2D03             CMPNE    R5,#+3
   \   0000011E   0xD104             BNE.N    ??AppS2wProcess_StatusNotify_20
    989              {
    990                  S2w_Printf("\r\n%d %x\r\n", status, arg);
   \   00000120   0x4642             MOV      R2,R8
   \   00000122   0x4629             MOV      R1,R5
   \   00000124   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%d %x\\r\\n">`
   \   00000128   0xE005             B.N      ??AppS2wProcess_StatusNotify_17
    991                  //if((status == S2W_ECIDCLOSE) || (status == S2W_SOCKFAILURE))
    992                  {
    993                      //s2wState = S2W_STATE_CMD;
    994                      //dataIndex = 0;
    995                  }
    996              }
    997              else if (s2wState == S2W_STATE_DATA)
   \                     ??AppS2wProcess_StatusNotify_20:
   \   0000012A   0x2901             CMP      R1,#+1
   \   0000012C   0xD106             BNE.N    ??AppS2wProcess_StatusNotify_21
    998              {
    999                  S2w_Printf("%c%d", S2W_ESC, status);
   \   0000012E   0x.... 0x....      ADR.W    R0,`?<Constant "%c%d">`
   \   00000132   0x462A             MOV      R2,R5
   \   00000134   0x211B             MOVS     R1,#+27
   \                     ??AppS2wProcess_StatusNotify_17:
   \   00000136   0x.... 0x....      BL       S2w_Printf
   \   0000013A   0xE007             B.N      ??AppS2wProcess_StatusNotify_19
   1000              }
   1001              else if(status == S2W_EXTPA_INITIAL_BOOT_MSG)
   \                     ??AppS2wProcess_StatusNotify_21:
   \   0000013C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%d\\r\\n">`
   \   00000140   0x2D11             CMP      R5,#+17
   \   00000142   0xBF0C             ITE      EQ 
   \   00000144   0x2111             MOVEQ    R1,#+17
   \   00000146   0x4629             MOVNE    R1,R5
   1002              {
   1003                   //status =  status -1;
   1004                   S2w_Printf("\r\n%d\r\n", status);
   1005              }
   1006              else
   1007              {
   1008                  S2w_Printf("\r\n%d\r\n", status);
   \                     ??AppS2wProcess_StatusNotify_13:
   \   00000148   0x.... 0x....      BL       S2w_Printf
   1009              }
   1010              if((s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)&&(S2W_CON_SUCCESS != status))
   \                     ??AppS2wProcess_StatusNotify_19:
   \   0000014C   0x6838             LDR      R0,[R7, #+0]
   \   0000014E   0x5C20             LDRB     R0,[R4, R0]
   \   00000150   0x2802             CMP      R0,#+2
   \   00000152   0xD105             BNE.N    ??AppS2wProcess_StatusNotify_3
   \   00000154   0x2D07             CMP      R5,#+7
   \   00000156   0xD003             BEQ.N    ??AppS2wProcess_StatusNotify_3
   1011              {
   1012                  s2wSpiFs_Flush();
   \                     ??AppS2wProcess_StatusNotify_10:
   \   00000158   0xE8BD 0x45F1      POP      {R0,R4-R8,R10,LR}
   \   0000015C   0x.... 0x....      B.W      s2wSpiFs_Flush
   1013              }
   1014          }
   \                     ??AppS2wProcess_StatusNotify_3:
   \   00000160   0xE8BD 0x85F1      POP      {R0,R4-R8,R10,PC}  ;; return
   1015          
   1016          
   1017          /**
   1018           ************************************************************************
   1019           * @ingroup S2w-Application
   1020           * @brief Notify the status of an event.
   1021           *   This function is getting called once any asynchronous
   1022           *   events(disassociation) happened.
   1023           * @retval VOID - none.
   1024           ************************************************************************/
   1025          

   \                                 In section .text, align 2, keep-with-next
   1026          PUBLIC VOID
   1027          AppS2wProcess_EventNotify(UINT8 flag)
   1028          {
   \                     AppS2wProcess_EventNotify:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1029          
   1030          
   1031              if(flag)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable114_5
   \   00000006   0xB110             CBZ.N    R0,??AppS2wProcess_EventNotify_0
   1032              {
   1033                  AppS2wHal_Disassociate(flag);
   \   00000008   0x.... 0x....      BL       AppS2wHal_Disassociate
   \   0000000C   0xE025             B.N      ??AppS2wProcess_EventNotify_1
   1034              }
   1035          	else
   1036          	{
   1037              /* close all cids opened
   1038               */
   1039          #ifndef S2W_IP2WIFI_SUPPORT
   1040          		AppS2wHal_HttpdClose(1);
   \                     ??AppS2wProcess_EventNotify_0:
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      BL       AppS2wHal_HttpdClose
   1041          #ifdef GSN_MDNS_ENABLE     
   1042          		AppS2wHal_MdnsDeInit(parentTask);
   1043          #endif	
   1044              AppS2wHal_NetCloseAll(1);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       AppS2wHal_NetCloseAll
   1045          #ifdef S2W_DHCP_SERVER_ENABLE        
   1046          	if(dhcpServerFlags & S2W_DHCP_SRVR_ENABLED)
   \   0000001A   0x.... 0x....      LDR.W    R5,??DataTable120
   \   0000001E   0x7828             LDRB     R0,[R5, #+0]
   \   00000020   0x07C0             LSLS     R0,R0,#+31
   \   00000022   0xD507             BPL.N    ??AppS2wProcess_EventNotify_2
   1047          	{
   1048          		GsnDhcpSrvr_Stop(&dhcpSrvr);
   \   00000024   0x.... 0x....      LDR.W    R0,??DataTable120_1
   \   00000028   0x.... 0x....      BL       GsnDhcpSrvr_Stop
   1049          		dhcpServerFlags &= 0xfe;
   \   0000002C   0x7828             LDRB     R0,[R5, #+0]
   \   0000002E   0xF000 0x00FE      AND      R0,R0,#0xFE
   \   00000032   0x7028             STRB     R0,[R5, #+0]
   1050          	}
   1051          #endif   
   1052              curCid = INVALID_CID;
   \                     ??AppS2wProcess_EventNotify_2:
   \   00000034   0x20FF             MOVS     R0,#+255
   \   00000036   0x7160             STRB     R0,[R4, #+5]
   1053              
   1054              GsnNwIf_Close(&s2wappMainTaskCtxt->if0.nwifCtx);
   \   00000038   0x.... 0x....      LDR.W    R0,??DataTable114_2
   \   0000003C   0x6800             LDR      R0,[R0, #+0]
   \   0000003E   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000042   0x3050             ADDS     R0,R0,#+80
   \   00000044   0x.... 0x....      BL       GsnNwIf_Close
   1055              /* Release L3 connect semaphore if dhcp process is going on */
   1056              if(S2wL3Wait)
   \   00000048   0x.... 0x....      LDR.W    R0,??DataTable121
   \   0000004C   0x6800             LDR      R0,[R0, #+0]
   \   0000004E   0xB120             CBZ.N    R0,??AppS2wProcess_EventNotify_1
   1057                DHCP_notify(GSN_FAILURE,NULL);
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xF04F 0x4000      MOV      R0,#-2147483648
   \   00000056   0x.... 0x....      BL       DHCP_notify
   1058          #endif
   1059          	}
   1060                  /* make s2w associate state disconnected
   1061                   */
   1062               s2wLinkState = S2W_LINK_STATE_DISCONNECTED;
   \                     ??AppS2wProcess_EventNotify_1:
   \   0000005A   0x2000             MOVS     R0,#+0
   \   0000005C   0x7060             STRB     R0,[R4, #+1]
   1063          
   1064              /* call the status notification function
   1065               */
   1066              dataIndex = 0;
   \   0000005E   0x62E0             STR      R0,[R4, #+44]
   1067              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000060   0xF04F 0x31FF      MOV      R1,#-1
   \   00000064   0x.... 0x....      LDR.W    R5,??DataTable122
   \   00000068   0x.... 0x....      BL       ??Subroutine23_0
   1068          //    AppS2wProcess_StatusNotify(S2W_DISASSO_EVT, 0);
   1069              if((!s2wAutoConnState ) ||(( s2wState == S2W_STATE_CMD) && (s2wIsAutoconnected)))
   \                     ??CrossCallReturnLabel_62:
   \   0000006C   0x7920             LDRB     R0,[R4, #+4]
   \   0000006E   0xB118             CBZ.N    R0,??AppS2wProcess_EventNotify_3
   \   00000070   0x7820             LDRB     R0,[R4, #+0]
   \   00000072   0xB968             CBNZ.N   R0,??AppS2wProcess_EventNotify_4
   \   00000074   0x78E0             LDRB     R0,[R4, #+3]
   \   00000076   0xB158             CBZ.N    R0,??AppS2wProcess_EventNotify_4
   1070              {
   1071          #ifdef S2W_ASYNC_MSG
   1072          	if(s2wCurrent.asyncMsgFormat)
   \                     ??AppS2wProcess_EventNotify_3:
   \   00000078   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_43:
   \   0000007C   0xB120             CBZ.N    R0,??AppS2wProcess_EventNotify_5
   1073          	{
   1074          		AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_DISASSO_EVT, 0);
   \   0000007E   0x2100             MOVS     R1,#+0
   \   00000080   0x2003             MOVS     R0,#+3
   \   00000082   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000086   0xE003             B.N      ??AppS2wProcess_EventNotify_4
   1075          
   1076          	}
   1077          	else
   1078          #endif
   1079          	{
   1080          		AppS2wProcess_StatusNotify(S2W_DISASSO_EVT, 0);
   \                     ??AppS2wProcess_EventNotify_5:
   \   00000088   0x2100             MOVS     R1,#+0
   \   0000008A   0x200A             MOVS     R0,#+10
   \   0000008C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1081          	}
   1082              }
   1083              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_EventNotify_4:
   \   00000090   0x4628             MOV      R0,R5
   \   00000092   0x.... 0x....      BL       GsnOsal_SemRelease
   1084              s2wState = S2W_STATE_CMD;
   \   00000096   0x2000             MOVS     R0,#+0
   \   00000098   0x7020             STRB     R0,[R4, #+0]
   1085              s2wIsAutoconnected = 0;
   \   0000009A   0x70E0             STRB     R0,[R4, #+3]
   1086          }
   \   0000009C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine23_0:
   \   00000000   0x4628             MOV      R0,R5
   \   00000002   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0x....             LDR.N    R0,??DataTable114_7
   \   00000002   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   00000006   0x4770             BX       LR
   1087          
   1088          
   1089          /**
   1090           ************************************************************************
   1091           * @ingroup S2w-Application
   1092           * @brief Notify the status of dhcp fail event.
   1093           *   This function sends the status information of dhcp fail event
   1094           *   to the serial interface.
   1095           * @param none.
   1096           * @retval VOID  - none.
   1097           ************************************************************************/
   1098          

   \                                 In section .text, align 2, keep-with-next
   1099          PUBLIC VOID
   1100          AppS2wProcess_DhcpFailNotify()
   1101          {
   \                     AppS2wProcess_DhcpFailNotify:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1102               s2wIsAutoconnected = 0;
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   1103               /* close all cids opened
   1104                */
   1105          #ifndef S2W_IP2WIFI_SUPPORT
   1106               AppS2wHal_NetCloseAll(1);
   1107               curCid = INVALID_CID;
   \                     ??CrossCallReturnLabel_6:
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0x7160             STRB     R0,[R4, #+5]
   1108               s2wState = S2W_STATE_CMD;
   \   0000000A   0x2000             MOVS     R0,#+0
   1109          
   1110          #endif
   1111               dataIndex = 0;
   1112          	 if(s2wappMainTaskCtxt->dpSleep )
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable114_2
   \   00000010   0x7020             STRB     R0,[R4, #+0]
   \   00000012   0x62E0             STR      R0,[R4, #+44]
   \   00000014   0xF646 0x20FC      MOVW     R0,#+27388
   \   00000018   0x6809             LDR      R1,[R1, #+0]
   \   0000001A   0x5840             LDR      R0,[R0, R1]
   \   0000001C   0xB108             CBZ.N    R0,??AppS2wProcess_DhcpFailNotify_0
   1113          	 {
   1114          	 	AppS2w_ExitDpSleep();
   \   0000001E   0x.... 0x....      BL       AppS2w_ExitDpSleep
   1115          	 }
   1116               GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2wProcess_DhcpFailNotify_0:
   \   00000022   0x.... 0x....      BL       ?Subroutine6
   1117              if(!s2wAutoConnState )
   \                     ??CrossCallReturnLabel_67:
   \   00000026   0x7920             LDRB     R0,[R4, #+4]
   \   00000028   0xB958             CBNZ.N   R0,??AppS2wProcess_DhcpFailNotify_1
   1118              {
   1119               if(s2wCurrent.asyncMsgFormat)
   \   0000002A   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_44:
   \   0000002E   0xB120             CBZ.N    R0,??AppS2wProcess_DhcpFailNotify_2
   1120               {
   1121                   AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_DHCP_FAIL_EVT, 0);
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x2008             MOVS     R0,#+8
   \   00000034   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000038   0xE003             B.N      ??AppS2wProcess_DhcpFailNotify_1
   1122               }
   1123               else
   1124              {
   1125                  AppS2wProcess_StatusNotify(S2W_ENOIP, 0);
   \                     ??AppS2wProcess_DhcpFailNotify_2:
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0x200F             MOVS     R0,#+15
   \   0000003E   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1126              }
   1127          	}
   1128              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_DhcpFailNotify_1:
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   00000048   0x.... 0x....      B.W      GsnOsal_SemRelease
   1129          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x.... 0x....      LDR.W    R5,??DataTable122
   \                     ??Subroutine6_0:
   \   00000004   0xF04F 0x31FF      MOV      R1,#-1
   \   00000008                      REQUIRE ??Subroutine23_0
   \   00000008                      ;; // Fall through to label ??Subroutine23_0

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x....             LDR.N    R4,??DataTable114_5
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x70E0             STRB     R0,[R4, #+3]
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x.... 0x....      B.W      AppS2wHal_NetCloseAll
   1130          
   1131          

   \                                 In section .text, align 2, keep-with-next
   1132          PUBLIC VOID
   1133          AppS2wProcess_DhcpIpChangeNotify()
   1134          {
   \                     AppS2wProcess_DhcpIpChangeNotify:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1135          
   1136               s2wIsAutoconnected = 0;
   \   00000002   0x.... 0x....      BL       ?Subroutine2
   1137               /* close all cids opened
   1138                */
   1139          
   1140               AppS2wHal_NetCloseAll(1);
   1141               curCid = INVALID_CID;
   \                     ??CrossCallReturnLabel_5:
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0x7160             STRB     R0,[R4, #+5]
   1142               s2wState = S2W_STATE_CMD;
   \   0000000A   0x2000             MOVS     R0,#+0
   1143               dataIndex = 0;
   1144          	 if(s2wappMainTaskCtxt->dpSleep )
   \   0000000C   0x....             LDR.N    R5,??DataTable114_2
   \   0000000E   0x7020             STRB     R0,[R4, #+0]
   \   00000010   0x62E0             STR      R0,[R4, #+44]
   \   00000012   0xF646 0x20FC      MOVW     R0,#+27388
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x5840             LDR      R0,[R0, R1]
   \   0000001A   0xB108             CBZ.N    R0,??AppS2wProcess_DhcpIpChangeNotify_0
   1145          	 {
   1146          	 	AppS2w_ExitDpSleep();
   \   0000001C   0x.... 0x....      BL       AppS2w_ExitDpSleep
   1147          	 }
   1148               GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2wProcess_DhcpIpChangeNotify_0:
   \   00000020   0x.... 0x....      BL       ?Subroutine17
   1149               if(!s2wAutoConnState )
   \                     ??CrossCallReturnLabel_48:
   \   00000024   0x7920             LDRB     R0,[R4, #+4]
   \   00000026   0xB9C0             CBNZ.N   R0,??AppS2wProcess_DhcpIpChangeNotify_1
   1150               {
   1151              if(s2wCurrent.asyncMsgFormat)
   \   00000028   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_45:
   \   0000002C   0xB120             CBZ.N    R0,??AppS2wProcess_DhcpIpChangeNotify_2
   1152              {
   1153                  AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_DHCP_NEW_IP, 0);
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x200D             MOVS     R0,#+13
   \   00000032   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000036   0xE003             B.N      ??AppS2wProcess_DhcpIpChangeNotify_3
   1154          
   1155              }
   1156              else
   1157              {
   1158                  AppS2wProcess_StatusNotify(S2W_ENEWIP, 0);
   \                     ??AppS2wProcess_DhcpIpChangeNotify_2:
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x2013             MOVS     R0,#+19
   \   0000003C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1159          }
   1160              AppS2wHdrAndIpv4_Print();
   \                     ??AppS2wProcess_DhcpIpChangeNotify_3:
   \   00000040   0x.... 0x....      BL       AppS2wHdrAndIpv4_Print
   1161              S2w_Printf("\r\n");
   \   00000044   0x....             ADR.N    R0,??DataTable114  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000046   0x.... 0x....      BL       S2w_Printf
   1162              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   0000004A   0x6829             LDR      R1,[R5, #+0]
   \   0000004C   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000050   0x5C40             LDRB     R0,[R0, R1]
   \   00000052   0x2802             CMP      R0,#+2
   \   00000054   0xBF08             IT       EQ 
   \   00000056   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1163              {
   1164                  s2wSpiFs_Flush();
   1165              }
   1166              }
   1167              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_DhcpIpChangeNotify_1:
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000060   0x.... 0x....      B.W      GsnOsal_SemRelease
   1168          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x.... 0x....      LDR.W    R6,??DataTable136_12
   \   00000004   0xF04F 0x31FF      MOV      R1,#-1
   \   00000008   0x4630             MOV      R0,R6
   \   0000000A   0x.... 0x....      B.W      GsnOsal_SemAcquire
   1169          
   1170          

   \                                 In section .text, align 2, keep-with-next
   1171           PUBLIC VOID
   1172           AppS2wProcess_DhcpStop()
   1173           {
   1174             GsnNwIf_DhcpStop(&s2wappMainTaskCtxt->if0.nwifCtx);
   \                     AppS2wProcess_DhcpStop:
   \   00000000   0x....             LDR.N    R0,??DataTable114_2
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000008   0x3050             ADDS     R0,R0,#+80
   \   0000000A   0x.... 0x....      B.W      GsnNwIf_DhcpStop
   1175           }
   1176          
   1177           

   \                                 In section .text, align 2, keep-with-next
   1178          PUBLIC VOID
   1179          AppS2wProcess_IpConflict()
   1180           {
   \                     AppS2wProcess_IpConflict:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   1181          	UINT8 status;
   1182              
   1183              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000002   0x.... 0x....      BL       ?Subroutine18
   1184               if(s2wCurrent.asyncMsgFormat)
   \                     ??CrossCallReturnLabel_50:
   \   00000006   0x....             LDR.N    R5,??DataTable114_7
   \   00000008   0xF895 0x01D8      LDRB     R0,[R5, #+472]
   \   0000000C   0xB120             CBZ.N    R0,??AppS2wProcess_IpConflict_0
   1185              {
   1186                  AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_DHCP_IP_CONFLICT, 0);
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2019             MOVS     R0,#+25
   \   00000012   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000016   0xE003             B.N      ??AppS2wProcess_IpConflict_1
   1187          
   1188              }
   1189              else
   1190              {
   1191                  AppS2wProcess_StatusNotify(S2W_DHCP_IP_CONFLICT, 0);
   \                     ??AppS2wProcess_IpConflict_0:
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0x201F             MOVS     R0,#+31
   \   0000001C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1192              }
   1193              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_IpConflict_1:
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       GsnOsal_SemRelease
   1194              
   1195               s2wCurrent.netConf.dhcp = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF885 0x0188      STRB     R0,[R5, #+392]
   1196               status = AppS2wHal_NetworkConfig(&s2wCurrent.netConf);
   1197              if((status == S2W_SUCCESS) )
   \   0000002C   0xF505 0x70C4      ADD      R0,R5,#+392
   \   00000030   0x.... 0x....      BL       AppS2wHal_NetworkConfig
   \   00000034   0xB930             CBNZ.N   R0,??AppS2wProcess_IpConflict_2
   1198                {
   1199                   nx_arp_gratuitous_send(&s2wappMainTaskCtxt->if0.nwifCtx.ipHndl,NULL);
   \   00000036   0x....             LDR.N    R0,??DataTable114_2
   \   00000038   0x6800             LDR      R0,[R0, #+0]
   \   0000003A   0x2100             MOVS     R1,#+0
   \   0000003C   0xF500 0x50A3      ADD      R0,R0,#+5216
   \   00000040   0x.... 0x....      BL       _nxe_arp_gratuitous_send
   1200                }
   1201               S2wL3Wait = FALSE;
   \                     ??AppS2wProcess_IpConflict_2:
   \   00000044   0x.... 0x....      LDR.W    R0,??DataTable121
   \   00000048   0x2100             MOVS     R1,#+0
   \   0000004A   0x6001             STR      R1,[R0, #+0]
   1202           }
   \   0000004C   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x....             LDR.N    R4,??DataTable122
   \   00000002   0xF04F 0x31FF      MOV      R1,#-1
   \   00000006   0x4620             MOV      R0,R4
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire
   1203           
   1204          /**
   1205           ************************************************************************
   1206           * @ingroup S2w-Application
   1207           * @brief Accept a new connection for a TCP server
   1208           * @param serverCid - IN connection identifier of the server
   1209           * @param newCid    - IN connection identifier of the new connection
   1210           * @param ip        - IN IP address (only for new connection notification)
   1211           * @param port      - IN Port (only for new connection notification)
   1212           * @return S2W_SUCCESS on success.  If any other status, the connection must be
   1213           *                                   closed.
   1214           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1215          PUBLIC UINT8
   1216          AppS2wProcess_NetAccept(UINT8 serverCid, UINT8 newCid, UINT8 *ip,UINT16 port)
   1217          {
   \                     AppS2wProcess_NetAccept:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1218              if (s2wIsAutoconnected)
   \   00000004   0x....             LDR.N    R5,??DataTable114_5
   \   00000006   0xB093             SUB      SP,SP,#+76
   \   00000008   0x4683             MOV      R11,R0
   \   0000000A   0x78E8             LDRB     R0,[R5, #+3]
   \   0000000C   0x4688             MOV      R8,R1
   \   0000000E   0x4614             MOV      R4,R2
   \   00000010   0x461F             MOV      R7,R3
   \   00000012   0xB130             CBZ.N    R0,??AppS2wProcess_NetAccept_0
   1219              {
   1220                  /* TCP server already has a client, reject this one */
   1221                  if (curCid != INVALID_CID)
   \   00000014   0x7968             LDRB     R0,[R5, #+5]
   \   00000016   0x28FF             CMP      R0,#+255
   \   00000018   0xBF18             IT       NE 
   \   0000001A   0x2001             MOVNE    R0,#+1
   1222                  {
   1223                      return S2W_FAILURE;
   \   0000001C   0xD16C             BNE.N    ??AppS2wProcess_NetAccept_1
   1224                  }
   1225          
   1226                  curCid = newCid;
   \   0000001E   0xF885 0x8005      STRB     R8,[R5, #+5]
   1227              }
   1228          
   1229             GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2wProcess_NetAccept_0:
   \   00000022   0x.... 0x....      LDR.W    R9,??DataTable122
   \   00000026   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_32:
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable127_1
   \   0000002E   0x7929             LDRB     R1,[R5, #+4]
   \   00000030   0x7900             LDRB     R0,[R0, #+4]
   \   00000032   0x2900             CMP      R1,#+0
   \   00000034   0xBF08             IT       EQ 
   \   00000036   0x2800             CMPEQ    R0,#+0
   \   00000038   0xD14A             BNE.N    ??AppS2wProcess_NetAccept_2
   1230              if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   1231              {
   1232          #ifdef S2W_ASYNC_MSG
   1233          	if(s2wCurrent.asyncMsgFormat)
   \   0000003A   0x.... 0x....      LDR.W    R10,??DataTable114_7
   \   0000003E   0x.... 0x....      ADR.W    R5,`?<Constant " %x %x %d.%d.%d.%d %d\\r\\n">`
   \   00000042   0xF89A 0x01D8      LDRB     R0,[R10, #+472]
   \   00000046   0xB310             CBZ.N    R0,??AppS2wProcess_NetAccept_3
   1234          	{
   1235          	   UINT32 argLen=0;
   1236          	   INT8 arr[50];
   1237          	   argLen = sprintf(arr," %x %x %d.%d.%d.%d %d\r\n",serverCid, newCid, ip[0], ip[1],ip[2], ip[3], port);
   \   00000048   0x9704             STR      R7,[SP, #+16]
   \   0000004A   0x4643             MOV      R3,R8
   \   0000004C   0x78E0             LDRB     R0,[R4, #+3]
   \   0000004E   0x9003             STR      R0,[SP, #+12]
   \   00000050   0x465A             MOV      R2,R11
   \   00000052   0x78A0             LDRB     R0,[R4, #+2]
   \   00000054   0x9002             STR      R0,[SP, #+8]
   \   00000056   0x4629             MOV      R1,R5
   \   00000058   0x7860             LDRB     R0,[R4, #+1]
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0x7820             LDRB     R0,[R4, #+0]
   \   0000005E   0x9000             STR      R0,[SP, #+0]
   \   00000060   0xA805             ADD      R0,SP,#+20
   \   00000062   0x.... 0x....      BL       sprintf
   \   00000066   0x4606             MOV      R6,R0
   1238          	   S2w_Printf("%c%c%x", S2W_ESC,'A',S2W_ASYNC_CON_SUCCESS);
   \   00000068   0x2301             MOVS     R3,#+1
   \   0000006A   0x.... 0x....      BL       ?Subroutine14
   1239          	   const char* msg = S2W_AsyncStatusList[S2W_ASYNC_CON_SUCCESS];
   1240          
   1241          	   if (s2wCurrent.serialPortConf.commonConf.verbose)
   \                     ??CrossCallReturnLabel_40:
   \   0000006E   0xF89A 0x01B1      LDRB     R0,[R10, #+433]
   \   00000072   0xB128             CBZ.N    R0,??AppS2wProcess_NetAccept_4
   1242          	   {
   1243          	       S2w_Printf("%02x%s",(strlen(msg) + argLen),msg);
   \   00000074   0x.... 0x....      ADR.W    R2,`?<Constant "CONNECT">`
   \   00000078   0x.... 0x....      LDR.W    R0,??DataTable127_2
   \   0000007C   0x1DF1             ADDS     R1,R6,#+7
   \   0000007E   0xE003             B.N      ??AppS2wProcess_NetAccept_5
   1244          	   }
   1245          	   else
   1246          	   {
   1247          	       S2w_Printf("%02x%d",(argLen + 1),S2W_ASYNC_CON_SUCCESS );
   \                     ??AppS2wProcess_NetAccept_4:
   \   00000080   0x2201             MOVS     R2,#+1
   \   00000082   0x1C71             ADDS     R1,R6,#+1
   \   00000084   0x.... 0x....      LDR.W    R0,??DataTable127_3
   \                     ??AppS2wProcess_NetAccept_5:
   \   00000088   0x.... 0x....      BL       S2w_Printf
   \   0000008C   0xE00C             B.N      ??AppS2wProcess_NetAccept_6
   1248                 }
   1249          	   //AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_CON_SUCCESS, argLen,S2W_INVALID_INTERFACE);
   1250          	}
   1251          	else
   1252          #endif
   1253          
   1254              {
   1255                  if (s2wCurrent.serialPortConf.commonConf.verbose)
   \                     ??AppS2wProcess_NetAccept_3:
   \   0000008E   0xF89A 0x01B1      LDRB     R0,[R10, #+433]
   \   00000092   0xB120             CBZ.N    R0,??AppS2wProcess_NetAccept_7
   1256                  {
   1257                      S2w_Printf("\r\nCONNECT");
   \   00000094   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCONNECT">`
   \   00000098   0x.... 0x....      BL       S2w_Printf
   \   0000009C   0xE004             B.N      ??AppS2wProcess_NetAccept_6
   1258                  }
   1259                  else
   1260                  {
   1261                      S2w_Printf("\r\n%x", S2W_CON_SUCCESS);
   \                     ??AppS2wProcess_NetAccept_7:
   \   0000009E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%x">`
   \   000000A2   0x2107             MOVS     R1,#+7
   \   000000A4   0x.... 0x....      BL       S2w_Printf
   1262                  }
   1263              }
   1264          #ifdef S2W_IPv6_SUPPORT
   1265                      if(s2wCidList[serverCid].addrType & ADDR_TYPE_IPv6)
   1266                      {
   1267          
   1268                        INT8 ipv6str[INET6_ADDRSTRLEN];
   1269                        S2w_ntop((ULONG*)ip,ipv6str);
   1270                        S2w_Printf("%x %x %s %d\r\n", serverCid, newCid,ipv6str,port );  
   1271                      }
   1272                      else
   1273          #endif 
   1274              S2w_Printf(" %x %x %d.%d.%d.%d %d\r\n",serverCid, newCid,ip[3], ip[2], ip[1], ip[0],port) ;
   \                     ??AppS2wProcess_NetAccept_6:
   \   000000A8   0x9703             STR      R7,[SP, #+12]
   \   000000AA   0x4642             MOV      R2,R8
   \   000000AC   0x7820             LDRB     R0,[R4, #+0]
   \   000000AE   0x9002             STR      R0,[SP, #+8]
   \   000000B0   0x4659             MOV      R1,R11
   \   000000B2   0x7860             LDRB     R0,[R4, #+1]
   \   000000B4   0x9001             STR      R0,[SP, #+4]
   \   000000B6   0x78A0             LDRB     R0,[R4, #+2]
   \   000000B8   0x9000             STR      R0,[SP, #+0]
   \   000000BA   0x4628             MOV      R0,R5
   \   000000BC   0x78E3             LDRB     R3,[R4, #+3]
   \   000000BE   0x.... 0x....      BL       S2w_Printf
   1275                  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000000C2   0x.... 0x....      BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_53:
   \   000000C6   0x2802             CMP      R0,#+2
   \   000000C8   0xD113             BNE.N    ??CrossCallReturnLabel_16
   1276                  {
   1277                       s2wSpiFs_Flush();
   \   000000CA   0x.... 0x....      BL       s2wSpiFs_Flush
   \   000000CE   0xE010             B.N      ??CrossCallReturnLabel_16
   1278          	    }
   1279          	}
   1280          	else // auto mode
   1281          	{
   1282                  if(profile_params.autoConnect)
   \                     ??AppS2wProcess_NetAccept_2:
   \   000000D0   0xB178             CBZ.N    R0,??CrossCallReturnLabel_16
   1283          		{
   1284          			s2wState = S2W_STATE_DATA_AUTO;
   \   000000D2   0x200D             MOVS     R0,#+13
   \   000000D4   0x7028             STRB     R0,[R5, #+0]
   1285          			s2wIsAutoconnected = 1;
   \   000000D6   0x2001             MOVS     R0,#+1
   \   000000D8   0x70E8             STRB     R0,[R5, #+3]
   1286          			s2wAutoConnState = S2W_AUTO_CONN_DATA_PIPE;
   \   000000DA   0x7128             STRB     R0,[R5, #+4]
   1287          			S2w_AsyncMsgGpioInit(); // make the async gpio as  high to indicate that the data mode ready
   \   000000DC   0x.... 0x....      BL       S2w_AsyncMsgGpioInit
   1288          			S2w_AsyncMsgGpioOp(1);
   \   000000E0   0x2001             MOVS     R0,#+1
   \   000000E2   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   1289          					// start a gpio cb for auto mode exit
   1290          			GsnGpio_Init(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP , APP_S2W_AUTO_EXIT_GPIO_BIT_MAP );
   \   000000E6   0x.... 0x....      BL       ?Subroutine5
   1291          			/* register callback for GPIO interrupt */
   1292          			GsnGpio_IntCbRegister(APP_S2W_AUTO_EXIT_GPIO_NUM,s2wAutoExit_CB,NULL);
   \                     ??CrossCallReturnLabel_12:
   \   000000EA   0x.... 0x....      BL       ?Subroutine21
   1293          			/*enable interrupt*/
   1294          			GsnGpio_NEIntEnable(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP);
   \                     ??CrossCallReturnLabel_56:
   \   000000EE   0x.... 0x....      BL       ?Subroutine8
   1295          		}
   1296          
   1297          	}
   1298              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_16:
   \   000000F2   0x.... 0x....      BL       ?Subroutine10
   1299              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_26:
   \   000000F6   0x2000             MOVS     R0,#+0
   \                     ??AppS2wProcess_NetAccept_1:
   \   000000F8   0xB013             ADD      SP,SP,#+76
   \   000000FA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1300          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4648             MOV      R0,R9
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x4648             MOV      R0,R9
   \   00000002   0x.... 0x....      B.W      GsnOsal_SemRelease

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x.... 0x....      LDR.W    R1,??DataTable132
   \   00000004   0x6809             LDR      R1,[R1, #+0]
   \   00000006   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000000A   0x5C40             LDRB     R0,[R0, R1]
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0x2241             MOVS     R2,#+65
   \   00000002   0x211B             MOVS     R1,#+27
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "%c%c%x">`
   \   00000008   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x2200             MOVS     R2,#+0
   \   00000002   0x....             LDR.N    R1,??DataTable136_20
   \   00000004   0x2008             MOVS     R0,#+8
   \   00000006   0x.... 0x....      B.W      GsnGpio_IntCbRegister

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0xF44F 0x7080      MOV      R0,#+256
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      B.W      GsnGpio_NEIntEnable

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0xF44F 0x7280      MOV      R2,#+256
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      B.W      GsnGpio_Init
   1301          
   1302          
   1303          /**
   1304           ************************************************************************
   1305           * @ingroup S2w-Application.
   1306           * @brief Receive data from a network connection.
   1307           * @param cid - IN connection identifier on which the data is received.
   1308           * @param buf - IN Pointer to data buffer.
   1309           * @param len - IN Total number of bytes.
   1310           * @param ip  - IN IP address of the client from which the data was received
   1311           *                    (only for UDP servers)
   1312           * @param port- IN Port of the client from which the data was received (only
   1313           *                 for UDP servers)
   1314           * @retval VOID - none.
   1315           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   1316          PUBLIC VOID
   1317          AppS2wProcess_NetRx(UINT8 cid, void *buf, UINT32 len, UINT8 *ip,
   1318                              UINT16 port)
   1319          {
   \                     AppS2wProcess_NetRx:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   1320          #ifdef S2W_IPv6_SUPPORT
   1321              INT8 ipv6str[INET6_ADDRSTRLEN];
   1322          #endif
   1323              UINT8 *p = (UINT8 *) buf;
   1324              s2wRxBytes += len;
   \   00000004   0x....             LDR.N    R4,??DataTable114_5
   1325              if (s2wState == S2W_STATE_DATA_AUTO)
   \   00000006   0x.... 0x....      LDR.W    R9,??DataTable114_2
   \   0000000A   0x4688             MOV      R8,R1
   \   0000000C   0x6A61             LDR      R1,[R4, #+36]
   \   0000000E   0x4693             MOV      R11,R2
   \   00000010   0x4459             ADD      R1,R11,R1
   \   00000012   0x6261             STR      R1,[R4, #+36]
   \   00000014   0xB085             SUB      SP,SP,#+20
   \   00000016   0x7821             LDRB     R1,[R4, #+0]
   \   00000018   0x9D0E             LDR      R5,[SP, #+56]
   \   0000001A   0x461F             MOV      R7,R3
   \   0000001C   0xF646 0x26F8      MOVW     R6,#+27384
   \   00000020   0x290D             CMP      R1,#+13
   \   00000022   0xD126             BNE.N    ??AppS2wProcess_NetRx_0
   1326              {
   1327                  if (port)
   \   00000024   0xB2AD             UXTH     R5,R5
   \   00000026   0xB1B5             CBZ.N    R5,??AppS2wProcess_NetRx_1
   1328                  {
   1329                      /*
   1330                       * In UDP server auto-connect mode, any data received
   1331                       * on the serial port is transmitted to the host/port
   1332                       * from which data was last received.
   1333                       */
   1334          
   1335                      curCid = cid;
   \   00000028   0x7160             STRB     R0,[R4, #+5]
   1336          #ifdef S2W_IPv6_SUPPORT
   1337                      if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1338                        memcpy(destIpv6Addr,ip,sizeof(destIpv6Addr));
   1339          #endif //S2W_IPv6_SUPPORT
   1340                      memcpy(destAddr, ip, sizeof(destAddr));
   \   0000002A   0x2204             MOVS     R2,#+4
   \   0000002C   0x4639             MOV      R1,R7
   \   0000002E   0xF104 0x000C      ADD      R0,R4,#+12
   \   00000032   0x.... 0x....      BL       memcpy
   1341                      // put it network order
   1342                      *(ULONG*)destAddr = ntohl(*(ULONG*)destAddr);
   \   00000036   0x68E0             LDR      R0,[R4, #+12]
   1343                      destPort = port;
   \   00000038   0x83E5             STRH     R5,[R4, #+30]
   \   0000003A   0x0A01             LSRS     R1,R0,#+8
   \   0000003C   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000040   0xEA41 0x6010      ORR      R0,R1,R0, LSR #+24
   \   00000044   0x68E1             LDR      R1,[R4, #+12]
   \   00000046   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   0000004A   0xEA40 0x2001      ORR      R0,R0,R1, LSL #+8
   \   0000004E   0x68E1             LDR      R1,[R4, #+12]
   \   00000050   0xEA40 0x6001      ORR      R0,R0,R1, LSL #+24
   \   00000054   0x60E0             STR      R0,[R4, #+12]
   1344                  }
   1345          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1346                  AppS2wHal_CharNPut(p, len);
   \                     ??AppS2wProcess_NetRx_1:
   \   00000056   0x4659             MOV      R1,R11
   \   00000058   0x4640             MOV      R0,R8
   \   0000005A   0x.... 0x....      BL       AppS2wHal_CharNPut
   1347                  if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   0000005E   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000062   0x5C30             LDRB     R0,[R6, R0]
   \   00000064   0x2802             CMP      R0,#+2
   \   00000066   0xD15B             BNE.N    ??AppS2wProcess_NetRx_2
   1348                  {
   1349                      s2wSpiFs_Flush();
   \   00000068   0xB005             ADD      SP,SP,#+20
   \   0000006A   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   0000006E   0x.... 0x....      B.W      s2wSpiFs_Flush
   1350                    }
   1351          #else
   1352                  AppS2wHal_CharNPut1(p, len);
   1353                 if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   1354                 {
   1355                     s2wSpiFs_Flush1();
   1356                 }
   1357          #endif
   1358                  return;
   1359              }
   1360              if(s2wCidList[cid].sd != CID_NOTINUSE) // if the cid is closed in between by nclose command(fix for issue no:5537 )
   \                     ??AppS2wProcess_NetRx_0:
   \   00000072   0x4604             MOV      R4,R0
   \   00000074   0xF44F 0x7094      MOV      R0,#+296
   \   00000078   0x.... 0x....      LDR.W    R1,??DataTable128
   \   0000007C   0xFB00 0x1004      MLA      R0,R0,R4,R1
   \   00000080   0x69C0             LDR      R0,[R0, #+28]
   \   00000082   0xF110 0x0F01      CMN      R0,#+1
   \   00000086   0xD04B             BEQ.N    ??AppS2wProcess_NetRx_2
   \   00000088   0xF04F 0x31FF      MOV      R1,#-1
   \   0000008C   0x.... 0x....      LDR.W    R0,??DataTable122
   1361          	{
   1362          
   1363          
   1364          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1365              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000090   0x.... 0x....      BL       GsnOsal_SemAcquire
   1366          #else
   1367              GsnOsal_SemAcquire(&s2wSyncSemID1, GSN_OSAL_WAIT_FOREVER);
   1368          #endif
   1369          
   1370              if (port)
   \   00000094   0x.... 0x....      LDR.W    R10,??DataTable114_7
   \   00000098   0xF89A 0x01D4      LDRB     R0,[R10, #+468]
   \   0000009C   0xB2AD             UXTH     R5,R5
   \   0000009E   0xB19D             CBZ.N    R5,??AppS2wProcess_NetRx_3
   1371              {
   1372                  if(!s2wCurrent.bulkTxEnable)
   \   000000A0   0x78FB             LDRB     R3,[R7, #+3]
   \   000000A2   0x78B9             LDRB     R1,[R7, #+2]
   \   000000A4   0x787A             LDRB     R2,[R7, #+1]
   \   000000A6   0x783F             LDRB     R7,[R7, #+0]
   \   000000A8   0x9503             STR      R5,[SP, #+12]
   \   000000AA   0x9702             STR      R7,[SP, #+8]
   \   000000AC   0x9201             STR      R2,[SP, #+4]
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0x9100             STR      R1,[SP, #+0]
   \   000000B2   0x4622             MOV      R2,R4
   \   000000B4   0xBF07             ITTEE    EQ 
   \   000000B6   0x211B             MOVEQ    R1,#+27
   \   000000B8   0x.... 0x....      ADREQ.W  R0,`?<Constant "%cu%x%d.%d.%d.%d %d\\t">`
   \   000000BC   0x211B             MOVNE    R1,#+27
   \   000000BE   0x.... 0x....      ADRNE.W  R0,`?<Constant "%cy%x%d.%d.%d.%d %d\\t">`
   1373                  {
   1374          #ifdef S2W_IPv6_SUPPORT
   1375                      if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1376                      {
   1377                      S2w_ntop((ULONG*)ip,ipv6str);
   1378          
   1379          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1380                      S2w_Printf("%cu%x %s %d\t", S2W_ESC, cid,ipv6str,port );  
   1381          #else
   1382                          S2w_Printf1("%cu%x %s %d\t", S2W_ESC, cid,ipv6str,port );
   1383          #endif
   1384                      }
   1385                      else
   1386          #endif //S2W_IPv6_SUPPORT
   1387                      {
   1388          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1389                      S2w_Printf("%cu%x%d.%d.%d.%d %d\t", S2W_ESC, cid,
   1390                              ip[3], ip[2], ip[1], ip[0], port);
   1391          #else
   1392                          S2w_Printf1("%cu%x%d.%d.%d.%d %d\t", S2W_ESC, cid,
   1393                              ip[3], ip[2], ip[1], ip[0], port);
   1394          #endif
   1395                      }
   1396                  }
   1397                  else
   1398                  {
   1399          #ifdef S2W_IPv6_SUPPORT
   1400                      if(s2wCidList[cid].addrType & ADDR_TYPE_IPv6)
   1401                      {
   1402                      S2w_ntop((ULONG*)ip,ipv6str);
   1403          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1404                      S2w_Printf("%cy%x %s %d\t", S2W_ESC, cid,ipv6str,port);  
   1405          #else
   1406                          S2w_Printf1("%cy%x %s %d\t", S2W_ESC, cid,ipv6str,port);
   1407          #endif
   1408                      }
   1409                      else
   1410          #endif //S2W_IPv6_SUPPORT
   1411                      {
   1412          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1413                      S2w_Printf("%cy%x%d.%d.%d.%d %d\t", S2W_ESC, cid,
   1414                                         ip[3], ip[2], ip[1], ip[0],port );
   \   000000C2   0x.... 0x....      BL       S2w_Printf
   \   000000C6   0xE00A             B.N      ??AppS2wProcess_NetRx_4
   1415          #else
   1416                           S2w_Printf1("%cy%x%d.%d.%d.%d %d\t", S2W_ESC, cid,
   1417          				             ip[3], ip[2], ip[1], ip[0],port );
   1418          #endif
   1419                      }
   1420                  }
   1421              }
   1422              else
   1423              {
   1424          
   1425                  if(!s2wCurrent.bulkTxEnable)
   \                     ??AppS2wProcess_NetRx_3:
   \   000000C8   0x2800             CMP      R0,#+0
   \   000000CA   0x4622             MOV      R2,R4
   \   000000CC   0xBF07             ITTEE    EQ 
   \   000000CE   0x211B             MOVEQ    R1,#+27
   \   000000D0   0x.... 0x....      ADREQ.W  R0,`?<Constant "%cS%x">`
   \   000000D4   0x211B             MOVNE    R1,#+27
   \   000000D6   0x.... 0x....      ADRNE.W  R0,`?<Constant "%cZ%x">`
   1426          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1427                      S2w_Printf("%cS%x", S2W_ESC, cid);
   1428          #else
   1429                      S2w_Printf1("%cS%x", S2W_ESC, cid);
   1430          #endif
   1431                  else
   1432          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1433                      S2w_Printf("%cZ%x", S2W_ESC, cid);
   \   000000DA   0x.... 0x....      BL       S2w_Printf
   1434          #else
   1435                      S2w_Printf1("%cZ%x", S2W_ESC, cid);
   1436          #endif
   1437              }
   1438          
   1439              if(s2wCurrent.bulkTxEnable)
   \                     ??AppS2wProcess_NetRx_4:
   \   000000DE   0xF89A 0x01D4      LDRB     R0,[R10, #+468]
   \   000000E2   0xB120             CBZ.N    R0,??AppS2wProcess_NetRx_5
   1440              {
   1441          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1442                  S2w_Printf("%04d", len);
   \   000000E4   0x4659             MOV      R1,R11
   \   000000E6   0x.... 0x....      ADR.W    R0,`?<Constant "%04d">`
   \   000000EA   0x.... 0x....      BL       S2w_Printf
   1443          #else
   1444                  S2w_Printf1("%04d", len);
   1445          #endif
   1446              }
   1447          
   1448          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1449              AppS2wHal_CharNPut(p, len);
   \                     ??AppS2wProcess_NetRx_5:
   \   000000EE   0x4659             MOV      R1,R11
   \   000000F0   0x4640             MOV      R0,R8
   \   000000F2   0x.... 0x....      BL       AppS2wHal_CharNPut
   1450          #else
   1451              AppS2wHal_CharNPut1(p, len);
   1452          #endif
   1453          
   1454              if(!s2wCurrent.bulkTxEnable)
   \   000000F6   0xF89A 0x01D4      LDRB     R0,[R10, #+468]
   \   000000FA   0xB918             CBNZ.N   R0,??AppS2wProcess_NetRx_6
   1455          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1456                  S2w_Printf("%cE", S2W_ESC);
   \   000000FC   0x211B             MOVS     R1,#+27
   \   000000FE   0x....             ADR.N    R0,??DataTable114_4  ;; "%cE"
   \   00000100   0x.... 0x....      BL       S2w_Printf
   1457          #else
   1458                  S2w_Printf1("%cE", S2W_ESC);
   1459          #endif
   1460          
   1461          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1462                 if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wProcess_NetRx_6:
   \   00000104   0xF8D9 0x0000      LDR      R0,[R9, #+0]
   \   00000108   0x5C30             LDRB     R0,[R6, R0]
   \   0000010A   0x2802             CMP      R0,#+2
   \   0000010C   0xBF08             IT       EQ 
   \   0000010E   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1463                 {
   1464                     s2wSpiFs_Flush();
   1465                 }
   1466          
   1467          #else
   1468                 if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   1469                 {
   1470                     s2wSpiFs_Flush1();
   1471                 }
   1472          #endif
   1473          
   1474          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1475              GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000112   0xB005             ADD      SP,SP,#+20
   \   00000114   0xE8BD 0x4FF0      POP      {R4-R11,LR}
   \   00000118   0x.... 0x....      LDR.W    R0,??DataTable122
   \   0000011C   0x.... 0x....      B.W      GsnOsal_SemRelease
   1476          #else
   1477              GsnOsal_SemRelease(&s2wSyncSemID1);
   1478          #endif
   1479          }
   1480          }
   \                     ??AppS2wProcess_NetRx_2:
   \   00000120   0xB005             ADD      SP,SP,#+20
   \   00000122   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   1481          
   1482          
   1483          
   1484          
   1485          
   1486          UINT8 auto_esc;
   1487          extern PUBLIC GSN_OSAL_QUEUE_T s2wSerialInputTaskQueue;
   1488          /**
   1489           ************************************************************************
   1490           * @ingroup S2w-Application.
   1491           * @brief Process the serial data from the host.
   1492           *    This function continuously polls the serial port, classifies the incoming
   1493           *    characters into Serial2WiFi data and command based on the serial data
   1494           *    encoding.
   1495           *    This function should be called from serial input-output handler thread each
   1496           *    time when a character arrives on serial interface.
   1497           ************************************************************************/

   \                                 In section .text, align 4, keep-with-next
   1498          PUBLIC VOID
   1499          AppS2wProcess_SerialInput(VOID)
   1500          {
   \                     AppS2wProcess_SerialInput:
   \   00000000   0xE92D 0x4BF0      PUSH     {R4-R9,R11,LR}
   \   00000004   0xB08A             SUB      SP,SP,#+40
   1501          	static char esc[4] = { '+', '+', '+', '+' };
   1502              static UINT8 ipnum;
   1503              static char atoibuf[6];
   1504              static UINT8 digits;
   1505              UINT8 status;
   1506              static UINT8 prev = 0;
   1507              static UINT8 prevprev = 0;
   1508              UINT8 ch,softFlow;
   1509            
   1510          	UINT8 respTimeOut=0;
   \   00000006   0xF04F 0x0800      MOV      R8,#+0
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable132
   \   0000000E   0x.... 0x....      LDR.W    R9,??DataTable122
   \   00000012   0x.... 0x....      LDR.W    R7,??DataTable132_1
   \   00000016   0x.... 0x....      LDR.W    R11,??DataTable130
   \   0000001A   0xE001             B.N      ??AppS2wProcess_SerialInput_1
   1511              UINT32 elementType;
   1512          #ifdef S2W_DUAL_INTERFACE_SUPPORT
   1513              UINT32 msg = 0;
   1514          #endif
   1515          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   1516              while (AppS2wHal_CharGet(&ch) == 1)
   1517              {
   1518          #else  // for dual interface use non blocking call
   1519              while(1)
   1520              {
   1521                  AppS2wHal_CharGet(&ch);
   1522                  // pend on a message queue
   1523                  GsnOsal_QueueGet(&s2wSerialInputTaskQueue, (UINT8 *)&msg, GSN_OSAL_WAIT_FOREVER);
   1524          
   1525          #endif
   1526          
   1527          
   1528                  if ((s2wCurrent.serialPortConf.commonConf.echo) && (s2wState == S2W_STATE_CMD))
   1529                  {
   1530                      if (ch != S2W_ESC)
   1531                      {
   1532                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1533                          S2w_PutChar(ch);
   1534                          GsnOsal_SemRelease(&s2wSyncSemID);
   1535                      }
   1536                  }
   1537                  // switch to differnt state depends on the previous byte
   1538                  switch (s2wState)
   1539                  {
   1540                      /* special command comes with the length */
   1541          
   1542                      case S2W_STATE_BULK_DATA:
   1543                          /* we must read 4 byte ascii lenth
   1544                          and then convert it to binary value */
   1545                      {
   1546                          //UINT8 *dataBufferPointer;
   1547                          lengthConvertIndex++;
   1548                          /* next after cid  char 2 to 5 */
   1549                          lengthSpecialCmd *= 10;
   1550                          lengthSpecialCmd += (ch - '0'); /* assuming number will come*/
   1551                          if(lengthConvertIndex == 4)
   1552                          {
   1553                              AppS2wHal_CharNGet(dataBuffer, lengthSpecialCmd);
   1554                              dataIndex = lengthSpecialCmd;
   1555          
   1556                              AppS2w_DataTransmit(dataBuffer);
   1557                              s2wState =  S2W_STATE_CMD;
   1558                          }
   1559                      }
   1560                      break;
   1561                      case S2W_STATE_DATA_AUTO:
   1562                      {
   1563                          if (ch == '+' && auto_esc < 3 && 
   1564          					(s2wCurrent.autoExitTimeout))
   1565          		        {
   1566          		             auto_esc++;
   1567          		             AppS2wHal_TimerStop(&nagleTimer);
   1568          
   1569          		             AppS2wHal_TimerStart(&auto_esc_timer,
   1570          		               s2wCurrent.autoExitTimeout);
   1571          
   1572          		        }
   1573          		        else if (auto_esc && s2wCurrent.autoExitTimeout)
   1574          		        {
   1575          		             UINT8   i;
   1576          		             AppS2wHal_TimerStop(&auto_esc_timer);
   1577          
   1578          		             esc[auto_esc] = ch;
   1579          		             i = 0;
   1580          		             AppS2wHal_TimerStart(&nagleTimer,
   1581          		                    s2wCurrent.registers[S2W_REG_NAGLE_WAIT_TIME]);
   1582          		             while (i <= auto_esc)
   1583          		             {
   1584          		                 AppS2w_DataCharProcess(esc[i++]);
   1585          		             }
   1586          
   1587          		             esc[auto_esc] = '+';
   1588          		             auto_esc = 0;
   1589          		        }
   1590          		        else
   1591          			    {
   1592          		             auto_esc = 0;
   1593          		             AppS2w_DataCharProcess(ch);
   1594          
   1595          		        }
   1596          
   1597          			}
   1598          			break;
   1599                      case S2W_STATE_CMD:
   1600                          if (ch == S2W_ESC)
   1601                          {
   1602                              s2wState = S2W_STATE_CMD_ESC;
   \                     ??AppS2wProcess_SerialInput_2:
   \   0000001C   0x2003             MOVS     R0,#+3
   \                     ??AppS2wProcess_SerialInput_3:
   \   0000001E   0x7038             STRB     R0,[R7, #+0]
   1603                              continue;
   1604                          }
   \                     ??AppS2wProcess_SerialInput_1:
   \   00000020   0xA801             ADD      R0,SP,#+4
   \   00000022   0x.... 0x....      BL       AppS2wHal_CharGet
   \   00000026   0x2801             CMP      R0,#+1
   \   00000028   0xF040 0x8300      BNE.W    ??AppS2wProcess_SerialInput_4
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   00000030   0xF890 0x01B0      LDRB     R0,[R0, #+432]
   \   00000034   0xB168             CBZ.N    R0,??CrossCallReturnLabel_25
   \   00000036   0x7838             LDRB     R0,[R7, #+0]
   \   00000038   0xB958             CBNZ.N   R0,??CrossCallReturnLabel_25
   \   0000003A   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000003E   0x281B             CMP      R0,#+27
   \   00000040   0xD0EC             BEQ.N    ??AppS2wProcess_SerialInput_2
   \   00000042   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_31:
   \   00000046   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000004A   0x.... 0x....      BL       S2w_PutChar
   \   0000004E   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_25:
   \   00000052   0x7A3A             LDRB     R2,[R7, #+8]
   \   00000054   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000058   0x783B             LDRB     R3,[R7, #+0]
   \   0000005A   0x7A7E             LDRB     R6,[R7, #+9]
   \   0000005C   0x4614             MOV      R4,R2
   \   0000005E   0x4608             MOV      R0,R1
   \   00000060   0x2B17             CMP      R3,#+23
   \   00000062   0xD84B             BHI.N    ??AppS2wProcess_SerialInput_5
   \   00000064   0xE8DF 0xF013      TBH      [PC, R3, LSL #+1]
   \                     ??AppS2wProcess_SerialInput_0:
   \   00000068   0x0076 0x017A      DC16     0x76,0x17A,0x182,0x7A
   \              0x0182 0x007A
   \   00000070   0x01C6 0x02DE      DC16     0x1C6,0x2DE,0x2DE,0x2DE
   \              0x02DE 0x02DE
   \   00000078   0x02DE 0x0102      DC16     0x2DE,0x102,0x1EC,0x1FF
   \              0x01EC 0x01FF
   \   00000080   0x0222 0x0030      DC16     0x222,0x30,0x2DE,0x2DE
   \              0x02DE 0x02DE
   \   00000088   0x0249 0x027B      DC16     0x249,0x27B,0x2DE,0x18
   \              0x02DE 0x0018
   \   00000090   0x02DE 0x02DE      DC16     0x2DE,0x2DE,0x294,0x2A1
   \              0x0294 0x02A1
   \                     ??AppS2wProcess_SerialInput_6:
   \   00000098   0x79B8             LDRB     R0,[R7, #+6]
   \   0000009A   0x8BBA             LDRH     R2,[R7, #+28]
   \   0000009C   0x1C40             ADDS     R0,R0,#+1
   \   0000009E   0x71B8             STRB     R0,[R7, #+6]
   \   000000A0   0x230A             MOVS     R3,#+10
   \   000000A2   0xFB03 0x1102      MLA      R1,R3,R2,R1
   \   000000A6   0x3930             SUBS     R1,R1,#+48
   \   000000A8   0xB2C0             UXTB     R0,R0
   \   000000AA   0x83B9             STRH     R1,[R7, #+28]
   \   000000AC   0x2804             CMP      R0,#+4
   \   000000AE   0xD125             BNE.N    ??AppS2wProcess_SerialInput_5
   \   000000B0   0xB289             UXTH     R1,R1
   \   000000B2   0x.... 0x....      LDR.W    R0,??DataTable132_3
   \   000000B6   0x.... 0x....      BL       AppS2wHal_CharNGet
   \   000000BA   0x8BB8             LDRH     R0,[R7, #+28]
   \   000000BC   0x62F8             STR      R0,[R7, #+44]
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable132_3
   \   000000C2   0x.... 0x....      BL       AppS2w_DataTransmit
   \   000000C6   0xE260             B.N      ??AppS2wProcess_SerialInput_7
   \                     ??AppS2wProcess_SerialInput_8:
   \   000000C8   0x79F9             LDRB     R1,[R7, #+7]
   \   000000CA   0xF507 0x768C      ADD      R6,R7,#+280
   \   000000CE   0xF107 0x04E0      ADD      R4,R7,#+224
   \   000000D2   0x282B             CMP      R0,#+43
   \   000000D4   0xD113             BNE.N    ??AppS2wProcess_SerialInput_9
   \   000000D6   0x2903             CMP      R1,#+3
   \   000000D8   0xDA11             BGE.N    ??AppS2wProcess_SerialInput_9
   \   000000DA   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   000000DE   0xF8D0 0x03C4      LDR      R0,[R0, #+964]
   \   000000E2   0xB390             CBZ.N    R0,??AppS2wProcess_SerialInput_10
   \   000000E4   0x1C48             ADDS     R0,R1,#+1
   \   000000E6   0x71F8             STRB     R0,[R7, #+7]
   \   000000E8   0x4620             MOV      R0,R4
   \   000000EA   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   000000EE   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   000000F2   0xF8D0 0x13C4      LDR      R1,[R0, #+964]
   \   000000F6   0x4630             MOV      R0,R6
   \   000000F8   0x.... 0x....      BL       AppS2wHal_TimerStart
   \                     ??AppS2wProcess_SerialInput_5:
   \   000000FC   0xE292             B.N      ??AppS2wProcess_SerialInput_11
   \                     ??AppS2wProcess_SerialInput_9:
   \   000000FE   0x2900             CMP      R1,#+0
   \   00000100   0xBF1E             ITTT     NE 
   \   00000102   0x.... 0x....      LDRNE.W  R0,??DataTable132_2
   \   00000106   0xF8D0 0x03C4      LDRNE    R0,[R0, #+964]
   \   0000010A   0x2800             CMPNE    R0,#+0
   \   0000010C   0xD01D             BEQ.N    ??AppS2wProcess_SerialInput_10
   \   0000010E   0x4630             MOV      R0,R6
   \   00000110   0x.... 0x....      BL       AppS2wHal_TimerStop
   \   00000114   0x79F8             LDRB     R0,[R7, #+7]
   \   00000116   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000011A   0x19C0             ADDS     R0,R0,R7
   \   0000011C   0x2600             MOVS     R6,#+0
   \   0000011E   0x7401             STRB     R1,[R0, #+16]
   \   00000120   0x4620             MOV      R0,R4
   \   00000122   0xF8BB 0x101C      LDRH     R1,[R11, #+28]
   \   00000126   0x.... 0x....      BL       AppS2wHal_TimerStart
   \   0000012A   0xE004             B.N      ??AppS2wProcess_SerialInput_12
   \                     ??AppS2wProcess_SerialInput_13:
   \   0000012C   0x19F0             ADDS     R0,R6,R7
   \   0000012E   0x7C00             LDRB     R0,[R0, #+16]
   \   00000130   0x.... 0x....      BL       AppS2w_DataCharProcess
   \   00000134   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2wProcess_SerialInput_12:
   \   00000136   0x79F8             LDRB     R0,[R7, #+7]
   \   00000138   0xB2F6             UXTB     R6,R6
   \   0000013A   0x42B0             CMP      R0,R6
   \   0000013C   0xD2F6             BCS.N    ??AppS2wProcess_SerialInput_13
   \   0000013E   0x19C0             ADDS     R0,R0,R7
   \   00000140   0x212B             MOVS     R1,#+43
   \   00000142   0x7401             STRB     R1,[R0, #+16]
   \   00000144   0x2000             MOVS     R0,#+0
   \   00000146   0x71F8             STRB     R0,[R7, #+7]
   \   00000148   0xE26C             B.N      ??AppS2wProcess_SerialInput_11
   \                     ??AppS2wProcess_SerialInput_10:
   \   0000014A   0x2000             MOVS     R0,#+0
   \   0000014C   0x71F8             STRB     R0,[R7, #+7]
   \   0000014E   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000152   0xE108             B.N      ??AppS2wProcess_SerialInput_14
   \                     ??AppS2wProcess_SerialInput_15:
   \   00000154   0x281B             CMP      R0,#+27
   \   00000156   0xF43F 0xAF61      BEQ.W    ??AppS2wProcess_SerialInput_2
   1605                          AppS2w_CommandCharProcess(ch);
   \   0000015A   0xE084             B.N      ??AppS2wProcess_SerialInput_16
   1606                      break;
   1607          
   1608                      case S2W_STATE_CMD_ESC:
   1609                          if (ch == 'S' || ch == 'u' || ch == 'U')
   \                     ??AppS2wProcess_SerialInput_17:
   \   0000015C   0x2853             CMP      R0,#+83
   \   0000015E   0xBF1C             ITT      NE 
   \   00000160   0x2875             CMPNE    R0,#+117
   \   00000162   0x2855             CMPNE    R0,#+85
   \   00000164   0xD101             BNE.N    ??AppS2wProcess_SerialInput_18
   1610                          {
   1611                              s2wState = S2W_STATE_CID;
   \   00000166   0x2004             MOVS     R0,#+4
   \                     ??AppS2wProcess_SerialInput_19:
   \   00000168   0xE210             B.N      ??AppS2wProcess_SerialInput_20
   1612                          }
   1613          #if defined(S2W_GSLINK) && defined(S2W_GSLINK_XML)
   1614                          else if(((ch == 'G')  || (ch == 'g'))&& s2wappMainTaskCtxt->xmlParseEn == 1 )
   \                     ??AppS2wProcess_SerialInput_18:
   \   0000016A   0x2847             CMP      R0,#+71
   \   0000016C   0xBF18             IT       NE 
   \   0000016E   0x2867             CMPNE    R0,#+103
   \   00000170   0xBF01             ITTTT    EQ 
   \   00000172   0x6829             LDREQ    R1,[R5, #+0]
   \   00000174   0xF646 0x3254      MOVWEQ   R2,#+27476
   \   00000178   0x5C52             LDRBEQ   R2,[R2, R1]
   \   0000017A   0x2A01             CMPEQ    R2,#+1
   \   0000017C   0xD104             BNE.N    ??AppS2wProcess_SerialInput_21
   1615                          {
   1616                              rawLen=0;
   \   0000017E   0x2000             MOVS     R0,#+0
   \   00000180   0x6378             STR      R0,[R7, #+52]
   1617                              rawLenIndex=0;
   \   00000182   0x6338             STR      R0,[R7, #+48]
   1618                              s2wState = S2W_STATE_GET_CID;
   \   00000184   0x2016             MOVS     R0,#+22
   \   00000186   0xE040             B.N      ??AppS2wProcess_SerialInput_22
   1619          #ifdef S2W_WEB_SERVER			
   1620          					if(s2wappMainTaskCtxt->respTimeOut !=0 && s2wappMainTaskCtxt->responseInprogress == 1)
   1621          					{
   1622          						 if (GSN_SUCCESS != GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl))
   1623          							 respTimeOut = 1;					
   1624          					}	
   1625          					s2wappMainTaskCtxt->responseInprogress = 0;
   1626           #endif			
   1627                          }
   1628          #endif
   1629                          else if((ch == 'Z') || (ch == 'Y'))
   \                     ??AppS2wProcess_SerialInput_21:
   \   00000188   0x285A             CMP      R0,#+90
   \   0000018A   0xBF18             IT       NE 
   \   0000018C   0x2859             CMPNE    R0,#+89
   \   0000018E   0xD105             BNE.N    ??AppS2wProcess_SerialInput_23
   1630                          {
   1631                              s2wState = S2W_STATE_CID;
   \   00000190   0x2004             MOVS     R0,#+4
   \   00000192   0x7038             STRB     R0,[R7, #+0]
   1632                              lengthSpecialCmd = 0;
   \   00000194   0x2000             MOVS     R0,#+0
   \   00000196   0x83B8             STRH     R0,[R7, #+28]
   1633                              lengthConvertIndex = 0;
   \   00000198   0x71B8             STRB     R0,[R7, #+6]
   \   0000019A   0xE243             B.N      ??AppS2wProcess_SerialInput_11
   1634                          }
   1635          #ifdef S2W_IP2WIFI_SUPPORT
   1636                          else if (ch == 'R' || ch == 'r')
   1637                          {
   1638                              {
   1639          						rawLen=0;
   1640                                  rawLenIndex=0;
   1641                                  s2wState = S2W_STATE_RAW;
   1642                              }
   1643                          }
   1644          #endif
   1645                          else if ((ch == 'c')|| (ch == 'C'))
   \                     ??AppS2wProcess_SerialInput_23:
   \   0000019C   0x2863             CMP      R0,#+99
   \   0000019E   0xBF18             IT       NE 
   \   000001A0   0x2843             CMPNE    R0,#+67
   \   000001A2   0xD107             BNE.N    ??AppS2wProcess_SerialInput_24
   1646                          {
   1647          #ifndef S2W_IP2WIFI_SUPPORT
   1648          #ifdef S2W_PING_TRACE
   1649                              if(s2wPingStarted)
   \   000001A4   0x.... 0x....      LDR.W    R0,??DataTable132_5
   \   000001A8   0x6800             LDR      R0,[R0, #+0]
   \   000001AA   0x2800             CMP      R0,#+0
   \   000001AC   0xD001             BEQ.N    ??AppS2wProcess_SerialInput_25
   1650                              {
   1651                                  AppS2wHal_PingClose();
   \   000001AE   0x.... 0x....      BL       AppS2wHal_PingClose
   1652                              }
   1653                              if(s2wTrcStarted)
   1654                              {
   1655                                //  AppS2wHal_TraceRouteClose();
   1656                                //  s2wTrcStarted = 0;
   1657                              }
   1658          #endif
   1659          #endif
   1660                              s2wState = S2W_STATE_CMD;
   \                     ??AppS2wProcess_SerialInput_25:
   \   000001B2   0xE1EA             B.N      ??AppS2wProcess_SerialInput_7
   1661                          }
   1662                          else if ((ch == 'w')|| (ch == 'W'))
   \                     ??AppS2wProcess_SerialInput_24:
   \   000001B4   0x2877             CMP      R0,#+119
   \   000001B6   0xBF18             IT       NE 
   \   000001B8   0x2857             CMPNE    R0,#+87
   \   000001BA   0xD110             BNE.N    ??AppS2wProcess_SerialInput_26
   1663          		        {
   1664          		             s2wState = S2W_STATE_CERT;
   \   000001BC   0x200E             MOVS     R0,#+14
   \   000001BE   0x7038             STRB     R0,[R7, #+0]
   1665          		             status = AppS2wCertificateData(ch);
   \   000001C0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001C4   0x.... 0x....      BL       AppS2wCertificateData
   1666          		             // flush the data for spi-dma interface
   1667          					 if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \   000001C8   0x6829             LDR      R1,[R5, #+0]
   \   000001CA   0x4604             MOV      R4,R0
   \   000001CC   0xF646 0x20F8      MOVW     R0,#+27384
   \   000001D0   0x5C40             LDRB     R0,[R0, R1]
   \   000001D2   0x2802             CMP      R0,#+2
   \   000001D4   0xBF08             IT       EQ 
   \   000001D6   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   1668          					 {
   1669          					     s2wSpiFs_Flush();
   1670                               }
   1671          		                if((status == S2W_SUCCESS) || (status == S2W_FAILURE))
   \   000001DA   0xB2E0             UXTB     R0,R4
   \   000001DC   0xE00A             B.N      ??AppS2wProcess_SerialInput_27
   1672          		                    s2wState = S2W_STATE_CMD;
   1673          		        }
   1674          #ifdef S2W_EXTFLASH_DRIVER_TEST
   1675          				else if ((ch == 'v')|| (ch == 'V'))
   \                     ??AppS2wProcess_SerialInput_26:
   \   000001DE   0x2876             CMP      R0,#+118
   \   000001E0   0xBF18             IT       NE 
   \   000001E2   0x2856             CMPNE    R0,#+86
   \   000001E4   0xD10B             BNE.N    ??AppS2wProcess_SerialInput_28
   1676          		        {
   1677          		             s2wState = S2W_STATE_EXTFLASH;
   \   000001E6   0x201A             MOVS     R0,#+26
   \   000001E8   0x7038             STRB     R0,[R7, #+0]
   1678          		             status = AppS2wExternalFlashData(ch);
   \   000001EA   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000001EE   0x.... 0x....      BL       AppS2wExternalFlashData
   1679          		                if((status == S2W_SUCCESS) || (status == S2W_FAILURE))
   \   000001F2   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wProcess_SerialInput_27:
   \   000001F4   0x2800             CMP      R0,#+0
   \   000001F6   0xD001             BEQ.N    ??AppS2wProcess_SerialInput_29
   \   000001F8   0x2801             CMP      R0,#+1
   \   000001FA   0xD11C             BNE.N    ??AppS2wProcess_SerialInput_30
   1680          		                    s2wState = S2W_STATE_CMD;
   \                     ??AppS2wProcess_SerialInput_29:
   \   000001FC   0xE1C5             B.N      ??AppS2wProcess_SerialInput_7
   1681          		        }
   1682          #endif
   1683          #ifdef S2W_EXT_FLASH_FS_SUPPORT
   1684          				else if((ch == 'f') || (ch == 'F'))
   1685          				{
   1686          					s2wState = S2W_STATE_FWRITE; 
   1687          					status = AppS2wHal_FileWriteDataGet(s2wappMainTaskCtxt->appExtFsCtx.fileInfo.fd, s2wappMainTaskCtxt->appExtFsCtx.fileInfo.size);
   1688          					if((status == S2W_SUCCESS) || (status == S2W_FAILURE))
   1689          					s2wState = S2W_STATE_CMD;
   1690          				}
   1691          #endif
   1692          
   1693          		        else if ((ch == 'H')|| (ch == 'h'))
   \                     ??AppS2wProcess_SerialInput_28:
   \   000001FE   0x2848             CMP      R0,#+72
   \   00000200   0xBF18             IT       NE 
   \   00000202   0x2868             CMPNE    R0,#+104
   \   00000204   0xD118             BNE.N    ??AppS2wProcess_SerialInput_31
   1694          	            {
   1695          	                s2wState = S2W_STATE_HTTP_CONTENT_CID;
   \   00000206   0x2010             MOVS     R0,#+16
   1696          #if defined(S2W_WEB_SERVER) && defined(S2W_GSLINK_RAW)				
   1697          					if(s2wappMainTaskCtxt->respTimeOut !=0 && s2wappMainTaskCtxt->responseInprogress == 1)
   \   00000208   0x6829             LDR      R1,[R5, #+0]
   \                     ??AppS2wProcess_SerialInput_22:
   \   0000020A   0x7038             STRB     R0,[R7, #+0]
   \   0000020C   0xF501 0x40D6      ADD      R0,R1,#+27392
   \   00000210   0x30BC             ADDS     R0,R0,#+188
   \   00000212   0x6842             LDR      R2,[R0, #+4]
   \   00000214   0xB152             CBZ.N    R2,??AppS2wProcess_SerialInput_32
   \   00000216   0xF646 0x32BC      MOVW     R2,#+27580
   \   0000021A   0x5C51             LDRB     R1,[R2, R1]
   \   0000021C   0x2901             CMP      R1,#+1
   \   0000021E   0xD105             BNE.N    ??AppS2wProcess_SerialInput_32
   1698          					{
   1699          						 if (GSN_SUCCESS != GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl))
   \   00000220   0x6AC0             LDR      R0,[R0, #+44]
   \   00000222   0x.... 0x....      BL       GsnSoftTmr_Stop
   \   00000226   0xB108             CBZ.N    R0,??AppS2wProcess_SerialInput_32
   1700          							 respTimeOut = 1;					
   \   00000228   0xF04F 0x0801      MOV      R8,#+1
   1701          					}
   1702          					s2wappMainTaskCtxt->responseInprogress = 0;
   \                     ??AppS2wProcess_SerialInput_32:
   \   0000022C   0x6829             LDR      R1,[R5, #+0]
   \   0000022E   0xF646 0x30BC      MOVW     R0,#+27580
   \   00000232   0x2200             MOVS     R2,#+0
   \   00000234   0x5442             STRB     R2,[R0, R1]
   \                     ??AppS2wProcess_SerialInput_30:
   \   00000236   0xE1F5             B.N      ??AppS2wProcess_SerialInput_11
   1703          #endif			
   1704          		        }
   1705          		        else if ((ch == 'P')|| (ch == 'p'))
   \                     ??AppS2wProcess_SerialInput_31:
   \   00000238   0x2850             CMP      R0,#+80
   \   0000023A   0xBF14             ITE      NE 
   \   0000023C   0x2870             CMPNE    R0,#+112
   \   0000023E   0x2011             MOVEQ    R0,#+17
   1706          	            {
   1707          	                s2wState = S2W_STATE_COAP_CONTENT_CID;
   \   00000240   0xD092             BEQ.N    ??AppS2wProcess_SerialInput_19
   1708          	            }
   1709          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   1710                          else if ((((ch == 'D')|| (ch == 'd')) && (s2wLinkState == S2W_LINK_STATE_DISCONNECTED)))
   \   00000242   0x2844             CMP      R0,#+68
   \   00000244   0xBF18             IT       NE 
   \   00000246   0x2864             CMPNE    R0,#+100
   \   00000248   0xD106             BNE.N    ??AppS2wProcess_SerialInput_33
   \   0000024A   0x7878             LDRB     R0,[R7, #+1]
   \   0000024C   0xB920             CBNZ.N   R0,??AppS2wProcess_SerialInput_33
   1711                          {
   1712                              s2wState = S2W_STATE_UNSOLICITED_DATA;
   \   0000024E   0x2009             MOVS     R0,#+9
   \   00000250   0x7038             STRB     R0,[R7, #+0]
   1713                              dataIndex = 0;
   \   00000252   0x2000             MOVS     R0,#+0
   \   00000254   0x62F8             STR      R0,[R7, #+44]
   \   00000256   0xE1E5             B.N      ??AppS2wProcess_SerialInput_11
   1714                          }
   1715          #endif
   1716                          else
   1717                          {
   1718                              s2wState = S2W_STATE_CMD;
   \                     ??AppS2wProcess_SerialInput_33:
   \   00000258   0x2000             MOVS     R0,#+0
   \   0000025A   0x7038             STRB     R0,[R7, #+0]
   1719                              AppS2w_CommandCharProcess(S2W_ESC);
   \   0000025C   0x201B             MOVS     R0,#+27
   \   0000025E   0x.... 0x....      BL       AppS2w_CommandCharProcess
   1720                              AppS2w_CommandCharProcess(ch);
   \   00000262   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \                     ??AppS2wProcess_SerialInput_16:
   \   00000266   0x.... 0x....      BL       AppS2w_CommandCharProcess
   \   0000026A   0xE1DB             B.N      ??AppS2wProcess_SerialInput_11
   1721                      }
   1722                      break;
   1723          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   1724                      case S2W_STATE_UNSOLICITED_DATA:
   1725                              dataBuffer[0]= ch;
   \                     ??AppS2wProcess_SerialInput_34:
   \   0000026C   0x.... 0x....      LDR.W    R0,??DataTable132_3
   \   00000270   0x7001             STRB     R1,[R0, #+0]
   1726                              if(s2wappMainTaskCtxt->frame.macFrameLen)
   \   00000272   0xF247 0x54AC      MOVW     R4,#+30124
   \   00000276   0x6829             LDR      R1,[R5, #+0]
   \   00000278   0x5A60             LDRH     R0,[R4, R1]
   \   0000027A   0x2800             CMP      R0,#+0
   \   0000027C   0xD0BE             BEQ.N    ??AppS2wProcess_SerialInput_29
   1727                              {
   1728                                  AppS2wHal_CharNGet(&dataBuffer[1], s2wappMainTaskCtxt->frame.macFrameLen-1);
   \   0000027E   0x1E41             SUBS     R1,R0,#+1
   \   00000280   0x.... 0x....      LDR.W    R0,??DataTable132_6
   \   00000284   0x.... 0x....      BL       AppS2wHal_CharNGet
   1729                                  dataIndex = s2wappMainTaskCtxt->frame.macFrameLen;
   \   00000288   0x6828             LDR      R0,[R5, #+0]
   \   0000028A   0x5A21             LDRH     R1,[R4, R0]
   \   0000028C   0x62F9             STR      R1,[R7, #+44]
   1730                                  // first start the mode
   1731          
   1732          						GSN_WDD_UAM_START_RESP_T resp;
   1733                                  status= GsnWdd_UAMStart(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp);
   \   0000028E   0xAA07             ADD      R2,SP,#+28
   \   00000290   0x2100             MOVS     R1,#+0
   \   00000292   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000296   0x.... 0x....      BL       GsnWdd_UAMStart
   1734                                  if(status != GSN_SUCCESS)
   \   0000029A   0xB2C2             UXTB     R2,R0
   \   0000029C   0xB11A             CBZ.N    R2,??AppS2wProcess_SerialInput_35
   1735                                  {
   1736          							AppS2wProcess_StatusNotify(status, 0);
   \   0000029E   0x2100             MOVS     R1,#+0
   \   000002A0   0x4610             MOV      R0,R2
   \   000002A2   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1737          						}
   1738          						// configure the rx if it is requetsed
   1739          						if(s2wappMainTaskCtxt->frame.rxWaitTime)
   \                     ??AppS2wProcess_SerialInput_35:
   \   000002A6   0x6828             LDR      R0,[R5, #+0]
   \   000002A8   0xF247 0x54C8      MOVW     R4,#+30152
   \   000002AC   0x5820             LDR      R0,[R4, R0]
   \   000002AE   0xB180             CBZ.N    R0,??AppS2wProcess_SerialInput_36
   1740          						{
   1741          							s2wUamRx_Init();
   \   000002B0   0x.... 0x....      BL       s2wUamRx_Init
   1742          							// first configure the rx
   1743          							status= GsnWdd_UAMDataRxConfig(&(s2wappMainTaskCtxt->if0.wddCtx), &s2wappMainTaskCtxt->RxParam);
   \   000002B4   0x6828             LDR      R0,[R5, #+0]
   \   000002B6   0xF500 0x41EA      ADD      R1,R0,#+29952
   \   000002BA   0x31D8             ADDS     R1,R1,#+216
   \   000002BC   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000002C0   0x.... 0x....      BL       GsnWdd_UAMDataRxConfig
   1744          
   1745                                      // register the callback
   1746                                      GsnWdd_DataIndCbReg(&(s2wappMainTaskCtxt->if0.wddCtx), S2W_UnassocDataIndCB, s2wappMainTaskCtxt);
   \   000002C4   0x6828             LDR      R0,[R5, #+0]
   \   000002C6   0x.... 0x....      LDR.W    R2,??DataTable132_7
   \   000002CA   0xF600 0x61E0      ADDW     R1,R0,#+3808
   \   000002CE   0x674A             STR      R2,[R1, #+116]
   \   000002D0   0x6788             STR      R0,[R1, #+120]
   1747          						}
   1748          						{
   1749          
   1750          						    GSN_WDD_UAM_CCA_SET_RESP_T respCCa;
   1751          						    GsnWdd_UamCcaConfigSet(&(s2wappMainTaskCtxt->if0.wddCtx),0,s2wappMainTaskCtxt->ccaThr,
   1752                                                       (UINT16)s2wappMainTaskCtxt->ccaTimeout,&respCCa);
   \                     ??AppS2wProcess_SerialInput_36:
   \   000002D2   0xA905             ADD      R1,SP,#+20
   \   000002D4   0x6828             LDR      R0,[R5, #+0]
   \   000002D6   0x9100             STR      R1,[SP, #+0]
   \   000002D8   0xF500 0x41EA      ADD      R1,R0,#+29952
   \   000002DC   0x31CC             ADDS     R1,R1,#+204
   \   000002DE   0x684B             LDR      R3,[R1, #+4]
   \   000002E0   0xF247 0x51CC      MOVW     R1,#+30156
   \   000002E4   0xB29B             UXTH     R3,R3
   \   000002E6   0x5C0A             LDRB     R2,[R1, R0]
   \   000002E8   0x2100             MOVS     R1,#+0
   \   000002EA   0xF500 0x606E      ADD      R0,R0,#+3808
   \   000002EE   0x.... 0x....      BL       GsnWdd_UamCcaConfigSet
   1753          						}
   1754          						GSN_WIF_WLAN_UNASSOCIATED_DATACFM_T wStatus;
   1755                                  GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   000002F2   0x.... 0x....      BL       ?Subroutine11
   1756                                  status = GsnWdd_UamDataSend_Patch(&(s2wappMainTaskCtxt->if0.wddCtx),&s2wappMainTaskCtxt->frame,
   1757                                                     dataBuffer, dataIndex,&wStatus);
   \                     ??CrossCallReturnLabel_30:
   \   000002F6   0xA903             ADD      R1,SP,#+12
   \   000002F8   0x6828             LDR      R0,[R5, #+0]
   \   000002FA   0x6AFB             LDR      R3,[R7, #+44]
   \   000002FC   0x.... 0x....      LDR.W    R2,??DataTable132_3
   \   00000300   0x9100             STR      R1,[SP, #+0]
   \   00000302   0xF500 0x41EA      ADD      R1,R0,#+29952
   \   00000306   0x31A0             ADDS     R1,R1,#+160
   \   00000308   0xF500 0x606E      ADD      R0,R0,#+3808
   \   0000030C   0x.... 0x....      BL       GsnWdd_UamDataSend_Patch
   1758                                  // if the option enabled then send back the time stamp
   1759          
   1760                                  if((wStatus.status) && (s2wappMainTaskCtxt->uamTimeStampReturn))
   \   00000310   0xF8BD 0x000C      LDRH     R0,[SP, #+12]
   \   00000314   0xB178             CBZ.N    R0,??AppS2wProcess_SerialInput_37
   \   00000316   0x6829             LDR      R1,[R5, #+0]
   \   00000318   0xF247 0x50D4      MOVW     R0,#+30164
   \   0000031C   0x5C40             LDRB     R0,[R0, R1]
   \   0000031E   0xB158             CBZ.N    R0,??AppS2wProcess_SerialInput_38
   1761                                  {
   1762          							S2w_Printf("\r\nTS:%x",wStatus.timeStamp);
   \   00000320   0x9904             LDR      R1,[SP, #+16]
   \   00000322   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nTS:%x">`
   \   00000326   0x.... 0x....      BL       S2w_Printf
   1763          						}
   1764                                  AppS2wProcess_StatusNotify(!wStatus.status, 0);
   \   0000032A   0xF8BD 0x100C      LDRH     R1,[SP, #+12]
   \   0000032E   0x1E48             SUBS     R0,R1,#+1
   \   00000330   0x4180             SBCS     R0,R0,R0
   \   00000332   0x0FC0             LSRS     R0,R0,#+31
   \   00000334   0xE000             B.N      ??AppS2wProcess_SerialInput_38
   \                     ??AppS2wProcess_SerialInput_37:
   \   00000336   0x2001             MOVS     R0,#+1
   \                     ??AppS2wProcess_SerialInput_38:
   \   00000338   0x2100             MOVS     R1,#+0
   \   0000033A   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1765                                  GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000033E   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_24:
   \   00000342   0x6828             LDR      R0,[R5, #+0]
   \   00000344   0x5820             LDR      R0,[R4, R0]
   \   00000346   0xB108             CBZ.N    R0,??AppS2wProcess_SerialInput_39
   1766                                  // wait for the rx to complete the stop the mode
   1767                                  if(s2wappMainTaskCtxt->frame.rxWaitTime)
   1768          						{
   1769          							GsnTaskSleep(s2wappMainTaskCtxt->frame.rxWaitTime);
   \   00000348   0x.... 0x....      BL       GsnTaskSleep
   1770          						}
   1771                                  // stop the mode
   1772                                  GSN_WDD_UAM_STOP_RESP_T resp1;
   1773                                  GsnWdd_UAMStop(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp1);
   \                     ??AppS2wProcess_SerialInput_39:
   \   0000034C   0x6828             LDR      R0,[R5, #+0]
   \   0000034E   0xAA05             ADD      R2,SP,#+20
   \   00000350   0x2100             MOVS     R1,#+0
   \   00000352   0xF500 0x606E      ADD      R0,R0,#+3808
   \   00000356   0x.... 0x....      BL       GsnWdd_UAMStop
   1774          
   1775          					}
   1776          					s2wState = S2W_STATE_CMD;
   \   0000035A   0xE116             B.N      ??AppS2wProcess_SerialInput_7
   1777                      break;
   1778          #endif
   1779                      case S2W_STATE_DATA:
   1780                          if (ch == S2W_ESC)
   \                     ??AppS2wProcess_SerialInput_40:
   \   0000035C   0x281B             CMP      R0,#+27
   \   0000035E   0xBF08             IT       EQ 
   \   00000360   0x2002             MOVEQ    R0,#+2
   1781                          {
   1782                              s2wState = S2W_STATE_DATA_ESC;
   \   00000362   0xF43F 0xAE5C      BEQ.W    ??AppS2wProcess_SerialInput_3
   1783                              continue;
   1784                          }
   1785                          AppS2w_DataCharProcess(ch);
   \                     ??AppS2wProcess_SerialInput_14:
   \   00000366   0x.... 0x....      BL       AppS2w_DataCharProcess
   1786                      break;
   \   0000036A   0xE15B             B.N      ??AppS2wProcess_SerialInput_11
   1787          
   1788                      case S2W_STATE_DATA_ESC:
   1789                          if(APP_S2W_GET_SERIAL_DEVICE_ID())
   \                     ??AppS2wProcess_SerialInput_41:
   \   0000036C   0x682A             LDR      R2,[R5, #+0]
   \   0000036E   0xF646 0x21F8      MOVW     R1,#+27384
   \   00000372   0x5C89             LDRB     R1,[R1, R2]
   \   00000374   0x2900             CMP      R1,#+0
   \   00000376   0xBF12             ITEE     NE 
   \   00000378   0x2100             MOVNE    R1,#+0
   \   0000037A   0xF8DB 0x1004      LDREQ    R1,[R11, #+4]
   \   0000037E   0xF3C1 0x1180      UBFXEQ   R1,R1,#+6,#+1
   1790                          {//Note: Is it not applicable for SPI interface - since we already apply stuffing  at lower layer
   1791                              softFlow = 0x00;
   1792                          }
   1793                          else
   1794                          {
   1795                              softFlow = s2wCurrent.serialPortConf.conf.uart.softflow;
   1796                          }
   1797                          if (ch == S2W_ESC)
   \   00000382   0x281B             CMP      R0,#+27
   \   00000384   0xD102             BNE.N    ??AppS2wProcess_SerialInput_42
   1798                          {
   1799                              AppS2w_DataCharProcess(ch);
   \   00000386   0x.... 0x....      BL       AppS2w_DataCharProcess
   1800                              s2wState = S2W_STATE_DATA;
   \   0000038A   0xE0B1             B.N      ??AppS2wProcess_SerialInput_43
   1801                          }
   1802                          else if (ch == 'E' || ch == 'S' || ch == 'u' || ch == 'U')
   \                     ??AppS2wProcess_SerialInput_42:
   \   0000038C   0x2845             CMP      R0,#+69
   \   0000038E   0xBF18             IT       NE 
   \   00000390   0x2853             CMPNE    R0,#+83
   \   00000392   0xD003             BEQ.N    ??AppS2wProcess_SerialInput_44
   \   00000394   0x2875             CMP      R0,#+117
   \   00000396   0xBF18             IT       NE 
   \   00000398   0x2855             CMPNE    R0,#+85
   \   0000039A   0xD110             BNE.N    ??AppS2wProcess_SerialInput_45
   1803                          {
   1804                              status = AppS2w_DataBufferTransmit();
   \                     ??AppS2wProcess_SerialInput_44:
   \   0000039C   0x.... 0x....      BL       AppS2w_DataBufferTransmit
   \   000003A0   0x.... 0x....      BL       ?Subroutine7
   1805                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1806                              AppS2wProcess_StatusNotify(status, 0);
   \                     ??CrossCallReturnLabel_14:
   \   000003A4   0x.... 0x....      BL       ?Subroutine1
   1807                              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_4:
   \   000003A8   0x.... 0x....      BL       ?Subroutine10
   1808                              curCid = INVALID_CID;
   \                     ??CrossCallReturnLabel_23:
   \   000003AC   0x20FF             MOVS     R0,#+255
   \   000003AE   0x7178             STRB     R0,[R7, #+5]
   1809                              s2wState = ch == 'E' ? S2W_STATE_CMD : S2W_STATE_CID;
   \   000003B0   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000003B4   0x2845             CMP      R0,#+69
   \   000003B6   0xBF14             ITE      NE 
   \   000003B8   0x2004             MOVNE    R0,#+4
   \   000003BA   0x2000             MOVEQ    R0,#+0
   \   000003BC   0xE0E6             B.N      ??AppS2wProcess_SerialInput_20
   1810                          }
   1811                          else if (ch == 'C')
   \                     ??AppS2wProcess_SerialInput_45:
   \   000003BE   0x2843             CMP      R0,#+67
   \   000003C0   0xD10B             BNE.N    ??AppS2wProcess_SerialInput_46
   1812                          {
   1813                              status = AppS2w_DataBufferTransmit();
   \   000003C2   0x.... 0x....      BL       AppS2w_DataBufferTransmit
   \   000003C6   0x.... 0x....      BL       ?Subroutine7
   1814                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   1815                              AppS2wProcess_StatusNotify(status, 0);
   \                     ??CrossCallReturnLabel_13:
   \   000003CA   0x.... 0x....      BL       ?Subroutine1
   1816                              GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_3:
   \   000003CE   0x.... 0x....      BL       ?Subroutine10
   1817                              AppS2wHal_NetClose(curCid);
   \                     ??CrossCallReturnLabel_22:
   \   000003D2   0x7978             LDRB     R0,[R7, #+5]
   \   000003D4   0x.... 0x....      BL       AppS2wHal_NetClose
   1818                              s2wState = S2W_STATE_CMD;
   \   000003D8   0xE0D7             B.N      ??AppS2wProcess_SerialInput_7
   1819                          }
   1820                          else if ((ch == 'Q' || ch == 'T')
   1821                                    && (softFlow))
   \                     ??AppS2wProcess_SerialInput_46:
   \   000003DA   0x2851             CMP      R0,#+81
   \   000003DC   0xBF18             IT       NE 
   \   000003DE   0x2854             CMPNE    R0,#+84
   \   000003E0   0xD106             BNE.N    ??AppS2wProcess_SerialInput_47
   \   000003E2   0xB131             CBZ.N    R1,??AppS2wProcess_SerialInput_48
   1822                          {
   1823                              AppS2w_DataCharProcess(ch == 'Q' ? S2W_XON : S2W_XOFF);
   \   000003E4   0x2851             CMP      R0,#+81
   \   000003E6   0xBF0C             ITE      EQ 
   \   000003E8   0x2011             MOVEQ    R0,#+17
   \   000003EA   0x2013             MOVNE    R0,#+19
   \   000003EC   0x.... 0x....      BL       AppS2w_DataCharProcess
   1824                              s2wState = S2W_STATE_DATA;
   \                     ??AppS2wProcess_SerialInput_47:
   \   000003F0   0xE07E             B.N      ??AppS2wProcess_SerialInput_43
   1825                          }
   1826                          else
   1827                          {
   1828                              s2wState = S2W_STATE_DATA;
   \                     ??AppS2wProcess_SerialInput_48:
   \   000003F2   0xE07D             B.N      ??AppS2wProcess_SerialInput_43
   1829                          }
   1830                      break;
   1831          
   1832                      case S2W_STATE_CID:
   1833                          curCid = AppS2w_CidValidate(ch);
   \                     ??AppS2wProcess_SerialInput_49:
   \   000003F4   0x.... 0x....      BL       AppS2w_CidValidate
   \   000003F8   0x7178             STRB     R0,[R7, #+5]
   1834                          if (curCid == INVALID_CID)
   \   000003FA   0x28FF             CMP      R0,#+255
   \   000003FC   0xD039             BEQ.N    ??AppS2wProcess_SerialInput_50
   1835                          {
   1836                              AppS2w_FailEscParse();
   1837                          }
   1838                          else
   1839                          {
   1840                              digits = 0;
   \   000003FE   0x2000             MOVS     R0,#+0
   \   00000400   0x7278             STRB     R0,[R7, #+9]
   1841                              ipnum = 0;
   \   00000402   0x7238             STRB     R0,[R7, #+8]
   1842          #if  defined(S2W_FS_SPI_HI_ENABLE) || defined(S2W_SDIO_ENABLE)
   1843          #else
   1844          
   1845                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000404   0x.... 0x....      BL       ?Subroutine11
   1846                              AppS2wProcess_StatusNotify(S2W_SUCCESS, 0);
   \                     ??CrossCallReturnLabel_29:
   \   00000408   0x2100             MOVS     R1,#+0
   \   0000040A   0x2000             MOVS     R0,#+0
   \   0000040C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   1847                              GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000410   0x.... 0x....      BL       ?Subroutine10
   1848          #endif
   1849                              if (prev == 'S')
   \                     ??CrossCallReturnLabel_21:
   \   00000414   0x7AB8             LDRB     R0,[R7, #+10]
   \   00000416   0x2853             CMP      R0,#+83
   \   00000418   0xBF08             IT       EQ 
   \   0000041A   0x2001             MOVEQ    R0,#+1
   1850                                  s2wState = S2W_STATE_DATA;
   \   0000041C   0xD00F             BEQ.N    ??AppS2wProcess_SerialInput_51
   1851                              else if (prev == 'u')
   \   0000041E   0x2875             CMP      R0,#+117
   \   00000420   0xBF08             IT       EQ 
   \   00000422   0x200A             MOVEQ    R0,#+10
   1852                                  s2wState = S2W_STATE_IPPORT;
   \   00000424   0xD00B             BEQ.N    ??AppS2wProcess_SerialInput_51
   1853                              else if (prev == 'U')
   \   00000426   0x2855             CMP      R0,#+85
   \   00000428   0xBF08             IT       EQ 
   \   0000042A   0x200B             MOVEQ    R0,#+11
   1854                                  s2wState = S2W_STATE_IP_STRING;
   \   0000042C   0xD007             BEQ.N    ??AppS2wProcess_SerialInput_51
   1855                              else if (prev == 'Z')
   \   0000042E   0x285A             CMP      R0,#+90
   \   00000430   0xBF08             IT       EQ 
   \   00000432   0x2013             MOVEQ    R0,#+19
   1856                                  s2wState = S2W_STATE_BULK_DATA;
   \   00000434   0xD003             BEQ.N    ??AppS2wProcess_SerialInput_51
   1857                              else if(prev == 'Y')
   \   00000436   0x2859             CMP      R0,#+89
   \   00000438   0xD114             BNE.N    ??AppS2wProcess_SerialInput_52
   1858                              {
   1859                                  prevprev = prev;
   \   0000043A   0x72F8             STRB     R0,[R7, #+11]
   1860                                  s2wState = S2W_STATE_IP_STRING;
   \   0000043C   0x200B             MOVS     R0,#+11
   \                     ??AppS2wProcess_SerialInput_51:
   \   0000043E   0xE0A5             B.N      ??AppS2wProcess_SerialInput_20
   1861                              }
   1862                          }
   1863                      break;
   1864          
   1865                      case S2W_STATE_IPPORT:
   1866                          if (ipnum < 4)
   \                     ??AppS2wProcess_SerialInput_53:
   \   00000440   0x2C04             CMP      R4,#+4
   \   00000442   0xDA02             BGE.N    ??AppS2wProcess_SerialInput_54
   1867                          {
   1868                              destAddr[ipnum] = ch;
   \   00000444   0x19E0             ADDS     R0,R4,R7
   \   00000446   0x7301             STRB     R1,[R0, #+12]
   \   00000448   0xE00A             B.N      ??AppS2wProcess_SerialInput_55
   1869                          }
   1870                          else if (ipnum == 4)
   \                     ??AppS2wProcess_SerialInput_54:
   \   0000044A   0xD102             BNE.N    ??AppS2wProcess_SerialInput_56
   1871                          {
   1872                              destPort = (UINT16) ch << 8;
   \   0000044C   0x0208             LSLS     R0,R1,#+8
   \   0000044E   0x83F8             STRH     R0,[R7, #+30]
   \   00000450   0xE006             B.N      ??AppS2wProcess_SerialInput_55
   1873                          }
   1874                          else if (ipnum == 5)
   \                     ??AppS2wProcess_SerialInput_56:
   \   00000452   0x2C05             CMP      R4,#+5
   \   00000454   0xD104             BNE.N    ??AppS2wProcess_SerialInput_55
   1875                          {
   1876                              destPort |= ch;
   \   00000456   0x8BF8             LDRH     R0,[R7, #+30]
   \   00000458   0x4308             ORRS     R0,R1,R0
   \   0000045A   0x83F8             STRH     R0,[R7, #+30]
   1877                              s2wState = S2W_STATE_DATA;
   \   0000045C   0x2001             MOVS     R0,#+1
   \   0000045E   0x7038             STRB     R0,[R7, #+0]
   1878                          }
   1879                          ipnum++;
   \                     ??AppS2wProcess_SerialInput_55:
   \   00000460   0x1C50             ADDS     R0,R2,#+1
   \   00000462   0x7238             STRB     R0,[R7, #+8]
   1880                      break;
   \                     ??AppS2wProcess_SerialInput_52:
   \   00000464   0xE0DE             B.N      ??AppS2wProcess_SerialInput_11
   1881          
   1882                      case S2W_STATE_IP_STRING:
   1883                          if (digits < 3 && isdigit(ch))
   \                     ??AppS2wProcess_SerialInput_57:
   \   00000466   0x2E03             CMP      R6,#+3
   \   00000468   0xDA02             BGE.N    ??AppS2wProcess_SerialInput_58
   \   0000046A   0x.... 0x....      BL       isdigit
   \   0000046E   0xBB10             CBNZ.N   R0,??AppS2wProcess_SerialInput_59
   1884                          {
   1885                              atoibuf[digits] = ch;
   1886                              digits++;
   1887                          }
   1888                          else if (digits
   1889                               && ((ipnum < 3 && ch == '.')
   1890                               || (ipnum == 3 && ch == ':')))
   \                     ??AppS2wProcess_SerialInput_58:
   \   00000470   0x2E00             CMP      R6,#+0
   \                     ??AppS2wProcess_SerialInput_50:
   \   00000472   0xD03F             BEQ.N    ??AppS2wProcess_SerialInput_60
   \   00000474   0x2C03             CMP      R4,#+3
   \   00000476   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000047A   0xDA01             BGE.N    ??AppS2wProcess_SerialInput_61
   \   0000047C   0x282E             CMP      R0,#+46
   \   0000047E   0xD003             BEQ.N    ??AppS2wProcess_SerialInput_62
   \                     ??AppS2wProcess_SerialInput_61:
   \   00000480   0x2C03             CMP      R4,#+3
   \   00000482   0xBF08             IT       EQ 
   \   00000484   0x283A             CMPEQ    R0,#+58
   \   00000486   0xD135             BNE.N    ??AppS2wProcess_SerialInput_60
   1891                          {
   1892                              long temp;
   1893                              atoibuf[digits] = '\0';
   \                     ??AppS2wProcess_SerialInput_62:
   \   00000488   0x.... 0x....      BL       ?Subroutine3
   1894                              temp = atol(atoibuf);
   1895                              if (temp < 0 || temp > 255)
   \                     ??CrossCallReturnLabel_8:
   \   0000048C   0x28FF             CMP      R0,#+255
   \   0000048E   0xD823             BHI.N    ??AppS2wProcess_SerialInput_63
   1896                              {
   1897                                  AppS2w_FailEscParse();
   1898                                  continue;
   1899                              }
   1900                              destAddr[ipnum] = temp;
   \   00000490   0x7A39             LDRB     R1,[R7, #+8]
   \   00000492   0x19CA             ADDS     R2,R1,R7
   \   00000494   0x7310             STRB     R0,[R2, #+12]
   1901                              digits = 0;
   \   00000496   0x2000             MOVS     R0,#+0
   \   00000498   0x7278             STRB     R0,[R7, #+9]
   1902                              ipnum++;
   \   0000049A   0x1C48             ADDS     R0,R1,#+1
   \   0000049C   0x7238             STRB     R0,[R7, #+8]
   1903                              if (ipnum == 4)
   \   0000049E   0xB2C0             UXTB     R0,R0
   \   000004A0   0x2804             CMP      R0,#+4
   \   000004A2   0xD10E             BNE.N    ??AppS2wProcess_SerialInput_64
   1904                              {
   1905                                  ipnum = 0;
   \   000004A4   0x2000             MOVS     R0,#+0
   \   000004A6   0x7238             STRB     R0,[R7, #+8]
   1906                                  s2wState = S2W_STATE_PORT_STRING;
   \   000004A8   0x200C             MOVS     R0,#+12
   \   000004AA   0xE06F             B.N      ??AppS2wProcess_SerialInput_20
   1907                              }
   1908                          }
   1909                          else
   1910                          {
   1911                              AppS2w_FailEscParse();
   1912                          }
   1913                      break;
   1914          
   1915                      case S2W_STATE_PORT_STRING:
   1916                          if (digits < 5 && isdigit(ch))
   \                     ??AppS2wProcess_SerialInput_65:
   \   000004AC   0x2E05             CMP      R6,#+5
   \   000004AE   0xDA09             BGE.N    ??AppS2wProcess_SerialInput_66
   \   000004B0   0x.... 0x....      BL       isdigit
   \   000004B4   0xB130             CBZ.N    R0,??AppS2wProcess_SerialInput_66
   1917                          {
   1918                              atoibuf[digits] = ch;
   \                     ??AppS2wProcess_SerialInput_59:
   \   000004B6   0x19F0             ADDS     R0,R6,R7
   \   000004B8   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   000004BC   0x7501             STRB     R1,[R0, #+20]
   1919                              digits++;
   \   000004BE   0x1C70             ADDS     R0,R6,#+1
   \   000004C0   0x7278             STRB     R0,[R7, #+9]
   \                     ??AppS2wProcess_SerialInput_64:
   \   000004C2   0xE0AF             B.N      ??AppS2wProcess_SerialInput_11
   1920                          }
   1921                          else if (digits && ch == ':')
   \                     ??AppS2wProcess_SerialInput_66:
   \   000004C4   0xB1B6             CBZ.N    R6,??AppS2wProcess_SerialInput_60
   \   000004C6   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   000004CA   0x283A             CMP      R0,#+58
   \   000004CC   0xD112             BNE.N    ??AppS2wProcess_SerialInput_60
   1922                          {
   1923                              long    temp;
   1924                              atoibuf[digits] = '\0';
   \   000004CE   0x.... 0x....      BL       ?Subroutine3
   1925                              temp = atol(atoibuf);
   1926                              if (temp < 0 || temp > 65535)
   \                     ??CrossCallReturnLabel_7:
   \   000004D2   0xF5B0 0x3F80      CMP      R0,#+65536
   \   000004D6   0xD302             BCC.N    ??AppS2wProcess_SerialInput_67
   1927                              {
   1928                                  AppS2w_FailEscParse();
   \                     ??AppS2wProcess_SerialInput_63:
   \   000004D8   0x.... 0x....      BL       AppS2w_FailEscParse
   1929                                  continue;
   \   000004DC   0xE5A0             B.N      ??AppS2wProcess_SerialInput_1
   1930                              }
   1931                              destPort = temp;
   \                     ??AppS2wProcess_SerialInput_67:
   \   000004DE   0x83F8             STRH     R0,[R7, #+30]
   1932                              if(prevprev == 'Y')
   \   000004E0   0x7AF8             LDRB     R0,[R7, #+11]
   \   000004E2   0x2859             CMP      R0,#+89
   \   000004E4   0xD104             BNE.N    ??AppS2wProcess_SerialInput_43
   1933                              {
   1934                                  s2wState = S2W_STATE_BULK_DATA;
   \   000004E6   0x2013             MOVS     R0,#+19
   \   000004E8   0x7038             STRB     R0,[R7, #+0]
   1935                                  prevprev = 0;
   \   000004EA   0x2000             MOVS     R0,#+0
   \   000004EC   0x72F8             STRB     R0,[R7, #+11]
   \   000004EE   0xE099             B.N      ??AppS2wProcess_SerialInput_11
   1936                              }
   1937                              else
   1938                              {
   1939                                  s2wState = S2W_STATE_DATA;
   \                     ??AppS2wProcess_SerialInput_43:
   \   000004F0   0x2001             MOVS     R0,#+1
   \   000004F2   0xE04B             B.N      ??AppS2wProcess_SerialInput_20
   1940                              }
   1941                          }
   1942                          else
   1943                          {
   1944                               AppS2w_FailEscParse();
   \                     ??AppS2wProcess_SerialInput_60:
   \   000004F4   0x.... 0x....      BL       AppS2w_FailEscParse
   \   000004F8   0xE094             B.N      ??AppS2wProcess_SerialInput_11
   1945                          }
   1946                      break;
   1947                    
   1948                      case S2W_STATE_HTTP_CONTENT_CID:
   1949                      {
   1950                          hCid = AppS2w_CidValidate(ch);
   \                     ??AppS2wProcess_SerialInput_68:
   \   000004FA   0x.... 0x....      BL       AppS2w_CidValidate
   \   000004FE   0x70B8             STRB     R0,[R7, #+2]
   1951                          if(( hCid != INVALID_CID )/* && ( AppS2w_ConnHttpStateGet(hCid) == 1)*/)
   \   00000500   0x28FF             CMP      R0,#+255
   \   00000502   0xD03E             BEQ.N    ??AppS2wProcess_SerialInput_69
   1952                          {
   1953                              UINT8 status=S2W_FAILURE;
   1954          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)			
   1955                            if((httpConfInfo.reqMethod == GSN_HTTP_METHOD_POST) || (httpConfInfo.reqMethod == GSN_HTTP_METHOD_PUT))
   \   00000504   0x.... 0x....      LDR.W    R1,??DataTable136_1
   \   00000508   0x7849             LDRB     R1,[R1, #+1]
   \   0000050A   0x2401             MOVS     R4,#+1
   \   0000050C   0x2903             CMP      R1,#+3
   \   0000050E   0xBF18             IT       NE 
   \   00000510   0x2904             CMPNE    R1,#+4
   \   00000512   0xD106             BNE.N    ??AppS2wProcess_SerialInput_70
   1956                            {
   1957                                status = AppS2wHal_httpContentDataGet(httpConfInfo.reqBodyTotalLen, hCid);
   \   00000514   0x4601             MOV      R1,R0
   \   00000516   0x.... 0x....      LDR.W    R0,??DataTable136_1
   \   0000051A   0x69C0             LDR      R0,[R0, #+28]
   \   0000051C   0x.... 0x....      BL       AppS2wHal_httpContentDataGet
   \   00000520   0x4604             MOV      R4,R0
   1958                            }
   1959          #endif
   1960          #if defined(S2W_GSLINK) &&  defined(S2W_GSLINK_RAW) && defined(S2W_WEB_SERVER)
   1961          				  if((s2wCidList[(hCid)].httpdCtx.method == GSN_HTTP_METHOD_GETRESP) ||  \
   1962          					 (s2wCidList[(hCid)].httpdCtx.method == GSN_HTTP_METHOD_POSTRESP))
   \                     ??AppS2wProcess_SerialInput_70:
   \   00000522   0x78B9             LDRB     R1,[R7, #+2]
   \   00000524   0x.... 0x....      LDR.W    R2,??DataTable128
   \   00000528   0xF44F 0x7094      MOV      R0,#+296
   \   0000052C   0xFB00 0x2001      MLA      R0,R0,R1,R2
   \   00000530   0xF100 0x02DC      ADD      R2,R0,#+220
   \   00000534   0x7912             LDRB     R2,[R2, #+4]
   \   00000536   0x2A08             CMP      R2,#+8
   \   00000538   0xBF14             ITE      NE 
   \   0000053A   0x2A09             CMPNE    R2,#+9
   \   0000053C   0xF1B8 0x0F00      CMPEQ    R8,#+0
   1963                            {
   1964          					  if(respTimeOut == 0 )
   \   00000540   0xD104             BNE.N    ??AppS2wProcess_SerialInput_71
   1965          					 	 status = AppS2wHal_RawhttpContentGet(s2wCidList[hCid].httpdCtx.reqBodyLen, hCid); 	  
   \   00000542   0xF8D0 0x00DC      LDR      R0,[R0, #+220]
   \   00000546   0x.... 0x....      BL       AppS2wHal_RawhttpContentGet
   \   0000054A   0x4604             MOV      R4,R0
   1966                            }                                                           
   1967          #endif
   1968                            s2wState = S2W_STATE_CMD;
   \                     ??AppS2wProcess_SerialInput_71:
   \   0000054C   0x2000             MOVS     R0,#+0
   \   0000054E   0x7038             STRB     R0,[R7, #+0]
   1969          				  	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000550   0x.... 0x....      BL       ?Subroutine11
   1970                            AppS2wProcess_StatusNotify(status, 0);
   \                     ??CrossCallReturnLabel_28:
   \   00000554   0x.... 0x....      BL       ?Subroutine1
   1971          				  	GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_2:
   \   00000558   0x.... 0x....      BL       ?Subroutine10
   1972                       }
   1973                       else
   1974                       {
   1975                           AppS2w_CommandCharProcess(ch);
   1976                           s2wState = S2W_STATE_CMD;
   1977                       }
   1978                  }
   \                     ??CrossCallReturnLabel_20:
   \   0000055C   0xE062             B.N      ??AppS2wProcess_SerialInput_11
   1979                  break;
   1980                      case S2W_STATE_COAP_CONTENT_CID:
   1981          
   1982                      	hCid = AppS2w_CidValidate(ch);
   \                     ??AppS2wProcess_SerialInput_72:
   \   0000055E   0x.... 0x....      BL       AppS2w_CidValidate
   \   00000562   0x70B8             STRB     R0,[R7, #+2]
   1983                          if( hCid != INVALID_CID )
   \   00000564   0x28FF             CMP      R0,#+255
   \   00000566   0xD00C             BEQ.N    ??AppS2wProcess_SerialInput_69
   1984                          {
   1985                          	UINT8 status=S2W_FAILURE;
   1986          
   1987                          	GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000568   0x.... 0x....      BL       ?Subroutine11
   1988          				#ifdef S2W_COAP_SUPPORT
   1989                          	status = AppS2wHal_CoapContentDataGet( hCid);
   \                     ??CrossCallReturnLabel_27:
   \   0000056C   0x78B8             LDRB     R0,[R7, #+2]
   \   0000056E   0x.... 0x....      BL       AppS2wHal_CoapContentDataGet
   \   00000572   0x4604             MOV      R4,R0
   1990          				#endif
   1991                          	GsnOsal_SemRelease(&s2wSyncSemID);
   \   00000574   0x.... 0x....      BL       ?Subroutine10
   1992                              s2wState = S2W_STATE_CMD;
   \                     ??CrossCallReturnLabel_19:
   \   00000578   0x2000             MOVS     R0,#+0
   \   0000057A   0x7038             STRB     R0,[R7, #+0]
   1993                              AppS2wProcess_StatusNotify(status, 0);
   \   0000057C   0x.... 0x....      BL       ?Subroutine1
   1994                          }
   \                     ??CrossCallReturnLabel_1:
   \   00000580   0xE050             B.N      ??AppS2wProcess_SerialInput_11
   1995                          else
   1996                          {
   1997                              AppS2w_CommandCharProcess(ch);
   \                     ??AppS2wProcess_SerialInput_69:
   \   00000582   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000586   0x.... 0x....      BL       AppS2w_CommandCharProcess
   1998                              s2wState = S2W_STATE_CMD;
   \                     ??AppS2wProcess_SerialInput_7:
   \   0000058A   0x2000             MOVS     R0,#+0
   \                     ??AppS2wProcess_SerialInput_20:
   \   0000058C   0x7038             STRB     R0,[R7, #+0]
   \   0000058E   0xE049             B.N      ??AppS2wProcess_SerialInput_11
   1999                          }
   2000                      break;
   2001          
   2002          #if defined(S2W_GSLINK) && defined(S2W_GSLINK_XML)  
   2003          		 case S2W_STATE_GET_CID:   
   2004          			curCid = AppS2w_CidValidate(ch);
   \                     ??AppS2wProcess_SerialInput_73:
   \   00000590   0x.... 0x....      BL       AppS2w_CidValidate
   \   00000594   0x7178             STRB     R0,[R7, #+5]
   2005                  	if (curCid == INVALID_CID)
   \   00000596   0x28FF             CMP      R0,#+255
   \   00000598   0xD102             BNE.N    ??AppS2wProcess_SerialInput_74
   2006             	    	{
   2007                     		 AppS2w_FailEscParse();
   \   0000059A   0x.... 0x....      BL       AppS2w_FailEscParse
   \   0000059E   0xE001             B.N      ??AppS2wProcess_SerialInput_75
   2008                 		}
   2009          			else				
   2010          				s2wState =  S2W_STATE_XML_LEN;		
   \                     ??AppS2wProcess_SerialInput_74:
   \   000005A0   0x2017             MOVS     R0,#+23
   \   000005A2   0x7038             STRB     R0,[R7, #+0]
   2011          				elementType=1;
   \                     ??AppS2wProcess_SerialInput_75:
   \   000005A4   0x2001             MOVS     R0,#+1
   \   000005A6   0x9002             STR      R0,[SP, #+8]
   2012          
   2013          			break;
   \   000005A8   0xE03C             B.N      ??AppS2wProcess_SerialInput_11
   2014          		 case S2W_STATE_XML_LEN :	/* XML data  length*/
   2015          	 		S2w_RawLenCharProcess(ch);
   \                     ??AppS2wProcess_SerialInput_76:
   \   000005AA   0x6B38             LDR      R0,[R7, #+48]
   \   000005AC   0x.... 0x....      LDR.W    R1,??DataTable136_2
   \   000005B0   0xF89D 0x2004      LDRB     R2,[SP, #+4]
   \   000005B4   0x5442             STRB     R2,[R0, R1]
   \   000005B6   0x1C40             ADDS     R0,R0,#+1
   \   000005B8   0x6338             STR      R0,[R7, #+48]
   2016           			if(rawLenIndex == 4 )
   \   000005BA   0x2804             CMP      R0,#+4
   \   000005BC   0xD132             BNE.N    ??AppS2wProcess_SerialInput_11
   2017          			{
   2018          				rawLen = S2w_RawLenCalculate();
   \   000005BE   0x2000             MOVS     R0,#+0
   \   000005C0   0x9000             STR      R0,[SP, #+0]
   \   000005C2   0x4608             MOV      R0,R1
   \   000005C4   0x2100             MOVS     R1,#+0
   \   000005C6   0x7101             STRB     R1,[R0, #+4]
   \   000005C8   0xA900             ADD      R1,SP,#+0
   \   000005CA   0x.... 0x....      BL       AppS2wParse_Int
   \   000005CE   0x2000             MOVS     R0,#+0
   \   000005D0   0x6338             STR      R0,[R7, #+48]
   \   000005D2   0x9800             LDR      R0,[SP, #+0]
   \   000005D4   0x6378             STR      R0,[R7, #+52]
   2019          				rawLenIndex = 0;
   2020          				if(rawLen ==	S2W_XML_ATTRIBUTE_ID || rawLen == S2W_XML_COMPLEX_TAG_START_ID )
   \   000005D6   0x4601             MOV      R1,R0
   \   000005D8   0xF242 0x700C      MOVW     R0,#+9996
   \   000005DC   0x4281             CMP      R1,R0
   \   000005DE   0xBF1A             ITTE     NE 
   \   000005E0   0xF242 0x700E      MOVWNE   R0,#+9998
   \   000005E4   0x4281             CMPNE    R1,R0
   \   000005E6   0x9102             STREQ    R1,[SP, #+8]
   2021          				{
   2022          					elementType=rawLen;					
   2023          					break;
   \   000005E8   0xD01C             BEQ.N    ??AppS2wProcess_SerialInput_11
   2024          				}
   2025          				else if(rawLen == 0 || rawLen == S2W_XML_COMPLEX_TAG_END_ID)										
   \   000005EA   0x2900             CMP      R1,#+0
   \   000005EC   0xBF1C             ITT      NE 
   \   000005EE   0xF242 0x700D      MOVWNE   R0,#+9997
   \   000005F2   0x4281             CMPNE    R1,R0
   \   000005F4   0xBF0E             ITEE     EQ 
   \   000005F6   0x9102             STREQ    R1,[SP, #+8]
   \   000005F8   0x.... 0x....      LDRNE.W  R0,??DataTable132_3
   \   000005FC   0x.... 0x....      BLNE     AppS2wHal_CharNGet
   2026          					elementType=rawLen;
   2027          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2028                          else if((S2W_HTTP_RESPONSE_LINE == rawLen) || (S2W_HTTP_HEADER == rawLen))
   2029                          {
   2030                              elementType = rawLen;
   2031                              break;
   2032                          }
   2033          #endif
   2034          				else			
   2035          					/* Start receiving the tags*/
   2036          					AppS2wHal_CharNGet(dataBuffer, rawLen);
   2037          #ifdef S2W_WEB_SERVER					
   2038                          if(respTimeOut == 0 )
   \   00000600   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000604   0xD106             BNE.N    ??AppS2wProcess_SerialInput_77
   2039                          {
   2040          #endif
   2041          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2042                              if((S2W_HTTP_RESPONSE_LINE == elementType) || (S2W_HTTP_HEADER == elementType))
   2043                              {
   2044                                  AppS2w_HttpDataProcess(curCid, dataBuffer, rawLen, elementType);
   2045                              }
   2046                              else
   2047          #endif
   2048          					{	
   2049                                  AppS2w_XmlDataProcess(curCid,dataBuffer,rawLen,elementType);
   \   00000606   0x9B02             LDR      R3,[SP, #+8]
   \   00000608   0x6B7A             LDR      R2,[R7, #+52]
   \   0000060A   0x7978             LDRB     R0,[R7, #+5]
   \   0000060C   0x.... 0x....      LDR.W    R1,??DataTable132_3
   \   00000610   0x.... 0x....      BL       AppS2w_XmlDataProcess
   2050          					}
   2051          #ifdef S2W_WEB_SERVER
   2052                          }
   2053                          respTimeOut =0;
   \                     ??AppS2wProcess_SerialInput_77:
   \   00000614   0xF04F 0x0800      MOV      R8,#+0
   2054          #endif				
   2055          #if 0
   2056          					rawTotalIndex = 0;			   
   2057          #endif
   2058          					s2wState = S2W_STATE_CMD;
   \   00000618   0xF887 0x8000      STRB     R8,[R7, #+0]
   2059          					rawLen =0;				
   \   0000061C   0xF8C7 0x8034      STR      R8,[R7, #+52]
   2060          					rawLenIndex=0;
   \   00000620   0xF8C7 0x8030      STR      R8,[R7, #+48]
   2061          				}
   2062          				//else
   2063          					//s2wState = S2W_STATE_CMD;	
   2064          
   2065          			break; 
   2066          #endif		
   2067          #ifdef S2W_IP2WIFI_SUPPORT
   2068                  case S2W_STATE_RAW:
   2069          
   2070                      if(ch == S2W_COLON)
   2071          					{
   2072                          if(rawColon == 0)
   2073          						{
   2074                             rawColon = 1;
   2075          							}
   2076                          else
   2077          							{
   2078                             rawLen = S2w_RawLenCalculate();
   2079                             if(rawLen > 1560)
   2080          							{
   2081                                 S2w_Printf("\r\nERROR:INVALID LENGTH\r\n");
   2082          							s2wState = S2W_STATE_CMD;
   2083          						}
   2084          						else
   2085          						{
   2086            			           AppS2wHal_CharNGet(dataBuffer, rawLen);
   2087          		  		       dataIndex=rawLen;
   2088          		  		       S2w_RawDataBufferTransmit();
   2089          							s2wState = S2W_STATE_CMD;
   2090          	                   rawTotalIndex = 0;
   2091          	                   rawLen = 0;
   2092          					}
   2093                             rawColon = 0;
   2094          					}
   2095          				 }
   2096                      else
   2097                      {
   2098                          S2w_RawLenCharProcess(ch);
   2099          
   2100          				 }
   2101          				 break;
   2102          #endif
   2103                  }
   2104                  prev = ch;
   \                     ??AppS2wProcess_SerialInput_11:
   \   00000624   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   00000628   0x72B8             STRB     R0,[R7, #+10]
   \   0000062A   0xE4F9             B.N      ??AppS2wProcess_SerialInput_1
   2105              }
   2106          }
   \                     ??AppS2wProcess_SerialInput_4:
   \   0000062C   0xB00A             ADD      SP,SP,#+40
   \   0000062E   0xE8BD 0x8BF0      POP      {R4-R9,R11,PC}   ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0xF04F 0x31FF      MOV      R1,#-1
   \   00000006   0x4648             MOV      R0,R9
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x19F0             ADDS     R0,R6,R7
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x7501             STRB     R1,[R0, #+20]
   \   00000006   0xF107 0x0014      ADD      R0,R7,#+20
   \   0000000A   0x.... 0x....      B.W      atol

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x2100             MOVS     R1,#+0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      AppS2wProcess_StatusNotify

   \                                 In section .data, align 8
   \                     s2wState:
   \   00000000   0x00               DC8 0
   \                     s2wLinkState:
   \   00000001   0x00               DC8 0
   \   00000002   0xFF               DC8 255
   \                     s2wIsAutoconnected:
   \   00000003   0x00               DC8 0
   \                     s2wAutoConnState:
   \   00000004   0x00               DC8 0
   \                     curCid:
   \   00000005   0xFF               DC8 255
   \                     lengthConvertIndex:
   \   00000006   0x00               DC8 0
   \                     auto_esc:
   \   00000007   0x00               DC8 0
   \   00000008   0x00               DC8 0
   \   00000009   0x00               DC8 0
   \   0000000A   0x00               DC8 0
   \   0000000B   0x00               DC8 0
   \   0000000C   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000010   0x2B 0x2B          DC8 43, 43, 43, 43
   \              0x2B 0x2B    
   \   00000014   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     lengthSpecialCmd:
   \   0000001C   0x0000             DC16 0
   \   0000001E   0x00 0x00          DC8 0, 0
   \                     s2wTxBytes:
   \   00000020   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     s2wRxBytes:
   \   00000024   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \                     s2wFlashParams:
   \   00000028   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000000         DC32 0
   \   00000030   0x00000000         DC32 0
   \   00000034   0x00000000         DC32 0
   \   00000038   0x........         DC32 `?<Constant "OK">`, `?<Constant "ERROR">`
   \              0x........   
   \   00000040   0x........         DC32 `?<Constant "ERROR: INVALID INPUT">`
   \   00000044   0x........         DC32 `?<Constant "ERROR: SOCKET FAILURE">`
   \   00000048   0x........         DC32 `?<Constant "ERROR: NO CID">`, `?<Constant "ERROR: INVALID CID">`
   \              0x........   
   \   00000050   0x........         DC32 `?<Constant "ERROR: NOT SUPPORTED">`
   \   00000054   0x........         DC32 `?<Constant "\\r\\nCONNECT %x\\r\\n">`
   \   00000058   0x........         DC32 `?<Constant "\\r\\nDISCONNECT %x\\r\\n">`
   \   0000005C   0x........         DC32 `?<Constant "DISASSOCIATED">`
   \   00000060   0x........         DC32 `?<Constant "\\r\\nDisassociation Event\\r\\n">`
   \   00000064   0x........         DC32 `?<Constant "\\n\\rOut of StandBy-Timer\\r\\n">`
   \   00000068   0x........         DC32 `?<Constant "\\n\\rOut of StandBy-Alarm\\r\\n">`
   \   0000006C   0x........         DC32 `?<Constant "\\r\\nOut of Deep Sleep\\r\\n">`
   \   00000070   0x........         DC32 `?<Constant "\\r\\nUnExpected Warm Boo...">`
   \   00000074   0x........         DC32 `?<Constant "ERROR: IP CONFIG FAIL">`
   \   00000078   0x........         DC32 `?<Constant "Serial2WiFi APP">`
   \   0000007C   0x........         DC32 `?<Constant "Serial2WiFi APP-Ext.PA">`
   \   00000080   0x........         DC32 `?<Constant "NWCONN-SUCCESS">`, `?<Constant "IP CONFIG-NEW IP">`
   \              0x........   
   \   00000088   0x........         DC32 `?<Constant "\\n\\rAPP Reset-Wlan-Wd\\r\\n">`
   \   0000008C   0x........         DC32 `?<Constant "\\n\\rAPP Reset-App-Wd\\r\\n">`
   \   00000090   0x........         DC32 `?<Constant "\\n\\rAPP Reset-Wlan SW R...">`
   \   00000094   0x........         DC32 `?<Constant "APP Reset-APP SW Reset">`
   \   00000098   0x........         DC32 `?<Constant "\\n\\rAPP Reset-Wlan Exce...">`
   \   0000009C   0x........         DC32 `?<Constant "APP Reset External Fl...">`
   \   000000A0   0x........         DC32 `?<Constant "\\n\\rSerial2WiFi APP Unk...">`
   \   000000A4   0x........         DC32 `?<Constant "\\r\\nExternal Reset Boot\\r\\n">`
   \   000000A8   0x........         DC32 `?<Constant "\\n\\nHW Crypto Boot\\r\\n">`
   \   000000AC   0x........         DC32 `?<Constant "\\n\\rJTAG Reset Boot\\r\\n">`
   \   000000B0   0x........         DC32 `?<Constant "\\n\\rBrownout Reset Boot\\r\\n">`
   \   000000B4   0x........         DC32 `?<Constant "\\n\\rIP Conflict Detected\\r\\n">`
   \   000000B8   0x........         DC32 `?<Constant " Registration Failed ...">`
   \   000000BC   0x........         DC32 `?<Constant " Registration Success...">`
   \                     dSendSem:
   \   000000C0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000D0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000DC   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   000000E0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000000F0   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000100   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000110   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     auto_esc_timer:
   \   00000118   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000128   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000138   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000148   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000150   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000160   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000170   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000180   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \                     acNcmTimer:
   \   00000188   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000198   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001A8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   000001B8   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .data, align 4
   \                     S2W_AsyncStatusList:
   \   00000000   0x........         DC32 `?<Constant "ERROR: SOCKET FAILURE">`, `?<Constant "CONNECT">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "DISCONNECT">`, `?<Constant "Disassociation Event">`
   \              0x........   
   \   00000010   0x........         DC32 `?<Constant "Out of StandBy-Timer">`
   \   00000014   0x........         DC32 `?<Constant "Out of StandBy-Alarm">`
   \   00000018   0x........         DC32 `?<Constant "Out of Deep Sleep">`
   \   0000001C   0x........         DC32 `?<Constant "UnExpected Warm Boot(...">`
   \   00000020   0x........         DC32 `?<Constant "ERROR: IP CONFIG FAIL">`
   \   00000024   0x........         DC32 `?<Constant "Serial2WiFi APP">`
   \   00000028   0x........         DC32 `?<Constant "Serial2WiFi APP-Ext.PA">`, `?<Constant "ERROR">`
   \              0x........   
   \   00000030   0x........         DC32 `?<Constant "NWCONN-SUCCESS">`, `?<Constant "IP CONFIG-NEW IP">`
   \              0x........   
   \   00000038   0x........         DC32 `?<Constant "APP Reset-Wlan-Wd">`
   \   0000003C   0x........         DC32 `?<Constant "APP Reset-App-Wd">`
   \   00000040   0x........         DC32 `?<Constant "APP Reset-Wlan SW Reset">`
   \   00000044   0x........         DC32 `?<Constant "APP Reset-APP SW Reset">`
   \   00000048   0x........         DC32 `?<Constant "APP Reset-Wlan Except">`
   \   0000004C   0x........         DC32 `?<Constant "APP Reset External Fl...">`
   \   00000050   0x........         DC32 `?<Constant "Serial2WiFi APP Unkno...">`
   \   00000054   0x........         DC32 `?<Constant "External Reset Boot">`
   \   00000058   0x........         DC32 `?<Constant "HW Crypto Boot">`, `?<Constant "JTAG Reset Boot">`
   \              0x........   
   \   00000060   0x........         DC32 `?<Constant "Brownout Reset Boot">`
   \   00000064   0x........         DC32 `?<Constant "IP Conflict Detected">`
   \   00000068   0x........         DC32 `?<Constant " Registration Failed ...">`
   \   0000006C   0x........         DC32 `?<Constant " Registration Success...">`
   2107          #ifdef S2W_DUAL_INTERFACE_SUPPORT
   2108          extern GSN_OSAL_QUEUE_T s2wSerial2InputTaskQueue;
   2109          extern GSN_UART_HANDLE_T ptUartHandle1;
   2110          
   2111          VOID AppS2wProcess_Serial2Input()
   2112          {
   2113              static char esc1[4] = { '+', '+', '+', '+' };
   2114              static UINT8 ipnum1;
   2115              static char atoibuf1[6];
   2116              static UINT8 digits1;
   2117              static UINT8 prev1 = 0;
   2118              static UINT8 prevprev1 = 0;
   2119          	UINT8 ch, softFlow;
   2120              UINT32 msg=0;
   2121              UINT8 status;
   2122              UINT8 respTimeOut=0;
   2123              UINT32 elementType;
   2124              while(1){
   2125              //AppS2wHal_UartCharGetNB1(&ch);
   2126              AppS2wHal_CharGet1(&ch);
   2127              // pend on a message queue
   2128              GsnOsal_QueueGet(&s2wSerial2InputTaskQueue, (UINT8 *)&msg, GSN_OSAL_WAIT_FOREVER);
   2129          
   2130              // expect only data so no echo
   2131                  switch (s2wState)
   2132                  {
   2133                      /* special command comes with the length */
   2134          			;
   2135                      case S2W_STATE_CMD:
   2136                          if (ch == S2W_ESC)
   2137                          {
   2138                              s2wState = S2W_STATE_CMD_ESC;
   2139                              continue;
   2140                          }
   2141                          //AppS2w_CommandCharProcess(ch);
   2142                      break;
   2143                      case S2W_STATE_BULK_DATA:
   2144                          /* we must read 4 byte ascii lenth
   2145                          and then convert it to binary value */
   2146                      {
   2147                          //UINT8 *dataBufferPointer;
   2148                          lengthConvertIndex++;
   2149                          /* next after cid  char 2 to 5 */
   2150                          lengthSpecialCmd *= 10;
   2151                          lengthSpecialCmd += (ch - '0'); /* assuming number will come*/
   2152                          if(lengthConvertIndex == 4)
   2153                          {
   2154                              AppS2wHal_CharNGet1(dataBuffer, lengthSpecialCmd);
   2155                              dataIndex = lengthSpecialCmd;
   2156          
   2157                              AppS2w_DataTransmit(dataBuffer);
   2158                              s2wState =  S2W_STATE_CMD;
   2159                          }
   2160                      }
   2161                      break;
   2162                      case S2W_STATE_DATA_AUTO:
   2163                      {
   2164                          if (ch == '+' && auto_esc < 3)
   2165          		        {
   2166          		             auto_esc++;
   2167          		             AppS2wHal_TimerStop(&nagleTimer);
   2168          					 if(s2wCurrent.autoExitTimeout)
   2169                               {
   2170          		             	AppS2wHal_TimerStart(&auto_esc_timer,s2wCurrent.autoExitTimeout);
   2171          					 }
   2172          		        }
   2173          		        else if (auto_esc)
   2174          		        {
   2175          		             UINT8   i;
   2176          		             AppS2wHal_TimerStop(&auto_esc_timer);
   2177          
   2178          		             esc1[auto_esc] = ch;
   2179          		             i = 0;
   2180          		             AppS2wHal_TimerStart(&nagleTimer,
   2181          		                    s2wCurrent.registers[S2W_REG_NAGLE_WAIT_TIME]);
   2182          		             while (i <= auto_esc)
   2183          		             {
   2184          		                 AppS2w_DataCharProcess(esc1[i++]);
   2185          		             }
   2186          
   2187          		             esc1[auto_esc] = '+';
   2188          		             auto_esc = 0;
   2189          		        }
   2190          		        else
   2191          			    {
   2192          		             auto_esc = 0;
   2193          		             AppS2w_DataCharProcess(ch);
   2194          
   2195          		        }
   2196          
   2197          			}
   2198          			break;
   2199                      case S2W_STATE_DATA:
   2200                          if (ch == S2W_ESC)
   2201                          {
   2202                              s2wState = S2W_STATE_DATA_ESC;
   2203                              continue;
   2204                          }
   2205                          AppS2w_DataCharProcess(ch);
   2206                      break;
   2207          
   2208                      case S2W_STATE_DATA_ESC:
   2209                          if(APP_S2W_GET_SERIAL_DEVICE_ID())
   2210                          {//Note: Is it not applicable for SPI interface - since we already apply stuffing  at lower layer
   2211                              softFlow = 0x00;
   2212                          }
   2213                          else
   2214                          {
   2215                              softFlow = s2wCurrent.serialPortConf.conf.uart.softflow;
   2216                          }
   2217                          if (ch == S2W_ESC)
   2218                          {
   2219                              AppS2w_DataCharProcess(ch);
   2220                              s2wState = S2W_STATE_DATA;
   2221                          }
   2222                          else if (ch == 'E' || ch == 'S' || ch == 'u' || ch == 'U')
   2223                          {
   2224                              status = AppS2w_DataBufferTransmit();
   2225                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2226                              AppS2wProcess_StatusNotify(status, 0);
   2227                              GsnOsal_SemRelease(&s2wSyncSemID);
   2228                              curCid = INVALID_CID;
   2229                              s2wState = ch == 'E' ? S2W_STATE_CMD : S2W_STATE_CID;
   2230                          }
   2231                          else if (ch == 'C')
   2232                          {
   2233                              status = AppS2w_DataBufferTransmit();
   2234                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2235                              AppS2wProcess_StatusNotify(status, 0);
   2236                              GsnOsal_SemRelease(&s2wSyncSemID);
   2237                              AppS2wHal_NetClose(curCid);
   2238                              s2wState = S2W_STATE_CMD;
   2239                          }
   2240                          else if ((ch == 'Q' || ch == 'T')
   2241                                    && (softFlow))
   2242                          {
   2243                              AppS2w_DataCharProcess(ch == 'Q' ? S2W_XON : S2W_XOFF);
   2244                              s2wState = S2W_STATE_DATA;
   2245                          }
   2246                          else
   2247                          {
   2248                              s2wState = S2W_STATE_DATA;
   2249                          }
   2250                      break;
   2251          
   2252                      case S2W_STATE_CID:
   2253                          curCid = AppS2w_CidValidate(ch);
   2254                          if (curCid == INVALID_CID)
   2255                          {
   2256                              AppS2w_FailEscParse();
   2257                          }
   2258                          else
   2259                          {
   2260                              digits1 = 0;
   2261                              ipnum1 = 0;
   2262          #if  defined(S2W_FS_SPI_HI_ENABLE_1) || defined(S2W_SDIO_ENABLE_1)
   2263          #else
   2264                              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2265                              AppS2wProcess_StatusNotify(S2W_SUCCESS, 0);
   2266                              GsnOsal_SemRelease(&s2wSyncSemID);
   2267          #endif
   2268                              if (prev1 == 'S')
   2269                                  s2wState = S2W_STATE_DATA;
   2270                              else if (prev1 == 'u')
   2271                                  s2wState = S2W_STATE_IPPORT;
   2272                              else if (prev1 == 'U')
   2273                                  s2wState = S2W_STATE_IP_STRING;
   2274                              else if (prev1 == 'Z')
   2275                                  s2wState = S2W_STATE_BULK_DATA;
   2276                              else if(prev1 == 'Y')
   2277                              {
   2278                                  prevprev1 = prev1;
   2279                                  s2wState = S2W_STATE_IP_STRING;
   2280                              }
   2281                          }
   2282                      break;
   2283          
   2284                      case S2W_STATE_IPPORT:
   2285                          if (ipnum1 < 4)
   2286                          {
   2287                              destAddr[ipnum1] = ch;
   2288                          }
   2289                          else if (ipnum1 == 4)
   2290                          {
   2291                              destPort = (UINT16) ch << 8;
   2292                          }
   2293                          else if (ipnum1 == 5)
   2294                          {
   2295                              destPort |= ch;
   2296                              s2wState = S2W_STATE_DATA;
   2297                          }
   2298                          ipnum1++;
   2299                      break;
   2300          
   2301                      case S2W_STATE_IP_STRING:
   2302                          if (digits1 < 3 && isdigit(ch))
   2303                          {
   2304                              atoibuf1[digits1] = ch;
   2305                              digits1++;
   2306                          }
   2307                          else if (digits1
   2308                               && ((ipnum1 < 3 && ch == '.')
   2309                               || (ipnum1 == 3 && ch == ':')))
   2310                          {
   2311                              long temp;
   2312                              atoibuf1[digits1] = '\0';
   2313                              temp = atol(atoibuf1);
   2314                              if (temp < 0 || temp > 255)
   2315                              {
   2316                                  AppS2w_FailEscParse();
   2317                                  continue;
   2318                              }
   2319                              destAddr[ipnum1] = temp;
   2320                              digits1 = 0;
   2321                              ipnum1++;
   2322                              if (ipnum1 == 4)
   2323                              {
   2324                                  ipnum1 = 0;
   2325                                  s2wState = S2W_STATE_PORT_STRING;
   2326                              }
   2327                          }
   2328                          else
   2329                          {
   2330                              AppS2w_FailEscParse();
   2331                          }
   2332                      break;
   2333          
   2334                      case S2W_STATE_PORT_STRING:
   2335                          if (digits1 < 5 && isdigit(ch))
   2336                          {
   2337                              atoibuf1[digits1] = ch;
   2338                              digits1++;
   2339                          }
   2340                          else if (digits1 && ch == ':')
   2341                          {
   2342                              long    temp;
   2343                              atoibuf1[digits1] = '\0';
   2344                              temp = atol(atoibuf1);
   2345                              if (temp < 0 || temp > 65535)
   2346                              {
   2347                                  AppS2w_FailEscParse();
   2348                                  continue;
   2349                              }
   2350                              destPort = temp;
   2351                              if(prevprev1 == 'Y')
   2352                              {
   2353                                  s2wState = S2W_STATE_BULK_DATA;
   2354                                  prevprev1 = 0;
   2355                              }
   2356                              else
   2357                              {
   2358                                  s2wState = S2W_STATE_DATA;
   2359                              }
   2360                          }
   2361                          else
   2362                          {
   2363                               AppS2w_FailEscParse();
   2364                          }
   2365                      break;
   2366                      case S2W_STATE_CMD_ESC:
   2367                          if (ch == 'S' || ch == 'u' || ch == 'U')
   2368                          {
   2369                              s2wState = S2W_STATE_CID;
   2370                          }
   2371          #if defined(S2W_GSLINK) && defined(S2W_GSLINK_XML)
   2372                          else if(((ch == 'G')  || (ch == 'g'))&& s2wappMainTaskCtxt->xmlParseEn == 1 )
   2373                          {
   2374                              rawLen=0;
   2375                              rawLenIndex=0;
   2376                              s2wState = S2W_STATE_GET_CID;
   2377          #ifdef S2W_WEB_SERVER
   2378          					if(s2wappMainTaskCtxt->respTimeOut !=0 && s2wappMainTaskCtxt->responseInprogress == 1)
   2379          					{
   2380          						 if (GSN_SUCCESS != GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl))
   2381          							 respTimeOut = 1;
   2382          					}
   2383          					s2wappMainTaskCtxt->responseInprogress = 0;
   2384           #endif
   2385                          }
   2386          #endif
   2387                          else if((ch == 'Z') || (ch == 'Y'))
   2388                          {
   2389                              s2wState = S2W_STATE_CID;
   2390                              lengthSpecialCmd = 0;
   2391                              lengthConvertIndex = 0;
   2392                          }
   2393          #ifdef S2W_IP2WIFI_SUPPORT
   2394                          else if (ch == 'R' || ch == 'r')
   2395                          {
   2396                              {
   2397          						rawLen=0;
   2398                                  rawLenIndex=0;
   2399                                  s2wState = S2W_STATE_RAW;
   2400                              }
   2401                          }
   2402          #endif
   2403                          else if ((ch == 'c')|| (ch == 'C'))
   2404                          {
   2405                             s2wState = S2W_STATE_CMD;
   2406                          }
   2407                          else if ((ch == 'w')|| (ch == 'W'))
   2408          		        {
   2409          		             s2wState = S2W_STATE_CERT;
   2410          		             status = AppS2wCertificateData(ch);
   2411          					 if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   2412          					 {
   2413          					     s2wSpiFs_Flush();
   2414                               }
   2415          		                if((status == S2W_SUCCESS) || (status == S2W_FAILURE))
   2416          		                    s2wState = S2W_STATE_CMD;
   2417          		        }
   2418          
   2419          #ifdef S2W_FILE_SYS
   2420          				else if((ch == 'f') || (ch == 'F'))
   2421          				{
   2422          					s2wState = S2W_STATE_FWRITE;
   2423          					status = AppS2wHal_FileWriteDataGet(s2wappMainTaskCtxt->appExtFsCtx.fileInfo.fd, s2wappMainTaskCtxt->appExtFsCtx.fileInfo.size);
   2424          					if((status == S2W_SUCCESS) || (status == S2W_FAILURE))
   2425          					s2wState = S2W_STATE_CMD;
   2426          				}
   2427          #endif
   2428          
   2429          		        else if ((ch == 'H')|| (ch == 'h'))
   2430          	            {
   2431          	                s2wState = S2W_STATE_HTTP_CONTENT_CID;
   2432          #if defined(S2W_WEB_SERVER) && defined(S2W_GSLINK_RAW)
   2433          					if(s2wappMainTaskCtxt->respTimeOut !=0 && s2wappMainTaskCtxt->responseInprogress == 1)
   2434          					{
   2435          						 if (GSN_SUCCESS != GsnSoftTmr_Stop(s2wappMainTaskCtxt->respTimeOutTmrHndl))
   2436          							 respTimeOut = 1;
   2437          					}
   2438          					s2wappMainTaskCtxt->responseInprogress = 0;
   2439          #endif
   2440          		        }
   2441          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   2442                          else if ((((ch == 'D')|| (ch == 'd')) && (s2wLinkState == S2W_LINK_STATE_DISCONNECTED)))
   2443                          {
   2444                              s2wState = S2W_STATE_UNSOLICITED_DATA;
   2445                              dataIndex = 0;
   2446                          }
   2447          #endif
   2448                          else
   2449                          {
   2450                              s2wState = S2W_STATE_CMD;
   2451                              AppS2w_CommandCharProcess(S2W_ESC);
   2452                              AppS2w_CommandCharProcess(ch);
   2453                      }
   2454                      break;
   2455          #ifdef S2W_UNASSOC_TXRX_SUPPORT
   2456                      case S2W_STATE_UNSOLICITED_DATA:
   2457                              dataBuffer[0]= ch;
   2458                              if(s2wappMainTaskCtxt->frame.macFrameLen)
   2459                              {
   2460                                  AppS2wHal_CharNGet1(&dataBuffer[1], s2wappMainTaskCtxt->frame.macFrameLen-1);
   2461                                  dataIndex = s2wappMainTaskCtxt->frame.macFrameLen;
   2462                                  // first start the mode
   2463          
   2464          						GSN_WDD_UAM_START_RESP_T resp;
   2465                                  status= GsnWdd_UAMStart(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp);
   2466                                  if(status != GSN_SUCCESS)
   2467                                  {
   2468          							AppS2wProcess_StatusNotify(status, 0);
   2469          						}
   2470                                  status = GsnWdd_UamDataSend(&(s2wappMainTaskCtxt->if0.wddCtx),&s2wappMainTaskCtxt->frame,
   2471                                                     dataBuffer, dataIndex);
   2472          
   2473                                  AppS2wProcess_StatusNotify(status, 0);
   2474                                  // stop the mode
   2475                                  GSN_WDD_UAM_STOP_RESP_T resp1;
   2476                                  GsnWdd_UAMStop(&(s2wappMainTaskCtxt->if0.wddCtx), 0, &resp1);
   2477          
   2478          					}
   2479          					s2wState = S2W_STATE_CMD;
   2480                      break;
   2481          #endif
   2482          #ifdef S2W_IP2WIFI_SUPPORT
   2483                  case S2W_STATE_RAW:
   2484          
   2485                      if(ch == S2W_COLON)
   2486          			{
   2487                          if(rawColon == 0)
   2488          				{
   2489                             rawColon = 1;
   2490          				}
   2491                          else
   2492          				{
   2493                             rawLen = S2w_RawLenCalculate();
   2494                             if(rawLen > 1560)
   2495          				   {
   2496                                 S2w_Printf("\r\nERROR:INVALID LENGTH\r\n");
   2497          					   s2wState = S2W_STATE_CMD;
   2498          				   }
   2499          					else
   2500          					{
   2501            			           AppS2wHal_CharNGet1(dataBuffer, rawLen);
   2502          		  		       dataIndex=rawLen;
   2503          		  		       S2w_RawDataBufferTransmit();
   2504          					   s2wState = S2W_STATE_CMD;
   2505          	                   rawTotalIndex = 0;
   2506          	                   rawLen = 0;
   2507          					}
   2508                                 rawColon = 0;
   2509          				}
   2510          		    }
   2511                      else
   2512                      {
   2513                          S2w_RawLenCharProcess(ch);
   2514          
   2515          			 }
   2516          			 break;
   2517          #endif
   2518          
   2519                      case S2W_STATE_HTTP_CONTENT_CID:
   2520                      {
   2521                          hCid = AppS2w_CidValidate(ch);
   2522                          if(( hCid != INVALID_CID )/* && ( AppS2w_ConnHttpStateGet(hCid) == 1)*/)
   2523                          {
   2524                              UINT8 status=S2W_FAILURE;
   2525                             GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2526          #if defined (S2W_HTTPS_SUPPORT) || (S2W_HTTPC_SUPPORT)
   2527                            if((httpConfInfo.reqMethod == GSN_HTTP_METHOD_POST) || (httpConfInfo.reqMethod == GSN_HTTP_METHOD_PUT))
   2528                            {
   2529                                status = AppS2wHal_httpContentDataGet(httpConfInfo.reqBodyTotalLen, hCid);
   2530                            }
   2531          #endif
   2532          #if defined(S2W_GSLINK) &&  defined(S2W_GSLINK_RAW) && defined(S2W_WEB_SERVER)
   2533          				  if((s2wCidList[(hCid)].httpdCtx.method == GSN_HTTP_METHOD_GETRESP) ||  \
   2534          					 (s2wCidList[(hCid)].httpdCtx.method == GSN_HTTP_METHOD_POSTRESP))
   2535                            {
   2536          					  if(respTimeOut == 0 )
   2537          					 	 status = AppS2wHal_RawhttpContentGet(s2wCidList[hCid].httpdCtx.reqBodyLen, hCid);
   2538                            }
   2539          #endif
   2540                            GsnOsal_SemRelease(&s2wSyncSemID);
   2541                            s2wState = S2W_STATE_CMD;
   2542                            AppS2wProcess_StatusNotify(status, 0);
   2543                       }
   2544                       else
   2545                       {
   2546                           AppS2w_CommandCharProcess(ch);
   2547                           s2wState = S2W_STATE_CMD;
   2548                       }
   2549                  }
   2550                  break;
   2551          #if defined(S2W_GSLINK) && defined(S2W_GSLINK_XML)
   2552          		 case S2W_STATE_GET_CID:
   2553          			curCid = AppS2w_CidValidate(ch);
   2554                  	if (curCid == INVALID_CID)
   2555             	    	{
   2556                     		 AppS2w_FailEscParse();
   2557                 		}
   2558          			else
   2559          				s2wState =  S2W_STATE_XML_LEN;
   2560          				elementType=1;
   2561          
   2562          			break;
   2563          		 case S2W_STATE_XML_LEN :	/* XML data  length*/
   2564          	 		S2w_RawLenCharProcess(ch);
   2565           			if(rawLenIndex == 4 )
   2566          			{
   2567          				rawLen = S2w_RawLenCalculate();
   2568          				rawLenIndex = 0;
   2569          				if(rawLen ==	S2W_XML_ATTRIBUTE_ID || rawLen == S2W_XML_COMPLEX_TAG_START_ID )
   2570          				{
   2571          					elementType=rawLen;
   2572          					break;
   2573          				}
   2574          				else if(rawLen == 0 || rawLen == S2W_XML_COMPLEX_TAG_END_ID)
   2575          					elementType=rawLen;
   2576          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2577                          else if((S2W_HTTP_RESPONSE_LINE == rawLen) || (S2W_HTTP_HEADER == rawLen))
   2578                          {
   2579                              elementType = rawLen;
   2580                              break;
   2581                          }
   2582          #endif
   2583          				else
   2584          					/* Start receiving the tags*/
   2585          					AppS2wHal_CharNGet1(dataBuffer, rawLen);
   2586          #ifdef S2W_WEB_SERVER
   2587                          if(respTimeOut == 0 )
   2588                          {
   2589          #endif
   2590          #ifdef S2W_HTTP_CUSTOM_SUPPORT
   2591                              if((S2W_HTTP_RESPONSE_LINE == elementType) || (S2W_HTTP_HEADER == elementType))
   2592                              {
   2593                                  AppS2w_HttpDataProcess(curCid, dataBuffer, rawLen, elementType);
   2594                              }
   2595                              else
   2596          #endif
   2597                                  AppS2w_XmlDataProcess(curCid,dataBuffer,rawLen,elementType);
   2598          #ifdef S2W_WEB_SERVER
   2599                          }
   2600                          respTimeOut =0;
   2601          #endif
   2602          #if 0
   2603          					rawTotalIndex = 0;
   2604          #endif
   2605          					s2wState = S2W_STATE_CMD;
   2606          					rawLen =0;
   2607          					rawLenIndex=0;
   2608          				}
   2609          				//else
   2610          					//s2wState = S2W_STATE_CMD;
   2611          
   2612          			break;
   2613          #endif
   2614          
   2615          
   2616          
   2617          		}
   2618          		prev1 = ch;
   2619          	}
   2620          
   2621          
   2622          }
   2623          
   2624          
   2625          #endif
   2626          

   \                                 In section .text, align 2, keep-with-next
   2627          PUBLIC VOID
   2628          AppS2w_ProfileInit(VOID)
   2629          {
   \                     AppS2w_ProfileInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   2630          	UINT32 bootReason;
   2631          	bootReason = GSN_BOOT_REASON_GET();
   2632          	//bootInfo =  GSN_BOOT_INFO_GET();
   2633          	// if the boot is stby/wakeup(normal) read from rtc else from flash
   2634          	if( (bootReason == GSN_WIF_SYS_BOOT_NORMAL_BOOT))
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable136_3  ;; 0x41010004
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable132_1
   \   0000000A   0x6800             LDR      R0,[R0, #+0]
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xD102             BNE.N    ??AppS2w_ProfileInit_0
   2635          	{
   2636                  AppS2wHal_RTCRead();// this function reads data s2wFlashParams
   \   00000010   0x.... 0x....      BL       AppS2wHal_RTCRead
   \   00000014   0xE002             B.N      ??AppS2w_ProfileInit_1
   2637          	}
   2638              else
   2639              {
   2640                  s2wFlashParams = AppS2wHal_FlashRead();
   \                     ??AppS2w_ProfileInit_0:
   \   00000016   0x.... 0x....      BL       AppS2wHal_FlashRead
   \   0000001A   0x62A0             STR      R0,[R4, #+40]
   2641          	}
   2642          
   2643              {
   2644                  S2W_PROFILE_T *profile = &s2wFlashParams->profile[profile_params.defaultProfile];
   2645                  memcpy(&s2wCurrent, profile, sizeof(s2wCurrent));
   \                     ??AppS2w_ProfileInit_1:
   \   0000001C   0x....             LDR.N    R0,??DataTable127_1
   \   0000001E   0x6AA3             LDR      R3,[R4, #+40]
   \   00000020   0x7940             LDRB     R0,[R0, #+5]
   \   00000022   0xF44F 0x727E      MOV      R2,#+1016
   \   00000026   0x4611             MOV      R1,R2
   \   00000028   0xE8BD 0x4010      POP      {R4,LR}
   \   0000002C   0xFB01 0x3100      MLA      R1,R1,R0,R3
   \   00000030   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   00000034   0x.... 0x....      B.W      memcpy
   2646           	}
   2647          }
   2648          
   2649          
   2650          
   2651          /**
   2652           ************************************************************************
   2653           * @ingroup S2w-Application.
   2654           * @brief Initialize the Serial2WiFi stack.
   2655           *
   2656           * This should be called once from the command handler thread,
   2657           * immediately after initializing all the threads.
   2658           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2659          PUBLIC VOID
   2660          AppS2w_Init(VOID)
   2661          {
   \                     AppS2w_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   2662          #ifdef S2W_DEFAULT_NODE_TIME_SET  
   2663          	UINT32 bootReason;
   2664          	bootReason = GSN_BOOT_REASON_GET();
   2665          #endif
   2666          
   2667              AppS2wHal_TimerInit(&acTimer, AppS2w_AcTimeoutHandler, NULL);
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable132_1
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable136_4
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0xF504 0x70A8      ADD      R0,R4,#+336
   \   00000010   0x.... 0x....      BL       AppS2wHal_TimerInit
   2668          #ifdef S2W_NCM_SUPPORT_ENABLE
   2669              AppS2wHal_TimerInit(&acNcmTimer, AppS2w_AcNcmTimeoutHandler, NULL);
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable136_5
   \   0000001A   0xF504 0x70C4      ADD      R0,R4,#+392
   \   0000001E   0x.... 0x....      BL       AppS2wHal_TimerInit
   2670              AppS2wHal_TimerInit(&nagleTimer, AppS2w_NagleExpiry, NULL);
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x.... 0x....      ADR.W    R1,AppS2w_NagleExpiry
   \   00000028   0xF104 0x00E0      ADD      R0,R4,#+224
   \   0000002C   0x.... 0x....      BL       AppS2wHal_TimerInit
   2671              AppS2wHal_TimerInit(&auto_esc_timer, AppS2w_AutoEscTimeout, &auto_esc);
   \   00000030   0x1DE2             ADDS     R2,R4,#+7
   \   00000032   0x.... 0x....      ADR.W    R1,AppS2w_AutoEscTimeout
   \   00000036   0xF504 0x708C      ADD      R0,R4,#+280
   \   0000003A   0x.... 0x....      BL       AppS2wHal_TimerInit
   2672          #endif //NCM_SUPPORT_ENABLE
   2673          
   2674              AppS2wHal_NetInit();
   \   0000003E   0x.... 0x....      BL       AppS2wHal_NetInit
   2675              // create a semaphore for data transmit in sequential
   2676              GsnOsal_SemCreate  (&dSendSem,1);
   \   00000042   0x2201             MOVS     R2,#+1
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0xF104 0x00C0      ADD      R0,R4,#+192
   \   0000004A   0x.... 0x....      BL       _tx_semaphore_create
   2677          
   2678              AppS2wProcess_LoadProfile(profile_params.defaultProfile);
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable136_6
   \   00000052   0x7940             LDRB     R0,[R0, #+5]
   \   00000054   0x.... 0x....      BL       AppS2wProcess_LoadProfile
   2679          
   2680              s2wState = S2W_STATE_CMD;
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0x7020             STRB     R0,[R4, #+0]
   2681          #ifdef S2W_DEFAULT_NODE_TIME_SET
   2682            if( (bootReason == GSN_WIF_SYS_BOOT_FIRST_BOOT))
   2683          	  AppS2w_SetTime((ULONG64)S2W_DEFAULT_NODE_TIME);
   2684          #endif 
   2685          }
   \   0000005C   0xBD10             POP      {R4,PC}          ;; return
   2686          
   2687          
   2688          /**
   2689           ************************************************************************
   2690           * @ingroup S2w-Application.
   2691           * @brief Vprintf function
   2692           *
   2693           * @retval integer.
   2694           ************************************************************************/
   2695          PRIVATE INLINE INT32
   2696          AppS2w_VPrintf(const char *format, va_list ap)
   2697          {

   \                                 In section .bss, align 4
   2698              static char buf[S2W_MAX_PRINT_LEN];
   \                     ??buf:
   \   00000000                      DS8 256
   2699              int len;
   2700          
   2701              len = vsnprintf(buf, sizeof(buf), format, ap);
   2702              if (len < 0)
   2703                  return -1;
   2704          
   2705              if (len >= sizeof(buf))
   2706              {
   2707                  S2W_ASSERT(0);
   2708                  len = sizeof(buf) - 1;
   2709              }
   2710          
   2711              AppS2wHal_CharNPut(buf, len);
   2712          
   2713              return len;
   2714          }
   2715          #ifdef S2W_DUAL_INTERFACE_SUPPORT
   2716          PRIVATE INLINE INT32
   2717          AppS2w_VPrintf1(const char *format, va_list ap)
   2718          {
   2719              static char buf1[S2W_MAX_PRINT_LEN];
   2720              int len;
   2721          
   2722              len = vsnprintf(buf1, sizeof(buf1), format, ap);
   2723              if (len < 0)
   2724                  return -1;
   2725          
   2726              if (len >= sizeof(buf1))
   2727              {
   2728                  S2W_ASSERT(0);
   2729                  len = sizeof(buf1) - 1;
   2730              }
   2731          
   2732              AppS2wHal_CharNPut1(buf1, len);
   2733          
   2734              return len;
   2735          }
   2736          #endif
   2737          
   2738          
   2739          /**
   2740           *************************************************************************
   2741           * @ingroup S2w-Application.
   2742           * @brief Perform the network auto connect operation.
   2743           *
   2744           * It will create the client or server of type TCP/UDP.
   2745           *
   2746           * @param  peer_data- IN Pointer to structure that contains
   2747           *         mode, type, IP address and Port number.
   2748           * @param  cid - IN Pointer to connection identifier.
   2749           * @return Status of the operation. Possible status are S2W_SUCCESS (0) on
   2750           *     success, S2W_FAILURE (1) on failure, S2W_ENCID (6) when Cid list is
   2751           *     full, S2W_SOCKFAILURE (4) on failure of any socket system call,
   2752           *         S2W_CMD_INPROCESS (8) when command response is not ready.
   2753           **************************************************************************/
   2754          #if 0
   2755          PRIVATE UINT8
   2756          AppS2w_Connect(S2W_NETDATA_T *peer_data, UINT8 *cid)
   2757          {
   2758              UINT8 status = S2W_EINVAL;
   2759          
   2760              if (peer_data->mode == S2W_NETDATA_MODE_SERVER)
   2761              {
   2762                  if (peer_data->proto == S2W_NETDATA_PROTO_UDP)
   2763                  {
   2764                      status = AppS2wHal_NetUdpServer(peer_data, cid);
   2765                  }
   2766                  else if (peer_data->proto == S2W_NETDATA_PROTO_TCP)
   2767                  {
   2768                      status = AppS2wHal_NetTcpServer(peer_data, cid);
   2769                      *cid = INVALID_CID;
   2770                  }
   2771              }
   2772              else if (peer_data->mode == S2W_NETDATA_MODE_CLIENT)
   2773              {
   2774                  if (peer_data->proto == S2W_NETDATA_PROTO_TCP)
   2775                  {
   2776                      status = AppS2wHal_NetTcpClient(peer_data, cid);
   2777                  }
   2778                  else if (peer_data->proto == S2W_NETDATA_PROTO_UDP)
   2779                  {
   2780                      status = AppS2wHal_NetUdpClient(peer_data, cid,0);
   2781                  }
   2782              }
   2783          
   2784              return status;
   2785          }
   2786          #endif
   2787          
   2788          
   2789          /**
   2790           *************************************************************************
   2791           * @ingroup S2w-Application.
   2792           * @brief Process the incoming command characters.
   2793           *
   2794           * It will store the command characters to the command buffer. On receiving
   2795           * 'end of command' character it will process the command.
   2796           * @param ch Command character
   2797           * @reval none.
   2798           ***************************************************************************/
   2799          #ifndef IOT_APP_ENABLE

   \                                 In section .text, align 2, keep-with-next
   2800          PRIVATE VOID
   2801          AppS2w_CommandCharProcess(UINT8 ch)
   2802          {
   \                     AppS2w_CommandCharProcess:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   2803              static UINT8 prevBuf[S2W_CMDBUF_SIZE];
   2804              static UINT8 buf[S2W_CMDBUF_SIZE];
   2805              static UINT32 index;
   2806          
   2807              if ((ch == S2W_CR) ||(ch == S2W_LF) || (index == (sizeof(buf) - 1)))
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable136_7
   \   00000008   0xF8D4 0x5200      LDR      R5,[R4, #+512]
   \   0000000C   0x4606             MOV      R6,R0
   \   0000000E   0xF504 0x7701      ADD      R7,R4,#+516
   \   00000012   0x280D             CMP      R0,#+13
   \   00000014   0xBF18             IT       NE 
   \   00000016   0x280A             CMPNE    R0,#+10
   \   00000018   0xD018             BEQ.N    ??AppS2w_CommandCharProcess_0
   \   0000001A   0xF240 0x18FF      MOVW     R8,#+511
   \   0000001E   0x4545             CMP      R5,R8
   \   00000020   0xD134             BNE.N    ??AppS2w_CommandCharProcess_1
   2808              {
   2809                  if (index == 0)
   2810                  {
   2811                   if (s2wCurrent.serialPortConf.commonConf.echo)
   2812                    {
   2813                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   2814                          S2w_Printf("\r\n");
   2815                          GsnOsal_SemRelease (&s2wSyncSemID);
   2816                      }
   2817                      /* Skip LF or CR after LF or CR.
   2818                       */
   2819                      return;
   2820                  }
   2821                  /* End of command; Call function to process the command.
   2822                   */
   2823                  buf[index] = '\0';
   \                     ??AppS2w_CommandCharProcess_2:
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x5528             STRB     R0,[R5, R4]
   2824                  memcpy(prevBuf, buf, index + 1);
   \   00000026   0x1C6A             ADDS     R2,R5,#+1
   \   00000028   0x4621             MOV      R1,R4
   \   0000002A   0x4638             MOV      R0,R7
   \   0000002C   0x.... 0x....      BL       memcpy
   2825                  if((s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_SDIO) && (index >256 ))
   \   00000030   0x.... 0x....      BL       ?Subroutine20
   \                     ??CrossCallReturnLabel_54:
   \   00000034   0x2803             CMP      R0,#+3
   \   00000036   0xD11B             BNE.N    ??AppS2w_CommandCharProcess_3
   \   00000038   0xF5B5 0x7F80      CMP      R5,#+256
   \   0000003C   0xD918             BLS.N    ??AppS2w_CommandCharProcess_3
   2826                  {
   2827          			index =0;
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0xF8C4 0x0200      STR      R0,[R4, #+512]
   2828                      UINT32 msg = APP_EVENT_S2W_EINVAL;
   2829          		    AppMainCtx_TaskNotify(msg);
   \   00000044   0x202E             MOVS     R0,#+46
   \   00000046   0x.... 0x....      BL       AppMainCtx_TaskNotify
   \   0000004A   0xE017             B.N      ??AppS2w_CommandCharProcess_4
   2830          		}
   \                     ??AppS2w_CommandCharProcess_0:
   \   0000004C   0x2D00             CMP      R5,#+0
   \   0000004E   0xD1E8             BNE.N    ??AppS2w_CommandCharProcess_2
   \   00000050   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   00000054   0xF890 0x01B0      LDRB     R0,[R0, #+432]
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD03B             BEQ.N    ??AppS2w_CommandCharProcess_5
   \   0000005C   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_49:
   \   00000060   0x....             ADR.N    R0,??DataTable127  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000062   0x.... 0x....      BL       S2w_Printf
   \   00000066   0x4620             MOV      R0,R4
   \   00000068   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   0000006C   0x.... 0x....      B.W      GsnOsal_SemRelease
   2831          		else
   2832          		{
   2833                  index = 0;
   \                     ??AppS2w_CommandCharProcess_3:
   \   00000070   0x2000             MOVS     R0,#+0
   \   00000072   0xF8C4 0x0200      STR      R0,[R4, #+512]
   2834                  AppS2wCommand_Process(buf);
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       AppS2wCommand_Process
   2835          	    }
   2836                  memset (buf, 0, S2W_CMDBUF_SIZE);
   \                     ??AppS2w_CommandCharProcess_4:
   \   0000007C   0x4620             MOV      R0,R4
   \   0000007E   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   00000082   0xF44F 0x7200      MOV      R2,#+512
   \   00000086   0x2100             MOVS     R1,#+0
   \   00000088   0x.... 0x....      B.W      memset
   2837          
   2838                  /* Store the command characters in the command buffer and also
   2839                   * handle the backspaces.
   2840                   */
   2841              }
   2842              else if (ch == S2W_BACKSPC)
   \                     ??AppS2w_CommandCharProcess_1:
   \   0000008C   0x2808             CMP      R0,#+8
   \   0000008E   0xD102             BNE.N    ??AppS2w_CommandCharProcess_6
   2843              {
   2844                  index = index ? (index - 1) : 0;
   \   00000090   0xB305             CBZ.N    R5,??AppS2w_CommandCharProcess_5
   \   00000092   0x1E68             SUBS     R0,R5,#+1
   \   00000094   0xE01C             B.N      ??AppS2w_CommandCharProcess_7
   2845              }
   2846              else if (index == 1 && ch == '/' && toupper(buf[0]) == 'A')
   \                     ??AppS2w_CommandCharProcess_6:
   \   00000096   0x2D01             CMP      R5,#+1
   \   00000098   0xD112             BNE.N    ??AppS2w_CommandCharProcess_8
   \   0000009A   0x282F             CMP      R0,#+47
   \   0000009C   0xD114             BNE.N    ??AppS2w_CommandCharProcess_9
   \   0000009E   0x7820             LDRB     R0,[R4, #+0]
   \   000000A0   0x.... 0x....      BL       toupper
   \   000000A4   0x2841             CMP      R0,#+65
   \   000000A6   0xD10B             BNE.N    ??AppS2w_CommandCharProcess_8
   2847              {
   2848                  index = 0;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xF8C4 0x0200      STR      R0,[R4, #+512]
   2849          
   2850                  strcpy((char *)buf, (const char *)prevBuf);
   \   000000AE   0x4639             MOV      R1,R7
   \   000000B0   0x4620             MOV      R0,R4
   \   000000B2   0x.... 0x....      BL       strcpy
   2851                  AppS2wCommand_Process(buf);
   \   000000B6   0x4620             MOV      R0,R4
   \   000000B8   0xE8BD 0x41F0      POP      {R4-R8,LR}
   \   000000BC   0x.... 0x....      B.W      AppS2wCommand_Process
   2852              }
   2853              else if (index < sizeof(buf) - 1)
   \                     ??AppS2w_CommandCharProcess_8:
   \   000000C0   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000C4   0x4540             CMP      R0,R8
   \   000000C6   0xD205             BCS.N    ??AppS2w_CommandCharProcess_5
   2854              {
   2855                  buf[index++] = ch;
   \                     ??AppS2w_CommandCharProcess_9:
   \   000000C8   0xF8D4 0x0200      LDR      R0,[R4, #+512]
   \   000000CC   0x5506             STRB     R6,[R0, R4]
   \   000000CE   0x1C40             ADDS     R0,R0,#+1
   \                     ??AppS2w_CommandCharProcess_7:
   \   000000D0   0xF8C4 0x0200      STR      R0,[R4, #+512]
   2856              }
   2857          }
   \                     ??AppS2w_CommandCharProcess_5:
   \   000000D4   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return

   \                                 In section .bss, align 4
   \                     ??buf_1:
   \   00000000                      DS8 512
   \   00000200                      DS8 4
   \   00000204                      DS8 512
   2858          #endif /* IOT_APP_ENABLE */
   2859          /**
   2860           * @brief Transmit the raw data to the specified L2 connection when the data
   2861           *        is completely received or when the data buffer is full.
   2862           */
   2863          
   2864          
   2865          /**
   2866           **************************************************************************
   2867           * @ingroup S2w-Application.
   2868           * @brief Transmit the data to the specified TCP/UDP connection when the data
   2869           *        is completely received or when the data buffer is full.
   2870           * @reval none.
   2871           ***************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2872          PUBLIC UINT8
   2873          AppS2w_DataBufferTransmit(VOID)
   2874          {
   \                     AppS2w_DataBufferTransmit:
   \   00000000   0xB510             PUSH     {R4,LR}
   2875              UINT8 status;
   2876              //INT32 intrStatus;
   2877              if (!dataIndex)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable132_1
   \   00000006   0x6AE0             LDR      R0,[R4, #+44]
   \   00000008   0xB082             SUB      SP,SP,#+8
   \   0000000A   0xB160             CBZ.N    R0,??AppS2w_DataBufferTransmit_0
   2878              {
   2879                  return S2W_SUCCESS;
   2880              }
   2881          
   2882              status = AppS2wHal_NetTx(curCid, destAddr, destPort, dataBuffer,
   2883                          dataIndex);
   \   0000000C   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_37:
   \   00000010   0x.... 0x....      LDR.W    R3,??DataTable132_3
   \   00000014   0x.... 0x....      BL       AppS2wHal_NetTx
   2884              if (status == S2W_SUCCESS)
   \   00000018   0xB918             CBNZ.N   R0,??AppS2w_DataBufferTransmit_1
   2885              {
   2886                  s2wTxBytes += dataIndex;
   \   0000001A   0x6A21             LDR      R1,[R4, #+32]
   \   0000001C   0x6AE2             LDR      R2,[R4, #+44]
   \   0000001E   0x1851             ADDS     R1,R2,R1
   \   00000020   0x6221             STR      R1,[R4, #+32]
   2887              }
   2888          
   2889              dataIndex = 0;
   \                     ??AppS2w_DataBufferTransmit_1:
   \   00000022   0x2100             MOVS     R1,#+0
   \   00000024   0x62E1             STR      R1,[R4, #+44]
   2890              return status;
   \                     ??AppS2w_DataBufferTransmit_0:
   \   00000026   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   2891          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x9000             STR      R0,[SP, #+0]
   \   00000002   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000006   0x8BE2             LDRH     R2,[R4, #+30]
   \   00000008   0x7960             LDRB     R0,[R4, #+5]
   \   0000000A   0x4770             BX       LR
   2892          

   \                                 In section .text, align 2, keep-with-next
   2893          PUBLIC UINT8
   2894          AppS2w_DataTransmit(UINT8 *data)
   2895          {
   \                     AppS2w_DataTransmit:
   \   00000000   0xB510             PUSH     {R4,LR}
   2896              UINT8 status;
   2897              //INT32 intrStatus;
   2898              if (!dataIndex)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable132_1
   \   00000006   0x4603             MOV      R3,R0
   \   00000008   0x6AE0             LDR      R0,[R4, #+44]
   \   0000000A   0xB082             SUB      SP,SP,#+8
   \   0000000C   0xB150             CBZ.N    R0,??AppS2w_DataTransmit_0
   2899              {
   2900                  return S2W_SUCCESS;
   2901              }
   2902          
   2903          
   2904              status = AppS2wHal_NetTx(curCid, destAddr, destPort, data, //dataBuffer,
   2905                          dataIndex);
   \   0000000E   0x.... 0x....      BL       ?Subroutine13
   \                     ??CrossCallReturnLabel_38:
   \   00000012   0x.... 0x....      BL       AppS2wHal_NetTx
   2906              if (status == S2W_SUCCESS)
   \   00000016   0xB918             CBNZ.N   R0,??AppS2w_DataTransmit_1
   2907              {
   2908                  s2wTxBytes += dataIndex;
   \   00000018   0x6A21             LDR      R1,[R4, #+32]
   \   0000001A   0x6AE2             LDR      R2,[R4, #+44]
   \   0000001C   0x1851             ADDS     R1,R2,R1
   \   0000001E   0x6221             STR      R1,[R4, #+32]
   2909              }
   2910          
   2911              dataIndex = 0;
   \                     ??AppS2w_DataTransmit_1:
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x62E1             STR      R1,[R4, #+44]
   2912              return status;
   \                     ??AppS2w_DataTransmit_0:
   \   00000024   0xBD16             POP      {R1,R2,R4,PC}    ;; return
   2913          }
   2914          
   2915          
   2916          
   2917          /**
   2918           ************************************************************************
   2919           * @ingroup S2w-Application.
   2920           * @brief Process the incoming data character.
   2921           *   This function store the data to the data buffer, increment the index,
   2922           *   start the nagle timer for auto connection and send the data out if the
   2923           *   data buffer become full.
   2924           * @param ch - IN incoming data character
   2925           * @retval none.
   2926           *************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   2927          PRIVATE VOID
   2928          AppS2w_DataCharProcess(UINT8 ch)
   2929          {
   \                     AppS2w_DataCharProcess:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   2930              UINT8 status;
   2931          
   2932              if (s2wState == S2W_STATE_DATA_AUTO)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable132_1
   \   00000006   0x.... 0x....      LDR.W    R7,??DataTable132_3
   \   0000000A   0x4606             MOV      R6,R0
   \   0000000C   0x7820             LDRB     R0,[R4, #+0]
   \   0000000E   0x280D             CMP      R0,#+13
   \   00000010   0xD12C             BNE.N    ??AppS2w_DataCharProcess_0
   2933              {
   2934                  /* TCP server without a connection
   2935                   */
   2936                  if (curCid == INVALID_CID)
   \   00000012   0x7960             LDRB     R0,[R4, #+5]
   \   00000014   0x28FF             CMP      R0,#+255
   \   00000016   0xD03D             BEQ.N    ??AppS2w_DataCharProcess_1
   2937                  {
   2938                      return;
   2939                  }
   2940          
   2941                  /* Locking to avoid race with expiry timer and send task
   2942                   */
   2943          
   2944                  GsnOsal_SemAcquire ( &dSendSem,
   2945                                       GSN_OSAL_WAIT_FOREVER );
   \   00000018   0xF104 0x05C0      ADD      R5,R4,#+192
   \   0000001C   0x.... 0x....      BL       ??Subroutine6_0
   2946                  dataBuffer[dataIndex] = ch;
   \                     ??CrossCallReturnLabel_64:
   \   00000020   0x6AE0             LDR      R0,[R4, #+44]
   \   00000022   0x55C6             STRB     R6,[R0, R7]
   2947                  dataIndex++;
   \   00000024   0x1C40             ADDS     R0,R0,#+1
   \   00000026   0x62E0             STR      R0,[R4, #+44]
   2948                  GsnOsal_SemRelease(&dSendSem);
   \   00000028   0x4628             MOV      R0,R5
   \   0000002A   0x.... 0x....      BL       GsnOsal_SemRelease
   2949          
   2950                  if ((dataIndex == 1)|| ((dataIndex % 100) == 0))
   \   0000002E   0x6AE0             LDR      R0,[R4, #+44]
   \   00000030   0xF104 0x06E0      ADD      R6,R4,#+224
   \   00000034   0x2801             CMP      R0,#+1
   \   00000036   0xD006             BEQ.N    ??AppS2w_DataCharProcess_2
   \   00000038   0x2164             MOVS     R1,#+100
   \   0000003A   0xFBB0 0xF1F1      UDIV     R1,R0,R1
   \   0000003E   0x2264             MOVS     R2,#+100
   \   00000040   0xFB02 0x0011      MLS      R0,R2,R1,R0
   \   00000044   0xB930             CBNZ.N   R0,??AppS2w_DataCharProcess_3
   2951                  {
   2952                      AppS2wHal_TimerStart(&nagleTimer,
   2953                              s2wCurrent.registers[S2W_REG_NAGLE_WAIT_TIME]);
   \                     ??AppS2w_DataCharProcess_2:
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable132_2
   \   0000004A   0xF8B0 0x11CC      LDRH     R1,[R0, #+460]
   \   0000004E   0x4630             MOV      R0,R6
   \   00000050   0x.... 0x....      BL       AppS2wHal_TimerStart
   2954                  }
   2955          
   2956                  if (dataIndex >= sizeof(dataBuffer))
   \                     ??AppS2w_DataCharProcess_3:
   \   00000054   0x6AE0             LDR      R0,[R4, #+44]
   \   00000056   0xF5B0 0x6FAF      CMP      R0,#+1400
   \   0000005A   0xD31B             BCC.N    ??AppS2w_DataCharProcess_1
   2957                  {
   2958                      /* Don't need the timer since we're transmitting it
   2959                       * ourselves */
   2960                      AppS2wHal_TimerStop(&nagleTimer);
   \   0000005C   0x4630             MOV      R0,R6
   \   0000005E   0x.... 0x....      BL       AppS2wHal_TimerStop
   2961                      GsnOsal_SemAcquire ( &dSendSem,
   2962                      GSN_OSAL_WAIT_FOREVER );
   \   00000062   0x.... 0x....      BL       ??Subroutine6_0
   2963                      status = AppS2w_DataBufferTransmit();
   \                     ??CrossCallReturnLabel_63:
   \   00000066   0x.... 0x....      BL       AppS2w_DataBufferTransmit
   2964                      GsnOsal_SemRelease(&dSendSem);
   \   0000006A   0xE00E             B.N      ??CrossCallReturnLabel_0
   2965          
   2966                  }
   2967          
   2968              }
   2969              else
   2970              {
   2971                  dataBuffer[dataIndex] = ch;
   \                     ??AppS2w_DataCharProcess_0:
   \   0000006C   0x6AE0             LDR      R0,[R4, #+44]
   \   0000006E   0x55C6             STRB     R6,[R0, R7]
   2972                  dataIndex++;
   \   00000070   0x1C40             ADDS     R0,R0,#+1
   \   00000072   0x62E0             STR      R0,[R4, #+44]
   2973          
   2974                  /* if data buffer is full transmit the data to the peer
   2975                   */
   2976                  if (dataIndex >= sizeof(dataBuffer))
   \   00000074   0xF5B0 0x6FAF      CMP      R0,#+1400
   \   00000078   0xD30C             BCC.N    ??AppS2w_DataCharProcess_1
   2977                  {
   2978                      status = AppS2w_DataBufferTransmit();
   \   0000007A   0x.... 0x....      BL       AppS2w_DataBufferTransmit
   \   0000007E   0x0004             MOVS     R4,R0
   2979                      if (status != S2W_SUCCESS)
   \   00000080   0xD008             BEQ.N    ??AppS2w_DataCharProcess_1
   2980                      {
   2981                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000082   0x.... 0x....      BL       ?Subroutine6
   2982                          AppS2wProcess_StatusNotify(status, 0);
   \                     ??CrossCallReturnLabel_66:
   \   00000086   0x.... 0x....      BL       ?Subroutine1
   2983                          GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??CrossCallReturnLabel_0:
   \   0000008A   0x4628             MOV      R0,R5
   \   0000008C   0xE8BD 0x40F2      POP      {R1,R4-R7,LR}
   \   00000090   0x.... 0x....      B.W      GsnOsal_SemRelease
   2984                      }
   2985                  }
   2986              }
   2987          }
   \                     ??AppS2w_DataCharProcess_1:
   \   00000094   0xBDF1             POP      {R0,R4-R7,PC}    ;; return
   2988          
   2989          
   2990          
   2991          /**
   2992           ************************************************************************
   2993           * @ingroup S2w-Application.
   2994           * @brief Handles the auto connect mode data timeout.
   2995           *   This function is the timeout handler for auto connection escape sequence
   2996               (+++).This function changes the mode to command mode.
   2997           * @param data - IN data Pointer to the buffer which contains the timeout handler
   2998           *                  data.
   2999           * @retval none.
   3000           ************************************************************************/
   3001          

   \                                 In section .text, align 4, keep-with-next
   3002          PRIVATE VOID
   3003          AppS2w_AutoEscTimeout(VOID *data)
   3004          {
   \                     AppS2w_AutoEscTimeout:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB082             SUB      SP,SP,#+8
   3005              UINT8 *autoEsc = data;
   3006          
   3007              /* Check any data came after escape sequence. */
   3008              if (*autoEsc == 3)
   \   00000006   0x7820             LDRB     R0,[R4, #+0]
   \   00000008   0x.... 0x....      LDR.W    R5,??DataTable136_8
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD10D             BNE.N    ??AppS2w_AutoEscTimeout_0
   3009              {
   3010                  UINT32 message = APP_NOTIFICATION_AUTO_SEND;
   3011                  /* If no data came, flush any remaining data and switch to the
   3012                   * command mode */
   3013          
   3014                  AppS2wHal_TimerStop(&nagleTimer);
   \   00000010   0xF105 0x00E0      ADD      R0,R5,#+224
   \   00000014   0x.... 0x....      BL       AppS2wHal_TimerStop
   3015          
   3016                  //GsnOsal_MailboxPut(&s2wSendQueue, NULL);
   3017          
   3018                  (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000018   0x.... 0x....      BL       ?Subroutine15
   3019          
   3020                  s2wState = S2W_STATE_CMD;
   \                     ??CrossCallReturnLabel_42:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x7028             STRB     R0,[R5, #+0]
   3021                  *autoEsc = 0;
   \   00000020   0x.... 0x....      BL       ?Subroutine4
   3022                  // disable the auto mode exit gpio interrupt
   3023                  GsnGpio_NEIntDisable_Patch(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP); //Disable auto mode exit gpio interrupt
   3024                  // make the data ready gpio as low..
   3025                  S2w_AsyncMsgGpioOp(0);
   \                     ??CrossCallReturnLabel_10:
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   \   0000002A   0xBD73             POP      {R0,R1,R4-R6,PC}
   3026              }
   3027              else
   3028              {
   3029                  char esc1[4] = { '+', '+', '+', '+' };
   \                     ??AppS2w_AutoEscTimeout_0:
   \   0000002C   0x.... 0x....      ADR.W    R1,`?<Constant {43, 43, 43, 43}>`
   \   00000030   0x680A             LDR      R2,[R1, #0]
   \   00000032   0xA800             ADD      R0,SP,#+0
   3030                  UINT8   i=0;
   \   00000034   0x2600             MOVS     R6,#+0
   \   00000036   0x6002             STR      R2,[R0, #+0]
   \   00000038   0xE004             B.N      ??AppS2w_AutoEscTimeout_1
   3031                  //AppS2wHal_TimerStart(&nagleTimer,
   3032                  //                     s2wCurrent.registers[S2W_REG_NAGLE_WAIT_TIME]);
   3033                  while (i < *autoEsc)
   3034                  {
   3035                      AppS2w_DataCharProcess(esc1[i++]);
   \                     ??AppS2w_AutoEscTimeout_2:
   \   0000003A   0xA800             ADD      R0,SP,#+0
   \   0000003C   0x5C30             LDRB     R0,[R6, R0]
   \   0000003E   0x.... 0x....      BL       AppS2w_DataCharProcess
   \   00000042   0x1C76             ADDS     R6,R6,#+1
   3036                  }
   \                     ??AppS2w_AutoEscTimeout_1:
   \   00000044   0x7820             LDRB     R0,[R4, #+0]
   \   00000046   0xB2F6             UXTB     R6,R6
   \   00000048   0x4286             CMP      R6,R0
   \   0000004A   0xD3F6             BCC.N    ??AppS2w_AutoEscTimeout_2
   3037          
   3038                  auto_esc = 0;
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x71E8             STRB     R0,[R5, #+7]
   3039              }
   3040          }
   \   00000050   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0x....             LDR.N    R0,??DataTable132
   \   00000002   0x.... 0x....      LDR.W    R2,??DataTable136_9
   \   00000006   0x6801             LDR      R1,[R0, #+0]
   \   00000008   0x6812             LDR      R2,[R2, #+0]
   \   0000000A   0x2011             MOVS     R0,#+17
   \   0000000C   0x4710             BX       R2

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x7020             STRB     R0,[R4, #+0]
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xF44F 0x7080      MOV      R0,#+256
   \   00000008   0x.... 0x....      B.W      GsnGpio_NEIntDisable_Patch
   3041          
   3042          
   3043          
   3044          /**
   3045           ************************************************************************
   3046           * @ingroup S2w-Application.
   3047           * @brief Convert the input character to the connection identifier and
   3048           *        validate the connection identifier.
   3049           * @param ch - IN Input character.
   3050           *
   3051           * @retval UINT8 - valid cid.
   3052           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3053          PUBLIC UINT8
   3054          AppS2w_CidValidate(UINT8 ch)
   3055          {
   \                     AppS2w_CidValidate:
   \   00000000   0xB510             PUSH     {R4,LR}
   3056              UINT8 cid;
   3057          
   3058              /* Validate the input character, convert it to hexadecimal value. */
   3059              if (ch >= '0' && ch <= '9')
   \   00000002   0xF1A0 0x0230      SUB      R2,R0,#+48
   \   00000006   0x2A0A             CMP      R2,#+10
   \   00000008   0xD208             BCS.N    ??AppS2w_CidValidate_0
   3060              {
   3061                  cid = ch - '0';
   \   0000000A   0xF1A0 0x0430      SUB      R4,R0,#+48
   3062              }
   3063              else if (ch >= 'A' && ch <= 'F')
   3064              {
   3065                  cid = ch - 'A' + 10;
   3066              }
   3067              else if (ch >= 'a' && ch <= 'f')
   3068              {
   3069                  cid = ch - 'a' + 10;
   3070              }
   3071              else
   3072              {
   3073                  return INVALID_CID;
   3074              }
   3075              return AppS2wHal_NetIsCidOpen(cid) ? cid : INVALID_CID;
   \                     ??AppS2w_CidValidate_1:
   \   0000000E   0xB2E0             UXTB     R0,R4
   \   00000010   0x.... 0x....      BL       AppS2wHal_NetIsCidOpen
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xBF08             IT       EQ 
   \   00000018   0x24FF             MOVEQ    R4,#+255
   \   0000001A   0xE00F             B.N      ??AppS2w_CidValidate_2
   \                     ??AppS2w_CidValidate_0:
   \   0000001C   0xF1A0 0x0241      SUB      R2,R0,#+65
   \   00000020   0x2A06             CMP      R2,#+6
   \   00000022   0xBF38             IT       CC 
   \   00000024   0xF1A0 0x0437      SUBCC    R4,R0,#+55
   \   00000028   0xD3F1             BCC.N    ??AppS2w_CidValidate_1
   \   0000002A   0xF1A0 0x0161      SUB      R1,R0,#+97
   \   0000002E   0x2906             CMP      R1,#+6
   \   00000030   0xBF38             IT       CC 
   \   00000032   0xF1A0 0x0457      SUBCC    R4,R0,#+87
   \   00000036   0xD3EA             BCC.N    ??AppS2w_CidValidate_1
   \   00000038   0x20FF             MOVS     R0,#+255
   \   0000003A   0xBD10             POP      {R4,PC}
   \                     ??AppS2w_CidValidate_2:
   \   0000003C   0xB2E0             UXTB     R0,R4
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
   3076          }
   3077          
   3078          /**
   3079           ************************************************************************
   3080           * @ingroup S2w-Application.
   3081           * @ingroup S2w-Application.
   3082           * @brief parse Esc fail.
   3083           *   This function notify the application with failure indication and
   3084           *   change the mode to command.
   3085           * @retval VOID - none.
   3086           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3087          PRIVATE VOID
   3088          AppS2w_FailEscParse(VOID)
   3089          {
   \                     AppS2w_FailEscParse:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   3090              dataIndex = 0;
   \   00000002   0x....             LDR.N    R4,??DataTable132_1
   3091              curCid = INVALID_CID;
   3092              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_SDIO)
   \   00000004   0x....             LDR.N    R1,??DataTable132
   \   00000006   0x6809             LDR      R1,[R1, #+0]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x62E0             STR      R0,[R4, #+44]
   \   0000000C   0x20FF             MOVS     R0,#+255
   \   0000000E   0x7160             STRB     R0,[R4, #+5]
   \   00000010   0xF646 0x20F8      MOVW     R0,#+27384
   \   00000014   0x5C40             LDRB     R0,[R0, R1]
   \   00000016   0x2803             CMP      R0,#+3
   \   00000018   0xD103             BNE.N    ??AppS2w_FailEscParse_0
   3093              {
   3094          		UINT32 msg = APP_EVENT_CID_FAILURE;
   3095          		AppMainCtx_TaskNotify(msg);
   \   0000001A   0x202C             MOVS     R0,#+44
   \   0000001C   0x.... 0x....      BL       AppMainCtx_TaskNotify
   \   00000020   0xE008             B.N      ??AppS2w_FailEscParse_1
   3096          	}
   3097          	else
   3098          	{
   3099              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2w_FailEscParse_0:
   \   00000022   0x.... 0x....      BL       ?Subroutine6
   3100              AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??CrossCallReturnLabel_65:
   \   00000026   0x2100             MOVS     R1,#+0
   \   00000028   0x2001             MOVS     R0,#+1
   \   0000002A   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   3101              GsnOsal_SemRelease(&s2wSyncSemID);
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       GsnOsal_SemRelease
   3102          	}
   3103              s2wState = S2W_STATE_CMD;
   \                     ??AppS2w_FailEscParse_1:
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x7020             STRB     R0,[R4, #+0]
   3104          }
   \   00000038   0xBD31             POP      {R0,R4,R5,PC}    ;; return
   3105          
   3106          

   \                                 In section .text, align 2, keep-with-next
   3107          VOID
   3108          s2wAutoExit_CB(UINT8 status, VOID* ctxt)
   3109          {
   \                     s2wAutoExit_CB:
   \   00000000   0xB510             PUSH     {R4,LR}
   3110              UINT32 message = APP_NOTIFICATION_AUTO_SEND;
   3111              /* If no data came, flush any remaining data and switch to the
   3112              * command mode */
   3113              GsnGpio_NEIntDisable_Patch(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP); //Disable auto mode exit gpio interrupt
   \   00000002   0xF44F 0x7080      MOV      R0,#+256
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x.... 0x....      BL       GsnGpio_NEIntDisable_Patch
   3114          
   3115              AppS2wHal_TimerStop(&nagleTimer);
   \   0000000C   0x.... 0x....      LDR.W    R4,??DataTable136_8
   \   00000010   0xF104 0x00E0      ADD      R0,R4,#+224
   \   00000014   0x.... 0x....      BL       AppS2wHal_TimerStop
   3116          
   3117              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \   00000018   0x.... 0x....      BL       ?Subroutine15
   3118          
   3119              s2wState = S2W_STATE_CMD;
   \                     ??CrossCallReturnLabel_41:
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x7020             STRB     R0,[R4, #+0]
   3120              // make the data ready gpio as low..
   3121              S2w_AsyncMsgGpioOp(0);
   \   00000020   0xE8BD 0x4010      POP      {R4,LR}
   \   00000024   0x.... 0x....      B.W      S2w_AsyncMsgGpioOp
   3122          
   3123          }
   3124          
   3125          
   3126          
   3127          
   3128          /**
   3129           ************************************************************************
   3130           * @ingroup S2w-Application
   3131           * @brief Notify the status of an asynchronous event.
   3132           *   This function sends the status information of each asynchronous event
   3133           *   to the serial interface.
   3134           * @param status - IN the status value.
   3135           * @param arg    - IN the arg passed with status
   3136           * @retval VOID  - none.
   3137           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3138          PUBLIC VOID
   3139          AppS2wProcess_AsyncStatusNotify(UINT8 status, UINT32 arg)
   3140          {
   \                     AppS2wProcess_AsyncStatusNotify:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0x4605             MOV      R5,R0
   \   00000004   0xB083             SUB      SP,SP,#+12
   \   00000006   0x460C             MOV      R4,R1
   3141              const char *msg;
   3142          
   3143              S2w_AsyncMsgGpioOp(1);
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   3144              if(status< 15)
   \   0000000E   0x462E             MOV      R6,R5
   \   00000010   0x....             LDR.N    R7,??DataTable132_2
   \   00000012   0x2E0F             CMP      R6,#+15
   \   00000014   0xDA24             BGE.N    ??AppS2wProcess_AsyncStatusNotify_0
   3145              {
   3146                  S2w_Printf("%c%c%x", S2W_ESC,'A',status);// for status  <15 put as a single char
   \   00000016   0x4633             MOV      R3,R6
   \   00000018   0x.... 0x....      BL       ?Subroutine14
   3147          	}
   3148          	else
   3149          	{
   3150                  UINT32 firstByteLimit=0x0F;
   3151          		S2w_Printf("%c%c%x%x", S2W_ESC,'A',firstByteLimit,(status-firstByteLimit)); //for status >=15  put as F<status>
   3152          	}
   3153          
   3154          
   3155              if ((status == S2W_ASYNC_ECIDCLOSE || status == S2W_ASYNC_SOCKFAILURE)
   3156                   && s2wIsAutoconnected && curCid == arg)
   \                     ??CrossCallReturnLabel_39:
   \   0000001C   0x2E02             CMP      R6,#+2
   \   0000001E   0xBF18             IT       NE 
   \   00000020   0x2D00             CMPNE    R5,#+0
   \   00000022   0xD113             BNE.N    ??AppS2wProcess_AsyncStatusNotify_1
   \   00000024   0x....             LDR.N    R0,??DataTable132_1
   \   00000026   0x78C1             LDRB     R1,[R0, #+3]
   \   00000028   0xB181             CBZ.N    R1,??AppS2wProcess_AsyncStatusNotify_1
   \   0000002A   0x7941             LDRB     R1,[R0, #+5]
   \   0000002C   0x42A1             CMP      R1,R4
   \   0000002E   0xD10D             BNE.N    ??AppS2wProcess_AsyncStatusNotify_1
   3157              {
   3158                  curCid = INVALID_CID;
   \   00000030   0x21FF             MOVS     R1,#+255
   \   00000032   0x7141             STRB     R1,[R0, #+5]
   3159                  if (!(s2wCurrent.autoNetdata.proto == S2W_NETDATA_PROTO_TCP
   3160                           && s2wCurrent.autoNetdata.mode == S2W_NETDATA_MODE_SERVER))
   \   00000034   0xF897 0x103D      LDRB     R1,[R7, #+61]
   \   00000038   0x2901             CMP      R1,#+1
   \   0000003A   0xBF04             ITT      EQ 
   \   0000003C   0xF897 0x103C      LDRBEQ   R1,[R7, #+60]
   \   00000040   0x2901             CMPEQ    R1,#+1
   \   00000042   0xD003             BEQ.N    ??AppS2wProcess_AsyncStatusNotify_1
   3161                  {
   3162                      s2wState = S2W_STATE_CMD;
   \   00000044   0x2100             MOVS     R1,#+0
   \   00000046   0x7001             STRB     R1,[R0, #+0]
   3163                      dataIndex = 0;
   \   00000048   0x62C1             STR      R1,[R0, #+44]
   3164                      s2wIsAutoconnected = 0;
   \   0000004A   0x70C1             STRB     R1,[R0, #+3]
   3165                   }
   3166              }
   3167              if (s2wCurrent.serialPortConf.commonConf.verbose)
   \                     ??AppS2wProcess_AsyncStatusNotify_1:
   \   0000004C   0xF897 0x01B1      LDRB     R0,[R7, #+433]
   \   00000050   0x2800             CMP      R0,#+0
   \   00000052   0xD041             BEQ.N    ??AppS2wProcess_AsyncStatusNotify_2
   3168              {
   3169                  msg = S2W_AsyncStatusList[status];
   \   00000054   0x.... 0x....      LDR.W    R0,??DataTable136_10
   \   00000058   0xF850 0x7026      LDR      R7,[R0, R6, LSL #+2]
   3170                  if (!msg)
   \   0000005C   0xB95F             CBNZ.N   R7,??AppS2wProcess_AsyncStatusNotify_3
   3171                  {
   3172                      return;
   \   0000005E   0xBDF7             POP      {R0-R2,R4-R7,PC}
   3173                  }
   \                     ??AppS2wProcess_AsyncStatusNotify_0:
   \   00000060   0xF1A5 0x000F      SUB      R0,R5,#+15
   \   00000064   0x9000             STR      R0,[SP, #+0]
   \   00000066   0x230F             MOVS     R3,#+15
   \   00000068   0x2241             MOVS     R2,#+65
   \   0000006A   0x211B             MOVS     R1,#+27
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "%c%c%x%x">`
   \   00000070   0x.... 0x....      BL       S2w_Printf
   \   00000074   0xE7EA             B.N      ??AppS2wProcess_AsyncStatusNotify_1
   3174                  if (status == S2W_ASYNC_ECIDCLOSE)
   \                     ??AppS2wProcess_AsyncStatusNotify_3:
   \   00000076   0x2E02             CMP      R6,#+2
   \   00000078   0xD106             BNE.N    ??AppS2wProcess_AsyncStatusNotify_4
   3175                  {
   3176                       S2w_Printf("%02xDISCONNECT %x\r\n",(strlen(msg) + 4),arg);
   \   0000007A   0x.... 0x....      BL       ?Subroutine22
   3177                      // s2wState = S2W_STATE_CMD;
   3178                      // dataIndex = 0;
   3179                  }
   \                     ??CrossCallReturnLabel_61:
   \   0000007E   0x1D01             ADDS     R1,R0,#+4
   \   00000080   0x4622             MOV      R2,R4
   \   00000082   0x.... 0x....      ADR.W    R0,`?<Constant "%02xDISCONNECT %x\\r\\n">`
   \   00000086   0xE043             B.N      ??AppS2wProcess_AsyncStatusNotify_5
   3180                  else if(status == S2W_ASYNC_CON_SUCCESS)
   \                     ??AppS2wProcess_AsyncStatusNotify_4:
   \   00000088   0x2E01             CMP      R6,#+1
   \   0000008A   0xD106             BNE.N    ??AppS2wProcess_AsyncStatusNotify_6
   3181                  {
   3182                      S2w_Printf("%02x%s",(strlen(msg) + arg),msg);
   \   0000008C   0x.... 0x....      BL       ?Subroutine22
   3183                  }
   \                     ??CrossCallReturnLabel_60:
   \   00000090   0x1821             ADDS     R1,R4,R0
   \   00000092   0x463A             MOV      R2,R7
   \   00000094   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%s">`
   \   00000098   0xE03A             B.N      ??AppS2wProcess_AsyncStatusNotify_5
   3184                  else if (status == S2W_ASYNC_SOCKFAILURE)
   \                     ??AppS2wProcess_AsyncStatusNotify_6:
   \   0000009A   0xB935             CBNZ.N   R5,??AppS2wProcess_AsyncStatusNotify_7
   3185                  {
   3186                      S2w_Printf("%02xERROR: SOCKET FAILURE %x\r\n",(strlen(msg)+4),arg);
   \   0000009C   0x.... 0x....      BL       ?Subroutine22
   3187                     // s2wState = S2W_STATE_CMD;
   3188                     // dataIndex = 0;
   3189                  }
   \                     ??CrossCallReturnLabel_59:
   \   000000A0   0x1D01             ADDS     R1,R0,#+4
   \   000000A2   0x4622             MOV      R2,R4
   \   000000A4   0x.... 0x....      ADR.W    R0,`?<Constant "%02xERROR: SOCKET FAI...">`
   \   000000A8   0xE032             B.N      ??AppS2wProcess_AsyncStatusNotify_5
   3190          		else if ((status == S2W_ASYNC_MDNS_REG_FAILED_ID) || (status == S2W_ASYNC_MDNS_REG_SUCESS_ID))
   \                     ??AppS2wProcess_AsyncStatusNotify_7:
   \   000000AA   0x2E1A             CMP      R6,#+26
   \   000000AC   0xBF18             IT       NE 
   \   000000AE   0x2E1B             CMPNE    R6,#+27
   \   000000B0   0xD10B             BNE.N    ??AppS2wProcess_AsyncStatusNotify_8
   3191                  {
   3192                  	UINT8 *str;
   3193          			str = (UINT8 *)arg;
   3194          			S2w_Printf("%02x%s%s\r\n",(strlen(msg)+strlen((const char *)str)),msg,str);
   \   000000B2   0x.... 0x....      BL       ?Subroutine22
   3195          		}
   \                     ??CrossCallReturnLabel_58:
   \   000000B6   0x4605             MOV      R5,R0
   \   000000B8   0x4620             MOV      R0,R4
   \   000000BA   0x.... 0x....      BL       strlen
   \   000000BE   0x1941             ADDS     R1,R0,R5
   \   000000C0   0x4623             MOV      R3,R4
   \   000000C2   0x463A             MOV      R2,R7
   \   000000C4   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%s%s\\r\\n">`
   \   000000C8   0xE01C             B.N      ??AppS2wProcess_AsyncStatusNotify_9
   3196                  else
   3197                  {
   3198                      S2w_Printf("%02x%s\r\n",strlen(msg),msg);
   \                     ??AppS2wProcess_AsyncStatusNotify_8:
   \   000000CA   0x.... 0x....      BL       ?Subroutine22
   3199                  }
   3200              }
   \                     ??CrossCallReturnLabel_57:
   \   000000CE   0x4601             MOV      R1,R0
   \   000000D0   0x463A             MOV      R2,R7
   \   000000D2   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%s\\r\\n">`
   \   000000D6   0xE01B             B.N      ??AppS2wProcess_AsyncStatusNotify_5
   3201              else
   3202              {
   3203          		UINT8 buff[8],len;
   3204          		len = sprintf((char*)buff,"%x",status);
   \                     ??AppS2wProcess_AsyncStatusNotify_2:
   \   000000D8   0x4632             MOV      R2,R6
   \   000000DA   0x....             ADR.N    R1,??DataTable132_4  ;; 0x25, 0x78, 0x00, 0x00
   \   000000DC   0xA800             ADD      R0,SP,#+0
   \   000000DE   0x.... 0x....      BL       sprintf
   \   000000E2   0xB2C1             UXTB     R1,R0
   3205                  if(status == S2W_ASYNC_CON_SUCCESS)
   \   000000E4   0x2E01             CMP      R6,#+1
   \   000000E6   0xD104             BNE.N    ??AppS2wProcess_AsyncStatusNotify_10
   3206                  {
   3207                      S2w_Printf("%02x%d",(arg + 1),status );
   \   000000E8   0x2201             MOVS     R2,#+1
   \   000000EA   0x1C61             ADDS     R1,R4,#+1
   \   000000EC   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%d">`
   \   000000F0   0xE00E             B.N      ??AppS2wProcess_AsyncStatusNotify_5
   3208                  }
   3209                  else if ((status == S2W_ASYNC_ECIDCLOSE) || (status == S2W_ASYNC_SOCKFAILURE) )
   \                     ??AppS2wProcess_AsyncStatusNotify_10:
   \   000000F2   0x2E02             CMP      R6,#+2
   \   000000F4   0xBF18             IT       NE 
   \   000000F6   0x2D00             CMPNE    R5,#+0
   \   000000F8   0xD107             BNE.N    ??AppS2wProcess_AsyncStatusNotify_11
   3210                  {
   3211                      S2w_Printf("%02x%d %x\r\n",5,status, arg); // verbose only 1 char
   \   000000FA   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%d %x\\r\\n">`
   \   000000FE   0x4623             MOV      R3,R4
   \   00000100   0x4632             MOV      R2,R6
   \   00000102   0x2105             MOVS     R1,#+5
   \                     ??AppS2wProcess_AsyncStatusNotify_9:
   \   00000104   0x.... 0x....      BL       S2w_Printf
   \   00000108   0xE004             B.N      ??AppS2wProcess_AsyncStatusNotify_12
   3212                      //s2wState = S2W_STATE_CMD;
   3213                      //dataIndex = 0;
   3214                  }
   3215                  else if (status == S2W_EXTPA_ASYNC_INITIAL_BOOT_MSG)
   3216                  {
   3217                      S2w_Printf("%02x%x\r\n",len,status);
   3218                  }
   3219                  else
   3220                  {
   3221                      S2w_Printf("%02x%x\r\n",len,status);
   \                     ??AppS2wProcess_AsyncStatusNotify_11:
   \   0000010A   0x4632             MOV      R2,R6
   \   0000010C   0x.... 0x....      ADR.W    R0,`?<Constant "%02x%x\\r\\n">`
   \                     ??AppS2wProcess_AsyncStatusNotify_5:
   \   00000110   0x.... 0x....      BL       S2w_Printf
   3222                  }
   3223              }
   3224              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   \                     ??AppS2wProcess_AsyncStatusNotify_12:
   \   00000114   0x.... 0x....      LDR.W    R1,??DataTable136_11
   \   00000118   0x6809             LDR      R1,[R1, #+0]
   \   0000011A   0xF646 0x20F8      MOVW     R0,#+27384
   \   0000011E   0x5C40             LDRB     R0,[R0, R1]
   \   00000120   0x2802             CMP      R0,#+2
   \   00000122   0xBF08             IT       EQ 
   \   00000124   0x.... 0x....      BLEQ     s2wSpiFs_Flush
   3225              {
   3226                  s2wSpiFs_Flush();
   3227              }
   3228          
   3229              S2w_AsyncMsgGpioOp(0);
   \   00000128   0x2000             MOVS     R0,#+0
   \   0000012A   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   3230          }
   \   0000012E   0xBDF7             POP      {R0-R2,R4-R7,PC}  ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0x4638             MOV      R0,R7
   \   00000002   0x.... 0x....      B.W      strlen
   3231          

   \                                 In section .text, align 2, keep-with-next
   3232          VOID
   3233          AppS2wRoam_SatusNotify(UINT32 statusMsg, UINT32 asycStatusMsg)  
   3234           {
   \                     AppS2wRoam_SatusNotify:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   3235          #ifdef	S2W_UART_ENABLE
   3236          		while(S2wUart_TxStatusGet());
   \                     ??AppS2wRoam_SatusNotify_0:
   \   00000006   0x.... 0x....      BL       S2wUart_TxStatusGet
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD1FB             BNE.N    ??AppS2wRoam_SatusNotify_0
   3237          #endif
   3238          	 GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   0000000E   0x.... 0x....      BL       ?Subroutine17
   3239          
   3240          	 /* Print ip header if msg is new ip*/
   3241          	 if(statusMsg == S2W_ENEWIP)
   \                     ??CrossCallReturnLabel_47:
   \   00000012   0x2C13             CMP      R4,#+19
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      BLEQ     AppS2wHdrAndIpv4_Print
   3242           	 {
   3243          		 AppS2wHdrAndIpv4_Print();
   3244           	 }
   3245           
   3246          #ifdef S2W_ASYNC_MSG
   3247          	 if(s2wCurrent.asyncMsgFormat)
   \   0000001A   0x.... 0x....      BL       ?Subroutine16
   \                     ??CrossCallReturnLabel_46:
   \   0000001E   0xB120             CBZ.N    R0,??AppS2wRoam_SatusNotify_1
   3248          	 {
   3249          		 AppS2wProcess_AsyncStatusNotify(asycStatusMsg, 0);
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0xB2E8             UXTB     R0,R5
   \   00000024   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000028   0xE003             B.N      ??AppS2wRoam_SatusNotify_2
   3250          	 }
   3251          	 else
   3252          #endif
   3253          	 {
   3254          		 AppS2wProcess_StatusNotify(statusMsg, 0);
   \                     ??AppS2wRoam_SatusNotify_1:
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0xB2E0             UXTB     R0,R4
   \   0000002E   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   3255          	 }
   3256          	 GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wRoam_SatusNotify_2:
   \   00000032   0x4630             MOV      R0,R6
   \   00000034   0x.... 0x....      BL       GsnOsal_SemRelease
   3257          
   3258          #ifdef	S2W_UART_ENABLE
   3259          		while(S2wUart_TxStatusGet());
   \                     ??AppS2wRoam_SatusNotify_3:
   \   00000038   0x.... 0x....      BL       S2wUart_TxStatusGet
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD1FB             BNE.N    ??AppS2wRoam_SatusNotify_3
   3260          #endif
   3261          	 /* Print ip header if msg is new ip*/
   3262           
   3263           }
   \   00000040   0xBD70             POP      {R4-R6,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
   3264           void AppS2w_NwConnRestore()
   3265           {
   \                     AppS2w_NwConnRestore:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   3266                  APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchInfo = App_RtcLatchMemInfoPtrGet();
   3267          	//APP_RTC_SECNDRY_MEM_INFO_T *pAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   3268                  GSN_WDD_WLAN_CFG_T *pWddConf;
   3269                  
   3270          	/* Set L2 Configuration */
   3271          	pWddConf = GsnWdd_WlanConfigPtrGet(&s2wappMainTaskCtxt->if0.wddCtx);
   \   00000002   0x....             LDR.N    R0,??DataTable132
   3272          	//memset(&WddConf,0,sizeof(GSN_WDD_WLAN_CFG_T));
   3273          	//s2wappMainTaskCtxt->if0.wddCtx.assocStatus = pAppRtcLtchInfo->AssocStatus;
   3274          	////s2wLinkState = s2wappMainTaskCtxt->if0.wddCtx.assocStatus;
   3275          	memcpy(&pWddConf->bssid, &pAppRtcLtchInfo->bssid, sizeof(GSN_WLAN_MAC_ADDR_T));
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable136_13  ;; 0x41010159
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF600 0x7494      ADDW     R4,R0,#+3988
   \   0000000E   0x2206             MOVS     R2,#+6
   \   00000010   0x4629             MOV      R1,R5
   \   00000012   0xF104 0x0021      ADD      R0,R4,#+33
   \   00000016   0x.... 0x....      BL       memcpy
   3276          	memcpy(&pWddConf->ssid, &pAppRtcLtchInfo->ssid, sizeof(GSN_WLAN_MAC_SSID_T));
   \   0000001A   0x2221             MOVS     R2,#+33
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable136_14  ;; 0x41010138
   \   00000020   0x4620             MOV      R0,R4
   \   00000022   0x.... 0x....      BL       memcpy
   3277          	pWddConf->securityCfg.mode = pAppRtcLtchInfo->wsec;
   \   00000026   0x79A8             LDRB     R0,[R5, #+6]
   3278          	pWddConf->channel[0] = pAppRtcLtchInfo->channel;
   3279                  current_wlan_info.mode = pAppRtcLtchInfo->wmode;
   \   00000028   0x.... 0x....      LDR.W    R6,??DataTable136_15
   \   0000002C   0xF884 0x0040      STRB     R0,[R4, #+64]
   3280          	current_wlan_info.authMode = pWddConf->securityCfg.mode;
   3281          	current_wlan_info.channel = pWddConf->channel[0];
   3282          	memcpy(current_wlan_info.ssid, pWddConf->ssid.array, pWddConf->ssid.length);
   \   00000030   0x1C61             ADDS     R1,R4,#+1
   \   00000032   0x7A28             LDRB     R0,[R5, #+8]
   \   00000034   0xF884 0x0027      STRB     R0,[R4, #+39]
   \   00000038   0x7A68             LDRB     R0,[R5, #+9]
   \   0000003A   0x7030             STRB     R0,[R6, #+0]
   \   0000003C   0xF894 0x0040      LDRB     R0,[R4, #+64]
   \   00000040   0xF886 0x002A      STRB     R0,[R6, #+42]
   \   00000044   0xF894 0x0027      LDRB     R0,[R4, #+39]
   \   00000048   0x7070             STRB     R0,[R6, #+1]
   \   0000004A   0xF106 0x000A      ADD      R0,R6,#+10
   \   0000004E   0x7822             LDRB     R2,[R4, #+0]
   \   00000050   0x.... 0x....      BL       memcpy
   3283          	current_wlan_info.ssidLen = pWddConf->ssid.length;
   \   00000054   0x7820             LDRB     R0,[R4, #+0]
   \   00000056   0x70B0             STRB     R0,[R6, #+2]
   3284                  
   3285          }
   \   00000058   0xBD70             POP      {R4-R6,PC}       ;; return
   3286          

   \                                 In section .text, align 2, keep-with-next
   3287          PUBLIC VOID
   3288          AppS2wProcess_AutoStart(VOID)
   3289          {
   \                     AppS2wProcess_AutoStart:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   3290          	UINT32 bootReason,bootInfo;
   3291              UINT8 buff[8]={0}, len=0;
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0xC006             STM      R0!,{R1,R2}
   3292          #ifdef  S2W_NCM_SUPPORT_ENABLE
   3293             if(s2wCurrent.ncmAutoMgr)
   \   0000000C   0x....             LDR.N    R4,??DataTable132_2
   \   0000000E   0x.... 0x....      ADR.W    R1,`?<Constant "%d,%d,%d">`
   \   00000012   0xF894 0x332A      LDRB     R3,[R4, #+810]
   \   00000016   0xAD04             ADD      R5,SP,#+16
   \   00000018   0xB1CB             CBZ.N    R3,??AppS2wProcess_AutoStart_0
   3294             {
   3295                  
   3296                  len = sprintf((char*)buff,"%d,%d,%d",((s2wCurrent.mode == 1) ? 0: 1) ,
   3297                        s2wCurrent.ncmAutoMgr,s2wCurrent.ncmAutoLvl);
   \   0000001A   0x7920             LDRB     R0,[R4, #+4]
   \   0000001C   0x2801             CMP      R0,#+1
   \   0000001E   0xBF18             IT       NE 
   \   00000020   0x2201             MOVNE    R2,#+1
   3298                  buff[len]='\0';
   \   00000022   0xF894 0x032B      LDRB     R0,[R4, #+811]
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xA804             ADD      R0,SP,#+16
   \   0000002A   0x.... 0x....      BL       sprintf
   \   0000002E   0xB2C0             UXTB     R0,R0
   \   00000030   0x2100             MOVS     R1,#+0
   \   00000032   0x5541             STRB     R1,[R0, R5]
   3299          	 	bootReason = GSN_BOOT_REASON_GET();		
   3300          		bootInfo =  GSN_BOOT_INFO_GET();
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable136_3  ;; 0x41010004
   \   00000038   0x6841             LDR      R1,[R0, #+4]
   3301          		if( (bootReason == GSN_WIF_SYS_BOOT_NORMAL_BOOT) && ((GSN_WIF_SYS_BOOTINFO_NORMALBOOT_RTC == bootInfo) || 
   3302          		                     (GSN_WIF_SYS_BOOTINFO_NORMALBOOT_ALARM == bootInfo)))
   \   0000003A   0x6800             LDR      R0,[R0, #+0]
   \   0000003C   0x2801             CMP      R0,#+1
   \   0000003E   0xD117             BNE.N    ??AppS2wProcess_AutoStart_1
   \   00000040   0x2900             CMP      R1,#+0
   \   00000042   0xBF18             IT       NE 
   \   00000044   0x2901             CMPNE    R1,#+1
   \   00000046   0xD113             BNE.N    ??AppS2wProcess_AutoStart_1
   3303          	        AppS2w_NwConnRestore();
   \   00000048   0x.... 0x....      BL       AppS2w_NwConnRestore
   3304                  AppS2wCmd_NcmAuto(buff);
   \   0000004C   0xE010             B.N      ??AppS2wProcess_AutoStart_1
   3305          
   3306                  
   3307             }
   3308              else if(profile_params.autoConnect)
   \                     ??AppS2wProcess_AutoStart_0:
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable136_6
   \   00000052   0x7900             LDRB     R0,[R0, #+4]
   \   00000054   0xB178             CBZ.N    R0,??AppS2wProcess_AutoStart_2
   3309              {
   3310                  len = sprintf((char*)buff,"%d,%d,%d",((s2wCurrent.autoWlandata.mode == 2) ? 1: 0) ,
   3311                        1,1);
   \   00000056   0x7B20             LDRB     R0,[R4, #+12]
   \   00000058   0x2802             CMP      R0,#+2
   \   0000005A   0xBF08             IT       EQ 
   \   0000005C   0x2201             MOVEQ    R2,#+1
   3312                  buff[len]='\0';
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x2301             MOVS     R3,#+1
   \   00000064   0xA804             ADD      R0,SP,#+16
   \   00000066   0x.... 0x....      BL       sprintf
   \   0000006A   0xB2C0             UXTB     R0,R0
   \   0000006C   0x2100             MOVS     R1,#+0
   \   0000006E   0x5541             STRB     R1,[R0, R5]
   3313                  AppS2wCmd_NcmAuto(buff);
   \                     ??AppS2wProcess_AutoStart_1:
   \   00000070   0xA804             ADD      R0,SP,#+16
   \   00000072   0x.... 0x....      BL       AppS2wCmd_NcmAuto
   3314              }
   3315          #endif
   3316          #ifdef S2W_ADC_SUPPORT
   3317              if(s2wCurrent.clkCalibEn)
   \                     ??AppS2wProcess_AutoStart_2:
   \   00000076   0xF894 0x03A9      LDRB     R0,[R4, #+937]
   \   0000007A   0xB1B8             CBZ.N    R0,??AppS2wProcess_AutoStart_3
   3318              {
   3319                  appCtx.clkCaibTmrHndl = GsnSoftTmr_Start(&appCtx.clkCaibTmr, GSN_SOFT_TMR_PERIODIC, 0, SEC_TO_SYSTIME(s2wCurrent.clkCalibPeriod), AppS2w_ClkCalibCb, NULL);
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x9003             STR      R0,[SP, #+12]
   \   00000080   0x2100             MOVS     R1,#+0
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable136_16
   \   00000086   0x.... 0x....      LDR.W    R5,??DataTable136_17
   \   0000008A   0x9002             STR      R0,[SP, #+8]
   \   0000008C   0x460B             MOV      R3,R1
   \   0000008E   0xF8D4 0x03AC      LDR      R0,[R4, #+940]
   \   00000092   0x03C0             LSLS     R0,R0,#+15
   \   00000094   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000098   0x2200             MOVS     R2,#+0
   \   0000009A   0xF505 0x4001      ADD      R0,R5,#+33024
   \   0000009E   0x2101             MOVS     R1,#+1
   \   000000A0   0x3078             ADDS     R0,R0,#+120
   \   000000A2   0x.... 0x....      BL       GsnSoftTmr_Start
   \   000000A6   0xF248 0x1198      MOVW     R1,#+33176
   \   000000AA   0x5148             STR      R0,[R1, R5]
   3320              }
   3321          #endif    
   3322          }
   \                     ??AppS2wProcess_AutoStart_3:
   \   000000AC   0xB007             ADD      SP,SP,#+28
   \   000000AE   0xBD30             POP      {R4,R5,PC}       ;; return
   3323          
   3324          #ifdef  S2W_NCM_SUPPORT_ENABLE

   \                                 In section .text, align 2, keep-with-next
   3325          PUBLIC UINT8
   3326          AppS2wProcess_AutoConnectStart(S2W_PROFILE_T *profile)
   3327          {
   \                     AppS2wProcess_AutoConnectStart:
   \   00000000   0xB500             PUSH     {LR}
   3328              UINT8 status = S2W_FAILURE;
   3329              UINT8 buff[16],len;
   3330              len = sprintf((char*)buff,"%d,%d,%d",((s2wCurrent.autoWlandata.mode == 2) ? 1: 0) ,
   3331                        1,1);
   \   00000002   0x....             LDR.N    R0,??DataTable136_18
   \   00000004   0x7B00             LDRB     R0,[R0, #+12]
   \   00000006   0xB085             SUB      SP,SP,#+20
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xBF0C             ITE      EQ 
   \   0000000C   0x2201             MOVEQ    R2,#+1
   \   0000000E   0x2200             MOVNE    R2,#+0
   3332              buff[len]='\0';
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x2301             MOVS     R3,#+1
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant "%d,%d,%d">`
   \   0000001A   0xA801             ADD      R0,SP,#+4
   \   0000001C   0x.... 0x....      BL       sprintf
   \   00000020   0xB2C0             UXTB     R0,R0
   \   00000022   0xA901             ADD      R1,SP,#+4
   \   00000024   0x2200             MOVS     R2,#+0
   \   00000026   0x5442             STRB     R2,[R0, R1]
   3333              status = AppS2wCmd_NcmAuto(buff);
   3334              return status;
   \   00000028   0xA801             ADD      R0,SP,#+4
   \   0000002A   0x....             B.N      ?Subroutine0
   3335          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       AppS2wCmd_NcmAuto
   \   00000004   0xB005             ADD      SP,SP,#+20
   \   00000006   0xBD00             POP      {PC}             ;; return
   3336          

   \                                 In section .text, align 2, keep-with-next
   3337          PUBLIC UINT8
   3338          AppS2wProcess_AutoConnectStop(S2W_PROFILE_T *profile)
   3339          {
   \                     AppS2wProcess_AutoConnectStop:
   \   00000000   0xB500             PUSH     {LR}
   3340              UINT8 status = S2W_FAILURE;
   3341              UINT8 buff[16],len;
   3342              len = sprintf((char*)buff,"%d,%d",((s2wCurrent.autoWlandata.mode == 2) ? 1: 0) ,
   3343                        0);
   \   00000002   0x....             LDR.N    R0,??DataTable136_18
   \   00000004   0x7B00             LDRB     R0,[R0, #+12]
   \   00000006   0xB085             SUB      SP,SP,#+20
   \   00000008   0x2802             CMP      R0,#+2
   \   0000000A   0xBF0C             ITE      EQ 
   \   0000000C   0x2201             MOVEQ    R2,#+1
   \   0000000E   0x2200             MOVNE    R2,#+0
   3344              buff[len]='\0';
   \   00000010   0x2300             MOVS     R3,#+0
   \   00000012   0x.... 0x....      ADR.W    R1,`?<Constant "%d,%d">`
   \   00000016   0xA800             ADD      R0,SP,#+0
   \   00000018   0x.... 0x....      BL       sprintf
   \   0000001C   0xB2C0             UXTB     R0,R0
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0x5442             STRB     R2,[R0, R1]
   3345              status = AppS2wCmd_NcmAuto(buff);
   3346              return status;
   \   00000024   0xA800             ADD      R0,SP,#+0
   \   00000026                      REQUIRE ?Subroutine0
   \   00000026                      ;; // Fall through to label ?Subroutine0
   3347          }
   3348          #endif
   3349          /**
   3350           *************************************************************************
   3351           * @ingroup S2w-Application.
   3352           * @brief Perform the network auto connect operation.
   3353           *
   3354           * It will create the client or server of type TCP/UDP.
   3355           *
   3356           * @param  peer_data- IN Pointer to structure that contains
   3357           *         mode, type, IP address and Port number.
   3358           * @param  cid - IN Pointer to connection identifier.
   3359           * @return Status of the operation. Possible status are S2W_SUCCESS (0) on
   3360           *     success, S2W_FAILURE (1) on failure, S2W_ENCID (6) when Cid list is
   3361           *     full, S2W_SOCKFAILURE (4) on failure of any socket system call,
   3362           *         S2W_CMD_INPROCESS (8) when command response is not ready.
   3363           **************************************************************************/
   3364          PRIVATE UINT8
   3365          AppS2w_Connect(S2W_NETDATA_T *peer_data, UINT16 udpSrcPort, UINT8 *cid)
   3366          {
   3367              UINT8 status = S2W_EINVAL;
   3368          
   3369              if (peer_data->mode == S2W_NETDATA_MODE_SERVER)
   3370              {
   3371                  if (peer_data->proto == S2W_NETDATA_PROTO_UDP)
   3372                  {
   3373                      status = AppS2wHal_NetUdpServer(peer_data, cid);
   3374                  }
   3375                  else if (peer_data->proto == S2W_NETDATA_PROTO_TCP)
   3376                  {
   3377                      status = AppS2wHal_NetTcpServer(peer_data, cid);
   3378                      *cid = INVALID_CID;
   3379                  }
   3380              }
   3381              else if (peer_data->mode == S2W_NETDATA_MODE_CLIENT)
   3382              {
   3383                  if (peer_data->proto == S2W_NETDATA_PROTO_TCP)
   3384                  {
   3385                      status = AppS2wHal_NetTcpClient(peer_data, cid);
   3386                  }
   3387                  else if (peer_data->proto == S2W_NETDATA_PROTO_UDP)
   3388                  {
   3389                      status = AppS2wHal_NetUdpClient(peer_data,cid,udpSrcPort);
   3390                  }
   3391              }
   3392          
   3393              return status;
   3394          }
   3395          
   3396          
   3397          
   3398          
   3399          #ifdef S2W_NCM_SUPPORT_ENABLE
   3400          extern UINT32 ncmautoconnectcount;
   3401          
   3402          
   3403          
   3404          

   \                                 In section .text, align 2, keep-with-next
   3405          UINT8
   3406          AppS2wProcess_NcmAutoConnectL4Connect()
   3407          {
   \                     AppS2wProcess_NcmAutoConnectL4Connect:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB083             SUB      SP,SP,#+12
   3408              UINT8 status = S2W_FAILURE;
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3409          	GSN_STATUS ret=GSN_FAILURE;
   \   0000000C   0x....             LDR.N    R4,??DataTable136_8
   \   0000000E   0x.... 0x....      LDR.W    R9,??DataTable136_18
   \   00000012   0x78E0             LDRB     R0,[R4, #+3]
   \   00000014   0xB130             CBZ.N    R0,??AppS2wProcess_NcmAutoConnectL4Connect_0
   \   00000016   0xF899 0x003C      LDRB     R0,[R9, #+60]
   \   0000001A   0x2801             CMP      R0,#+1
   \   0000001C   0xD102             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_0
   3410              UINT8 cid;
   3411          	ULONG ipaddr;
   3412              //acTimedOut = 0;
   3413              // auto connection and L4 as tcp/udp server no need to connect it back
   3414                 if((s2wIsAutoconnected ) &&(s2wCurrent.autoNetdata.mode == S2W_NETDATA_MODE_SERVER))
   3415                 {
   3416          		   curCid= INVALID_CID;
   \   0000001E   0x20FF             MOVS     R0,#+255
   \   00000020   0x7160             STRB     R0,[R4, #+5]
   3417          		   return 0;
   \   00000022   0xE0FE             B.N      ??CrossCallReturnLabel_15
   3418          	   }
   3419                  //AppS2wHal_TimerStart(&acTimer,s2wCurrent.registers[S2W_REG_NET_CONNECTION_TIMEOUT]);
   3420          
   3421                  //while (!acTimedOut)
   3422                  //{
   3423          
   3424                  if(s2wCurrent.autoNetdata.isFqdn)
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_0:
   \   00000024   0xF109 0x073C      ADD      R7,R9,#+60
   \   00000028   0xF509 0x76E8      ADD      R6,R9,#+464
   \   0000002C   0x7E38             LDRB     R0,[R7, #+24]
   \   0000002E   0x.... 0x....      LDR.W    R10,??DataTable136_6
   \   00000032   0x.... 0x....      LDR.W    R8,??DataTable136_12
   \   00000036   0x....             LDR.N    R5,??DataTable136_19
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD047             BEQ.N    ??AppS2wProcess_NcmAutoConnectL4Connect_1
   3425                  {
   3426                  GsnNwIf_DnsRetryCountSet(&s2wappMainTaskCtxt->if0.nwifCtx.dnsCliHndl,3);
   \   0000003C   0x.... 0x....      LDR.W    R11,??DataTable136_11
   \   00000040   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000044   0xF500 0x5068      ADD      R0,R0,#+14848
   \   00000048   0x2103             MOVS     R1,#+3
   \   0000004A   0x303C             ADDS     R0,R0,#+60
   \   0000004C   0x.... 0x....      BL       nx_dns_retry_count_set
   3427          		/* change  sysqual time to 200 sec*/		   
   3428          		GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \   00000050   0x2008             MOVS     R0,#+8
   \   00000052   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   3429          		GsnSq_TaskMonitorDeregister(APP_CFG_SQ_MAIN_TASK_ID);
   \   00000056   0x2008             MOVS     R0,#+8
   \   00000058   0x.... 0x....      BL       GsnSq_TaskMonitorDeregister
   3430          		GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID,NULL,APP_CFG_SQ_TICKS_FOR_MAIN_TASK_DNSRESOLVE);
   \   0000005C   0x22C8             MOVS     R2,#+200
   \   0000005E   0x2100             MOVS     R1,#+0
   \   00000060   0x2008             MOVS     R0,#+8
   \   00000062   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   3431          		GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID,0);
   \   00000066   0x2100             MOVS     R1,#+0
   \   00000068   0x2008             MOVS     R0,#+8
   \   0000006A   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   3432                  ret = GsnNwIf_DnsHostByNameGet(&s2wappMainTaskCtxt->if0.nwifCtx,(UINT8*)s2wCurrent.autoNetdata.fqdn,&ipaddr,5);
   \   0000006E   0xF8DB 0x0000      LDR      R0,[R11, #+0]
   \   00000072   0xF500 0x50A0      ADD      R0,R0,#+5120
   \   00000076   0x2305             MOVS     R3,#+5
   \   00000078   0xAA01             ADD      R2,SP,#+4
   \   0000007A   0xF109 0x0155      ADD      R1,R9,#+85
   \   0000007E   0x3050             ADDS     R0,R0,#+80
   \   00000080   0x.... 0x....      BL       GsnNwIf_DnsHostByNameGet
   \   00000084   0x4683             MOV      R11,R0
   3433          		/* change  sysqual time back to 30 sec*/		
   3434          		GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \   00000086   0x2008             MOVS     R0,#+8
   \   00000088   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   3435          		GsnSq_TaskMonitorDeregister(APP_CFG_SQ_MAIN_TASK_ID);
   \   0000008C   0x2008             MOVS     R0,#+8
   \   0000008E   0x.... 0x....      BL       GsnSq_TaskMonitorDeregister
   3436          		GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID,NULL,APP_CFG_SQ_TICKS_FOR_MAIN_TASK);
   \   00000092   0x225A             MOVS     R2,#+90
   \   00000094   0x2100             MOVS     R1,#+0
   \   00000096   0x2008             MOVS     R0,#+8
   \   00000098   0x.... 0x....      BL       GsnSq_TaskMonitorRegister
   3437          		GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID,0);
   \   0000009C   0x2100             MOVS     R1,#+0
   \   0000009E   0x2008             MOVS     R0,#+8
   \   000000A0   0x.... 0x....      BL       GsnSq_TaskMonitorStart
   3438                      if(ret == GSN_FAILURE || ipaddr == 0)
   \   000000A4   0xF11B 0x4F00      CMN      R11,#-2147483648
   \   000000A8   0xD103             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_2
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_3:
   \   000000AA   0x6828             LDR      R0,[R5, #+0]
   \   000000AC   0x1E40             SUBS     R0,R0,#+1
   \   000000AE   0x6028             STR      R0,[R5, #+0]
   \   000000B0   0xE03B             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_4
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_2:
   \   000000B2   0x9801             LDR      R0,[SP, #+4]
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD0F8             BEQ.N    ??AppS2wProcess_NcmAutoConnectL4Connect_3
   3439                      {
   3440                      	/* Not able to resolve the host name , then skip the  connect call.
   3441          				    set status to failure and reset the connect retry count
   3442          				*/
   3443                      	status = S2W_FAILURE;	
   3444          			//ncmautoconnectcount=0;
   3445          				goto SkipConnect;
   3446                      }
   3447          			s2wCurrent.autoNetdata.ipAddr[0] = (ipaddr & 0xff000000)>>24 ;			
   \   000000B8   0x0E00             LSRS     R0,R0,#+24
   \   000000BA   0x7138             STRB     R0,[R7, #+4]
   3448          			s2wCurrent.autoNetdata.ipAddr[1] = (ipaddr & 0x00ff0000)>>16;
   \   000000BC   0x9801             LDR      R0,[SP, #+4]
   \   000000BE   0x0C00             LSRS     R0,R0,#+16
   \   000000C0   0x7178             STRB     R0,[R7, #+5]
   3449          			s2wCurrent.autoNetdata.ipAddr[2] = (ipaddr & 0x0000ff00)>>8;
   \   000000C2   0x9801             LDR      R0,[SP, #+4]
   \   000000C4   0x0A00             LSRS     R0,R0,#+8
   \   000000C6   0x71B8             STRB     R0,[R7, #+6]
   3450          			s2wCurrent.autoNetdata.ipAddr[3] = (ipaddr & 0x000000ff);
   \   000000C8   0x9801             LDR      R0,[SP, #+4]
   \   000000CA   0x71F8             STRB     R0,[R7, #+7]
   3451          			
   3452                  }
   3453                  status = AppS2w_Connect(&s2wCurrent.autoNetdata,s2wCurrent.udpSrcPort,&cid);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_1:
   \   000000CC   0x2002             MOVS     R0,#+2
   \   000000CE   0xF899 0x103C      LDRB     R1,[R9, #+60]
   \   000000D2   0xF8B9 0x23A6      LDRH     R2,[R9, #+934]
   \   000000D6   0x2901             CMP      R1,#+1
   \   000000D8   0xD110             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_5
   \   000000DA   0x7879             LDRB     R1,[R7, #+1]
   \   000000DC   0xB921             CBNZ.N   R1,??AppS2wProcess_NcmAutoConnectL4Connect_6
   \   000000DE   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   000000E2   0x.... 0x....      BL       AppS2wHal_NetUdpServer
   \   000000E6   0xE017             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_7
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_6:
   \   000000E8   0x2901             CMP      R1,#+1
   \   000000EA   0xD115             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_7
   \   000000EC   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   000000F0   0x.... 0x....      BL       AppS2wHal_NetTcpServer
   \   000000F4   0x21FF             MOVS     R1,#+255
   \   000000F6   0xF88D 0x1000      STRB     R1,[SP, #+0]
   \   000000FA   0xE00D             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_7
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_5:
   \   000000FC   0xB961             CBNZ.N   R1,??AppS2wProcess_NcmAutoConnectL4Connect_7
   \   000000FE   0x7879             LDRB     R1,[R7, #+1]
   \   00000100   0x2901             CMP      R1,#+1
   \   00000102   0xD104             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_8
   \   00000104   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_35:
   \   00000108   0x.... 0x....      BL       AppS2wHal_NetTcpClient
   \   0000010C   0xE004             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_7
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_8:
   \   0000010E   0xB919             CBNZ.N   R1,??AppS2wProcess_NcmAutoConnectL4Connect_7
   \   00000110   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_36:
   \   00000114   0x.... 0x....      BL       AppS2wHal_NetUdpClient
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_7:
   \   00000118   0xF88D 0x0001      STRB     R0,[SP, #+1]
   3454          	
   3455          SkipConnect:
   3456          	
   3457          		/*
   3458          			 Bug FIX 5511 - Enhanced Auto connection: L4 timeout gives ERROR message to the MCU
   3459          			 Made auto connection l4 connection retey count to infinite  and never decremts the counter
   3460          	
   3461          		*/
   3462          		if(S2W_AUTO_CONCT_L4RETRY_INFINITE != ncmautoconnectcount);
   3463              ncmautoconnectcount--;
   \   0000011C   0x6828             LDR      R0,[R5, #+0]
   \   0000011E   0x1E40             SUBS     R0,R0,#+1
   \   00000120   0x6028             STR      R0,[R5, #+0]
   3464                  if (status != S2W_SUCCESS)
   \   00000122   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   00000126   0x2800             CMP      R0,#+0
   \   00000128   0xD033             BEQ.N    ??AppS2wProcess_NcmAutoConnectL4Connect_9
   3465                  {
   3466                     if(ncmautoconnectcount)
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_4:
   \   0000012A   0x6828             LDR      R0,[R5, #+0]
   \   0000012C   0xB140             CBZ.N    R0,??AppS2wProcess_NcmAutoConnectL4Connect_10
   3467                     {
   3468                         AppS2wHal_TimerStart(&acNcmTimer,
   3469                             s2wCurrent.registers[S2W_NCM_AUTO_L4_TIME]);
   \   0000012E   0xF8B9 0x11D0      LDRH     R1,[R9, #+464]
   \   00000132   0xF504 0x70C4      ADD      R0,R4,#+392
   \   00000136   0x.... 0x....      BL       AppS2wHal_TimerStart
   3470                         return status;
   \   0000013A   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   0000013E   0xE071             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_11
   3471                      }
   3472                      else
   3473                      {
   3474          				if(s2wLinkState != S2W_LINK_STATE_DISCONNECTED)
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_10:
   \   00000140   0x7860             LDRB     R0,[R4, #+1]
   \   00000142   0x2800             CMP      R0,#+0
   \   00000144   0xD06D             BEQ.N    ??CrossCallReturnLabel_15
   3475          				{
   3476                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \   00000146   0x.... 0x....      BL       ?Subroutine19
   3477          #ifdef S2W_ASYNC_MSG
   3478                          if(s2wCurrent.asyncMsgFormat)
   \                     ??CrossCallReturnLabel_52:
   \   0000014A   0x7A30             LDRB     R0,[R6, #+8]
   \   0000014C   0xB120             CBZ.N    R0,??AppS2wProcess_NcmAutoConnectL4Connect_12
   3479                          {
   3480                               AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_ERROR_MSG, 0);
   \   0000014E   0x2100             MOVS     R1,#+0
   \   00000150   0x200B             MOVS     R0,#+11
   \   00000152   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   \   00000156   0xE003             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_13
   3481                          }
   3482                          else
   3483          #endif
   3484                          {
   3485                               AppS2wProcess_StatusNotify(S2W_FAILURE, 0);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_12:
   \   00000158   0x2100             MOVS     R1,#+0
   \   0000015A   0x2001             MOVS     R0,#+1
   \   0000015C   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   3486                          }
   3487                           GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_13:
   \   00000160   0x4640             MOV      R0,R8
   \   00000162   0x.... 0x....      BL       GsnOsal_SemRelease
   3488                          curCid = cid;
   \   00000166   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000016A   0x7160             STRB     R0,[R4, #+5]
   3489          				if(0 == profile_params.autoConnect)
   \   0000016C   0xF89A 0x0004      LDRB     R0,[R10, #+4]
   \   00000170   0xB910             CBNZ.N   R0,??AppS2wProcess_NcmAutoConnectL4Connect_14
   \   00000172   0x8870             LDRH     R0,[R6, #+2]
   \   00000174   0x6028             STR      R0,[R5, #+0]
   \   00000176   0xE054             B.N      ??CrossCallReturnLabel_15
   3490          				{
   3491          					ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
   3492          				}
   3493                          // if it is auto connection then go back to command mode
   3494                          if(profile_params.autoConnect)
   3495                          {
   3496          					s2wState =S2W_STATE_CMD;
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_14:
   \   00000178   0x2000             MOVS     R0,#+0
   \   0000017A   0x.... 0x....      BL       ?Subroutine4
   3497                              GsnGpio_NEIntDisable_Patch(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP); //Disable auto mode exit gpio interrupt
   3498                              AppS2wHal_TimerStop(&nagleTimer);
   \                     ??CrossCallReturnLabel_9:
   \   0000017E   0xF104 0x00E0      ADD      R0,R4,#+224
   \   00000182   0x.... 0x....      BL       AppS2wHal_TimerStop
   3499                              // make the data ready gpio as low..
   3500                              S2w_AsyncMsgGpioOp(0);
   \   00000186   0x2000             MOVS     R0,#+0
   \   00000188   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   3501                              s2wIsAutoconnected = 0;
   \   0000018C   0x2000             MOVS     R0,#+0
   \   0000018E   0x70E0             STRB     R0,[R4, #+3]
   \   00000190   0xE047             B.N      ??CrossCallReturnLabel_15
   3502          				}
   3503                      }
   3504                  }
   3505                  }
   3506                  else
   3507                  {
   3508                      if (cid != INVALID_CID)
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_9:
   \   00000192   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000196   0x28FF             CMP      R0,#+255
   \   00000198   0xD02C             BEQ.N    ??AppS2wProcess_NcmAutoConnectL4Connect_15
   3509                      {
   3510                          // reset the count
   3511          				if(0 == profile_params.autoConnect)
   \   0000019A   0xF89A 0x0004      LDRB     R0,[R10, #+4]
   \   0000019E   0xB908             CBNZ.N   R0,??AppS2wProcess_NcmAutoConnectL4Connect_16
   3512          				{                
   3513                          ncmautoconnectcount = s2wCurrent.registers[S2W_NCM_AUTO_L4_RETRY];
   \   000001A0   0x8870             LDRH     R0,[R6, #+2]
   \   000001A2   0x6028             STR      R0,[R5, #+0]
   3514          				}
   3515                          GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_16:
   \   000001A4   0x.... 0x....      BL       ?Subroutine19
   3516                          if((!s2wAutoConnState ) && (!profile_params.autoConnect))
   \                     ??CrossCallReturnLabel_51:
   \   000001A8   0x7920             LDRB     R0,[R4, #+4]
   \   000001AA   0x2800             CMP      R0,#+0
   \   000001AC   0xBF04             ITT      EQ 
   \   000001AE   0xF89A 0x0004      LDRBEQ   R0,[R10, #+4]
   \   000001B2   0x2800             CMPEQ    R0,#+0
   \   000001B4   0xD114             BNE.N    ??AppS2wProcess_NcmAutoConnectL4Connect_17
   3517                          {// old auto connection
   3518          #ifdef S2W_ASYNC_MSG
   3519                          if(s2wCurrent.asyncMsgFormat)
   \   000001B6   0x7A30             LDRB     R0,[R6, #+8]
   \   000001B8   0xB168             CBZ.N    R0,??AppS2wProcess_NcmAutoConnectL4Connect_18
   3520                          {
   3521                               UINT32 arglen = 2;
   3522                               S2w_Printf("\r\n");
   \   000001BA   0x....             ADR.N    R0,??DataTable136  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000001BC   0x.... 0x....      BL       S2w_Printf
   3523                               AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_CON_SUCCESS, arglen);
   \   000001C0   0x2102             MOVS     R1,#+2
   \   000001C2   0x2001             MOVS     R0,#+1
   \   000001C4   0x.... 0x....      BL       AppS2wProcess_AsyncStatusNotify
   3524                               S2w_Printf(" %x\r\n", cid);
   \   000001C8   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001CC   0x.... 0x....      ADR.W    R0,`?<Constant " %x\\r\\n">`
   \   000001D0   0x.... 0x....      BL       S2w_Printf
   \   000001D4   0xE004             B.N      ??AppS2wProcess_NcmAutoConnectL4Connect_17
   3525                          }
   3526                          else
   3527          #endif
   3528                          {
   3529                              AppS2wProcess_StatusNotify(S2W_CON_SUCCESS, cid);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_18:
   \   000001D6   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001DA   0x2007             MOVS     R0,#+7
   \   000001DC   0x.... 0x....      BL       AppS2wProcess_StatusNotify
   3530                          }
   3531          			    }
   3532                           GsnOsal_SemRelease(&s2wSyncSemID);
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_17:
   \   000001E0   0x4640             MOV      R0,R8
   \   000001E2   0x.... 0x....      BL       GsnOsal_SemRelease
   3533                          curCid = cid;
   \   000001E6   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001EA   0x7160             STRB     R0,[R4, #+5]
   3534          				s2wCurrent.ncmAutoCid = cid;
   \   000001EC   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   000001F0   0xF889 0x0394      STRB     R0,[R9, #+916]
   3535          
   3536                      }
   3537          				// if the old auto mode is enabled then start it...
   3538          				if(profile_params.autoConnect)
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_15:
   \   000001F4   0xF89A 0x0004      LDRB     R0,[R10, #+4]
   \   000001F8   0xB198             CBZ.N    R0,??CrossCallReturnLabel_15
   3539          				{
   3540          					s2wState = S2W_STATE_DATA_AUTO;
   \   000001FA   0x200D             MOVS     R0,#+13
   \   000001FC   0x7020             STRB     R0,[R4, #+0]
   3541          					s2wIsAutoconnected = 1;
   \   000001FE   0x2001             MOVS     R0,#+1
   \   00000200   0x70E0             STRB     R0,[R4, #+3]
   3542          					s2wAutoConnState = S2W_AUTO_CONN_DATA_PIPE;
   \   00000202   0x7120             STRB     R0,[R4, #+4]
   3543          
   3544          					if(cid != INVALID_CID)// tcp server case, make gpio high once the client get connected.
   \   00000204   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   00000208   0x28FF             CMP      R0,#+255
   \   0000020A   0xD004             BEQ.N    ??AppS2wProcess_NcmAutoConnectL4Connect_19
   3545          					{
   3546          					S2w_AsyncMsgGpioInit(); // make the async gpio as  high to indicate that the data mode ready
   \   0000020C   0x.... 0x....      BL       S2w_AsyncMsgGpioInit
   3547          					S2w_AsyncMsgGpioOp(1);
   \   00000210   0x2001             MOVS     R0,#+1
   \   00000212   0x.... 0x....      BL       S2w_AsyncMsgGpioOp
   3548          				   	}
   3549          					// start a gpio cb for auto mode exit
   3550          					GsnGpio_Init(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP , APP_S2W_AUTO_EXIT_GPIO_BIT_MAP );
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_19:
   \   00000216   0x.... 0x....      BL       ?Subroutine5
   3551          					/* register callback for GPIO interrupt */
   3552          					GsnGpio_IntCbRegister(APP_S2W_AUTO_EXIT_GPIO_NUM,s2wAutoExit_CB,NULL);
   \                     ??CrossCallReturnLabel_11:
   \   0000021A   0x.... 0x....      BL       ?Subroutine21
   3553          					/*enable interrupt*/
   3554          					GsnGpio_NEIntEnable(APP_S2W_AUTO_EXIT_GPIO_BIT_MAP);
   \                     ??CrossCallReturnLabel_55:
   \   0000021E   0x.... 0x....      BL       ?Subroutine8
   3555          				}
   3556                  
   3557          
   3558              }
   3559              return S2W_SUCCESS;
   \                     ??CrossCallReturnLabel_15:
   \   00000222   0x2000             MOVS     R0,#+0
   \                     ??AppS2wProcess_NcmAutoConnectL4Connect_11:
   \   00000224   0xE8BD 0x8FFE      POP      {R1-R11,PC}      ;; return
   3560          
   3561          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4640             MOV      R0,R8
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire
   3562          
   3563          #endif
   3564          
   3565          /**
   3566           ************************************************************************
   3567           * @ingroup S2w-Application.
   3568           * @brief Handle deep sleep wake-up
   3569           *    This function is called once the node come out of deep-sleep state.
   3570            * @param  - NONE
   3571           * @retval VOID - none.
   3572           ************************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3573          PUBLIC VOID
   3574          AppS2w_DeepSleepHandler(VOID)
   3575          {
   3576             #ifdef  S2W_FS_SPI_ENABLE
   3577             if(S2W_PORT_SPI == APP_S2W_GET_SERIAL_DEVICE_ID())
   3578             {//SPI interface is currently   selected
   3579                /*In case of SPI interface, after waking up from deep-sleep, its required to clean up the FIFO */
   3580                //AppS2w_FsReset();
   3581             }
   3582             #endif
   3583          
   3584             s2wappMainTaskCtxt->dpSleep = 0;
   \                     AppS2w_DeepSleepHandler:
   \   00000000   0x....             LDR.N    R1,??DataTable136_11
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0xF646 0x20FC      MOVW     R0,#+27388
   \   00000008   0x2200             MOVS     R2,#+0
   \   0000000A   0x5042             STR      R2,[R0, R1]
   3585          #ifdef S2W_ASYNC_MSG
   3586             if(s2wCurrent.asyncMsgFormat)
   \   0000000C   0x4611             MOV      R1,R2
   \   0000000E   0x....             LDR.N    R0,??DataTable136_18
   \   00000010   0xF890 0x01D8      LDRB     R0,[R0, #+472]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xBF1C             ITT      NE 
   \   00000018   0x2006             MOVNE    R0,#+6
   \   0000001A   0x.... 0x....      BNE.W    AppS2wProcess_AsyncStatusNotify
   3587             {
   3588                 AppS2wProcess_AsyncStatusNotify(S2W_ASYNC_DPSLEEP_EVT, 0);
   3589             }
   3590          
   3591             else
   3592           #endif
   3593             {
   3594                 AppS2wProcess_StatusNotify(S2W_DPSLEEP_EVT,0);
   \   0000001E   0x200D             MOVS     R0,#+13
   \   00000020   0x.... 0x....      B.W      AppS2wProcess_StatusNotify
   3595             }
   3596          }
   3597          
   3598          

   \                                 In section .text, align 4, keep-with-next
   3599          PRIVATE VOID
   3600          AppS2w_NagleExpiry(VOID *data)
   3601          {
   3602               UINT32 message = APP_NOTIFICATION_AUTO_SEND;
   3603              (s2wappMainTaskNotifier)(message, s2wappMainTaskCtxt);
   \                     AppS2w_NagleExpiry:
   \   00000000   0x....             LDR.N    R0,??DataTable136_11
   \   00000002   0x....             LDR.N    R2,??DataTable136_9
   \   00000004   0x6801             LDR      R1,[R0, #+0]
   \   00000006   0x6812             LDR      R2,[R2, #+0]
   \   00000008   0x2011             MOVS     R0,#+17
   \   0000000A   0x4710             BX       R2
   3604          }
   3605          
   3606          
   3607          #ifdef S2W_IP2WIFI_SUPPORT
   3608          VOID
   3609          S2w_RawNetRx(void *buf, INT16 len)
   3610          {
   3611              UINT8 *p = (UINT8 *) buf;
   3612          
   3613              S2W_L2_DEV_T *ps2wL2Dev = &s2wappMainTaskCtxt->s2wL2Dev;
   3614          
   3615              INT32 InterruptEnableStatus;
   3616          
   3617              s2wRxBytes += len;
   3618          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3619              GsnOsal_SemAcquire(&s2wSyncSemID, GSN_OSAL_WAIT_FOREVER);
   3620              S2w_Printf("%cR", S2W_ESC);
   3621              S2w_Printf (":");
   3622              S2w_Printf ("%d", len);
   3623              S2w_Printf (":");
   3624          #else
   3625              GsnOsal_SemAcquire(&s2wSyncSemID1, GSN_OSAL_WAIT_FOREVER);
   3626              S2w_Printf1("%cR", S2W_ESC);
   3627              S2w_Printf1 (":");
   3628              S2w_Printf1 ("%d", len);
   3629              S2w_Printf1 (":");
   3630          #endif
   3631          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3632              AppS2wHal_CharNPut(p, len);
   3633              if(s2wappMainTaskCtxt->serialDeviceId == S2W_PORT_FS_SPI)
   3634              {
   3635              	s2wSpiFs_Flush();
   3636              }
   3637          #else
   3638              AppS2wHal_CharNPut1(p, len);
   3639                 if(s2wappMainTaskCtxt->serialDeviceId1 == S2W_PORT_FS_SPI)
   3640                 {
   3641                     s2wSpiFs_Flush1();
   3642                 }
   3643          #endif
   3644          
   3645          #ifndef S2W_DUAL_INTERFACE_SUPPORT
   3646              GsnOsal_SemRelease(&s2wSyncSemID);
   3647          #else
   3648              GsnOsal_SemRelease(&s2wSyncSemID1);
   3649          #endif
   3650          
   3651          
   3652          
   3653              InterruptEnableStatus = GsnOsal_IntrDisable();
   3654          
   3655                  /*Now free the buffer*/
   3656              GsnRingBuf_Put(&ps2wL2Dev->s2wRawBufQ, &buf);
   3657          
   3658                  /**< Reenable the interrupts */
   3659              GsnOsal_IntrEnable( InterruptEnableStatus );
   3660          
   3661          
   3662          }
   3663          
   3664          /**
   3665           * @brief Transmit the raw data to the specified L2 connection when the data
   3666           *        is completely received or when the data buffer is full.
   3667           */
   3668          PRIVATE UINT8
   3669          S2w_RawDataBufferTransmit(VOID)
   3670          {
   3671              GSN_STATUS_T status = GSN_SUCCESS;
   3672          #ifndef S2W_IP2WIFI_SUPPORT
   3673              GSN_NWIF_CTX_T *pNwIf = &s2wappMainTaskCtxt->if0.nwifCtx;
   3674          #endif
   3675              if (!dataIndex)
   3676              {
   3677                  return S2W_FAILURE;
   3678              }
   3679          
   3680          #ifndef S2W_IP2WIFI_SUPPORT
   3681              pNwIf->pL2Dev->send (
   3682                  pNwIf->pL2Dev, (GSN_ETHERNET_FRAME_T *)&dataBuffer, dataIndex);
   3683          #else
   3684              status = s2wL2Dev_Send((GSN_L2_DEV_T *)&(s2wappMainTaskCtxt->s2wL2Dev),(GSN_ETHERNET_FRAME_T *)dataBuffer, dataIndex );
   3685          #endif
   3686          
   3687              rawTotalIndex += dataIndex;
   3688              dataIndex = 0;
   3689              return (UINT8)status;
   3690          }
   3691          
   3692          #endif
   3693          
   3694          
   3695          // mac address read API
   3696          #define OTP_MAC_LEN_MASK 0x7
   3697          #define OTP_MAC_LEN 0x8

   \                                 In section .text, align 2, keep-with-next
   3698          UINT8
   3699          otpMac_Read(UINT8* mac, UINT8 id)
   3700          {
   \                     otpMac_Read:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB086             SUB      SP,SP,#+24
   \   00000006   0x4608             MOV      R0,R1
   3701              UINT8 otpGrpId, otpGrpVer;
   3702              UINT8 data[OTP_MAC_LEN] ={0},data1[OTP_MAC_LEN];
   \   00000008   0xA901             ADD      R1,SP,#+4
   \   0000000A   0x2200             MOVS     R2,#+0
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0xC10C             STM      R1!,{R2,R3}
   3703              UINT16 dataLen=0,i=0, macLen = 6;
   \   00000010   0x4611             MOV      R1,R2
   \   00000012   0x2506             MOVS     R5,#+6
   3704          
   3705          	// mac0 at F8, mac1 at F9 mac2 at FA
   3706              // read mac0
   3707              //memset(mac,0,sizeof(GSN_OTP_MM_MAC_T));
   3708              if((id == 0xF8) || (id == 0xF9) || (id == 0xFA))
   \   00000014   0x4606             MOV      R6,R0
   \   00000016   0xF8AD 0x1000      STRH     R1,[SP, #+0]
   \   0000001A   0x2EF8             CMP      R6,#+248
   \   0000001C   0xBF1C             ITT      NE 
   \   0000001E   0x2EF9             CMPNE    R6,#+249
   \   00000020   0x2EFA             CMPNE    R6,#+250
   \   00000022   0xD11B             BNE.N    ??otpMac_Read_0
   3709              {
   3710                  otpGrpVer =0;
   3711                  otpGrpId = id;
   3712                  if(GSN_SUCCESS != GsnOtpMm_Read(otpGrpId,otpGrpVer,
   3713          	                  &dataLen, data))
   \   00000024   0xAB01             ADD      R3,SP,#+4
   \   00000026   0xAA00             ADD      R2,SP,#+0
   \   00000028   0x.... 0x....      BL       GsnOtpMm_Read
   \   0000002C   0xB9B0             CBNZ.N   R0,??otpMac_Read_0
   3714                  {
   3715          	        return S2W_FAILURE;
   3716                  }
   3717                  if(dataLen ) // since mac is comming in reverse manner so reverse the string and use it
   \   0000002E   0xF8BD 0x0000      LDRH     R0,[SP, #+0]
   \   00000032   0xB188             CBZ.N    R0,??otpMac_Read_1
   3718                  {
   3719          			for(i=0;i<OTP_MAC_LEN;i++)
   \   00000034   0x2000             MOVS     R0,#+0
   3720          			{
   3721          				data1[i] = data[OTP_MAC_LEN_MASK - i];
   \                     ??otpMac_Read_2:
   \   00000036   0x4241             RSBS     R1,R0,#+0
   \   00000038   0xAA01             ADD      R2,SP,#+4
   \   0000003A   0x1889             ADDS     R1,R1,R2
   \   0000003C   0xAA03             ADD      R2,SP,#+12
   \   0000003E   0x79C9             LDRB     R1,[R1, #+7]
   \   00000040   0x5481             STRB     R1,[R0, R2]
   3722          			}
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x2808             CMP      R0,#+8
   \   00000046   0xDBF6             BLT.N    ??otpMac_Read_2
   3723                      if(id == 0xFA)macLen = 8;
   \   00000048   0x2EFA             CMP      R6,#+250
   \   0000004A   0xBF08             IT       EQ 
   \   0000004C   0x2508             MOVEQ    R5,#+8
   3724                      memcpy(mac,data1,macLen);
   \   0000004E   0x462A             MOV      R2,R5
   \   00000050   0xA903             ADD      R1,SP,#+12
   \   00000052   0x4620             MOV      R0,R4
   \   00000054   0x.... 0x....      BL       memcpy
   3725                  }
   3726          	}
   3727          	else
   3728          	{
   3729          		return S2W_FAILURE;
   3730          	}
   3731          	return S2W_SUCCESS;
   \                     ??otpMac_Read_1:
   \   00000058   0x2000             MOVS     R0,#+0
   \   0000005A   0xE000             B.N      ??otpMac_Read_3
   \                     ??otpMac_Read_0:
   \   0000005C   0x2001             MOVS     R0,#+1
   \                     ??otpMac_Read_3:
   \   0000005E   0xB006             ADD      SP,SP,#+24
   \   00000060   0xBD70             POP      {R4-R6,PC}       ;; return
   3732          }
   3733          
   3734          /**
   3735           ******************************************************************
   3736           * @ingroup S2w-Application
   3737           * @brief Process sets time. 
   3738           *   This function sets time
   3739            * @param iptime   input time
   3740           * @return None.
   3741           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3742          PUBLIC VOID
   3743          AppS2w_SetTime(ULONG64 iptime)
   3744          {
   \                     AppS2w_SetTime:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   3745              BOOL diffNegative;
   3746              GSN_SYSTEM_TIME_T currentTime, newTime, timeDifference;
   3747          
   3748          	newTime = iptime/1000;
   3749          	newTime = (newTime << 15);	  //time in ticks
   \   00000002   0xF44F 0x727A      MOV      R2,#+1000
   \   00000006   0x2300             MOVS     R3,#+0
   \   00000008   0x.... 0x....      BL       __aeabi_uldivmod
   \   0000000C   0x03CD             LSLS     R5,R1,#+15
   \   0000000E   0xEA45 0x4550      ORR      R5,R5,R0, LSR #+17
   \   00000012   0x03C4             LSLS     R4,R0,#+15
   3750          	currentTime = GsnTod_Get();
   \   00000014   0x.... 0x....      BL       GsnTod_Get
   \   00000018   0x460B             MOV      R3,R1
   \   0000001A   0x4602             MOV      R2,R0
   3751          	if (currentTime > newTime)
   \   0000001C   0x429D             CMP      R5,R3
   \   0000001E   0xD806             BHI.N    ??AppS2w_SetTime_0
   \   00000020   0xBF28             IT       CS 
   \   00000022   0x4294             CMPCS    R4,R2
   \   00000024   0xD203             BCS.N    ??AppS2w_SetTime_0
   3752          	{
   3753          		diffNegative = TRUE;
   \   00000026   0x2001             MOVS     R0,#+1
   3754          		timeDifference = currentTime - newTime;
   \   00000028   0x1B12             SUBS     R2,R2,R4
   \   0000002A   0x41AB             SBCS     R3,R3,R5
   \   0000002C   0xE003             B.N      ??AppS2w_SetTime_1
   3755          	}
   3756          	else
   3757          	{
   3758          		diffNegative = FALSE;
   \                     ??AppS2w_SetTime_0:
   \   0000002E   0x2000             MOVS     R0,#+0
   3759          		timeDifference = newTime - currentTime;
   \   00000030   0x1AA2             SUBS     R2,R4,R2
   \   00000032   0xEB65 0x0303      SBC      R3,R5,R3
   3760          	}
   3761          	GsnTod_AdjustOffset(diffNegative,timeDifference);
   \                     ??AppS2w_SetTime_1:
   \   00000036   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000003A   0x.... 0x....      B.W      GsnTod_AdjustOffset
   3762          }
   3763          /**
   3764           ******************************************************************
   3765           * @ingroup S2w-Application
   3766           * @brief Process get time. 
   3767           *   This function Get time. 
   3768           * @return  time in milliseconds
   3769           ******************************************************************/

   \                                 In section .text, align 2, keep-with-next
   3770          PUBLIC ULONG64
   3771          AppS2w_GetTime()
   3772          {
   \                     AppS2w_GetTime:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   3773          	 GSN_SYSTEM_TIME_T currentTime;
   3774          	 GSN_SYSTEM_TIME_T mSeconds=0;
   3775          	 currentTime = GsnTod_Get();
   3776          	 mSeconds= SYSTIME_TO_MSEC(currentTime);	 
   3777          	 return mSeconds;
   \   00000002   0x.... 0x....      BL       GsnTod_Get
   \   00000006   0x4602             MOV      R2,R0
   \   00000008   0x460B             MOV      R3,R1
   \   0000000A   0xF44F 0x747A      MOV      R4,#+1000
   \   0000000E   0xFBA4 0x0102      UMULL    R0,R1,R4,R2
   \   00000012   0xFB04 0x1103      MLA      R1,R4,R3,R1
   \   00000016   0x0BC0             LSRS     R0,R0,#+15
   \   00000018   0xEA40 0x4041      ORR      R0,R0,R1, LSL #+17
   \   0000001C   0x0BC9             LSRS     R1,R1,#+15
   \   0000001E   0xBD1C             POP      {R2-R4,PC}       ;; return
   3778          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable104:
   \   00000000   0x67 0x73          DC8      "gsn"
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GSDemoKit">`:
   \   00000000   0x47 0x53          DC8 "GSDemoKit"
   \              0x44 0x65    
   \              0x6D 0x6F    
   \              0x4B 0x69    
   \              0x74 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OK">`:
   \   00000000   0x4F 0x4B          DC8 "OK"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR">`:
   \   00000000   0x45 0x52          DC8 "ERROR"
   \              0x52 0x4F    
   \              0x52 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: INVALID INPUT">`:
   \   00000000   0x45 0x52          DC8 "ERROR: INVALID INPUT"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4E 0x56    
   \              0x41 0x4C    
   \              0x49 0x44    
   \              0x20 0x49    
   \              0x4E 0x50    
   \              0x55 0x54    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: SOCKET FAILURE">`:
   \   00000000   0x45 0x52          DC8 "ERROR: SOCKET FAILURE"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x53    
   \              0x4F 0x43    
   \              0x4B 0x45    
   \              0x54 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x55 0x52    
   \              0x45 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: NO CID">`:
   \   00000000   0x45 0x52          DC8 "ERROR: NO CID"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x4F 0x20    
   \              0x43 0x49    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: INVALID CID">`:
   \   00000000   0x45 0x52          DC8 "ERROR: INVALID CID"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x4E 0x56    
   \              0x41 0x4C    
   \              0x49 0x44    
   \              0x20 0x43    
   \              0x49 0x44    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: NOT SUPPORTED">`:
   \   00000000   0x45 0x52          DC8 "ERROR: NOT SUPPORTED"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x4E    
   \              0x4F 0x54    
   \              0x20 0x53    
   \              0x55 0x50    
   \              0x50 0x4F    
   \              0x52 0x54    
   \              0x45 0x44    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Serial2Wifi">`:
   \   00000000   0x53 0x65          DC8 "Serial2Wifi"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x66    
   \              0x69 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "GSDemo123">`:
   \   00000000   0x47 0x53          DC8 "GSDemo123"
   \              0x44 0x65    
   \              0x6D 0x6F    
   \              0x31 0x32    
   \              0x33 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "1234567890">`:
   \   00000000   0x31 0x32          DC8 "1234567890"
   \              0x33 0x34    
   \              0x35 0x36    
   \              0x37 0x38    
   \              0x39 0x30    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCONNECT %x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012CONNECT %x\015\012"
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDISCONNECT %x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012DISCONNECT %x\015\012"
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DISASSOCIATED">`:
   \   00000000   0x44 0x49          DC8 "DISASSOCIATED"
   \              0x53 0x41    
   \              0x53 0x53    
   \              0x4F 0x43    
   \              0x49 0x41    
   \              0x54 0x45    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDisassociation Event\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Disassociation Event\015\012"
   \              0x44 0x69    
   \              0x73 0x61    
   \              0x73 0x73    
   \              0x6F 0x63    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x45    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rOut of StandBy-Timer\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Out of StandBy-Timer\015\012"
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x6E 0x64    
   \              0x42 0x79    
   \              0x2D 0x54    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rOut of StandBy-Alarm\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Out of StandBy-Alarm\015\012"
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x6E 0x64    
   \              0x42 0x79    
   \              0x2D 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nOut of Deep Sleep\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Out of Deep Sleep\015\012"
   \              0x4F 0x75    
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x44    
   \              0x65 0x65    
   \              0x70 0x20    
   \              0x53 0x6C    
   \              0x65 0x65    
   \              0x70 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nUnExpected Warm Boo...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012UnExpected Warm Boot(Possibly Low Battery)\015\012"
   \              0x55 0x6E    
   \              0x45 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x57    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x28 0x50    
   \              0x6F 0x73    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x79 0x20    
   \              0x4C 0x6F    
   \              0x77 0x20    
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x29    
   \              0x0D 0x0A    
   \              0x00         
   \   0000002F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ERROR: IP CONFIG FAIL">`:
   \   00000000   0x45 0x52          DC8 "ERROR: IP CONFIG FAIL"
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x49    
   \              0x50 0x20    
   \              0x43 0x4F    
   \              0x4E 0x46    
   \              0x49 0x47    
   \              0x20 0x46    
   \              0x41 0x49    
   \              0x4C 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Serial2WiFi APP">`:
   \   00000000   0x53 0x65          DC8 "Serial2WiFi APP"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x46    
   \              0x69 0x20    
   \              0x41 0x50    
   \              0x50 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Serial2WiFi APP-Ext.PA">`:
   \   00000000   0x53 0x65          DC8 "Serial2WiFi APP-Ext.PA"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x46    
   \              0x69 0x20    
   \              0x41 0x50    
   \              0x50 0x2D    
   \              0x45 0x78    
   \              0x74 0x2E    
   \              0x50 0x41    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NWCONN-SUCCESS">`:
   \   00000000   0x4E 0x57          DC8 "NWCONN-SUCCESS"
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x2D 0x53    
   \              0x55 0x43    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IP CONFIG-NEW IP">`:
   \   00000000   0x49 0x50          DC8 "IP CONFIG-NEW IP"
   \              0x20 0x43    
   \              0x4F 0x4E    
   \              0x46 0x49    
   \              0x47 0x2D    
   \              0x4E 0x45    
   \              0x57 0x20    
   \              0x49 0x50    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rAPP Reset-Wlan-Wd\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015APP Reset-Wlan-Wd\015\012"
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x2D 0x57    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rAPP Reset-App-Wd\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015APP Reset-App-Wd\015\012"
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x41 0x70    
   \              0x70 0x2D    
   \              0x57 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rAPP Reset-Wlan SW R...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015APP Reset-Wlan SW Reset\015\012"
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x20 0x53    
   \              0x57 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset-APP SW Reset">`:
   \   00000000   0x41 0x50          DC8 "APP Reset-APP SW Reset"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x53 0x57    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rAPP Reset-Wlan Exce...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015APP Reset-Wlan Except\015\012"
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x20 0x45    
   \              0x78 0x63    
   \              0x65 0x70    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset External Fl...">`:
   \   00000000   0x41 0x50          DC8 "APP Reset External Flash FW-UP-SUCCESS"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x45 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x46    
   \              0x6C 0x61    
   \              0x73 0x68    
   \              0x20 0x46    
   \              0x57 0x2D    
   \              0x55 0x50    
   \              0x2D 0x53    
   \              0x55 0x43    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rSerial2WiFi APP Unk...">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Serial2WiFi APP Unknown boot\015\012"
   \              0x53 0x65    
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x46    
   \              0x69 0x20    
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x55 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\nExternal Reset Boot\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012External Reset Boot\015\012"
   \              0x45 0x78    
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\nHW Crypto Boot\\r\\n">`:
   \   00000000   0x0A 0x0A          DC8 "\012\012HW Crypto Boot\015\012"
   \              0x48 0x57    
   \              0x20 0x43    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x6F 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rJTAG Reset Boot\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015JTAG Reset Boot\015\012"
   \              0x4A 0x54    
   \              0x41 0x47    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rBrownout Reset Boot\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015Brownout Reset Boot\015\012"
   \              0x42 0x72    
   \              0x6F 0x77    
   \              0x6E 0x6F    
   \              0x75 0x74    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\n\\rIP Conflict Detected\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015IP Conflict Detected\015\012"
   \              0x49 0x50    
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x66 0x6C    
   \              0x69 0x63    
   \              0x74 0x20    
   \              0x44 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Registration Failed ...">`:
   \   00000000   0x20 0x52          DC8 " Registration Failed for RR: "
   \              0x65 0x67    
   \              0x69 0x73    
   \              0x74 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x65 0x64    
   \              0x20 0x66    
   \              0x6F 0x72    
   \              0x20 0x52    
   \              0x52 0x3A    
   \              0x20 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant " Registration Success...">`:
   \   00000000   0x20 0x52          DC8 " Registration Success!! for RR: "
   \              0x65 0x67    
   \              0x69 0x73    
   \              0x74 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x20    
   \              0x53 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x21    
   \              0x21 0x20    
   \              0x66 0x6F    
   \              0x72 0x20    
   \              0x52 0x52    
   \              0x3A 0x20    
   \              0x00         
   \   00000021   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DISCONNECT">`:
   \   00000000   0x44 0x49          DC8 "DISCONNECT"
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Disassociation Event">`:
   \   00000000   0x44 0x69          DC8 "Disassociation Event"
   \              0x73 0x61    
   \              0x73 0x73    
   \              0x6F 0x63    
   \              0x69 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x45    
   \              0x76 0x65    
   \              0x6E 0x74    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Out of StandBy-Timer">`:
   \   00000000   0x4F 0x75          DC8 "Out of StandBy-Timer"
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x6E 0x64    
   \              0x42 0x79    
   \              0x2D 0x54    
   \              0x69 0x6D    
   \              0x65 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Out of StandBy-Alarm">`:
   \   00000000   0x4F 0x75          DC8 "Out of StandBy-Alarm"
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x6E 0x64    
   \              0x42 0x79    
   \              0x2D 0x41    
   \              0x6C 0x61    
   \              0x72 0x6D    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Out of Deep Sleep">`:
   \   00000000   0x4F 0x75          DC8 "Out of Deep Sleep"
   \              0x74 0x20    
   \              0x6F 0x66    
   \              0x20 0x44    
   \              0x65 0x65    
   \              0x70 0x20    
   \              0x53 0x6C    
   \              0x65 0x65    
   \              0x70 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UnExpected Warm Boot(...">`:
   \   00000000   0x55 0x6E          DC8 "UnExpected Warm Boot(Possibly Low Battery)"
   \              0x45 0x78    
   \              0x70 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x20 0x57    
   \              0x61 0x72    
   \              0x6D 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x28 0x50    
   \              0x6F 0x73    
   \              0x73 0x69    
   \              0x62 0x6C    
   \              0x79 0x20    
   \              0x4C 0x6F    
   \              0x77 0x20    
   \              0x42 0x61    
   \              0x74 0x74    
   \              0x65 0x72    
   \              0x79 0x29    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset-Wlan-Wd">`:
   \   00000000   0x41 0x50          DC8 "APP Reset-Wlan-Wd"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x2D 0x57    
   \              0x64 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset-App-Wd">`:
   \   00000000   0x41 0x50          DC8 "APP Reset-App-Wd"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x41 0x70    
   \              0x70 0x2D    
   \              0x57 0x64    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset-Wlan SW Reset">`:
   \   00000000   0x41 0x50          DC8 "APP Reset-Wlan SW Reset"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x20 0x53    
   \              0x57 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "APP Reset-Wlan Except">`:
   \   00000000   0x41 0x50          DC8 "APP Reset-Wlan Except"
   \              0x50 0x20    
   \              0x52 0x65    
   \              0x73 0x65    
   \              0x74 0x2D    
   \              0x57 0x6C    
   \              0x61 0x6E    
   \              0x20 0x45    
   \              0x78 0x63    
   \              0x65 0x70    
   \              0x74 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Serial2WiFi APP Unkno...">`:
   \   00000000   0x53 0x65          DC8 "Serial2WiFi APP Unknown boot"
   \              0x72 0x69    
   \              0x61 0x6C    
   \              0x32 0x57    
   \              0x69 0x46    
   \              0x69 0x20    
   \              0x41 0x50    
   \              0x50 0x20    
   \              0x55 0x6E    
   \              0x6B 0x6E    
   \              0x6F 0x77    
   \              0x6E 0x20    
   \              0x62 0x6F    
   \              0x6F 0x74    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "External Reset Boot">`:
   \   00000000   0x45 0x78          DC8 "External Reset Boot"
   \              0x74 0x65    
   \              0x72 0x6E    
   \              0x61 0x6C    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "HW Crypto Boot">`:
   \   00000000   0x48 0x57          DC8 "HW Crypto Boot"
   \              0x20 0x43    
   \              0x72 0x79    
   \              0x70 0x74    
   \              0x6F 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "JTAG Reset Boot">`:
   \   00000000   0x4A 0x54          DC8 "JTAG Reset Boot"
   \              0x41 0x47    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "Brownout Reset Boot">`:
   \   00000000   0x42 0x72          DC8 "Brownout Reset Boot"
   \              0x6F 0x77    
   \              0x6E 0x6F    
   \              0x75 0x74    
   \              0x20 0x52    
   \              0x65 0x73    
   \              0x65 0x74    
   \              0x20 0x42    
   \              0x6F 0x6F    
   \              0x74 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IP Conflict Detected">`:
   \   00000000   0x49 0x50          DC8 "IP Conflict Detected"
   \              0x20 0x43    
   \              0x6F 0x6E    
   \              0x66 0x6C    
   \              0x69 0x63    
   \              0x74 0x20    
   \              0x44 0x65    
   \              0x74 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "config.gainspan\\000">`:
   \   00000000   0x63 0x6F          DC8 63H, 6FH, 6EH, 66H, 69H, 67H, 2EH, 67H
   \              0x6E 0x66    
   \              0x69 0x67    
   \              0x2E 0x67    
   \   00000008   0x61 0x69          DC8 61H, 69H, 6EH, 73H, 70H, 61H, 6EH, 0
   \              0x6E 0x73    
   \              0x70 0x61    
   \              0x6E 0x00    
   \   00000010   0x00               DC8 0
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "admin">`:
   \   00000000   0x61 0x64          DC8 "admin"
   \              0x6D 0x69    
   \              0x6E 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c">`:
   \   00000000   0x25 0x63          DC8 "%c%c"
   \              0x25 0x63    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%cOK">`:
   \   00000000   0x25 0x63          DC8 "%cOK"
   \              0x4F 0x4B    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%s%s\\r\\n">`:
   \   00000000   0x25 0x73          DC8 "%s%s\015\012"
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\n\\r%s\\r\\n">`:
   \   00000000   0x0A 0x0D          DC8 "\012\015%s\015\012"
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nERROR: SOCKET FAILU...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012ERROR: SOCKET FAILURE %x\015\012"
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x53    
   \              0x4F 0x43    
   \              0x4B 0x45    
   \              0x54 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%s\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%s\015\012"
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%d %x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%d %x\015\012"
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%d">`:
   \   00000000   0x25 0x63          DC8 "%c%d"
   \              0x25 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%d\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%d\015\012"
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %x %x %d.%d.%d.%d %d\\r\\n">`:
   \   00000000   0x20 0x25          DC8 " %x %x %d.%d.%d.%d %d\015\012"
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "CONNECT">`:
   \   00000000   0x43 0x4F          DC8 "CONNECT"
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCONNECT">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012CONNECT"
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%x"
   \              0x25 0x78    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_1:
   \   00000000   0x........         DC32     ??buf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_2:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_3:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_4:
   \   00000000   0x25 0x63          DC8      "%cE"
   \              0x45 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_5:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_6:
   \   00000000   0x41010004         DC32     0x41010004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_7:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_8:
   \   00000000   0x0101A8C0         DC32     0x101a8c0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_9:
   \   00000000   0xC0A80163         DC32     0xc0a80163

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_10:
   \   00000000   0xC0A80101         DC32     0xc0a80101

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_11:
   \   00000000   0xC0A8F002         DC32     0xc0a8f002

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_12:
   \   00000000   0xC0A8F001         DC32     0xc0a8f001

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable114_13:
   \   00000000   0x80510100         DC32     0x80510100

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%cu%x%d.%d.%d.%d %d\\t">`:
   \   00000000   0x25 0x63          DC8 "%cu%x%d.%d.%d.%d %d\t"
   \              0x75 0x25    
   \              0x78 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x64 0x09    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%cy%x%d.%d.%d.%d %d\\t">`:
   \   00000000   0x25 0x63          DC8 "%cy%x%d.%d.%d.%d %d\t"
   \              0x79 0x25    
   \              0x78 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x64 0x09    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%cS%x">`:
   \   00000000   0x25 0x63          DC8 "%cS%x"
   \              0x53 0x25    
   \              0x78 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%cZ%x">`:
   \   00000000   0x25 0x63          DC8 "%cZ%x"
   \              0x5A 0x25    
   \              0x78 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%04d">`:
   \   00000000   0x25 0x30          DC8 "%04d"
   \              0x34 0x64    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nTS:%x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012TS:%x"
   \              0x54 0x53    
   \              0x3A 0x25    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120:
   \   00000000   0x........         DC32     dhcpServerFlags

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable120_1:
   \   00000000   0x........         DC32     dhcpSrvr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable121:
   \   00000000   0x........         DC32     S2wL3Wait

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable122:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_1:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_2:
   \   00000000   0x........         DC32     `?<Constant "%02x%s">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable127_3:
   \   00000000   0x........         DC32     `?<Constant "%02x%d">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   0x........         DC32     s2wCidList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable130:
   \   00000000   0x........         DC32     s2wCurrent+0x1B0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_1:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_2:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_3:
   \   00000000   0x........         DC32     dataBuffer

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_4:
   \   00000000   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_5:
   \   00000000   0x........         DC32     s2wPingStarted

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_6:
   \   00000000   0x........         DC32     dataBuffer+0x1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132_7:
   \   00000000   0x........         DC32     S2W_UnassocDataIndCB

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0xF109 0x003C      ADD      R0,R9,#+60
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_1:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_2:
   \   00000000   0x........         DC32     rawLenBuff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_3:
   \   00000000   0x41010004         DC32     0x41010004

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_4:
   \   00000000   0x........         DC32     AppS2w_AcTimeoutHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_5:
   \   00000000   0x........         DC32     AppS2w_AcNcmTimeoutHandler

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_6:
   \   00000000   0x........         DC32     profile_params

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_7:
   \   00000000   0x........         DC32     ??buf_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_8:
   \   00000000   0x........         DC32     s2wState

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_9:
   \   00000000   0x........         DC32     s2wappMainTaskNotifier

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_10:
   \   00000000   0x........         DC32     S2W_AsyncStatusList

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_11:
   \   00000000   0x........         DC32     s2wappMainTaskCtxt

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_12:
   \   00000000   0x........         DC32     s2wSyncSemID

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_13:
   \   00000000   0x41010159         DC32     0x41010159

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_14:
   \   00000000   0x41010138         DC32     0x41010138

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_15:
   \   00000000   0x........         DC32     current_wlan_info

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_16:
   \   00000000   0x........         DC32     AppS2w_ClkCalibCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_17:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_18:
   \   00000000   0x........         DC32     s2wCurrent

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_19:
   \   00000000   0x........         DC32     ncmautoconnectcount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable136_20:
   \   00000000   0x........         DC32     s2wAutoExit_CB

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c%x">`:
   \   00000000   0x25 0x63          DC8 "%c%c%x"
   \              0x25 0x63    
   \              0x25 0x78    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%s">`:
   \   00000000   0x25 0x30          DC8 "%02x%s"
   \              0x32 0x78    
   \              0x25 0x73    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%d">`:
   \   00000000   0x25 0x30          DC8 "%02x%d"
   \              0x32 0x78    
   \              0x25 0x64    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "gsn">`:
   \   00000000   0x67 0x73          DC8 "gsn"
   \              0x6E 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%cE">`:
   \   00000000   0x25 0x63          DC8 "%cE"
   \              0x45 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x">`:
   \   00000000   0x25 0x78          DC8 "%x"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {43, 43, 43, 43}>`:
   \   00000000   0x2B 0x2B          DC8 43, 43, 43, 43
   \              0x2B 0x2B    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%c%c%x%x">`:
   \   00000000   0x25 0x63          DC8 "%c%c%x%x"
   \              0x25 0x63    
   \              0x25 0x78    
   \              0x25 0x78    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02xDISCONNECT %x\\r\\n">`:
   \   00000000   0x25 0x30          DC8 "%02xDISCONNECT %x\015\012"
   \              0x32 0x78    
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02xERROR: SOCKET FAI...">`:
   \   00000000   0x25 0x30          DC8 "%02xERROR: SOCKET FAILURE %x\015\012"
   \              0x32 0x78    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x3A    
   \              0x20 0x53    
   \              0x4F 0x43    
   \              0x4B 0x45    
   \              0x54 0x20    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x55 0x52    
   \              0x45 0x20    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%s%s\\r\\n">`:
   \   00000000   0x25 0x30          DC8 "%02x%s%s\015\012"
   \              0x32 0x78    
   \              0x25 0x73    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%s\\r\\n">`:
   \   00000000   0x25 0x30          DC8 "%02x%s\015\012"
   \              0x32 0x78    
   \              0x25 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%d %x\\r\\n">`:
   \   00000000   0x25 0x30          DC8 "%02x%d %x\015\012"
   \              0x32 0x78    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x%x\\r\\n">`:
   \   00000000   0x25 0x30          DC8 "%02x%x\015\012"
   \              0x32 0x78    
   \              0x25 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d,%d,%d">`:
   \   00000000   0x25 0x64          DC8 "%d,%d,%d"
   \              0x2C 0x25    
   \              0x64 0x2C    
   \              0x25 0x64    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%d,%d">`:
   \   00000000   0x25 0x64          DC8 "%d,%d"
   \              0x2C 0x25    
   \              0x64 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %x\\r\\n">`:
   \   00000000   0x20 0x25          DC8 " %x\015\012"
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000006   0x00 0x00          DC8 0, 0
   3779          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   AppS2wProcess_AsyncStatusNotify
        32   -> S2w_AsyncMsgGpioOp
        32   -> S2w_Printf
        32   -> s2wSpiFs_Flush
        32   -> sprintf
        32   -> strlen
      24   AppS2wProcess_AutoConnectStart
        24   -> AppS2wCmd_NcmAuto
        24   -> sprintf
      24   AppS2wProcess_AutoConnectStop
        24   -> AppS2wCmd_NcmAuto
        24   -> sprintf
      40   AppS2wProcess_AutoStart
        40   -> AppS2wCmd_NcmAuto
        40   -> AppS2w_NwConnRestore
        40   -> GsnSoftTmr_Start
        40   -> sprintf
      48   AppS2wProcess_DefaulConfigtLoad
        48   -> S2w_macAddrRTCSet
        48   -> memcpy
        48   -> memset
        48   -> otpMac_Read
      16   AppS2wProcess_DhcpFailNotify
        16   -> AppS2wHal_NetCloseAll
        16   -> AppS2wProcess_AsyncStatusNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> AppS2w_ExitDpSleep
        16   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
      16   AppS2wProcess_DhcpIpChangeNotify
        16   -> AppS2wHal_NetCloseAll
        16   -> AppS2wHdrAndIpv4_Print
        16   -> AppS2wProcess_AsyncStatusNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> AppS2w_ExitDpSleep
        16   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        16   -> S2w_Printf
        16   -> s2wSpiFs_Flush
       0   AppS2wProcess_DhcpStop
         0   -> GsnNwIf_DhcpStop
      16   AppS2wProcess_EventNotify
        16   -> AppS2wHal_Disassociate
        16   -> AppS2wHal_HttpdClose
        16   -> AppS2wHal_NetCloseAll
        16   -> AppS2wProcess_AsyncStatusNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> DHCP_notify
        16   -> GsnDhcpSrvr_Stop
        16   -> GsnNwIf_Close
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
      16   AppS2wProcess_IpConflict
        16   -> AppS2wHal_NetworkConfig
        16   -> AppS2wProcess_AsyncStatusNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> _nxe_arp_gratuitous_send
      16   AppS2wProcess_LoadProfile
        16   -> AppS2wHal_NetCloseAll
         0   -> AppS2wHal_NetworkConfig
        16   -> memcpy
      48   AppS2wProcess_NcmAutoConnectL4Connect
        48   -> AppS2wHal_NetTcpClient
        48   -> AppS2wHal_NetTcpServer
        48   -> AppS2wHal_NetUdpClient
        48   -> AppS2wHal_NetUdpServer
        48   -> AppS2wHal_TimerStart
        48   -> AppS2wHal_TimerStop
        48   -> AppS2wProcess_AsyncStatusNotify
        48   -> AppS2wProcess_StatusNotify
        48   -> GsnGpio_Init
        48   -> GsnGpio_IntCbRegister
        48   -> GsnGpio_NEIntDisable_Patch
        48   -> GsnGpio_NEIntEnable
        48   -> GsnNwIf_DnsHostByNameGet
        48   -> GsnOsal_SemAcquire
        48   -> GsnOsal_SemRelease
        48   -> GsnSq_TaskMonitorDeregister
        48   -> GsnSq_TaskMonitorRegister
        48   -> GsnSq_TaskMonitorStart
        48   -> GsnSq_TaskMonitorStop
        48   -> S2w_AsyncMsgGpioInit
        48   -> S2w_AsyncMsgGpioOp
        48   -> S2w_Printf
        48   -> nx_dns_retry_count_set
     112   AppS2wProcess_NetAccept
       112   -> GsnGpio_Init
       112   -> GsnGpio_IntCbRegister
       112   -> GsnGpio_NEIntEnable
       112   -> GsnOsal_SemAcquire
       112   -> GsnOsal_SemRelease
       112   -> S2w_AsyncMsgGpioInit
       112   -> S2w_AsyncMsgGpioOp
       112   -> S2w_Printf
       112   -> s2wSpiFs_Flush
       112   -> sprintf
      56   AppS2wProcess_NetRx
        56   -> AppS2wHal_CharNPut
        56   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        56   -> S2w_Printf
        56   -> memcpy
         0   -> s2wSpiFs_Flush
        56   -> s2wSpiFs_Flush
      72   AppS2wProcess_SerialInput
        72   -> AppS2wCertificateData
        72   -> AppS2wExternalFlashData
        72   -> AppS2wHal_CharGet
        72   -> AppS2wHal_CharNGet
        72   -> AppS2wHal_CoapContentDataGet
        72   -> AppS2wHal_NetClose
        72   -> AppS2wHal_PingClose
        72   -> AppS2wHal_RawhttpContentGet
        72   -> AppS2wHal_TimerStart
        72   -> AppS2wHal_TimerStop
        72   -> AppS2wHal_httpContentDataGet
        72   -> AppS2wParse_Int
        72   -> AppS2wProcess_StatusNotify
        72   -> AppS2w_CidValidate
        72   -> AppS2w_CommandCharProcess
        72   -> AppS2w_DataBufferTransmit
        72   -> AppS2w_DataCharProcess
        72   -> AppS2w_DataTransmit
        72   -> AppS2w_FailEscParse
        72   -> AppS2w_XmlDataProcess
        72   -> GsnOsal_SemAcquire
        72   -> GsnOsal_SemRelease
        72   -> GsnSoftTmr_Stop
        72   -> GsnTaskSleep
        72   -> GsnWdd_UAMDataRxConfig
        72   -> GsnWdd_UAMStart
        72   -> GsnWdd_UAMStop
        72   -> GsnWdd_UamCcaConfigSet
        72   -> GsnWdd_UamDataSend_Patch
        72   -> S2w_Printf
        72   -> S2w_PutChar
        72   -> atol
        72   -> isdigit
        72   -> s2wSpiFs_Flush
        72   -> s2wUamRx_Init
      32   AppS2wProcess_StatusNotify
        32   -> AppS2wHal_NetCloseAll
        32   -> S2w_Printf
         0   -> s2wSpiFs_Flush
      16   AppS2wRoam_SatusNotify
        16   -> AppS2wHdrAndIpv4_Print
        16   -> AppS2wProcess_AsyncStatusNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> S2wUart_TxStatusGet
       0   AppS2w_AcNcmTimeoutHandler
         0   -- Indirect call
       0   AppS2w_AcTimeoutHandler
      24   AppS2w_AutoEscTimeout
        24   -- Indirect call
        24   -> AppS2wHal_TimerStop
        24   -> AppS2w_DataCharProcess
        24   -> GsnGpio_NEIntDisable_Patch
        24   -> S2w_AsyncMsgGpioOp
       8   AppS2w_CidValidate
         8   -> AppS2wHal_NetIsCidOpen
      24   AppS2w_CommandCharProcess
        24   -> AppMainCtx_TaskNotify
         0   -> AppS2wCommand_Process
        24   -> AppS2wCommand_Process
        24   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        24   -> S2w_Printf
        24   -> memcpy
         0   -> memset
        24   -> strcpy
        24   -> toupper
      16   AppS2w_DataBufferTransmit
        16   -> AppS2wHal_NetTx
      24   AppS2w_DataCharProcess
        24   -> AppS2wHal_TimerStart
        24   -> AppS2wHal_TimerStop
        24   -> AppS2wProcess_StatusNotify
        24   -> AppS2w_DataBufferTransmit
        24   -> GsnOsal_SemAcquire
         0   -> GsnOsal_SemRelease
        24   -> GsnOsal_SemRelease
      16   AppS2w_DataTransmit
        16   -> AppS2wHal_NetTx
       0   AppS2w_DeepSleepHandler
         0   -> AppS2wProcess_AsyncStatusNotify
         0   -> AppS2wProcess_StatusNotify
      16   AppS2w_FailEscParse
        16   -> AppMainCtx_TaskNotify
        16   -> AppS2wProcess_StatusNotify
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
      16   AppS2w_GetTime
        16   -> GsnTod_Get
       8   AppS2w_Init
         8   -> AppS2wHal_NetInit
         8   -> AppS2wHal_TimerInit
         8   -> AppS2wProcess_LoadProfile
         8   -> _tx_semaphore_create
       0   AppS2w_NagleExpiry
         0   -- Indirect call
      16   AppS2w_NwConnRestore
        16   -> memcpy
       8   AppS2w_ProfileInit
         8   -> AppS2wHal_FlashRead
         8   -> AppS2wHal_RTCRead
         0   -> memcpy
      16   AppS2w_SetTime
         0   -> GsnTod_AdjustOffset
        16   -> GsnTod_Get
        16   -> __aeabi_uldivmod
      32   AppS2w_SetWlanDfltParams
        32   -> AppS2wHal_Disassociate
        32   -> AppS2wHal_IeeePSConfig
        32   -> AppS2wHal_MacAddrSet
        32   -> AppS2wHal_McastRecvSet
        32   -> AppS2wHal_PowerSaveConfig
        32   -> AppS2wHal_PowerSaveConfigSet
        32   -> AppS2wHal_PsPollIntervelset
        32   -> AppS2wHal_RadioModeConfig
        32   -> GsnWdd_ScanParamSet
        32   -> GsnWdd_TxNumRetrySet
        32   -> GsnWdd_TxPowerSet
        32   -> S2w_macAddrRTCGet
        32   -> memcpy
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      24   S2w_Printf
        24   -> AppS2wHal_CharNPut
        24   -> vsnprintf
       0   isdigit
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset
      40   otpMac_Read
        40   -> GsnOtpMm_Read
        40   -> memcpy
       8   s2wAutoExit_CB
         8   -- Indirect call
         8   -> AppS2wHal_TimerStop
         8   -> GsnGpio_NEIntDisable_Patch
         0   -> S2w_AsyncMsgGpioOp


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      24  ?<Constant " %x %x %d.%d.%d.%d %d\r\n">
       8  ?<Constant " %x\r\n">
      32  ?<Constant " Registration Failed ...">
      36  ?<Constant " Registration Success...">
      12  ?<Constant "%02x%d %x\r\n">
       8  ?<Constant "%02x%d">
       8  ?<Constant "%02x%s">
      12  ?<Constant "%02x%s%s\r\n">
      12  ?<Constant "%02x%s\r\n">
      12  ?<Constant "%02x%x\r\n">
      20  ?<Constant "%02xDISCONNECT %x\r\n">
      32  ?<Constant "%02xERROR: SOCKET FAI...">
       8  ?<Constant "%04d">
       8  ?<Constant "%c%c">
       8  ?<Constant "%c%c%x">
      12  ?<Constant "%c%c%x%x">
       8  ?<Constant "%c%d">
       4  ?<Constant "%cE">
       8  ?<Constant "%cOK">
       8  ?<Constant "%cS%x">
       8  ?<Constant "%cZ%x">
      24  ?<Constant "%cu%x%d.%d.%d.%d %d\t">
      24  ?<Constant "%cy%x%d.%d.%d.%d %d\t">
       8  ?<Constant "%d,%d">
      12  ?<Constant "%d,%d,%d">
       8  ?<Constant "%s%s\r\n">
       4  ?<Constant "%x">
      12  ?<Constant "1234567890">
      40  ?<Constant "APP Reset External Fl...">
      24  ?<Constant "APP Reset-APP SW Reset">
      20  ?<Constant "APP Reset-App-Wd">
      24  ?<Constant "APP Reset-Wlan Except">
      24  ?<Constant "APP Reset-Wlan SW Reset">
      20  ?<Constant "APP Reset-Wlan-Wd">
      20  ?<Constant "Brownout Reset Boot">
       8  ?<Constant "CONNECT">
      16  ?<Constant "DISASSOCIATED">
      12  ?<Constant "DISCONNECT">
      24  ?<Constant "Disassociation Event">
       8  ?<Constant "ERROR">
      20  ?<Constant "ERROR: INVALID CID">
      24  ?<Constant "ERROR: INVALID INPUT">
      24  ?<Constant "ERROR: IP CONFIG FAIL">
      16  ?<Constant "ERROR: NO CID">
      24  ?<Constant "ERROR: NOT SUPPORTED">
      24  ?<Constant "ERROR: SOCKET FAILURE">
      20  ?<Constant "External Reset Boot">
      12  ?<Constant "GSDemo123">
      12  ?<Constant "GSDemoKit">
      16  ?<Constant "HW Crypto Boot">
      20  ?<Constant "IP CONFIG-NEW IP">
      24  ?<Constant "IP Conflict Detected">
      16  ?<Constant "JTAG Reset Boot">
      16  ?<Constant "NWCONN-SUCCESS">
       4  ?<Constant "OK">
      20  ?<Constant "Out of Deep Sleep">
      24  ?<Constant "Out of StandBy-Alarm">
      24  ?<Constant "Out of StandBy-Timer">
      32  ?<Constant "Serial2WiFi APP Unkno...">
      16  ?<Constant "Serial2WiFi APP">
      24  ?<Constant "Serial2WiFi APP-Ext.PA">
      12  ?<Constant "Serial2Wifi">
      44  ?<Constant "UnExpected Warm Boot(...">
      20  ?<Constant "\n\nHW Crypto Boot\r\n">
       8  ?<Constant "\n\r%s\r\n">
      24  ?<Constant "\n\rAPP Reset-App-Wd\r\n">
      28  ?<Constant "\n\rAPP Reset-Wlan Exce...">
      28  ?<Constant "\n\rAPP Reset-Wlan SW R...">
      24  ?<Constant "\n\rAPP Reset-Wlan-Wd\r\n">
      24  ?<Constant "\n\rBrownout Reset Boot\r\n">
      28  ?<Constant "\n\rIP Conflict Detected\r\n">
      20  ?<Constant "\n\rJTAG Reset Boot\r\n">
      28  ?<Constant "\n\rOut of StandBy-Alarm\r\n">
      28  ?<Constant "\n\rOut of StandBy-Timer\r\n">
      36  ?<Constant "\n\rSerial2WiFi APP Unk...">
       4  ?<Constant "\r\n">
      12  ?<Constant "\r\n%d %x\r\n">
       8  ?<Constant "\r\n%d\r\n">
       8  ?<Constant "\r\n%s\r\n">
       8  ?<Constant "\r\n%x">
      16  ?<Constant "\r\nCONNECT %x\r\n">
      12  ?<Constant "\r\nCONNECT">
      20  ?<Constant "\r\nDISCONNECT %x\r\n">
      28  ?<Constant "\r\nDisassociation Event\r\n">
      32  ?<Constant "\r\nERROR: SOCKET FAILU...">
      24  ?<Constant "\r\nExternal Reset Boot\r\n">
      24  ?<Constant "\r\nOut of Deep Sleep\r\n">
       8  ?<Constant "\r\nTS:%x">
      48  ?<Constant "\r\nUnExpected Warm Boo...">
       8  ?<Constant "admin">
      20  ?<Constant "config.gainspan\000">
       4  ?<Constant "gsn">
       8  ?<Constant {0}>
       8  ?<Constant {0}>_1
       4  ?<Constant {43, 43, 43, 43}>
       4  ??DataTable104
       4  ??DataTable114
       4  ??DataTable114_1
       4  ??DataTable114_10
       4  ??DataTable114_11
       4  ??DataTable114_12
       4  ??DataTable114_13
       4  ??DataTable114_2
       4  ??DataTable114_3
       4  ??DataTable114_4
       4  ??DataTable114_5
       4  ??DataTable114_6
       4  ??DataTable114_7
       4  ??DataTable114_8
       4  ??DataTable114_9
       4  ??DataTable120
       4  ??DataTable120_1
       4  ??DataTable121
       4  ??DataTable122
       4  ??DataTable127
       4  ??DataTable127_1
       4  ??DataTable127_2
       4  ??DataTable127_3
       4  ??DataTable128
       4  ??DataTable130
       4  ??DataTable132
       4  ??DataTable132_1
       4  ??DataTable132_2
       4  ??DataTable132_3
       4  ??DataTable132_4
       4  ??DataTable132_5
       4  ??DataTable132_6
       4  ??DataTable132_7
       4  ??DataTable136
       4  ??DataTable136_1
       4  ??DataTable136_10
       4  ??DataTable136_11
       4  ??DataTable136_12
       4  ??DataTable136_13
       4  ??DataTable136_14
       4  ??DataTable136_15
       4  ??DataTable136_16
       4  ??DataTable136_17
       4  ??DataTable136_18
       4  ??DataTable136_19
       4  ??DataTable136_2
       4  ??DataTable136_20
       4  ??DataTable136_3
       4  ??DataTable136_4
       4  ??DataTable136_5
       4  ??DataTable136_6
       4  ??DataTable136_7
       4  ??DataTable136_8
       4  ??DataTable136_9
       6  ??Subroutine23_0
       8  ?Subroutine0
       8  ?Subroutine1
       6  ?Subroutine10
      10  ?Subroutine11
       8  ?Subroutine12
      12  ?Subroutine13
      12  ?Subroutine14
      14  ?Subroutine15
       8  ?Subroutine16
      14  ?Subroutine17
      12  ?Subroutine18
      10  ?Subroutine19
      12  ?Subroutine2
      14  ?Subroutine20
      10  ?Subroutine21
       6  ?Subroutine22
      14  ?Subroutine3
      12  ?Subroutine4
      14  ?Subroutine5
       8  ?Subroutine6
      12  ?Subroutine7
      10  ?Subroutine8
      10  ?Subroutine9
     304  AppS2wProcess_AsyncStatusNotify
      44  AppS2wProcess_AutoConnectStart
      38  AppS2wProcess_AutoConnectStop
     176  AppS2wProcess_AutoStart
     808  AppS2wProcess_DefaulConfigtLoad
      76  AppS2wProcess_DhcpFailNotify
     100  AppS2wProcess_DhcpIpChangeNotify
      14  AppS2wProcess_DhcpStop
     158  AppS2wProcess_EventNotify
      78  AppS2wProcess_IpConflict
      52  AppS2wProcess_LoadProfile
     552  AppS2wProcess_NcmAutoConnectL4Connect
     254  AppS2wProcess_NetAccept
     294  AppS2wProcess_NetRx
    1586  AppS2wProcess_SerialInput
     356  AppS2wProcess_StatusNotify
      66  AppS2wRoam_SatusNotify
      16  AppS2w_AcNcmTimeoutHandler
       2  AppS2w_AcTimeoutHandler
      82  AppS2w_AutoEscTimeout
      64  AppS2w_CidValidate
     216  AppS2w_CommandCharProcess
      40  AppS2w_DataBufferTransmit
     150  AppS2w_DataCharProcess
      38  AppS2w_DataTransmit
      36  AppS2w_DeepSleepHandler
      58  AppS2w_FailEscParse
      32  AppS2w_GetTime
      94  AppS2w_Init
      12  AppS2w_NagleExpiry
      90  AppS2w_NwConnRestore
      56  AppS2w_ProfileInit
      62  AppS2w_SetTime
     214  AppS2w_SetWlanDfltParams
      18  GsnOsal_SemAcquire
      18  GsnOsal_SemRelease
     112  S2W_AsyncStatusList
       8  S2W_DEFAULT_AC_WLAN_BSSID
       8  S2W_DEFAULT_AP_MAC_ADDR
       8  S2W_DEFAULT_AP_WEP_KEY
       8  S2W_DEFAULT_STA_MAC_ADDR
       8  S2W_DEFAULT_WEP_KEY
      54  S2w_Printf
     256  buf
    1028  buf
          index
          prevBuf
    1400  dataBuffer
      10  isdigit
      12  memcpy
      20  memset
      98  otpMac_Read
      20  rawLenBuff
      40  s2wAutoExit_CB
       1  s2wNRAWState
     448  s2wState
          s2wLinkState
          hCid
          s2wIsAutoconnected
          s2wAutoConnState
          curCid
          lengthConvertIndex
          auto_esc
          ipnum
          digits
          prev
          prevprev
          destAddr
          esc
          atoibuf
          lengthSpecialCmd
          destPort
          s2wTxBytes
          s2wRxBytes
          s2wFlashParams
          dataIndex
          rawLenIndex
          rawLen
          S2W_StatusList
          dSendSem
          nagleTimer
          auto_esc_timer
          acTimer
          acNcmTimer

 
 1 285 bytes in section .bss
   560 bytes in section .data
 1 420 bytes in section .noinit
 1 212 bytes in section .rodata
 7 470 bytes in section .text
 
 7 392 bytes of CODE  memory (+ 78 bytes shared)
 1 212 bytes of CONST memory
 3 265 bytes of DATA  memory

Errors: none
Warnings: none
