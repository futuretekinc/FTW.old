###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  15:23:32 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\mqtt_log\mqtt_log.c                       #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\mqtt_log\mqtt_log.c -D                    #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_log\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_log\ -Ohz --use_c++_inline  #
#                    -I "C:\Program Files (x86)\IAR Systems\Embedded          #
#                    Workbench 6.5\arm\CMSIS\Include\"                        #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\mqtt_log.lst                 #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\mqtt_log.o                    #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\mqtt_log\mqtt_log.c
      1          #include "mqtt_log/mqtt_log.h"
      2          

   \                                 In section .text, align 2, keep-with-next
      3          VOID MQTT_MESSAGE_QUEUE_LOG(UINT8 status)
      4          {
      5            	if( status == TX_SUCCESS)
   \                     MQTT_MESSAGE_QUEUE_LOG:
   \   00000000   0xB910             CBNZ.N   R0,??MQTT_MESSAGE_QUEUE_LOG_0
      6            	{
      7          	 	//Successful retrieval of message.
      8          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_SUCCESS");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">`
   \   00000006   0xE01E             B.N      ??MQTT_MESSAGE_QUEUE_LOG_1
      9            	}
     10            	else if( status == TX_DELETED )
   \                     ??MQTT_MESSAGE_QUEUE_LOG_0:
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_1`
     11            	{
     12          	  	//Message queue was deleted while thread was suspended.
     13          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_DELETED");
   \   00000010   0xD019             BEQ.N    ??MQTT_MESSAGE_QUEUE_LOG_1
     14            	}
     15            	else if( status == TX_QUEUE_EMPTY)
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_2`
     16            	{
     17          	  	//Service was unable to retrieve a message because the queue was empty for the duration of the specified time to wait.
     18          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_QUEUE_EMPTY");
   \   0000001A   0xD014             BEQ.N    ??MQTT_MESSAGE_QUEUE_LOG_1
     19            	}
     20            	else if(status == TX_WAIT_ABORTED )
   \   0000001C   0x281A             CMP      R0,#+26
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_3`
     21          	{
     22          	  	//Suspension was aborted by another thread, timer, or ISR.
     23          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_WAIT_ABORTED");
   \   00000024   0xD00F             BEQ.N    ??MQTT_MESSAGE_QUEUE_LOG_1
     24          	}
     25          	else if(status == TX_QUEUE_ERROR)
   \   00000026   0x2809             CMP      R0,#+9
   \   00000028   0xBF08             IT       EQ 
   \   0000002A   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_4`
     26          	{
     27          	  	//Invalid message queue pointer.
     28          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_QUEUE_ERROR");
   \   0000002E   0xD00A             BEQ.N    ??MQTT_MESSAGE_QUEUE_LOG_1
     29          	}
     30          	else if(status == TX_PTR_ERROR)
   \   00000030   0x2803             CMP      R0,#+3
   \   00000032   0xBF08             IT       EQ 
   \   00000034   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_5`
     31          	{
     32          	  	//Invalid destination pointer for message.
     33          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_PTR_ERROR");
   \   00000038   0xD005             BEQ.N    ??MQTT_MESSAGE_QUEUE_LOG_1
     34          	}
     35          	else if(status == TX_WAIT_ERROR)
   \   0000003A   0x2804             CMP      R0,#+4
   \   0000003C   0xBF0C             ITE      EQ 
   \   0000003E   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_6`
   \   00000042   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_7`
     36          	{
     37          	  	//A wait option other than TX_NO_WAIT was specified on a call from a nonthread.
     38          	  	S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_WAIT_ERROR");
     39          	}
     40          	else
     41          	  S2w_Printf("\r\n MQTT_MESSAGE_QUEUE_LOG : TX_DEFAULT_ERROR");
   \                     ??MQTT_MESSAGE_QUEUE_LOG_1:
   \   00000046   0x.... 0x....      B.W      S2w_Printf
     42          }
     43          
     44          

   \                                 In section .text, align 2, keep-with-next
     45          VOID MQTT_SEMAPHORE_LOG(UINT8 status)
     46          {
     47            if( status == TX_SUCCESS)
   \                     MQTT_SEMAPHORE_LOG:
   \   00000000   0xB910             CBNZ.N   R0,??MQTT_SEMAPHORE_LOG_0
     48            	{
     49          	 	//Successful semaphore creation.
     50          	  	S2w_Printf("\r\n MQTT_SEMAPHORE_LOG : TX_SUCCESS");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">`
   \   00000006   0xE00A             B.N      ??MQTT_SEMAPHORE_LOG_1
     51            	}
     52            	else if( status == TX_SEMAPHORE_ERROR )
   \                     ??MQTT_SEMAPHORE_LOG_0:
   \   00000008   0x280C             CMP      R0,#+12
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_1`
     53            	{
     54          	  	//Invalid semaphore pointer. Either the pointer is NULL or the semaphore is already created.
     55          	  	S2w_Printf("\r\n MQTT_SEMAPHORE_LOG : TX_SEMAPHORE_ERROR");
   \   00000010   0xD005             BEQ.N    ??MQTT_SEMAPHORE_LOG_1
     56            	}
     57            	else if( status == TX_CALLER_ERROR)
   \   00000012   0x2813             CMP      R0,#+19
   \   00000014   0xBF0C             ITE      EQ 
   \   00000016   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_2`
   \   0000001A   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_3`
     58            	{
     59          	  	//Invalid caller of this service.
     60          	  	S2w_Printf("\r\n MQTT_SEMAPHORE_LOG : TX_CALLER_ERROR");
     61            	}
     62          	else
     63          	  S2w_Printf("\r\n MQTT_SEMAPHORE_LOG : TX_DEFAULT_ERROR");
   \                     ??MQTT_SEMAPHORE_LOG_1:
   \   0000001E   0x.... 0x....      B.W      S2w_Printf
     64          }
     65          

   \                                 In section .text, align 2, keep-with-next
     66          VOID MQTT_THREAD_LOG(UINT8 status)
     67          {
     68            	if( status == TX_SUCCESS)
   \                     MQTT_THREAD_LOG:
   \   00000000   0xB910             CBNZ.N   R0,??MQTT_THREAD_LOG_0
     69            	{
     70          	 	//Successful thread creation.
     71          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_SUCCESS");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">`
   \   00000006   0xE023             B.N      ??MQTT_THREAD_LOG_1
     72            	}
     73            	else if( status == TX_THREAD_ERROR )
   \                     ??MQTT_THREAD_LOG_0:
   \   00000008   0x280E             CMP      R0,#+14
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_1`
     74            	{
     75          	  	//Invalid thread control pointer. Either the pointer is NULL or the thread is already created.
     76          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_THREAD_ERROR");
   \   00000010   0xD01E             BEQ.N    ??MQTT_THREAD_LOG_1
     77            	}
     78            	else if( status == TX_PTR_ERROR)
   \   00000012   0x2803             CMP      R0,#+3
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_2`
     79            	{
     80          	  	//Invalid starting address of the entry point or the stack area is invalid, usually NULL.
     81          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_PTR_ERROR");
   \   0000001A   0xD019             BEQ.N    ??MQTT_THREAD_LOG_1
     82            	}
     83            	else if(status == TX_SIZE_ERROR )
   \   0000001C   0x2805             CMP      R0,#+5
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_3`
     84          	{
     85          	  	//Size of stack area is invalid. Threads must have at least TX_MINIMUM_STACK bytes to execute.
     86          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_SIZE_ERROR");
   \   00000024   0xD014             BEQ.N    ??MQTT_THREAD_LOG_1
     87          	}
     88          	else if(status == TX_PRIORITY_ERROR)
   \   00000026   0x280F             CMP      R0,#+15
   \   00000028   0xBF08             IT       EQ 
   \   0000002A   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_4`
     89          	{
     90          	  	//Invalid thread priority, which is a value outside the range of (0 through (TX_MAX_PRIORITIES-1)).
     91          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_PRIORITY_ERROR");
   \   0000002E   0xD00F             BEQ.N    ??MQTT_THREAD_LOG_1
     92          	}
     93          	else if(status == TX_THRESH_ERROR)
   \   00000030   0x2818             CMP      R0,#+24
   \   00000032   0xBF08             IT       EQ 
   \   00000034   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_5`
     94          	{
     95          	  	//Invalid preemptionthreshold specified. This value must be a valid priority less than or equal to the initial priority of the thread.
     96          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_THRESH_ERROR");
   \   00000038   0xD00A             BEQ.N    ??MQTT_THREAD_LOG_1
     97          	}
     98          	else if(status == TX_START_ERROR)
   \   0000003A   0x2810             CMP      R0,#+16
   \   0000003C   0xBF08             IT       EQ 
   \   0000003E   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_6`
     99          	{
    100          	  	//Invalid auto-start selection.
    101          		S2w_Printf("\r\n MQTT_THREAD_LOG : TX_START_ERROR");
   \   00000042   0xD005             BEQ.N    ??MQTT_THREAD_LOG_1
    102          	}
    103          	else if(status == TX_CALLER_ERROR)
   \   00000044   0x2813             CMP      R0,#+19
   \   00000046   0xBF0C             ITE      EQ 
   \   00000048   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_7`
   \   0000004C   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_8`
    104          	{
    105          	  	//Invalid caller of this service.
    106          	  	S2w_Printf("\r\n MQTT_THREAD_LOG : TX_CALLER_ERROR");
    107          	}
    108          	else
    109          	  S2w_Printf("\r\n MQTT_THREAD_LOG : TX_DEFAULT_ERROR");
   \                     ??MQTT_THREAD_LOG_1:
   \   00000050   0x.... 0x....      B.W      S2w_Printf
    110          }
    111          

   \                                 In section .text, align 2, keep-with-next
    112          VOID MQTT_CONNECT_ACK_LOG(UINT8 status)
    113          {
    114            if(status == 0)
   \                     MQTT_CONNECT_ACK_LOG:
   \   00000000   0xB910             CBNZ.N   R0,??MQTT_CONNECT_ACK_LOG_0
    115          	S2w_Printf("\r\n MQTT_CONNACK_LOG : Connection Accepted");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">`
   \   00000006   0xE019             B.N      ??MQTT_CONNECT_ACK_LOG_1
    116            else if(status == 1)
   \                     ??MQTT_CONNECT_ACK_LOG_0:
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xBF08             IT       EQ 
   \   0000000C   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_1`
    117          	S2w_Printf("\r\n MQTT_CONNACK_LOG : unacceptable protocol version");
   \   00000010   0xD014             BEQ.N    ??MQTT_CONNECT_ACK_LOG_1
    118            else if(status == 2)
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xBF08             IT       EQ 
   \   00000016   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_2`
    119          	S2w_Printf("\r\n MQTT_CONNACK_LOG : identifier rejected");
   \   0000001A   0xD00F             BEQ.N    ??MQTT_CONNECT_ACK_LOG_1
    120            else if(status == 3)
   \   0000001C   0x2803             CMP      R0,#+3
   \   0000001E   0xBF08             IT       EQ 
   \   00000020   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_3`
    121          	S2w_Printf("\r\n MQTT_CONNACK_LOG : server unavailable");
   \   00000024   0xD00A             BEQ.N    ??MQTT_CONNECT_ACK_LOG_1
    122            else if(status == 4)
   \   00000026   0x2804             CMP      R0,#+4
   \   00000028   0xBF08             IT       EQ 
   \   0000002A   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_4`
    123          	S2w_Printf("\r\n MQTT_CONNACK_LOG : bad user name or password");
   \   0000002E   0xD005             BEQ.N    ??MQTT_CONNECT_ACK_LOG_1
    124            else if(status == 5)
   \   00000030   0x2805             CMP      R0,#+5
   \   00000032   0xBF0C             ITE      EQ 
   \   00000034   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_5`
   \   00000038   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_6`
    125              S2w_Printf("\r\n MQTT_CONNACK_LOG : not authorized");
    126            else
    127          	S2w_Printf("\r\n MQTT_CONNACK_LOG : Other Issue");
   \                     ??MQTT_CONNECT_ACK_LOG_1:
   \   0000003C   0x.... 0x....      B.W      S2w_Printf
    128          }

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_SUCCESS"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x53    
   \              0x55 0x43    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_DELETED"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x44    
   \              0x45 0x4C    
   \              0x45 0x54    
   \              0x45 0x44    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_2`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_QUEUE_EMPTY"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x45    
   \              0x4D 0x50    
   \              0x54 0x59    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_3`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_WAIT_ABORTED"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x57    
   \              0x41 0x49    
   \              0x54 0x5F    
   \              0x41 0x42    
   \              0x4F 0x52    
   \              0x54 0x45    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_4`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_QUEUE_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_5`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_PTR_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x50    
   \              0x54 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_6`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_WAIT_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x57    
   \              0x41 0x49    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_MESSAGE_QUEUE...">_7`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_MESSAGE_QUEUE_LOG : TX_DEFAULT_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x4D 0x45    
   \              0x53 0x53    
   \              0x41 0x47    
   \              0x45 0x5F    
   \              0x51 0x55    
   \              0x45 0x55    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x44    
   \              0x45 0x46    
   \              0x41 0x55    
   \              0x4C 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   0000002D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_SEMAPHORE_LOG : TX_SUCCESS"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x45    
   \              0x4D 0x41    
   \              0x50 0x48    
   \              0x4F 0x52    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x53    
   \              0x55 0x43    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_SEMAPHORE_LOG : TX_SEMAPHORE_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x45    
   \              0x4D 0x41    
   \              0x50 0x48    
   \              0x4F 0x52    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x53    
   \              0x45 0x4D    
   \              0x41 0x50    
   \              0x48 0x4F    
   \              0x52 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   0000002B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_2`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_SEMAPHORE_LOG : TX_CALLER_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x45    
   \              0x4D 0x41    
   \              0x50 0x48    
   \              0x4F 0x52    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x43    
   \              0x41 0x4C    
   \              0x4C 0x45    
   \              0x52 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_SEMAPHORE_LOG...">_3`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_SEMAPHORE_LOG : TX_DEFAULT_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x45    
   \              0x4D 0x41    
   \              0x50 0x48    
   \              0x4F 0x52    
   \              0x45 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x54 0x58    
   \              0x5F 0x44    
   \              0x45 0x46    
   \              0x41 0x55    
   \              0x4C 0x54    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_SUCCESS"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x53 0x55    
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_THREAD_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_2`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_PTR_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x50 0x54    
   \              0x52 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_3`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_SIZE_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x53 0x49    
   \              0x5A 0x45    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_4`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_PRIORITY_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x50 0x52    
   \              0x49 0x4F    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_5`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_THRESH_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x53 0x48    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_6`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_START_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_7`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_CALLER_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x45 0x52    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_THREAD_LOG : ...">_8`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_THREAD_LOG : TX_DEFAULT_ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x5F 0x4C    
   \              0x4F 0x47    
   \              0x20 0x3A    
   \              0x20 0x54    
   \              0x58 0x5F    
   \              0x44 0x45    
   \              0x46 0x41    
   \              0x55 0x4C    
   \              0x54 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : Connection Accepted"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x41    
   \              0x63 0x63    
   \              0x65 0x70    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_1`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 5FH
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \   00000008   0x43 0x4F          DC8 43H, 4FH, 4EH, 4EH, 41H, 43H, 4BH, 5FH
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \   00000010   0x4C 0x4F          DC8 4CH, 4FH, 47H, 20H, 3AH, 20H, 75H, 6EH
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x75 0x6E    
   \   00000018   0x61 0x63          DC8 61H, 63H, 63H, 65H, 70H, 74H, 61H, 62H
   \              0x63 0x65    
   \              0x70 0x74    
   \              0x61 0x62    
   \   00000020   0x6C 0x65          DC8 6CH, 65H, 20H, 70H, 72H, 6FH, 74H, 6FH
   \              0x20 0x70    
   \              0x72 0x6F    
   \              0x74 0x6F    
   \   00000028   0x63 0x6F          DC8 63H, 6FH, 6CH, 20H, 76H, 65H, 72H, 73H
   \              0x6C 0x20    
   \              0x76 0x65    
   \              0x72 0x73    
   \   00000030   0x69 0x6F          DC8 69H, 6FH, 6EH, 0
   \              0x6E 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_2`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : identifier rejected"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x69 0x64    
   \              0x65 0x6E    
   \              0x74 0x69    
   \              0x66 0x69    
   \              0x65 0x72    
   \              0x20 0x72    
   \              0x65 0x6A    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_3`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : server unavailable"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x73 0x65    
   \              0x72 0x76    
   \              0x65 0x72    
   \              0x20 0x75    
   \              0x6E 0x61    
   \              0x76 0x61    
   \              0x69 0x6C    
   \              0x61 0x62    
   \              0x6C 0x65    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_4`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : bad user name or password"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x62 0x61    
   \              0x64 0x20    
   \              0x75 0x73    
   \              0x65 0x72    
   \              0x20 0x6E    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x6F 0x72    
   \              0x20 0x70    
   \              0x61 0x73    
   \              0x73 0x77    
   \              0x6F 0x72    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_5`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : not authorized"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x61 0x75    
   \              0x74 0x68    
   \              0x6F 0x72    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_CONNACK_LOG :...">_6`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_CONNACK_LOG : Other Issue"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x4C 0x4F    
   \              0x47 0x20    
   \              0x3A 0x20    
   \              0x4F 0x74    
   \              0x68 0x65    
   \              0x72 0x20    
   \              0x49 0x73    
   \              0x73 0x75    
   \              0x65 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   MQTT_CONNECT_ACK_LOG
         0   -> S2w_Printf
       0   MQTT_MESSAGE_QUEUE_LOG
         0   -> S2w_Printf
       0   MQTT_SEMAPHORE_LOG
         0   -> S2w_Printf
       0   MQTT_THREAD_LOG
         0   -> S2w_Printf


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      44  ?<Constant "\r\n MQTT_CONNACK_LOG :...">
      52  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_1
      44  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_2
      44  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_3
      48  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_4
      40  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_5
      36  ?<Constant "\r\n MQTT_CONNACK_LOG :...">_6
      40  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">
      40  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_1
      44  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_2
      44  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_3
      44  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_4
      44  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_5
      44  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_6
      48  ?<Constant "\r\n MQTT_MESSAGE_QUEUE...">_7
      36  ?<Constant "\r\n MQTT_SEMAPHORE_LOG...">
      44  ?<Constant "\r\n MQTT_SEMAPHORE_LOG...">_1
      40  ?<Constant "\r\n MQTT_SEMAPHORE_LOG...">_2
      44  ?<Constant "\r\n MQTT_SEMAPHORE_LOG...">_3
      32  ?<Constant "\r\n MQTT_THREAD_LOG : ...">
      40  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_1
      36  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_2
      36  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_3
      40  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_4
      40  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_5
      36  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_6
      40  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_7
      40  ?<Constant "\r\n MQTT_THREAD_LOG : ...">_8
      64  MQTT_CONNECT_ACK_LOG
      74  MQTT_MESSAGE_QUEUE_LOG
      34  MQTT_SEMAPHORE_LOG
      84  MQTT_THREAD_LOG

 
 1 416 bytes in section .text
 
 1 416 bytes of CODE memory

Errors: none
Warnings: none
