###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  14:31:01 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\hal\s2w_ext_flash_fwup.c             #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\hal\s2w_ext_flash_fwup.c -D          #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ -lA                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ --diag_suppress        #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\Debug\Obj\    #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\core\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\drivers\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\modules\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\rtos\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\netx_bsd_la #
#                    yer\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\main\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\src\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\hw_e #
#                    ngine_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1 #
#                    .5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\sec #
#                    urity\wpa_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp #
#                    _5.1.5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ #
#                    ncm\inc\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1. #
#                    5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ctx\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\hal\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\parser\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\config\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\otafu\inc\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\provisioning\inc\ -I  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_log\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_log\ -Ohz              #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\s2w_ext_flash_fwup.lst  #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\Obj\s2w_ext_flash_fwup.o     #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\src\hal\s2w_ext_flash_fwup.c
      1          /*****************************************************************
      2          *
      3          *               COPYRIGHT (c) 2009-2010 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_ext_flash_fwup.c,v $
     28          *
     29          *******************************************************************
     30          *
     31          * Description : This file contains the source code for the reference
     32          *                   application on the TLS board.
     33          *
     34          *               The reference application collects data for
     35          *               - Light Sensor (APDS-9005)
     36          *               - Temperature sensor (Thermistor DO-35)
     37          *               - Battery charge
     38          *               - Signal strength of the last received data packet
     39          *
     40          *               It then packs all this raw data as per GainSpan Data Packet
     41          *               format in a single UDP or TCP packet and sends it to the data
     42          *               server. The translation of the raw data to the actual values is
     43          *               done on the data server
     44          *
     45          ******************************************************************************/
     46          
     47          /********************************* File inclusion ****************************/
     48          #if 1//def GSN_EXTERNAL_FLASH_FWUP
     49          
     50          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     51          #include "app_defines.h"
     52          #include "app_events.h"
     53          #include "hal/s2w_types.h"
     54          #include "hal/s2w_hal.h"
     55          #include "parser/s2w_process.h"
     56          #include "hal/s2w_net.h"
     57          #include "parser/s2w_command.h"
     58          #include "hal/s2w.h"
     59          
     60          
     61          #include "main/app_main_ctx.h"

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFwup_FactImgReqSet(GSN_FWUP_CTX_T *)
   \                     GsnFwup_FactImgReqSet:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0x6581             STR      R1,[R0, #+88]
   \   00000004   0x4770             BX       LR               ;; return
     62          #include "modules/ssl/gsn_ssl.h"
     63          #include "modules/http/gsn_httpc.h"
     64          #include "main/gsn_br_flashldr.h"
     65          #include "modules/fwup/gsn_fwup.h"
     66          
     67          #include "core/reg/gsn_reg_rtc_spec.h"
     68          #include "core/reg/gsn_reg_rtc_op.h"
     69          #include "ext_app/app_ext_flash.h"
     70          
     71          #ifdef ADK_OTAFU
     72          #include "gsn_otafu.h"
     73          #include "gsn_ext_otafu.h"
     74          #include "gsn_otafu_dsv.h"
     75          
     76          #include "hal/s2w_cert_mgmt.h"
     77          #if 0
     78          #include "supplicant/crypto/crypto.h"
     79          #include "supplicant/tls/tlsv1_client.h"
     80          
     81          #include "supplicant/tls/tlsv1_common.h"
     82          #include "supplicant/tls/tlsv1_record.h"
     83          
     84          #include "supplicant/tls/tlsv1_client_i.h"
     85          #include "supplicant/tls/x509v3.h"
     86          #endif
     87          
     88          //#include "tls/rsa.h"
     89          #endif
     90          
     91          //#include "s2w_ota_fwup_xml_schema.c"
     92          
     93          /*****************************************************************************/
     94          
     95          /************************ Private MACRO **************************************/
     96          
     97          
     98          
     99          /****************************** Private data types ***************************/
    100          
    101          /*****************************************************************************/
    102          
    103          
    104          
    105          /************* Private Function prototype without function header ************/
    106          
    107          /*****************************************************************************/
    108          
    109          /*****************************************************************************/
    110          
    111          /***************************** Public variable *******************************/
    112          
    113          /*****************************************************************************/
    114          
    115          /***************************** Private Variable ******************************/
    116          
    117          /*****************************************************************************/
    118          
    119          
    120          
    121          /************* External Flash Based Fimrware Update Related ************/
    122          
    123          
    124          
    125          /************* Private Function prototype ************/
    126          
    127          
    128          
    129          
    130          /************* Public Function prototype ************/
    131          
    132          /*****************************************************************************/
    133          
    134          /**************************** Public Function ********************************/
    135          
    136          #define APP_S2W_FWUP_HTTP_TIMEOUT 75
    137          #define APP_S2W_FWUP_DNS_REQ_DEF_TIME_OUT        5
    138          #define APP_S2W_FWUP_DNS_REQ_DEF_RETRIES         3
    139          
    140          //#define GSN_EXT_FLASH_FWUP_PULL_METHOD
    141          //#define FWUP_DEBUG
    142          
    143          #ifdef FWUP_DEBUG
    144          #define FWUP_PRINT S2w_Printf
    145          #else
    146          #define FWUP_PRINT(...)
    147          #endif
    148          
    149          extern APP_MAIN_CTX_T *s2wappMainTaskCtxt;
    150          extern APP_MAIN_CTX_T appCtx;
    151          extern S2W_OTA_FWUP_CONF_T OtaFwupConfParam;
    152          
    153          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
    154          extern GSN_HTTPC_CONF_INFO_T httpConfInfo;
    155          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypes[];
    156          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypesModified[];
    157          #endif
    158          
    159          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
    160          extern INT8 *headerValues[GSN_HTTP_HEADER_ALL];
    161          extern GSN_HTTP_USER_HEADER_TYPE_T headerTypes[GSN_HTTP_HEADER_ALL];
    162          #endif
    163          extern void nx_dns_retry_count_set(NX_DNS *dns_ptr,UINT retries);
    164          
    165          

   \                                 In section .bss, align 4
    166          PRIVATE void *httpsConn;
   \                     httpsConn:
   \   00000000                      DS8 4
    167          //PRIVATE GSN_OSAL_SEM_T extFlashUpdate;
    168          
    169          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
    170          //PRIVATE S2W_HTTP_DATA_T S2wFwupHttpData;
    171          typedef struct GSN_OTAFU_PULL_CTX
    172          {
    173          	GSN_FWUP_CTX_T fwupCtx;
    174          
    175          #ifdef ADK_OTAFU_DSV	
    176          	GSN_OTAFU_DSV_CTX_T otafuDsvCtx;
    177          #endif    
    178          
    179          } GSN_OTAFU_PULL_CTX_T;
    180          #endif
    181          
    182          #ifdef ADK_OTAFU
    183          

   \                                 In section .text, align 2, keep-with-next
    184          PUBLIC VOID
    185          AppOtafu_Cb(VOID *ctx, UINT8 event)
    186          {
   \                     AppOtafu_Cb:
   \   00000000   0x4602             MOV      R2,R0
    187              if (event == GSN_OTAFU_EVENT_FWUP_SUCCESS)
   \   00000002   0x2902             CMP      R1,#+2
   \   00000004   0xD104             BNE.N    ??AppOtafu_Cb_0
    188              {
    189                  UINT32 msg = APP_EVENT_FWUP_SUCCESS;
    190          	    APP_MAIN_CTX_T* appCtx = (APP_MAIN_CTX_T*) ctx;
    191          	    /* Notify APP */
    192          	    (appCtx->taskNotifier)(msg, appCtx);
   \   00000006   0x4611             MOV      R1,R2
   \   00000008   0xF8D2 0x20B4      LDR      R2,[R2, #+180]
   \   0000000C   0x2016             MOVS     R0,#+22
   \   0000000E   0x4710             BX       R2
    193              }
    194          }
   \                     ??AppOtafu_Cb_0:
   \   00000010   0x4770             BX       LR               ;; return
    195          

   \                                 In section .bss, align 4
    196          GSN_OTAFU_CTX_T otafuCtx;
   \                     otafuCtx:
   \   00000000                      DS8 104
    197          

   \                                 In section .text, align 2, keep-with-next
    198          PUBLIC VOID
    199          AppOtafu_Init(APP_MAIN_CTX_T* pAppCtx)
    200          {
   \                     AppOtafu_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
    201              otafuCtx.cbFn =  AppOtafu_Cb;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable8_1
   \   00000006   0x.... 0x....      LDR.W    R1,??DataTable8_2
    202              otafuCtx.cbFnCtx = pAppCtx;
   \   0000000A   0x6060             STR      R0,[R4, #+4]
   \   0000000C   0x6021             STR      R1,[R4, #+0]
    203          #ifdef ADK_OTAFU_DSV	
    204          	otafuCtx.otafuDsvCtx.rootCertName = "B:/certs/OTAFU_DSV_ROOT_CERT";
    205          	otafuCtx.otafuDsvCtx.serverCertName = "B:/certs/OTAFU_DSV_CERT";
    206          #endif
    207          	GsnOtafu_Init(&otafuCtx);
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       GsnOtafu_Init
    208          #ifdef S2W_FACT_IMAGE_REQ
    209              GsnFwup_FactImgReqSet(&otafuCtx.fwupCtx);
   \   00000014   0xF104 0x0008      ADD      R0,R4,#+8
   \   00000018   0xE8BD 0x4010      POP      {R4,LR}
   \   0000001C   0x.... 0x....      B.W      GsnFwup_FactImgReqSet
    210          #else
    211              GsnFwup_FactImgReqClear(&otafuCtx.fwupCtx);
    212          #endif
    213          }
    214          

   \                                 In section .text, align 2, keep-with-next
    215          PUBLIC VOID
    216          AppExtOtafu_Init(APP_MAIN_CTX_T* pAppCtx)
    217          {
   \                     AppExtOtafu_Init:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    218          	memset(&pAppCtx->extOtafuCtx, 0, sizeof(GSN_EXTOTAFU_CTX_T));
   \   00000004   0xF248 0x059C      MOVW     R5,#+32924
   \   00000008   0x192E             ADDS     R6,R5,R4
   \   0000000A   0x22CC             MOVS     R2,#+204
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0x4630             MOV      R0,R6
   \   00000010   0x.... 0x....      BL       memset
    219          
    220          	if(pAppCtx->extFlashCtx.extFlashStatus == EXTFLASH_NOT_INITIALIZED)
   \   00000014   0xF647 0x30D0      MOVW     R0,#+31696
   \   00000018   0x5D00             LDRB     R0,[R0, R4]
   \   0000001A   0xB910             CBNZ.N   R0,??AppExtOtafu_Init_0
    221          	{
    222          		AppExtFlash_Init(GSN_FLASH_SPI_DMA);
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x.... 0x....      BL       AppExtFlash_Init
    223          	}
    224          
    225          	pAppCtx->extOtafuCtx.extFwupCtx.extFlashCtx = &pAppCtx->extFlashCtx;
   \                     ??AppExtOtafu_Init_0:
   \   00000022   0xF248 0x1060      MOVW     R0,#+33120
   \   00000026   0xF504 0x41EC      ADD      R1,R4,#+30208
   \   0000002A   0x3188             ADDS     R1,R1,#+136
   \   0000002C   0x5101             STR      R1,[R0, R4]
    226          	pAppCtx->extOtafuCtx.extFwupCtx.extFwupSpiMode = pAppCtx->extFlashCtx.spiFlagFs;
   \   0000002E   0xF248 0x1064      MOVW     R0,#+33124
   \   00000032   0xF647 0x31C0      MOVW     R1,#+31680
   \   00000036   0x5D09             LDRB     R1,[R1, R4]
   \   00000038   0x5501             STRB     R1,[R0, R4]
    227          
    228              pAppCtx->extOtafuCtx.otafuCtx.cbFn =  AppOtafu_Cb;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   0000003E   0x5128             STR      R0,[R5, R4]
    229              pAppCtx->extOtafuCtx.otafuCtx.cbFnCtx = pAppCtx;
   \   00000040   0xF248 0x00A0      MOVW     R0,#+32928
   \   00000044   0x5104             STR      R4,[R0, R4]
    230          
    231          #ifdef ADK_OTAFU_DSV	
    232          	pAppCtx->extOtafuCtx.otafuDsvCtx.rootCertName = "B:/certs/OTAFU_DSV_ROOT_CERT";
    233          	pAppCtx->extOtafuCtx.otafuDsvCtx.serverCertName = "B:/certs/OTAFU_DSV_CERT";
    234          #endif
    235          
    236          	GsnExtOtafu_Init(&pAppCtx->extOtafuCtx);
   \   00000046   0x4630             MOV      R0,R6
   \   00000048   0x.... 0x....      BL       GsnExtOtafu_Init
    237          	
    238          #ifdef S2W_FACT_IMAGE_REQ
    239              GsnFwup_FactImgReqSet(&pAppCtx->extOtafuCtx.otafuCtx.fwupCtx);
   \   0000004C   0xF504 0x4000      ADD      R0,R4,#+32768
   \   00000050   0xE8BD 0x4070      POP      {R4-R6,LR}
   \   00000054   0x30A4             ADDS     R0,R0,#+164
   \   00000056   0x.... 0x....      B.W      GsnFwup_FactImgReqSet
    240          #else
    241              GsnFwup_FactImgReqClear(&pAppCtx->extOtafuCtx.otafuCtx.fwupCtx);
    242          #endif
    243          }
    244          #endif
    245          
    246          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD
    247          #if defined(S2W_SSL_CLIENT_SUPPORT) || defined(S2W_SSL_SERVER_SUPPORT)
    248          extern S2W_SSL_CONF_T s2wSslConf;
    249          #endif
    250          

   \                                 In section .text, align 2, keep-with-next
    251          PRIVATE VOID*
    252          AppS2w_FwupExtFlashConnOpen(struct sockaddr_storage *pSockAddr, S2W_OTA_FWUP_CONF_T *pOtaFwupConf)
    253          {
   \                     AppS2w_FwupExtFlashConnOpen:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460F             MOV      R7,R1
    254              GSN_STATUS status;
    255              void *pHttpHandle = NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    256              GSN_HTTPC_CONN_PARAMS_T connParams;
    257          
    258              if(pOtaFwupConf->sslFlag && pOtaFwupConf->proxyFlag)
   \   0000000C   0xF107 0x0638      ADD      R6,R7,#+56
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable8_3
   \   00000014   0x7870             LDRB     R0,[R6, #+1]
   \   00000016   0x2800             CMP      R0,#+0
   \   00000018   0xBF1C             ITT      NE 
   \   0000001A   0xF897 0x0038      LDRBNE   R0,[R7, #+56]
   \   0000001E   0x2800             CMPNE    R0,#+0
   \   00000020   0xD003             BEQ.N    ??AppS2w_FwupExtFlashConnOpen_0
    259              {
    260                  httpConfInfo.reqPathPtr = (INT8 *)OtaFwupConfParam.connectReqatPath;
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable8_4
   \   00000026   0x6D80             LDR      R0,[R0, #+88]
   \   00000028   0x6068             STR      R0,[R5, #+4]
    261              }
    262          	/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
    263          		compiled with header type array being defined as array of UINT8 */
    264          	{
    265          		UINT8 i;
    266          		for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   \                     ??AppS2w_FwupExtFlashConnOpen_0:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000030   0x.... 0x....      LDR.W    R2,??DataTable8_6
    267          		{
    268          			if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM)
   \                     ??AppS2w_FwupExtFlashConnOpen_1:
   \   00000034   0xF852 0x3020      LDR      R3,[R2, R0, LSL #+2]
   \   00000038   0x2BFF             CMP      R3,#+255
   \   0000003A   0xBF28             IT       CS 
   \   0000003C   0x23FF             MOVCS    R3,#+255
    269          			{
    270          				headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM;
    271          			}
    272          			else
    273          			{
    274          				headerTypesModified[i] = headerTypes[i];
   \   0000003E   0xF841 0x3020      STR      R3,[R1, R0, LSL #+2]
    275          			}
    276          		}
   \   00000042   0x1C40             ADDS     R0,R0,#+1
   \   00000044   0x2819             CMP      R0,#+25
   \   00000046   0xD3F5             BCC.N    ??AppS2w_FwupExtFlashConnOpen_1
    277          	}
    278          
    279              /* Open Http/Https connection */
    280              memset((INT8 *)&connParams, 0, sizeof(connParams));
   \   00000048   0x2240             MOVS     R2,#+64
   \   0000004A   0x2100             MOVS     R1,#+0
   \   0000004C   0xA801             ADD      R0,SP,#+4
   \   0000004E   0x.... 0x....      BL       memset
    281              connParams.ConTimeout = 60;
   \   00000052   0x203C             MOVS     R0,#+60
   \   00000054   0x9002             STR      R0,[SP, #+8]
    282              connParams.proxyPresent = pOtaFwupConf->proxyFlag;
   \   00000056   0xF897 0x0038      LDRB     R0,[R7, #+56]
   \   0000005A   0xF88D 0x0005      STRB     R0,[SP, #+5]
    283              connParams.type = (GSN_HTTP_TYPE_T)pOtaFwupConf->sslFlag;
   \   0000005E   0x7870             LDRB     R0,[R6, #+1]
   \   00000060   0xF88D 0x0004      STRB     R0,[SP, #+4]
    284          
    285          #if defined(S2W_SSL_CLIENT_SUPPORT)    
    286              if(pOtaFwupConf->sslFlag == TRUE)
   \   00000064   0x7870             LDRB     R0,[R6, #+1]
   \   00000066   0x2801             CMP      R0,#+1
   \   00000068   0xD107             BNE.N    ??AppS2w_FwupExtFlashConnOpen_2
    287              {        
    288                  if(pOtaFwupConf->certAddr != NULL)
   \   0000006A   0x6870             LDR      R0,[R6, #+4]
   \   0000006C   0xB128             CBZ.N    R0,??AppS2w_FwupExtFlashConnOpen_2
    289                  { 
    290                      connParams.sslParams.caCertLen  = *(UINT16 *)pOtaFwupConf->certAddr;   
   \   0000006E   0xF830 0x1B02      LDRH     R1,[R0], #+2
    291                      connParams.sslParams.caCert = pOtaFwupConf->certAddr + 2;    
   \   00000072   0x9004             STR      R0,[SP, #+16]
   \   00000074   0x9105             STR      R1,[SP, #+20]
    292                      connParams.sslParams.caCertName = NULL;        
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x9003             STR      R0,[SP, #+12]
    293                  }
    294              }
    295              if(0 != s2wSslConf.dnsBufferLen)
   \                     ??AppS2w_FwupExtFlashConnOpen_2:
   \   0000007A   0x....             LDR.N    R6,??DataTable8_7
   \   0000007C   0x6830             LDR      R0,[R6, #+0]
   \   0000007E   0xB1C0             CBZ.N    R0,??AppS2w_FwupExtFlashConnOpen_3
    296              {
    297                  connParams.dnsBuf = gsn_malloc(sizeof(GSN_SSL_DNS_BUF_INFO_T));
   \   00000080   0x2200             MOVS     R2,#+0
   \   00000082   0xF240 0x1129      MOVW     R1,#+297
   \   00000086   0x200C             MOVS     R0,#+12
   \   00000088   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000008C   0x9010             STR      R0,[SP, #+64]
    298                  s2wSslConf.dnsNameBuf = gsn_malloc(s2wSslConf.dnsBufferLen);
   \   0000008E   0x2200             MOVS     R2,#+0
   \   00000090   0x6830             LDR      R0,[R6, #+0]
   \   00000092   0xF44F 0x7195      MOV      R1,#+298
   \   00000096   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
    299                  memset(s2wSslConf.dnsNameBuf, 0, s2wSslConf.dnsBufferLen);
   \   0000009A   0x6832             LDR      R2,[R6, #+0]
   \   0000009C   0x6070             STR      R0,[R6, #+4]
   \   0000009E   0x2100             MOVS     R1,#+0
   \   000000A0   0x.... 0x....      BL       memset
    300                  connParams.dnsBuf->bufStart = connParams.dnsBuf->bufCurrent =  s2wSslConf.dnsNameBuf;
   \   000000A4   0x9910             LDR      R1,[SP, #+64]
   \   000000A6   0x6870             LDR      R0,[R6, #+4]
   \   000000A8   0x6088             STR      R0,[R1, #+8]
   \   000000AA   0x6008             STR      R0,[R1, #+0]
    301                  connParams.dnsBuf->bufLen = s2wSslConf.dnsBufferLen;
   \   000000AC   0x6830             LDR      R0,[R6, #+0]
   \   000000AE   0x6048             STR      R0,[R1, #+4]
   \   000000B0   0xE000             B.N      ??AppS2w_FwupExtFlashConnOpen_4
    302              }
    303              else
    304          #endif		
    305              {
    306                  connParams.dnsBuf = NULL;
   \                     ??AppS2w_FwupExtFlashConnOpen_3:
   \   000000B2   0x9010             STR      R0,[SP, #+64]
    307              }
    308          	status = GsnHttp_Start(&pHttpHandle, pSockAddr,
    309                                    		 &connParams, &httpConfInfo);
   \                     ??AppS2w_FwupExtFlashConnOpen_4:
   \   000000B4   0x462B             MOV      R3,R5
   \   000000B6   0xAA01             ADD      R2,SP,#+4
   \   000000B8   0x4621             MOV      R1,R4
   \   000000BA   0xA800             ADD      R0,SP,#+0
   \   000000BC   0x.... 0x....      BL       GsnHttp_Start
   \   000000C0   0x4604             MOV      R4,R0
    310              if(NULL != connParams.dnsBuf)
   \   000000C2   0x9810             LDR      R0,[SP, #+64]
   \   000000C4   0xB108             CBZ.N    R0,??AppS2w_FwupExtFlashConnOpen_5
    311              	gsn_free(connParams.dnsBuf);
   \   000000C6   0x.... 0x....      BL       GsnDynMemMgmt_Free
    312              connParams.dnsBuf = NULL;
   \                     ??AppS2w_FwupExtFlashConnOpen_5:
   \   000000CA   0x2000             MOVS     R0,#+0
   \   000000CC   0x9010             STR      R0,[SP, #+64]
    313              if(status == GSN_SUCCESS)
   \   000000CE   0xB904             CBNZ.N   R4,??AppS2w_FwupExtFlashConnOpen_6
    314              {
    315                  return pHttpHandle;
   \   000000D0   0x9800             LDR      R0,[SP, #+0]
    316              }
    317              else
    318              {
    319                  return NULL;
   \                     ??AppS2w_FwupExtFlashConnOpen_6:
   \   000000D2   0xB011             ADD      SP,SP,#+68
   \   000000D4   0xBDF0             POP      {R4-R7,PC}       ;; return
    320              }
    321          }
    322          
    323          #endif
    324          

   \                                 In section .text, align 2, keep-with-next
    325          PRIVATE GSN_STATUS
    326          AppS2w_FwupExtFlashCheckStatus(GSN_FWUP_CTX_T *appFwupCtx, INT8 **DataBuff, UINT32 *DataLen)
    327          {
   \                     AppS2w_FwupExtFlashCheckStatus:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x460C             MOV      R4,R1
   \   00000006   0x4603             MOV      R3,R0
    328              UINT8 flag = FALSE;
    329              GSN_STATUS retVal  = GSN_SUCCESS;
    330              UINT32 i = 0;
    331              INT8 *httpStatusParse;
    332          
    333          	httpStatusParse = *DataBuff;
   \   00000008   0x6820             LDR      R0,[R4, #+0]
    334          
    335              if(appFwupCtx->downloadedSize == 0)
   \   0000000A   0x6859             LDR      R1,[R3, #+4]
   \   0000000C   0x4615             MOV      R5,R2
   \   0000000E   0xF04F 0x0800      MOV      R8,#+0
   \   00000012   0x2600             MOVS     R6,#+0
   \   00000014   0x4607             MOV      R7,R0
   \   00000016   0xB961             CBNZ.N   R1,??AppS2w_FwupExtFlashCheckStatus_0
    336              {
    337                  flag = TRUE;
    338              }
    339          
    340              if(flag)
    341              {
    342                  if(0 == memcmp(*DataBuff, "200", 3))
   \   00000018   0x2203             MOVS     R2,#+3
   \   0000001A   0x....             ADR.N    R1,??DataTable8  ;; "200"
   \   0000001C   0x.... 0x....      BL       memcmp
   \   00000020   0xB158             CBZ.N    R0,??AppS2w_FwupExtFlashCheckStatus_1
    343          		{
    344          			while (!(httpStatusParse[i] == '\r' && httpStatusParse[i+1] == '\n'))
    345          			{
    346          			    i++;
    347          			}
    348          
    349          			i += 2;
    350          
    351                      //FWUP_PRINT("\n\r200 OK\r\n");
    352                  }
    353                  else //if(memcmp(*DataBuff, "404", 3))
    354                  {
    355                      //To Be Done: Error Handling
    356                      //FWUP_PRINT("\n\r%s\n\r", *DataBuff);
    357                      //FWUP_PRINT("HTTP Status = %c%c%c \r\n",*DataBuff[0], *DataBuff[1], *DataBuff[2] );
    358                      retVal = GSN_FAILURE;
   \   00000022   0xF04F 0x4800      MOV      R8,#-2147483648
    359                  }
    360          
    361                  *DataBuff = *DataBuff + i;
   \                     ??AppS2w_FwupExtFlashCheckStatus_2:
   \   00000026   0x6820             LDR      R0,[R4, #+0]
   \   00000028   0x1830             ADDS     R0,R6,R0
   \   0000002A   0x6020             STR      R0,[R4, #+0]
    362                  *DataLen = *DataLen - i;
   \   0000002C   0x6828             LDR      R0,[R5, #+0]
   \   0000002E   0x1B80             SUBS     R0,R0,R6
   \   00000030   0x6028             STR      R0,[R5, #+0]
    363              }
    364          
    365              return retVal;
   \                     ??AppS2w_FwupExtFlashCheckStatus_0:
   \   00000032   0x4640             MOV      R0,R8
   \   00000034   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
   \                     ??AppS2w_FwupExtFlashCheckStatus_3:
   \   00000038   0x1C76             ADDS     R6,R6,#+1
   \                     ??AppS2w_FwupExtFlashCheckStatus_1:
   \   0000003A   0x5DF0             LDRB     R0,[R6, R7]
   \   0000003C   0x280D             CMP      R0,#+13
   \   0000003E   0xBF02             ITTT     EQ 
   \   00000040   0x19F0             ADDEQ    R0,R6,R7
   \   00000042   0x7840             LDRBEQ   R0,[R0, #+1]
   \   00000044   0x280A             CMPEQ    R0,#+10
   \   00000046   0xD1F7             BNE.N    ??AppS2w_FwupExtFlashCheckStatus_3
   \   00000048   0x1CB6             ADDS     R6,R6,#+2
   \   0000004A   0xE7EC             B.N      ??AppS2w_FwupExtFlashCheckStatus_2
    366          
    367          }
    368          
    369          #ifdef S2W_EXT_FLASH_FWUP_PULL_METHOD

   \                                 In section .text, align 2, keep-with-next
    370          PRIVATE VOID
    371          AppS2w_FwupExtFlashRxCb(VOID   *ctx,
    372                                              GSN_HTTPC_CONN_HANDLE connHandle,
    373                                              INT8  *httpRxDataBuf,
    374                                              INT32 httpRxDataLen,
    375                                              INT32 *rxBufferMgmtstatus)
    376          {
   \                     AppS2w_FwupExtFlashRxCb:
   \   00000000   0xB57C             PUSH     {R2-R6,LR}
    377              GSN_STATUS retVal = GSN_SUCCESS;
    378          
    379          	
    380          	GSN_OTAFU_PULL_CTX_T *otafuPullCtx = (GSN_OTAFU_PULL_CTX_T *)ctx;
    381          
    382              retVal = AppS2w_FwupExtFlashCheckStatus(&otafuPullCtx->fwupCtx, &httpRxDataBuf,(UINT32 *) &httpRxDataLen);
    383          
    384              if(GSN_SUCCESS != retVal)
   \   00000002   0x9D06             LDR      R5,[SP, #+24]
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xF04F 0x4600      MOV      R6,#-2147483648
   \   0000000A   0xAA01             ADD      R2,SP,#+4
   \   0000000C   0xA900             ADD      R1,SP,#+0
   \   0000000E   0x.... 0x....      BL       AppS2w_FwupExtFlashCheckStatus
   \   00000012   0xB928             CBNZ.N   R0,??AppS2w_FwupExtFlashRxCb_0
    385              {
    386                  //FWUP_PRINT("Dwnd Failed In Cb: FwUP Check = %x\r\n", retVal);
    387                 *rxBufferMgmtstatus = GSN_FAILURE;
    388                 goto AppFwupCbExit;
    389              }
    390          
    391          #ifdef FWUP_DEBUG_HTTP_RCV_DATA
    392              count = count + httpRxDataLen;
    393          
    394              //FWUP_PRINT("RcvdData=%d\r\n",count );
    395          #endif
    396          
    397          #ifdef ADK_OTAFU_DSV
    398          	GsnOtafuDsv_Sha1Update(&otafuPullCtx->otafuDsvCtx, httpRxDataBuf, httpRxDataLen);
    399          #endif
    400          
    401              retVal = GsnFwup_DownLoad(&otafuPullCtx->fwupCtx, (UINT8 *)httpRxDataBuf, httpRxDataLen);
    402              if(retVal != GSN_SUCCESS)
   \   00000014   0x9A01             LDR      R2,[SP, #+4]
   \   00000016   0x9900             LDR      R1,[SP, #+0]
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       GsnFwup_DownLoad
   \   0000001E   0xB108             CBZ.N    R0,??AppS2w_FwupExtFlashRxCb_1
    403              {
    404                 //appRtcMemData.smRtc.fwupErrCount++;
    405                 //FWUP_PRINT("Dwnd Failed In Cb = %x\r\n", retVal);
    406                 *rxBufferMgmtstatus = GSN_FAILURE;
   \                     ??AppS2w_FwupExtFlashRxCb_0:
   \   00000020   0x602E             STR      R6,[R5, #+0]
   \   00000022   0xBD73             POP      {R0,R1,R4-R6,PC}
    407          
    408              }
    409              else
    410              {
    411                  *rxBufferMgmtstatus = GSN_SUCCESS;
   \                     ??AppS2w_FwupExtFlashRxCb_1:
   \   00000024   0x6028             STR      R0,[R5, #+0]
    412              }
    413          
    414          AppFwupCbExit:
    415          
    416              return;
   \   00000026   0xBD73             POP      {R0,R1,R4-R6,PC}  ;; return
    417          
    418          }
    419          
    420          #ifdef ADK_OTAFU_DSV
    421          PRIVATE VOID
    422          AppS2w_FwupExtFlashSignRxCb(VOID   *ctx,
    423                                              GSN_HTTPC_CONN_HANDLE connHandle,
    424                                              INT8  *httpRxDataBuf,
    425                                              INT32 httpRxDataLen,
    426                                              INT32 *rxBufferMgmtstatus)
    427          {
    428              GSN_STATUS retVal = GSN_SUCCESS;
    429          //    GSN_FWUP_CTX_T    *appFwupCtx = (GSN_FWUP_CTX_T *)ctx;
    430          	GSN_OTAFU_PULL_CTX_T *otafuPullCtx = (GSN_OTAFU_PULL_CTX_T *)ctx;
    431          
    432          
    433              retVal = AppS2w_FwupExtFlashCheckStatus(&otafuPullCtx->fwupCtx, &httpRxDataBuf,(UINT32 *) &httpRxDataLen);
    434          
    435              if(GSN_SUCCESS != retVal)
    436              {
    437                  //FWUP_PRINT("Dwnd Failed In Cb: FwUP Check = %x\r\n", retVal);
    438                 *rxBufferMgmtstatus = GSN_FAILURE;
    439                 goto AppFwupCbExit;
    440              }
    441          
    442          #ifdef FWUP_DEBUG_HTTP_RCV_DATA
    443              count = count + httpRxDataLen;
    444          
    445              //FWUP_PRINT("RcvdData=%d\r\n",count );
    446          #endif
    447          
    448          	retVal = GsnOtafuDsv_SignUpdate(&otafuPullCtx->otafuDsvCtx, httpRxDataBuf, httpRxDataLen);
    449          
    450              if(retVal != GSN_SUCCESS)
    451              {
    452                 //appRtcMemData.smRtc.fwupErrCount++;
    453                 FWUP_PRINT("\r\nInvalid Signature\r\n");
    454                 *rxBufferMgmtstatus = GSN_FAILURE;
    455          
    456              }
    457              else
    458              {
    459                  *rxBufferMgmtstatus = GSN_SUCCESS;
    460              }
    461          
    462          AppFwupCbExit:
    463          
    464              return;
    465          
    466          }
    467          #endif
    468          

   \                                 In section .text, align 2, keep-with-next
    469          PRIVATE GSN_STATUS
    470          AppS2w_ExtFwupDownLoadStart(GSN_HTTPC_CONN_HANDLE pHttpsConn,
    471                                      GSN_OTAFU_PULL_CTX_T *otafuPullCtx,
    472                                      UINT8 *url)
    473          {
   \                     AppS2w_ExtFwupDownLoadStart:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
   \   00000006   0x4604             MOV      R4,R0
    474              UINT8 *pHttpRxDataBuf = NULL;
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x460D             MOV      R5,R1
   \   0000000E   0x4616             MOV      R6,R2
    475              UINT32 httpRxDataLen, retVal = GSN_FAILURE;
   \   00000010   0xF04F 0x4700      MOV      R7,#-2147483648
   \   00000014   0x46B8             MOV      R8,R7
    476          
    477              /* allocate Buffer for recieving firmware */
    478              pHttpRxDataBuf = gsn_malloc(1024);
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF44F 0x71EF      MOV      R1,#+478
   \   0000001C   0xF44F 0x6080      MOV      R0,#+1024
   \   00000020   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000024   0x9001             STR      R0,[SP, #+4]
    479          
    480              if(pHttpRxDataBuf == NULL)
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD047             BEQ.N    ??AppS2w_ExtFwupDownLoadStart_0
    481              {
    482                  retVal = GSN_FAILURE;
    483                  //FWUP_PRINT("Failure1\r\n");
    484                  goto AppS2w_ExtFwupDownLoadStart_Exit;
    485              }
    486              memset(pHttpRxDataBuf, 0, 1024);
   \   0000002A   0xF44F 0x6280      MOV      R2,#+1024
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x.... 0x....      BL       memset
    487              httpRxDataLen = 1024;
   \   00000034   0xF44F 0x6080      MOV      R0,#+1024
   \   00000038   0x9002             STR      R0,[SP, #+8]
    488          
    489              if(url != NULL)
   \   0000003A   0x2E00             CMP      R6,#+0
   \   0000003C   0xD039             BEQ.N    ??AppS2w_ExtFwupDownLoadStart_1
    490              {
    491                  httpConfInfo.reqPathPtr = (INT8 *)url;       //page to be opened
   \   0000003E   0x....             LDR.N    R0,??DataTable8_3
    492                  /* set configuration to GET the Binary*/
    493                  httpConfInfo.reqMethod = GSN_HTTP_METHOD_GET;  //Request method
    494                  httpConfInfo.reqBodyLen = 0;           //Request body len
    495                  httpConfInfo.reqBodyTotalLen = 0;      //Request body total len
    496          
    497                  /* register call back function to process recieved part of firmware */
    498                  httpConfInfo.rxBufferMgmtCb = AppS2w_FwupExtFlashRxCb;
    499                  httpConfInfo.reqBodyPtr = NULL;              //Request body pointer
    500          
    501                  httpConfInfo.rxBufferMgmtCbCtx = otafuPullCtx;
    502          
    503          		/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
    504          		compiled with header type array being defined as array of UINT8 */
    505          		{
    506          			UINT8 i;
    507          			for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
   \   00000040   0x....             LDR.N    R2,??DataTable8_5
   \   00000042   0x....             LDR.N    R3,??DataTable8_6
   \   00000044   0x6046             STR      R6,[R0, #+4]
   \   00000046   0x2101             MOVS     R1,#+1
   \   00000048   0x7041             STRB     R1,[R0, #+1]
   \   0000004A   0x6405             STR      R5,[R0, #+64]
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6181             STR      R1,[R0, #+24]
   \   00000050   0x61C1             STR      R1,[R0, #+28]
   \   00000052   0x....             LDR.N    R1,??DataTable8_8
   \   00000054   0x63C1             STR      R1,[R0, #+60]
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x6141             STR      R1,[R0, #+20]
    508          	        {
    509          	        	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM)
   \                     ??AppS2w_ExtFwupDownLoadStart_2:
   \   0000005A   0xF853 0x6021      LDR      R6,[R3, R1, LSL #+2]
   \   0000005E   0x2EFF             CMP      R6,#+255
   \   00000060   0xBF28             IT       CS 
   \   00000062   0x26FF             MOVCS    R6,#+255
    510          				{
    511          					headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM;
    512          				}
    513          				else
    514          				{
    515          	        		headerTypesModified[i] = headerTypes[i];
   \   00000064   0xF842 0x6021      STR      R6,[R2, R1, LSL #+2]
    516          				}
    517          	        }
   \   00000068   0x1C49             ADDS     R1,R1,#+1
   \   0000006A   0x2919             CMP      R1,#+25
   \   0000006C   0xD3F5             BCC.N    ??AppS2w_ExtFwupDownLoadStart_2
    518          		}
    519          		/* Send Data */
    520          		
    521          		retVal = GsnHttp_Send(pHttpsConn, (INT8 *)pHttpRxDataBuf,
    522                                 &httpRxDataLen, APP_S2W_FWUP_HTTP_TIMEOUT, &httpConfInfo);
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0x234B             MOVS     R3,#+75
   \   00000072   0x9901             LDR      R1,[SP, #+4]
   \   00000074   0xAA02             ADD      R2,SP,#+8
   \   00000076   0x4620             MOV      R0,R4
   \   00000078   0x.... 0x....      BL       GsnHttp_Send
   \   0000007C   0xEA5F 0x0800      MOVS     R8,R0
    523          
    524                  if(retVal != GSN_SUCCESS)
   \   00000080   0xD117             BNE.N    ??AppS2w_ExtFwupDownLoadStart_1
    525                  {
    526                      //FWUP_PRINT("HTTP Send Failed: %x\r\n", retVal);
    527                      goto AppS2w_ExtFwupDownLoadStart_Exit;
    528                  }
    529          
    530          
    531                  if(NULL != pHttpRxDataBuf)
   \   00000082   0x9801             LDR      R0,[SP, #+4]
   \   00000084   0xB188             CBZ.N    R0,??AppS2w_ExtFwupDownLoadStart_3
    532                  {
    533                      /* check the status */
    534                      if(GSN_FAILURE == AppS2w_FwupExtFlashCheckStatus(&otafuPullCtx->fwupCtx, (INT8 **)&pHttpRxDataBuf, &httpRxDataLen))
   \   00000086   0xAA02             ADD      R2,SP,#+8
   \   00000088   0xA901             ADD      R1,SP,#+4
   \   0000008A   0x4628             MOV      R0,R5
   \   0000008C   0x.... 0x....      BL       AppS2w_FwupExtFlashCheckStatus
   \   00000090   0xF110 0x4F00      CMN      R0,#-2147483648
   \   00000094   0xBF08             IT       EQ 
   \   00000096   0x46B8             MOVEQ    R8,R7
    535                      {
    536                          retVal = GSN_FAILURE;
    537                          //FWUP_PRINT("Failure2\r\n");
    538                          goto AppS2w_ExtFwupDownLoadStart_Exit;
   \   00000098   0xD00B             BEQ.N    ??AppS2w_ExtFwupDownLoadStart_1
    539                      }
    540          #ifdef ADK_OTAFU_DSV
    541          			GsnOtafuDsv_Sha1Update(&otafuPullCtx->otafuDsvCtx, pHttpRxDataBuf, httpRxDataLen);
    542          #endif
    543                      /* Write recieved chunk to external flash */
    544                      retVal = GsnFwup_DownLoad(&otafuPullCtx->fwupCtx, (UINT8 *)pHttpRxDataBuf, httpRxDataLen);
   \   0000009A   0x9A02             LDR      R2,[SP, #+8]
   \   0000009C   0x9901             LDR      R1,[SP, #+4]
   \   0000009E   0x4628             MOV      R0,R5
   \   000000A0   0x.... 0x....      BL       GsnFwup_DownLoad
   \   000000A4   0xEA5F 0x0800      MOVS     R8,R0
    545          
    546                      if(retVal != GSN_SUCCESS)
   \   000000A8   0xD103             BNE.N    ??AppS2w_ExtFwupDownLoadStart_1
    547                      {
    548                          //FWUP_PRINT("Dwnd Failed = %d\r\n", retVal);
    549                          goto AppS2w_ExtFwupDownLoadStart_Exit;
    550                      }
    551                  }
    552          
    553          
    554          #ifndef ADK_OTAFU_DSV
    555                  retVal = GsnFwup_DownLoadEnd(&otafuPullCtx->fwupCtx);
   \                     ??AppS2w_ExtFwupDownLoadStart_3:
   \   000000AA   0x4628             MOV      R0,R5
   \   000000AC   0x.... 0x....      BL       GsnFwup_DownLoadEnd
   \   000000B0   0x4680             MOV      R8,R0
    556          #endif
    557          
    558                  if(retVal != GSN_SUCCESS)
    559                  {
    560                      //FWUP_PRINT("Dwnd End Failed = %d\r\n", retVal);
    561                      goto AppS2w_ExtFwupDownLoadStart_Exit;
    562                  }
    563          
    564              }
    565          AppS2w_ExtFwupDownLoadStart_Exit:
    566              if(pHttpRxDataBuf != NULL)
   \                     ??AppS2w_ExtFwupDownLoadStart_1:
   \   000000B2   0x9801             LDR      R0,[SP, #+4]
   \   000000B4   0xB108             CBZ.N    R0,??AppS2w_ExtFwupDownLoadStart_0
    567                  gsn_free(pHttpRxDataBuf);
   \   000000B6   0x.... 0x....      BL       GsnDynMemMgmt_Free
    568          
    569          #ifdef ADK_OTAFU_DSV
    570          		GsnOtafuDsv_Sha1Finish(&otafuPullCtx->otafuDsvCtx);
    571          #endif
    572              return retVal;
   \                     ??AppS2w_ExtFwupDownLoadStart_0:
   \   000000BA   0x4640             MOV      R0,R8
   \   000000BC   0xB004             ADD      SP,SP,#+16
   \   000000BE   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    573          }
    574          
    575          #ifdef ADK_OTAFU_DSV
    576          PRIVATE GSN_STATUS
    577          AppS2w_ExtFwupDownLoadDsv(GSN_HTTPC_CONN_HANDLE pHttpsConn,                     
    578          			  GSN_OTAFU_PULL_CTX_T *otafuPullCtx,
    579                                    UINT8 *url)
    580          {
    581              UINT8 *pHttpRxDataBuf = NULL;
    582              UINT32 httpRxDataLen, retVal = GSN_FAILURE;
    583          
    584              /* allocate Buffer for recieving firmware */
    585              pHttpRxDataBuf = gsn_malloc(1024);
    586          
    587              if(pHttpRxDataBuf == NULL)
    588              {
    589                  retVal = GSN_FAILURE;
    590                  //FWUP_PRINT("Failure1\r\n");
    591                  goto AppS2w_ExtFwupDownLoadStart_Exit;
    592              }
    593              memset(pHttpRxDataBuf, 0, 1024);
    594              httpRxDataLen = 1024;
    595          
    596              if(url != NULL)
    597              {
    598                  httpConfInfo.reqPathPtr = (INT8 *)url;       //page to be opened
    599                  /* set configuration to GET the Binary*/
    600                  httpConfInfo.reqMethod = GSN_HTTP_METHOD_GET;  //Request method
    601                  httpConfInfo.reqBodyLen = 0;           //Request body len
    602                  httpConfInfo.reqBodyTotalLen = 0;      //Request body total len
    603          
    604                  /* register call back function to process recieved part of firmware */
    605                  httpConfInfo.rxBufferMgmtCb = AppS2w_FwupExtFlashSignRxCb;
    606                  httpConfInfo.reqBodyPtr = NULL;              //Request body pointer
    607          
    608                  httpConfInfo.rxBufferMgmtCbCtx = otafuPullCtx;
    609          
    610          		/*Make all the custom headers types as 255 - This is done to coply withi the ROM code which is
    611          		compiled with header type array being defined as array of UINT8 */
    612          		{
    613          			UINT8 i;
    614          			for( i = 0; i < S2W_HTTPC_MAX_HDR_SUPPORTED; i++)
    615          	        {
    616          	        	if(headerTypes[i] >= (GSN_HTTP_USER_HEADER_TYPE_T)S2W_HTTPC_CFG_PARAM_HEADER_CUSTOM)
    617          				{
    618          					headerTypesModified[i] = (GSN_HTTP_USER_HEADER_TYPE_T)TM_HTTP_HEADER_CUSTOM;
    619          				}
    620          				else
    621          				{
    622          	        		headerTypesModified[i] = headerTypes[i];
    623          				}
    624          	        }
    625          		}
    626          		/* Send Data */
    627          		
    628          		retVal = GsnHttp_Send(pHttpsConn, (INT8 *)pHttpRxDataBuf,
    629                                 &httpRxDataLen, APP_S2W_FWUP_HTTP_TIMEOUT, &httpConfInfo);
    630          
    631                  if(retVal != GSN_SUCCESS)
    632                  {
    633                      //FWUP_PRINT("HTTP Send Failed: %x\r\n", retVal);
    634                      goto AppS2w_ExtFwupDownLoadStart_Exit;
    635                  }
    636          
    637                  if(NULL != pHttpRxDataBuf)
    638                  {
    639                      /* check the status */
    640                      if(GSN_FAILURE == AppS2w_FwupExtFlashCheckStatus(&otafuPullCtx->fwupCtx, (INT8 **)&pHttpRxDataBuf, &httpRxDataLen))
    641                      {
    642                          retVal = GSN_FAILURE;
    643                          //FWUP_PRINT("Failure2\r\n");
    644                          goto AppS2w_ExtFwupDownLoadStart_Exit;
    645                      }
    646          
    647                      /* Write recieved chunk to external flash */
    648          			
    649          			retVal = GsnOtafuDsv_SignUpdate(&otafuPullCtx->otafuDsvCtx, pHttpRxDataBuf, httpRxDataLen);
    650          
    651                      if(retVal != GSN_SUCCESS)
    652                      {                
    653          				FWUP_PRINT("\r\nInvalid Signature\r\n", retVal);             
    654                          goto AppS2w_ExtFwupDownLoadStart_Exit;
    655                      }
    656                  }
    657          		
    658              }
    659          	
    660          AppS2w_ExtFwupDownLoadStart_Exit:
    661              if(pHttpRxDataBuf != NULL)
    662                  gsn_free(pHttpRxDataBuf);
    663              return retVal;
    664          }
    665          #endif
    666          

   \                                 In section .text, align 2, keep-with-next
    667          PUBLIC GSN_STATUS
    668          APPS2w_ExtFlashStart( S2W_OTA_FWUP_CONF_T *pOtaFwupConf)
    669          {
   \                     APPS2w_ExtFlashStart:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB0A3             SUB      SP,SP,#+140
   \   00000004   0x4605             MOV      R5,R0
    670              UINT32  retVal = GSN_FAILURE, status;
   \   00000006   0xF04F 0x4400      MOV      R4,#-2147483648
    671          	GSN_OTAFU_PULL_CTX_T otafuPullCtx;
    672          	UINT8 tmp[20] = {0};
   \   0000000A   0xA807             ADD      R0,SP,#+28
   \   0000000C   0x2114             MOVS     R1,#+20
   \   0000000E   0x.... 0x....      BL       __aeabi_memclr4
    673          	struct sockaddr_storage sockAddr = {0};
   \   00000012   0xA800             ADD      R0,SP,#+0
   \   00000014   0x211C             MOVS     R1,#+28
   \   00000016   0x.... 0x....      BL       __aeabi_memclr4
    674          	memset(&otafuPullCtx, 0, sizeof(GSN_OTAFU_PULL_CTX_T));
   \   0000001A   0x225C             MOVS     R2,#+92
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0xA80C             ADD      R0,SP,#+48
   \   00000020   0x.... 0x....      BL       memset
    675          
    676              /*Initialise ext flash */
    677              if(GSN_SUCCESS != GsnFwup_Init(&otafuPullCtx.fwupCtx))
   \   00000024   0xA80C             ADD      R0,SP,#+48
   \   00000026   0x.... 0x....      BL       GsnFwup_Init
   \   0000002A   0x2800             CMP      R0,#+0
   \   0000002C   0xD157             BNE.N    ??APPS2w_ExtFlashStart_0
    678              {
    679              	FWUP_PRINT("\r\nExternal flash init failed\n\r");
    680                  return GSN_FAILURE;
    681              }
    682          
    683          #ifdef ADK_OTAFU_DSV	
    684          	if(GSN_SUCCESS != GsnOtafuDsv_Init(&otafuPullCtx.otafuDsvCtx))
    685              {
    686              	FWUP_PRINT("\r\nExternal flash init failed\n\r");
    687                  return GSN_FAILURE;
    688              }
    689          	otafuPullCtx.otafuDsvCtx.rootCertName = "B:/certs/OTAFU_DSV_ROOT_CERT";
    690          	otafuPullCtx.otafuDsvCtx.serverCertName = "B:/certs/OTAFU_DSV_CERT";
    691          	if(!s2wappMainTaskCtxt->fsInit)
    692              {
    693          		App_FsInit();
    694          		s2wappMainTaskCtxt->fsInit = TRUE;
    695                  f_enterFS();
    696          	}
    697          #endif
    698          
    699          #ifdef S2W_FACT_IMAGE_REQ
    700              GsnFwup_FactImgReqSet(&otafuPullCtx.fwupCtx);
   \   0000002E   0xA80C             ADD      R0,SP,#+48
   \   00000030   0x.... 0x....      BL       GsnFwup_FactImgReqSet
    701          #else
    702              GsnFwup_FactImgReqClear(&otafuPullCtx.fwupCtx);
    703          #endif
    704              if(pOtaFwupConf->proxyFlag == 1)
   \   00000034   0xF895 0x0038      LDRB     R0,[R5, #+56]
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD103             BNE.N    ??APPS2w_ExtFlashStart_1
    705              {
    706                  memcpy((INT8 *)&sockAddr, (INT8*)&pOtaFwupConf->proxySockAddr, sizeof(pOtaFwupConf->proxySockAddr));
   \   0000003C   0x221C             MOVS     R2,#+28
   \   0000003E   0xF105 0x011C      ADD      R1,R5,#+28
   \   00000042   0xE023             B.N      ??APPS2w_ExtFlashStart_2
    707              }
    708              else if(pOtaFwupConf->fwSrvHostName != NULL)
   \                     ??APPS2w_ExtFlashStart_1:
   \   00000044   0x6DE8             LDR      R0,[R5, #+92]
   \   00000046   0xB1F8             CBZ.N    R0,??APPS2w_ExtFlashStart_3
    709              	{
    710                  GSN_STATUS status;
    711          
    712                  GsnNwIf_DnsRetryCountSet(&appCtx.if0.nwifCtx.dnsCliHndl,APP_S2W_FWUP_DNS_REQ_DEF_RETRIES);
   \   00000048   0x....             LDR.N    R6,??DataTable8_9
   \   0000004A   0xF506 0x5068      ADD      R0,R6,#+14848
   \   0000004E   0x2103             MOVS     R1,#+3
   \   00000050   0x303C             ADDS     R0,R0,#+60
   \   00000052   0x.... 0x....      BL       nx_dns_retry_count_set
    713                  status = GsnNwIf_DnsHostByNameGet(&appCtx.if0.nwifCtx, (UINT8*)pOtaFwupConf->fwSrvHostName, &pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr, APP_S2W_FWUP_DNS_REQ_DEF_TIME_OUT);
    714          
    715                  if (status == GSN_SUCCESS)
   \   00000056   0x6DE9             LDR      R1,[R5, #+92]
   \   00000058   0xF506 0x50A0      ADD      R0,R6,#+5120
   \   0000005C   0x2305             MOVS     R3,#+5
   \   0000005E   0x1D2A             ADDS     R2,R5,#+4
   \   00000060   0x3050             ADDS     R0,R0,#+80
   \   00000062   0x.... 0x....      BL       GsnNwIf_DnsHostByNameGet
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xD13C             BNE.N    ??APPS2w_ExtFlashStart_4
    716                  {
    717                      pOtaFwupConf->sockAddr.addr.ipv4.sin_family = AF_INET;
   \   0000006A   0x2002             MOVS     R0,#+2
   \   0000006C   0x8028             STRH     R0,[R5, #+0]
    718                      pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr = htonl(pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr);
   \   0000006E   0x6868             LDR      R0,[R5, #+4]
   \   00000070   0x0A01             LSRS     R1,R0,#+8
   \   00000072   0xF401 0x417F      AND      R1,R1,#0xFF00
   \   00000076   0xEA41 0x6110      ORR      R1,R1,R0, LSR #+24
   \   0000007A   0xF400 0x427F      AND      R2,R0,#0xFF00
   \   0000007E   0xEA41 0x2102      ORR      R1,R1,R2, LSL #+8
   \   00000082   0xEA41 0x6000      ORR      R0,R1,R0, LSL #+24
   \   00000086   0x6068             STR      R0,[R5, #+4]
    719                      FWUP_PRINT("IP: %x\n\r", pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr);
    720                  }
    721                  else
    722                  {
    723          #ifdef S2W_IPv6_SUPPORT            
    724                      NXD_ADDRESS     host_ipduo_address;
    725                      status = nxd_dns_host_by_name_get(&appCtx.if0.nwifCtx.dnsCliHndl,(UINT8*)pOtaFwupConf->fwSrvHostName, &host_ipduo_address, APP_S2W_FWUP_DNS_REQ_DEF_TIME_OUT*100, 0x6);
    726          #endif                
    727                      if (status != GSN_SUCCESS)
    728          			{
    729          				FWUP_PRINT("\r\nFWUP server Host Name not found\n\r");
    730                          return S2W_FAILURE;
    731          			}
    732          #ifdef S2W_IPv6_SUPPORT    
    733                      memcpy(pOtaFwupConf->sockAddr.addr.ipv6.sin6_addr.s6_addr32, host_ipduo_address.nxd_ip_address.v6, sizeof(host_ipduo_address.nxd_ip_address.v6));
    734                      pOtaFwupConf->sockAddr.addr.ipv6.sin6_family = AF_INET6;
    735                      FWUP_PRINT("\r\n%x:%x:%x:%x:%x:%x:%x:%x\r\n",*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+1),*((UINT16*)host_ipduo_address.nxd_ip_address.v6),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+3),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+2),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+5),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+4),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+7),*(((UINT16*)host_ipduo_address.nxd_ip_address.v6)+6)); 
    736          #endif                
    737              	}
    738                  memcpy((INT8 *)&sockAddr, (INT8*)&pOtaFwupConf->sockAddr, sizeof(pOtaFwupConf->sockAddr));
    739              }
    740              else
    741              {
    742                  memcpy((INT8 *)&sockAddr, (INT8*)&pOtaFwupConf->sockAddr, sizeof(pOtaFwupConf->sockAddr));
   \                     ??APPS2w_ExtFlashStart_3:
   \   00000088   0x221C             MOVS     R2,#+28
   \   0000008A   0x4629             MOV      R1,R5
   \                     ??APPS2w_ExtFlashStart_2:
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x.... 0x....      BL       memcpy
    743              }
    744              /*store the  CONNECT request path*/
    745              if(pOtaFwupConf->sslFlag && pOtaFwupConf->proxyFlag &&
    746                  (NULL == OtaFwupConfParam.connectReqatPath))
   \   00000092   0xF895 0x0039      LDRB     R0,[R5, #+57]
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xBF1C             ITT      NE 
   \   0000009A   0xF895 0x0038      LDRBNE   R0,[R5, #+56]
   \   0000009E   0x2800             CMPNE    R0,#+0
   \   000000A0   0xD005             BEQ.N    ??APPS2w_ExtFlashStart_5
   \   000000A2   0x....             LDR.N    R0,??DataTable8_4
   \   000000A4   0x6D81             LDR      R1,[R0, #+88]
   \   000000A6   0xB911             CBNZ.N   R1,??APPS2w_ExtFlashStart_5
    747              {
    748          
    749                  OtaFwupConfParam.connectReqatPath = (UINT8 *)httpConfInfo.reqPathPtr;
   \   000000A8   0x....             LDR.N    R1,??DataTable8_3
   \   000000AA   0x6849             LDR      R1,[R1, #+4]
   \   000000AC   0x6581             STR      R1,[R0, #+88]
    750              }
    751          
    752              AppS2wHal_RadioModeConfig(1);
   \                     ??APPS2w_ExtFlashStart_5:
   \   000000AE   0x2001             MOVS     R0,#+1
   \   000000B0   0x.... 0x....      BL       AppS2wHal_RadioModeConfig
    753          
    754          #ifdef ADK_OTAFU_DSV	
    755              {
    756          		/* Download Digital Signature */
    757                  httpsConn = AppS2w_FwupExtFlashConnOpen(&sockAddr, pOtaFwupConf);
    758          
    759                  if(NULL == httpsConn)
    760                  {
    761                      retVal = GSN_FAILURE;
    762                  	goto APPS2w_ExtFlashStart_Exit;
    763                  }
    764          #if defined(S2W_SSL_CLIENT_SUPPORT)	
    765                  if(pOtaFwupConf->sslFlag && (pOtaFwupConf->fwSrvHostName != NULL))
    766                  {
    767                      status = AppS2wHal_HttpCheckDns(pOtaFwupConf->fwSrvHostName);
    768                      if((pOtaFwupConf->dnsError) && (S2W_SUCCESS != status))
    769                      {
    770                          if(NULL != s2wSslConf.dnsNameBuf)
    771                          {
    772                          	gsn_free(s2wSslConf.dnsNameBuf);
    773                          	s2wSslConf.dnsNameBuf = NULL;
    774                          	s2wSslConf.dnsBufferLen = 0;
    775                          }
    776                          retVal = GSN_FAILURE;
    777                          GsnHttp_Close(httpsConn);
    778                      	goto APPS2w_ExtFlashStart_Exit;
    779                      }
    780                  }
    781                  else if((pOtaFwupConf->sslFlag) && (s2wSslConf.dnsNameBuf))
    782                  {
    783          
    784                  	inet_ntop(AF_INET,&(pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr), tmp, sizeof(tmp));
    785                      status = AppS2wHal_HttpCheckDns(tmp);
    786                      if((pOtaFwupConf->dnsError) && (S2W_SUCCESS != status))
    787                      {
    788                          if(NULL != s2wSslConf.dnsNameBuf)
    789                          {
    790                          	gsn_free(s2wSslConf.dnsNameBuf);
    791                          	s2wSslConf.dnsNameBuf = NULL;
    792                          	s2wSslConf.dnsBufferLen = 0;
    793                          }
    794                          retVal = GSN_FAILURE;
    795                          GsnHttp_Close(httpsConn);
    796                      	goto APPS2w_ExtFlashStart_Exit;
    797                      }
    798                  }
    799          #endif		
    800          		retVal = AppS2w_ExtFwupDownLoadDsv(httpsConn, &otafuPullCtx,
    801          					pOtaFwupConf->urls[S2W_OTAFU_URL_SIGN_IMAGE]);
    802                  if(retVal != GSN_SUCCESS)
    803                  {
    804          #if defined(S2W_SSL_CLIENT_SUPPORT)
    805                      if(NULL != s2wSslConf.dnsNameBuf)
    806                      {
    807                      	gsn_free(s2wSslConf.dnsNameBuf);
    808                      	s2wSslConf.dnsNameBuf = NULL;
    809                      	s2wSslConf.dnsBufferLen = 0;
    810                      }
    811          #endif
    812                      /* WLAN firmware download failed. Abort update */
    813          			FWUP_PRINT("\r\nDigital Signature download failed\r\n");
    814                      GsnHttp_Close(httpsConn);
    815                      goto APPS2w_ExtFlashStart_Exit;
    816                  }
    817                  GsnHttp_Close(httpsConn);
    818              }
    819          #endif
    820          
    821          	{
    822          		/* Download Firmware */	
    823          #ifdef ADK_OTAFU_DSV			
    824          		GsnOtafuDsv_Sha1Init(&otafuPullCtx.otafuDsvCtx);
    825          		if(pOtaFwupConf->proxyFlag == 1)
    826              	{
    827                  	memcpy((INT8 *)&sockAddr, (INT8*)&pOtaFwupConf->proxySockAddr, sizeof(pOtaFwupConf->proxySockAddr));
    828              	}
    829              	else
    830              	{
    831              		memcpy((INT8 *)&sockAddr, (INT8*)&pOtaFwupConf->sockAddr, sizeof(pOtaFwupConf->sockAddr));
    832              	}
    833          #endif
    834          		httpsConn = AppS2w_FwupExtFlashConnOpen(&sockAddr, pOtaFwupConf);
   \   000000B4   0x4629             MOV      R1,R5
   \   000000B6   0xA800             ADD      R0,SP,#+0
   \   000000B8   0x.... 0x....      BL       AppS2w_FwupExtFlashConnOpen
   \   000000BC   0x....             LDR.N    R6,??DataTable8_10
    835          		
    836          		if(NULL == httpsConn)
   \   000000BE   0x....             LDR.N    R7,??DataTable8_7
   \   000000C0   0x6030             STR      R0,[R6, #+0]
   \   000000C2   0xB988             CBNZ.N   R0,??APPS2w_ExtFlashStart_6
    837          		{
    838          #if defined(S2W_SSL_CLIENT_SUPPORT)
    839          	        if(NULL != s2wSslConf.dnsNameBuf)
   \   000000C4   0x6878             LDR      R0,[R7, #+4]
   \   000000C6   0xB120             CBZ.N    R0,??APPS2w_ExtFlashStart_7
    840          	        {
    841          	        	gsn_free(s2wSslConf.dnsNameBuf);
   \   000000C8   0x.... 0x....      BL       GsnDynMemMgmt_Free
    842          	        	s2wSslConf.dnsNameBuf = NULL;
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x6078             STR      R0,[R7, #+4]
    843          	        	s2wSslConf.dnsBufferLen = 0;
   \   000000D0   0x6038             STR      R0,[R7, #+0]
    844          	        }
    845          #endif
    846          			retVal = GSN_FAILURE;
    847          			goto APPS2w_ExtFlashStart_Exit;
    848          		}
    849          #if defined(S2W_SSL_CLIENT_SUPPORT)			
    850                  if(pOtaFwupConf->sslFlag && (pOtaFwupConf->fwSrvHostName != NULL))
    851                  {
    852                      status = AppS2wHal_HttpCheckDns(pOtaFwupConf->fwSrvHostName);
    853                      if((pOtaFwupConf->dnsError) && (S2W_SUCCESS != status))
    854                      {
    855                          if(NULL != s2wSslConf.dnsNameBuf)
    856                          {
    857                          	gsn_free(s2wSslConf.dnsNameBuf);
    858                          	s2wSslConf.dnsNameBuf = NULL;
    859                          	s2wSslConf.dnsBufferLen = 0;
    860                          }
    861                          retVal = GSN_FAILURE;
    862                          GsnHttp_Close(httpsConn);
    863                      	goto APPS2w_ExtFlashStart_Exit;
    864                      }
    865                  }
    866                  else if((pOtaFwupConf->sslFlag) && (s2wSslConf.dnsNameBuf))
    867                  {
    868          
    869                  	inet_ntop(AF_INET,&(pOtaFwupConf->sockAddr.addr.ipv4.sin_addr.s_addr), (char *)tmp, sizeof(tmp));
    870                      status = AppS2wHal_HttpCheckDns(tmp);
    871                      if((pOtaFwupConf->dnsError) && (S2W_SUCCESS != status))
    872                      {
    873                          if(NULL != s2wSslConf.dnsNameBuf)
    874                          {
    875                          	gsn_free(s2wSslConf.dnsNameBuf);
    876                          	s2wSslConf.dnsNameBuf = NULL;
    877                          	s2wSslConf.dnsBufferLen = 0;
    878                          }
    879                          retVal = GSN_FAILURE;
    880                          GsnHttp_Close(httpsConn);
    881                      	goto APPS2w_ExtFlashStart_Exit;
    882                      }
    883                  }
    884                  if(NULL != s2wSslConf.dnsNameBuf)
    885                  {
    886                  	gsn_free(s2wSslConf.dnsNameBuf);
    887                  	s2wSslConf.dnsNameBuf = NULL;
    888                  	s2wSslConf.dnsBufferLen = 0;
    889                  }
    890          
    891          #endif		
    892          		retVal = AppS2w_ExtFwupDownLoadStart(httpsConn, &otafuPullCtx,
    893          					pOtaFwupConf->urls[S2W_OTAFU_URL_FW_IMAGE]);
    894          		if(retVal != GSN_SUCCESS)
    895          		{
    896          			
    897          			FWUP_PRINT("\r\nFirmware download failed\r\n");
    898          			GsnHttp_Close(httpsConn);
    899          			goto APPS2w_ExtFlashStart_Exit;
    900          		}
    901          		GsnHttp_Close(httpsConn);
    902          	}
    903          	
    904              /* Close http conn */
    905              AppS2wHal_RadioModeConfig(0);
    906          
    907          #ifdef ADK_OTAFU_DSV	
    908          	
    909          	retVal = GsnOtafuDsv_Verify(&otafuPullCtx.otafuDsvCtx);
    910          	if(retVal != GSN_SUCCESS)
    911          	{
    912          		FWUP_PRINT("\r\nsiganture Mismatch\r\n");
    913          		goto APPS2w_ExtFlashStart_Exit;
    914          	}
    915          	else
    916          	{
    917                  retVal = GsnFwup_DownLoadEnd(&otafuPullCtx.fwupCtx);
    918          		if(retVal != GSN_SUCCESS)
    919          		{
    920          			FWUP_PRINT("\r\nControl block update failed\r\n");
    921          			goto APPS2w_ExtFlashStart_Exit;
    922          		}
    923          		FWUP_PRINT("\r\nFWUP Success\r\n");
    924          		GsnOtafuDsv_DeInit(&otafuPullCtx.otafuDsvCtx);
    925          	}
    926          #endif
    927          
    928              /* Downloading to external flash complete*/
    929              //S2w_Printf("\n\rResetting....");
    930              GsnSys_Reset(GSN_RESET_REASON_APP_FWUP);
    931              while(1);
    932          APPS2w_ExtFlashStart_Exit:
    933              AppS2wHal_RadioModeConfig(0);
   \                     ??APPS2w_ExtFlashStart_7:
   \   000000D2   0x2000             MOVS     R0,#+0
   \   000000D4   0x.... 0x....      BL       AppS2wHal_RadioModeConfig
    934              GsnFwup_DeInit(&otafuPullCtx.fwupCtx);
   \   000000D8   0xA80C             ADD      R0,SP,#+48
   \   000000DA   0x.... 0x....      BL       GsnFwup_DeInit
    935          	
    936          #ifdef ADK_OTAFU_DSV	
    937          	GsnOtafuDsv_DeInit(&otafuPullCtx.otafuDsvCtx);
    938          #endif
    939          	FWUP_PRINT("\r\nFirmware update failed\r\n");
    940              return retVal;
   \                     ??APPS2w_ExtFlashStart_0:
   \   000000DE   0x4620             MOV      R0,R4
   \                     ??APPS2w_ExtFlashStart_8:
   \   000000E0   0xB023             ADD      SP,SP,#+140
   \   000000E2   0xBDF0             POP      {R4-R7,PC}       ;; return
   \                     ??APPS2w_ExtFlashStart_4:
   \   000000E4   0x2001             MOVS     R0,#+1
   \   000000E6   0xE7FB             B.N      ??APPS2w_ExtFlashStart_8
   \                     ??APPS2w_ExtFlashStart_6:
   \   000000E8   0xF895 0x0039      LDRB     R0,[R5, #+57]
   \   000000EC   0xB148             CBZ.N    R0,??APPS2w_ExtFlashStart_9
   \   000000EE   0x6DE8             LDR      R0,[R5, #+92]
   \   000000F0   0xB1C8             CBZ.N    R0,??APPS2w_ExtFlashStart_10
   \   000000F2   0x.... 0x....      BL       AppS2wHal_HttpCheckDns
   \   000000F6   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   000000FA   0x2900             CMP      R1,#+0
   \   000000FC   0xBF18             IT       NE 
   \   000000FE   0x2800             CMPNE    R0,#+0
   \   00000100   0xD123             BNE.N    ??APPS2w_ExtFlashStart_11
   \                     ??APPS2w_ExtFlashStart_9:
   \   00000102   0x6878             LDR      R0,[R7, #+4]
   \   00000104   0xB120             CBZ.N    R0,??APPS2w_ExtFlashStart_12
   \   00000106   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000010A   0x2000             MOVS     R0,#+0
   \   0000010C   0x6078             STR      R0,[R7, #+4]
   \   0000010E   0x6038             STR      R0,[R7, #+0]
   \                     ??APPS2w_ExtFlashStart_12:
   \   00000110   0x6C2A             LDR      R2,[R5, #+64]
   \   00000112   0x6830             LDR      R0,[R6, #+0]
   \   00000114   0xA90C             ADD      R1,SP,#+48
   \   00000116   0x.... 0x....      BL       AppS2w_ExtFwupDownLoadStart
   \   0000011A   0x0004             MOVS     R4,R0
   \   0000011C   0xD01E             BEQ.N    ??APPS2w_ExtFlashStart_13
   \                     ??APPS2w_ExtFlashStart_14:
   \   0000011E   0x6830             LDR      R0,[R6, #+0]
   \   00000120   0x.... 0x....      BL       GsnHttp_Close
   \   00000124   0xE7D5             B.N      ??APPS2w_ExtFlashStart_7
   \                     ??APPS2w_ExtFlashStart_10:
   \   00000126   0x6878             LDR      R0,[R7, #+4]
   \   00000128   0x2800             CMP      R0,#+0
   \   0000012A   0xD0F1             BEQ.N    ??APPS2w_ExtFlashStart_12
   \   0000012C   0x2314             MOVS     R3,#+20
   \   0000012E   0xAA07             ADD      R2,SP,#+28
   \   00000130   0x1D29             ADDS     R1,R5,#+4
   \   00000132   0x2002             MOVS     R0,#+2
   \   00000134   0x.... 0x....      BL       inet_ntop
   \   00000138   0xA807             ADD      R0,SP,#+28
   \   0000013A   0x.... 0x....      BL       AppS2wHal_HttpCheckDns
   \   0000013E   0xF895 0x1060      LDRB     R1,[R5, #+96]
   \   00000142   0x2900             CMP      R1,#+0
   \   00000144   0xBF18             IT       NE 
   \   00000146   0x2800             CMPNE    R0,#+0
   \   00000148   0xD0DB             BEQ.N    ??APPS2w_ExtFlashStart_9
   \                     ??APPS2w_ExtFlashStart_11:
   \   0000014A   0x6878             LDR      R0,[R7, #+4]
   \   0000014C   0x2800             CMP      R0,#+0
   \   0000014E   0xD0E6             BEQ.N    ??APPS2w_ExtFlashStart_14
   \   00000150   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000154   0x2000             MOVS     R0,#+0
   \   00000156   0x6078             STR      R0,[R7, #+4]
   \   00000158   0x6038             STR      R0,[R7, #+0]
   \   0000015A   0xE7E0             B.N      ??APPS2w_ExtFlashStart_14
   \                     ??APPS2w_ExtFlashStart_13:
   \   0000015C   0x6830             LDR      R0,[R6, #+0]
   \   0000015E   0x.... 0x....      BL       GsnHttp_Close
   \   00000162   0x2000             MOVS     R0,#+0
   \   00000164   0x.... 0x....      BL       AppS2wHal_RadioModeConfig
   \   00000168   0x2006             MOVS     R0,#+6
   \   0000016A   0x.... 0x....      BL       GsnSys_Reset
   \                     ??APPS2w_ExtFlashStart_15:
   \   0000016E   0xE7FE             B.N      ??APPS2w_ExtFlashStart_15
    941          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x32 0x30          DC8      "200"
   \              0x30 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     otafuCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     AppOtafu_Cb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     httpConfInfo

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     OtaFwupConfParam

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     headerTypesModified

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     headerTypes

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     s2wSslConf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     AppS2w_FwupExtFlashRxCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     httpsConn

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "200">`:
   \   00000000   0x32 0x30          DC8 "200"
   \              0x30 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {{{0}}}>`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000012   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    942          
    943          #if 0
    944          xml_ota_fwup_info_t ota_fwup_info;
    945          xml_ota_fwup_gs1011m_info_t ota_fwup_gs1011;
    946          
    947          GSN_STATUS
    948          AppS2w_ExtFlashInfoXmlGet(S2W_OTA_FWUP_CONF_T *pOtaFwupConf)
    949          {
    950          	INT8 ipAddrString[20], *pHttpRxDataBuf;
    951          	UINT16 caCertLen = 0, serverPort;
    952              UINT8 *caCertAddr = NULL;
    953          	UINT32 httpRxDataLen, retVal;
    954          	S2W_IPADDR_T fwSrvIp;
    955          
    956          	if(pOtaFwupConf->proxyFlag == 1)
    957              {
    958              	/* Use proxy */
    959                  sprintf(ipAddrString,"%d.%d.%d.%d",pOtaFwupConf->proxyIp[0] ,pOtaFwupConf->proxyIp[1],
    960          									   pOtaFwupConf->proxyIp[2],pOtaFwupConf->proxyIp[3] );
    961                  serverPort = pOtaFwupConf->proxyPort;
    962              }
    963              else
    964              {
    965                  if(pOtaFwupConf->fwSrvHostName != NULL)
    966              	{
    967              		/* Fwup server host name present. */
    968          	    	S2W_DNSINFO_T dnsInfo;
    969          			UINT8 len;
    970          			memset(&dnsInfo, 0, sizeof(S2W_DNSINFO_T));
    971          	    	len = strlen((char *)pOtaFwupConf->fwSrvHostName);
    972          	        memcpy(dnsInfo.hostName, pOtaFwupConf->fwSrvHostName, len);
    973          
    974          			/* Find ip address from host name */
    975          	        retVal = AppS2wHal_DnsFind(&dnsInfo);
    976          			if(retVal != 0)
    977          			{
    978          				FWUP_PRINT("FWUP server Host Name not found\n\r");
    979          				return GSN_FAILURE;
    980          			}
    981          			sprintf(ipAddrString,"%d.%d.%d.%d",dnsInfo.ipAddr[0], dnsInfo.ipAddr[1],
    982          	    									   dnsInfo.ipAddr[2], dnsInfo.ipAddr[3] );
    983              	}
    984          		else if(memcmp(pOtaFwupConf->fwSrvIp, fwSrvIp, sizeof(S2W_IPADDR_T)) != 0)
    985          		{
    986          	        sprintf(ipAddrString,"%d.%d.%d.%d",pOtaFwupConf->fwSrvIp[0] ,pOtaFwupConf->fwSrvIp[1],
    987          	    									   pOtaFwupConf->fwSrvIp[2],pOtaFwupConf->fwSrvIp[3] );
    988          		}
    989                  serverPort = pOtaFwupConf->srvPort;
    990              }
    991          
    992          	if(pOtaFwupConf->sslFlag == TRUE)
    993              {
    994                  if(pOtaFwupConf->certAddr != NULL)
    995                  {
    996                      caCertLen = *(UINT16 *)pOtaFwupConf->certAddr;
    997                      caCertAddr = pOtaFwupConf->certAddr + 2;
    998                  }
    999              }
   1000          	/* Open http connection */
   1001          	httpsConn = AppS2w_FwupExtFlashConnOpen(ipAddrString, serverPort,
   1002                  pOtaFwupConf->sslFlag, caCertAddr, caCertLen, pOtaFwupConf->proxyFlag);
   1003          
   1004          	//FWUP_PRINT("httpsConn = %x\n\r", httpsConn);
   1005          	if(httpsConn == NULL)
   1006          	{
   1007          		return GSN_FAILURE;
   1008          	}
   1009          	pHttpRxDataBuf = gsn_malloc(1024);
   1010          	if(pHttpRxDataBuf == NULL)
   1011          	{
   1012          		return GSN_FAILURE;
   1013          	}
   1014              memset(pHttpRxDataBuf, 0, 1024);
   1015              httpRxDataLen = 1024;
   1016          
   1017          	httpConfInfo.reqPathPtr = (INT8 *)pOtaFwupConf->urls[3];       //page to be opened
   1018              /* set configuration to GET the Binary*/
   1019              httpConfInfo.reqMethod = GSN_HTTP_METHOD_GET;  //Request method
   1020              httpConfInfo.reqBodyLen = 0;           //Request body len
   1021              httpConfInfo.reqBodyTotalLen = 0;      //Request body total len
   1022          
   1023          	httpConfInfo.rxBufferMgmtCb = NULL;
   1024              httpConfInfo.reqBodyPtr = NULL;
   1025          
   1026          	retVal = GsnHttp_Send(httpsConn, (INT8 *)pHttpRxDataBuf,
   1027                          &httpRxDataLen, APP_S2W_FWUP_HTTP_TIMEOUT, &httpConfInfo);
   1028          	//FWUP_PRINT("%s\n\r", pHttpRxDataBuf);
   1029          	if(retVal == GSN_SUCCESS)
   1030              {
   1031              	UINT8 *ParentNodeStart, *ParentNodeEnd;
   1032          		UINT8 *pApp0, *pApp1, *pWlan, *pVer, *pNewVer, *pWebImage;
   1033          		#ifdef GS1500M
   1034          		UINT8 *pMac;
   1035          		#endif
   1036          		ParentNodeStart = (UINT8 *)pHttpRxDataBuf;
   1037          		ParentNodeEnd = (UINT8 *)pHttpRxDataBuf + httpRxDataLen - 1;
   1038          		pHttpRxDataBuf[httpRxDataLen] = 0;
   1039          		memset(&ota_fwup_info, 0, sizeof(ota_fwup_info));
   1040          
   1041          		/* Decode xml data */
   1042              	retVal = GsnXml_Decode(ParentNodeStart, ParentNodeEnd,
   1043                              (GSN_XML_COMPLEX_OBJ_T *) &xml_ota_fwup,
   1044                              (UINT8 *) &ota_fwup_info);
   1045          		/* allocate memory for urls */
   1046          		pWlan = gsn_malloc(ota_fwup_info.fwupInfo.urlWlan.len+1);
   1047          		if(pWlan == NULL)
   1048          		{
   1049          			gsn_free(pHttpRxDataBuf);
   1050          			return GSN_FAILURE;
   1051          		}
   1052          		memset(pWlan, 0, ota_fwup_info.fwupInfo.urlWlan.len+1);
   1053          
   1054          		#ifdef GS1500M
   1055          		pMac = gsn_malloc(ota_fwup_info.fwupInfo.urlMac.len+1);
   1056          		if(pMac == NULL)
   1057          		{
   1058          			gsn_free(pHttpRxDataBuf);
   1059          			return GSN_FAILURE;
   1060          		}
   1061          		memset(pMac, 0, ota_fwup_info.fwupInfo.urlMac.len+1);
   1062          		#endif
   1063          		pApp0 = gsn_malloc(ota_fwup_info.fwupInfo.urlApp0.len+1);
   1064          		if(pApp0 == NULL)
   1065          		{
   1066          			gsn_free(pHttpRxDataBuf);
   1067          			return GSN_FAILURE;
   1068          		}
   1069          		memset(pApp0, 0, ota_fwup_info.fwupInfo.urlApp0.len+1);
   1070          
   1071          		pApp1 = gsn_malloc(ota_fwup_info.fwupInfo.urlApp1.len+1);
   1072          		if(pApp1 == NULL)
   1073          		{
   1074          			gsn_free(pHttpRxDataBuf);
   1075          			return GSN_FAILURE;
   1076          		}
   1077          		memset(pApp1, 0, ota_fwup_info.fwupInfo.urlApp1.len+1);
   1078          
   1079          		pWebImage = gsn_malloc(ota_fwup_info.fwupInfo.urlWebImage.len+1);
   1080          		if(pWebImage == NULL)
   1081          		{
   1082          			gsn_free(pHttpRxDataBuf);
   1083          			return GSN_FAILURE;
   1084          		}
   1085          		memset(pWebImage, 0, ota_fwup_info.fwupInfo.urlWebImage.len+1);
   1086          
   1087          		/* Copy urls */
   1088          		memcpy(pWlan, ota_fwup_info.fwupInfo.urlWlan.ptr, ota_fwup_info.fwupInfo.urlWlan.len);
   1089          #ifdef GS1500M
   1090                 memcpy(pMac, ota_fwup_info.fwupInfo.urlMac.ptr, ota_fwup_info.fwupInfo.urlMac.len);
   1091          #endif
   1092          		memcpy(pApp0, ota_fwup_info.fwupInfo.urlApp0.ptr, ota_fwup_info.fwupInfo.urlApp0.len);
   1093          		memcpy(pApp1, ota_fwup_info.fwupInfo.urlApp1.ptr, ota_fwup_info.fwupInfo.urlApp1.len);
   1094          		memcpy(pWebImage, ota_fwup_info.fwupInfo.urlWebImage.ptr, ota_fwup_info.fwupInfo.urlWebImage.len);
   1095          		pVer = gsn_malloc(ota_fwup_info.fwupInfo.fwVersion.len+1);
   1096          		if(pVer == NULL)
   1097          		{
   1098          			gsn_free(pHttpRxDataBuf);
   1099          			return GSN_FAILURE;
   1100          		}
   1101          		memset(pVer, 0, ota_fwup_info.fwupInfo.fwVersion.len+1);
   1102          		pNewVer = gsn_malloc(ota_fwup_info.fwupInfo.newFwVersion.len+1);
   1103          		if(pNewVer == NULL)
   1104          		{
   1105          			gsn_free(pHttpRxDataBuf);
   1106          			return GSN_FAILURE;
   1107          		}
   1108          		memset(pNewVer, 0, ota_fwup_info.fwupInfo.newFwVersion.len+1);
   1109          		memcpy(pVer, ota_fwup_info.fwupInfo.fwVersion.ptr, ota_fwup_info.fwupInfo.fwVersion.len);
   1110          		memcpy(pNewVer, ota_fwup_info.fwupInfo.newFwVersion.ptr, ota_fwup_info.fwupInfo.newFwVersion.len);
   1111          #if 0
   1112          		FWUP_PRINT("\n\rfmtver: %d",ota_fwup_info.formatVer);
   1113          		FWUP_PRINT("\n\rfwVer: %s",pVer);
   1114          		FWUP_PRINT("\n\rNewfwVer: %s",pNewVer);
   1115          		FWUP_PRINT("\r\nwlan: %s\n\r", pWlan);
   1116          		#ifdef GS1500M
   1117          		FWUP_PRINT("\r\nMac: %s\n\r", pMac);
   1118          		#endif
   1119          		FWUP_PRINT("app0: %s\n\r", pApp0);
   1120          		FWUP_PRINT("app1: %s\n\r", pApp1);
   1121          		FWUP_PRINT("\r\nWebImage: %s\n\r", pWebImage);
   1122          		FWUP_PRINT("\n\rchkSumApp0: %d",ota_fwup_info.fwupInfo.chkSumApp0);
   1123          		FWUP_PRINT("\n\rchkSumApp1: %d",ota_fwup_info.fwupInfo.chkSumApp1);
   1124          		FWUP_PRINT("\n\rchkSumWlan: %d\n\r",ota_fwup_info.fwupInfo.chkSumWlan);
   1125          		#ifdef GS1500M
   1126          		FWUP_PRINT("\n\rchkSumMac: %d\n\r",ota_fwup_info.fwupInfo.chkSumMac);
   1127          		#endif
   1128          		FWUP_PRINT("\n\rBackUp: %d\n\r", ota_fwup_info.fwupInfo.backUp);
   1129          #endif
   1130          		/* Save into S2W_OTA_FWUP_CONF structure*/
   1131          		if(pOtaFwupConf->urls[S2W_OTAFU_URL_WLAN] != NULL)
   1132          			gsn_free(pOtaFwupConf->urls[S2W_OTAFU_URL_WLAN]);
   1133          		if(pOtaFwupConf->urls[S2W_OTAFU_URL_APP1] != NULL)
   1134          			gsn_free(pOtaFwupConf->urls[S2W_OTAFU_URL_APP1]);
   1135          		if(pOtaFwupConf->urls[S2W_OTAFU_URL_APP2] != NULL)
   1136          			gsn_free(pOtaFwupConf->urls[S2W_OTAFU_URL_APP2]);
   1137          		if(pOtaFwupConf->urls[S2W_OTAFU_URL_WEB] != NULL)
   1138          			gsn_free(pOtaFwupConf->urls[S2W_OTAFU_URL_WEB]);
   1139          #ifdef GS1500M
   1140          		if(pOtaFwupConf->urls[S2W_OTAFU_URL_MAC] != NULL)
   1141          					gsn_free(pOtaFwupConf->urls[S2W_OTAFU_URL_MAC]);
   1142          #endif
   1143          		pOtaFwupConf->urls[S2W_OTAFU_URL_WLAN] = pWlan;
   1144          		pOtaFwupConf->urls[S2W_OTAFU_URL_APP1] = pApp0;
   1145          		pOtaFwupConf->urls[S2W_OTAFU_URL_APP2] = pApp1;
   1146          		pOtaFwupConf->urls[S2W_OTAFU_URL_WEB] = pWebImage;
   1147          #ifdef GS1500M
   1148                  pOtaFwupConf->urls[S2W_OTAFU_URL_MAC] = pMac;
   1149          #endif
   1150          
   1151          		/* TODO copying versions */
   1152          		gsn_free(pVer);
   1153          		gsn_free(pNewVer);
   1154          	}
   1155          	gsn_free(pHttpRxDataBuf);
   1156          	GsnHttp_Close(httpsConn);
   1157          	return GSN_SUCCESS;
   1158          }
   1159          #endif
   1160          #endif
   1161          
   1162          #endif
   1163          
   1164          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
     160   APPS2w_ExtFlashStart
       160   -> AppS2wHal_HttpCheckDns
       160   -> AppS2wHal_RadioModeConfig
       160   -> AppS2w_ExtFwupDownLoadStart
       160   -> AppS2w_FwupExtFlashConnOpen
       160   -> GsnDynMemMgmt_Free
       160   -> GsnFwup_DeInit
       160   -> GsnFwup_FactImgReqSet
       160   -> GsnFwup_Init
       160   -> GsnHttp_Close
       160   -> GsnNwIf_DnsHostByNameGet
       160   -> GsnSys_Reset
       160   -> __aeabi_memclr4
       160   -> inet_ntop
       160   -> memcpy
       160   -> memset
       160   -> nx_dns_retry_count_set
      16   AppExtOtafu_Init
        16   -> AppExtFlash_Init
        16   -> GsnExtOtafu_Init
         0   -> GsnFwup_FactImgReqSet
        16   -> memset
       0   AppOtafu_Cb
         0   -- Indirect call
       8   AppOtafu_Init
         0   -> GsnFwup_FactImgReqSet
         8   -> GsnOtafu_Init
      40   AppS2w_ExtFwupDownLoadStart
        40   -> AppS2w_FwupExtFlashCheckStatus
        40   -> GsnDynMemMgmt_Alloc
        40   -> GsnDynMemMgmt_Free
        40   -> GsnFwup_DownLoad
        40   -> GsnFwup_DownLoadEnd
        40   -> GsnHttp_Send
        40   -> memset
      24   AppS2w_FwupExtFlashCheckStatus
        24   -> memcmp
      88   AppS2w_FwupExtFlashConnOpen
        88   -> GsnDynMemMgmt_Alloc
        88   -> GsnDynMemMgmt_Free
        88   -> GsnHttp_Start
        88   -> memset
      24   AppS2w_FwupExtFlashRxCb
        24   -> AppS2w_FwupExtFlashCheckStatus
        24   -> GsnFwup_DownLoad
       0   GsnFwup_FactImgReqSet
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ?<Constant "200">
      20  ?<Constant {0}>
      28  ?<Constant {{{0}}}>
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
     368  APPS2w_ExtFlashStart
      90  AppExtOtafu_Init
      18  AppOtafu_Cb
      32  AppOtafu_Init
     194  AppS2w_ExtFwupDownLoadStart
      76  AppS2w_FwupExtFlashCheckStatus
     214  AppS2w_FwupExtFlashConnOpen
      40  AppS2w_FwupExtFlashRxCb
       6  GsnFwup_FactImgReqSet
       4  httpsConn
      12  memcpy
      20  memset
     104  otafuCtx

 
   108 bytes in section .bss
    52 bytes in section .rodata
 1 114 bytes in section .text
 
 1 076 bytes of CODE  memory (+ 38 bytes shared)
    52 bytes of CONST memory
   108 bytes of DATA  memory

Errors: none
Warnings: none
