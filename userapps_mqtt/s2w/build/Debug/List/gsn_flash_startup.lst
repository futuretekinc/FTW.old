###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  14:30:55 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\gsn_flash_startup.c                #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\gsn_flash_startup.c -D             #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ -lA                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ --diag_suppress        #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\Debug\Obj\    #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\core\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\drivers\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\modules\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\rtos\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\netx_bsd_la #
#                    yer\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\main\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\src\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\hw_e #
#                    ngine_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1 #
#                    .5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\sec #
#                    urity\wpa_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp #
#                    _5.1.5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ #
#                    ncm\inc\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1. #
#                    5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ctx\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\hal\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\parser\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\config\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\otafu\inc\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\provisioning\inc\ -I  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_log\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_log\ -Ohz              #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\gsn_flash_startup.lst   #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\Obj\gsn_flash_startup.o      #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\gsn_flash_startup.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: gsn_flash_startup.c,v $
     28          *******************************************************************************/
     29          
     30          /*****************************************************************************
     31           * File Inclusions
     32           ****************************************************************************/
     33          
     34          #include "gsn_includes.h"

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioTxFifoWrite(UINT32)
   \                     GsnFlashIf_PioTxFifoWrite:
   \   00000000   0x4903             LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0  ;; 0x400e0004
   \                     ??GsnFlashIf_PioTxFifoWrite_1:
   \   00000002   0x680A             LDR      R2,[R1, #+0]
   \   00000004   0xF012 0x0201      ANDS     R2,R2,#0x1
   \   00000008   0xD0FB             BEQ.N    ??GsnFlashIf_PioTxFifoWrite_1
   \   0000000A   0x4902             LDR.N    R1,??GsnFlashIf_PioTxFifoWrite_0+0x4  ;; 0x400e0400
   \   0000000C   0x6008             STR      R0,[R1, #+0]
   \   0000000E   0x4770             BX       LR               ;; return
   \                     ??GsnFlashIf_PioTxFifoWrite_0:
   \   00000010   0x400E0004         DC32     0x400e0004
   \   00000014   0x400E0400         DC32     0x400e0400

   \                                 In section .text, align 4
   \   __interwork __softfp UINT32 GsnFlashIf_PioRxFifoRead()
   \                     GsnFlashIf_PioRxFifoRead:
   \   00000000   0x4804             LDR.N    R0,??GsnFlashIf_PioRxFifoRead_0  ;; 0x400e0004
   \                     ??GsnFlashIf_PioRxFifoRead_1:
   \   00000002   0x6801             LDR      R1,[R0, #+0]
   \   00000004   0xF3C1 0x0180      UBFX     R1,R1,#+2,#+1
   \   00000008   0x2900             CMP      R1,#+0
   \   0000000A   0xD1FA             BNE.N    ??GsnFlashIf_PioRxFifoRead_1
   \   0000000C   0x4802             LDR.N    R0,??GsnFlashIf_PioRxFifoRead_0+0x4  ;; 0x400e0408
   \   0000000E   0x6800             LDR      R0,[R0, #+0]
   \   00000010   0x4770             BX       LR               ;; return
   \   00000012   0xBF00             Nop      
   \                     ??GsnFlashIf_PioRxFifoRead_0:
   \   00000014   0x400E0004         DC32     0x400e0004
   \   00000018   0x400E0408         DC32     0x400e0408

   \                                 In section .text, align 2
   \   __interwork __softfp UINT32 GsnFlashIf_FlashStatusRead()
   \                     GsnFlashIf_FlashStatusRead:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000010   0x2005             MOVS     R0,#+5
   \   00000012   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000016   0x.... 0x....      BL       GsnFlashIf_PioRxFifoRead
   \   0000001A   0x9001             STR      R0,[SP, #+4]
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0xA801             ADD      R0,SP,#+4
   \   00000020   0x6802             LDR      R2,[R0, #0]
   \   00000022   0x600A             STR      R2,[R1, #+0]
   \   00000024   0x4610             MOV      R0,R2
   \   00000026   0xBD0E             POP      {R1-R3,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_FlashStatusWrite(UINT32, UINT32)
   \                     GsnFlashIf_FlashStatusWrite:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
   \   00000006   0x2003             MOVS     R0,#+3
   \   00000008   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000012   0x2006             MOVS     R0,#+6
   \   00000014   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \                     ??GsnFlashIf_FlashStatusWrite_0:
   \   00000018   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   0000001C   0x0780             LSLS     R0,R0,#+30
   \   0000001E   0xD5FB             BPL.N    ??GsnFlashIf_FlashStatusWrite_0
   \   00000020   0x2003             MOVS     R0,#+3
   \   00000022   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000002C   0x2001             MOVS     R0,#+1
   \   0000002E   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000032   0x4620             MOV      R0,R4
   \   00000034   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \                     ??GsnFlashIf_FlashStatusWrite_1:
   \   00000038   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   0000003C   0x0780             LSLS     R0,R0,#+30
   \   0000003E   0xD4FB             BMI.N    ??GsnFlashIf_FlashStatusWrite_1
   \   00000040   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_HpmReset()
   \                     GsnFlashIf_HpmReset:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0xE8BD 0x4002      POP      {R1,LR}
   \   00000012   0x20FF             MOVS     R0,#+255
   \   00000014   0x.... 0x....      B.W      GsnFlashIf_PioTxFifoWrite
     35          
     36          
     37          
     38          #ifdef APP_NO_FLASHFETCH
     39          
     40          #define GSN_ROM_PATCH_FPT_LOCATION 0x20004000 /* 0x20004000 Location in RAM where the ROM
     41                                                        function pointers has to be copied */
     42          #define START_OF_SRAM 0x20000000
     43          #define END_OF_SRAM   0x2007FFFF
     44          
     45          #define APP_CODE_START          0x20040000
     46          #define ROM_PATCH_AUTO_SECTION_LENGTH 0x2000
     47          #define CONTROL_BLOCK_SIZE 0x1000
     48          
     49          #pragma section = "BSS_SECTION"       /* Points to the BSS segment of FLASH code */
     50          #pragma section = "DATA_SECTION"      /* Points to the DATA section of FLASH code */
     51          #pragma section = "APP_READWRITE_SECTION"      /* Points to the readwrite section of FLASH code */
     52          #pragma section = "DATA_INIT_SECTION" /* Points to the DATA INIT section of FLASH code */
     53          
     54          #pragma section = "ROM_PATCH_FPT_SECTION" /* Points to the ROM PATCH FPT section in FLASH code */
     55          #pragma section = "APP_CODE_SECTION" /* Points to the APP CODE section in FLASH code */
     56          #pragma section = "ROM_PATCH_AUTO" /* Points to the ROM PATCH section in FLASH code */
     57          #pragma section = "FREE_MEM" /* Points to the ROM PATCH section in FLASH code */
     58          
     59          /* These two varibales are part of ROM code */
     60          #define APP_STARTUP_COPY_PROG( src, len, dst ) memcpy((char*)dst, (char*)src, len);
     61          
     62          //UINT32 romFwImageFlashAddr;
     63          /*
     64          Different memory section placed in SRAM is given below
     65                _________________________________________ 0x20000000
     66          	|                                       |
     67              |   16KB reserved for ROM PATCH AUTO    |
     68              |                                       |
     69              |---------------------------------------|
     70              |                                       |
     71              |   8KB reserved for ROM PATCH FPT      |
     72              |                                       |
     73              |---------------------------------------|
     74              |                                       |
     75              |   8KB reserved for predefined heap    |
     76              |             ( Heap 1)                 |
     77              |---------------------------------------|
     78              |                                       |
     79              |   				                    |
     80              |	CSTACK,								|
     81              |                                       |
     82              |   (APP + ROM )data section            |
     83              |                                       |
     84              |---------------------------------------|
     85              |                                       |
     86              |   Heap 2                              |
     87              |                                       |
     88              |---------------------------------------|
     89              |                                       |
     90              |   App Code                            |
     91              |                                       |
     92              |---------------------------------------|
     93              |                                       |
     94              |   Heap 3                              |
     95              |                                       |
     96              |---------------------------------------| 0x2007FFFF
     97          
     98          */
     99          
    100          /* This marks the start of free memory available for byte-pool creation */
    101          __no_init int GsnSramFreeMem @ "FREE_MEM";
    102          GSN_BYTE_POOL_LINK_T bytePool[5];
    103          
    104          #define WORD_ALIGNED_ADDR(a)	(((a) & (~0x3)) + 0x4)
    105          
    106          #define REUSE_ROM_REGION_1_START      0x20006f49//(((0x20006f49) & (~0x3)) + 0x4)
    107          #define REUSE_ROM_REGION_1_END        0x2000ae88//(((0x20006f49) & (~0x3)) + 0x4)
    108          
    109          #define REUSE_ROM_REGION_2_START      0x2000b7a5//(((0x200067a5) & (~0x3)) + 0x4)
    110          #define REUSE_ROM_REGION_2_END        0x2000fb2c//(((0x200067a5) & (~0x3)) + 0x4)
    111          
    112          #define swap(a,b)    {tmp = a; a = b; b = tmp;}
    113          
    114          #define SRAM_START_ADDR				0x20000000
    115          #define SRAM_END_ADDR				0x2007FFFF /* 512 + 64 KB*/
    116          
    117          VOID 
    118          App_IdleHandlerLoop(VOID);
    119          
    120          INT32
    121          App_Main( void );
    122          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value );
    123          #pragma section = "APP_STARTUP_SECTION"
    124          #pragma location="APP_STARTUP_SECTION"
    125          
    126          /* Make sure that this function is at 0x20000000, don't initialize any
    127             local variable while declaring in this function */
    128          void GsnStartup_Main( void )
    129          {
    130              unsigned int* bssEnd = __section_end("BSS_SECTION");
    131              unsigned int* bssStart = __section_begin("BSS_SECTION");
    132              unsigned int* dataEnd = __section_end("DATA_SECTION");
    133              unsigned int* dataStart = __section_begin("DATA_SECTION");
    134              unsigned int* dataInitStart = __section_begin("DATA_INIT_SECTION");
    135              unsigned int* romPatchFptEnd = __section_end("ROM_PATCH_FPT_SECTION");
    136              unsigned int* romPatchFptStart = __section_begin("ROM_PATCH_FPT_SECTION");
    137              unsigned int* appCodeEnd = __section_end("APP_CODE_SECTION");
    138              unsigned int* appCodeStart = (unsigned int*)APP_CODE_START;
    139              unsigned int length, src, dst,  heap1Start, heap2Start;
    140          
    141              int heap1Length, heap2Length;
    142          
    143          
    144          	/* 2. Copy from flash to initialize the "initialised data" in data	segment.
    145              The Data init secion can be used as heap once the below copy is done. For
    146              now we are not doing this  */
    147          	length = (unsigned int)( dataEnd )- (unsigned int)(dataStart);
    148          	src = (unsigned int)dataInitStart; /* Location in Flash */
    149          	dst = (unsigned int)dataStart; /* RAM location to copy, i.e. the DATA section */
    150              APP_STARTUP_COPY_PROG(src, length, dst);
    151          	
    152          	/*
    153               * Copy patch function pointers from the flash to the SRAM.
    154                 The ROM PATCH secion can be used as heap once the below copy is done. For
    155                 now we are not doing this. ROM PATCH and DATA INIT section seems to be
    156                 contiguous. So both the section can be clubed to one and can be made as
    157                 one single  heap  */
    158              length = (unsigned int)( romPatchFptEnd )- (unsigned int)(romPatchFptStart);
    159              src = (unsigned int)romPatchFptStart;/* Location in Flash for ROM PATCH FPT */
    160              dst = GSN_ROM_PATCH_FPT_LOCATION;/* RAM location to copy */
    161              APP_STARTUP_COPY_PROG(src, length,  dst );
    162          
    163          
    164          	/* Won't be copying the APP code. Calculate the heap at the end*/
    165          	heap1Start = (((unsigned int)&GsnSramFreeMem) & ~0x3) + 0x8;
    166          	heap1Length = (unsigned int)(appCodeStart)  - heap1Start;
    167          	if( heap1Length < 0 )
    168          	{
    169          		/* ERROR APP CODE Section is more than what it can fit in the SRAM. */
    170          		while(1);
    171          	}
    172          	heap2Start = (((unsigned int)appCodeEnd) & ~0x3) + 0x8;
    173          	heap2Length = SRAM_END_ADDR - heap2Start;
    174          
    175          	
    176          	/*
    177          	* Initialize BSS segment.
    178          	*/
    179              /* 1. memset uninitailize data.*/
    180              src = (unsigned int)bssStart;
    181              length = (unsigned int)( bssEnd )- (unsigned int)( bssStart );
    182              memset((void*) src, 0, length );
    183          
    184          
    185              /* Initialize the free memory section to use tx byte pool for dynamic memory
    186                 allocation */
    187          	/*Note : bytePool[0] is already created in rom_main.c */
    188              tx_byte_pool_create(&bytePool[0].bPool, NULL, (void*)heap1Start,
    189                                         (UINT32)heap1Length );
    190          
    191              tx_byte_pool_create(&bytePool[1].bPool, NULL, (void*)heap2Start,
    192                                         (UINT32)heap2Length );
    193             
    194          
    195          
    196          	pGsnBytePoolHead =  ( heap2Length > heap1Length ) ?
    197          					&bytePool[1] : &bytePool[0];
    198          	pGsnBytePoolHead->pNext = ( heap2Length > heap1Length ) ?
    199          					&bytePool[0] : &bytePool[1];
    200          	pGsnBytePoolHead->pNext->pNext = NULL;
    201          
    202          
    203              /* Assign 3 SRAM blocks to wlan*/
    204              *((volatile UINT32 *)(0x40080008)) = (UINT32)0x1c;
    205          	//*((volatile UINT32 *)(0x40080008)) = (UINT32)0x78;
    206          
    207          	/* Call APP MAIN */
    208              App_Main();
    209              //while(1);
    210              App_IdleHandlerLoop();
    211          }
    212          
    213          
    214          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value )
    215          {
    216              unsigned int ret = 1;
    217              while( ret < 0x80000000 )
    218              {
    219                  if( value < ret )break;
    220                  ret <<= 1;
    221              }
    222              return ret;
    223          }
    224          
    225          #else
    226          
    227          /*****************************************************************************
    228           *Function prototypes
    229           ****************************************************************************/
    230          extern GSN_BYTE_POOL_LINK_T *pGsnBytePoolHead;
    231          extern UINT32 romFwImageFlashAddr;/* This holds the starting address of the App Fw*/
    232          extern INT32 App_Main( void );
    233          UINT32 GsnStartup_ClosestPowerOf2( unsigned int value );
    234          BOOL App_FlashIfFlashCheckAndConfigure();
    235          
    236          /*****************************************************************************
    237           *Private definitions
    238           ****************************************************************************/
    239          #pragma section = "BSS_SECTION"       /* Points to the BSS segment of FLASH code */
    240          #pragma section = "DATA_SECTION"      /* Points to the DATA section of FLASH code */
    241          #pragma section = "APP_READWRITE_SECTION"      /* Points to the readwrite section of FLASH code */
    242          #pragma section = "DATA_INIT_SECTION" /* Points to the DATA INIT section of FLASH code */
    243          
    244          #pragma section = "ROM_PATCH_FPT_SECTION" /* Points to the ROM PATCH FPT section in FLASH code */
    245          #pragma section = "APP_CODE_SECTION" /* Points to the APP CODE section in FLASH code */
    246          #pragma section = "ROM_PATCH_AUTO" /* Points to the ROM PATCH section in FLASH code */
    247          #pragma section = "FREE_MEM" /* Points to the ROM PATCH section in FLASH code */
    248          
    249          typedef struct HEAP_INFO
    250          {
    251          	UINT32 start;
    252          	UINT32 size;
    253          }HEAP_INFO_T;
    254          
    255          #define APP_STARTUP_COPY_PROG( dst, src, len) GsnFlashCache_BlkFetch( src, dst, len, NULL );
    256          
    257          #define CB1_RESERVED_SIZE			0x1000
    258          #define FPT_RESERVED_SIZE			0x2000
    259          #define GSN_STARTUP_RESERVED_SIZE	0x800
    260          
    261          #define SRAM_START_ADDR				0x20000000
    262          #define SRAM_END_ADDR				0x2007FFFF /* 512 */
    263          
    264          #define FPT_LOCATION 				0x20004000 /* 0x20004000 Location in RAM where the ROM
    265                                                       	 function pointers has to be copied */
    266          #define APP_CODE_SRAM_BLOCK1_ADDR	0x20040000 /* at 256KB */
    267          #define APP_CODE_SRAM_BLOCK1_SIZE	0x40000 /* 256KB */
    268          
    269          #define APP_CODE_SRAM_BLOCK2_ADDR	0x20080000 /* at 512KB */
    270          #define APP_CODE_SRAM_BLOCK2_SIZE	0x10000 /* 16KB */
    271          
    272          #define WORD_ALIGNED_ADDR(a)         (((UINT32)(a) & (~0x3)) + 0x4)
    273          

   \                                 In section .bss, align 4
    274          GSN_BYTE_POOL_LINK_T heapBytePool[4];/* create up to 4 byte poola to be used as heap*/
   \                     heapBytePool:
   \   00000000                      DS8 224
    275          
    276          PUBLIC UINT32
    277          AppMainCtx_IsDpSlpEnabled(VOID);
    278          
    279          VOID 
    280          App_IdleHandlerLoop(VOID);
    281          
    282          /*****************************************************************************
    283           *Function definitions
    284           ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    285          void GsnStartup_Main( void )
    286          {
   \                     GsnStartup_Main:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0xB08C             SUB      SP,SP,#+48
    287              UINT32 appFwImageFlashAddr;
    288              UINT32 sectionFlshAddr,sectionSize;
    289              HEAP_INFO_T heap[4] = {0};
   \   00000006   0xA804             ADD      R0,SP,#+16
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    290              UINT32 appCodeSramEnd;
    291              GSN_FLASHCACHE_BLK_REMAP_T remap;
    292              UINT32 remapIndx = 1;
    293              /* Program address space - Address assigned in icf file*/
    294              UINT32 *autoPatchStart = __section_begin("ROM_PATCH_AUTO");
    295              UINT32 *autoPatchEnd = __section_end("ROM_PATCH_AUTO");
    296              UINT32 *fptStart = __section_begin("ROM_PATCH_FPT_SECTION");
    297              UINT32 *fptEnd = __section_end("ROM_PATCH_FPT_SECTION");
    298              UINT32 *bssStart = __section_begin("BSS_SECTION");
    299              UINT32 *bssEnd = __section_end("BSS_SECTION");
    300              UINT32 *dataStart = __section_begin("DATA_SECTION");
    301             // UINT32 *dataEnd = __section_end("DATA_SECTION");
    302              UINT32 *appCodeStart = __section_begin("APP_CODE_SECTION");
    303              UINT32 *appCodeEnd = __section_end("APP_CODE_SECTION");
    304              UINT32 *dataInitStart = __section_begin("DATA_INIT_SECTION");
    305              UINT32 *dataInitEnd = __section_end("DATA_INIT_SECTION");
    306              UINT32 *freeMemStart = __section_begin("FREE_MEM");
    307          
    308          #if 0
    309              volatile UINT32 flag = 1;
    310              while(flag);
    311          #endif
    312          
    313              GsnRtc_SMemBank01En();
   \   0000000E   0x....             LDR.N    R0,??DataTable3  ;; 0x41000354
   \   00000010   0x....             LDR.N    R7,??DataTable3_1
   \   00000012   0x6801             LDR      R1,[R0, #+0]
   \   00000014   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000018   0x6001             STR      R1,[R0, #+0]
   \   0000001A   0x2300             MOVS     R3,#+0
   \   0000001C   0x6841             LDR      R1,[R0, #+4]
   \   0000001E   0xF021 0x0110      BIC      R1,R1,#0x10
   \   00000022   0x6041             STR      R1,[R0, #+4]
    314              GsnRtc_SMemBank2En();
   \   00000024   0x6801             LDR      R1,[R0, #+0]
   \   00000026   0xF021 0x0120      BIC      R1,R1,#0x20
   \   0000002A   0x6001             STR      R1,[R0, #+0]
   \   0000002C   0x6841             LDR      R1,[R0, #+4]
   \   0000002E   0xF021 0x0120      BIC      R1,R1,#0x20
   \   00000032   0x6041             STR      R1,[R0, #+4]
    315              GsnRtc_SMemBank34En();
   \   00000034   0x6801             LDR      R1,[R0, #+0]
   \   00000036   0xF021 0x0140      BIC      R1,R1,#0x40
   \   0000003A   0x6001             STR      R1,[R0, #+0]
   \   0000003C   0x6841             LDR      R1,[R0, #+4]
   \   0000003E   0xF021 0x0140      BIC      R1,R1,#0x40
   \   00000042   0x6041             STR      R1,[R0, #+4]
    316          
    317              appFwImageFlashAddr = romFwImageFlashAddr;
   \   00000044   0x....             LDR.N    R0,??DataTable3_2
    318              /* Copy data init section. "dataStart" gives absolute SRAM location*/
    319              sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    320                                  ((UINT32)autoPatchEnd - (UINT32)autoPatchStart ) +
    321                                  FPT_RESERVED_SIZE + GSN_STARTUP_RESERVED_SIZE +
    322                                  ((UINT32)dataInitStart - (UINT32)appCodeStart);
    323          
    324              sectionSize = (UINT32)dataInitEnd - (UINT32)dataInitStart;
    325              APP_STARTUP_COPY_PROG( (UINT32)dataStart, sectionFlshAddr, sectionSize);
   \   00000046   0x....             LDR.N    R1,??DataTable3_3
   \   00000048   0x6800             LDR      R0,[R0, #+0]
   \   0000004A   0x1808             ADDS     R0,R1,R0
   \   0000004C   0xF500 0x5080      ADD      R0,R0,#+4096
   \   00000050   0x....             LDR.N    R1,??DataTable3_4
   \   00000052   0x1A46             SUBS     R6,R0,R1
   \   00000054   0x....             LDR.N    R0,??DataTable3_5
   \   00000056   0x....             LDR.N    R1,??DataTable3_6
   \   00000058   0x1A0A             SUBS     R2,R1,R0
   \   0000005A   0x4430             ADD      R0,R0,R6
   \   0000005C   0xF500 0x5020      ADD      R0,R0,#+10240
   \   00000060   0x....             LDR.N    R1,??DataTable3_7
   \   00000062   0x1BC0             SUBS     R0,R0,R7
   \   00000064   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    326          
    327              /* Copy Function Pointer Table (FPT)*/
    328              sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    329                                  ((UINT32)autoPatchEnd - (UINT32)autoPatchStart );
    330              sectionSize = (UINT32)fptEnd - (UINT32)fptStart;
    331              APP_STARTUP_COPY_PROG( (UINT32)FPT_LOCATION, sectionFlshAddr, sectionSize);
   \   00000068   0x....             LDR.N    R0,??DataTable3_8
   \   0000006A   0x....             LDR.N    R1,??DataTable3_9
   \   0000006C   0x1A42             SUBS     R2,R0,R1
   \   0000006E   0x2300             MOVS     R3,#+0
   \   00000070   0x....             LDR.N    R1,??DataTable3_10  ;; 0x20004000
   \   00000072   0x4630             MOV      R0,R6
   \   00000074   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    332          
    333              /*Copy App code*/
    334              sectionSize = (UINT32)appCodeEnd - (UINT32)appCodeStart;
   \   00000078   0x....             LDR.N    R0,??DataTable3_11
    335          
    336              sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    337                                  ((UINT32)autoPatchEnd - (UINT32)autoPatchStart ) +
    338                                  FPT_RESERVED_SIZE + GSN_STARTUP_RESERVED_SIZE;
    339          
    340              APP_STARTUP_COPY_PROG((UINT32)APP_CODE_SRAM_BLOCK1_ADDR, sectionFlshAddr, sectionSize);
   \   0000007A   0x....             LDR.N    R5,??DataTable3_12  ;; 0x20040000
   \   0000007C   0x1BC4             SUBS     R4,R0,R7
   \   0000007E   0x2300             MOVS     R3,#+0
   \   00000080   0x4622             MOV      R2,R4
   \   00000082   0x4629             MOV      R1,R5
   \   00000084   0xF506 0x5020      ADD      R0,R6,#+10240
   \   00000088   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    341              /*remap*/
    342              remap.codeAddr = (UINT32)appCodeStart + 1;
   \   0000008C   0x1C78             ADDS     R0,R7,#+1
   \   0000008E   0x9001             STR      R0,[SP, #+4]
    343              remap.remapIndex = remapIndx++;
    344              remap.remapSize = APP_CODE_SRAM_BLOCK1_SIZE;
    345              remap.sramAddr = APP_CODE_SRAM_BLOCK1_ADDR;
   \   00000090   0x9502             STR      R5,[SP, #+8]
   \   00000092   0x2001             MOVS     R0,#+1
   \   00000094   0x9000             STR      R0,[SP, #+0]
   \   00000096   0xF44F 0x2080      MOV      R0,#+262144
   \   0000009A   0x9003             STR      R0,[SP, #+12]
    346              GsnFlashCache_BlkRemapSet(&remap);
   \   0000009C   0xA800             ADD      R0,SP,#+0
   \   0000009E   0x.... 0x....      BL       GsnFlashCache_BlkRemapSet
    347              appCodeSramEnd = APP_CODE_SRAM_BLOCK1_ADDR + sectionSize;/* Used to calculate the heapat the end*/
    348              
    349              /* Set uninitialised data section to zero*/
    350              memset((void *)bssStart, 0, ((UINT32)bssEnd- (UINT32)bssStart));
   \   000000A2   0x....             LDR.N    R0,??DataTable3_13
   \   000000A4   0x....             LDR.N    R1,??DataTable3_14
   \   000000A6   0x1A09             SUBS     R1,R1,R0
   \   000000A8   0x.... 0x....      BL       __aeabi_memclr
    351          
    352              /* Calculate the heap */
    353              heap[0].start = WORD_ALIGNED_ADDR(freeMemStart) ;//freeMemStart ;
   \   000000AC   0x....             LDR.N    R0,??DataTable3_15
    354              heap[0].size = APP_CODE_SRAM_BLOCK1_ADDR - heap[0].start;
    355          
    356              tx_byte_pool_create(&heapBytePool[0].bPool, NULL, (void*)heap[0].start,
    357                                  (UINT32)heap[0].size);
   \   000000AE   0x....             LDR.N    R7,??DataTable3_16
   \   000000B0   0x0880             LSRS     R0,R0,#+2
   \   000000B2   0x0080             LSLS     R0,R0,#+2
   \   000000B4   0x1D00             ADDS     R0,R0,#+4
   \   000000B6   0x9004             STR      R0,[SP, #+16]
   \   000000B8   0xAE04             ADD      R6,SP,#+16
   \   000000BA   0xEBA5 0x0800      SUB      R8,R5,R0
   \   000000BE   0x9A04             LDR      R2,[SP, #+16]
   \   000000C0   0xF8C6 0x8004      STR      R8,[R6, #+4]
   \   000000C4   0x4643             MOV      R3,R8
   \   000000C6   0x2100             MOVS     R1,#+0
   \   000000C8   0x1D38             ADDS     R0,R7,#+4
   \   000000CA   0x.... 0x....      BL       _tx_byte_pool_create
    358          
    359              heap[1].start  = WORD_ALIGNED_ADDR(appCodeSramEnd);//appCodeSramEnd;
   \   000000CE   0x1928             ADDS     R0,R5,R4
   \   000000D0   0x0880             LSRS     R0,R0,#+2
   \   000000D2   0x0080             LSLS     R0,R0,#+2
   \   000000D4   0x1D02             ADDS     R2,R0,#+4
    360              heap[1].size  = SRAM_END_ADDR - heap[1].start;
   \   000000D6   0x....             LDR.N    R0,??DataTable3_17  ;; 0x2007ffff
   \   000000D8   0x60B2             STR      R2,[R6, #+8]
   \   000000DA   0x1A84             SUBS     R4,R0,R2
   \   000000DC   0x60F4             STR      R4,[R6, #+12]
    361              tx_byte_pool_create(&heapBytePool[1].bPool, NULL, (void*)heap[1].start,
    362                                  (UINT32)heap[1].size);
   \   000000DE   0x4623             MOV      R3,R4
   \   000000E0   0x2100             MOVS     R1,#+0
   \   000000E2   0xF107 0x003C      ADD      R0,R7,#+60
   \   000000E6   0x.... 0x....      BL       _tx_byte_pool_create
    363          
    364              pGsnBytePoolHead =  ( heap[1].size >= heap[0].size) ?
    365                                      &heapBytePool[1] : &heapBytePool[0];
   \   000000EA   0x....             LDR.N    R0,??DataTable3_18
   \   000000EC   0x4544             CMP      R4,R8
   \   000000EE   0xBF27             ITTEE    CS 
   \   000000F0   0xF107 0x0138      ADDCS    R1,R7,#+56
   \   000000F4   0x6001             STRCS    R1,[R0, #+0]
   \   000000F6   0x6007             STRCC    R7,[R0, #+0]
   \   000000F8   0x3738             ADDCC    R7,R7,#+56
   \   000000FA   0x6801             LDR      R1,[R0, #+0]
   \   000000FC   0x600F             STR      R7,[R1, #+0]
    366              pGsnBytePoolHead->pNext = ( heap[1].size >= heap[0].size) ?
    367                                      &heapBytePool[0] : &heapBytePool[1];
    368              pGsnBytePoolHead->pNext->pNext = NULL;
   \   000000FE   0x2100             MOVS     R1,#+0
   \   00000100   0x6800             LDR      R0,[R0, #+0]
   \   00000102   0x6800             LDR      R0,[R0, #+0]
   \   00000104   0x6001             STR      R1,[R0, #+0]
    369             
    370              /* 3 blocks of 64K SRAM is released to wlan - Temporary*/
    371              *((volatile UINT32 *)(0x40080008)) = (UINT32)0x1c;
   \   00000106   0x211C             MOVS     R1,#+28
   \   00000108   0x....             LDR.N    R0,??DataTable3_19  ;; 0x40080008
   \   0000010A   0x6001             STR      R1,[R0, #+0]
    372              //*((volatile UINT32 *)(0x40080008)) = (UINT32)0x78;
    373          
    374              /* Call APP MAIN */
    375              App_Main();
   \   0000010C   0x.... 0x....      BL       App_Main
    376          #if 0    
    377              while(1)
    378              {
    379                  if((0 == GsnPwrMgmt_DpSlpActivityGet()) && 
    380                      (AppMainCtx_IsDpSlpEnabled() == 1) &&
    381                      (FALSE  == GsnSq_TaskMonitorStarted()))
    382                  {
    383                      GSN_PWR_MGMT_CM3_SLEEP_DEEP_EN();   
    384                  }
    385                  __WFI();
    386              }
    387          #endif
    388              App_IdleHandlerLoop();
   \   00000110   0x.... 0x....      BL       App_IdleHandlerLoop
    389          
    390          }
   \   00000114   0xB00C             ADD      SP,SP,#+48
   \   00000116   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    391          

   \                                 In section .text, align 2, keep-with-next
    392          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value )
    393          {
    394              unsigned int ret = 1;
   \                     GsnStartup_ClosestPowerOf2:
   \   00000000   0x2101             MOVS     R1,#+1
    395              while( ret < 0x80000000 )
    396              {
    397                  if( value < ret )break;
   \                     ??GsnStartup_ClosestPowerOf2_0:
   \   00000002   0x4288             CMP      R0,R1
   \   00000004   0xD303             BCC.N    ??GsnStartup_ClosestPowerOf2_1
    398                  ret <<= 1;
   \   00000006   0x0049             LSLS     R1,R1,#+1
    399              }
   \   00000008   0xF111 0x4F00      CMN      R1,#-2147483648
   \   0000000C   0xD3F9             BCC.N    ??GsnStartup_ClosestPowerOf2_0
    400              return ret;
   \                     ??GsnStartup_ClosestPowerOf2_1:
   \   0000000E   0x4608             MOV      R0,R1
   \   00000010   0x4770             BX       LR               ;; return
    401          }
    402          

   \                                 In section .text, align 2, keep-with-next
    403          PUBLIC UINT
    404          App_FlashIfDmaCtlSet(UINT32 dmaReadCtlWord, UINT32 dmaCmd, BOOL blocking)
    405          {
    406              GSN_STATUS_T status = GSN_SUCCESS;
    407          
    408          	/* setup dma control word register */
    409              FLASHIF_DMACTL_SET(FLASHIF, dmaReadCtlWord);
   \                     App_FlashIfDmaCtlSet:
   \   00000000   0x....             LDR.N    R2,??DataTable3_20  ;; 0x400e0008
   \   00000002   0x6010             STR      R0,[R2, #+0]
    410              /* setup dma command */
    411              FLASHIF_DMACMD_SET(FLASHIF, dmaCmd);
   \   00000004   0x6051             STR      R1,[R2, #+4]
    412          
    413          //GsnFlashIfStartup_DmaCtlSet_Exit:
    414              return status;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x4770             BX       LR               ;; return
    415          }
    416          

   \                                 In section .text, align 2, keep-with-next
    417          BOOL
    418          App_FlashIfFlashCheckAndConfigure()
    419          {
   \                     App_FlashIfFlashCheckAndConfigure:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    420              UINT32 flashId = 0, mfgId;
    421              BOOL flashExists;
    422          
    423              /* request PIO control */
    424              GsnFlashIf_PioReq();
   \   00000004   0x....             LDR.N    R4,??DataTable3_21  ;; 0x400e0410
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x6020             STR      R0,[R4, #+0]
   \                     ??App_FlashIfFlashCheckAndConfigure_0:
   \   0000000A   0x6860             LDR      R0,[R4, #+4]
   \   0000000C   0x07C0             LSLS     R0,R0,#+31
   \   0000000E   0xD5FC             BPL.N    ??App_FlashIfFlashCheckAndConfigure_0
    425          
    426              /* reset flash HPM mode */
    427              GsnFlashIf_HpmReset();
   \   00000010   0x.... 0x....      BL       GsnFlashIf_HpmReset
    428              GsnFlashIf_HpmReset();
   \   00000014   0x.... 0x....      BL       GsnFlashIf_HpmReset
    429          
    430              flashId = GsnFlashIf_FlashIdRead() & 0xFFFF;
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000001E   0x2003             MOVS     R0,#+3
   \   00000020   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000024   0x209F             MOVS     R0,#+159
   \   00000026   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000002A   0x.... 0x....      BL       GsnFlashIf_PioRxFifoRead
   \   0000002E   0xB285             UXTH     R5,R0
    431              if (flashId == 0x0000)
   \   00000030   0xB90D             CBNZ.N   R5,??App_FlashIfFlashCheckAndConfigure_1
    432              {
    433                  flashExists = FALSE;
   \   00000032   0x2600             MOVS     R6,#+0
    434                  goto GsnFlashIfStartup_FlashCheckAndConfigure_Exit;
   \   00000034   0xE056             B.N      ??App_FlashIfFlashCheckAndConfigure_2
    435              }
    436          
    437              flashExists = TRUE;
   \                     ??App_FlashIfFlashCheckAndConfigure_1:
   \   00000036   0x2601             MOVS     R6,#+1
    438          
    439              /* Release flash from deep power down mode */
    440              GsnFlashIf_DeepPowerDownRelease();
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000003E   0x2000             MOVS     R0,#+0
   \   00000040   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000044   0x20AB             MOVS     R0,#+171
   \   00000046   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
    441          
    442              /* enable quad mode for known flash devices */
    443              if (
    444                      (flashId == 0xba20) /* micron */
    445                  ||  (flashId == 0x20c2) /* macronix mx25l3235e(4MB) 3.3v */
    446                  ||  (flashId == 0x24c2) /* macronix mx25l1633e(2MB) 3.3v */
    447                  ||  (flashId == 0x25c2) /* macronix mx25u3235f(4MB), mx25u1635e(2MB) 1.8v */
    448                  ||  (flashId == 0x60c8) /* gigadevice gd25lq32(4MB), gd25lq16(2MB) 1.8v */
    449                  ||  (flashId == 0x40c8) /* gigadevice gd25q16b(2MB), gd25q32b(4MB) 3.3v */
    450                  ||  (flashId == 0x151c) /* eon en25qh16(2MB) 3.3v */
    451                  ||  (flashId == 0x301c) /* eon en25qh32(2MB) 3.3v */
    452                 )
   \   0000004A   0xF64B 0x2820      MOVW     R8,#+47648
   \   0000004E   0x4545             CMP      R5,R8
   \   00000050   0xBF1C             ITT      NE 
   \   00000052   0xF242 0x00C2      MOVWNE   R0,#+8386
   \   00000056   0x4285             CMPNE    R5,R0
   \   00000058   0xD017             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_3
   \   0000005A   0xF242 0x40C2      MOVW     R0,#+9410
   \   0000005E   0x4285             CMP      R5,R0
   \   00000060   0xBF1C             ITT      NE 
   \   00000062   0xF242 0x50C2      MOVWNE   R0,#+9666
   \   00000066   0x4285             CMPNE    R5,R0
   \   00000068   0xD00F             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_3
   \   0000006A   0xF246 0x00C8      MOVW     R0,#+24776
   \   0000006E   0x4285             CMP      R5,R0
   \   00000070   0xBF1C             ITT      NE 
   \   00000072   0xF244 0x00C8      MOVWNE   R0,#+16584
   \   00000076   0x4285             CMPNE    R5,R0
   \   00000078   0xD007             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_3
   \   0000007A   0xF241 0x501C      MOVW     R0,#+5404
   \   0000007E   0x4285             CMP      R5,R0
   \   00000080   0xBF1C             ITT      NE 
   \   00000082   0xF243 0x001C      MOVWNE   R0,#+12316
   \   00000086   0x4285             CMPNE    R5,R0
   \   00000088   0xD127             BNE.N    ??App_FlashIfFlashCheckAndConfigure_4
    453              {
    454                  mfgId = flashId & 0xff;
   \                     ??App_FlashIfFlashCheckAndConfigure_3:
   \   0000008A   0xB2EF             UXTB     R7,R5
    455          
    456                  if ((mfgId == 0xc2) || (mfgId == 0xc8) || (mfgId == 0x1c))
   \   0000008C   0x2FC2             CMP      R7,#+194
   \   0000008E   0xBF1C             ITT      NE 
   \   00000090   0x2FC8             CMPNE    R7,#+200
   \   00000092   0x2F1C             CMPNE    R7,#+28
   \   00000094   0xD115             BNE.N    ??App_FlashIfFlashCheckAndConfigure_5
    457                  {
    458                      /* switch to quad mode */
    459                      App_FlashIfDmaCtlSet(GSN_FLASHIF_DMA_QUADREAD_CTL_WORD_6DUMMYCYCLES,
    460                                          GSN_FLASHIF_FLASH_QUADIO_FAST_READ, TRUE);
   \   00000096   0x2201             MOVS     R2,#+1
   \   00000098   0x21EB             MOVS     R1,#+235
   \   0000009A   0x....             LDR.N    R0,??DataTable3_22  ;; 0x6a89a
   \   0000009C   0x.... 0x....      BL       App_FlashIfDmaCtlSet
    461          
    462                      /* For macronix, enable quad mode in status register */
    463                      if (mfgId == 0xc2)
   \   000000A0   0x2FC2             CMP      R7,#+194
   \   000000A2   0xD105             BNE.N    ??App_FlashIfFlashCheckAndConfigure_6
    464                      {
    465                          UINT32 statusReg = 0;
    466                          statusReg = GsnFlashIf_FlashStatusRead();
   \   000000A4   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
    467                          statusReg |= 0x40;
    468                          GsnFlashIf_FlashStatusWrite(statusReg, 1);
   \   000000A8   0x2101             MOVS     R1,#+1
   \   000000AA   0xF040 0x0040      ORR      R0,R0,#0x40
   \   000000AE   0xE006             B.N      ??App_FlashIfFlashCheckAndConfigure_7
    469                      }
    470          
    471                      /* For gigadevice, enable quad mode in status register */
    472                      if (mfgId == 0xc8)
   \                     ??App_FlashIfFlashCheckAndConfigure_6:
   \   000000B0   0x2FC8             CMP      R7,#+200
   \   000000B2   0xD106             BNE.N    ??App_FlashIfFlashCheckAndConfigure_5
    473                      {
    474                          UINT32 statusReg = 0;
    475                          statusReg = GsnFlashIf_FlashStatusRead();
   \   000000B4   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
    476                          statusReg |= 0x200;
    477                          GsnFlashIf_FlashStatusWrite(statusReg, 2);
   \   000000B8   0x2102             MOVS     R1,#+2
   \   000000BA   0xF440 0x7000      ORR      R0,R0,#0x200
   \                     ??App_FlashIfFlashCheckAndConfigure_7:
   \   000000BE   0x.... 0x....      BL       GsnFlashIf_FlashStatusWrite
    478                      }
    479                  }
    480          
    481                  if (flashId == 0xba20) /* micron also needs this for quad setting */
   \                     ??App_FlashIfFlashCheckAndConfigure_5:
   \   000000C2   0x4545             CMP      R5,R8
   \   000000C4   0xD109             BNE.N    ??App_FlashIfFlashCheckAndConfigure_4
    482                  {
    483                      /* switch to quad mode */
    484                      App_FlashIfDmaCtlSet(GSN_FLASHIF_DMA_QUADREAD_CTL_WORD,
    485                                              GSN_FLASHIF_FLASH_QUADIO_FAST_READ, TRUE);
   \   000000C6   0x2201             MOVS     R2,#+1
   \   000000C8   0x21EB             MOVS     R1,#+235
   \   000000CA   0x....             LDR.N    R0,??DataTable3_23  ;; 0xaa89a
   \   000000CC   0x.... 0x....      BL       App_FlashIfDmaCtlSet
    486                      /* required for quad mode read/dma */
    487                      /* write dummy cycles in volatile config: XIP=1, WRAP=Disable */
    488                      GsnFlashIf_FlashRegWrite(GSN_FLASHIF_FLASH_VOLCFG, 0xAB,TRUE);
   \   000000D0   0x4632             MOV      R2,R6
   \   000000D2   0x21AB             MOVS     R1,#+171
   \   000000D4   0x2081             MOVS     R0,#+129
   \   000000D6   0x.... 0x....      BL       GsnFlashIf_FlashRegWrite
    489                  }
    490              }
    491          
    492              /* release PIO control */
    493              GsnFlashIf_PioRelease();
   \                     ??App_FlashIfFlashCheckAndConfigure_4:
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0x6020             STR      R0,[R4, #+0]
   \                     ??App_FlashIfFlashCheckAndConfigure_8:
   \   000000DE   0x6860             LDR      R0,[R4, #+4]
   \   000000E0   0x07C0             LSLS     R0,R0,#+31
   \   000000E2   0xD4FC             BMI.N    ??App_FlashIfFlashCheckAndConfigure_8
    494          
    495          GsnFlashIfStartup_FlashCheckAndConfigure_Exit:
    496              return flashExists;
   \                     ??App_FlashIfFlashCheckAndConfigure_2:
   \   000000E4   0x4630             MOV      R0,R6
   \   000000E6   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    497          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3:
   \   00000000   0x41000354         DC32     0x41000354

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_1:
   \   00000000   0x........         DC32     SFB(APP_CODE_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_2:
   \   00000000   0x........         DC32     romFwImageFlashAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_3:
   \   00000000   0x........         DC32     SFE(ROM_PATCH_AUTO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_4:
   \   00000000   0x........         DC32     SFB(ROM_PATCH_AUTO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_5:
   \   00000000   0x........         DC32     SFB(DATA_INIT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_6:
   \   00000000   0x........         DC32     SFE(DATA_INIT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_7:
   \   00000000   0x........         DC32     SFB(DATA_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_8:
   \   00000000   0x........         DC32     SFE(ROM_PATCH_FPT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_9:
   \   00000000   0x........         DC32     SFB(ROM_PATCH_FPT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_10:
   \   00000000   0x20004000         DC32     0x20004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_11:
   \   00000000   0x........         DC32     SFE(APP_CODE_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_12:
   \   00000000   0x20040000         DC32     0x20040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_13:
   \   00000000   0x........         DC32     SFB(BSS_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_14:
   \   00000000   0x........         DC32     SFE(BSS_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_15:
   \   00000000   0x........         DC32     SFB(FREE_MEM)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_16:
   \   00000000   0x........         DC32     heapBytePool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_17:
   \   00000000   0x2007FFFF         DC32     0x2007ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_18:
   \   00000000   0x........         DC32     pGsnBytePoolHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_19:
   \   00000000   0x40080008         DC32     0x40080008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_20:
   \   00000000   0x400E0008         DC32     0x400e0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_21:
   \   00000000   0x400E0410         DC32     0x400e0410

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_22:
   \   00000000   0x0006A89A         DC32     0x6a89a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable3_23:
   \   00000000   0x000AA89A         DC32     0xaa89a

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {{0}}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    498          
    499          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_FlashIfDmaCtlSet
      24   App_FlashIfFlashCheckAndConfigure
        24   -> App_FlashIfDmaCtlSet
        24   -> GsnFlashIf_FlashRegWrite
        24   -> GsnFlashIf_FlashStatusRead
        24   -> GsnFlashIf_FlashStatusWrite
        24   -> GsnFlashIf_HpmReset
        24   -> GsnFlashIf_PioRxFifoRead
        24   -> GsnFlashIf_PioTxFifoWrite
      16   GsnFlashIf_FlashStatusRead
        16   -> GsnFlashIf_PioRxFifoRead
        16   -> GsnFlashIf_PioTxFifoWrite
      16   GsnFlashIf_FlashStatusWrite
        16   -> GsnFlashIf_FlashStatusRead
        16   -> GsnFlashIf_PioTxFifoWrite
       8   GsnFlashIf_HpmReset
         0   -> GsnFlashIf_PioTxFifoWrite
         8   -> GsnFlashIf_PioTxFifoWrite
       0   GsnFlashIf_PioRxFifoRead
       0   GsnFlashIf_PioTxFifoWrite
       0   GsnStartup_ClosestPowerOf2
      72   GsnStartup_Main
        72   -> App_IdleHandlerLoop
        72   -> App_Main
        72   -> GsnFlashCache_BlkFetch
        72   -> GsnFlashCache_BlkRemapSet
        72   -> __aeabi_memclr
        72   -> __aeabi_memclr4
        72   -> _tx_byte_pool_create


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant {{0}}>
       4  ??DataTable3
       4  ??DataTable3_1
       4  ??DataTable3_10
       4  ??DataTable3_11
       4  ??DataTable3_12
       4  ??DataTable3_13
       4  ??DataTable3_14
       4  ??DataTable3_15
       4  ??DataTable3_16
       4  ??DataTable3_17
       4  ??DataTable3_18
       4  ??DataTable3_19
       4  ??DataTable3_2
       4  ??DataTable3_20
       4  ??DataTable3_21
       4  ??DataTable3_22
       4  ??DataTable3_23
       4  ??DataTable3_3
       4  ??DataTable3_4
       4  ??DataTable3_5
       4  ??DataTable3_6
       4  ??DataTable3_7
       4  ??DataTable3_8
       4  ??DataTable3_9
      10  App_FlashIfDmaCtlSet
     234  App_FlashIfFlashCheckAndConfigure
      40  GsnFlashIf_FlashStatusRead
      66  GsnFlashIf_FlashStatusWrite
      24  GsnFlashIf_HpmReset
      28  GsnFlashIf_PioRxFifoRead
      24  GsnFlashIf_PioTxFifoWrite
      18  GsnStartup_ClosestPowerOf2
     282  GsnStartup_Main
     224  heapBytePool

 
 224 bytes in section .bss
  32 bytes in section .rodata
 822 bytes in section .text
 
 640 bytes of CODE  memory (+ 182 bytes shared)
  32 bytes of CONST memory
 224 bytes of DATA  memory

Errors: none
Warnings: none
