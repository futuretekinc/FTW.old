###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      19/Nov/2015  14:30:58 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\mqtt_main\mqtt_main.c                #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\src\mqtt_main\mqtt_main.c -D             #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ -lA                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\ --diag_suppress        #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\build\Debug\Obj\    #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\core\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\drivers\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\modules\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\rtos\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\netx\netx_bsd_la #
#                    yer\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\main\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\src\    #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\security\hw_e #
#                    ngine_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1 #
#                    .5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\geps\inc\sec #
#                    urity\wpa_if\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp #
#                    _5.1.5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ #
#                    ncm\inc\ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1. #
#                    5_GA\userapps_mqtt_QoS2\s2w\build\..\..\..\userlib\ -I   #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ctx\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\hal\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\parser\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\config\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\otafu\inc\ -I         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\..\..\adk\provisioning\inc\ -I  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\one_wire\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\linked_list\ -I             #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_main\ -I               #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\inc\mqtt_log\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\..\src\mqtt_log\ -Ohz              #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\List\mqtt_main.lst           #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt_QoS2\s2w\build\Debug\Obj\mqtt_main.o              #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt_QoS2\s2w\src\mqtt_main\mqtt_main.c
      1          #include "time.h"
      2          #include <ctype.h>
      3          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
      4          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x9A0F             LDR      R2,[SP, #+60]
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9205             STR      R2,[SP, #+20]
   \   00000010   0x461D             MOV      R5,R3
   \   00000012   0x9B0C             LDR      R3,[SP, #+48]
   \   00000014   0x9303             STR      R3,[SP, #+12]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9302             STR      R3,[SP, #+8]
   \   0000001A   0x9204             STR      R2,[SP, #+16]
   \   0000001C   0x460B             MOV      R3,R1
   \   0000001E   0x9701             STR      R7,[SP, #+4]
   \   00000020   0x9600             STR      R6,[SP, #+0]
   \   00000022   0x4622             MOV      R2,R4
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x.... 0x....      BL       _tx_thread_create
   \   0000002A   0xB118             CBZ.N    R0,??GsnOsal_ThreadCreate_0
   \   0000002C   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000030   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000034   0xB007             ADD      SP,SP,#+28
   \   00000036   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return
      5          #include "hal/s2w_types.h"
      6          #include "hal/s2w_hal.h"
      7          #include "hal/s2w_timer.h"
      8          #include "clk_tune/app_clk_tune.h"
      9          
     10          #include "mqtt_main/mqtt_main.h"
     11          #include "mqtt/libmqtt.h"
     12          #include "one_wire/one_wire.h"
     13          #include "linked_list/linked_list.h"
     14          #include "mqtt_log/mqtt_log.h"
     15          
     16          #define AP_SSID "FTR-01"
     17          #define AP_WWPA "4rnekd9wkd"
     18          #define HOST_ADDRESS "mqtt.thingplus.net"
     19          #define HOST_PORT "8883"
     20          //#define STACK_SIZE 20
     21          #define QUEUE_SIZE 15
     22          #define RECEIVE_MSG_SIZE 1
     23          #define TOTAL_QUEUE_SIZE QUEUE_SIZE * RECEIVE_MSG_SIZE * sizeof(ULONG)
     24          #define SEND_LIST_MUTEX "send_list_mutex"
     25          #define RECEIVE_LIST_MUTEX "receive_list_mutex"
     26          #define PUBLISH_LIST_MUTEX "publish_list_mutex"
     27          //UINT32 xState;
     28          
     29          #define MQTT_MSG_Reserved_0 0
     30          #define MQTT_MSG_Reserved_15 15
     31          
     32          #define MQTT_SENSOR_STATUS 1
     33          #define MQTT_SENSOR_DATA 2
     34          
     35          
     36          

   \                                 In section .bss, align 4
     37          DS18B20_Sensor_t temperature_sensor[16];
   \                     temperature_sensor:
   \   00000000                      DS8 192

   \                                 In section .bss, align 1
     38          UINT8 nSensors;
   \                     nSensors:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     39          int total_malloc_size = 0;
   \                     total_malloc_size:
   \   00000000                      DS8 4
     40          
     41          typedef enum
     42          {
     43          	MQTT_STATE_UNINITIAL = 0,
     44          	MQTT_STATE_INITIAL,
     45          	MQTT_STATE_CONNECT_READY,
     46              MQTT_STATE_CONNECT,
     47          	MQTT_STATE_DISCONNECT
     48          } MQTT_STATE;
     49          
     50          typedef struct mqtt_list
     51          {
     52            Node* head;
     53            //TX_MUTEX list_mutex;
     54            GSN_OSAL_SEM_T list_semaphore;
     55          }MQTT_LIST;
     56          
     57          typedef struct
     58          {
     59            mqtt_broker_handle_t MQTT_CLIENT;
     60            UINT8 QoS;
     61            //UINT8 mqtt_cid;
     62            MQTT_LIST send_list;
     63            MQTT_LIST receive_list;
     64            MQTT_LIST publish_list;
     65          }MQTT_CTX;
     66          
     67            
     68          
     69          //////////LIST FUNCTION/////////
     70          
     71          UINT8 MQTT_LIST_INIT(MQTT_LIST* LIST,  UINT8 initial);
     72          
     73          UINT8 MQTT_LIST_PUT(MQTT_LIST* LIST, MSG_TYPE* msg_type);
     74          
     75          UINT8 MQTT_LIST_GET(MQTT_LIST* LIST, MSG_TYPE** msg_type);
     76          
     77          UINT8 MQTT_LIST_COUNT(MQTT_LIST* LIST);
     78          
     79          UINT8 MQTT_LIST_SEARCH(MQTT_LIST* LIST, UINT16 MSG_ID);
     80          
     81          UINT8 MQTT_LIST_DELECT(MQTT_LIST* LIST, UINT16 MSG_ID);
     82          
     83          /////////////////////////////////
     84          
     85          UINT8 MQTT_START();
     86          
     87          
     88          //////////LIST FUNCTION/////////
     89          VOID MQTT_PROCESS_TASK(UINT32 MQTT_INPUT);
     90          
     91          VOID MQTT_SENDER_TASK(UINT32 MQTT_INPUT);
     92          
     93          VOID MQTT_RECEIVER_TASK(UINT32 MQTT_INPUT);
     94          
     95          VOID MQTT_MESSAGE_QUEUE_TASK(UINT32 MQTT_INPUT);
     96          /////////////////////////////////
     97          
     98          UINT8 MQTT_PUBLISH_MSG_GEN(UINT8 select);
     99          
    100          UINT8 MQTT_PUBLISH_MSG_RETRY();
    101          
    102          void MQTT_PING_MSG();
    103          
    104          
    105          
    106          UINT8 MQTT_CONNECT();
    107          
    108          UINT8 MQTT_AP_CONNECT();
    109          
    110          UINT8 MQTT_TCP_CONNECT();
    111          
    112          UINT8 MQTT_SSL_CONNECT(UINT8 CID);
    113          
    114          typedef struct
    115          {
    116              UINT8  Message_Type;
    117              UINT32          (*callback)(MSG_TYPE*);
    118          }   MQTT_MESSAGE_CALLBACK;
    119          
    120          UINT32 MQTT_MSG_FUNC_CONNACK(MSG_TYPE* MSG);
    121          UINT32 MQTT_MSG_FUNC_PUBLISH(MSG_TYPE* MSG);
    122          UINT32 MQTT_MSG_FUNC_PUBACK(MSG_TYPE* MSG);
    123          UINT32 MQTT_MSG_FUNC_PUBREC(MSG_TYPE* MSG);
    124          UINT32 MQTT_MSG_FUNC_PUBCOMP(MSG_TYPE* MSG);
    125          UINT32 MQTT_MSG_FUNC_PINGRESP(MSG_TYPE* MSG);
    126          
    127          
    128          UINT8 MQTT_CONNECT_STATUS = 0;
    129          
    130          

   \                                 In section .text, align 4, keep-with-next
    131          const MQTT_MESSAGE_CALLBACK MQTT_MSG_CALLBACK[] =
   \                     MQTT_MSG_CALLBACK:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0H
   \   00000008   0x10 0x00          DC8 16, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000000         DC32 0H
   \   00000010   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0H
   \   00000018   0x30 0x00          DC8 48, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 MQTT_MSG_FUNC_PUBLISH
   \   00000020   0x40 0x00          DC8 64, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 MQTT_MSG_FUNC_PUBACK
   \   00000028   0x50 0x00          DC8 80, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x........         DC32 MQTT_MSG_FUNC_PUBREC
   \   00000030   0x60 0x00          DC8 96, 0, 0, 0
   \              0x00 0x00    
   \   00000034   0x00000000         DC32 0H
   \   00000038   0x70 0x00          DC8 112, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x........         DC32 MQTT_MSG_FUNC_PUBCOMP
   \   00000040   0x80 0x00          DC8 128, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0H
   \   00000048   0x90 0x00          DC8 144, 0, 0, 0
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0H
   \   00000050   0xA0 0x00          DC8 160, 0, 0, 0
   \              0x00 0x00    
   \   00000054   0x00000000         DC32 0H
   \   00000058   0xB0 0x00          DC8 176, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x00000000         DC32 0H
   \   00000060   0xC0 0x00          DC8 192, 0, 0, 0
   \              0x00 0x00    
   \   00000064   0x00000000         DC32 0H
   \   00000068   0xD0 0x00          DC8 208, 0, 0, 0
   \              0x00 0x00    
   \   0000006C   0x........         DC32 MQTT_MSG_FUNC_PINGRESP
   \   00000070   0xE0 0x00          DC8 224, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000000         DC32 0H
   \   00000078   0x0F 0x00          DC8 15, 0, 0, 0
   \              0x00 0x00    
   \   0000007C   0x00000000         DC32 0H
    132          {
    133            { .Message_Type = MQTT_MSG_Reserved_0, 	.callback = NULL },
    134            { .Message_Type = MQTT_MSG_CONNECT, 		.callback = NULL },
    135            //{ .Message_Type = MQTT_MSG_CONNACK, 	.callback = MQTT_MSG_FUNC_CONNACK },
    136            { .Message_Type = MQTT_MSG_CONNACK, 		.callback = NULL },
    137            { .Message_Type = MQTT_MSG_PUBLISH, 		.callback = MQTT_MSG_FUNC_PUBLISH },
    138            { .Message_Type = MQTT_MSG_PUBACK, 		.callback = MQTT_MSG_FUNC_PUBACK },
    139            { .Message_Type = MQTT_MSG_PUBREC, 		.callback = MQTT_MSG_FUNC_PUBREC },
    140            { .Message_Type = MQTT_MSG_PUBREL, 	  	.callback = NULL },
    141            { .Message_Type = MQTT_MSG_PUBCOMP, 	  	.callback = MQTT_MSG_FUNC_PUBCOMP },
    142            { .Message_Type = MQTT_MSG_SUBSCRIBE,   	.callback = NULL },
    143            { .Message_Type = MQTT_MSG_SUBACK, 	  	.callback = NULL },
    144            { .Message_Type = MQTT_MSG_UNSUBSCRIBE, 	.callback = NULL },
    145            { .Message_Type = MQTT_MSG_UNSUBACK, 		.callback = NULL },
    146            { .Message_Type = MQTT_MSG_PINGREQ, 		.callback = NULL },
    147            { .Message_Type = MQTT_MSG_PINGRESP, 		.callback = MQTT_MSG_FUNC_PINGRESP },
    148            { .Message_Type = MQTT_MSG_DISCONNECT, 	.callback = NULL },
    149            { .Message_Type = MQTT_MSG_Reserved_15, 		.callback = NULL },
    150          };
    151          
    152          typedef struct
    153          {
    154              UINT8  xState;
    155              UINT32          (*callback)(void*);
    156          }   MQTT_STATE_CALLBACK;
    157          
    158          
    159          static UINT32  MQTT_STATE_CALLBACK_UNINITIAL(void* client );
    160          static UINT32  MQTT_STATE_CALLBACK_INITIAL(void* client);
    161          static UINT32  MQTT_STATE_CALLBACK_CONNECT_READY(void* client);
    162          static UINT32  MQTT_STATE_CALLBACK_CONNECT(void* client);
    163          static UINT32  MQTT_STAET_CALLBACK_DISCONNECT(void* client);
    164          

   \                                 In section .text, align 4, keep-with-next
    165          const MQTT_STATE_CALLBACK MQTT_CALLBACK[] =
   \                     MQTT_CALLBACK:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 MQTT_STATE_CALLBACK_UNINITIAL
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 MQTT_STATE_CALLBACK_INITIAL
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 MQTT_STATE_CALLBACK_CONNECT_READY
   \   00000018   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 MQTT_STATE_CALLBACK_CONNECT
   \   00000020   0x04 0x00          DC8 4, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 MQTT_STAET_CALLBACK_DISCONNECT
    166          {
    167              {   
    168                  .xState     = MQTT_STATE_UNINITIAL,
    169                  .callback   = MQTT_STATE_CALLBACK_UNINITIAL
    170              },
    171              {   
    172                  .xState     = MQTT_STATE_INITIAL,
    173                  .callback   = MQTT_STATE_CALLBACK_INITIAL
    174              },
    175          	{   
    176                  .xState     = MQTT_STATE_CONNECT_READY,
    177                  .callback   = MQTT_STATE_CALLBACK_CONNECT_READY
    178              },
    179              {   
    180                  .xState     = MQTT_STATE_CONNECT,
    181                  .callback   = MQTT_STATE_CALLBACK_CONNECT
    182              },
    183              {   
    184                  .xState     = MQTT_STATE_DISCONNECT,
    185                  .callback   = MQTT_STAET_CALLBACK_DISCONNECT
    186              },
    187              
    188          };
    189          

   \                                 In section .rodata, align 4, keep-with-next
    190          const UINT32   StateCount = sizeof(MQTT_CALLBACK) / sizeof(MQTT_STATE_CALLBACK);
   \                     StateCount:
   \   00000000   0x00000005         DC32 5

   \                                 In section .bss, align 8
   \                     MQTT_CONNECT_STATUS:
   \   00000000                      DS8 1
    191          
    192          
    193          S2W_NETDATA_T peerData;
    194          UINT8 mqtt_Xstate;
   \                     mqtt_Xstate:
   \   00000001                      DS8 1
    195          PUBLIC GSN_OSAL_QUEUE_T MQTT_RECEIVE_QUEUE;
    196          MQTT_CTX mqtt_ctx;
    197          UINT8 MSG_receive[TOTAL_QUEUE_SIZE];
    198          
    199          GSN_OSAL_THREAD_TCB_T MQTT_PROCESS_THREAD;
    200          GSN_OSAL_THREAD_TCB_T MQTT_SENDER_THREAD;
    201          GSN_OSAL_THREAD_TCB_T MQTT_RECEIVER_THREAD;
    202          GSN_OSAL_THREAD_TCB_T MQTT_MESSAGE_QUEUE_THREAD;
    203          
    204          UINT8 STACK_MQTT_SENDER_THREAD[STACK_SIZE*2];
    205          UINT8 STACK_MQTT_RECEIVER_THREAD[STACK_SIZE*2];
    206          UINT8 STACK_MQTT_PROCESS_THREAD[STACK_SIZE*5];
    207          UINT8 STACK_MQTT_MESSAGE_QUEUE_THREAD[STACK_SIZE*2];
    208          
    209          //TX_TIMER my_timer;
    210          S2W_TIMER_T my_timer;
    211          UINT8 ping_count = 0;
   \                     ping_count:
   \   00000002                      DS8 1
   \   00000003                      DS8 1
   \                     MQTT_RECEIVE_QUEUE:
   \   00000004                      DS8 56
   \                     MSG_receive:
   \   0000003C                      DS8 60
   \                     MQTT_PROCESS_THREAD:
   \   00000078                      DS8 180
   \                     MQTT_SENDER_THREAD:
   \   0000012C                      DS8 180
   \                     MQTT_MESSAGE_QUEUE_THREAD:
   \   000001E0                      DS8 180
   \                     STACK_MQTT_SENDER_THREAD:
   \   00000294                      DS8 2048
   \                     STACK_MQTT_PROCESS_THREAD:
   \   00000A94                      DS8 5120
   \                     STACK_MQTT_MESSAGE_QUEUE_THREAD:
   \   00001E94                      DS8 2048
    212          //void MQTT_PING_OUT(ULONG);
    213          void MQTT_PING_OUT(VOID *);
    214          void MQTT_PIGN_MSG();
    215          
    216          //TX_TIMER mqtt_retry_timer;
    217          S2W_TIMER_T mqtt_retry_timer;
    218          //VOID MQTT_PUBLISH_RETRY(ULONG);
    219          VOID MQTT_PUBLISH_RETRY(VOID *);
    220          
    221          
    222          TX_MUTEX ping_mutex;
   \                     ping_mutex:
   \   00002694                      DS8 52
    223          //TX_SEMAPHORE ping_semaphore;
    224          TX_MUTEX conStatus_mutex;
   \                     conStatus_mutex:
   \   000026C8                      DS8 52
   \   000026FC                      DS8 4
   \                     my_timer:
   \   00002700                      DS8 56
   \                     mqtt_retry_timer:
   \   00002738                      DS8 56

   \                                 In section .bss, align 4
   \                     peerData:
   \   00000000                      DS8 60

   \                                 In section .bss, align 4
   \                     mqtt_ctx:
   \   00000000                      DS8 184

   \                                 In section .bss, align 4
   \                     MQTT_RECEIVER_THREAD:
   \   00000000                      DS8 180

   \                                 In section .bss, align 4
   \                     STACK_MQTT_RECEIVER_THREAD:
   \   00000000                      DS8 2048
    225          
    226          

   \                                 In section .text, align 2, keep-with-next
    227          UINT8 MQTT_LIST_INIT(MQTT_LIST* LIST,  UINT8 initial)
    228          {
   \                     MQTT_LIST_INIT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    229            UINT8 status;
    230            
    231            LIST->head = makeNode(NULL);
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x.... 0x....      BL       makeNode
   \   0000000C   0x6020             STR      R0,[R4, #+0]
    232            
    233            //status = tx_mutex_create(&LIST->list_mutex, MUTEX_NAME, TX_INHERIT);
    234            //status = tx_semaphore_create(&(LIST->list_semaphore), MUTEX_NAME,initial);
    235            status = GsnOsal_SemCreate(&(LIST->list_semaphore), initial);
   \   0000000E   0x462A             MOV      R2,R5
   \   00000010   0x2100             MOVS     R1,#+0
   \   00000012   0x1D20             ADDS     R0,R4,#+4
   \   00000014   0x.... 0x....      BL       _tx_semaphore_create
   \   00000018   0xB118             CBZ.N    R0,??MQTT_LIST_INIT_0
   \   0000001A   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000001E   0xF500 0x7080      ADD      R0,R0,#+256
    236            return status;
   \                     ??MQTT_LIST_INIT_0:
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    237          }
    238          
    239          

   \                                 In section .text, align 2, keep-with-next
    240          UINT8 MQTT_LIST_PUT(MQTT_LIST* LIST, MSG_TYPE* msg_type)
    241          {
   \                     MQTT_LIST_PUT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    242            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    243            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    244            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
    245            
    246          
    247            list_put(LIST->head, msg_type);
   \                     ??CrossCallReturnLabel_5:
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0x.... 0x....      BL       list_put
    248          
    249            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \   0000000E   0x....             B.N      ?Subroutine0
    250            return 0;
    251          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x460D             MOV      R5,R1
   \                     ??Subroutine3_0:
   \   00000004   0x2164             MOVS     R1,#+100
   \   00000006   0x1D20             ADDS     R0,R4,#+4
   \   00000008   0x.... 0x....      B.W      GsnOsal_SemAcquire

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x1D20             ADDS     R0,R4,#+4
   \   00000002   0x.... 0x....      BL       GsnOsal_SemRelease
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    252          

   \                                 In section .text, align 2, keep-with-next
    253          UINT8 MQTT_LIST_GET(MQTT_LIST* LIST, MSG_TYPE** msg_type)
    254          {
   \                     MQTT_LIST_GET:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    255            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    256            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    257            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
    258            list_get(LIST->head, msg_type);
   \                     ??CrossCallReturnLabel_4:
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0x.... 0x....      BL       list_get
    259            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    260            //tx_semaphore_put(&(LIST->list_semaphore));
    261            return 0;
    262          }
    263          

   \                                 In section .text, align 2, keep-with-next
    264          UINT8 MQTT_LIST_COUNT(MQTT_LIST* LIST)
    265          {
   \                     MQTT_LIST_COUNT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    266            INT32 count;
    267            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    268            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    269            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
   \   00000004   0x.... 0x....      BL       ??Subroutine3_0
    270            count = list_count(LIST->head);
   \                     ??CrossCallReturnLabel_2:
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       list_count
   \   0000000E   0x4605             MOV      R5,R0
    271            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \   00000010   0x.... 0x....      BL       ?Subroutine5
    272            //tx_semaphore_put(&(LIST->list_semaphore));
    273            return count;
   \                     ??CrossCallReturnLabel_16:
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    274          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x1D20             ADDS     R0,R4,#+4
   \   00000002   0x.... 0x....      B.W      GsnOsal_SemRelease
    275          

   \                                 In section .text, align 2, keep-with-next
    276          UINT8 MQTT_LIST_SEARCH(MQTT_LIST* LIST, UINT16 MSG_ID)
    277          {
   \                     MQTT_LIST_SEARCH:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine3
    278            Node* post ;
    279            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    280            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    281            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
    282            post = LIST->head->next;
   \                     ??CrossCallReturnLabel_3:
   \   00000006   0x6820             LDR      R0,[R4, #+0]
    283            while(post != NULL)
    284            {
    285          	if(post->msg_pointer->MSG_ID == MSG_ID)
    286          	{
    287          	  GsnOsal_SemRelease(&(LIST->list_semaphore));
    288          	  //tx_semaphore_put(&(LIST->list_semaphore));
    289          	  return 0;
    290          	}
    291          	else
    292          	{
    293          	  post = post->next;
   \                     ??MQTT_LIST_SEARCH_0:
   \   00000008   0x6840             LDR      R0,[R0, #+4]
    294          	}
   \   0000000A   0xB120             CBZ.N    R0,??MQTT_LIST_SEARCH_1
   \   0000000C   0x6801             LDR      R1,[R0, #+0]
   \   0000000E   0x8989             LDRH     R1,[R1, #+12]
   \   00000010   0x42A9             CMP      R1,R5
   \   00000012   0xD1F9             BNE.N    ??MQTT_LIST_SEARCH_0
   \   00000014   0x....             B.N      ?Subroutine0
    295            }
    296            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \                     ??MQTT_LIST_SEARCH_1:
   \   00000016   0x.... 0x....      BL       ?Subroutine5
    297            //tx_semaphore_put(&(LIST->list_semaphore));
    298            return 1;
   \                     ??CrossCallReturnLabel_15:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    299          }
    300          
    301          

   \                                 In section .text, align 2, keep-with-next
    302          UINT8 MQTT_LIST_DELECT(MQTT_LIST* LIST, UINT16 MSG_ID)
    303          {
   \                     MQTT_LIST_DELECT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460E             MOV      R6,R1
    304            Node* pre ;
    305            Node* post ;
    306            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    307            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    308            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
   \   00000006   0x.... 0x....      BL       ??Subroutine3_0
    309            pre = LIST->head;
   \                     ??CrossCallReturnLabel_1:
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
    310            post = LIST->head->next;
   \   0000000C   0x6845             LDR      R5,[R0, #+4]
   \   0000000E   0xE001             B.N      ??MQTT_LIST_DELECT_0
    311            while(post != NULL)
    312            {
    313          	if(post->msg_pointer->MSG_ID == MSG_ID)
    314          	{
    315          	  
    316          	  pre->next = post->next;
    317          
    318          	  gsn_free(post->msg_pointer->TOPIC);
    319          	  post->msg_pointer->TOPIC = NULL;
    320          	  
    321          	  gsn_free(post->msg_pointer->PAYLOAD);
    322          	  post->msg_pointer->PAYLOAD = NULL;
    323          	  
    324          	  gsn_free(post->msg_pointer);
    325          	  post->msg_pointer = NULL;
    326          
    327          	  gsn_free(post);
    328          	  post = NULL;
    329          	  GsnOsal_SemRelease(&(LIST->list_semaphore));
    330          	  //tx_semaphore_put(&(LIST->list_semaphore));
    331          	  return 0;
    332          	}
    333          	else
    334          	{
    335          	  pre = post;
   \                     ??MQTT_LIST_DELECT_1:
   \   00000010   0x4628             MOV      R0,R5
    336          	  post = post->next;
   \   00000012   0x686D             LDR      R5,[R5, #+4]
    337          	}
   \                     ??MQTT_LIST_DELECT_0:
   \   00000014   0xB1D5             CBZ.N    R5,??MQTT_LIST_DELECT_2
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x8989             LDRH     R1,[R1, #+12]
   \   0000001A   0x42B1             CMP      R1,R6
   \   0000001C   0xD1F8             BNE.N    ??MQTT_LIST_DELECT_1
   \   0000001E   0x6869             LDR      R1,[R5, #+4]
   \   00000020   0x6041             STR      R1,[R0, #+4]
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000002A   0x6828             LDR      R0,[R5, #+0]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6041             STR      R1,[R0, #+4]
   \   00000030   0x6880             LDR      R0,[R0, #+8]
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000036   0x6828             LDR      R0,[R5, #+0]
   \   00000038   0x2100             MOVS     R1,#+0
   \   0000003A   0x6081             STR      R1,[R0, #+8]
   \   0000003C   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0x6028             STR      R0,[R5, #+0]
   \   00000044   0x4628             MOV      R0,R5
   \   00000046   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000004A   0x....             B.N      ?Subroutine2
    338            }
    339            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \                     ??MQTT_LIST_DELECT_2:
   \   0000004C   0x.... 0x....      BL       ?Subroutine5
    340            //tx_semaphore_put(&(LIST->list_semaphore));
    341            return 1;
   \                     ??CrossCallReturnLabel_14:
   \   00000050   0x2001             MOVS     R0,#+1
   \   00000052   0xBD70             POP      {R4-R6,PC}       ;; return
    342          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      BL       ?Subroutine5
   \                     ??CrossCallReturnLabel_13:
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD70             POP      {R4-R6,PC}
    343          

   \                                 In section .text, align 2, keep-with-next
    344          UINT8 MQTT_LIST_DESTROY(MQTT_LIST* LIST)
    345          {
   \                     MQTT_LIST_DESTROY:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    346            Node* pre ;
    347            Node* post ;
    348            //tx_semaphore_get(&(LIST->list_semaphore), TX_WAIT_FOREVER);
    349            //tx_semaphore_get(&(LIST->list_semaphore), 100);
    350            GsnOsal_SemAcquire(&(LIST->list_semaphore), 100); 
   \   00000004   0x.... 0x....      BL       ??Subroutine3_0
    351            pre = LIST->head;
   \                     ??CrossCallReturnLabel_0:
   \   00000008   0x6825             LDR      R5,[R4, #+0]
   \   0000000A   0xE01A             B.N      ??MQTT_LIST_DESTROY_0
    352            while(pre->next != NULL)
    353            {
    354          	  post = pre->next;
    355          	  pre->next = post->next;
   \                     ??MQTT_LIST_DESTROY_1:
   \   0000000C   0x6870             LDR      R0,[R6, #+4]
   \   0000000E   0x6068             STR      R0,[R5, #+4]
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0xB120             CBZ.N    R0,??MQTT_LIST_DESTROY_2
    356          
    357          	  if(post->msg_pointer->TOPIC != NULL)
    358          	  {
    359          	  	gsn_free(post->msg_pointer->TOPIC);
   \   00000016   0x.... 0x....      BL       GsnDynMemMgmt_Free
    360          		post->msg_pointer->TOPIC = NULL;
   \   0000001A   0x6830             LDR      R0,[R6, #+0]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6041             STR      R1,[R0, #+4]
   \                     ??MQTT_LIST_DESTROY_2:
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x6880             LDR      R0,[R0, #+8]
   \   00000024   0xB120             CBZ.N    R0,??MQTT_LIST_DESTROY_3
    361          	  }
    362          	  if(post->msg_pointer->PAYLOAD != NULL)
    363          	  {
    364          	  	gsn_free(post->msg_pointer->PAYLOAD);
   \   00000026   0x.... 0x....      BL       GsnDynMemMgmt_Free
    365          	  	post->msg_pointer->PAYLOAD = NULL;
   \   0000002A   0x6830             LDR      R0,[R6, #+0]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6081             STR      R1,[R0, #+8]
    366          	  }
    367          	  if(post->msg_pointer!= NULL)
   \                     ??MQTT_LIST_DESTROY_3:
   \   00000030   0x6830             LDR      R0,[R6, #+0]
   \   00000032   0xB118             CBZ.N    R0,??MQTT_LIST_DESTROY_4
    368          	  {
    369          	  	gsn_free(post->msg_pointer);
   \   00000034   0x.... 0x....      BL       GsnDynMemMgmt_Free
    370          		post->msg_pointer = NULL;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x6030             STR      R0,[R6, #+0]
    371          	  }
    372          	  if(post != NULL)
    373          	  {
    374          		gsn_free(post);
   \                     ??MQTT_LIST_DESTROY_4:
   \   0000003C   0x4630             MOV      R0,R6
   \   0000003E   0x.... 0x....      BL       GsnDynMemMgmt_Free
    375          		post = NULL;
    376          	  }
    377            }
   \                     ??MQTT_LIST_DESTROY_0:
   \   00000042   0x686E             LDR      R6,[R5, #+4]
   \   00000044   0x2E00             CMP      R6,#+0
   \   00000046   0xD1E1             BNE.N    ??MQTT_LIST_DESTROY_1
    378            GsnOsal_SemRelease(&(LIST->list_semaphore));
   \   00000048                      REQUIRE ?Subroutine2
   \   00000048                      ;; // Fall through to label ?Subroutine2
    379            //tx_semaphore_put(&(LIST->list_semaphore));
    380            return 0;
    381          }
    382          

   \                                 In section .text, align 2, keep-with-next
    383          UINT8 MQTT_START()
    384          {
   \                     MQTT_START:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    385            UINT8 status;
    386            
    387            mqtt_Xstate =  MQTT_STATE_UNINITIAL;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable93_2
    388           
    389            
    390            MQTT_LIST_INIT(&(mqtt_ctx.publish_list), 1);
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable93_3
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x7060             STRB     R0,[R4, #+1]
   \   0000000E   0xB085             SUB      SP,SP,#+20
   \   00000010   0x2101             MOVS     R1,#+1
   \   00000012   0xF105 0x0098      ADD      R0,R5,#+152
   \   00000016   0x.... 0x....      BL       MQTT_LIST_INIT
    391            MQTT_LIST_INIT(&(mqtt_ctx.send_list), 1);
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000020   0x.... 0x....      BL       MQTT_LIST_INIT
    392            //MQTT_LIST_INIT(&(mqtt_ctx.receive_list), RECEIVE_LIST_MUTEX, 1);
    393            //status = tx_semaphore_prioritize(&(mqtt_ctx.send_list.list_semaphore));
    394            //status = tx_semaphore_prioritize(&(mqtt_ctx.receive_list.list_semaphore));
    395            //status = tx_semaphore_prioritize(&(mqtt_ctx.publish_list.list_semaphore));
    396          
    397            //status = tx_queue_create(&MQTT_RECEIVE_QUEUE, "MQTT_RECEIVE_QUEUE", TX_1_ULONG, MSG_receive, TOTAL_QUEUE_SIZE);
    398            status = GsnOsal_QueueCreate(&MQTT_RECEIVE_QUEUE, TX_1_ULONG, MSG_receive, TOTAL_QUEUE_SIZE);
   \   00000024   0x203C             MOVS     R0,#+60
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0xF104 0x033C      ADD      R3,R4,#+60
   \   0000002C   0x2201             MOVS     R2,#+1
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x1D20             ADDS     R0,R4,#+4
   \   00000032   0x.... 0x....      BL       _tx_queue_create
    399            //status = tx_thread_create(&MQTT_PROCESS_THREAD, "MQTT_PROCESS_THREAD", MQTT_PROCESS_TASK ,0 , STACK_MQTT_PROCESS_THREAD ,STACK_SIZE*5 , 15 , 15 , TX_NO_TIME_SLICE,TX_AUTO_START);
    400            status = GsnOsal_ThreadCreate(MQTT_PROCESS_TASK, NULL, &MQTT_PROCESS_THREAD,"MQTT_PROCESS_THREAD", 15, STACK_MQTT_PROCESS_THREAD, STACK_SIZE*5, GSN_OSAL_THREAD_INITIAL_READY);
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9003             STR      R0,[SP, #+12]
   \   0000003A   0xF44F 0x50A0      MOV      R0,#+5120
   \   0000003E   0x9002             STR      R0,[SP, #+8]
   \   00000040   0xF604 0x2094      ADDW     R0,R4,#+2708
   \   00000044   0x9001             STR      R0,[SP, #+4]
   \   00000046   0x200F             MOVS     R0,#+15
   \   00000048   0x9000             STR      R0,[SP, #+0]
   \   0000004A   0xF104 0x0278      ADD      R2,R4,#+120
   \   0000004E   0x.... 0x....      ADR.W    R3,`?<Constant "MQTT_PROCESS_THREAD">`
   \   00000052   0x.... 0x....      ADR.W    R0,MQTT_PROCESS_TASK
   \   00000056   0x2100             MOVS     R1,#+0
   \   00000058   0x.... 0x....      BL       GsnOsal_ThreadCreate
    401            //status = tx_thread_create(&MQTT_SENDER_THREAD, "MQTT_SENDER_THREAD", MQTT_SENDER_TASK ,0, STACK_MQTT_SENDER_THREAD, STACK_SIZE*2, 15, 15, TX_NO_TIME_SLICE,TX_AUTO_START);
    402            status = GsnOsal_ThreadCreate(MQTT_SENDER_TASK, NULL, &MQTT_SENDER_THREAD, "MQTT_SENDER_THREAD", 15, STACK_MQTT_SENDER_THREAD, STACK_SIZE*2, GSN_OSAL_THREAD_INITIAL_READY);
   \   0000005C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_21:
   \   00000060   0xF504 0x7025      ADD      R0,R4,#+660
   \   00000064   0x9001             STR      R0,[SP, #+4]
   \   00000066   0x200F             MOVS     R0,#+15
   \   00000068   0x9000             STR      R0,[SP, #+0]
   \   0000006A   0xF504 0x7296      ADD      R2,R4,#+300
   \   0000006E   0x.... 0x....      ADR.W    R3,`?<Constant "MQTT_SENDER_THREAD">`
   \   00000072   0x.... 0x....      ADR.W    R0,MQTT_SENDER_TASK
   \   00000076   0x2100             MOVS     R1,#+0
   \   00000078   0x.... 0x....      BL       GsnOsal_ThreadCreate
    403            //status = tx_thread_create(&MQTT_RECEIVER_THREAD, "MQTT_RECEIVER_THREAD", MQTT_RECEIVER_TASK ,0, STACK_MQTT_RECEIVER_THREAD, STACK_SIZE*2, 23, 23, TX_NO_TIME_SLICE,TX_AUTO_START);
    404            //status = tx_thread_create(&MQTT_MESSAGE_QUEUE_THREAD, "MQTT_MESSAGE_QUEUE_THREAD", MQTT_MESSAGE_QUEUE_TASK ,0, STACK_MQTT_MESSAGE_QUEUE_THREAD, STACK_SIZE*2, 15, 15, TX_NO_TIME_SLICE,TX_AUTO_START);
    405            status = GsnOsal_ThreadCreate(MQTT_MESSAGE_QUEUE_TASK, NULL, &MQTT_MESSAGE_QUEUE_THREAD, "MQTT_MESSAGE_QUEUE_THREAD", 15, STACK_MQTT_MESSAGE_QUEUE_THREAD, STACK_SIZE*2, GSN_OSAL_THREAD_INITIAL_READY);
   \   0000007C   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_22:
   \   00000080   0xF504 0x50F0      ADD      R0,R4,#+7680
   \   00000084   0x3094             ADDS     R0,R0,#+148
   \   00000086   0x9001             STR      R0,[SP, #+4]
   \   00000088   0x200F             MOVS     R0,#+15
   \   0000008A   0x9000             STR      R0,[SP, #+0]
   \   0000008C   0xF504 0x72F0      ADD      R2,R4,#+480
   \   00000090   0x.... 0x....      ADR.W    R3,`?<Constant "MQTT_MESSAGE_QUEUE_TH...">`
   \   00000094   0x.... 0x....      ADR.W    R0,MQTT_MESSAGE_QUEUE_TASK
   \   00000098   0x2100             MOVS     R1,#+0
   \   0000009A   0x.... 0x....      BL       GsnOsal_ThreadCreate
    406            //status = tx_timer_create(&my_timer, "mqtt_ping_timer", MQTT_PING_OUT, 0, 1200, 0, TX_NO_ACTIVATE);
    407            AppS2wHal_TimerInit(&my_timer, MQTT_PING_OUT, NULL );
   \   0000009E   0x2200             MOVS     R2,#+0
   \   000000A0   0x.... 0x....      ADR.W    R1,MQTT_PING_OUT
   \   000000A4   0xF504 0x501C      ADD      R0,R4,#+9984
   \   000000A8   0x.... 0x....      BL       AppS2wHal_TimerInit
    408          
    409            //S2w_Printf("\r\n PING TIMER STATUS : %d", status);
    410            //status = tx_timer_create(&mqtt_retry_timer, "mqtt_publish_retry", MQTT_PUBLISH_RETRY, (ULONG)&mqtt_ctx, 100, 300, TX_AUTO_ACTIVATE);
    411            AppS2wHal_TimerInit(&mqtt_retry_timer, MQTT_PUBLISH_RETRY, NULL);
   \   000000AC   0xF504 0x501C      ADD      R0,R4,#+9984
   \   000000B0   0x2200             MOVS     R2,#+0
   \   000000B2   0x.... 0x....      ADR.W    R1,MQTT_PUBLISH_RETRY
   \   000000B6   0x3038             ADDS     R0,R0,#+56
   \   000000B8   0x.... 0x....      BL       AppS2wHal_TimerInit
    412            status = tx_mutex_create(&conStatus_mutex, "conStatus_mutex", TX_INHERIT);
   \   000000BC   0xF504 0x5018      ADD      R0,R4,#+9728
   \   000000C0   0x2201             MOVS     R2,#+1
   \   000000C2   0x.... 0x....      ADR.W    R1,`?<Constant "conStatus_mutex">`
   \   000000C6   0x30C8             ADDS     R0,R0,#+200
   \   000000C8   0x.... 0x....      BL       _tx_mutex_create
    413            status = tx_mutex_create(&ping_mutex, "ping_mutex", TX_INHERIT);
    414            //status = tx_semaphore_create(&ping_semaphore, "ping_semaphore",1);
    415            
    416            return status;
   \   000000CC   0xF504 0x5018      ADD      R0,R4,#+9728
   \   000000D0   0x2201             MOVS     R2,#+1
   \   000000D2   0x.... 0x....      ADR.W    R1,`?<Constant "ping_mutex">`
   \   000000D6   0x3094             ADDS     R0,R0,#+148
   \   000000D8   0x.... 0x....      BL       _tx_mutex_create
   \   000000DC   0xB2C0             UXTB     R0,R0
   \   000000DE   0xB005             ADD      SP,SP,#+20
   \   000000E0   0xBD30             POP      {R4,R5,PC}       ;; return
    417          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x9003             STR      R0,[SP, #+12]
   \   00000004   0xF44F 0x6000      MOV      R0,#+2048
   \   00000008   0x9002             STR      R0,[SP, #+8]
   \   0000000A   0x4770             BX       LR
    418          

   \                                 In section .text, align 4, keep-with-next
    419          VOID MQTT_PROCESS_TASK(UINT32 MQTT_INPUT)
    420          {
   \                     MQTT_PROCESS_TASK:
   \   00000000   0xE92D 0x43F8      PUSH     {R3-R9,LR}
    421            UINT32 oldState;
    422            oldState = mqtt_Xstate;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable93_2
   \   00000008   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n STATE CHANGED : %d...">`
   \   0000000C   0x7865             LDRB     R5,[R4, #+1]
   \   0000000E   0x.... 0x....      ADR.W    R7,MQTT_CALLBACK
   \   00000012   0x.... 0x....      LDR.W    R8,??DataTable93_3
   \   00000016   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\n  PROCESS_TASK START ">`
   \   0000001A   0xE00F             B.N      ??MQTT_PROCESS_TASK_0
    423            while(1)
    424            {
    425          	S2w_Printf("\r\n  PROCESS_TASK START ");
    426          	if (mqtt_Xstate < StateCount)
    427              {   
    428                  MQTT_CALLBACK[mqtt_Xstate].callback(&mqtt_ctx);
   \                     ??MQTT_PROCESS_TASK_1:
   \   0000001C   0xEB07 0x01C1      ADD      R1,R7,R1, LSL #+3
   \   00000020   0x4640             MOV      R0,R8
   \   00000022   0x6849             LDR      R1,[R1, #+4]
   \   00000024   0x4788             BLX      R1
    429                  if (mqtt_Xstate != oldState)
   \   00000026   0x7862             LDRB     R2,[R4, #+1]
   \   00000028   0x42AA             CMP      R2,R5
   \   0000002A   0xD004             BEQ.N    ??MQTT_PROCESS_TASK_2
    430                  {
    431                      S2w_Printf("\r\n STATE CHANGED : %d -> %d\n", oldState, mqtt_Xstate);
   \   0000002C   0x4629             MOV      R1,R5
   \   0000002E   0x4630             MOV      R0,R6
   \   00000030   0x.... 0x....      BL       S2w_Printf
    432                      oldState = mqtt_Xstate;
   \   00000034   0x7865             LDRB     R5,[R4, #+1]
    433                  }
    434              }
    435          	else
    436          	{
    437          	  break;
    438          	}
    439          	tx_thread_sleep(100);
   \                     ??MQTT_PROCESS_TASK_2:
   \   00000036   0x2064             MOVS     R0,#+100
   \   00000038   0x.... 0x....      BL       _tx_thread_sleep
   \                     ??MQTT_PROCESS_TASK_0:
   \   0000003C   0x4648             MOV      R0,R9
   \   0000003E   0x.... 0x....      BL       S2w_Printf
   \   00000042   0x7861             LDRB     R1,[R4, #+1]
   \   00000044   0x2905             CMP      R1,#+5
   \   00000046   0xD3E9             BCC.N    ??MQTT_PROCESS_TASK_1
    440            }
    441          }
   \   00000048   0xE8BD 0x83F1      POP      {R0,R4-R9,PC}    ;; return
    442          

   \                                 In section .text, align 4, keep-with-next
    443          VOID MQTT_SENDER_TASK(UINT32 MQTT_INPUT)
    444          {
   \                     MQTT_SENDER_TASK:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x.... 0x....      ADR.W    R4,MQTT_MSG_CALLBACK
   \   00000006   0x.... 0x....      ADR.W    R5,`?<Constant "\\r\\n pub list 2 unlock">`
   \   0000000A   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n pub list 2 lock">`
   \   0000000E   0x.... 0x....      ADR.W    R7,`?<Constant "\\r\\n  SEND_TASK START ">`
    445              MSG_TYPE* temp;
    446          	while(1)
    447          	{
    448          	  if(mqtt_Xstate == MQTT_STATE_CONNECT)
   \                     ??MQTT_SENDER_TASK_0:
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable93_2
   \   00000016   0x7840             LDRB     R0,[R0, #+1]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD117             BNE.N    ??MQTT_SENDER_TASK_1
    449          	  {
    450          		    S2w_Printf("\r\n  SEND_TASK START ");
   \   0000001C   0x4638             MOV      R0,R7
   \   0000001E   0x.... 0x....      BL       S2w_Printf
    451          			S2w_Printf("\r\n pub list 2 lock");
   \   00000022   0x4630             MOV      R0,R6
   \   00000024   0x.... 0x....      BL       S2w_Printf
    452          			MQTT_LIST_GET(&(mqtt_ctx.publish_list),&temp);
   \   00000028   0xA900             ADD      R1,SP,#+0
   \   0000002A   0x.... 0x....      LDR.W    R0,??DataTable93_4
   \   0000002E   0x.... 0x....      BL       MQTT_LIST_GET
    453          			S2w_Printf("\r\n pub list 2 unlock");
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       S2w_Printf
    454          			if(temp != NULL)
   \   00000038   0x9800             LDR      R0,[SP, #+0]
   \   0000003A   0xB138             CBZ.N    R0,??MQTT_SENDER_TASK_1
    455          			{
    456          				MQTT_MSG_CALLBACK[temp->MSG_TYPE].callback(temp);
   \   0000003C   0x.... 0x....      BL       ?Subroutine10
    457          				if(temp != NULL)
   \                     ??CrossCallReturnLabel_24:
   \   00000040   0x9800             LDR      R0,[SP, #+0]
   \   00000042   0xB118             CBZ.N    R0,??MQTT_SENDER_TASK_1
    458          				{
    459            					gsn_free(temp);
   \   00000044   0x.... 0x....      BL       GsnDynMemMgmt_Free
    460          					temp = NULL;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
    461          				}
    462          			}
    463          	  }
    464          	  tx_thread_sleep(5);
   \                     ??MQTT_SENDER_TASK_1:
   \   0000004C   0x2005             MOVS     R0,#+5
   \   0000004E   0x.... 0x....      BL       _tx_thread_sleep
   \   00000052   0xE7DE             B.N      ??MQTT_SENDER_TASK_0
    465          	}
    466          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x7801             LDRB     R1,[R0, #+0]
   \   00000002   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \   00000006   0x6849             LDR      R1,[R1, #+4]
   \   00000008   0x4708             BX       R1
    467          

   \                                 In section .text, align 2, keep-with-next
    468          VOID MQTT_RECEIVER_TASK(UINT32 MQTT_INPUT)
    469          {
   \                     MQTT_RECEIVER_TASK:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x.... 0x....      ADR.W    R4,MQTT_MSG_CALLBACK
   \   00000006   0x.... 0x....      ADR.W    R5,`?<Constant "\\r\\n re list 2 unlock">`
   \   0000000A   0x.... 0x....      LDR.W    R6,??DataTable93_3
   \   0000000E   0x.... 0x....      ADR.W    R7,`?<Constant "\\r\\n re list 2 lock">`
    470            MSG_TYPE* temp;
    471            while(1)
    472            {
    473          	if(mqtt_Xstate == MQTT_STATE_CONNECT)
   \                     ??MQTT_RECEIVER_TASK_0:
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable93_2
   \   00000016   0x7840             LDRB     R0,[R0, #+1]
   \   00000018   0x2803             CMP      R0,#+3
   \   0000001A   0xD114             BNE.N    ??MQTT_RECEIVER_TASK_1
    474          	{
    475          		S2w_Printf("\r\n re list 2 lock");
   \   0000001C   0x4638             MOV      R0,R7
   \   0000001E   0x.... 0x....      BL       S2w_Printf
    476          		MQTT_LIST_GET(&(mqtt_ctx.receive_list),&temp);
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xF106 0x0078      ADD      R0,R6,#+120
   \   00000028   0x.... 0x....      BL       MQTT_LIST_GET
    477          		S2w_Printf("\r\n re list 2 unlock");
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       S2w_Printf
    478          		if(temp != NULL)
   \   00000032   0x9800             LDR      R0,[SP, #+0]
   \   00000034   0xB138             CBZ.N    R0,??MQTT_RECEIVER_TASK_1
    479          		{
    480          			MQTT_MSG_CALLBACK[temp->MSG_TYPE].callback(temp);
   \   00000036   0x.... 0x....      BL       ?Subroutine10
    481            			//free(temp);
    482            			if(temp != NULL)
   \                     ??CrossCallReturnLabel_23:
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0xB118             CBZ.N    R0,??MQTT_RECEIVER_TASK_1
    483          			{
    484            				gsn_free(temp);
   \   0000003E   0x.... 0x....      BL       GsnDynMemMgmt_Free
    485          				temp = NULL;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9000             STR      R0,[SP, #+0]
    486          			}
    487          		}
    488          	}
    489          	tx_thread_sleep(5);
   \                     ??MQTT_RECEIVER_TASK_1:
   \   00000046   0x2005             MOVS     R0,#+5
   \   00000048   0x.... 0x....      BL       _tx_thread_sleep
   \   0000004C   0xE7E1             B.N      ??MQTT_RECEIVER_TASK_0
    490          	////S2w_Printf("\r\n  MQTT_RECEIVER_TASK START ");
    491            }
    492          }
    493          
    494          
    495          

   \                                 In section .text, align 4, keep-with-next
    496          VOID MQTT_MESSAGE_QUEUE_TASK(UINT32 MQTT_INPUT)
    497          {
   \                     MQTT_MESSAGE_QUEUE_TASK:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   \   00000004   0xB088             SUB      SP,SP,#+32
   \   00000006   0x.... 0x....      ADR.W    R4,`?<Constant "\\r\\n QUEUE_TASK END">`
   \   0000000A   0x.... 0x....      ADR.W    R5,MQTT_MSG_CALLBACK
   \   0000000E   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\n rcv_MSG : %x %x %x %x">`
   \   00000012   0x.... 0x....      ADR.W    R10,`?<Constant "\\r\\n QUEUE COUNT 2 : %d">`
   \   00000016   0x.... 0x....      ADR.W    R8,`?<Constant "\\r\\n QUEUE_TASK START">`
   \   0000001A   0x.... 0x....      LDR.W    R7,??DataTable93_2
   \   0000001E   0xAE01             ADD      R6,SP,#+4
   \   00000020   0xE001             B.N      ??MQTT_MESSAGE_QUEUE_TASK_0
    498          	UINT8 receive_MSG[4];
    499          	MSG_TYPE temp;
    500          	UINT8 status;
    501          	while(1)
    502          	{
    503          	    	S2w_Printf("\r\n QUEUE_TASK START");
    504          			S2w_Printf("\r\n QUEUE COUNT 2 : %d",MQTT_RECEIVE_QUEUE.tx_queue_available_storage);
    505          	    	status = tx_queue_receive(&MQTT_RECEIVE_QUEUE, receive_MSG, TX_WAIT_FOREVER);
    506          			//status = tx_queue_receive(&MQTT_RECEIVE_QUEUE, receive_MSG, 1);
    507          			if(status !=0)
    508          			{
    509          			  MQTT_MESSAGE_QUEUE_LOG(status);
   \                     ??MQTT_MESSAGE_QUEUE_TASK_1:
   \   00000022   0x.... 0x....      BL       MQTT_MESSAGE_QUEUE_LOG
    510          			  continue;
    511          			}
   \                     ??MQTT_MESSAGE_QUEUE_TASK_0:
   \   00000026   0x4640             MOV      R0,R8
   \   00000028   0x.... 0x....      BL       S2w_Printf
   \   0000002C   0x69B9             LDR      R1,[R7, #+24]
   \   0000002E   0x4650             MOV      R0,R10
   \   00000030   0x.... 0x....      BL       S2w_Printf
   \   00000034   0xF04F 0x32FF      MOV      R2,#-1
   \   00000038   0xA901             ADD      R1,SP,#+4
   \   0000003A   0x1D38             ADDS     R0,R7,#+4
   \   0000003C   0x.... 0x....      BL       _tx_queue_receive
   \   00000040   0xB2C0             UXTB     R0,R0
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD1ED             BNE.N    ??MQTT_MESSAGE_QUEUE_TASK_1
    512          			else
    513          			{
    514          				//tx_queue_receive(&MQTT_RECEIVE_QUEUE, receive_MSG, TX_WAIT_FOREVER);
    515          				S2w_Printf("\r\n rcv_MSG : %x %x %x %x", receive_MSG[0], receive_MSG[1], receive_MSG[2], receive_MSG[3]);
   \   00000046   0x78F0             LDRB     R0,[R6, #+3]
   \   00000048   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004C   0x9000             STR      R0,[SP, #+0]
   \   0000004E   0x78B3             LDRB     R3,[R6, #+2]
   \   00000050   0x7872             LDRB     R2,[R6, #+1]
   \   00000052   0x4648             MOV      R0,R9
   \   00000054   0x.... 0x....      BL       S2w_Printf
    516          				temp.MSG_TYPE = receive_MSG[0] >> 4;
   \   00000058   0xF89D 0x0004      LDRB     R0,[SP, #+4]
   \   0000005C   0x0900             LSRS     R0,R0,#+4
   \   0000005E   0xF88D 0x0008      STRB     R0,[SP, #+8]
    517          				temp.PAYLOAD = NULL;
   \   00000062   0x2000             MOVS     R0,#+0
   \   00000064   0x9004             STR      R0,[SP, #+16]
    518          				temp.TIME = 0;
   \   00000066   0x9006             STR      R0,[SP, #+24]
    519          				temp.TOPIC = NULL;
   \   00000068   0x9003             STR      R0,[SP, #+12]
    520          				temp.MSG_ID = mqtt_parse_msg_id(receive_MSG);
   \   0000006A   0xA801             ADD      R0,SP,#+4
   \   0000006C   0x.... 0x....      BL       mqtt_parse_msg_id
   \   00000070   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    521          				if(temp.MSG_TYPE == MQTT_MSG_TYPE_CONNACK)
   \   00000074   0xA802             ADD      R0,SP,#+8
   \   00000076   0xF89D 0x1008      LDRB     R1,[SP, #+8]
   \   0000007A   0x2902             CMP      R1,#+2
   \   0000007C   0xD102             BNE.N    ??MQTT_MESSAGE_QUEUE_TASK_2
    522          			    	MQTT_MSG_FUNC_CONNACK(&temp);
   \   0000007E   0x.... 0x....      BL       MQTT_MSG_FUNC_CONNACK
   \   00000082   0xE003             B.N      ??MQTT_MESSAGE_QUEUE_TASK_3
    523          				else
    524          				{
    525          			    	//S2w_Printf("\r\n re list 3 lock");
    526          			    	//MQTT_LIST_PUT(&(mqtt_ctx.receive_list),&temp);
    527          					MQTT_MSG_CALLBACK[temp.MSG_TYPE].callback(&temp);
   \                     ??MQTT_MESSAGE_QUEUE_TASK_2:
   \   00000084   0xEB05 0x01C1      ADD      R1,R5,R1, LSL #+3
   \   00000088   0x6849             LDR      R1,[R1, #+4]
   \   0000008A   0x4788             BLX      R1
    528          					//S2w_Printf("\r\n re list 3 unlock");
    529          				}
    530          			}
    531          			S2w_Printf("\r\n QUEUE_TASK END");
   \                     ??MQTT_MESSAGE_QUEUE_TASK_3:
   \   0000008C   0x4620             MOV      R0,R4
   \   0000008E   0x.... 0x....      BL       S2w_Printf
   \   00000092   0xE7C8             B.N      ??MQTT_MESSAGE_QUEUE_TASK_0
    532          
    533          	}
    534          }
    535          

   \                                 In section .text, align 2, keep-with-next
    536          UINT32 MQTT_MSG_FUNC_CONNACK(MSG_TYPE* MSG)
    537          {
   \                     MQTT_MSG_FUNC_CONNACK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    538            S2w_Printf("\r\n  CONNACK START ");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  CONNACK START ">`
   \   00000008   0x.... 0x....      BL       S2w_Printf
    539            MQTT_CONNECT_ACK_LOG(MSG->MSG_ID);
   \   0000000C   0x89A0             LDRH     R0,[R4, #+12]
   \   0000000E   0xB2C0             UXTB     R0,R0
   \   00000010   0x.... 0x....      BL       MQTT_CONNECT_ACK_LOG
    540            tx_mutex_get(&conStatus_mutex, TX_WAIT_FOREVER);
   \   00000014   0x.... 0x....      BL       ?Subroutine7
    541            MQTT_CONNECT_STATUS = 1;
   \                     ??CrossCallReturnLabel_30:
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7020             STRB     R0,[R4, #+0]
    542            tx_mutex_put(&conStatus_mutex);
   \   0000001C   0x....             B.N      ?Subroutine1
    543            //S2w_Printf("\r\n  MQTT_MSG_FUNC_CONNACK END ");
    544            return 0;	
    545          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x.... 0x....      LDR.W    R4,??DataTable93_2
   \   00000004   0xF504 0x5518      ADD      R5,R4,#+9728
   \   00000008   0x35C8             ADDS     R5,R5,#+200
   \   0000000A                      REQUIRE ??Subroutine13_0
   \   0000000A                      ;; // Fall through to label ??Subroutine13_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine13_0:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x4628             MOV      R0,R5
   \   00000006   0x.... 0x....      B.W      _tx_mutex_get

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x4628             MOV      R0,R5
   \   00000002   0x.... 0x....      BL       _tx_mutex_put
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    546          
    547          

   \                                 In section .text, align 2, keep-with-next
    548          UINT32 MQTT_MSG_FUNC_PUBLISH(MSG_TYPE* MSG)
    549          {
   \                     MQTT_MSG_FUNC_PUBLISH:
   \   00000000   0xE92D 0x4170      PUSH     {R4-R6,R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB083             SUB      SP,SP,#+12
    550            UINT8 status;
    551            S2w_Printf("\r\n  PUBLISH START "); 
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  PUBLISH START ">`
   \   0000000C   0x.... 0x....      BL       S2w_Printf
    552            if(mqtt_ctx.QoS == 1 || mqtt_ctx.QoS == 2)
   \   00000010   0x.... 0x....      LDR.W    R5,??DataTable93_3
   \   00000014   0xF895 0x0054      LDRB     R0,[R5, #+84]
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xBF18             IT       NE 
   \   0000001C   0x2802             CMPNE    R0,#+2
   \   0000001E   0xD10A             BNE.N    ??MQTT_MSG_FUNC_PUBLISH_0
    553            	status = mqtt_publish_with_qos(&(mqtt_ctx.MQTT_CLIENT), (char const*)MSG->TOPIC, (char const*)MSG->PAYLOAD, 0, mqtt_ctx.QoS, &(MSG->MSG_ID));
   \   00000020   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000024   0x9101             STR      R1,[SP, #+4]
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x68A2             LDR      R2,[R4, #+8]
   \   0000002A   0x6861             LDR      R1,[R4, #+4]
   \   0000002C   0x2300             MOVS     R3,#+0
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0x.... 0x....      BL       mqtt_publish_with_qos
   \   00000034   0x4606             MOV      R6,R0
    554          
    555            if(status == 0)
   \                     ??MQTT_MSG_FUNC_PUBLISH_0:
   \   00000036   0xB2F6             UXTB     R6,R6
   \   00000038   0xB9DE             CBNZ.N   R6,??MQTT_MSG_FUNC_PUBLISH_1
    556            {
    557          	MSG->TIME = SYSTIME_TO_MSEC(GsnTod_Get());
   \   0000003A   0x.... 0x....      BL       GsnTod_Get
   \   0000003E   0xF44F 0x787A      MOV      R8,#+1000
   \   00000042   0xFBA8 0x2300      UMULL    R2,R3,R8,R0
   \   00000046   0xFB08 0x3301      MLA      R3,R8,R1,R3
   \   0000004A   0x.... 0x....      BL       ??Subroutine14_0
   \                     ??CrossCallReturnLabel_31:
   \   0000004E   0x6122             STR      R2,[R4, #+16]
    558          	S2w_Printf("\r\n PUBLISH : ID %d SEND Suc",MSG->MSG_ID);
   \   00000050   0x89A1             LDRH     R1,[R4, #+12]
   \   00000052   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH : ID %d SE...">`
   \   00000056   0x.... 0x....      BL       S2w_Printf
    559          	S2w_Printf("\r\n se list 3 lock");
   \   0000005A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 3 lock">`
   \   0000005E   0x.... 0x....      BL       S2w_Printf
    560          	MQTT_LIST_PUT(&(mqtt_ctx.send_list),MSG);
   \   00000062   0x4621             MOV      R1,R4
   \   00000064   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000068   0x.... 0x....      BL       MQTT_LIST_PUT
    561          	S2w_Printf("\r\n se list 3 unlock");
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 3 unlock">`
   \   00000070   0xE005             B.N      ??MQTT_MSG_FUNC_PUBLISH_2
    562            }
    563            else
    564            {
    565          	mqtt_Xstate = MQTT_STATE_DISCONNECT;
   \                     ??MQTT_MSG_FUNC_PUBLISH_1:
   \   00000072   0x.... 0x....      LDR.W    R0,??DataTable93_2
   \   00000076   0x2104             MOVS     R1,#+4
   \   00000078   0x7041             STRB     R1,[R0, #+1]
    566          	S2w_Printf("\r\n PUBLISH : SEND Fail");
   \   0000007A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH : SEND Fail">`
   \                     ??MQTT_MSG_FUNC_PUBLISH_2:
   \   0000007E   0x.... 0x....      BL       S2w_Printf
    567            }
    568            S2w_Printf("\r\n  PUBLISH END ");
   \   00000082   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  PUBLISH END ">`
   \   00000086   0x.... 0x....      BL       S2w_Printf
    569            return status;
   \   0000008A   0x4630             MOV      R0,R6
   \   0000008C   0xE8BD 0x817E      POP      {R1-R6,R8,PC}    ;; return
    570          }

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine14_0:
   \   00000000   0x0BD2             LSRS     R2,R2,#+15
   \   00000002   0xEA42 0x4243      ORR      R2,R2,R3, LSL #+17
   \   00000006   0x4770             BX       LR
    571          
    572          

   \                                 In section .text, align 4, keep-with-next
    573          VOID MQTT_PUBLISH_RETRY(VOID* TIMER_INPUT)
    574          {
   \                     MQTT_PUBLISH_RETRY:
   \   00000000   0xB580             PUSH     {R7,LR}
    575            MSG_TYPE* temp;
    576            
    577            S2w_Printf("\r\n PUBLISH_RETRY START "); 
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH_RETRY START ">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    578            
    579            /*MQTT_LIST_GET(&(mqtt_ctx.send_list), &temp);
    580            if(temp != NULL)
    581            {
    582          	if(temp->sending_count < 3)
    583          	{
    584          	  	temp->TIME = SYSTIME_TO_MSEC(GsnTod_Get());
    585          		temp->sending_count++;
    586          		mqtt_publish_retry_dup(&(mqtt_ctx.MQTT_CLIENT), (char const*)temp->TOPIC, (char const*)temp->PAYLOAD, 1, mqtt_ctx.QoS, (temp->MSG_ID));
    587          		MQTT_LIST_PUT(&(mqtt_ctx.send_list),temp);
    588          	}
    589          	else if((temp->sending_count > 3) || ((SYSTIME_TO_MSEC(GsnTod_Get())-(temp->TIME)) > 12000) )
    590          	{
    591          	  gsn_free(temp->TOPIC);
    592          	  gsn_free(temp->PAYLOAD);
    593          	  gsn_free(temp);
    594          	}
    595            }*/
    596            S2w_Printf("\r\n PUBLISH_RETRY END ");
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH_RETRY END ">`
   \   0000000E   0xE8BD 0x4002      POP      {R1,LR}
   \   00000012   0x.... 0x....      B.W      S2w_Printf
    597          }
    598          
    599          
    600          

   \                                 In section .text, align 2, keep-with-next
    601          UINT32 MQTT_MSG_FUNC_PUBACK(MSG_TYPE* MSG)
    602          {
   \                     MQTT_MSG_FUNC_PUBACK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    603            UINT8 status;
    604            S2w_Printf("\r\n PUBACK START ");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBACK START ">`
   \   00000008   0x.... 0x....      BL       S2w_Printf
    605            S2w_Printf("\r\n se list 4 lock");
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 4 lock">`
   \   00000010   0x.... 0x....      BL       S2w_Printf
    606            status = MQTT_LIST_DELECT(&(mqtt_ctx.send_list), MSG->MSG_ID);
   \   00000014   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_26:
   \   00000018   0x.... 0x....      BL       ?Subroutine6
    607            S2w_Printf("\r\n se list 4 unlock");
    608            if(status == 0)
   \                     ??CrossCallReturnLabel_18:
   \   0000001C   0x89A1             LDRH     R1,[R4, #+12]
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xBF0C             ITE      EQ 
   \   00000022   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n PUBACK : %d del">`
   \   00000026   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n PUBACK : %d is not...">`
    609          	S2w_Printf("\r\n PUBACK : %d del",MSG->MSG_ID);
    610            else
    611          	S2w_Printf("\r\n PUBACK : %d is not found",MSG->MSG_ID);
   \   0000002A   0x.... 0x....      BL       S2w_Printf
    612            S2w_Printf("\r\n PUBACK END ");
   \   0000002E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBACK END ">`
   \   00000032   0x.... 0x....      BL       S2w_Printf
    613            return status;
   \   00000036   0x4628             MOV      R0,R5
   \   00000038   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    614            
    615          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x89A1             LDRH     R1,[R4, #+12]
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable93_5
   \   00000006   0x....             B.N      MQTT_LIST_DELECT

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x4605             MOV      R5,R0
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 4 unlock">`
   \   00000006   0x.... 0x....      B.W      S2w_Printf
    616          

   \                                 In section .text, align 2, keep-with-next
    617          UINT32 MQTT_MSG_FUNC_PUBREC(MSG_TYPE* MSG)
    618          {
   \                     MQTT_MSG_FUNC_PUBREC:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    619            //MSG_TYPE temp;
    620            UINT8 status;
    621            S2w_Printf("\r\n PUBREC START ");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBREC START ">`
   \   00000008   0x.... 0x....      BL       S2w_Printf
    622            status = MQTT_LIST_SEARCH(&(mqtt_ctx.send_list), MSG->MSG_ID);
   \   0000000C   0x.... 0x....      LDR.W    R5,??DataTable93_3
   \   00000010   0x89A1             LDRH     R1,[R4, #+12]
   \   00000012   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000016   0x.... 0x....      BL       MQTT_LIST_SEARCH
    623            if(status != 0)
   \   0000001A   0x89A1             LDRH     R1,[R4, #+12]
   \   0000001C   0x0006             MOVS     R6,R0
   \   0000001E   0xD005             BEQ.N    ??MQTT_MSG_FUNC_PUBREC_0
    624            {
    625          	S2w_Printf("\r\n PUBREC : %d is not exist",MSG->MSG_ID); 
   \   00000020   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBREC : %d is not...">`
   \   00000024   0x.... 0x....      BL       S2w_Printf
    626          	return status;
   \   00000028   0x4630             MOV      R0,R6
   \   0000002A   0xBD70             POP      {R4-R6,PC}
    627            }
    628            mqtt_pubrel(&(mqtt_ctx.MQTT_CLIENT), MSG->MSG_ID);
   \                     ??MQTT_MSG_FUNC_PUBREC_0:
   \   0000002C   0x4628             MOV      R0,R5
   \   0000002E   0x.... 0x....      BL       mqtt_pubrel
    629            S2w_Printf("\r\n PUBREC : %d PUBREL SUCCESS",MSG->MSG_ID); 
   \   00000032   0x89A1             LDRH     R1,[R4, #+12]
   \   00000034   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBREC : %d PUBREL...">`
   \   00000038   0x.... 0x....      BL       S2w_Printf
    630            return status;  
   \   0000003C   0x2000             MOVS     R0,#+0
   \   0000003E   0xBD70             POP      {R4-R6,PC}       ;; return
    631          }
    632          

   \                                 In section .text, align 2, keep-with-next
    633          UINT32 MQTT_MSG_FUNC_PUBCOMP(MSG_TYPE* MSG)
    634          {
   \                     MQTT_MSG_FUNC_PUBCOMP:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    635            UINT8 status;
    636            S2w_Printf("\r\n PUBCOMP START ");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBCOMP START ">`
   \   00000008   0x.... 0x....      BL       S2w_Printf
    637            S2w_Printf("\r\n se list 4 lock");
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 4 lock">`
   \   00000010   0x.... 0x....      BL       S2w_Printf
    638            status = MQTT_LIST_DELECT(&(mqtt_ctx.send_list), MSG->MSG_ID);
   \   00000014   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_25:
   \   00000018   0x.... 0x....      BL       ?Subroutine6
    639            S2w_Printf("\r\n se list 4 unlock");
    640            if(status == 0)
   \                     ??CrossCallReturnLabel_17:
   \   0000001C   0x89A1             LDRH     R1,[R4, #+12]
   \   0000001E   0x2D00             CMP      R5,#+0
   \   00000020   0xBF0C             ITE      EQ 
   \   00000022   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n PUBCOMP : %d del">`
   \   00000026   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n PUBCOMP : %d is no...">`
    641          	S2w_Printf("\r\n PUBCOMP : %d del",MSG->MSG_ID);
    642            else
    643          	S2w_Printf("\r\n PUBCOMP : %d is not exist",MSG->MSG_ID);
   \   0000002A   0x.... 0x....      BL       S2w_Printf
    644            return status;
   \   0000002E   0x4628             MOV      R0,R5
   \   00000030   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    645          }
    646          

   \                                 In section .text, align 2, keep-with-next
    647          UINT32 MQTT_MSG_FUNC_PINGRESP(MSG_TYPE* MSG)
    648          {
   \                     MQTT_MSG_FUNC_PINGRESP:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    649            S2w_Printf("\r\n PINGRESP START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PINGRESP START ">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    650            //tx_timer_deactivate(&my_timer);
    651            AppS2wHal_TimerStop(&my_timer);
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    652            tx_mutex_get(&ping_mutex, TX_WAIT_FOREVER);
   \                     ??CrossCallReturnLabel_20:
   \   0000000E   0xF504 0x5518      ADD      R5,R4,#+9728
   \   00000012   0x3594             ADDS     R5,R5,#+148
   \   00000014   0x.... 0x....      BL       ??Subroutine13_0
    653            ping_count = 0;
   \                     ??CrossCallReturnLabel_28:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x70A0             STRB     R0,[R4, #+2]
    654            tx_mutex_put(&ping_mutex);
   \   0000001C                      REQUIRE ?Subroutine1
   \   0000001C                      ;; // Fall through to label ?Subroutine1
    655            return 0;
    656          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x....             LDR.N    R4,??DataTable93_2
   \   00000002   0xF504 0x501C      ADD      R0,R4,#+9984
   \   00000006   0x.... 0x....      B.W      AppS2wHal_TimerStop
    657          

   \                                 In section .text, align 2, keep-with-next
    658          static UINT32  MQTT_STATE_CALLBACK_UNINITIAL(void* client )
    659          {
   \                     MQTT_STATE_CALLBACK_UNINITIAL:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    660            S2w_Printf("\r\n  MQTT_STATE_CALLBACK_UNINITIAL START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  MQTT_STATE_CALLBA...">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    661            mqtt_Xstate = MQTT_STATE_INITIAL;
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable93_2
    662          
    663            
    664            mqtt_ctx.MQTT_CLIENT.clientid = (char*)gsn_malloc(strlen(ClientID)+1);
   \   0000000E   0x.... 0x....      LDR.W    R4,??DataTable93_3
   \   00000012   0x2101             MOVS     R1,#+1
   \   00000014   0x7041             STRB     R1,[R0, #+1]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0xF44F 0x7126      MOV      R1,#+664
   \   0000001C   0x200D             MOVS     R0,#+13
   \   0000001E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000022   0x6420             STR      R0,[R4, #+64]
    665            mqtt_ctx.MQTT_CLIENT.username = (char*)gsn_malloc(strlen(ClientID)+1);
   \   00000024   0xF104 0x0540      ADD      R5,R4,#+64
   \   00000028   0x2200             MOVS     R2,#+0
   \   0000002A   0xF240 0x2199      MOVW     R1,#+665
   \   0000002E   0x200D             MOVS     R0,#+13
   \   00000030   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000034   0x6068             STR      R0,[R5, #+4]
    666            mqtt_ctx.MQTT_CLIENT.password = (char*)gsn_malloc(strlen(PASSWORD)+1);
   \   00000036   0x2200             MOVS     R2,#+0
   \   00000038   0xF240 0x219A      MOVW     R1,#+666
   \   0000003C   0x201D             MOVS     R0,#+29
   \   0000003E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000042   0x60A8             STR      R0,[R5, #+8]
    667            
    668            
    669            memset(mqtt_ctx.MQTT_CLIENT.clientid,0,strlen(ClientID)+1);
   \   00000044   0x220D             MOVS     R2,#+13
   \   00000046   0x6C20             LDR      R0,[R4, #+64]
   \   00000048   0x.... 0x....      BL       ??Subroutine4_0
    670            memset(mqtt_ctx.MQTT_CLIENT.username,0,strlen(ClientID)+1);
   \                     ??CrossCallReturnLabel_10:
   \   0000004C   0x6868             LDR      R0,[R5, #+4]
   \   0000004E   0x220D             MOVS     R2,#+13
   \   00000050   0x.... 0x....      BL       ??Subroutine4_0
    671            memset(mqtt_ctx.MQTT_CLIENT.password,0,strlen(PASSWORD)+1);
   \                     ??CrossCallReturnLabel_9:
   \   00000054   0x68A8             LDR      R0,[R5, #+8]
   \   00000056   0x221D             MOVS     R2,#+29
   \   00000058   0x.... 0x....      BL       ??Subroutine4_0
    672            mqtt_ctx.QoS = MQTT_QoS;
   \                     ??CrossCallReturnLabel_8:
   \   0000005C   0x2001             MOVS     R0,#+1
   \   0000005E   0x7528             STRB     R0,[R5, #+20]
    673            mqtt_init(&(mqtt_ctx.MQTT_CLIENT), ClientID);
   \   00000060   0x4620             MOV      R0,R4
   \   00000062   0x.... 0x....      ADR.W    R5,`?<Constant "001dc914feae">`
   \   00000066   0x4629             MOV      R1,R5
   \   00000068   0x.... 0x....      BL       mqtt_init
    674            mqtt_init_auth(&(mqtt_ctx.MQTT_CLIENT), ClientID, PASSWORD);
   \   0000006C   0x.... 0x....      ADR.W    R2,`?<Constant "Sm4ytjGsPEfGvDhSDJ_ZP...">`
   \   00000070   0x4629             MOV      R1,R5
   \   00000072   0x4620             MOV      R0,R4
   \   00000074   0x.... 0x....      BL       mqtt_init_auth
    675          #ifdef GS2011ME_01
    676            temp_sensor_search(&nSensors,temperature_sensor);
    677          #endif
    678            
    679            //S2w_Printf("\r\n MQTT_STATE_CB_uninitialized");
    680            //S2w_Printf("\r\n  MQTT_STATE_CALLBACK_UNINITIAL END ");
    681            return 0;
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    682          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x9802             LDR      R0,[SP, #+8]
   \                     ??Subroutine4_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      memset
    683          

   \                                 In section .text, align 2, keep-with-next
    684          static UINT32  MQTT_STATE_CALLBACK_INITIAL(void* client)
    685          {
   \                     MQTT_STATE_CALLBACK_INITIAL:
   \   00000000   0xB510             PUSH     {R4,LR}
    686            UINT8 status;
    687            S2w_Printf("\r\n MQTT_STATE_CALLBACK_INITIAL START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CALLBAC...">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    688            status = MQTT_CONNECT();
    689            if(status == 0)
   \   0000000A   0x.... 0x....      BL       MQTT_CONNECT
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xBF0C             ITE      EQ 
   \   00000012   0x2002             MOVEQ    R0,#+2
   \   00000014   0x2001             MOVNE    R0,#+1
    690            {
    691          	mqtt_Xstate = MQTT_STATE_CONNECT_READY;
    692              //S2w_Printf("\r\n MQTT_STATE_CB_initialized");
    693            }
    694            else
    695            {
    696            	mqtt_Xstate = MQTT_STATE_INITIAL;
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable93_2
    697            }
    698            gsn_free(mqtt_ctx.MQTT_CLIENT.clientid);
   \   0000001A   0x.... 0x....      LDR.W    R4,??DataTable93_3
   \   0000001E   0x7048             STRB     R0,[R1, #+1]
   \   00000020   0x6C20             LDR      R0,[R4, #+64]
   \   00000022   0x.... 0x....      BL       GsnDynMemMgmt_Free
    699            gsn_free(mqtt_ctx.MQTT_CLIENT.username);
   \   00000026   0x6C60             LDR      R0,[R4, #+68]
   \   00000028   0x.... 0x....      BL       GsnDynMemMgmt_Free
    700            gsn_free(mqtt_ctx.MQTT_CLIENT.password);
   \   0000002C   0x6CA0             LDR      R0,[R4, #+72]
   \   0000002E   0x.... 0x....      BL       GsnDynMemMgmt_Free
    701            //S2w_Printf("\r\n  MQTT_STATE_CALLBACK_INITIAL END ");
    702            return 0;
   \   00000032   0x2000             MOVS     R0,#+0
   \   00000034   0xBD10             POP      {R4,PC}          ;; return
    703          }
    704          

   \                                 In section .text, align 2, keep-with-next
    705          static UINT32  MQTT_STATE_CALLBACK_CONNECT_READY(void* client)
    706          {
   \                     MQTT_STATE_CALLBACK_CONNECT_READY:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    707            S2w_Printf("\r\n MQTT_STATE_CALLBACK_CONNECT_READY START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CALLBAC...">_1`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    708            tx_mutex_get(&conStatus_mutex, TX_WAIT_FOREVER);
   \   0000000A   0x.... 0x....      BL       ?Subroutine7
    709            if(MQTT_CONNECT_STATUS == 1)
   \                     ??CrossCallReturnLabel_29:
   \   0000000E   0x7820             LDRB     R0,[R4, #+0]
   \   00000010   0x2801             CMP      R0,#+1
   \   00000012   0xBF0C             ITE      EQ 
   \   00000014   0x2003             MOVEQ    R0,#+3
   \   00000016   0x2004             MOVNE    R0,#+4
    710            {
    711          	mqtt_Xstate = MQTT_STATE_CONNECT;
    712            }
    713            else
    714          	mqtt_Xstate = MQTT_STATE_DISCONNECT;
   \   00000018   0x7060             STRB     R0,[R4, #+1]
    715            tx_mutex_put(&conStatus_mutex);
   \   0000001A   0x4628             MOV      R0,R5
   \   0000001C   0x.... 0x....      BL       _tx_mutex_put
    716            S2w_Printf("\r\n MQTT_STATE_CALLBACK_CONNECT_READY END ");
   \   00000020   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CALLBAC...">_2`
   \   00000024   0x.... 0x....      BL       S2w_Printf
    717            return 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    718          }
    719          

   \                                 In section .text, align 2, keep-with-next
    720          static UINT32  MQTT_STATE_CALLBACK_CONNECT(void* client)
    721          {
   \                     MQTT_STATE_CALLBACK_CONNECT:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x.... 0x....      ADR.W    R4,`?<Constant "\\r\\n pub list 4 unlock">`
   \   00000008   0x.... 0x....      ADR.W    R5,`?<Constant "\\r\\n pub list 4 lock">`
   \   0000000C   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n pub list 3 unlock">`
   \   00000010   0x.... 0x....      ADR.W    R8,`?<Constant "\\r\\n pub list 3 lock">`
   \   00000014   0x.... 0x....      LDR.W    R7,??DataTable93_2
   \   00000018   0xE01E             B.N      ??MQTT_STATE_CALLBACK_CONNECT_0
    722            
    723            //tx_timer_activate(&mqtt_retry_timer);
    724            //AppS2wHal_TimerStart(&mqtt_retry_timer, 30);
    725            while(mqtt_Xstate == MQTT_STATE_CONNECT)
    726            {
    727          	//S2w_Printf("\r\n  MQTT_STATE_CALLBACK_CONNECT START ");
    728          	//MQTT_PUBLISH_MSG_RETRY();
    729          	//tx_thread_sleep(30);
    730          	S2w_Printf("\r\n pub list 3 lock");
   \                     ??MQTT_STATE_CALLBACK_CONNECT_1:
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0x.... 0x....      BL       S2w_Printf
    731          	MQTT_PUBLISH_MSG_GEN(MQTT_SENSOR_STATUS);
   \   00000020   0x2001             MOVS     R0,#+1
   \   00000022   0x.... 0x....      BL       MQTT_PUBLISH_MSG_GEN
    732          	S2w_Printf("\r\n pub list 3 unlock");
   \   00000026   0x4630             MOV      R0,R6
   \   00000028   0x.... 0x....      BL       S2w_Printf
    733          	tx_thread_sleep(30);
   \   0000002C   0x201E             MOVS     R0,#+30
   \   0000002E   0x.... 0x....      BL       _tx_thread_sleep
    734          	S2w_Printf("\r\n pub list 4 lock");
   \   00000032   0x4628             MOV      R0,R5
   \   00000034   0x.... 0x....      BL       S2w_Printf
    735          	MQTT_PUBLISH_MSG_GEN(MQTT_SENSOR_DATA);
   \   00000038   0x2002             MOVS     R0,#+2
   \   0000003A   0x.... 0x....      BL       MQTT_PUBLISH_MSG_GEN
    736          	S2w_Printf("\r\n pub list 4 unlock");
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       S2w_Printf
    737          	tx_thread_sleep(30);
   \   00000044   0x201E             MOVS     R0,#+30
   \   00000046   0x.... 0x....      BL       _tx_thread_sleep
    738          	if( ping_count == 0 )
   \   0000004A   0x78B8             LDRB     R0,[R7, #+2]
   \   0000004C   0xB908             CBNZ.N   R0,??MQTT_STATE_CALLBACK_CONNECT_2
    739          	{
    740          		MQTT_PING_MSG();
   \   0000004E   0x.... 0x....      BL       MQTT_PING_MSG
    741          	}
    742          	tx_thread_sleep(50);
   \                     ??MQTT_STATE_CALLBACK_CONNECT_2:
   \   00000052   0x2032             MOVS     R0,#+50
   \   00000054   0x.... 0x....      BL       _tx_thread_sleep
    743            }
   \                     ??MQTT_STATE_CALLBACK_CONNECT_0:
   \   00000058   0x7878             LDRB     R0,[R7, #+1]
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD0DD             BEQ.N    ??MQTT_STATE_CALLBACK_CONNECT_1
    744            return 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    745          }
    746          
    747          

   \                                 In section .text, align 2, keep-with-next
    748          static UINT32  MQTT_STAET_CALLBACK_DISCONNECT(void* client)
    749          {
   \                     MQTT_STAET_CALLBACK_DISCONNECT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    750            UINT8 status;
    751            S2w_Printf("\r\n  MQTT_STAET_CALLBACK_DISCONNECT START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  MQTT_STAET_CALLBA...">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    752            //tx_timer_deactivate(&my_timer);
    753            AppS2wHal_TimerStop(&my_timer);
   \   0000000A   0x.... 0x....      BL       ?Subroutine8
    754            //tx_timer_deactivate(&mqtt_retry_timer);
    755            //tx_timer_delete(&mqtt_retry_timer);
    756            AppS2wHal_TimerStop(&mqtt_retry_timer);
   \                     ??CrossCallReturnLabel_19:
   \   0000000E   0xF504 0x501C      ADD      R0,R4,#+9984
   \   00000012   0x3038             ADDS     R0,R0,#+56
   \   00000014   0x.... 0x....      BL       AppS2wHal_TimerStop
    757            
    758            status = mqtt_disconnect(&(mqtt_ctx.MQTT_CLIENT));
    759            if(status != 0)
   \   00000018   0x.... 0x....      LDR.W    R5,??DataTable93_3
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       mqtt_disconnect
   \   00000022   0xB2C0             UXTB     R0,R0
   \   00000024   0xB118             CBZ.N    R0,??MQTT_STAET_CALLBACK_DISCONNECT_0
    760          	S2w_Printf("\r\n MQTT DISCONNECT ERROR");
   \   00000026   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT DISCONNECT ERROR">`
   \   0000002A   0x.... 0x....      BL       S2w_Printf
    761            
    762            status = AppS2wHal_NetClose(mqtt_ctx.MQTT_CLIENT.mqtt_cid);
    763            if(status != 0)
   \                     ??MQTT_STAET_CALLBACK_DISCONNECT_0:
   \   0000002E   0xF895 0x003C      LDRB     R0,[R5, #+60]
   \   00000032   0x.... 0x....      BL       AppS2wHal_NetClose
   \   00000036   0xB118             CBZ.N    R0,??MQTT_STAET_CALLBACK_DISCONNECT_1
    764          	S2w_Printf("\r\n NET CLOSE ERROR");
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n NET CLOSE ERROR">`
   \   0000003C   0x.... 0x....      BL       S2w_Printf
    765            
    766            mqtt_ctx.MQTT_CLIENT.seq = 0;
   \                     ??MQTT_STAET_CALLBACK_DISCONNECT_1:
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF8A5 0x0050      STRH     R0,[R5, #+80]
    767            tx_mutex_get(&conStatus_mutex, TX_WAIT_FOREVER);
   \   00000046   0xF504 0x5618      ADD      R6,R4,#+9728
   \   0000004A   0x36C8             ADDS     R6,R6,#+200
   \   0000004C   0xF04F 0x31FF      MOV      R1,#-1
   \   00000050   0x4630             MOV      R0,R6
   \   00000052   0x.... 0x....      BL       _tx_mutex_get
    768            MQTT_CONNECT_STATUS = 0;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x7020             STRB     R0,[R4, #+0]
    769            tx_mutex_put(&conStatus_mutex);
   \   0000005A   0x4630             MOV      R0,R6
   \   0000005C   0x.... 0x....      BL       _tx_mutex_put
    770            
    771            MQTT_LIST_DESTROY(&mqtt_ctx.publish_list);
   \   00000060   0xF105 0x0098      ADD      R0,R5,#+152
   \   00000064   0x.... 0x....      BL       MQTT_LIST_DESTROY
    772            MQTT_LIST_DESTROY(&mqtt_ctx.receive_list);
   \   00000068   0xF105 0x0078      ADD      R0,R5,#+120
   \   0000006C   0x.... 0x....      BL       MQTT_LIST_DESTROY
    773            MQTT_LIST_DESTROY(&mqtt_ctx.send_list);
   \   00000070   0xF105 0x0058      ADD      R0,R5,#+88
   \   00000074   0x.... 0x....      BL       MQTT_LIST_DESTROY
    774          
    775          
    776            tx_queue_flush(&MQTT_RECEIVE_QUEUE);
   \   00000078   0x1D20             ADDS     R0,R4,#+4
   \   0000007A   0x.... 0x....      BL       _tx_queue_flush
    777            ping_count = 0;
   \   0000007E   0x2000             MOVS     R0,#+0
   \   00000080   0x70A0             STRB     R0,[R4, #+2]
    778            mqtt_Xstate = MQTT_STATE_UNINITIAL;
   \   00000082   0x7060             STRB     R0,[R4, #+1]
    779          
    780            return 0;
   \   00000084   0xBD70             POP      {R4-R6,PC}       ;; return
    781          }
    782          
    783          
    784          

   \                                 In section .text, align 2, keep-with-next
    785          UINT8 MQTT_PUBLISH_MSG_RETRY()
    786          {
   \                     MQTT_PUBLISH_MSG_RETRY:
   \   00000000   0xB550             PUSH     {R4,R6,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    787            GSN_SYSTEM_TIME_T mSeconds = 0;
    788            MSG_TYPE* temp = NULL;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9002             STR      R0,[SP, #+8]
    789            S2w_Printf("\r\n PUB_MSG_RETRY START ");
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUB_MSG_RETRY START ">`
   \   0000000C   0x.... 0x....      BL       S2w_Printf
    790            S2w_Printf("\r\n se list 1 lock");
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n se list 1 lock">`
   \   00000014   0x.... 0x....      BL       S2w_Printf
    791            if(MQTT_LIST_COUNT(&(mqtt_ctx.send_list)) >= 5)
   \   00000018   0x....             LDR.N    R6,??DataTable93_3
   \   0000001A   0xF106 0x0058      ADD      R0,R6,#+88
   \   0000001E   0x.... 0x....      BL       MQTT_LIST_COUNT
   \   00000022   0x2805             CMP      R0,#+5
   \   00000024   0xDB47             BLT.N    ??MQTT_PUBLISH_MSG_RETRY_0
    792            {
    793          	MQTT_LIST_GET(&(mqtt_ctx.send_list), &temp);
   \   00000026   0xA902             ADD      R1,SP,#+8
   \   00000028   0xF106 0x0058      ADD      R0,R6,#+88
   \   0000002C   0x.... 0x....      BL       MQTT_LIST_GET
    794            	if(temp != NULL)
   \   00000030   0x9802             LDR      R0,[SP, #+8]
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD03F             BEQ.N    ??MQTT_PUBLISH_MSG_RETRY_0
    795            	{
    796          		if(temp->sending_count < 3)
   \   00000036   0x7D00             LDRB     R0,[R0, #+20]
   \   00000038   0xF44F 0x747A      MOV      R4,#+1000
   \   0000003C   0x2803             CMP      R0,#+3
   \   0000003E   0xDA1C             BGE.N    ??MQTT_PUBLISH_MSG_RETRY_1
    797          		{
    798          	  		temp->TIME = SYSTIME_TO_MSEC(GsnTod_Get());
   \   00000040   0x.... 0x....      BL       GsnTod_Get
   \   00000044   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_33:
   \   00000048   0x6102             STR      R2,[R0, #+16]
    799          			temp->sending_count++;
    800          			mqtt_publish_retry_dup(&(mqtt_ctx.MQTT_CLIENT), (char const*)temp->TOPIC, (char const*)temp->PAYLOAD, 1, mqtt_ctx.QoS, (temp->MSG_ID));
   \   0000004A   0x2301             MOVS     R3,#+1
   \   0000004C   0x9802             LDR      R0,[SP, #+8]
   \   0000004E   0x9902             LDR      R1,[SP, #+8]
   \   00000050   0x7D00             LDRB     R0,[R0, #+20]
   \   00000052   0x1C40             ADDS     R0,R0,#+1
   \   00000054   0x7508             STRB     R0,[R1, #+20]
   \   00000056   0x9802             LDR      R0,[SP, #+8]
   \   00000058   0x8980             LDRH     R0,[R0, #+12]
   \   0000005A   0x9001             STR      R0,[SP, #+4]
   \   0000005C   0xF896 0x0054      LDRB     R0,[R6, #+84]
   \   00000060   0x9000             STR      R0,[SP, #+0]
   \   00000062   0x9802             LDR      R0,[SP, #+8]
   \   00000064   0x6882             LDR      R2,[R0, #+8]
   \   00000066   0x6841             LDR      R1,[R0, #+4]
   \   00000068   0x4630             MOV      R0,R6
   \   0000006A   0x.... 0x....      BL       mqtt_publish_retry_dup
    801          			MQTT_LIST_PUT(&(mqtt_ctx.send_list), temp);
   \   0000006E   0x9902             LDR      R1,[SP, #+8]
   \   00000070   0xF106 0x0058      ADD      R0,R6,#+88
   \   00000074   0x.... 0x....      BL       MQTT_LIST_PUT
   \   00000078   0xE01D             B.N      ??MQTT_PUBLISH_MSG_RETRY_0
    802          		}
    803          		else if((temp->sending_count > 3) || ((SYSTIME_TO_MSEC(GsnTod_Get())-(temp->TIME)) > 12000) )
   \                     ??MQTT_PUBLISH_MSG_RETRY_1:
   \   0000007A   0x2804             CMP      R0,#+4
   \   0000007C   0xDA10             BGE.N    ??MQTT_PUBLISH_MSG_RETRY_2
   \   0000007E   0x.... 0x....      BL       GsnTod_Get
   \   00000082   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_34:
   \   00000086   0x6900             LDR      R0,[R0, #+16]
   \   00000088   0x0BDB             LSRS     R3,R3,#+15
   \   0000008A   0x2100             MOVS     R1,#+0
   \   0000008C   0x1A10             SUBS     R0,R2,R0
   \   0000008E   0xEB63 0x0101      SBC      R1,R3,R1
   \   00000092   0x2300             MOVS     R3,#+0
   \   00000094   0xF642 0x62E1      MOVW     R2,#+12001
   \   00000098   0x4299             CMP      R1,R3
   \   0000009A   0xD801             BHI.N    ??MQTT_PUBLISH_MSG_RETRY_2
   \   0000009C   0x4290             CMP      R0,R2
   \   0000009E   0xD30A             BCC.N    ??MQTT_PUBLISH_MSG_RETRY_0
    804          		{
    805          	  		gsn_free(temp->TOPIC);
   \                     ??MQTT_PUBLISH_MSG_RETRY_2:
   \   000000A0   0x9802             LDR      R0,[SP, #+8]
   \   000000A2   0x6840             LDR      R0,[R0, #+4]
   \   000000A4   0x.... 0x....      BL       GsnDynMemMgmt_Free
    806          	  		gsn_free(temp->PAYLOAD);
   \   000000A8   0x9802             LDR      R0,[SP, #+8]
   \   000000AA   0x6880             LDR      R0,[R0, #+8]
   \   000000AC   0x.... 0x....      BL       GsnDynMemMgmt_Free
    807          	  		gsn_free(temp);
   \   000000B0   0x9802             LDR      R0,[SP, #+8]
   \   000000B2   0x.... 0x....      BL       GsnDynMemMgmt_Free
    808          		}
    809            	}
    810            }
    811            S2w_Printf("\r\n PUB_MSG_RETRY END ");
   \                     ??MQTT_PUBLISH_MSG_RETRY_0:
   \   000000B6   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUB_MSG_RETRY END ">`
   \   000000BA   0x.... 0x....      BL       S2w_Printf
    812            return 0;
   \   000000BE   0x2000             MOVS     R0,#+0
   \   000000C0   0xB005             ADD      SP,SP,#+20
   \   000000C2   0xBD50             POP      {R4,R6,PC}       ;; return
    813          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0xFBA4 0x2300      UMULL    R2,R3,R4,R0
   \   00000004   0x9802             LDR      R0,[SP, #+8]
   \   00000006   0xFB04 0x3301      MLA      R3,R4,R1,R3
   \   0000000A                      REQUIRE ??Subroutine14_0
   \   0000000A                      ;; // Fall through to label ??Subroutine14_0
    814          

   \                                 In section .text, align 2, keep-with-next
    815          UINT8 MQTT_PUBLISH_MSG_GEN(UINT8 select)
    816          {
   \                     MQTT_PUBLISH_MSG_GEN:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0xB0A1             SUB      SP,SP,#+132
    817            GSN_SYSTEM_TIME_T currentTime, mSeconds = 0;
    818            //sensor node status message generation
    819            UINT32 temperature_int;
    820            MSG_TYPE mqtt_publish_msg;
    821            char PAYLOAD[100];
    822            UINT32 TOPIC_LEN;
    823            UINT32 PAYLOAD_LEN;
    824            S2w_Printf("\r\n  PUB_MSG_GEN START ");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  PUB_MSG_GEN START ">`
   \   0000000A   0x.... 0x....      BL       S2w_Printf
    825            	if(select == 1)
   \   0000000E   0x2C01             CMP      R4,#+1
   \   00000010   0xD121             BNE.N    ??MQTT_PUBLISH_MSG_GEN_0
    826          	{
    827          		TOPIC_LEN = strlen((const char*)TOPIC_STATUS);
    828          		PAYLOAD_LEN = strlen((const char*)PAYLOAD_STATUS);
    829          	
    830            		mqtt_publish_msg.TOPIC = (UINT8*)gsn_malloc(TOPIC_LEN+1);
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0xF240 0x313E      MOVW     R1,#+830
   \   00000018   0x201A             MOVS     R0,#+26
   \   0000001A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000001E   0x9002             STR      R0,[SP, #+8]
    831            		mqtt_publish_msg.PAYLOAD = (UINT8*)gsn_malloc(PAYLOAD_LEN+1);
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF240 0x313F      MOVW     R1,#+831
   \   00000026   0x2027             MOVS     R0,#+39
   \   00000028   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000002C   0x9003             STR      R0,[SP, #+12]
    832          	
    833          
    834            		memset(mqtt_publish_msg.TOPIC, 0, TOPIC_LEN+1);
   \   0000002E   0x221A             MOVS     R2,#+26
   \   00000030   0x.... 0x....      BL       ?Subroutine4
    835            		memset(mqtt_publish_msg.PAYLOAD, 0, PAYLOAD_LEN+1);
   \                     ??CrossCallReturnLabel_12:
   \   00000034   0x9803             LDR      R0,[SP, #+12]
   \   00000036   0x2227             MOVS     R2,#+39
   \   00000038   0x.... 0x....      BL       ??Subroutine4_0
    836            
    837            		memcpy(mqtt_publish_msg.TOPIC, TOPIC_STATUS, TOPIC_LEN);
   \                     ??CrossCallReturnLabel_7:
   \   0000003C   0x9802             LDR      R0,[SP, #+8]
   \   0000003E   0x.... 0x....      ADR.W    R1,`?<Constant "v/a/g/001dc914feae/st...">`
   \   00000042   0x2219             MOVS     R2,#+25
   \   00000044   0x.... 0x....      BL       memcpy
    838            		memcpy(mqtt_publish_msg.PAYLOAD, PAYLOAD_STATUS, PAYLOAD_LEN);
   \   00000048   0x9803             LDR      R0,[SP, #+12]
   \   0000004A   0x.... 0x....      ADR.W    R1,`?<Constant "on,90,temperature-001...">`
   \   0000004E   0x2226             MOVS     R2,#+38
   \   00000050   0x.... 0x....      BL       memcpy
    839            
    840            		mqtt_publish_msg.MSG_ID = 0;
   \   00000054   0xE03B             B.N      ??MQTT_PUBLISH_MSG_GEN_1
    841            		mqtt_publish_msg.TIME = 0;
    842          		mqtt_publish_msg.sending_count = 0;
    843            		mqtt_publish_msg.MSG_TYPE = MQTT_MSG_TYPE_PUBLISH;
    844          	}
    845          	else if(select == 2)
   \                     ??MQTT_PUBLISH_MSG_GEN_0:
   \   00000056   0x2C02             CMP      R4,#+2
   \   00000058   0xD142             BNE.N    ??MQTT_PUBLISH_MSG_GEN_2
    846          	{
    847          	
    848          	//GsnTaskSleep(3000);
    849            
    850            		//sensor data message generation.
    851            		currentTime = GsnTod_Get();
   \   0000005A   0x.... 0x....      BL       GsnTod_Get
   \   0000005E   0x4604             MOV      R4,R0
   \   00000060   0x460D             MOV      R5,R1
    852            		mSeconds = SYSTIME_TO_MSEC(currentTime);
    853          #ifdef GS2011ME_02
    854            		temperature_int = App_TemperatureGet();
   \   00000062   0x.... 0x....      BL       App_TemperatureGet
    855          		sprintf((char*)PAYLOAD,"%llu,%d", mSeconds,temperature_int);
   \   00000066   0x9000             STR      R0,[SP, #+0]
   \   00000068   0xF44F 0x707A      MOV      R0,#+1000
   \   0000006C   0xFBA0 0x2304      UMULL    R2,R3,R0,R4
   \   00000070   0xFB00 0x3305      MLA      R3,R0,R5,R3
   \   00000074   0x.... 0x....      BL       ??Subroutine14_0
   \                     ??CrossCallReturnLabel_32:
   \   00000078   0x0BDB             LSRS     R3,R3,#+15
   \   0000007A   0x.... 0x....      ADR.W    R1,`?<Constant "%llu,%d">`
   \   0000007E   0xA807             ADD      R0,SP,#+28
   \   00000080   0x.... 0x....      BL       sprintf
    856          #endif
    857          #ifdef GS2011ME_01
    858          		GetTemperature(&temperature_sensor[0]);
    859          		sprintf((char*)PAYLOAD,"%llu,%.2f", mSeconds,temperature_sensor[0].Temperature);
    860          #endif
    861              	TOPIC_LEN = strlen((const char*)TOPIC_SENSOR);
    862          		PAYLOAD_LEN = strlen((const char*)PAYLOAD);
   \   00000084   0xA807             ADD      R0,SP,#+28
   \   00000086   0x.... 0x....      BL       strlen
   \   0000008A   0x4604             MOV      R4,R0
    863          	
    864          
    865            		mqtt_publish_msg.TOPIC = (UINT8*)gsn_malloc(TOPIC_LEN+1);
   \   0000008C   0x2200             MOVS     R2,#+0
   \   0000008E   0xF240 0x3161      MOVW     R1,#+865
   \   00000092   0x2030             MOVS     R0,#+48
   \   00000094   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000098   0x9002             STR      R0,[SP, #+8]
    866            		mqtt_publish_msg.PAYLOAD = (UINT8*)gsn_malloc(PAYLOAD_LEN+1);
   \   0000009A   0x1C65             ADDS     R5,R4,#+1
   \   0000009C   0x2200             MOVS     R2,#+0
   \   0000009E   0xF240 0x3162      MOVW     R1,#+866
   \   000000A2   0x4628             MOV      R0,R5
   \   000000A4   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000A8   0x9003             STR      R0,[SP, #+12]
    867              
    868          
    869            		memset(mqtt_publish_msg.TOPIC, 0, TOPIC_LEN+1);
   \   000000AA   0x2230             MOVS     R2,#+48
   \   000000AC   0x.... 0x....      BL       ?Subroutine4
    870            		memset(mqtt_publish_msg.PAYLOAD, 0, PAYLOAD_LEN+1);
   \                     ??CrossCallReturnLabel_11:
   \   000000B0   0x9803             LDR      R0,[SP, #+12]
   \   000000B2   0x462A             MOV      R2,R5
   \   000000B4   0x.... 0x....      BL       ??Subroutine4_0
    871            
    872            		memcpy(mqtt_publish_msg.TOPIC, TOPIC_SENSOR, TOPIC_LEN);
   \                     ??CrossCallReturnLabel_6:
   \   000000B8   0x9802             LDR      R0,[SP, #+8]
   \   000000BA   0x.... 0x....      ADR.W    R1,`?<Constant "v/a/g/001dc914feae/s/...">`
   \   000000BE   0x222F             MOVS     R2,#+47
   \   000000C0   0x.... 0x....      BL       memcpy
    873            		memcpy(mqtt_publish_msg.PAYLOAD, PAYLOAD, PAYLOAD_LEN);
   \   000000C4   0x9803             LDR      R0,[SP, #+12]
   \   000000C6   0x4622             MOV      R2,R4
   \   000000C8   0xA907             ADD      R1,SP,#+28
   \   000000CA   0x.... 0x....      BL       memcpy
    874            
    875            		mqtt_publish_msg.MSG_ID = 0;
   \                     ??MQTT_PUBLISH_MSG_GEN_1:
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0xF8AD 0x0010      STRH     R0,[SP, #+16]
    876            		mqtt_publish_msg.TIME = 0;
   \   000000D4   0x9005             STR      R0,[SP, #+20]
    877          		mqtt_publish_msg.sending_count = 0;
   \   000000D6   0xF88D 0x0018      STRB     R0,[SP, #+24]
    878            		mqtt_publish_msg.MSG_TYPE = MQTT_MSG_TYPE_PUBLISH;
   \   000000DA   0x2003             MOVS     R0,#+3
   \   000000DC   0xF88D 0x0004      STRB     R0,[SP, #+4]
    879          	}
    880          	MQTT_LIST_PUT(&(mqtt_ctx.publish_list), &mqtt_publish_msg);
   \                     ??MQTT_PUBLISH_MSG_GEN_2:
   \   000000E0   0xA901             ADD      R1,SP,#+4
   \   000000E2   0x....             LDR.N    R0,??DataTable93_4
   \   000000E4   0x.... 0x....      BL       MQTT_LIST_PUT
    881          	//S2w_Printf("\r\n  MQTT_PUBLISH_MSG_GEN END ");
    882            return 0;
   \   000000E8   0x2000             MOVS     R0,#+0
   \   000000EA   0xB021             ADD      SP,SP,#+132
   \   000000EC   0xBD30             POP      {R4,R5,PC}       ;; return
    883            
    884          }
    885          

   \                                 In section .text, align 2, keep-with-next
    886          void MQTT_PING_MSG()
    887          {
   \                     MQTT_PING_MSG:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    888            UINT status;
    889            S2w_Printf("\r\n  PING_MSG START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  PING_MSG START ">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    890            tx_mutex_get(&ping_mutex, TX_WAIT_FOREVER);
   \   0000000A   0x....             LDR.N    R4,??DataTable93_2
   \   0000000C   0xF504 0x5518      ADD      R5,R4,#+9728
   \   00000010   0x3594             ADDS     R5,R5,#+148
   \   00000012   0x.... 0x....      BL       ??Subroutine13_0
    891            //tx_semaphore_get(&ping_semaphore,TX_WAIT_FOREVER);
    892            ping_count++;
   \                     ??CrossCallReturnLabel_27:
   \   00000016   0x78A0             LDRB     R0,[R4, #+2]
   \   00000018   0x1C40             ADDS     R0,R0,#+1
   \   0000001A   0x70A0             STRB     R0,[R4, #+2]
    893            tx_mutex_put(&ping_mutex);
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       _tx_mutex_put
    894            //tx_semaphore_put(&ping_semaphore);
    895            
    896            
    897            status = mqtt_ping(&(mqtt_ctx.MQTT_CLIENT));
    898            if( status == 0 )
   \   00000022   0x....             LDR.N    R0,??DataTable93_3
   \   00000024   0x.... 0x....      BL       mqtt_ping
   \   00000028   0xB958             CBNZ.N   R0,??MQTT_PING_MSG_0
    899            {
    900            	S2w_Printf("\r\n Ping req Suc");
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n Ping req Suc">`
   \   0000002E   0x.... 0x....      BL       S2w_Printf
    901          	//status = tx_timer_activate(&my_timer);
    902          	AppS2wHal_TimerStart(&my_timer, 300);
   \   00000032   0xF504 0x501C      ADD      R0,R4,#+9984
   \   00000036   0xE8BD 0x4034      POP      {R2,R4,R5,LR}
   \   0000003A   0xF44F 0x7196      MOV      R1,#+300
   \   0000003E   0x.... 0x....      B.W      AppS2wHal_TimerStart
    903            }
    904            else
    905            {
    906          	mqtt_Xstate = MQTT_STATE_DISCONNECT;
   \                     ??MQTT_PING_MSG_0:
   \   00000042   0x2004             MOVS     R0,#+4
   \   00000044   0x7060             STRB     R0,[R4, #+1]
    907          	S2w_Printf("\r\n Ping request Fail");
   \   00000046   0xE8BD 0x4032      POP      {R1,R4,R5,LR}
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n Ping request Fail">`
   \   0000004E   0x.... 0x....      B.W      S2w_Printf
    908            }
    909            //S2w_Printf("\r\n  MQTT_PING_MSG END ");
    910          }
    911          

   \                                 In section .text, align 4, keep-with-next
    912          void MQTT_PING_OUT(VOID* input)
    913          {
   \                     MQTT_PING_OUT:
   \   00000000   0xB580             PUSH     {R7,LR}
    914            S2w_Printf("\r\n  MQTT_PING_OUT START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  MQTT_PING_OUT START ">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    915            if(ping_count < 3)
   \   0000000A   0x....             LDR.N    R0,??DataTable93_2
   \   0000000C   0x7881             LDRB     R1,[R0, #+2]
   \   0000000E   0x2903             CMP      R1,#+3
   \   00000010   0xBFBC             ITT      LT 
   \   00000012   0xE8BD 0x4001      POPLT    {R0,LR}
   \   00000016   0x.... 0x....      BLT.W    MQTT_PING_MSG
    916          	MQTT_PING_MSG();
    917            else
    918            {
    919          	mqtt_Xstate = MQTT_STATE_DISCONNECT;
   \   0000001A   0x2104             MOVS     R1,#+4
   \   0000001C   0x7041             STRB     R1,[R0, #+1]
    920            }
    921            //S2w_Printf("\r\n  MQTT_PING_OUT END ");
    922          }
   \   0000001E   0xBD01             POP      {R0,PC}          ;; return
    923          

   \                                 In section .text, align 2, keep-with-next
    924          UINT8 MQTT_CONNECT()
    925          {
   \                     MQTT_CONNECT:
   \   00000000   0xB510             PUSH     {R4,LR}
    926            int RSSI = 0;
    927            UINT8 status = 0;
    928            S2w_Printf("\r\n  MQTT_CONNECT START ");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n  MQTT_CONNECT START ">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
    929            RSSI = AppS2wHal_RssiGet();
    930          
    931            if(RSSI == 0)
   \   0000000A   0x.... 0x....      BL       AppS2wHal_RssiGet
   \   0000000E   0xB910             CBNZ.N   R0,??MQTT_CONNECT_0
    932            {
    933          	status = MQTT_AP_CONNECT();
    934            }
    935            
    936            if(status != 0)
   \   00000010   0x.... 0x....      BL       MQTT_AP_CONNECT
   \   00000014   0xB9B8             CBNZ.N   R0,??MQTT_CONNECT_1
    937            {
    938          	//S2w_Printf("\r\n AP CONNECT Error");
    939          	goto error;
    940            }
    941          
    942            //GsnTaskSleep(1000);
    943            tx_thread_sleep(10);
   \                     ??MQTT_CONNECT_0:
   \   00000016   0x200A             MOVS     R0,#+10
   \   00000018   0x.... 0x....      BL       _tx_thread_sleep
    944            if(AppS2wHal_NetIsCidOpen(mqtt_ctx.MQTT_CLIENT.mqtt_cid) == 0)
   \   0000001C   0x....             LDR.N    R4,??DataTable93_3
   \   0000001E   0xF894 0x003C      LDRB     R0,[R4, #+60]
   \   00000022   0x.... 0x....      BL       AppS2wHal_NetIsCidOpen
   \   00000026   0xB928             CBNZ.N   R0,??MQTT_CONNECT_2
    945            {
    946          	status = MQTT_TCP_CONNECT();
    947          	if(status != 0)
   \   00000028   0x.... 0x....      BL       MQTT_TCP_CONNECT
   \   0000002C   0xB958             CBNZ.N   R0,??MQTT_CONNECT_1
    948          	{
    949          	  //S2w_Printf("\r\n TCP CONNECT Error");
    950          	  goto error;
    951          	}
    952          
    953          	//GsnTaskSleep(1000);
    954          	tx_thread_sleep(10);
   \   0000002E   0x200A             MOVS     R0,#+10
   \   00000030   0x.... 0x....      BL       _tx_thread_sleep
    955          #ifdef SSL_ADD
    956          	S2w_Printf("\r\n BEFORE SSL CONNECT");
    957          	S2w_Printf("\r\n CID : %d", mqtt_ctx.MQTT_CLIENT.mqtt_cid);
    958          	status = MQTT_SSL_CONNECT(mqtt_ctx.MQTT_CLIENT.mqtt_cid);
    959          	if(status != 0)
    960          	{
    961          	  S2w_Printf("\r\n SSL CONNECT Error");
    962          	  goto error;
    963          	}
    964          	S2w_Printf("\r\n ATFER SSL CONNECT");
    965          	//GsnTaskSleep(1000);
    966          	tx_thread_sleep(10);
    967          #endif
    968            }
    969            
    970            if(mqtt_connect(&(mqtt_ctx.MQTT_CLIENT)) != 0)
   \                     ??MQTT_CONNECT_2:
   \   00000034   0x4620             MOV      R0,R4
   \   00000036   0x.... 0x....      BL       mqtt_connect
   \   0000003A   0xB920             CBNZ.N   R0,??MQTT_CONNECT_1
    971            {
    972          	//S2w_Printf("\r\n MQTT CONNECT Error");
    973          	goto error;
    974            }
    975            //S2w_Printf("\r\n MQTT CONNECT success");
    976            //GsnTaskSleep(1000);
    977            tx_thread_sleep(10);
   \   0000003C   0x200A             MOVS     R0,#+10
   \   0000003E   0x.... 0x....      BL       _tx_thread_sleep
    978            //S2w_Printf("\r\n  MQTT_CONNECT END ");
    979            return 0;
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0xBD10             POP      {R4,PC}
    980           
    981          error:
    982            mqtt_Xstate = MQTT_STATE_INITIAL;
   \                     ??MQTT_CONNECT_1:
   \   00000046   0x....             LDR.N    R0,??DataTable93_2
   \   00000048   0x2101             MOVS     R1,#+1
   \   0000004A   0x7041             STRB     R1,[R0, #+1]
    983            return 1;
   \   0000004C   0x2001             MOVS     R0,#+1
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    984          }
    985          

   \                                 In section .text, align 2, keep-with-next
    986          UINT8 MQTT_AP_CONNECT()
    987          {
   \                     MQTT_AP_CONNECT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    988          	UINT8* SSID;
    989          	UINT8* WWPA;
    990              UINT8 status;
    991          
    992          	
    993          	SSID = (UINT8 *)gsn_malloc(strlen(AP_SSID)+1);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xF240 0x31E1      MOVW     R1,#+993
   \   00000008   0x2007             MOVS     R0,#+7
   \   0000000A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000000E   0x4604             MOV      R4,R0
    994          	WWPA = (UINT8 *)gsn_malloc(strlen(AP_WWPA)+1);
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xF240 0x31E2      MOVW     R1,#+994
   \   00000016   0x200B             MOVS     R0,#+11
   \   00000018   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
    995          	
    996          	sprintf((char*)WWPA,"%s",AP_WWPA);
   \   0000001C   0x....             ADR.N    R6,??DataTable93  ;; 0x25, 0x73, 0x00, 0x00
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0x.... 0x....      ADR.W    R2,`?<Constant "4rnekd9wkd">`
   \   00000024   0x4631             MOV      R1,R6
   \   00000026   0x.... 0x....      BL       sprintf
    997          	status = AppS2wCmd_Wwpa(WWPA);
    998          	if(status != 0)
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       AppS2wCmd_Wwpa
   \   00000030   0xB988             CBNZ.N   R0,??MQTT_AP_CONNECT_0
    999          	{
   1000          		//S2w_Printf("\r\n wrong WWPA");
   1001          		goto error;
   1002          	}
   1003              sprintf((char*)SSID,"%s",AP_SSID);
   \   00000032   0x.... 0x....      ADR.W    R2,`?<Constant "FTR-01">`
   \   00000036   0x4631             MOV      R1,R6
   \   00000038   0x4620             MOV      R0,R4
   \   0000003A   0x.... 0x....      BL       sprintf
   1004          	status = AppS2wCmd_Wassoc_test(SSID);
   1005          	if(status != 0)
   \   0000003E   0x4620             MOV      R0,R4
   \   00000040   0x.... 0x....      BL       AppS2wCmd_Wassoc_test
   \   00000044   0xB938             CBNZ.N   R0,??MQTT_AP_CONNECT_0
   1006          	{
   1007          		//S2w_Printf("\r\n AP connect error");
   1008          		goto error;
   1009          	}
   1010          
   1011          	gsn_free(SSID);
   \   00000046   0x4620             MOV      R0,R4
   \   00000048   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1012          
   1013          	SSID = NULL;
   1014          	gsn_free(WWPA);
   \   0000004C   0x4628             MOV      R0,R5
   \   0000004E   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1015          	WWPA = NULL;
   1016          
   1017          	return status;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xBD70             POP      {R4-R6,PC}
   1018          error : 
   1019          
   1020          	gsn_free(SSID);
   \                     ??MQTT_AP_CONNECT_0:
   \   00000056   0x4620             MOV      R0,R4
   \   00000058   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1021          	SSID = NULL;
   1022          	gsn_free(WWPA);
   \   0000005C   0x4628             MOV      R0,R5
   \   0000005E   0x.... 0x....      BL       GsnDynMemMgmt_Free
   1023          	WWPA = NULL;
   1024          	return 1;
   \   00000062   0x2001             MOVS     R0,#+1
   \   00000064   0xBD70             POP      {R4-R6,PC}       ;; return
   1025          }
   1026          

   \                                 In section .text, align 2, keep-with-next
   1027          UINT8 MQTT_TCP_CONNECT()
   1028          {	
   \                     MQTT_TCP_CONNECT:
   \   00000000   0xB580             PUSH     {R7,LR}
   1029          	UINT8 status = 0;
   1030          /*#ifdef THINGPLUS
   1031           	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[0] = 54;
   1032            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[1] = 178;
   1033            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[2] = 154;
   1034            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[3] = 197;
   1035          	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.port = 8883;
   1036          #endif*/
   1037          	#ifdef THINGPLUS
   1038           	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[0] = 10;
   1039            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[1] = 0;
   1040            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[2] = 1;
   1041            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[3] = 69;
   1042          	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.port = 8883;
   1043          #endif
   1044          #ifdef LOCAL
   1045          	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[0] = 10;
   \   00000002   0x....             LDR.N    R0,??DataTable93_3
   \   00000004   0x210A             MOVS     R1,#+10
   \   00000006   0x7101             STRB     R1,[R0, #+4]
   1046            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[1] = 0;
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x7141             STRB     R1,[R0, #+5]
   1047            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[2] = 1;
   \   0000000C   0x2101             MOVS     R1,#+1
   \   0000000E   0x7181             STRB     R1,[R0, #+6]
   1048            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.ipAddr[3] = 69;
   \   00000010   0x2145             MOVS     R1,#+69
   \   00000012   0x71C1             STRB     R1,[R0, #+7]
   1049            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.port = 1883; 
   \   00000014   0xF240 0x715B      MOVW     R1,#+1883
   \   00000018   0x8041             STRH     R1,[R0, #+2]
   1050          #endif
   1051            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.proto = S2W_NETDATA_PROTO_TCP;
   \   0000001A   0x2101             MOVS     R1,#+1
   \   0000001C   0x7041             STRB     R1,[R0, #+1]
   1052            	mqtt_ctx.MQTT_CLIENT.mqtt_peerData.mode = S2W_NETDATA_MODE_CLIENT;
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0x7001             STRB     R1,[R0, #+0]
   1053            	//status = AppS2wHal_NetTcpClient_test(&(mqtt_ctx.MQTT_CLIENT.mqtt_peerData), &(mqtt_ctx.MQTT_CLIENT.mqtt_cid));
   1054          	status = AppS2wHal_NetTcpClient(&(mqtt_ctx.MQTT_CLIENT.mqtt_peerData), &(mqtt_ctx.MQTT_CLIENT.mqtt_cid));
   1055          	if (status != 0)
   \   00000022   0xF100 0x013C      ADD      R1,R0,#+60
   \   00000026   0x.... 0x....      BL       AppS2wHal_NetTcpClient
   \   0000002A   0xB100             CBZ.N    R0,??MQTT_TCP_CONNECT_0
   1056              {
   1057          	    //S2w_Printf("\r\n TcpClient error");
   1058          		return 1;
   \   0000002C   0x2001             MOVS     R0,#+1
   1059              }
   1060          	//S2w_Printf("\r\n TcpClient success");
   1061          	return 0;
   \                     ??MQTT_TCP_CONNECT_0:
   \   0000002E   0xBD02             POP      {R1,PC}          ;; return
   1062          }
   1063          

   \                                 In section .text, align 2, keep-with-next
   1064          UINT8 MQTT_SSL_CONNECT(UINT8 CID)
   1065          {
   \                     MQTT_SSL_CONNECT:
   \   00000000   0xB580             PUSH     {R7,LR}
   1066          	UINT8 status = 1;
   1067          	UINT8 CID_STRING[3];
   1068          	sprintf((char*)CID_STRING,"%u", CID);
   \   00000002   0x4602             MOV      R2,R0
   \   00000004   0x....             ADR.N    R1,??DataTable93_1  ;; 0x25, 0x75, 0x00, 0x00
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x.... 0x....      BL       sprintf
   1069          	status = AppS2wCmd_SSLOpen(CID_STRING);
   1070          	if(status != 0)
   \   0000000C   0xA800             ADD      R0,SP,#+0
   \   0000000E   0x.... 0x....      BL       AppS2wCmd_SSLOpen
   \   00000012   0xB128             CBZ.N    R0,??MQTT_SSL_CONNECT_0
   1071          	{
   1072          		S2w_Printf("\r\n SSL open error");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SSL open error">`
   \   00000018   0x.... 0x....      BL       S2w_Printf
   1073          		return 1;
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0xBD02             POP      {R1,PC}
   1074          	}
   1075              S2w_Printf("\r\n SSL open success");
   \                     ??MQTT_SSL_CONNECT_0:
   \   00000020   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SSL open success">`
   \   00000024   0x.... 0x....      BL       S2w_Printf
   1076          	return status;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0xBD02             POP      {R1,PC}          ;; return
   1077          }
   1078          

   \                                 In section .text, align 2, keep-with-next
   1079          void TEST_START()
   1080          {
   \                     TEST_START:
   \   00000000   0xB580             PUSH     {R7,LR}
   1081            MQTT_START();
   \   00000002   0x.... 0x....      BL       MQTT_START
   1082          
   1083            GsnTaskSleep(1000);
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000E   0x.... 0x....      B.W      GsnTaskSleep
   1084          
   1085          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93:
   \   00000000   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93_1:
   \   00000000   0x25 0x75          DC8      0x25, 0x75, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93_2:
   \   00000000   0x........         DC32     MQTT_CONNECT_STATUS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93_3:
   \   00000000   0x........         DC32     mqtt_ctx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93_4:
   \   00000000   0x........         DC32     mqtt_ctx+0x98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable93_5:
   \   00000000   0x........         DC32     mqtt_ctx+0x58

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000   0x25 0x73          DC8 "%s"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%u">`:
   \   00000000   0x25 0x75          DC8 "%u"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_PROCESS_THREAD">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_PROCESS_THREAD"
   \              0x54 0x54    
   \              0x5F 0x50    
   \              0x52 0x4F    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x5F 0x54    
   \              0x48 0x52    
   \              0x45 0x41    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_SENDER_THREAD">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_SENDER_THREAD"
   \              0x54 0x54    
   \              0x5F 0x53    
   \              0x45 0x4E    
   \              0x44 0x45    
   \              0x52 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_MESSAGE_QUEUE_TH...">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_MESSAGE_QUEUE_THREAD"
   \              0x54 0x54    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x53 0x41    
   \              0x47 0x45    
   \              0x5F 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x54    
   \              0x48 0x52    
   \              0x45 0x41    
   \              0x44 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "conStatus_mutex">`:
   \   00000000   0x63 0x6F          DC8 "conStatus_mutex"
   \              0x6E 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x5F    
   \              0x6D 0x75    
   \              0x74 0x65    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "ping_mutex">`:
   \   00000000   0x70 0x69          DC8 "ping_mutex"
   \              0x6E 0x67    
   \              0x5F 0x6D    
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  PROCESS_TASK START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  PROCESS_TASK START "
   \              0x20 0x20    
   \              0x50 0x52    
   \              0x4F 0x43    
   \              0x45 0x53    
   \              0x53 0x5F    
   \              0x54 0x41    
   \              0x53 0x4B    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n STATE CHANGED : %d...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 STATE CHANGED : %d -> %d\012"
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x20 0x43    
   \              0x48 0x41    
   \              0x4E 0x47    
   \              0x45 0x44    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x2D 0x3E    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  SEND_TASK START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  SEND_TASK START "
   \              0x20 0x20    
   \              0x53 0x45    
   \              0x4E 0x44    
   \              0x5F 0x54    
   \              0x41 0x53    
   \              0x4B 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 2 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 2 lock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x32 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 2 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 2 unlock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x32 0x20    
   \              0x75 0x6E    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n re list 2 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 re list 2 lock"
   \              0x20 0x72    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x32    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n re list 2 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 re list 2 unlock"
   \              0x20 0x72    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x32    
   \              0x20 0x75    
   \              0x6E 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n QUEUE_TASK START">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 QUEUE_TASK START"
   \              0x20 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x54    
   \              0x41 0x53    
   \              0x4B 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n QUEUE COUNT 2 : %d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 QUEUE COUNT 2 : %d"
   \              0x20 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x20 0x43    
   \              0x4F 0x55    
   \              0x4E 0x54    
   \              0x20 0x32    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n rcv_MSG : %x %x %x %x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 rcv_MSG : %x %x %x %x"
   \              0x20 0x72    
   \              0x63 0x76    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n QUEUE_TASK END">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 QUEUE_TASK END"
   \              0x20 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x54    
   \              0x41 0x53    
   \              0x4B 0x20    
   \              0x45 0x4E    
   \              0x44 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  CONNACK START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  CONNACK START "
   \              0x20 0x20    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  PUBLISH START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  PUBLISH START "
   \              0x20 0x20    
   \              0x50 0x55    
   \              0x42 0x4C    
   \              0x49 0x53    
   \              0x48 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH : ID %d SE...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH : ID %d SEND Suc"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x20 0x3A    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x53 0x75    
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n se list 3 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 se list 3 lock"
   \              0x20 0x73    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x33    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n se list 3 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 se list 3 unlock"
   \              0x20 0x73    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x33    
   \              0x20 0x75    
   \              0x6E 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH : SEND Fail">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH : SEND Fail"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x20 0x3A    
   \              0x20 0x53    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  PUBLISH END ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  PUBLISH END "
   \              0x20 0x20    
   \              0x50 0x55    
   \              0x42 0x4C    
   \              0x49 0x53    
   \              0x48 0x20    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_RETRY START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_RETRY START "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x52    
   \              0x45 0x54    
   \              0x52 0x59    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_RETRY END ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_RETRY END "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x52    
   \              0x45 0x54    
   \              0x52 0x59    
   \              0x20 0x45    
   \              0x4E 0x44    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBACK START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBACK START "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n se list 4 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 se list 4 lock"
   \              0x20 0x73    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x34    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n se list 4 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 se list 4 unlock"
   \              0x20 0x73    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x34    
   \              0x20 0x75    
   \              0x6E 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBACK : %d del">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBACK : %d del"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBACK : %d is not...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBACK : %d is not found"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBACK END ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBACK END "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x41 0x43    
   \              0x4B 0x20    
   \              0x45 0x4E    
   \              0x44 0x20    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBREC START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBREC START "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x52 0x45    
   \              0x43 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBREC : %d is not...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBREC : %d is not exist"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x52 0x45    
   \              0x43 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x65 0x78    
   \              0x69 0x73    
   \              0x74 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBREC : %d PUBREL...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBREC : %d PUBREL SUCCESS"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x52 0x45    
   \              0x43 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x52 0x45    
   \              0x4C 0x20    
   \              0x53 0x55    
   \              0x43 0x43    
   \              0x45 0x53    
   \              0x53 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBCOMP START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBCOMP START "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBCOMP : %d del">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBCOMP : %d del"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x64 0x65    
   \              0x6C 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBCOMP : %d is no...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBCOMP : %d is not exist"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x43 0x4F    
   \              0x4D 0x50    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x69 0x73    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \              0x20 0x65    
   \              0x78 0x69    
   \              0x73 0x74    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PINGRESP START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PINGRESP START "
   \              0x20 0x50    
   \              0x49 0x4E    
   \              0x47 0x52    
   \              0x45 0x53    
   \              0x50 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  MQTT_STATE_CALLBA...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  MQTT_STATE_CALLBACK_UNINITIAL START "
   \              0x20 0x20    
   \              0x4D 0x51    
   \              0x54 0x54    
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x5F 0x43    
   \              0x41 0x4C    
   \              0x4C 0x42    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x55 0x4E    
   \              0x49 0x4E    
   \              0x49 0x54    
   \              0x49 0x41    
   \              0x4C 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000029   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "001dc914feae">`:
   \   00000000   0x30 0x30          DC8 "001dc914feae"
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x34    
   \              0x66 0x65    
   \              0x61 0x65    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Sm4ytjGsPEfGvDhSDJ_ZP...">`:
   \   00000000   0x53 0x6D          DC8 "Sm4ytjGsPEfGvDhSDJ_ZPiBUXyo="
   \              0x34 0x79    
   \              0x74 0x6A    
   \              0x47 0x73    
   \              0x50 0x45    
   \              0x66 0x47    
   \              0x76 0x44    
   \              0x68 0x53    
   \              0x44 0x4A    
   \              0x5F 0x5A    
   \              0x50 0x69    
   \              0x42 0x55    
   \              0x58 0x79    
   \              0x6F 0x3D    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CALLBAC...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CALLBACK_INITIAL START "
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x42 0x41    
   \              0x43 0x4B    
   \              0x5F 0x49    
   \              0x4E 0x49    
   \              0x54 0x49    
   \              0x41 0x4C    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    
   \   00000026   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CALLBAC...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CALLBACK_CONNECT_READY START "
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x42 0x41    
   \              0x43 0x4B    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x5F 0x52    
   \              0x45 0x41    
   \              0x44 0x59    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CALLBAC...">_2`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CALLBACK_CONNECT_READY END "
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x41    
   \              0x4C 0x4C    
   \              0x42 0x41    
   \              0x43 0x4B    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x5F 0x52    
   \              0x45 0x41    
   \              0x44 0x59    
   \              0x20 0x45    
   \              0x4E 0x44    
   \              0x20 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 3 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 3 lock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x33 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 3 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 3 unlock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x33 0x20    
   \              0x75 0x6E    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 4 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 4 lock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x34 0x20    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n pub list 4 unlock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 pub list 4 unlock"
   \              0x20 0x70    
   \              0x75 0x62    
   \              0x20 0x6C    
   \              0x69 0x73    
   \              0x74 0x20    
   \              0x34 0x20    
   \              0x75 0x6E    
   \              0x6C 0x6F    
   \              0x63 0x6B    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  MQTT_STAET_CALLBA...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  MQTT_STAET_CALLBACK_DISCONNECT START "
   \              0x20 0x20    
   \              0x4D 0x51    
   \              0x54 0x54    
   \              0x5F 0x53    
   \              0x54 0x41    
   \              0x45 0x54    
   \              0x5F 0x43    
   \              0x41 0x4C    
   \              0x4C 0x42    
   \              0x41 0x43    
   \              0x4B 0x5F    
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT DISCONNECT ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT DISCONNECT ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n NET CLOSE ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 NET CLOSE ERROR"
   \              0x20 0x4E    
   \              0x45 0x54    
   \              0x20 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUB_MSG_RETRY START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUB_MSG_RETRY START "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x5F 0x52    
   \              0x45 0x54    
   \              0x52 0x59    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n se list 1 lock">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 se list 1 lock"
   \              0x20 0x73    
   \              0x65 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x31    
   \              0x20 0x6C    
   \              0x6F 0x63    
   \              0x6B 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUB_MSG_RETRY END ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUB_MSG_RETRY END "
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x5F 0x52    
   \              0x45 0x54    
   \              0x52 0x59    
   \              0x20 0x45    
   \              0x4E 0x44    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  PUB_MSG_GEN START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  PUB_MSG_GEN START "
   \              0x20 0x20    
   \              0x50 0x55    
   \              0x42 0x5F    
   \              0x4D 0x53    
   \              0x47 0x5F    
   \              0x47 0x45    
   \              0x4E 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "v/a/g/001dc914feae/st...">`:
   \   00000000   0x76 0x2F          DC8 "v/a/g/001dc914feae/status"
   \              0x61 0x2F    
   \              0x67 0x2F    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x34    
   \              0x66 0x65    
   \              0x61 0x65    
   \              0x2F 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "on,90,temperature-001...">`:
   \   00000000   0x6F 0x6E          DC8 "on,90,temperature-001dc914feae-1,on,90"
   \              0x2C 0x39    
   \              0x30 0x2C    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x2D    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x34    
   \              0x66 0x65    
   \              0x61 0x65    
   \              0x2D 0x31    
   \              0x2C 0x6F    
   \              0x6E 0x2C    
   \              0x39 0x30    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%llu,%d">`:
   \   00000000   0x25 0x6C          DC8 "%llu,%d"
   \              0x6C 0x75    
   \              0x2C 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "v/a/g/001dc914feae/s/...">`:
   \   00000000   0x76 0x2F          DC8 "v/a/g/001dc914feae/s/temperature-001dc914feae-1"
   \              0x61 0x2F    
   \              0x67 0x2F    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x34    
   \              0x66 0x65    
   \              0x61 0x65    
   \              0x2F 0x73    
   \              0x2F 0x74    
   \              0x65 0x6D    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x2D 0x30    
   \              0x30 0x31    
   \              0x64 0x63    
   \              0x39 0x31    
   \              0x34 0x66    
   \              0x65 0x61    
   \              0x65 0x2D    
   \              0x31 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  PING_MSG START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  PING_MSG START "
   \              0x20 0x20    
   \              0x50 0x49    
   \              0x4E 0x47    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Ping req Suc">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Ping req Suc"
   \              0x20 0x50    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x72 0x65    
   \              0x71 0x20    
   \              0x53 0x75    
   \              0x63 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Ping request Fail">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Ping request Fail"
   \              0x20 0x50    
   \              0x69 0x6E    
   \              0x67 0x20    
   \              0x72 0x65    
   \              0x71 0x75    
   \              0x65 0x73    
   \              0x74 0x20    
   \              0x46 0x61    
   \              0x69 0x6C    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  MQTT_PING_OUT START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  MQTT_PING_OUT START "
   \              0x20 0x20    
   \              0x4D 0x51    
   \              0x54 0x54    
   \              0x5F 0x50    
   \              0x49 0x4E    
   \              0x47 0x5F    
   \              0x4F 0x55    
   \              0x54 0x20    
   \              0x53 0x54    
   \              0x41 0x52    
   \              0x54 0x20    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n  MQTT_CONNECT START ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012  MQTT_CONNECT START "
   \              0x20 0x20    
   \              0x4D 0x51    
   \              0x54 0x54    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x52 0x54    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FTR-01">`:
   \   00000000   0x46 0x54          DC8 "FTR-01"
   \              0x52 0x2D    
   \              0x30 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "4rnekd9wkd">`:
   \   00000000   0x34 0x72          DC8 "4rnekd9wkd"
   \              0x6E 0x65    
   \              0x6B 0x64    
   \              0x39 0x77    
   \              0x6B 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SSL open error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SSL open error"
   \              0x20 0x53    
   \              0x53 0x4C    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SSL open success">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SSL open success"
   \              0x20 0x53    
   \              0x53 0x4C    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
      16   MQTT_AP_CONNECT
        16   -> AppS2wCmd_Wassoc_test
        16   -> AppS2wCmd_Wwpa
        16   -> GsnDynMemMgmt_Alloc
        16   -> GsnDynMemMgmt_Free
        16   -> sprintf
       8   MQTT_CONNECT
         8   -> AppS2wHal_NetIsCidOpen
         8   -> AppS2wHal_RssiGet
         8   -> MQTT_AP_CONNECT
         8   -> MQTT_TCP_CONNECT
         8   -> S2w_Printf
         8   -> _tx_thread_sleep
         8   -> mqtt_connect
      16   MQTT_LIST_COUNT
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> list_count
      16   MQTT_LIST_DELECT
        16   -> GsnDynMemMgmt_Free
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
      16   MQTT_LIST_DESTROY
        16   -> GsnDynMemMgmt_Free
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
      16   MQTT_LIST_GET
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> list_get
      16   MQTT_LIST_INIT
        16   -> _tx_semaphore_create
        16   -> makeNode
      16   MQTT_LIST_PUT
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
        16   -> list_put
      16   MQTT_LIST_SEARCH
        16   -> GsnOsal_SemAcquire
        16   -> GsnOsal_SemRelease
      64   MQTT_MESSAGE_QUEUE_TASK
        64   -- Indirect call
        64   -> MQTT_MESSAGE_QUEUE_LOG
        64   -> MQTT_MSG_FUNC_CONNACK
        64   -> S2w_Printf
        64   -> _tx_queue_receive
        64   -> mqtt_parse_msg_id
      16   MQTT_MSG_FUNC_CONNACK
        16   -> MQTT_CONNECT_ACK_LOG
        16   -> S2w_Printf
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
      16   MQTT_MSG_FUNC_PINGRESP
        16   -> AppS2wHal_TimerStop
        16   -> S2w_Printf
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
      16   MQTT_MSG_FUNC_PUBACK
        16   -> MQTT_LIST_DELECT
        16   -> S2w_Printf
      16   MQTT_MSG_FUNC_PUBCOMP
        16   -> MQTT_LIST_DELECT
        16   -> S2w_Printf
      32   MQTT_MSG_FUNC_PUBLISH
        32   -> GsnTod_Get
        32   -> MQTT_LIST_PUT
        32   -> S2w_Printf
        32   -> mqtt_publish_with_qos
      16   MQTT_MSG_FUNC_PUBREC
        16   -> MQTT_LIST_SEARCH
        16   -> S2w_Printf
        16   -> mqtt_pubrel
      16   MQTT_PING_MSG
         0   -> AppS2wHal_TimerStart
         0   -> S2w_Printf
        16   -> S2w_Printf
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
        16   -> mqtt_ping
       8   MQTT_PING_OUT
         8   -> MQTT_PING_MSG
         8   -> S2w_Printf
      32   MQTT_PROCESS_TASK
        32   -- Indirect call
        32   -> S2w_Printf
        32   -> _tx_thread_sleep
     144   MQTT_PUBLISH_MSG_GEN
       144   -> App_TemperatureGet
       144   -> GsnDynMemMgmt_Alloc
       144   -> GsnTod_Get
       144   -> MQTT_LIST_PUT
       144   -> S2w_Printf
       144   -> memcpy
       144   -> memset
       144   -> sprintf
       144   -> strlen
      32   MQTT_PUBLISH_MSG_RETRY
        32   -> GsnDynMemMgmt_Free
        32   -> GsnTod_Get
        32   -> MQTT_LIST_COUNT
        32   -> MQTT_LIST_GET
        32   -> MQTT_LIST_PUT
        32   -> S2w_Printf
        32   -> mqtt_publish_retry_dup
       8   MQTT_PUBLISH_RETRY
         0   -> S2w_Printf
         8   -> S2w_Printf
      24   MQTT_RECEIVER_TASK
        24   -- Indirect call
        24   -> GsnDynMemMgmt_Free
        24   -> MQTT_LIST_GET
        24   -> S2w_Printf
        24   -> _tx_thread_sleep
      24   MQTT_SENDER_TASK
        24   -- Indirect call
        24   -> GsnDynMemMgmt_Free
        24   -> MQTT_LIST_GET
        24   -> S2w_Printf
        24   -> _tx_thread_sleep
       8   MQTT_SSL_CONNECT
         8   -> AppS2wCmd_SSLOpen
         8   -> S2w_Printf
         8   -> sprintf
      16   MQTT_STAET_CALLBACK_DISCONNECT
        16   -> AppS2wHal_NetClose
        16   -> AppS2wHal_TimerStop
        16   -> MQTT_LIST_DESTROY
        16   -> S2w_Printf
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
        16   -> _tx_queue_flush
        16   -> mqtt_disconnect
      32   MQTT_START
        32   -> AppS2wHal_TimerInit
        32   -> GsnOsal_ThreadCreate
        32   -> MQTT_LIST_INIT
        32   -> _tx_mutex_create
        32   -> _tx_queue_create
      24   MQTT_STATE_CALLBACK_CONNECT
        24   -> MQTT_PING_MSG
        24   -> MQTT_PUBLISH_MSG_GEN
        24   -> S2w_Printf
        24   -> _tx_thread_sleep
      16   MQTT_STATE_CALLBACK_CONNECT_READY
        16   -> S2w_Printf
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
       8   MQTT_STATE_CALLBACK_INITIAL
         8   -> GsnDynMemMgmt_Free
         8   -> MQTT_CONNECT
         8   -> S2w_Printf
      16   MQTT_STATE_CALLBACK_UNINITIAL
        16   -> GsnDynMemMgmt_Alloc
        16   -> S2w_Printf
        16   -> memset
        16   -> mqtt_init
        16   -> mqtt_init_auth
       8   MQTT_TCP_CONNECT
         8   -> AppS2wHal_NetTcpClient
       8   TEST_START
         0   -> GsnTaskSleep
         8   -> MQTT_START
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "%llu,%d">
       4  ?<Constant "%s">
       4  ?<Constant "%u">
      16  ?<Constant "001dc914feae">
      12  ?<Constant "4rnekd9wkd">
       8  ?<Constant "FTR-01">
      28  ?<Constant "MQTT_MESSAGE_QUEUE_TH...">
      20  ?<Constant "MQTT_PROCESS_THREAD">
      20  ?<Constant "MQTT_SENDER_THREAD">
      32  ?<Constant "Sm4ytjGsPEfGvDhSDJ_ZP...">
      20  ?<Constant "\r\n  CONNACK START ">
      24  ?<Constant "\r\n  MQTT_CONNECT START ">
      28  ?<Constant "\r\n  MQTT_PING_OUT START ">
      44  ?<Constant "\r\n  MQTT_STAET_CALLBA...">
      44  ?<Constant "\r\n  MQTT_STATE_CALLBA...">
      20  ?<Constant "\r\n  PING_MSG START ">
      24  ?<Constant "\r\n  PROCESS_TASK START ">
      20  ?<Constant "\r\n  PUBLISH END ">
      20  ?<Constant "\r\n  PUBLISH START ">
      24  ?<Constant "\r\n  PUB_MSG_GEN START ">
      24  ?<Constant "\r\n  SEND_TASK START ">
      28  ?<Constant "\r\n MQTT DISCONNECT ERROR">
      40  ?<Constant "\r\n MQTT_STATE_CALLBAC...">
      44  ?<Constant "\r\n MQTT_STATE_CALLBAC...">_1
      44  ?<Constant "\r\n MQTT_STATE_CALLBAC...">_2
      20  ?<Constant "\r\n NET CLOSE ERROR">
      20  ?<Constant "\r\n PINGRESP START ">
      20  ?<Constant "\r\n PUBACK : %d del">
      28  ?<Constant "\r\n PUBACK : %d is not...">
      16  ?<Constant "\r\n PUBACK END ">
      20  ?<Constant "\r\n PUBACK START ">
      20  ?<Constant "\r\n PUBCOMP : %d del">
      32  ?<Constant "\r\n PUBCOMP : %d is no...">
      20  ?<Constant "\r\n PUBCOMP START ">
      28  ?<Constant "\r\n PUBLISH : ID %d SE...">
      24  ?<Constant "\r\n PUBLISH : SEND Fail">
      24  ?<Constant "\r\n PUBLISH_RETRY END ">
      24  ?<Constant "\r\n PUBLISH_RETRY START ">
      32  ?<Constant "\r\n PUBREC : %d PUBREL...">
      28  ?<Constant "\r\n PUBREC : %d is not...">
      20  ?<Constant "\r\n PUBREC START ">
      24  ?<Constant "\r\n PUB_MSG_RETRY END ">
      24  ?<Constant "\r\n PUB_MSG_RETRY START ">
      16  ?<Constant "\r\n Ping req Suc">
      24  ?<Constant "\r\n Ping request Fail">
      24  ?<Constant "\r\n QUEUE COUNT 2 : %d">
      20  ?<Constant "\r\n QUEUE_TASK END">
      20  ?<Constant "\r\n QUEUE_TASK START">
      20  ?<Constant "\r\n SSL open error">
      20  ?<Constant "\r\n SSL open success">
      32  ?<Constant "\r\n STATE CHANGED : %d...">
      20  ?<Constant "\r\n pub list 2 lock">
      24  ?<Constant "\r\n pub list 2 unlock">
      20  ?<Constant "\r\n pub list 3 lock">
      24  ?<Constant "\r\n pub list 3 unlock">
      20  ?<Constant "\r\n pub list 4 lock">
      24  ?<Constant "\r\n pub list 4 unlock">
      28  ?<Constant "\r\n rcv_MSG : %x %x %x %x">
      20  ?<Constant "\r\n re list 2 lock">
      20  ?<Constant "\r\n re list 2 unlock">
      20  ?<Constant "\r\n se list 1 lock">
      20  ?<Constant "\r\n se list 3 lock">
      20  ?<Constant "\r\n se list 3 unlock">
      20  ?<Constant "\r\n se list 4 lock">
      20  ?<Constant "\r\n se list 4 unlock">
      16  ?<Constant "conStatus_mutex">
      40  ?<Constant "on,90,temperature-001...">
      12  ?<Constant "ping_mutex">
      48  ?<Constant "v/a/g/001dc914feae/s/...">
      28  ?<Constant "v/a/g/001dc914feae/st...">
       4  ??DataTable93
       4  ??DataTable93_1
       4  ??DataTable93_2
       4  ??DataTable93_3
       4  ??DataTable93_4
       4  ??DataTable93_5
      10  ??Subroutine13_0
       8  ??Subroutine14_0
      10  ?Subroutine0
      10  ?Subroutine1
      10  ?Subroutine10
       8  ?Subroutine11
      10  ?Subroutine12
       8  ?Subroutine2
      12  ?Subroutine3
       8  ?Subroutine4
       6  ?Subroutine5
      10  ?Subroutine6
      10  ?Subroutine7
      10  ?Subroutine8
      12  ?Subroutine9
      18  GsnOsal_SemAcquire
      18  GsnOsal_SemRelease
      56  GsnOsal_ThreadCreate
     102  MQTT_AP_CONNECT
      40  MQTT_CALLBACK
      80  MQTT_CONNECT
   10096  MQTT_CONNECT_STATUS
          mqtt_Xstate
          ping_count
          MQTT_RECEIVE_QUEUE
          MSG_receive
          MQTT_PROCESS_THREAD
          MQTT_SENDER_THREAD
          MQTT_MESSAGE_QUEUE_THREAD
          STACK_MQTT_SENDER_THREAD
          STACK_MQTT_PROCESS_THREAD
          STACK_MQTT_MESSAGE_QUEUE_THREAD
          ping_mutex
          conStatus_mutex
          my_timer
          mqtt_retry_timer
      24  MQTT_LIST_COUNT
      84  MQTT_LIST_DELECT
      72  MQTT_LIST_DESTROY
      14  MQTT_LIST_GET
      38  MQTT_LIST_INIT
      16  MQTT_LIST_PUT
      30  MQTT_LIST_SEARCH
     148  MQTT_MESSAGE_QUEUE_TASK
     128  MQTT_MSG_CALLBACK
      30  MQTT_MSG_FUNC_CONNACK
      28  MQTT_MSG_FUNC_PINGRESP
      58  MQTT_MSG_FUNC_PUBACK
      50  MQTT_MSG_FUNC_PUBCOMP
     144  MQTT_MSG_FUNC_PUBLISH
      64  MQTT_MSG_FUNC_PUBREC
      82  MQTT_PING_MSG
      32  MQTT_PING_OUT
      76  MQTT_PROCESS_TASK
     238  MQTT_PUBLISH_MSG_GEN
     196  MQTT_PUBLISH_MSG_RETRY
      22  MQTT_PUBLISH_RETRY
      78  MQTT_RECEIVER_TASK
     180  MQTT_RECEIVER_THREAD
      84  MQTT_SENDER_TASK
      44  MQTT_SSL_CONNECT
     134  MQTT_STAET_CALLBACK_DISCONNECT
     226  MQTT_START
     100  MQTT_STATE_CALLBACK_CONNECT
      44  MQTT_STATE_CALLBACK_CONNECT_READY
      54  MQTT_STATE_CALLBACK_INITIAL
     124  MQTT_STATE_CALLBACK_UNINITIAL
      48  MQTT_TCP_CONNECT
    2048  STACK_MQTT_RECEIVER_THREAD
       4  StateCount
      18  TEST_START
      12  memcpy
      20  memset
     184  mqtt_ctx
       1  nSensors
      60  peerData
     192  temperature_sensor
       4  total_malloc_size

 
 12 765 bytes in section .bss
     12 bytes in section .rodata
  4 676 bytes in section .text
 
  4 552 bytes of CODE  memory (+ 124 bytes shared)
     12 bytes of CONST memory
 12 765 bytes of DATA  memory

Errors: none
Warnings: none
