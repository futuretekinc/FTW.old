###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      30/Oct/2015  09:58:21 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\mqtt_main\mqtt_main.c                     #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\mqtt_main\mqtt_main.c -D                  #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -Ohz                  #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\mqtt_main.lst                #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\mqtt_main.o                   #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\mqtt_main\mqtt_main.c
      1          #include "time.h"
      2          #include <ctype.h>
      3          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
      4          #include "gsn_includes.h"
      5          #include "gsn_version.h"
      6          #include "hal/s2w.h"
      7          #include "hal/s2w_types.h"
      8          #include "hal/s2w_hal.h"
      9          #include "hal/s2w_timer.h"
     10          #include "parser/s2w_parse.h"
     11          #include "parser/s2w_process.h"
     12          #include "parser/s2w_command.h"
     13          #include "hal/s2w_net.h"
     14          #include "main/app_main_ctx.h"
     15          
     16          #include "config/app_ncm_config.h"
     17          #include "config/app_resource_config.h"
     18          #include "main/app_main_ctx.h"
     19          #include "hal/s2w_cert_mgmt.h"
     20          #include "modules/http/gsn_httpc.h"
     21          
     22          #include "config/app_stat_config.h"
     23          #include "app_rtc_mem.h"
     24          #include "app_events.h"
     25          #include "app_defines_builder.h"
     26          #include "fs/api/api_safe.h"
     27          
     28          #include "hal/s2w_config.h"
     29          
     30          #include "fs/api/api_safe.h"
     31          #include "fs/safe-flash/nor/flashdrv.h"
     32          
     33          #include "gslink\app_mcu_def.h"
     34          
     35          #include "app_rtc_mem.h"
     36          #include "emu/app_emu.h"
     37          
     38          #include "gsn_ncm.h"
     39          #include "gsn_ncm_roam.h"
     40          #include "modules/pwr_mgmt/gsn_pwr_mgmt.h"
     41          
     42          #include "modules/coap/gsn_coap.h"
     43          #include "modules/coap/gsn_coap_impl.h"
     44          
     45          #include "clk_tune/app_clk_tune.h"
     46          #ifdef S2W_IPv6_SUPPORT
     47          #include "modules/dhcpv6_server/gsn_dhcpv6_server.h"
     48          #endif
     49          #include "ext_app/app_ext_flash.h"
     50          #include "main/gsn_br_flashldr.h"
     51          #include "modules/fwup/gsn_fwup.h"
     52          
     53          #include "mqtt_main/mqtt_main.h"
     54          #include "mqtt/libmqtt.h"
     55          #include "one_wire/one_wire.h"
     56          #include "linked_list/linked_list.h"
     57          
     58          #define AP_SSID "FTR-01"
     59          #define AP_WWPA "4rnekd9wkd"
     60          #define HOST_ADDRESS "mqtt.thingplus.net"
     61          #define HOST_PORT "8883"
     62          //#define STACK_SIZE 20
     63          #define QUEUE_SIZE 50
     64          #define RECEIVE_MSG_SIZE 4
     65          #define TOTAL_QUEUE_SIZE QUEUE_SIZE * RECEIVE_MSG_SIZE
     66          #define SEND_LIST_MUTEX "send_list_mutex"
     67          #define RECEIVE_LIST_MUTEX "receive_list_mutex"
     68          #define PUBLISH_LIST_MUTEX "publish_list_mutex"
     69          //UINT32 xState;
     70          
     71          #define MQTT_MSG_Reserved_0 0
     72          #define MQTT_MSG_Reserved_15 15
     73          
     74          
     75          
     76          

   \                                 In section .bss, align 4
     77          DS18B20_Sensor_t temperature_sensor[16];
   \                     temperature_sensor:
   \   00000000                      DS8 192
     78          UINT8 nSensors;
     79          
     80          
     81          typedef enum
     82          {
     83          	MQTT_STATE_UNINITIAL = 0,
     84          	MQTT_STATE_INITIAL,
     85          	MQTT_STATE_CONNECT_READY,
     86              MQTT_STATE_CONNECT,
     87          	MQTT_STATE_DISCONNECT
     88          } MQTT_STATE;
     89          
     90          typedef struct mqtt_list
     91          {
     92            Node* head;
     93            TX_MUTEX list_mutex;
     94          }MQTT_LIST;
     95          
     96          typedef struct
     97          {
     98            mqtt_broker_handle_t MQTT_CLIENT;
     99            //UINT8 mqtt_cid;
    100            MQTT_LIST* send_list;
    101            MQTT_LIST* receive_list;
    102            MQTT_LIST* publish_list;
    103          }MQTT_CTX;
    104          
    105          
    106            
    107          
    108          int MQTT_SEND_FUNCTION(void* socket_info, UINT8* buf, unsigned int count);
    109          
    110          UINT8 MQTT_LIST_INIT(MQTT_LIST** LIST, char* MUTEX_NAME);
    111          
    112          UINT8 MQTT_LIST_PUT(MQTT_LIST* LIST, MSG_TYPE* msg_type);
    113          
    114          UINT8 MQTT_LIST_GET(MQTT_LIST* LIST, MSG_TYPE** msg_type);
    115          
    116          UINT8 MQTT_LIST_COUNT(MQTT_LIST* LIST);
    117          
    118          UINT8 MQTT_START();
    119          
    120          VOID MQTT_PROCESS_TASK(ULONG MQTT_INPUT);
    121          
    122          VOID MQTT_SENDER_TASK(ULONG MQTT_INPUT);
    123          
    124          VOID MQTT_RECEIVER_TASK(ULONG MQTT_INPUT);
    125          
    126          VOID MQTT_MESSAGE_QUEUE_TASK(ULONG MQTT_INPUT);
    127          
    128          UINT8 MQTT_PUBLISH_MSG_GEN();
    129          
    130          UINT8 MQTT_CONNECT();
    131          
    132          UINT8 MQTT_AP_CONNECT();
    133          
    134          UINT8 MQTT_TCP_CONNECT(UINT8* CID);
    135          
    136          UINT8 MQTT_SSL_CONNECT(UINT8 CID);
    137          
    138          void TEST_START();
    139          
    140          
    141          typedef struct
    142          {
    143              UINT8  Message_Type;
    144              UINT32          (*callback)(MSG_TYPE*);
    145          }   MQTT_MESSAGE_CALLBACK;
    146          
    147          UINT32 MQTT_MSG_FUNC_CONNACK(MSG_TYPE* MSG);
    148          //UINT32 MQTT_MSG_FUNC_CONNACK(UINT16 Connect_Return_Code);
    149          UINT32 MQTT_MSG_FUNC_PUBLISH(MSG_TYPE* MSG);
    150          UINT32 MQTT_MSG_FUNC_PUBACK(MSG_TYPE* MSG);
    151          UINT32 MQTT_MSG_FUNC_PINGRESP(MSG_TYPE* MSG);
    152          
    153          UINT8 MQTT_CONNECT_STATUS = 0;
    154          
    155          

   \                                 In section .text, align 4, keep-with-next
    156          const MQTT_MESSAGE_CALLBACK MQTT_MSG_CALLBACK[] =
   \                     MQTT_MSG_CALLBACK:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x00000000         DC32 0H
   \   00000008   0x10 0x00          DC8 16, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x00000000         DC32 0H
   \   00000010   0x20 0x00          DC8 32, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x00000000         DC32 0H
   \   00000018   0x30 0x00          DC8 48, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 MQTT_MSG_FUNC_PUBLISH
   \   00000020   0x40 0x00          DC8 64, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 MQTT_MSG_FUNC_PUBACK
   \   00000028   0x50 0x00          DC8 80, 0, 0, 0
   \              0x00 0x00    
   \   0000002C   0x00000000         DC32 0H
   \   00000030   0x60 0x00          DC8 96, 0, 0, 0
   \              0x00 0x00    
   \   00000034   0x00000000         DC32 0H
   \   00000038   0x70 0x00          DC8 112, 0, 0, 0
   \              0x00 0x00    
   \   0000003C   0x00000000         DC32 0H
   \   00000040   0x80 0x00          DC8 128, 0, 0, 0
   \              0x00 0x00    
   \   00000044   0x00000000         DC32 0H
   \   00000048   0x90 0x00          DC8 144, 0, 0, 0
   \              0x00 0x00    
   \   0000004C   0x00000000         DC32 0H
   \   00000050   0xA0 0x00          DC8 160, 0, 0, 0
   \              0x00 0x00    
   \   00000054   0x00000000         DC32 0H
   \   00000058   0xB0 0x00          DC8 176, 0, 0, 0
   \              0x00 0x00    
   \   0000005C   0x00000000         DC32 0H
   \   00000060   0xC0 0x00          DC8 192, 0, 0, 0
   \              0x00 0x00    
   \   00000064   0x00000000         DC32 0H
   \   00000068   0xD0 0x00          DC8 208, 0, 0, 0
   \              0x00 0x00    
   \   0000006C   0x........         DC32 MQTT_MSG_FUNC_PINGRESP
   \   00000070   0xE0 0x00          DC8 224, 0, 0, 0
   \              0x00 0x00    
   \   00000074   0x00000000         DC32 0H
   \   00000078   0x0F 0x00          DC8 15, 0, 0, 0
   \              0x00 0x00    
   \   0000007C   0x00000000         DC32 0H
    157          {
    158            { .Message_Type = MQTT_MSG_Reserved_0, 		.callback = NULL },
    159            { .Message_Type = MQTT_MSG_CONNECT, 		.callback = NULL },
    160            //{ .Message_Type = MQTT_MSG_CONNACK, 		.callback = MQTT_MSG_FUNC_CONNACK },
    161            { .Message_Type = MQTT_MSG_CONNACK, 		.callback = NULL },
    162            { .Message_Type = MQTT_MSG_PUBLISH, 		.callback = MQTT_MSG_FUNC_PUBLISH },
    163            { .Message_Type = MQTT_MSG_PUBACK, 		.callback = MQTT_MSG_FUNC_PUBACK },
    164            { .Message_Type = MQTT_MSG_PUBREC, 		.callback = NULL },
    165            { .Message_Type = MQTT_MSG_PUBREL, 	  	.callback = NULL },
    166            { .Message_Type = MQTT_MSG_PUBCOMP, 	  	.callback = NULL },
    167            { .Message_Type = MQTT_MSG_SUBSCRIBE,   	.callback = NULL },
    168            { .Message_Type = MQTT_MSG_SUBACK, 	  	.callback = NULL },
    169            { .Message_Type = MQTT_MSG_UNSUBSCRIBE, 	.callback = NULL },
    170            { .Message_Type = MQTT_MSG_UNSUBACK, 		.callback = NULL },
    171            { .Message_Type = MQTT_MSG_PINGREQ, 		.callback = NULL },
    172            { .Message_Type = MQTT_MSG_PINGRESP, 		.callback = MQTT_MSG_FUNC_PINGRESP },
    173            { .Message_Type = MQTT_MSG_DISCONNECT, 	.callback = NULL },
    174            { .Message_Type = MQTT_MSG_Reserved_15, 		.callback = NULL },
    175          };
    176          
    177          typedef struct
    178          {
    179              UINT8  xState;
    180              UINT32          (*callback)(void*);
    181          }   MQTT_STATE_CALLBACK;
    182          
    183          
    184          static UINT32  MQTT_STATE_CALLBACK_UNINITIAL(void* client );
    185          static UINT32  MQTT_STATE_CALLBACK_INITIAL(void* client);
    186          static UINT32  MQTT_STATE_CALLBACK_CONNECT_READY(void* client);
    187          static UINT32  MQTT_STATE_CALLBACK_CONNECT(void* client);
    188          static UINT32  MQTT_STAET_CALLBACK_DISCONNECT(void* client);
    189          

   \                                 In section .text, align 4, keep-with-next
    190          const MQTT_STATE_CALLBACK MQTT_CALLBACK[] =
   \                     MQTT_CALLBACK:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    
   \   00000004   0x........         DC32 MQTT_STATE_CALLBACK_UNINITIAL
   \   00000008   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    
   \   0000000C   0x........         DC32 MQTT_STATE_CALLBACK_INITIAL
   \   00000010   0x02 0x00          DC8 2, 0, 0, 0
   \              0x00 0x00    
   \   00000014   0x........         DC32 MQTT_STATE_CALLBACK_CONNECT_READY
   \   00000018   0x03 0x00          DC8 3, 0, 0, 0
   \              0x00 0x00    
   \   0000001C   0x........         DC32 MQTT_STATE_CALLBACK_CONNECT
   \   00000020   0x04 0x00          DC8 4, 0, 0, 0
   \              0x00 0x00    
   \   00000024   0x........         DC32 MQTT_STAET_CALLBACK_DISCONNECT
    191          {
    192              {   
    193                  .xState     = MQTT_STATE_UNINITIAL,
    194                  .callback   = MQTT_STATE_CALLBACK_UNINITIAL
    195              },
    196              {   
    197                  .xState     = MQTT_STATE_INITIAL,
    198                  .callback   = MQTT_STATE_CALLBACK_INITIAL
    199              },
    200          	{   
    201                  .xState     = MQTT_STATE_CONNECT_READY,
    202                  .callback   = MQTT_STATE_CALLBACK_CONNECT_READY
    203              },
    204              {   
    205                  .xState     = MQTT_STATE_CONNECT,
    206                  .callback   = MQTT_STATE_CALLBACK_CONNECT
    207              },
    208              {   
    209                  .xState     = MQTT_STATE_DISCONNECT,
    210                  .callback   = MQTT_STAET_CALLBACK_DISCONNECT
    211              },
    212              
    213          };
    214          

   \                                 In section .rodata, align 4, keep-with-next
    215          const UINT32   StateCount = sizeof(MQTT_CALLBACK) / sizeof(MQTT_STATE_CALLBACK);
   \                     StateCount:
   \   00000000   0x00000005         DC32 5

   \                                 In section .bss, align 4
   \                     MQTT_CONNECT_STATUS:
   \   00000000                      DS8 1
    216          
    217          
    218          
    219          S2W_NETDATA_T peerData;
    220          UINT8 mqtt_Xstate;
   \                     mqtt_Xstate:
   \   00000001                      DS8 1
   \   00000002                      DS8 2
    221          PUBLIC GSN_OSAL_QUEUE_T MQTT_RECEIVE_QUEUE;
    222          MQTT_CTX* mqtt_ctx;
   \                     mqtt_ctx:
   \   00000004                      DS8 4
   \                     nSensors:
   \   00000008                      DS8 1
   \   00000009                      DS8 3
   \                     MQTT_RECEIVE_QUEUE:
   \   0000000C                      DS8 56
    223          UINT8 MSG_receive[RECEIVE_MSG_SIZE];
   \                     MSG_receive:
   \   00000044                      DS8 4
    224          
    225          TX_THREAD MQTT_PROCESS_THREAD;
   \                     MQTT_PROCESS_THREAD:
   \   00000048                      DS8 180
    226          TX_THREAD MQTT_SENDER_THREAD;
   \                     MQTT_SENDER_THREAD:
   \   000000FC                      DS8 180
    227          TX_THREAD MQTT_RECEIVER_THREAD;
   \                     MQTT_RECEIVER_THREAD:
   \   000001B0                      DS8 180
    228          TX_THREAD MQTT_MESSAGE_QUEUE_THREAD;
   \                     MQTT_MESSAGE_QUEUE_THREAD:
   \   00000264                      DS8 180
    229          
    230          char STACK_MQTT_SENDER_THREAD[STACK_SIZE];
   \                     STACK_MQTT_SENDER_THREAD:
   \   00000318                      DS8 5120
    231          char STACK_MQTT_RECEIVER_THREAD[STACK_SIZE];
   \                     STACK_MQTT_RECEIVER_THREAD:
   \   00001718                      DS8 5120
    232          char STACK_MQTT_PROCESS_THREAD[STACK_SIZE];
   \                     STACK_MQTT_PROCESS_THREAD:
   \   00002B18                      DS8 5120
    233          char STACK_MQTT_MESSAGE_QUEUE_THREAD[STACK_SIZE];
   \                     STACK_MQTT_MESSAGE_QUEUE_THREAD:
   \   00003F18                      DS8 5120

   \                                 In section .bss, align 4
   \                     peerData:
   \   00000000                      DS8 60
    234          
    235          
    236          

   \                                 In section .text, align 2, keep-with-next
    237          UINT8 MQTT_LIST_INIT(MQTT_LIST** LIST, char* MUTEX_NAME)
    238          {
   \                     MQTT_LIST_INIT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460D             MOV      R5,R1
    239            UINT8 status;
    240            //*LIST = (MQTT_LIST*)malloc(sizeof(MQTT_LIST));
    241            *LIST = (MQTT_LIST*)gsn_malloc(sizeof(MQTT_LIST));
   \   00000006   0x2200             MOVS     R2,#+0
   \   00000008   0x21F1             MOVS     R1,#+241
   \   0000000A   0x2038             MOVS     R0,#+56
   \   0000000C   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000010   0x6020             STR      R0,[R4, #+0]
    242            memset(*LIST,0,sizeof(MQTT_LIST));
   \   00000012   0x2238             MOVS     R2,#+56
   \   00000014   0x.... 0x....      BL       ??Subroutine7_0
    243            
    244            (*LIST)->head = makeNode(NULL);
   \                     ??CrossCallReturnLabel_18:
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x.... 0x....      BL       makeNode
   \   0000001E   0x6823             LDR      R3,[R4, #+0]
   \   00000020   0x6018             STR      R0,[R3, #+0]
    245            
    246            status = tx_mutex_create(&(*LIST)->list_mutex, MUTEX_NAME, TX_INHERIT);
    247            return status;
   \   00000022   0x2201             MOVS     R2,#+1
   \   00000024   0x4629             MOV      R1,R5
   \   00000026   0x1D18             ADDS     R0,R3,#+4
   \   00000028   0x.... 0x....      BL       _tx_mutex_create
   \   0000002C   0xB2C0             UXTB     R0,R0
   \   0000002E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    248          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0x6860             LDR      R0,[R4, #+4]
   \                     ??Subroutine7_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      B.W      memset
    249          
    250          

   \                                 In section .text, align 2, keep-with-next
    251          UINT8 MQTT_LIST_PUT(MQTT_LIST* LIST, MSG_TYPE* msg_type)
    252          {
   \                     MQTT_LIST_PUT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine5
    253            tx_mutex_get(&LIST->list_mutex, TX_WAIT_FOREVER);
    254            list_put(LIST->head, msg_type);
   \                     ??CrossCallReturnLabel_8:
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0x.... 0x....      BL       list_put
    255            tx_mutex_put(&LIST->list_mutex);
   \   0000000E   0x....             B.N      ?Subroutine0
    256            return 0;
    257          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_24:
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD32             POP      {R1,R4,R5,PC}    ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x1D20             ADDS     R0,R4,#+4
   \   00000002   0x.... 0x....      B.W      _tx_mutex_put

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x460D             MOV      R5,R1
   \                     ??Subroutine5_0:
   \   00000004   0xF04F 0x31FF      MOV      R1,#-1
   \   00000008   0x1D20             ADDS     R0,R4,#+4
   \   0000000A   0x.... 0x....      B.W      _tx_mutex_get
    258          

   \                                 In section .text, align 2, keep-with-next
    259          UINT8 MQTT_LIST_GET(MQTT_LIST* LIST, MSG_TYPE** msg_type)
    260          {
   \                     MQTT_LIST_GET:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      BL       ?Subroutine5
    261            tx_mutex_get(&LIST->list_mutex, TX_WAIT_FOREVER);
    262            list_get(LIST->head, msg_type);
   \                     ??CrossCallReturnLabel_7:
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0x4629             MOV      R1,R5
   \   0000000A   0x.... 0x....      BL       list_get
    263            tx_mutex_put(&LIST->list_mutex);
   \   0000000E                      REQUIRE ?Subroutine0
   \   0000000E                      ;; // Fall through to label ?Subroutine0
    264            return 0;
    265          }
    266          

   \                                 In section .text, align 2, keep-with-next
    267          UINT8 MQTT_LIST_COUNT(MQTT_LIST* LIST)
    268          {
   \                     MQTT_LIST_COUNT:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    269            INT32 count;
    270            tx_mutex_get(&LIST->list_mutex, TX_WAIT_FOREVER);
   \   00000004   0x.... 0x....      BL       ??Subroutine5_0
    271            count = list_count(LIST->head);
   \                     ??CrossCallReturnLabel_6:
   \   00000008   0x6820             LDR      R0,[R4, #+0]
   \   0000000A   0x.... 0x....      BL       list_count
   \   0000000E   0x4605             MOV      R5,R0
    272            tx_mutex_put(&LIST->list_mutex);
   \   00000010   0x.... 0x....      BL       ?Subroutine8
    273            
    274            return count;
   \                     ??CrossCallReturnLabel_23:
   \   00000014   0x4628             MOV      R0,R5
   \   00000016   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    275          }
    276          

   \                                 In section .text, align 2, keep-with-next
    277          UINT8 MQTT_LIST_SEARCH(MQTT_LIST* LIST, UINT16 MSG_ID)
    278          {
   \                     MQTT_LIST_SEARCH:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x460E             MOV      R6,R1
    279            Node* pre ;
    280            Node* post ;
    281            tx_mutex_get(&LIST->list_mutex, TX_WAIT_FOREVER);
   \   00000006   0x.... 0x....      BL       ??Subroutine5_0
    282            pre = LIST->head;
   \                     ??CrossCallReturnLabel_5:
   \   0000000A   0x6820             LDR      R0,[R4, #+0]
    283            post = LIST->head->next;
   \   0000000C   0x6845             LDR      R5,[R0, #+4]
   \   0000000E   0xE001             B.N      ??MQTT_LIST_SEARCH_0
    284            while(post != NULL)
    285            {
    286          	if(post->msg_pointer->MSG_ID == MSG_ID)
    287          	{
    288          	  pre->next = post->next;
    289          	  //free(post->msg_pointer->TOPIC);
    290          	  //free(post->msg_pointer->PAYLOAD);
    291          	  //free(post);
    292          	  if(post->msg_pointer->TOPIC != NULL)
    293          	  {
    294          	  	gsn_free(post->msg_pointer->TOPIC);
    295          	  	post->msg_pointer->TOPIC = NULL;
    296          	  }
    297          	  if(post->msg_pointer->PAYLOAD != NULL)
    298          	  {
    299          	  	gsn_free(post->msg_pointer->PAYLOAD);
    300          	  	post->msg_pointer->PAYLOAD = NULL;
    301          	  }
    302          	  if(post != NULL)
    303          	  {
    304          		gsn_free(post);
    305          	  	post = NULL;
    306          	  }
    307          	  tx_mutex_put(&LIST->list_mutex);
    308          	  return 0;
    309          	}
    310          	else
    311          	{
    312          	  pre = post;
   \                     ??MQTT_LIST_SEARCH_1:
   \   00000010   0x4628             MOV      R0,R5
    313          	  post = post->next;
   \   00000012   0x686D             LDR      R5,[R5, #+4]
    314          	}
   \                     ??MQTT_LIST_SEARCH_0:
   \   00000014   0xB1CD             CBZ.N    R5,??MQTT_LIST_SEARCH_2
   \   00000016   0x6829             LDR      R1,[R5, #+0]
   \   00000018   0x8989             LDRH     R1,[R1, #+12]
   \   0000001A   0x42B1             CMP      R1,R6
   \   0000001C   0xD1F8             BNE.N    ??MQTT_LIST_SEARCH_1
   \   0000001E   0x6869             LDR      R1,[R5, #+4]
   \   00000020   0x6041             STR      R1,[R0, #+4]
   \   00000022   0x6828             LDR      R0,[R5, #+0]
   \   00000024   0x6840             LDR      R0,[R0, #+4]
   \   00000026   0xB120             CBZ.N    R0,??MQTT_LIST_SEARCH_3
   \   00000028   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000002C   0x6828             LDR      R0,[R5, #+0]
   \   0000002E   0x2100             MOVS     R1,#+0
   \   00000030   0x6041             STR      R1,[R0, #+4]
   \                     ??MQTT_LIST_SEARCH_3:
   \   00000032   0x6828             LDR      R0,[R5, #+0]
   \   00000034   0x6880             LDR      R0,[R0, #+8]
   \   00000036   0xB120             CBZ.N    R0,??MQTT_LIST_SEARCH_4
   \   00000038   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000003C   0x6828             LDR      R0,[R5, #+0]
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6081             STR      R1,[R0, #+8]
   \                     ??MQTT_LIST_SEARCH_4:
   \   00000042   0x4628             MOV      R0,R5
   \   00000044   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   00000048   0x....             B.N      ?Subroutine1
    315            }
    316            tx_mutex_put(&LIST->list_mutex);
   \                     ??MQTT_LIST_SEARCH_2:
   \   0000004A   0x.... 0x....      BL       ?Subroutine8
    317            return 1;
   \                     ??CrossCallReturnLabel_22:
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xBD70             POP      {R4-R6,PC}       ;; return
    318          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      BL       ?Subroutine8
   \                     ??CrossCallReturnLabel_21:
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD70             POP      {R4-R6,PC}
    319          

   \                                 In section .text, align 2, keep-with-next
    320          UINT8 MQTT_LIST_DESTROY(MQTT_LIST* LIST)
    321          {
   \                     MQTT_LIST_DESTROY:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x4604             MOV      R4,R0
    322            Node* pre ;
    323            Node* post ;
    324            tx_mutex_get(&LIST->list_mutex, TX_WAIT_FOREVER);
   \   00000004   0x.... 0x....      BL       ??Subroutine5_0
    325            pre = LIST->head;
   \                     ??CrossCallReturnLabel_4:
   \   00000008   0x6825             LDR      R5,[R4, #+0]
   \   0000000A   0xE014             B.N      ??MQTT_LIST_DESTROY_0
    326            while(pre->next != NULL)
    327            {
    328          	  post = pre->next;
    329          	  pre->next = post->next;
   \                     ??MQTT_LIST_DESTROY_1:
   \   0000000C   0x6870             LDR      R0,[R6, #+4]
   \   0000000E   0x6068             STR      R0,[R5, #+4]
   \   00000010   0x6830             LDR      R0,[R6, #+0]
   \   00000012   0x6840             LDR      R0,[R0, #+4]
   \   00000014   0xB120             CBZ.N    R0,??MQTT_LIST_DESTROY_2
    330          	  //free(post->msg_pointer->TOPIC);
    331          	  //free(post->msg_pointer->PAYLOAD);
    332          	  //free(post->msg_pointer);
    333          	  if(post->msg_pointer->TOPIC != NULL)
    334          	  {
    335          	  	gsn_free(post->msg_pointer->TOPIC);
   \   00000016   0x.... 0x....      BL       GsnDynMemMgmt_Free
    336          	  	post->msg_pointer->TOPIC = NULL;
   \   0000001A   0x6830             LDR      R0,[R6, #+0]
   \   0000001C   0x2100             MOVS     R1,#+0
   \   0000001E   0x6041             STR      R1,[R0, #+4]
   \                     ??MQTT_LIST_DESTROY_2:
   \   00000020   0x6830             LDR      R0,[R6, #+0]
   \   00000022   0x6880             LDR      R0,[R0, #+8]
   \   00000024   0xB120             CBZ.N    R0,??MQTT_LIST_DESTROY_3
    337          	  }
    338          	  if(post->msg_pointer->PAYLOAD != NULL)
    339          	  {
    340          	  	gsn_free(post->msg_pointer->PAYLOAD);
   \   00000026   0x.... 0x....      BL       GsnDynMemMgmt_Free
    341          	  	post->msg_pointer->PAYLOAD = NULL;
   \   0000002A   0x6830             LDR      R0,[R6, #+0]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x6081             STR      R1,[R0, #+8]
    342          	  }
    343          	  if(post != NULL)
    344          	  {
    345          		gsn_free(post);
   \                     ??MQTT_LIST_DESTROY_3:
   \   00000030   0x4630             MOV      R0,R6
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Free
    346          	  	post = NULL;
    347          	  }
    348            }
   \                     ??MQTT_LIST_DESTROY_0:
   \   00000036   0x686E             LDR      R6,[R5, #+4]
   \   00000038   0x2E00             CMP      R6,#+0
   \   0000003A   0xD1E7             BNE.N    ??MQTT_LIST_DESTROY_1
    349            tx_mutex_put(&LIST->list_mutex);
   \   0000003C                      REQUIRE ?Subroutine1
   \   0000003C                      ;; // Fall through to label ?Subroutine1
    350            return 0;
    351          }
    352          

   \                                 In section .text, align 2, keep-with-next
    353          UINT8 MQTT_START()
    354          {
   \                     MQTT_START:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
    355            UINT8 status;
    356            
    357            mqtt_Xstate =  MQTT_STATE_UNINITIAL;
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable70_1
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x7060             STRB     R0,[R4, #+1]
   \   0000000A   0xB087             SUB      SP,SP,#+28
    358            //mqtt_ctx = (MQTT_CTX*)malloc(sizeof(MQTT_CTX));
    359            mqtt_ctx = (MQTT_CTX*)gsn_malloc(sizeof(MQTT_CTX));
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xF240 0x1167      MOVW     R1,#+359
   \   00000012   0x2060             MOVS     R0,#+96
   \   00000014   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000018   0x6060             STR      R0,[R4, #+4]
    360            memset(mqtt_ctx,0,sizeof(MQTT_CTX));
   \   0000001A   0x2260             MOVS     R2,#+96
   \   0000001C   0x.... 0x....      BL       ??Subroutine7_0
    361            
    362            //mqtt_ctx->MQTT_CLIENT.clientid = (char*)malloc(strlen(ClientID)+1);
    363            //mqtt_ctx->MQTT_CLIENT.username = (char*)malloc(strlen(ClientID)+1);
    364            //mqtt_ctx->MQTT_CLIENT.password = (char*)malloc(strlen(PASSWORD)+1);
    365            
    366            mqtt_ctx->MQTT_CLIENT.clientid = (char*)gsn_malloc(strlen(ClientID)+1);
   \                     ??CrossCallReturnLabel_17:
   \   00000020   0x2200             MOVS     R2,#+0
   \   00000022   0xF44F 0x71B7      MOV      R1,#+366
   \   00000026   0x200D             MOVS     R0,#+13
   \   00000028   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000002C   0x6861             LDR      R1,[R4, #+4]
   \   0000002E   0x6408             STR      R0,[R1, #+64]
    367            mqtt_ctx->MQTT_CLIENT.username = (char*)gsn_malloc(strlen(ClientID)+1);
   \   00000030   0x2200             MOVS     R2,#+0
   \   00000032   0xF240 0x116F      MOVW     R1,#+367
   \   00000036   0x200D             MOVS     R0,#+13
   \   00000038   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000003C   0x6861             LDR      R1,[R4, #+4]
   \   0000003E   0x6448             STR      R0,[R1, #+68]
    368            mqtt_ctx->MQTT_CLIENT.password = (char*)gsn_malloc(strlen(PASSWORD)+1);
   \   00000040   0x2200             MOVS     R2,#+0
   \   00000042   0xF44F 0x71B8      MOV      R1,#+368
   \   00000046   0x201D             MOVS     R0,#+29
   \   00000048   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000004C   0x6863             LDR      R3,[R4, #+4]
   \   0000004E   0x6498             STR      R0,[R3, #+72]
    369            
    370            memset(mqtt_ctx->MQTT_CLIENT.clientid,0,strlen(ClientID)+1);
   \   00000050   0x220D             MOVS     R2,#+13
   \   00000052   0x6C18             LDR      R0,[R3, #+64]
   \   00000054   0x.... 0x....      BL       ??Subroutine7_0
    371            memset(mqtt_ctx->MQTT_CLIENT.username,0,strlen(ClientID)+1);
   \                     ??CrossCallReturnLabel_16:
   \   00000058   0x6860             LDR      R0,[R4, #+4]
   \   0000005A   0x6C40             LDR      R0,[R0, #+68]
   \   0000005C   0x220D             MOVS     R2,#+13
   \   0000005E   0x.... 0x....      BL       ??Subroutine7_0
    372            memset(mqtt_ctx->MQTT_CLIENT.password,0,strlen(PASSWORD)+1);
   \                     ??CrossCallReturnLabel_15:
   \   00000062   0x6860             LDR      R0,[R4, #+4]
   \   00000064   0x6C80             LDR      R0,[R0, #+72]
   \   00000066   0x221D             MOVS     R2,#+29
   \   00000068   0x.... 0x....      BL       ??Subroutine7_0
    373            mqtt_init(&mqtt_ctx->MQTT_CLIENT, ClientID);
   \                     ??CrossCallReturnLabel_14:
   \   0000006C   0x.... 0x....      ADR.W    R5,`?<Constant "001dc9151e55">`
   \   00000070   0x6860             LDR      R0,[R4, #+4]
   \   00000072   0x4629             MOV      R1,R5
   \   00000074   0x.... 0x....      BL       mqtt_init
    374            mqtt_init_auth(&mqtt_ctx->MQTT_CLIENT, ClientID, PASSWORD);
   \   00000078   0x6860             LDR      R0,[R4, #+4]
   \   0000007A   0x.... 0x....      ADR.W    R2,`?<Constant "y3FPxdiSAJjV2LkmHF-DO...">`
   \   0000007E   0x4629             MOV      R1,R5
   \   00000080   0x.... 0x....      BL       mqtt_init_auth
    375            
    376            MQTT_LIST_INIT(&mqtt_ctx->publish_list, PUBLISH_LIST_MUTEX);
   \   00000084   0x6860             LDR      R0,[R4, #+4]
   \   00000086   0x.... 0x....      ADR.W    R1,`?<Constant "publish_list_mutex">`
   \   0000008A   0x305C             ADDS     R0,R0,#+92
   \   0000008C   0x.... 0x....      BL       MQTT_LIST_INIT
    377            MQTT_LIST_INIT(&mqtt_ctx->send_list, SEND_LIST_MUTEX);
   \   00000090   0x6860             LDR      R0,[R4, #+4]
   \   00000092   0x.... 0x....      ADR.W    R1,`?<Constant "send_list_mutex">`
   \   00000096   0x3054             ADDS     R0,R0,#+84
   \   00000098   0x.... 0x....      BL       MQTT_LIST_INIT
    378            MQTT_LIST_INIT(&mqtt_ctx->receive_list, RECEIVE_LIST_MUTEX);
   \   0000009C   0x6860             LDR      R0,[R4, #+4]
   \   0000009E   0x.... 0x....      ADR.W    R1,`?<Constant "receive_list_mutex">`
   \   000000A2   0x3058             ADDS     R0,R0,#+88
   \   000000A4   0x.... 0x....      BL       MQTT_LIST_INIT
    379            
    380            status = tx_queue_create(&MQTT_RECEIVE_QUEUE, "MQTT_RECEIVE_QUEUE", RECEIVE_MSG_SIZE, MSG_receive, TOTAL_QUEUE_SIZE);
   \   000000A8   0x20C8             MOVS     R0,#+200
   \   000000AA   0x9000             STR      R0,[SP, #+0]
   \   000000AC   0xF104 0x0344      ADD      R3,R4,#+68
   \   000000B0   0x2204             MOVS     R2,#+4
   \   000000B2   0x.... 0x....      ADR.W    R1,`?<Constant "MQTT_RECEIVE_QUEUE">`
   \   000000B6   0xF104 0x000C      ADD      R0,R4,#+12
   \   000000BA   0x.... 0x....      BL       _tx_queue_create
    381            
    382            status = tx_thread_create(&MQTT_PROCESS_THREAD, "MQTT_PROCESS_THREAD", MQTT_PROCESS_TASK ,0 , STACK_MQTT_PROCESS_THREAD ,STACK_SIZE , 1 , 1 , TX_NO_TIME_SLICE,TX_AUTO_START);
   \   000000BE   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_0:
   \   000000C2   0xF504 0x502C      ADD      R0,R4,#+11008
   \   000000C6   0x3018             ADDS     R0,R0,#+24
   \   000000C8   0x9000             STR      R0,[SP, #+0]
   \   000000CA   0x.... 0x....      ADR.W    R2,MQTT_PROCESS_TASK
   \   000000CE   0x.... 0x....      ADR.W    R1,`?<Constant "MQTT_PROCESS_THREAD">`
   \   000000D2   0xF104 0x0048      ADD      R0,R4,#+72
   \   000000D6   0x.... 0x....      BL       _tx_thread_create
    383            status = tx_thread_create(&MQTT_SENDER_THREAD, "MQTT_SENDER_THREAD", MQTT_SENDER_TASK ,0, STACK_MQTT_SENDER_THREAD, STACK_SIZE, 1, 1, TX_NO_TIME_SLICE,TX_AUTO_START);
   \   000000DA   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_1:
   \   000000DE   0xF504 0x7046      ADD      R0,R4,#+792
   \   000000E2   0x9000             STR      R0,[SP, #+0]
   \   000000E4   0x.... 0x....      ADR.W    R2,MQTT_SENDER_TASK
   \   000000E8   0x.... 0x....      ADR.W    R1,`?<Constant "MQTT_SENDER_THREAD">`
   \   000000EC   0xF104 0x00FC      ADD      R0,R4,#+252
   \   000000F0   0x.... 0x....      BL       _tx_thread_create
    384            status = tx_thread_create(&MQTT_RECEIVER_THREAD, "MQTT_RECEIVER_THREAD", MQTT_RECEIVER_TASK ,0, STACK_MQTT_RECEIVER_THREAD, STACK_SIZE, 1, 1, TX_NO_TIME_SLICE,TX_AUTO_START);
   \   000000F4   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_2:
   \   000000F8   0xF504 0x50B8      ADD      R0,R4,#+5888
   \   000000FC   0x3018             ADDS     R0,R0,#+24
   \   000000FE   0x9000             STR      R0,[SP, #+0]
   \   00000100   0x.... 0x....      ADR.W    R2,MQTT_RECEIVER_TASK
   \   00000104   0x.... 0x....      ADR.W    R1,`?<Constant "MQTT_RECEIVER_THREAD">`
   \   00000108   0xF504 0x70D8      ADD      R0,R4,#+432
   \   0000010C   0x.... 0x....      BL       _tx_thread_create
    385            status = tx_thread_create(&MQTT_MESSAGE_QUEUE_THREAD, "MQTT_MESSAGE_QUEUE_THREAD", MQTT_MESSAGE_QUEUE_TASK ,0, STACK_MQTT_MESSAGE_QUEUE_THREAD, STACK_SIZE, 1, 1, TX_NO_TIME_SLICE,TX_AUTO_START);
    386            
    387            return status;
   \   00000110   0x.... 0x....      BL       ?Subroutine4
   \                     ??CrossCallReturnLabel_3:
   \   00000114   0xF504 0x507C      ADD      R0,R4,#+16128
   \   00000118   0x3018             ADDS     R0,R0,#+24
   \   0000011A   0x9000             STR      R0,[SP, #+0]
   \   0000011C   0x.... 0x....      ADR.W    R2,MQTT_MESSAGE_QUEUE_TASK
   \   00000120   0x.... 0x....      ADR.W    R1,`?<Constant "MQTT_MESSAGE_QUEUE_TH...">`
   \   00000124   0xF504 0x7019      ADD      R0,R4,#+612
   \   00000128   0x.... 0x....      BL       _tx_thread_create
   \   0000012C   0xB2C0             UXTB     R0,R0
   \   0000012E   0xB007             ADD      SP,SP,#+28
   \   00000130   0xBD30             POP      {R4,R5,PC}       ;; return
    388          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x2001             MOVS     R0,#+1
   \   00000002   0x9005             STR      R0,[SP, #+20]
   \   00000004   0x2300             MOVS     R3,#+0
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9004             STR      R0,[SP, #+16]
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x9003             STR      R0,[SP, #+12]
   \   0000000E   0x9002             STR      R0,[SP, #+8]
   \   00000010   0xF44F 0x50A0      MOV      R0,#+5120
   \   00000014   0x9001             STR      R0,[SP, #+4]
   \   00000016   0x4770             BX       LR
    389          

   \                                 In section .text, align 4, keep-with-next
    390          VOID MQTT_PROCESS_TASK(ULONG MQTT_INPUT)
    391          {
   \                     MQTT_PROCESS_TASK:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
    392            UINT32 oldState;
    393            oldState = mqtt_Xstate;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable70_1
   \   00000008   0x.... 0x....      ADR.W    R6,`?<Constant "\\r\\n STATE CHANGED : %d...">`
   \   0000000C   0x7865             LDRB     R5,[R4, #+1]
   \   0000000E   0x.... 0x....      ADR.W    R7,MQTT_CALLBACK
   \   00000012   0x.... 0x....      ADR.W    R8,`?<Constant "\\r\\n ulStateCBCount : %...">`
    394            while(1)
    395            {
    396          	S2w_Printf("\r\n ulStateCBCount : %d , xState : %d", StateCount, mqtt_Xstate); 
   \                     ??MQTT_PROCESS_TASK_0:
   \   00000016   0x7862             LDRB     R2,[R4, #+1]
   \   00000018   0x2105             MOVS     R1,#+5
   \   0000001A   0x4640             MOV      R0,R8
   \   0000001C   0x.... 0x....      BL       S2w_Printf
    397          	if (mqtt_Xstate < StateCount)
   \   00000020   0x7861             LDRB     R1,[R4, #+1]
   \   00000022   0x2905             CMP      R1,#+5
   \   00000024   0xD20C             BCS.N    ??MQTT_PROCESS_TASK_1
    398              {   
    399                  MQTT_CALLBACK[mqtt_Xstate].callback(mqtt_ctx);
   \   00000026   0xEB07 0x01C1      ADD      R1,R7,R1, LSL #+3
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x6849             LDR      R1,[R1, #+4]
   \   0000002E   0x4788             BLX      R1
    400                  if (mqtt_Xstate != oldState)
   \   00000030   0x7862             LDRB     R2,[R4, #+1]
   \   00000032   0x42AA             CMP      R2,R5
   \   00000034   0xD004             BEQ.N    ??MQTT_PROCESS_TASK_1
    401                  {
    402                      S2w_Printf("\r\n STATE CHANGED : %d -> %d\n", oldState, mqtt_Xstate);
   \   00000036   0x4629             MOV      R1,R5
   \   00000038   0x4630             MOV      R0,R6
   \   0000003A   0x.... 0x....      BL       S2w_Printf
    403                      oldState = mqtt_Xstate;
   \   0000003E   0x7865             LDRB     R5,[R4, #+1]
    404                  }
    405              }
    406          	GsnTaskSleep(5000);
   \                     ??MQTT_PROCESS_TASK_1:
   \   00000040   0xF241 0x3088      MOVW     R0,#+5000
   \   00000044   0x.... 0x....      BL       GsnTaskSleep
   \   00000048   0xE7E5             B.N      ??MQTT_PROCESS_TASK_0
    407            }
    408          }
    409          

   \                                 In section .text, align 4, keep-with-next
    410          VOID MQTT_SENDER_TASK(ULONG MQTT_INPUT)
    411          {
   \                     MQTT_SENDER_TASK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    412              MSG_TYPE* temp;
    413          	UINT8 status = 0;
                 	      ^
Warning[Pe550]: variable "status" was set but never used
   \   00000002   0x.... 0x....      ADR.W    R4,MQTT_MSG_CALLBACK
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable70_1
    414          	while(1)
    415          	{
    416          	  if(mqtt_Xstate == MQTT_STATE_CONNECT)
   \                     ??MQTT_SENDER_TASK_0:
   \   0000000A   0x7868             LDRB     R0,[R5, #+1]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD111             BNE.N    ??MQTT_SENDER_TASK_1
    417          	  {
    418          		if(MQTT_LIST_COUNT(mqtt_ctx->publish_list) != 0)
   \   00000010   0x6868             LDR      R0,[R5, #+4]
   \   00000012   0x6DC0             LDR      R0,[R0, #+92]
   \   00000014   0x.... 0x....      BL       MQTT_LIST_COUNT
   \   00000018   0xB160             CBZ.N    R0,??MQTT_SENDER_TASK_1
    419          	  	{
    420          			status = MQTT_LIST_GET(mqtt_ctx->publish_list,&temp);
   \   0000001A   0x6868             LDR      R0,[R5, #+4]
   \   0000001C   0x6DC0             LDR      R0,[R0, #+92]
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x.... 0x....      BL       MQTT_LIST_GET
    421          			status = MQTT_MSG_CALLBACK[temp->MSG_TYPE].callback(temp);
   \   00000024   0x.... 0x....      BL       ?Subroutine10
    422          			/*if( status == 1)
    423          		  		mqtt_Xstate = MQTT_STATE_DISCONNECT;*/
    424            			//free(temp);
    425          			if(temp != NULL)
   \                     ??CrossCallReturnLabel_31:
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0xB118             CBZ.N    R0,??MQTT_SENDER_TASK_1
    426          			{
    427            				gsn_free(temp);
   \   0000002C   0x.... 0x....      BL       GsnDynMemMgmt_Free
    428          				temp = NULL;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9000             STR      R0,[SP, #+0]
    429          			}
    430          	  	}
    431          		else
    432          		{
    433          		  //S2w_Printf("\r\n PUBLISH LIST empty");
    434          		}
    435          	  }
    436          	  GsnTaskSleep(1000);
   \                     ??MQTT_SENDER_TASK_1:
   \   00000034   0x.... 0x....      BL       ?Subroutine11
    437          	}
   \                     ??CrossCallReturnLabel_36:
   \   00000038   0xE7E7             B.N      ??MQTT_SENDER_TASK_0
    438          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0xF44F 0x707A      MOV      R0,#+1000
   \   00000004   0x.... 0x....      B.W      GsnTaskSleep

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0xEB04 0x01C1      ADD      R1,R4,R1, LSL #+3
   \   00000008   0x6849             LDR      R1,[R1, #+4]
   \   0000000A   0x4708             BX       R1
    439          

   \                                 In section .text, align 4, keep-with-next
    440          VOID MQTT_RECEIVER_TASK(ULONG MQTT_INPUT)
    441          {
   \                     MQTT_RECEIVER_TASK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      ADR.W    R4,MQTT_MSG_CALLBACK
   \   00000006   0x.... 0x....      LDR.W    R5,??DataTable70_1
    442            MSG_TYPE* temp;
    443            while(1)
    444            {
    445          	if(mqtt_Xstate == MQTT_STATE_CONNECT)
   \                     ??MQTT_RECEIVER_TASK_0:
   \   0000000A   0x7868             LDRB     R0,[R5, #+1]
   \   0000000C   0x2803             CMP      R0,#+3
   \   0000000E   0xD111             BNE.N    ??MQTT_RECEIVER_TASK_1
    446          	{
    447          		if(MQTT_LIST_COUNT(mqtt_ctx->receive_list) != 0)
   \   00000010   0x6868             LDR      R0,[R5, #+4]
   \   00000012   0x6D80             LDR      R0,[R0, #+88]
   \   00000014   0x.... 0x....      BL       MQTT_LIST_COUNT
   \   00000018   0xB160             CBZ.N    R0,??MQTT_RECEIVER_TASK_1
    448          		{	
    449          	  		MQTT_LIST_GET(mqtt_ctx->receive_list,&temp);
   \   0000001A   0x6868             LDR      R0,[R5, #+4]
   \   0000001C   0x6D80             LDR      R0,[R0, #+88]
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x.... 0x....      BL       MQTT_LIST_GET
    450          			MQTT_MSG_CALLBACK[temp->MSG_TYPE].callback(temp);
   \   00000024   0x.... 0x....      BL       ?Subroutine10
    451            			//free(temp);
    452            			if(temp != NULL)
   \                     ??CrossCallReturnLabel_30:
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0xB118             CBZ.N    R0,??MQTT_RECEIVER_TASK_1
    453          			{
    454            				gsn_free(temp);
   \   0000002C   0x.... 0x....      BL       GsnDynMemMgmt_Free
    455          				temp = NULL;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9000             STR      R0,[SP, #+0]
    456          			}
    457          		}
    458          		else
    459          		{
    460          		  //S2w_Printf("\r\n RECEIVE LIST empty");
    461          		}
    462          	}
    463          	GsnTaskSleep(1000);
   \                     ??MQTT_RECEIVER_TASK_1:
   \   00000034   0x.... 0x....      BL       ?Subroutine11
    464            }
   \                     ??CrossCallReturnLabel_35:
   \   00000038   0xE7E7             B.N      ??MQTT_RECEIVER_TASK_0
    465          }
    466          

   \                                 In section .text, align 4, keep-with-next
    467          VOID MQTT_MESSAGE_QUEUE_TASK(ULONG MQTT_INPUT)
    468          {
   \                     MQTT_MESSAGE_QUEUE_TASK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x.... 0x....      LDR.W    R5,??DataTable70_1
   \   00000006   0xE007             B.N      ??CrossCallReturnLabel_29
    469              UINT8 status;
                           ^
Warning[Pe550]: variable "status" was set but never used
    470          	UINT8 receive_MSG[4];
    471          	MSG_TYPE* temp;
    472          	while(1)
    473          	{
    474          	    status = tx_queue_receive(&MQTT_RECEIVE_QUEUE, receive_MSG, TX_WAIT_FOREVER);
    475          		//temp = (MSG_TYPE*)malloc(sizeof(MSG_TYPE));
    476          		temp = (MSG_TYPE*)gsn_malloc(sizeof(MSG_TYPE));
    477          		memset(temp,0,sizeof(MSG_TYPE));
    478          		temp->MSG_TYPE = receive_MSG[0] >> 4;
    479          		temp->MSG_ID = receive_MSG[3];
    480          		if(temp->MSG_TYPE == MQTT_MSG_TYPE_CONNACK)
    481          		  MQTT_MSG_FUNC_CONNACK(temp);
    482          		else
    483          		  MQTT_LIST_PUT(mqtt_ctx->receive_list, temp);
   \                     ??MQTT_MESSAGE_QUEUE_TASK_0:
   \   00000008   0x6868             LDR      R0,[R5, #+4]
   \   0000000A   0x6D80             LDR      R0,[R0, #+88]
   \   0000000C   0x4621             MOV      R1,R4
   \   0000000E   0x.... 0x....      BL       MQTT_LIST_PUT
    484          
    485            		//free(temp);
    486          		if(temp != NULL)
   \                     ??MQTT_MESSAGE_QUEUE_TASK_1:
   \   00000012   0xB10C             CBZ.N    R4,??CrossCallReturnLabel_29
    487          		{
    488            			gsn_free(temp);
   \   00000014   0x.... 0x....      BL       ?Subroutine9
    489          			temp = NULL;
    490          		}
   \                     ??CrossCallReturnLabel_29:
   \   00000018   0xF04F 0x32FF      MOV      R2,#-1
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0xF105 0x000C      ADD      R0,R5,#+12
   \   00000022   0x.... 0x....      BL       _tx_queue_receive
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xF44F 0x71EE      MOV      R1,#+476
   \   0000002C   0x2014             MOVS     R0,#+20
   \   0000002E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000032   0x4604             MOV      R4,R0
   \   00000034   0x2214             MOVS     R2,#+20
   \   00000036   0x.... 0x....      BL       ??Subroutine7_0
   \                     ??CrossCallReturnLabel_13:
   \   0000003A   0xF89D 0x0000      LDRB     R0,[SP, #+0]
   \   0000003E   0x0900             LSRS     R0,R0,#+4
   \   00000040   0x7020             STRB     R0,[R4, #+0]
   \   00000042   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000046   0x81A0             STRH     R0,[R4, #+12]
   \   00000048   0x7820             LDRB     R0,[R4, #+0]
   \   0000004A   0x2802             CMP      R0,#+2
   \   0000004C   0xD1DC             BNE.N    ??MQTT_MESSAGE_QUEUE_TASK_0
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       MQTT_MSG_FUNC_CONNACK
   \   00000054   0xE7DD             B.N      ??MQTT_MESSAGE_QUEUE_TASK_1
    491          	}
    492          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0x4620             MOV      R0,R4
   \   00000002   0x.... 0x....      B.W      GsnDynMemMgmt_Free
    493          

   \                                 In section .text, align 2, keep-with-next
    494          UINT32 MQTT_MSG_FUNC_CONNACK(MSG_TYPE* MSG)
    495          {
   \                     MQTT_MSG_FUNC_CONNACK:
   \   00000000   0xB580             PUSH     {R7,LR}
    496            UINT16 Connect_Return_Code = MSG->MSG_ID;
   \   00000002   0x8980             LDRH     R0,[R0, #+12]
    497          
    498            if(Connect_Return_Code == 0)
   \   00000004   0xB910             CBNZ.N   R0,??MQTT_MSG_FUNC_CONNACK_0
    499          	S2w_Printf("\r\n MQTT Connection Accepted");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT Connection Ac...">`
   \   0000000A   0xE017             B.N      ??MQTT_MSG_FUNC_CONNACK_1
    500            else if(Connect_Return_Code == 1)
   \                     ??MQTT_MSG_FUNC_CONNACK_0:
   \   0000000C   0x2801             CMP      R0,#+1
   \   0000000E   0xBF08             IT       EQ 
   \   00000010   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT Connection Re...">`
    501          	S2w_Printf("\r\n MQTT Connection Refused, reason = unacceptable protocol version");
   \   00000014   0xD012             BEQ.N    ??MQTT_MSG_FUNC_CONNACK_1
    502            else if(Connect_Return_Code == 2)
   \   00000016   0x2802             CMP      R0,#+2
   \   00000018   0xBF08             IT       EQ 
   \   0000001A   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT Connection Re...">_1`
    503          	S2w_Printf("\r\n MQTT Connection Refused, reason = identifier rejected");
   \   0000001E   0xD00D             BEQ.N    ??MQTT_MSG_FUNC_CONNACK_1
    504            else if(Connect_Return_Code == 3)
   \   00000020   0x2803             CMP      R0,#+3
   \   00000022   0xBF08             IT       EQ 
   \   00000024   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT Connection Re...">_2`
    505          	S2w_Printf("\r\n MQTT Connection Refused, reason = server unavailable");
   \   00000028   0xD008             BEQ.N    ??MQTT_MSG_FUNC_CONNACK_1
    506            else if(Connect_Return_Code == 4)
   \   0000002A   0x2804             CMP      R0,#+4
   \   0000002C   0xBF08             IT       EQ 
   \   0000002E   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n MQTT Connection Re...">_3`
    507          	S2w_Printf("\r\n MQTT Connection Refused, reason = bad user name or password");
   \   00000032   0xD003             BEQ.N    ??MQTT_MSG_FUNC_CONNACK_1
    508            else if(Connect_Return_Code == 5)
   \   00000034   0x2805             CMP      R0,#+5
   \   00000036   0xD103             BNE.N    ??MQTT_MSG_FUNC_CONNACK_2
    509              S2w_Printf("\r\n MQTT Connection Refused, reason = not authorized");
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT Connection Re...">_4`
   \                     ??MQTT_MSG_FUNC_CONNACK_1:
   \   0000003C   0x.... 0x....      BL       S2w_Printf
    510            
    511            MQTT_CONNECT_STATUS = 1;
   \                     ??MQTT_MSG_FUNC_CONNACK_2:
   \   00000040   0x.... 0x....      LDR.W    R0,??DataTable70_1
   \   00000044   0x2101             MOVS     R1,#+1
   \   00000046   0x7001             STRB     R1,[R0, #+0]
    512            return 0;	
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBD02             POP      {R1,PC}          ;; return
    513          }
    514          
    515          

   \                                 In section .text, align 2, keep-with-next
    516          UINT32 MQTT_MSG_FUNC_PUBLISH(MSG_TYPE* MSG)
    517          {
   \                     MQTT_MSG_FUNC_PUBLISH:
   \   00000000   0xE92D 0x4170      PUSH     {R4-R6,R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0xB083             SUB      SP,SP,#+12
    518            MSG_TYPE* temp = (MSG_TYPE*)MSG;
    519            UINT8 status;
    520          		 
    521            if(temp->QoS == 1)
   \   00000008   0x7BA0             LDRB     R0,[R4, #+14]
   \   0000000A   0x.... 0x....      LDR.W    R5,??DataTable70_1
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD10A             BNE.N    ??MQTT_MSG_FUNC_PUBLISH_0
    522            	status = mqtt_publish_with_qos(&(mqtt_ctx->MQTT_CLIENT), (char const*)temp->TOPIC, (char const*)temp->PAYLOAD, 0, temp->QoS, &(temp->MSG_ID));
   \   00000012   0xF104 0x010C      ADD      R1,R4,#+12
   \   00000016   0x9101             STR      R1,[SP, #+4]
   \   00000018   0x9000             STR      R0,[SP, #+0]
   \   0000001A   0x68A2             LDR      R2,[R4, #+8]
   \   0000001C   0x6861             LDR      R1,[R4, #+4]
   \   0000001E   0x6868             LDR      R0,[R5, #+4]
   \   00000020   0x2300             MOVS     R3,#+0
   \   00000022   0x.... 0x....      BL       mqtt_publish_with_qos
   \   00000026   0x4606             MOV      R6,R0
    523          
    524            if(status == 0)
   \                     ??MQTT_MSG_FUNC_PUBLISH_0:
   \   00000028   0xB2F6             UXTB     R6,R6
   \   0000002A   0xB9B6             CBNZ.N   R6,??MQTT_MSG_FUNC_PUBLISH_1
    525            {
    526          	temp->TIME = SYSTIME_TO_MSEC(GsnTod_Get());
   \   0000002C   0x.... 0x....      BL       GsnTod_Get
   \   00000030   0xF44F 0x787A      MOV      R8,#+1000
   \   00000034   0xFBA8 0x2300      UMULL    R2,R3,R8,R0
   \   00000038   0xFB08 0x3301      MLA      R3,R8,R1,R3
   \   0000003C   0x0BD2             LSRS     R2,R2,#+15
   \   0000003E   0xEA42 0x4243      ORR      R2,R2,R3, LSL #+17
   \   00000042   0x6122             STR      R2,[R4, #+16]
    527          	MQTT_LIST_PUT(mqtt_ctx->send_list,temp);
   \   00000044   0x4621             MOV      R1,R4
   \   00000046   0x6868             LDR      R0,[R5, #+4]
   \   00000048   0x6D40             LDR      R0,[R0, #+84]
   \   0000004A   0x.... 0x....      BL       MQTT_LIST_PUT
    528          	S2w_Printf("\r\n PUBLISH Success : %d", temp->MSG_ID);
   \   0000004E   0x89A1             LDRH     R1,[R4, #+12]
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH Success : %d">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   \   00000058   0xE005             B.N      ??MQTT_MSG_FUNC_PUBLISH_2
    529            }
    530            else
    531            {
    532          	mqtt_Xstate = MQTT_STATE_DISCONNECT;
   \                     ??MQTT_MSG_FUNC_PUBLISH_1:
   \   0000005A   0x2004             MOVS     R0,#+4
   \   0000005C   0x7068             STRB     R0,[R5, #+1]
    533          	S2w_Printf("\r\n PUBLISH Fail");
   \   0000005E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH Fail">`
   \   00000062   0x.... 0x....      BL       S2w_Printf
    534            }
    535          
    536            return status;
   \                     ??MQTT_MSG_FUNC_PUBLISH_2:
   \   00000066   0x4630             MOV      R0,R6
   \   00000068   0xE8BD 0x817E      POP      {R1-R6,R8,PC}    ;; return
    537          }
    538          

   \                                 In section .text, align 2, keep-with-next
    539          UINT32 MQTT_MSG_FUNC_PUBACK(MSG_TYPE* MSG)
    540          {
   \                     MQTT_MSG_FUNC_PUBACK:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x4604             MOV      R4,R0
    541            UINT8 status;
    542          
    543            status = MQTT_LIST_SEARCH(mqtt_ctx->send_list, MSG->MSG_ID);
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable70_1
   \   00000008   0x89A1             LDRH     R1,[R4, #+12]
   \   0000000A   0x6840             LDR      R0,[R0, #+4]
   \   0000000C   0x6D40             LDR      R0,[R0, #+84]
   \   0000000E   0x.... 0x....      BL       MQTT_LIST_SEARCH
    544            if(status == 0)
   \   00000012   0x89A1             LDRH     R1,[R4, #+12]
   \   00000014   0x0005             MOVS     R5,R0
   \   00000016   0xBF0C             ITE      EQ 
   \   00000018   0x.... 0x....      ADREQ.W  R0,`?<Constant "\\r\\n PUBLISH_ACK : %d M...">`
   \   0000001C   0x.... 0x....      ADRNE.W  R0,`?<Constant "\\r\\n PUBLISH_ACK : %d M...">_1`
    545          	S2w_Printf("\r\n PUBLISH_ACK : %d MSG ID delete",MSG->MSG_ID);
    546            else
    547          	S2w_Printf("\r\n PUBLISH_ACK : %d MSG ID is not found",MSG->MSG_ID);
   \   00000020   0x.... 0x....      BL       S2w_Printf
    548          
    549            return status;
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    550            
    551          }
    552          

   \                                 In section .text, align 2, keep-with-next
    553          UINT32 MQTT_MSG_FUNC_PINGRESP(MSG_TYPE* MSG)
    554          {
    555            return 0;
   \                     MQTT_MSG_FUNC_PINGRESP:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    556          }
    557          

   \                                 In section .text, align 2, keep-with-next
    558          static UINT32  MQTT_STATE_CALLBACK_UNINITIAL(void* client )
    559          {
   \                     MQTT_STATE_CALLBACK_UNINITIAL:
   \   00000000   0xB580             PUSH     {R7,LR}
    560            mqtt_Xstate = MQTT_STATE_INITIAL;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable70_1
   \   00000006   0x2101             MOVS     R1,#+1
   \   00000008   0x7041             STRB     R1,[R0, #+1]
    561            temp_sensor_search(&nSensors,temperature_sensor);
   \   0000000A   0x3008             ADDS     R0,R0,#+8
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable70_2
   \   00000010   0x.... 0x....      BL       temp_sensor_search
    562            S2w_Printf("\r\n MQTT_STATE_CB_uninitialized");
   \   00000014   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CB_unin...">`
   \   00000018   0x....             B.N      ?Subroutine2
    563            return 0;
    564          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      BL       S2w_Printf
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
    565          

   \                                 In section .text, align 2, keep-with-next
    566          static UINT32  MQTT_STATE_CALLBACK_INITIAL(void* client)
    567          {
   \                     MQTT_STATE_CALLBACK_INITIAL:
   \   00000000   0xB510             PUSH     {R4,LR}
    568            UINT8 status;
    569            status = MQTT_CONNECT();
    570            if(status == 0)
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable70_1
   \   00000006   0x.... 0x....      BL       MQTT_CONNECT
   \   0000000A   0xB930             CBNZ.N   R0,??MQTT_STATE_CALLBACK_INITIAL_0
    571            {
    572          	mqtt_Xstate = MQTT_STATE_CONNECT_READY;
   \   0000000C   0x2002             MOVS     R0,#+2
   \   0000000E   0x7060             STRB     R0,[R4, #+1]
    573              S2w_Printf("\r\n MQTT_STATE_CB_initialized");
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CB_init...">`
   \   00000014   0x.... 0x....      BL       S2w_Printf
   \   00000018   0xE001             B.N      ??MQTT_STATE_CALLBACK_INITIAL_1
    574            }
    575            else
    576            {
    577            	mqtt_Xstate = MQTT_STATE_INITIAL;
   \                     ??MQTT_STATE_CALLBACK_INITIAL_0:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x7060             STRB     R0,[R4, #+1]
    578            }
    579            
    580            return 0;
   \                     ??MQTT_STATE_CALLBACK_INITIAL_1:
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
    581          }
    582          

   \                                 In section .text, align 2, keep-with-next
    583          static UINT32  MQTT_STATE_CALLBACK_CONNECT_READY(void* client)
    584          {
    585            if(MQTT_CONNECT_STATUS == 1)
   \                     MQTT_STATE_CALLBACK_CONNECT_READY:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable70_1
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x2901             CMP      R1,#+1
   \   00000008   0xBF0C             ITE      EQ 
   \   0000000A   0x2103             MOVEQ    R1,#+3
   \   0000000C   0x2102             MOVNE    R1,#+2
    586          	mqtt_Xstate = MQTT_STATE_CONNECT;
    587            else
    588          	mqtt_Xstate = MQTT_STATE_CONNECT_READY;
   \   0000000E   0x7041             STRB     R1,[R0, #+1]
    589            return 0;
   \   00000010   0x2000             MOVS     R0,#+0
   \   00000012   0x4770             BX       LR               ;; return
    590          }
    591          

   \                                 In section .text, align 2, keep-with-next
    592          static UINT32  MQTT_STATE_CALLBACK_CONNECT(void* client)
    593          {
   \                     MQTT_STATE_CALLBACK_CONNECT:
   \   00000000   0xB580             PUSH     {R7,LR}
    594            MQTT_PUBLISH_MSG_GEN();
   \   00000002   0x.... 0x....      BL       MQTT_PUBLISH_MSG_GEN
    595            S2w_Printf("\r\n MQTT_STATE_CB_connected");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CB_conn...">`
   \   0000000A                      REQUIRE ?Subroutine2
   \   0000000A                      ;; // Fall through to label ?Subroutine2
    596            return 0;
    597          }
    598          
    599          

   \                                 In section .text, align 2, keep-with-next
    600          static UINT32  MQTT_STAET_CALLBACK_DISCONNECT(void* client)
    601          {
   \                     MQTT_STAET_CALLBACK_DISCONNECT:
   \   00000000   0xB510             PUSH     {R4,LR}
    602            UINT8 status;
    603            status = mqtt_disconnect(&(mqtt_ctx->MQTT_CLIENT));
    604            if(status != 0)
   \   00000002   0x....             LDR.N    R4,??DataTable70_1
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0x.... 0x....      BL       mqtt_disconnect
   \   0000000A   0xB2C0             UXTB     R0,R0
   \   0000000C   0xB118             CBZ.N    R0,??MQTT_STAET_CALLBACK_DISCONNECT_0
    605          	S2w_Printf("\r\n MQTT DISCONNECT ERROR");
   \   0000000E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT DISCONNECT ERROR">`
   \   00000012   0x.... 0x....      BL       S2w_Printf
    606            
    607            status = AppS2wHal_NetClose(mqtt_ctx->MQTT_CLIENT.mqtt_cid);
    608            if(status != 0)
   \                     ??MQTT_STAET_CALLBACK_DISCONNECT_0:
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0xF890 0x003C      LDRB     R0,[R0, #+60]
   \   0000001C   0x.... 0x....      BL       AppS2wHal_NetClose
   \   00000020   0xB118             CBZ.N    R0,??MQTT_STAET_CALLBACK_DISCONNECT_1
    609          	S2w_Printf("\r\n NET CLOSE ERROR");
   \   00000022   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n NET CLOSE ERROR">`
   \   00000026   0x.... 0x....      BL       S2w_Printf
    610            
    611            mqtt_ctx->MQTT_CLIENT.seq = 0;
   \                     ??MQTT_STAET_CALLBACK_DISCONNECT_1:
   \   0000002A   0x6860             LDR      R0,[R4, #+4]
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xF8A0 0x1050      STRH     R1,[R0, #+80]
    612            MQTT_LIST_DESTROY(mqtt_ctx->publish_list);
   \   00000032   0x6DC0             LDR      R0,[R0, #+92]
   \   00000034   0x.... 0x....      BL       MQTT_LIST_DESTROY
    613            MQTT_LIST_DESTROY(mqtt_ctx->receive_list);
   \   00000038   0x6860             LDR      R0,[R4, #+4]
   \   0000003A   0x6D80             LDR      R0,[R0, #+88]
   \   0000003C   0x.... 0x....      BL       MQTT_LIST_DESTROY
    614            MQTT_LIST_DESTROY(mqtt_ctx->send_list);
   \   00000040   0x6860             LDR      R0,[R4, #+4]
   \   00000042   0x6D40             LDR      R0,[R0, #+84]
   \   00000044   0x.... 0x....      BL       MQTT_LIST_DESTROY
    615            mqtt_Xstate = MQTT_STATE_UNINITIAL;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x7060             STRB     R0,[R4, #+1]
    616            S2w_Printf("\r\n MQTT_STATE_CB_disconnected");
   \   0000004C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT_STATE_CB_disc...">`
   \   00000050   0x....             B.N      ?Subroutine3
    617            return 0;
    618          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x.... 0x....      BL       S2w_Printf
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD10             POP      {R4,PC}          ;; return
    619          

   \                                 In section .text, align 2, keep-with-next
    620          int MQTT_SEND_FUNCTION(void* socket_info, UINT8* buf, unsigned int count)
    621          {
    622            S2W_NETDATA_T* temp = (S2W_NETDATA_T*)socket_info;
    623            
    624            //AppS2wHal_NetTx(mqtt_ctx->mqtt_cid, temp->ipAddr, temp->port, buf, count);
    625            //AppS2wHal_NetTx(mqtt_ctx->mqtt_cid, peerData.ipAddr, peerData.port, buf, count);
    626            return 0;
   \                     MQTT_SEND_FUNCTION:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
    627          }
    628          
    629          
    630          

   \                                 In section .text, align 2, keep-with-next
    631          UINT8 MQTT_PUBLISH_MSG_GEN()
    632          {
   \                     MQTT_PUBLISH_MSG_GEN:
   \   00000000   0xE92D 0x4DF0      PUSH     {R4-R8,R10,R11,LR}
   \   00000004   0xB09E             SUB      SP,SP,#+120
    633            GSN_SYSTEM_TIME_T currentTime, mSeconds = 0;
    634            //sensor node status message generation
    635            UINT32 temperature_int;
    636            MSG_TYPE* get_pointer = NULL;
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0x9002             STR      R0,[SP, #+8]
   \   0000000A   0xF44F 0x787A      MOV      R8,#+1000
   \   0000000E   0x....             LDR.N    R7,??DataTable70_2
   \   00000010   0x.... 0x....      ADR.W    R11,`?<Constant "\\r\\n MSG ID %d is time ...">`
   \   00000014   0x.... 0x....      ADR.W    R10,`?<Constant "\\r\\nSEND LIST empty">`
   \   00000018   0x....             LDR.N    R6,??DataTable70_1
   \   0000001A   0xE08B             B.N      ??MQTT_PUBLISH_MSG_GEN_0
    637            MSG_TYPE* mqtt_publish_msg;
    638            char PAYLOAD[100];
    639            UINT32 TOPIC_LEN;
    640            UINT32 PAYLOAD_LEN;
    641            while(mqtt_Xstate == MQTT_STATE_CONNECT)
    642            {
    643            	if(MQTT_LIST_COUNT(mqtt_ctx->send_list) == 0)
    644            	{
    645          		S2w_Printf("\r\nSEND LIST empty");
    646            	}
    647            	else
    648            	{
    649          		if(MQTT_LIST_COUNT(mqtt_ctx->send_list)!=0)
    650          		{
    651              		mSeconds = SYSTIME_TO_MSEC(GsnTod_Get());
    652          			MQTT_LIST_GET(mqtt_ctx->send_list, &get_pointer);
    653          			if( (mSeconds - (get_pointer->TIME))  > 300000)
    654          			{
    655          			    S2w_Printf("\r\n MSG ID %d is time over",get_pointer->MSG_ID);
    656          				//free(get_pointer->TOPIC);
    657          				//free(get_pointer->PAYLOAD);
    658          	  			//free(get_pointer);
    659          				if(get_pointer->TOPIC != NULL)
    660          				{
    661          					gsn_free(get_pointer->TOPIC);
    662          					get_pointer->TOPIC = NULL;
    663          				}
    664          				if(get_pointer->PAYLOAD != NULL)
    665          				{
    666          				    gsn_free(get_pointer->PAYLOAD);
    667          	  				get_pointer->PAYLOAD = NULL;
    668          			    }
    669          				if(get_pointer != NULL)
    670          				{
    671          					gsn_free(get_pointer);
    672          					get_pointer = NULL;
    673          				}
    674          				S2w_Printf("\r\n PUBLISH_MSG_GEN -  get_pointer address 1= %d", get_pointer);
    675          			}
    676          			else
    677          			{
    678          			  	S2w_Printf("\r\n Insert publish list MSG ID : %d",get_pointer->MSG_ID);
   \                     ??MQTT_PUBLISH_MSG_GEN_1:
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n Insert publish lis...">`
   \   00000020   0x.... 0x....      BL       S2w_Printf
    679          	  			MQTT_LIST_PUT(mqtt_ctx->publish_list, get_pointer);
   \   00000024   0x6870             LDR      R0,[R6, #+4]
   \   00000026   0x9902             LDR      R1,[SP, #+8]
   \   00000028   0x6DC0             LDR      R0,[R0, #+92]
   \   0000002A   0x.... 0x....      BL       MQTT_LIST_PUT
    680          				//free(get_pointer);
    681          				if(get_pointer != NULL)
   \   0000002E   0x9802             LDR      R0,[SP, #+8]
   \   00000030   0xB118             CBZ.N    R0,??MQTT_PUBLISH_MSG_GEN_2
    682          				{
    683          					gsn_free(get_pointer);
   \   00000032   0x.... 0x....      BL       GsnDynMemMgmt_Free
    684          					get_pointer = NULL;
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0x9002             STR      R0,[SP, #+8]
    685          				}
    686          				S2w_Printf("\r\n PUBLISH_MSG_GEN -  get_pointer address 2= %d", get_pointer);
   \                     ??MQTT_PUBLISH_MSG_GEN_2:
   \   0000003A   0x9902             LDR      R1,[SP, #+8]
   \   0000003C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH_MSG_GEN - ...">_1`
   \                     ??MQTT_PUBLISH_MSG_GEN_3:
   \   00000040   0x.... 0x....      BL       S2w_Printf
    687          			}
    688          			
    689          		}
    690            	}
    691          	TOPIC_LEN = strlen((const char*)TOPIC_STATUS)+1;
    692          	PAYLOAD_LEN = strlen((const char*)PAYLOAD_STATUS)+1;
    693            	//mqtt_publish_msg = (MSG_TYPE*)malloc(sizeof(MSG_TYPE));
    694            	//mqtt_publish_msg->TOPIC = (UINT8*)malloc(TOPIC_LEN);
    695            	//mqtt_publish_msg->PAYLOAD = (UINT8*)malloc(PAYLOAD_LEN);
    696          	
    697          	mqtt_publish_msg = (MSG_TYPE*)gsn_malloc(sizeof(MSG_TYPE));
   \                     ??MQTT_PUBLISH_MSG_GEN_4:
   \   00000044   0x2200             MOVS     R2,#+0
   \   00000046   0xF240 0x21B9      MOVW     R1,#+697
   \   0000004A   0x2014             MOVS     R0,#+20
   \   0000004C   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   00000050   0x4604             MOV      R4,R0
    698            	mqtt_publish_msg->TOPIC = (UINT8*)gsn_malloc(TOPIC_LEN);
   \   00000052   0x2200             MOVS     R2,#+0
   \   00000054   0xF240 0x21BA      MOVW     R1,#+698
   \   00000058   0x201A             MOVS     R0,#+26
   \   0000005A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000005E   0x6060             STR      R0,[R4, #+4]
    699            	mqtt_publish_msg->PAYLOAD = (UINT8*)gsn_malloc(PAYLOAD_LEN);
   \   00000060   0x2200             MOVS     R2,#+0
   \   00000062   0xF240 0x21BB      MOVW     R1,#+699
   \   00000066   0x2027             MOVS     R0,#+39
   \   00000068   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000006C   0x60A0             STR      R0,[R4, #+8]
    700            
    701            	memset(mqtt_publish_msg->TOPIC, 0, TOPIC_LEN);
   \   0000006E   0x221A             MOVS     R2,#+26
   \   00000070   0x.... 0x....      BL       ?Subroutine7
    702            	memset(mqtt_publish_msg->PAYLOAD, 0, PAYLOAD_LEN);
   \                     ??CrossCallReturnLabel_20:
   \   00000074   0x68A0             LDR      R0,[R4, #+8]
   \   00000076   0x2227             MOVS     R2,#+39
   \   00000078   0x.... 0x....      BL       ??Subroutine7_0
    703            
    704            	memcpy(mqtt_publish_msg->TOPIC, TOPIC_STATUS, strlen((const char*)TOPIC_STATUS));
   \                     ??CrossCallReturnLabel_12:
   \   0000007C   0x6860             LDR      R0,[R4, #+4]
   \   0000007E   0x.... 0x....      ADR.W    R1,`?<Constant "v/a/g/001dc9151e55/st...">`
   \   00000082   0x2219             MOVS     R2,#+25
   \   00000084   0x.... 0x....      BL       memcpy
    705            	memcpy(mqtt_publish_msg->PAYLOAD, PAYLOAD_STATUS, strlen((const char*)PAYLOAD_STATUS));
   \   00000088   0x68A0             LDR      R0,[R4, #+8]
   \   0000008A   0x.... 0x....      ADR.W    R1,`?<Constant "on,90,temperature-001...">`
   \   0000008E   0x2226             MOVS     R2,#+38
   \   00000090   0x.... 0x....      BL       memcpy
    706            
    707            	mqtt_publish_msg->MSG_ID = 0;
   \   00000094   0x.... 0x....      BL       ?Subroutine6
    708            	mqtt_publish_msg->TIME = 0;
    709            	mqtt_publish_msg->MSG_TYPE = MQTT_MSG_TYPE_PUBLISH;
    710            	mqtt_publish_msg->QoS = 1;
    711            	MQTT_LIST_PUT(mqtt_ctx->publish_list, mqtt_publish_msg);
    712          
    713            	//free(mqtt_publish_msg);
    714          	if(mqtt_publish_msg != NULL)
   \                     ??CrossCallReturnLabel_10:
   \   00000098   0xB10C             CBZ.N    R4,??CrossCallReturnLabel_28
    715          	{
    716          		gsn_free(mqtt_publish_msg);
   \   0000009A   0x.... 0x....      BL       ?Subroutine9
    717          		mqtt_publish_msg = NULL;
    718          	}
    719          
    720            
    721            	//sensor data message generation.
    722            	currentTime = GsnTod_Get();
   \                     ??CrossCallReturnLabel_28:
   \   0000009E   0x.... 0x....      BL       GsnTod_Get
   \   000000A2   0x4604             MOV      R4,R0
   \   000000A4   0x460D             MOV      R5,R1
    723            	mSeconds = SYSTIME_TO_MSEC(currentTime);
    724            	//temperature_int = App_TemperatureGet();
    725          	//sprintf((char*)PAYLOAD,"%llu,%d", mSeconds,temperature_int);
    726          	GetTemperature(&temperature_sensor[0]);
   \   000000A6   0x4638             MOV      R0,R7
   \   000000A8   0x.... 0x....      BL       GetTemperature
    727          	sprintf((char*)PAYLOAD,"%llu,%.2f", mSeconds,temperature_sensor[0].Temperature);
   \   000000AC   0x68B8             LDR      R0,[R7, #+8]
   \   000000AE   0x.... 0x....      BL       __aeabi_f2d
   \   000000B2   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000B6   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_37:
   \   000000BA   0x0BDB             LSRS     R3,R3,#+15
   \   000000BC   0x.... 0x....      ADR.W    R1,`?<Constant "%llu,%.2f">`
   \   000000C0   0xA803             ADD      R0,SP,#+12
   \   000000C2   0x.... 0x....      BL       sprintf
    728            	
    729              TOPIC_LEN = strlen((const char*)TOPIC_SENSOR)+1;
    730          	PAYLOAD_LEN = strlen((const char*)PAYLOAD)+1;
   \   000000C6   0xA803             ADD      R0,SP,#+12
   \   000000C8   0x.... 0x....      BL       strlen
   \   000000CC   0x1C45             ADDS     R5,R0,#+1
    731          	
    732            	//mqtt_publish_msg = (MSG_TYPE*)malloc(sizeof(MSG_TYPE));
    733            	//mqtt_publish_msg->TOPIC = (UINT8*)malloc(TOPIC_LEN);
    734            	//mqtt_publish_msg->PAYLOAD = (UINT8*)malloc(PAYLOAD_LEN);
    735          	
    736          	mqtt_publish_msg = (MSG_TYPE*)gsn_malloc(sizeof(MSG_TYPE));
   \   000000CE   0x2200             MOVS     R2,#+0
   \   000000D0   0xF44F 0x7138      MOV      R1,#+736
   \   000000D4   0x2014             MOVS     R0,#+20
   \   000000D6   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000DA   0x4604             MOV      R4,R0
    737            	mqtt_publish_msg->TOPIC = (UINT8*)gsn_malloc(TOPIC_LEN);
   \   000000DC   0x2200             MOVS     R2,#+0
   \   000000DE   0xF240 0x21E1      MOVW     R1,#+737
   \   000000E2   0x2030             MOVS     R0,#+48
   \   000000E4   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000E8   0x6060             STR      R0,[R4, #+4]
    738            	mqtt_publish_msg->PAYLOAD = (UINT8*)gsn_malloc(PAYLOAD_LEN);
   \   000000EA   0x2200             MOVS     R2,#+0
   \   000000EC   0xF240 0x21E2      MOVW     R1,#+738
   \   000000F0   0x4628             MOV      R0,R5
   \   000000F2   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   000000F6   0x60A0             STR      R0,[R4, #+8]
    739            
    740            	memset(mqtt_publish_msg->TOPIC, 0, TOPIC_LEN);
   \   000000F8   0x2230             MOVS     R2,#+48
   \   000000FA   0x.... 0x....      BL       ?Subroutine7
    741            	memset(mqtt_publish_msg->PAYLOAD, 0, PAYLOAD_LEN);
   \                     ??CrossCallReturnLabel_19:
   \   000000FE   0x68A0             LDR      R0,[R4, #+8]
   \   00000100   0x462A             MOV      R2,R5
   \   00000102   0x.... 0x....      BL       ??Subroutine7_0
    742            
    743            	memcpy(mqtt_publish_msg->TOPIC, TOPIC_SENSOR, strlen((const char*)TOPIC_SENSOR));
   \                     ??CrossCallReturnLabel_11:
   \   00000106   0x6860             LDR      R0,[R4, #+4]
   \   00000108   0x.... 0x....      ADR.W    R1,`?<Constant "v/a/g/001dc9151e55/s/...">`
   \   0000010C   0x222F             MOVS     R2,#+47
   \   0000010E   0x.... 0x....      BL       memcpy
    744            	memcpy(mqtt_publish_msg->PAYLOAD, PAYLOAD, strlen((const char*)PAYLOAD));
   \   00000112   0xA803             ADD      R0,SP,#+12
   \   00000114   0x.... 0x....      BL       strlen
   \   00000118   0x4602             MOV      R2,R0
   \   0000011A   0x68A0             LDR      R0,[R4, #+8]
   \   0000011C   0xA903             ADD      R1,SP,#+12
   \   0000011E   0x.... 0x....      BL       memcpy
    745            
    746            	mqtt_publish_msg->MSG_ID = 0;
   \   00000122   0x.... 0x....      BL       ?Subroutine6
    747            	mqtt_publish_msg->TIME = 0;
    748            	mqtt_publish_msg->MSG_TYPE = MQTT_MSG_TYPE_PUBLISH;
    749            	mqtt_publish_msg->QoS = 1;
    750            	MQTT_LIST_PUT(mqtt_ctx->publish_list, mqtt_publish_msg);  
    751          
    752            	//free(mqtt_publish_msg);
    753          	if(mqtt_publish_msg != NULL)
   \                     ??CrossCallReturnLabel_9:
   \   00000126   0xB10C             CBZ.N    R4,??CrossCallReturnLabel_27
    754          	{
    755          		gsn_free(mqtt_publish_msg);
   \   00000128   0x.... 0x....      BL       ?Subroutine9
    756          		mqtt_publish_msg = NULL;
    757          	}
    758          
    759          	GsnTaskSleep(5000);
   \                     ??CrossCallReturnLabel_27:
   \   0000012C   0xF241 0x3088      MOVW     R0,#+5000
   \   00000130   0x.... 0x....      BL       GsnTaskSleep
   \                     ??MQTT_PUBLISH_MSG_GEN_0:
   \   00000134   0x7870             LDRB     R0,[R6, #+1]
   \   00000136   0x2803             CMP      R0,#+3
   \   00000138   0xD145             BNE.N    ??MQTT_PUBLISH_MSG_GEN_5
   \   0000013A   0x6870             LDR      R0,[R6, #+4]
   \   0000013C   0x6D40             LDR      R0,[R0, #+84]
   \   0000013E   0x.... 0x....      BL       MQTT_LIST_COUNT
   \   00000142   0xB918             CBNZ.N   R0,??MQTT_PUBLISH_MSG_GEN_6
   \   00000144   0x4650             MOV      R0,R10
   \   00000146   0x.... 0x....      BL       S2w_Printf
   \                     ??MQTT_PUBLISH_MSG_GEN_7:
   \   0000014A   0xE77B             B.N      ??MQTT_PUBLISH_MSG_GEN_4
   \                     ??MQTT_PUBLISH_MSG_GEN_6:
   \   0000014C   0x6870             LDR      R0,[R6, #+4]
   \   0000014E   0x6D40             LDR      R0,[R0, #+84]
   \   00000150   0x.... 0x....      BL       MQTT_LIST_COUNT
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD0F8             BEQ.N    ??MQTT_PUBLISH_MSG_GEN_7
   \   00000158   0x.... 0x....      BL       GsnTod_Get
   \   0000015C   0x4604             MOV      R4,R0
   \   0000015E   0x6870             LDR      R0,[R6, #+4]
   \   00000160   0x6D40             LDR      R0,[R0, #+84]
   \   00000162   0x460D             MOV      R5,R1
   \   00000164   0xA902             ADD      R1,SP,#+8
   \   00000166   0x.... 0x....      BL       MQTT_LIST_GET
   \   0000016A   0x9802             LDR      R0,[SP, #+8]
   \   0000016C   0x8981             LDRH     R1,[R0, #+12]
   \   0000016E   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_38:
   \   00000172   0x6904             LDR      R4,[R0, #+16]
   \   00000174   0x0BDB             LSRS     R3,R3,#+15
   \   00000176   0x2500             MOVS     R5,#+0
   \   00000178   0x1B14             SUBS     R4,R2,R4
   \   0000017A   0xEB63 0x0505      SBC      R5,R3,R5
   \   0000017E   0x2300             MOVS     R3,#+0
   \   00000180   0x....             LDR.N    R2,??DataTable70_3  ;; 0x493e1
   \   00000182   0x429D             CMP      R5,R3
   \   00000184   0xD802             BHI.N    ??MQTT_PUBLISH_MSG_GEN_8
   \   00000186   0x4294             CMP      R4,R2
   \   00000188   0xF4FF 0xAF48      BCC.W    ??MQTT_PUBLISH_MSG_GEN_1
   \                     ??MQTT_PUBLISH_MSG_GEN_8:
   \   0000018C   0x4658             MOV      R0,R11
   \   0000018E   0x.... 0x....      BL       S2w_Printf
   \   00000192   0x9802             LDR      R0,[SP, #+8]
   \   00000194   0x6840             LDR      R0,[R0, #+4]
   \   00000196   0xB120             CBZ.N    R0,??MQTT_PUBLISH_MSG_GEN_9
   \   00000198   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000019C   0x9802             LDR      R0,[SP, #+8]
   \   0000019E   0x2100             MOVS     R1,#+0
   \   000001A0   0x6041             STR      R1,[R0, #+4]
   \                     ??MQTT_PUBLISH_MSG_GEN_9:
   \   000001A2   0x9802             LDR      R0,[SP, #+8]
   \   000001A4   0x6880             LDR      R0,[R0, #+8]
   \   000001A6   0xB120             CBZ.N    R0,??MQTT_PUBLISH_MSG_GEN_10
   \   000001A8   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   000001AC   0x9802             LDR      R0,[SP, #+8]
   \   000001AE   0x2100             MOVS     R1,#+0
   \   000001B0   0x6081             STR      R1,[R0, #+8]
   \                     ??MQTT_PUBLISH_MSG_GEN_10:
   \   000001B2   0x9802             LDR      R0,[SP, #+8]
   \   000001B4   0xB118             CBZ.N    R0,??MQTT_PUBLISH_MSG_GEN_11
   \   000001B6   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   000001BA   0x2000             MOVS     R0,#+0
   \   000001BC   0x9002             STR      R0,[SP, #+8]
   \                     ??MQTT_PUBLISH_MSG_GEN_11:
   \   000001BE   0x9902             LDR      R1,[SP, #+8]
   \   000001C0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n PUBLISH_MSG_GEN - ...">`
   \   000001C4   0xE73C             B.N      ??MQTT_PUBLISH_MSG_GEN_3
    760            }
    761            return 0;
   \                     ??MQTT_PUBLISH_MSG_GEN_5:
   \   000001C6   0x2000             MOVS     R0,#+0
   \   000001C8   0xB01E             ADD      SP,SP,#+120
   \   000001CA   0xE8BD 0x8DF0      POP      {R4-R8,R10,R11,PC}  ;; return
    762            
    763          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0xFBA8 0x2304      UMULL    R2,R3,R8,R4
   \   00000004   0xFB08 0x3305      MLA      R3,R8,R5,R3
   \   00000008   0x0BD2             LSRS     R2,R2,#+15
   \   0000000A   0xEA42 0x4243      ORR      R2,R2,R3, LSL #+17
   \   0000000E   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x81A0             STRH     R0,[R4, #+12]
   \   00000004   0x6120             STR      R0,[R4, #+16]
   \   00000006   0x4621             MOV      R1,R4
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x7020             STRB     R0,[R4, #+0]
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x73A0             STRB     R0,[R4, #+14]
   \   00000010   0x6870             LDR      R0,[R6, #+4]
   \   00000012   0x6DC0             LDR      R0,[R0, #+92]
   \   00000014   0x....             B.N      MQTT_LIST_PUT
    764          
    765          
    766          

   \                                 In section .text, align 2, keep-with-next
    767          UINT8 MQTT_CONNECT()
    768          {
   \                     MQTT_CONNECT:
   \   00000000   0xB510             PUSH     {R4,LR}
    769            int RSSI = 0;
    770            UINT8 status = 0;
    771            
    772            RSSI = AppS2wHal_RssiGet();
    773          
    774            if(RSSI == 0)
   \   00000002   0x....             LDR.N    R4,??DataTable70_1
   \   00000004   0x.... 0x....      BL       AppS2wHal_RssiGet
   \   00000008   0xB948             CBNZ.N   R0,??MQTT_CONNECT_0
    775            {
    776          	status = MQTT_AP_CONNECT();
    777            }
    778            
    779            if(status != 0)
   \   0000000A   0x.... 0x....      BL       MQTT_AP_CONNECT
   \   0000000E   0xB130             CBZ.N    R0,??MQTT_CONNECT_0
    780            {
    781          	S2w_Printf("\r\n AP CONNECT Error");
   \   00000010   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n AP CONNECT Error">`
   \                     ??MQTT_CONNECT_1:
   \   00000014   0x.... 0x....      BL       S2w_Printf
    782          	goto error;
    783            }
    784          
    785            GsnTaskSleep(1000);
    786            if(AppS2wHal_NetIsCidOpen(mqtt_ctx->MQTT_CLIENT.mqtt_cid) == 0)
    787            {
    788          	status = MQTT_TCP_CONNECT(&(mqtt_ctx->MQTT_CLIENT.mqtt_cid));
    789          	if(status != 0)
    790          	{
    791          	  S2w_Printf("\r\n TCP CONNECT Error");
    792          	  goto error;
    793          	}
    794          
    795          	GsnTaskSleep(1000);
    796          	/*S2w_Printf("\r\n BEFORE SSL CONNECT");
    797          	S2w_Printf("\r\n CID : %d", mqtt_ctx->MQTT_CLIENT.mqtt_cid);
    798          	status = MQTT_SSL_CONNECT(mqtt_ctx->MQTT_CLIENT.mqtt_cid);
    799          	if(status != 0)
    800          	{
    801          	  S2w_Printf("\r\n SSL CONNECT Error");
    802          	  goto error;
    803          	}
    804          	S2w_Printf("\r\n ATFER SSL CONNECT");
    805          	GsnTaskSleep(1000);*/
    806            }
    807            
    808            if(mqtt_connect(&(mqtt_ctx->MQTT_CLIENT)) != 0)
    809            {
    810          	S2w_Printf("\r\n MQTT CONNECT Error");
    811          	goto error;
    812            }
    813            S2w_Printf("\r\n MQTT CONNECT success");
    814            GsnTaskSleep(1000);
    815            return 0;
    816           
    817          error:
    818            mqtt_Xstate = MQTT_STATE_INITIAL;
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x7060             STRB     R0,[R4, #+1]
    819            return 1;
   \   0000001C   0xBD10             POP      {R4,PC}          ;; return
   \                     ??MQTT_CONNECT_0:
   \   0000001E   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_34:
   \   00000022   0x6860             LDR      R0,[R4, #+4]
   \   00000024   0xF890 0x003C      LDRB     R0,[R0, #+60]
   \   00000028   0x.... 0x....      BL       AppS2wHal_NetIsCidOpen
   \   0000002C   0xB948             CBNZ.N   R0,??CrossCallReturnLabel_33
   \   0000002E   0x6860             LDR      R0,[R4, #+4]
   \   00000030   0x303C             ADDS     R0,R0,#+60
   \   00000032   0x.... 0x....      BL       MQTT_TCP_CONNECT
   \   00000036   0xB110             CBZ.N    R0,??MQTT_CONNECT_2
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TCP CONNECT Error">`
   \   0000003C   0xE7EA             B.N      ??MQTT_CONNECT_1
   \                     ??MQTT_CONNECT_2:
   \   0000003E   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_33:
   \   00000042   0x6860             LDR      R0,[R4, #+4]
   \   00000044   0x.... 0x....      BL       mqtt_connect
   \   00000048   0xB110             CBZ.N    R0,??MQTT_CONNECT_3
   \   0000004A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT CONNECT Error">`
   \   0000004E   0xE7E1             B.N      ??MQTT_CONNECT_1
   \                     ??MQTT_CONNECT_3:
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n MQTT CONNECT success">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   \   00000058   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_32:
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0xBD10             POP      {R4,PC}
    820          }
    821          

   \                                 In section .text, align 2, keep-with-next
    822          UINT8 MQTT_AP_CONNECT()
    823          {
   \                     MQTT_AP_CONNECT:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
    824          	UINT8* SSID;
    825          	UINT8* WWPA;
    826              UINT8 status;
    827          
    828          	//SSID = (UINT8 *)malloc(strlen(AP_SSID)+1);
    829          	//WWPA = (UINT8 *)malloc(strlen(AP_WWPA)+1);
    830          	
    831          	SSID = (UINT8 *)gsn_malloc(strlen(AP_SSID)+1);
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0xF240 0x313F      MOVW     R1,#+831
   \   00000008   0x2007             MOVS     R0,#+7
   \   0000000A   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
   \   0000000E   0x4604             MOV      R4,R0
    832          	WWPA = (UINT8 *)gsn_malloc(strlen(AP_WWPA)+1);
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0xF44F 0x7150      MOV      R1,#+832
   \   00000016   0x200B             MOVS     R0,#+11
   \   00000018   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
    833          	
    834          	sprintf((char*)WWPA,"%s",AP_WWPA);
   \   0000001C   0x....             ADR.N    R6,??DataTable70  ;; 0x25, 0x73, 0x00, 0x00
   \   0000001E   0x4605             MOV      R5,R0
   \   00000020   0x.... 0x....      ADR.W    R2,`?<Constant "4rnekd9wkd">`
   \   00000024   0x4631             MOV      R1,R6
   \   00000026   0x.... 0x....      BL       sprintf
    835          	status = AppS2wCmd_Wwpa(WWPA);
    836          	if(status != 0)
   \   0000002A   0x4628             MOV      R0,R5
   \   0000002C   0x.... 0x....      BL       AppS2wCmd_Wwpa
   \   00000030   0xB150             CBZ.N    R0,??MQTT_AP_CONNECT_0
    837          	{
    838          		S2w_Printf("\r\n wrong WWPA");
   \   00000032   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n wrong WWPA">`
   \                     ??MQTT_AP_CONNECT_1:
   \   00000036   0x.... 0x....      BL       S2w_Printf
    839          		goto error;
    840          	}
    841              sprintf((char*)SSID,"%s",AP_SSID);
    842          	status = AppS2wCmd_Wassoc_test(SSID);
    843          	if(status != 0)
    844          	{
    845          		S2w_Printf("\r\n AP connect error");
    846          		goto error;
    847          	}
    848          	//free(SSID);
    849          	//free(WWPA);
    850          	gsn_free(SSID);
    851          	SSID = NULL;
    852          	gsn_free(WWPA);
    853          	WWPA = NULL;
    854          	S2w_Printf("\r\n AP connect success");
    855          	return status;
    856          error : 
    857          	//free(SSID);
    858          	//free(WWPA);
    859          	gsn_free(SSID);
   \   0000003A   0x.... 0x....      BL       ?Subroutine9
    860          	SSID = NULL;
    861          	gsn_free(WWPA);
   \                     ??CrossCallReturnLabel_26:
   \   0000003E   0x4628             MOV      R0,R5
   \   00000040   0x.... 0x....      BL       GsnDynMemMgmt_Free
    862          	WWPA = NULL;
    863          	return 1;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??MQTT_AP_CONNECT_0:
   \   00000048   0x.... 0x....      ADR.W    R2,`?<Constant "FTR-01">`
   \   0000004C   0x4631             MOV      R1,R6
   \   0000004E   0x4620             MOV      R0,R4
   \   00000050   0x.... 0x....      BL       sprintf
   \   00000054   0x4620             MOV      R0,R4
   \   00000056   0x.... 0x....      BL       AppS2wCmd_Wassoc_test
   \   0000005A   0xB110             CBZ.N    R0,??MQTT_AP_CONNECT_2
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n AP connect error">`
   \   00000060   0xE7E9             B.N      ??MQTT_AP_CONNECT_1
   \                     ??MQTT_AP_CONNECT_2:
   \   00000062   0x.... 0x....      BL       ?Subroutine9
   \                     ??CrossCallReturnLabel_25:
   \   00000066   0x4628             MOV      R0,R5
   \   00000068   0x.... 0x....      BL       GsnDynMemMgmt_Free
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n AP connect success">`
   \   00000070   0x.... 0x....      BL       S2w_Printf
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xBD70             POP      {R4-R6,PC}
    864          }
    865          

   \                                 In section .text, align 2, keep-with-next
    866          UINT8 MQTT_TCP_CONNECT(UINT8* CID)
    867          {	
   \                     MQTT_TCP_CONNECT:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x4601             MOV      R1,R0
    868          	UINT8 status = 0;
    869              
    870           	/*mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[0] = 54;
    871            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[1] = 178;
    872            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[2] = 154;
    873            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[3] = 197;
    874          	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.port = 8883;*/
    875          	
    876          	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[0] = 10;
   \   00000004   0x....             LDR.N    R0,??DataTable70_1
   \   00000006   0x6842             LDR      R2,[R0, #+4]
   \   00000008   0x230A             MOVS     R3,#+10
   \   0000000A   0x7113             STRB     R3,[R2, #+4]
    877            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[1] = 0;
   \   0000000C   0x2300             MOVS     R3,#+0
   \   0000000E   0x6842             LDR      R2,[R0, #+4]
   \   00000010   0x7153             STRB     R3,[R2, #+5]
    878            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[2] = 1;
   \   00000012   0x2301             MOVS     R3,#+1
   \   00000014   0x6842             LDR      R2,[R0, #+4]
   \   00000016   0x7193             STRB     R3,[R2, #+6]
    879            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.ipAddr[3] = 69;
   \   00000018   0x2345             MOVS     R3,#+69
   \   0000001A   0x6842             LDR      R2,[R0, #+4]
   \   0000001C   0x71D3             STRB     R3,[R2, #+7]
    880          	
    881            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.port = 1883;  
   \   0000001E   0xF240 0x735B      MOVW     R3,#+1883
   \   00000022   0x6842             LDR      R2,[R0, #+4]
   \   00000024   0x8053             STRH     R3,[R2, #+2]
    882            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.proto = S2W_NETDATA_PROTO_TCP;
   \   00000026   0x2301             MOVS     R3,#+1
   \   00000028   0x7053             STRB     R3,[R2, #+1]
    883            	mqtt_ctx->MQTT_CLIENT.mqtt_peerData.mode = S2W_NETDATA_MODE_CLIENT;
   \   0000002A   0x2300             MOVS     R3,#+0
   \   0000002C   0x6842             LDR      R2,[R0, #+4]
   \   0000002E   0x7013             STRB     R3,[R2, #+0]
    884            	status = AppS2wHal_NetTcpClient_test(&(mqtt_ctx->MQTT_CLIENT.mqtt_peerData), CID);
    885          	//status = AppS2wHal_NetTcpClient(&(mqtt_ctx->MQTT_CLIENT.mqtt_peerData), CID);
    886          	if (status != 0)
   \   00000030   0x6840             LDR      R0,[R0, #+4]
   \   00000032   0x.... 0x....      BL       AppS2wHal_NetTcpClient_test
   \   00000036   0xB128             CBZ.N    R0,??MQTT_TCP_CONNECT_0
    887              {
    888          	    S2w_Printf("\r\n TcpClient error");
   \   00000038   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TcpClient error">`
   \   0000003C   0x.... 0x....      BL       S2w_Printf
    889          		return 1;
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0xBD02             POP      {R1,PC}
    890              }
    891          	S2w_Printf("\r\n TcpClient success");
   \                     ??MQTT_TCP_CONNECT_0:
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n TcpClient success">`
   \   00000048   0x....             B.N      ?Subroutine2
    892          	return 0;
    893          }
    894          

   \                                 In section .text, align 2, keep-with-next
    895          UINT8 MQTT_SSL_CONNECT(UINT8 CID)
    896          {
   \                     MQTT_SSL_CONNECT:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
    897          	UINT8 status = 1;
    898          	S2w_Printf("\r\n CID : %d", CID);
   \   00000004   0x4621             MOV      R1,R4
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n CID : %d">`
   \   0000000A   0x.... 0x....      BL       S2w_Printf
    899          	//status = AppS2w_SslClientOpen(CID, NULL, NULL, NULL);
    900          	status = AppS2wCmd_SSLOpen_test(CID);
    901          	if(status != 0)
   \   0000000E   0x4620             MOV      R0,R4
   \   00000010   0x.... 0x....      BL       AppS2wCmd_SSLOpen_test
   \   00000014   0xB128             CBZ.N    R0,??MQTT_SSL_CONNECT_0
    902          	{
    903          		S2w_Printf("\r\n SSL open error");
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SSL open error">`
   \   0000001A   0x.... 0x....      BL       S2w_Printf
    904          		return 1;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0xBD10             POP      {R4,PC}
    905          	}
    906              S2w_Printf("\r\n SSL open success");
   \                     ??MQTT_SSL_CONNECT_0:
   \   00000022   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n SSL open success">`
   \   00000026                      REQUIRE ?Subroutine3
   \   00000026                      ;; // Fall through to label ?Subroutine3
    907          	return status;
    908          }
    909          

   \                                 In section .text, align 2, keep-with-next
    910          void TEST_START()
    911          {
   \                     TEST_START:
   \   00000000   0xB580             PUSH     {R7,LR}
    912            MQTT_START();
   \   00000002   0x.... 0x....      BL       MQTT_START
    913            /*UINT8* test;
    914            while(1)
    915            {
    916            test = (UINT8 *)gsn_malloc(strlen(AP_SSID)+1);
    917            memset(test,0,strlen(AP_SSID)+1);
    918            memcpy(test,AP_SSID,strlen(AP_SSID));
    919            
    920            S2w_Printf("\r\n test value : %s",test);
    921            S2w_Printf("\r\n test address1 : %d",test);
    922            S2w_Printf("\r\n test address2 : %d",&test);
    923            free(test);
    924            
    925            }*/
    926            GsnTaskSleep(1000);
   \   00000006   0xE8BD 0x4002      POP      {R1,LR}
   \   0000000A   0xF44F 0x707A      MOV      R0,#+1000
   \   0000000E   0x.... 0x....      B.W      GsnTaskSleep
    927          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70:
   \   00000000   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_1:
   \   00000000   0x........         DC32     MQTT_CONNECT_STATUS

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_2:
   \   00000000   0x........         DC32     temperature_sensor

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable70_3:
   \   00000000   0x000493E1         DC32     0x493e1

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000   0x25 0x73          DC8 "%s"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "001dc9151e55">`:
   \   00000000   0x30 0x30          DC8 "001dc9151e55"
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x35    
   \              0x31 0x65    
   \              0x35 0x35    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "y3FPxdiSAJjV2LkmHF-DO...">`:
   \   00000000   0x79 0x33          DC8 "y3FPxdiSAJjV2LkmHF-DO7u0PSk="
   \              0x46 0x50    
   \              0x78 0x64    
   \              0x69 0x53    
   \              0x41 0x4A    
   \              0x6A 0x56    
   \              0x32 0x4C    
   \              0x6B 0x6D    
   \              0x48 0x46    
   \              0x2D 0x44    
   \              0x4F 0x37    
   \              0x75 0x30    
   \              0x50 0x53    
   \              0x6B 0x3D    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "publish_list_mutex">`:
   \   00000000   0x70 0x75          DC8 "publish_list_mutex"
   \              0x62 0x6C    
   \              0x69 0x73    
   \              0x68 0x5F    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x5F 0x6D    
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "send_list_mutex">`:
   \   00000000   0x73 0x65          DC8 "send_list_mutex"
   \              0x6E 0x64    
   \              0x5F 0x6C    
   \              0x69 0x73    
   \              0x74 0x5F    
   \              0x6D 0x75    
   \              0x74 0x65    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "receive_list_mutex">`:
   \   00000000   0x72 0x65          DC8 "receive_list_mutex"
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x5F    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x5F 0x6D    
   \              0x75 0x74    
   \              0x65 0x78    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_RECEIVE_QUEUE">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_RECEIVE_QUEUE"
   \              0x54 0x54    
   \              0x5F 0x52    
   \              0x45 0x43    
   \              0x45 0x49    
   \              0x56 0x45    
   \              0x5F 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_PROCESS_THREAD">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_PROCESS_THREAD"
   \              0x54 0x54    
   \              0x5F 0x50    
   \              0x52 0x4F    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x5F 0x54    
   \              0x48 0x52    
   \              0x45 0x41    
   \              0x44 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_SENDER_THREAD">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_SENDER_THREAD"
   \              0x54 0x54    
   \              0x5F 0x53    
   \              0x45 0x4E    
   \              0x44 0x45    
   \              0x52 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_RECEIVER_THREAD">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_RECEIVER_THREAD"
   \              0x54 0x54    
   \              0x5F 0x52    
   \              0x45 0x43    
   \              0x45 0x49    
   \              0x56 0x45    
   \              0x52 0x5F    
   \              0x54 0x48    
   \              0x52 0x45    
   \              0x41 0x44    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "MQTT_MESSAGE_QUEUE_TH...">`:
   \   00000000   0x4D 0x51          DC8 "MQTT_MESSAGE_QUEUE_THREAD"
   \              0x54 0x54    
   \              0x5F 0x4D    
   \              0x45 0x53    
   \              0x53 0x41    
   \              0x47 0x45    
   \              0x5F 0x51    
   \              0x55 0x45    
   \              0x55 0x45    
   \              0x5F 0x54    
   \              0x48 0x52    
   \              0x45 0x41    
   \              0x44 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n ulStateCBCount : %...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 ulStateCBCount : %d , xState : %d"
   \              0x20 0x75    
   \              0x6C 0x53    
   \              0x74 0x61    
   \              0x74 0x65    
   \              0x43 0x42    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x20 0x2C    
   \              0x20 0x78    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x65 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000025   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n STATE CHANGED : %d...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 STATE CHANGED : %d -> %d\012"
   \              0x20 0x53    
   \              0x54 0x41    
   \              0x54 0x45    
   \              0x20 0x43    
   \              0x48 0x41    
   \              0x4E 0x47    
   \              0x45 0x44    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x2D 0x3E    
   \              0x20 0x25    
   \              0x64 0x0A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Ac...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT Connection Accepted"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \              0x43 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x41    
   \              0x63 0x63    
   \              0x65 0x70    
   \              0x74 0x65    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Re...">`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 20H
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 69H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 20H, 52H, 65H, 66H, 75H, 73H
   \              0x20 0x52    
   \              0x65 0x66    
   \              0x75 0x73    
   \   00000018   0x65 0x64          DC8 65H, 64H, 2CH, 20H, 72H, 65H, 61H, 73H
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 3DH, 20H, 75H, 6EH, 61H
   \              0x20 0x3D    
   \              0x20 0x75    
   \              0x6E 0x61    
   \   00000028   0x63 0x63          DC8 63H, 63H, 65H, 70H, 74H, 61H, 62H, 6CH
   \              0x65 0x70    
   \              0x74 0x61    
   \              0x62 0x6C    
   \   00000030   0x65 0x20          DC8 65H, 20H, 70H, 72H, 6FH, 74H, 6FH, 63H
   \              0x70 0x72    
   \              0x6F 0x74    
   \              0x6F 0x63    
   \   00000038   0x6F 0x6C          DC8 6FH, 6CH, 20H, 76H, 65H, 72H, 73H, 69H
   \              0x20 0x76    
   \              0x65 0x72    
   \              0x73 0x69    
   \   00000040   0x6F 0x6E          DC8 6FH, 6EH, 0
   \              0x00         
   \   00000043   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Re...">_1`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 20H
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 69H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 20H, 52H, 65H, 66H, 75H, 73H
   \              0x20 0x52    
   \              0x65 0x66    
   \              0x75 0x73    
   \   00000018   0x65 0x64          DC8 65H, 64H, 2CH, 20H, 72H, 65H, 61H, 73H
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 3DH, 20H, 69H, 64H, 65H
   \              0x20 0x3D    
   \              0x20 0x69    
   \              0x64 0x65    
   \   00000028   0x6E 0x74          DC8 6EH, 74H, 69H, 66H, 69H, 65H, 72H, 20H
   \              0x69 0x66    
   \              0x69 0x65    
   \              0x72 0x20    
   \   00000030   0x72 0x65          DC8 72H, 65H, 6AH, 65H, 63H, 74H, 65H, 64H
   \              0x6A 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \   00000038   0x00               DC8 0
   \   00000039   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Re...">_2`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 20H
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 69H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 20H, 52H, 65H, 66H, 75H, 73H
   \              0x20 0x52    
   \              0x65 0x66    
   \              0x75 0x73    
   \   00000018   0x65 0x64          DC8 65H, 64H, 2CH, 20H, 72H, 65H, 61H, 73H
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 3DH, 20H, 73H, 65H, 72H
   \              0x20 0x3D    
   \              0x20 0x73    
   \              0x65 0x72    
   \   00000028   0x76 0x65          DC8 76H, 65H, 72H, 20H, 75H, 6EH, 61H, 76H
   \              0x72 0x20    
   \              0x75 0x6E    
   \              0x61 0x76    
   \   00000030   0x61 0x69          DC8 61H, 69H, 6CH, 61H, 62H, 6CH, 65H, 0
   \              0x6C 0x61    
   \              0x62 0x6C    
   \              0x65 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Re...">_3`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 20H
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 69H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 20H, 52H, 65H, 66H, 75H, 73H
   \              0x20 0x52    
   \              0x65 0x66    
   \              0x75 0x73    
   \   00000018   0x65 0x64          DC8 65H, 64H, 2CH, 20H, 72H, 65H, 61H, 73H
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 3DH, 20H, 62H, 61H, 64H
   \              0x20 0x3D    
   \              0x20 0x62    
   \              0x61 0x64    
   \   00000028   0x20 0x75          DC8 20H, 75H, 73H, 65H, 72H, 20H, 6EH, 61H
   \              0x73 0x65    
   \              0x72 0x20    
   \              0x6E 0x61    
   \   00000030   0x6D 0x65          DC8 6DH, 65H, 20H, 6FH, 72H, 20H, 70H, 61H
   \              0x20 0x6F    
   \              0x72 0x20    
   \              0x70 0x61    
   \   00000038   0x73 0x73          DC8 73H, 73H, 77H, 6FH, 72H, 64H, 0
   \              0x77 0x6F    
   \              0x72 0x64    
   \              0x00         
   \   0000003F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT Connection Re...">_4`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 20H, 4DH, 51H, 54H, 54H, 20H
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \   00000008   0x43 0x6F          DC8 43H, 6FH, 6EH, 6EH, 65H, 63H, 74H, 69H
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x69    
   \   00000010   0x6F 0x6E          DC8 6FH, 6EH, 20H, 52H, 65H, 66H, 75H, 73H
   \              0x20 0x52    
   \              0x65 0x66    
   \              0x75 0x73    
   \   00000018   0x65 0x64          DC8 65H, 64H, 2CH, 20H, 72H, 65H, 61H, 73H
   \              0x2C 0x20    
   \              0x72 0x65    
   \              0x61 0x73    
   \   00000020   0x6F 0x6E          DC8 6FH, 6EH, 20H, 3DH, 20H, 6EH, 6FH, 74H
   \              0x20 0x3D    
   \              0x20 0x6E    
   \              0x6F 0x74    
   \   00000028   0x20 0x61          DC8 20H, 61H, 75H, 74H, 68H, 6FH, 72H, 69H
   \              0x75 0x74    
   \              0x68 0x6F    
   \              0x72 0x69    
   \   00000030   0x7A 0x65          DC8 7AH, 65H, 64H, 0
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH Success : %d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH Success : %d"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x20 0x53    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH Fail">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH Fail"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x20 0x46    
   \              0x61 0x69    
   \              0x6C 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_ACK : %d M...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_ACK : %d MSG ID delete"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x4D 0x53    
   \              0x47 0x20    
   \              0x49 0x44    
   \              0x20 0x64    
   \              0x65 0x6C    
   \              0x65 0x74    
   \              0x65 0x00    
   \   00000022   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_ACK : %d M...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_ACK : %d MSG ID is not found"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x20    
   \              0x4D 0x53    
   \              0x47 0x20    
   \              0x49 0x44    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x6E 0x6F    
   \              0x74 0x20    
   \              0x66 0x6F    
   \              0x75 0x6E    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CB_unin...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CB_uninitialized"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x42    
   \              0x5F 0x75    
   \              0x6E 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CB_init...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CB_initialized"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x42    
   \              0x5F 0x69    
   \              0x6E 0x69    
   \              0x74 0x69    
   \              0x61 0x6C    
   \              0x69 0x7A    
   \              0x65 0x64    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CB_conn...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CB_connected"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x42    
   \              0x5F 0x63    
   \              0x6F 0x6E    
   \              0x6E 0x65    
   \              0x63 0x74    
   \              0x65 0x64    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT DISCONNECT ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT DISCONNECT ERROR"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \              0x44 0x49    
   \              0x53 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n NET CLOSE ERROR">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 NET CLOSE ERROR"
   \              0x20 0x4E    
   \              0x45 0x54    
   \              0x20 0x43    
   \              0x4C 0x4F    
   \              0x53 0x45    
   \              0x20 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT_STATE_CB_disc...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT_STATE_CB_disconnected"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x5F    
   \              0x53 0x54    
   \              0x41 0x54    
   \              0x45 0x5F    
   \              0x43 0x42    
   \              0x5F 0x64    
   \              0x69 0x73    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x65    
   \              0x64 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSEND LIST empty">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012SEND LIST empty"
   \              0x53 0x45    
   \              0x4E 0x44    
   \              0x20 0x4C    
   \              0x49 0x53    
   \              0x54 0x20    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x79 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MSG ID %d is time ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MSG ID %d is time over"
   \              0x20 0x4D    
   \              0x53 0x47    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x25 0x64    
   \              0x20 0x69    
   \              0x73 0x20    
   \              0x74 0x69    
   \              0x6D 0x65    
   \              0x20 0x6F    
   \              0x76 0x65    
   \              0x72 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_MSG_GEN - ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_MSG_GEN -  get_pointer address 1= %d"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x5F 0x47    
   \              0x45 0x4E    
   \              0x20 0x2D    
   \              0x20 0x20    
   \              0x67 0x65    
   \              0x74 0x5F    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x31 0x3D    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n Insert publish lis...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 Insert publish list MSG ID : %d"
   \              0x20 0x49    
   \              0x6E 0x73    
   \              0x65 0x72    
   \              0x74 0x20    
   \              0x70 0x75    
   \              0x62 0x6C    
   \              0x69 0x73    
   \              0x68 0x20    
   \              0x6C 0x69    
   \              0x73 0x74    
   \              0x20 0x4D    
   \              0x53 0x47    
   \              0x20 0x49    
   \              0x44 0x20    
   \              0x3A 0x20    
   \              0x25 0x64    
   \              0x00         
   \   00000023   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n PUBLISH_MSG_GEN - ...">_1`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 PUBLISH_MSG_GEN -  get_pointer address 2= %d"
   \              0x20 0x50    
   \              0x55 0x42    
   \              0x4C 0x49    
   \              0x53 0x48    
   \              0x5F 0x4D    
   \              0x53 0x47    
   \              0x5F 0x47    
   \              0x45 0x4E    
   \              0x20 0x2D    
   \              0x20 0x20    
   \              0x67 0x65    
   \              0x74 0x5F    
   \              0x70 0x6F    
   \              0x69 0x6E    
   \              0x74 0x65    
   \              0x72 0x20    
   \              0x61 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x32 0x3D    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "v/a/g/001dc9151e55/st...">`:
   \   00000000   0x76 0x2F          DC8 "v/a/g/001dc9151e55/status"
   \              0x61 0x2F    
   \              0x67 0x2F    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x35    
   \              0x31 0x65    
   \              0x35 0x35    
   \              0x2F 0x73    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x00    
   \   0000001A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "on,90,temperature-001...">`:
   \   00000000   0x6F 0x6E          DC8 "on,90,temperature-001dc9151e55-1,on,90"
   \              0x2C 0x39    
   \              0x30 0x2C    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x75 0x72    
   \              0x65 0x2D    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x35    
   \              0x31 0x65    
   \              0x35 0x35    
   \              0x2D 0x31    
   \              0x2C 0x6F    
   \              0x6E 0x2C    
   \              0x39 0x30    
   \              0x00         
   \   00000027   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%llu,%.2f">`:
   \   00000000   0x25 0x6C          DC8 "%llu,%.2f"
   \              0x6C 0x75    
   \              0x2C 0x25    
   \              0x2E 0x32    
   \              0x66 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "v/a/g/001dc9151e55/s/...">`:
   \   00000000   0x76 0x2F          DC8 "v/a/g/001dc9151e55/s/temperature-001dc9151e55-1"
   \              0x61 0x2F    
   \              0x67 0x2F    
   \              0x30 0x30    
   \              0x31 0x64    
   \              0x63 0x39    
   \              0x31 0x35    
   \              0x31 0x65    
   \              0x35 0x35    
   \              0x2F 0x73    
   \              0x2F 0x74    
   \              0x65 0x6D    
   \              0x70 0x65    
   \              0x72 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x2D 0x30    
   \              0x30 0x31    
   \              0x64 0x63    
   \              0x39 0x31    
   \              0x35 0x31    
   \              0x65 0x35    
   \              0x35 0x2D    
   \              0x31 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n AP CONNECT Error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 AP CONNECT Error"
   \              0x20 0x41    
   \              0x50 0x20    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TCP CONNECT Error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TCP CONNECT Error"
   \              0x20 0x54    
   \              0x43 0x50    
   \              0x20 0x43    
   \              0x4F 0x4E    
   \              0x4E 0x45    
   \              0x43 0x54    
   \              0x20 0x45    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT CONNECT Error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT CONNECT Error"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x45 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n MQTT CONNECT success">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 MQTT CONNECT success"
   \              0x20 0x4D    
   \              0x51 0x54    
   \              0x54 0x20    
   \              0x43 0x4F    
   \              0x4E 0x4E    
   \              0x45 0x43    
   \              0x54 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FTR-01">`:
   \   00000000   0x46 0x54          DC8 "FTR-01"
   \              0x52 0x2D    
   \              0x30 0x31    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "4rnekd9wkd">`:
   \   00000000   0x34 0x72          DC8 "4rnekd9wkd"
   \              0x6E 0x65    
   \              0x6B 0x64    
   \              0x39 0x77    
   \              0x6B 0x64    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n wrong WWPA">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 wrong WWPA"
   \              0x20 0x77    
   \              0x72 0x6F    
   \              0x6E 0x67    
   \              0x20 0x57    
   \              0x57 0x50    
   \              0x41 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n AP connect error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 AP connect error"
   \              0x20 0x41    
   \              0x50 0x20    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n AP connect success">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 AP connect success"
   \              0x20 0x41    
   \              0x50 0x20    
   \              0x63 0x6F    
   \              0x6E 0x6E    
   \              0x65 0x63    
   \              0x74 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TcpClient error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TcpClient error"
   \              0x20 0x54    
   \              0x63 0x70    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x65    
   \              0x72 0x72    
   \              0x6F 0x72    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n TcpClient success">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 TcpClient success"
   \              0x20 0x54    
   \              0x63 0x70    
   \              0x43 0x6C    
   \              0x69 0x65    
   \              0x6E 0x74    
   \              0x20 0x73    
   \              0x75 0x63    
   \              0x63 0x65    
   \              0x73 0x73    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n CID : %d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 CID : %d"
   \              0x20 0x43    
   \              0x49 0x44    
   \              0x20 0x3A    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SSL open error">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SSL open error"
   \              0x20 0x53    
   \              0x53 0x4C    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x65 0x72    
   \              0x72 0x6F    
   \              0x72 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n SSL open success">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012 SSL open success"
   \              0x20 0x53    
   \              0x53 0x4C    
   \              0x20 0x6F    
   \              0x70 0x65    
   \              0x6E 0x20    
   \              0x73 0x75    
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      16   MQTT_AP_CONNECT
        16   -> AppS2wCmd_Wassoc_test
        16   -> AppS2wCmd_Wwpa
        16   -> GsnDynMemMgmt_Alloc
        16   -> GsnDynMemMgmt_Free
        16   -> S2w_Printf
        16   -> sprintf
       8   MQTT_CONNECT
         8   -> AppS2wHal_NetIsCidOpen
         8   -> AppS2wHal_RssiGet
         8   -> GsnTaskSleep
         8   -> MQTT_AP_CONNECT
         8   -> MQTT_TCP_CONNECT
         8   -> S2w_Printf
         8   -> mqtt_connect
      16   MQTT_LIST_COUNT
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
        16   -> list_count
      16   MQTT_LIST_DESTROY
        16   -> GsnDynMemMgmt_Free
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
      16   MQTT_LIST_GET
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
        16   -> list_get
      16   MQTT_LIST_INIT
        16   -> GsnDynMemMgmt_Alloc
        16   -> _tx_mutex_create
        16   -> makeNode
        16   -> memset
      16   MQTT_LIST_PUT
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
        16   -> list_put
      16   MQTT_LIST_SEARCH
        16   -> GsnDynMemMgmt_Free
        16   -> _tx_mutex_get
        16   -> _tx_mutex_put
      16   MQTT_MESSAGE_QUEUE_TASK
        16   -> GsnDynMemMgmt_Alloc
        16   -> GsnDynMemMgmt_Free
        16   -> MQTT_LIST_PUT
        16   -> MQTT_MSG_FUNC_CONNACK
        16   -> _tx_queue_receive
        16   -> memset
       8   MQTT_MSG_FUNC_CONNACK
         8   -> S2w_Printf
       0   MQTT_MSG_FUNC_PINGRESP
      16   MQTT_MSG_FUNC_PUBACK
        16   -> MQTT_LIST_SEARCH
        16   -> S2w_Printf
      32   MQTT_MSG_FUNC_PUBLISH
        32   -> GsnTod_Get
        32   -> MQTT_LIST_PUT
        32   -> S2w_Printf
        32   -> mqtt_publish_with_qos
      24   MQTT_PROCESS_TASK
        24   -- Indirect call
        24   -> GsnTaskSleep
        24   -> S2w_Printf
     152   MQTT_PUBLISH_MSG_GEN
       152   -> GetTemperature
       152   -> GsnDynMemMgmt_Alloc
       152   -> GsnDynMemMgmt_Free
       152   -> GsnTaskSleep
       152   -> GsnTod_Get
       152   -> MQTT_LIST_COUNT
       152   -> MQTT_LIST_GET
       152   -> MQTT_LIST_PUT
       152   -> S2w_Printf
       152   -> __aeabi_f2d
       152   -> memcpy
       152   -> memset
       152   -> sprintf
       152   -> strlen
      16   MQTT_RECEIVER_TASK
        16   -- Indirect call
        16   -> GsnDynMemMgmt_Free
        16   -> GsnTaskSleep
        16   -> MQTT_LIST_COUNT
        16   -> MQTT_LIST_GET
      16   MQTT_SENDER_TASK
        16   -- Indirect call
        16   -> GsnDynMemMgmt_Free
        16   -> GsnTaskSleep
        16   -> MQTT_LIST_COUNT
        16   -> MQTT_LIST_GET
       0   MQTT_SEND_FUNCTION
       8   MQTT_SSL_CONNECT
         8   -> AppS2wCmd_SSLOpen_test
         8   -> S2w_Printf
       8   MQTT_STAET_CALLBACK_DISCONNECT
         8   -> AppS2wHal_NetClose
         8   -> MQTT_LIST_DESTROY
         8   -> S2w_Printf
         8   -> mqtt_disconnect
      40   MQTT_START
        40   -> GsnDynMemMgmt_Alloc
        40   -> MQTT_LIST_INIT
        40   -> _tx_queue_create
        40   -> _tx_thread_create
        40   -> memset
        40   -> mqtt_init
        40   -> mqtt_init_auth
       8   MQTT_STATE_CALLBACK_CONNECT
         8   -> MQTT_PUBLISH_MSG_GEN
         8   -> S2w_Printf
       0   MQTT_STATE_CALLBACK_CONNECT_READY
       8   MQTT_STATE_CALLBACK_INITIAL
         8   -> MQTT_CONNECT
         8   -> S2w_Printf
       8   MQTT_STATE_CALLBACK_UNINITIAL
         8   -> S2w_Printf
         8   -> temp_sensor_search
       8   MQTT_TCP_CONNECT
         8   -> AppS2wHal_NetTcpClient_test
         8   -> S2w_Printf
       8   TEST_START
         0   -> GsnTaskSleep
         8   -> MQTT_START
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      12  ?<Constant "%llu,%.2f">
       4  ?<Constant "%s">
      16  ?<Constant "001dc9151e55">
      12  ?<Constant "4rnekd9wkd">
       8  ?<Constant "FTR-01">
      28  ?<Constant "MQTT_MESSAGE_QUEUE_TH...">
      20  ?<Constant "MQTT_PROCESS_THREAD">
      24  ?<Constant "MQTT_RECEIVER_THREAD">
      20  ?<Constant "MQTT_RECEIVE_QUEUE">
      20  ?<Constant "MQTT_SENDER_THREAD">
      20  ?<Constant "\r\n AP CONNECT Error">
      20  ?<Constant "\r\n AP connect error">
      24  ?<Constant "\r\n AP connect success">
      12  ?<Constant "\r\n CID : %d">
      36  ?<Constant "\r\n Insert publish lis...">
      24  ?<Constant "\r\n MQTT CONNECT Error">
      24  ?<Constant "\r\n MQTT CONNECT success">
      28  ?<Constant "\r\n MQTT Connection Ac...">
      68  ?<Constant "\r\n MQTT Connection Re...">
      60  ?<Constant "\r\n MQTT Connection Re...">_1
      56  ?<Constant "\r\n MQTT Connection Re...">_2
      64  ?<Constant "\r\n MQTT Connection Re...">_3
      52  ?<Constant "\r\n MQTT Connection Re...">_4
      28  ?<Constant "\r\n MQTT DISCONNECT ERROR">
      28  ?<Constant "\r\n MQTT_STATE_CB_conn...">
      32  ?<Constant "\r\n MQTT_STATE_CB_disc...">
      32  ?<Constant "\r\n MQTT_STATE_CB_init...">
      32  ?<Constant "\r\n MQTT_STATE_CB_unin...">
      28  ?<Constant "\r\n MSG ID %d is time ...">
      20  ?<Constant "\r\n NET CLOSE ERROR">
      16  ?<Constant "\r\n PUBLISH Fail">
      24  ?<Constant "\r\n PUBLISH Success : %d">
      36  ?<Constant "\r\n PUBLISH_ACK : %d M...">
      40  ?<Constant "\r\n PUBLISH_ACK : %d M...">_1
      48  ?<Constant "\r\n PUBLISH_MSG_GEN - ...">
      48  ?<Constant "\r\n PUBLISH_MSG_GEN - ...">_1
      20  ?<Constant "\r\n SSL open error">
      20  ?<Constant "\r\n SSL open success">
      32  ?<Constant "\r\n STATE CHANGED : %d...">
      24  ?<Constant "\r\n TCP CONNECT Error">
      20  ?<Constant "\r\n TcpClient error">
      24  ?<Constant "\r\n TcpClient success">
      40  ?<Constant "\r\n ulStateCBCount : %...">
      16  ?<Constant "\r\n wrong WWPA">
      20  ?<Constant "\r\nSEND LIST empty">
      40  ?<Constant "on,90,temperature-001...">
      20  ?<Constant "publish_list_mutex">
      20  ?<Constant "receive_list_mutex">
      16  ?<Constant "send_list_mutex">
      48  ?<Constant "v/a/g/001dc9151e55/s/...">
      28  ?<Constant "v/a/g/001dc9151e55/st...">
      32  ?<Constant "y3FPxdiSAJjV2LkmHF-DO...">
       4  ??DataTable70
       4  ??DataTable70_1
       4  ??DataTable70_2
       4  ??DataTable70_3
       8  ?Subroutine0
       8  ?Subroutine1
      12  ?Subroutine10
       8  ?Subroutine11
      16  ?Subroutine12
       8  ?Subroutine2
       8  ?Subroutine3
      24  ?Subroutine4
      14  ?Subroutine5
      22  ?Subroutine6
       8  ?Subroutine7
       6  ?Subroutine8
       6  ?Subroutine9
     120  MQTT_AP_CONNECT
      40  MQTT_CALLBACK
      96  MQTT_CONNECT
   21272  MQTT_CONNECT_STATUS
          mqtt_Xstate
          mqtt_ctx
          nSensors
          MQTT_RECEIVE_QUEUE
          MSG_receive
          MQTT_PROCESS_THREAD
          MQTT_SENDER_THREAD
          MQTT_RECEIVER_THREAD
          MQTT_MESSAGE_QUEUE_THREAD
          STACK_MQTT_SENDER_THREAD
          STACK_MQTT_RECEIVER_THREAD
          STACK_MQTT_PROCESS_THREAD
          STACK_MQTT_MESSAGE_QUEUE_THREAD
      24  MQTT_LIST_COUNT
      60  MQTT_LIST_DESTROY
      14  MQTT_LIST_GET
      48  MQTT_LIST_INIT
      16  MQTT_LIST_PUT
      82  MQTT_LIST_SEARCH
      86  MQTT_MESSAGE_QUEUE_TASK
     128  MQTT_MSG_CALLBACK
      76  MQTT_MSG_FUNC_CONNACK
       4  MQTT_MSG_FUNC_PINGRESP
      40  MQTT_MSG_FUNC_PUBACK
     108  MQTT_MSG_FUNC_PUBLISH
      74  MQTT_PROCESS_TASK
     462  MQTT_PUBLISH_MSG_GEN
      58  MQTT_RECEIVER_TASK
      58  MQTT_SENDER_TASK
       4  MQTT_SEND_FUNCTION
      38  MQTT_SSL_CONNECT
      82  MQTT_STAET_CALLBACK_DISCONNECT
     306  MQTT_START
      10  MQTT_STATE_CALLBACK_CONNECT
      20  MQTT_STATE_CALLBACK_CONNECT_READY
      34  MQTT_STATE_CALLBACK_INITIAL
      26  MQTT_STATE_CALLBACK_UNINITIAL
      74  MQTT_TCP_CONNECT
       4  StateCount
      18  TEST_START
      12  memcpy
      20  memset
      60  peerData
     192  temperature_sensor

 
 21 524 bytes in section .bss
      8 bytes in section .rodata
  3 882 bytes in section .text
 
  3 850 bytes of CODE  memory (+ 32 bytes shared)
      8 bytes of CONST memory
 21 524 bytes of DATA  memory

Errors: none
Warnings: 2
