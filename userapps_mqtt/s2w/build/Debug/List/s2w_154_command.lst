###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.6.4896/W32 for ARM      30/Oct/2015  09:58:05 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_154_command.c                  #
#    Command line =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\src\parser\s2w_154_command.c -D               #
#                    TX_ENABLE_IAR_LIBRARY_SUPPORT -D IAR -D FIXED_ROM_BUILD  #
#                    -D RUN_ALL_FROM_FLASH -D TM_USE_HTTPD -D S2W_DNS_CLIENT  #
#                    -D NX_INCLUDE_USER_DEFINE_FILE -D S2W_WEB_FS_AVAILABLE   #
#                    -D S2W_EXTFLASH_DRIVER_TEST -D S2W_PWM_SUPPORT -D        #
#                    S2W_MEM_ACCESS -D S2W_FORCE_UART_PORT -D                 #
#                    S2W_EXT_FLASH_FWUP_PUSH_METHOD -D                        #
#                    S2W_NCM_SUPPORT_ENABLE -D S2W_SECURITY_ENTERPRISE_PEAP_V #
#                    0_AVAILABLE -D S2W_EXT_FLASH_FWUP_PULL_METHOD -D         #
#                    S2W_SECURITY_ENTERPRISE_TLS_AVAILABLE -D                 #
#                    S2W_DNS_SERVER_ENABLE -D ADK_OTAFU -D S2W_GSLINK_RAW -D  #
#                    S2W_GSLINK_XML -D S2W_SECURITY_ENTERPRISE_PEAP_V1_AVAILA #
#                    BLE -D S2W_PING_TRACE -D S2W_RF_TEST -D                  #
#                    S2W_SSL_CLIENT_SUPPORT -D S2W_DEFAULT_UART_PARITY=0 -D   #
#                    S2W_DHCP_SERVER_ENABLE -D S2W_SECURITY_WPS_ENABLE -D     #
#                    ADK_PROV_CONFIG_LIMITED_AP -D S2W_WEB_SERVER -D          #
#                    ADK_PROV -D S2W_DEFAULT_UART_SW_FLOW=0 -D                #
#                    S2W_FILE_UPLOAD_API -D S2W_COAP_SUPPORT -D               #
#                    S2W_HTTPD_SSLCERT_UPLOAD -D                              #
#                    S2W_DEFAULT_UART_STOP_BITS=0 -D S2W_FACT_IMAGE_REQ -D    #
#                    S2W_DEFAULT_UART_BAUD=9600 -D S2W_ASYNC_MSG -D           #
#                    S2W_HTTPS_SUPPORT -D S2W_DEFAULT_UART_HW_FLOW=0 -D       #
#                    S2W_SECURITY_ENTERPRISE_FAST_GTC_AVAILABLE -D            #
#                    S2W_WEB_PROV -D S2W_UNASSOC_TXRX_SUPPORT -D S2W_SNTP -D  #
#                    S2W_UART_ENABLE -D S2W_GSLINK_XMLNESTED_PARSER -D        #
#                    S2W_GSLINK -D S2W_SECURITY_ENTERPRISE_TTLS_AVAILABLE -D  #
#                    S2W_ADC_SUPPORT -D S2W_HTTPC_SUPPORT -D                  #
#                    S2W_SECURITY_ENTERPRISE_FAST_MSCHAPV2_AVAILABLE -D       #
#                    S2W_SSL_SERVER_SUPPORT -D ADK_PROV_CONFIG_CLIENT -D      #
#                    S2W_DEFAULT_UART_BITS_PER_CHAR=3 -D S2W_MDNS_ENABLE -lC  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ -lA                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\ --diag_suppress             #
#                    Pa050,Pe231,Pe177 -o E:\Gainspan\gs2011mxx_SDK_s2w_tls_t #
#                    lslp_5.1.5_GA\userapps_mqtt\s2w\build\Debug\Obj\         #
#                    --debug --endian=little --cpu=Cortex-M3 -e --fpu=None    #
#                    --dlib_config "C:\Program Files (x86)\IAR                #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA #
#                    \userapps_mqtt\s2w\build\..\..\..\geps\inc\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\core\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\drivers\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\modules\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\rtos\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\netx\netx_bsd_layer\  #
#                    -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\user #
#                    apps_mqtt\s2w\build\..\..\..\geps\inc\main\ -I           #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\ -I                #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\fs\hcc\src\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\src\ -I      #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\geps\inc\security\hw_engine_if #
#                    \ -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\us #
#                    erapps_mqtt\s2w\build\..\..\..\geps\inc\security\wpa_if\ #
#                     -I E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\use #
#                    rapps_mqtt\s2w\build\..\..\..\userlib\ncm\inc\ -I        #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\userlib\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ctx\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\main\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\hal\ -I                          #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\parser\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\config\ -I                       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\ -I                              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\otafu\inc\ -I              #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\..\..\adk\provisioning\inc\ -I       #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt\ -I                         #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\one_wire\ -I                     #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\linked_list\ -I                  #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\inc\mqtt_main\ -I                    #
#                    E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\..\src\mqtt_main\ -Ohz                  #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\List\s2w_154_command.lst          #
#    Object file  =  E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapp #
#                    s_mqtt\s2w\build\Debug\Obj\s2w_154_command.o             #
#                                                                             #
#                                                                             #
###############################################################################

E:\Gainspan\gs2011mxx_SDK_s2w_tls_tlslp_5.1.5_GA\userapps_mqtt\s2w\src\parser\s2w_154_command.c
      1          /*****************************************************************
      2           *
      3          *               COPYRIGHT (c) 2013-2014 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: s2w_154_command.c,v $
     28          *
     29          * Description : s2w 802.15.4 command processor file
     30          ******************************************************************/
     31          
     32          
     33          /*****************************************************************
     34            * File Inclusions
     35            *****************************************************************/
     36          #include <stdio.h>
     37          #include <stdarg.h>
     38          #include <ctype.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp int isxdigit(int)
   \                     isxdigit:
   \   00000000   0xF1A0 0x0161      SUB      R1,R0,#+97
   \   00000004   0x2906             CMP      R1,#+6
   \   00000006   0xBF24             ITT      CS 
   \   00000008   0xF1A0 0x0141      SUBCS    R1,R0,#+65
   \   0000000C   0x2906             CMPCS    R1,#+6
   \   0000000E   0xD304             BCC.N    ??isxdigit_0
   \   00000010   0x3830             SUBS     R0,R0,#+48
   \   00000012   0x280A             CMP      R0,#+10
   \   00000014   0x4180             SBCS     R0,R0,R0
   \   00000016   0x0FC0             LSRS     R0,R0,#+31
   \   00000018   0x4770             BX       LR
   \                     ??isxdigit_0:
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x4770             BX       LR               ;; return
     39          #include <string.h>

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x.... 0x....      BL       __aeabi_memcpy
   \   00000008   0x4620             MOV      R0,R4
   \   0000000A   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x4610             MOV      R0,R2
   \   00000006   0x460A             MOV      R2,R1
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x4620             MOV      R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x4620             MOV      R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return
     40          #include <stdlib.h>
     41          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemAcquire_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0xB118             CBZ.N    R0,??GsnOsal_SemRelease_0
   \   00000008   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000000C   0xF500 0x7080      ADD      R0,R0,#+256
   \                     ??GsnOsal_SemRelease_0:
   \   00000010   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnWLRPAN_GetReq(GSN_WLRPAN_T *, GSN_WLRPAN_GET_REQ_T *)
   \                     GsnWLRPAN_GetReq:
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x2304             MOVS     R3,#+4
   \   00000004   0x2103             MOVS     R1,#+3
   \   00000006   0x.... 0x....      B.W      GsnWLRPAN_WifMgmtSend

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnWLRPAN_SetReq(GSN_WLRPAN_T *, GSN_WLRPAN_SET_REQ_T *)
   \                     GsnWLRPAN_SetReq:
   \   00000000   0x460A             MOV      R2,R1
   \   00000002   0x2350             MOVS     R3,#+80
   \   00000004   0x2109             MOVS     R1,#+9
   \   00000006   0x.... 0x....      B.W      GsnWLRPAN_WifMgmtSend

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnWLRPAN_GenericReq(GSN_WLRPAN_T *, UINT8, void *)
   \                     GsnWLRPAN_GenericReq:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x4604             MOV      R4,R0
   \   00000004   0x9100             STR      R1,[SP, #+0]
   \   00000006   0x4610             MOV      R0,R2
   \   00000008   0x4601             MOV      R1,R0
   \   0000000A   0x2210             MOVS     R2,#+16
   \   0000000C   0xA801             ADD      R0,SP,#+4
   \   0000000E   0x.... 0x....      BL       memcpy
   \   00000012   0x2310             MOVS     R3,#+16
   \   00000014   0xAA00             ADD      R2,SP,#+0
   \   00000016   0x210F             MOVS     R1,#+15
   \   00000018   0x4620             MOV      R0,R4
   \   0000001A   0x.... 0x....      BL       GsnWLRPAN_WifMgmtSend
   \   0000001E   0xB004             ADD      SP,SP,#+16
   \   00000020   0xBD10             POP      {R4,PC}          ;; return
     42          #include "hal/s2w.h"
     43          #include "hal/s2w_types.h"
     44          #include "hal/s2w_hal.h"
     45          #include "hal/s2w_net.h"
     46          #include "hal/s2w_timer.h"
     47          #include "parser/s2w_parse.h"
     48          #include "app_defines_builder.h"
     49          #include "hal/s2w_config.h"
     50          #include "parser/s2w_command.h"
     51          #include "main/app_main_ctx.h"
     52          #include "config/app_resource_config.h"
     53          #include "config/app_ncm_config.h"
     54          #include "app_events.h"
     55          #include "hal/s2w_config.h"
     56          
     57          #include "config/app_stat_config.h"
     58          #include "app_rtc_mem.h"
     59          
     60          /**
     61           ******************************************************************************
     62           * @file s2w_154_command.c
     63           * @brief S2W Application 802.15.4 command process routines.
     64           *      This file contains the s2w application specific implimentation for
     65           *      802.15.4 command processing.
     66          ******************************************************************************/
     67          
     68          
     69          /*****************************************************************************
     70            *  Public Variables
     71            *****************************************************************************/
     72          #define S2W_154_ASSOC_STAT_FREE       0
     73          #define S2W_154_ASSOC_STAT_NOT_ASSOC  1
     74          #define S2W_154_ASSOC_STAT_ASSOC      2
     75          #define S2W_154_ASSOC_STAT_DONT_ASSOC 3
     76          
     77          #define S2W_154_MAX_ASSOC_LIST   8
     78          #define GSN_WLP_MAX_SEC_ENTRIES 10
     79          

   \                                 In section .bss, align 1
     80          UINT8 semRelease = FALSE;      
   \                     semRelease:
   \   00000000                      DS8 1
     81                
     82          typedef struct S2W_154_ASSOC_LIST
     83          {
     84              UINT16 shortAddr;
     85              UINT8 extendedAddr[8];
     86              UINT8  status;
     87          }S2W_154_ASSOC_LIST_T;
     88          typedef struct S2W_154
     89          {
     90              UINT8 devType;
     91              UINT8 assocState;
     92              UINT8 operationStatus;
     93              GSN_OSAL_SEM_T blockingSem;
     94              S2W_154_ASSOC_LIST_T assocChild[ S2W_154_MAX_ASSOC_LIST ];
     95              
     96              GSN_DOT154IF_CTX_T dot154ifCtx;
     97              GSN_WLRPAN_T wlrpanCtx;
     98              
     99              UINT8 CoordAddrMode;
    100              UINT16 CoordPANId;    
    101              GSN_WLRPAN_ADDR_T  CoordAddress;
    102          }S2W_154_T;
    103          
    104          GSN_STATUS 
    105          AppS2w_WLRPANCb( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    106          GSN_STATUS
    107          AppS2w_WLRPANAssocCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    108          GSN_STATUS
    109          AppS2w_WLRPANAssocInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    110          GSN_STATUS
    111          AppS2w_WLRPANDisassocCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    112          GSN_STATUS
    113          AppS2w_WLRPANDisassocInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    114          GSN_STATUS
    115          AppS2w_WLRPANBeaconNotifyInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    116          GSN_STATUS
    117          AppS2w_WLRPANGTSInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    118          GSN_STATUS
    119          AppS2w_WLRPANGTSCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    120          GSN_STATUS
    121          AppS2w_WLRPANOrphanInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    122          GSN_STATUS
    123          AppS2w_WLRPANResetCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    124          GSN_STATUS
    125          AppS2w_WLRPANRxEnableCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    126          GSN_STATUS
    127          AppS2w_WLRPANScanCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    128          GSN_STATUS
    129          AppS2w_WLRPANCommStatusInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    130          GSN_STATUS
    131          AppS2w_WLRPANSetCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg);
    132          GSN_STATUS
    133          AppS2w_WLRPANStartCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    134          GSN_STATUS
    135          AppS2w_WLRPANSyncLossInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    136          GSN_STATUS
    137          AppS2w_WLRPANPollCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    138          GSN_STATUS 
    139          AppS2w_WLRPANGetCfg( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    140          
    141          
    142          GSN_STATUS 
    143          AppS2w_WLRPANDataCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    144          GSN_STATUS 
    145          AppS2w_WLRPANDataInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    146          GSN_STATUS 
    147          AppS2w_WLRPANDataPurgeCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    148          GSN_STATUS 
    149          AppS2w_WLRPANData6LoWPANCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    150          GSN_STATUS 
    151          AppS2w_WLRPANData6LoWPANInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    152          
    153          
    154          GSN_STATUS 
    155          AppS2w_WLRPANTmrCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    156          GSN_STATUS 
    157          AppS2w_WLRPANTmrInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    158          GSN_STATUS
    159          AppS2w_WLRPANGenCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    160          GSN_STATUS
    161          AppS2w_WLRPANGenInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg );
    162          
    163          
    164          /** Current state of the serial handler
    165           */

   \                                 In section .text, align 4, keep-with-next
    166          const GSN_WLRPAN_APP_CB_T wlrpanMgmtCbTbl[] = 
   \                     wlrpanMgmtCbTbl:
   \   00000000   0x........         DC32 AppS2w_WLRPANAssocCfm, AppS2w_WLRPANAssocInd
   \              0x........   
   \   00000008   0x........         DC32 AppS2w_WLRPANDisassocCfm, AppS2w_WLRPANDisassocInd
   \              0x........   
   \   00000010   0x........         DC32 AppS2w_WLRPANBeaconNotifyInd, AppS2w_WLRPANGetCfg
   \              0x........   
   \   00000018   0x........         DC32 AppS2w_WLRPANGTSCfm, AppS2w_WLRPANGTSInd, AppS2w_WLRPANOrphanInd
   \              0x........   
   \              0x........   
   \   00000024   0x........         DC32 AppS2w_WLRPANResetCfm, AppS2w_WLRPANRxEnableCfm
   \              0x........   
   \   0000002C   0x........         DC32 AppS2w_WLRPANScanCfm, AppS2w_WLRPANCommStatusInd
   \              0x........   
   \   00000034   0x........         DC32 AppS2w_WLRPANSetCfm, AppS2w_WLRPANStartCfm
   \              0x........   
   \   0000003C   0x........         DC32 AppS2w_WLRPANSyncLossInd, AppS2w_WLRPANPollCfm
   \              0x........   
   \   00000044   0x........         DC32 AppS2w_WLRPANTmrCfm, AppS2w_WLRPANTmrInd, AppS2w_WLRPANGenCfm
   \              0x........   
   \              0x........   
   \   00000050   0x........         DC32 AppS2w_WLRPANGenInd
    167          {
    168              AppS2w_WLRPANAssocCfm, //assocCfm;
    169              AppS2w_WLRPANAssocInd,//assocInd;
    170              AppS2w_WLRPANDisassocCfm,//disassocCfm;
    171              AppS2w_WLRPANDisassocInd,//disassocInd;
    172              AppS2w_WLRPANBeaconNotifyInd,//beaconNotifInd;
    173              AppS2w_WLRPANGetCfg,//getCfm;
    174              AppS2w_WLRPANGTSCfm,//gtsCfm;
    175              AppS2w_WLRPANGTSInd,//gtsInd; 
    176              AppS2w_WLRPANOrphanInd,//orphanInd;
    177              AppS2w_WLRPANResetCfm,//resetCfm;
    178              AppS2w_WLRPANRxEnableCfm,//rxEnableCfm;
    179              AppS2w_WLRPANScanCfm,//scanCfm;
    180              AppS2w_WLRPANCommStatusInd,//commStatusInd;
    181              AppS2w_WLRPANSetCfm,//setCfm;
    182              AppS2w_WLRPANStartCfm,//startCfm; 
    183              AppS2w_WLRPANSyncLossInd,//syncLossInd;
    184              AppS2w_WLRPANPollCfm,//pollCfm   
    185              AppS2w_WLRPANTmrCfm,//tmrCfm
    186              AppS2w_WLRPANTmrInd,//tmrInd
    187              AppS2w_WLRPANGenCfm,//generic cfm
    188              AppS2w_WLRPANGenInd//generic ind
    189          };

   \                                 In section .text, align 4, keep-with-next
    190          const GSN_WLRPAN_APP_CB_T wlrpanDataCbTbl[] = 
   \                     wlrpanDataCbTbl:
   \   00000000   0x........         DC32 AppS2w_WLRPANDataCfm, AppS2w_WLRPANDataInd
   \              0x........   
   \   00000008   0x........         DC32 AppS2w_WLRPANDataPurgeCfm, AppS2w_WLRPANData6LoWPANCfm
   \              0x........   
   \   00000010   0x........         DC32 AppS2w_WLRPANData6LoWPANInd
    191          {
    192              AppS2w_WLRPANDataCfm,//dataCfm;
    193              AppS2w_WLRPANDataInd,//dataInd;
    194              AppS2w_WLRPANDataPurgeCfm,//dataPurgeCfm;
    195              AppS2w_WLRPANData6LoWPANCfm,//data6LoWPANCfm;
    196              AppS2w_WLRPANData6LoWPANInd//data6LoWPANInd
    197          };
    198          

   \                                 In section .bss, align 8
    199          S2W_154_T s2w154Ctx;
   \                     s2w154Ctx:
   \   00000000                      DS8 192
    200          
    201          /**
    202          ********************************************************************************
    203          *  Private functions
    204          *******************************************************************************/
    205          #if 0
    206          GSN_STATUS AppS2w_WLRPANInit( GSN_HI_CTX_T *pHiCtx, UINT8 ifNum )
    207          {
    208              GSN_WIF_INIT_PARAM_T wifInitParam;
    209              GSN_SYS_CTL_IF_START_REQ_T ifcStartReq;
    210              /**< Memset all the field including the child list */
    211              memset( &s2w154Ctx, 0, sizeof( s2w154Ctx ));
    212              
    213              /**< Initialize the semaphore */
    214              GsnOsal_SemCreate( &s2w154Ctx.blockingSem, 0 ); 
    215              
    216              /*Initialise wif module*/
    217              wifInitParam.macIfNum = ifNum;
    218              wifInitParam.macIfType = GSN_WIF_WLAN_NW_TYPE_15_4;
    219              wifInitParam.pHiCtx = pHiCtx;
    220              
    221              /*Register for interface init*/
    222              GsnWif_Init( &s2w154Ctx.wifCtx, &wifInitParam);
    223              
    224              /**< Initialize the WIF callabcks */
    225              GsnWLRPAN_Init( &s2w154Ctx.wlrpanCtx, &s2w154Ctx.wifCtx, 
    226                  ( GSN_WLRPAN_MGMT_CB_TABLE_T * )wlrpanMgmtCb, &s2w154Ctx, 
    227                  ( GSN_WLRPAN_DATA_CB_TABLE_T * )wlrpanDataCb, &s2w154Ctx );
    228          
    229              
    230          
    231              ifcStartReq.macIfNum = ifNum;
    232              ifcStartReq.macIfType = GSN_WIF_WLAN_NW_TYPE_15_4;
    233              ifcStartReq.dTxRdyQFrameTO = 0;
    234          VOID App_CreateLock(VOID);
    235              App_CreateLock();
    236          VOID App_InterfaceStartCb(VOID* ctx, GSN_STATUS status);    
    237              GsnSysCtl_IfStartReq(&appCtx.sysCtlCtx, &ifcStartReq, App_InterfaceStartCb, NULL);
    238          VOID App_WaitOnLock(VOID);
    239              App_WaitOnLock();
    240                  
    241              return GSN_SUCCESS;
    242          }
    243          #else
    244          

   \                                 In section .text, align 2, keep-with-next
    245          VOID 
    246          App_WLRPANinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    247          {
   \                     App_WLRPANinit:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    248          	GSN_DOT154_INIT_PARAM_T dot54IfInitParam;
    249          	/* Initialise 15.4 interface*/
    250          	dot54IfInitParam.macIfNum = pIfInfo->macIfNum;
   \   00000004   0x6809             LDR      R1,[R1, #+0]
    251          	dot54IfInitParam.pHiCtx = &pAppCtx->hiCtx;
    252          	GsnDot154if_Init(&s2w154Ctx.dot154ifCtx, &dot54IfInitParam);
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable124
   \   0000000A   0xF88D 0x1008      STRB     R1,[SP, #+8]
   \   0000000E   0x30B8             ADDS     R0,R0,#+184
   \   00000010   0x9003             STR      R0,[SP, #+12]
   \   00000012   0xF104 0x0580      ADD      R5,R4,#+128
   \   00000016   0xA902             ADD      R1,SP,#+8
   \   00000018   0x4628             MOV      R0,R5
   \   0000001A   0x.... 0x....      BL       GsnDot154if_Init
    253          	/* Initialise WLRPAN Driver*/
    254          	GsnWLRPAN_Init(&s2w154Ctx.wlrpanCtx,&s2w154Ctx.dot154ifCtx,
    255          		( GSN_WLRPAN_MGMT_CB_TABLE_T * )&wlrpanMgmtCbTbl[0], NULL, 
    256          		( GSN_WLRPAN_DATA_CB_TABLE_T * )&wlrpanDataCbTbl[0], NULL);
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x9001             STR      R0,[SP, #+4]
   \   00000022   0x2300             MOVS     R3,#+0
   \   00000024   0x.... 0x....      ADR.W    R0,wlrpanDataCbTbl
   \   00000028   0x.... 0x....      ADR.W    R2,wlrpanMgmtCbTbl
   \   0000002C   0x9000             STR      R0,[SP, #+0]
   \   0000002E   0x4629             MOV      R1,R5
   \   00000030   0xF104 0x0098      ADD      R0,R4,#+152
   \   00000034   0x.... 0x....      BL       GsnWLRPAN_Init
    257          }
   \   00000038   0xB005             ADD      SP,SP,#+20
   \   0000003A   0xBD30             POP      {R4,R5,PC}       ;; return
    258          #endif
    259          

   \                                 In section .text, align 2, keep-with-next
    260          UINT8
    261          AppS2wCmd_154Channel(UINT8 *ptr)
    262          {
   \                     AppS2wCmd_154Channel:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    263              /**< PCH    Operating channel   0x0C - 0x17 Get 
    264              Hex 8 bit value, witihout 0x
    265              */
    266              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xBF02             ITTT     EQ 
   \   00000010   0x.... 0x....      LDREQ.W  R4,??DataTable124
   \   00000014   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000016   0x2802             CMPEQ    R0,#+2
    267              {
    268                  if( S2W_154_ASSOC_STAT_ASSOC != s2w154Ctx.assocState )
   \   00000018   0xD100             BNE.N    ??AppS2wCmd_154Channel_0
    269                  {
    270                      return S2W_EINVAL;
    271                  }
    272                  else
    273                  {
    274                      GSN_WLRPAN_GET_REQ_T getReq;
    275                      GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
   \   0000001A   0x....             B.N      ??Subroutine0_0
    276                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    277                      return s2w154Ctx.operationStatus;
    278                  }
    279              }
    280              return S2W_EINVAL;
   \                     ??AppS2wCmd_154Channel_0:
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    281          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine0:
   \   00000000   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \                     ??Subroutine0_0:
   \   00000004   0xA900             ADD      R1,SP,#+0
   \   00000006   0xF104 0x0098      ADD      R0,R4,#+152
   \   0000000A   0x.... 0x....      BL       GsnWLRPAN_GetReq
   \   0000000E   0x.... 0x....      BL       ?Subroutine22
   \                     ??CrossCallReturnLabel_80:
   \   00000012   0x78A0             LDRB     R0,[R4, #+2]
   \   00000014   0xBD16             POP      {R1,R2,R4,PC}

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine22:
   \   00000000   0xF04F 0x31FF      MOV      R1,#-1
   \   00000004   0x1D20             ADDS     R0,R4,#+4
   \   00000006   0x.... 0x....      B.W      GsnOsal_SemAcquire
    282          

   \                                 In section .text, align 2, keep-with-next
    283          UINT8
    284          AppS2wCmd_154PanId(UINT8 *ptr)
    285          {
   \                     AppS2wCmd_154PanId:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    286              /**< PAN ID 0 - 0xFFFF  Get 
    287              Hex 16 bit value, witihout 0x
    288              */
    289              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xBF02             ITTT     EQ 
   \   00000010   0x.... 0x....      LDREQ.W  R4,??DataTable124
   \   00000014   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000016   0x2802             CMPEQ    R0,#+2
    290              {
    291                  if( S2W_154_ASSOC_STAT_ASSOC != s2w154Ctx.assocState )
   \   00000018   0xD101             BNE.N    ??AppS2wCmd_154PanId_0
    292                  {
    293                      return S2W_EINVAL;
    294                  }
    295                  else
    296                  {
    297                      GSN_WLRPAN_GET_REQ_T getReq;
    298                      getReq.Attribute = macPANId;
   \   0000001A   0x200B             MOVS     R0,#+11
   \   0000001C   0x....             B.N      ?Subroutine0
    299                      
    300                      GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    301                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    302                      return s2w154Ctx.operationStatus;
    303                  }
    304              }
    305              return S2W_EINVAL;
   \                     ??AppS2wCmd_154PanId_0:
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    306          }
    307          

   \                                 In section .text, align 2, keep-with-next
    308          UINT8
    309          AppS2wCmd_154ShortAddr(UINT8 *ptr)
    310          {
   \                     AppS2wCmd_154ShortAddr:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    311              /**< My short address.  0 - 0xFFFF  Get 
    312              Hex 16 bit value, witihout 0x
    313              */
    314              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xBF02             ITTT     EQ 
   \   00000010   0x.... 0x....      LDREQ.W  R4,??DataTable124
   \   00000014   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000016   0x2802             CMPEQ    R0,#+2
    315              {
    316                  if( S2W_154_ASSOC_STAT_ASSOC != s2w154Ctx.assocState )
   \   00000018   0xD101             BNE.N    ??AppS2wCmd_154ShortAddr_0
    317                  {
    318                      return S2W_EINVAL;
    319                  }
    320                  else
    321                  {
    322                      GSN_WLRPAN_GET_REQ_T getReq;
    323                      getReq.Attribute = macShortAddress;
   \   0000001A   0x200D             MOVS     R0,#+13
   \   0000001C   0x....             B.N      ?Subroutine0
    324                      GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    325                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    326                      return s2w154Ctx.operationStatus;
    327                  }
    328              }
    329              return S2W_EINVAL;
   \                     ??AppS2wCmd_154ShortAddr_0:
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    330          }
    331          

   \                                 In section .text, align 2, keep-with-next
    332          PUBLIC UINT8
    333          AppS2wParse_Mac64(UINT8 *s, UINT8 *mac_addr)
    334          {
   \                     AppS2wParse_Mac64:
   \   00000000   0xE92D 0x41FF      PUSH     {R0-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    335              UINT32 i, val;
    336              UINT8 dummy[8]={0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00}; // 0 mac
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2200             MOVS     R2,#+0
   \   0000000E   0xC006             STM      R0!,{R1,R2}
    337              UINT8 dummy1[8]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF}; // broadcast mac
   \   00000010   0x.... 0x....      ADR.W    R1,`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000014   0xC90C             LDM      R1!,{R2,R3}
   \   00000016   0xA800             ADD      R0,SP,#+0
    338              memset(mac_addr, 0, 8);
   \   00000018   0x2100             MOVS     R1,#+0
   \   0000001A   0xC00C             STM      R0!,{R2,R3}
   \   0000001C   0x2208             MOVS     R2,#+8
   \   0000001E   0x4628             MOV      R0,R5
   \   00000020   0x.... 0x....      BL       memset
    339          
    340              for (i = 0; *s != '\0' && i < 9; i++, s++)
   \   00000024   0x2600             MOVS     R6,#+0
   \                     ??AppS2wParse_Mac64_0:
   \   00000026   0x7820             LDRB     R0,[R4, #+0]
   \   00000028   0xB300             CBZ.N    R0,??AppS2wParse_Mac64_1
   \   0000002A   0x2E09             CMP      R6,#+9
   \   0000002C   0xD21E             BCS.N    ??AppS2wParse_Mac64_1
    341              {
    342                  int digits = 0;
   \   0000002E   0x2700             MOVS     R7,#+0
    343          
    344                  val = 0;
   \   00000030   0x46B8             MOV      R8,R7
   \   00000032   0xE007             B.N      ??AppS2wParse_Mac64_2
    345                  while (*s != '-' && *s != '\0' && *s != ' ')
    346                  {
    347                      if(!isxdigit(*s))
   \                     ??AppS2wParse_Mac64_3:
   \   00000034   0x.... 0x....      BL       isxdigit
   \   00000038   0xB328             CBZ.N    R0,??AppS2wParse_Mac64_4
    348                      {
    349                          return S2W_EINVAL;
    350                      }
    351          
    352                      val = val * 16 + AppS2wParse_ToHex(*s);
   \   0000003A   0x.... 0x....      BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_89:
   \   0000003E   0xEB00 0x1808      ADD      R8,R0,R8, LSL #+4
    353                      s++;
    354                      digits++;
   \   00000042   0x1C7F             ADDS     R7,R7,#+1
    355                  }
   \                     ??AppS2wParse_Mac64_2:
   \   00000044   0x7821             LDRB     R1,[R4, #+0]
   \   00000046   0x4608             MOV      R0,R1
   \   00000048   0x282D             CMP      R0,#+45
   \   0000004A   0xBF18             IT       NE 
   \   0000004C   0x2900             CMPNE    R1,#+0
   \   0000004E   0xBF18             IT       NE 
   \   00000050   0x2820             CMPNE    R0,#+32
   \   00000052   0xD1EF             BNE.N    ??AppS2wParse_Mac64_3
    356          
    357                  if((!digits) || (digits > 2))
   \   00000054   0xB1BF             CBZ.N    R7,??AppS2wParse_Mac64_4
   \   00000056   0x2F03             CMP      R7,#+3
   \   00000058   0xDA15             BGE.N    ??AppS2wParse_Mac64_4
    358                  {
    359                      return S2W_EINVAL;
    360                  }
    361          
    362                  if(i<8)
   \   0000005A   0x2E08             CMP      R6,#+8
   \   0000005C   0xBF38             IT       CC 
   \   0000005E   0xF806 0x8005      STRBCC   R8,[R6, R5]
    363                  {
    364                      mac_addr[i] = val;
    365                  }
    366                  if(*s == '\0')
   \   00000062   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000066   0x1C76             ADDS     R6,R6,#+1
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD1DC             BNE.N    ??AppS2wParse_Mac64_0
    367                  {
    368                      i++;
    369                      break;
    370                  }
    371              }
    372              if((memcmp(mac_addr,dummy,8)== 0) || (memcmp(mac_addr,dummy1,8) == 0))
   \                     ??AppS2wParse_Mac64_1:
   \   0000006C   0x2208             MOVS     R2,#+8
   \   0000006E   0xA902             ADD      R1,SP,#+8
   \   00000070   0x.... 0x....      BL       ??Subroutine15_0
   \                     ??CrossCallReturnLabel_34:
   \   00000074   0xB138             CBZ.N    R0,??AppS2wParse_Mac64_4
   \   00000076   0x2208             MOVS     R2,#+8
   \   00000078   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_36:
   \   0000007C   0xB118             CBZ.N    R0,??AppS2wParse_Mac64_4
    373              {
    374                  return S2W_EINVAL;
    375              }
    376              return i == 8 ? S2W_SUCCESS : S2W_EINVAL;
   \   0000007E   0x2E08             CMP      R6,#+8
   \   00000080   0xBF08             IT       EQ 
   \   00000082   0x2000             MOVEQ    R0,#+0
   \   00000084   0xD000             BEQ.N    ??AppS2wParse_Mac64_5
   \                     ??AppS2wParse_Mac64_4:
   \   00000086   0x2002             MOVS     R0,#+2
   \                     ??AppS2wParse_Mac64_5:
   \   00000088   0xB004             ADD      SP,SP,#+16
   \   0000008A   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    377          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine24:
   \   00000000   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000004   0x.... 0x....      B.W      AppS2wParse_ToHex

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine15:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \                     ??Subroutine15_0:
   \   00000002   0x4628             MOV      R0,R5
   \   00000004   0x.... 0x....      B.W      memcmp

   \                                 In section .text, align 2, keep-with-next
    378          PUBLIC UINT8
    379          AppS2wParse_LookupData( UINT8 *s, UINT8 *data, UINT8 length)
    380          {
   \                     AppS2wParse_LookupData:
   \   00000000   0xE92D 0x43F0      PUSH     {R4-R9,LR}
   \   00000004   0xB087             SUB      SP,SP,#+28
   \   00000006   0x4604             MOV      R4,R0
   \   00000008   0x460D             MOV      R5,R1
   \   0000000A   0x4616             MOV      R6,R2
    381              UINT32 i, val;
    382              UINT8 dummy[9]={0x00,0x00,0x00,0x00,0x00,0x00, 0x00, 0x00, 0x00}; // 0 mac
   \   0000000C   0xA803             ADD      R0,SP,#+12
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x2200             MOVS     R2,#+0
   \   00000012   0x460B             MOV      R3,R1
   \   00000014   0xC00E             STM      R0!,{R1-R3}
    383              UINT8 dummy1[9]={0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, 0xFF}; // broadcast mac
   \   00000016   0x.... 0x....      ADR.W    R1,`?<Constant {255, 255, 255, 255, 255, 255, 255,_1`
   \   0000001A   0xC98C             LDM      R1!,{R2,R3,R7}
   \   0000001C   0xA800             ADD      R0,SP,#+0
    384              memset(data, 0, 9);
   \   0000001E   0x2100             MOVS     R1,#+0
   \   00000020   0xC08C             STM      R0!,{R2,R3,R7}
   \   00000022   0x2209             MOVS     R2,#+9
   \   00000024   0x4628             MOV      R0,R5
   \   00000026   0x.... 0x....      BL       memset
    385          
    386              for (i = 0; *s != '\0' && i < length; i++, s++)
   \   0000002A   0x2700             MOVS     R7,#+0
   \                     ??AppS2wParse_LookupData_0:
   \   0000002C   0x7820             LDRB     R0,[R4, #+0]
   \   0000002E   0xB318             CBZ.N    R0,??AppS2wParse_LookupData_1
   \   00000030   0x42B7             CMP      R7,R6
   \   00000032   0xD221             BCS.N    ??AppS2wParse_LookupData_1
    387              {
    388                  int digits = 0;
   \   00000034   0xF04F 0x0800      MOV      R8,#+0
    389          
    390                  val = 0;
   \   00000038   0x46C1             MOV      R9,R8
   \   0000003A   0xE008             B.N      ??AppS2wParse_LookupData_2
    391                  while (*s != '-' && *s != '\0' && *s != ' ')
    392                  {
    393                      if(!isxdigit(*s))
   \                     ??AppS2wParse_LookupData_3:
   \   0000003C   0x.... 0x....      BL       isxdigit
   \   00000040   0xB338             CBZ.N    R0,??AppS2wParse_LookupData_4
    394                      {
    395                          return S2W_EINVAL;
    396                      }
    397          
    398                      val = val * 16 + AppS2wParse_ToHex(*s);
   \   00000042   0x.... 0x....      BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_88:
   \   00000046   0xEB00 0x1909      ADD      R9,R0,R9, LSL #+4
    399                      s++;
    400                      digits++;
   \   0000004A   0xF108 0x0801      ADD      R8,R8,#+1
    401                  }
   \                     ??AppS2wParse_LookupData_2:
   \   0000004E   0x7821             LDRB     R1,[R4, #+0]
   \   00000050   0x4608             MOV      R0,R1
   \   00000052   0x282D             CMP      R0,#+45
   \   00000054   0xBF18             IT       NE 
   \   00000056   0x2900             CMPNE    R1,#+0
   \   00000058   0xBF18             IT       NE 
   \   0000005A   0x2820             CMPNE    R0,#+32
   \   0000005C   0xD1EE             BNE.N    ??AppS2wParse_LookupData_3
    402          
    403                  if((!digits) || (digits > 2))
   \   0000005E   0xF1B8 0x0F00      CMP      R8,#+0
   \   00000062   0xD016             BEQ.N    ??AppS2wParse_LookupData_4
   \   00000064   0xF1B8 0x0F03      CMP      R8,#+3
   \   00000068   0xDA13             BGE.N    ??AppS2wParse_LookupData_4
    404                  {
    405                      return S2W_EINVAL;
    406                  }
    407          
    408                  if(i<length)
    409                  {
    410                      data[i] = val;
   \   0000006A   0xF807 0x9005      STRB     R9,[R7, R5]
    411                  }
    412                  if(*s == '\0')
   \   0000006E   0x1C7F             ADDS     R7,R7,#+1
   \   00000070   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD1D9             BNE.N    ??AppS2wParse_LookupData_0
    413                  {
    414                      i++;
    415                      break;
    416                  }
    417              }
    418              if((memcmp(data,dummy,length)== 0) || 
    419          		(memcmp(data,dummy1,length) == 0))
   \                     ??AppS2wParse_LookupData_1:
   \   00000078   0x4632             MOV      R2,R6
   \   0000007A   0xA903             ADD      R1,SP,#+12
   \   0000007C   0x.... 0x....      BL       ??Subroutine15_0
   \                     ??CrossCallReturnLabel_33:
   \   00000080   0xB138             CBZ.N    R0,??AppS2wParse_LookupData_4
   \   00000082   0x4632             MOV      R2,R6
   \   00000084   0x.... 0x....      BL       ?Subroutine15
   \                     ??CrossCallReturnLabel_35:
   \   00000088   0xB118             CBZ.N    R0,??AppS2wParse_LookupData_4
    420              {
    421                  return S2W_EINVAL;
    422              }
    423              return i == length ? S2W_SUCCESS : S2W_EINVAL;
   \   0000008A   0x42B7             CMP      R7,R6
   \   0000008C   0xBF08             IT       EQ 
   \   0000008E   0x2000             MOVEQ    R0,#+0
   \   00000090   0xD000             BEQ.N    ??AppS2wParse_LookupData_5
   \                     ??AppS2wParse_LookupData_4:
   \   00000092   0x2002             MOVS     R0,#+2
   \                     ??AppS2wParse_LookupData_5:
   \   00000094   0xB007             ADD      SP,SP,#+28
   \   00000096   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    424          }

   \                                 In section .text, align 2, keep-with-next
    425          PUBLIC UINT8
    426          AppS2wParse_Key( UINT8 *s, UINT8 *data )
    427          {
   \                     AppS2wParse_Key:
   \   00000000   0xE92D 0x41F0      PUSH     {R4-R8,LR}
   \   00000004   0x4604             MOV      R4,R0
   \   00000006   0x460D             MOV      R5,R1
    428              UINT32 i, val;
    429           
    430              memset( data, 0, 16 );
   \   00000008   0x2210             MOVS     R2,#+16
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x4628             MOV      R0,R5
   \   0000000E   0x.... 0x....      BL       memset
    431          
    432              for (i = 0; *s != '\0' && i < 16; i++, s++)
   \   00000012   0x2600             MOVS     R6,#+0
   \                     ??AppS2wParse_Key_0:
   \   00000014   0x7820             LDRB     R0,[R4, #+0]
   \   00000016   0xB1F0             CBZ.N    R0,??AppS2wParse_Key_1
   \   00000018   0x2E10             CMP      R6,#+16
   \   0000001A   0xD21C             BCS.N    ??AppS2wParse_Key_1
    433              {
    434                  int digits = 0;
   \   0000001C   0x2700             MOVS     R7,#+0
    435          
    436                  val = 0;
   \   0000001E   0x46B8             MOV      R8,R7
   \   00000020   0xE007             B.N      ??AppS2wParse_Key_2
    437                  while (*s != '-' && *s != '\0' && *s != ' ')
    438                  {
    439                      if(!isxdigit(*s))
   \                     ??AppS2wParse_Key_3:
   \   00000022   0x.... 0x....      BL       isxdigit
   \   00000026   0xB1D0             CBZ.N    R0,??AppS2wParse_Key_4
    440                      {
    441                          return S2W_EINVAL;
    442                      }
    443          
    444                      val = val * 16 + AppS2wParse_ToHex(*s);
   \   00000028   0x.... 0x....      BL       ?Subroutine24
   \                     ??CrossCallReturnLabel_87:
   \   0000002C   0xEB00 0x1808      ADD      R8,R0,R8, LSL #+4
    445                      s++;
    446                      digits++;
   \   00000030   0x1C7F             ADDS     R7,R7,#+1
    447                  }
   \                     ??AppS2wParse_Key_2:
   \   00000032   0x7821             LDRB     R1,[R4, #+0]
   \   00000034   0x4608             MOV      R0,R1
   \   00000036   0x282D             CMP      R0,#+45
   \   00000038   0xBF18             IT       NE 
   \   0000003A   0x2900             CMPNE    R1,#+0
   \   0000003C   0xBF18             IT       NE 
   \   0000003E   0x2820             CMPNE    R0,#+32
   \   00000040   0xD1EF             BNE.N    ??AppS2wParse_Key_3
    448          
    449                  if((!digits) || (digits > 2))
   \   00000042   0xB167             CBZ.N    R7,??AppS2wParse_Key_4
   \   00000044   0x2F03             CMP      R7,#+3
   \   00000046   0xDA0A             BGE.N    ??AppS2wParse_Key_4
    450                  {
    451                      return S2W_EINVAL;
    452                  }
    453          
    454                  if(i<16)
    455                  {
    456                      data[i] = val;
   \   00000048   0xF806 0x8005      STRB     R8,[R6, R5]
    457                  }
    458                  if(*s == '\0')
   \   0000004C   0x1C76             ADDS     R6,R6,#+1
   \   0000004E   0xF814 0x0B01      LDRB     R0,[R4], #+1
   \   00000052   0x2800             CMP      R0,#+0
   \   00000054   0xD1DE             BNE.N    ??AppS2wParse_Key_0
    459                  {
    460                      i++;
    461                      break;
    462                  }
    463              }
    464          
    465              return ((i == 16) ? S2W_SUCCESS : S2W_EINVAL);
   \                     ??AppS2wParse_Key_1:
   \   00000056   0x2E10             CMP      R6,#+16
   \   00000058   0xBF08             IT       EQ 
   \   0000005A   0x2000             MOVEQ    R0,#+0
   \   0000005C   0xD000             BEQ.N    ??AppS2wParse_Key_5
   \                     ??AppS2wParse_Key_4:
   \   0000005E   0x2002             MOVS     R0,#+2
   \                     ??AppS2wParse_Key_5:
   \   00000060   0xE8BD 0x81F0      POP      {R4-R8,PC}       ;; return
    466          }
    467          

   \                                 In section .text, align 2, keep-with-next
    468          PUBLIC UINT8
    469          AppS2wParse_SecI( UINT8 *ptr, GSN_WLRPAN_SEC_I_T *pSecI )
    470          {
   \                     AppS2wParse_SecI:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB081             SUB      SP,SP,#+4
   \   00000004   0x460C             MOV      R4,R1
    471          	UINT32 param;
    472          	UINT8 status;
    473          	UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ?Subroutine29
    474          	if(!p)      return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_156:
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD030             BEQ.N    ??AppS2wParse_SecI_0
    475          
    476          	status = AppS2wParse_Hex(p, &param);
    477          	if( ( S2W_SUCCESS != status )||( param > 7 ) ) 
   \   0000000E   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_129:
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD12C             BNE.N    ??AppS2wParse_SecI_0
   \   00000016   0x9800             LDR      R0,[SP, #+0]
   \   00000018   0x2808             CMP      R0,#+8
   \   0000001A   0xD229             BCS.N    ??AppS2wParse_SecI_0
    478          		return S2W_EINVAL;
    479          	pSecI->SecILevel = ( UINT8 )param;
   \   0000001C   0x7020             STRB     R0,[R4, #+0]
    480          	if( pSecI->SecILevel == 0 )
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0xB340             CBZ.N    R0,??AppS2wParse_SecI_1
    481          	{
    482          		return S2W_SUCCESS;
    483          	}
    484          	
    485          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000022   0x.... 0x....      BL       ?Subroutine29
    486          	if(!p)      return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_155:
   \   00000026   0xB318             CBZ.N    R0,??AppS2wParse_SecI_0
    487          	status = AppS2wParse_Hex(p, &param);
    488          	if( ( S2W_SUCCESS != status )||( param > 3 ) ) 
   \   00000028   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_128:
   \   0000002C   0xBB00             CBNZ.N   R0,??AppS2wParse_SecI_0
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x2804             CMP      R0,#+4
   \   00000032   0xD21D             BCS.N    ??AppS2wParse_SecI_0
    489          		return S2W_EINVAL;
    490          	pSecI->KeyIdMode = ( UINT8 )param;
   \   00000034   0x7060             STRB     R0,[R4, #+1]
    491          
    492          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000036   0x.... 0x....      BL       ?Subroutine29
    493          	if(!p)		return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_154:
   \   0000003A   0xB1C8             CBZ.N    R0,??AppS2wParse_SecI_0
    494          	status = AppS2wParse_Hex(p, &param);
    495          	if( ( S2W_SUCCESS != status )||( param == 0 ) ) 
   \   0000003C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_127:
   \   00000040   0xB9B0             CBNZ.N   R0,??AppS2wParse_SecI_0
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0xB1A0             CBZ.N    R0,??AppS2wParse_SecI_0
    496          		return S2W_EINVAL;
    497          	pSecI->KeyIndex = ( UINT8 )param;
   \   00000046   0x70A0             STRB     R0,[R4, #+2]
    498          
    499          	param = 0;
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0x9000             STR      R0,[SP, #+0]
    500          	
    501          	if( pSecI->KeyIdMode == 2 )
   \   0000004C   0x7860             LDRB     R0,[R4, #+1]
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xBF08             IT       EQ 
   \   00000052   0x2004             MOVEQ    R0,#+4
    502          	{
    503          		param = 4;
   \   00000054   0xD002             BEQ.N    ??AppS2wParse_SecI_2
    504          	}
    505          	else if( pSecI->KeyIdMode == 3 )
   \   00000056   0x2803             CMP      R0,#+3
   \   00000058   0xD10C             BNE.N    ??AppS2wParse_SecI_1
    506          	{
    507          		param = 8;
   \   0000005A   0x2008             MOVS     R0,#+8
   \                     ??AppS2wParse_SecI_2:
   \   0000005C   0x9000             STR      R0,[SP, #+0]
    508          	}
    509          
    510          	if( param )
    511          	{
    512          		p = AppS2wParse_NextParamGet(&ptr);
   \   0000005E   0x.... 0x....      BL       ?Subroutine29
    513          		if(!p)      return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_153:
   \   00000062   0xB128             CBZ.N    R0,??AppS2wParse_SecI_0
    514          
    515          		if( S2W_SUCCESS != 	
    516          				AppS2wParse_LookupData( p, pSecI->KeySource, param )) 
   \   00000064   0x9A00             LDR      R2,[SP, #+0]
   \   00000066   0xB2D2             UXTB     R2,R2
   \   00000068   0x1CE1             ADDS     R1,R4,#+3
   \   0000006A   0x.... 0x....      BL       AppS2wParse_LookupData
   \   0000006E   0xB108             CBZ.N    R0,??AppS2wParse_SecI_1
    517          			return S2W_EINVAL;
   \                     ??AppS2wParse_SecI_0:
   \   00000070   0x2002             MOVS     R0,#+2
   \   00000072   0xBD16             POP      {R1,R2,R4,PC}
    518          	}
    519          	return S2W_SUCCESS;
   \                     ??AppS2wParse_SecI_1:
   \   00000074   0x2000             MOVS     R0,#+0
   \   00000076   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    520          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine29:
   \   00000000   0xA801             ADD      R0,SP,#+4
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine25:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Hex

   \                                 In section .text, align 2, keep-with-next
    521          UINT8
    522          AppS2wCmd_154ExtendedAddr(UINT8 *ptr)
    523          {
   \                     AppS2wCmd_154ExtendedAddr:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB095             SUB      SP,SP,#+84
    524              /**< My long address        Get/Set 
    525              aa-bb-cc-dd-ee-ff-gg-hh
    526              */    
    527              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x.... 0x....      LDR.W    R4,??DataTable124
   \   0000000A   0xF104 0x0598      ADD      R5,R4,#+152
   \   0000000E   0x293F             CMP      R1,#+63
   \   00000010   0xBF04             ITT      EQ 
   \   00000012   0x7841             LDRBEQ   R1,[R0, #+1]
   \   00000014   0x2900             CMPEQ    R1,#+0
   \   00000016   0xD103             BNE.N    ??AppS2wCmd_154ExtendedAddr_0
    528              {
    529                  GSN_WLRPAN_GET_REQ_T getReq;
    530                  getReq.Attribute = macCoordExtendedAddress; //should be my extended address
   \   00000018   0x2002             MOVS     R0,#+2
   \   0000001A   0x.... 0x....      BL       ?Subroutine14
    531                  GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    532                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_32:
   \   0000001E   0xE010             B.N      ??AppS2wCmd_154ExtendedAddr_1
    533                  return s2w154Ctx.operationStatus;
    534              }
    535              else
    536              {
    537                  GSN_WLRPAN_SET_REQ_T setReq;
    538                  if( S2W_SUCCESS != AppS2wParse_Mac64( ptr, setReq.Value )) 
   \                     ??AppS2wCmd_154ExtendedAddr_0:
   \   00000020   0xF10D 0x0109      ADD      R1,SP,#+9
   \   00000024   0x.... 0x....      BL       AppS2wParse_Mac64
   \   00000028   0xB108             CBZ.N    R0,??AppS2wCmd_154ExtendedAddr_2
    539                      return S2W_EINVAL;
   \   0000002A   0x2002             MOVS     R0,#+2
   \   0000002C   0xE00C             B.N      ??AppS2wCmd_154ExtendedAddr_3
    540                  setReq.Attribute = macCoordExtendedAddress;
   \                     ??AppS2wCmd_154ExtendedAddr_2:
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    541                  setReq.AttributeIdx = 0;
    542                  
    543                  GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq ); 
   \   00000034   0xA901             ADD      R1,SP,#+4
   \   00000036   0x2000             MOVS     R0,#+0
   \   00000038   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   \   0000003C   0x4628             MOV      R0,R5
   \   0000003E   0x.... 0x....      BL       GsnWLRPAN_SetReq
    544                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??AppS2wCmd_154ExtendedAddr_1:
   \   00000042   0x.... 0x....      BL       ?Subroutine22
    545                  return s2w154Ctx.operationStatus;  
   \                     ??CrossCallReturnLabel_79:
   \   00000046   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154ExtendedAddr_3:
   \   00000048   0xB015             ADD      SP,SP,#+84
   \   0000004A   0xBD30             POP      {R4,R5,PC}       ;; return
    546          
    547              }    
    548          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine14:
   \   00000000   0xF8AD 0x0000      STRH     R0,[SP, #+0]
   \   00000004   0xA900             ADD      R1,SP,#+0
   \                     ??Subroutine14_0:
   \   00000006   0x4628             MOV      R0,R5
   \   00000008   0x.... 0x....      B.W      GsnWLRPAN_GetReq
    549          

   \                                 In section .text, align 2, keep-with-next
    550          UINT8
    551          AppS2wCmd_154RetryCount(UINT8 *ptr)
    552          {
   \                     AppS2wCmd_154RetryCount:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB096             SUB      SP,SP,#+88
    553              /**< MAC retry  0-6 Get/Set 
    554              Hex 8 bit value, witihout 0x
    555              */
    556              UINT32 param, maxparam = 7 ;
    557              
    558              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_41:
   \   00000008   0xBF02             ITTT     EQ 
   \   0000000A   0x9816             LDREQ    R0,[SP, #+88]
   \   0000000C   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000E   0x2800             CMPEQ    R0,#+0
   \   00000010   0xD106             BNE.N    ??AppS2wCmd_154RetryCount_0
    559              {
    560                  GSN_WLRPAN_GET_REQ_T getReq;
    561                  getReq.Attribute = macMaxFrameRetries;
   \   00000012   0x2008             MOVS     R0,#+8
   \   00000014   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    562                  GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x.... 0x....      BL       ??Subroutine14_0
    563                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_30:
   \   0000001E   0xE00C             B.N      ??CrossCallReturnLabel_17
    564                  return s2w154Ctx.operationStatus;
    565              }
    566              else
    567              {
    568                  UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_154RetryCount_0:
   \   00000020   0xA816             ADD      R0,SP,#+88
   \   00000022   0x.... 0x....      BL       AppS2wParse_NextParamGet
    569                  if( p != NULL )
   \   00000026   0xB160             CBZ.N    R0,??AppS2wCmd_154RetryCount_1
    570                  {
    571                      GSN_WLRPAN_SET_REQ_T setReq;
    572                      if( S2W_SUCCESS != AppS2wParse_Hex(p, &param)) return S2W_EINVAL;
   \   00000028   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_126:
   \   0000002C   0xB948             CBNZ.N   R0,??AppS2wCmd_154RetryCount_1
    573                      
    574                      if(param >maxparam)
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x2808             CMP      R0,#+8
   \   00000032   0xD206             BCS.N    ??AppS2wCmd_154RetryCount_1
    575                          return S2W_EINVAL;
    576                      setReq.Attribute = macMaxFrameRetries;
   \   00000034   0x2008             MOVS     R0,#+8
   \   00000036   0x.... 0x....      BL       ?Subroutine9
    577                      setReq.AttributeIdx = 0;
    578                      setReq.Value[ 0 ] = ( UINT8 )param;
    579                      GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq ); 
    580                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_17:
   \   0000003A   0x.... 0x....      BL       ?Subroutine22
    581                      return s2w154Ctx.operationStatus;        
   \                     ??CrossCallReturnLabel_78:
   \   0000003E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000040   0xE000             B.N      ??AppS2wCmd_154RetryCount_2
    582                  }
    583              }
    584              return S2W_EINVAL;
   \                     ??AppS2wCmd_154RetryCount_1:
   \   00000042   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154RetryCount_2:
   \   00000044   0xB017             ADD      SP,SP,#+92
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return
    585          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine17:
   \   00000000   0x7800             LDRB     R0,[R0, #+0]
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable124
   \   00000006   0xF104 0x0598      ADD      R5,R4,#+152
   \   0000000A   0x283F             CMP      R0,#+63
   \   0000000C   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine9:
   \   00000000   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   \   00000004   0xA902             ADD      R1,SP,#+8
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xF8AD 0x000A      STRH     R0,[SP, #+10]
   \   0000000C   0x9800             LDR      R0,[SP, #+0]
   \   0000000E   0xF88D 0x000D      STRB     R0,[SP, #+13]
   \   00000012   0x4628             MOV      R0,R5
   \   00000014   0x.... 0x....      B.W      GsnWLRPAN_SetReq
    586          

   \                                 In section .text, align 2, keep-with-next
    587          UINT8
    588          AppS2wCmd_154JoinPermit(UINT8 *ptr)
    589          {
   \                     AppS2wCmd_154JoinPermit:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB096             SUB      SP,SP,#+88
    590              /**< Join permit, Allow node to join. If a node gives a join request to a 
    591              coordinator where PAN command for a joining node is not given and PJP is 
    592              set to TRUE, the MAC will allow the node to join with extended address. 
    593              0-1 
    594              Get/Set
    595              */
    596              UINT32 param;
    597              
    598              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x.... 0x....      BL       ?Subroutine17
   \                     ??CrossCallReturnLabel_42:
   \   00000008   0xBF02             ITTT     EQ 
   \   0000000A   0x9816             LDREQ    R0,[SP, #+88]
   \   0000000C   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000E   0x2800             CMPEQ    R0,#+0
   \   00000010   0xD106             BNE.N    ??AppS2wCmd_154JoinPermit_0
    599              {
    600                  GSN_WLRPAN_GET_REQ_T getReq;
    601                  getReq.Attribute = macAssociationPermit;
   \   00000012   0x2003             MOVS     R0,#+3
   \   00000014   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    602                  GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
   \   00000018   0xA901             ADD      R1,SP,#+4
   \   0000001A   0x.... 0x....      BL       ??Subroutine14_0
    603                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_29:
   \   0000001E   0xE00C             B.N      ??CrossCallReturnLabel_16
    604                  return s2w154Ctx.operationStatus;
    605              }
    606              else
    607              {
    608                  UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_154JoinPermit_0:
   \   00000020   0xA816             ADD      R0,SP,#+88
   \   00000022   0x.... 0x....      BL       AppS2wParse_NextParamGet
    609                  if( p != NULL )
   \   00000026   0xB160             CBZ.N    R0,??AppS2wCmd_154JoinPermit_1
    610                  {
    611                      GSN_WLRPAN_SET_REQ_T setReq;
    612                      if( S2W_SUCCESS != AppS2wParse_Hex(p, &param) ) return S2W_EINVAL;
   \   00000028   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_125:
   \   0000002C   0xB948             CBNZ.N   R0,??AppS2wCmd_154JoinPermit_1
    613                      if( param > 1 ) return S2W_EINVAL;
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0x2802             CMP      R0,#+2
   \   00000032   0xD206             BCS.N    ??AppS2wCmd_154JoinPermit_1
    614                      setReq.Attribute = macAssociationPermit;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x.... 0x....      BL       ?Subroutine9
    615                      setReq.AttributeIdx = 0;
    616                      setReq.Value[ 0 ] = ( UINT8 )param;
    617                      GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq ); 
    618                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_16:
   \   0000003A   0x.... 0x....      BL       ?Subroutine22
    619                      return s2w154Ctx.operationStatus;        
   \                     ??CrossCallReturnLabel_77:
   \   0000003E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000040   0xE000             B.N      ??AppS2wCmd_154JoinPermit_2
    620                  }
    621              }
    622              return S2W_EINVAL;
   \                     ??AppS2wCmd_154JoinPermit_1:
   \   00000042   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154JoinPermit_2:
   \   00000044   0xB017             ADD      SP,SP,#+92
   \   00000046   0xBD30             POP      {R4,R5,PC}       ;; return
    623          }
    624          

   \                                 In section .text, align 2, keep-with-next
    625          UINT8
    626          AppS2wCmd_154SupreFrmCfg(UINT8 *ptr)
    627          {
   \                     AppS2wCmd_154SupreFrmCfg:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
    628              /**< Super frame configuration. Gives value of BO and SO    Get
    629              */
    630                  
    631              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000002   0x7801             LDRB     R1,[R0, #+0]
   \   00000004   0x293F             CMP      R1,#+63
   \   00000006   0xBF04             ITT      EQ 
   \   00000008   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000A   0x2800             CMPEQ    R0,#+0
   \   0000000C   0xD112             BNE.N    ??AppS2wCmd_154SupreFrmCfg_0
    632              {
    633                  GSN_WLRPAN_GET_REQ_T getReq;
    634                  getReq.Attribute = macSuperframeOrder;
   \   0000000E   0x2018             MOVS     R0,#+24
   \   00000010   0xF8AD 0x0000      STRH     R0,[SP, #+0]
    635                  GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
   \   00000014   0xA900             ADD      R1,SP,#+0
   \   00000016   0x.... 0x....      LDR.W    R4,??DataTable124
   \   0000001A   0xF104 0x0598      ADD      R5,R4,#+152
   \   0000001E   0x.... 0x....      BL       ??Subroutine14_0
    636                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_28:
   \   00000022   0x.... 0x....      BL       ?Subroutine22
    637                  getReq.Attribute = macBeaconOrder;
   \                     ??CrossCallReturnLabel_76:
   \   00000026   0x2012             MOVS     R0,#+18
   \   00000028   0x.... 0x....      BL       ?Subroutine14
    638                  GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    639                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_31:
   \   0000002C   0x.... 0x....      BL       ?Subroutine22
    640                  return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_75:
   \   00000030   0x78A0             LDRB     R0,[R4, #+2]
   \   00000032   0xBD32             POP      {R1,R4,R5,PC}
    641              }
    642          #if 0
    643              else
    644              {
    645                  GSN_WLRPAN_SET_REQ_T setReq;
    646                  UINT8 *p = AppS2wParse_NextParamGet(&ptr);
    647                  if( p != NULL && ( p[0] != '\0') )
    648                  {           
    649                      if( S2W_SUCCESS != AppS2wParse_Hex(p, &param1))return S2W_EINVAL;
    650                      s = TRUE;
    651                      p = AppS2wParse_NextParamGet(&ptr);
    652                      if( p != NULL && ( p[0] != '\0'))
    653                      {
    654                          if( S2W_SUCCESS != AppS2wParse_Hex(p, &param2) ) 
    655                              return S2W_EINVAL;
    656                          b = TRUE;
    657                      }
    658                  }
    659                  else 
    660                  {
    661                      p = AppS2wParse_NextParamGet(&ptr);
    662                      if( p != NULL && ( p[0] != '\0'))
    663                      {
    664                          if( S2W_SUCCESS != AppS2wParse_Hex(p, &param2) ) 
    665                              return S2W_EINVAL;
    666                          b = TRUE;
    667                      }
    668                      else
    669                          return S2W_EINVAL;
    670                  }
    671                  if( s )
    672                  {
    673                      setReq.Attribute = macSuperframeOrder;
    674                      setReq.AttributeIdx = 0;
    675                      setReq.Value[ 0 ] = ( UINT8 )param1;
    676                      GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq );
    677                  }
    678                  if( b )
    679                  {
    680                      setReq.Attribute = macBeaconOrder;
    681                      setReq.AttributeIdx = 0;
    682                      setReq.Value[ 0 ] = ( UINT8 )param2;
    683                      GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq );
    684                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );             
    685                  }
    686                  return s2w154Ctx.operationStatus; 
    687              }
    688          #endif
    689              return S2W_EINVAL;    
   \                     ??AppS2wCmd_154SupreFrmCfg_0:
   \   00000034   0x2002             MOVS     R0,#+2
   \   00000036   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    690          }
    691          

   \                                 In section .text, align 2, keep-with-next
    692          UINT8
    693          AppS2wCmd_154CoordExtndedAddr(UINT8 *ptr)
    694          {
   \                     AppS2wCmd_154CoordExtndedAddr:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    695              /**< Coordinator Extended address       Get
    696              */
    697              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xBF02             ITTT     EQ 
   \   00000010   0x.... 0x....      LDREQ.W  R4,??DataTable124
   \   00000014   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000016   0x2802             CMPEQ    R0,#+2
    698              {
    699                  if( S2W_154_ASSOC_STAT_ASSOC != s2w154Ctx.assocState )
   \   00000018   0xD100             BNE.N    ??AppS2wCmd_154CoordExtndedAddr_0
    700                  {
    701                      return S2W_EINVAL;
    702                  }
    703                  else
    704                  {
    705                      GSN_WLRPAN_GET_REQ_T getReq;
    706                      getReq.Attribute = macCoordExtendedAddress; 
   \   0000001A   0x....             B.N      ?Subroutine0
    707                      GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    708                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    709                      return s2w154Ctx.operationStatus;
    710                  }
    711              }
    712          #if 0
    713              else
    714              {
    715                  GSN_WLRPAN_SET_REQ_T setReq;
    716                  if( S2W_SUCCESS != AppS2wParse_Mac64( ptr, setReq.Value )) 
    717                      return S2W_EINVAL;
    718                  setReq.Attribute = macCoordExtendedAddress;
    719                  setReq.AttributeIdx = 0;
    720                  
    721                  GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq ); 
    722                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    723                  return s2w154Ctx.operationStatus;  
    724          
    725              }
    726          #endif
    727                  return S2W_EINVAL;  
   \                     ??AppS2wCmd_154CoordExtndedAddr_0:
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    728          }
    729          

   \                                 In section .text, align 2, keep-with-next
    730          UINT8
    731          AppS2wCmd_154CoordShortAddr(UINT8 *ptr)
    732          {
   \                     AppS2wCmd_154CoordShortAddr:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    733              /**< Coordinator Short address      Get
    734              */
    735              if(ptr[0] == '?' && ( ptr[1] == '\0'))
   \   00000004   0x7801             LDRB     R1,[R0, #+0]
   \   00000006   0x293F             CMP      R1,#+63
   \   00000008   0xBF04             ITT      EQ 
   \   0000000A   0x7840             LDRBEQ   R0,[R0, #+1]
   \   0000000C   0x2800             CMPEQ    R0,#+0
   \   0000000E   0xBF02             ITTT     EQ 
   \   00000010   0x.... 0x....      LDREQ.W  R4,??DataTable124
   \   00000014   0x7860             LDRBEQ   R0,[R4, #+1]
   \   00000016   0x2802             CMPEQ    R0,#+2
    736              {
    737                  if( S2W_154_ASSOC_STAT_ASSOC != s2w154Ctx.assocState )
   \   00000018   0xD101             BNE.N    ??AppS2wCmd_154CoordShortAddr_0
    738                  {
    739                      return S2W_EINVAL;
    740                  }
    741                  else
    742                  {
    743                      GSN_WLRPAN_GET_REQ_T getReq;
    744                      getReq.Attribute = macCoordShortAddress;
   \   0000001A   0x2004             MOVS     R0,#+4
   \   0000001C   0x....             B.N      ?Subroutine0
    745                      GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq ); 
    746                      GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
    747                      return s2w154Ctx.operationStatus;
    748                  }
    749              }
    750              return S2W_EINVAL;
   \                     ??AppS2wCmd_154CoordShortAddr_0:
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xBD16             POP      {R1,R2,R4,PC}    ;; return
    751          }
    752          

   \                                 In section .text, align 2, keep-with-next
    753          UINT8
    754          AppS2wCmd_154ScanNetwork(UINT8 *ptr)
    755          {
   \                     AppS2wCmd_154ScanNetwork:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
    756              /**< Scan Network: User can scan all channel at once, by giving 0x0. 
    757              Scan duration is calculated using as per the specification. Scan type has 
    758              value
    759              0x00 = ED scan (optional for RFD).
    760              0x01 = active scan (optional for RFD).
    761              0x02 = passive scan.
    762              0x03 = orphan scan.
    763              
    764              Scan channel    0x0, 0x0C - 0x17    
    765              scan type       0-3 
    766              scan duration   0-0xE   
    767              
    768              Set
    769              
    770              */
    771              GSN_WLRPAN_SCAN_REQ_T scanReq = {0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2118             MOVS     R1,#+24
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    772              UINT32 param;
    773              UINT8 status;
    774              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0xA807             ADD      R0,SP,#+28
   \   0000000E   0x.... 0x....      BL       AppS2wParse_NextParamGet
    775              if(!p)
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD03D             BEQ.N    ??AppS2wCmd_154ScanNetwork_0
    776              {
    777                  return S2W_EINVAL;
    778              }
    779              status = AppS2wParse_Hex(p, &param);
    780              if( status != S2W_SUCCESS || param > 0x3 )
   \   00000016   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_124:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD139             BNE.N    ??AppS2wCmd_154ScanNetwork_0
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x2804             CMP      R0,#+4
   \   00000022   0xD236             BCS.N    ??AppS2wCmd_154ScanNetwork_0
    781              {
    782                  return S2W_EINVAL;
    783              }    
    784              scanReq.ScanType = param;
   \   00000024   0xF88D 0x0004      STRB     R0,[SP, #+4]
    785              
    786              p = AppS2wParse_NextParamGet(&ptr);
   \   00000028   0xA807             ADD      R0,SP,#+28
   \   0000002A   0x.... 0x....      BL       AppS2wParse_NextParamGet
    787              if((p) && (*p != '\0'))
   \   0000002E   0x.... 0x....      LDR.W    R4,??DataTable128  ;; 0x1fff000
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xBF1C             ITT      NE 
   \   00000036   0x7801             LDRBNE   R1,[R0, #+0]
   \   00000038   0x2900             CMPNE    R1,#+0
   \   0000003A   0xD00D             BEQ.N    ??AppS2wCmd_154ScanNetwork_1
    788              {
    789                  status = AppS2wParse_Hex(p, &param);
    790                  if(( status != S2W_SUCCESS ) || 
    791                      (( param != 0 ) && (( param < 0xc ) || ( param > 0x17 ))))
   \   0000003C   0x.... 0x....      BL       ?Subroutine25
    792                  {
    793                      return S2W_EINVAL;
    794                  }
    795                  
    796                  
    797                  scanReq.ScanChannels = ( param == 0 ) ? 0x1FFF000 : ( 1 << param ); 
    798              }
   \                     ??CrossCallReturnLabel_123:
   \   00000040   0xBB38             CBNZ.N   R0,??AppS2wCmd_154ScanNetwork_0
   \   00000042   0x9800             LDR      R0,[SP, #+0]
   \   00000044   0xB130             CBZ.N    R0,??AppS2wCmd_154ScanNetwork_2
   \   00000046   0x380C             SUBS     R0,R0,#+12
   \   00000048   0x280C             CMP      R0,#+12
   \   0000004A   0xD222             BCS.N    ??AppS2wCmd_154ScanNetwork_0
   \   0000004C   0x9900             LDR      R1,[SP, #+0]
   \   0000004E   0x2001             MOVS     R0,#+1
   \   00000050   0xFA00 0xF401      LSL      R4,R0,R1
   \                     ??AppS2wCmd_154ScanNetwork_2:
   \   00000054   0x9402             STR      R4,[SP, #+8]
   \   00000056   0xE003             B.N      ??AppS2wCmd_154ScanNetwork_3
    799              else
    800              {
    801                  scanReq.ScanChannels = 0x1FFF000; //All the channel
    802                  scanReq.ScanDuration = 0xE;
   \                     ??AppS2wCmd_154ScanNetwork_1:
   \   00000058   0x200E             MOVS     R0,#+14
   \   0000005A   0x9402             STR      R4,[SP, #+8]
   \   0000005C   0xF88D 0x000C      STRB     R0,[SP, #+12]
    803              }
    804              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_154ScanNetwork_3:
   \   00000060   0xA807             ADD      R0,SP,#+28
   \   00000062   0x.... 0x....      BL       AppS2wParse_NextParamGet
    805              if((p) && (*p != '\0'))
   \   00000066   0x2800             CMP      R0,#+0
   \   00000068   0xBF1C             ITT      NE 
   \   0000006A   0x7801             LDRBNE   R1,[R0, #+0]
   \   0000006C   0x2900             CMPNE    R1,#+0
   \   0000006E   0xD007             BEQ.N    ??AppS2wCmd_154ScanNetwork_4
    806              {
    807                  status = AppS2wParse_Hex(p, &param);
    808                  if(( status != S2W_SUCCESS ) || ( param > 0xE ))
   \   00000070   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_122:
   \   00000074   0xB968             CBNZ.N   R0,??AppS2wCmd_154ScanNetwork_0
   \   00000076   0x9800             LDR      R0,[SP, #+0]
   \   00000078   0x280F             CMP      R0,#+15
   \   0000007A   0xD20A             BCS.N    ??AppS2wCmd_154ScanNetwork_0
    809                  {
    810                      return S2W_EINVAL;
    811                  }
    812                  scanReq.ScanDuration = param; 
   \   0000007C   0xF88D 0x000C      STRB     R0,[SP, #+12]
    813                      
    814              }
    815              scanReq.ChannelPage = 0;
   \                     ??AppS2wCmd_154ScanNetwork_4:
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0xF88D 0x000D      STRB     R0,[SP, #+13]
    816              status = AppS2wParse_SecI( ptr, &scanReq.SecI );
    817          	if( status != S2W_SUCCESS )
   \   00000086   0xF10D 0x010E      ADD      R1,SP,#+14
   \   0000008A   0x9807             LDR      R0,[SP, #+28]
   \   0000008C   0x.... 0x....      BL       AppS2wParse_SecI
   \   00000090   0xB108             CBZ.N    R0,??AppS2wCmd_154ScanNetwork_5
    818          	{
    819          		return S2W_EINVAL;
   \                     ??AppS2wCmd_154ScanNetwork_0:
   \   00000092   0x2002             MOVS     R0,#+2
   \   00000094   0xE009             B.N      ??AppS2wCmd_154ScanNetwork_6
    820          	}   
    821              GsnWLRPAN_ScanReq( &s2w154Ctx.wlrpanCtx, &scanReq);   
   \                     ??AppS2wCmd_154ScanNetwork_5:
   \   00000096   0x.... 0x....      LDR.W    R4,??DataTable124
   \   0000009A   0x2318             MOVS     R3,#+24
   \   0000009C   0xAA01             ADD      R2,SP,#+4
   \   0000009E   0x2108             MOVS     R1,#+8
   \   000000A0   0x.... 0x....      BL       ?Subroutine19
    822              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_55:
   \   000000A4   0x.... 0x....      BL       ?Subroutine22
    823              
    824              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_74:
   \   000000A8   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154ScanNetwork_6:
   \   000000AA   0xB008             ADD      SP,SP,#+32
   \   000000AC   0xBD10             POP      {R4,PC}          ;; return
    825          }
    826          

   \                                 In section .text, align 2, keep-with-next
    827          UINT8
    828          AppS2wCmd_154JoinNetwork(UINT8 *ptr)
    829          {
   \                     AppS2wCmd_154JoinNetwork:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
    830              /**< Associate request.     Set
    831              Channel 0x0C - 0x17 
    832              Join network    "0-0xFFFE or MAC Address"   
    833              PAN ID  0-0xFFFF    
    834              Capability info     
    835              */
    836              GSN_WLRPAN_ASSOCIATE_REQ_T assocReq;
    837              UINT32 param, addr[2];
    838              UINT8 status;
    839              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_181:
   \   00000008   0x0004             MOVS     R4,R0
    840              if (!p)
   \   0000000A   0xD04D             BEQ.N    ??AppS2wCmd_154JoinNetwork_0
    841              {
    842                  return S2W_EINVAL;
    843              }
    844              status = AppS2wParse_Hex(p, &param);
    845              if( status != S2W_SUCCESS || param < 0xc || param > 0x17 )
   \   0000000C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_121:
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD149             BNE.N    ??AppS2wCmd_154JoinNetwork_0
   \   00000014   0x9800             LDR      R0,[SP, #+0]
   \   00000016   0x380C             SUBS     R0,R0,#+12
   \   00000018   0x280C             CMP      R0,#+12
   \   0000001A   0xD245             BCS.N    ??AppS2wCmd_154JoinNetwork_0
    846              {
    847                  return S2W_EINVAL;
    848              }
    849              memset( &assocReq, 0, sizeof( assocReq ));
   \   0000001C   0x.... 0x....      BL       ?Subroutine21
    850              assocReq.LogicalChannel = param;
   \                     ??CrossCallReturnLabel_64:
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0xF88D 0x0010      STRB     R0,[SP, #+16]
    851              assocReq.ChannelPage = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF88D 0x0011      STRB     R0,[SP, #+17]
    852              
    853              p = AppS2wParse_NextParamGet(&ptr);
   \   0000002C   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_180:
   \   00000030   0x0004             MOVS     R4,R0
    854              if((p) && (*p != '\0'))
   \   00000032   0xBF1C             ITT      NE 
   \   00000034   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000036   0x2800             CMPNE    R0,#+0
   \   00000038   0xD016             BEQ.N    ??CrossCallReturnLabel_208
    855              {
    856                  status = AppS2wParse_Hex(p, &param);
    857                  if( status != S2W_SUCCESS )
   \   0000003A   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_138:
   \   0000003E   0xB148             CBZ.N    R0,??AppS2wCmd_154JoinNetwork_1
    858                  {
    859                      if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)addr ))
   \   00000040   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_24:
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD12F             BNE.N    ??AppS2wCmd_154JoinNetwork_0
    860                          return S2W_EINVAL;
    861                      else
    862                      {
    863                          assocReq.CoordAddrMode = GSN_WLRPAN_ADDR_MODE_EXTND;
   \   00000048   0x2003             MOVS     R0,#+3
   \   0000004A   0xF88D 0x0012      STRB     R0,[SP, #+18]
    864                          memcpy( &assocReq.CoordAddress.LongAddr, addr, 8 ); 
   \   0000004E   0x.... 0x....      BL       ?Subroutine13
    865                      }
    866                  }
   \                     ??CrossCallReturnLabel_27:
   \   00000052   0xE009             B.N      ??CrossCallReturnLabel_208
    867                  else
    868                  {
    869                      if( param < 0xFFFE )
   \                     ??AppS2wCmd_154JoinNetwork_1:
   \   00000054   0x9800             LDR      R0,[SP, #+0]
   \   00000056   0xF64F 0x71FE      MOVW     R1,#+65534
   \   0000005A   0x4288             CMP      R0,R1
   \   0000005C   0xD224             BCS.N    ??AppS2wCmd_154JoinNetwork_0
    870                      {
    871                         assocReq.CoordAddrMode = GSN_WLRPAN_ADDR_MODE_SHORT;
   \   0000005E   0x2002             MOVS     R0,#+2
   \   00000060   0xF88D 0x0012      STRB     R0,[SP, #+18]
    872                         assocReq.CoordAddress.ShortAddr = ( UINT16 )param; 
   \   00000064   0x.... 0x....      BL       ?Subroutine36
    873                      }
    874                      else 
    875                          return S2W_EINVAL;
    876                  }
    877              }
    878              
    879              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_208:
   \   00000068   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_179:
   \   0000006C   0x0004             MOVS     R4,R0
    880              if((p) && (*p != '\0'))
   \   0000006E   0xBF1C             ITT      NE 
   \   00000070   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000072   0x2800             CMPNE    R0,#+0
   \   00000074   0xD005             BEQ.N    ??AppS2wCmd_154JoinNetwork_2
    881              {
    882                  status = AppS2wParse_Hex(p, &param);
    883                  if( status != S2W_SUCCESS )return S2W_EINVAL;
   \   00000076   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_137:
   \   0000007A   0xB9A8             CBNZ.N   R0,??AppS2wCmd_154JoinNetwork_0
    884                  else
    885                      assocReq.CoordPANId = ( UINT16 )param;
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0xF8AD 0x0014      STRH     R0,[SP, #+20]
    886              }
    887              
    888              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??AppS2wCmd_154JoinNetwork_2:
   \   00000082   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_178:
   \   00000086   0x0004             MOVS     R4,R0
    889              if((p) && (*p != '\0'))
   \   00000088   0xBF1C             ITT      NE 
   \   0000008A   0x7820             LDRBNE   R0,[R4, #+0]
   \   0000008C   0x2800             CMPNE    R0,#+0
   \   0000008E   0xD005             BEQ.N    ??AppS2wCmd_154JoinNetwork_3
    890              {
    891                  status = AppS2wParse_Hex(p, &param);
    892                  if( status != S2W_SUCCESS )return S2W_EINVAL;
   \   00000090   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_136:
   \   00000094   0xB940             CBNZ.N   R0,??AppS2wCmd_154JoinNetwork_0
    893                  else
    894                      assocReq.CapabilityInformation = ( UINT8 )param;
   \   00000096   0x9800             LDR      R0,[SP, #+0]
   \   00000098   0xF88D 0x0020      STRB     R0,[SP, #+32]
    895              }
    896              status = AppS2wParse_SecI( ptr, &assocReq.SecI );
    897          	if( status != S2W_SUCCESS )
   \                     ??AppS2wCmd_154JoinNetwork_3:
   \   0000009C   0xF10D 0x0121      ADD      R1,SP,#+33
   \   000000A0   0x980D             LDR      R0,[SP, #+52]
   \   000000A2   0x.... 0x....      BL       AppS2wParse_SecI
   \   000000A6   0xB108             CBZ.N    R0,??AppS2wCmd_154JoinNetwork_4
    898          	{
    899          		return S2W_EINVAL;
   \                     ??AppS2wCmd_154JoinNetwork_0:
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0xE019             B.N      ??AppS2wCmd_154JoinNetwork_5
    900          	}
    901              GsnWLRPAN_AssociateReq( &s2w154Ctx.wlrpanCtx, &assocReq);   
   \                     ??AppS2wCmd_154JoinNetwork_4:
   \   000000AC   0x.... 0x....      LDR.W    R4,??DataTable124
   \   000000B0   0x2320             MOVS     R3,#+32
   \   000000B2   0xAA04             ADD      R2,SP,#+16
   \   000000B4   0x2100             MOVS     R1,#+0
   \   000000B6   0x.... 0x....      BL       ?Subroutine19
    902              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_54:
   \   000000BA   0x.... 0x....      BL       ?Subroutine22
    903              
    904              if( s2w154Ctx.operationStatus == S2W_SUCCESS )
   \                     ??CrossCallReturnLabel_73:
   \   000000BE   0x78A0             LDRB     R0,[R4, #+2]
   \   000000C0   0xB968             CBNZ.N   R0,??AppS2wCmd_154JoinNetwork_6
    905              {
    906                  s2w154Ctx.CoordAddrMode = assocReq.CoordAddrMode;
   \   000000C2   0xF89D 0x0012      LDRB     R0,[SP, #+18]
   \   000000C6   0xF884 0x00B4      STRB     R0,[R4, #+180]
    907                  s2w154Ctx.CoordPANId = assocReq.CoordPANId;
    908                  s2w154Ctx.CoordAddress = assocReq.CoordAddress;
   \   000000CA   0xE9DD 0x2306      LDRD     R2,R3,[SP, #+24]
   \   000000CE   0xF8BD 0x0014      LDRH     R0,[SP, #+20]
   \   000000D2   0xF8A4 0x00B6      STRH     R0,[R4, #+182]
   \   000000D6   0xF104 0x00B8      ADD      R0,R4,#+184
   \   000000DA   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
    909              }
    910              return s2w154Ctx.operationStatus;
   \                     ??AppS2wCmd_154JoinNetwork_6:
   \   000000DE   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154JoinNetwork_5:
   \   000000E0   0xB00E             ADD      SP,SP,#+56
   \   000000E2   0xBD10             POP      {R4,PC}          ;; return
    911          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine21:
   \   00000000   0x2220             MOVS     R2,#+32
   \                     ??Subroutine21_0:
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0xA804             ADD      R0,SP,#+16
   \   00000006   0x.... 0x....      B.W      memset

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine31:
   \   00000000   0xA80D             ADD      R0,SP,#+52
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine13:
   \   00000000   0x2208             MOVS     R2,#+8
   \   00000002   0xA902             ADD      R1,SP,#+8
   \   00000004   0xA806             ADD      R0,SP,#+24
   \   00000006   0x.... 0x....      B.W      memcpy

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine12:
   \   00000000   0xA902             ADD      R1,SP,#+8
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x....             B.N      AppS2wParse_Mac64

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine36:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0xF8AD 0x0018      STRH     R0,[SP, #+24]
   \   00000006   0x4770             BX       LR

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine26:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4620             MOV      R0,R4
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Hex
    912          

   \                                 In section .text, align 2, keep-with-next
    913          UINT8
    914          AppS2wCmd_154AddNode(UINT8 *ptr)
    915          {
   \                     AppS2wCmd_154AddNode:
   \   00000000   0xE92D 0x43F1      PUSH     {R0,R4-R9,LR}
   \   00000004   0xB084             SUB      SP,SP,#+16
    916              /**< Add Node to network-This caommnd is issued by a coordinator, to allow 
    917              a node to join. Before a node gives a request to join the node this 
    918              coordinator has to issue this command.      
    919              Set
    920              Device address  MAC Address 
    921              Short address   0 - 0xFFFE  
    922              */
    923              UINT8 status, i, freeIdx = S2W_154_MAX_ASSOC_LIST;
    924              UINT32 eaddr[2], param;
    925              UINT16 saddr;
    926              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   00000006   0x.... 0x....      BL       ?Subroutine33
    927              if(!p)return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_194:
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD039             BEQ.N    ??AppS2wCmd_154AddNode_0
    928                  if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)eaddr ))
   \   0000000E   0xA901             ADD      R1,SP,#+4
   \   00000010   0x.... 0x....      BL       AppS2wParse_Mac64
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD134             BNE.N    ??AppS2wCmd_154AddNode_0
    929                      return S2W_EINVAL;
    930              
    931              p = AppS2wParse_NextParamGet(&ptr);
   \   00000018   0x.... 0x....      BL       ?Subroutine33
    932              if(!p)return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_193:
   \   0000001C   0xB388             CBZ.N    R0,??AppS2wCmd_154AddNode_0
    933              status = AppS2wParse_Hex(p, &param);
    934              if ( status != S2W_SUCCESS || param > 0xFFFE )
   \   0000001E   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_120:
   \   00000022   0xBB70             CBNZ.N   R0,??AppS2wCmd_154AddNode_0
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000002A   0x4288             CMP      R0,R1
   \   0000002C   0xD229             BCS.N    ??AppS2wCmd_154AddNode_0
    935                  return S2W_EINVAL;
    936              
    937              saddr = ( UINT16 )param;
   \   0000002E   0x4605             MOV      R5,R0
    938              
    939              /**< Check if we have this address listed */
    940              for( i = 0; i < S2W_154_MAX_ASSOC_LIST; i++ )
   \   00000030   0x2600             MOVS     R6,#+0
   \   00000032   0x270C             MOVS     R7,#+12
   \   00000034   0x.... 0x....      LDR.W    R8,??DataTable124
    941              {
    942                  if( s2w154Ctx.assocChild[ i ].status == S2W_154_ASSOC_STAT_FREE )
   \                     ??AppS2wCmd_154AddNode_1:
   \   00000038   0xFB07 0x8906      MLA      R9,R7,R6,R8
   \   0000003C   0xF109 0x0420      ADD      R4,R9,#+32
   \   00000040   0x7AA0             LDRB     R0,[R4, #+10]
   \   00000042   0xB960             CBNZ.N   R0,??AppS2wCmd_154AddNode_2
    943                  {
    944                      freeIdx = i;
    945                      break;
    946                  }
    947                  else if( memcmp(&s2w154Ctx.assocChild[i].extendedAddr,&eaddr,8) == 0 )
    948                  {
    949                      /**< It is present */
    950                      if( s2w154Ctx.assocChild[ i ].status == S2W_154_ASSOC_STAT_ASSOC )
    951                      {
    952                          return S2W_EINVAL;
    953                      }
    954                      else
    955                      {
    956                          s2w154Ctx.assocChild[ i ].shortAddr = saddr;
    957                          return S2W_SUCCESS;
    958                      }
    959                  }        
    960              }
    961              if( freeIdx < S2W_154_MAX_ASSOC_LIST )
   \   00000044   0x2E08             CMP      R6,#+8
   \   00000046   0xDA1C             BGE.N    ??AppS2wCmd_154AddNode_0
    962              {
    963                  s2w154Ctx.assocChild[ freeIdx ].shortAddr = saddr;
   \   00000048   0xFB07 0x8006      MLA      R0,R7,R6,R8
    964                  memcpy( &s2w154Ctx.assocChild[ freeIdx ].extendedAddr, (UINT8*)eaddr, 8 );
   \   0000004C   0x2208             MOVS     R2,#+8
   \   0000004E   0x8405             STRH     R5,[R0, #+32]
   \   00000050   0xA901             ADD      R1,SP,#+4
   \   00000052   0x3022             ADDS     R0,R0,#+34
   \   00000054   0x.... 0x....      BL       memcpy
    965                  s2w154Ctx.assocChild[ i ].status = S2W_154_ASSOC_STAT_NOT_ASSOC;
   \   00000058   0x2001             MOVS     R0,#+1
   \   0000005A   0x72A0             STRB     R0,[R4, #+10]
    966                  return S2W_SUCCESS;
   \   0000005C   0xE00B             B.N      ??AppS2wCmd_154AddNode_3
    967              }
   \                     ??AppS2wCmd_154AddNode_2:
   \   0000005E   0x2208             MOVS     R2,#+8
   \   00000060   0xA901             ADD      R1,SP,#+4
   \   00000062   0xF109 0x0022      ADD      R0,R9,#+34
   \   00000066   0x.... 0x....      BL       memcmp
   \   0000006A   0xB930             CBNZ.N   R0,??AppS2wCmd_154AddNode_4
   \   0000006C   0x7AA0             LDRB     R0,[R4, #+10]
   \   0000006E   0x2802             CMP      R0,#+2
   \   00000070   0xD008             BEQ.N    ??AppS2wCmd_154AddNode_5
   \   00000072   0xF8A9 0x5020      STRH     R5,[R9, #+32]
   \                     ??AppS2wCmd_154AddNode_3:
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0xE004             B.N      ??AppS2wCmd_154AddNode_5
   \                     ??AppS2wCmd_154AddNode_4:
   \   0000007A   0x1C76             ADDS     R6,R6,#+1
   \   0000007C   0xB2F6             UXTB     R6,R6
   \   0000007E   0x2E08             CMP      R6,#+8
   \   00000080   0xDBDA             BLT.N    ??AppS2wCmd_154AddNode_1
    968              return S2W_EINVAL;
   \                     ??AppS2wCmd_154AddNode_0:
   \   00000082   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154AddNode_5:
   \   00000084   0xB005             ADD      SP,SP,#+20
   \   00000086   0xE8BD 0x83F0      POP      {R4-R9,PC}       ;; return
    969          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine33:
   \   00000000   0xA804             ADD      R0,SP,#+16
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
    970          

   \                                 In section .text, align 2, keep-with-next
    971          UINT8
    972          AppS2wCmd_154StartNetwork(UINT8 *ptr)
    973          {
   \                     AppS2wCmd_154StartNetwork:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    974              /**< Start network. This command is issued to start the network.        
    975              Set
    976              Channel 0x0C - 0x17 
    977              PAN ID  0-0xFFFF    
    978              Beacon Order    0-0xF   
    979              Superframe Order    0-0xF   
    980              PAN Coordinator 0-1 
    981              Battery realignment 0-1 
    982              */
    983              GSN_WLRPAN_START_REQ_T startReq= {0};
   \   00000004   0xA801             ADD      R0,SP,#+4
   \   00000006   0x2124             MOVS     R1,#+36
   \   00000008   0x.... 0x....      BL       __aeabi_memclr4
    984              UINT32 param;
    985              UINT8 status;
    986              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   0000000C   0x.... 0x....      BL       ?Subroutine35
    987              if(!p)  return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_207:
   \   00000010   0x2800             CMP      R0,#+0
   \   00000012   0xD05D             BEQ.N    ??AppS2wCmd_154StartNetwork_0
    988              
    989              status = AppS2wParse_Hex(p, &param);
    990              if( status != S2W_SUCCESS ||  (param < 0x0c) || (param > 0x17) )
   \   00000014   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_119:
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD159             BNE.N    ??AppS2wCmd_154StartNetwork_0
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x380C             SUBS     R0,R0,#+12
   \   00000020   0x280C             CMP      R0,#+12
   \   00000022   0xD255             BCS.N    ??AppS2wCmd_154StartNetwork_0
    991                  return S2W_EINVAL;
    992          
    993              memset( &startReq, 0, sizeof( startReq ));
   \   00000024   0x2224             MOVS     R2,#+36
   \   00000026   0x.... 0x....      BL       ??Subroutine20_0
    994          
    995              startReq.LogicalChannel = param;
   \                     ??CrossCallReturnLabel_59:
   \   0000002A   0x9800             LDR      R0,[SP, #+0]
   \   0000002C   0xF88D 0x0006      STRB     R0,[SP, #+6]
    996              startReq.ChannelPage = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0xF88D 0x0007      STRB     R0,[SP, #+7]
    997              
    998              p = AppS2wParse_NextParamGet(&ptr);
   \   00000036   0x.... 0x....      BL       ?Subroutine35
    999              if( !p )    return S2W_EINVAL;
   \                     ??CrossCallReturnLabel_206:
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD048             BEQ.N    ??AppS2wCmd_154StartNetwork_0
   1000              
   1001              status = AppS2wParse_Hex(p, &param);
   1002              if( status != S2W_SUCCESS || param > 0xFFFE )
   \   0000003E   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_118:
   \   00000042   0x2800             CMP      R0,#+0
   \   00000044   0xD144             BNE.N    ??AppS2wCmd_154StartNetwork_0
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0xF64F 0x71FF      MOVW     R1,#+65535
   \   0000004C   0x4288             CMP      R0,R1
   \   0000004E   0xD23F             BCS.N    ??AppS2wCmd_154StartNetwork_0
   1003              {
   1004                  return S2W_EINVAL;
   1005              }    
   1006              startReq.PANId = (UINT16 )param;
   \   00000050   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1007              
   1008              p = AppS2wParse_NextParamGet(&ptr);
   \   00000054   0x.... 0x....      BL       ?Subroutine35
   1009              if (!p)
   \                     ??CrossCallReturnLabel_205:
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD039             BEQ.N    ??AppS2wCmd_154StartNetwork_0
   1010              {
   1011                  return S2W_EINVAL;
   1012              }
   1013              status = AppS2wParse_Hex(p, &param);
   1014              if ( status != S2W_SUCCESS || param > 0xF )
   \   0000005C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_117:
   \   00000060   0x2800             CMP      R0,#+0
   \   00000062   0xD135             BNE.N    ??AppS2wCmd_154StartNetwork_0
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0x2810             CMP      R0,#+16
   \   00000068   0xD232             BCS.N    ??AppS2wCmd_154StartNetwork_0
   1015              {
   1016                  return S2W_EINVAL;
   1017              }    
   1018              startReq.BeaconOrder = ( UINT8 )param;
   \   0000006A   0xF88D 0x000C      STRB     R0,[SP, #+12]
   1019              
   1020              p = AppS2wParse_NextParamGet(&ptr);
   \   0000006E   0x.... 0x....      BL       ?Subroutine35
   1021              if (!p)
   \                     ??CrossCallReturnLabel_204:
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD02C             BEQ.N    ??AppS2wCmd_154StartNetwork_0
   1022              {
   1023                  return S2W_EINVAL;
   1024              }
   1025              status = AppS2wParse_Hex(p, &param);
   1026              if ( status != S2W_SUCCESS || param > 0xF )
   \   00000076   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_116:
   \   0000007A   0xBB48             CBNZ.N   R0,??AppS2wCmd_154StartNetwork_0
   \   0000007C   0x9800             LDR      R0,[SP, #+0]
   \   0000007E   0x2810             CMP      R0,#+16
   \   00000080   0xD226             BCS.N    ??AppS2wCmd_154StartNetwork_0
   1027              {
   1028                  return S2W_EINVAL;
   1029              }    
   1030              startReq.SuperframeOrder = ( UINT8 )param;
   \   00000082   0xF88D 0x000D      STRB     R0,[SP, #+13]
   1031              
   1032              p = AppS2wParse_NextParamGet(&ptr);
   \   00000086   0x.... 0x....      BL       ?Subroutine35
   1033              if (!p)
   \                     ??CrossCallReturnLabel_203:
   \   0000008A   0xB308             CBZ.N    R0,??AppS2wCmd_154StartNetwork_0
   1034              {
   1035                  return S2W_EINVAL;
   1036              }
   1037              status = AppS2wParse_Hex(p, &param);
   1038              if ( status != S2W_SUCCESS || param > 0x1 )
   \   0000008C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_115:
   \   00000090   0xB9F0             CBNZ.N   R0,??AppS2wCmd_154StartNetwork_0
   \   00000092   0x9800             LDR      R0,[SP, #+0]
   \   00000094   0x2802             CMP      R0,#+2
   \   00000096   0xD21B             BCS.N    ??AppS2wCmd_154StartNetwork_0
   1039              {
   1040                  return S2W_EINVAL;
   1041              }    
   1042              startReq.PANCoordinator = ( UINT8 )param;
   \   00000098   0xF88D 0x000E      STRB     R0,[SP, #+14]
   1043              
   1044               p = AppS2wParse_NextParamGet(&ptr);
   \   0000009C   0x.... 0x....      BL       ?Subroutine35
   1045              if (!p)
   \                     ??CrossCallReturnLabel_202:
   \   000000A0   0xB1B0             CBZ.N    R0,??AppS2wCmd_154StartNetwork_0
   1046              {
   1047                  return S2W_EINVAL;
   1048              }
   1049              status = AppS2wParse_Hex(p, &param);
   1050              if ( status != S2W_SUCCESS || param > 0x1 )
   \   000000A2   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_114:
   \   000000A6   0xB998             CBNZ.N   R0,??AppS2wCmd_154StartNetwork_0
   \   000000A8   0x9800             LDR      R0,[SP, #+0]
   \   000000AA   0x2802             CMP      R0,#+2
   \   000000AC   0xD210             BCS.N    ??AppS2wCmd_154StartNetwork_0
   1051              {
   1052                  return S2W_EINVAL;
   1053              }    
   1054              startReq.CoordRealignment = ( UINT8 )param;
   \   000000AE   0xF88D 0x0010      STRB     R0,[SP, #+16]
   1055              
   1056          	if( startReq.CoordRealignment == 1 )
   \   000000B2   0xF89D 0x0010      LDRB     R0,[SP, #+16]
   \   000000B6   0x2801             CMP      R0,#+1
   \   000000B8   0xD105             BNE.N    ??AppS2wCmd_154StartNetwork_1
   1057          	{
   1058          	    status = AppS2wParse_SecI( ptr, &startReq.CoordRealignSecI );
   1059          		if( status != S2W_SUCCESS )
   \   000000BA   0x980B             LDR      R0,[SP, #+44]
   \   000000BC   0xF10D 0x0111      ADD      R1,SP,#+17
   \   000000C0   0x.... 0x....      BL       AppS2wParse_SecI
   \   000000C4   0xB920             CBNZ.N   R0,??AppS2wCmd_154StartNetwork_0
   1060          		{
   1061          			return S2W_EINVAL;
   1062          		}
   1063          	}
   1064          
   1065          	status = AppS2wParse_SecI( ptr, &startReq.BeaconSecI );
   1066          	if( status != S2W_SUCCESS )
   \                     ??AppS2wCmd_154StartNetwork_1:
   \   000000C6   0x980B             LDR      R0,[SP, #+44]
   \   000000C8   0xA907             ADD      R1,SP,#+28
   \   000000CA   0x.... 0x....      BL       AppS2wParse_SecI
   \   000000CE   0xB108             CBZ.N    R0,??AppS2wCmd_154StartNetwork_2
   1067          	{
   1068          		return S2W_EINVAL;
   \                     ??AppS2wCmd_154StartNetwork_0:
   \   000000D0   0x2002             MOVS     R0,#+2
   \   000000D2   0xE00B             B.N      ??AppS2wCmd_154StartNetwork_3
   1069          	}
   1070              
   1071              startReq.StartTime = 0;
   \                     ??AppS2wCmd_154StartNetwork_2:
   \   000000D4   0x9002             STR      R0,[SP, #+8]
   1072              startReq.BatteryLifeExtension = 0;
   \   000000D6   0xF88D 0x000F      STRB     R0,[SP, #+15]
   1073              
   1074              GsnWLRPAN_StartReq( &s2w154Ctx.wlrpanCtx, &startReq);   
   \   000000DA   0x2324             MOVS     R3,#+36
   \   000000DC   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_43:
   \   000000E0   0x210A             MOVS     R1,#+10
   \   000000E2   0x.... 0x....      BL       ?Subroutine19
   1075              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_53:
   \   000000E6   0x.... 0x....      BL       ?Subroutine22
   1076              
   1077              return s2w154Ctx.operationStatus;    
   \                     ??CrossCallReturnLabel_72:
   \   000000EA   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154StartNetwork_3:
   \   000000EC   0xB00C             ADD      SP,SP,#+48
   \   000000EE   0xBD10             POP      {R4,PC}          ;; return
   1078              
   1079          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine35:
   \   00000000   0xA80B             ADD      R0,SP,#+44
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine20:
   \   00000000   0x4604             MOV      R4,R0
   \   00000002   0x220C             MOVS     R2,#+12
   \                     ??Subroutine20_0:
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0xA801             ADD      R0,SP,#+4
   \   00000008   0x.... 0x....      B.W      memset
   1080          

   \                                 In section .text, align 2, keep-with-next
   1081          UINT8
   1082          AppS2wCmd_154LeaveNetwork(UINT8 *ptr)
   1083          {
   \                     AppS2wCmd_154LeaveNetwork:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB08D             SUB      SP,SP,#+52
   1084              /**< Leave Netowrk. A coordinator can command a node to leave netowrk or a 
   1085              node can leave the network by issuing this command.     
   1086              Set
   1087              Device address  "0-0xFFFF or  MAC Address"    
   1088              Reason  "0-0xFF"  
   1089              TxIndirect "TRUE or FALSE"
   1090              Device PAN Id  "0 - 0xFFFF"
   1091              */
   1092              GSN_WLP_DISASSOCIATE_REQ_T disassocReq;
   1093              UINT32 param, addr[2];
   1094              UINT8 status;
   1095              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_177:
   \   00000008   0x4604             MOV      R4,R0
   1096          
   1097              memset( &disassocReq, 0, sizeof( disassocReq ));
   \   0000000A   0x.... 0x....      BL       ?Subroutine21
   1098          	/**< Address Mode and Address */
   1099              if((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_63:
   \   0000000E   0x2C00             CMP      R4,#+0
   \   00000010   0xBF1C             ITT      NE 
   \   00000012   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000014   0x2800             CMPNE    R0,#+0
   \   00000016   0xD00B             BEQ.N    ??CrossCallReturnLabel_26
   1100              {
   1101                  status = AppS2wParse_Hex(p, &param);
   1102                  if ( status != S2W_SUCCESS )
   \   00000018   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_135:
   \   0000001C   0xB168             CBZ.N    R0,??AppS2wCmd_154LeaveNetwork_0
   1103                  {
   1104                      if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)addr ))
   \   0000001E   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_23:
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD139             BNE.N    ??AppS2wCmd_154LeaveNetwork_1
   1105                          return S2W_EINVAL;
   1106                      else
   1107                      {
   1108                          disassocReq.DeviceAddrMode = GSN_WLRPAN_ADDR_MODE_EXTND;
   \   00000026   0x2003             MOVS     R0,#+3
   \   00000028   0xF88D 0x0010      STRB     R0,[SP, #+16]
   1109                          memcpy( &disassocReq.DeviceAddress.LongAddr, addr, 8 ); 
   \   0000002C   0x.... 0x....      BL       ?Subroutine13
   1110                      }
   1111                  }
   1112                  else
   1113                  {
   1114                      if( param < 0xFFFE )
   1115                      {
   1116                         disassocReq.DeviceAddrMode = GSN_WLRPAN_ADDR_MODE_SHORT;
   1117                         disassocReq.DeviceAddress.ShortAddr = ( UINT16 )param; 
   1118                      }
   1119                      else 
   1120                          return S2W_EINVAL;
   1121                  }
   1122              }
   1123          	/**< DisAssoc Reason */
   1124              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_26:
   \   00000030   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_176:
   \   00000034   0x0004             MOVS     R4,R0
   1125              if (!p)
   \   00000036   0xD10B             BNE.N    ??AppS2wCmd_154LeaveNetwork_2
   1126              {
   1127                  return S2W_EINVAL;
   \   00000038   0xE02F             B.N      ??AppS2wCmd_154LeaveNetwork_1
   1128              }
   \                     ??AppS2wCmd_154LeaveNetwork_0:
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0xF64F 0x71FE      MOVW     R1,#+65534
   \   00000040   0x4288             CMP      R0,R1
   \   00000042   0xD22A             BCS.N    ??AppS2wCmd_154LeaveNetwork_1
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xF88D 0x0010      STRB     R0,[SP, #+16]
   \   0000004A   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_209:
   \   0000004E   0xE7EF             B.N      ??CrossCallReturnLabel_26
   1129              status = AppS2wParse_Hex(p, &param);
   1130              if( (status != S2W_SUCCESS) || (param < 0x01) || (param > 0x02) )
   \                     ??AppS2wCmd_154LeaveNetwork_2:
   \   00000050   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_113:
   \   00000054   0xBB08             CBNZ.N   R0,??AppS2wCmd_154LeaveNetwork_1
   \   00000056   0x9800             LDR      R0,[SP, #+0]
   \   00000058   0xB1F8             CBZ.N    R0,??AppS2wCmd_154LeaveNetwork_1
   \   0000005A   0x2803             CMP      R0,#+3
   \   0000005C   0xD21D             BCS.N    ??AppS2wCmd_154LeaveNetwork_1
   1131              {
   1132                  return S2W_EINVAL;
   1133              }    
   1134              disassocReq.DisAssocReason = ( UINT8 )param;
   \   0000005E   0xF88D 0x0020      STRB     R0,[SP, #+32]
   1135          
   1136          	/**< TxIndirect */
   1137          	p = AppS2wParse_NextParamGet(&ptr);
   \   00000062   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_175:
   \   00000066   0x0004             MOVS     R4,R0
   1138              if(!p)
   \   00000068   0xD017             BEQ.N    ??AppS2wCmd_154LeaveNetwork_1
   1139              {
   1140                  return S2W_EINVAL;
   1141              }
   1142              status = AppS2wParse_Hex(p, &param);
   1143          	if( status != S2W_SUCCESS || param > 0x01 )
   \   0000006A   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_112:
   \   0000006E   0xB9A0             CBNZ.N   R0,??AppS2wCmd_154LeaveNetwork_1
   \   00000070   0x9800             LDR      R0,[SP, #+0]
   \   00000072   0x2802             CMP      R0,#+2
   \   00000074   0xD211             BCS.N    ??AppS2wCmd_154LeaveNetwork_1
   1144              {
   1145                  return S2W_EINVAL;
   1146              } 
   1147              disassocReq.TxIndirect = param;
   \   00000076   0xF88D 0x0021      STRB     R0,[SP, #+33]
   1148          
   1149          	/**< Device PAN Id */
   1150          	p = AppS2wParse_NextParamGet(&ptr);
   \   0000007A   0x.... 0x....      BL       ?Subroutine31
   \                     ??CrossCallReturnLabel_174:
   \   0000007E   0x0004             MOVS     R4,R0
   1151              if(!p)
   \   00000080   0xD00B             BEQ.N    ??AppS2wCmd_154LeaveNetwork_1
   1152              {
   1153                  return S2W_EINVAL;
   1154              }
   1155              status = AppS2wParse_Hex(p, &param);
   1156          	if( status != S2W_SUCCESS )
   \   00000082   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_111:
   \   00000086   0xB940             CBNZ.N   R0,??AppS2wCmd_154LeaveNetwork_1
   1157              {
   1158                  return S2W_EINVAL;
   1159              } 
   1160          
   1161              disassocReq.DevicePANId = param; //s2w154Ctx.CoordPANId;
   \   00000088   0x9800             LDR      R0,[SP, #+0]
   \   0000008A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   1162          
   1163          	status = AppS2wParse_SecI( ptr, &disassocReq.SecI );
   1164          	if( status != S2W_SUCCESS )
   \   0000008E   0xF10D 0x0122      ADD      R1,SP,#+34
   \   00000092   0x980D             LDR      R0,[SP, #+52]
   \   00000094   0x.... 0x....      BL       AppS2wParse_SecI
   \   00000098   0xB108             CBZ.N    R0,??AppS2wCmd_154LeaveNetwork_3
   1165          	{
   1166          		return S2W_EINVAL;
   \                     ??AppS2wCmd_154LeaveNetwork_1:
   \   0000009A   0x2002             MOVS     R0,#+2
   \   0000009C   0xE008             B.N      ??AppS2wCmd_154LeaveNetwork_4
   1167          	}
   1168          
   1169              GsnWLRPAN_DisAssociateReq( &s2w154Ctx.wlrpanCtx, &disassocReq );  
   \                     ??AppS2wCmd_154LeaveNetwork_3:
   \   0000009E   0x....             LDR.N    R4,??DataTable124
   \   000000A0   0x2320             MOVS     R3,#+32
   \   000000A2   0xAA04             ADD      R2,SP,#+16
   \   000000A4   0x2102             MOVS     R1,#+2
   \   000000A6   0x.... 0x....      BL       ?Subroutine19
   1170          	
   1171              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_52:
   \   000000AA   0x.... 0x....      BL       ?Subroutine22
   1172              
   1173              return s2w154Ctx.operationStatus;   
   \                     ??CrossCallReturnLabel_71:
   \   000000AE   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154LeaveNetwork_4:
   \   000000B0   0xB00E             ADD      SP,SP,#+56
   \   000000B2   0xBD10             POP      {R4,PC}          ;; return
   1174          }
   1175          

   \                                 In section .text, align 2, keep-with-next
   1176          UINT8
   1177          AppS2wCmd_154PollData(UINT8 *ptr)
   1178          {
   \                     AppS2wCmd_154PollData:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x4604             MOV      R4,R0
   1179              /**< Poll for data  NA  Set
   1180              */
   1181              UINT8 status;
   1182              GSN_WLRPAN_POLL_REQ_T pollReq = {0};
   \   00000006   0xA800             ADD      R0,SP,#+0
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
   1183          
   1184              //memset( &pollReq, 0, sizeof( pollReq ));
   1185          
   1186              pollReq.CoordAddrMode = s2w154Ctx.CoordAddrMode;
   \   0000000E   0x....             LDR.N    R5,??DataTable124
   \   00000010   0xF895 0x00B4      LDRB     R0,[R5, #+180]
   \   00000014   0xF88D 0x0000      STRB     R0,[SP, #+0]
   1187              pollReq.CoordPANId = s2w154Ctx.CoordPANId;    
   1188              pollReq.CoordAddress = s2w154Ctx.CoordAddress;
   1189              //pollReq.SecI.SecILevel = NULL;
   1190          
   1191          	status = AppS2wParse_SecI( ptr, &pollReq.SecI );
   1192          	if( status != S2W_SUCCESS )
   \   00000018   0xA904             ADD      R1,SP,#+16
   \   0000001A   0xF8B5 0x00B6      LDRH     R0,[R5, #+182]
   \   0000001E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
   \   00000022   0xF105 0x00B8      ADD      R0,R5,#+184
   \   00000026   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   0000002A   0xE9CD 0x2302      STRD     R2,R3,[SP, #+8]
   \   0000002E   0x4620             MOV      R0,R4
   \   00000030   0x.... 0x....      BL       AppS2wParse_SecI
   \   00000034   0xB108             CBZ.N    R0,??AppS2wCmd_154PollData_0
   1193          	{
   1194          		return S2W_EINVAL;
   \   00000036   0x2002             MOVS     R0,#+2
   \   00000038   0xE00C             B.N      ??AppS2wCmd_154PollData_1
   1195          	}
   1196          
   1197              GsnWLRPAN_PsPollReq( &s2w154Ctx.wlrpanCtx, &pollReq );   
   \                     ??AppS2wCmd_154PollData_0:
   \   0000003A   0x2320             MOVS     R3,#+32
   \   0000003C   0xAA00             ADD      R2,SP,#+0
   \   0000003E   0x210C             MOVS     R1,#+12
   \   00000040   0xF105 0x0098      ADD      R0,R5,#+152
   \   00000044   0x.... 0x....      BL       GsnWLRPAN_WifMgmtSend
   1198              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   00000048   0xF04F 0x31FF      MOV      R1,#-1
   \   0000004C   0x1D28             ADDS     R0,R5,#+4
   \   0000004E   0x.... 0x....      BL       GsnOsal_SemAcquire
   1199              
   1200              return s2w154Ctx.operationStatus;   
   \   00000052   0x78A8             LDRB     R0,[R5, #+2]
   \                     ??AppS2wCmd_154PollData_1:
   \   00000054   0xB009             ADD      SP,SP,#+36
   \   00000056   0xBD30             POP      {R4,R5,PC}       ;; return
   1201          
   1202          }
   1203          

   \                                 In section .text, align 4, keep-with-next
   1204          const UINT8 KeyIdLenLookUp_Patch[] = { 0, 0x1, 0x5, 0x9 };
   \                     KeyIdLenLookUp_Patch:
   \   00000000   0x00 0x01          DC8 0, 1, 5, 9
   \              0x05 0x09    
   1205          

   \                                 In section .text, align 2, keep-with-next
   1206          UINT8 
   1207          AppS2wCmd_DataLenCheck( GSN_WLRPAN_DATA_REQ_T *pDataReq )
   1208          {
   1209          	UINT8 len = 7;	//FRM CTL, DSN, DST PAN, SRC PAN,
   1210          
   1211          	len += ( pDataReq->DstMode == GSN_WLRPAN_ADDR_MODE_EXTND )? 8 : 2;
   \                     AppS2wCmd_DataLenCheck:
   \   00000000   0x7841             LDRB     R1,[R0, #+1]
   \   00000002   0x2903             CMP      R1,#+3
   \   00000004   0xBF0C             ITE      EQ 
   \   00000006   0x2108             MOVEQ    R1,#+8
   \   00000008   0x2102             MOVNE    R1,#+2
   1212          	len += ( pDataReq->SrcMode == GSN_WLRPAN_ADDR_MODE_EXTND )? 8 : 2;
   \   0000000A   0x7802             LDRB     R2,[R0, #+0]
   \   0000000C   0x1DC9             ADDS     R1,R1,#+7
   \   0000000E   0xB2C9             UXTB     R1,R1
   \   00000010   0x2A03             CMP      R2,#+3
   \   00000012   0xBF0C             ITE      EQ 
   \   00000014   0x2208             MOVEQ    R2,#+8
   \   00000016   0x2202             MOVNE    R2,#+2
   \   00000018   0x1851             ADDS     R1,R2,R1
   1213          	
   1214              if( pDataReq->SecI.SecILevel != 0 )
   \   0000001A   0xF890 0x2093      LDRB     R2,[R0, #+147]
   \   0000001E   0xB2C9             UXTB     R1,R1
   \   00000020   0xB12A             CBZ.N    R2,??AppS2wCmd_DataLenCheck_0
   1215              {
   1216                  len += ( 1 /*Sec Ctrl*/ + 4 /*Frm Cntr*/ + 
   1217                      KeyIdLenLookUp_Patch[ pDataReq->SecI.SecILevel ] /*Key Id*/);
   \   00000022   0x.... 0x....      ADR.W    R3,KeyIdLenLookUp_Patch
   \   00000026   0x5CD2             LDRB     R2,[R2, R3]
   \   00000028   0x1851             ADDS     R1,R2,R1
   \   0000002A   0x1D49             ADDS     R1,R1,#+5
   \   0000002C   0xB2C9             UXTB     R1,R1
   1218              }
   1219          
   1220          	if(( len + pDataReq->MsduLen ) < 127 )
   \                     ??AppS2wCmd_DataLenCheck_0:
   \   0000002E   0xF890 0x0090      LDRB     R0,[R0, #+144]
   \   00000032   0x1840             ADDS     R0,R0,R1
   \   00000034   0x287F             CMP      R0,#+127
   \   00000036   0xDA01             BGE.N    ??AppS2wCmd_DataLenCheck_1
   1221          	{
   1222          		return S2W_SUCCESS;
   \   00000038   0x2000             MOVS     R0,#+0
   \   0000003A   0x4770             BX       LR
   1223          	}
   1224          	else
   1225          	{
   1226          		return S2W_EINVAL;
   \                     ??AppS2wCmd_DataLenCheck_1:
   \   0000003C   0x2002             MOVS     R0,#+2
   \   0000003E   0x4770             BX       LR               ;; return
   1227          	}
   1228          }
   1229          
   1230          

   \                                 In section .text, align 2, keep-with-next
   1231          UINT8
   1232          AppS2wCmd_154DataSend(UINT8 *ptr)
   1233          {
   \                     AppS2wCmd_154DataSend:
   \   00000000   0xB531             PUSH     {R0,R4,R5,LR}
   \   00000002   0xB0AC             SUB      SP,SP,#+176
   1234              /**< Send data  
   1235              destination address "0-0xFFFF or MAC Address"
   1236              Handle  0-0xFF
   1237              Tx option(as per spec)  0-7
   1238              Data format (0-bin, 1-hex)  0-1
   1239              frame length    0-100
   1240              Frame   
   1241              */
   1242              GSN_WLRPAN_DATA_REQ_T dataReq;
   1243          
   1244              UINT32 param, addr[2];
   1245              UINT8 status, format;
   1246              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_201:
   \   00000008   0x4604             MOV      R4,R0
   1247              
   1248              memset( &dataReq, 0, sizeof( dataReq ));
   \   0000000A   0x22A0             MOVS     R2,#+160
   \   0000000C   0x.... 0x....      BL       ??Subroutine21_0
   1249          
   1250              if((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_62:
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xBF1C             ITT      NE 
   \   00000014   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000016   0x2800             CMPNE    R0,#+0
   \   00000018   0xD00B             BEQ.N    ??CrossCallReturnLabel_25
   1251              {
   1252                  status = AppS2wParse_Hex(p, &param);
   1253                  if ( status != S2W_SUCCESS )
   \   0000001A   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_134:
   \   0000001E   0xB168             CBZ.N    R0,??AppS2wCmd_154DataSend_0
   1254                  {
   1255                      if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)addr ))
   \   00000020   0x.... 0x....      BL       ?Subroutine12
   \                     ??CrossCallReturnLabel_22:
   \   00000024   0x2800             CMP      R0,#+0
   \   00000026   0xD155             BNE.N    ??AppS2wCmd_154DataSend_1
   1256                          return S2W_EINVAL;
   1257                      else
   1258                      {
   1259                          dataReq.DstMode = GSN_WLRPAN_ADDR_MODE_EXTND;
   \   00000028   0x2003             MOVS     R0,#+3
   \   0000002A   0xF88D 0x0011      STRB     R0,[SP, #+17]
   1260                          memcpy( &dataReq.DstAddr.LongAddr, addr, 8 ); 
   \   0000002E   0x.... 0x....      BL       ?Subroutine13
   1261                      }
   1262                  }
   1263                  else
   1264                  {
   1265                      if( param <= 0xFFFF )
   1266                      {
   1267                         dataReq.DstMode = GSN_WLRPAN_ADDR_MODE_SHORT;
   1268                         dataReq.DstAddr.ShortAddr = ( UINT16 )param; 
   1269                      }
   1270                      else 
   1271                          return S2W_EINVAL;
   1272                  }
   1273              }
   1274          
   1275              p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_25:
   \   00000032   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_200:
   \   00000036   0x0004             MOVS     R4,R0
   1276              if (!p)
   \   00000038   0xD10A             BNE.N    ??AppS2wCmd_154DataSend_2
   1277              {
   1278                  return S2W_EINVAL;
   \   0000003A   0xE04B             B.N      ??AppS2wCmd_154DataSend_1
   1279              }
   \                     ??AppS2wCmd_154DataSend_0:
   \   0000003C   0x9800             LDR      R0,[SP, #+0]
   \   0000003E   0xF5B0 0x3F80      CMP      R0,#+65536
   \   00000042   0xD247             BCS.N    ??AppS2wCmd_154DataSend_1
   \   00000044   0x2002             MOVS     R0,#+2
   \   00000046   0xF88D 0x0011      STRB     R0,[SP, #+17]
   \   0000004A   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_210:
   \   0000004E   0xE7F0             B.N      ??CrossCallReturnLabel_25
   1280              status = AppS2wParse_Hex(p, &param);
   1281              if( status != S2W_SUCCESS )
   \                     ??AppS2wCmd_154DataSend_2:
   \   00000050   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_110:
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD13D             BNE.N    ??AppS2wCmd_154DataSend_1
   1282              {
   1283                  return S2W_EINVAL;
   1284              }    
   1285              dataReq.DstPanId = ( UINT16 )param;
   \   00000058   0x9800             LDR      R0,[SP, #+0]
   \   0000005A   0xF8AD 0x0012      STRH     R0,[SP, #+18]
   1286          
   1287              p = AppS2wParse_NextParamGet(&ptr);
   \   0000005E   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_199:
   \   00000062   0x0004             MOVS     R4,R0
   1288              if(!p)
   \   00000064   0xD036             BEQ.N    ??AppS2wCmd_154DataSend_1
   1289              {
   1290                  return S2W_EINVAL;
   1291              }
   1292              status = AppS2wParse_Hex(p, &param);
   1293              if ( status != S2W_SUCCESS || param > 0xFF )
   \   00000066   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_109:
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xD132             BNE.N    ??AppS2wCmd_154DataSend_1
   \   0000006E   0x9800             LDR      R0,[SP, #+0]
   \   00000070   0x28FF             CMP      R0,#+255
   \   00000072   0xD82F             BHI.N    ??AppS2wCmd_154DataSend_1
   1294              {
   1295                  return S2W_EINVAL;
   1296              }    
   1297              dataReq.MsduHandle = ( UINT8 )param;
   \   00000074   0xAD28             ADD      R5,SP,#+160
   \   00000076   0x7068             STRB     R0,[R5, #+1]
   1298          
   1299              p = AppS2wParse_NextParamGet(&ptr);
   \   00000078   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_198:
   \   0000007C   0x0004             MOVS     R4,R0
   1300              if (!p)
   \   0000007E   0xD029             BEQ.N    ??AppS2wCmd_154DataSend_1
   1301              {
   1302                  return S2W_EINVAL;
   1303              }
   1304              status = AppS2wParse_Hex(p, &param);
   1305              if ( status != S2W_SUCCESS || param > 0x7 )
   \   00000080   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_108:
   \   00000084   0xBB30             CBNZ.N   R0,??AppS2wCmd_154DataSend_1
   \   00000086   0x9800             LDR      R0,[SP, #+0]
   \   00000088   0x2808             CMP      R0,#+8
   \   0000008A   0xD223             BCS.N    ??AppS2wCmd_154DataSend_1
   1306              {
   1307                  return S2W_EINVAL;
   1308              }    
   1309              dataReq.TxOption = ( UINT8 )param;
   \   0000008C   0x70A8             STRB     R0,[R5, #+2]
   1310          
   1311              dataReq.SrcMode = GSN_WLRPAN_ADDR_MODE_EXTND; //TODO
   \   0000008E   0x2003             MOVS     R0,#+3
   \   00000090   0xF88D 0x0010      STRB     R0,[SP, #+16]
   1312          
   1313              p = AppS2wParse_NextParamGet(&ptr);
   \   00000094   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_197:
   \   00000098   0x0004             MOVS     R4,R0
   1314              if (!p)
   \   0000009A   0xD01B             BEQ.N    ??AppS2wCmd_154DataSend_1
   1315              {
   1316                  return S2W_EINVAL;
   1317              }
   1318              status = AppS2wParse_Hex(p, &param);
   1319              if ( status != S2W_SUCCESS || param > 2 )
   \   0000009C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_107:
   \   000000A0   0xB9C0             CBNZ.N   R0,??AppS2wCmd_154DataSend_1
   \   000000A2   0x9800             LDR      R0,[SP, #+0]
   \   000000A4   0x2803             CMP      R0,#+3
   \   000000A6   0xD215             BCS.N    ??AppS2wCmd_154DataSend_1
   1320              {
   1321                  return S2W_EINVAL;
   1322              }    
   1323              format = ( UINT8 )param;
   1324              (void)format;//TODO
   1325          
   1326              p = AppS2wParse_NextParamGet(&ptr);
   \   000000A8   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_196:
   \   000000AC   0x0004             MOVS     R4,R0
   1327              if (!p)
   \   000000AE   0xD011             BEQ.N    ??AppS2wCmd_154DataSend_1
   1328              {
   1329                  return S2W_EINVAL;
   1330              }
   1331              status = AppS2wParse_Hex(p, &param);
   1332              if( status != S2W_SUCCESS || param > 127 )
   \   000000B0   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_106:
   \   000000B4   0xB970             CBNZ.N   R0,??AppS2wCmd_154DataSend_1
   \   000000B6   0x9800             LDR      R0,[SP, #+0]
   \   000000B8   0x2880             CMP      R0,#+128
   \   000000BA   0xD20B             BCS.N    ??AppS2wCmd_154DataSend_1
   1333              {
   1334                  return S2W_EINVAL;
   1335              }    
   1336              dataReq.MsduLen = ( UINT8 )param;
   \   000000BC   0xF88D 0x00A0      STRB     R0,[SP, #+160]
   1337              p = AppS2wParse_NextParamGet(&ptr);
   \   000000C0   0x.... 0x....      BL       ?Subroutine34
   \                     ??CrossCallReturnLabel_195:
   \   000000C4   0x0004             MOVS     R4,R0
   1338              if (!p)
   \   000000C6   0xD005             BEQ.N    ??AppS2wCmd_154DataSend_1
   1339              {
   1340                  return S2W_EINVAL;
   1341              }
   1342          
   1343          	status = AppS2wParse_SecI( ptr, &dataReq.SecI );
   1344          	if( status != S2W_SUCCESS )
   \   000000C8   0x982C             LDR      R0,[SP, #+176]
   \   000000CA   0xF10D 0x01A3      ADD      R1,SP,#+163
   \   000000CE   0x.... 0x....      BL       AppS2wParse_SecI
   \   000000D2   0xB108             CBZ.N    R0,??AppS2wCmd_154DataSend_3
   1345          	{
   1346          		return S2W_EINVAL;
   \                     ??AppS2wCmd_154DataSend_1:
   \   000000D4   0x2002             MOVS     R0,#+2
   \   000000D6   0xE015             B.N      ??AppS2wCmd_154DataSend_4
   1347          	}
   1348          	status = AppS2wCmd_DataLenCheck( &dataReq );
   1349          	if( status == S2W_EINVAL )
   \                     ??AppS2wCmd_154DataSend_3:
   \   000000D8   0xA804             ADD      R0,SP,#+16
   \   000000DA   0x.... 0x....      BL       AppS2wCmd_DataLenCheck
   \   000000DE   0x2802             CMP      R0,#+2
   \   000000E0   0xD010             BEQ.N    ??AppS2wCmd_154DataSend_4
   1350          	{
   1351          		return S2W_EINVAL;
   1352          	}
   1353              /**< Copy the MSDU */
   1354              memcpy( (VOID *)dataReq.Msdu, (VOID *)p, dataReq.MsduLen );
   \   000000E2   0xF89D 0x20A0      LDRB     R2,[SP, #+160]
   \   000000E6   0x4621             MOV      R1,R4
   \   000000E8   0xA808             ADD      R0,SP,#+32
   \   000000EA   0x.... 0x....      BL       memcpy
   1355              
   1356              GsnWLRPAN_DataReq( &s2w154Ctx.wlrpanCtx, &dataReq );   
   \   000000EE   0x....             LDR.N    R4,??DataTable124
   \   000000F0   0x23A0             MOVS     R3,#+160
   \   000000F2   0xAA04             ADD      R2,SP,#+16
   \   000000F4   0x2100             MOVS     R1,#+0
   \   000000F6   0xF104 0x0098      ADD      R0,R4,#+152
   \   000000FA   0x.... 0x....      BL       GsnWLRPAN_WifDataSend
   1357              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   000000FE   0x.... 0x....      BL       ?Subroutine22
   1358              
   1359              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_70:
   \   00000102   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154DataSend_4:
   \   00000104   0xB02D             ADD      SP,SP,#+180
   \   00000106   0xBD30             POP      {R4,R5,PC}       ;; return
   1360          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine34:
   \   00000000   0xA82C             ADD      R0,SP,#+176
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   1361          

   \                                 In section .text, align 2, keep-with-next
   1362          UINT8
   1363          AppS2wCmd_154DataPurge(UINT8 *ptr)
   1364          {
   \                     AppS2wCmd_154DataPurge:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1365              /**< Purge data 
   1366              Handle  0-0xFF
   1367              */
   1368              GSN_WLRPAN_PURGE_REQ_T purgReq;
   1369              UINT32 param;
   1370              UINT8 status;
   1371              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_152:
   \   00000008   0x0004             MOVS     R4,R0
   1372              if (!p)
   \   0000000A   0xD008             BEQ.N    ??AppS2wCmd_154DataPurge_0
   1373              {
   1374                  return S2W_EINVAL;
   1375              }
   1376          
   1377              memset( &purgReq, 0, sizeof( purgReq ));
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0x.... 0x....      BL       ??Subroutine20_0
   1378          
   1379              status = AppS2wParse_Hex(p, &param);
   1380              if ( status != S2W_SUCCESS || param > 0xFF )
   \                     ??CrossCallReturnLabel_58:
   \   00000012   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_133:
   \   00000016   0xB910             CBNZ.N   R0,??AppS2wCmd_154DataPurge_0
   \   00000018   0x9800             LDR      R0,[SP, #+0]
   \   0000001A   0x28FF             CMP      R0,#+255
   \   0000001C   0xD901             BLS.N    ??AppS2wCmd_154DataPurge_1
   1381              {
   1382                  return S2W_EINVAL;
   \                     ??AppS2wCmd_154DataPurge_0:
   \   0000001E   0x2002             MOVS     R0,#+2
   \   00000020   0xE00C             B.N      ??AppS2wCmd_154DataPurge_2
   1383              } 
   1384              purgReq.MsduHandle = ( UINT8 )param;
   \                     ??AppS2wCmd_154DataPurge_1:
   \   00000022   0xF88D 0x0004      STRB     R0,[SP, #+4]
   1385          
   1386              GsnWLRPAN_PurgeReq( &s2w154Ctx.wlrpanCtx, &purgReq );   
   \   00000026   0x2301             MOVS     R3,#+1
   \   00000028   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_44:
   \   0000002C   0x2101             MOVS     R1,#+1
   \   0000002E   0xF104 0x0098      ADD      R0,R4,#+152
   \   00000032   0x.... 0x....      BL       GsnWLRPAN_WifDataSend
   1387              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   00000036   0x.... 0x....      BL       ?Subroutine22
   1388              
   1389              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_69:
   \   0000003A   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154DataPurge_2:
   \   0000003C   0xB004             ADD      SP,SP,#+16
   \   0000003E   0xBD10             POP      {R4,PC}          ;; return
   1390          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine28:
   \   00000000   0xA803             ADD      R0,SP,#+12
   \   00000002   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   1391          UINT8 
   1392          AppS2wCmd_154RxEnable(UINT8 *ptr)
   1393          {
   \                     AppS2wCmd_154RxEnable:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   1394              GSN_WLRPAN_RXENABLE_REQ_T rxenreq;
   1395              UINT32 param;
   1396              UINT8 status;
   1397              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine32_0
   \                     ??CrossCallReturnLabel_185:
   \   00000008   0x.... 0x....      BL       ?Subroutine20
   1398          
   1399              memset( &rxenreq, 0, sizeof( rxenreq ));
   1400          
   1401              if((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_61:
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xBF1C             ITT      NE 
   \   00000010   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000012   0x2800             CMPNE    R0,#+0
   \   00000014   0xD029             BEQ.N    ??AppS2wCmd_154RxEnable_0
   1402              {
   1403                  status = AppS2wParse_Hex(p, &param);
   1404                  if( ( status != S2W_SUCCESS )||( param > 0x00FFFFFF ) )
   \   00000016   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_132:
   \   0000001A   0xBB30             CBNZ.N   R0,??AppS2wCmd_154RxEnable_0
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0xF1B0 0x7F80      CMP      R0,#+16777216
   \   00000022   0xD222             BCS.N    ??AppS2wCmd_154RxEnable_0
   1405                  {
   1406                      return S2W_EINVAL;
   1407                  }
   1408                  rxenreq.RxOnTime = param;
   \   00000024   0x9001             STR      R0,[SP, #+4]
   1409                  p = AppS2wParse_NextParamGet(&ptr);
   \   00000026   0x.... 0x....      BL       ??Subroutine32_0
   \                     ??CrossCallReturnLabel_184:
   \   0000002A   0x0004             MOVS     R4,R0
   1410                  if (!p)
   \   0000002C   0xD01D             BEQ.N    ??AppS2wCmd_154RxEnable_0
   1411                  {
   1412                      return S2W_EINVAL;
   1413                  }
   1414                  status = AppS2wParse_Hex(p, &param);
   1415                  if( ( status != S2W_SUCCESS )||( param > 0x00FFFFFF ) )
   \   0000002E   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_105:
   \   00000032   0xB9D0             CBNZ.N   R0,??AppS2wCmd_154RxEnable_0
   \   00000034   0x9800             LDR      R0,[SP, #+0]
   \   00000036   0xF1B0 0x7F80      CMP      R0,#+16777216
   \   0000003A   0xD216             BCS.N    ??AppS2wCmd_154RxEnable_0
   1416                  {
   1417                      return S2W_EINVAL;
   1418                  }
   1419                  rxenreq.RxOnDuration = param;
   \   0000003C   0x9002             STR      R0,[SP, #+8]
   1420                  p = AppS2wParse_NextParamGet(&ptr);
   \   0000003E   0x.... 0x....      BL       ??Subroutine32_0
   \                     ??CrossCallReturnLabel_183:
   \   00000042   0x0004             MOVS     R4,R0
   1421                  if (!p)
   \   00000044   0xD011             BEQ.N    ??AppS2wCmd_154RxEnable_0
   1422                  {
   1423                      return S2W_EINVAL;
   1424                  }
   1425                  status = AppS2wParse_Hex(p, &param);
   1426                  if ( status != S2W_SUCCESS || param > 1 )
   \   00000046   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_104:
   \   0000004A   0xB970             CBNZ.N   R0,??AppS2wCmd_154RxEnable_0
   \   0000004C   0x9800             LDR      R0,[SP, #+0]
   \   0000004E   0x2802             CMP      R0,#+2
   \   00000050   0xD20B             BCS.N    ??AppS2wCmd_154RxEnable_0
   1427                  {
   1428                      return S2W_EINVAL;
   1429                  }
   1430                  rxenreq.DeferPermit = param;
   \   00000052   0xF88D 0x000C      STRB     R0,[SP, #+12]
   1431              }
   1432              else
   1433              {
   1434                  return S2W_EINVAL;
   1435              }
   1436              GsnWLRPAN_RXEnReq( &s2w154Ctx.wlrpanCtx, &rxenreq );   
   \   00000056   0x230C             MOVS     R3,#+12
   \   00000058   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_45:
   \   0000005C   0x2107             MOVS     R1,#+7
   \   0000005E   0x.... 0x....      BL       ?Subroutine19
   1437              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_51:
   \   00000062   0x.... 0x....      BL       ?Subroutine22
   1438              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_68:
   \   00000066   0x78A0             LDRB     R0,[R4, #+2]
   \   00000068   0xE000             B.N      ??AppS2wCmd_154RxEnable_1
   \                     ??AppS2wCmd_154RxEnable_0:
   \   0000006A   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154RxEnable_1:
   \   0000006C   0xB006             ADD      SP,SP,#+24
   \   0000006E   0xBD10             POP      {R4,PC}          ;; return
   1439          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine32:
   \   00000000   0xF88D 0x1004      STRB     R1,[SP, #+4]
   \                     ??Subroutine32_0:
   \   00000004   0xA805             ADD      R0,SP,#+20
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet
   1440          #if 0
   1441          UINT8 
   1442          AppS2wCmd_154OrphanRsp(UINT8 *ptr)
   1443          {
   1444              GSN_WLRPAN_ORPHAN_RSP_T Rsp;
   1445              UINT32 param,addr[2];
   1446              UINT8 status;
   1447              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   1448              if ((p) && (*p != '\0'))
   1449              {
   1450                  status = AppS2wParse_Hex(p, &param);
   1451                  if ( status != S2W_SUCCESS )
   1452                  {
   1453                      return S2W_EINVAL;
   1454                  }
   1455                  if( S2W_SUCCESS != AppS2wParse_Mac64( ptr, (UINT8*)addr ))
   1456                          return S2W_EINVAL;
   1457                  else
   1458                      memcpy(&Rsp.OrphanAddr,(UINT8*)addr, 8);
   1459                  p = AppS2wParse_NextParamGet(&ptr);
   1460                  if(!p)
   1461                  {
   1462                      return S2W_EINVAL;
   1463                  }
   1464                  status = AppS2wParse_Hex(p, &param);
   1465                  if( status != S2W_SUCCESS )
   1466                  {
   1467                      return S2W_EINVAL;
   1468                  }
   1469                  Rsp.ShortAddr = param;
   1470                  p = AppS2wParse_NextParamGet(&ptr);
   1471                  if(!p)
   1472                  {
   1473                      return S2W_EINVAL;
   1474                  }
   1475                  status = AppS2wParse_Hex(p, &param);
   1476                  if( status != S2W_SUCCESS )
   1477                  {
   1478                      return S2W_EINVAL;
   1479                  }
   1480                  if( param > 1)
   1481                  {
   1482                      return S2W_EINVAL;
   1483                  }
   1484                  Rsp.AssociatedMember = param;
   1485                  Rsp.SecI = NULL;
   1486              }
   1487              else
   1488              {
   1489                  return S2W_EINVAL;
   1490              }
   1491              GsnWLRPAN_OrphanRsp( &s2w154Ctx.wlrpanCtx, &Rsp );   
   1492              return GSN_SUCCESS;
   1493          }
   1494          #endif

   \                                 In section .text, align 2, keep-with-next
   1495          UINT8 
   1496          AppS2wCmd_154GTSReq(UINT8 *ptr)
   1497          {
   \                     AppS2wCmd_154GTSReq:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   1498              UINT32 param;
   1499              UINT8 status;
   1500              GSN_WLRPAN_GTS_REQ_T GTSReq;
   1501              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine32_0
   \                     ??CrossCallReturnLabel_182:
   \   00000008   0x.... 0x....      BL       ?Subroutine20
   1502          
   1503              memset( &GTSReq, 0, sizeof( GTSReq ));
   1504          
   1505              if((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_60:
   \   0000000C   0x2C00             CMP      R4,#+0
   \   0000000E   0xBF1C             ITT      NE 
   \   00000010   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000012   0x2800             CMPNE    R0,#+0
   \   00000014   0xD03D             BEQ.N    ??AppS2wCmd_154GTSReq_0
   1506              {
   1507                  status = AppS2wParse_Hex(p, &param);
   1508                  if (( status != S2W_SUCCESS ) || ( param == 0 ) || ( param > 7 ) )
   \   00000016   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_131:
   \   0000001A   0x2800             CMP      R0,#+0
   \   0000001C   0xD139             BNE.N    ??AppS2wCmd_154GTSReq_0
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0x2800             CMP      R0,#+0
   \   00000022   0xD036             BEQ.N    ??AppS2wCmd_154GTSReq_0
   \   00000024   0x2808             CMP      R0,#+8
   \   00000026   0xD234             BCS.N    ??AppS2wCmd_154GTSReq_0
   1509                  {
   1510                      return S2W_EINVAL;
   1511                  }
   1512                  GTSReq.Char.Length = param;
   \   00000028   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000002C   0xF360 0x0103      BFI      R1,R0,#+0,#+4
   \   00000030   0x.... 0x....      BL       ?Subroutine32
   1513                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_187:
   \   00000034   0x0004             MOVS     R4,R0
   1514                  if(!p)
   \   00000036   0xD02C             BEQ.N    ??AppS2wCmd_154GTSReq_0
   1515                  {
   1516                      return S2W_EINVAL;
   1517                  }
   1518                  status = AppS2wParse_Hex(p, &param);
   1519                  if(( status != S2W_SUCCESS ) && ( param > 1 ) )
   \   00000038   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_103:
   \   0000003C   0xB110             CBZ.N    R0,??AppS2wCmd_154GTSReq_1
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0x2802             CMP      R0,#+2
   \   00000042   0xD226             BCS.N    ??AppS2wCmd_154GTSReq_0
   1520                  {
   1521                      return S2W_EINVAL;
   1522                  }
   1523                  GTSReq.Char.Dir = param;
   \                     ??AppS2wCmd_154GTSReq_1:
   \   00000044   0x9800             LDR      R0,[SP, #+0]
   \   00000046   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   0000004A   0xF360 0x1104      BFI      R1,R0,#+4,#+1
   \   0000004E   0x.... 0x....      BL       ?Subroutine32
   1524                  p =AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_186:
   \   00000052   0x0004             MOVS     R4,R0
   1525                  if(!p)
   \   00000054   0xD01D             BEQ.N    ??AppS2wCmd_154GTSReq_0
   1526                  {
   1527                      return S2W_EINVAL;
   1528                  }
   1529                  status = AppS2wParse_Hex(p, &param);
   1530                  if(( status != S2W_SUCCESS ) && ( param > 1 ) )
   \   00000056   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_102:
   \   0000005A   0xB110             CBZ.N    R0,??AppS2wCmd_154GTSReq_2
   \   0000005C   0x9800             LDR      R0,[SP, #+0]
   \   0000005E   0x2802             CMP      R0,#+2
   \   00000060   0xD217             BCS.N    ??AppS2wCmd_154GTSReq_0
   1531                  {
   1532                      return S2W_EINVAL;
   1533                  }
   1534                  GTSReq.Char.CharType = param;
   \                     ??AppS2wCmd_154GTSReq_2:
   \   00000062   0x9800             LDR      R0,[SP, #+0]
   \   00000064   0xF89D 0x1004      LDRB     R1,[SP, #+4]
   \   00000068   0xF360 0x1145      BFI      R1,R0,#+5,#+1
   \   0000006C   0xF88D 0x1004      STRB     R1,[SP, #+4]
   1535          	    status = AppS2wParse_SecI( ptr, &GTSReq.SecI );
   1536          		if( status != S2W_SUCCESS )
   \   00000070   0xF10D 0x0105      ADD      R1,SP,#+5
   \   00000074   0x9805             LDR      R0,[SP, #+20]
   \   00000076   0x.... 0x....      BL       AppS2wParse_SecI
   \   0000007A   0xB950             CBNZ.N   R0,??AppS2wCmd_154GTSReq_0
   1537          		{
   1538          			return S2W_EINVAL;
   1539          		}
   1540                  
   1541              }
   1542              else
   1543              {
   1544                  return S2W_EINVAL;
   1545              }
   1546              GsnWLRPAN_GTSReq( &s2w154Ctx.wlrpanCtx, &GTSReq );   
   \   0000007C   0x.... 0x....      LDR.W    R4,??DataTable142
   \   00000080   0x230C             MOVS     R3,#+12
   \   00000082   0xAA01             ADD      R2,SP,#+4
   \   00000084   0x2104             MOVS     R1,#+4
   \   00000086   0x.... 0x....      BL       ?Subroutine19
   1547              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \                     ??CrossCallReturnLabel_50:
   \   0000008A   0x.... 0x....      BL       ?Subroutine22
   1548              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_67:
   \   0000008E   0x78A0             LDRB     R0,[R4, #+2]
   \   00000090   0xE000             B.N      ??AppS2wCmd_154GTSReq_3
   \                     ??AppS2wCmd_154GTSReq_0:
   \   00000092   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154GTSReq_3:
   \   00000094   0xB006             ADD      SP,SP,#+24
   \   00000096   0xBD10             POP      {R4,PC}          ;; return
   1549          }

   \                                 In section .text, align 2, keep-with-next
   1550          UINT8 
   1551          AppS2wCmd_154SyncReq(UINT8 *ptr)
   1552          {
   \                     AppS2wCmd_154SyncReq:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1553              UINT32 param;
   1554              UINT8 status;
   1555              GSN_WLRPAN_SYNC_REQ_T Req;
   1556              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_151:
   \   00000008   0x4604             MOV      R4,R0
   1557          
   1558              memset( &Req, 0, sizeof( Req ));
   \   0000000A   0x2203             MOVS     R2,#+3
   \   0000000C   0x.... 0x....      BL       ??Subroutine20_0
   1559          
   1560              if((p) && (*p != '\0'))
   \                     ??CrossCallReturnLabel_57:
   \   00000010   0x2C00             CMP      R4,#+0
   \   00000012   0xBF1C             ITT      NE 
   \   00000014   0x7820             LDRBNE   R0,[R4, #+0]
   \   00000016   0x2800             CMPNE    R0,#+0
   \   00000018   0xD01F             BEQ.N    ??AppS2wCmd_154SyncReq_0
   1561              {
   1562                  status = AppS2wParse_Hex(p, &param);
   1563                  if(( status != S2W_SUCCESS ) || ( param < 0x0C ) || ( param > 0x17 ) )
   \   0000001A   0x.... 0x....      BL       ?Subroutine26
   \                     ??CrossCallReturnLabel_130:
   \   0000001E   0xB9E0             CBNZ.N   R0,??AppS2wCmd_154SyncReq_0
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x380C             SUBS     R0,R0,#+12
   \   00000024   0x280C             CMP      R0,#+12
   \   00000026   0xD218             BCS.N    ??AppS2wCmd_154SyncReq_0
   1564                  {
   1565                      return S2W_EINVAL;
   1566                  }
   1567                  Req.LogicalChannel = param;
   \   00000028   0x.... 0x....      BL       ?Subroutine37
   1568                  p = AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_212:
   \   0000002C   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_150:
   \   00000030   0x0004             MOVS     R4,R0
   1569                  if(!p)
   \   00000032   0xD012             BEQ.N    ??AppS2wCmd_154SyncReq_0
   1570                  {
   1571                      return S2W_EINVAL;
   1572                  }
   1573                  status = AppS2wParse_Hex(p, &param);
   1574                  if(( status != S2W_SUCCESS ) || ( param > 1 ) )
   \   00000034   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_101:
   \   00000038   0xB978             CBNZ.N   R0,??AppS2wCmd_154SyncReq_0
   \   0000003A   0x9800             LDR      R0,[SP, #+0]
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD20C             BCS.N    ??AppS2wCmd_154SyncReq_0
   1575                  {
   1576                      return S2W_EINVAL;
   1577                  }
   1578                  Req.TrackBeacon = param;
   \   00000040   0xF88D 0x0006      STRB     R0,[SP, #+6]
   1579                  Req.ChannelPage = 0;
   \   00000044   0x2000             MOVS     R0,#+0
   \   00000046   0xF88D 0x0005      STRB     R0,[SP, #+5]
   1580              }
   1581              else
   1582              {
   1583                  return S2W_EINVAL;
   1584              }
   1585              GsnWLRPAN_SyncReq( &s2w154Ctx.wlrpanCtx, &Req );   
   \   0000004A   0x2303             MOVS     R3,#+3
   \   0000004C   0x.... 0x....      BL       ?Subroutine18
   \                     ??CrossCallReturnLabel_46:
   \   00000050   0x210B             MOVS     R1,#+11
   \   00000052   0x.... 0x....      BL       ?Subroutine19
   1586              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_49:
   \   00000056   0x78A0             LDRB     R0,[R4, #+2]
   \   00000058   0xE000             B.N      ??AppS2wCmd_154SyncReq_1
   \                     ??AppS2wCmd_154SyncReq_0:
   \   0000005A   0x2002             MOVS     R0,#+2
   \                     ??AppS2wCmd_154SyncReq_1:
   \   0000005C   0xB004             ADD      SP,SP,#+16
   \   0000005E   0xBD10             POP      {R4,PC}          ;; return
   1587          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine37:
   \   00000000   0x9800             LDR      R0,[SP, #+0]
   \   00000002   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   00000006   0x4770             BX       LR
   1588          #ifdef GSN_802_15_4_TEST_SUPPORT
   1589          UINT8 AppS2wCmd_154TmrReq(UINT8 *ptr)
   1590          {
   1591              UINT32 param;
   1592              UINT8 status;
   1593              GSN_WLP_TMR_REQ_T tmrReq;
   1594              UINT8* p = AppS2wParse_NextParamGet(&ptr);
   1595              if(!p)
   1596              {
   1597                  return S2W_EINVAL;
   1598              }
   1599              status = AppS2wParse_Hex(p, &param);
   1600              if( status != S2W_SUCCESS || param > 0xFFFFFF )
   1601              {
   1602                  return S2W_EINVAL;
   1603              } 
   1604              tmrReq.NumOfSymbol = param;
   1605              
   1606              p = AppS2wParse_NextParamGet(&ptr);
   1607              if(!p)
   1608              {
   1609                  return S2W_EINVAL;
   1610              }
   1611              status = AppS2wParse_Hex(p, &param);
   1612              if( status != S2W_SUCCESS || param > 0x1 )
   1613              {
   1614                  return S2W_EINVAL;
   1615              } 
   1616              tmrReq.IsPeriodic = ( UINT8 )param;
   1617              
   1618              GsnWLRPAN_TmrReq( &s2w154Ctx.wlrpanCtx, &tmrReq );   
   1619              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   1620              
   1621              return s2w154Ctx.operationStatus;
   1622          }
   1623          #if 0
   1624          UINT8
   1625          AppS2wCmd_154GenericTest(UINT8 *ptr)
   1626          {
   1627              UINT32 array[10];
   1628              UINT8* p, i, status;
   1629              for( i = 0; i < 10; i++ )
   1630              {
   1631                  p = AppS2wParse_NextParamGet(&ptr);
   1632                  if((!p) || (*p == '\0'))
   1633                  {
   1634                      break;
   1635                  }
   1636          
   1637                  status = AppS2wParse_Hex(p, &array[i]);
   1638              }
   1639              if(array[0] == 6 )semRelease = TRUE;
   1640              GsnWLRPAN_GenericReq( &s2w154Ctx.wlrpanCtx, array );   
   1641              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   1642              return s2w154Ctx.operationStatus;
   1643          }
   1644          #endif
   1645          #endif

   \                                 In section .bss, align 4
   1646          UINT32 size[6];
   \                     size:
   \   00000000                      DS8 24

   \                                 In section .text, align 4, keep-with-next
   1647          UINT8
   1648          AppS2wCmd_154SetReq(UINT8 *ptr)
   1649          {
   \                     AppS2wCmd_154SetReq:
   \   00000000   0xB571             PUSH     {R0,R4-R6,LR}
   \   00000002   0xB0A1             SUB      SP,SP,#+132
   1650              GSN_WLRPAN_SET_REQ_T setReq;
   1651              UINT32 param;
   1652              UINT8 status;
   1653              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_170:
   \   00000008   0x4605             MOV      R5,R0
   1654          
   1655              memset( &setReq, 0, sizeof( setReq ));
   \   0000000A   0x2250             MOVS     R2,#+80
   \   0000000C   0x2100             MOVS     R1,#+0
   \   0000000E   0xA80C             ADD      R0,SP,#+48
   \   00000010   0x.... 0x....      BL       memset
   1656          
   1657              if(!p)
   \   00000014   0x2D00             CMP      R5,#+0
   \   00000016   0xF000 0x8195      BEQ.W    ??AppS2wCmd_154SetReq_1
   1658              {
   1659                  return S2W_EINVAL;
   1660              }
   1661              status = AppS2wParse_Int(p, &param);
   1662              if( ( status != S2W_SUCCESS ) || ( param > macKey ) )
   \   0000001A   0xA900             ADD      R1,SP,#+0
   \   0000001C   0x4628             MOV      R0,R5
   \   0000001E   0x.... 0x....      BL       AppS2wParse_Int
   \   00000022   0x2800             CMP      R0,#+0
   \   00000024   0xD16C             BNE.N    ??AppS2wCmd_154SetReq_2
   \   00000026   0x9800             LDR      R0,[SP, #+0]
   \   00000028   0x2842             CMP      R0,#+66
   \   0000002A   0xD269             BCS.N    ??AppS2wCmd_154SetReq_2
   1663              {
   1664                  return S2W_EINVAL;
   1665              }    
   1666              setReq.Attribute = param;
   \   0000002C   0xF8AD 0x0030      STRH     R0,[SP, #+48]
   1667              
   1668              p = AppS2wParse_NextParamGet(&ptr);
   \   00000030   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_169:
   \   00000034   0x0005             MOVS     R5,R0
   1669              if( !p )    return S2W_EINVAL;
   \   00000036   0xD063             BEQ.N    ??AppS2wCmd_154SetReq_2
   1670              
   1671              switch( setReq.Attribute )
   \   00000038   0xF8BD 0x0030      LDRH     R0,[SP, #+48]
   \   0000003C   0x.... 0x....      LDR.W    R4,??DataTable142
   \   00000040   0x2841             CMP      R0,#+65
   \   00000042   0xF200 0x8188      BHI.W    ??AppS2wCmd_154SetReq_3
   \   00000046   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??AppS2wCmd_154SetReq_0:
   \   0000004A   0x0042 0x0083      DC16     0x42,0x83,0x89,0x42
   \              0x0089 0x0042
   \   00000052   0x0078 0x0042      DC16     0x78,0x42,0x42,0x42
   \              0x0042 0x0042
   \   0000005A   0x0042 0x0042      DC16     0x42,0x42,0x42,0x78
   \              0x0042 0x0078
   \   00000062   0x0042 0x0078      DC16     0x42,0x78,0x42,0x42
   \              0x0042 0x0042
   \   0000006A   0x0178 0x0042      DC16     0x178,0x42,0x42,0x42
   \              0x0042 0x0042
   \   00000072   0x0042 0x0042      DC16     0x42,0x42,0x42,0x42
   \              0x0042 0x0042
   \   0000007A   0x0042 0x0078      DC16     0x42,0x78,0x42,0x83
   \              0x0042 0x0083
   \   00000082   0x0042 0x0078      DC16     0x42,0x78,0x42,0x42
   \              0x0042 0x0042
   \   0000008A   0x0089 0x0186      DC16     0x89,0x186,0x5C,0x9F
   \              0x005C 0x009F
   \   00000092   0x005C 0x00DE      DC16     0x5C,0xDE,0x5C,0x83
   \              0x005C 0x0083
   \   0000009A   0x0047 0x004E      DC16     0x47,0x4E,0x91,0x55
   \              0x0091 0x0055
   \   000000A2   0x0091 0x0089      DC16     0x91,0x89,0x78,0x42
   \              0x0078 0x0042
   \   000000AA   0x0083 0x0042      DC16     0x83,0x42,0x42,0x42
   \              0x0042 0x0042
   \   000000B2   0x0078 0x0042      DC16     0x78,0x42,0x42,0x64
   \              0x0042 0x0064
   \   000000BA   0x011C 0x005C      DC16     0x11C,0x5C,0x64,0x137
   \              0x0064 0x0137
   \   000000C2   0x005C 0x0064      DC16     0x5C,0x64,0x158,0x5C
   \              0x0158 0x005C
   \   000000CA   0x0064 0x016E      DC16     0x64,0x16E
   1672              {
   1673                  case macAssociatedPANCoord:
   1674                  case macAssociationPermit:
   1675                  case macAutoRequest:
   1676                  case macBattLifeExt:
   1677                  case macGTSPermit:
   1678                  case macPromiscuousMode:
   1679                  case macRxOnWhenIdle:
   1680                  case macSecurityEnabled:
   1681                  case macTimestampSupported:
   1682                      
   1683                  case macAckWaitDuration:
   1684                  case macBattLifeExtPeriods:
   1685                  case macBeaconPayloadLength:
   1686                  case macBeaconOrder:  
   1687                  case macSuperframeOrder:
   1688                  case macBSN:
   1689                  case macDSN:
   1690                  case macMinBE:
   1691                  case macMaxBE:
   1692                  case macMaxCSMABackoffs:
   1693                  case macMaxFrameRetries:
   1694                  case macMinLIFSPeriod:
   1695                  case macMinSIFSPeriod:
   1696                  case macResponseWaitTime:
   1697                  case phyCurrentChannel:
   1698                  case phyTransmitPower:
   1699                  case phyCCAMode:
   1700                  case phyCurrentPage:
   1701                  case phySHRDuration:
   1702                  case phySymbolsPerOctet:
   1703                      status = AppS2wParse_Hex(p, &param);
   1704                      if( status != S2W_SUCCESS )  return S2W_EINVAL;
   \                     ??AppS2wCmd_154SetReq_4:
   \   000000CE   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_13:
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD114             BNE.N    ??AppS2wCmd_154SetReq_2
   \   000000D6   0xE023             B.N      ??AppS2wCmd_154SetReq_5
   1705                      setReq.Value[0] = param;
   1706                      break;
   1707                  case macAutoReqSeurityLevel:
   1708          			status = AppS2wParse_Hex( p, &param );
   1709          			if( ( status != S2W_SUCCESS ) || ( param > 7 ) )
   \                     ??AppS2wCmd_154SetReq_6:
   \   000000D8   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_12:
   \   000000DC   0x2800             CMP      R0,#+0
   \   000000DE   0xD10F             BNE.N    ??AppS2wCmd_154SetReq_2
   \   000000E0   0x9800             LDR      R0,[SP, #+0]
   \   000000E2   0x2808             CMP      R0,#+8
   \   000000E4   0xE013             B.N      ??AppS2wCmd_154SetReq_7
   1710          				return S2W_EINVAL;
   1711          			setReq.Value[0] = param;
   1712          			break;
   1713                  case macAutoReqKeyIdMode:
   1714          			status = AppS2wParse_Hex( p, &param );
   1715          			if( ( status != S2W_SUCCESS ) || ( param > 3 ) )
   \                     ??AppS2wCmd_154SetReq_8:
   \   000000E6   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_11:
   \   000000EA   0x2800             CMP      R0,#+0
   \   000000EC   0xD108             BNE.N    ??AppS2wCmd_154SetReq_2
   \   000000EE   0x9800             LDR      R0,[SP, #+0]
   \   000000F0   0x2804             CMP      R0,#+4
   \   000000F2   0xE00C             B.N      ??AppS2wCmd_154SetReq_7
   1716          				return S2W_EINVAL;
   1717          			setReq.Value[0] = param;
   1718          			break;
   1719          		case macAutoReqKeyIndex:
   1720          			status = AppS2wParse_Hex( p, &param );
   1721          			if( ( status != S2W_SUCCESS ) || ( param == 0 ) )
   \                     ??AppS2wCmd_154SetReq_9:
   \   000000F4   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_10:
   \   000000F8   0x2800             CMP      R0,#+0
   \   000000FA   0xD101             BNE.N    ??AppS2wCmd_154SetReq_2
   \   000000FC   0x9800             LDR      R0,[SP, #+0]
   \   000000FE   0xB978             CBNZ.N   R0,??AppS2wCmd_154SetReq_5
   \                     ??AppS2wCmd_154SetReq_2:
   \   00000100   0xE120             B.N      ??AppS2wCmd_154SetReq_1
   1722          				return S2W_EINVAL;
   1723          			setReq.Value[0] = param;
   1724          			break;
   1725          
   1726          		case macKeyTableEntries:
   1727          		case macDeviceTableEntries:
   1728          		case macSecurityLevelTableEntries:
   1729          		case macKeyIdLookupListEntries:
   1730          		case macKeyDeviceListEntries:
   1731          		case macKeyUsageListEntries:
   1732                      status = AppS2wParse_Hex( p, &param );
   1733          			if( ( status != S2W_SUCCESS )||( param > GSN_WLP_MAX_SEC_ENTRIES ) )
   \                     ??AppS2wCmd_154SetReq_10:
   \   00000102   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_9:
   \   00000106   0x2800             CMP      R0,#+0
   \   00000108   0xD1FA             BNE.N    ??AppS2wCmd_154SetReq_2
   \   0000010A   0x9800             LDR      R0,[SP, #+0]
   \   0000010C   0x280B             CMP      R0,#+11
   \                     ??AppS2wCmd_154SetReq_7:
   \   0000010E   0xD307             BCC.N    ??AppS2wCmd_154SetReq_5
   \                     ??AppS2wCmd_154SetReq_11:
   \   00000110   0xE118             B.N      ??AppS2wCmd_154SetReq_1
   1734          				return S2W_EINVAL;
   1735          			setReq.Value[0] = param;
   1736          			break;
   1737          		
   1738                  case macKeyUsageListIndex:		
   1739                  case macKeyTableIndex:
   1740          		case macKeyDeviceListIndex:
   1741          		case macKeyIdLookupListIndex:
   1742          			status = AppS2wParse_Hex( p, &param );
   1743          			if( ( status != S2W_SUCCESS )||( param >= GSN_WLP_MAX_SEC_ENTRIES ) )
   \                     ??AppS2wCmd_154SetReq_12:
   \   00000112   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_8:
   \   00000116   0x2800             CMP      R0,#+0
   \   00000118   0xD1FA             BNE.N    ??AppS2wCmd_154SetReq_11
   \   0000011A   0x9800             LDR      R0,[SP, #+0]
   \   0000011C   0x280A             CMP      R0,#+10
   \   0000011E   0xD2F7             BCS.N    ??AppS2wCmd_154SetReq_11
   1744                          return S2W_EINVAL;
   1745                      setReq.Value[0] = param;
   \                     ??AppS2wCmd_154SetReq_5:
   \   00000120   0x9800             LDR      R0,[SP, #+0]
   \   00000122   0xF88D 0x0035      STRB     R0,[SP, #+53]
   1746                      break;
   1747                  
   1748                  case macPANId:
   1749                  case macCoordShortAddress:
   1750                  case macShortAddress:
   1751                  case macSyncSymbolOffset:
   1752                  case macTransactionPersistenceTime:
   1753          		case macPANCoordShortAddress:
   1754                  case phyMaxFrameDuration:
   1755                      status = AppS2wParse_Hex(p, &param);
   1756                      if ( status != S2W_SUCCESS )  
   1757                          return S2W_EINVAL;
   1758                      memcpy(setReq.Value, &param, sizeof(UINT16) );
   1759                      break;
   1760                 
   1761                  case macBeaconTxTime:
   1762                  case macMaxFrameTotalWaitTime:
   1763                  case phyChannelsSupported:
   1764          		case macFrameCounter:
   1765                      status = AppS2wParse_Hex(p, &param);
   1766                      if ( status != S2W_SUCCESS )  
   1767                          return S2W_EINVAL;
   1768                      memcpy(setReq.Value, &param, sizeof(UINT32) );
   1769                      break;    
   1770                 
   1771                  case macExtendedAddress:
   1772                  case macCoordExtendedAddress:
   1773          		case macPANCoordExtendedAddress:
   1774                      if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)setReq.Value ))
   1775                          return S2W_EINVAL;
   1776                      break;
   1777          
   1778          		case macDefaultKeySource:
   1779          		case macAutoReqKeySource:
   1780          			status = AppS2wParse_Hex(p, &param);
   1781                      if(( status != S2W_SUCCESS )||( param >= GSN_WLP_MAX_SEC_ENTRIES ) )  
   1782                          return S2W_EINVAL;
   1783                  	setReq.AttributeIdx = ( UINT16 )param;
   1784          
   1785          			p = AppS2wParse_NextParamGet(&ptr);
   1786          			if( !p )	return S2W_EINVAL;
   1787          			if( S2W_SUCCESS != AppS2wParse_Mac64( p, (UINT8*)setReq.Value ))
   1788                          return S2W_EINVAL;
   1789          			break;
   1790          
   1791          		case macDeviceTable:
   1792          			{
   1793          				GSN_WLRPAN_DEVICE_DESC_T DeviceTable;
   1794          
   1795          				status = AppS2wParse_Hex(p, &param);
   1796          	            if(( status != S2W_SUCCESS )||
   1797          					( param >= GSN_WLP_MAX_SEC_ENTRIES ) )  
   1798          	                return S2W_EINVAL;
   1799          				setReq.AttributeIdx = ( UINT16 )param; 
   1800          
   1801          				p = AppS2wParse_NextParamGet(&ptr);
   1802          				if( !p )	return S2W_EINVAL;
   1803          				status = AppS2wParse_Hex(p, &param);
   1804          				if( status != S2W_SUCCESS )  
   1805          					return S2W_EINVAL;
   1806          				DeviceTable.PANId = (UINT16)param;
   1807          
   1808          				p = AppS2wParse_NextParamGet(&ptr);
   1809          				if( !p )	return S2W_EINVAL;
   1810          				status = AppS2wParse_Hex(p, &param);
   1811          				if( status != S2W_SUCCESS )		return S2W_EINVAL;
   1812          				DeviceTable.ShortAddress = (UINT16)param;
   1813          
   1814          				p = AppS2wParse_NextParamGet(&ptr);
   1815          				if( !p )	return S2W_EINVAL;
   1816          				if( S2W_SUCCESS != 
   1817          						AppS2wParse_Mac64( p, (UINT8*)&DeviceTable.ExtAddress))
   1818          	                return S2W_EINVAL;
   1819          
   1820          				p = AppS2wParse_NextParamGet(&ptr);
   1821          				if( !p )	return S2W_EINVAL;
   1822          				status = AppS2wParse_Hex(p, &param);
   1823          				if( status != S2W_SUCCESS )		return S2W_EINVAL;
   1824          				DeviceTable.FrameCounter = param;
   1825          
   1826          				p = AppS2wParse_NextParamGet(&ptr);
   1827          				if( !p )	return S2W_EINVAL;
   1828          				status = AppS2wParse_Hex(p, &param);
   1829          				if(( status != S2W_SUCCESS )||( param > 1 ) )  
   1830          					return S2W_EINVAL;
   1831          				DeviceTable.Exempt = ( UINT8 )param;
   1832          
   1833          				memcpy( setReq.Value, &DeviceTable, 
   1834          					sizeof( GSN_WLRPAN_DEVICE_DESC_T ));
   1835          
   1836          	            break;				
   1837          			}
   1838          		case macSecurityLevelTable:
   1839          			{
   1840          				GSN_WLRPAN_SECURITY_LEVEL_DESC_T SecILevelTable;
   1841          				status = AppS2wParse_Hex(p, &param);
   1842          	            if(( status != S2W_SUCCESS )||
   1843          					( param >= GSN_WLP_MAX_SEC_ENTRIES ) )  
   1844          	                return S2W_EINVAL;
   1845          				setReq.AttributeIdx = ( UINT16 )param;
   1846          
   1847          				p = AppS2wParse_NextParamGet(&ptr);
   1848          				if( !p )	return S2W_EINVAL;
   1849          				status = AppS2wParse_Hex(p, &param);				
   1850          				if(( status != S2W_SUCCESS )||( param > 3 ) )  
   1851          					return S2W_EINVAL;
   1852          				SecILevelTable.FrameType = ( UINT8 )param;
   1853          
   1854          				p = AppS2wParse_NextParamGet(&ptr);
   1855          				if( !p )	return S2W_EINVAL;
   1856          				status = AppS2wParse_Hex(p, &param);
   1857          				if(( status != S2W_SUCCESS )||( param > 9 ) )  
   1858          					return S2W_EINVAL;
   1859          				SecILevelTable.CmdFrmIdentifier = ( UINT8 )param;
   1860          
   1861          				p = AppS2wParse_NextParamGet(&ptr);
   1862          				if( !p )	return S2W_EINVAL;
   1863          				status = AppS2wParse_Hex(p, &param);
   1864          				if(( status != S2W_SUCCESS )||( param > 7 ) )  
   1865          					return S2W_EINVAL;
   1866          				SecILevelTable.SecIMinimum = ( UINT8 )param;
   1867          
   1868          				p = AppS2wParse_NextParamGet(&ptr);
   1869          				if( !p )	return S2W_EINVAL;
   1870          				status = AppS2wParse_Hex(p, &param);
   1871          				if(( status != S2W_SUCCESS )||( param > 1 ) )  
   1872          					return S2W_EINVAL;
   1873          				SecILevelTable.DeviceOverrideSecIMinimum = ( UINT8 )param;
   1874          
   1875          				memcpy( setReq.Value, &SecILevelTable,
   1876          					sizeof( GSN_WLRPAN_SECURITY_LEVEL_DESC_T ));
   1877          				break;
   1878          				
   1879          			}
   1880          		case macKeyIdLookupList:
   1881          			{
   1882          				GSN_WLRPAN_KEYID_LOOKUP_DESC_T LookupDesc;
   1883          				status = AppS2wParse_Hex( p, &param );
   1884          				if( ( status != S2W_SUCCESS ) || ( param > 1 ) )
   1885          					return S2W_EINVAL;
   1886          				LookupDesc.LookupDataSize = ( param == 0 ) ? 5 : 9 ;
   1887          				p = AppS2wParse_NextParamGet(&ptr);
   1888          				if( !p )	return S2W_EINVAL;
   1889          				status = AppS2wParse_LookupData( p, LookupDesc.LookupData, 
   1890          							LookupDesc.LookupDataSize );
   1891          				if( status != S2W_SUCCESS )  
   1892          					return S2W_EINVAL;
   1893          				memcpy( setReq.Value, &LookupDesc, 
   1894          					sizeof( GSN_WLRPAN_KEYID_LOOKUP_DESC_T ));
   1895          				break;
   1896          			}
   1897          		case macKeyDeviceList:
   1898          			{
   1899          				GSN_WLRPAN_KEY_DEVICE_DESC_T DevDesc;
   1900          				status = AppS2wParse_Hex( p, &param );
   1901          				if( status != S2W_SUCCESS ) 
   1902          					return S2W_EINVAL;
   1903          				DevDesc.DeviceDescHandle = ( UINT8 )param;
   1904          
   1905          				p = AppS2wParse_NextParamGet(&ptr);
   1906          				if( !p )	return S2W_EINVAL;
   1907          				status = AppS2wParse_Hex(p, &param);
   1908          				if(( status != S2W_SUCCESS )||( param > 1 ) )  
   1909          					return S2W_EINVAL;
   1910          				DevDesc.UniqueDevice = ( UINT8 )param;
   1911          
   1912          				p = AppS2wParse_NextParamGet(&ptr);
   1913          				if( !p )	return S2W_EINVAL;
   1914          				status = AppS2wParse_Hex(p, &param);
   1915          				if(( status != S2W_SUCCESS )||( param > 1 ) )  
   1916          					return S2W_EINVAL;
   1917          				DevDesc.Blacklisted = ( UINT8 )param;
   1918          				
   1919          				memcpy( setReq.Value, &DevDesc, 
   1920          					sizeof( GSN_WLRPAN_KEY_DEVICE_DESC_T ));
   1921          				break;
   1922          			}
   1923          		case macKeyUsageList:
   1924          			{
   1925          				GSN_WLRPAN_KEY_USAGE_DESC_T UsageDesc;
   1926          				status = AppS2wParse_Hex( p, &param );
   1927          				if(( status != S2W_SUCCESS )||( param > 3 )) 
   1928          					return S2W_EINVAL;
   1929          				UsageDesc.FrameType = ( UINT8 )param;
   1930          
   1931          				p = AppS2wParse_NextParamGet(&ptr);
   1932          				if( !p )	return S2W_EINVAL;
   1933          				status = AppS2wParse_Hex(p, &param);
   1934          				if(( status != S2W_SUCCESS )||( param > 9 ) )  
   1935          					return S2W_EINVAL;
   1936          				UsageDesc.CmdFrmIdentifier = ( UINT8 )param;
   1937          
   1938          				memcpy( setReq.Value, &UsageDesc,
   1939          					sizeof( GSN_WLRPAN_KEY_USAGE_DESC_T ) );
   1940          				break;
   1941          			}
   1942          		case macKey:
   1943          	    		{
   1944          				status = AppS2wParse_Key( p, setReq.Value );
   1945          				if( status != S2W_SUCCESS )
   1946          	        		return S2W_EINVAL;
   1947          				setReq.AttributeLength = 16;
   1948          				break;
   1949          	    		}
   1950          		case macBeaconPayload:
   1951          			{
   1952          				UINT8 *pPtr = p;
   1953          				p = AppS2wParse_NextParamGet(&ptr);
   1954          	    		if( !p )	return S2W_EINVAL;
   1955          				status = AppS2wParse_Int( p, (UINT32 *)(&setReq.AttributeLength));
   1956          				memcpy( setReq.Value, pPtr, setReq.AttributeLength );
   1957          				break;
   1958          			}
   1959                     
   1960                  default:
   1961                      s2w154Ctx.operationStatus = S2W_FAILURE;
   1962                      return S2W_EINVAL;
   1963                      
   1964              }
   1965              
   1966              GsnWLRPAN_SetReq( &s2w154Ctx.wlrpanCtx, &setReq );
   \                     ??AppS2wCmd_154SetReq_13:
   \   00000126   0xA90C             ADD      R1,SP,#+48
   \   00000128   0xF104 0x0098      ADD      R0,R4,#+152
   \   0000012C   0x.... 0x....      BL       GsnWLRPAN_SetReq
   1967              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   00000130   0x.... 0x....      BL       ?Subroutine22
   1968              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_66:
   \   00000134   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154SetReq_14:
   \   00000136   0xB022             ADD      SP,SP,#+136
   \   00000138   0xBD70             POP      {R4-R6,PC}       ;; return
   \                     ??AppS2wCmd_154SetReq_15:
   \   0000013A   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_7:
   \   0000013E   0x2800             CMP      R0,#+0
   \   00000140   0xD1E6             BNE.N    ??AppS2wCmd_154SetReq_11
   \   00000142   0x2202             MOVS     R2,#+2
   \                     ??AppS2wCmd_154SetReq_16:
   \   00000144   0xA900             ADD      R1,SP,#+0
   \                     ??AppS2wCmd_154SetReq_17:
   \   00000146   0xF10D 0x0035      ADD      R0,SP,#+53
   \   0000014A   0x.... 0x....      BL       memcpy
   \   0000014E   0xE7EA             B.N      ??AppS2wCmd_154SetReq_13
   \                     ??AppS2wCmd_154SetReq_18:
   \   00000150   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_6:
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD1DB             BNE.N    ??AppS2wCmd_154SetReq_11
   \   00000158   0x2204             MOVS     R2,#+4
   \   0000015A   0xE7F3             B.N      ??AppS2wCmd_154SetReq_16
   \                     ??AppS2wCmd_154SetReq_19:
   \   0000015C   0xF10D 0x0135      ADD      R1,SP,#+53
   \   00000160   0x4628             MOV      R0,R5
   \                     ??AppS2wCmd_154SetReq_20:
   \   00000162   0x.... 0x....      BL       AppS2wParse_Mac64
   \   00000166   0x2800             CMP      R0,#+0
   \   00000168   0xD1D2             BNE.N    ??AppS2wCmd_154SetReq_11
   \   0000016A   0xE7DC             B.N      ??AppS2wCmd_154SetReq_13
   \                     ??AppS2wCmd_154SetReq_21:
   \   0000016C   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_5:
   \   00000170   0x2800             CMP      R0,#+0
   \   00000172   0xD1CD             BNE.N    ??AppS2wCmd_154SetReq_11
   \   00000174   0x9800             LDR      R0,[SP, #+0]
   \   00000176   0x280A             CMP      R0,#+10
   \   00000178   0xD2CA             BCS.N    ??AppS2wCmd_154SetReq_11
   \   0000017A   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_173:
   \   0000017E   0x0005             MOVS     R5,R0
   \   00000180   0xD0C6             BEQ.N    ??AppS2wCmd_154SetReq_11
   \   00000182   0xF10D 0x0135      ADD      R1,SP,#+53
   \   00000186   0xE7EC             B.N      ??AppS2wCmd_154SetReq_20
   \                     ??AppS2wCmd_154SetReq_22:
   \   00000188   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_4:
   \   0000018C   0x2800             CMP      R0,#+0
   \   0000018E   0xD1BF             BNE.N    ??AppS2wCmd_154SetReq_11
   \   00000190   0x9800             LDR      R0,[SP, #+0]
   \   00000192   0x280A             CMP      R0,#+10
   \   00000194   0xD2BC             BCS.N    ??AppS2wCmd_154SetReq_11
   \   00000196   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_172:
   \   0000019A   0x0005             MOVS     R5,R0
   \   0000019C   0xD0B8             BEQ.N    ??AppS2wCmd_154SetReq_11
   \   0000019E   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_100:
   \   000001A2   0x2800             CMP      R0,#+0
   \   000001A4   0xD1B4             BNE.N    ??AppS2wCmd_154SetReq_11
   \   000001A6   0x.... 0x....      BL       ?Subroutine36
   \                     ??CrossCallReturnLabel_211:
   \   000001AA   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_168:
   \   000001AE   0x0005             MOVS     R5,R0
   \   000001B0   0xD0AE             BEQ.N    ??AppS2wCmd_154SetReq_11
   \   000001B2   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_99:
   \   000001B6   0x2800             CMP      R0,#+0
   \   000001B8   0xD14D             BNE.N    ??AppS2wCmd_154SetReq_23
   \   000001BA   0x9800             LDR      R0,[SP, #+0]
   \   000001BC   0xF8AD 0x001A      STRH     R0,[SP, #+26]
   \   000001C0   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_167:
   \   000001C4   0x0005             MOVS     R5,R0
   \   000001C6   0xD042             BEQ.N    ??AppS2wCmd_154SetReq_24
   \   000001C8   0xA908             ADD      R1,SP,#+32
   \   000001CA   0x.... 0x....      BL       AppS2wParse_Mac64
   \   000001CE   0x2800             CMP      R0,#+0
   \   000001D0   0xD141             BNE.N    ??AppS2wCmd_154SetReq_23
   \   000001D2   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_166:
   \   000001D6   0x0005             MOVS     R5,R0
   \   000001D8   0xD039             BEQ.N    ??AppS2wCmd_154SetReq_24
   \   000001DA   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_98:
   \   000001DE   0x2800             CMP      R0,#+0
   \   000001E0   0xD139             BNE.N    ??AppS2wCmd_154SetReq_23
   \   000001E2   0x9800             LDR      R0,[SP, #+0]
   \   000001E4   0x900A             STR      R0,[SP, #+40]
   \   000001E6   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_165:
   \   000001EA   0x0005             MOVS     R5,R0
   \   000001EC   0xD02F             BEQ.N    ??AppS2wCmd_154SetReq_24
   \   000001EE   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_97:
   \   000001F2   0x2800             CMP      R0,#+0
   \   000001F4   0xD12F             BNE.N    ??AppS2wCmd_154SetReq_23
   \   000001F6   0x9800             LDR      R0,[SP, #+0]
   \   000001F8   0x2802             CMP      R0,#+2
   \   000001FA   0xD22F             BCS.N    ??AppS2wCmd_154SetReq_25
   \   000001FC   0xF88D 0x002C      STRB     R0,[SP, #+44]
   \   00000200   0x2218             MOVS     R2,#+24
   \   00000202   0xA906             ADD      R1,SP,#+24
   \   00000204   0xE79F             B.N      ??AppS2wCmd_154SetReq_17
   \                     ??AppS2wCmd_154SetReq_26:
   \   00000206   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_3:
   \   0000020A   0x2800             CMP      R0,#+0
   \   0000020C   0xD123             BNE.N    ??AppS2wCmd_154SetReq_23
   \   0000020E   0x9800             LDR      R0,[SP, #+0]
   \   00000210   0x280A             CMP      R0,#+10
   \   00000212   0xD223             BCS.N    ??AppS2wCmd_154SetReq_25
   \   00000214   0x.... 0x....      BL       ?Subroutine30
   \                     ??CrossCallReturnLabel_171:
   \   00000218   0x0005             MOVS     R5,R0
   \   0000021A   0xD018             BEQ.N    ??AppS2wCmd_154SetReq_24
   \   0000021C   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_96:
   \   00000220   0x2800             CMP      R0,#+0
   \   00000222   0xD118             BNE.N    ??AppS2wCmd_154SetReq_23
   \   00000224   0x9800             LDR      R0,[SP, #+0]
   \   00000226   0x2804             CMP      R0,#+4
   \   00000228   0xD218             BCS.N    ??AppS2wCmd_154SetReq_25
   \   0000022A   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000022E   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_164:
   \   00000232   0x0005             MOVS     R5,R0
   \   00000234   0xD00B             BEQ.N    ??AppS2wCmd_154SetReq_24
   \   00000236   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_95:
   \   0000023A   0x2800             CMP      R0,#+0
   \   0000023C   0xD10B             BNE.N    ??AppS2wCmd_154SetReq_23
   \   0000023E   0x9800             LDR      R0,[SP, #+0]
   \   00000240   0x280A             CMP      R0,#+10
   \   00000242   0xD20B             BCS.N    ??AppS2wCmd_154SetReq_25
   \   00000244   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000248   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_163:
   \   0000024C   0x0005             MOVS     R5,R0
   \                     ??AppS2wCmd_154SetReq_24:
   \   0000024E   0xD079             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   00000250   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_94:
   \   00000254   0x2800             CMP      R0,#+0
   \                     ??AppS2wCmd_154SetReq_23:
   \   00000256   0xD175             BNE.N    ??AppS2wCmd_154SetReq_1
   \   00000258   0x9800             LDR      R0,[SP, #+0]
   \   0000025A   0x2808             CMP      R0,#+8
   \                     ??AppS2wCmd_154SetReq_25:
   \   0000025C   0xD272             BCS.N    ??AppS2wCmd_154SetReq_1
   \   0000025E   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   00000262   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_162:
   \   00000266   0x0005             MOVS     R5,R0
   \   00000268   0xD06C             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   0000026A   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_93:
   \   0000026E   0x2800             CMP      R0,#+0
   \   00000270   0xD168             BNE.N    ??AppS2wCmd_154SetReq_1
   \   00000272   0x9800             LDR      R0,[SP, #+0]
   \   00000274   0x2802             CMP      R0,#+2
   \   00000276   0xD265             BCS.N    ??AppS2wCmd_154SetReq_1
   \   00000278   0xF88D 0x0007      STRB     R0,[SP, #+7]
   \   0000027C   0x2204             MOVS     R2,#+4
   \                     ??AppS2wCmd_154SetReq_27:
   \   0000027E   0xA901             ADD      R1,SP,#+4
   \   00000280   0xE761             B.N      ??AppS2wCmd_154SetReq_17
   \                     ??AppS2wCmd_154SetReq_28:
   \   00000282   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_2:
   \   00000286   0x2800             CMP      R0,#+0
   \   00000288   0xD15C             BNE.N    ??AppS2wCmd_154SetReq_1
   \   0000028A   0x9800             LDR      R0,[SP, #+0]
   \   0000028C   0x2802             CMP      R0,#+2
   \   0000028E   0xD259             BCS.N    ??AppS2wCmd_154SetReq_1
   \   00000290   0x2800             CMP      R0,#+0
   \   00000292   0xBF0C             ITE      EQ 
   \   00000294   0x2005             MOVEQ    R0,#+5
   \   00000296   0x2009             MOVNE    R0,#+9
   \   00000298   0xF88D 0x0011      STRB     R0,[SP, #+17]
   \   0000029C   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_161:
   \   000002A0   0x0005             MOVS     R5,R0
   \   000002A2   0xD04F             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   000002A4   0xF89D 0x2011      LDRB     R2,[SP, #+17]
   \   000002A8   0xA902             ADD      R1,SP,#+8
   \   000002AA   0x.... 0x....      BL       AppS2wParse_LookupData
   \   000002AE   0x2800             CMP      R0,#+0
   \   000002B0   0xD148             BNE.N    ??AppS2wCmd_154SetReq_1
   \   000002B2   0x220A             MOVS     R2,#+10
   \   000002B4   0xA902             ADD      R1,SP,#+8
   \   000002B6   0xE746             B.N      ??AppS2wCmd_154SetReq_17
   \                     ??AppS2wCmd_154SetReq_29:
   \   000002B8   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_1:
   \   000002BC   0x2800             CMP      R0,#+0
   \   000002BE   0xD141             BNE.N    ??AppS2wCmd_154SetReq_1
   \   000002C0   0x.... 0x....      BL       ?Subroutine37
   \                     ??CrossCallReturnLabel_213:
   \   000002C4   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_160:
   \   000002C8   0x0005             MOVS     R5,R0
   \   000002CA   0xD03B             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   000002CC   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_92:
   \   000002D0   0x2800             CMP      R0,#+0
   \   000002D2   0xD137             BNE.N    ??AppS2wCmd_154SetReq_1
   \   000002D4   0x9800             LDR      R0,[SP, #+0]
   \   000002D6   0x2802             CMP      R0,#+2
   \   000002D8   0xD234             BCS.N    ??AppS2wCmd_154SetReq_1
   \   000002DA   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   000002DE   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_159:
   \   000002E2   0x0005             MOVS     R5,R0
   \   000002E4   0xD02E             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   000002E6   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_91:
   \   000002EA   0xBB58             CBNZ.N   R0,??AppS2wCmd_154SetReq_1
   \   000002EC   0x9800             LDR      R0,[SP, #+0]
   \   000002EE   0x2802             CMP      R0,#+2
   \   000002F0   0xD228             BCS.N    ??AppS2wCmd_154SetReq_1
   \   000002F2   0xF88D 0x0006      STRB     R0,[SP, #+6]
   \   000002F6   0x2203             MOVS     R2,#+3
   \   000002F8   0xE7C1             B.N      ??AppS2wCmd_154SetReq_27
   \                     ??AppS2wCmd_154SetReq_30:
   \   000002FA   0x.... 0x....      BL       ?Subroutine7
   \                     ??CrossCallReturnLabel_0:
   \   000002FE   0xBB08             CBNZ.N   R0,??AppS2wCmd_154SetReq_1
   \   00000300   0x9800             LDR      R0,[SP, #+0]
   \   00000302   0x2804             CMP      R0,#+4
   \   00000304   0xD21E             BCS.N    ??AppS2wCmd_154SetReq_1
   \   00000306   0xF88D 0x0004      STRB     R0,[SP, #+4]
   \   0000030A   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_158:
   \   0000030E   0x0005             MOVS     R5,R0
   \   00000310   0xD018             BEQ.N    ??AppS2wCmd_154SetReq_1
   \   00000312   0x.... 0x....      BL       ?Subroutine25
   \                     ??CrossCallReturnLabel_90:
   \   00000316   0xB9A8             CBNZ.N   R0,??AppS2wCmd_154SetReq_1
   \   00000318   0x9800             LDR      R0,[SP, #+0]
   \   0000031A   0x280A             CMP      R0,#+10
   \   0000031C   0xD212             BCS.N    ??AppS2wCmd_154SetReq_1
   \   0000031E   0xF88D 0x0005      STRB     R0,[SP, #+5]
   \   00000322   0x2202             MOVS     R2,#+2
   \   00000324   0xE7AB             B.N      ??AppS2wCmd_154SetReq_27
   \                     ??AppS2wCmd_154SetReq_31:
   \   00000326   0xF10D 0x0135      ADD      R1,SP,#+53
   \   0000032A   0x4628             MOV      R0,R5
   \   0000032C   0x.... 0x....      BL       AppS2wParse_Key
   \   00000330   0xB940             CBNZ.N   R0,??AppS2wCmd_154SetReq_1
   \   00000332   0x2010             MOVS     R0,#+16
   \   00000334   0xF88D 0x0034      STRB     R0,[SP, #+52]
   \   00000338   0xE6F5             B.N      ??AppS2wCmd_154SetReq_13
   \                     ??AppS2wCmd_154SetReq_32:
   \   0000033A   0x462E             MOV      R6,R5
   \   0000033C   0x.... 0x....      BL       ??Subroutine30_0
   \                     ??CrossCallReturnLabel_157:
   \   00000340   0x0005             MOVS     R5,R0
   \   00000342   0xD101             BNE.N    ??AppS2wCmd_154SetReq_33
   \                     ??AppS2wCmd_154SetReq_1:
   \   00000344   0x2002             MOVS     R0,#+2
   \   00000346   0xE6F6             B.N      ??AppS2wCmd_154SetReq_14
   \                     ??AppS2wCmd_154SetReq_33:
   \   00000348   0xA90D             ADD      R1,SP,#+52
   \   0000034A   0x.... 0x....      BL       AppS2wParse_Int
   \   0000034E   0xF89D 0x2034      LDRB     R2,[SP, #+52]
   \   00000352   0x4631             MOV      R1,R6
   \   00000354   0xE6F7             B.N      ??AppS2wCmd_154SetReq_17
   \                     ??AppS2wCmd_154SetReq_3:
   \   00000356   0x2001             MOVS     R0,#+1
   \   00000358   0x70A0             STRB     R0,[R4, #+2]
   \   0000035A   0xE7F3             B.N      ??AppS2wCmd_154SetReq_1
   1969          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine30:
   \   00000000   0xF8AD 0x0032      STRH     R0,[SP, #+50]
   \                     ??Subroutine30_0:
   \   00000004   0xA821             ADD      R0,SP,#+132
   \   00000006   0x.... 0x....      B.W      AppS2wParse_NextParamGet

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine7:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x4628             MOV      R0,R5
   \   00000004   0x.... 0x....      B.W      AppS2wParse_Hex
   1970          

   \                                 In section .text, align 2, keep-with-next
   1971          UINT8
   1972          AppS2wCmd_154GetReq(UINT8 *ptr)
   1973          {
   \                     AppS2wCmd_154GetReq:
   \   00000000   0xB511             PUSH     {R0,R4,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   1974              GSN_WLRPAN_GET_REQ_T getReq;
   1975              UINT32 param;
   1976              UINT8 status;
   1977              UINT8 *p = AppS2wParse_NextParamGet(&ptr);
   \   00000004   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_149:
   \   00000008   0x4604             MOV      R4,R0
   1978          
   1979              memset( &getReq, 0, sizeof( getReq ));
   \   0000000A   0x2204             MOVS     R2,#+4
   \   0000000C   0x.... 0x....      BL       ??Subroutine20_0
   1980          
   1981              if(!p)
   \                     ??CrossCallReturnLabel_56:
   \   00000010   0xB1E4             CBZ.N    R4,??AppS2wCmd_154GetReq_0
   1982              {
   1983                  return S2W_EINVAL;
   1984              }
   1985              status = AppS2wParse_Int(p, &param);
   1986              if( status != S2W_SUCCESS || ( param > macKey ) )
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0x4620             MOV      R0,R4
   \   00000016   0x.... 0x....      BL       AppS2wParse_Int
   \   0000001A   0xB9B8             CBNZ.N   R0,??AppS2wCmd_154GetReq_0
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x2842             CMP      R0,#+66
   \   00000020   0xD214             BCS.N    ??AppS2wCmd_154GetReq_0
   1987            		return S2W_EINVAL;
   1988            
   1989              getReq.Attribute = param;
   \   00000022   0xF8AD 0x0004      STRH     R0,[SP, #+4]
   1990          	getReq.AttributeIdx = 0; // TODO: Fix
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   1991          	if(( getReq.Attribute == macDeviceTable )||
   1992          		( getReq.Attribute == macSecurityLevelTable ))
   \   0000002C   0xF8BD 0x0004      LDRH     R0,[SP, #+4]
   \   00000030   0x2823             CMP      R0,#+35
   \   00000032   0xBF18             IT       NE 
   \   00000034   0x2825             CMPNE    R0,#+37
   \   00000036   0xD10D             BNE.N    ??AppS2wCmd_154GetReq_1
   1993              {
   1994          		p = AppS2wParse_NextParamGet(&ptr);
   \   00000038   0x.... 0x....      BL       ?Subroutine28
   \                     ??CrossCallReturnLabel_148:
   \   0000003C   0x0004             MOVS     R4,R0
   1995          		if( !p )	return S2W_EINVAL;
   \   0000003E   0xD005             BEQ.N    ??AppS2wCmd_154GetReq_0
   1996          		status = AppS2wParse_Int( p, &param );
   1997          		if( (status != S2W_SUCCESS) || ( param >= GSN_WLP_MAX_SEC_ENTRIES ) )
   \   00000040   0x.... 0x....      BL       ?Subroutine27
   \                     ??CrossCallReturnLabel_147:
   \   00000044   0xB910             CBNZ.N   R0,??AppS2wCmd_154GetReq_0
   \   00000046   0x9800             LDR      R0,[SP, #+0]
   \   00000048   0x280A             CMP      R0,#+10
   \   0000004A   0xD301             BCC.N    ??AppS2wCmd_154GetReq_2
   1998                  return S2W_EINVAL;
   \                     ??AppS2wCmd_154GetReq_0:
   \   0000004C   0x2002             MOVS     R0,#+2
   \   0000004E   0xE00B             B.N      ??AppS2wCmd_154GetReq_3
   1999          		getReq.AttributeIdx = ( UINT16 )param;
   \                     ??AppS2wCmd_154GetReq_2:
   \   00000050   0xF8AD 0x0006      STRH     R0,[SP, #+6]
   2000          		
   2001              }    
   2002              GsnWLRPAN_GetReq( &s2w154Ctx.wlrpanCtx, &getReq );
   \                     ??AppS2wCmd_154GetReq_1:
   \   00000054   0x.... 0x....      LDR.W    R4,??DataTable142
   \   00000058   0xA901             ADD      R1,SP,#+4
   \   0000005A   0xF104 0x0098      ADD      R0,R4,#+152
   \   0000005E   0x.... 0x....      BL       GsnWLRPAN_GetReq
   2003              GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   00000062   0x.... 0x....      BL       ?Subroutine22
   2004              return s2w154Ctx.operationStatus;
   \                     ??CrossCallReturnLabel_65:
   \   00000066   0x78A0             LDRB     R0,[R4, #+2]
   \                     ??AppS2wCmd_154GetReq_3:
   \   00000068   0xB004             ADD      SP,SP,#+16
   \   0000006A   0xBD10             POP      {R4,PC}          ;; return
   2005          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine27:
   \   00000000   0xA900             ADD      R1,SP,#+0
   \   00000002   0x.... 0x....      B.W      AppS2wParse_Int
   2006          
   2007          

   \                                 In section .data, align 4
   2008          UINT8 *pWlrpanStatusMsg[] = {
   \                     pWlrpanStatusMsg:
   \   00000000   0x........         DC32 `?<Constant "COUNTER_ERROR">`, `?<Constant "IMPROPER_KEY_TYPE">`
   \              0x........   
   \   00000008   0x........         DC32 `?<Constant "IMPROPER_SECURITY_LEVEL">`
   \   0000000C   0x........         DC32 `?<Constant "UNSUPPORTED_LEGACY">`
   \   00000010   0x........         DC32 `?<Constant "UNSUPPORTED_SECURITY">`, `?<Constant "BEACON_LOSS">`
   \              0x........   
   \   00000018   0x........         DC32 `?<Constant "CHANNEL_ACCESS_FAILURE">`, `?<Constant "DENIED">`
   \              0x........   
   \   00000020   0x........         DC32 `?<Constant "DISABLE_TRX_FAILURE">`
   \   00000024   0x........         DC32 `?<Constant "SECURITY_ERROR">`, `?<Constant "FRAME_TOO_LONG">`
   \              0x........   
   \   0000002C   0x........         DC32 `?<Constant "INVALID_GTS">`, `?<Constant "INVALID_HANDLE">`
   \              0x........   
   \   00000034   0x........         DC32 `?<Constant "INVALID_PARAMETER">`, `?<Constant "NO_ACK">`
   \              0x........   
   \   0000003C   0x........         DC32 `?<Constant "NO_BEACON">`, `?<Constant "NO_DATA">`
   \              0x........   
   \   00000044   0x........         DC32 `?<Constant "NO_SHORT_ADDRESS">`, `?<Constant "OUT_OF_CAP">`
   \              0x........   
   \   0000004C   0x........         DC32 `?<Constant "PAN_ID_CONFLICT">`, `?<Constant "REALIGNMENT">`
   \              0x........   
   \   00000054   0x........         DC32 `?<Constant "TRANSACTION_EXPIRED">`
   \   00000058   0x........         DC32 `?<Constant "TRANSACTION_OVERFLOW">`, `?<Constant "TX_ACTIVE">`
   \              0x........   
   \   00000060   0x........         DC32 `?<Constant "UNAVAILABLE_KEY">`
   \   00000064   0x........         DC32 `?<Constant "UNSUPPORTED_ATTRIBUTE">`
   \   00000068   0x........         DC32 `?<Constant "INVALID_ADDRESS">`, `?<Constant "ON_TIME_TOO_LONG">`
   \              0x........   
   \   00000070   0x........         DC32 `?<Constant "PAST_TIME">`, `?<Constant "TRACKING_OFF">`
   \              0x........   
   \   00000078   0x........         DC32 `?<Constant "INVALID_INDEX">`, `?<Constant "LIMIT_REACHED">`
   \              0x........   
   \   00000080   0x........         DC32 `?<Constant "READ_ONLY">`, `?<Constant "SCAN_IN_PROGRESS">`
   \              0x........   
   \   00000088   0x........         DC32 `?<Constant "SUPERFRAME_OVERLAP">`
   \   0000008C   0x........         DC32 `?<Constant "CONDITIONAL_PASS">`
   2009             "COUNTER_ERROR" ,
   2010             "IMPROPER_KEY_TYPE",
   2011             "IMPROPER_SECURITY_LEVEL",
   2012             "UNSUPPORTED_LEGACY",
   2013             "UNSUPPORTED_SECURITY",
   2014             "BEACON_LOSS",
   2015             "CHANNEL_ACCESS_FAILURE",
   2016             "DENIED",
   2017             "DISABLE_TRX_FAILURE",
   2018             "SECURITY_ERROR",
   2019             "FRAME_TOO_LONG",
   2020             "INVALID_GTS",
   2021             "INVALID_HANDLE",
   2022             "INVALID_PARAMETER",
   2023             "NO_ACK",
   2024             "NO_BEACON",
   2025             "NO_DATA",
   2026             "NO_SHORT_ADDRESS",
   2027             "OUT_OF_CAP",
   2028             "PAN_ID_CONFLICT",
   2029             "REALIGNMENT",
   2030             "TRANSACTION_EXPIRED",
   2031             "TRANSACTION_OVERFLOW",
   2032             "TX_ACTIVE",
   2033             "UNAVAILABLE_KEY",
   2034             "UNSUPPORTED_ATTRIBUTE",
   2035             "INVALID_ADDRESS",
   2036             "ON_TIME_TOO_LONG",
   2037             "PAST_TIME",
   2038             "TRACKING_OFF",
   2039             "INVALID_INDEX",
   2040             "LIMIT_REACHED",
   2041             "READ_ONLY",
   2042             "SCAN_IN_PROGRESS",
   2043             "SUPERFRAME_OVERLAP",   
   2044             "CONDITIONAL_PASS"
   2045          };
   2046          

   \                                 In section .data, align 4
   2047          UINT32 WlrpanStatusOffset = 0x9000A0DB;
   \                     WlrpanStatusOffset:
   \   00000000   0x9000A0DB         DC32 2415960283
   2048          

   \                                 In section .text, align 2, keep-with-next
   2049          GSN_STATUS
   2050          AppS2w_WLRPANAssocCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2051          {
   \                     AppS2w_WLRPANAssocCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2052              GSN_WLRPAN_ASSOCIATE_CFM_T *pCfm = (GSN_WLRPAN_ASSOCIATE_CFM_T *)pMsg;
   2053              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x.... 0x....      BL       ?Subroutine39
   2054              if(pCfm->Status == GSN_SUCCESS)
   \                     ??CrossCallReturnLabel_218:
   \   00000006   0x6861             LDR      R1,[R4, #+4]
   \   00000008   0xB909             CBNZ.N   R1,??AppS2w_WLRPANAssocCfm_0
   2055              {
   2056                  s2w154Ctx.assocState = S2W_154_ASSOC_STAT_ASSOC;
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x7041             STRB     R1,[R0, #+1]
   2057              }
   2058              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANAssocCfm_0:
   \   0000000E   0x....             B.N      ?Subroutine3
   2059              return pCfm->Status;
   2060          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine3:
   \   00000000   0x1D00             ADDS     R0,R0,#+4
   \   00000002   0x.... 0x....      BL       GsnOsal_SemRelease
   \   00000006   0x6860             LDR      R0,[R4, #+4]
   \   00000008   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine39:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable142
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x461C             MOV      R4,R3
   \   00000008   0x7081             STRB     R1,[R0, #+2]
   \   0000000A   0x4770             BX       LR
   2061          

   \                                 In section .text, align 2, keep-with-next
   2062          GSN_STATUS
   2063          AppS2w_WLRPANAssocInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2064          {
   \                     AppS2w_WLRPANAssocInd:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB089             SUB      SP,SP,#+36
   \   00000004   0x461D             MOV      R5,R3
   2065              UINT8 i;
   2066              GSN_WLRPAN_ASSOCIATE_IND_T *pInd = (GSN_WLRPAN_ASSOCIATE_IND_T *)pMsg;
   2067              GSN_WLRPAN_ASSOCIATE_RSP_T pRsp ;
   2068              for(i=0;i<S2W_154_MAX_ASSOC_LIST ;i++)
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x270C             MOVS     R7,#+12
   \   0000000A   0x.... 0x....      LDR.W    R4,??DataTable142
   2069              {
   2070                  if(memcmp(&pInd->DeviceAddress.LongAddr,
   2071                            s2w154Ctx.assocChild[i].extendedAddr,8)==0)
   \                     ??AppS2w_WLRPANAssocInd_0:
   \   0000000E   0x.... 0x....      BL       ?Subroutine38
   2072                      break;
   2073              }
   \                     ??CrossCallReturnLabel_217:
   \   00000012   0xB118             CBZ.N    R0,??AppS2w_WLRPANAssocInd_1
   \   00000014   0x1C76             ADDS     R6,R6,#+1
   \   00000016   0xB2F6             UXTB     R6,R6
   \   00000018   0x2E08             CMP      R6,#+8
   \   0000001A   0xDBF8             BLT.N    ??AppS2w_WLRPANAssocInd_0
   2074              memcpy(&pRsp.DeviceAddress.LongAddr, &pInd->DeviceAddress.LongAddr,8);
   \                     ??AppS2w_WLRPANAssocInd_1:
   \   0000001C   0x2208             MOVS     R2,#+8
   \   0000001E   0x4629             MOV      R1,R5
   \   00000020   0x.... 0x....      BL       ??Subroutine23_0
   2075              memcpy( &pRsp.SecI, &pInd->SecI, sizeof(GSN_WLRPAN_SEC_I_T ));
   \                     ??CrossCallReturnLabel_82:
   \   00000024   0x220B             MOVS     R2,#+11
   \   00000026   0xF105 0x0109      ADD      R1,R5,#+9
   \   0000002A   0xA804             ADD      R0,SP,#+16
   \   0000002C   0x.... 0x....      BL       memcpy
   2076              if( i != S2W_154_MAX_ASSOC_LIST )
   \   00000030   0x2E08             CMP      R6,#+8
   \   00000032   0xD011             BEQ.N    ??AppS2w_WLRPANAssocInd_2
   2077              {   /* Match found*/
   2078                  /**< Allocate the ShortAddress based on request in CapabilityInfo */
   2079                  if( pInd->CapabilityInformation & ( 1 << 7 ) )
   \   00000034   0x7A28             LDRB     R0,[R5, #+8]
   \   00000036   0x0600             LSLS     R0,R0,#+24
   \   00000038   0xBF46             ITTE     MI 
   \   0000003A   0xFB07 0x4006      MLAMI    R0,R7,R6,R4
   \   0000003E   0x8C00             LDRHMI   R0,[R0, #+32]
   \   00000040   0xF64F 0x70FF      MOVWPL   R0,#+65535
   2080                  {
   2081                      pRsp.AssocShortAddress = s2w154Ctx.assocChild[i].shortAddr;
   2082                  }
   2083                  else
   2084                  {
   2085                      pRsp.AssocShortAddress = 0xFFFF;
   \   00000044   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   2086                  }
   2087                  pRsp.Status = GSN_SUCCESS;
   2088          		GsnWLRPAN_AssociateRsp(&s2w154Ctx.wlrpanCtx,  &pRsp );
   \   00000048   0x2320             MOVS     R3,#+32
   \   0000004A   0x2000             MOVS     R0,#+0
   \   0000004C   0x9003             STR      R0,[SP, #+12]
   \   0000004E   0xAA00             ADD      R2,SP,#+0
   \   00000050   0x2101             MOVS     R1,#+1
   \   00000052   0x.... 0x....      BL       ?Subroutine19
   2089              }
   \                     ??CrossCallReturnLabel_48:
   \   00000056   0xE002             B.N      ??AppS2w_WLRPANAssocInd_3
   2090              else
   2091              {
   2092                  pRsp.Status = GSN_FAILURE;
   \                     ??AppS2w_WLRPANAssocInd_2:
   \   00000058   0xF04F 0x4000      MOV      R0,#-2147483648
   \   0000005C   0x9003             STR      R0,[SP, #+12]
   2093              }
   2094              return pRsp.Status;
   \                     ??AppS2w_WLRPANAssocInd_3:
   \   0000005E   0x9803             LDR      R0,[SP, #+12]
   \   00000060   0xB009             ADD      SP,SP,#+36
   \   00000062   0xBDF0             POP      {R4-R7,PC}       ;; return
   2095          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine38:
   \   00000000   0xFB07 0x4006      MLA      R0,R7,R6,R4
   \   00000004   0xF100 0x0122      ADD      R1,R0,#+34
   \   00000008   0x2208             MOVS     R2,#+8
   \   0000000A   0x4628             MOV      R0,R5
   \   0000000C   0x.... 0x....      B.W      memcmp

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine23:
   \   00000000   0xF106 0x0108      ADD      R1,R6,#+8
   \                     ??Subroutine23_0:
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x.... 0x....      B.W      memcpy
   2096          

   \                                 In section .text, align 2, keep-with-next
   2097          GSN_STATUS
   2098          AppS2w_WLRPANDisassocCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2099          {
   \                     AppS2w_WLRPANDisassocCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2100              GSN_WLP_DISASSOCIATE_CFM_T *pCfm = (GSN_WLP_DISASSOCIATE_CFM_T *)pMsg;
   2101              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x....             B.N      ?Subroutine2
   2102              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   2103              return pCfm->Status;
   2104          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine2:
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable142
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x7081             STRB     R1,[R0, #+2]
   \   00000008   0x461C             MOV      R4,R3
   \   0000000A                      REQUIRE ??Subroutine41_0
   \   0000000A                      ;; // Fall through to label ??Subroutine41_0

   \                                 In section .text, align 2, keep-with-next
   \                     ??Subroutine41_0:
   \   00000000   0x1D00             ADDS     R0,R0,#+4
   \                     ??Subroutine41_1:
   \   00000002   0x.... 0x....      BL       GsnOsal_SemRelease
   \   00000006   0x6820             LDR      R0,[R4, #+0]
   \   00000008   0xBD10             POP      {R4,PC}          ;; return
   2105          

   \                                 In section .text, align 2, keep-with-next
   2106          GSN_STATUS
   2107          AppS2w_WLRPANDisassocInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2108          {
   \                     AppS2w_WLRPANDisassocInd:
   \   00000000   0xB510             PUSH     {R4,LR}
   2109          	s2w154Ctx.assocState = S2W_154_ASSOC_STAT_NOT_ASSOC; 
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable142
   \   00000006   0x2001             MOVS     R0,#+1
   \   00000008   0x7060             STRB     R0,[R4, #+1]
   2110          	
   2111              S2w_Printf("\r\nDevice Disassociated\r\n");		
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nDevice Disassociated\\r\\n">`
   \   0000000E   0x.... 0x....      BL       S2w_Printf
   2112          
   2113          	GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   00000012   0x1D20             ADDS     R0,R4,#+4
   \   00000014   0x.... 0x....      BL       GsnOsal_SemRelease
   2114          
   2115          	return GSN_SUCCESS;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0xBD10             POP      {R4,PC}          ;; return
   2116           }
   2117          

   \                                 In section .text, align 2, keep-with-next
   2118          GSN_STATUS
   2119          AppS2w_WLRPANBeaconNotifyInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2120          {
   \                     AppS2w_WLRPANBeaconNotifyInd:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x461C             MOV      R4,R3
   2121              GSN_WLP_BEACON_NOTIFY_T *pNotify = (GSN_WLP_BEACON_NOTIFY_T *)pMsg;
   2122          	UINT8 i = 0;
   \   00000006   0x2500             MOVS     R5,#+0
   2123              S2w_Printf("\r\nBeacon Notification\r\n");
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBeacon Notification\\r\\n">`
   \   0000000C   0x.... 0x....      BL       S2w_Printf
   2124          	
   2125          	S2w_Printf("%x  %02d  ",pNotify->PANDescriptor.CoordPANId, 
   2126          		pNotify->PANDescriptor.LogicalChannel);
   \   00000010   0x8921             LDRH     R1,[R4, #+8]
   \   00000012   0x.... 0x....      ADR.W    R0,`?<Constant "%x  %02d  ">`
   \   00000016   0xF104 0x0608      ADD      R6,R4,#+8
   \   0000001A   0x7972             LDRB     R2,[R6, #+5]
   \   0000001C   0x.... 0x....      BL       S2w_Printf
   2127          	if( pNotify->PANDescriptor.CoordAddrMode == GSN_WLRPAN_ADDR_MODE_EXTND )
   \   00000020   0x7930             LDRB     R0,[R6, #+4]
   \   00000022   0x2803             CMP      R0,#+3
   \   00000024   0xD113             BNE.N    ??AppS2w_WLRPANBeaconNotifyInd_0
   2128          	{
   2129          		UINT8 *pAddr = pNotify->PANDescriptor.CoordAddress.addr;
   \   00000026   0xF104 0x0018      ADD      R0,R4,#+24
   2130                  S2w_Printf(" %02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x ",
   2131                      pAddr[0], pAddr[1], pAddr[2], pAddr[3], pAddr[4], 
   2132                      pAddr[5], pAddr[6], pAddr[7]);		
   \   0000002A   0x79C1             LDRB     R1,[R0, #+7]
   \   0000002C   0x9104             STR      R1,[SP, #+16]
   \   0000002E   0x7981             LDRB     R1,[R0, #+6]
   \   00000030   0x9103             STR      R1,[SP, #+12]
   \   00000032   0x7941             LDRB     R1,[R0, #+5]
   \   00000034   0x9102             STR      R1,[SP, #+8]
   \   00000036   0x7901             LDRB     R1,[R0, #+4]
   \   00000038   0x9101             STR      R1,[SP, #+4]
   \   0000003A   0x78C1             LDRB     R1,[R0, #+3]
   \   0000003C   0x9100             STR      R1,[SP, #+0]
   \   0000003E   0x7883             LDRB     R3,[R0, #+2]
   \   00000040   0x7842             LDRB     R2,[R0, #+1]
   \   00000042   0x7801             LDRB     R1,[R0, #+0]
   \   00000044   0x.... 0x....      ADR.W    R0,`?<Constant " %02x-%02x-%02x-%02x-...">`
   \   00000048   0x.... 0x....      BL       S2w_Printf
   \   0000004C   0xE004             B.N      ??AppS2w_WLRPANBeaconNotifyInd_1
   2133          	}
   2134              else
   2135          	{
   2136          		S2w_Printf(" %x ", pNotify->PANDescriptor.CoordAddress.ShortAddr );
   \                     ??AppS2w_WLRPANBeaconNotifyInd_0:
   \   0000004E   0x8A31             LDRH     R1,[R6, #+16]
   \   00000050   0x.... 0x....      ADR.W    R0,`?<Constant " %x ">`
   \   00000054   0x.... 0x....      BL       S2w_Printf
   2137          	}
   2138          	S2w_Printf(" %d ",pNotify->sduLength);
   \                     ??AppS2w_WLRPANBeaconNotifyInd_1:
   \   00000058   0xF894 0x1068      LDRB     R1,[R4, #+104]
   \   0000005C   0x.... 0x....      ADR.W    R0,`?<Constant " %d ">`
   \   00000060   0x.... 0x....      BL       S2w_Printf
   \   00000064   0x.... 0x....      ADR.W    R6,`?<Constant " %02x ">`
   \   00000068   0xE006             B.N      ??AppS2w_WLRPANBeaconNotifyInd_2
   2139          	while( i < pNotify->sduLength )
   2140          	{
   2141          		S2w_Printf(" %02x ",pNotify->sdu[i]);
   \                     ??AppS2w_WLRPANBeaconNotifyInd_3:
   \   0000006A   0x1928             ADDS     R0,R5,R4
   \   0000006C   0xF890 0x1069      LDRB     R1,[R0, #+105]
   \   00000070   0x4630             MOV      R0,R6
   \   00000072   0x.... 0x....      BL       S2w_Printf
   2142          		i++;
   \   00000076   0x1C6D             ADDS     R5,R5,#+1
   2143          	}
   \                     ??AppS2w_WLRPANBeaconNotifyInd_2:
   \   00000078   0xF894 0x0068      LDRB     R0,[R4, #+104]
   \   0000007C   0xB2ED             UXTB     R5,R5
   \   0000007E   0x4285             CMP      R5,R0
   \   00000080   0xD3F3             BCC.N    ??AppS2w_WLRPANBeaconNotifyInd_3
   2144              S2w_Printf("\r\n");
   \   00000082   0x....             B.N      ?Subroutine4
   2145          
   2146              return GSN_SUCCESS;
   2147          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine4:
   \   00000000   0x....             ADR.N    R0,??DataTable139  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000002   0x.... 0x....      BL       S2w_Printf
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xB006             ADD      SP,SP,#+24
   \   0000000A   0xBD70             POP      {R4-R6,PC}       ;; return
   2148          

   \                                 In section .text, align 2, keep-with-next
   2149          GSN_STATUS
   2150          AppS2w_WLRPANGTSInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2151          {
   \                     AppS2w_WLRPANGTSInd:
   \   00000000   0xB580             PUSH     {R7,LR}
   2152              //GSN_WLRPAN_GTS_IND_T *pInd = (GSN_WLRPAN_GTS_IND_T *)pMsg;
   2153              S2w_Printf("\r\nGTS Indiacation\r\n");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nGTS Indiacation\\r\\n">`
   \   00000006   0x....             B.N      ?Subroutine6
   2154              return GSN_SUCCESS;
   2155          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine6:
   \   00000000   0x.... 0x....      BL       S2w_Printf
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD02             POP      {R1,PC}          ;; return
   2156          

   \                                 In section .text, align 2, keep-with-next
   2157          GSN_STATUS
   2158          AppS2w_WLRPANGTSCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2159          {
   \                     AppS2w_WLRPANGTSCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2160              GSN_WLRPAN_GTS_CFM_T *pCfm = (GSN_WLRPAN_GTS_CFM_T *)pMsg;
   2161              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable142
   \   00000006   0x2100             MOVS     R1,#+0
   \   00000008   0x7081             STRB     R1,[R0, #+2]
   \   0000000A   0x461C             MOV      R4,R3
   2162              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   0000000C                      REQUIRE ?Subroutine3
   \   0000000C                      ;; // Fall through to label ?Subroutine3
   2163              return pCfm->Status;
   2164          }
   2165          

   \                                 In section .text, align 2, keep-with-next
   2166          GSN_STATUS
   2167          AppS2w_WLRPANOrphanInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2168          {
   \                     AppS2w_WLRPANOrphanInd:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   2169              UINT8 i;
   2170              GSN_WLRPAN_ORPHAN_IND_T *pInd = (GSN_WLRPAN_ORPHAN_IND_T *)pMsg;
   2171              GSN_WLRPAN_ORPHAN_RSP_T Rsp;
   2172              s2w154Ctx.operationStatus = S2W_SUCCESS; 
   \   00000002   0x.... 0x....      LDR.W    R4,??DataTable142
   \   00000006   0x2000             MOVS     R0,#+0
   \   00000008   0xB087             SUB      SP,SP,#+28
   \   0000000A   0x461D             MOV      R5,R3
   \   0000000C   0x70A0             STRB     R0,[R4, #+2]
   2173              for(i=0;i<S2W_154_MAX_ASSOC_LIST ;i++)
   \   0000000E   0x2600             MOVS     R6,#+0
   \   00000010   0x270C             MOVS     R7,#+12
   2174              {
   2175                  if(memcmp(&pInd->OrphanAddr,
   2176                            &s2w154Ctx.assocChild[i].extendedAddr,8)==0)
   \                     ??AppS2w_WLRPANOrphanInd_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine38
   2177                      break;
   2178              }
   \                     ??CrossCallReturnLabel_216:
   \   00000016   0xB118             CBZ.N    R0,??AppS2w_WLRPANOrphanInd_1
   \   00000018   0x1C76             ADDS     R6,R6,#+1
   \   0000001A   0xB2F6             UXTB     R6,R6
   \   0000001C   0x2E08             CMP      R6,#+8
   \   0000001E   0xDBF8             BLT.N    ??AppS2w_WLRPANOrphanInd_0
   2179              memcpy(&Rsp.OrphanAddr, &pInd->OrphanAddr,8);
   \                     ??AppS2w_WLRPANOrphanInd_1:
   \   00000020   0x2208             MOVS     R2,#+8
   \   00000022   0x4629             MOV      R1,R5
   \   00000024   0x.... 0x....      BL       ??Subroutine23_0
   2180              memcpy( &Rsp.SecI, &pInd->SecI, sizeof(GSN_WLRPAN_SEC_I_T ));
   \                     ??CrossCallReturnLabel_81:
   \   00000028   0x220B             MOVS     R2,#+11
   \   0000002A   0xF105 0x0108      ADD      R1,R5,#+8
   \   0000002E   0xF10D 0x000B      ADD      R0,SP,#+11
   \   00000032   0x.... 0x....      BL       memcpy
   2181              if( i != S2W_154_MAX_ASSOC_LIST )
   \   00000036   0x2E08             CMP      R6,#+8
   \   00000038   0xD007             BEQ.N    ??AppS2w_WLRPANOrphanInd_2
   2182              {   /* Match found*/
   2183                  Rsp.ShortAddr = s2w154Ctx.assocChild[i].shortAddr;
   \   0000003A   0xFB07 0x4006      MLA      R0,R7,R6,R4
   \   0000003E   0x8C00             LDRH     R0,[R0, #+32]
   \   00000040   0xF8AD 0x0008      STRH     R0,[SP, #+8]
   2184                  Rsp.AssociatedMember = TRUE;
   \   00000044   0x2001             MOVS     R0,#+1
   \   00000046   0xF88D 0x000A      STRB     R0,[SP, #+10]
   2185              }
   2186              GsnWLRPAN_OrphanRsp(&s2w154Ctx.wlrpanCtx,&Rsp);
   \                     ??AppS2w_WLRPANOrphanInd_2:
   \   0000004A   0x2318             MOVS     R3,#+24
   \   0000004C   0xAA00             ADD      R2,SP,#+0
   \   0000004E   0x2105             MOVS     R1,#+5
   \   00000050   0x.... 0x....      BL       ?Subroutine19
   2187              return GSN_SUCCESS;
   \                     ??CrossCallReturnLabel_47:
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0xB007             ADD      SP,SP,#+28
   \   00000058   0xBDF0             POP      {R4-R7,PC}       ;; return
   2188          }
   2189          

   \                                 In section .text, align 2, keep-with-next
   2190          GSN_STATUS
   2191          AppS2w_WLRPANResetCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2192          {
   \                     AppS2w_WLRPANResetCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2193              GSN_WLRPAN_RESET_CFM_T *pCfm = (GSN_WLRPAN_RESET_CFM_T *)pMsg;
   2194              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002                      REQUIRE ?Subroutine2
   \   00000002                      ;; // Fall through to label ?Subroutine2
   2195              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   2196              return pCfm->status;
   2197          }

   \                                 In section .text, align 2, keep-with-next
   2198          GSN_STATUS
   2199          AppS2w_WLRPANRxEnableCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2200          {
   \                     AppS2w_WLRPANRxEnableCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2201              GSN_WLRPAN_RXENABLE_CFM_T *pCfm = (GSN_WLRPAN_RXENABLE_CFM_T *)pMsg;
   2202              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x....             B.N      ?Subroutine2
   2203              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   2204              return pCfm->status;
   2205          }

   \                                 In section .text, align 2, keep-with-next
   2206          GSN_STATUS
   2207          AppS2w_WLRPANScanCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2208          {
   \                     AppS2w_WLRPANScanCfm:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   2209              GSN_WLRPAN_SCAN_CFM_T *pCfm = (GSN_WLRPAN_SCAN_CFM_T *)pMsg;
   2210              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000004   0x.... 0x....      LDR.W    R5,??DataTable142
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x461C             MOV      R4,R3
   \   0000000C   0x70A8             STRB     R0,[R5, #+2]
   \   0000000E   0xB087             SUB      SP,SP,#+28
   2211              if(pCfm->Status == GSN_SUCCESS)
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xBF04             ITT      EQ 
   \   00000016   0x7920             LDRBEQ   R0,[R4, #+4]
   \   00000018   0x2800             CMPEQ    R0,#+0
   2212              {
   2213                  UINT8 i;
   2214                  if( pCfm->ScanType == 0 )   // ED Scan
   \   0000001A   0xD10F             BNE.N    ??AppS2w_WLRPANScanCfm_0
   2215                  {
   2216                      S2w_Printf("\r\nChannel Index\tEnergy Reading");
   \   0000001C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nChannel Index\\tEnerg...">`
   \   00000020   0x.... 0x....      BL       S2w_Printf
   2217                      for(i = 0x0C; i < 0x17; i++)
   \   00000024   0x260C             MOVS     R6,#+12
   \   00000026   0x.... 0x....      ADR.W    R7,`?<Constant "\\r\\n\\t%d\\t\\t%d">`
   2218                      {
   2219                          S2w_Printf("\r\n\t%d\t\t%d",i,pCfm->Result.EnergyDetectList[i]);
   \                     ??AppS2w_WLRPANScanCfm_1:
   \   0000002A   0x1930             ADDS     R0,R6,R4
   \   0000002C   0x4631             MOV      R1,R6
   \   0000002E   0x7C02             LDRB     R2,[R0, #+16]
   \   00000030   0x4638             MOV      R0,R7
   \   00000032   0x.... 0x....      BL       S2w_Printf
   2220                      }
   \   00000036   0x1C76             ADDS     R6,R6,#+1
   \   00000038   0x2E17             CMP      R6,#+23
   \   0000003A   0xDBF6             BLT.N    ??AppS2w_WLRPANScanCfm_1
   2221                  }
   2222              }
   2223              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANScanCfm_0:
   \   0000003C   0x1D28             ADDS     R0,R5,#+4
   \   0000003E   0x.... 0x....      BL       GsnOsal_SemRelease
   2224          	if( pCfm->Status == GSN_SUCCESS )
   \   00000042   0x6820             LDR      R0,[R4, #+0]
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD14E             BNE.N    ??AppS2w_WLRPANScanCfm_2
   2225          	{
   2226          		if(( pCfm->ScanType == 0x01 )||(pCfm->ScanType == 0x02 ))
   \   00000048   0x7920             LDRB     R0,[R4, #+4]
   \   0000004A   0x2801             CMP      R0,#+1
   \   0000004C   0xBF18             IT       NE 
   \   0000004E   0x2802             CMPNE    R0,#+2
   \   00000050   0xD149             BNE.N    ??AppS2w_WLRPANScanCfm_2
   2227              {
   2228          			UINT8 i = 0;
   \   00000052   0x2700             MOVS     R7,#+0
   2229          			GSN_WLRPAN_PAN_DESC_T pDesc;
   2230          			GSN_WLRPAN_SUPFRM_SPEC_T  *pSpec;
   2231              	    S2w_Printf("\r\n\nPANID BO  SO  BLE   PAN-CRD  AssocPermit\r\n");
   \   00000054   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n\\nPANID BO  SO  BLE ...">`
   \   00000058   0x.... 0x....      BL       S2w_Printf
   \   0000005C   0x.... 0x....      ADR.W    R5,`?<Constant "FALSE    ">`
   \   00000060   0x.... 0x....      ADR.W    R6,`?<Constant "TRUE     ">`
   \   00000064   0x.... 0x....      ADR.W    R10,`?<Constant "%02d     ">`
   \   00000068   0x.... 0x....      ADR.W    R8,`?<Constant "%02d  ">`
   \   0000006C   0x.... 0x....      ADR.W    R9,`?<Constant "%04x  ">`
   \   00000070   0xE005             B.N      ??AppS2w_WLRPANScanCfm_3
   2232          			for( i = 0; i < pCfm->ResultListSize; i++ )
   2233          			{
   2234          				pDesc = pCfm->Result.PANDescriptorList[i];
   2235          				pSpec = ( GSN_WLRPAN_SUPFRM_SPEC_T *)( &pDesc.SuperframeSpec );
   2236          				S2w_Printf("%04x  ",pDesc.CoordPANId );
   2237          				S2w_Printf("%02d  ",pSpec->BO );
   2238          				S2w_Printf("%02d  ",pSpec->SO);
   2239          				S2w_Printf("%02d     ",pSpec->BLE );
   2240          				if( pSpec->PANCRD )         S2w_Printf("TRUE     ");
   2241          			    else				        S2w_Printf("FALSE    ");
   2242          
   2243          			    if( pSpec->AssocPermit )    S2w_Printf("TRUE");
   \                     ??AppS2w_WLRPANScanCfm_4:
   \   00000072   0x.... 0x....      BL       S2w_Printf
   2244          			    else						S2w_Printf("FALSE");
   2245          				S2w_Printf("\r\n");
   \   00000076   0x....             ADR.N    R0,??DataTable132  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000078   0x.... 0x....      BL       S2w_Printf
   \   0000007C   0x1C7F             ADDS     R7,R7,#+1
   \                     ??AppS2w_WLRPANScanCfm_3:
   \   0000007E   0x7B20             LDRB     R0,[R4, #+12]
   \   00000080   0xB2FF             UXTB     R7,R7
   \   00000082   0x4287             CMP      R7,R0
   \   00000084   0xD22F             BCS.N    ??AppS2w_WLRPANScanCfm_2
   \   00000086   0x2118             MOVS     R1,#+24
   \   00000088   0xFB01 0x4107      MLA      R1,R1,R7,R4
   \   0000008C   0xA800             ADD      R0,SP,#+0
   \   0000008E   0x3110             ADDS     R1,R1,#+16
   \   00000090   0x2218             MOVS     R2,#+24
   \   00000092   0x.... 0x....      BL       __aeabi_memcpy4
   \   00000096   0xF8BD 0x1000      LDRH     R1,[SP, #+0]
   \   0000009A   0x4648             MOV      R0,R9
   \   0000009C   0x.... 0x....      BL       S2w_Printf
   \   000000A0   0xF89D 0xB002      LDRB     R11,[SP, #+2]
   \   000000A4   0xF00B 0x010F      AND      R1,R11,#0xF
   \   000000A8   0x4640             MOV      R0,R8
   \   000000AA   0x.... 0x....      BL       S2w_Printf
   \   000000AE   0xEA4F 0x111B      LSR      R1,R11,#+4
   \   000000B2   0x4640             MOV      R0,R8
   \   000000B4   0x.... 0x....      BL       S2w_Printf
   \   000000B8   0xF89D 0xB003      LDRB     R11,[SP, #+3]
   \   000000BC   0xF3CB 0x1100      UBFX     R1,R11,#+4,#+1
   \   000000C0   0x4650             MOV      R0,R10
   \   000000C2   0x.... 0x....      BL       S2w_Printf
   \   000000C6   0xF3CB 0x1080      UBFX     R0,R11,#+6,#+1
   \   000000CA   0x2800             CMP      R0,#+0
   \   000000CC   0xBF14             ITE      NE 
   \   000000CE   0x4630             MOVNE    R0,R6
   \   000000D0   0x4628             MOVEQ    R0,R5
   \   000000D2   0x.... 0x....      BL       S2w_Printf
   \   000000D6   0xEA5F 0x10DB      LSRS     R0,R11,#+7
   \   000000DA   0xBF14             ITE      NE 
   \   000000DC   0x.... 0x....      ADRNE.W  R0,`?<Constant "TRUE">`
   \   000000E0   0x.... 0x....      ADREQ.W  R0,`?<Constant "FALSE">`
   \   000000E4   0xE7C5             B.N      ??AppS2w_WLRPANScanCfm_4
   2246          			}
   2247          		}
   2248              }
   2249              return pCfm->Status;
   \                     ??AppS2w_WLRPANScanCfm_2:
   \   000000E6   0x6820             LDR      R0,[R4, #+0]
   \   000000E8   0xB007             ADD      SP,SP,#+28
   \   000000EA   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
   2250          }

   \                                 In section .text, align 2, keep-with-next
   2251          GSN_STATUS
   2252          AppS2w_WLRPANCommStatusInd(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2253          {
   \                     AppS2w_WLRPANCommStatusInd:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x461C             MOV      R4,R3
   2254              GSN_WLRPAN_COMM_STATUS_IND_T *pInd = (GSN_WLRPAN_COMM_STATUS_IND_T *)pMsg;
   2255              
   2256          	S2w_Printf("\r\nComm Status Indication");
   \   00000006   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nComm Status Indication">`
   \   0000000A   0x.... 0x....      BL       S2w_Printf
   2257          	S2w_Printf("\r\nStatus - ");
   \   0000000E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nStatus - ">`
   \   00000012   0x.... 0x....      BL       S2w_Printf
   2258          	if( pInd->status == 0 )
   \   00000016   0x6860             LDR      R0,[R4, #+4]
   \   00000018   0xB920             CBNZ.N   R0,??AppS2w_WLRPANCommStatusInd_0
   2259              {
   2260          		S2w_Printf("Success");
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "Success">`
   \   0000001E   0x.... 0x....      BL       S2w_Printf
   \   00000022   0xE001             B.N      ??CrossCallReturnLabel_21
   2261              }
   2262              else
   2263              {
   2264                  S2w_Printf("%s", pWlrpanStatusMsg[pInd->status - WlrpanStatusOffset] );
   \                     ??AppS2w_WLRPANCommStatusInd_0:
   \   00000024   0x.... 0x....      BL       ?Subroutine11
   2265              }
   2266              S2w_Printf("\r\nPAN Id - %x", pInd->PANId );
   \                     ??CrossCallReturnLabel_21:
   \   00000028   0x8861             LDRH     R1,[R4, #+2]
   \   0000002A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPAN Id - %x">`
   \   0000002E   0x.... 0x....      BL       S2w_Printf
   2267              S2w_Printf("\r\nSrc Address - ");
   \   00000032   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSrc Address - ">`
   \   00000036   0x.... 0x....      BL       S2w_Printf
   2268              if( pInd->SrcMode == 0x02 )
   \   0000003A   0x7820             LDRB     R0,[R4, #+0]
   \   0000003C   0x....             ADR.N    R5,??DataTable134  ;; 0x25, 0x78, 0x00, 0x00
   \   0000003E   0x2802             CMP      R0,#+2
   \   00000040   0xD103             BNE.N    ??AppS2w_WLRPANCommStatusInd_1
   2269              {
   2270                  S2w_Printf("%x",pInd->SrcAddr.ShortAddr);
   \   00000042   0x8921             LDRH     R1,[R4, #+8]
   \   00000044   0x.... 0x....      BL       ??Subroutine16_0
   2271          }
   \                     ??CrossCallReturnLabel_38:
   \   00000048   0xE010             B.N      ??AppS2w_WLRPANCommStatusInd_2
   2272              else
   2273          {
   2274                  S2w_Printf("%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x",
   2275                      pInd->SrcAddr.addr[0], pInd->SrcAddr.addr[1], pInd->SrcAddr.addr[2], 
   2276                      pInd->SrcAddr.addr[3], pInd->SrcAddr.addr[4], pInd->SrcAddr.addr[5], 
   2277                      pInd->SrcAddr.addr[6], pInd->SrcAddr.addr[7]);
   \                     ??AppS2w_WLRPANCommStatusInd_1:
   \   0000004A   0x7BE0             LDRB     R0,[R4, #+15]
   \   0000004C   0x9004             STR      R0,[SP, #+16]
   \   0000004E   0x7BA0             LDRB     R0,[R4, #+14]
   \   00000050   0x9003             STR      R0,[SP, #+12]
   \   00000052   0x7B60             LDRB     R0,[R4, #+13]
   \   00000054   0x9002             STR      R0,[SP, #+8]
   \   00000056   0x7B20             LDRB     R0,[R4, #+12]
   \   00000058   0x9001             STR      R0,[SP, #+4]
   \   0000005A   0x7AE0             LDRB     R0,[R4, #+11]
   \   0000005C   0x9000             STR      R0,[SP, #+0]
   \   0000005E   0x7AA3             LDRB     R3,[R4, #+10]
   \   00000060   0x7A62             LDRB     R2,[R4, #+9]
   \   00000062   0x7A21             LDRB     R1,[R4, #+8]
   \   00000064   0x.... 0x....      ADR.W    R0,`?<Constant "%02x-%02x-%02x-%02x-%...">`
   \   00000068   0x.... 0x....      BL       S2w_Printf
   2278              }
   2279              S2w_Printf("\r\nDst Address - ");
   \                     ??AppS2w_WLRPANCommStatusInd_2:
   \   0000006C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nDst Address - ">`
   \   00000070   0x.... 0x....      BL       S2w_Printf
   2280              if( pInd->SrcMode == 0x02 )
   \   00000074   0x7820             LDRB     R0,[R4, #+0]
   \   00000076   0x2802             CMP      R0,#+2
   \   00000078   0xD103             BNE.N    ??AppS2w_WLRPANCommStatusInd_3
   2281              {
   2282                  S2w_Printf("%x",pInd->DstAddr.ShortAddr);
   \   0000007A   0x8A21             LDRH     R1,[R4, #+16]
   \   0000007C   0x.... 0x....      BL       ??Subroutine16_0
   2283              }
   \                     ??CrossCallReturnLabel_37:
   \   00000080   0xE001             B.N      ??CrossCallReturnLabel_15
   2284              else
   2285              {
   2286                  S2w_Printf("%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x\r\n",
   2287                      pInd->DstAddr.addr[0], pInd->DstAddr.addr[1], pInd->DstAddr.addr[2],
   2288                      pInd->DstAddr.addr[3], pInd->DstAddr.addr[4], pInd->DstAddr.addr[5],
   2289                      pInd->DstAddr.addr[6], pInd->DstAddr.addr[7]);
   \                     ??AppS2w_WLRPANCommStatusInd_3:
   \   00000082   0x.... 0x....      BL       ?Subroutine8
   2290              }
   2291          	return pInd->status;
   \                     ??CrossCallReturnLabel_15:
   \   00000086   0x6860             LDR      R0,[R4, #+4]
   \   00000088   0xB005             ADD      SP,SP,#+20
   \   0000008A   0xBD30             POP      {R4,R5,PC}       ;; return
   2292              }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine16:
   \   00000000   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \                     ??Subroutine16_0:
   \   00000004   0x4628             MOV      R0,R5
   \   00000006   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine8:
   \   00000000   0x7DE0             LDRB     R0,[R4, #+23]
   \   00000002   0x9004             STR      R0,[SP, #+16]
   \   00000004   0x7DA0             LDRB     R0,[R4, #+22]
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x7D60             LDRB     R0,[R4, #+21]
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x7D20             LDRB     R0,[R4, #+20]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x7CE0             LDRB     R0,[R4, #+19]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x7CA3             LDRB     R3,[R4, #+18]
   \   00000016   0x7C62             LDRB     R2,[R4, #+17]
   \   00000018   0x7C21             LDRB     R1,[R4, #+16]
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "%02x-%02x-%02x-%02x-%...">_1`
   \   0000001E   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine11:
   \   00000000   0x....             LDR.N    R1,??DataTable142_3
   \   00000002   0x6809             LDR      R1,[R1, #+0]
   \   00000004   0x1A40             SUBS     R0,R0,R1
   \   00000006   0x....             LDR.N    R1,??DataTable142_4
   \   00000008   0xF851 0x1020      LDR      R1,[R1, R0, LSL #+2]
   \   0000000C   0x....             ADR.N    R0,??DataTable142_2  ;; 0x25, 0x73, 0x00, 0x00
   \   0000000E   0x.... 0x....      B.W      S2w_Printf

   \                                 In section .text, align 2, keep-with-next
   2293          GSN_STATUS
   2294          AppS2w_WLRPANSetCfm(VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg)
   2295          {
   \                     AppS2w_WLRPANSetCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2296              GSN_WLRPAN_SET_CFM_T *pCfm = (GSN_WLRPAN_SET_CFM_T *)pMsg;
   2297              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x....             B.N      ?Subroutine2
   2298              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   2299              return pCfm->status;
   2300          }

   \                                 In section .text, align 2, keep-with-next
   2301          GSN_STATUS
   2302          AppS2w_WLRPANStartCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2303          {
   \                     AppS2w_WLRPANStartCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2304              GSN_WLRPAN_START_CFM_T *pCfm = (GSN_WLRPAN_START_CFM_T *)pMsg;
   2305              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x.... 0x....      BL       ?Subroutine39
   2306              if(pCfm->Status == GSN_SUCCESS)
   \                     ??CrossCallReturnLabel_219:
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0xB909             CBNZ.N   R1,??AppS2w_WLRPANStartCfm_0
   2307              {
   2308          		s2w154Ctx.assocState = S2W_154_ASSOC_STAT_ASSOC;
   \   0000000A   0x2102             MOVS     R1,#+2
   \   0000000C   0x7041             STRB     R1,[R0, #+1]
   2309              }
   2310              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANStartCfm_0:
   \   0000000E   0x....             B.N      ??Subroutine41_0
   2311              return pCfm->Status;
   2312          }

   \                                 In section .text, align 2, keep-with-next
   2313          GSN_STATUS
   2314          AppS2w_WLRPANSyncLossInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2315          {
   \                     AppS2w_WLRPANSyncLossInd:
   \   00000000   0xB580             PUSH     {R7,LR}
   2316              //GSN_WLRPAN_SYNCLOSS_IND_T *pInd = (GSN_WLRPAN_SYNCLOSS_IND_T *)pMsg;
   2317              S2w_Printf("\r\nSyncLoss\r\n");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSyncLoss\\r\\n">`
   \   00000006                      REQUIRE ?Subroutine6
   \   00000006                      ;; // Fall through to label ?Subroutine6
   2318              return GSN_SUCCESS;
   2319          }

   \                                 In section .text, align 2, keep-with-next
   2320          GSN_STATUS
   2321          AppS2w_WLRPANPollCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2322          {
   \                     AppS2w_WLRPANPollCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   2323              GSN_WLRPAN_POLL_CFM_T *pCfm = (GSN_WLRPAN_POLL_CFM_T *)pMsg;
   2324              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000002   0x....             B.N      ?Subroutine2
   2325              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   2326              return pCfm->status;
   2327          }
   2328          
   2329          
   2330          
   2331          
   2332          

   \                                 In section .text, align 4, keep-with-next
   2333          GSN_STATUS 
   2334          AppS2w_WLRPANGetCfg( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2335          {
   \                     AppS2w_WLRPANGetCfg:
   \   00000000   0xE92D 0x47F0      PUSH     {R4-R10,LR}
   2336              GSN_WLRPAN_GET_CFM_T *pCfm = ( GSN_WLRPAN_GET_CFM_T* )pMsg;
   2337              UINT32 value;
   2338              UINT8 i;
   2339              s2w154Ctx.operationStatus = S2W_SUCCESS;
   \   00000004   0x.... 0x....      LDR.W    R4,??DataTable142
   2340              value = *(( UINT32* )pCfm->Value);
   2341              switch( pCfm->Attribute )
   \   00000008   0x.... 0x....      ADR.W    R10,`?<Constant "%02x ">`
   \   0000000C   0x.... 0x....      ADR.W    R7,`?<Constant "FALSE">`
   \   00000010   0x.... 0x....      ADR.W    R8,`?<Constant "TRUE">`
   \   00000014   0x.... 0x....      ADR.W    R9,`?<Constant "\\r\\nCmd Frame Id :%02x">`
   \   00000018   0x.... 0x....      ADR.W    R5,`?<Constant "\\r\\nFrame Type   :%02x">`
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0x461E             MOV      R6,R3
   \   00000020   0x70A0             STRB     R0,[R4, #+2]
   \   00000022   0xB08E             SUB      SP,SP,#+56
   \   00000024   0x88B0             LDRH     R0,[R6, #+4]
   \   00000026   0x68B1             LDR      R1,[R6, #+8]
   \   00000028   0x2841             CMP      R0,#+65
   \   0000002A   0xF200 0x8110      BHI.W    ??AppS2w_WLRPANGetCfg_1
   \   0000002E   0xE8DF 0xF010      TBH      [PC, R0, LSL #+1]
   \                     ??AppS2w_WLRPANGetCfg_0:
   \   00000032   0x0042 0x0049      DC16     0x42,0x49,0x4C,0x42
   \              0x004C 0x0042
   \   0000003A   0x0046 0x0042      DC16     0x46,0x42,0x42,0x42
   \              0x0042 0x0042
   \   00000042   0x0042 0x0042      DC16     0x42,0x42,0x42,0x46
   \              0x0042 0x0046
   \   0000004A   0x0042 0x0046      DC16     0x42,0x46,0x42,0x42
   \              0x0042 0x0042
   \   00000052   0x0051 0x0042      DC16     0x51,0x42,0x42,0x42
   \              0x0042 0x0042
   \   0000005A   0x0042 0x0042      DC16     0x42,0x42,0x42,0x42
   \              0x0042 0x0042
   \   00000062   0x0042 0x0046      DC16     0x42,0x46,0x42,0x49
   \              0x0042 0x0049
   \   0000006A   0x0042 0x0046      DC16     0x42,0x46,0x42,0x42
   \              0x0042 0x0042
   \   00000072   0x004C 0x010E      DC16     0x4C,0x10E,0x42,0x5F
   \              0x0042 0x005F
   \   0000007A   0x0042 0x009C      DC16     0x42,0x9C,0x42,0x49
   \              0x0042 0x0049
   \   00000082   0x010E 0x010E      DC16     0x10E,0x10E,0x10E,0x10E
   \              0x010E 0x010E
   \   0000008A   0x010E 0x010E      DC16     0x10E,0x10E,0x10E,0x42
   \              0x010E 0x0042
   \   00000092   0x0049 0x0042      DC16     0x49,0x42,0x42,0x42
   \              0x0042 0x0042
   \   0000009A   0x0046 0x0042      DC16     0x46,0x42,0x42,0x42
   \              0x0042 0x0042
   \   000000A2   0x00B3 0x0042      DC16     0xB3,0x42,0x42,0xCA
   \              0x0042 0x00CA
   \   000000AA   0x0042 0x0042      DC16     0x42,0x42,0xEC,0x42
   \              0x00EC 0x0042
   \   000000B2   0x0042 0x00F7      DC16     0x42,0xF7
   2342              {
   2343              case macAssociatedPANCoord:
   2344              case macAssociationPermit:
   2345              case macAutoRequest:
   2346              case macBattLifeExt:
   2347              case macGTSPermit:
   2348              case macPromiscuousMode:
   2349              case macRxOnWhenIdle:
   2350              case macSecurityEnabled:
   2351              case macTimestampSupported:
   2352                  
   2353              case macAckWaitDuration:
   2354              case macBattLifeExtPeriods:
   2355              case macBeaconPayloadLength:
   2356              case macBeaconOrder:  
   2357              case macSuperframeOrder:
   2358              case macBSN:
   2359              case macDSN:
   2360              case macMinBE:
   2361              case macMaxBE:
   2362              case macMaxCSMABackoffs:
   2363              case macMaxFrameRetries:
   2364              case macMinLIFSPeriod:
   2365              case macMinSIFSPeriod:
   2366              case macResponseWaitTime:
   2367              case phyCurrentChannel:
   2368              case phyTransmitPower:
   2369              case phyCCAMode:
   2370              case phyCurrentPage:
   2371              case phySHRDuration:
   2372              case phySymbolsPerOctet:
   2373          	case macKeyTableEntries:
   2374          	case macDeviceTableEntries:
   2375          	case macSecurityLevelTableEntries:
   2376          		
   2377          	case macKeyTableIndex:
   2378          	case macKeyIdLookupListEntries:
   2379          	case macKeyIdLookupListIndex:
   2380          	case macKeyDeviceListEntries:
   2381          	case macKeyDeviceListIndex:
   2382          	case macKeyUsageListEntries:
   2383          	case macKeyUsageListIndex:		
   2384                  S2w_Printf("\r\n%02x\r\n", pCfm->Value[0] );
   \                     ??AppS2w_WLRPANGetCfg_2:
   \   000000B6   0x7A31             LDRB     R1,[R6, #+8]
   \   000000B8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x\\r\\n">`
   \   000000BC   0xE0AD             B.N      ??AppS2w_WLRPANGetCfg_3
   2385                  break;
   2386              
   2387              case macPANId:
   2388              case macCoordShortAddress:
   2389              case macShortAddress:
   2390              case macSyncSymbolOffset:
   2391              case macTransactionPersistenceTime:
   2392              case phyMaxFrameDuration:
   2393                  S2w_Printf("\r\n%04x\r\n", value );
   \                     ??AppS2w_WLRPANGetCfg_4:
   \   000000BE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%04x\\r\\n">`
   \   000000C2   0xE0AA             B.N      ??AppS2w_WLRPANGetCfg_3
   2394                  break;
   2395             
   2396              case macBeaconTxTime:
   2397              case macMaxFrameTotalWaitTime:
   2398              case phyChannelsSupported:
   2399          	case macFrameCounter:
   2400                  S2w_Printf("\r\n%08x\r\n" , (UINT32 )value );
   \                     ??AppS2w_WLRPANGetCfg_5:
   \   000000C4   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%08x\\r\\n">`
   \   000000C8   0xE0A7             B.N      ??AppS2w_WLRPANGetCfg_3
   2401                  break;    
   2402             
   2403              case macExtendedAddress:
   2404              case macCoordExtendedAddress:
   2405                  S2w_Printf("\r\n%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x",
   2406                      pCfm->Value[0], pCfm->Value[1], pCfm->Value[2], pCfm->Value[3],
   2407                      pCfm->Value[4], pCfm->Value[5], pCfm->Value[6], pCfm->Value[7]);
   \                     ??AppS2w_WLRPANGetCfg_6:
   \   000000CA   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_18:
   \   000000CE   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x-%02x-%02x-%02x...">`
   \   000000D2   0xE0B9             B.N      ??AppS2w_WLRPANGetCfg_7
   2408                  break;    
   2409                  
   2410              case macBeaconPayload:
   2411                  S2w_Printf("\r\n");
   \                     ??AppS2w_WLRPANGetCfg_8:
   \   000000D4   0x.... 0x....      ADR.W    R9,??DataTable139  ;; 0x0D, 0x0A, 0x00, 0x00
   \   000000D8   0x4648             MOV      R0,R9
   \   000000DA   0x.... 0x....      BL       S2w_Printf
   2412                  for(i=0;i<128;i++)
   \   000000DE   0x2580             MOVS     R5,#+128
   2413                  {
   2414                      S2w_Printf("%02x ");
   \                     ??AppS2w_WLRPANGetCfg_9:
   \   000000E0   0x4650             MOV      R0,R10
   \   000000E2   0x.... 0x....      BL       S2w_Printf
   2415                  }
   \   000000E6   0x1E6D             SUBS     R5,R5,#+1
   \   000000E8   0xD1FA             BNE.N    ??AppS2w_WLRPANGetCfg_9
   2416                  S2w_Printf("\r\n");
   \   000000EA   0x4648             MOV      R0,R9
   \   000000EC   0x.... 0x....      BL       S2w_Printf
   2417          
   2418          	case macDeviceTable:
   2419          	{					
   2420          		GSN_WLRPAN_DEVICE_DESC_T DeviceTable;
   2421          		UINT8 ExtAddr[8];
   2422          		memcpy( &DeviceTable, pCfm->Value, sizeof(GSN_WLRPAN_DEVICE_DESC_T));
   \                     ??AppS2w_WLRPANGetCfg_10:
   \   000000F0   0x2218             MOVS     R2,#+24
   \   000000F2   0xF106 0x0108      ADD      R1,R6,#+8
   \   000000F6   0xA808             ADD      R0,SP,#+32
   \   000000F8   0x.... 0x....      BL       memcpy
   2423          		memcpy( ExtAddr, &DeviceTable.ExtAddress, 8);
   \   000000FC   0x2208             MOVS     R2,#+8
   \   000000FE   0xA90A             ADD      R1,SP,#+40
   \   00000100   0xA805             ADD      R0,SP,#+20
   \   00000102   0x.... 0x....      BL       memcpy
   2424          		S2w_Printf("\r\nPAN Id       :%04x",DeviceTable.PANId);
   \   00000106   0xF8BD 0x1020      LDRH     R1,[SP, #+32]
   \   0000010A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPAN Id       :%04x">`
   \   0000010E   0x.... 0x....      BL       S2w_Printf
   2425          		S2w_Printf("\r\nShort Addr   :%04x",DeviceTable.ShortAddress);
   \   00000112   0xF8BD 0x1022      LDRH     R1,[SP, #+34]
   \   00000116   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nShort Addr   :%04x">`
   \   0000011A   0x.... 0x....      BL       S2w_Printf
   2426          		S2w_Printf("\r\nLong Addr    :");
   \   0000011E   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nLong Addr    :">`
   \   00000122   0x.... 0x....      BL       S2w_Printf
   2427          		S2w_Printf("%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x",
   2428                      ExtAddr[0], ExtAddr[1], ExtAddr[2], ExtAddr[3],
   2429                      ExtAddr[4], ExtAddr[5], ExtAddr[6], ExtAddr[7]);
   \   00000126   0xF89D 0x101B      LDRB     R1,[SP, #+27]
   \   0000012A   0x9104             STR      R1,[SP, #+16]
   \   0000012C   0xA805             ADD      R0,SP,#+20
   \   0000012E   0xF89D 0x101A      LDRB     R1,[SP, #+26]
   \   00000132   0x7883             LDRB     R3,[R0, #+2]
   \   00000134   0x7842             LDRB     R2,[R0, #+1]
   \   00000136   0x9103             STR      R1,[SP, #+12]
   \   00000138   0xF89D 0x1019      LDRB     R1,[SP, #+25]
   \   0000013C   0x9102             STR      R1,[SP, #+8]
   \   0000013E   0x7901             LDRB     R1,[R0, #+4]
   \   00000140   0x9101             STR      R1,[SP, #+4]
   \   00000142   0x78C1             LDRB     R1,[R0, #+3]
   \   00000144   0x.... 0x....      ADR.W    R0,`?<Constant "%02x-%02x-%02x-%02x-%...">`
   \   00000148   0x9100             STR      R1,[SP, #+0]
   \   0000014A   0xF89D 0x1014      LDRB     R1,[SP, #+20]
   \   0000014E   0x.... 0x....      BL       S2w_Printf
   2430          		S2w_Printf("\r\nFrame Counter:%08x",DeviceTable.FrameCounter);
   \   00000152   0x990C             LDR      R1,[SP, #+48]
   \   00000154   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nFrame Counter:%08x">`
   \   00000158   0x.... 0x....      BL       S2w_Printf
   2431          		S2w_Printf("\r\nExempt       :");
   \   0000015C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nExempt       :">`
   \   00000160   0x.... 0x....      BL       S2w_Printf
   2432          		if( DeviceTable.Exempt )
   \   00000164   0xF89D 0x0034      LDRB     R0,[SP, #+52]
   \   00000168   0xE048             B.N      ??AppS2w_WLRPANGetCfg_11
   2433          			S2w_Printf("TRUE");
   2434          		else
   2435          			S2w_Printf("FALSE");
   2436          		
   2437          		break;
   2438          		
   2439          	}
   2440          	case macSecurityLevelTable:
   2441          	{
   2442          		GSN_WLRPAN_SECURITY_LEVEL_DESC_T SecILevelTable;
   2443          		memcpy( &SecILevelTable, pCfm->Value, sizeof(SecILevelTable));
   \                     ??AppS2w_WLRPANGetCfg_12:
   \   0000016A   0x2204             MOVS     R2,#+4
   \   0000016C   0x.... 0x....      BL       ?Subroutine23
   2444          		S2w_Printf("\r\nFrame Type   :%02x",SecILevelTable.FrameType);
   \                     ??CrossCallReturnLabel_86:
   \   00000170   0x.... 0x....      BL       ?Subroutine16
   2445          		S2w_Printf("\r\nCmd Frame Id :%02x",SecILevelTable.CmdFrmIdentifier);
   \                     ??CrossCallReturnLabel_40:
   \   00000174   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000178   0x4648             MOV      R0,R9
   \   0000017A   0x.... 0x....      BL       S2w_Printf
   2446          		S2w_Printf("\r\nSecurity Min :%02x",SecILevelTable.SecIMinimum);
   \   0000017E   0xF89D 0x1002      LDRB     R1,[SP, #+2]
   \   00000182   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSecurity Min :%02x">`
   \   00000186   0x.... 0x....      BL       S2w_Printf
   2447          		S2w_Printf("\r\nDeviceOverrideSecIMinimum:");
   \   0000018A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nDeviceOverrideSecIM...">`
   \   0000018E   0x.... 0x....      BL       S2w_Printf
   2448          		if( SecILevelTable.DeviceOverrideSecIMinimum )
   \   00000192   0xF89D 0x0003      LDRB     R0,[SP, #+3]
   \   00000196   0xE031             B.N      ??AppS2w_WLRPANGetCfg_11
   2449          			S2w_Printf("TRUE");
   2450          		else
   2451          			S2w_Printf("FALSE");
   2452          		break;
   2453          	}
   2454          	case macKeyIdLookupList:
   2455          	{
   2456          		GSN_WLRPAN_KEYID_LOOKUP_DESC_T LookupDesc;
   2457          		UINT8 i = 0;
   \                     ??AppS2w_WLRPANGetCfg_13:
   \   00000198   0x2700             MOVS     R7,#+0
   2458          		memcpy( &LookupDesc, pCfm->Value, sizeof( LookupDesc ));
   \   0000019A   0x220A             MOVS     R2,#+10
   \   0000019C   0x.... 0x....      BL       ?Subroutine23
   2459          		S2w_Printf("\r\nLookupData      :");
   \                     ??CrossCallReturnLabel_85:
   \   000001A0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nLookupData      :">`
   \   000001A4   0x.... 0x....      BL       S2w_Printf
   \   000001A8   0xE005             B.N      ??AppS2w_WLRPANGetCfg_14
   2460          		while( i < LookupDesc.LookupDataSize )
   2461          		{
   2462          			S2w_Printf("%02x ",LookupDesc.LookupData[i]);
   \                     ??AppS2w_WLRPANGetCfg_15:
   \   000001AA   0xA800             ADD      R0,SP,#+0
   \   000001AC   0x5C39             LDRB     R1,[R7, R0]
   \   000001AE   0x4650             MOV      R0,R10
   \   000001B0   0x.... 0x....      BL       S2w_Printf
   2463          			i++;
   \   000001B4   0x1C7F             ADDS     R7,R7,#+1
   2464          		}
   \                     ??AppS2w_WLRPANGetCfg_14:
   \   000001B6   0xF89D 0x1009      LDRB     R1,[SP, #+9]
   \   000001BA   0xB2FF             UXTB     R7,R7
   \   000001BC   0x428F             CMP      R7,R1
   \   000001BE   0xD3F4             BCC.N    ??AppS2w_WLRPANGetCfg_15
   2465          		S2w_Printf("\r\nLookupData Size :%02x",LookupDesc.LookupDataSize);
   \   000001C0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nLookupData Size :%02x">`
   \   000001C4   0xE029             B.N      ??AppS2w_WLRPANGetCfg_3
   2466          		break;
   2467          	}
   2468          	case macKeyDeviceList:
   2469          	{
   2470          		GSN_WLRPAN_KEY_DEVICE_DESC_T DeviceDesc;
   2471          		memcpy( &DeviceDesc, pCfm->Value, sizeof( DeviceDesc ));
   \                     ??AppS2w_WLRPANGetCfg_16:
   \   000001C6   0x2203             MOVS     R2,#+3
   \   000001C8   0x.... 0x....      BL       ?Subroutine23
   2472          		S2w_Printf("\r\nDeviceDescHandle :%02x",DeviceDesc.DeviceDescHandle);
   \                     ??CrossCallReturnLabel_84:
   \   000001CC   0xF89D 0x1000      LDRB     R1,[SP, #+0]
   \   000001D0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nDeviceDescHandle :%02x">`
   \   000001D4   0x.... 0x....      BL       S2w_Printf
   2473          		S2w_Printf("\r\nUniqueDevice     :");
   \   000001D8   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nUniqueDevice     :">`
   \   000001DC   0x.... 0x....      BL       S2w_Printf
   2474          		if( DeviceDesc.UniqueDevice )
   \   000001E0   0xF89D 0x0001      LDRB     R0,[SP, #+1]
   \   000001E4   0x2800             CMP      R0,#+0
   \   000001E6   0xBF14             ITE      NE 
   \   000001E8   0x4640             MOVNE    R0,R8
   \   000001EA   0x4638             MOVEQ    R0,R7
   2475          			S2w_Printf("TRUE");
   2476          		else
   2477          			S2w_Printf("FALSE");
   \   000001EC   0x.... 0x....      BL       S2w_Printf
   2478          		S2w_Printf("\r\nBlacklisted      :");
   \   000001F0   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nBlacklisted      :">`
   \   000001F4   0x.... 0x....      BL       S2w_Printf
   2479          		if( DeviceDesc.Blacklisted )
   \   000001F8   0xF89D 0x0002      LDRB     R0,[SP, #+2]
   \                     ??AppS2w_WLRPANGetCfg_11:
   \   000001FC   0x2800             CMP      R0,#+0
   \   000001FE   0xBF14             ITE      NE 
   \   00000200   0x4640             MOVNE    R0,R8
   \   00000202   0x4638             MOVEQ    R0,R7
   2480          			S2w_Printf("TRUE");
   2481          		else
   2482          			S2w_Printf("FALSE");
   \   00000204   0x.... 0x....      BL       S2w_Printf
   \   00000208   0xE023             B.N      ??AppS2w_WLRPANGetCfg_17
   2483          		break;
   2484          	}
   2485          	case macKeyUsageList:
   2486          	{
   2487          		GSN_WLRPAN_KEY_USAGE_DESC_T UsageDesc;
   2488          		memcpy( &UsageDesc, pCfm->Value, sizeof(UsageDesc));
   \                     ??AppS2w_WLRPANGetCfg_18:
   \   0000020A   0x2202             MOVS     R2,#+2
   \   0000020C   0x.... 0x....      BL       ?Subroutine23
   2489          		S2w_Printf("\r\nFrame Type   :%02x",UsageDesc.FrameType);
   \                     ??CrossCallReturnLabel_83:
   \   00000210   0x.... 0x....      BL       ?Subroutine16
   2490          		S2w_Printf("\r\nCmd Frame Id :%02x",UsageDesc.CmdFrmIdentifier);
   \                     ??CrossCallReturnLabel_39:
   \   00000214   0xF89D 0x1001      LDRB     R1,[SP, #+1]
   \   00000218   0x4648             MOV      R0,R9
   \                     ??AppS2w_WLRPANGetCfg_3:
   \   0000021A   0x.... 0x....      BL       S2w_Printf
   2491          		break;
   \   0000021E   0xE018             B.N      ??AppS2w_WLRPANGetCfg_17
   2492          	}
   2493          	case macKey:
   2494          	{
   2495          		S2w_Printf("\r\n%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x",
   2496                      pCfm->Value[0], pCfm->Value[1], pCfm->Value[2], pCfm->Value[3],
   2497                      pCfm->Value[4], pCfm->Value[5], pCfm->Value[6], pCfm->Value[7],
   2498                      pCfm->Value[8], pCfm->Value[9], pCfm->Value[10], pCfm->Value[11],
   2499                      pCfm->Value[12], pCfm->Value[13], pCfm->Value[14], pCfm->Value[15]);
   \                     ??AppS2w_WLRPANGetCfg_19:
   \   00000220   0x7DF0             LDRB     R0,[R6, #+23]
   \   00000222   0x900C             STR      R0,[SP, #+48]
   \   00000224   0x7DB0             LDRB     R0,[R6, #+22]
   \   00000226   0x900B             STR      R0,[SP, #+44]
   \   00000228   0x7D70             LDRB     R0,[R6, #+21]
   \   0000022A   0x900A             STR      R0,[SP, #+40]
   \   0000022C   0x7D30             LDRB     R0,[R6, #+20]
   \   0000022E   0x9009             STR      R0,[SP, #+36]
   \   00000230   0x7CF0             LDRB     R0,[R6, #+19]
   \   00000232   0x9008             STR      R0,[SP, #+32]
   \   00000234   0x7CB0             LDRB     R0,[R6, #+18]
   \   00000236   0x9007             STR      R0,[SP, #+28]
   \   00000238   0x7C70             LDRB     R0,[R6, #+17]
   \   0000023A   0x9006             STR      R0,[SP, #+24]
   \   0000023C   0x7C30             LDRB     R0,[R6, #+16]
   \   0000023E   0x9005             STR      R0,[SP, #+20]
   \   00000240   0x.... 0x....      BL       ?Subroutine10
   \                     ??CrossCallReturnLabel_19:
   \   00000244   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x-%02x-%02x-%02x...">_1`
   \                     ??AppS2w_WLRPANGetCfg_7:
   \   00000248   0x.... 0x....      BL       S2w_Printf
   2500          		break;
   \   0000024C   0xE001             B.N      ??AppS2w_WLRPANGetCfg_17
   2501          	}
   2502          
   2503              default:
   2504                  s2w154Ctx.operationStatus = S2W_FAILURE;
   \                     ??AppS2w_WLRPANGetCfg_1:
   \   0000024E   0x2001             MOVS     R0,#+1
   \   00000250   0x70A0             STRB     R0,[R4, #+2]
   2505                  break;
   2506              }
   2507              
   2508              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANGetCfg_17:
   \   00000252   0x1D20             ADDS     R0,R4,#+4
   \   00000254   0x.... 0x....      BL       GsnOsal_SemRelease
   2509              
   2510              return GSN_SUCCESS;
   \   00000258   0x2000             MOVS     R0,#+0
   \   0000025A   0xB00E             ADD      SP,SP,#+56
   \   0000025C   0xE8BD 0x87F0      POP      {R4-R10,PC}      ;; return
   2511          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine10:
   \   00000000   0x7BF0             LDRB     R0,[R6, #+15]
   \   00000002   0x9004             STR      R0,[SP, #+16]
   \   00000004   0x7BB0             LDRB     R0,[R6, #+14]
   \   00000006   0x9003             STR      R0,[SP, #+12]
   \   00000008   0x7B70             LDRB     R0,[R6, #+13]
   \   0000000A   0x9002             STR      R0,[SP, #+8]
   \   0000000C   0x7B30             LDRB     R0,[R6, #+12]
   \   0000000E   0x9001             STR      R0,[SP, #+4]
   \   00000010   0x7AF0             LDRB     R0,[R6, #+11]
   \   00000012   0x9000             STR      R0,[SP, #+0]
   \   00000014   0x7AB3             LDRB     R3,[R6, #+10]
   \   00000016   0x7A72             LDRB     R2,[R6, #+9]
   \   00000018   0x7A31             LDRB     R1,[R6, #+8]
   \   0000001A   0x4770             BX       LR
   2512          
   2513          

   \                                 In section .text, align 2, keep-with-next
   2514          GSN_STATUS 
   2515          AppS2w_WLRPANDataCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2516          {
   \                     AppS2w_WLRPANDataCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x461C             MOV      R4,R3
   2517              GSN_WLRPAN_DATA_CFM_T *pDataCfm = (GSN_WLRPAN_DATA_CFM_T *)pMsg;
   2518              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   00000004   0x.... 0x....      BL       ?Subroutine40
   2519          	S2w_Printf("\r\nData Cfm Status - ");
   \                     ??CrossCallReturnLabel_223:
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nData Cfm Status - ">`
   \   0000000C   0x....             B.N      ?Subroutine1
   2520          	if( pDataCfm->Status == 0 )
   2521              {
   2522          		S2w_Printf("Success");
   2523              }
   2524              else
   2525              {
   2526                  S2w_Printf("%s", pWlrpanStatusMsg[pDataCfm->Status - WlrpanStatusOffset] );
   2527              }
   2528          	S2w_Printf("\r\n");
   2529              return pDataCfm->Status;
   2530          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine1:
   \   00000000   0x.... 0x....      BL       S2w_Printf
   \   00000004   0x6860             LDR      R0,[R4, #+4]
   \   00000006   0xB920             CBNZ.N   R0,??Subroutine1_0
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "Success">`
   \   0000000C   0x.... 0x....      BL       S2w_Printf
   \   00000010   0xE001             B.N      ??CrossCallReturnLabel_20
   \                     ??Subroutine1_0:
   \   00000012   0x.... 0x....      BL       ?Subroutine11
   \                     ??CrossCallReturnLabel_20:
   \   00000016   0x....             ADR.N    R0,??DataTable139  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000018   0x.... 0x....      BL       S2w_Printf
   \   0000001C   0x6860             LDR      R0,[R4, #+4]
   \   0000001E   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine40:
   \   00000000   0x....             LDR.N    R0,??DataTable142_5
   \   00000002   0x.... 0x....      B.W      GsnOsal_SemRelease
   2531          

   \                                 In section .text, align 2, keep-with-next
   2532          GSN_STATUS 
   2533          AppS2w_WLRPANDataInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2534          {
   \                     AppS2w_WLRPANDataInd:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0x461C             MOV      R4,R3
   \   00000004   0xB086             SUB      SP,SP,#+24
   2535              GSN_WLRPAN_DATA_IND_T *pInd = (GSN_WLRPAN_DATA_IND_T * )pMsg;
   2536          	UINT8 len = pInd->MsduLength;
   \   00000006   0xF894 0x5020      LDRB     R5,[R4, #+32]
   2537          	UINT8 i = 0;
   2538              S2w_Printf("\r\nSrc PAN Id - %x", pInd->SrcPanId );
   \   0000000A   0x88A1             LDRH     R1,[R4, #+4]
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSrc PAN Id - %x">`
   \   00000010   0x2600             MOVS     R6,#+0
   \   00000012   0x.... 0x....      BL       S2w_Printf
   2539              S2w_Printf("\r\nSrc Address - ");
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nSrc Address - ">`
   \   0000001A   0x.... 0x....      BL       S2w_Printf
   2540              if( pInd->SrcMode == 0x02 )
   \   0000001E   0x7820             LDRB     R0,[R4, #+0]
   \   00000020   0x2802             CMP      R0,#+2
   \   00000022   0xD104             BNE.N    ??AppS2w_WLRPANDataInd_0
   2541              {
   2542                  S2w_Printf("%x",pInd->SrcAddr.ShortAddr);
   \   00000024   0x8A21             LDRH     R1,[R4, #+16]
   \   00000026   0x....             ADR.N    R0,??DataTable134  ;; 0x25, 0x78, 0x00, 0x00
   \   00000028   0x.... 0x....      BL       S2w_Printf
   \   0000002C   0xE009             B.N      ??AppS2w_WLRPANDataInd_1
   2543              }
   2544              else
   2545              {
   2546                  S2w_Printf("%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x\r\n",
   2547                      pInd->SrcAddr.addr[0], pInd->SrcAddr.addr[1], pInd->SrcAddr.addr[2], 
   2548                      pInd->SrcAddr.addr[3], pInd->SrcAddr.addr[4], pInd->SrcAddr.addr[5], 
   2549                      pInd->SrcAddr.addr[6], pInd->SrcAddr.addr[7]);
   \                     ??AppS2w_WLRPANDataInd_0:
   \   0000002E   0x.... 0x....      BL       ?Subroutine8
   2550              }
   \                     ??CrossCallReturnLabel_14:
   \   00000032   0xE006             B.N      ??AppS2w_WLRPANDataInd_1
   2551          	while( i < len )
   2552          	{
   2553          		S2w_Printf("%c",pInd->Msdu[i]);
   \                     ??AppS2w_WLRPANDataInd_2:
   \   00000034   0x1930             ADDS     R0,R6,R4
   \   00000036   0xF890 0x1021      LDRB     R1,[R0, #+33]
   \   0000003A   0x....             ADR.N    R0,??DataTable142_1  ;; 0x25, 0x63, 0x00, 0x00
   \   0000003C   0x.... 0x....      BL       S2w_Printf
   2554          		i++;
   \   00000040   0x1C76             ADDS     R6,R6,#+1
   2555          	}
   \                     ??AppS2w_WLRPANDataInd_1:
   \   00000042   0xB2F6             UXTB     R6,R6
   \   00000044   0x42AE             CMP      R6,R5
   \   00000046   0xDBF5             BLT.N    ??AppS2w_WLRPANDataInd_2
   2556              S2w_Printf("\r\n");
   \   00000048                      REQUIRE ?Subroutine4
   \   00000048                      ;; // Fall through to label ?Subroutine4
   2557          	
   2558              return GSN_SUCCESS;
   2559          }
   2560          

   \                                 In section .text, align 2, keep-with-next
   2561          GSN_STATUS 
   2562          AppS2w_WLRPANDataPurgeCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2563          {
   \                     AppS2w_WLRPANDataPurgeCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x461C             MOV      R4,R3
   2564              GSN_WLRPAN_PURGE_CFM_T *pCfm = ( GSN_WLRPAN_PURGE_CFM_T *)pMsg;
   2565          	S2w_Printf("\r\nPurge Cfm Status - ");
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nPurge Cfm Status - ">`
   \   00000008                      REQUIRE ?Subroutine1
   \   00000008                      ;; // Fall through to label ?Subroutine1
   2566          	if( pCfm ->Status == 0 )
   2567              {
   2568          		S2w_Printf("Success");
   2569              }
   2570              else
   2571              {
   2572                  S2w_Printf("%s", pWlrpanStatusMsg[pCfm ->Status - WlrpanStatusOffset] );
   2573              }
   2574          	S2w_Printf("\r\n");
   2575              return pCfm->Status;
   2576          }
   2577          

   \                                 In section .text, align 2, keep-with-next
   2578          GSN_STATUS 
   2579          AppS2w_WLRPANData6LoWPANCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2580          {
   \                     AppS2w_WLRPANData6LoWPANCfm:
   \   00000000   0xB580             PUSH     {R7,LR}
   2581          	//GSN_6LOWPAN_DATA_IND_T *pInd = (GSN_6LOWPAN_DATA_IND_T *)pMsg;
   2582              //if( pInd->)
   2583              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   00000002   0x....             B.N      ?Subroutine5
   2584              return GSN_SUCCESS;
   2585          }

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine5:
   \   00000000   0x.... 0x....      BL       ?Subroutine40
   \                     ??CrossCallReturnLabel_222:
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
   2586          GSN_STATUS 
   2587          AppS2w_WLRPANData6LoWPANInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2588          {
   2589              return GSN_SUCCESS;
   \                     AppS2w_WLRPANData6LoWPANInd:
   \   00000000   0x2000             MOVS     R0,#+0
   \   00000002   0x4770             BX       LR               ;; return
   2590          }
   2591          
   2592          

   \                                 In section .text, align 2, keep-with-next
   2593          GSN_STATUS 
   2594          AppS2w_WLRPANTmrCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2595          {
   \                     AppS2w_WLRPANTmrCfm:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x461C             MOV      R4,R3
   2596              GSN_WLP_TMR_CFM_T *pTmrCfm = ( GSN_WLP_TMR_CFM_T *)pMsg;
   2597              if( pTmrCfm->status == 0 )
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0xB920             CBNZ.N   R0,??AppS2w_WLRPANTmrCfm_0
   2598              {
   2599                  S2w_Printf("\r\n%02x, OK\r\n", pTmrCfm->tmrNum );
   \   00000008   0x7921             LDRB     R1,[R4, #+4]
   \   0000000A   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x, OK\\r\\n">`
   \   0000000E   0x.... 0x....      BL       S2w_Printf
   2600              }
   2601              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANTmrCfm_0:
   \   00000012   0x....             LDR.N    R0,??DataTable142_5
   \   00000014   0x....             B.N      ??Subroutine41_1
   2602              return pTmrCfm->status;
   2603          }

   \                                 In section .text, align 2, keep-with-next
   2604          GSN_STATUS 
   2605          AppS2w_WLRPANTmrInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2606          {
   \                     AppS2w_WLRPANTmrInd:
   \   00000000   0xB580             PUSH     {R7,LR}
   2607              GSN_WLP_TMR_IND_T *pTmrInd = ( GSN_WLP_TMR_IND_T *)pMsg;
   2608              S2w_Printf("\r\n%02x, EXPIRED\r\n", pTmrInd->tmrNum );    
   \   00000002   0x7919             LDRB     R1,[R3, #+4]
   \   00000004   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\n%02x, EXPIRED\\r\\n">`
   \   00000008   0x.... 0x....      BL       S2w_Printf
   2609              return GSN_SUCCESS;
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xBD02             POP      {R1,PC}          ;; return
   2610          }

   \                                 In section .text, align 2, keep-with-next
   2611          GSN_STATUS 
   2612          AppS2w_WLRPANCb( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2613          {
   \                     AppS2w_WLRPANCb:
   \   00000000   0xB580             PUSH     {R7,LR}
   2614              S2w_Printf("\r\nCB CALLED\r\n");
   \   00000002   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCB CALLED\\r\\n">`
   \   00000006   0x.... 0x....      BL       S2w_Printf
   2615              if( magId )
   2616              {
   2617                  //S2w_Printf("\r\n%02x\r\n", s2w154Ctx.channel );
   2618              }
   2619              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   0000000A                      REQUIRE ?Subroutine5
   \   0000000A                      ;; // Fall through to label ?Subroutine5
   2620              return GSN_SUCCESS;
   2621          }
   2622          
   2623          

   \                                 In section .text, align 2, keep-with-next
   2624          PUBLIC UINT8 AppS2wCmd_I154RxTest (UINT8 *ptr)
   2625          {
   \                     AppS2wCmd_I154RxTest:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   2626              UINT8 status;
   2627              GSN_WLP_RF_TEST_RX_START_T req;
   2628              GSN_WLRPAN_T *pWlrpan = &s2w154Ctx.wlrpanCtx;
   2629              UINT8 *p;
   2630              UINT32 temp = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   2631          
   2632              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000008   0xA802             ADD      R0,SP,#+8
   \   0000000A   0x.... 0x....      BL       AppS2wParse_NextParamGet
   2633              status = AppS2wParse_Int(p, &temp);
   \   0000000E   0x.... 0x....      BL       ?Subroutine27
   2634              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_146:
   \   00000012   0xB9C8             CBNZ.N   R0,??AppS2wCmd_I154RxTest_0
   2635              {
   2636                  return status;
   2637              }
   2638              req.channel = temp;
   \   00000014   0x.... 0x....      BL       ?Subroutine37
   2639          
   2640              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);	
   \                     ??CrossCallReturnLabel_214:
   \   00000018   0xA802             ADD      R0,SP,#+8
   \   0000001A   0x.... 0x....      BL       AppS2wParse_NextParamGet
   2641              status = AppS2wParse_Int(p, &temp);
   \   0000001E   0x.... 0x....      BL       ?Subroutine27
   2642              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_145:
   \   00000022   0xB988             CBNZ.N   R0,??AppS2wCmd_I154RxTest_0
   2643              {
   2644                  return status;
   2645              }
   2646              req.filter = temp;
   \   00000024   0x9800             LDR      R0,[SP, #+0]
   \   00000026   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2647              
   2648              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);	
   \   0000002A   0xA802             ADD      R0,SP,#+8
   \   0000002C   0x.... 0x....      BL       AppS2wParse_NextParamGet
   2649              status = AppS2wParse_Int(p, &temp);
   \   00000030   0x.... 0x....      BL       ?Subroutine27
   2650              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_144:
   \   00000034   0xB940             CBNZ.N   R0,??AppS2wCmd_I154RxTest_0
   2651              {
   2652                  return status;
   2653              }
   2654              req.frmLen = temp;
   \   00000036   0x9800             LDR      R0,[SP, #+0]
   \   00000038   0xF88D 0x0006      STRB     R0,[SP, #+6]
   2655          
   2656              status = GsnWLRPAN_GenericReq( pWlrpan, GSN_WLP_GEN_RF_TEST_RX_START, &req );
   2657              /* [TO DO] : Print the stat values*/
   2658              return status;
   \   0000003C   0xAA01             ADD      R2,SP,#+4
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x....             LDR.N    R0,??DataTable142_6
   \   00000042   0x.... 0x....      BL       GsnWLRPAN_GenericReq
   \   00000046   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_I154RxTest_0:
   \   00000048   0xBD0E             POP      {R1-R3,PC}       ;; return
   2659          
   2660          }
   2661          

   \                                 In section .text, align 2, keep-with-next
   2662          PUBLIC UINT8 AppS2wCmd_I154RxTestStop (UINT8 *ptr)
   2663          {
   \                     AppS2wCmd_I154RxTestStop:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   2664              UINT8 status;
   2665              GSN_WLP_RF_TEST_RX_STAT_T stat;
   2666              GSN_WLRPAN_T *pWlrpan = &s2w154Ctx.wlrpanCtx;    
   2667              status = GsnWLRPAN_GenericReq( pWlrpan, GSN_WLP_GEN_RF_TEST_RX_STOP, &stat );
   \   00000004   0x....             LDR.N    R4,??DataTable142
   \   00000006   0xAA00             ADD      R2,SP,#+0
   \   00000008   0x2101             MOVS     R1,#+1
   \   0000000A   0xF104 0x0098      ADD      R0,R4,#+152
   \   0000000E   0x.... 0x....      BL       GsnWLRPAN_GenericReq
   2668          
   2669              if( status == GSN_SUCCESS )
   \   00000012   0xB2C5             UXTB     R5,R0
   \   00000014   0xB93D             CBNZ.N   R5,??AppS2wCmd_I154RxTestStop_0
   2670              {
   2671                  semRelease = TRUE;
   \   00000016   0x....             LDR.N    R0,??DataTable142_7
   \   00000018   0x2101             MOVS     R1,#+1
   \   0000001A   0x7001             STRB     R1,[R0, #+0]
   2672                  GsnOsal_SemAcquire( &s2w154Ctx.blockingSem, GSN_OSAL_WAIT_FOREVER );
   \   0000001C   0x1D20             ADDS     R0,R4,#+4
   \   0000001E   0xF04F 0x31FF      MOV      R1,#-1
   \   00000022   0x.... 0x....      BL       GsnOsal_SemAcquire
   2673              }
   2674              return status;
   \                     ??AppS2wCmd_I154RxTestStop_0:
   \   00000026   0x4628             MOV      R0,R5
   \   00000028   0xBD3E             POP      {R1-R5,PC}       ;; return
   2675          }
   2676          

   \                                 In section .text, align 2, keep-with-next
   2677          PUBLIC UINT8 AppS2wCmd_I154TxTest (UINT8 *ptr)
   2678          {
   \                     AppS2wCmd_I154TxTest:
   \   00000000   0xB501             PUSH     {R0,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
   2679              UINT8 status;
   2680              GSN_WLP_RF_TEST_TX_T req;
   2681              GSN_WLRPAN_T *pWlrpan = &s2w154Ctx.wlrpanCtx;
   2682              UINT8 *p;
   2683              UINT32 temp = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9000             STR      R0,[SP, #+0]
   2684          
   2685              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000008   0x.... 0x....      BL       ?Subroutine33
   2686              status = AppS2wParse_Int(p, &temp);
   \                     ??CrossCallReturnLabel_192:
   \   0000000C   0x.... 0x....      BL       ?Subroutine27
   2687              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_143:
   \   00000010   0xBB28             CBNZ.N   R0,??AppS2wCmd_I154TxTest_0
   2688              {
   2689                  return status;
   2690              }
   2691              req.channel = temp;
   \   00000012   0x.... 0x....      BL       ?Subroutine37
   2692          
   2693              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \                     ??CrossCallReturnLabel_215:
   \   00000016   0x.... 0x....      BL       ?Subroutine33
   2694              status = AppS2wParse_Int(p, &temp);
   \                     ??CrossCallReturnLabel_191:
   \   0000001A   0x.... 0x....      BL       ?Subroutine27
   2695              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_142:
   \   0000001E   0xB9F0             CBNZ.N   R0,??AppS2wCmd_I154TxTest_0
   2696              {
   2697                  return status;
   2698              }
   2699              req.numOfFrm = temp;
   \   00000020   0x9800             LDR      R0,[SP, #+0]
   \   00000022   0x9002             STR      R0,[SP, #+8]
   2700          
   2701              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000024   0x.... 0x....      BL       ?Subroutine33
   2702              status = AppS2wParse_Int(p, &temp);
   \                     ??CrossCallReturnLabel_190:
   \   00000028   0x.... 0x....      BL       ?Subroutine27
   2703              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_141:
   \   0000002C   0xB9B8             CBNZ.N   R0,??AppS2wCmd_I154TxTest_0
   2704              {
   2705                  return status;
   2706              }
   2707              req.frmLen = temp;
   \   0000002E   0x9800             LDR      R0,[SP, #+0]
   \   00000030   0xF88D 0x0005      STRB     R0,[SP, #+5]
   2708          
   2709              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000034   0x.... 0x....      BL       ?Subroutine33
   2710              status = AppS2wParse_Int(p, &temp);
   \                     ??CrossCallReturnLabel_189:
   \   00000038   0x.... 0x....      BL       ?Subroutine27
   2711              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_140:
   \   0000003C   0xB978             CBNZ.N   R0,??AppS2wCmd_I154TxTest_0
   2712              {
   2713                  return status;
   2714              }
   2715              req.txPwr = temp;
   \   0000003E   0x9800             LDR      R0,[SP, #+0]
   \   00000040   0xF88D 0x0006      STRB     R0,[SP, #+6]
   2716              
   2717              p=(UINT8*)AppS2wParse_NextParamGet(&ptr);
   \   00000044   0x.... 0x....      BL       ?Subroutine33
   2718              status = AppS2wParse_Int(p, &temp);
   \                     ??CrossCallReturnLabel_188:
   \   00000048   0x.... 0x....      BL       ?Subroutine27
   2719              if(status != S2W_SUCCESS)
   \                     ??CrossCallReturnLabel_139:
   \   0000004C   0xB938             CBNZ.N   R0,??AppS2wCmd_I154TxTest_0
   2720              {
   2721                  return status;
   2722              }
   2723              req.delay = temp;
   \   0000004E   0x9800             LDR      R0,[SP, #+0]
   \   00000050   0x9003             STR      R0,[SP, #+12]
   2724              
   2725              status = GsnWLRPAN_GenericReq( pWlrpan, GSN_WLP_GEN_RF_TEST_TX, &req );
   2726              /* [TO DO] : Print the stat values*/
   2727          
   2728              return status;
   \   00000052   0xAA01             ADD      R2,SP,#+4
   \   00000054   0x2103             MOVS     R1,#+3
   \   00000056   0x....             LDR.N    R0,??DataTable142_6
   \   00000058   0x.... 0x....      BL       GsnWLRPAN_GenericReq
   \   0000005C   0xB2C0             UXTB     R0,R0
   \                     ??AppS2wCmd_I154TxTest_0:
   \   0000005E   0xB005             ADD      SP,SP,#+20
   \   00000060   0xBD00             POP      {PC}             ;; return
   2729          }

   \                                 In section .text, align 2, keep-with-next
   2730          GSN_STATUS
   2731          AppS2w_WLRPANGenCfm( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2732          {
   \                     AppS2w_WLRPANGenCfm:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
   \   00000002   0x461C             MOV      R4,R3
   2733              UINT32 *pTmp = pMsg;
   2734              UINT32 i = 0, j = msgLen >> 2;
   \   00000004   0x0895             LSRS     R5,R2,#+2
   2735              
   2736              GSN_WLP_GEN_TEST_T *pCfm = (GSN_WLP_GEN_TEST_T *)pMsg;
   2737              
   2738              S2w_Printf("\r\nCmd Id = %02x\r\n", pTmp[0]);
   \   00000006   0x6821             LDR      R1,[R4, #+0]
   \   00000008   0x.... 0x....      ADR.W    R0,`?<Constant "\\r\\nCmd Id = %02x\\r\\n">`
   \   0000000C   0x.... 0x....      BL       S2w_Printf
   2739              i++;
   2740              
   2741              /**< Check the Message Id here */
   2742              if( pCfm->msgId == GSN_WLP_GEN_RF_TEST_RX_STOP_CFM )
   \   00000010   0x6820             LDR      R0,[R4, #+0]
   \   00000012   0x2802             CMP      R0,#+2
   \   00000014   0xD105             BNE.N    ??AppS2w_WLRPANGenCfm_0
   2743              {
   2744                  /**< Print the Rx Stats */
   2745                  S2w_Printf("Pkts Received - %d\r\nBytes Received - %d",pCfm->testParam.rxStat.pktRecv,pCfm->testParam.rxStat.byteRecv);
   \   00000016   0x68A2             LDR      R2,[R4, #+8]
   \   00000018   0x6861             LDR      R1,[R4, #+4]
   \   0000001A   0x.... 0x....      ADR.W    R0,`?<Constant "Pkts Received - %d\\r\\nB...">`
   \   0000001E   0x.... 0x....      BL       S2w_Printf
   2746              }
   2747              if( pTmp[0] == 5 )
   \                     ??AppS2w_WLRPANGenCfm_0:
   \   00000022   0x6820             LDR      R0,[R4, #+0]
   \   00000024   0x2805             CMP      R0,#+5
   \   00000026   0xD10D             BNE.N    ??AppS2w_WLRPANGenCfm_1
   2748              {
   2749                  i = 2;
   \   00000028   0x2602             MOVS     R6,#+2
   \   0000002A   0x.... 0x....      ADR.W    R7,`?<Constant "Offset - %02x : %08x\\r\\n">`
   \   0000002E   0xE007             B.N      ??AppS2w_WLRPANGenCfm_2
   2750                  while( j >= i )
   2751                  {
   2752                      S2w_Printf("Offset - %02x : %08x\r\n", (( i - 2 ) << 2 ), pTmp[i] );
   \                     ??AppS2w_WLRPANGenCfm_3:
   \   00000030   0x1EB0             SUBS     R0,R6,#+2
   \   00000032   0xF854 0x2026      LDR      R2,[R4, R6, LSL #+2]
   \   00000036   0x0081             LSLS     R1,R0,#+2
   \   00000038   0x4638             MOV      R0,R7
   \   0000003A   0x.... 0x....      BL       S2w_Printf
   2753                      i++;
   \   0000003E   0x1C76             ADDS     R6,R6,#+1
   2754                  }
   \                     ??AppS2w_WLRPANGenCfm_2:
   \   00000040   0x42B5             CMP      R5,R6
   \   00000042   0xD2F5             BCS.N    ??AppS2w_WLRPANGenCfm_3
   2755              }
   2756              GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \                     ??AppS2w_WLRPANGenCfm_1:
   \   00000044   0x.... 0x....      BL       ?Subroutine40
   2757              return GSN_SUCCESS;
   \                     ??CrossCallReturnLabel_221:
   \   00000048   0x2000             MOVS     R0,#+0
   \   0000004A   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
   2758          }
   2759          

   \                                 In section .text, align 2, keep-with-next
   2760          GSN_STATUS
   2761          AppS2w_WLRPANGenInd( VOID* ctx, UINT32 magId, UINT16 msgLen, VOID *pMsg )
   2762          {
   \                     AppS2w_WLRPANGenInd:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x461C             MOV      R4,R3
   2763              //UINT32 *pTmp = pMsg;
   2764              GSN_WLP_GEN_TEST_T *pData = pMsg;
   2765              
   2766              switch( pData->msgId )
   \   00000004   0x6820             LDR      R0,[R4, #+0]
   \   00000006   0x2802             CMP      R0,#+2
   \   00000008   0xD109             BNE.N    ??AppS2w_WLRPANGenInd_0
   2767              {
   2768                  case GSN_WLP_GEN_RF_TEST_RX_STOP_CFM:
   2769                      S2w_Printf("No of packets received = %d\r\n", 
   2770                          pData->testParam.rxStat.pktRecv );
   \   0000000A   0x6861             LDR      R1,[R4, #+4]
   \   0000000C   0x.... 0x....      ADR.W    R0,`?<Constant "No of packets receive...">`
   \   00000010   0x.... 0x....      BL       S2w_Printf
   2771                      S2w_Printf("No of bytes received = %d\r\n", 
   2772                          pData->testParam.rxStat.byteRecv );            
   \   00000014   0x68A1             LDR      R1,[R4, #+8]
   \   00000016   0x.... 0x....      ADR.W    R0,`?<Constant "No of bytes received ...">`
   \   0000001A   0x.... 0x....      BL       S2w_Printf
   2773                      break;            
   2774                  default:
   2775                      break;
   2776              }
   2777                  
   2778              
   2779              if( semRelease == TRUE )
   \                     ??AppS2w_WLRPANGenInd_0:
   \   0000001E   0x....             LDR.N    R4,??DataTable142_7
   \   00000020   0x7820             LDRB     R0,[R4, #+0]
   \   00000022   0x2801             CMP      R0,#+1
   \   00000024   0xD103             BNE.N    ??AppS2w_WLRPANGenInd_1
   2780              {
   2781                  GsnOsal_SemRelease( &s2w154Ctx.blockingSem );
   \   00000026   0x.... 0x....      BL       ?Subroutine40
   2782                  semRelease = FALSE;
   \                     ??CrossCallReturnLabel_220:
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x7020             STRB     R0,[R4, #+0]
   2783              }
   2784              return GSN_SUCCESS;
   \                     ??AppS2w_WLRPANGenInd_1:
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0xBD10             POP      {R4,PC}          ;; return
   2785          }

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "COUNTER_ERROR">`:
   \   00000000   0x43 0x4F          DC8 "COUNTER_ERROR"
   \              0x55 0x4E    
   \              0x54 0x45    
   \              0x52 0x5F    
   \              0x45 0x52    
   \              0x52 0x4F    
   \              0x52 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IMPROPER_KEY_TYPE">`:
   \   00000000   0x49 0x4D          DC8 "IMPROPER_KEY_TYPE"
   \              0x50 0x52    
   \              0x4F 0x50    
   \              0x45 0x52    
   \              0x5F 0x4B    
   \              0x45 0x59    
   \              0x5F 0x54    
   \              0x59 0x50    
   \              0x45 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "IMPROPER_SECURITY_LEVEL">`:
   \   00000000   0x49 0x4D          DC8 "IMPROPER_SECURITY_LEVEL"
   \              0x50 0x52    
   \              0x4F 0x50    
   \              0x45 0x52    
   \              0x5F 0x53    
   \              0x45 0x43    
   \              0x55 0x52    
   \              0x49 0x54    
   \              0x59 0x5F    
   \              0x4C 0x45    
   \              0x56 0x45    
   \              0x4C 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNSUPPORTED_LEGACY">`:
   \   00000000   0x55 0x4E          DC8 "UNSUPPORTED_LEGACY"
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x45    
   \              0x44 0x5F    
   \              0x4C 0x45    
   \              0x47 0x41    
   \              0x43 0x59    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNSUPPORTED_SECURITY">`:
   \   00000000   0x55 0x4E          DC8 "UNSUPPORTED_SECURITY"
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x45    
   \              0x44 0x5F    
   \              0x53 0x45    
   \              0x43 0x55    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "BEACON_LOSS">`:
   \   00000000   0x42 0x45          DC8 "BEACON_LOSS"
   \              0x41 0x43    
   \              0x4F 0x4E    
   \              0x5F 0x4C    
   \              0x4F 0x53    
   \              0x53 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CHANNEL_ACCESS_FAILURE">`:
   \   00000000   0x43 0x48          DC8 "CHANNEL_ACCESS_FAILURE"
   \              0x41 0x4E    
   \              0x4E 0x45    
   \              0x4C 0x5F    
   \              0x41 0x43    
   \              0x43 0x45    
   \              0x53 0x53    
   \              0x5F 0x46    
   \              0x41 0x49    
   \              0x4C 0x55    
   \              0x52 0x45    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DENIED">`:
   \   00000000   0x44 0x45          DC8 "DENIED"
   \              0x4E 0x49    
   \              0x45 0x44    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "DISABLE_TRX_FAILURE">`:
   \   00000000   0x44 0x49          DC8 "DISABLE_TRX_FAILURE"
   \              0x53 0x41    
   \              0x42 0x4C    
   \              0x45 0x5F    
   \              0x54 0x52    
   \              0x58 0x5F    
   \              0x46 0x41    
   \              0x49 0x4C    
   \              0x55 0x52    
   \              0x45 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SECURITY_ERROR">`:
   \   00000000   0x53 0x45          DC8 "SECURITY_ERROR"
   \              0x43 0x55    
   \              0x52 0x49    
   \              0x54 0x59    
   \              0x5F 0x45    
   \              0x52 0x52    
   \              0x4F 0x52    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "FRAME_TOO_LONG">`:
   \   00000000   0x46 0x52          DC8 "FRAME_TOO_LONG"
   \              0x41 0x4D    
   \              0x45 0x5F    
   \              0x54 0x4F    
   \              0x4F 0x5F    
   \              0x4C 0x4F    
   \              0x4E 0x47    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVALID_GTS">`:
   \   00000000   0x49 0x4E          DC8 "INVALID_GTS"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x5F    
   \              0x47 0x54    
   \              0x53 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVALID_HANDLE">`:
   \   00000000   0x49 0x4E          DC8 "INVALID_HANDLE"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x5F    
   \              0x48 0x41    
   \              0x4E 0x44    
   \              0x4C 0x45    
   \              0x00         
   \   0000000F   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVALID_PARAMETER">`:
   \   00000000   0x49 0x4E          DC8 "INVALID_PARAMETER"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x5F    
   \              0x50 0x41    
   \              0x52 0x41    
   \              0x4D 0x45    
   \              0x54 0x45    
   \              0x52 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO_ACK">`:
   \   00000000   0x4E 0x4F          DC8 "NO_ACK"
   \              0x5F 0x41    
   \              0x43 0x4B    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO_BEACON">`:
   \   00000000   0x4E 0x4F          DC8 "NO_BEACON"
   \              0x5F 0x42    
   \              0x45 0x41    
   \              0x43 0x4F    
   \              0x4E 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO_DATA">`:
   \   00000000   0x4E 0x4F          DC8 "NO_DATA"
   \              0x5F 0x44    
   \              0x41 0x54    
   \              0x41 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "NO_SHORT_ADDRESS">`:
   \   00000000   0x4E 0x4F          DC8 "NO_SHORT_ADDRESS"
   \              0x5F 0x53    
   \              0x48 0x4F    
   \              0x52 0x54    
   \              0x5F 0x41    
   \              0x44 0x44    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "OUT_OF_CAP">`:
   \   00000000   0x4F 0x55          DC8 "OUT_OF_CAP"
   \              0x54 0x5F    
   \              0x4F 0x46    
   \              0x5F 0x43    
   \              0x41 0x50    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PAN_ID_CONFLICT">`:
   \   00000000   0x50 0x41          DC8 "PAN_ID_CONFLICT"
   \              0x4E 0x5F    
   \              0x49 0x44    
   \              0x5F 0x43    
   \              0x4F 0x4E    
   \              0x46 0x4C    
   \              0x49 0x43    
   \              0x54 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "REALIGNMENT">`:
   \   00000000   0x52 0x45          DC8 "REALIGNMENT"
   \              0x41 0x4C    
   \              0x49 0x47    
   \              0x4E 0x4D    
   \              0x45 0x4E    
   \              0x54 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TRANSACTION_EXPIRED">`:
   \   00000000   0x54 0x52          DC8 "TRANSACTION_EXPIRED"
   \              0x41 0x4E    
   \              0x53 0x41    
   \              0x43 0x54    
   \              0x49 0x4F    
   \              0x4E 0x5F    
   \              0x45 0x58    
   \              0x50 0x49    
   \              0x52 0x45    
   \              0x44 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TRANSACTION_OVERFLOW">`:
   \   00000000   0x54 0x52          DC8 "TRANSACTION_OVERFLOW"
   \              0x41 0x4E    
   \              0x53 0x41    
   \              0x43 0x54    
   \              0x49 0x4F    
   \              0x4E 0x5F    
   \              0x4F 0x56    
   \              0x45 0x52    
   \              0x46 0x4C    
   \              0x4F 0x57    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TX_ACTIVE">`:
   \   00000000   0x54 0x58          DC8 "TX_ACTIVE"
   \              0x5F 0x41    
   \              0x43 0x54    
   \              0x49 0x56    
   \              0x45 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNAVAILABLE_KEY">`:
   \   00000000   0x55 0x4E          DC8 "UNAVAILABLE_KEY"
   \              0x41 0x56    
   \              0x41 0x49    
   \              0x4C 0x41    
   \              0x42 0x4C    
   \              0x45 0x5F    
   \              0x4B 0x45    
   \              0x59 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "UNSUPPORTED_ATTRIBUTE">`:
   \   00000000   0x55 0x4E          DC8 "UNSUPPORTED_ATTRIBUTE"
   \              0x53 0x55    
   \              0x50 0x50    
   \              0x4F 0x52    
   \              0x54 0x45    
   \              0x44 0x5F    
   \              0x41 0x54    
   \              0x54 0x52    
   \              0x49 0x42    
   \              0x55 0x54    
   \              0x45 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVALID_ADDRESS">`:
   \   00000000   0x49 0x4E          DC8 "INVALID_ADDRESS"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x5F    
   \              0x41 0x44    
   \              0x44 0x52    
   \              0x45 0x53    
   \              0x53 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "ON_TIME_TOO_LONG">`:
   \   00000000   0x4F 0x4E          DC8 "ON_TIME_TOO_LONG"
   \              0x5F 0x54    
   \              0x49 0x4D    
   \              0x45 0x5F    
   \              0x54 0x4F    
   \              0x4F 0x5F    
   \              0x4C 0x4F    
   \              0x4E 0x47    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "PAST_TIME">`:
   \   00000000   0x50 0x41          DC8 "PAST_TIME"
   \              0x53 0x54    
   \              0x5F 0x54    
   \              0x49 0x4D    
   \              0x45 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "TRACKING_OFF">`:
   \   00000000   0x54 0x52          DC8 "TRACKING_OFF"
   \              0x41 0x43    
   \              0x4B 0x49    
   \              0x4E 0x47    
   \              0x5F 0x4F    
   \              0x46 0x46    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "INVALID_INDEX">`:
   \   00000000   0x49 0x4E          DC8 "INVALID_INDEX"
   \              0x56 0x41    
   \              0x4C 0x49    
   \              0x44 0x5F    
   \              0x49 0x4E    
   \              0x44 0x45    
   \              0x58 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "LIMIT_REACHED">`:
   \   00000000   0x4C 0x49          DC8 "LIMIT_REACHED"
   \              0x4D 0x49    
   \              0x54 0x5F    
   \              0x52 0x45    
   \              0x41 0x43    
   \              0x48 0x45    
   \              0x44 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "READ_ONLY">`:
   \   00000000   0x52 0x45          DC8 "READ_ONLY"
   \              0x41 0x44    
   \              0x5F 0x4F    
   \              0x4E 0x4C    
   \              0x59 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SCAN_IN_PROGRESS">`:
   \   00000000   0x53 0x43          DC8 "SCAN_IN_PROGRESS"
   \              0x41 0x4E    
   \              0x5F 0x49    
   \              0x4E 0x5F    
   \              0x50 0x52    
   \              0x4F 0x47    
   \              0x52 0x45    
   \              0x53 0x53    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "SUPERFRAME_OVERLAP">`:
   \   00000000   0x53 0x55          DC8 "SUPERFRAME_OVERLAP"
   \              0x50 0x45    
   \              0x52 0x46    
   \              0x52 0x41    
   \              0x4D 0x45    
   \              0x5F 0x4F    
   \              0x56 0x45    
   \              0x52 0x4C    
   \              0x41 0x50    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "CONDITIONAL_PASS">`:
   \   00000000   0x43 0x4F          DC8 "CONDITIONAL_PASS"
   \              0x4E 0x44    
   \              0x49 0x54    
   \              0x49 0x4F    
   \              0x4E 0x41    
   \              0x4C 0x5F    
   \              0x50 0x41    
   \              0x53 0x53    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant {0}>_1`:
   \   00000000   0x0000             DC16 0
   \   00000002   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000012   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 8, keep-with-next
   \                     `?<Constant {0}>_2`:
   \   00000000   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00         

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%s">`:
   \   00000000   0x25 0x73          DC8 "%s"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%x">`:
   \   00000000   0x25 0x78          DC8 "%x"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4, keep-with-next
   \                     `?<Constant "%c">`:
   \   00000000   0x25 0x63          DC8 "%c"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,_1`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0xFF 0x00    
   \              0x00 0x00    

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine19:
   \   00000000   0xF104 0x0098      ADD      R0,R4,#+152
   \   00000004   0x.... 0x....      B.W      GsnWLRPAN_WifMgmtSend

   \                                 In section .text, align 2, keep-with-next
   \                     ?Subroutine18:
   \   00000000   0x....             LDR.N    R4,??DataTable124
   \   00000002   0xAA01             ADD      R2,SP,#+4
   \   00000004   0x4770             BX       LR

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable124:
   \   00000000   0x........         DC32     s2w154Ctx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable128:
   \   00000000   0x01FFF000         DC32     0x1fff000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable132:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable134:
   \   00000000   0x25 0x78          DC8      0x25, 0x78, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable139:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142:
   \   00000000   0x........         DC32     s2w154Ctx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_1:
   \   00000000   0x25 0x63          DC8      0x25, 0x63, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_2:
   \   00000000   0x25 0x73          DC8      0x25, 0x73, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_3:
   \   00000000   0x........         DC32     WlrpanStatusOffset

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_4:
   \   00000000   0x........         DC32     pWlrpanStatusMsg

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_5:
   \   00000000   0x........         DC32     s2w154Ctx+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_6:
   \   00000000   0x........         DC32     s2w154Ctx+0x98

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable142_7:
   \   00000000   0x........         DC32     semRelease

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDevice Disassociated\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Device Disassociated\015\012"
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x44    
   \              0x69 0x73    
   \              0x61 0x73    
   \              0x73 0x6F    
   \              0x63 0x69    
   \              0x61 0x74    
   \              0x65 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBeacon Notification\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Beacon Notification\015\012"
   \              0x42 0x65    
   \              0x61 0x63    
   \              0x6F 0x6E    
   \              0x20 0x4E    
   \              0x6F 0x74    
   \              0x69 0x66    
   \              0x69 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%x  %02d  ">`:
   \   00000000   0x25 0x78          DC8 "%x  %02d  "
   \              0x20 0x20    
   \              0x25 0x30    
   \              0x32 0x64    
   \              0x20 0x20    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %02x-%02x-%02x-%02x-...">`:
   \   00000000   0x20 0x25          DC8 " %02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x "
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x20 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %x ">`:
   \   00000000   0x20 0x25          DC8 " %x "
   \              0x78 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %d ">`:
   \   00000000   0x20 0x25          DC8 " %d "
   \              0x64 0x20    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant " %02x ">`:
   \   00000000   0x20 0x25          DC8 " %02x "
   \              0x30 0x32    
   \              0x78 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nGTS Indiacation\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012GTS Indiacation\015\012"
   \              0x47 0x54    
   \              0x53 0x20    
   \              0x49 0x6E    
   \              0x64 0x69    
   \              0x61 0x63    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x0D    
   \              0x0A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nChannel Index\\tEnerg...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Channel Index\tEnergy Reading"
   \              0x43 0x68    
   \              0x61 0x6E    
   \              0x6E 0x65    
   \              0x6C 0x20    
   \              0x49 0x6E    
   \              0x64 0x65    
   \              0x78 0x09    
   \              0x45 0x6E    
   \              0x65 0x72    
   \              0x67 0x79    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x64 0x69    
   \              0x6E 0x67    
   \              0x00         
   \   0000001F   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n\\t%d\\t\\t%d">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012\t%d\t\t%d"
   \              0x09 0x25    
   \              0x64 0x09    
   \              0x09 0x25    
   \              0x64 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n\\nPANID BO  SO  BLE ...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012\012PANID BO  SO  BLE   PAN-CRD  AssocPermit\015\012"
   \              0x0A 0x50    
   \              0x41 0x4E    
   \              0x49 0x44    
   \              0x20 0x42    
   \              0x4F 0x20    
   \              0x20 0x53    
   \              0x4F 0x20    
   \              0x20 0x42    
   \              0x4C 0x45    
   \              0x20 0x20    
   \              0x20 0x50    
   \              0x41 0x4E    
   \              0x2D 0x43    
   \              0x52 0x44    
   \              0x20 0x20    
   \              0x41 0x73    
   \              0x73 0x6F    
   \              0x63 0x50    
   \              0x65 0x72    
   \              0x6D 0x69    
   \              0x74 0x0D    
   \              0x0A 0x00    
   \   0000002E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%04x  ">`:
   \   00000000   0x25 0x30          DC8 "%04x  "
   \              0x34 0x78    
   \              0x20 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02d  ">`:
   \   00000000   0x25 0x30          DC8 "%02d  "
   \              0x32 0x64    
   \              0x20 0x20    
   \              0x00         
   \   00000007   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02d     ">`:
   \   00000000   0x25 0x30          DC8 "%02d     "
   \              0x32 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TRUE     ">`:
   \   00000000   0x54 0x52          DC8 "TRUE     "
   \              0x55 0x45    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FALSE    ">`:
   \   00000000   0x46 0x41          DC8 "FALSE    "
   \              0x4C 0x53    
   \              0x45 0x20    
   \              0x20 0x20    
   \              0x20 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "TRUE">`:
   \   00000000   0x54 0x52          DC8 "TRUE"
   \              0x55 0x45    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "FALSE">`:
   \   00000000   0x46 0x41          DC8 "FALSE"
   \              0x4C 0x53    
   \              0x45 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nComm Status Indication">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Comm Status Indication"
   \              0x43 0x6F    
   \              0x6D 0x6D    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x49 0x6E    
   \              0x64 0x69    
   \              0x63 0x61    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nStatus - ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Status - "
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x2D    
   \              0x20 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Success">`:
   \   00000000   0x53 0x75          DC8 "Success"
   \              0x63 0x63    
   \              0x65 0x73    
   \              0x73 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPAN Id - %x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012PAN Id - %x"
   \              0x50 0x41    
   \              0x4E 0x20    
   \              0x49 0x64    
   \              0x20 0x2D    
   \              0x20 0x25    
   \              0x78 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSrc Address - ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Src Address - "
   \              0x53 0x72    
   \              0x63 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x2D 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x-%02x-%02x-%02x-%...">`:
   \   00000000   0x25 0x30          DC8 "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDst Address - ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Dst Address - "
   \              0x44 0x73    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x65 0x73    
   \              0x73 0x20    
   \              0x2D 0x20    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x-%02x-%02x-%02x-%...">_1`:
   \   00000000   0x25 0x30          DC8 "%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x\015\012"
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSyncLoss\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012SyncLoss\015\012"
   \              0x53 0x79    
   \              0x6E 0x63    
   \              0x4C 0x6F    
   \              0x73 0x73    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x\015\012"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%04x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%04x\015\012"
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%08x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%08x\015\012"
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x-%02x-%02x-%02x...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x00    
   \   0000002A   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "%02x ">`:
   \   00000000   0x25 0x30          DC8 "%02x "
   \              0x32 0x78    
   \              0x20 0x00    
   \   00000006   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPAN Id       :%04x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012PAN Id       :%04x"
   \              0x50 0x41    
   \              0x4E 0x20    
   \              0x49 0x64    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nShort Addr   :%04x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Short Addr   :%04x"
   \              0x53 0x68    
   \              0x6F 0x72    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x64 0x72    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x34 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nLong Addr    :">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Long Addr    :"
   \              0x4C 0x6F    
   \              0x6E 0x67    
   \              0x20 0x41    
   \              0x64 0x64    
   \              0x72 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nFrame Counter:%08x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Frame Counter:%08x"
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x43 0x6F    
   \              0x75 0x6E    
   \              0x74 0x65    
   \              0x72 0x3A    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nExempt       :">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Exempt       :"
   \              0x45 0x78    
   \              0x65 0x6D    
   \              0x70 0x74    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nFrame Type   :%02x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Frame Type   :%02x"
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCmd Frame Id :%02x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Cmd Frame Id :%02x"
   \              0x43 0x6D    
   \              0x64 0x20    
   \              0x46 0x72    
   \              0x61 0x6D    
   \              0x65 0x20    
   \              0x49 0x64    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSecurity Min :%02x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Security Min :%02x"
   \              0x53 0x65    
   \              0x63 0x75    
   \              0x72 0x69    
   \              0x74 0x79    
   \              0x20 0x4D    
   \              0x69 0x6E    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDeviceOverrideSecIM...">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012DeviceOverrideSecIMinimum:"
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x4F 0x76    
   \              0x65 0x72    
   \              0x72 0x69    
   \              0x64 0x65    
   \              0x53 0x65    
   \              0x63 0x49    
   \              0x4D 0x69    
   \              0x6E 0x69    
   \              0x6D 0x75    
   \              0x6D 0x3A    
   \              0x00         
   \   0000001D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nLookupData      :">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012LookupData      :"
   \              0x4C 0x6F    
   \              0x6F 0x6B    
   \              0x75 0x70    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x3A 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nLookupData Size :%02x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012LookupData Size :%02x"
   \              0x4C 0x6F    
   \              0x6F 0x6B    
   \              0x75 0x70    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x53    
   \              0x69 0x7A    
   \              0x65 0x20    
   \              0x3A 0x25    
   \              0x30 0x32    
   \              0x78 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nDeviceDescHandle :%02x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012DeviceDescHandle :%02x"
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x44 0x65    
   \              0x73 0x63    
   \              0x48 0x61    
   \              0x6E 0x64    
   \              0x6C 0x65    
   \              0x20 0x3A    
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x00         
   \   00000019   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nUniqueDevice     :">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012UniqueDevice     :"
   \              0x55 0x6E    
   \              0x69 0x71    
   \              0x75 0x65    
   \              0x44 0x65    
   \              0x76 0x69    
   \              0x63 0x65    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nBlacklisted      :">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Blacklisted      :"
   \              0x42 0x6C    
   \              0x61 0x63    
   \              0x6B 0x6C    
   \              0x69 0x73    
   \              0x74 0x65    
   \              0x64 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x3A    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x-%02x-%02x-%02x...">_1`:
   \   00000000   0x0D 0x0A          DC8 0DH, 0AH, 25H, 30H, 32H, 78H, 2DH, 25H
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \   00000008   0x30 0x32          DC8 30H, 32H, 78H, 2DH, 25H, 30H, 32H, 78H
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \   00000010   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 78H, 2DH, 25H, 30H
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \   00000018   0x32 0x78          DC8 32H, 78H, 2DH, 25H, 30H, 32H, 78H, 2DH
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \   00000020   0x25 0x30          DC8 25H, 30H, 32H, 78H, 2DH, 25H, 30H, 32H
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \   00000028   0x78 0x2D          DC8 78H, 2DH, 25H, 30H, 32H, 78H, 2DH, 25H
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2D 0x25    
   \   00000030   0x30 0x32          DC8 30H, 32H, 78H, 2DH, 25H, 30H, 32H, 78H
   \              0x78 0x2D    
   \              0x25 0x30    
   \              0x32 0x78    
   \   00000038   0x2D 0x25          DC8 2DH, 25H, 30H, 32H, 78H, 2DH, 25H, 30H
   \              0x30 0x32    
   \              0x78 0x2D    
   \              0x25 0x30    
   \   00000040   0x32 0x78          DC8 32H, 78H, 2DH, 25H, 30H, 32H, 78H, 2DH
   \              0x2D 0x25    
   \              0x30 0x32    
   \              0x78 0x2D    
   \   00000048   0x25 0x30          DC8 25H, 30H, 32H, 78H, 2DH, 25H, 30H, 32H
   \              0x32 0x78    
   \              0x2D 0x25    
   \              0x30 0x32    
   \   00000050   0x78 0x00          DC8 78H, 0
   \   00000052   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nData Cfm Status - ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Data Cfm Status - "
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x20 0x43    
   \              0x66 0x6D    
   \              0x20 0x53    
   \              0x74 0x61    
   \              0x74 0x75    
   \              0x73 0x20    
   \              0x2D 0x20    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nSrc PAN Id - %x">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Src PAN Id - %x"
   \              0x53 0x72    
   \              0x63 0x20    
   \              0x50 0x41    
   \              0x4E 0x20    
   \              0x49 0x64    
   \              0x20 0x2D    
   \              0x20 0x25    
   \              0x78 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nPurge Cfm Status - ">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Purge Cfm Status - "
   \              0x50 0x75    
   \              0x72 0x67    
   \              0x65 0x20    
   \              0x43 0x66    
   \              0x6D 0x20    
   \              0x53 0x74    
   \              0x61 0x74    
   \              0x75 0x73    
   \              0x20 0x2D    
   \              0x20 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x, OK\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x, OK\015\012"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x4F 0x4B    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\n%02x, EXPIRED\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012%02x, EXPIRED\015\012"
   \              0x25 0x30    
   \              0x32 0x78    
   \              0x2C 0x20    
   \              0x45 0x58    
   \              0x50 0x49    
   \              0x52 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCB CALLED\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012CB CALLED\015\012"
   \              0x43 0x42    
   \              0x20 0x43    
   \              0x41 0x4C    
   \              0x4C 0x45    
   \              0x44 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "\\r\\nCmd Id = %02x\\r\\n">`:
   \   00000000   0x0D 0x0A          DC8 "\015\012Cmd Id = %02x\015\012"
   \              0x43 0x6D    
   \              0x64 0x20    
   \              0x49 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   00000012   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Pkts Received - %d\\r\\nB...">`:
   \   00000000   0x50 0x6B          DC8 "Pkts Received - %d\015\012Bytes Received - %d"
   \              0x74 0x73    
   \              0x20 0x52    
   \              0x65 0x63    
   \              0x65 0x69    
   \              0x76 0x65    
   \              0x64 0x20    
   \              0x2D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x42 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x52 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x2D    
   \              0x20 0x25    
   \              0x64 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "Offset - %02x : %08x\\r\\n">`:
   \   00000000   0x4F 0x66          DC8 "Offset - %02x : %08x\015\012"
   \              0x66 0x73    
   \              0x65 0x74    
   \              0x20 0x2D    
   \              0x20 0x25    
   \              0x30 0x32    
   \              0x78 0x20    
   \              0x3A 0x20    
   \              0x25 0x30    
   \              0x38 0x78    
   \              0x0D 0x0A    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of packets receive...">`:
   \   00000000   0x4E 0x6F          DC8 "No of packets received = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x70 0x61    
   \              0x63 0x6B    
   \              0x65 0x74    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   0000001E   0x00 0x00          DC8 0, 0

   \                                 In section .text, align 4, keep-with-next
   \                     `?<Constant "No of bytes received ...">`:
   \   00000000   0x4E 0x6F          DC8 "No of bytes received = %d\015\012"
   \              0x20 0x6F    
   \              0x66 0x20    
   \              0x62 0x79    
   \              0x74 0x65    
   \              0x73 0x20    
   \              0x72 0x65    
   \              0x63 0x65    
   \              0x69 0x76    
   \              0x65 0x64    
   \              0x20 0x3D    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      48   AppS2wCmd_154AddNode
        48   -> AppS2wParse_Hex
        48   -> AppS2wParse_Mac64
        48   -> AppS2wParse_NextParamGet
        48   -> memcmp
        48   -> memcpy
      16   AppS2wCmd_154Channel
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      16   AppS2wCmd_154CoordExtndedAddr
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      16   AppS2wCmd_154CoordShortAddr
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      24   AppS2wCmd_154DataPurge
        24   -> AppS2wParse_Hex
        24   -> AppS2wParse_NextParamGet
        24   -> GsnOsal_SemAcquire
        24   -> GsnWLRPAN_WifDataSend
        24   -> memset
     192   AppS2wCmd_154DataSend
       192   -> AppS2wCmd_DataLenCheck
       192   -> AppS2wParse_Hex
       192   -> AppS2wParse_Mac64
       192   -> AppS2wParse_NextParamGet
       192   -> AppS2wParse_SecI
       192   -> GsnOsal_SemAcquire
       192   -> GsnWLRPAN_WifDataSend
       192   -> memcpy
       192   -> memset
      96   AppS2wCmd_154ExtendedAddr
        96   -> AppS2wParse_Mac64
        96   -> GsnOsal_SemAcquire
        96   -> GsnWLRPAN_GetReq
        96   -> GsnWLRPAN_SetReq
      32   AppS2wCmd_154GTSReq
        32   -> AppS2wParse_Hex
        32   -> AppS2wParse_NextParamGet
        32   -> AppS2wParse_SecI
        32   -> GsnOsal_SemAcquire
        32   -> GsnWLRPAN_WifMgmtSend
        32   -> memset
      24   AppS2wCmd_154GetReq
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnOsal_SemAcquire
        24   -> GsnWLRPAN_GetReq
        24   -> memset
      64   AppS2wCmd_154JoinNetwork
        64   -> AppS2wParse_Hex
        64   -> AppS2wParse_Mac64
        64   -> AppS2wParse_NextParamGet
        64   -> AppS2wParse_SecI
        64   -> GsnOsal_SemAcquire
        64   -> GsnWLRPAN_WifMgmtSend
        64   -> memcpy
        64   -> memset
     104   AppS2wCmd_154JoinPermit
       104   -> AppS2wParse_Hex
       104   -> AppS2wParse_NextParamGet
       104   -> GsnOsal_SemAcquire
       104   -> GsnWLRPAN_GetReq
       104   -> GsnWLRPAN_SetReq
      64   AppS2wCmd_154LeaveNetwork
        64   -> AppS2wParse_Hex
        64   -> AppS2wParse_Mac64
        64   -> AppS2wParse_NextParamGet
        64   -> AppS2wParse_SecI
        64   -> GsnOsal_SemAcquire
        64   -> GsnWLRPAN_WifMgmtSend
        64   -> memcpy
        64   -> memset
      16   AppS2wCmd_154PanId
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      48   AppS2wCmd_154PollData
        48   -> AppS2wParse_SecI
        48   -> GsnOsal_SemAcquire
        48   -> GsnWLRPAN_WifMgmtSend
        48   -> __aeabi_memclr4
     104   AppS2wCmd_154RetryCount
       104   -> AppS2wParse_Hex
       104   -> AppS2wParse_NextParamGet
       104   -> GsnOsal_SemAcquire
       104   -> GsnWLRPAN_GetReq
       104   -> GsnWLRPAN_SetReq
      32   AppS2wCmd_154RxEnable
        32   -> AppS2wParse_Hex
        32   -> AppS2wParse_NextParamGet
        32   -> GsnOsal_SemAcquire
        32   -> GsnWLRPAN_WifMgmtSend
        32   -> memset
      40   AppS2wCmd_154ScanNetwork
        40   -> AppS2wParse_Hex
        40   -> AppS2wParse_NextParamGet
        40   -> AppS2wParse_SecI
        40   -> GsnOsal_SemAcquire
        40   -> GsnWLRPAN_WifMgmtSend
        40   -> __aeabi_memclr4
     152   AppS2wCmd_154SetReq
       152   -> AppS2wParse_Hex
       152   -> AppS2wParse_Int
       152   -> AppS2wParse_Key
       152   -> AppS2wParse_LookupData
       152   -> AppS2wParse_Mac64
       152   -> AppS2wParse_NextParamGet
       152   -> GsnOsal_SemAcquire
       152   -> GsnWLRPAN_SetReq
       152   -> memcpy
       152   -> memset
      16   AppS2wCmd_154ShortAddr
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      56   AppS2wCmd_154StartNetwork
        56   -> AppS2wParse_Hex
        56   -> AppS2wParse_NextParamGet
        56   -> AppS2wParse_SecI
        56   -> GsnOsal_SemAcquire
        56   -> GsnWLRPAN_WifMgmtSend
        56   -> __aeabi_memclr4
        56   -> memset
      16   AppS2wCmd_154SupreFrmCfg
        16   -> GsnOsal_SemAcquire
        16   -> GsnWLRPAN_GetReq
      24   AppS2wCmd_154SyncReq
        24   -> AppS2wParse_Hex
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWLRPAN_WifMgmtSend
        24   -> memset
       0   AppS2wCmd_DataLenCheck
      16   AppS2wCmd_I154RxTest
        16   -> AppS2wParse_Int
        16   -> AppS2wParse_NextParamGet
        16   -> GsnWLRPAN_GenericReq
      24   AppS2wCmd_I154RxTestStop
        24   -> GsnOsal_SemAcquire
        24   -> GsnWLRPAN_GenericReq
      24   AppS2wCmd_I154TxTest
        24   -> AppS2wParse_Int
        24   -> AppS2wParse_NextParamGet
        24   -> GsnWLRPAN_GenericReq
      24   AppS2wParse_Key
        24   -> AppS2wParse_ToHex
        24   -> isxdigit
        24   -> memset
      56   AppS2wParse_LookupData
        56   -> AppS2wParse_ToHex
        56   -> isxdigit
        56   -> memcmp
        56   -> memset
      40   AppS2wParse_Mac64
        40   -> AppS2wParse_ToHex
        40   -> isxdigit
        40   -> memcmp
        40   -> memset
      16   AppS2wParse_SecI
        16   -> AppS2wParse_Hex
        16   -> AppS2wParse_LookupData
        16   -> AppS2wParse_NextParamGet
       8   AppS2w_WLRPANAssocCfm
         8   -> GsnOsal_SemRelease
      56   AppS2w_WLRPANAssocInd
        56   -> GsnWLRPAN_WifMgmtSend
        56   -> memcmp
        56   -> memcpy
      40   AppS2w_WLRPANBeaconNotifyInd
        40   -> S2w_Printf
       8   AppS2w_WLRPANCb
         8   -> GsnOsal_SemRelease
         8   -> S2w_Printf
      32   AppS2w_WLRPANCommStatusInd
        32   -> S2w_Printf
       8   AppS2w_WLRPANData6LoWPANCfm
         8   -> GsnOsal_SemRelease
       0   AppS2w_WLRPANData6LoWPANInd
       8   AppS2w_WLRPANDataCfm
         8   -> GsnOsal_SemRelease
         8   -> S2w_Printf
      40   AppS2w_WLRPANDataInd
        40   -> S2w_Printf
       8   AppS2w_WLRPANDataPurgeCfm
         8   -> S2w_Printf
       8   AppS2w_WLRPANDisassocCfm
         8   -> GsnOsal_SemRelease
       8   AppS2w_WLRPANDisassocInd
         8   -> GsnOsal_SemRelease
         8   -> S2w_Printf
       8   AppS2w_WLRPANGTSCfm
         8   -> GsnOsal_SemRelease
       8   AppS2w_WLRPANGTSInd
         8   -> S2w_Printf
      24   AppS2w_WLRPANGenCfm
        24   -> GsnOsal_SemRelease
        24   -> S2w_Printf
       8   AppS2w_WLRPANGenInd
         8   -> GsnOsal_SemRelease
         8   -> S2w_Printf
      88   AppS2w_WLRPANGetCfg
        88   -> GsnOsal_SemRelease
        88   -> S2w_Printf
        88   -> memcpy
      48   AppS2w_WLRPANOrphanInd
        48   -> GsnWLRPAN_WifMgmtSend
        48   -> memcmp
        48   -> memcpy
       8   AppS2w_WLRPANPollCfm
         8   -> GsnOsal_SemRelease
       0   AppS2w_WLRPANResetCfm
         8   -> GsnOsal_SemRelease
       8   AppS2w_WLRPANRxEnableCfm
         8   -> GsnOsal_SemRelease
      64   AppS2w_WLRPANScanCfm
        64   -> GsnOsal_SemRelease
        64   -> S2w_Printf
        64   -> __aeabi_memcpy4
       8   AppS2w_WLRPANSetCfm
         8   -> GsnOsal_SemRelease
       8   AppS2w_WLRPANStartCfm
         8   -> GsnOsal_SemRelease
       8   AppS2w_WLRPANSyncLossInd
         8   -> S2w_Printf
       8   AppS2w_WLRPANTmrCfm
         8   -> GsnOsal_SemRelease
         8   -> S2w_Printf
       8   AppS2w_WLRPANTmrInd
         8   -> S2w_Printf
      32   App_WLRPANinit
        32   -> GsnDot154if_Init
        32   -> GsnWLRPAN_Init
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      24   GsnWLRPAN_GenericReq
        24   -> GsnWLRPAN_WifMgmtSend
        24   -> memcpy
       0   GsnWLRPAN_GetReq
         0   -> GsnWLRPAN_WifMgmtSend
       0   GsnWLRPAN_SetReq
         0   -> GsnWLRPAN_WifMgmtSend
       0   isxdigit
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant " %02x ">
      44  ?<Constant " %02x-%02x-%02x-%02x-...">
       8  ?<Constant " %d ">
       8  ?<Constant " %x ">
      12  ?<Constant "%02d     ">
       8  ?<Constant "%02d  ">
       8  ?<Constant "%02x ">
      40  ?<Constant "%02x-%02x-%02x-%02x-%...">
      44  ?<Constant "%02x-%02x-%02x-%02x-%...">_1
       8  ?<Constant "%04x  ">
       4  ?<Constant "%c">
       4  ?<Constant "%s">
      12  ?<Constant "%x  %02d  ">
       4  ?<Constant "%x">
      12  ?<Constant "BEACON_LOSS">
      24  ?<Constant "CHANNEL_ACCESS_FAILURE">
      20  ?<Constant "CONDITIONAL_PASS">
      16  ?<Constant "COUNTER_ERROR">
       8  ?<Constant "DENIED">
      20  ?<Constant "DISABLE_TRX_FAILURE">
      12  ?<Constant "FALSE    ">
       8  ?<Constant "FALSE">
      16  ?<Constant "FRAME_TOO_LONG">
      20  ?<Constant "IMPROPER_KEY_TYPE">
      24  ?<Constant "IMPROPER_SECURITY_LEVEL">
      16  ?<Constant "INVALID_ADDRESS">
      12  ?<Constant "INVALID_GTS">
      16  ?<Constant "INVALID_HANDLE">
      16  ?<Constant "INVALID_INDEX">
      20  ?<Constant "INVALID_PARAMETER">
      16  ?<Constant "LIMIT_REACHED">
       8  ?<Constant "NO_ACK">
      12  ?<Constant "NO_BEACON">
       8  ?<Constant "NO_DATA">
      20  ?<Constant "NO_SHORT_ADDRESS">
      28  ?<Constant "No of bytes received ...">
      32  ?<Constant "No of packets receive...">
      20  ?<Constant "ON_TIME_TOO_LONG">
      12  ?<Constant "OUT_OF_CAP">
      24  ?<Constant "Offset - %02x : %08x\r\n">
      16  ?<Constant "PAN_ID_CONFLICT">
      12  ?<Constant "PAST_TIME">
      40  ?<Constant "Pkts Received - %d\r\nB...">
      12  ?<Constant "READ_ONLY">
      12  ?<Constant "REALIGNMENT">
      20  ?<Constant "SCAN_IN_PROGRESS">
      16  ?<Constant "SECURITY_ERROR">
      20  ?<Constant "SUPERFRAME_OVERLAP">
       8  ?<Constant "Success">
      16  ?<Constant "TRACKING_OFF">
      20  ?<Constant "TRANSACTION_EXPIRED">
      24  ?<Constant "TRANSACTION_OVERFLOW">
      12  ?<Constant "TRUE     ">
       8  ?<Constant "TRUE">
      12  ?<Constant "TX_ACTIVE">
      16  ?<Constant "UNAVAILABLE_KEY">
      24  ?<Constant "UNSUPPORTED_ATTRIBUTE">
      20  ?<Constant "UNSUPPORTED_LEGACY">
      24  ?<Constant "UNSUPPORTED_SECURITY">
       4  ?<Constant "\r\n">
      20  ?<Constant "\r\n%02x, EXPIRED\r\n">
      16  ?<Constant "\r\n%02x, OK\r\n">
      44  ?<Constant "\r\n%02x-%02x-%02x-%02x...">
      84  ?<Constant "\r\n%02x-%02x-%02x-%02x...">_1
      12  ?<Constant "\r\n%02x\r\n">
      12  ?<Constant "\r\n%04x\r\n">
      12  ?<Constant "\r\n%08x\r\n">
      24  ?<Constant "\r\nBeacon Notification\r\n">
      24  ?<Constant "\r\nBlacklisted      :">
      16  ?<Constant "\r\nCB CALLED\r\n">
      32  ?<Constant "\r\nChannel Index\tEnerg...">
      24  ?<Constant "\r\nCmd Frame Id :%02x">
      20  ?<Constant "\r\nCmd Id = %02x\r\n">
      28  ?<Constant "\r\nComm Status Indication">
      24  ?<Constant "\r\nData Cfm Status - ">
      28  ?<Constant "\r\nDevice Disassociated\r\n">
      28  ?<Constant "\r\nDeviceDescHandle :%02x">
      32  ?<Constant "\r\nDeviceOverrideSecIM...">
      20  ?<Constant "\r\nDst Address - ">
      20  ?<Constant "\r\nExempt       :">
      24  ?<Constant "\r\nFrame Counter:%08x">
      24  ?<Constant "\r\nFrame Type   :%02x">
      20  ?<Constant "\r\nGTS Indiacation\r\n">
      20  ?<Constant "\r\nLong Addr    :">
      20  ?<Constant "\r\nLookupData      :">
      24  ?<Constant "\r\nLookupData Size :%02x">
      24  ?<Constant "\r\nPAN Id       :%04x">
      16  ?<Constant "\r\nPAN Id - %x">
      24  ?<Constant "\r\nPurge Cfm Status - ">
      24  ?<Constant "\r\nSecurity Min :%02x">
      24  ?<Constant "\r\nShort Addr   :%04x">
      20  ?<Constant "\r\nSrc Address - ">
      20  ?<Constant "\r\nSrc PAN Id - %x">
      12  ?<Constant "\r\nStatus - ">
      16  ?<Constant "\r\nSyncLoss\r\n">
      24  ?<Constant "\r\nUniqueDevice     :">
      48  ?<Constant "\r\n\nPANID BO  SO  BLE ...">
      12  ?<Constant "\r\n\t%d\t\t%d">
      12  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0, 0}>
       8  ?<Constant {0, 0, 0, 0, 0, 0, 0, 0}>
      24  ?<Constant {0}>
      36  ?<Constant {0}>_1
      32  ?<Constant {0}>_2
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      12  ?<Constant {255, 255, 255, 255, 255, 255, 255,_1
       4  ??DataTable124
       4  ??DataTable128
       4  ??DataTable132
       4  ??DataTable134
       4  ??DataTable139
       4  ??DataTable142
       4  ??DataTable142_1
       4  ??DataTable142_2
       4  ??DataTable142_3
       4  ??DataTable142_4
       4  ??DataTable142_5
       4  ??DataTable142_6
       4  ??DataTable142_7
      10  ??Subroutine41_0
      22  ?Subroutine0
      32  ?Subroutine1
      28  ?Subroutine10
      18  ?Subroutine11
       6  ?Subroutine12
      10  ?Subroutine13
      12  ?Subroutine14
       8  ?Subroutine15
      10  ?Subroutine16
      14  ?Subroutine17
       6  ?Subroutine18
       8  ?Subroutine19
      10  ?Subroutine2
      12  ?Subroutine20
      10  ?Subroutine21
      10  ?Subroutine22
      10  ?Subroutine23
       8  ?Subroutine24
       6  ?Subroutine25
       8  ?Subroutine26
       6  ?Subroutine27
       6  ?Subroutine28
       6  ?Subroutine29
      10  ?Subroutine3
      10  ?Subroutine30
       6  ?Subroutine31
      10  ?Subroutine32
       6  ?Subroutine33
       6  ?Subroutine34
       6  ?Subroutine35
       8  ?Subroutine36
       8  ?Subroutine37
      16  ?Subroutine38
      12  ?Subroutine39
      12  ?Subroutine4
       6  ?Subroutine40
       8  ?Subroutine5
       8  ?Subroutine6
       8  ?Subroutine7
      34  ?Subroutine8
      24  ?Subroutine9
     138  AppS2wCmd_154AddNode
      32  AppS2wCmd_154Channel
      32  AppS2wCmd_154CoordExtndedAddr
      34  AppS2wCmd_154CoordShortAddr
      64  AppS2wCmd_154DataPurge
     264  AppS2wCmd_154DataSend
      76  AppS2wCmd_154ExtendedAddr
     152  AppS2wCmd_154GTSReq
     108  AppS2wCmd_154GetReq
     228  AppS2wCmd_154JoinNetwork
      72  AppS2wCmd_154JoinPermit
     180  AppS2wCmd_154LeaveNetwork
      34  AppS2wCmd_154PanId
      88  AppS2wCmd_154PollData
      72  AppS2wCmd_154RetryCount
     112  AppS2wCmd_154RxEnable
     174  AppS2wCmd_154ScanNetwork
     860  AppS2wCmd_154SetReq
      34  AppS2wCmd_154ShortAddr
     240  AppS2wCmd_154StartNetwork
      56  AppS2wCmd_154SupreFrmCfg
      96  AppS2wCmd_154SyncReq
      64  AppS2wCmd_DataLenCheck
      74  AppS2wCmd_I154RxTest
      42  AppS2wCmd_I154RxTestStop
      98  AppS2wCmd_I154TxTest
     100  AppS2wParse_Key
     154  AppS2wParse_LookupData
     142  AppS2wParse_Mac64
     120  AppS2wParse_SecI
      16  AppS2w_WLRPANAssocCfm
     100  AppS2w_WLRPANAssocInd
     132  AppS2w_WLRPANBeaconNotifyInd
      10  AppS2w_WLRPANCb
     140  AppS2w_WLRPANCommStatusInd
       4  AppS2w_WLRPANData6LoWPANCfm
       4  AppS2w_WLRPANData6LoWPANInd
      14  AppS2w_WLRPANDataCfm
      72  AppS2w_WLRPANDataInd
       8  AppS2w_WLRPANDataPurgeCfm
       4  AppS2w_WLRPANDisassocCfm
      28  AppS2w_WLRPANDisassocInd
      12  AppS2w_WLRPANGTSCfm
       8  AppS2w_WLRPANGTSInd
      76  AppS2w_WLRPANGenCfm
      50  AppS2w_WLRPANGenInd
     608  AppS2w_WLRPANGetCfg
      90  AppS2w_WLRPANOrphanInd
       4  AppS2w_WLRPANPollCfm
       2  AppS2w_WLRPANResetCfm
       4  AppS2w_WLRPANRxEnableCfm
     238  AppS2w_WLRPANScanCfm
       4  AppS2w_WLRPANSetCfm
      16  AppS2w_WLRPANStartCfm
       6  AppS2w_WLRPANSyncLossInd
      22  AppS2w_WLRPANTmrCfm
      16  AppS2w_WLRPANTmrInd
      60  App_WLRPANinit
      18  GsnOsal_SemAcquire
      18  GsnOsal_SemRelease
      34  GsnWLRPAN_GenericReq
      10  GsnWLRPAN_GetReq
      10  GsnWLRPAN_SetReq
       4  KeyIdLenLookUp_Patch
       4  WlrpanStatusOffset
      30  isxdigit
      12  memcpy
      20  memset
     144  pWlrpanStatusMsg
     192  s2w154Ctx
       1  semRelease
      24  size
      20  wlrpanDataCbTbl
      84  wlrpanMgmtCbTbl

 
   217 bytes in section .bss
   148 bytes in section .data
   728 bytes in section .rodata
 7 782 bytes in section .text
 
 7 630 bytes of CODE  memory (+ 152 bytes shared)
   728 bytes of CONST memory
   365 bytes of DATA  memory

Errors: none
Warnings: none
