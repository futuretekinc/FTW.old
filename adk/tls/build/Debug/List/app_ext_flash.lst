###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.5.4819/W32 for ARM      02/Apr/2015  04:31:07 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\ext_app\app_ext_flash.c                             #
#    Command line =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\ext_app\app_ext_flash.c -D ADK_PROV_WPS_ENABLE -D   #
#                    GSN_FILE_UPLOAD_API -D ADK_FILE_UPLOAD_API -D            #
#                    ADK_OTAFU_ENABLE -D TX_ENABLE_IAR_LIBRARY_SUPPORT -D     #
#                    IAR -D TM_USE_HTTPD -D GSN_GSLINK -D GSN_WEB_SERVER -D   #
#                    APP_MDNS -D NX_INCLUDE_USER_DEFINE_FILE -D               #
#                    NO_ADK_PROV_GROUP_SECURE -lC                             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\ -lA F:\Development\GS2000\5.1.5\02_Ap #
#                    r_2015_04_30_38\adk\tls\build\Debug\List\                #
#                    --diag_suppress Pa050,Go005 -o                           #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38 #
#                    \adk\tls\build\..\..\..\geps\inc\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\core\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\drivers\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\http\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\rtos\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\netx_bsd_layer\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\main\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\hcc\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\src\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\hw_engine_if\ -I       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\wpa_if\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\supplicant\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ncm\inc\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ -I                              #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\core\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\drivers\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\modules\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\\rtos\tx\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\ -I                            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\netx_bsd_layer\ -I        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\main\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\\inc\hw_engine_if\ -I    #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\wpa_supplicant-1.0\s #
#                    rc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\system\fs\hcc\src\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\ -I F:\Development\GS2000\5.1.5\0 #
#                    2_Apr_2015_04_30_38\adk\tls\build\..\inc\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\ctx\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\inc\main\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\fs_if\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\config\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\sm\ -I F:\Development\GS2000\5.1.5\02_Apr_ #
#                    2015_04_30_38\adk\tls\build\..\inc\ncm\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\debug\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\tls\ -I            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\rtc_mem\ -I F:\Development\GS2000\5.1.5\02 #
#                    _Apr_2015_04_30_38\adk\tls\build\..\inc\ext_app\ -I      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\wps\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\..\..\adk\provisioning\i #
#                    nc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\adk\otafu\inc\ -I                 #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\adk\cloud_connect\inc\ -Ol               #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\app_ext_flash.lst                      #
#    Object file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\app_ext_flash.o                         #
#                                                                             #
#                                                                             #
###############################################################################

F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls\src\ext_app\app_ext_flash.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: app_ext_flash.c,v
     28          */
     29          
     30          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __interwork __softfp int GsnOsal_IntrDisable(void)
   \                     GsnOsal_IntrDisable:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       _tx_thread_interrupt_control
   \   00000008   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnOsal_IntrEnable(int)
   \                     GsnOsal_IntrEnable:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_thread_interrupt_control
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_Sel(UINT32, UINT32)
   \                     GsnIoMux_Sel:
   \   00000000   0x4A01             LDR.N    R2,??GsnIoMux_Sel_0  ;; 0x40160000
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??GsnIoMux_Sel_0:
   \   00000008   0x40160000         DC32     0x40160000

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_PullDownEnable(UINT32)
   \                     GsnIoMux_PullDownEnable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000008   0x2C20             CMP      R4,#+32
   \   0000000A   0xD207             BCS.N    ??GsnIoMux_PullDownEnable_0
   \   0000000C   0x4909             LDR.N    R1,??GsnIoMux_PullDownEnable_1  ;; 0x40160200
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x40A2             LSLS     R2,R2,R4
   \   00000014   0x4391             BICS     R1,R1,R2
   \   00000016   0x4A07             LDR.N    R2,??GsnIoMux_PullDownEnable_1  ;; 0x40160200
   \   00000018   0x6011             STR      R1,[R2, #+0]
   \   0000001A   0xE008             B.N      ??GsnIoMux_PullDownEnable_2
   \                     ??GsnIoMux_PullDownEnable_0:
   \   0000001C   0x4906             LDR.N    R1,??GsnIoMux_PullDownEnable_1+0x4  ;; 0x40160204
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0xF1B4 0x0320      SUBS     R3,R4,#+32
   \   00000026   0x409A             LSLS     R2,R2,R3
   \   00000028   0x4391             BICS     R1,R1,R2
   \   0000002A   0x4A03             LDR.N    R2,??GsnIoMux_PullDownEnable_1+0x4  ;; 0x40160204
   \   0000002C   0x6011             STR      R1,[R2, #+0]
   \                     ??GsnIoMux_PullDownEnable_2:
   \   0000002E   0x.... 0x....      BL       GsnOsal_IntrEnable
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   \                     ??GsnIoMux_PullDownEnable_1:
   \   00000034   0x40160200         DC32     0x40160200
   \   00000038   0x40160204         DC32     0x40160204

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_PullDownDisable(UINT32)
   \                     GsnIoMux_PullDownDisable:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       GsnOsal_IntrDisable
   \   00000008   0x2C20             CMP      R4,#+32
   \   0000000A   0xD207             BCS.N    ??GsnIoMux_PullDownDisable_0
   \   0000000C   0x4909             LDR.N    R1,??GsnIoMux_PullDownDisable_1  ;; 0x40160200
   \   0000000E   0x6809             LDR      R1,[R1, #+0]
   \   00000010   0x2201             MOVS     R2,#+1
   \   00000012   0x40A2             LSLS     R2,R2,R4
   \   00000014   0x4311             ORRS     R1,R1,R2
   \   00000016   0x4A07             LDR.N    R2,??GsnIoMux_PullDownDisable_1  ;; 0x40160200
   \   00000018   0x6011             STR      R1,[R2, #+0]
   \   0000001A   0xE008             B.N      ??GsnIoMux_PullDownDisable_2
   \                     ??GsnIoMux_PullDownDisable_0:
   \   0000001C   0x4906             LDR.N    R1,??GsnIoMux_PullDownDisable_1+0x4  ;; 0x40160204
   \   0000001E   0x6809             LDR      R1,[R1, #+0]
   \   00000020   0x2201             MOVS     R2,#+1
   \   00000022   0xF1B4 0x0320      SUBS     R3,R4,#+32
   \   00000026   0x409A             LSLS     R2,R2,R3
   \   00000028   0x4311             ORRS     R1,R1,R2
   \   0000002A   0x4A03             LDR.N    R2,??GsnIoMux_PullDownDisable_1+0x4  ;; 0x40160204
   \   0000002C   0x6011             STR      R1,[R2, #+0]
   \                     ??GsnIoMux_PullDownDisable_2:
   \   0000002E   0x.... 0x....      BL       GsnOsal_IntrEnable
   \   00000032   0xBD10             POP      {R4,PC}          ;; return
   \                     ??GsnIoMux_PullDownDisable_1:
   \   00000034   0x40160200         DC32     0x40160200
   \   00000038   0x40160204         DC32     0x40160204

  		 void *ctx, struct wpa_sm *sm);
  		                   ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",52  Warning[Pe231]: 
          declaration is not visible outside of function

  struct rsn_pmksa_cache_entry * pmksa_cache_get_current(struct wpa_sm *sm);
                                                                ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",60  Warning[Pe231]: 
          declaration is not visible outside of function

  void pmksa_cache_clear_current(struct wpa_sm *sm);
                                        ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",61  Warning[Pe231]: 
          declaration is not visible outside of function

  int pmksa_cache_set_current(struct wpa_sm *sm, const u8 *pmkid,
                                     ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",62  Warning[Pe231]: 
          declaration is not visible outside of function
     31          #include "safe-flash\nor\flashdrv.h"
     32          #include "ext_app\app_ext_flash.h"
     33          
     34          #include "gsn_br_flashldr.h"
     35          
     36          /* gpio mappings */
     37          #ifdef GS2011MxxS_EVB
     38          #define GPIO_5_SPI1_CLK_5    5
     39          #define GPIO_6_SPI1_DIN_6    6
     40          
     41          #elif GS2100M_EVB
     42          #define GPIO_28_SPI1_CLK_28   28
     43          #define GPIO_30_SPI1_DIN_30   30
     44          
     45          #else
     46          /* by default GS2011M_EVB enable */
     47          #define GPIO_5_SPI1_CLK_5     5
     48          #define GPIO_30_SPI1_DIN_30   30
     49          #endif
     50          
     51          #define GPIO_10_SPI1_CS_10    10
     52          #define GPIO_31_SPI1_DOUT_31  31
     53          
     54          /* Please check maximum storeable file and used sector number in FSmem.exe */
     55          extern GSN_EXTFLASH_CTX_T gsExtFlashCtxFs;
     56          

   \                                 In section .text, align 2, keep-with-next
     57          VOID
     58          AppExtFlash_Init(GSN_FLASH_SPI_FLAG_T spiFlag)
     59          {
   \                     AppExtFlash_Init:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
     60          	if (gsExtFlashCtxFs.spiPinConf != APP_SPI_ALL_PIN_CONF)
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000008   0xF890 0x0549      LDRB     R0,[R0, #+1353]
   \   0000000C   0x280F             CMP      R0,#+15
   \   0000000E   0xD02A             BEQ.N    ??AppExtFlash_Init_0
     61          	{
     62          	/*    GPIO Mux enable for SPI Port-1	   */
     63          #ifdef GS2011MxxS_EVB
     64          	GsnIoMux_Sel(GPIO_6_SPI1_DIN_6, GSN_IOMUX_GPIO_6_ASSP1_DIN); // DIN
     65          	GsnIoMux_PullDownEnable (GPIO_6_SPI1_DIN_6);
     66          	GsnIoMux_Sel(GPIO_5_SPI1_CLK_5, GSN_IOMUX_GPIO_5_ASSP1_CLK); // CLK
     67          	GsnIoMux_PullDownEnable (GPIO_5_SPI1_CLK_5);
     68          #elif GS2100M_EVB
     69          	GsnIoMux_Sel(GPIO_30_SPI1_DIN_30, GSN_IOMUX_GPIO_30_ASSP1_DIN); // DIN
     70          	GsnIoMux_PullDownEnable (GPIO_30_SPI1_DIN_30);
     71          	GsnIoMux_Sel(GPIO_28_SPI1_CLK_28, GSN_IOMUX_GPIO_28_ASSP1_CLK); // CLK
     72          	GsnIoMux_PullDownEnable (GPIO_28_SPI1_CLK_28);
     73          #else
     74          	/* by default GS2011M_EVB GPIO Mux enable */
     75          	GsnIoMux_Sel(GPIO_30_SPI1_DIN_30, GSN_IOMUX_GPIO_30_ASSP1_DIN); // DIN
   \   00000010   0x2104             MOVS     R1,#+4
   \   00000012   0x201E             MOVS     R0,#+30
   \   00000014   0x.... 0x....      BL       GsnIoMux_Sel
     76          	GsnIoMux_PullDownEnable (GPIO_30_SPI1_DIN_30);
   \   00000018   0x201E             MOVS     R0,#+30
   \   0000001A   0x.... 0x....      BL       GsnIoMux_PullDownEnable
     77          	GsnIoMux_Sel(GPIO_5_SPI1_CLK_5, GSN_IOMUX_GPIO_5_ASSP1_CLK); // CLK
   \   0000001E   0x2103             MOVS     R1,#+3
   \   00000020   0x2005             MOVS     R0,#+5
   \   00000022   0x.... 0x....      BL       GsnIoMux_Sel
     78          	GsnIoMux_PullDownEnable (GPIO_5_SPI1_CLK_5);
   \   00000026   0x2005             MOVS     R0,#+5
   \   00000028   0x.... 0x....      BL       GsnIoMux_PullDownEnable
     79          #endif
     80          
     81          	GsnIoMux_Sel(GPIO_10_SPI1_CS_10, GSN_IOMUX_GPIO_10_AGPIO_10); // CS
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0x200A             MOVS     R0,#+10
   \   00000030   0x.... 0x....      BL       GsnIoMux_Sel
     82          	GsnIoMux_PullDownDisable (GPIO_10_SPI1_CS_10);
   \   00000034   0x200A             MOVS     R0,#+10
   \   00000036   0x.... 0x....      BL       GsnIoMux_PullDownDisable
     83          
     84          	GsnIoMux_Sel(GPIO_31_SPI1_DOUT_31, GSN_IOMUX_GPIO_31_ASSP1_DOUT); // DOUT
   \   0000003A   0x2104             MOVS     R1,#+4
   \   0000003C   0x201F             MOVS     R0,#+31
   \   0000003E   0x.... 0x....      BL       GsnIoMux_Sel
     85          	GsnIoMux_PullDownEnable (GPIO_31_SPI1_DOUT_31);
   \   00000042   0x201F             MOVS     R0,#+31
   \   00000044   0x.... 0x....      BL       GsnIoMux_PullDownEnable
     86          
     87          		/* Use SPI CS pin10 as GPIO to control from driver */
     88          		GsnGpio_Init(GS2011_SPI_CS, 0xfffffBff);
   \   00000048   0xF47F 0x6280      MVNS     R2,#+1024
   \   0000004C   0x2300             MOVS     R3,#+0
   \   0000004E   0xF44F 0x6080      MOV      R0,#+1024
   \   00000052   0x2100             MOVS     R1,#+0
   \   00000054   0x.... 0x....      BL       GsnGpio_Init
     89          		gsExtFlashCtxFs.spiCsGpio = GS2011_SPI_CS;
   \   00000058   0x.... 0x....      LDR.W    R0,??DataTable6_1
   \   0000005C   0xF44F 0x6280      MOV      R2,#+1024
   \   00000060   0x2300             MOVS     R3,#+0
   \   00000062   0xE9C0 0x2300      STRD     R2,R3,[R0, #+0]
     90          	}
     91          	
     92          	gsExtFlashCtxFs.spiConfig.spiMode			= GSN_SPI_OPERATION_MODE_MASTER;
   \                     ??AppExtFlash_Init_0:
   \   00000066   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000006A   0x2100             MOVS     R1,#+0
   \   0000006C   0x7001             STRB     R1,[R0, #+0]
     93          	gsExtFlashCtxFs.spiConfig.clockDivider 		= 2; 
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000072   0x2102             MOVS     R1,#+2
   \   00000074   0x7241             STRB     R1,[R0, #+9]
     94          		
     95          	gsExtFlashCtxFs.spiConfig.spiProtocol		= GSN_SPI_PROTOCOL_MOTOROLA;
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000007A   0x2100             MOVS     R1,#+0
   \   0000007C   0x7041             STRB     R1,[R0, #+1]
     96          	gsExtFlashCtxFs.spiConfig.clockSelect		= GSN_SPI_CLK_XTAL; //GSN_SPI_CLK_XTAL;GSN_SPI_CLK_HSRC
   \   0000007E   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000082   0x2101             MOVS     R1,#+1
   \   00000084   0x7281             STRB     R1,[R0, #+10]
     97          	
     98          	/*	  SPI Mode-1	*/
     99          	gsExtFlashCtxFs.spiConfig.clockPolarity		= GSN_SPI_CLK_POL_INACTIVEHIGH;
   \   00000086   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000008A   0x2101             MOVS     R1,#+1
   \   0000008C   0x7081             STRB     R1,[R0, #+2]
    100          	gsExtFlashCtxFs.spiConfig.clockPhase		= GSN_SPI_CLK_PHASE_180;
   \   0000008E   0x.... 0x....      LDR.W    R0,??DataTable6
   \   00000092   0x2101             MOVS     R1,#+1
   \   00000094   0x70C1             STRB     R1,[R0, #+3]
    101          	gsExtFlashCtxFs.spiConfig.dataWordSize 		= GSN_SPI_DATAWORDSIZE_8;
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable6
   \   0000009A   0x2107             MOVS     R1,#+7
   \   0000009C   0x7101             STRB     R1,[R0, #+4]
    102          	gsExtFlashCtxFs.spiFlagFs					= spiFlag;
   \   0000009E   0x....             LDR.N    R0,??DataTable6
   \   000000A0   0xF880 0x4538      STRB     R4,[R0, #+1336]
    103          
    104          
    105          	if(spiFlag == GSN_FLASH_SPI_POLL)
   \   000000A4   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   000000A6   0x2C00             CMP      R4,#+0
   \   000000A8   0xD103             BNE.N    ??AppExtFlash_Init_1
    106          		gsExtFlashCtxFs.spiConfig.dmaMode		= GSN_SPI_DMA_CLEAR;
   \   000000AA   0x....             LDR.N    R0,??DataTable6
   \   000000AC   0x2100             MOVS     R1,#+0
   \   000000AE   0x7181             STRB     R1,[R0, #+6]
   \   000000B0   0xE002             B.N      ??AppExtFlash_Init_2
    107          	else
    108          		gsExtFlashCtxFs.spiConfig.dmaMode		= GSN_SPI_DMA_SET;
   \                     ??AppExtFlash_Init_1:
   \   000000B2   0x....             LDR.N    R0,??DataTable6
   \   000000B4   0x2101             MOVS     R1,#+1
   \   000000B6   0x7181             STRB     R1,[R0, #+6]
    109          
    110          	
    111          	GsnExtFlash_Init(&gsExtFlashCtxFs,SPI_NUM_1,&gsExtFlashCtxFs.spiConfig,gsExtFlashCtxFs.spiFlagFs);
   \                     ??AppExtFlash_Init_2:
   \   000000B8   0x....             LDR.N    R0,??DataTable6
   \   000000BA   0xF890 0x3538      LDRB     R3,[R0, #+1336]
   \   000000BE   0x....             LDR.N    R2,??DataTable6
   \   000000C0   0x2101             MOVS     R1,#+1
   \   000000C2   0x....             LDR.N    R0,??DataTable6
   \   000000C4   0x.... 0x....      BL       GsnExtFlash_Init
    112          
    113          	gsExtFlashCtxFs.extFlashStatus = EXTFLASH_INITIALIZED;
   \   000000C8   0x....             LDR.N    R0,??DataTable6
   \   000000CA   0x2101             MOVS     R1,#+1
   \   000000CC   0xF880 0x1548      STRB     R1,[R0, #+1352]
    114          	
    115          }
   \   000000D0   0xBD10             POP      {R4,PC}          ;; return
    116          
    117          
    118          

   \                                 In section .text, align 2, keep-with-next
    119          UINT32 AppExtFlash_FsConfig()
    120          {
   \                     AppExtFlash_FsConfig:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB09A             SUB      SP,SP,#+104
    121          	GSN_BRFLASHLDR_SUPERBLOCK_T superBlock;
    122              GSN_BRFLASHLDR_CTL_BLOCK_T fwCtlBlk, fw0CtlBlk, fw1CtlBlk, fw2CtlBlk;
    123          	UINT32 cbAddress = 0, descOffset = 0, descSize = 0;        
   \   00000004   0x2400             MOVS     R4,#+0
   \   00000006   0x2600             MOVS     R6,#+0
   \   00000008   0x2500             MOVS     R5,#+0
    124                  
    125              UINT32 cbSize;
    126          	UINT8 *pControlBlock, *pBlkDesc;
    127                  
    128          	GsnExtFlash_Read(&gsExtFlashCtxFs,sizeof(superBlock),0,(UINT8 *)&superBlock,GSN_FLASH_SPI_POLL,NULL,NULL);
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9002             STR      R0,[SP, #+8]
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x9001             STR      R0,[SP, #+4]
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0xAB0C             ADD      R3,SP,#+48
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x2134             MOVS     R1,#+52
   \   0000001C   0x....             LDR.N    R0,??DataTable6
   \   0000001E   0x.... 0x....      BL       GsnExtFlash_Read
    129          
    130              if (strncmp((const char*)superBlock.flok, "flok", 4) != 0)
   \   00000022   0x2204             MOVS     R2,#+4
   \   00000024   0x....             LDR.N    R1,??DataTable6_2
   \   00000026   0xA80C             ADD      R0,SP,#+48
   \   00000028   0x.... 0x....      BL       strncmp
   \   0000002C   0x2800             CMP      R0,#+0
   \   0000002E   0xD00D             BEQ.N    ??AppExtFlash_FsConfig_0
    131              {
    132              	gsExtFlashCtxFs.descBlockStart = DESCBLOCKSTART_EF;
   \   00000030   0x....             LDR.N    R0,??DataTable6
   \   00000032   0x2100             MOVS     R1,#+0
   \   00000034   0xF8C0 0x151C      STR      R1,[R0, #+1308]
    133          		gsExtFlashCtxFs.blockStart		= BLOCKSTART_EF;
   \   00000038   0x....             LDR.N    R0,??DataTable6
   \   0000003A   0x2102             MOVS     R1,#+2
   \   0000003C   0xF8C0 0x1518      STR      R1,[R0, #+1304]
    134          		gsExtFlashCtxFs.maxBlocks		= MAXBLOCKS_EF;
   \   00000040   0x....             LDR.N    R0,??DataTable6
   \   00000042   0x211E             MOVS     R1,#+30
   \   00000044   0xF8C0 0x1520      STR      R1,[R0, #+1312]
    135                  return 1;
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0xE079             B.N      ??AppExtFlash_FsConfig_1
    136              }
    137          	
    138              /* read control blocks of all fw images */
    139              GsnExtFlash_Read(&gsExtFlashCtxFs, sizeof(fw0CtlBlk), superBlock.fw0Cb1Addr, (UINT8 *)&fw0CtlBlk, GSN_FLASH_SPI_POLL, NULL, NULL);
   \                     ??AppExtFlash_FsConfig_0:
   \   0000004C   0x2000             MOVS     R0,#+0
   \   0000004E   0x9002             STR      R0,[SP, #+8]
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x9001             STR      R0,[SP, #+4]
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x9000             STR      R0,[SP, #+0]
   \   00000058   0xAB09             ADD      R3,SP,#+36
   \   0000005A   0x9A0D             LDR      R2,[SP, #+52]
   \   0000005C   0x210C             MOVS     R1,#+12
   \   0000005E   0x....             LDR.N    R0,??DataTable6
   \   00000060   0x.... 0x....      BL       GsnExtFlash_Read
    140              GsnExtFlash_Read(&gsExtFlashCtxFs, sizeof(fw1CtlBlk), superBlock.fw1Cb1Addr, (UINT8 *)&fw1CtlBlk, GSN_FLASH_SPI_POLL, NULL, NULL);
   \   00000064   0x2000             MOVS     R0,#+0
   \   00000066   0x9002             STR      R0,[SP, #+8]
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x9001             STR      R0,[SP, #+4]
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x9000             STR      R0,[SP, #+0]
   \   00000070   0xAB06             ADD      R3,SP,#+24
   \   00000072   0x9A0F             LDR      R2,[SP, #+60]
   \   00000074   0x210C             MOVS     R1,#+12
   \   00000076   0x....             LDR.N    R0,??DataTable6
   \   00000078   0x.... 0x....      BL       GsnExtFlash_Read
    141              GsnExtFlash_Read(&gsExtFlashCtxFs, sizeof(fw2CtlBlk), superBlock.fw2Cb1Addr, (UINT8 *)&fw2CtlBlk, GSN_FLASH_SPI_POLL, NULL, NULL);
   \   0000007C   0x2000             MOVS     R0,#+0
   \   0000007E   0x9002             STR      R0,[SP, #+8]
   \   00000080   0x2000             MOVS     R0,#+0
   \   00000082   0x9001             STR      R0,[SP, #+4]
   \   00000084   0x2000             MOVS     R0,#+0
   \   00000086   0x9000             STR      R0,[SP, #+0]
   \   00000088   0xAB03             ADD      R3,SP,#+12
   \   0000008A   0x9A11             LDR      R2,[SP, #+68]
   \   0000008C   0x210C             MOVS     R1,#+12
   \   0000008E   0x....             LDR.N    R0,??DataTable6
   \   00000090   0x.... 0x....      BL       GsnExtFlash_Read
    142          
    143          	if((fw0CtlBlk.rev)>(fw1CtlBlk.rev)&&(fw0CtlBlk.rev)>(fw2CtlBlk.rev))
   \   00000094   0x9807             LDR      R0,[SP, #+28]
   \   00000096   0x990A             LDR      R1,[SP, #+40]
   \   00000098   0x4288             CMP      R0,R1
   \   0000009A   0xD20B             BCS.N    ??AppExtFlash_FsConfig_2
   \   0000009C   0x9804             LDR      R0,[SP, #+16]
   \   0000009E   0x990A             LDR      R1,[SP, #+40]
   \   000000A0   0x4288             CMP      R0,R1
   \   000000A2   0xD207             BCS.N    ??AppExtFlash_FsConfig_2
    144          	{
    145              	fwCtlBlk = fw0CtlBlk;
   \   000000A4   0xA800             ADD      R0,SP,#+0
   \   000000A6   0xA909             ADD      R1,SP,#+36
   \   000000A8   0xC91C             LDM      R1!,{R2-R4}
   \   000000AA   0xC01C             STM      R0!,{R2-R4}
   \   000000AC   0x390C             SUBS     R1,R1,#+12
   \   000000AE   0x380C             SUBS     R0,R0,#+12
    146          		cbAddress = superBlock.fw0Cb1Addr;
   \   000000B0   0x9C0D             LDR      R4,[SP, #+52]
   \   000000B2   0xE012             B.N      ??AppExtFlash_FsConfig_3
    147          	}
    148             else if((fw1CtlBlk.rev)>(fw2CtlBlk.rev))
   \                     ??AppExtFlash_FsConfig_2:
   \   000000B4   0x9804             LDR      R0,[SP, #+16]
   \   000000B6   0x9907             LDR      R1,[SP, #+28]
   \   000000B8   0x4288             CMP      R0,R1
   \   000000BA   0xD207             BCS.N    ??AppExtFlash_FsConfig_4
    149              {
    150              	fwCtlBlk = fw1CtlBlk;
   \   000000BC   0xA800             ADD      R0,SP,#+0
   \   000000BE   0xA906             ADD      R1,SP,#+24
   \   000000C0   0xC91C             LDM      R1!,{R2-R4}
   \   000000C2   0xC01C             STM      R0!,{R2-R4}
   \   000000C4   0x390C             SUBS     R1,R1,#+12
   \   000000C6   0x380C             SUBS     R0,R0,#+12
    151          		cbAddress = superBlock.fw1Cb1Addr;
   \   000000C8   0x9C0F             LDR      R4,[SP, #+60]
   \   000000CA   0xE006             B.N      ??AppExtFlash_FsConfig_3
    152             	}
    153             else
    154             	{
    155              	fwCtlBlk = fw2CtlBlk;
   \                     ??AppExtFlash_FsConfig_4:
   \   000000CC   0xA800             ADD      R0,SP,#+0
   \   000000CE   0xA903             ADD      R1,SP,#+12
   \   000000D0   0xC91C             LDM      R1!,{R2-R4}
   \   000000D2   0xC01C             STM      R0!,{R2-R4}
   \   000000D4   0x390C             SUBS     R1,R1,#+12
   \   000000D6   0x380C             SUBS     R0,R0,#+12
    156          		cbAddress = superBlock.fw2Cb1Addr;
   \   000000D8   0x9C11             LDR      R4,[SP, #+68]
    157             	}
    158          
    159              cbSize = fwCtlBlk.ctlBlockSize + sizeof(GSN_BRFLASHLDR_CTL_BLOCK_T);
   \                     ??AppExtFlash_FsConfig_3:
   \   000000DA   0x9802             LDR      R0,[SP, #+8]
   \   000000DC   0xF110 0x050C      ADDS     R5,R0,#+12
    160          
    161              pControlBlock = MALLOC(cbSize);
   \   000000E0   0x0028             MOVS     R0,R5
   \   000000E2   0x.... 0x....      BL       MALLOC
   \   000000E6   0x0006             MOVS     R6,R0
    162              if(pControlBlock == NULL)
   \   000000E8   0x2E00             CMP      R6,#+0
   \   000000EA   0xD101             BNE.N    ??AppExtFlash_FsConfig_5
    163              {
    164          	return 0;
   \   000000EC   0x2000             MOVS     R0,#+0
   \   000000EE   0xE027             B.N      ??AppExtFlash_FsConfig_1
    165              }
    166              
    167              GsnExtFlash_Read(&gsExtFlashCtxFs, cbSize, cbAddress, (UINT8 *)pControlBlock, GSN_FLASH_SPI_POLL, NULL, NULL);
   \                     ??AppExtFlash_FsConfig_5:
   \   000000F0   0x2000             MOVS     R0,#+0
   \   000000F2   0x9002             STR      R0,[SP, #+8]
   \   000000F4   0x2000             MOVS     R0,#+0
   \   000000F6   0x9001             STR      R0,[SP, #+4]
   \   000000F8   0x2000             MOVS     R0,#+0
   \   000000FA   0x9000             STR      R0,[SP, #+0]
   \   000000FC   0x0033             MOVS     R3,R6
   \   000000FE   0x0022             MOVS     R2,R4
   \   00000100   0x0029             MOVS     R1,R5
   \   00000102   0x....             LDR.N    R0,??DataTable6
   \   00000104   0x.... 0x....      BL       GsnExtFlash_Read
    168              pBlkDesc  = pControlBlock + sizeof(GSN_BRFLASHLDR_CTL_BLOCK_T);
   \   00000108   0xF116 0x000C      ADDS     R0,R6,#+12
    169                  
    170              descOffset = ((GSN_BRFLASHLDR_BLOCK_DESC_T *)pBlkDesc)->offset;
   \   0000010C   0x6806             LDR      R6,[R0, #+0]
    171              descSize = ((GSN_BRFLASHLDR_BLOCK_DESC_T *)pBlkDesc)->size;
   \   0000010E   0x6845             LDR      R5,[R0, #+4]
    172              
    173              gsExtFlashCtxFs.descBlockStart = (descOffset + cbAddress)/BLOCKSIZE_EF; 
   \   00000110   0x19A0             ADDS     R0,R4,R6
   \   00000112   0x0B00             LSRS     R0,R0,#+12
   \   00000114   0x....             LDR.N    R1,??DataTable6
   \   00000116   0xF8C1 0x051C      STR      R0,[R1, #+1308]
    174              gsExtFlashCtxFs.blockStart = DESCBLOCKS_EF + gsExtFlashCtxFs.descBlockStart;
   \   0000011A   0x....             LDR.N    R0,??DataTable6
   \   0000011C   0xF8D0 0x051C      LDR      R0,[R0, #+1308]
   \   00000120   0x1C80             ADDS     R0,R0,#+2
   \   00000122   0x....             LDR.N    R1,??DataTable6
   \   00000124   0xF8C1 0x0518      STR      R0,[R1, #+1304]
    175              gsExtFlashCtxFs.maxBlocks = descSize / BLOCKSIZE_EF; 
   \   00000128   0x....             LDR.N    R0,??DataTable6
   \   0000012A   0x0B29             LSRS     R1,R5,#+12
   \   0000012C   0xF8C0 0x1520      STR      R1,[R0, #+1312]
    176          	gsExtFlashCtxFs.maxBlocks = gsExtFlashCtxFs.maxBlocks - DESCBLOCKS_EF;
   \   00000130   0x....             LDR.N    R0,??DataTable6
   \   00000132   0xF8D0 0x0520      LDR      R0,[R0, #+1312]
   \   00000136   0x1E80             SUBS     R0,R0,#+2
   \   00000138   0x....             LDR.N    R1,??DataTable6
   \   0000013A   0xF8C1 0x0520      STR      R0,[R1, #+1312]
    177              return 0;
   \   0000013E   0x2000             MOVS     R0,#+0
   \                     ??AppExtFlash_FsConfig_1:
   \   00000140   0xB01A             ADD      SP,SP,#+104
   \   00000142   0xBD70             POP      {R4-R6,PC}       ;; return
    178          }
    179          
    180          

   \                                 In section .text, align 2, keep-with-next
    181          int AppExtFlash_FsMount ( FS_FLASH * flash )
    182          {
    183          	flash->ReadFlash = GsnExtFlash_FsRead;       /* read content */
   \                     AppExtFlash_FsMount:
   \   00000000   0x....             LDR.N    R1,??DataTable6_3
   \   00000002   0x6301             STR      R1,[R0, #+48]
    184          	flash->EraseFlash = GsnExtFlash_FsErase;     /* erase a block */
   \   00000004   0x....             LDR.N    R1,??DataTable6_4
   \   00000006   0x6341             STR      R1,[R0, #+52]
    185            	flash->WriteFlash = GsnExtFlash_FsWrite;     /* write content */
   \   00000008   0x....             LDR.N    R1,??DataTable6_5
   \   0000000A   0x6381             STR      R1,[R0, #+56]
    186            	flash->VerifyFlash = GsnExtFlash_FsVerifyFlash;   /* verify content */
   \   0000000C   0x....             LDR.N    R1,??DataTable6_6
   \   0000000E   0x63C1             STR      R1,[R0, #+60]
    187            	flash->BlockCopy = GsnExtFlash_FsBlockCopy;
   \   00000010   0x....             LDR.N    R1,??DataTable6_7
   \   00000012   0x64C1             STR      R1,[R0, #+76]
    188          
    189          	flash->maxblock = gsExtFlashCtxFs.maxBlocks;
   \   00000014   0x....             LDR.N    R1,??DataTable6
   \   00000016   0xF8D1 0x1520      LDR      R1,[R1, #+1312]
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    190          	flash->blocksize = BLOCKSIZE_EF;
   \   0000001C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000020   0x6041             STR      R1,[R0, #+4]
    191          	flash->sectorsize = SECTORSIZE_EF;
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x6081             STR      R1,[R0, #+8]
    192          	flash->sectorperblock = SECTORPERBLOCK_EF;
   \   00000028   0x2110             MOVS     R1,#+16
   \   0000002A   0x60C1             STR      R1,[R0, #+12]
    193          	flash->blockstart = gsExtFlashCtxFs.blockStart;	   /* where 1st block starts */
   \   0000002C   0x....             LDR.N    R1,??DataTable6
   \   0000002E   0xF8D1 0x1518      LDR      R1,[R1, #+1304]
   \   00000032   0x6101             STR      R1,[R0, #+16]
    194          	flash->descsize = DESCSIZE_EF;		   /* 128K		*/
   \   00000034   0xF44F 0x6100      MOV      R1,#+2048
   \   00000038   0x6141             STR      R1,[R0, #+20]
    195          	flash->descblockstart = gsExtFlashCtxFs.descBlockStart;
   \   0000003A   0x....             LDR.N    R1,??DataTable6
   \   0000003C   0xF8D1 0x151C      LDR      R1,[R1, #+1308]
   \   00000040   0x6181             STR      R1,[R0, #+24]
    196          	flash->descblockend = gsExtFlashCtxFs.descBlockStart + DESCBLOCKS_EF - 1; /*  num of last desc block  */
   \   00000042   0x....             LDR.N    R1,??DataTable6
   \   00000044   0xF8D1 0x151C      LDR      R1,[R1, #+1308]
   \   00000048   0x1C49             ADDS     R1,R1,#+1
   \   0000004A   0x61C1             STR      R1,[R0, #+28]
    197          	flash->cacheddescsize = DESCCACHE_EF;					  /*  size of write cache in descriptor  */
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6241             STR      R1,[R0, #+36]
    198          	return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4770             BX       LR               ;; return
    199          }
    200          

   \                                 In section .text, align 2, keep-with-next
    201          VOID
    202          App_ExtFlash_FsInit()
    203          {
   \                     App_ExtFlash_FsInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    204          	UINT32 memsize;
    205          	INT32 rc;
    206          	UINT8 *pFsBuff;
    207          
    208          	if(gsExtFlashCtxFs.extFlashStatus == EXTFLASH_NOT_INITIALIZED)
   \   00000004   0x....             LDR.N    R0,??DataTable6
   \   00000006   0xF890 0x0548      LDRB     R0,[R0, #+1352]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??App_ExtFlash_FsInit_0
    209          	{
    210          		AppExtFlash_Init(GSN_FLASH_SPI_POLL);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       AppExtFlash_Init
    211          	}
    212          	
    213          	GsnExtFlash_FsInit(&gsExtFlashCtxFs);
   \                     ??App_ExtFlash_FsInit_0:
   \   00000014   0x....             LDR.N    R0,??DataTable6
   \   00000016   0x.... 0x....      BL       GsnExtFlash_FsInit
    214          
    215          	AppExtFlash_FsConfig();
   \   0000001A   0x.... 0x....      BL       AppExtFlash_FsConfig
    216          
    217          	memsize = fs_getmem_flashdrive(AppExtFlash_FsMount);
   \   0000001E   0x....             LDR.N    R0,??DataTable6_8
   \   00000020   0x.... 0x....      BL       fs_getmem_flashdrive
   \   00000024   0x0004             MOVS     R4,R0
    218          	pFsBuff = gsn_malloc(memsize);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0x21DA             MOVS     R1,#+218
   \   0000002A   0x0020             MOVS     R0,R4
   \   0000002C   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
    219          
    220              if(pFsBuff != NULL)
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD00C             BEQ.N    ??App_ExtFlash_FsInit_1
    221              {
    222          		rc = f_mountdrive(APP_EXT_FLASH_DRIVE_NUM_2, pFsBuff, memsize, (void *)fs_mount_flashdrive,
    223          			AppExtFlash_FsMount);
   \   00000034   0x....             LDR.N    R1,??DataTable6_8
   \   00000036   0x9100             STR      R1,[SP, #+0]
   \   00000038   0x....             LDR.N    R3,??DataTable6_9
   \   0000003A   0x0022             MOVS     R2,R4
   \   0000003C   0x0001             MOVS     R1,R0
   \   0000003E   0x2002             MOVS     R0,#+2
   \   00000040   0x.... 0x....      BL       fsm_mountdrive
    224          			
    225          		if(rc == F_ERR_NOTFORMATTED)
   \   00000044   0x2802             CMP      R0,#+2
   \   00000046   0xD102             BNE.N    ??App_ExtFlash_FsInit_1
    226          		{
    227                              f_format(APP_EXT_FLASH_DRIVE_NUM_2);
   \   00000048   0x2002             MOVS     R0,#+2
   \   0000004A   0x.... 0x....      BL       fsm_format
    228          		}
    229          
    230          	}
    231          }
   \                     ??App_ExtFlash_FsInit_1:
   \   0000004E   0xBD13             POP      {R0,R1,R4,PC}    ;; return
    232          
    233          

   \                                 In section .text, align 2, keep-with-next
    234          UINT32 AppExtFlash_DataFsConfig()
    235          {
   \                     AppExtFlash_DataFsConfig:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB091             SUB      SP,SP,#+68
    236          	GSN_BRFLASHLDR_SUPERBLOCK_T superBlock_D;
    237          	
    238          	GsnExtFlash_Read(&gsExtFlashCtxFs,sizeof(superBlock_D),0,(UINT8 *)&superBlock_D,GSN_FLASH_SPI_POLL,NULL,NULL);
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9002             STR      R0,[SP, #+8]
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x9001             STR      R0,[SP, #+4]
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x9000             STR      R0,[SP, #+0]
   \   00000010   0xAB03             ADD      R3,SP,#+12
   \   00000012   0x2200             MOVS     R2,#+0
   \   00000014   0x2134             MOVS     R1,#+52
   \   00000016   0x....             LDR.N    R0,??DataTable6
   \   00000018   0x.... 0x....      BL       GsnExtFlash_Read
    239          
    240              if (strncmp((const char*)superBlock_D.flok, "flok", 4) != 0)
   \   0000001C   0x2204             MOVS     R2,#+4
   \   0000001E   0x....             LDR.N    R1,??DataTable6_2
   \   00000020   0xA803             ADD      R0,SP,#+12
   \   00000022   0x.... 0x....      BL       strncmp
   \   00000026   0x2800             CMP      R0,#+0
   \   00000028   0xD00D             BEQ.N    ??AppExtFlash_DataFsConfig_0
    241              {
    242              	gsExtFlashCtxFs.descBlockStart_D = DESCBLOCKSTART_EF;
   \   0000002A   0x....             LDR.N    R0,??DataTable6
   \   0000002C   0x2100             MOVS     R1,#+0
   \   0000002E   0xF8C0 0x1528      STR      R1,[R0, #+1320]
    243          		gsExtFlashCtxFs.blockStart_D	  = BLOCKSTART_EF;
   \   00000032   0x....             LDR.N    R0,??DataTable6
   \   00000034   0x2102             MOVS     R1,#+2
   \   00000036   0xF8C0 0x1524      STR      R1,[R0, #+1316]
    244          		gsExtFlashCtxFs.maxBlocks_D	  = MAXBLOCKS_EF;
   \   0000003A   0x....             LDR.N    R0,??DataTable6
   \   0000003C   0x211E             MOVS     R1,#+30
   \   0000003E   0xF8C0 0x152C      STR      R1,[R0, #+1324]
    245                  return 1;
   \   00000042   0x2001             MOVS     R0,#+1
   \   00000044   0xE018             B.N      ??AppExtFlash_DataFsConfig_1
    246              }
    247          	
    248              gsExtFlashCtxFs.descBlockStart_D = superBlock_D.fsAddress / BLOCKSIZE_EF;
   \                     ??AppExtFlash_DataFsConfig_0:
   \   00000046   0x980C             LDR      R0,[SP, #+48]
   \   00000048   0x0B00             LSRS     R0,R0,#+12
   \   0000004A   0x....             LDR.N    R1,??DataTable6
   \   0000004C   0xF8C1 0x0528      STR      R0,[R1, #+1320]
    249              gsExtFlashCtxFs.blockStart_D = DESCBLOCKS_EF + gsExtFlashCtxFs.descBlockStart_D;
   \   00000050   0x....             LDR.N    R0,??DataTable6
   \   00000052   0xF8D0 0x0528      LDR      R0,[R0, #+1320]
   \   00000056   0x1C80             ADDS     R0,R0,#+2
   \   00000058   0x....             LDR.N    R1,??DataTable6
   \   0000005A   0xF8C1 0x0524      STR      R0,[R1, #+1316]
    250              gsExtFlashCtxFs.maxBlocks_D = superBlock_D.fsSize / BLOCKSIZE_EF;
   \   0000005E   0x980D             LDR      R0,[SP, #+52]
   \   00000060   0x0B00             LSRS     R0,R0,#+12
   \   00000062   0x....             LDR.N    R1,??DataTable6
   \   00000064   0xF8C1 0x052C      STR      R0,[R1, #+1324]
    251          	gsExtFlashCtxFs.maxBlocks_D = gsExtFlashCtxFs.maxBlocks_D - DESCBLOCKS_EF;
   \   00000068   0x....             LDR.N    R0,??DataTable6
   \   0000006A   0xF8D0 0x052C      LDR      R0,[R0, #+1324]
   \   0000006E   0x1E80             SUBS     R0,R0,#+2
   \   00000070   0x....             LDR.N    R1,??DataTable6
   \   00000072   0xF8C1 0x052C      STR      R0,[R1, #+1324]
    252              return 0;
   \   00000076   0x2000             MOVS     R0,#+0
   \                     ??AppExtFlash_DataFsConfig_1:
   \   00000078   0xB011             ADD      SP,SP,#+68
   \   0000007A   0xBD00             POP      {PC}             ;; return
    253          }
    254          
    255          

   \                                 In section .text, align 2, keep-with-next
    256          int AppExtFlash_DataFsMount ( FS_FLASH * flash )
    257          {
    258          	flash->ReadFlash = GsnExtFlash_FsRead;       /* read content */
   \                     AppExtFlash_DataFsMount:
   \   00000000   0x....             LDR.N    R1,??DataTable6_3
   \   00000002   0x6301             STR      R1,[R0, #+48]
    259          	flash->EraseFlash = GsnExtFlash_FsErase;     /* erase a block */
   \   00000004   0x....             LDR.N    R1,??DataTable6_4
   \   00000006   0x6341             STR      R1,[R0, #+52]
    260            	flash->WriteFlash = GsnExtFlash_FsWrite;     /* write content */
   \   00000008   0x....             LDR.N    R1,??DataTable6_5
   \   0000000A   0x6381             STR      R1,[R0, #+56]
    261            	flash->VerifyFlash = GsnExtFlash_FsVerifyFlash;   /* verify content */
   \   0000000C   0x....             LDR.N    R1,??DataTable6_6
   \   0000000E   0x63C1             STR      R1,[R0, #+60]
    262            	flash->BlockCopy = GsnExtFlash_FsBlockCopy;
   \   00000010   0x....             LDR.N    R1,??DataTable6_7
   \   00000012   0x64C1             STR      R1,[R0, #+76]
    263          
    264          	flash->maxblock = gsExtFlashCtxFs.maxBlocks_D;
   \   00000014   0x....             LDR.N    R1,??DataTable6
   \   00000016   0xF8D1 0x152C      LDR      R1,[R1, #+1324]
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    265          	flash->blocksize = BLOCKSIZE_EF;
   \   0000001C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000020   0x6041             STR      R1,[R0, #+4]
    266          	flash->sectorsize = SECTORSIZE_EF;
   \   00000022   0xF44F 0x7180      MOV      R1,#+256
   \   00000026   0x6081             STR      R1,[R0, #+8]
    267          	flash->sectorperblock = SECTORPERBLOCK_EF;
   \   00000028   0x2110             MOVS     R1,#+16
   \   0000002A   0x60C1             STR      R1,[R0, #+12]
    268          	flash->blockstart = gsExtFlashCtxFs.blockStart_D;	   /* where 1st block starts */
   \   0000002C   0x....             LDR.N    R1,??DataTable6
   \   0000002E   0xF8D1 0x1524      LDR      R1,[R1, #+1316]
   \   00000032   0x6101             STR      R1,[R0, #+16]
    269          	flash->descsize = DESCSIZE_EF;		   /* 128K		*/
   \   00000034   0xF44F 0x6100      MOV      R1,#+2048
   \   00000038   0x6141             STR      R1,[R0, #+20]
    270          	flash->descblockstart = gsExtFlashCtxFs.descBlockStart_D;
   \   0000003A   0x....             LDR.N    R1,??DataTable6
   \   0000003C   0xF8D1 0x1528      LDR      R1,[R1, #+1320]
   \   00000040   0x6181             STR      R1,[R0, #+24]
    271          	flash->descblockend = gsExtFlashCtxFs.descBlockStart_D + DESCBLOCKS_EF - 1; /*  num of last desc block  */
   \   00000042   0x....             LDR.N    R1,??DataTable6
   \   00000044   0xF8D1 0x1528      LDR      R1,[R1, #+1320]
   \   00000048   0x1C49             ADDS     R1,R1,#+1
   \   0000004A   0x61C1             STR      R1,[R0, #+28]
    272          	flash->cacheddescsize = DESCCACHE_EF;					  /*  size of write cache in descriptor  */
   \   0000004C   0x2100             MOVS     R1,#+0
   \   0000004E   0x6241             STR      R1,[R0, #+36]
    273          	return 0;
   \   00000050   0x2000             MOVS     R0,#+0
   \   00000052   0x4770             BX       LR               ;; return
    274          }
    275          
    276          

   \                                 In section .text, align 2, keep-with-next
    277          VOID
    278          App_ExtFlash_DataFsInit()
    279          {
   \                     App_ExtFlash_DataFsInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
    280          	UINT32 memsize;
    281          	INT32 rc;
    282          	UINT8 *pFsBuff;
    283          
    284          	if(gsExtFlashCtxFs.extFlashStatus == EXTFLASH_NOT_INITIALIZED)
   \   00000004   0x....             LDR.N    R0,??DataTable6
   \   00000006   0xF890 0x0548      LDRB     R0,[R0, #+1352]
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD102             BNE.N    ??App_ExtFlash_DataFsInit_0
    285          	{
    286          		AppExtFlash_Init(GSN_FLASH_SPI_POLL);
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0x.... 0x....      BL       AppExtFlash_Init
    287          	}
    288          	
    289          	GsnExtFlash_FsInit(&gsExtFlashCtxFs);
   \                     ??App_ExtFlash_DataFsInit_0:
   \   00000014   0x....             LDR.N    R0,??DataTable6
   \   00000016   0x.... 0x....      BL       GsnExtFlash_FsInit
    290          
    291          	AppExtFlash_DataFsConfig();
   \   0000001A   0x.... 0x....      BL       AppExtFlash_DataFsConfig
    292          
    293          	memsize = fs_getmem_flashdrive(AppExtFlash_DataFsMount);
   \   0000001E   0x....             LDR.N    R0,??DataTable6_10
   \   00000020   0x.... 0x....      BL       fs_getmem_flashdrive
   \   00000024   0x0004             MOVS     R4,R0
    294          	pFsBuff = gsn_malloc(memsize);
   \   00000026   0x2200             MOVS     R2,#+0
   \   00000028   0xF44F 0x7193      MOV      R1,#+294
   \   0000002C   0x0020             MOVS     R0,R4
   \   0000002E   0x.... 0x....      BL       GsnDynMemMgmt_Alloc
    295          
    296              if(pFsBuff != NULL)
   \   00000032   0x2800             CMP      R0,#+0
   \   00000034   0xD00C             BEQ.N    ??App_ExtFlash_DataFsInit_1
    297              {
    298          		rc = f_mountdrive(APP_EXT_FLASH_DRIVE_NUM_3, pFsBuff, memsize, (void *)fs_mount_flashdrive,
    299          			AppExtFlash_DataFsMount);
   \   00000036   0x....             LDR.N    R1,??DataTable6_10
   \   00000038   0x9100             STR      R1,[SP, #+0]
   \   0000003A   0x....             LDR.N    R3,??DataTable6_9
   \   0000003C   0x0022             MOVS     R2,R4
   \   0000003E   0x0001             MOVS     R1,R0
   \   00000040   0x2003             MOVS     R0,#+3
   \   00000042   0x.... 0x....      BL       fsm_mountdrive
    300                          
    301          		if(rc == F_ERR_NOTFORMATTED)
   \   00000046   0x2802             CMP      R0,#+2
   \   00000048   0xD102             BNE.N    ??App_ExtFlash_DataFsInit_1
    302          		{
    303                              f_format(APP_EXT_FLASH_DRIVE_NUM_3);
   \   0000004A   0x2003             MOVS     R0,#+3
   \   0000004C   0x.... 0x....      BL       fsm_format
    304          		}
    305          
    306          	}
    307          }
   \                     ??App_ExtFlash_DataFsInit_1:
   \   00000050   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6:
   \   00000000   0x........         DC32     gsExtFlashCtxFs

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_1:
   \   00000000   0x........         DC32     gsExtFlashCtxFs+0x540

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_2:
   \   00000000   0x........         DC32     `?<Constant "flok">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_3:
   \   00000000   0x........         DC32     GsnExtFlash_FsRead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_4:
   \   00000000   0x........         DC32     GsnExtFlash_FsErase

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_5:
   \   00000000   0x........         DC32     GsnExtFlash_FsWrite

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_6:
   \   00000000   0x........         DC32     GsnExtFlash_FsVerifyFlash

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_7:
   \   00000000   0x........         DC32     GsnExtFlash_FsBlockCopy

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_8:
   \   00000000   0x........         DC32     AppExtFlash_FsMount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_9:
   \   00000000   0x........         DC32     fs_mount_flashdrive

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable6_10:
   \   00000000   0x........         DC32     AppExtFlash_DataFsMount

   \                                 In section .rodata, align 4
   \                     `?<Constant "flok">`:
   \   00000000   0x66 0x6C          DC8 "flok"
   \              0x6F 0x6B    
   \              0x00         
   \   00000005   0x00 0x00          DC8 0, 0, 0
   \              0x00         
    308          
    309          
    310          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      72   AppExtFlash_DataFsConfig
        72   -> GsnExtFlash_Read
        72   -> strncmp
       0   AppExtFlash_DataFsMount
     120   AppExtFlash_FsConfig
       120   -> GsnExtFlash_Read
       120   -> MALLOC
       120   -> strncmp
       0   AppExtFlash_FsMount
       8   AppExtFlash_Init
         8   -> GsnExtFlash_Init
         8   -> GsnGpio_Init
         8   -> GsnIoMux_PullDownDisable
         8   -> GsnIoMux_PullDownEnable
         8   -> GsnIoMux_Sel
      16   App_ExtFlash_DataFsInit
        16   -> AppExtFlash_DataFsConfig
        16   -> AppExtFlash_Init
        16   -> GsnDynMemMgmt_Alloc
        16   -> GsnExtFlash_FsInit
        16   -> fs_getmem_flashdrive
        16   -> fsm_format
        16   -> fsm_mountdrive
      16   App_ExtFlash_FsInit
        16   -> AppExtFlash_FsConfig
        16   -> AppExtFlash_Init
        16   -> GsnDynMemMgmt_Alloc
        16   -> GsnExtFlash_FsInit
        16   -> fs_getmem_flashdrive
        16   -> fsm_format
        16   -> fsm_mountdrive
       8   GsnIoMux_PullDownDisable
         8   -> GsnOsal_IntrDisable
         8   -> GsnOsal_IntrEnable
       8   GsnIoMux_PullDownEnable
         8   -> GsnOsal_IntrDisable
         8   -> GsnOsal_IntrEnable
       0   GsnIoMux_Sel
       8   GsnOsal_IntrDisable
         8   -> _tx_thread_interrupt_control
       8   GsnOsal_IntrEnable
         8   -> _tx_thread_interrupt_control


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant "flok">
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_10
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
       4  ??DataTable6_7
       4  ??DataTable6_8
       4  ??DataTable6_9
     124  AppExtFlash_DataFsConfig
      84  AppExtFlash_DataFsMount
     324  AppExtFlash_FsConfig
      84  AppExtFlash_FsMount
     210  AppExtFlash_Init
      82  App_ExtFlash_DataFsInit
      80  App_ExtFlash_FsInit
      60  GsnIoMux_PullDownDisable
      60  GsnIoMux_PullDownEnable
      12  GsnIoMux_Sel
      10  GsnOsal_IntrDisable
       8  GsnOsal_IntrEnable

 
     8 bytes in section .rodata
 1 182 bytes in section .text
 
 1 032 bytes of CODE  memory (+ 150 bytes shared)
     8 bytes of CONST memory

Errors: none
Warnings: 4
