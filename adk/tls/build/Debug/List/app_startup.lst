###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.5.4819/W32 for ARM      02/Apr/2015  04:31:10 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\main\app_startup.c                                  #
#    Command line =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\main\app_startup.c -D ADK_PROV_WPS_ENABLE -D        #
#                    GSN_FILE_UPLOAD_API -D ADK_FILE_UPLOAD_API -D            #
#                    ADK_OTAFU_ENABLE -D TX_ENABLE_IAR_LIBRARY_SUPPORT -D     #
#                    IAR -D TM_USE_HTTPD -D GSN_GSLINK -D GSN_WEB_SERVER -D   #
#                    APP_MDNS -D NX_INCLUDE_USER_DEFINE_FILE -D               #
#                    NO_ADK_PROV_GROUP_SECURE -lC                             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\ -lA F:\Development\GS2000\5.1.5\02_Ap #
#                    r_2015_04_30_38\adk\tls\build\Debug\List\                #
#                    --diag_suppress Pa050,Go005 -o                           #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38 #
#                    \adk\tls\build\..\..\..\geps\inc\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\core\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\drivers\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\http\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\rtos\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\netx_bsd_layer\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\main\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\hcc\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\src\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\hw_engine_if\ -I       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\wpa_if\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\supplicant\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ncm\inc\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ -I                              #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\core\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\drivers\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\modules\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\\rtos\tx\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\ -I                            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\netx_bsd_layer\ -I        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\main\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\\inc\hw_engine_if\ -I    #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\wpa_supplicant-1.0\s #
#                    rc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\system\fs\hcc\src\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\ -I F:\Development\GS2000\5.1.5\0 #
#                    2_Apr_2015_04_30_38\adk\tls\build\..\inc\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\ctx\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\inc\main\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\fs_if\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\config\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\sm\ -I F:\Development\GS2000\5.1.5\02_Apr_ #
#                    2015_04_30_38\adk\tls\build\..\inc\ncm\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\debug\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\tls\ -I            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\rtc_mem\ -I F:\Development\GS2000\5.1.5\02 #
#                    _Apr_2015_04_30_38\adk\tls\build\..\inc\ext_app\ -I      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\wps\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\..\..\adk\provisioning\i #
#                    nc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\adk\otafu\inc\ -I                 #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\adk\cloud_connect\inc\ -Ol               #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\app_startup.lst                        #
#    Object file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\app_startup.o                           #
#                                                                             #
#                                                                             #
###############################################################################

F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls\src\main\app_startup.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: app_startup.c,v $
     28          *******************************************************************************/
     29          /*
     30          Different memory section placed in SRAM is given below
     31          	  _________________________________________ 0x20000000	
     32          	|										|
     33          	|	16KB reserved for ROM PATCH AUTO	|
     34          	|										|
     35          	|---------------------------------------|
     36          	|										|	 
     37          	|	8KB reserved for ROM PATCH FPT		|
     38          	|										|
     39          	|---------------------------------------|
     40          	|										|
     41          	|	8KB reserved for predefined heap	|
     42          	|			  ( Heap 1) 				|
     43          	|---------------------------------------|
     44          	|										|
     45          	|										|
     46          	|	CSTACK, 							|
     47          	|										|
     48          	|	(APP + ROM )data section			|
     49          	|										|
     50          	|---------------------------------------|
     51          	|										|
     52          	|	Heap 2								|
     53          	|										|
     54          	|---------------------------------------|
     55          	|										|
     56          	|	App Code							|
     57          	|										|
     58          	|---------------------------------------|
     59          	|										|
     60          	|	Heap 3								|
     61          	|										|
     62          	|---------------------------------------| 0x2007FFFF
     63          	
     64          */
     65          /*****************************************************************************
     66            * File Inclusions
     67            ****************************************************************************/
     68          
     69          #include "gsn_includes.h"

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0010             MOVS     R0,R2
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioTxFifoEmptyWait()
   \                     GsnFlashIf_PioTxFifoEmptyWait:
   \   00000000   0x4808             LDR.N    R0,??GsnFlashIf_PioTxFifoEmptyWait_0  ;; 0x400e0004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   00000008   0xE006             B.N      ??GsnFlashIf_PioTxFifoEmptyWait_1
   \                     ??GsnFlashIf_PioTxFifoEmptyWait_2:
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \                     ??GsnFlashIf_PioTxFifoEmptyWait_3:
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xD3FC             BCC.N    ??GsnFlashIf_PioTxFifoEmptyWait_2
   \   00000010   0x4804             LDR.N    R0,??GsnFlashIf_PioTxFifoEmptyWait_0  ;; 0x400e0004
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF010 0x0001      ANDS     R0,R0,#0x1
   \                     ??GsnFlashIf_PioTxFifoEmptyWait_1:
   \   00000018   0x2800             CMP      R0,#+0
   \   0000001A   0xD101             BNE.N    ??GsnFlashIf_PioTxFifoEmptyWait_4
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE7F5             B.N      ??GsnFlashIf_PioTxFifoEmptyWait_3
   \                     ??GsnFlashIf_PioTxFifoEmptyWait_4:
   \   00000020   0x4770             BX       LR               ;; return
   \   00000022   0xBF00             Nop      
   \                     ??GsnFlashIf_PioTxFifoEmptyWait_0:
   \   00000024   0x400E0004         DC32     0x400e0004

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioTxFifoWrite(UINT32)
   \                     GsnFlashIf_PioTxFifoWrite:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoEmptyWait
   \   00000008   0x4801             LDR.N    R0,??GsnFlashIf_PioTxFifoWrite_0  ;; 0x400e0400
   \   0000000A   0x6004             STR      R4,[R0, #+0]
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return
   \   0000000E   0xBF00             Nop      
   \                     ??GsnFlashIf_PioTxFifoWrite_0:
   \   00000010   0x400E0400         DC32     0x400e0400

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioRxFifoDataWait()
   \                     GsnFlashIf_PioRxFifoDataWait:
   \   00000000   0x4808             LDR.N    R0,??GsnFlashIf_PioRxFifoDataWait_0  ;; 0x400e0004
   \   00000002   0x6800             LDR      R0,[R0, #+0]
   \   00000004   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \   00000008   0xE006             B.N      ??GsnFlashIf_PioRxFifoDataWait_1
   \                     ??GsnFlashIf_PioRxFifoDataWait_2:
   \   0000000A   0x1C40             ADDS     R0,R0,#+1
   \                     ??GsnFlashIf_PioRxFifoDataWait_3:
   \   0000000C   0x280A             CMP      R0,#+10
   \   0000000E   0xD3FC             BCC.N    ??GsnFlashIf_PioRxFifoDataWait_2
   \   00000010   0x4804             LDR.N    R0,??GsnFlashIf_PioRxFifoDataWait_0  ;; 0x400e0004
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF3C0 0x0080      UBFX     R0,R0,#+2,#+1
   \                     ??GsnFlashIf_PioRxFifoDataWait_1:
   \   00000018   0x2801             CMP      R0,#+1
   \   0000001A   0xD101             BNE.N    ??GsnFlashIf_PioRxFifoDataWait_4
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xE7F5             B.N      ??GsnFlashIf_PioRxFifoDataWait_3
   \                     ??GsnFlashIf_PioRxFifoDataWait_4:
   \   00000020   0x4770             BX       LR               ;; return
   \   00000022   0xBF00             Nop      
   \                     ??GsnFlashIf_PioRxFifoDataWait_0:
   \   00000024   0x400E0004         DC32     0x400e0004

   \                                 In section .text, align 4
   \   __interwork __softfp UINT32 GsnFlashIf_PioRxFifoRead()
   \                     GsnFlashIf_PioRxFifoRead:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       GsnFlashIf_PioRxFifoDataWait
   \   00000006   0x4801             LDR.N    R0,??GsnFlashIf_PioRxFifoRead_0  ;; 0x400e0408
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xBD02             POP      {R1,PC}          ;; return
   \                     ??GsnFlashIf_PioRxFifoRead_0:
   \   0000000C   0x400E0408         DC32     0x400e0408

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioReq()
   \                     GsnFlashIf_PioReq:
   \   00000000   0x4804             LDR.N    R0,??GsnFlashIf_PioReq_0  ;; 0x400e0410
   \   00000002   0x2101             MOVS     R1,#+1
   \   00000004   0x6001             STR      R1,[R0, #+0]
   \                     ??GsnFlashIf_PioReq_1:
   \   00000006   0x4804             LDR.N    R0,??GsnFlashIf_PioReq_0+0x4  ;; 0x400e0414
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD0F9             BEQ.N    ??GsnFlashIf_PioReq_1
   \   00000012   0x4770             BX       LR               ;; return
   \                     ??GsnFlashIf_PioReq_0:
   \   00000014   0x400E0410         DC32     0x400e0410
   \   00000018   0x400E0414         DC32     0x400e0414

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnFlashIf_PioRelease()
   \                     GsnFlashIf_PioRelease:
   \   00000000   0x4804             LDR.N    R0,??GsnFlashIf_PioRelease_0  ;; 0x400e0410
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x6001             STR      R1,[R0, #+0]
   \                     ??GsnFlashIf_PioRelease_1:
   \   00000006   0x4804             LDR.N    R0,??GsnFlashIf_PioRelease_0+0x4  ;; 0x400e0414
   \   00000008   0x6800             LDR      R0,[R0, #+0]
   \   0000000A   0xF010 0x0001      ANDS     R0,R0,#0x1
   \   0000000E   0x2801             CMP      R0,#+1
   \   00000010   0xD0F9             BEQ.N    ??GsnFlashIf_PioRelease_1
   \   00000012   0x4770             BX       LR               ;; return
   \                     ??GsnFlashIf_PioRelease_0:
   \   00000014   0x400E0410         DC32     0x400e0410
   \   00000018   0x400E0414         DC32     0x400e0414

   \                                 In section .text, align 2
   \   __interwork __softfp UINT32 GsnFlashIf_FlashIdRead()
   \                     GsnFlashIf_FlashIdRead:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000008   0x2003             MOVS     R0,#+3
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0x209F             MOVS     R0,#+159
   \   00000010   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000014   0x.... 0x....      BL       GsnFlashIf_PioRxFifoRead
   \   00000018   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp UINT32 GsnFlashIf_FlashStatusRead()
   \                     GsnFlashIf_FlashStatusRead:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x2002             MOVS     R0,#+2
   \   00000006   0x9000             STR      R0,[SP, #+0]
   \   00000008   0x9800             LDR      R0,[SP, #+0]
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x9000             STR      R0,[SP, #+0]
   \   00000012   0x9800             LDR      R0,[SP, #+0]
   \   00000014   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000018   0x2005             MOVS     R0,#+5
   \   0000001A   0x9000             STR      R0,[SP, #+0]
   \   0000001C   0x9800             LDR      R0,[SP, #+0]
   \   0000001E   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000022   0x.... 0x....      BL       GsnFlashIf_PioRxFifoRead
   \   00000026   0x9000             STR      R0,[SP, #+0]
   \   00000028   0x9800             LDR      R0,[SP, #+0]
   \   0000002A   0x9001             STR      R0,[SP, #+4]
   \   0000002C   0x9801             LDR      R0,[SP, #+4]
   \   0000002E   0xBD0E             POP      {R1-R3,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_FlashWelBitSetWait()
   \                     GsnFlashIf_FlashWelBitSetWait:
   \   00000000   0xB580             PUSH     {R7,LR}
   \                     ??GsnFlashIf_FlashWelBitSetWait_0:
   \   00000002   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   00000006   0x0780             LSLS     R0,R0,#+30
   \   00000008   0xD5FB             BPL.N    ??GsnFlashIf_FlashWelBitSetWait_0
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_FlashWelBitClrWait()
   \                     GsnFlashIf_FlashWelBitClrWait:
   \   00000000   0xB580             PUSH     {R7,LR}
   \                     ??GsnFlashIf_FlashWelBitClrWait_0:
   \   00000002   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   00000006   0x0780             LSLS     R0,R0,#+30
   \   00000008   0xD4FB             BMI.N    ??GsnFlashIf_FlashWelBitClrWait_0
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_FlashWriteEnable()
   \                     GsnFlashIf_FlashWriteEnable:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0x2006             MOVS     R0,#+6
   \   00000010   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000014   0x.... 0x....      BL       GsnFlashIf_FlashWelBitSetWait
   \   00000018   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_FlashStatusWrite(UINT32, UINT32)
   \                     GsnFlashIf_FlashStatusWrite:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
   \   00000006   0x.... 0x....      BL       GsnFlashIf_FlashWriteEnable
   \   0000000A   0x2003             MOVS     R0,#+3
   \   0000000C   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000010   0x0028             MOVS     R0,R5
   \   00000012   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000001C   0x0020             MOVS     R0,R4
   \   0000001E   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000022   0x.... 0x....      BL       GsnFlashIf_FlashWelBitClrWait
   \   00000026   0xBD31             POP      {R0,R4,R5,PC}    ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_HpmReset()
   \                     GsnFlashIf_HpmReset:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2003             MOVS     R0,#+3
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0x20FF             MOVS     R0,#+255
   \   00000010   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp void GsnFlashIf_DeepPowerDownRelease()
   \                     GsnFlashIf_DeepPowerDownRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2002             MOVS     R0,#+2
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000008   0x2000             MOVS     R0,#+0
   \   0000000A   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   0000000E   0x20AB             MOVS     R0,#+171
   \   00000010   0x.... 0x....      BL       GsnFlashIf_PioTxFifoWrite
   \   00000014   0xBD01             POP      {R0,PC}          ;; return

  		 void *ctx, struct wpa_sm *sm);
  		                   ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",52  Warning[Pe231]: 
          declaration is not visible outside of function

  struct rsn_pmksa_cache_entry * pmksa_cache_get_current(struct wpa_sm *sm);
                                                                ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",60  Warning[Pe231]: 
          declaration is not visible outside of function

  void pmksa_cache_clear_current(struct wpa_sm *sm);
                                        ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",61  Warning[Pe231]: 
          declaration is not visible outside of function

  int pmksa_cache_set_current(struct wpa_sm *sm, const u8 *pmkid,
                                     ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",62  Warning[Pe231]: 
          declaration is not visible outside of function
     70          #include "config/app_cfg.h"
     71          #include "fs_if/app_fsIf.h"
     72          #include "gsn_ncm.h"
     73          #include "battery/app_batt_chk.h"
     74          #include "app_main_ctx.h"
     75          /*****************************************************************************
     76          * Private Definitions
     77          ****************************************************************************/
     78          #pragma section = "BSS_SECTION"       /* Points to the BSS segment of FLASH code */
     79          #pragma section = "DATA_SECTION"      /* Points to the DATA section of FLASH code */
     80          #pragma section = "APP_READWRITE_SECTION"      /* Points to the readwrite section of FLASH code */
     81          #pragma section = "DATA_INIT_SECTION" /* Points to the DATA INIT section of FLASH code */
     82          
     83          #pragma section = "ROM_PATCH_FPT_SECTION" /* Points to the ROM PATCH FPT section in FLASH code */
     84          #pragma section = "APP_CODE_SECTION" /* Points to the APP CODE section in FLASH code */
     85          #pragma section = "ROM_PATCH_AUTO" /* Points to the ROM PATCH section in FLASH code */
     86          #pragma section = "FREE_MEM" /* Points to the ROM PATCH section in FLASH code */
     87          
     88          /*****************************************************************************
     89           *NO FLASH FETCH
     90           ****************************************************************************/
     91          #ifdef NO_FLASH_FETCH 
     92          /* Download the code directly in to SRAM using the debugger and run
     93          This Mathod will be used during development phase */
     94          
     95          
     96          #define GSN_ROM_PATCH_FPT_LOCATION 0x20004000 /* 0x20004000 Location in RAM where the ROM
     97                                                        function pointers has to be copied */
     98          #define START_OF_SRAM 					0x20000000
     99          #define END_OF_SRAM   					0x2007FFFF
    100          #define APP_CODE_START          		0x20040000
    101          #define ROM_PATCH_AUTO_SECTION_LENGTH 	0x2000
    102          #define CONTROL_BLOCK_SIZE 				0x1000
    103          
    104          /* These two varibales are part of ROM code */
    105          #define APP_STARTUP_COPY_PROG( src, len, dst ) memcpy((char*)dst, (char*)src, len);
    106          /*Get word aligned address*/
    107          #define WORD_ALIGNED_ADDR(a)	(((a) & (~0x3)) + 0x4)
    108          
    109          /* This marks the start of free memory available for byte-pool creation */
    110          __no_init int GsnSramFreeMem @ "FREE_MEM";
    111          
    112          /* Used for cerating Byte Memory pools to be used as heap*/
    113          GSN_BYTE_POOL_LINK_T bytePool[3];
    114          
    115          extern INT32 App_Main( void );
    116          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value );
    117          
    118          /*****************************************************************************
    119           *Function definitions
    120           ****************************************************************************/
    121          void GsnStartup_Main( void ) 
    122          {
    123              unsigned int* bssEnd = __section_end("BSS_SECTION");
    124              unsigned int* bssStart = __section_begin("BSS_SECTION");
    125              unsigned int* dataEnd = __section_end("DATA_SECTION");
    126              unsigned int* dataStart = __section_begin("DATA_SECTION");
    127              unsigned int* dataInitStart = __section_begin("DATA_INIT_SECTION");
    128              unsigned int* romPatchFptEnd = __section_end("ROM_PATCH_FPT_SECTION");
    129              unsigned int* romPatchFptStart = __section_begin("ROM_PATCH_FPT_SECTION");
    130              unsigned int* appCodeEnd = __section_end("APP_CODE_SECTION");
    131              unsigned int* appCodeStart = (unsigned int*)APP_CODE_START;
    132          	
    133              unsigned int length, src, dst, heap1Start, heap2Start;
    134              int heap1Length, heap2Length;
    135          
    136          
    137          	/* 1. Copy from SRAM to initialize the "initialised data" in data	segment. */
    138          	length = (unsigned int)( dataEnd )- (unsigned int)(dataStart);
    139          	src = (unsigned int)dataInitStart; /* Location in Flash */
    140          	dst = (unsigned int)dataStart; /* RAM location to copy, i.e. the DATA section */   
    141              APP_STARTUP_COPY_PROG(src, length, dst);
    142          
    143          
    144          	/*
    145               * 2. Copy patch function pointers from the flash to the SRAM.
    146               */
    147              length = (unsigned int)( romPatchFptEnd )- (unsigned int)(romPatchFptStart);
    148              src = (unsigned int)romPatchFptStart;/* Location in Flash for ROM PATCH FPT */
    149              dst = GSN_ROM_PATCH_FPT_LOCATION;/* RAM location to copy */  
    150              APP_STARTUP_COPY_PROG(src, length,  dst );    
    151          	
    152          	/* 3. Won't be copying the APP code. Calculate the heap at the end*/
    153          	heap1Start = (((unsigned int)&GsnSramFreeMem) & ~0x3) + 0x8;
    154          	heap1Length = (unsigned int)(appCodeStart)  - heap1Start;
    155          	if( heap1Length < 0 )
    156          	{
    157          		/* ERROR APP CODE Section is more than what it can fit in the SRAM. */
    158          		while(1);
    159          	}
    160          	heap2Start = (((unsigned int)appCodeEnd) & ~0x3) + 0x8;
    161          	heap2Length = END_OF_SRAM - heap2Start;
    162              
    163          
    164          	/*
    165          	* 4. Initialize BSS segment. memset uninitailize data.
    166          	*/
    167              
    168              src = (unsigned int)bssStart;
    169              length = (unsigned int)( bssEnd )- (unsigned int)( bssStart );    
    170              memset((void*) src, 0, length );
    171              
    172              /*5.  Initialize the free memory section to use tx byte pool for dynamic memory
    173                 allocation */
    174              tx_byte_pool_create(&bytePool[0].bPool, NULL, (void*)heap1Start, 
    175                                         (UINT32)heap1Length );
    176              
    177              tx_byte_pool_create(&bytePool[1].bPool, NULL, (void*)heap2Start, 
    178                                         (UINT32)heap2Length );    
    179          	pGsnBytePoolHead =  ( heap2Length > heap1Length ) ? 
    180          					&bytePool[1] : &bytePool[0];
    181          	pGsnBytePoolHead->pNext = ( heap2Length > heap1Length ) ? 
    182          					&bytePool[0] : &bytePool[1];
    183          
    184          	pGsnBytePoolHead->pNext->pNext = NULL;
    185          		
    186             
    187          	/* Assign 3 SRAM blocks to wlan*/
    188          	 *((volatile UINT32 *)(0x40080008)) = (UINT32)0x1C;
    189          	
    190          	/* Call APP MAIN */
    191              App_Main();
    192              while(1);
    193          }
    194          
    195          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value )
    196          {
    197              unsigned int ret = 1;
    198              while( ret < 0x80000000 )
    199              {
    200                  if( value < ret )break;
    201                  ret <<= 1;
    202              }
    203              return ret;
    204          }
    205          
    206          
    207          #else /*Store code in to FLASH. prefetch/flash cache during run time*/
    208          /*****************************************************************************
    209           *FLASH FETCH
    210           ****************************************************************************/
    211          
    212          /*****************************************************************************
    213           *Function prototypes
    214           ****************************************************************************/
    215          extern GSN_BYTE_POOL_LINK_T *pGsnBytePoolHead;
    216          
    217          extern UINT32 romFwImageFlashAddr;/* This holds the starting address of the App Fw*/
    218          
    219          extern INT32 App_Main( void );
    220          
    221          UINT32 GsnStartup_ClosestPowerOf2( unsigned int value );
    222          
    223          BOOL
    224          App_FlashIfFlashCheckAndConfigure();
    225          /*****************************************************************************
    226           *Private definitions
    227           ****************************************************************************/
    228          #define APP_STARTUP_COPY_PROG( dst, src, len) GsnFlashCache_BlkFetch( src, dst, len, NULL );
    229          
    230          #define CB1_RESERVED_SIZE			0x1000
    231          #define FPT_RESERVED_SIZE			0x2000
    232          #define GSN_STARTUP_RESERVED_SIZE	0x800
    233          
    234          #define SRAM_START_ADDR				0x20000000
    235          #define SRAM_END_ADDR				0x2007FFFF /* 512 */
    236          
    237          #define FPT_LOCATION 				0x20004000 /* 0x20004000 Location in RAM where the ROM
    238                                                       	 function pointers has to be copied */
    239          #define APP_CODE_SRAM_BLOCK1_ADDR	0x20040000 /* at 256KB */
    240          #define APP_CODE_SRAM_BLOCK1_SIZE	0x40000 /* 256KB */
    241          
    242          #define APP_CODE_SRAM_BLOCK2_ADDR	0x20080000 /* at 512KB */
    243          #define APP_CODE_SRAM_BLOCK2_SIZE	0x10000 /* 16KB */
    244          

   \                                 In section .bss, align 4
    245          GSN_BYTE_POOL_LINK_T heapBytePool[4];/* create up to 4 byte poola to be used as heap*/
   \                     heapBytePool:
   \   00000000                      DS8 224
    246          
    247          #define WORD_ALIGNED_ADDR(a)         (((a) & (~0x3)) + 0x4)
    248          
    249          typedef struct HEAP_INFO
    250          {
    251          	UINT32 start;
    252          	UINT32 size;
    253          }HEAP_INFO_T;
    254          
    255          extern APP_MAIN_CTX_T appCtx;
    256          VOID
    257          AppSm_GotoStandby(APP_MAIN_CTX_T *pAppCtx);
    258          VOID 
    259          App_IdleHandler();
    260          
    261          /*****************************************************************************
    262           *Function definitions
    263           ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    264          void GsnStartup_Main( void )
    265          {
   \                     GsnStartup_Main:
   \   00000000   0xE92D 0x4FF0      PUSH     {R4-R11,LR}
   \   00000004   0xB091             SUB      SP,SP,#+68
    266          	UINT32 appFwImageFlashAddr;
    267          	UINT32 sectionFlshAddr,sectionSize;
    268          	HEAP_INFO_T heap[4] = {0};
   \   00000006   0xA809             ADD      R0,SP,#+36
   \   00000008   0x2120             MOVS     R1,#+32
   \   0000000A   0x.... 0x....      BL       __aeabi_memclr4
    269          	UINT32 appCodeSize, appCodeSramEnd;
    270              GSN_FLASHCACHE_BLK_REMAP_T remap;
    271          	UINT32 remapIndx = 1;
   \   0000000E   0x2701             MOVS     R7,#+1
    272          
    273          	/* Program address space - Address assigned in icf file*/
    274          	UINT32 *autoPatchStart = __section_begin("ROM_PATCH_AUTO");
   \   00000010   0x....             LDR.N    R0,??DataTable2
   \   00000012   0x9001             STR      R0,[SP, #+4]
    275          	UINT32 *autoPatchEnd = __section_end("ROM_PATCH_AUTO");
   \   00000014   0x....             LDR.N    R0,??DataTable2_1
   \   00000016   0x9000             STR      R0,[SP, #+0]
    276          	UINT32 *fptStart = __section_begin("ROM_PATCH_FPT_SECTION");
   \   00000018   0x....             LDR.N    R0,??DataTable2_2
   \   0000001A   0x9004             STR      R0,[SP, #+16]
    277          	UINT32 *fptEnd = __section_end("ROM_PATCH_FPT_SECTION");
   \   0000001C   0x....             LDR.N    R0,??DataTable2_3
   \   0000001E   0x9003             STR      R0,[SP, #+12]
    278              UINT32 *bssStart = __section_begin("BSS_SECTION");
   \   00000020   0x....             LDR.N    R0,??DataTable2_4
   \   00000022   0x9002             STR      R0,[SP, #+8]
    279              UINT32 *bssEnd = __section_end("BSS_SECTION");
   \   00000024   0x....             LDR.N    R4,??DataTable2_5
    280              UINT32 *dataStart = __section_begin("DATA_SECTION");
   \   00000026   0x....             LDR.N    R1,??DataTable2_6
    281              /*UINT32 *dataEnd = __section_end("DATA_SECTION");*/
    282          	UINT32 *appCodeStart = __section_begin("APP_CODE_SECTION");
   \   00000028   0x.... 0x....      LDR.W    R8,??DataTable2_7
    283          	UINT32 *appCodeEnd = __section_end("APP_CODE_SECTION");
   \   0000002C   0x....             LDR.N    R5,??DataTable2_8
    284          	UINT32 *dataInitStart = __section_begin("DATA_INIT_SECTION");
   \   0000002E   0x....             LDR.N    R0,??DataTable2_9
    285          	UINT32 *dataInitEnd = __section_end("DATA_INIT_SECTION");
   \   00000030   0x....             LDR.N    R2,??DataTable2_10
    286          	UINT32 *freeMemStart = __section_begin("FREE_MEM");
   \   00000032   0x....             LDR.N    R6,??DataTable2_11
    287          
    288          	//App_FlashIfFlashCheckAndConfigure();
    289          	appFwImageFlashAddr = romFwImageFlashAddr;
   \   00000034   0x....             LDR.N    R3,??DataTable2_12
   \   00000036   0xF8D3 0xB000      LDR      R11,[R3, #+0]
    290          	/* Copy data init section. "dataStart" gives absolute SRAM location*/
    291          	sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    292          						((UINT32)autoPatchEnd - (UINT32)autoPatchStart ) +
    293          						FPT_RESERVED_SIZE + GSN_STARTUP_RESERVED_SIZE +
    294          						((UINT32)dataInitStart - (UINT32)appCodeStart);
   \   0000003A   0x9B00             LDR      R3,[SP, #+0]
   \   0000003C   0xEB13 0x030B      ADDS     R3,R3,R11
   \   00000040   0xF513 0x5380      ADDS     R3,R3,#+4096
   \   00000044   0xF8DD 0xC004      LDR      R12,[SP, #+4]
   \   00000048   0xEBB3 0x030C      SUBS     R3,R3,R12
   \   0000004C   0x18C3             ADDS     R3,R0,R3
   \   0000004E   0xF513 0x5320      ADDS     R3,R3,#+10240
   \   00000052   0xEBB3 0x0908      SUBS     R9,R3,R8
    295          
    296          	sectionSize = (UINT32)dataInitEnd - (UINT32)dataInitStart;
   \   00000056   0xEBB2 0x0A00      SUBS     R10,R2,R0
    297          	APP_STARTUP_COPY_PROG( (UINT32)dataStart, sectionFlshAddr, sectionSize);
   \   0000005A   0x2300             MOVS     R3,#+0
   \   0000005C   0x4652             MOV      R2,R10
   \   0000005E   0x4648             MOV      R0,R9
   \   00000060   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    298          
    299          	/* Copy Function Pointer Table (FPT)*/
    300          	sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    301          						((UINT32)autoPatchEnd - (UINT32)autoPatchStart );
   \   00000064   0x9800             LDR      R0,[SP, #+0]
   \   00000066   0xEB10 0x000B      ADDS     R0,R0,R11
   \   0000006A   0xF510 0x5080      ADDS     R0,R0,#+4096
   \   0000006E   0x9901             LDR      R1,[SP, #+4]
   \   00000070   0xEBB0 0x0901      SUBS     R9,R0,R1
    302          	sectionSize = (UINT32)fptEnd - (UINT32)fptStart;
   \   00000074   0x9803             LDR      R0,[SP, #+12]
   \   00000076   0x9904             LDR      R1,[SP, #+16]
   \   00000078   0xEBB0 0x0A01      SUBS     R10,R0,R1
    303          	APP_STARTUP_COPY_PROG( (UINT32)FPT_LOCATION, sectionFlshAddr, sectionSize);
   \   0000007C   0x2300             MOVS     R3,#+0
   \   0000007E   0x4652             MOV      R2,R10
   \   00000080   0x....             LDR.N    R1,??DataTable2_13  ;; 0x20004000
   \   00000082   0x4648             MOV      R0,R9
   \   00000084   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    304          
    305          	/*Copy App code*/
    306          	appCodeSize = sectionSize = (UINT32)appCodeEnd - (UINT32)appCodeStart;
   \   00000088   0xEBB5 0x0A08      SUBS     R10,R5,R8
    307          	if(appCodeSize > APP_CODE_SRAM_BLOCK1_SIZE) sectionSize = APP_CODE_SRAM_BLOCK1_SIZE;
   \   0000008C   0xF5BA 0x2F80      CMP      R10,#+262144
   \   00000090   0xD901             BLS.N    ??GsnStartup_Main_0
   \   00000092   0xF45F 0x2A80      MOVS     R10,#+262144
    308          
    309          	sectionFlshAddr = appFwImageFlashAddr + CB1_RESERVED_SIZE +
    310          						((UINT32)autoPatchEnd - (UINT32)autoPatchStart ) +
    311          						FPT_RESERVED_SIZE + GSN_STARTUP_RESERVED_SIZE;
   \                     ??GsnStartup_Main_0:
   \   00000096   0x9800             LDR      R0,[SP, #+0]
   \   00000098   0xEB10 0x000B      ADDS     R0,R0,R11
   \   0000009C   0xF510 0x5080      ADDS     R0,R0,#+4096
   \   000000A0   0x9901             LDR      R1,[SP, #+4]
   \   000000A2   0x1A40             SUBS     R0,R0,R1
   \   000000A4   0xF510 0x5920      ADDS     R9,R0,#+10240
    312          
    313          	APP_STARTUP_COPY_PROG((UINT32)APP_CODE_SRAM_BLOCK1_ADDR, sectionFlshAddr, sectionSize);
   \   000000A8   0x2300             MOVS     R3,#+0
   \   000000AA   0x4652             MOV      R2,R10
   \   000000AC   0x....             LDR.N    R1,??DataTable2_14  ;; 0x20040000
   \   000000AE   0x4648             MOV      R0,R9
   \   000000B0   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    314          	/*remap*/
    315          	remap.codeAddr = (UINT32)appCodeStart + 1;
   \   000000B4   0xF118 0x0001      ADDS     R0,R8,#+1
   \   000000B8   0x9006             STR      R0,[SP, #+24]
    316              remap.remapIndex = remapIndx++;
   \   000000BA   0x9705             STR      R7,[SP, #+20]
   \   000000BC   0x1C7F             ADDS     R7,R7,#+1
    317              remap.remapSize = APP_CODE_SRAM_BLOCK1_SIZE;
   \   000000BE   0xF45F 0x2080      MOVS     R0,#+262144
   \   000000C2   0x9008             STR      R0,[SP, #+32]
    318              remap.sramAddr = APP_CODE_SRAM_BLOCK1_ADDR;
   \   000000C4   0x....             LDR.N    R0,??DataTable2_14  ;; 0x20040000
   \   000000C6   0x9007             STR      R0,[SP, #+28]
    319              GsnFlashCache_BlkRemapSet(&remap);
   \   000000C8   0xA805             ADD      R0,SP,#+20
   \   000000CA   0x.... 0x....      BL       GsnFlashCache_BlkRemapSet
    320          
    321          	appCodeStart += (sectionSize >> 2); /* devide the size by 4 as the pointer is of type "UINT32 *"  */
   \   000000CE   0xEA5F 0x009A      LSRS     R0,R10,#+2
   \   000000D2   0xEB18 0x0880      ADDS     R8,R8,R0, LSL #+2
    322          	sectionFlshAddr += sectionSize;
   \   000000D6   0xEB1A 0x0909      ADDS     R9,R10,R9
    323              appCodeSramEnd = APP_CODE_SRAM_BLOCK1_ADDR + sectionSize;/* Used to calculate the heapat the end*/
   \   000000DA   0x....             LDR.N    R0,??DataTable2_14  ;; 0x20040000
   \   000000DC   0xEB10 0x0B0A      ADDS     R11,R0,R10
    324          	if(appCodeStart < appCodeEnd)
   \   000000E0   0x45A8             CMP      R8,R5
   \   000000E2   0xD21D             BCS.N    ??GsnStartup_Main_1
    325          	{
    326          		appCodeSize = sectionSize = (UINT32)appCodeEnd - (UINT32)appCodeStart;
   \   000000E4   0xEBB5 0x0A08      SUBS     R10,R5,R8
    327          		if(appCodeSize > APP_CODE_SRAM_BLOCK2_SIZE) sectionSize = APP_CODE_SRAM_BLOCK2_SIZE;
   \   000000E8   0xF1BA 0x1F01      CMP      R10,#+65537
   \   000000EC   0xD301             BCC.N    ??GsnStartup_Main_2
   \   000000EE   0xF45F 0x3A80      MOVS     R10,#+65536
    328          		appCodeSramEnd += sectionSize + 1024;
   \                     ??GsnStartup_Main_2:
   \   000000F2   0xF51A 0x6080      ADDS     R0,R10,#+1024
   \   000000F6   0xEB10 0x0B0B      ADDS     R11,R0,R11
    329          		APP_STARTUP_COPY_PROG((UINT32)APP_CODE_SRAM_BLOCK2_ADDR, sectionFlshAddr, sectionSize);
   \   000000FA   0x2300             MOVS     R3,#+0
   \   000000FC   0x4652             MOV      R2,R10
   \   000000FE   0x....             LDR.N    R1,??DataTable2_15  ;; 0x20080000
   \   00000100   0x4648             MOV      R0,R9
   \   00000102   0x.... 0x....      BL       GsnFlashCache_BlkFetch
    330          		/*remap*/
    331          		remap.codeAddr = (UINT32)appCodeStart + 1;
   \   00000106   0xF118 0x0001      ADDS     R0,R8,#+1
   \   0000010A   0x9006             STR      R0,[SP, #+24]
    332          		remap.remapIndex = remapIndx++;
   \   0000010C   0x9705             STR      R7,[SP, #+20]
   \   0000010E   0x1C7F             ADDS     R7,R7,#+1
    333          		remap.remapSize = APP_CODE_SRAM_BLOCK2_SIZE;
   \   00000110   0xF45F 0x3080      MOVS     R0,#+65536
   \   00000114   0x9008             STR      R0,[SP, #+32]
    334          		remap.sramAddr = APP_CODE_SRAM_BLOCK2_ADDR;
   \   00000116   0x....             LDR.N    R0,??DataTable2_15  ;; 0x20080000
   \   00000118   0x9007             STR      R0,[SP, #+28]
    335          		GsnFlashCache_BlkRemapSet(&remap);
   \   0000011A   0xA805             ADD      R0,SP,#+20
   \   0000011C   0x.... 0x....      BL       GsnFlashCache_BlkRemapSet
    336          	}
    337          
    338          	
    339          	/* Set uninitialised data section to zero*/
    340          	memset((void *)bssStart, 0, ((UINT32)bssEnd- (UINT32)bssStart));
   \                     ??GsnStartup_Main_1:
   \   00000120   0x9802             LDR      R0,[SP, #+8]
   \   00000122   0x1A22             SUBS     R2,R4,R0
   \   00000124   0x2100             MOVS     R1,#+0
   \   00000126   0x9802             LDR      R0,[SP, #+8]
   \   00000128   0x.... 0x....      BL       memset
    341          
    342          	/* Calculate the heap */
    343          	heap[0].start = (((UINT32)freeMemStart & ~3 ) + 8 );
   \   0000012C   0x08B0             LSRS     R0,R6,#+2
   \   0000012E   0x0080             LSLS     R0,R0,#+2
   \   00000130   0x3008             ADDS     R0,R0,#+8
   \   00000132   0x9009             STR      R0,[SP, #+36]
    344          	heap[0].size = APP_CODE_SRAM_BLOCK1_ADDR - heap[0].start;
   \   00000134   0x....             LDR.N    R0,??DataTable2_14  ;; 0x20040000
   \   00000136   0x9909             LDR      R1,[SP, #+36]
   \   00000138   0x1A40             SUBS     R0,R0,R1
   \   0000013A   0x900A             STR      R0,[SP, #+40]
    345          
    346              tx_byte_pool_create(&heapBytePool[0].bPool, NULL, (void*)heap[0].start,
    347              					(UINT32)heap[0].size);
   \   0000013C   0x9B0A             LDR      R3,[SP, #+40]
   \   0000013E   0x9A09             LDR      R2,[SP, #+36]
   \   00000140   0x2100             MOVS     R1,#+0
   \   00000142   0x....             LDR.N    R0,??DataTable2_16
   \   00000144   0x.... 0x....      BL       _tx_byte_pool_create
    348          
    349              appCodeSramEnd = ( appCodeSramEnd & ~3 ) + 8;
   \   00000148   0xEA5F 0x009B      LSRS     R0,R11,#+2
   \   0000014C   0x0080             LSLS     R0,R0,#+2
   \   0000014E   0xF110 0x0B08      ADDS     R11,R0,#+8
    350          	heap[1].start  = appCodeSramEnd;
   \   00000152   0xF8CD 0xB02C      STR      R11,[SP, #+44]
    351          	heap[1].size  = SRAM_END_ADDR - heap[1].start;
   \   00000156   0x....             LDR.N    R0,??DataTable2_17  ;; 0x2007ffff
   \   00000158   0x990B             LDR      R1,[SP, #+44]
   \   0000015A   0x1A40             SUBS     R0,R0,R1
   \   0000015C   0x900C             STR      R0,[SP, #+48]
    352              tx_byte_pool_create(&heapBytePool[1].bPool, NULL, (void*)heap[1].start,
    353          						(UINT32)heap[1].size);
   \   0000015E   0x9B0C             LDR      R3,[SP, #+48]
   \   00000160   0x9A0B             LDR      R2,[SP, #+44]
   \   00000162   0x2100             MOVS     R1,#+0
   \   00000164   0x....             LDR.N    R0,??DataTable2_18
   \   00000166   0x.... 0x....      BL       _tx_byte_pool_create
    354          
    355              pGsnBytePoolHead =  ( heap[1].size >= heap[0].size) ?
    356                &heapBytePool[1] : &heapBytePool[0];
   \   0000016A   0x980C             LDR      R0,[SP, #+48]
   \   0000016C   0x990A             LDR      R1,[SP, #+40]
   \   0000016E   0x4288             CMP      R0,R1
   \   00000170   0xD303             BCC.N    ??GsnStartup_Main_3
   \   00000172   0x....             LDR.N    R0,??DataTable2_19
   \   00000174   0x....             LDR.N    R1,??DataTable2_20
   \   00000176   0x6001             STR      R1,[R0, #+0]
   \   00000178   0xE002             B.N      ??GsnStartup_Main_4
   \                     ??GsnStartup_Main_3:
   \   0000017A   0x....             LDR.N    R0,??DataTable2_19
   \   0000017C   0x....             LDR.N    R1,??DataTable2_21
   \   0000017E   0x6001             STR      R1,[R0, #+0]
    357              pGsnBytePoolHead->pNext = ( heap[1].size >= heap[0].size) ?
    358                &heapBytePool[0] : &heapBytePool[1];
   \                     ??GsnStartup_Main_4:
   \   00000180   0x980C             LDR      R0,[SP, #+48]
   \   00000182   0x990A             LDR      R1,[SP, #+40]
   \   00000184   0x4288             CMP      R0,R1
   \   00000186   0xD301             BCC.N    ??GsnStartup_Main_5
   \   00000188   0x....             LDR.N    R0,??DataTable2_21
   \   0000018A   0xE000             B.N      ??GsnStartup_Main_6
   \                     ??GsnStartup_Main_5:
   \   0000018C   0x....             LDR.N    R0,??DataTable2_20
   \                     ??GsnStartup_Main_6:
   \   0000018E   0x....             LDR.N    R1,??DataTable2_19
   \   00000190   0x6809             LDR      R1,[R1, #+0]
   \   00000192   0x6008             STR      R0,[R1, #+0]
    359          
    360          	/* 3 blocks of 64K SRAM is released to wlan - Temporary*/
    361          	*((volatile UINT32 *)(0x40080008)) = (UINT32)0x1c;
   \   00000194   0x....             LDR.N    R0,??DataTable2_22  ;; 0x40080008
   \   00000196   0x211C             MOVS     R1,#+28
   \   00000198   0x6001             STR      R1,[R0, #+0]
    362          
    363          	/* Call APP MAIN */
    364              App_Main();
   \   0000019A   0x.... 0x....      BL       App_Main
    365              /* This is the idle loop */
    366              App_IdleHandler();
   \   0000019E   0x.... 0x....      BL       App_IdleHandler
    367          }
   \   000001A2   0xB011             ADD      SP,SP,#+68
   \   000001A4   0xE8BD 0x8FF0      POP      {R4-R11,PC}      ;; return
    368          

   \                                 In section .text, align 2, keep-with-next
    369          unsigned int GsnStartup_ClosestPowerOf2( unsigned int value )
    370          {
    371              unsigned int ret = 1;
   \                     GsnStartup_ClosestPowerOf2:
   \   00000000   0x2101             MOVS     R1,#+1
   \   00000002   0xE000             B.N      ??GsnStartup_ClosestPowerOf2_0
    372              while( ret < 0x80000000 )
    373              {
    374                  if( value < ret )break;
    375                  ret <<= 1;
   \                     ??GsnStartup_ClosestPowerOf2_1:
   \   00000004   0x0049             LSLS     R1,R1,#+1
   \                     ??GsnStartup_ClosestPowerOf2_0:
   \   00000006   0xF111 0x4F00      CMN      R1,#-2147483648
   \   0000000A   0xD201             BCS.N    ??GsnStartup_ClosestPowerOf2_2
   \   0000000C   0x4288             CMP      R0,R1
   \   0000000E   0xD2F9             BCS.N    ??GsnStartup_ClosestPowerOf2_1
    376              }
    377              return ret;
   \                     ??GsnStartup_ClosestPowerOf2_2:
   \   00000010   0x0008             MOVS     R0,R1
   \   00000012   0x4770             BX       LR               ;; return
    378          }

   \                                 In section .text, align 2, keep-with-next
    379          PUBLIC UINT
    380          App_FlashIfDmaCtlSet(UINT32 dmaReadCtlWord, UINT32 dmaCmd, BOOL blocking)
    381          {
    382          	GSN_STATUS_T status = GSN_SUCCESS;
   \                     App_FlashIfDmaCtlSet:
   \   00000000   0x2200             MOVS     R2,#+0
    383          
    384          	/* setup dma control word register */
    385              FLASHIF_DMACTL_SET(FLASHIF, dmaReadCtlWord);
   \   00000002   0x....             LDR.N    R3,??DataTable2_23  ;; 0x400e0008
   \   00000004   0x6018             STR      R0,[R3, #+0]
    386              /* setup dma command */
    387              FLASHIF_DMACMD_SET(FLASHIF, dmaCmd);
   \   00000006   0x....             LDR.N    R0,??DataTable2_24  ;; 0x400e000c
   \   00000008   0x6001             STR      R1,[R0, #+0]
    388              return status;
   \   0000000A   0x0010             MOVS     R0,R2
   \   0000000C   0x4770             BX       LR               ;; return
    389          }
    390          

   \                                 In section .text, align 2, keep-with-next
    391          BOOL
    392          App_FlashIfFlashCheckAndConfigure()
    393          {
   \                     App_FlashIfFlashCheckAndConfigure:
   \   00000000   0xB5F8             PUSH     {R3-R7,LR}
    394              UINT32 flashId = 0, mfgId;
   \   00000002   0x2400             MOVS     R4,#+0
    395              BOOL flashExists;
    396          
    397              /* request PIO control */
    398              GsnFlashIf_PioReq();
   \   00000004   0x.... 0x....      BL       GsnFlashIf_PioReq
    399          
    400              /* reset flash HPM mode */
    401              GsnFlashIf_HpmReset();
   \   00000008   0x.... 0x....      BL       GsnFlashIf_HpmReset
    402              GsnFlashIf_HpmReset();
   \   0000000C   0x.... 0x....      BL       GsnFlashIf_HpmReset
    403          
    404              flashId = GsnFlashIf_FlashIdRead() & 0xFFFF;
   \   00000010   0x.... 0x....      BL       GsnFlashIf_FlashIdRead
   \   00000014   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   00000016   0x0004             MOVS     R4,R0
    405              if (flashId == 0x0000)
   \   00000018   0x2C00             CMP      R4,#+0
   \   0000001A   0xD101             BNE.N    ??App_FlashIfFlashCheckAndConfigure_0
    406              {
    407                  flashExists = FALSE;
   \   0000001C   0x2500             MOVS     R5,#+0
    408                  goto GsnFlashIfStartup_FlashCheckAndConfigure_Exit;
   \   0000001E   0xE056             B.N      ??App_FlashIfFlashCheckAndConfigure_1
    409              }
    410          
    411              flashExists = TRUE;
   \                     ??App_FlashIfFlashCheckAndConfigure_0:
   \   00000020   0x2501             MOVS     R5,#+1
    412          
    413              /* Release flash from deep power down mode */
    414              GsnFlashIf_DeepPowerDownRelease();
   \   00000022   0x.... 0x....      BL       GsnFlashIf_DeepPowerDownRelease
    415          
    416              /* enable quad mode for known flash devices */
    417              if (
    418                      (flashId == 0xba20) /* micron */
    419                  ||  (flashId == 0x20c2) /* macronix mx25l3235e(4MB) 3.3v */
    420                  ||  (flashId == 0x24c2) /* macronix mx25l1633e(2MB) 3.3v */
    421                  ||  (flashId == 0x25c2) /* macronix mx25u3235f(4MB), mx25u1635e(2MB) 1.8v */
    422                  ||  (flashId == 0x60c8) /* gigadevice gd25lq32(4MB), gd25lq16(2MB) 1.8v */
    423                  ||  (flashId == 0x40c8) /* gigadevice gd25q16b(2MB), gd25q32b(4MB) 3.3v */
    424                  ||  (flashId == 0x151c) /* eon en25qh16(2MB) 3.3v */
    425                  ||  (flashId == 0x301c) /* eon en25qh32(2MB) 3.3v */
    426                 )
   \   00000026   0xF64B 0x2020      MOVW     R0,#+47648
   \   0000002A   0x4284             CMP      R4,R0
   \   0000002C   0xD01B             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   0000002E   0xF242 0x00C2      MOVW     R0,#+8386
   \   00000032   0x4284             CMP      R4,R0
   \   00000034   0xD017             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   00000036   0xF242 0x40C2      MOVW     R0,#+9410
   \   0000003A   0x4284             CMP      R4,R0
   \   0000003C   0xD013             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   0000003E   0xF242 0x50C2      MOVW     R0,#+9666
   \   00000042   0x4284             CMP      R4,R0
   \   00000044   0xD00F             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   00000046   0xF246 0x00C8      MOVW     R0,#+24776
   \   0000004A   0x4284             CMP      R4,R0
   \   0000004C   0xD00B             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   0000004E   0xF244 0x00C8      MOVW     R0,#+16584
   \   00000052   0x4284             CMP      R4,R0
   \   00000054   0xD007             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   00000056   0xF241 0x501C      MOVW     R0,#+5404
   \   0000005A   0x4284             CMP      R4,R0
   \   0000005C   0xD003             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_2
   \   0000005E   0xF243 0x001C      MOVW     R0,#+12316
   \   00000062   0x4284             CMP      R4,R0
   \   00000064   0xD131             BNE.N    ??App_FlashIfFlashCheckAndConfigure_3
    427              {
    428                  mfgId = flashId & 0xff;
   \                     ??App_FlashIfFlashCheckAndConfigure_2:
   \   00000066   0xB2E6             UXTB     R6,R4            ;; ZeroExt  R6,R4,#+24,#+24
    429          
    430                  if ((mfgId == 0xc2) || (mfgId == 0xc8) || (mfgId == 0x1c))
   \   00000068   0x2EC2             CMP      R6,#+194
   \   0000006A   0xD003             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_4
   \   0000006C   0x2EC8             CMP      R6,#+200
   \   0000006E   0xD001             BEQ.N    ??App_FlashIfFlashCheckAndConfigure_4
   \   00000070   0x2E1C             CMP      R6,#+28
   \   00000072   0xD11C             BNE.N    ??App_FlashIfFlashCheckAndConfigure_5
    431                  {
    432                      /* switch to quad mode */
    433                      App_FlashIfDmaCtlSet(GSN_FLASHIF_DMA_QUADREAD_CTL_WORD_6DUMMYCYCLES,
    434                                          GSN_FLASHIF_FLASH_QUADIO_FAST_READ, TRUE);
   \                     ??App_FlashIfFlashCheckAndConfigure_4:
   \   00000074   0x2201             MOVS     R2,#+1
   \   00000076   0x21EB             MOVS     R1,#+235
   \   00000078   0x....             LDR.N    R0,??DataTable2_25  ;; 0x6a89a
   \   0000007A   0x.... 0x....      BL       App_FlashIfDmaCtlSet
    435          
    436                      /* For macronix, enable quad mode in status register */
    437                      if (mfgId == 0xc2)
   \   0000007E   0x2EC2             CMP      R6,#+194
   \   00000080   0xD109             BNE.N    ??App_FlashIfFlashCheckAndConfigure_6
    438                      {
    439                          UINT32 statusReg = 0;
   \   00000082   0x2700             MOVS     R7,#+0
    440                          statusReg = GsnFlashIf_FlashStatusRead();
   \   00000084   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   00000088   0x0007             MOVS     R7,R0
    441                          statusReg |= 0x40;
   \   0000008A   0xF057 0x0740      ORRS     R7,R7,#0x40
    442                          GsnFlashIf_FlashStatusWrite(statusReg, 1);
   \   0000008E   0x2101             MOVS     R1,#+1
   \   00000090   0x0038             MOVS     R0,R7
   \   00000092   0x.... 0x....      BL       GsnFlashIf_FlashStatusWrite
    443                      }
    444          
    445                      /* For gigadevice, enable quad mode in status register */
    446                      if (mfgId == 0xc8)
   \                     ??App_FlashIfFlashCheckAndConfigure_6:
   \   00000096   0x2EC8             CMP      R6,#+200
   \   00000098   0xD109             BNE.N    ??App_FlashIfFlashCheckAndConfigure_5
    447                      {
    448                          UINT32 statusReg = 0;
   \   0000009A   0x2600             MOVS     R6,#+0
    449                          statusReg = GsnFlashIf_FlashStatusRead();
   \   0000009C   0x.... 0x....      BL       GsnFlashIf_FlashStatusRead
   \   000000A0   0x0006             MOVS     R6,R0
    450                          statusReg |= 0x200;
   \   000000A2   0xF456 0x7600      ORRS     R6,R6,#0x200
    451                          GsnFlashIf_FlashStatusWrite(statusReg, 2);
   \   000000A6   0x2102             MOVS     R1,#+2
   \   000000A8   0x0030             MOVS     R0,R6
   \   000000AA   0x.... 0x....      BL       GsnFlashIf_FlashStatusWrite
    452                      }
    453                  }
    454          
    455                  if (flashId == 0xba20) /* micron also needs this for quad setting */
   \                     ??App_FlashIfFlashCheckAndConfigure_5:
   \   000000AE   0xF64B 0x2020      MOVW     R0,#+47648
   \   000000B2   0x4284             CMP      R4,R0
   \   000000B4   0xD109             BNE.N    ??App_FlashIfFlashCheckAndConfigure_3
    456                  {
    457                      /* switch to quad mode */
    458                      App_FlashIfDmaCtlSet(GSN_FLASHIF_DMA_QUADREAD_CTL_WORD,
    459                                              GSN_FLASHIF_FLASH_QUADIO_FAST_READ, TRUE);
   \   000000B6   0x2201             MOVS     R2,#+1
   \   000000B8   0x21EB             MOVS     R1,#+235
   \   000000BA   0x....             LDR.N    R0,??DataTable2_26  ;; 0xaa89a
   \   000000BC   0x.... 0x....      BL       App_FlashIfDmaCtlSet
    460                      /* required for quad mode read/dma */
    461                      /* write dummy cycles in volatile config: XIP=1, WRAP=Disable */
    462                      GsnFlashIf_FlashRegWrite(GSN_FLASHIF_FLASH_VOLCFG, 0xAB,TRUE);
   \   000000C0   0x2201             MOVS     R2,#+1
   \   000000C2   0x21AB             MOVS     R1,#+171
   \   000000C4   0x2081             MOVS     R0,#+129
   \   000000C6   0x.... 0x....      BL       GsnFlashIf_FlashRegWrite
    463                  }
    464              }
    465          
    466              /* release PIO control */
    467              GsnFlashIf_PioRelease();
   \                     ??App_FlashIfFlashCheckAndConfigure_3:
   \   000000CA   0x.... 0x....      BL       GsnFlashIf_PioRelease
    468          
    469          GsnFlashIfStartup_FlashCheckAndConfigure_Exit:
    470              return flashExists;
   \                     ??App_FlashIfFlashCheckAndConfigure_1:
   \   000000CE   0x0028             MOVS     R0,R5
   \   000000D0   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000D2   0xBDF2             POP      {R1,R4-R7,PC}    ;; return
    471          }

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2:
   \   00000000   0x........         DC32     SFB(ROM_PATCH_AUTO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_1:
   \   00000000   0x........         DC32     SFE(ROM_PATCH_AUTO)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_2:
   \   00000000   0x........         DC32     SFB(ROM_PATCH_FPT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_3:
   \   00000000   0x........         DC32     SFE(ROM_PATCH_FPT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_4:
   \   00000000   0x........         DC32     SFB(BSS_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_5:
   \   00000000   0x........         DC32     SFE(BSS_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_6:
   \   00000000   0x........         DC32     SFB(DATA_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_7:
   \   00000000   0x........         DC32     SFB(APP_CODE_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_8:
   \   00000000   0x........         DC32     SFE(APP_CODE_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_9:
   \   00000000   0x........         DC32     SFB(DATA_INIT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_10:
   \   00000000   0x........         DC32     SFE(DATA_INIT_SECTION)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_11:
   \   00000000   0x........         DC32     SFB(FREE_MEM)

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_12:
   \   00000000   0x........         DC32     romFwImageFlashAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_13:
   \   00000000   0x20004000         DC32     0x20004000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_14:
   \   00000000   0x20040000         DC32     0x20040000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_15:
   \   00000000   0x20080000         DC32     0x20080000

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_16:
   \   00000000   0x........         DC32     heapBytePool+0x4

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_17:
   \   00000000   0x2007FFFF         DC32     0x2007ffff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_18:
   \   00000000   0x........         DC32     heapBytePool+0x3C

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_19:
   \   00000000   0x........         DC32     pGsnBytePoolHead

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_20:
   \   00000000   0x........         DC32     heapBytePool+0x38

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_21:
   \   00000000   0x........         DC32     heapBytePool

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_22:
   \   00000000   0x40080008         DC32     0x40080008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_23:
   \   00000000   0x400E0008         DC32     0x400e0008

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_24:
   \   00000000   0x400E000C         DC32     0x400e000c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_25:
   \   00000000   0x0006A89A         DC32     0x6a89a

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable2_26:
   \   00000000   0x000AA89A         DC32     0xaa89a

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \   00000018   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
    472          #endif/*NO_FLASH_FETCH*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   App_FlashIfDmaCtlSet
      24   App_FlashIfFlashCheckAndConfigure
        24   -> App_FlashIfDmaCtlSet
        24   -> GsnFlashIf_DeepPowerDownRelease
        24   -> GsnFlashIf_FlashIdRead
        24   -> GsnFlashIf_FlashRegWrite
        24   -> GsnFlashIf_FlashStatusRead
        24   -> GsnFlashIf_FlashStatusWrite
        24   -> GsnFlashIf_HpmReset
        24   -> GsnFlashIf_PioRelease
        24   -> GsnFlashIf_PioReq
       8   GsnFlashIf_DeepPowerDownRelease
         8   -> GsnFlashIf_PioTxFifoWrite
       8   GsnFlashIf_FlashIdRead
         8   -> GsnFlashIf_PioRxFifoRead
         8   -> GsnFlashIf_PioTxFifoWrite
      16   GsnFlashIf_FlashStatusRead
        16   -> GsnFlashIf_PioRxFifoRead
        16   -> GsnFlashIf_PioTxFifoWrite
      16   GsnFlashIf_FlashStatusWrite
        16   -> GsnFlashIf_FlashWelBitClrWait
        16   -> GsnFlashIf_FlashWriteEnable
        16   -> GsnFlashIf_PioTxFifoWrite
       8   GsnFlashIf_FlashWelBitClrWait
         8   -> GsnFlashIf_FlashStatusRead
       8   GsnFlashIf_FlashWelBitSetWait
         8   -> GsnFlashIf_FlashStatusRead
       8   GsnFlashIf_FlashWriteEnable
         8   -> GsnFlashIf_FlashWelBitSetWait
         8   -> GsnFlashIf_PioTxFifoWrite
       8   GsnFlashIf_HpmReset
         8   -> GsnFlashIf_PioTxFifoWrite
       0   GsnFlashIf_PioRelease
       0   GsnFlashIf_PioReq
       0   GsnFlashIf_PioRxFifoDataWait
       8   GsnFlashIf_PioRxFifoRead
         8   -> GsnFlashIf_PioRxFifoDataWait
       0   GsnFlashIf_PioTxFifoEmptyWait
       8   GsnFlashIf_PioTxFifoWrite
         8   -> GsnFlashIf_PioTxFifoEmptyWait
       0   GsnStartup_ClosestPowerOf2
     104   GsnStartup_Main
       104   -> App_IdleHandler
       104   -> App_Main
       104   -> GsnFlashCache_BlkFetch
       104   -> GsnFlashCache_BlkRemapSet
       104   -> __aeabi_memclr4
       104   -> _tx_byte_pool_create
       104   -> memset
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      32  ?<Constant {{0}}>
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_18
       4  ??DataTable2_19
       4  ??DataTable2_2
       4  ??DataTable2_20
       4  ??DataTable2_21
       4  ??DataTable2_22
       4  ??DataTable2_23
       4  ??DataTable2_24
       4  ??DataTable2_25
       4  ??DataTable2_26
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      14  App_FlashIfDmaCtlSet
     212  App_FlashIfFlashCheckAndConfigure
      22  GsnFlashIf_DeepPowerDownRelease
      26  GsnFlashIf_FlashIdRead
      48  GsnFlashIf_FlashStatusRead
      40  GsnFlashIf_FlashStatusWrite
      12  GsnFlashIf_FlashWelBitClrWait
      12  GsnFlashIf_FlashWelBitSetWait
      26  GsnFlashIf_FlashWriteEnable
      22  GsnFlashIf_HpmReset
      28  GsnFlashIf_PioRelease
      28  GsnFlashIf_PioReq
      40  GsnFlashIf_PioRxFifoDataWait
      16  GsnFlashIf_PioRxFifoRead
      40  GsnFlashIf_PioTxFifoEmptyWait
      20  GsnFlashIf_PioTxFifoWrite
      20  GsnStartup_ClosestPowerOf2
     424  GsnStartup_Main
     224  heapBytePool
      20  memset

 
   224 bytes in section .bss
    32 bytes in section .rodata
 1 178 bytes in section .text
 
 778 bytes of CODE  memory (+ 400 bytes shared)
  32 bytes of CONST memory
 224 bytes of DATA  memory

Errors: none
Warnings: 4
