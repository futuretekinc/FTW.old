###############################################################################
#                                                                             #
# IAR ANSI C/C++ Compiler V6.50.5.4819/W32 for ARM      02/Apr/2015  04:31:09 #
# Copyright 1999-2013 IAR Systems AB.                                         #
#                                                                             #
#    Cpu mode     =  thumb                                                    #
#    Endian       =  little                                                   #
#    Source file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\main\app_main_thread.c                              #
#    Command line =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \src\main\app_main_thread.c -D ADK_PROV_WPS_ENABLE -D    #
#                    GSN_FILE_UPLOAD_API -D ADK_FILE_UPLOAD_API -D            #
#                    ADK_OTAFU_ENABLE -D TX_ENABLE_IAR_LIBRARY_SUPPORT -D     #
#                    IAR -D TM_USE_HTTPD -D GSN_GSLINK -D GSN_WEB_SERVER -D   #
#                    APP_MDNS -D NX_INCLUDE_USER_DEFINE_FILE -D               #
#                    NO_ADK_PROV_GROUP_SECURE -lC                             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\ -lA F:\Development\GS2000\5.1.5\02_Ap #
#                    r_2015_04_30_38\adk\tls\build\Debug\List\                #
#                    --diag_suppress Pa050,Go005 -o                           #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\ --no_cse --no_unroll --no_inline       #
#                    --no_code_motion --no_tbaa --no_clustering               #
#                    --no_scheduling --debug --endian=little --cpu=Cortex-M3  #
#                    -e --fpu=None --dlib_config "C:\Program Files (x86)\IAR  #
#                    Systems\Embedded Workbench 6.5\arm\INC\c\DLib_Config_Ful #
#                    l.h" -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38 #
#                    \adk\tls\build\..\..\..\geps\inc\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\core\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\drivers\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\ -I                     #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\modules\http\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\rtos\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\netx\netx_bsd_layer\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\main\ -I                        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\fs\hcc\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\src\ -I                #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\hw_engine_if\ -I       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\security\wpa_if\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\geps\inc\supplicant\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ncm\inc\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\userlib\ -I                              #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\core\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\drivers\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\gsn\inc\modules\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\\rtos\tx\ -I                      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\ -I                            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\ -I                       #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\nw\netx\netx_bsd_layer\ -I        #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\main\ -I                          #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\ -I                  #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\\inc\hw_engine_if\ -I    #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\security\src\wpa_supplicant-1.0\s #
#                    rc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\system\fs\hcc\src\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\system\ -I F:\Development\GS2000\5.1.5\0 #
#                    2_Apr_2015_04_30_38\adk\tls\build\..\inc\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\ctx\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\inc\main\ -I             #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\fs_if\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\config\ -I         #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\sm\ -I F:\Development\GS2000\5.1.5\02_Apr_ #
#                    2015_04_30_38\adk\tls\build\..\inc\ncm\ -I               #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\debug\ -I F:\Development\GS2000\5.1.5\02_A #
#                    pr_2015_04_30_38\adk\tls\build\..\inc\tls\ -I            #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\rtc_mem\ -I F:\Development\GS2000\5.1.5\02 #
#                    _Apr_2015_04_30_38\adk\tls\build\..\inc\ext_app\ -I      #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\inc\wps\ -I F:\Development\GS2000\5.1.5\02_Apr #
#                    _2015_04_30_38\adk\tls\build\..\..\..\adk\provisioning\i #
#                    nc\ -I F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\ #
#                    adk\tls\build\..\..\..\adk\otafu\inc\ -I                 #
#                    F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\..\..\..\adk\cloud_connect\inc\ -Ol               #
#                    --use_c++_inline -I "C:\Program Files (x86)\IAR          #
#                    Systems\Embedded Workbench 6.5\arm\CMSIS\Include\"       #
#    List file    =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\List\app_main_thread.lst                    #
#    Object file  =  F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls #
#                    \build\Debug\Obj\app_main_thread.o                       #
#                                                                             #
#                                                                             #
###############################################################################

F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\adk\tls\src\main\app_main_thread.c
      1          /*******************************************************************************
      2          *
      3          *               COPYRIGHT (c) 2012-2013 GainSpan Corporation
      4          *                         All Rights Reserved
      5          *
      6          * The source code contained or described herein and all documents
      7          * related to the source code ("Material") are owned by GainSpan
      8          * Corporation or its licensors.  Title to the Material remains
      9          * with GainSpan Corporation or its suppliers and licensors.
     10          *
     11          * The Material is protected by worldwide copyright and trade secret
     12          * laws and treaty provisions. No part of the Material may be used,
     13          * copied, reproduced, modified, published, uploaded, posted, transmitted,
     14          * distributed, or disclosed in any way except in accordance with the
     15          * applicable license agreement.
     16          *
     17          * No license under any patent, copyright, trade secret or other
     18          * intellectual property right is granted to or conferred upon you by
     19          * disclosure or delivery of the Materials, either expressly, by
     20          * implication, inducement, estoppel, except in accordance with the
     21          * applicable license agreement.
     22          *
     23          * Unless otherwise agreed by GainSpan in writing, you may not remove or
     24          * alter this notice or any other notice embedded in Materials by GainSpan
     25          * or GainSpan's suppliers or licensors in any way.
     26          *
     27          * $RCSfile: app_main_thread.c,v $
     28          *******************************************************************************/
     29          
     30          /*****************************************************************************
     31            * File Inclusions
     32            ****************************************************************************/
     33          
     34          #include "gsn_includes.h"

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_EnableIRQ(IRQn_Type)
   \                     NVIC_EnableIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable25_3  ;; 0xe000e100
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2, keep-with-next
   \   static __interwork __softfp void NVIC_SetPendingIRQ(IRQn_Type)
   \                     NVIC_SetPendingIRQ:
   \   00000000   0xB240             SXTB     R0,R0            ;; SignExt  R0,R0,#+24,#+24
   \   00000002   0x0941             LSRS     R1,R0,#+5
   \   00000004   0x.... 0x....      LDR.W    R2,??DataTable25_4  ;; 0xe000e200
   \   00000008   0x2301             MOVS     R3,#+1
   \   0000000A   0xF010 0x001F      ANDS     R0,R0,#0x1F
   \   0000000E   0xFA13 0xF000      LSLS     R0,R3,R0
   \   00000012   0xF842 0x0021      STR      R0,[R2, R1, LSL #+2]
   \   00000016   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memcpy(void *, void const *, size_t)
   \                     memcpy:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0020             MOVS     R0,R4
   \   00000006   0x.... 0x....      BL       __aeabi_memcpy
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __intrinsic __nounwind __interwork __softfp void *memset(void *, int, size_t)
   \                     memset:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x0010             MOVS     R0,R2
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x0001             MOVS     R1,R0
   \   0000000A   0x0020             MOVS     R0,R4
   \   0000000C   0x.... 0x....      BL       __aeabi_memset
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0xBD10             POP      {R4,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_ThreadCreate(void (*)(UINT32), void *, TX_THREAD *, unsigned char const *, UINT8, unsigned char *, UINT32, GSN_OSAL_THREAD_INITIAL_STATE_T)
   \                     GsnOsal_ThreadCreate:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0010             MOVS     R0,R2
   \   00000008   0x001D             MOVS     R5,R3
   \   0000000A   0x9E0D             LDR      R6,[SP, #+52]
   \   0000000C   0x9F0E             LDR      R7,[SP, #+56]
   \   0000000E   0x9A0F             LDR      R2,[SP, #+60]
   \   00000010   0x9B0C             LDR      R3,[SP, #+48]
   \   00000012   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000014   0x9205             STR      R2,[SP, #+20]
   \   00000016   0x2200             MOVS     R2,#+0
   \   00000018   0x9204             STR      R2,[SP, #+16]
   \   0000001A   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   0000001C   0x9303             STR      R3,[SP, #+12]
   \   0000001E   0xB2DB             UXTB     R3,R3            ;; ZeroExt  R3,R3,#+24,#+24
   \   00000020   0x9302             STR      R3,[SP, #+8]
   \   00000022   0x9701             STR      R7,[SP, #+4]
   \   00000024   0x9600             STR      R6,[SP, #+0]
   \   00000026   0x000B             MOVS     R3,R1
   \   00000028   0x0022             MOVS     R2,R4
   \   0000002A   0x0029             MOVS     R1,R5
   \   0000002C   0x.... 0x....      BL       _tx_thread_create
   \   00000030   0x2800             CMP      R0,#+0
   \   00000032   0xD101             BNE.N    ??GsnOsal_ThreadCreate_0
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0xE003             B.N      ??GsnOsal_ThreadCreate_1
   \                     ??GsnOsal_ThreadCreate_0:
   \   00000038   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000003C   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_ThreadCreate_1:
   \   00000040   0xB007             ADD      SP,SP,#+28
   \   00000042   0xBDF0             POP      {R4-R7,PC}       ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemCreate(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemCreate:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x000A             MOVS     R2,R1
   \   00000004   0x2100             MOVS     R1,#+0
   \   00000006   0x.... 0x....      BL       _tx_semaphore_create
   \   0000000A   0x2800             CMP      R0,#+0
   \   0000000C   0xD101             BNE.N    ??GsnOsal_SemCreate_0
   \   0000000E   0x2000             MOVS     R0,#+0
   \   00000010   0xE003             B.N      ??GsnOsal_SemCreate_1
   \                     ??GsnOsal_SemCreate_0:
   \   00000012   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000016   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_SemCreate_1:
   \   0000001A   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemDelete(TX_SEMAPHORE *)
   \                     GsnOsal_SemDelete:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_delete
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??GsnOsal_SemDelete_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE003             B.N      ??GsnOsal_SemDelete_1
   \                     ??GsnOsal_SemDelete_0:
   \   0000000E   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000012   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_SemDelete_1:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemAcquire(TX_SEMAPHORE *, UINT32)
   \                     GsnOsal_SemAcquire:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_get
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??GsnOsal_SemAcquire_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE003             B.N      ??GsnOsal_SemAcquire_1
   \                     ??GsnOsal_SemAcquire_0:
   \   0000000E   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000012   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_SemAcquire_1:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_SemRelease(TX_SEMAPHORE *)
   \                     GsnOsal_SemRelease:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_semaphore_put
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??GsnOsal_SemRelease_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE003             B.N      ??GsnOsal_SemRelease_1
   \                     ??GsnOsal_SemRelease_0:
   \   0000000E   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000012   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_SemRelease_1:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp UINT32 GsnOsal_QueueMsgSizeInWords(UINT32)
   \                     GsnOsal_QueueMsgSizeInWords:
   \   00000000   0xF010 0x0F03      TST      R0,#0x3
   \   00000004   0xD002             BEQ.N    ??GsnOsal_QueueMsgSizeInWords_0
   \   00000006   0x0880             LSRS     R0,R0,#+2
   \   00000008   0x1C40             ADDS     R0,R0,#+1
   \   0000000A   0xE000             B.N      ??GsnOsal_QueueMsgSizeInWords_1
   \                     ??GsnOsal_QueueMsgSizeInWords_0:
   \   0000000C   0x0880             LSRS     R0,R0,#+2
   \                     ??GsnOsal_QueueMsgSizeInWords_1:
   \   0000000E   0x2803             CMP      R0,#+3
   \   00000010   0xD30F             BCC.N    ??GsnOsal_QueueMsgSizeInWords_2
   \                     ??GsnOsal_QueueMsgSizeInWords_3:
   \   00000012   0x2805             CMP      R0,#+5
   \   00000014   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_4
   \   00000016   0x2004             MOVS     R0,#+4
   \   00000018   0xE00B             B.N      ??GsnOsal_QueueMsgSizeInWords_2
   \                     ??GsnOsal_QueueMsgSizeInWords_4:
   \   0000001A   0x1F41             SUBS     R1,R0,#+5
   \   0000001C   0x2904             CMP      R1,#+4
   \   0000001E   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_5
   \   00000020   0x2008             MOVS     R0,#+8
   \   00000022   0xE006             B.N      ??GsnOsal_QueueMsgSizeInWords_2
   \                     ??GsnOsal_QueueMsgSizeInWords_5:
   \   00000024   0x3809             SUBS     R0,R0,#+9
   \   00000026   0x2808             CMP      R0,#+8
   \   00000028   0xD201             BCS.N    ??GsnOsal_QueueMsgSizeInWords_6
   \   0000002A   0x2010             MOVS     R0,#+16
   \   0000002C   0xE001             B.N      ??GsnOsal_QueueMsgSizeInWords_2
   \                     ??GsnOsal_QueueMsgSizeInWords_6:
   \   0000002E   0xF05F 0x30FF      MOVS     R0,#-1
   \                     ??GsnOsal_QueueMsgSizeInWords_2:
   \   00000032   0x4770             BX       LR               ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueueCreate(TX_QUEUE *, UINT32, unsigned char *, UINT32)
   \                     GsnOsal_QueueCreate:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x9300             STR      R3,[SP, #+0]
   \   00000004   0x0013             MOVS     R3,R2
   \   00000006   0x000A             MOVS     R2,R1
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      BL       _tx_queue_create
   \   0000000E   0x2800             CMP      R0,#+0
   \   00000010   0xD101             BNE.N    ??GsnOsal_QueueCreate_0
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0xE003             B.N      ??GsnOsal_QueueCreate_1
   \                     ??GsnOsal_QueueCreate_0:
   \   00000016   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   0000001A   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_QueueCreate_1:
   \   0000001E   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueuePut(TX_QUEUE *, unsigned char *)
   \                     GsnOsal_QueuePut:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x2200             MOVS     R2,#+0
   \   00000004   0x.... 0x....      BL       _tx_queue_send
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD101             BNE.N    ??GsnOsal_QueuePut_0
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0xE003             B.N      ??GsnOsal_QueuePut_1
   \                     ??GsnOsal_QueuePut_0:
   \   00000010   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000014   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_QueuePut_1:
   \   00000018   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 2
   \   __interwork __softfp GSN_STATUS_T GsnOsal_QueueGet(TX_QUEUE *, unsigned char *, UINT32)
   \                     GsnOsal_QueueGet:
   \   00000000   0xB580             PUSH     {R7,LR}
   \   00000002   0x.... 0x....      BL       _tx_queue_receive
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD101             BNE.N    ??GsnOsal_QueueGet_0
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0xE003             B.N      ??GsnOsal_QueueGet_1
   \                     ??GsnOsal_QueueGet_0:
   \   0000000E   0xF100 0x4010      ADD      R0,R0,#-1879048192
   \   00000012   0xF510 0x7080      ADDS     R0,R0,#+256
   \                     ??GsnOsal_QueueGet_1:
   \   00000016   0xBD02             POP      {R1,PC}          ;; return

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnIoMux_Sel(UINT32, UINT32)
   \                     GsnIoMux_Sel:
   \   00000000   0x4A01             LDR.N    R2,??GsnIoMux_Sel_0  ;; 0x40160000
   \   00000002   0xF842 0x1020      STR      R1,[R2, R0, LSL #+2]
   \   00000006   0x4770             BX       LR               ;; return
   \                     ??GsnIoMux_Sel_0:
   \   00000008   0x40160000         DC32     0x40160000

   \                                 In section .text, align 4
   \   __interwork __softfp UINT32 GSN_BOOT_REASON_GET(void)
   \                     GSN_BOOT_REASON_GET:
   \   00000000   0x4801             LDR.N    R0,??GSN_BOOT_REASON_GET_0  ;; 0x41010000
   \   00000002   0x6840             LDR      R0,[R0, #+4]
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??GSN_BOOT_REASON_GET_0:
   \   00000008   0x41010000         DC32     0x41010000

   \                                 In section .text, align 4
   \   __interwork __softfp UINT32 GSN_BOOT_INFO_GET(void)
   \                     GSN_BOOT_INFO_GET:
   \   00000000   0x4801             LDR.N    R0,??GSN_BOOT_INFO_GET_0  ;; 0x41010000
   \   00000002   0x6880             LDR      R0,[R0, #+8]
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??GSN_BOOT_INFO_GET_0:
   \   00000008   0x41010000         DC32     0x41010000

   \                                 In section .text, align 4
   \   __interwork __softfp UINT32 GSN_SYS_RESET_INFO_LOCATION_GET(void)
   \                     GSN_SYS_RESET_INFO_LOCATION_GET:
   \   00000000   0x4801             LDR.N    R0,??GSN_SYS_RESET_INFO_LOCATION_GET_0  ;; 0x41010000
   \   00000002   0x6900             LDR      R0,[R0, #+16]
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??GSN_SYS_RESET_INFO_LOCATION_GET_0:
   \   00000008   0x41010000         DC32     0x41010000

   \                                 In section .text, align 4
   \   __interwork __softfp unsigned long long *GSN_SYS_TIME_OFFSET_LOC_GET()
   \                     GSN_SYS_TIME_OFFSET_LOC_GET:
   \   00000000   0x4801             LDR.N    R0,??GSN_SYS_TIME_OFFSET_LOC_GET_0  ;; 0x41010000
   \   00000002   0x3020             ADDS     R0,R0,#+32
   \   00000004   0x4770             BX       LR               ;; return
   \   00000006   0xBF00             Nop      
   \                     ??GSN_SYS_TIME_OFFSET_LOC_GET_0:
   \   00000008   0x41010000         DC32     0x41010000

   \                                 In section .text, align 4
   \   __interwork __softfp void GsnRtc_ClkSrcSel(GSN_RTC_CLK_SRC_T)
   \                     GsnRtc_ClkSrcSel:
   \   00000000   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000002   0x2801             CMP      R0,#+1
   \   00000004   0xD10C             BNE.N    ??GsnRtc_ClkSrcSel_0
   \   00000006   0x490E             LDR.N    R1,??GsnRtc_ClkSrcSel_1  ;; 0x4100005c
   \   00000008   0x6809             LDR      R1,[R1, #+0]
   \   0000000A   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   0000000E   0x4A0C             LDR.N    R2,??GsnRtc_ClkSrcSel_1  ;; 0x4100005c
   \   00000010   0x6011             STR      R1,[R2, #+0]
   \   00000012   0x490C             LDR.N    R1,??GsnRtc_ClkSrcSel_1+0x4  ;; 0x41000060
   \   00000014   0x6809             LDR      R1,[R1, #+0]
   \   00000016   0xF051 0x0102      ORRS     R1,R1,#0x2
   \   0000001A   0x4A0A             LDR.N    R2,??GsnRtc_ClkSrcSel_1+0x4  ;; 0x41000060
   \   0000001C   0x6011             STR      R1,[R2, #+0]
   \   0000001E   0xE00B             B.N      ??GsnRtc_ClkSrcSel_2
   \                     ??GsnRtc_ClkSrcSel_0:
   \   00000020   0x4907             LDR.N    R1,??GsnRtc_ClkSrcSel_1  ;; 0x4100005c
   \   00000022   0x6809             LDR      R1,[R1, #+0]
   \   00000024   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000028   0x4A05             LDR.N    R2,??GsnRtc_ClkSrcSel_1  ;; 0x4100005c
   \   0000002A   0x6011             STR      R1,[R2, #+0]
   \   0000002C   0x4905             LDR.N    R1,??GsnRtc_ClkSrcSel_1+0x4  ;; 0x41000060
   \   0000002E   0x6809             LDR      R1,[R1, #+0]
   \   00000030   0xF051 0x0101      ORRS     R1,R1,#0x1
   \   00000034   0x4A03             LDR.N    R2,??GsnRtc_ClkSrcSel_1+0x4  ;; 0x41000060
   \   00000036   0x6011             STR      R1,[R2, #+0]
   \                     ??GsnRtc_ClkSrcSel_2:
   \   00000038   0x4903             LDR.N    R1,??GsnRtc_ClkSrcSel_1+0x8  ;; 0x41000058
   \   0000003A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000003C   0x6008             STR      R0,[R1, #+0]
   \   0000003E   0x4770             BX       LR               ;; return
   \                     ??GsnRtc_ClkSrcSel_1:
   \   00000040   0x4100005C         DC32     0x4100005c
   \   00000044   0x41000060         DC32     0x41000060
   \   00000048   0x41000058         DC32     0x41000058

  		 void *ctx, struct wpa_sm *sm);
  		                   ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",52  Warning[Pe231]: 
          declaration is not visible outside of function

  struct rsn_pmksa_cache_entry * pmksa_cache_get_current(struct wpa_sm *sm);
                                                                ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",60  Warning[Pe231]: 
          declaration is not visible outside of function

  void pmksa_cache_clear_current(struct wpa_sm *sm);
                                        ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",61  Warning[Pe231]: 
          declaration is not visible outside of function

  int pmksa_cache_set_current(struct wpa_sm *sm, const u8 *pmkid,
                                     ^
"F:\Development\GS2000\5.1.5\02_Apr_2015_04_30_38\geps\inc\supplicant\rsn_supp\pmksa_cache.h",62  Warning[Pe231]: 
          declaration is not visible outside of function
     35          #include "gsn_includes.h"
     36          #include "config/app_cfg.h"

   \                                 In section .text, align 4
   \   __interwork __softfp char const *AppConfig_GetAppNameAndVersion()
   \                     AppConfig_GetAppNameAndVersion:
   \   00000000   0x4800             LDR.N    R0,??AppConfig_GetAppNameAndVersion_0
   \   00000002   0x4770             BX       LR               ;; return
   \                     ??AppConfig_GetAppNameAndVersion_0:
   \   00000004   0x........         DC32     `?<Constant "TLS_GS2K-5.1.5.1">`
     37          #include "fs_if/app_fsIf.h"
     38          #include "gsn_ncm.h"
     39          #include "battery/app_batt_chk.h"
     40          #include "app_main_ctx.h"
     41          #include "app_sm.h"
     42          #include "app_ncm.h"
     43          #include "app_resource_config.h"
     44          #include "app_events.h"
     45          #include "app_debug.h"
     46          #include "app_rtc_mem.h"

   \                                 In section .text, align 4
   \   __interwork __softfp struct APP_RTC_LATCH_MEM_INFO *App_RtcLatchMemInfoPtrGet()
   \                     App_RtcLatchMemInfoPtrGet:
   \   00000000   0x4800             LDR.N    R0,??App_RtcLatchMemInfoPtrGet_0  ;; 0x41010058
   \   00000002   0x4770             BX       LR               ;; return
   \                     ??App_RtcLatchMemInfoPtrGet_0:
   \   00000004   0x41010058         DC32     0x41010058

   \                                 In section .text, align 4
   \   __interwork __softfp struct APP_RTC_SECNDRY_MEM_INFO *App_RtcSecMemInfoPtrGet()
   \                     App_RtcSecMemInfoPtrGet:
   \   00000000   0x4800             LDR.N    R0,??App_RtcSecMemInfoPtrGet_0  ;; 0x41100000
   \   00000002   0x4770             BX       LR               ;; return
   \                     ??App_RtcSecMemInfoPtrGet_0:
   \   00000004   0x41100000         DC32     0x41100000
     47          #include "gsn_httpd_config.h"
     48          #include "app_fsIf.h"
     49          #include "app_default_cfg.h"
     50          #include "app_ext_flash.h"
     51          #include "app_wps.h"
     52          /*****************************************************************************
     53           *Private definitions
     54           ****************************************************************************/
     55          #define APP_DEV_INDX_0	        0
     56          #define GPIO_10_WPS_10  	    10
     57          #define GPIO_20_CLK_HS_RC_20  	20
     58          #define GPIO_21_CLK_RTC_21  	21
     59          
     60          /*****************************************************************************
     61           *Private variables
     62           ****************************************************************************/
     63          /*App main context*/

   \                                 In section .bss, align 8
     64          APP_MAIN_CTX_T appCtx;
   \                     appCtx:
   \   00000000                      DS8 30688
     65          

   \                                 In section .bss, align 4
     66          APP_MAIN_CTX_T *globalAppCtxPtr;
   \                     globalAppCtxPtr:
   \   00000000                      DS8 4
     67          
     68          /* Define the APP main task  */

   \                                 In section .bss, align 4
     69          PRIVATE GSN_OSAL_THREAD_TCB_T appMainCtxThread;
   \                     appMainCtxThread:
   \   00000000                      DS8 180

   \                                 In section .bss, align 4
     70          PRIVATE UINT32 appMainCtxThreadStack[APP_MAIN_THREAD_STACK_SIZE/sizeof(UINT32)];
   \                     appMainCtxThreadStack:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     71          PRIVATE GSN_OSAL_QUEUE_T appMainThreadMsgQueue;
   \                     appMainThreadMsgQueue:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
     72          PRIVATE UINT32 appMainThreadMsgQueueBuf[ APP_CFG_APP_CTX_MAX_MSG_IN_MBOX *(sizeof(APP_MAINTASK_MSG_T)/4)];
   \                     appMainThreadMsgQueueBuf:
   \   00000000                      DS8 256
     73          
     74          /* WDD stuff */

   \                                 In section .bss, align 4
     75          PRIVATE UINT32 wddStack[APP_CFG_WDD_MSG_HDLR_STACK_SIZE/sizeof(UINT32)];
   \                     wddStack:
   \   00000000                      DS8 4096
     76          
     77          /*Hi message system */

   \                                 In section .bss, align 4
     78          PRIVATE UINT32 hiRecvTaskStack[APP_CFG_HI_RCV_TASK_STACK_SIZE/sizeof(UINT32)];
   \                     hiRecvTaskStack:
   \   00000000                      DS8 4096
     79          

   \                                 In section .bss, align 4
     80          PRIVATE UINT32 sysCtrlTaskStack[APP_CFG_SYS_CTL_TASK_STACK_SIZE/sizeof(UINT32)];
   \                     sysCtrlTaskStack:
   \   00000000                      DS8 2048
     81          
     82          /* Soft Timer*/

   \                                 In section .bss, align 4
     83          UINT32 softTmrMsgHHdlrStack[ APP_CFG_SOFT_TMR_STACK_SIZE/sizeof(UINT32) ];
   \                     softTmrMsgHHdlrStack:
   \   00000000                      DS8 2048

   \                                 In section .bss, align 4
     84          UINT32 softTmrMsgHHdlrBuff[ APP_CFG_SOFT_TMR_MAX_MSG_IN_MBOX ];
   \                     softTmrMsgHHdlrBuff:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
     85          INT8 ipStack[APP_NWIF_IP_THREAD_STACK_SIZE];
   \                     ipStack:
   \   00000000                      DS8 4096

   \                                 In section .bss, align 4
     86          INT8 arpCache[APP_NWIF_IP_THREAD_ARP_CACHE_SIZE];
   \                     arpCache:
   \   00000000                      DS8 256
     87          
     88          /* Boot indication synchronization mutex*/

   \                                 In section .bss, align 4
     89          GSN_OSAL_SEM_T syscSem;
   \                     syscSem:
   \   00000000                      DS8 28
     90          
     91          

   \                                 In section .bss, align 4
     92          GSN_HIF_STATS_T gsnHifStats;
   \                     gsnHifStats:
   \   00000000                      DS8 20

   \                                 In section .bss, align 4
     93          GSN_WDD_STATS_T gsnWddStats;
   \                     gsnWddStats:
   \   00000000                      DS8 56

   \                                 In section .bss, align 4
     94          GSN_NWIF_STATS_T gsnNwifStats;
   \                     gsnNwifStats:
   \   00000000                      DS8 44
     95          extern 	UINT32 romFwImageFlashAddr;
     96          

   \                                 In section .bss, align 4
     97          UINT32 rcvDabInd = 0, nwConnDone = 0;
   \                     rcvDabInd:
   \   00000000                      DS8 4

   \                                 In section .bss, align 4
   \                     nwConnDone:
   \   00000000                      DS8 4
     98          
     99          /*****************************************************************************
    100           *Private Function prototypes
    101           ****************************************************************************/
    102          extern BOOL
    103          GsnWdd_AssocStatusSet(GSN_WDD_CTX_T *pWdd);
    104          
    105          extern VOID
    106          App_LedStatusSet(UINT8 status);
    107          
    108          PRIVATE VOID    
    109          AppMainCtx_ThreadEntry(UINT32 arg);
    110          
    111          PRIVATE VOID
    112          AppInit_WddMsgHdlrInit(APP_MAIN_CTX_T *pAppCtx);
    113          
    114          PRIVATE VOID
    115          App_HiInit(APP_MAIN_CTX_T *pAppCtx);
    116          PRIVATE VOID
    117          App_WpaSupplicantInit(APP_MAIN_CTX_T * pAppCtx);
    118          
    119          PRIVATE VOID
    120          App_IfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *ifInfo);
    121          
    122          PRIVATE VOID
    123          App_RandomNumGenInit(VOID);
    124          
    125          PRIVATE VOID
    126          App_DefaultIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    127          
    128          PRIVATE VOID
    129          App_WifInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *ifInfo);
    130          
    131          PRIVATE VOID
    132          App_WddInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *ifInfo);
    133          
    134          PRIVATE VOID
    135          App_NwIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    136          
    137          PRIVATE VOID
    138          App_NwStackInit(APP_MAIN_CTX_T *pAppCtx);
    139          
    140          PRIVATE GSN_STATUS
    141          App_WlanBootReq(APP_MAIN_CTX_T *pAppCtx);
    142          
    143          PUBLIC GSN_STATUS
    144          App_MsgProcess(    APP_MAIN_CTX_T *pAppCtx, UINT32 msgId );
    145          
    146          PRIVATE VOID
    147          APP_BsdLayerInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    148          
    149          PRIVATE VOID
    150          App_SoftTimerInit(APP_MAIN_CTX_T *pAppCtx);
    151          
    152          PRIVATE VOID
    153          App_Init(APP_MAIN_CTX_T * pAppCtx);
    154          
    155          PRIVATE VOID
    156          App_GpioInit();
    157          
    158          PRIVATE VOID 
    159          App_DfltWlanCfgSet(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    160          
    161          #if 0
    162          PRIVATE VOID
    163          App_SysQualInit();
    164          #endif
    165          
    166          PRIVATE VOID
    167          App_SysCtlInit(APP_MAIN_CTX_T *pAppCtx);
    168          
    169          PRIVATE VOID
    170          App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo);
    171          
    172          VOID
    173          App_RtcDump(VOID);
    174          
    175          VOID
    176          App_GetHttpsFlagInfo(APP_MAIN_CTX_T *pAppCtx);
    177          
    178          VOID
    179          App_WaitOnLock(VOID);
    180          
    181          

   \                                 In section .bss, align 8
    182          PRIVATE GSN_SOFT_TMR_T	wlanRespTimeoutTmr;
   \                     wlanRespTimeoutTmr:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
    183          PRIVATE GSN_SOFT_TMR_HANDLE_T wlanRespTimeoutTmrHndl;
   \                     wlanRespTimeoutTmrHndl:
   \   00000000                      DS8 4
    184          

   \                                 In section .bss, align 8
    185          GSN_SOFT_TMR_T sysTickTmr;
   \                     sysTickTmr:
   \   00000000                      DS8 32

   \                                 In section .bss, align 4
    186          GSN_SOFT_TMR_T *pSysTickTmrHndl;
   \                     pSysTickTmrHndl:
   \   00000000                      DS8 4
    187          
    188          /*****************************************************************************
    189           *Public and Private functions
    190           ****************************************************************************/

   \                                 In section .text, align 2, keep-with-next
    191          VOID
    192          App_SysTickCb(VOID* context, GSN_SOFT_TMR_HANDLE_T  timerHandle)
    193          {
   \                     App_SysTickCb:
   \   00000000   0xB580             PUSH     {R7,LR}
    194              /* Generate software interrupt and call _tx_timer_interrupt in that ISR */
    195              NVIC_EnableIRQ(mbReceive7_IRQn);
   \   00000002   0x2009             MOVS     R0,#+9
   \   00000004   0x.... 0x....      BL       NVIC_EnableIRQ
    196              NVIC_SetPendingIRQ(mbReceive7_IRQn);
   \   00000008   0x2009             MOVS     R0,#+9
   \   0000000A   0x.... 0x....      BL       NVIC_SetPendingIRQ
    197          
    198              return;
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    199          }
    200          
    201          

   \                                 In section .text, align 2, keep-with-next
    202          PUBLIC VOID
    203          AppMainCtx_Init(VOID)
    204          {  
   \                     AppMainCtx_Init:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    205          	UINT32 msgSizeInWords; 
    206          	memset((INT8 *)&appCtx, 0, sizeof(appCtx));// REVERT REMOVE
   \   00000004   0xF247 0x72E0      MOVW     R2,#+30688
   \   00000008   0x2100             MOVS     R1,#+0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable25_5
   \   0000000E   0x.... 0x....      BL       memset
    207          	globalAppCtxPtr = &appCtx;
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable25_6
   \   00000016   0x.... 0x....      LDR.W    R1,??DataTable25_5
   \   0000001A   0x6001             STR      R1,[R0, #+0]
    208          
    209          	msgSizeInWords = GsnOsal_QueueMsgSizeInWords(sizeof(APP_MAINTASK_MSG_T));
   \   0000001C   0x2008             MOVS     R0,#+8
   \   0000001E   0x.... 0x....      BL       GsnOsal_QueueMsgSizeInWords
   \   00000022   0x0001             MOVS     R1,R0
    210          	/**< Creating the Mailbox to receive messages */
    211          	GsnOsal_QueueCreate( &appMainThreadMsgQueue, msgSizeInWords,
    212          							( UINT8* )appMainThreadMsgQueueBuf,
    213          							sizeof( appMainThreadMsgQueueBuf ));
   \   00000024   0xF44F 0x7380      MOV      R3,#+256
   \   00000028   0x.... 0x....      LDR.W    R2,??DataTable25_7
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable25_8
   \   00000030   0x.... 0x....      BL       GsnOsal_QueueCreate
    214          
    215              /**< Create the main Application Thread */
    216          #ifdef GSN_DBG_STACK_PATTERN_FILL   /* Only for debug */
    217              memset(appMainCtxThreadStack, 0x5a, sizeof(appMainCtxThreadStack));
    218          #endif
    219          	GsnPwrMgmt_Init(&appCtx.pwrMgmtCtx);
   \   00000034   0x.... 0x....      LDR.W    R0,??DataTable25_9
   \   00000038   0x.... 0x....      BL       GsnPwrMgmt_Init
    220          #ifdef APP_OPT_PS_IN_PSPOLL
    221          	GsnPwrMgmt_StdbyDisable(&appCtx.pwrMgmtCtx);
    222          #endif
    223              GsnOsal_ThreadCreate(AppMainCtx_ThreadEntry, &appCtx, &appMainCtxThread,
    224                  "App Main Ctx", APP_CFG_MAIN_THREAD_PRIORITY, (UINT8 *)appMainCtxThreadStack, 
    225                  sizeof(appMainCtxThreadStack), GSN_OSAL_THREAD_INITIAL_READY);
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x9003             STR      R0,[SP, #+12]
   \   00000040   0xF44F 0x5080      MOV      R0,#+4096
   \   00000044   0x9002             STR      R0,[SP, #+8]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable25_10
   \   0000004A   0x9001             STR      R0,[SP, #+4]
   \   0000004C   0x200F             MOVS     R0,#+15
   \   0000004E   0x9000             STR      R0,[SP, #+0]
   \   00000050   0x.... 0x....      LDR.W    R3,??DataTable25_11
   \   00000054   0x.... 0x....      LDR.W    R2,??DataTable25_12
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable25_5
   \   0000005C   0x.... 0x....      ADR.W    R0,AppMainCtx_ThreadEntry
   \   00000060   0x.... 0x....      BL       GsnOsal_ThreadCreate
    226          }
   \   00000064   0xB005             ADD      SP,SP,#+20
   \   00000066   0xBD00             POP      {PC}             ;; return
    227          

   \                                 In section .text, align 2, keep-with-next
    228          PUBLIC VOID
    229          AppMainCtx_TaskNotify(INT32 msgId, UINT32 msgInfo)
    230          {
   \                     AppMainCtx_TaskNotify:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    231          	APP_MAINTASK_MSG_T msg;
    232          	msg.msgId = msgId;
   \   00000004   0x9000             STR      R0,[SP, #+0]
    233          	msg.msgInfo = msgInfo;
   \   00000006   0x9101             STR      R1,[SP, #+4]
    234              /**< Signal APP */
    235              GsnOsal_QueuePut(&appMainThreadMsgQueue, (UINT8 *)&msg);
   \   00000008   0xA900             ADD      R1,SP,#+0
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable25_8
   \   0000000E   0x.... 0x....      BL       GsnOsal_QueuePut
    236          }
   \   00000012   0xBD07             POP      {R0-R2,PC}       ;; return
    237          

   \                                 In section .text, align 2, keep-with-next
    238          PUBLIC VOID
    239          App_RtcCfg()
    240          {
   \                     App_RtcCfg:
   \   00000000   0xB580             PUSH     {R7,LR}
    241          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT == GSN_BOOT_REASON_GET())
   \   00000002   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000006   0x2801             CMP      R0,#+1
   \   00000008   0xD113             BNE.N    ??App_RtcCfg_0
    242          	{/*Configure RTC SRAM Bank*/
    243                  RTC_SX_SWT2LDO_SET(RTC,0);
   \   0000000A   0x.... 0x....      LDR.W    R0,??DataTable25_13  ;; 0x41000364
   \   0000000E   0x2100             MOVS     R1,#+0
   \   00000010   0x6001             STR      R1,[R0, #+0]
    244                  SX_EN_ULDO_CLEAR(RTC);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable25_14  ;; 0x41000360
   \   00000016   0x6800             LDR      R0,[R0, #+0]
   \   00000018   0x0840             LSRS     R0,R0,#+1
   \   0000001A   0x0040             LSLS     R0,R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable25_14  ;; 0x41000360
   \   00000020   0x6008             STR      R0,[R1, #+0]
    245                  RTC_SRAM_ISO_ENABLE_CLEAR(RTC);
   \   00000022   0x.... 0x....      LDR.W    R0,??DataTable25_15  ;; 0x4100007c
   \   00000026   0x6800             LDR      R0,[R0, #+0]
   \   00000028   0x0840             LSRS     R0,R0,#+1
   \   0000002A   0x0040             LSLS     R0,R0,#+1
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable25_15  ;; 0x4100007c
   \   00000030   0x6008             STR      R0,[R1, #+0]
    246          	}
    247          
    248          
    249          }
   \                     ??App_RtcCfg_0:
   \   00000032   0xBD01             POP      {R0,PC}          ;; return
    250          
    251          

   \                                 In section .bss, align 4
    252          GSN_CLK_CTL_CTX_T gsnBrClkCtlCtx1;
   \                     gsnBrClkCtlCtx1:
   \   00000000                      DS8 52

   \                                 In section .bss, align 8
    253          GSN_OTP_T appBrOtpCtx1;
   \                     appBrOtpCtx1:
   \   00000000                      DS8 120

   \                                 In section .bss, align 4
    254          GSN_OTP_MM_CTX_T appBrOtpMmCtx1;
   \                     appBrOtpMmCtx1:
   \   00000000                      DS8 64
    255          
    256          
    257          
    258          /* Define the test threads.  */

   \                                 In section .text, align 4, keep-with-next
    259          PRIVATE VOID    
    260          AppMainCtx_ThreadEntry(UINT32 ctx)
    261          {
   \                     AppMainCtx_ThreadEntry:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    262              /*UINT status;*/
    263              APP_MAINTASK_MSG_T msg = {0};
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable25_16
   \   0000000A   0xE9D0 0x2300      LDRD     R2,R3,[R0, #+0]
   \   0000000E   0xE9CD 0x2301      STRD     R2,R3,[SP, #+4]
    264              APP_MAIN_CTX_T *pAppCtx;
    265          	
    266              pAppCtx = (APP_MAIN_CTX_T *)ctx;
    267              
    268          
    269          	GsnClkCtl_Init(&gsnBrClkCtlCtx1);
   \   00000012   0x.... 0x....      LDR.W    R0,??DataTable25_17
   \   00000016   0x.... 0x....      BL       GsnClkCtl_Init
    270          #ifdef APP_OPT_PS_IN_PSPOLL
    271              GsnOsal_SemCreate(&pAppCtx->synSyncSem, 0);
    272          #endif    
    273              GsnExcpHdlr_Init();
   \   0000001A   0x.... 0x....      BL       GsnExcpHdlr_Init
    274          
    275              App_RtcCfg();
   \   0000001E   0x.... 0x....      BL       App_RtcCfg
    276              
    277              /* Initiailize the UART early to support prints */
    278              AppUart_Init();
   \   00000022   0x.... 0x....      BL       AppUart_Init
    279          
    280          	AppDbg_Printf("Boot Reason = %d\r\n", GSN_BOOT_REASON_GET());
   \   00000026   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   0000002A   0x0001             MOVS     R1,R0
   \   0000002C   0x.... 0x....      LDR.W    R0,??DataTable25_18
   \   00000030   0x.... 0x....      BL       AppDbg_Printf
    281          	
    282          	/*Initialise SysQual*/
    283          	//App_SysQualInit();
    284          
    285          	/*Initialise wif message system*/
    286          	App_HiInit(pAppCtx);
   \   00000034   0x0020             MOVS     R0,R4
   \   00000036   0x.... 0x....      BL       App_HiInit
    287          	
    288          	/*Initialise wif System Control message Handler */
    289          	App_SysCtlInit(pAppCtx);
   \   0000003A   0x0020             MOVS     R0,R4
   \   0000003C   0x.... 0x....      BL       App_SysCtlInit
    290          
    291          	/*Initialise Soft Timer */
    292          	App_SoftTimerInit(pAppCtx);
   \   00000040   0x0020             MOVS     R0,R4
   \   00000042   0x.... 0x....      BL       App_SoftTimerInit
    293          
    294                  /* Initialise File System */   
    295                  /*if( GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())*/
    296          	{
    297          	    /*Initialse File system. File system is must and is also used by WLAN Sw*/
    298          		App_FsInit(&pAppCtx->fs);
   \   00000046   0xF504 0x40EE      ADD      R0,R4,#+30464
   \   0000004A   0x3070             ADDS     R0,R0,#+112
   \   0000004C   0x.... 0x....      BL       App_FsInit
    299          	}
    300          
    301          		/* initialize low level OTP driver */
    302          	GSN_OTP_CTX_USES_OBJS_S otpUsesObjs;
    303          		
    304          
    305          	otpUsesObjs.pClkCtl = GsnClkCtl_CtxGet();
   \   00000050   0x.... 0x....      BL       GsnClkCtl_CtxGet
   \   00000054   0x9004             STR      R0,[SP, #+16]
    306          	GsnOtp_Init(&appBrOtpCtx1, &otpUsesObjs, NULL);
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0xA903             ADD      R1,SP,#+12
   \   0000005A   0x.... 0x....      LDR.W    R0,??DataTable25_19
   \   0000005E   0x.... 0x....      BL       GsnOtp_Init
    307          
    308          	/* initialize OTP MM module */
    309          	GSN_OTP_MM_USES_OBJS_T otpMmUsesObjs;
    310          	otpMmUsesObjs.otpDrv = &appBrOtpCtx1;
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable25_19
   \   00000066   0x9000             STR      R0,[SP, #+0]
    311          	GsnOtpMm_Init(&appBrOtpMmCtx1, &otpMmUsesObjs, NULL);
   \   00000068   0x2200             MOVS     R2,#+0
   \   0000006A   0xA900             ADD      R1,SP,#+0
   \   0000006C   0x.... 0x....      LDR.W    R0,??DataTable25_20
   \   00000070   0x.... 0x....      BL       GsnOtpMm_Init
    312          
    313          	/* Give boot request */
    314          	App_WlanBootReq(pAppCtx);
   \   00000074   0x0020             MOVS     R0,R4
   \   00000076   0x.... 0x....      BL       App_WlanBootReq
    315          	
    316          	/*Initialise Default configuration*/
    317          	AppConfig_DefaultInit(&pAppCtx->config);
   \   0000007A   0xF504 0x40E6      ADD      R0,R4,#+29440
   \   0000007E   0x30B0             ADDS     R0,R0,#+176
   \   00000080   0x.... 0x....      BL       AppConfig_DefaultInit
    318          
    319          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT == GSN_BOOT_REASON_GET())
   \   00000084   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000088   0x2801             CMP      R0,#+1
   \   0000008A   0xD102             BNE.N    ??AppMainCtx_ThreadEntry_0
    320          	{
    321          		AppSm_ReStoreStdbyData(pAppCtx);
   \   0000008C   0x0020             MOVS     R0,R4
   \   0000008E   0x.... 0x....      BL       AppSm_ReStoreStdbyData
    322          	}
    323          
    324          	/*Initialise Wdd Message Handler */
    325          	AppInit_WddMsgHdlrInit(pAppCtx);
   \                     ??AppMainCtx_ThreadEntry_0:
   \   00000092   0x0020             MOVS     R0,R4
   \   00000094   0x.... 0x....      BL       AppInit_WddMsgHdlrInit
    326          
    327          	/*Initialize Nw statck. This is a one time initialisation*/
    328          	App_NwStackInit(pAppCtx);
   \   00000098   0x0020             MOVS     R0,R4
   \   0000009A   0x.... 0x....      BL       App_NwStackInit
    329              
    330              /* Initialise Wpa Suppliacnt*/
    331              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   0000009E   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   000000A2   0x2801             CMP      R0,#+1
   \   000000A4   0xD001             BEQ.N    ??AppMainCtx_ThreadEntry_1
    332              {
    333                  GsnHeIf_DriverDeinit();
   \   000000A6   0x.... 0x....      BL       GsnHeIf_DriverDeinit
    334              }
    335              
    336          	/* Initialise Wpa Suppliacnt*/
    337          	App_WpaSupplicantInit(pAppCtx);
   \                     ??AppMainCtx_ThreadEntry_1:
   \   000000AA   0x0020             MOVS     R0,R4
   \   000000AC   0x.... 0x....      BL       App_WpaSupplicantInit
    338          	
    339          	App_RandomNumGenInit();
   \   000000B0   0x.... 0x....      BL       App_RandomNumGenInit
    340          
    341          	APP_BsdLayerInit(pAppCtx, &pAppCtx->if0);
   \   000000B4   0xF514 0x610B      ADDS     R1,R4,#+2224
   \   000000B8   0x0020             MOVS     R0,R4
   \   000000BA   0x.... 0x....      BL       APP_BsdLayerInit
    342          	
    343          	/*Initialise an interface on device Index 0 of Wlan Nw type STA*/
    344          	App_DefaultIfInit(pAppCtx, &pAppCtx->if0);
   \   000000BE   0xF514 0x610B      ADDS     R1,R4,#+2224
   \   000000C2   0x0020             MOVS     R0,R4
   \   000000C4   0x.... 0x....      BL       App_DefaultIfInit
    345              App_WaitOnLock();
   \   000000C8   0x.... 0x....      BL       App_WaitOnLock
    346          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   000000CC   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   000000D0   0x2801             CMP      R0,#+1
   \   000000D2   0xD004             BEQ.N    ??AppMainCtx_ThreadEntry_2
    347          	{
    348          		/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
    349          		App_InterfaceStart(pAppCtx, &pAppCtx->if0);
   \   000000D4   0xF514 0x610B      ADDS     R1,R4,#+2224
   \   000000D8   0x0020             MOVS     R0,R4
   \   000000DA   0x.... 0x....      BL       App_InterfaceStart
    350          	}
    351          	App_DfltWlanCfgSet(pAppCtx, &pAppCtx->if0);
   \                     ??AppMainCtx_ThreadEntry_2:
   \   000000DE   0xF514 0x610B      ADDS     R1,R4,#+2224
   \   000000E2   0x0020             MOVS     R0,R4
   \   000000E4   0x.... 0x....      BL       App_DfltWlanCfgSet
    352          
    353          	App_GetHttpsFlagInfo(pAppCtx);
   \   000000E8   0x0020             MOVS     R0,R4
   \   000000EA   0x.... 0x....      BL       App_GetHttpsFlagInfo
    354          	
    355          	App_Init(pAppCtx);
   \   000000EE   0x0020             MOVS     R0,R4
   \   000000F0   0x.... 0x....      BL       App_Init
    356          #ifdef ADK_PROV_WPS_ENABLE
    357          	App_WpsGPIOInit(pAppCtx);
   \   000000F4   0x0020             MOVS     R0,R4
   \   000000F6   0x.... 0x....      BL       App_WpsGPIOInit
    358          #endif
    359          
    360          	/**< Handle events forever */
    361          	while( TRUE )
    362          	{
    363          		/**< wait on message queue */
    364          		GsnOsal_QueueGet( &appMainThreadMsgQueue, ( UINT8* )&msg,
    365          							GSN_OSAL_WAIT_FOREVER );
   \                     ??AppMainCtx_ThreadEntry_3:
   \   000000FA   0xF05F 0x32FF      MOVS     R2,#-1
   \   000000FE   0xA901             ADD      R1,SP,#+4
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable25_8
   \   00000104   0x.... 0x....      BL       GsnOsal_QueueGet
    366          		/**< Process the message */
    367          		GsnSq_TaskMonitorStart(APP_CFG_SQ_MAIN_TASK_ID, msg.msgId);
   \   00000108   0x9901             LDR      R1,[SP, #+4]
   \   0000010A   0x2008             MOVS     R0,#+8
   \   0000010C   0x.... 0x....      BL       GsnSq_TaskMonitorStart
    368          		AppSm_MsgProcess(pAppCtx, msg);
   \   00000110   0xE9DD 0x0101      LDRD     R0,R1,[SP, #+4]
   \   00000114   0x000A             MOVS     R2,R1
   \   00000116   0x0001             MOVS     R1,R0
   \   00000118   0x0020             MOVS     R0,R4
   \   0000011A   0x.... 0x....      BL       AppSm_MsgProcess
    369          		GsnSq_TaskMonitorStop(APP_CFG_SQ_MAIN_TASK_ID);
   \   0000011E   0x2008             MOVS     R0,#+8
   \   00000120   0x.... 0x....      BL       GsnSq_TaskMonitorStop
   \   00000124   0xE7E9             B.N      ??AppMainCtx_ThreadEntry_3
    370          	}
    371          }
    372          
    373          

   \                                 In section .text, align 2, keep-with-next
    374          PRIVATE VOID
    375          App_CreateLock(VOID)
    376          {
   \                     App_CreateLock:
   \   00000000   0xB580             PUSH     {R7,LR}
    377          #if 1
    378          	/*Create syncronisation semaphore*/
    379          	GsnOsal_SemCreate(&syscSem, 0);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x.... 0x....      LDR.W    R0,??DataTable25_21
   \   00000008   0x.... 0x....      BL       GsnOsal_SemCreate
    380          #endif
    381          }
   \   0000000C   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    382          VOID
    383          App_WaitOnLock(VOID)
    384          {
   \                     App_WaitOnLock:
   \   00000000   0xB580             PUSH     {R7,LR}
    385          #if 1
    386          	/* Wait on semaphore */
    387          	GsnOsal_SemAcquire(&syscSem, GSN_OSAL_WAIT_FOREVER);
   \   00000002   0xF05F 0x31FF      MOVS     R1,#-1
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable25_21
   \   0000000A   0x.... 0x....      BL       GsnOsal_SemAcquire
    388          	/* delete semaphore */
    389          	GsnOsal_SemDelete(&syscSem);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable25_21
   \   00000012   0x.... 0x....      BL       GsnOsal_SemDelete
    390          #endif	
    391          }
   \   00000016   0xBD01             POP      {R0,PC}          ;; return
    392          

   \                                 In section .text, align 2, keep-with-next
    393          PRIVATE VOID
    394          App_UnLock(VOID)
    395          {
   \                     App_UnLock:
   \   00000000   0xB580             PUSH     {R7,LR}
    396          #if 1
    397          	GsnOsal_SemRelease(&syscSem);
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable25_21
   \   00000006   0x.... 0x....      BL       GsnOsal_SemRelease
    398          #endif
    399          }
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    400          
    401          /*There is only one instance of wdd message handler. There may be multiple Wdd context, one per interface*/

   \                                 In section .text, align 2, keep-with-next
    402          PRIVATE VOID
    403          AppInit_WddMsgHdlrInit(APP_MAIN_CTX_T *pAppCtx)
    404          {
   \                     AppInit_WddMsgHdlrInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0004             MOVS     R4,R0
    405          	GSN_WDD_MSG_HDLR_INIT_PARAM_T param;
    406          
    407          	param.pStack = wddStack;
   \   00000006   0x.... 0x....      LDR.W    R0,??DataTable25_22
   \   0000000A   0x9000             STR      R0,[SP, #+0]
    408          	param.stackSize = sizeof(wddStack);
   \   0000000C   0xF44F 0x5080      MOV      R0,#+4096
   \   00000010   0x9001             STR      R0,[SP, #+4]
    409          	param.priority = APP_WDD_MSG_HDLR_THREAD_PRIORITY;
   \   00000012   0x2004             MOVS     R0,#+4
   \   00000014   0x9002             STR      R0,[SP, #+8]
    410          
    411          	param.msgSize = GsnOsal_QueueMsgSizeInWords(sizeof(GSN_WDD_MESSAGE_T));
   \   00000016   0x2010             MOVS     R0,#+16
   \   00000018   0x.... 0x....      BL       GsnOsal_QueueMsgSizeInWords
   \   0000001C   0xF88D 0x0014      STRB     R0,[SP, #+20]
    412          	//param.msgQueueBuffSize = APP_CFG_WDD_MSG_HDLR_MAX_MSG_IN_MBOX * param.msgSize;
    413          
    414          	/* FIX:Bug 5187 - Message Queue Buffer allocation is incorrect
    415          	    Now the mesage que size is 16*4*4=256 bytes
    416          	    each message size is 16 bytes and max of 16 messages can be put.
    417          	*/
    418          	param.msgQueueBuffSize = (APP_CFG_WDD_MSG_HDLR_MAX_MSG_IN_MBOX
    419          							  * param.msgSize
    420          							  * sizeof(UINT32) );
   \   00000020   0xF89D 0x0014      LDRB     R0,[SP, #+20]
   \   00000024   0x2140             MOVS     R1,#+64
   \   00000026   0x4348             MULS     R0,R1,R0
   \   00000028   0x9004             STR      R0,[SP, #+16]
    421          
    422          	param.msgQueueBuff = MALLOC(param.msgQueueBuffSize);
   \   0000002A   0x9804             LDR      R0,[SP, #+16]
   \   0000002C   0x.... 0x....      BL       MALLOC
   \   00000030   0x9003             STR      R0,[SP, #+12]
    423          	if(NULL == param.msgQueueBuff)
   \   00000032   0x9803             LDR      R0,[SP, #+12]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD100             BNE.N    ??AppInit_WddMsgHdlrInit_0
    424          	{
    425          		while(1);
   \                     ??AppInit_WddMsgHdlrInit_1:
   \   00000038   0xE7FE             B.N      ??AppInit_WddMsgHdlrInit_1
    426          	}
    427          	param.sysQualTskID = APP_CFG_SQ_WDD_MSG_HDLR_TASK_ID;
   \                     ??AppInit_WddMsgHdlrInit_0:
   \   0000003A   0x2004             MOVS     R0,#+4
   \   0000003C   0x9006             STR      R0,[SP, #+24]
    428          	param.sysQualTicks = APP_CFG_SQ_TICKS_FOR_WDD_MSG_HDLR_TASK;
   \   0000003E   0x201E             MOVS     R0,#+30
   \   00000040   0x9007             STR      R0,[SP, #+28]
    429          
    430          	GsnWdd_MsgHdlrInit(&pAppCtx->wddMsgHdlrCtx, &param);
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0xF204 0x7034      ADDW     R0,R4,#+1844
   \   00000048   0x.... 0x....      BL       GsnWdd_MsgHdlrInit
    431          
    432          }
   \   0000004C   0xB008             ADD      SP,SP,#+32
   \   0000004E   0xBD10             POP      {R4,PC}          ;; return
    433          

   \                                 In section .text, align 2, keep-with-next
    434          PRIVATE VOID
    435          App_HiInit(APP_MAIN_CTX_T *pAppCtx)
    436          {
   \                     App_HiInit:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB08B             SUB      SP,SP,#+44
    437          	GSN_HI_INIT_PARAM_T param;
    438          	param.dTxRdyQSize = GSN_HI_DTX_RDY_Q_SIZE;
   \   00000004   0x2108             MOVS     R1,#+8
   \   00000006   0xF8AD 0x1000      STRH     R1,[SP, #+0]
    439          	param.dTxDoneQSize = GSN_HI_DTX_DONE_Q_SIZE;
   \   0000000A   0x2108             MOVS     R1,#+8
   \   0000000C   0xF8AD 0x1002      STRH     R1,[SP, #+2]
    440          	param.dRxSbufRdyQSize = GSN_HI_DRX_SBUF_RDY_Q_SIZE;
   \   00000010   0x2108             MOVS     R1,#+8
   \   00000012   0xF8AD 0x1004      STRH     R1,[SP, #+4]
    441          	param.dRxLbufRdyQSize = GSN_HI_DRX_LBUF_RDY_Q_SIZE;
   \   00000016   0x2108             MOVS     R1,#+8
   \   00000018   0xF8AD 0x1006      STRH     R1,[SP, #+6]
    442          	param.dRxDoneQsize = GSN_HI_DRX_DONE_Q_SIZE;
   \   0000001C   0x2108             MOVS     R1,#+8
   \   0000001E   0xF8AD 0x1008      STRH     R1,[SP, #+8]
    443          	param.cTxRdyQSize = GSN_HI_CTX_RDY_Q_SIZE;
   \   00000022   0x2108             MOVS     R1,#+8
   \   00000024   0xF8AD 0x100A      STRH     R1,[SP, #+10]
    444          	param.cTxDoneQSize = GSN_HI_CTX_DONE_Q_SIZE;
   \   00000028   0x2108             MOVS     R1,#+8
   \   0000002A   0xF8AD 0x100C      STRH     R1,[SP, #+12]
    445          	param.cRxSbufRdyQSize = GSN_HI_CRX_SBUF_RDY_Q_SIZE;
   \   0000002E   0x2108             MOVS     R1,#+8
   \   00000030   0xF8AD 0x100E      STRH     R1,[SP, #+14]
    446          	param.cRxLbufRdyQsize = GSN_HI_CRX_LBUF_RDY_Q_SIZE;
   \   00000034   0x2108             MOVS     R1,#+8
   \   00000036   0xF8AD 0x1010      STRH     R1,[SP, #+16]
    447          	param.cRxDoneQsize = GSN_HI_CRX_DONE_Q_SIZE;
   \   0000003A   0x2108             MOVS     R1,#+8
   \   0000003C   0xF8AD 0x1012      STRH     R1,[SP, #+18]
    448          	param.hiRecvTskPrio = APP_HI_RECV_HANDLER_THREAD_PRIORITY;
   \   00000040   0x2102             MOVS     R1,#+2
   \   00000042   0xF88D 0x1014      STRB     R1,[SP, #+20]
    449          	param.pHiRecvTskStack = (UINT8 *)hiRecvTaskStack;
   \   00000046   0x.... 0x....      LDR.W    R1,??DataTable25_23
   \   0000004A   0x9106             STR      R1,[SP, #+24]
    450          	param.hiRecvTskStackSize = APP_CFG_HI_RCV_TASK_STACK_SIZE;
   \   0000004C   0xF44F 0x5180      MOV      R1,#+4096
   \   00000050   0x9107             STR      R1,[SP, #+28]
    451          	param.sysQualTaskId = APP_CFG_SQ_HI_RECV_TASK_ID;
   \   00000052   0x2102             MOVS     R1,#+2
   \   00000054   0x9109             STR      R1,[SP, #+36]
    452          	param.sysQualTicks = APP_CFG_SQ_TICKS_FOR_HI_RECV_TASK;
   \   00000056   0x211E             MOVS     R1,#+30
   \   00000058   0x9108             STR      R1,[SP, #+32]
    453          	param.pStats = &gsnHifStats;
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable25_24
   \   0000005E   0x910A             STR      R1,[SP, #+40]
    454          	GsnHi_Init(&pAppCtx->hiCtx,&param);
   \   00000060   0xA900             ADD      R1,SP,#+0
   \   00000062   0x300C             ADDS     R0,R0,#+12
   \   00000064   0x.... 0x....      BL       GsnHi_Init
    455          }
   \   00000068   0xB00B             ADD      SP,SP,#+44
   \   0000006A   0xBD00             POP      {PC}             ;; return

   \                                 In section .text, align 2, keep-with-next
    456          PRIVATE VOID
    457          App_SysCtlInit(APP_MAIN_CTX_T *pAppCtx)
    458          {
   \                     App_SysCtlInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0004             MOVS     R4,R0
    459          	GSN_SYSIF_INIT_PARAM_T sysIfInitParam;
    460          	GSN_SYS_CTL_INIT_PARAM_T sysCtlInitParam;
    461          	sysIfInitParam.macIfNum = GSN_SYS_MACIF_NUM;
   \   00000006   0x20FF             MOVS     R0,#+255
   \   00000008   0xF88D 0x0000      STRB     R0,[SP, #+0]
    462          	sysIfInitParam.pHiCtx = &pAppCtx->hiCtx;
   \   0000000C   0xF114 0x000C      ADDS     R0,R4,#+12
   \   00000010   0x9001             STR      R0,[SP, #+4]
    463          	GsnSysif_Init(&pAppCtx->sysifCtx,&sysIfInitParam);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0xF514 0x7025      ADDS     R0,R4,#+660
   \   00000018   0x.... 0x....      BL       GsnSysif_Init
    464          	sysCtlInitParam.pSysifCtx = &pAppCtx->sysifCtx;
   \   0000001C   0xF514 0x7025      ADDS     R0,R4,#+660
   \   00000020   0x9003             STR      R0,[SP, #+12]
    465          	sysCtlInitParam.macIfNum = GSN_SYS_MACIF_NUM;
   \   00000022   0x20FF             MOVS     R0,#+255
   \   00000024   0xF88D 0x0008      STRB     R0,[SP, #+8]
    466          	sysCtlInitParam.pStack = sysCtrlTaskStack;
   \   00000028   0x.... 0x....      LDR.W    R0,??DataTable25_25
   \   0000002C   0x9005             STR      R0,[SP, #+20]
    467          	sysCtlInitParam.stackSize = sizeof(sysCtrlTaskStack);
   \   0000002E   0xF44F 0x6000      MOV      R0,#+2048
   \   00000032   0x9006             STR      R0,[SP, #+24]
    468          	sysCtlInitParam.priority = APP_SYS_CTL_HANDLER_THREAD_PRIORITY;
   \   00000034   0x2003             MOVS     R0,#+3
   \   00000036   0x9007             STR      R0,[SP, #+28]
    469          	sysCtlInitParam.msgSize = GsnOsal_QueueMsgSizeInWords(sizeof(GSN_SYS_CTL_MESSAGE_T));
   \   00000038   0x2008             MOVS     R0,#+8
   \   0000003A   0x.... 0x....      BL       GsnOsal_QueueMsgSizeInWords
   \   0000003E   0xF88D 0x0028      STRB     R0,[SP, #+40]
    470          	//sysCtlInitParam.msgQueueBuffSize = APP_CFG_SYSCTL_MAX_MSG_IN_MBOX * sysCtlInitParam.msgSize;
    471          
    472          	/* FIX:Bug 5187 - Message Queue Buffer allocation is incorrect
    473          	    Now the mesage que size is 8*2*4=64 bytes
    474          	    each message size is 8 bytes and max of 8 messages can be put.
    475          	*/
    476          	sysCtlInitParam.msgQueueBuffSize = (APP_CFG_SYSCTL_MAX_MSG_IN_MBOX *
    477          										sysCtlInitParam.msgSize*
    478          										sizeof(UINT32));
   \   00000042   0xF89D 0x0028      LDRB     R0,[SP, #+40]
   \   00000046   0x0140             LSLS     R0,R0,#+5
   \   00000048   0x9009             STR      R0,[SP, #+36]
    479          
    480          	sysCtlInitParam.msgQueueBuff = MALLOC(sysCtlInitParam.msgQueueBuffSize);	
   \   0000004A   0x9809             LDR      R0,[SP, #+36]
   \   0000004C   0x.... 0x....      BL       MALLOC
   \   00000050   0x9008             STR      R0,[SP, #+32]
    481          	if(NULL == sysCtlInitParam.msgQueueBuff)
   \   00000052   0x9808             LDR      R0,[SP, #+32]
   \   00000054   0x2800             CMP      R0,#+0
   \   00000056   0xD100             BNE.N    ??App_SysCtlInit_0
    482          	{
    483          		while(1);
   \                     ??App_SysCtlInit_1:
   \   00000058   0xE7FE             B.N      ??App_SysCtlInit_1
    484          	}	
    485          	sysCtlInitParam.sysQualTskID = APP_CFG_SQ_SYS_CTL_TASK_ID;	
   \                     ??App_SysCtlInit_0:
   \   0000005A   0x2003             MOVS     R0,#+3
   \   0000005C   0x900B             STR      R0,[SP, #+44]
    486          	sysCtlInitParam.fsDriveNum = 0;
   \   0000005E   0x2000             MOVS     R0,#+0
   \   00000060   0xF88D 0x0010      STRB     R0,[SP, #+16]
    487          	GsnSysCtl_Init_Patch(&pAppCtx->sysCtlCtx,&sysCtlInitParam);
                 	^
Warning[Pe223]: function "GsnSysCtl_Init_Patch" declared implicitly
   \   00000064   0xA902             ADD      R1,SP,#+8
   \   00000066   0xF514 0x6094      ADDS     R0,R4,#+1184
   \   0000006A   0x.... 0x....      BL       GsnSysCtl_Init_Patch
    488          }
   \   0000006E   0xB00C             ADD      SP,SP,#+48
   \   00000070   0xBD10             POP      {R4,PC}          ;; return
    489          

   \                                 In section .text, align 2, keep-with-next
    490          PRIVATE VOID
    491          App_NwStackInit(APP_MAIN_CTX_T *pAppCtx)
    492          {
   \                     App_NwStackInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB086             SUB      SP,SP,#+24
   \   00000004   0x0004             MOVS     R4,R0
    493          	GSN_NW_INIT_PARAMS_T param;
    494          
    495          	param.sbufPktPoolPktSize = APP_NW_SPKT_POOL_PKT_SIZE;
   \   00000006   0x2080             MOVS     R0,#+128
   \   00000008   0x9000             STR      R0,[SP, #+0]
    496          	param.sbufPktPoolSize = APP_NW_SPKT_POOL_SIZE;
   \   0000000A   0xF44F 0x4080      MOV      R0,#+16384
   \   0000000E   0x9002             STR      R0,[SP, #+8]
    497          	param.sbufPktPoolStart = MALLOC(APP_NW_SPKT_POOL_SIZE);
   \   00000010   0xF44F 0x4080      MOV      R0,#+16384
   \   00000014   0x.... 0x....      BL       MALLOC
   \   00000018   0x9001             STR      R0,[SP, #+4]
    498          	if(NULL == param.sbufPktPoolStart)
   \   0000001A   0x9801             LDR      R0,[SP, #+4]
   \   0000001C   0x2800             CMP      R0,#+0
   \   0000001E   0xD100             BNE.N    ??App_NwStackInit_0
    499          	{
    500          		while(1);
   \                     ??App_NwStackInit_1:
   \   00000020   0xE7FE             B.N      ??App_NwStackInit_1
    501          	}
    502          	param.LbufPktPoolPktSize = APP_NW_LPKT_POOL_PKT_SIZE;
   \                     ??App_NwStackInit_0:
   \   00000022   0xF44F 0x60C8      MOV      R0,#+1600
   \   00000026   0x9003             STR      R0,[SP, #+12]
    503          	param.LbufPktPoolSize = APP_NW_LPKT_POOL_SIZE;
   \   00000028   0xF44F 0x4000      MOV      R0,#+32768
   \   0000002C   0x9005             STR      R0,[SP, #+20]
    504          	param.LbufPktPoolStart = MALLOC(APP_NW_LPKT_POOL_SIZE);
   \   0000002E   0xF44F 0x4000      MOV      R0,#+32768
   \   00000032   0x.... 0x....      BL       MALLOC
   \   00000036   0x9004             STR      R0,[SP, #+16]
    505          	if(NULL ==param.LbufPktPoolStart)
   \   00000038   0x9804             LDR      R0,[SP, #+16]
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD100             BNE.N    ??App_NwStackInit_2
    506          	{
    507          		while(1);
   \                     ??App_NwStackInit_3:
   \   0000003E   0xE7FE             B.N      ??App_NwStackInit_3
    508          	}
    509          	GsnNw_Init(&pAppCtx->nwCtx, &param);
   \                     ??App_NwStackInit_2:
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0xF604 0x0028      ADDW     R0,R4,#+2088
   \   00000046   0x.... 0x....      BL       GsnNw_Init
    510          	_nx_system_ticks_per_second_update(10);/* a system tick at every 100 mSec*/
   \   0000004A   0x200A             MOVS     R0,#+10
   \   0000004C   0x.... 0x....      BL       _nx_system_ticks_per_second_update
    511          }
   \   00000050   0xB006             ADD      SP,SP,#+24
   \   00000052   0xBD10             POP      {R4,PC}          ;; return
    512          

   \                                 In section .text, align 2, keep-with-next
    513          PRIVATE VOID
    514          APP_BsdLayerInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    515          {
   \                     APP_BsdLayerInit:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    516          	GSN_NWIF_BSD_INIT_PARAM_T bsdInitParam= {0};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x2114             MOVS     R1,#+20
   \   0000000C   0x.... 0x....      BL       __aeabi_memclr4
    517          
    518          	bsdInitParam.pIpHndl = &pIfInfo->nwifCtx.ipHndl;
   \   00000010   0xF605 0x2098      ADDW     R0,R5,#+2712
   \   00000014   0x9000             STR      R0,[SP, #+0]
    519          	bsdInitParam.pBsdPktPoolHndl = GsnNw_PktPoolHndlGet(&pAppCtx->nwCtx, GSN_NW_LBUF_PKT_POOL);	
   \   00000016   0x2101             MOVS     R1,#+1
   \   00000018   0xF604 0x0028      ADDW     R0,R4,#+2088
   \   0000001C   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   00000020   0x9001             STR      R0,[SP, #+4]
    520          	/*No separate task for BSD*/
    521          	bsdInitParam.bsdTskStack = NULL;
   \   00000022   0x2000             MOVS     R0,#+0
   \   00000024   0x9002             STR      R0,[SP, #+8]
    522          	bsdInitParam.bsdTskStackSize = 0;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x9003             STR      R0,[SP, #+12]
    523          	bsdInitParam.bsdTskPrio = 0;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x9004             STR      R0,[SP, #+16]
    524          	
    525          	GsnNwif_BsdInitialize(&pAppCtx->bsdCtx, &bsdInitParam);
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0xF604 0x00A8      ADDW     R0,R4,#+2216
   \   00000034   0x.... 0x....      BL       GsnNwif_BsdInitialize
    526          }
   \   00000038   0xB005             ADD      SP,SP,#+20
   \   0000003A   0xBD30             POP      {R4,R5,PC}       ;; return
    527          

   \                                 In section .text, align 2, keep-with-next
    528          PRIVATE VOID
    529          App_WpaSupplicantInit(APP_MAIN_CTX_T * pAppCtx)
    530          {
   \                     App_WpaSupplicantInit:
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    531          	GSN_WDD_WPA_SUP_INIT_PARAM_T param;
    532          	param.pWddMsgHdlr = &pAppCtx->wddMsgHdlrCtx;
   \   00000004   0xF200 0x7034      ADDW     R0,R0,#+1844
   \   00000008   0x9000             STR      R0,[SP, #+0]
    533          	param.randomNumSeed = NULL;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9001             STR      R0,[SP, #+4]
    534              // fix for RNG....
    535              RTC_TRNG_OSC_STOP_N_F_SET(RTC);
   \   0000000E   0x.... 0x....      LDR.W    R0,??DataTable25_26  ;; 0x41000078
   \   00000012   0x6800             LDR      R0,[R0, #+0]
   \   00000014   0xF050 0x0001      ORRS     R0,R0,#0x1
   \   00000018   0x.... 0x....      LDR.W    R1,??DataTable25_26  ;; 0x41000078
   \   0000001C   0x6008             STR      R0,[R1, #+0]
    536          	GsnWdd_WpaSupplicantInit(&param);
   \   0000001E   0xA800             ADD      R0,SP,#+0
   \   00000020   0x.... 0x....      BL       GsnWdd_WpaSupplicantInit
    537          }
   \   00000024   0xBD07             POP      {R0-R2,PC}       ;; return
    538          

   \                                 In section .text, align 2, keep-with-next
    539          PRIVATE VOID
    540          App_DefaultIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    541          {
   \                     App_DefaultIfInit:
   \   00000000   0xB580             PUSH     {R7,LR}
    542          	pIfInfo->macIfType = (GSN_INFRA_CLIENT == pAppCtx->config.networkConfig.networkMode)?
    543          							GSN_WIF_WLAN_NW_TYPE_STA : GSN_WIF_WLAN_NW_TYPE_AP;	
   \   00000002   0xF247 0x32F4      MOVW     R2,#+29684
   \   00000006   0x5C12             LDRB     R2,[R2, R0]
   \   00000008   0x2A01             CMP      R2,#+1
   \   0000000A   0xD101             BNE.N    ??App_DefaultIfInit_0
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0xE000             B.N      ??App_DefaultIfInit_1
   \                     ??App_DefaultIfInit_0:
   \   00000010   0x2202             MOVS     R2,#+2
   \                     ??App_DefaultIfInit_1:
   \   00000012   0x710A             STRB     R2,[R1, #+4]
    544          	
    545          	pIfInfo->macIfNum= APP_DEV_INDX_0;
   \   00000014   0x2200             MOVS     R2,#+0
   \   00000016   0x600A             STR      R2,[R1, #+0]
    546          	App_IfInit(pAppCtx, pIfInfo);
   \   00000018   0x.... 0x....      BL       App_IfInit
    547          }
   \   0000001C   0xBD01             POP      {R0,PC}          ;; return
    548          
    549          /*Thre may be multiple interfaces. each interfce will have its own wif, wdd and Nwif context*/

   \                                 In section .text, align 2, keep-with-next
    550          PRIVATE VOID
    551          App_IfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    552          {
   \                     App_IfInit:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    553          	/* Wif init*/
    554          	App_WifInit(pAppCtx, pIfInfo);
   \   00000006   0x0029             MOVS     R1,R5
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       App_WifInit
    555          #if 0
    556          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
    557          	{
    558          		/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
    559          		App_InterfaceStart(pAppCtx, pIfInfo);
    560          	}
    561          #endif
    562          	/* Wdd init*/
    563          	App_WddInit(pAppCtx, pIfInfo);
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       App_WddInit
    564          		
    565          	/* Nw interface init*/
    566          	App_NwIfInit(pAppCtx, pIfInfo);
   \   00000016   0x0029             MOVS     R1,R5
   \   00000018   0x0020             MOVS     R0,R4
   \   0000001A   0x.... 0x....      BL       App_NwIfInit
    567          	
    568          }
   \   0000001E   0xBD31             POP      {R0,R4,R5,PC}    ;; return
    569          
    570          /*Thre may be multiple interfaces. each interfce will have its own wif, wdd and Nwif context*/

   \                                 In section .text, align 2, keep-with-next
    571          VOID
    572          App_IfReinit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    573          {
   \                     App_IfReinit:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    574          	GSN_WIF_RE_INIT_PARAM_T wifReinitParam;
    575          	GSN_WDD_REINIT_PARAM_T wddReinitParam;
    576          	GSN_NWIF_REINIT_PARAMS_T nwifReinitParam = {0};
   \   00000008   0x.... 0x....      LDR.W    R0,??DataTable25_27
   \   0000000C   0x6800             LDR      R0,[R0, #+0]
   \   0000000E   0x9000             STR      R0,[SP, #+0]
    577          	
    578          	/* Close the interface*/
    579          	
    580          	/* Wif reinitialize*/
    581          	wifReinitParam.macIfNum = pIfInfo->macIfNum;
   \   00000010   0x6828             LDR      R0,[R5, #+0]
   \   00000012   0x9002             STR      R0,[SP, #+8]
    582          	wifReinitParam.macIfType = pIfInfo->macIfType;
   \   00000014   0x7928             LDRB     R0,[R5, #+4]
   \   00000016   0xF88D 0x000C      STRB     R0,[SP, #+12]
    583          	
    584          	GsnWif_Reinit(&pIfInfo->wifCtx, &wifReinitParam);
   \   0000001A   0xA902             ADD      R1,SP,#+8
   \   0000001C   0xF115 0x0008      ADDS     R0,R5,#+8
   \   00000020   0x.... 0x....      BL       GsnWif_Reinit
    585          
    586          	/*Open the interface. Need to open the interface after wdd and nwif initialisations?*/
    587          	App_InterfaceStart(pAppCtx, pIfInfo);
   \   00000024   0x0029             MOVS     R1,R5
   \   00000026   0x0020             MOVS     R0,R4
   \   00000028   0x.... 0x....      BL       App_InterfaceStart
    588          
    589          	/* Wdd init*/
    590              wddReinitParam.wlanNwType = wifReinitParam.macIfType = pIfInfo->macIfType;
   \   0000002C   0x7928             LDRB     R0,[R5, #+4]
   \   0000002E   0xF88D 0x000C      STRB     R0,[SP, #+12]
   \   00000032   0xF88D 0x0004      STRB     R0,[SP, #+4]
    591          	GsnWdd_Reinit(&pIfInfo->wddCtx, &wddReinitParam);
   \   00000036   0xA901             ADD      R1,SP,#+4
   \   00000038   0xF515 0x60A3      ADDS     R0,R5,#+1304
   \   0000003C   0x.... 0x....      BL       GsnWdd_Reinit
    592          
    593          	/* Nw interface init*/
    594          	GsnNwIf_Reinit(&pIfInfo->nwifCtx, &nwifReinitParam);
   \   00000040   0xA900             ADD      R1,SP,#+0
   \   00000042   0xF605 0x2088      ADDW     R0,R5,#+2696
   \   00000046   0x.... 0x....      BL       GsnNwIf_Reinit
    595          
    596          	/*The below are the things that needs to be reconfigured once we change interface*/
    597          
    598          	/* set the min and max scan time msec */
    599              GsnWdd_ScanParamSet(&pAppCtx->if0.wddCtx,DEFAULT_CLI_MIN_SCAN_TIME, 
    600              						DEFAULT_CLI_MAX_SCAN_TIME, 0);
   \   0000004A   0x2300             MOVS     R3,#+0
   \   0000004C   0x2296             MOVS     R2,#+150
   \   0000004E   0x2196             MOVS     R1,#+150
   \   00000050   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   00000054   0x.... 0x....      BL       GsnWdd_ScanParamSet
    601          	
    602          }
   \   00000058   0xB005             ADD      SP,SP,#+20
   \   0000005A   0xBD30             POP      {R4,R5,PC}       ;; return
    603          

   \                                 In section .text, align 2, keep-with-next
    604          BOOL
    605          App_SoftTmrMmsgHandlr(void *pCtx, void *pMsg)
    606          {	
   \                     App_SoftTmrMmsgHandlr:
   \   00000000   0xB538             PUSH     {R3-R5,LR}
   \   00000002   0x0004             MOVS     R4,R0
   \   00000004   0x000D             MOVS     R5,R1
    607          	GsnSq_TaskMonitorStart(APP_CFG_SQ_SOFT_TMR_TASK_ID, *(( INT32* )pMsg ));
   \   00000006   0x6829             LDR      R1,[R5, #+0]
   \   00000008   0x2001             MOVS     R0,#+1
   \   0000000A   0x.... 0x....      BL       GsnSq_TaskMonitorStart
    608          	GsnSoftTmr_Run( pCtx, pMsg );
   \   0000000E   0x0029             MOVS     R1,R5
   \   00000010   0x0020             MOVS     R0,R4
   \   00000012   0x.... 0x....      BL       GsnSoftTmr_Run
    609          
    610          	GsnSq_TaskMonitorStop(APP_CFG_SQ_SOFT_TMR_TASK_ID);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       GsnSq_TaskMonitorStop
    611          	return 0;
   \   0000001C   0x2000             MOVS     R0,#+0
   \   0000001E   0xBD32             POP      {R1,R4,R5,PC}    ;; return
    612          }
    613          

   \                                 In section .text, align 2, keep-with-next
    614          PRIVATE VOID
    615          App_SoftTimerInit(APP_MAIN_CTX_T *pAppCtx)
    616          {	
   \                     App_SoftTimerInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB08C             SUB      SP,SP,#+48
   \   00000004   0x0004             MOVS     R4,R0
    617          	GSN_MSG_HANDLER_CFG_T cfg1 = {"Soft Tmr Msg Handler1", softTmrMsgHHdlrStack,
    618          					sizeof( softTmrMsgHHdlrStack ), 1, ( UINT8* )softTmrMsgHHdlrBuff,
    619          								sizeof( softTmrMsgHHdlrBuff ), 1};
   \   00000006   0xA804             ADD      R0,SP,#+16
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable25_28
   \   0000000C   0x221C             MOVS     R2,#+28
   \   0000000E   0x.... 0x....      BL       __aeabi_memcpy4
    620          
    621          	GsnMsgHandler_Create(&pAppCtx->softTmrMsgHdlrCtx, &cfg1, &pAppCtx->softTmrMsg,
    622          						 App_SoftTmrMmsgHandlr, NULL);
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x9000             STR      R0,[SP, #+0]
   \   00000016   0x.... 0x....      LDR.W    R3,??DataTable25_29
   \   0000001A   0xF514 0x62E6      ADDS     R2,R4,#+1840
   \   0000001E   0xA904             ADD      R1,SP,#+16
   \   00000020   0xF514 0x60C7      ADDS     R0,R4,#+1592
   \   00000024   0x.... 0x....      BL       GsnMsgHandler_Create
    623          	GsnSoftTmr_Init(0, &pAppCtx->softTmrMsgHdlrCtx);
   \   00000028   0xF514 0x61C7      ADDS     R1,R4,#+1592
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x.... 0x....      BL       GsnSoftTmr_Init
    624          	GsnTod_Init(GSN_SYS_TIME_OFFSET_LOC_GET());
   \   00000032   0x.... 0x....      BL       GSN_SYS_TIME_OFFSET_LOC_GET
   \   00000036   0x.... 0x....      BL       GsnTod_Init
    625          	/* Stop ThreadX sysTick and start soft Timer sysTick */ 
    626              SysTick->CTRL = 0;
   \   0000003A   0x.... 0x....      LDR.W    R0,??DataTable25_30  ;; 0xe000e010
   \   0000003E   0x2100             MOVS     R1,#+0
   \   00000040   0x6001             STR      R1,[R0, #+0]
    627              pSysTickTmrHndl = GsnSoftTmr_Start(&sysTickTmr, GSN_SOFT_TMR_PERIODIC, 0,
    628                                    MSEC_TO_SYSTIME(100), App_SysTickCb, NULL);
   \   00000042   0x2000             MOVS     R0,#+0
   \   00000044   0x9003             STR      R0,[SP, #+12]
   \   00000046   0x.... 0x....      LDR.W    R0,??DataTable25_31
   \   0000004A   0x9002             STR      R0,[SP, #+8]
   \   0000004C   0xF640 0x40CC      MOVW     R0,#+3276
   \   00000050   0x2100             MOVS     R1,#+0
   \   00000052   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   00000056   0x2200             MOVS     R2,#+0
   \   00000058   0x2300             MOVS     R3,#+0
   \   0000005A   0x2101             MOVS     R1,#+1
   \   0000005C   0x.... 0x....      LDR.W    R0,??DataTable25_32
   \   00000060   0x.... 0x....      BL       GsnSoftTmr_Start
   \   00000064   0x.... 0x....      LDR.W    R1,??DataTable25_33
   \   00000068   0x6008             STR      R0,[R1, #+0]
    629          }
   \   0000006A   0xB00C             ADD      SP,SP,#+48
   \   0000006C   0xBD10             POP      {R4,PC}          ;; return
    630          

   \                                 In section .text, align 2, keep-with-next
    631          PRIVATE VOID App_InterfaceStartCb(VOID* ctx, GSN_STATUS status)
    632          {
   \                     App_InterfaceStartCb:
   \   00000000   0xB580             PUSH     {R7,LR}
    633          	App_UnLock();
   \   00000002   0x.... 0x....      BL       App_UnLock
    634          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    635          PRIVATE VOID App_InterfaceStopCb(VOID* ctx, GSN_STATUS status)
    636          {
   \                     App_InterfaceStopCb:
   \   00000000   0xB580             PUSH     {R7,LR}
    637          	App_UnLock();
   \   00000002   0x.... 0x....      BL       App_UnLock
    638          }
   \   00000006   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .text, align 2, keep-with-next
    639          VOID
    640          App_InterfaceStart(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    641          {
   \                     App_InterfaceStart:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB087             SUB      SP,SP,#+28
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    642          	GSN_SYS_CTL_IF_START_REQ_T ifcStartReq;
    643          
    644          	/*Create syncronisation semaphore*/
    645          	App_CreateLock();
   \   00000008   0x.... 0x....      BL       App_CreateLock
    646          	ifcStartReq.macIfNum = pIfInfo->macIfNum;
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    647          	ifcStartReq.macIfType = pIfInfo->macIfType;
   \   00000012   0x7928             LDRB     R0,[R5, #+4]
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
    648          	ifcStartReq.wlanApNumSta = 8;
   \   00000018   0x2008             MOVS     R0,#+8
   \   0000001A   0xF88D 0x0003      STRB     R0,[SP, #+3]
    649          	ifcStartReq.wlanStaType= GSN_SYS_CTL_STA_TYPE_LSSTA;
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0xF88D 0x0002      STRB     R0,[SP, #+2]
    650          	ifcStartReq.dTxRdyQFrameTO = 0;
   \   00000024   0x2000             MOVS     R0,#+0
   \   00000026   0x9001             STR      R0,[SP, #+4]
    651          	GsnSysCtl_IfStartReq(&pAppCtx->sysCtlCtx, &ifcStartReq, App_InterfaceStartCb, NULL);
   \   00000028   0x2300             MOVS     R3,#+0
   \   0000002A   0x.... 0x....      LDR.W    R2,??DataTable25_34
   \   0000002E   0xA900             ADD      R1,SP,#+0
   \   00000030   0xF514 0x6094      ADDS     R0,R4,#+1184
   \   00000034   0x.... 0x....      BL       GsnSysCtl_IfStartReq
    652          	App_WaitOnLock();
   \   00000038   0x.... 0x....      BL       App_WaitOnLock
    653          }
   \   0000003C   0xB007             ADD      SP,SP,#+28
   \   0000003E   0xBD30             POP      {R4,R5,PC}       ;; return

   \                                 In section .text, align 2, keep-with-next
    654          VOID
    655          App_InterfaceStop(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    656          {
   \                     App_InterfaceStop:
   \   00000000   0xB530             PUSH     {R4,R5,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x000D             MOVS     R5,R1
    657          	GSN_SYS_CTL_IF_STOP_PARAM_T ifcStopParam;
    658          	/*Create syncronisation semaphore*/
    659          	App_CreateLock();
   \   00000008   0x.... 0x....      BL       App_CreateLock
    660          
    661          	ifcStopParam.macIfNum = pIfInfo->macIfNum;
   \   0000000C   0x6828             LDR      R0,[R5, #+0]
   \   0000000E   0xF88D 0x0000      STRB     R0,[SP, #+0]
    662          	ifcStopParam.macIfType = pIfInfo->macIfType;
   \   00000012   0x7928             LDRB     R0,[R5, #+4]
   \   00000014   0xF88D 0x0001      STRB     R0,[SP, #+1]
    663          	ifcStopParam.waitPeriod = 0;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x9001             STR      R0,[SP, #+4]
    664          	GsnSysCtl_IfStopReq(&pAppCtx->sysCtlCtx, &ifcStopParam, App_InterfaceStopCb, NULL);
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x.... 0x....      LDR.W    R2,??DataTable25_35
   \   00000022   0xA900             ADD      R1,SP,#+0
   \   00000024   0xF514 0x6094      ADDS     R0,R4,#+1184
   \   00000028   0x.... 0x....      BL       GsnSysCtl_IfStopReq
    665          	
    666          	App_WaitOnLock();
   \   0000002C   0x.... 0x....      BL       App_WaitOnLock
    667          }
   \   00000030   0xBD37             POP      {R0-R2,R4,R5,PC}  ;; return
    668          

   \                                 In section .text, align 2, keep-with-next
    669          PRIVATE VOID
    670          App_WifInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    671          {
   \                     App_WifInit:
   \   00000000   0xB5E0             PUSH     {R5-R7,LR}
   \   00000002   0x000A             MOVS     R2,R1
    672          	GSN_WIF_INIT_PARAM_T wifInitParam;
    673          
    674          	/*Initialise wif module*/
    675          	wifInitParam.macIfNum = pIfInfo->macIfNum;
   \   00000004   0x6811             LDR      R1,[R2, #+0]
   \   00000006   0x9100             STR      R1,[SP, #+0]
    676          	wifInitParam.macIfType = pIfInfo->macIfType;
   \   00000008   0x7911             LDRB     R1,[R2, #+4]
   \   0000000A   0xF88D 0x1004      STRB     R1,[SP, #+4]
    677          	wifInitParam.pHiCtx= &pAppCtx->hiCtx;
   \   0000000E   0x300C             ADDS     R0,R0,#+12
   \   00000010   0x9002             STR      R0,[SP, #+8]
    678          
    679          	/*Register for interface init*/
    680          	GsnWif_Init(&pIfInfo->wifCtx, &wifInitParam);
   \   00000012   0xA900             ADD      R1,SP,#+0
   \   00000014   0xF112 0x0008      ADDS     R0,R2,#+8
   \   00000018   0x.... 0x....      BL       GsnWif_Init
    681          }
   \   0000001C   0xBD07             POP      {R0-R2,PC}       ;; return
    682          
    683          #ifdef APP_OPT_PS_IN_PSPOLL
    684          UINT32 dabRcvd = 0;
    685          extern UINT32 initDone;
    686          VOID 
    687          App_DabindCb(VOID *ctx)
    688          {
    689              APP_MAIN_CTX_T *pAppCtx = (APP_MAIN_CTX_T *)ctx;
    690              AppDbg_Printf("D");
    691              if(initDone)
    692              {
    693          	    if(!dabRcvd)
    694          	    {
    695          	        GsnPwrMgmt_StdbyEnable(&pAppCtx->pwrMgmtCtx);
    696          	        dabRcvd = 1;
    697          	    }
    698              }
    699          	//AppMainCtx_TaskNotify(APP_EVENT_DAB_INDIACTION, 0);	
    700          }
    701          
    702          PRIVATE VOID 
    703          App_synTimeOutCb(VOID* context,
    704              GSN_SOFT_TMR_HANDLE_T  timerHandle )
    705          {
    706              GsnPwrMgmt_StdbyEnable(&appCtx.pwrMgmtCtx);
    707          }
    708          
    709          PRIVATE VOID
    710          App_ArpStbyDisableTimeOutCb(VOID* context,
    711              GSN_SOFT_TMR_HANDLE_T  timerHandle)
    712          {
    713              GsnPwrMgmt_StdbyEnable(&appCtx.pwrMgmtCtx);
    714          }
    715          
    716          #endif
    717          

   \                                 In section .text, align 2, keep-with-next
    718          PRIVATE VOID 
    719          App_DfltWlanCfgSet(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    720          {
   \                     App_DfltWlanCfgSet:
   \   00000000   0xB51F             PUSH     {R0-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    721          	GSN_WDD_STA_PS_CFG_SET_PARAM_T pscfg;
    722          
    723              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   00000004   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000008   0x2801             CMP      R0,#+1
   \   0000000A   0xD037             BEQ.N    ??App_DfltWlanCfgSet_0
    724          	{
    725          		/* Note : Set this before Nwif init() is done. Initialise mac address*/
    726          		GsnWdd_PhyAddrSet(&pAppCtx->if0.wddCtx, (INT8 *)pAppCtx->config.networkConfig.macAddr, 1);
   \   0000000C   0x2201             MOVS     R2,#+1
   \   0000000E   0xF504 0x41E6      ADD      R1,R4,#+29440
   \   00000012   0x31F5             ADDS     R1,R1,#+245
   \   00000014   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   00000018   0x.... 0x....      BL       GsnWdd_PhyAddrSet
    727          		GsnNwif_UpdatePhyAddr(&pAppCtx->if0.nwifCtx);
   \   0000001C   0xF504 0x5098      ADD      R0,R4,#+4864
   \   00000020   0x3038             ADDS     R0,R0,#+56
   \   00000022   0x.... 0x....      BL       GsnNwif_UpdatePhyAddr
    728          
    729          		pscfg.wakeupType = GSN_WIF_WLAN_STA_PS_WAKEUP_DTIM;
   \   00000026   0x2001             MOVS     R0,#+1
   \   00000028   0xF88D 0x0000      STRB     R0,[SP, #+0]
    730          		pscfg.wakeupInterval = 5;
   \   0000002C   0x2005             MOVS     R0,#+5
   \   0000002E   0xF8AD 0x0002      STRH     R0,[SP, #+2]
    731          		pscfg.listenIntervalAssoc = 600;
   \   00000032   0xF44F 0x7016      MOV      R0,#+600
   \   00000036   0xF8AD 0x0004      STRH     R0,[SP, #+4]
    732          		pscfg.dataRxType = GSN_WIF_WLAN_STA_PS_DATA_RX_TYPE_PS_POLL;	
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x0006      STRB     R0,[SP, #+6]
    733          		pscfg.uapsdEnable = 0;
   \   00000040   0x2000             MOVS     R0,#+0
   \   00000042   0xF88D 0x0007      STRB     R0,[SP, #+7]
    734                  pscfg.txAtTbttWakeup = 0;
   \   00000046   0x2000             MOVS     R0,#+0
   \   00000048   0xF88D 0x0008      STRB     R0,[SP, #+8]
    735                  pscfg.beaconWaitTimeout = 10;
   \   0000004C   0x200A             MOVS     R0,#+10
   \   0000004E   0xF8AD 0x000A      STRH     R0,[SP, #+10]
    736                  pscfg.activeToOffTimeout = 0;
   \   00000052   0x2000             MOVS     R0,#+0
   \   00000054   0xF8AD 0x000C      STRH     R0,[SP, #+12]
    737          		GsnWdd_RadioPowerSaveCfgSet(&pAppCtx->if0.wddCtx, &pscfg);
   \   00000058   0xA900             ADD      R1,SP,#+0
   \   0000005A   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   0000005E   0x.... 0x....      BL       GsnWdd_RadioPowerSaveCfgSet
    738          
    739          		GsnWdd_Ioctl(&pAppCtx->if0.wddCtx,GSN_WDD_IOCTL_MCAST_RX_ON, NULL);
   \   00000062   0x2200             MOVS     R2,#+0
   \   00000064   0x2100             MOVS     R1,#+0
   \   00000066   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   0000006A   0x.... 0x....      BL       GsnWdd_Ioctl
    740          
    741          #ifdef APP_OPT_PS_IN_PSPOLL
    742          		/**/
    743          		GsnWdd_Ioctl(&pAppCtx->if0.wddCtx,GSN_WDD_IOCTL_RX_IEEEPS_MODE_ON, NULL);
    744          #else
    745          		GsnWdd_Ioctl(&pAppCtx->if0.wddCtx,GSN_WDD_IOCTL_RX_ACTIVE_MODE_ON, NULL);
   \   0000006E   0x2200             MOVS     R2,#+0
   \   00000070   0x2102             MOVS     R1,#+2
   \   00000072   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   00000076   0x.... 0x....      BL       GsnWdd_Ioctl
   \   0000007A   0xE00B             B.N      ??App_DfltWlanCfgSet_1
    746          #endif
    747          	}
    748          	else
    749          	{/*It's NORMAL BOOT*/
    750          		GsnWdd_PhyAddrSet(&pAppCtx->if0.wddCtx, (INT8 *)pAppCtx->config.networkConfig.macAddr, 0);
   \                     ??App_DfltWlanCfgSet_0:
   \   0000007C   0x2200             MOVS     R2,#+0
   \   0000007E   0xF504 0x41E6      ADD      R1,R4,#+29440
   \   00000082   0x31F5             ADDS     R1,R1,#+245
   \   00000084   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   00000088   0x.... 0x....      BL       GsnWdd_PhyAddrSet
    751          		GsnWdd_AssocStatusSet(&pAppCtx->if0.wddCtx);
   \   0000008C   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   00000090   0x.... 0x....      BL       GsnWdd_AssocStatusSet
    752          	}
    753          
    754          	/* set the min and max scan time msec */
    755              GsnWdd_ScanParamSet(&pAppCtx->if0.wddCtx,DEFAULT_CLI_MIN_SCAN_TIME, 
    756              						DEFAULT_CLI_MAX_SCAN_TIME, 0);
   \                     ??App_DfltWlanCfgSet_1:
   \   00000094   0x2300             MOVS     R3,#+0
   \   00000096   0x2296             MOVS     R2,#+150
   \   00000098   0x2196             MOVS     R1,#+150
   \   0000009A   0xF604 0x50C8      ADDW     R0,R4,#+3528
   \   0000009E   0x.... 0x....      BL       GsnWdd_ScanParamSet
    757          
    758          #ifdef APP_OPT_PS_IN_PSPOLL
    759          	GsnWdd_DabDoneIndCbReg(&pAppCtx->if0.wddCtx, App_DabindCb, pAppCtx);
    760          #else
    761          	pAppCtx->if0.wddCtx.ind.dabDoneIndCb = NULL;
   \   000000A2   0x2000             MOVS     R0,#+0
   \   000000A4   0xF8C4 0x0E34      STR      R0,[R4, #+3636]
    762          	pAppCtx->if0.wddCtx.ind.dabDoneIndCbCtx = NULL;
   \   000000A8   0x2000             MOVS     R0,#+0
   \   000000AA   0xF8C4 0x0E38      STR      R0,[R4, #+3640]
    763          #endif
    764          }
   \   000000AE   0xBD1F             POP      {R0-R4,PC}       ;; return
    765          

   \                                 In section .text, align 2, keep-with-next
    766          PRIVATE VOID
    767          App_WddInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    768          {
   \                     App_WddInit:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xB088             SUB      SP,SP,#+32
   \   00000004   0x0006             MOVS     R6,R0
   \   00000006   0x000C             MOVS     R4,R1
    769          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchMemInfo = App_RtcLatchMemInfoPtrGet();
   \   00000008   0x.... 0x....      BL       App_RtcLatchMemInfoPtrGet
    770          	GSN_WDD_INIT_PARAM_T wddInitParam;
    771          	GSN_WDD_INIT_FLAG_T initFlag = GSN_WDD_INIT_FLAG_NONE;
   \   0000000C   0x2500             MOVS     R5,#+0
    772          
    773          	/*Initialise WDD module*/
    774          	wddInitParam.wlanNwType = pIfInfo->macIfType;
   \   0000000E   0x7921             LDRB     R1,[R4, #+4]
   \   00000010   0xF88D 0x1000      STRB     R1,[SP, #+0]
    775          	wddInitParam.pWddMsgHdlr = &pAppCtx->wddMsgHdlrCtx;
   \   00000014   0xF206 0x7134      ADDW     R1,R6,#+1844
   \   00000018   0x9101             STR      R1,[SP, #+4]
    776          	wddInitParam.pWifCtx = &pIfInfo->wifCtx;
   \   0000001A   0xF114 0x0108      ADDS     R1,R4,#+8
   \   0000001E   0x9102             STR      R1,[SP, #+8]
    777          	wddInitParam.pWddPersistInfo = &pAppRtcLtchMemInfo->ifc_1.wddRtcInfo;
   \   00000020   0xF510 0x708A      ADDS     R0,R0,#+276
   \   00000024   0x9003             STR      R0,[SP, #+12]
    778          	wddInitParam.pStats = &gsnWddStats;
   \   00000026   0x.... 0x....      LDR.W    R0,??DataTable25_36
   \   0000002A   0x9004             STR      R0,[SP, #+16]
    779              wddInitParam.pPmkCache  = NULL;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9005             STR      R0,[SP, #+20]
    780              wddInitParam.pmkCacheSize = 0;
   \   00000030   0x2000             MOVS     R0,#+0
   \   00000032   0x9006             STR      R0,[SP, #+24]
    781             
    782          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   00000034   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000038   0x2801             CMP      R0,#+1
   \   0000003A   0xD000             BEQ.N    ??App_WddInit_0
    783          	{
    784          		initFlag = GSN_WDD_INIT_FLAG_FIRST_BOOT;
   \   0000003C   0x2501             MOVS     R5,#+1
    785          	}
    786          	GsnWdd_Init(&pIfInfo->wddCtx, &wddInitParam, initFlag);
   \                     ??App_WddInit_0:
   \   0000003E   0x002A             MOVS     R2,R5
   \   00000040   0xB2D2             UXTB     R2,R2            ;; ZeroExt  R2,R2,#+24,#+24
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0xF514 0x60A3      ADDS     R0,R4,#+1304
   \   00000048   0x.... 0x....      BL       GsnWdd_Init
    787          
    788          }
   \   0000004C   0xB008             ADD      SP,SP,#+32
   \   0000004E   0xBD70             POP      {R4-R6,PC}       ;; return
    789          

   \                                 In section .text, align 2, keep-with-next
    790          BOOL 
    791          App_NwRecvFilter      (GSN_NWIF_CTX_T *pNwIf, UINT32 pktLen, GSN_ETHERNET_FRAME_T *pEthFrame)
    792          {
   \                     App_NwRecvFilter:
   \   00000000   0xB5F0             PUSH     {R4-R7,LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
   \   00000004   0x0004             MOVS     R4,R0
   \   00000006   0x0015             MOVS     R5,R2
    793              
    794          	UINT8 bcastAddr[] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000008   0xA800             ADD      R0,SP,#+0
   \   0000000A   0x.... 0x....      LDR.W    R1,??DataTable25_37
   \   0000000E   0xC90C             LDM      R1!,{R2,R3}
   \   00000010   0xC00C             STM      R0!,{R2,R3}
   \   00000012   0x3908             SUBS     R1,R1,#+8
   \   00000014   0x3808             SUBS     R0,R0,#+8
    795          		UINT16 protocol;
    796          		BOOL filterPass = FALSE;
   \   00000016   0x2600             MOVS     R6,#+0
    797          	
    798          		/* Get protocol type */
    799          		protocol = swap_16(pEthFrame->UpperProtocolType);
   \   00000018   0x89A8             LDRH     R0,[R5, #+12]
   \   0000001A   0xB280             UXTH     R0,R0            ;; ZeroExt  R0,R0,#+16,#+16
   \   0000001C   0x89A9             LDRH     R1,[R5, #+12]
   \   0000001E   0x0209             LSLS     R1,R1,#+8
   \   00000020   0xEA51 0x2710      ORRS     R7,R1,R0, LSR #+8
    800          		if(GSN_ETH_PROTO_TYPE_IP == protocol || GSN_ETH_PROTO_TYPE_ARP == protocol) 	
   \   00000024   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000026   0xF5B7 0x6F00      CMP      R7,#+2048
   \   0000002A   0xD004             BEQ.N    ??App_NwRecvFilter_0
   \   0000002C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000002E   0xF640 0x0006      MOVW     R0,#+2054
   \   00000032   0x4287             CMP      R7,R0
   \   00000034   0xD13D             BNE.N    ??App_NwRecvFilter_1
    801          		{
    802          			if(pNwIf->ipv4CfgStatus ==	GSN_NWIF_IPV4_CFG_DONE)
   \                     ??App_NwRecvFilter_0:
   \   00000036   0xF245 0x10DE      MOVW     R0,#+20958
   \   0000003A   0x5B00             LDRH     R0,[R0, R4]
   \   0000003C   0x2802             CMP      R0,#+2
   \   0000003E   0xD121             BNE.N    ??App_NwRecvFilter_2
    803          			{
    804          				/*All Broadcast Packets other than the DHCP and ARP are dropped*/				
    805          				if(0 == memcmp(pEthFrame->DestinationAddress.array, bcastAddr, GSN_WLAN_MAC_ADDR_LEN)) 
   \   00000040   0x2206             MOVS     R2,#+6
   \   00000042   0xA900             ADD      R1,SP,#+0
   \   00000044   0x0028             MOVS     R0,R5
   \   00000046   0x.... 0x....      BL       memcmp
   \   0000004A   0x2800             CMP      R0,#+0
   \   0000004C   0xD10E             BNE.N    ??App_NwRecvFilter_3
    806          				{
    807          					if(!GsnNwif_IsDhcpPkt(pEthFrame, protocol) && 
                 					    ^
Warning[Pe223]: function "GsnNwif_IsDhcpPkt" declared implicitly
    808          						!GsnNwif_IsArpReqstPkt(pNwIf, pEthFrame, protocol))
                 						 ^
Warning[Pe223]: function "GsnNwif_IsArpReqstPkt" declared implicitly
   \   0000004E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000050   0x0039             MOVS     R1,R7
   \   00000052   0x0028             MOVS     R0,R5
   \   00000054   0x.... 0x....      BL       GsnNwif_IsDhcpPkt
   \   00000058   0x2800             CMP      R0,#+0
   \   0000005A   0xD107             BNE.N    ??App_NwRecvFilter_3
   \   0000005C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000005E   0x003A             MOVS     R2,R7
   \   00000060   0x0029             MOVS     R1,R5
   \   00000062   0x0020             MOVS     R0,R4
   \   00000064   0x.... 0x....      BL       GsnNwif_IsArpReqstPkt
   \   00000068   0x2800             CMP      R0,#+0
   \   0000006A   0xD03F             BEQ.N    ??App_NwRecvFilter_4
    809          					{
    810          						goto App_NwRecvFilterExit;
    811          					}
    812          #ifdef APP_OPT_PS_IN_PSPOLL
    813          					if(GsnNwif_IsArpReqstPkt(pNwIf, pEthFrame, protocol))
    814          					{
    815          						GsnPwrMgmt_StdbyDisable(&appCtx.pwrMgmtCtx);
    816          						appCtx.arpStbyDisableTmrHndl = GsnSoftTmr_Start(&appCtx.arpStbyDisableTmr, GSN_SOFT_TMR_ONESHOT, 0, MSEC_TO_SYSTIME(1000), App_ArpStbyDisableTimeOutCb, &appCtx);
    817          					}
    818          #endif
    819          				}
    820          				/* It's Unicast Packet OR ARP/DHCP Broadcast packet*/
    821          				if(GSN_ETH_PROTO_TYPE_IP == protocol)
   \                     ??App_NwRecvFilter_3:
   \   0000006C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000006E   0xF5B7 0x6F00      CMP      R7,#+2048
   \   00000072   0xD11C             BNE.N    ??App_NwRecvFilter_5
    822          				{
    823          					/* All ICMP Packets other than ICMP_ECHO Packets are dropped*/
    824          					if ((GSN_NW_ICMP_PROTO == *(pEthFrame->Data + GSN_NW_IP_PROTO_OFFSET))
    825          						&& (GSN_NW_ICMP_ECHO != *(pEthFrame->Data + GSN_NW_IP_HEADER_LEN)))
   \   00000074   0x7DE8             LDRB     R0,[R5, #+23]
   \   00000076   0x2801             CMP      R0,#+1
   \   00000078   0xD119             BNE.N    ??App_NwRecvFilter_5
   \   0000007A   0xF895 0x0022      LDRB     R0,[R5, #+34]
   \   0000007E   0x2808             CMP      R0,#+8
   \   00000080   0xD015             BEQ.N    ??App_NwRecvFilter_5
    826          					{
    827          						goto App_NwRecvFilterExit;
   \   00000082   0xE033             B.N      ??App_NwRecvFilter_4
    828          					}		
    829          				}
    830          #ifdef APP_OPT_PS_IN_PSPOLL
    831          				if(GsnNwif_Is1stHttpSynPkt(pEthFrame, protocol))
    832          				{
    833          				    AppDbg_Printf("*");
    834          				    GsnPwrMgmt_StdbyDisable(&appCtx.pwrMgmtCtx);
    835          				    if(!initDone)
    836          				    	GsnOsal_SemAcquire(&appCtx.synSyncSem, GSN_OSAL_WAIT_FOREVER);
    837          				    appCtx.synTimeOutHndl = GsnSoftTmr_Start(&appCtx.synTimeOut, GSN_SOFT_TMR_ONESHOT, 0, MSEC_TO_SYSTIME(10000), App_synTimeOutCb, &appCtx);
    838          				}
    839          #endif
    840          			}
    841          			else if(pNwIf->ipv4CfgStatus ==  GSN_NWIF_IPV4_CFG_IN_PROGRESS)
   \                     ??App_NwRecvFilter_2:
   \   00000084   0xF245 0x10DE      MOVW     R0,#+20958
   \   00000088   0x5B00             LDRH     R0,[R0, R4]
   \   0000008A   0x2801             CMP      R0,#+1
   \   0000008C   0xD10E             BNE.N    ??App_NwRecvFilter_6
    842          			{		
    843          				if(!GsnNwif_IsDhcpPkt(pEthFrame, protocol) && 
                 				    ^
Warning[Pe223]: function "GsnNwif_IsDhcpPkt" declared implicitly
    844          					!GsnNwif_IsArpRespPkt(pEthFrame, protocol))
                 					 ^
Warning[Pe223]: function "GsnNwif_IsArpRespPkt" declared implicitly
   \   0000008E   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   00000090   0x0039             MOVS     R1,R7
   \   00000092   0x0028             MOVS     R0,R5
   \   00000094   0x.... 0x....      BL       GsnNwif_IsDhcpPkt
   \   00000098   0x2800             CMP      R0,#+0
   \   0000009A   0xD108             BNE.N    ??App_NwRecvFilter_5
   \   0000009C   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   0000009E   0x0039             MOVS     R1,R7
   \   000000A0   0x0028             MOVS     R0,R5
   \   000000A2   0x.... 0x....      BL       GsnNwif_IsArpRespPkt
   \   000000A6   0x2800             CMP      R0,#+0
   \   000000A8   0xD101             BNE.N    ??App_NwRecvFilter_5
    845          				{
    846          					goto App_NwRecvFilterExit;
   \   000000AA   0xE01F             B.N      ??App_NwRecvFilter_4
    847          				}
    848          			}
    849          			else
    850          			{
    851          				/*Interface Configuration (IP Address Asignment) niether done nor in progress */
    852          				goto App_NwRecvFilterExit;
   \                     ??App_NwRecvFilter_6:
   \   000000AC   0xE01E             B.N      ??App_NwRecvFilter_4
    853          			}
    854          			
    855          			filterPass = TRUE;
   \                     ??App_NwRecvFilter_5:
   \   000000AE   0x2601             MOVS     R6,#+1
   \   000000B0   0xE01C             B.N      ??App_NwRecvFilter_4
    856          		}
    857          		else if(GSN_ETH_PROTO_TYPE_IPv6 == protocol)
   \                     ??App_NwRecvFilter_1:
   \   000000B2   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000B4   0xF248 0x60DD      MOVW     R0,#+34525
   \   000000B8   0x4287             CMP      R7,R0
   \   000000BA   0xD10C             BNE.N    ??App_NwRecvFilter_7
    858          		{
    859          			if(0xFF == *(pEthFrame->Data + GSN_NW_IPV6_DEST_ADDR_OFFSET))
   \   000000BC   0xF895 0x0026      LDRB     R0,[R5, #+38]
   \   000000C0   0x28FF             CMP      R0,#+255
   \   000000C2   0xD106             BNE.N    ??App_NwRecvFilter_8
    860          			{/*A multicast packet*/
    861          				filterPass = GsnNwif_IPv6MulticastFilter(pEthFrame, protocol);
                 				             ^
Warning[Pe223]: function "GsnNwif_IPv6MulticastFilter" declared implicitly
   \   000000C4   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000C6   0x0039             MOVS     R1,R7
   \   000000C8   0x0028             MOVS     R0,R5
   \   000000CA   0x.... 0x....      BL       GsnNwif_IPv6MulticastFilter
   \   000000CE   0x0006             MOVS     R6,R0
   \   000000D0   0xE00C             B.N      ??App_NwRecvFilter_4
    862          			}
    863          			else
    864          			{/* A unicast packet. Allow all the unicast packets*/
    865          				filterPass = TRUE;
   \                     ??App_NwRecvFilter_8:
   \   000000D2   0x2601             MOVS     R6,#+1
   \   000000D4   0xE00A             B.N      ??App_NwRecvFilter_4
    866          			}
    867          		}
    868          		else if (GSN_ETH_PROTO_TYPE_EAPOL == protocol || GSN_ETH_PROTO_TYPE_RSN_PREAUTH == protocol)		
   \                     ??App_NwRecvFilter_7:
   \   000000D6   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000D8   0xF648 0x008E      MOVW     R0,#+34958
   \   000000DC   0x4287             CMP      R7,R0
   \   000000DE   0xD004             BEQ.N    ??App_NwRecvFilter_9
   \   000000E0   0xB2BF             UXTH     R7,R7            ;; ZeroExt  R7,R7,#+16,#+16
   \   000000E2   0xF648 0x008C      MOVW     R0,#+34956
   \   000000E6   0x4287             CMP      R7,R0
   \   000000E8   0xD100             BNE.N    ??App_NwRecvFilter_4
    869          		{
    870          			filterPass = TRUE;
   \                     ??App_NwRecvFilter_9:
   \   000000EA   0x2601             MOVS     R6,#+1
    871          			goto App_NwRecvFilterExit;
    872          		}
    873          	
    874          App_NwRecvFilterExit:
    875          		
    876          		return filterPass;
   \                     ??App_NwRecvFilter_4:
   \   000000EC   0x0030             MOVS     R0,R6
   \   000000EE   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000F0   0xBDFE             POP      {R1-R7,PC}       ;; return
    877              
    878          }

   \                                 In section .text, align 2, keep-with-next
    879          PRIVATE VOID
    880          App_NwIfInit(APP_MAIN_CTX_T *pAppCtx, APP_IF_INFO_T *pIfInfo)
    881          {
   \                     App_NwIfInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB090             SUB      SP,SP,#+64
   \   00000004   0x000C             MOVS     R4,R1
    882          	GSN_NWIF_INIT_PARAMS_T param;
    883          
    884          	param.flags = (GSN_NWIF_FLAGS_T)(GSN_NWIF_FLG_ARP_ENABLE |	GSN_NWIF_FLG_DHCP_CLIENT_ENABLE |
    885          				  GSN_NWIF_FLG_DNS_CLIENT_ENABLE | GSN_NWIF_FLG_ICMP_ENABLE | GSN_NWIF_FLG_IGMP_ENABLE);
   \   00000006   0x211F             MOVS     R1,#+31
   \   00000008   0xF88D 0x1000      STRB     R1,[SP, #+0]
    886          	param.nwIfName = "station";
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable25_38
   \   00000010   0x9101             STR      R1,[SP, #+4]
    887              param.pNwCtx = &pAppCtx->nwCtx;
   \   00000012   0xF600 0x0128      ADDW     R1,R0,#+2088
   \   00000016   0x9102             STR      R1,[SP, #+8]
    888          	param.pL2Dev = (GSN_L2_DEV_T *)&pIfInfo->wddCtx;
   \   00000018   0xF204 0x5118      ADDW     R1,R4,#+1304
   \   0000001C   0x9103             STR      R1,[SP, #+12]
    889          
    890              /*[TO DO]*/ 			/**< Power management object for power save */
    891          	param.mtu = GSN_NW_ETHER_MTU;
   \   0000001E   0xF240 0x51DC      MOVW     R1,#+1500
   \   00000022   0x9104             STR      R1,[SP, #+16]
    892          	param.ipRecvFilter = App_NwRecvFilter;
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable25_39
   \   00000028   0x9105             STR      R1,[SP, #+20]
    893          	param.ipTskStackSize = APP_NWIF_IP_THREAD_STACK_SIZE;
   \   0000002A   0xF44F 0x5180      MOV      R1,#+4096
   \   0000002E   0x9107             STR      R1,[SP, #+28]
    894          	param.ipTskStack = &ipStack[0];
   \   00000030   0x.... 0x....      LDR.W    R1,??DataTable25_40
   \   00000034   0x9106             STR      R1,[SP, #+24]
    895          	param.ipTskPrio = APP_NWIF_IP_THREAD_PRIORITY;
   \   00000036   0x2105             MOVS     R1,#+5
   \   00000038   0x9108             STR      R1,[SP, #+32]
    896          	param.ipTskSysQualID = APP_CFG_SQ_IP_TASK_ID;
   \   0000003A   0x2105             MOVS     R1,#+5
   \   0000003C   0x9109             STR      R1,[SP, #+36]
    897          	param.ipTskSysQualTicks = APP_CFG_SQ_TICKS_FOR_IP_TASK;
   \   0000003E   0x211E             MOVS     R1,#+30
   \   00000040   0x910A             STR      R1,[SP, #+40]
    898          	/* Using pre created packet pool. A new paket pool can be created using
    899          	GsnNw_PktPoolCreate() and its handle can be given*/
    900          	param.pIpPktPoolHndl = GsnNw_PktPoolHndlGet(&pAppCtx->nwCtx, GSN_NW_SBUF_PKT_POOL);
   \   00000042   0x2100             MOVS     R1,#+0
   \   00000044   0xF600 0x0028      ADDW     R0,R0,#+2088
   \   00000048   0x.... 0x....      BL       GsnNw_PktPoolHndlGet
   \   0000004C   0x900B             STR      R0,[SP, #+44]
    901          
    902          
    903          	param.arpCacheSize = APP_NWIF_IP_THREAD_ARP_CACHE_SIZE;
   \   0000004E   0xF44F 0x7080      MOV      R0,#+256
   \   00000052   0x900D             STR      R0,[SP, #+52]
    904          	param.arpCache = &arpCache[0];
   \   00000054   0x....             LDR.N    R0,??DataTable25_41
   \   00000056   0x900C             STR      R0,[SP, #+48]
    905          	param.pStats = &gsnNwifStats;
   \   00000058   0x....             LDR.N    R0,??DataTable25_42
   \   0000005A   0x900E             STR      R0,[SP, #+56]
    906          	GsnNwIf_Init(&pIfInfo->nwifCtx, &param);
   \   0000005C   0xA900             ADD      R1,SP,#+0
   \   0000005E   0xF604 0x2088      ADDW     R0,R4,#+2696
   \   00000062   0x.... 0x....      BL       GsnNwIf_Init
    907          }
   \   00000066   0xB010             ADD      SP,SP,#+64
   \   00000068   0xBD10             POP      {R4,PC}          ;; return
    908          

   \                                 In section .text, align 2, keep-with-next
    909          VOID
    910          App_WlanRespTimeoutTmrCb( VOID* context,
    911              								GSN_SOFT_TMR_HANDLE_T  timerHandle )
    912          {
   \                     App_WlanRespTimeoutTmrCb:
   \   00000000   0xB510             PUSH     {R4,LR}
    913          	GSN_ASSERT(FALSE);
   \   00000002   0x.... 0x....      BL       GSN_SYS_RESET_INFO_LOCATION_GET
   \   00000006   0x0004             MOVS     R4,R0
   \   00000008   0x2053             MOVS     R0,#+83
   \   0000000A   0x....             LDR.N    R1,??DataTable25_43
   \   0000000C   0x2821             CMP      R0,#+33
   \   0000000E   0xD302             BCC.N    ??App_WlanRespTimeoutTmrCb_0
   \   00000010   0x1840             ADDS     R0,R0,R1
   \   00000012   0xF1B0 0x0120      SUBS     R1,R0,#+32
   \                     ??App_WlanRespTimeoutTmrCb_0:
   \   00000016   0x2220             MOVS     R2,#+32
   \   00000018   0x1D20             ADDS     R0,R4,#+4
   \   0000001A   0x.... 0x....      BL       memcpy
   \   0000001E   0xF240 0x3091      MOVW     R0,#+913
   \   00000022   0x6260             STR      R0,[R4, #+36]
   \   00000024   0x2002             MOVS     R0,#+2
   \   00000026   0x7020             STRB     R0,[R4, #+0]
   \   00000028   0x2002             MOVS     R0,#+2
   \   0000002A   0x7060             STRB     R0,[R4, #+1]
   \   0000002C   0x2010             MOVS     R0,#+16
   \   0000002E   0x70A0             STRB     R0,[R4, #+2]
   \   00000030   0x2002             MOVS     R0,#+2
   \   00000032   0x.... 0x....      BL       GsnSys_Reset
    914          }
   \   00000036   0xBD10             POP      {R4,PC}          ;; return
    915          

   \                                 In section .text, align 2, keep-with-next
    916          PRIVATE VOID
    917          App_WlanBootIndCb(VOID *ctx, INT32 status)
    918          {
   \                     App_WlanBootIndCb:
   \   00000000   0xB580             PUSH     {R7,LR}
    919          	GsnSoftTmr_Stop(wlanRespTimeoutTmrHndl);
   \   00000002   0x....             LDR.N    R0,??DataTable25_44
   \   00000004   0x6800             LDR      R0,[R0, #+0]
   \   00000006   0x.... 0x....      BL       GsnSoftTmr_Stop
    920          	/**/
    921          	App_UnLock();
   \   0000000A   0x.... 0x....      BL       App_UnLock
    922          }
   \   0000000E   0xBD01             POP      {R0,PC}          ;; return
    923          

   \                                 In section .text, align 2, keep-with-next
    924          PRIVATE GSN_STATUS
    925          App_WlanBootReq(APP_MAIN_CTX_T *pAppCtx)
    926          {
   \                     App_WlanBootReq:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   \   00000002   0xF5AD 0x7D0E      SUB      SP,SP,#+568
   \   00000006   0x0004             MOVS     R4,R0
    927          	GSN_SYS_CTL_BOOT_REQ_PARAM_T bootReqParm;
    928          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLtchMemInfo = App_RtcLatchMemInfoPtrGet();
   \   00000008   0x.... 0x....      BL       App_RtcLatchMemInfoPtrGet
   \   0000000C   0x0005             MOVS     R5,R0
    929          	APP_RTC_SECNDRY_MEM_INFO_T *pAppRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   \   0000000E   0x.... 0x....      BL       App_RtcSecMemInfoPtrGet
   \   00000012   0x0006             MOVS     R6,R0
    930              UINT8 *stdbyCtx;
    931              F_FILE *pFile;
    932              UINT32 rfCalibDataSize, fileSize;
    933          	
    934          	/*Create syncronisation semaphore*/
    935          	App_CreateLock();
   \   00000014   0x.... 0x....      BL       App_CreateLock
    936              
    937          	/*Give Boot request to Wlan*/
    938          	bootReqParm.bootReason = GSN_BOOT_REASON_GET();
   \   00000018   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   0000001C   0xF88D 0x0010      STRB     R0,[SP, #+16]
    939          	bootReqParm.bootSubreason = GSN_BOOT_INFO_GET();
   \   00000020   0x.... 0x....      BL       GSN_BOOT_INFO_GET
   \   00000024   0xF88D 0x0011      STRB     R0,[SP, #+17]
    940          	bootReqParm.bootTimeHigh = 0;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x9008             STR      R0,[SP, #+32]
    941          	bootReqParm.bootTimeLow = 0;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x9007             STR      R0,[SP, #+28]
    942          	bootReqParm.confLost = 1;
   \   00000030   0x2001             MOVS     R0,#+1
   \   00000032   0xF88D 0x0012      STRB     R0,[SP, #+18]
    943          	bootReqParm.numIfs = 1;
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x9005             STR      R0,[SP, #+20]
    944          	bootReqParm.ifTypes[0]= GSN_WIF_WLAN_NW_TYPE_STA;
   \   0000003A   0x2001             MOVS     R0,#+1
   \   0000003C   0xF88D 0x0018      STRB     R0,[SP, #+24]
    945          	/*bootReqParm.ifTypes[1] = GSN_WIF_WLAN_NW_TYPE_AP;*/
    946          	bootReqParm.fwFlashAddr = romFwImageFlashAddr;
   \   00000040   0x....             LDR.N    R0,??DataTable25_45
   \   00000042   0x6800             LDR      R0,[R0, #+0]
   \   00000044   0x9009             STR      R0,[SP, #+36]
    947          	bootReqParm.stdbyCtxLen = pAppRtcSecMemInfo->macStdbyCtxLen;
   \   00000046   0x6C30             LDR      R0,[R6, #+64]
   \   00000048   0x900B             STR      R0,[SP, #+44]
    948          	bootReqParm.pStdbyCtx = (UINT8 *)pAppRtcSecMemInfo->macStdbyCtx;
   \   0000004A   0xF116 0x0044      ADDS     R0,R6,#+68
   \   0000004E   0x900C             STR      R0,[SP, #+48]
    949          	stdbyCtx = (UINT8 *)bootReqParm.pStdbyCtx;
   \   00000050   0x9E0C             LDR      R6,[SP, #+48]
    950              if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   00000052   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000056   0x2801             CMP      R0,#+1
   \   00000058   0xD018             BEQ.N    ??App_WlanBootReq_0
    951              {
    952                  
    953                  pFile = f_open(WLAN_RF_CALIB_DATA_FILE_NAME, "r");
   \   0000005A   0x....             ADR.N    R1,??DataTable25  ;; "r"
   \   0000005C   0x....             LDR.N    R0,??DataTable25_46
   \   0000005E   0x.... 0x....      BL       fsm_open
   \   00000062   0x0005             MOVS     R5,R0
    954          
    955                  if(!pFile)
   \   00000064   0x2D00             CMP      R5,#+0
   \   00000066   0xD104             BNE.N    ??App_WlanBootReq_1
    956                  {
    957                      /*File Not present - Create new*/;
    958                      pFile = f_open(WLAN_RF_CALIB_DATA_FILE_NAME, "w+");
   \   00000068   0x....             ADR.N    R1,??DataTable25_1  ;; 0x77, 0x2B, 0x00, 0x00
   \   0000006A   0x....             LDR.N    R0,??DataTable25_46
   \   0000006C   0x.... 0x....      BL       fsm_open
   \   00000070   0x0005             MOVS     R5,R0
    959                      if(!pFile)
    960                      {
    961                          /*[TO DO ] Handle Error*/
    962                      }
    963                  }
    964          
    965                  fileSize=f_filelength(WLAN_RF_CALIB_DATA_FILE_NAME);
   \                     ??App_WlanBootReq_1:
   \   00000072   0x....             LDR.N    R0,??DataTable25_46
   \   00000074   0x.... 0x....      BL       fsm_filelength
    966                  rfCalibDataSize = f_read(bootReqParm.rfCalibData, 1, fileSize, pFile);
   \   00000078   0x002B             MOVS     R3,R5
   \   0000007A   0x0002             MOVS     R2,R0
   \   0000007C   0x2101             MOVS     R1,#+1
   \   0000007E   0xA80E             ADD      R0,SP,#+56
   \   00000080   0x.... 0x....      BL       fsm_read
    967                  //AppDbg_Printf("fileSize = %d\r\n",fileSize);
    968                  if(!rfCalibDataSize) 
    969                   {
    970                      /*[TO DO: handle failure]*/;
    971                  }
    972                  bootReqParm.rfCalibDataSize = rfCalibDataSize;
   \   00000084   0x900D             STR      R0,[SP, #+52]
    973          
    974                  
    975                  /* Close the file*/
    976                  f_close(pFile);
   \   00000086   0x0028             MOVS     R0,R5
   \   00000088   0x.... 0x....      BL       fsm_close
    977                  
    978              }
    979          
    980          	
    981          	AppDbg_Printf("Issue BootReq %x %x %x %x\r\n", bootReqParm.stdbyCtxLen, stdbyCtx[0],
    982          															stdbyCtx[1], stdbyCtx[2]);
   \                     ??App_WlanBootReq_0:
   \   0000008C   0x78B0             LDRB     R0,[R6, #+2]
   \   0000008E   0x9000             STR      R0,[SP, #+0]
   \   00000090   0x7873             LDRB     R3,[R6, #+1]
   \   00000092   0x7832             LDRB     R2,[R6, #+0]
   \   00000094   0x990B             LDR      R1,[SP, #+44]
   \   00000096   0x....             LDR.N    R0,??DataTable25_47
   \   00000098   0x.... 0x....      BL       AppDbg_Printf
    983          
    984          	wlanRespTimeoutTmrHndl = GsnSoftTmr_Start(&wlanRespTimeoutTmr, GSN_SOFT_TMR_ONESHOT, 0,
    985          													SEC_TO_SYSTIME(10),
    986          													App_WlanRespTimeoutTmrCb, NULL);
   \   0000009C   0x2000             MOVS     R0,#+0
   \   0000009E   0x9003             STR      R0,[SP, #+12]
   \   000000A0   0x....             LDR.N    R0,??DataTable25_48
   \   000000A2   0x9002             STR      R0,[SP, #+8]
   \   000000A4   0xF45F 0x20A0      MOVS     R0,#+327680
   \   000000A8   0x2100             MOVS     R1,#+0
   \   000000AA   0xE9CD 0x0100      STRD     R0,R1,[SP, #+0]
   \   000000AE   0x2200             MOVS     R2,#+0
   \   000000B0   0x2300             MOVS     R3,#+0
   \   000000B2   0x2100             MOVS     R1,#+0
   \   000000B4   0x....             LDR.N    R0,??DataTable25_49
   \   000000B6   0x.... 0x....      BL       GsnSoftTmr_Start
   \   000000BA   0x....             LDR.N    R1,??DataTable25_44
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    987          	GsnSysCtl_BootReq_Patch(&pAppCtx->sysCtlCtx, &bootReqParm, App_WlanBootIndCb, pAppCtx);
                 	^
Warning[Pe223]: function "GsnSysCtl_BootReq_Patch" declared implicitly
   \   000000BE   0x0023             MOVS     R3,R4
   \   000000C0   0x....             LDR.N    R2,??DataTable25_50
   \   000000C2   0xA904             ADD      R1,SP,#+16
   \   000000C4   0xF514 0x6094      ADDS     R0,R4,#+1184
   \   000000C8   0x.... 0x....      BL       GsnSysCtl_BootReq_Patch
    988          
    989          	AppDbg_Printf("BootReq %d %d\r\n", bootReqParm.bootReason, bootReqParm.bootSubreason);
   \   000000CC   0xF89D 0x2011      LDRB     R2,[SP, #+17]
   \   000000D0   0xF89D 0x1010      LDRB     R1,[SP, #+16]
   \   000000D4   0x....             LDR.N    R0,??DataTable25_51
   \   000000D6   0x.... 0x....      BL       AppDbg_Printf
    990          	/*Wait for Boot indication*/
    991          	//App_WaitOnLock();
    992                  return GSN_SUCCESS;
   \   000000DA   0x2000             MOVS     R0,#+0
   \   000000DC   0xF50D 0x7D0E      ADD      SP,SP,#+568
   \   000000E0   0xBD70             POP      {R4-R6,PC}       ;; return
    993          }
    994          

   \                                 In section .text, align 2, keep-with-next
    995          PRIVATE VOID 
    996          App_Cm3ClkCfg(APP_MAIN_CTX_T *pAppCtx)
    997          {
   \                     App_Cm3ClkCfg:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
    998          	GSN_CLK_CTL_CM3_CLK_CFG_T *pCm3ClkCfg  = &pAppCtx->cm3ClkCfg;
    999          #ifdef GS2100M
   1000          	GsnRtc_ClkSrcSel(GSN_RTC_CLK_SRC_LP_RC);
   1001          #else
   1002          	GsnRtc_ClkSrcSel(GSN_RTC_CLK_SRC_LP_XTAL);
   \   00000004   0x2001             MOVS     R0,#+1
   \   00000006   0x.... 0x....      BL       GsnRtc_ClkSrcSel
   1003          #endif
   1004          	pCm3ClkCfg->pClkCtlCtx = GsnClkCtl_CtxGet();
   \   0000000A   0x.... 0x....      BL       GsnClkCtl_CtxGet
   \   0000000E   0x6020             STR      R0,[R4, #+0]
   1005              pCm3ClkCfg->activeModeClkReq = GSN_CLK_CTL_CLK_SRC_HS_RC;
   \   00000010   0x2001             MOVS     R0,#+1
   \   00000012   0x72E0             STRB     R0,[R4, #+11]
   1006              pCm3ClkCfg->sleepModeClkReq = GSN_CLK_CTL_CLK_SRC_HS_RC;
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x7260             STRB     R0,[R4, #+9]
   1007              pCm3ClkCfg->deepSleepModeClkReq = GSN_CLK_CTL_CLK_NONE;
   \   00000018   0x2000             MOVS     R0,#+0
   \   0000001A   0x72A0             STRB     R0,[R4, #+10]
   1008              pCm3ClkCfg->control = 1; //core control
   \   0000001C   0x2001             MOVS     R0,#+1
   \   0000001E   0x6060             STR      R0,[R4, #+4]
   1009              pCm3ClkCfg->cm3ClkSel = GSN_CLK_SEL_HS_RC;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x7220             STRB     R0,[R4, #+8]
   1010          	GsnClkCtl_Cm3ClkCfg(pCm3ClkCfg);
   \   00000024   0x0020             MOVS     R0,R4
   \   00000026   0x.... 0x....      BL       GsnClkCtl_Cm3ClkCfg
   1011          	//GsnClkCtl_Cm3ClkSwitch(&cm3ClkCfg, GSN_CLK_SEL_HS_XTAL);
   1012          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   0000002A   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   0000002E   0x2801             CMP      R0,#+1
   \   00000030   0xD002             BEQ.N    ??App_Cm3ClkCfg_0
   1013          	{
   1014          		GsnClkCtl_HsRcCal(pCm3ClkCfg);
   \   00000032   0x0020             MOVS     R0,R4
   \   00000034   0x.... 0x....      BL       GsnClkCtl_HsRcCal
   1015          	}
   1016          }
   \                     ??App_Cm3ClkCfg_0:
   \   00000038   0xBD10             POP      {R4,PC}          ;; return
   1017          

   \                                 In section .text, align 2, keep-with-next
   1018          PRIVATE VOID
   1019          App_GetHttpsFlagInfo(APP_MAIN_CTX_T * pAppCtx)
   1020          {
   1021          	/* set httpsFlag only in prov-ap mode */
   1022          	if((GSN_LIMITED_AP == pAppCtx->config.networkConfig.networkMode) && 
   1023          		(GSN_PROV_AP == pAppCtx->config.networkConfig.groupProvMode))
   \                     App_GetHttpsFlagInfo:
   \   00000000   0xF247 0x31F4      MOVW     R1,#+29684
   \   00000004   0x5C09             LDRB     R1,[R1, R0]
   \   00000006   0x2902             CMP      R1,#+2
   \   00000008   0xD109             BNE.N    ??App_GetHttpsFlagInfo_0
   \   0000000A   0xF247 0x41D0      MOVW     R1,#+29904
   \   0000000E   0x5C09             LDRB     R1,[R1, R0]
   \   00000010   0x2901             CMP      R1,#+1
   \   00000012   0xD104             BNE.N    ??App_GetHttpsFlagInfo_0
   1024          	{
   1025          		#ifdef ADK_PROV_GROUP_SECURE
   1026          		pAppCtx->httpsInfo.httpsFlag = 1;
   1027          		#else
   1028          		pAppCtx->httpsInfo.httpsFlag = 0;
   \   00000014   0xF247 0x7134      MOVW     R1,#+30516
   \   00000018   0x2200             MOVS     R2,#+0
   \   0000001A   0x540A             STRB     R2,[R1, R0]
   \   0000001C   0xE003             B.N      ??App_GetHttpsFlagInfo_1
   1029          		#endif
   1030          	}
   1031          	else
   1032          	{
   1033          		pAppCtx->httpsInfo.httpsFlag = 0;
   \                     ??App_GetHttpsFlagInfo_0:
   \   0000001E   0xF247 0x7134      MOVW     R1,#+30516
   \   00000022   0x2200             MOVS     R2,#+0
   \   00000024   0x540A             STRB     R2,[R1, R0]
   1034          	}
   1035          }
   \                     ??App_GetHttpsFlagInfo_1:
   \   00000026   0x4770             BX       LR               ;; return
   1036          

   \                                 In section .text, align 2, keep-with-next
   1037          PRIVATE VOID
   1038          App_Init(APP_MAIN_CTX_T * pAppCtx)
   1039          {
   \                     App_Init:
   \   00000000   0xB51C             PUSH     {R2-R4,LR}
   \   00000002   0x0004             MOVS     R4,R0
   1040          	UINT32 wlanVer = 0;
   \   00000004   0x2000             MOVS     R0,#+0
   \   00000006   0x9001             STR      R0,[SP, #+4]
   1041          	UINT32 pltVersion;
   1042          	App_Cm3ClkCfg(pAppCtx);
   \   00000008   0x0020             MOVS     R0,R4
   \   0000000A   0x.... 0x....      BL       App_Cm3ClkCfg
   1043          	// uncomment when SPI patching errors are fixed
   1044          /* GPIO 10 overlaps for both WPS and EXT FLASH Support.*/
   1045          /* only one of them can be enabled at a time*/
   1046          #if defined(APP_EXT_FLASH_SUPPORT) && defined(ADK_PROV_WPS_ENABLE)
   1047          #error Only one of APP_EXT_FLASH_SUPPORT or ADK_PROV_WPS_ENABLE can be defined
   1048          #endif
   1049          
   1050          #ifdef APP_EXT_FLASH_SUPPORT
   1051          	App_ExtFlash_FsInit();
   1052          	App_ExtFlash_DataFsInit();
   1053          #endif
   1054          	AppDbg_Init();
   \   0000000E   0x.... 0x....      BL       AppDbg_Init
   1055          	App_RtcDump();
   \   00000012   0x.... 0x....      BL       App_RtcDump
   1056          	App_GpioInit();
   \   00000016   0x.... 0x....      BL       App_GpioInit
   1057          	AppSm_Init(pAppCtx);
   \   0000001A   0x0020             MOVS     R0,R4
   \   0000001C   0x.... 0x....      BL       AppSm_Init
   1058          	AppNcm_Init(pAppCtx);	
   \   00000020   0x0020             MOVS     R0,R4
   \   00000022   0x.... 0x....      BL       AppNcm_Init
   1059          	AppBatt_Init(&pAppCtx->appBattCtx, &pAppCtx->rtcBattCtx, &pAppCtx->sysCtlCtx);
   \   00000026   0xF514 0x6294      ADDS     R2,R4,#+1184
   \   0000002A   0xF504 0x41E6      ADD      R1,R4,#+29440
   \   0000002E   0x31A8             ADDS     R1,R1,#+168
   \   00000030   0xF504 0x40E6      ADD      R0,R4,#+29440
   \   00000034   0x30AC             ADDS     R0,R0,#+172
   \   00000036   0x.... 0x....      BL       AppBatt_Init
   1060          	AppDbg_Printf("%s [%s, %s]\r\n", AppConfig_GetAppNameAndVersion(), __DATE__,__TIME__);
   \   0000003A   0x.... 0x....      BL       AppConfig_GetAppNameAndVersion
   \   0000003E   0x....             LDR.N    R3,??DataTable25_52
   \   00000040   0x....             LDR.N    R2,??DataTable25_53
   \   00000042   0x0001             MOVS     R1,R0
   \   00000044   0x....             LDR.N    R0,??DataTable25_54
   \   00000046   0x.... 0x....      BL       AppDbg_Printf
   1061          
   1062          	pltVersion = GsnVersion_Get();
                 	             ^
Warning[Pe223]: function "GsnVersion_Get" declared implicitly
   \   0000004A   0x.... 0x....      BL       GsnVersion_Get
   1063          	AppDbg_Printf("GEPS VERSION %d.%d.%d.%d\r\n",((pltVersion >> 24) & 0xff),
   1064          	               ((pltVersion >>16) & 0xff),((pltVersion>>8) & 0xff),(pltVersion & 0xff));
   \   0000004E   0xB2C1             UXTB     R1,R0            ;; ZeroExt  R1,R0,#+24,#+24
   \   00000050   0x9100             STR      R1,[SP, #+0]
   \   00000052   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000056   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000005A   0x0E01             LSRS     R1,R0,#+24
   \   0000005C   0x....             LDR.N    R0,??DataTable25_55
   \   0000005E   0x.... 0x....      BL       AppDbg_Printf
   1065          
   1066          	GsnSysCtl_WlanFwVerGet(&pAppCtx->sysCtlCtx,&wlanVer);
   \   00000062   0xA901             ADD      R1,SP,#+4
   \   00000064   0xF514 0x6094      ADDS     R0,R4,#+1184
   \   00000068   0x.... 0x....      BL       GsnSysCtl_WlanFwVerGet
   1067          	AppDbg_Printf("WLAN VERSION %d.%d.%d.%d\r\n",((wlanVer >> 24) & 0xff),
   1068          		            ((wlanVer >>16) & 0xff),((wlanVer>> 8 ) & 0xff),(wlanVer & 0xff));
   \   0000006C   0x9801             LDR      R0,[SP, #+4]
   \   0000006E   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000070   0x9000             STR      R0,[SP, #+0]
   \   00000072   0x9801             LDR      R0,[SP, #+4]
   \   00000074   0xF3C0 0x2307      UBFX     R3,R0,#+8,#+8
   \   00000078   0x9801             LDR      R0,[SP, #+4]
   \   0000007A   0xF3C0 0x4207      UBFX     R2,R0,#+16,#+8
   \   0000007E   0x9801             LDR      R0,[SP, #+4]
   \   00000080   0x0E01             LSRS     R1,R0,#+24
   \   00000082   0x....             LDR.N    R0,??DataTable25_56
   \   00000084   0x.... 0x....      BL       AppDbg_Printf
   1069          	AppDbg_Printf("App_Init\r\n");
   \   00000088   0x....             LDR.N    R0,??DataTable25_57
   \   0000008A   0x.... 0x....      BL       AppDbg_Printf
   1070          
   1071          	AppMainCtx_TaskNotify(APP_EVENT_NW_START_NCM, 0);	
   \   0000008E   0x2100             MOVS     R1,#+0
   \   00000090   0x2001             MOVS     R0,#+1
   \   00000092   0x.... 0x....      BL       AppMainCtx_TaskNotify
   1072          }
   \   00000096   0xBD13             POP      {R0,R1,R4,PC}    ;; return
   1073          

   \                                 In section .text, align 2, keep-with-next
   1074          PRIVATE VOID
   1075          App_GpioInit()
   1076          {	
   \                     App_GpioInit:
   \   00000000   0xB580             PUSH     {R7,LR}
   1077              GsnIoMux_Sel(GPIO_20_CLK_HS_RC_20, GSN_IOMUX_GPIO_20_AGPIO_20);
   \   00000002   0x2100             MOVS     R1,#+0
   \   00000004   0x2014             MOVS     R0,#+20
   \   00000006   0x.... 0x....      BL       GsnIoMux_Sel
   1078              GsnIoMux_Sel(GPIO_21_CLK_RTC_21, GSN_IOMUX_GPIO_21_AGPIO_21);
   \   0000000A   0x2100             MOVS     R1,#+0
   \   0000000C   0x2015             MOVS     R0,#+21
   \   0000000E   0x.... 0x....      BL       GsnIoMux_Sel
   1079          
   1080              /* Init leds and adc gpio here */
   1081          #ifdef ADK_PROV_WPS_ENABLE
   1082              GsnIoMux_Sel(GPIO_10_WPS_10, GSN_IOMUX_GPIO_10_AGPIO_10);
   \   00000012   0x2100             MOVS     R1,#+0
   \   00000014   0x200A             MOVS     R0,#+10
   \   00000016   0x.... 0x....      BL       GsnIoMux_Sel
   1083          	/*Initialsing GPIO 10 for WPS, GPIO 20, 21 for CLK*/
   1084          
   1085              GsnGpio_Init(0x00300700,0xffcffcff); // direction'0'out, 1' input
   \   0000001A   0x....             LDR.N    R2,??DataTable25_58  ;; 0xffcffcff
   \   0000001C   0x2300             MOVS     R3,#+0
   \   0000001E   0x....             LDR.N    R0,??DataTable25_59  ;; 0x300700
   \   00000020   0x2100             MOVS     R1,#+0
   \   00000022   0x.... 0x....      BL       GsnGpio_Init
   1086          #else 
   1087          	/* enabling 20,21 GPIO for CLK,Disabling GPIO 10 for WPS */
   1088              GsnGpio_Init(0x00300300,0xffcffcff); // direction'0'out, 1' input
   1089          #endif
   1090              GsnGpio_OutIndvidualSet(LED_GPIO_9);
   \   00000026   0xF44F 0x7000      MOV      R0,#+512
   \   0000002A   0x2100             MOVS     R1,#+0
   \   0000002C   0x.... 0x....      BL       GsnGpio_OutIndvidualSet
   1091          }
   \   00000030   0xBD01             POP      {R0,PC}          ;; return
   1092          
   1093          #if 0
   1094          PRIVATE VOID
   1095          App_SysQualInit(APP_MAIN_CTX_T * pAppCtx)
   1096          {	
   1097              GsnSq_Init();
   1098          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_SOFT_TMR_TASK_ID, &pAppCtx->softTmrMsgHdlrCtx.tcb,
   1099          								APP_CFG_SQ_TICKS_FOR_SOFT_TMR_TASK);	
   1100          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_HI_RECV_TASK_ID, &pAppCtx->hiCtx.recvThreadHndl,
   1101          								APP_CFG_SQ_TICKS_FOR_HI_RECV_TASK);
   1102          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_WDD_MSG_HDLR_TASK_ID, &pAppCtx->wddMsgHdlrCtx.tcb,
   1103          								APP_CFG_SQ_TICKS_FOR_WDD_MSG_HDLR_TASK);
   1104          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_IP_TASK_ID, &pAppCtx->if0.nwifCtx.ipHndl.nx_ip_thread,
   1105          								APP_CFG_SQ_TICKS_FOR_IP_TASK);
   1106          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_DHCPV4_TASK_ID, &pAppCtx->if0.nwifCtx.dhcpCliHndl.nx_dhcp_thread,
   1107          								APP_CFG_SQ_TICKS_FOR_DHCPV4_TASK);
   1108          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_HTTPD_TASK_ID, NULL,
   1109          								APP_CFG_SQ_TICKS_FOR_HTTPD_TASK);	
   1110          	GsnSq_TaskMonitorRegister(APP_CFG_SQ_MAIN_TASK_ID, &appMainCtxThread,
   1111          								APP_CFG_SQ_TICKS_FOR_MAIN_TASK);
   1112          }
   1113          #endif
   1114          

   \                                 In section .text, align 2, keep-with-next
   1115          VOID
   1116          App_RtcDump(VOID)
   1117          {	
   \                     App_RtcDump:
   \   00000000   0xB570             PUSH     {R4-R6,LR}
   1118          	UINT8 i;
   1119          	APP_RTC_LATCH_MEM_INFO_T *pRtcLatchMemInfo = App_RtcLatchMemInfoPtrGet();
   \   00000002   0x.... 0x....      BL       App_RtcLatchMemInfoPtrGet
   \   00000006   0x0005             MOVS     R5,R0
   1120          	APP_RTC_SECNDRY_MEM_INFO_T *pRtcSecMemInfo = App_RtcSecMemInfoPtrGet();
   \   00000008   0x.... 0x....      BL       App_RtcSecMemInfoPtrGet
   \   0000000C   0x0006             MOVS     R6,R0
   1121          	GSN_SYS_RESET_INFO_T *pResetInfo= &pRtcLatchMemInfo->sysResetInfo;
   1122          
   1123          	AppDbg_Printf("\r\n");	
   \   0000000E   0x....             ADR.N    R0,??DataTable25_2  ;; 0x0D, 0x0A, 0x00, 0x00
   \   00000010   0x.... 0x....      BL       AppDbg_Printf
   1124          
   1125          	AppDbg_Printf("Boot Reason :    %d\r\n", GSN_BOOT_REASON_GET());
   \   00000014   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000018   0x0001             MOVS     R1,R0
   \   0000001A   0x....             LDR.N    R0,??DataTable25_60
   \   0000001C   0x.... 0x....      BL       AppDbg_Printf
   1126          	AppDbg_Printf("Boot Info :      %d\r\n", GSN_BOOT_INFO_GET());
   \   00000020   0x.... 0x....      BL       GSN_BOOT_INFO_GET
   \   00000024   0x0001             MOVS     R1,R0
   \   00000026   0x....             LDR.N    R0,??DataTable25_61
   \   00000028   0x.... 0x....      BL       AppDbg_Printf
   1127          	AppDbg_Printf("Reset Type:      %d\r\n", pResetInfo->app.resetType); 
   \   0000002C   0x7829             LDRB     R1,[R5, #+0]
   \   0000002E   0x....             LDR.N    R0,??DataTable25_62
   \   00000030   0x.... 0x....      BL       AppDbg_Printf
   1128          	AppDbg_Printf("Reset Reason :   %d\r\n", pResetInfo->app.resetReason); 
   \   00000034   0x7869             LDRB     R1,[R5, #+1]
   \   00000036   0x....             LDR.N    R0,??DataTable25_63
   \   00000038   0x.... 0x....      BL       AppDbg_Printf
   1129          	AppDbg_Printf("Reset Info Size: %d\r\n", pResetInfo->app.resetInfoSize); 
   \   0000003C   0x78A9             LDRB     R1,[R5, #+2]
   \   0000003E   0x....             LDR.N    R0,??DataTable25_64
   \   00000040   0x.... 0x....      BL       AppDbg_Printf
   1130          	AppDbg_Printf("Reset Addl Info: 0x%x\r\n", pResetInfo->app.resetAddlInfo);
   \   00000044   0x78E9             LDRB     R1,[R5, #+3]
   \   00000046   0x....             LDR.N    R0,??DataTable25_65
   \   00000048   0x.... 0x....      BL       AppDbg_Printf
   1131          	AppDbg_Printf("ResetInfo:\r\n");							
   \   0000004C   0x....             LDR.N    R0,??DataTable25_66
   \   0000004E   0x.... 0x....      BL       AppDbg_Printf
   1132          	for(i = 0; i < 16; i++)
   \   00000052   0x2400             MOVS     R4,#+0
   \   00000054   0xE007             B.N      ??App_RtcDump_0
   1133          	{
   1134          	AppDbg_Printf("\t0x%08x\r\n", pResetInfo->app.resetInfo[i]);	
   \                     ??App_RtcDump_1:
   \   00000056   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000058   0xEB15 0x0084      ADDS     R0,R5,R4, LSL #+2
   \   0000005C   0x6841             LDR      R1,[R0, #+4]
   \   0000005E   0x....             LDR.N    R0,??DataTable25_67
   \   00000060   0x.... 0x....      BL       AppDbg_Printf
   1135          	}
   \   00000064   0x1C64             ADDS     R4,R4,#+1
   \                     ??App_RtcDump_0:
   \   00000066   0xB2E4             UXTB     R4,R4            ;; ZeroExt  R4,R4,#+24,#+24
   \   00000068   0x2C10             CMP      R4,#+16
   \   0000006A   0xDBF4             BLT.N    ??App_RtcDump_1
   1136          	AppDbg_Printf("\r\n");		
   \   0000006C   0x....             ADR.N    R0,??DataTable25_2  ;; 0x0D, 0x0A, 0x00, 0x00
   \   0000006E   0x.... 0x....      BL       AppDbg_Printf
   1137          }
   \   00000072   0xBD70             POP      {R4-R6,PC}       ;; return
   1138          

   \                                 In section .text, align 2, keep-with-next
   1139          VOID 
   1140          App_IdleHandler()
   1141          {
   1142              while(1)
   1143              {
   1144          #ifdef APP_OPT_PS_IN_PSPOLL      
   1145                  if(GsnPwrMgmt_StbyReady(&appCtx.pwrMgmtCtx))
   1146                  {
   1147                      AppSm_GotoStandby(&appCtx);
   1148                  }
   1149          #endif
   1150                __WFI();
   \                     App_IdleHandler:
   \                     ??App_IdleHandler_0:
   \   00000000   0xBF30             WFI      
   \   00000002   0xE7FD             B.N      ??App_IdleHandler_0
   1151              }
   1152          }

   \                                 In section .text, align 2, keep-with-next
   1153          PRIVATE VOID
   1154          App_RandomNumGenInit(VOID)
   1155          {
   \                     App_RandomNumGenInit:
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB082             SUB      SP,SP,#+8
   1156          	
   1157          	APP_RTC_LATCH_MEM_INFO_T *pAppRtcLatchMemInfo = App_RtcLatchMemInfoPtrGet();
   \   00000004   0x.... 0x....      BL       App_RtcLatchMemInfoPtrGet
   \   00000008   0x0004             MOVS     R4,R0
   1158          	UINT32 randomSeed = 0;
   \   0000000A   0x2000             MOVS     R0,#+0
   \   0000000C   0x9000             STR      R0,[SP, #+0]
   1159          	if(GSN_WIF_SYS_BOOT_NORMAL_BOOT != GSN_BOOT_REASON_GET())
   \   0000000E   0x.... 0x....      BL       GSN_BOOT_REASON_GET
   \   00000012   0x2801             CMP      R0,#+1
   \   00000014   0xD007             BEQ.N    ??App_RandomNumGenInit_0
   1160          	{		
   1161          		GsnHeIf_TrangGenerate((UINT8 *)&randomSeed, sizeof(randomSeed));
   \   00000016   0x2104             MOVS     R1,#+4
   \   00000018   0xA800             ADD      R0,SP,#+0
   \   0000001A   0x.... 0x....      BL       GsnHeIf_TrangGenerate
   1162          		pAppRtcLatchMemInfo->randomSeed = randomSeed;
   \   0000001E   0x9800             LDR      R0,[SP, #+0]
   \   00000020   0xF8C4 0x01AC      STR      R0,[R4, #+428]
   \   00000024   0xE002             B.N      ??App_RandomNumGenInit_1
   1163          	}
   1164          	else
   1165          	{
   1166                  
   1167          		randomSeed = pAppRtcLatchMemInfo->randomSeed;
   \                     ??App_RandomNumGenInit_0:
   \   00000026   0xF8D4 0x01AC      LDR      R0,[R4, #+428]
   \   0000002A   0x9000             STR      R0,[SP, #+0]
   1168          	}
   1169          	
   1170          	srand(randomSeed);
   \                     ??App_RandomNumGenInit_1:
   \   0000002C   0x9800             LDR      R0,[SP, #+0]
   \   0000002E   0x.... 0x....      BL       srand
   1171          }
   \   00000032   0xBD13             POP      {R0,R1,R4,PC}    ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25:
   \   00000000   0x72 0x00          DC8      "r",0x0,0x0
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_1:
   \   00000000   0x77 0x2B          DC8      0x77, 0x2B, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_2:
   \   00000000   0x0D 0x0A          DC8      0x0D, 0x0A, 0x00, 0x00
   \              0x00 0x00    

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_3:
   \   00000000   0xE000E100         DC32     0xe000e100

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_4:
   \   00000000   0xE000E200         DC32     0xe000e200

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_5:
   \   00000000   0x........         DC32     appCtx

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_6:
   \   00000000   0x........         DC32     globalAppCtxPtr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_7:
   \   00000000   0x........         DC32     appMainThreadMsgQueueBuf

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_8:
   \   00000000   0x........         DC32     appMainThreadMsgQueue

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_9:
   \   00000000   0x........         DC32     appCtx+0x77D0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_10:
   \   00000000   0x........         DC32     appMainCtxThreadStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_11:
   \   00000000   0x........         DC32     `?<Constant "App Main Ctx">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_12:
   \   00000000   0x........         DC32     appMainCtxThread

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_13:
   \   00000000   0x41000364         DC32     0x41000364

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_14:
   \   00000000   0x41000360         DC32     0x41000360

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_15:
   \   00000000   0x4100007C         DC32     0x4100007c

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_16:
   \   00000000   0x........         DC32     `?<Constant {0}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_17:
   \   00000000   0x........         DC32     gsnBrClkCtlCtx1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_18:
   \   00000000   0x........         DC32     `?<Constant "Boot Reason = %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_19:
   \   00000000   0x........         DC32     appBrOtpCtx1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_20:
   \   00000000   0x........         DC32     appBrOtpMmCtx1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_21:
   \   00000000   0x........         DC32     syscSem

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_22:
   \   00000000   0x........         DC32     wddStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_23:
   \   00000000   0x........         DC32     hiRecvTaskStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_24:
   \   00000000   0x........         DC32     gsnHifStats

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_25:
   \   00000000   0x........         DC32     sysCtrlTaskStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_26:
   \   00000000   0x41000078         DC32     0x41000078

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_27:
   \   00000000   0x........         DC32     `?<Constant {0}>_1`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_28:
   \   00000000   0x........         DC32     `?<Constant {&"Soft Tmr Msg Handler1", softTmrM`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_29:
   \   00000000   0x........         DC32     App_SoftTmrMmsgHandlr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_30:
   \   00000000   0xE000E010         DC32     0xe000e010

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_31:
   \   00000000   0x........         DC32     App_SysTickCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_32:
   \   00000000   0x........         DC32     sysTickTmr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_33:
   \   00000000   0x........         DC32     pSysTickTmrHndl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_34:
   \   00000000   0x........         DC32     App_InterfaceStartCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_35:
   \   00000000   0x........         DC32     App_InterfaceStopCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_36:
   \   00000000   0x........         DC32     gsnWddStats

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_37:
   \   00000000   0x........         DC32     `?<Constant {255, 255, 255, 255, 255, 255}>`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_38:
   \   00000000   0x........         DC32     `?<Constant "station">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_39:
   \   00000000   0x........         DC32     App_NwRecvFilter

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_40:
   \   00000000   0x........         DC32     ipStack

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_41:
   \   00000000   0x........         DC32     arpCache

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_42:
   \   00000000   0x........         DC32     gsnNwifStats

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_43:
   \   00000000   0x........         DC32     `?<Constant "F:\\\\Development\\\\GS2000...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_44:
   \   00000000   0x........         DC32     wlanRespTimeoutTmrHndl

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_45:
   \   00000000   0x........         DC32     romFwImageFlashAddr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_46:
   \   00000000   0x........         DC32     `?<Constant "A:/WlanRfCalibDataFile">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_47:
   \   00000000   0x........         DC32     `?<Constant "Issue BootReq %x %x %...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_48:
   \   00000000   0x........         DC32     App_WlanRespTimeoutTmrCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_49:
   \   00000000   0x........         DC32     wlanRespTimeoutTmr

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_50:
   \   00000000   0x........         DC32     App_WlanBootIndCb

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_51:
   \   00000000   0x........         DC32     `?<Constant "BootReq %d %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_52:
   \   00000000   0x........         DC32     `?<Constant "04:31:08">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_53:
   \   00000000   0x........         DC32     `?<Constant "Apr  2 2015">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_54:
   \   00000000   0x........         DC32     `?<Constant "%s [%s, %s]\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_55:
   \   00000000   0x........         DC32     `?<Constant "GEPS VERSION %d.%d.%d...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_56:
   \   00000000   0x........         DC32     `?<Constant "WLAN VERSION %d.%d.%d...">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_57:
   \   00000000   0x........         DC32     `?<Constant "App_Init\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_58:
   \   00000000   0xFFCFFCFF         DC32     0xffcffcff

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_59:
   \   00000000   0x00300700         DC32     0x300700

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_60:
   \   00000000   0x........         DC32     `?<Constant "Boot Reason :    %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_61:
   \   00000000   0x........         DC32     `?<Constant "Boot Info :      %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_62:
   \   00000000   0x........         DC32     `?<Constant "Reset Type:      %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_63:
   \   00000000   0x........         DC32     `?<Constant "Reset Reason :   %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_64:
   \   00000000   0x........         DC32     `?<Constant "Reset Info Size: %d\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_65:
   \   00000000   0x........         DC32     `?<Constant "Reset Addl Info: 0x%x\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_66:
   \   00000000   0x........         DC32     `?<Constant "ResetInfo:\\r\\n">`

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable25_67:
   \   00000000   0x........         DC32     `?<Constant "\\t0x%08x\\r\\n">`

   \                                 In section .rodata, align 4
   \                     `?<Constant "TLS_GS2K-5.1.5.1">`:
   \   00000000   0x54 0x4C          DC8 "TLS_GS2K-5.1.5.1"
   \              0x53 0x5F    
   \              0x47 0x53    
   \              0x32 0x4B    
   \              0x2D 0x35    
   \              0x2E 0x31    
   \              0x2E 0x35    
   \              0x2E 0x31    
   \              0x00         
   \   00000011   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "App Main Ctx">`:
   \   00000000   0x41 0x70          DC8 "App Main Ctx"
   \              0x70 0x20    
   \              0x4D 0x61    
   \              0x69 0x6E    
   \              0x20 0x43    
   \              0x74 0x78    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant {0}>`:
   \   00000000   0x00000000         DC32 0
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "Boot Reason = %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "Boot Reason = %d\015\012"
   \              0x6F 0x74    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x73 0x6F    
   \              0x6E 0x20    
   \              0x3D 0x20    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   00000013   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x00000000         DC32 0H
   \   00000004   0x00 0x00          DC8 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {0}>_1`:
   \   00000000   0x00000000         DC32 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Soft Tmr Msg Handler1">`:
   \   00000000   0x53 0x6F          DC8 "Soft Tmr Msg Handler1"
   \              0x66 0x74    
   \              0x20 0x54    
   \              0x6D 0x72    
   \              0x20 0x4D    
   \              0x73 0x67    
   \              0x20 0x48    
   \              0x61 0x6E    
   \              0x64 0x6C    
   \              0x65 0x72    
   \              0x31 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant {&"Soft Tmr Msg Handler1", softTmrM`:
   \   00000000   0x........         DC32 `?<Constant "Soft Tmr Msg Handler1">`, softTmrMsgHHdlrStack, 2048
   \              0x........   
   \              0x00000800   
   \   0000000C   0x00000001         DC32 1, softTmrMsgHHdlrBuff, 32
   \              0x........   
   \              0x00000020   
   \   00000018   0x01 0x00          DC8 1, 0, 0, 0
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant {255, 255, 255, 255, 255, 255}>`:
   \   00000000   0xFF 0xFF          DC8 255, 255, 255, 255, 255, 255, 0, 0
   \              0xFF 0xFF    
   \              0xFF 0xFF    
   \              0x00 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "station">`:
   \   00000000   0x73 0x74          DC8 "station"
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "F:\\\\Development\\\\GS2000...">`:
   \   00000000   0x46 0x3A          DC8 46H, 3AH, 5CH, 44H, 65H, 76H, 65H, 6CH
   \              0x5C 0x44    
   \              0x65 0x76    
   \              0x65 0x6C    
   \   00000008   0x6F 0x70          DC8 6FH, 70H, 6DH, 65H, 6EH, 74H, 5CH, 47H
   \              0x6D 0x65    
   \              0x6E 0x74    
   \              0x5C 0x47    
   \   00000010   0x53 0x32          DC8 53H, 32H, 30H, 30H, 30H, 5CH, 35H, 2EH
   \              0x30 0x30    
   \              0x30 0x5C    
   \              0x35 0x2E    
   \   00000018   0x31 0x2E          DC8 31H, 2EH, 35H, 5CH, 30H, 32H, 5FH, 41H
   \              0x35 0x5C    
   \              0x30 0x32    
   \              0x5F 0x41    
   \   00000020   0x70 0x72          DC8 70H, 72H, 5FH, 32H, 30H, 31H, 35H, 5FH
   \              0x5F 0x32    
   \              0x30 0x31    
   \              0x35 0x5F    
   \   00000028   0x30 0x34          DC8 30H, 34H, 5FH, 33H, 30H, 5FH, 33H, 38H
   \              0x5F 0x33    
   \              0x30 0x5F    
   \              0x33 0x38    
   \   00000030   0x5C 0x61          DC8 5CH, 61H, 64H, 6BH, 5CH, 74H, 6CH, 73H
   \              0x64 0x6B    
   \              0x5C 0x74    
   \              0x6C 0x73    
   \   00000038   0x5C 0x73          DC8 5CH, 73H, 72H, 63H, 5CH, 6DH, 61H, 69H
   \              0x72 0x63    
   \              0x5C 0x6D    
   \              0x61 0x69    
   \   00000040   0x6E 0x5C          DC8 6EH, 5CH, 61H, 70H, 70H, 5FH, 6DH, 61H
   \              0x61 0x70    
   \              0x70 0x5F    
   \              0x6D 0x61    
   \   00000048   0x69 0x6E          DC8 69H, 6EH, 5FH, 74H, 68H, 72H, 65H, 61H
   \              0x5F 0x74    
   \              0x68 0x72    
   \              0x65 0x61    
   \   00000050   0x64 0x2E          DC8 64H, 2EH, 63H, 0
   \              0x63 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "A:/WlanRfCalibDataFile">`:
   \   00000000   0x41 0x3A          DC8 "A:/WlanRfCalibDataFile"
   \              0x2F 0x57    
   \              0x6C 0x61    
   \              0x6E 0x52    
   \              0x66 0x43    
   \              0x61 0x6C    
   \              0x69 0x62    
   \              0x44 0x61    
   \              0x74 0x61    
   \              0x46 0x69    
   \              0x6C 0x65    
   \              0x00         
   \   00000017   0x00               DC8 0

   \                                 In section .rodata, align 2
   \   00000000   0x72 0x00          DC8 "r"

   \                                 In section .rodata, align 4
   \   00000000   0x77 0x2B          DC8 "w+"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Issue BootReq %x %x %...">`:
   \   00000000   0x49 0x73          DC8 "Issue BootReq %x %x %x %x\015\012"
   \              0x73 0x75    
   \              0x65 0x20    
   \              0x42 0x6F    
   \              0x6F 0x74    
   \              0x52 0x65    
   \              0x71 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x20    
   \              0x25 0x78    
   \              0x20 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "BootReq %d %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "BootReq %d %d\015\012"
   \              0x6F 0x74    
   \              0x52 0x65    
   \              0x71 0x20    
   \              0x25 0x64    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "%s [%s, %s]\\r\\n">`:
   \   00000000   0x25 0x73          DC8 "%s [%s, %s]\015\012"
   \              0x20 0x5B    
   \              0x25 0x73    
   \              0x2C 0x20    
   \              0x25 0x73    
   \              0x5D 0x0D    
   \              0x0A 0x00    
   \   0000000E   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Apr  2 2015">`:
   \   00000000   0x41 0x70          DC8 "Apr  2 2015"
   \              0x72 0x20    
   \              0x20 0x32    
   \              0x20 0x32    
   \              0x30 0x31    
   \              0x35 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "04:31:08">`:
   \   00000000   0x30 0x34          DC8 "04:31:08"
   \              0x3A 0x33    
   \              0x31 0x3A    
   \              0x30 0x38    
   \              0x00         
   \   00000009   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "GEPS VERSION %d.%d.%d...">`:
   \   00000000   0x47 0x45          DC8 "GEPS VERSION %d.%d.%d.%d\015\012"
   \              0x50 0x53    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x20 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "WLAN VERSION %d.%d.%d...">`:
   \   00000000   0x57 0x4C          DC8 "WLAN VERSION %d.%d.%d.%d\015\012"
   \              0x41 0x4E    
   \              0x20 0x56    
   \              0x45 0x52    
   \              0x53 0x49    
   \              0x4F 0x4E    
   \              0x20 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x2E 0x25    
   \              0x64 0x2E    
   \              0x25 0x64    
   \              0x0D 0x0A    
   \              0x00         
   \   0000001B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "App_Init\\r\\n">`:
   \   00000000   0x41 0x70          DC8 "App_Init\015\012"
   \              0x70 0x5F    
   \              0x49 0x6E    
   \              0x69 0x74    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000B   0x00               DC8 0

   \                                 In section .rodata, align 4
   \   00000000   0x0D 0x0A          DC8 "\015\012"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Boot Reason :    %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "Boot Reason :    %d\015\012"
   \              0x6F 0x74    
   \              0x20 0x52    
   \              0x65 0x61    
   \              0x73 0x6F    
   \              0x6E 0x20    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Boot Info :      %d\\r\\n">`:
   \   00000000   0x42 0x6F          DC8 "Boot Info :      %d\015\012"
   \              0x6F 0x74    
   \              0x20 0x49    
   \              0x6E 0x66    
   \              0x6F 0x20    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reset Type:      %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Type:      %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x54 0x79    
   \              0x70 0x65    
   \              0x3A 0x20    
   \              0x20 0x20    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reset Reason :   %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Reason :   %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x52 0x65    
   \              0x61 0x73    
   \              0x6F 0x6E    
   \              0x20 0x3A    
   \              0x20 0x20    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reset Info Size: %d\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Info Size: %d\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x49 0x6E    
   \              0x66 0x6F    
   \              0x20 0x53    
   \              0x69 0x7A    
   \              0x65 0x3A    
   \              0x20 0x25    
   \              0x64 0x0D    
   \              0x0A 0x00    
   \   00000016   0x00 0x00          DC8 0, 0

   \                                 In section .rodata, align 4
   \                     `?<Constant "Reset Addl Info: 0x%x\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "Reset Addl Info: 0x%x\015\012"
   \              0x73 0x65    
   \              0x74 0x20    
   \              0x41 0x64    
   \              0x64 0x6C    
   \              0x20 0x49    
   \              0x6E 0x66    
   \              0x6F 0x3A    
   \              0x20 0x30    
   \              0x78 0x25    
   \              0x78 0x0D    
   \              0x0A 0x00    

   \                                 In section .rodata, align 4
   \                     `?<Constant "ResetInfo:\\r\\n">`:
   \   00000000   0x52 0x65          DC8 "ResetInfo:\015\012"
   \              0x73 0x65    
   \              0x74 0x49    
   \              0x6E 0x66    
   \              0x6F 0x3A    
   \              0x0D 0x0A    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     `?<Constant "\\t0x%08x\\r\\n">`:
   \   00000000   0x09 0x30          DC8 "\t0x%08x\015\012"
   \              0x78 0x25    
   \              0x30 0x38    
   \              0x78 0x0D    
   \              0x0A 0x00    
   \   0000000A   0x00 0x00          DC8 0, 0

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      32   APP_BsdLayerInit
        32   -> GsnNw_PktPoolHndlGet
        32   -> GsnNwif_BsdInitialize
        32   -> __aeabi_memclr4
       0   AppConfig_GetAppNameAndVersion
      40   AppInit_WddMsgHdlrInit
        40   -> GsnOsal_QueueMsgSizeInWords
        40   -> GsnWdd_MsgHdlrInit
        40   -> MALLOC
      24   AppMainCtx_Init
        24   -> GsnOsal_QueueCreate
        24   -> GsnOsal_QueueMsgSizeInWords
        24   -> GsnOsal_ThreadCreate
        24   -> GsnPwrMgmt_Init
        24   -> memset
      16   AppMainCtx_TaskNotify
        16   -> GsnOsal_QueuePut
      32   AppMainCtx_ThreadEntry
        32   -> APP_BsdLayerInit
        32   -> AppConfig_DefaultInit
        32   -> AppDbg_Printf
        32   -> AppInit_WddMsgHdlrInit
        32   -> AppSm_MsgProcess
        32   -> AppSm_ReStoreStdbyData
        32   -> AppUart_Init
        32   -> App_DefaultIfInit
        32   -> App_DfltWlanCfgSet
        32   -> App_FsInit
        32   -> App_GetHttpsFlagInfo
        32   -> App_HiInit
        32   -> App_Init
        32   -> App_InterfaceStart
        32   -> App_NwStackInit
        32   -> App_RandomNumGenInit
        32   -> App_RtcCfg
        32   -> App_SoftTimerInit
        32   -> App_SysCtlInit
        32   -> App_WaitOnLock
        32   -> App_WlanBootReq
        32   -> App_WpaSupplicantInit
        32   -> App_WpsGPIOInit
        32   -> GSN_BOOT_REASON_GET
        32   -> GsnClkCtl_CtxGet
        32   -> GsnClkCtl_Init
        32   -> GsnExcpHdlr_Init
        32   -> GsnHeIf_DriverDeinit
        32   -> GsnOsal_QueueGet
        32   -> GsnOtpMm_Init
        32   -> GsnOtp_Init
        32   -> GsnSq_TaskMonitorStart
        32   -> GsnSq_TaskMonitorStop
       8   App_Cm3ClkCfg
         8   -> GSN_BOOT_REASON_GET
         8   -> GsnClkCtl_Cm3ClkCfg
         8   -> GsnClkCtl_CtxGet
         8   -> GsnClkCtl_HsRcCal
         8   -> GsnRtc_ClkSrcSel
       8   App_CreateLock
         8   -> GsnOsal_SemCreate
       8   App_DefaultIfInit
         8   -> App_IfInit
      24   App_DfltWlanCfgSet
        24   -> GSN_BOOT_REASON_GET
        24   -> GsnNwif_UpdatePhyAddr
        24   -> GsnWdd_AssocStatusSet
        24   -> GsnWdd_Ioctl
        24   -> GsnWdd_PhyAddrSet
        24   -> GsnWdd_RadioPowerSaveCfgSet
        24   -> GsnWdd_ScanParamSet
       0   App_GetHttpsFlagInfo
       8   App_GpioInit
         8   -> GsnGpio_Init
         8   -> GsnGpio_OutIndvidualSet
         8   -> GsnIoMux_Sel
      48   App_HiInit
        48   -> GsnHi_Init
       0   App_IdleHandler
      16   App_IfInit
        16   -> App_NwIfInit
        16   -> App_WddInit
        16   -> App_WifInit
      32   App_IfReinit
        32   -> App_InterfaceStart
        32   -> GsnNwIf_Reinit
        32   -> GsnWdd_Reinit
        32   -> GsnWdd_ScanParamSet
        32   -> GsnWif_Reinit
      16   App_Init
        16   -> AppBatt_Init
        16   -> AppConfig_GetAppNameAndVersion
        16   -> AppDbg_Init
        16   -> AppDbg_Printf
        16   -> AppMainCtx_TaskNotify
        16   -> AppNcm_Init
        16   -> AppSm_Init
        16   -> App_Cm3ClkCfg
        16   -> App_GpioInit
        16   -> App_RtcDump
        16   -> GsnSysCtl_WlanFwVerGet
        16   -> GsnVersion_Get
      40   App_InterfaceStart
        40   -> App_CreateLock
        40   -> App_WaitOnLock
        40   -> GsnSysCtl_IfStartReq
       8   App_InterfaceStartCb
         8   -> App_UnLock
      24   App_InterfaceStop
        24   -> App_CreateLock
        24   -> App_WaitOnLock
        24   -> GsnSysCtl_IfStopReq
       8   App_InterfaceStopCb
         8   -> App_UnLock
      72   App_NwIfInit
        72   -> GsnNwIf_Init
        72   -> GsnNw_PktPoolHndlGet
      32   App_NwRecvFilter
        32   -> GsnNwif_IPv6MulticastFilter
        32   -> GsnNwif_IsArpReqstPkt
        32   -> GsnNwif_IsArpRespPkt
        32   -> GsnNwif_IsDhcpPkt
        32   -> memcmp
      32   App_NwStackInit
        32   -> GsnNw_Init
        32   -> MALLOC
        32   -> _nx_system_ticks_per_second_update
      16   App_RandomNumGenInit
        16   -> App_RtcLatchMemInfoPtrGet
        16   -> GSN_BOOT_REASON_GET
        16   -> GsnHeIf_TrangGenerate
        16   -> srand
       8   App_RtcCfg
         8   -> GSN_BOOT_REASON_GET
      16   App_RtcDump
        16   -> AppDbg_Printf
        16   -> App_RtcLatchMemInfoPtrGet
        16   -> App_RtcSecMemInfoPtrGet
        16   -> GSN_BOOT_INFO_GET
        16   -> GSN_BOOT_REASON_GET
       0   App_RtcLatchMemInfoPtrGet
       0   App_RtcSecMemInfoPtrGet
      56   App_SoftTimerInit
        56   -> GSN_SYS_TIME_OFFSET_LOC_GET
        56   -> GsnMsgHandler_Create
        56   -> GsnSoftTmr_Init
        56   -> GsnSoftTmr_Start
        56   -> GsnTod_Init
        56   -> __aeabi_memcpy4
      16   App_SoftTmrMmsgHandlr
        16   -> GsnSoftTmr_Run
        16   -> GsnSq_TaskMonitorStart
        16   -> GsnSq_TaskMonitorStop
      56   App_SysCtlInit
        56   -> GsnOsal_QueueMsgSizeInWords
        56   -> GsnSysCtl_Init_Patch
        56   -> GsnSysif_Init
        56   -> MALLOC
       8   App_SysTickCb
         8   -> NVIC_EnableIRQ
         8   -> NVIC_SetPendingIRQ
       8   App_UnLock
         8   -> GsnOsal_SemRelease
       8   App_WaitOnLock
         8   -> GsnOsal_SemAcquire
         8   -> GsnOsal_SemDelete
      48   App_WddInit
        48   -> App_RtcLatchMemInfoPtrGet
        48   -> GSN_BOOT_REASON_GET
        48   -> GsnWdd_Init
      16   App_WifInit
        16   -> GsnWif_Init
       8   App_WlanBootIndCb
         8   -> App_UnLock
         8   -> GsnSoftTmr_Stop
     584   App_WlanBootReq
       584   -> AppDbg_Printf
       584   -> App_CreateLock
       584   -> App_RtcLatchMemInfoPtrGet
       584   -> App_RtcSecMemInfoPtrGet
       584   -> GSN_BOOT_INFO_GET
       584   -> GSN_BOOT_REASON_GET
       584   -> GsnSoftTmr_Start
       584   -> GsnSysCtl_BootReq_Patch
       584   -> fsm_close
       584   -> fsm_filelength
       584   -> fsm_open
       584   -> fsm_read
       8   App_WlanRespTimeoutTmrCb
         8   -> GSN_SYS_RESET_INFO_LOCATION_GET
         8   -> GsnSys_Reset
         8   -> memcpy
      16   App_WpaSupplicantInit
        16   -> GsnWdd_WpaSupplicantInit
       0   GSN_BOOT_INFO_GET
       0   GSN_BOOT_REASON_GET
       0   GSN_SYS_RESET_INFO_LOCATION_GET
       0   GSN_SYS_TIME_OFFSET_LOC_GET
       0   GsnIoMux_Sel
       8   GsnOsal_QueueCreate
         8   -> _tx_queue_create
       8   GsnOsal_QueueGet
         8   -> _tx_queue_receive
       0   GsnOsal_QueueMsgSizeInWords
       8   GsnOsal_QueuePut
         8   -> _tx_queue_send
       8   GsnOsal_SemAcquire
         8   -> _tx_semaphore_get
       8   GsnOsal_SemCreate
         8   -> _tx_semaphore_create
       8   GsnOsal_SemDelete
         8   -> _tx_semaphore_delete
       8   GsnOsal_SemRelease
         8   -> _tx_semaphore_put
      48   GsnOsal_ThreadCreate
        48   -> _tx_thread_create
       0   GsnRtc_ClkSrcSel
       0   NVIC_EnableIRQ
       0   NVIC_SetPendingIRQ
       8   memcpy
         8   -> __aeabi_memcpy
       8   memset
         8   -> __aeabi_memset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Constant "%s [%s, %s]\r\n">
      12  ?<Constant "04:31:08">
      24  ?<Constant "A:/WlanRfCalibDataFile">
      16  ?<Constant "App Main Ctx">
      12  ?<Constant "App_Init\r\n">
      12  ?<Constant "Apr  2 2015">
      24  ?<Constant "Boot Info :      %d\r\n">
      24  ?<Constant "Boot Reason :    %d\r\n">
      20  ?<Constant "Boot Reason = %d\r\n">
      16  ?<Constant "BootReq %d %d\r\n">
      84  ?<Constant "F:\\Development\\GS2000...">
      28  ?<Constant "GEPS VERSION %d.%d.%d...">
      28  ?<Constant "Issue BootReq %x %x %...">
      24  ?<Constant "Reset Addl Info: 0x%x\r\n">
      24  ?<Constant "Reset Info Size: %d\r\n">
      24  ?<Constant "Reset Reason :   %d\r\n">
      24  ?<Constant "Reset Type:      %d\r\n">
      16  ?<Constant "ResetInfo:\r\n">
      24  ?<Constant "Soft Tmr Msg Handler1">
      20  ?<Constant "TLS_GS2K-5.1.5.1">
      28  ?<Constant "WLAN VERSION %d.%d.%d...">
       4  ?<Constant "\r\n">
      12  ?<Constant "\t0x%08x\r\n">
       2  ?<Constant "r">
       8  ?<Constant "station">
       4  ?<Constant "w+">
      28  ?<Constant {&"Soft Tmr Msg Handler1", softTmrM
      20  ?<Constant {(NX_IP *)0}>
       8  ?<Constant {0}>
       4  ?<Constant {0}>_1
       8  ?<Constant {255, 255, 255, 255, 255, 255}>
       4  ??DataTable25
       4  ??DataTable25_1
       4  ??DataTable25_10
       4  ??DataTable25_11
       4  ??DataTable25_12
       4  ??DataTable25_13
       4  ??DataTable25_14
       4  ??DataTable25_15
       4  ??DataTable25_16
       4  ??DataTable25_17
       4  ??DataTable25_18
       4  ??DataTable25_19
       4  ??DataTable25_2
       4  ??DataTable25_20
       4  ??DataTable25_21
       4  ??DataTable25_22
       4  ??DataTable25_23
       4  ??DataTable25_24
       4  ??DataTable25_25
       4  ??DataTable25_26
       4  ??DataTable25_27
       4  ??DataTable25_28
       4  ??DataTable25_29
       4  ??DataTable25_3
       4  ??DataTable25_30
       4  ??DataTable25_31
       4  ??DataTable25_32
       4  ??DataTable25_33
       4  ??DataTable25_34
       4  ??DataTable25_35
       4  ??DataTable25_36
       4  ??DataTable25_37
       4  ??DataTable25_38
       4  ??DataTable25_39
       4  ??DataTable25_4
       4  ??DataTable25_40
       4  ??DataTable25_41
       4  ??DataTable25_42
       4  ??DataTable25_43
       4  ??DataTable25_44
       4  ??DataTable25_45
       4  ??DataTable25_46
       4  ??DataTable25_47
       4  ??DataTable25_48
       4  ??DataTable25_49
       4  ??DataTable25_5
       4  ??DataTable25_50
       4  ??DataTable25_51
       4  ??DataTable25_52
       4  ??DataTable25_53
       4  ??DataTable25_54
       4  ??DataTable25_55
       4  ??DataTable25_56
       4  ??DataTable25_57
       4  ??DataTable25_58
       4  ??DataTable25_59
       4  ??DataTable25_6
       4  ??DataTable25_60
       4  ??DataTable25_61
       4  ??DataTable25_62
       4  ??DataTable25_63
       4  ??DataTable25_64
       4  ??DataTable25_65
       4  ??DataTable25_66
       4  ??DataTable25_67
       4  ??DataTable25_7
       4  ??DataTable25_8
       4  ??DataTable25_9
      60  APP_BsdLayerInit
       8  AppConfig_GetAppNameAndVersion
      80  AppInit_WddMsgHdlrInit
     104  AppMainCtx_Init
      20  AppMainCtx_TaskNotify
     294  AppMainCtx_ThreadEntry
      58  App_Cm3ClkCfg
      14  App_CreateLock
      30  App_DefaultIfInit
     176  App_DfltWlanCfgSet
      40  App_GetHttpsFlagInfo
      50  App_GpioInit
     108  App_HiInit
       4  App_IdleHandler
      32  App_IfInit
      92  App_IfReinit
     152  App_Init
      64  App_InterfaceStart
       8  App_InterfaceStartCb
      50  App_InterfaceStop
       8  App_InterfaceStopCb
     106  App_NwIfInit
     242  App_NwRecvFilter
      84  App_NwStackInit
      52  App_RandomNumGenInit
      52  App_RtcCfg
     116  App_RtcDump
       8  App_RtcLatchMemInfoPtrGet
       8  App_RtcSecMemInfoPtrGet
     110  App_SoftTimerInit
      32  App_SoftTmrMmsgHandlr
     114  App_SysCtlInit
      16  App_SysTickCb
      12  App_UnLock
      24  App_WaitOnLock
      80  App_WddInit
      30  App_WifInit
      16  App_WlanBootIndCb
     226  App_WlanBootReq
      56  App_WlanRespTimeoutTmrCb
      38  App_WpaSupplicantInit
      12  GSN_BOOT_INFO_GET
      12  GSN_BOOT_REASON_GET
      12  GSN_SYS_RESET_INFO_LOCATION_GET
      12  GSN_SYS_TIME_OFFSET_LOC_GET
      12  GsnIoMux_Sel
      32  GsnOsal_QueueCreate
      24  GsnOsal_QueueGet
      52  GsnOsal_QueueMsgSizeInWords
      26  GsnOsal_QueuePut
      24  GsnOsal_SemAcquire
      28  GsnOsal_SemCreate
      24  GsnOsal_SemDelete
      24  GsnOsal_SemRelease
      68  GsnOsal_ThreadCreate
      76  GsnRtc_ClkSrcSel
      24  NVIC_EnableIRQ
      24  NVIC_SetPendingIRQ
     120  appBrOtpCtx1
      64  appBrOtpMmCtx1
   30688  appCtx
     180  appMainCtxThread
    4096  appMainCtxThreadStack
      56  appMainThreadMsgQueue
     256  appMainThreadMsgQueueBuf
     256  arpCache
       4  globalAppCtxPtr
      52  gsnBrClkCtlCtx1
      20  gsnHifStats
      44  gsnNwifStats
      56  gsnWddStats
    4096  hiRecvTaskStack
    4096  ipStack
      14  memcpy
      20  memset
       4  nwConnDone
       4  pSysTickTmrHndl
       4  rcvDabInd
      32  softTmrMsgHHdlrBuff
    2048  softTmrMsgHHdlrStack
    2048  sysCtrlTaskStack
      32  sysTickTmr
      28  syscSem
    4096  wddStack
      32  wlanRespTimeoutTmr
       4  wlanRespTimeoutTmrHndl

 
 52 416 bytes in section .bss
    598 bytes in section .rodata
  3 666 bytes in section .text
 
  3 170 bytes of CODE  memory (+ 496 bytes shared)
    598 bytes of CONST memory
 52 416 bytes of DATA  memory

Errors: none
Warnings: 12
