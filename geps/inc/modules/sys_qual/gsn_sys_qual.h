/******************************************************************************
*
*               COPYRIGHT (c) 2006-2010 GainSpan Corporation
*                         All Rights Reserved
*
* The source code contained or described herein and all documents
* related to the source code ("Material") are owned by GainSpan
* Corporation or its licensors.  Title to the Material remains
* with GainSpan Corporation or its suppliers and licensors.
*
* The Material is protected by worldwide copyright and trade secret
* laws and treaty provisions. No part of the Material may be used,
* copied, reproduced, modified, published, uploaded, posted, transmitted,
* distributed, or disclosed in any way except in accordance with the
* applicable license agreement.
*
* No license under any patent, copyright, trade secret or other
* intellectual property right is granted to or conferred upon you by
* disclosure or delivery of the Materials, either expressly, by
* implication, inducement, estoppel, except in accordance with the
* applicable license agreement.
*
* Unless otherwise agreed by GainSpan in writing, you may not remove or
* alter this notice or any other notice embedded in Materials by GainSpan
* or GainSpan's suppliers or licensors in any way.
*
* $RCSfile: gsn_sys_qual.h,v $
*
* Description : This file contains the declarations commonly used.
*****************************************************************************/
#ifndef _GSN_SYS_QUAL_H_
#define _GSN_SYS_QUAL_H_

/****************************************************************************
  * File Inclusions
  ****************************************************************************/

#include "gsn_types.h"
#include "gsn_defines.h"
#include "gsn_error.h"

/**
 *****************************************************************************
 * @file gsn_sys_qual.h
 * @brief GSN System quality.
 *    This file contains system quality module definitions.
 ****************************************************************************/


/**
 *****************************************************************************
 * 
 ****************************************************************************/

/**
 *****************************************************************************
 * @ingroup syssvcdoc
 *
 * @{
 *****************************************************************************/


/**
 *****************************************************************************
 * @defgroup GsnTaskMonitor GSN Task Monitor (System Quality, SQ)
 * @brief This group contains system quality task monitoring related definitions.
 *
 *  The System Quality Task Monitoring (SQ) module registers its handler with the 
 *  interrupt module, so that it receives interrupts generated by the Watchdog when 
 * the half-period is reached.  The Task Monitoring module tracks the execution time 
 * of tasks that have registered with it.  When any task exceeds the stipulated maximum 
 * time, the System Quality module issues a software reset to ensure recovery from a 
 * hung condition.   <br>
 * <br>
 * The Task Monitoring group provides API functions for starting and ending monitoring
 * of a given task, and for establishing the maximum allowed execution time.  
 * Invariably a task is one of the two states:
 *  -	IDLE : Waiting ( blocking on a semaphore or message queue)  for one or more events to occur
 *  -	RUNNING: Processing the event
 * <br>
 *
 * The purpose of the Task Monitor is to catch any application that is stuck in the 
 * running state (either executing instructions in a loop or waiting indefinitely on 
 * resources due to deadlocks), and ensure that any operations are completed within 
 * the maximum time allowed when that task registered with the Monitor.   A pseudocode 
 * formulation of the problem might be: 
 *  \verbatim
 *   while (1) {
 *             Stop Monitoring This Task.
 *             Wait for some event.	  	: IDLE - Task Monitor not active.
 *             Start Monitoring This Task.	: RUNNING - Watchdog Monitor active.
 *             (task running)			: task execution time.
 *             }
 *  \endverbatim
 *
 * To make this possible, the System Quality Task Monitoring module needs to know what 
 * activity periods are reasonable for any task.  This is accomplished by having each 
 * task register with the SQ module. Tasks call GsnSq_TaskMonitorRegister(taskId, monitorTime) 
 * to register the maximum turn-around of their event processing state in terms of seconds.  
 * Each task is identified by an index taskId, which can take a value from GSN_SQ_TASK_MONITOR_ID_MAX to 31.  
 * ([GSN_SQ_TASK_MONITOR_ID_MAX-1] is the last index used by GEPS itself.)   The User 
 * Application is responsible for managing the assignment of these index values to the 
 * various tasks it creates. <br>
 * <br>
 * The SQ module keeps time in terms of Watchdog interrupts, so the requested maximum time 
 * in seconds, monitorTime, is converted to units of half-intervals of the Watchdog timer 
 * expiration period (section 5.1), obtained by reading the divisor value.  For example, 
 * if the Watchdog timer expires in its maximum time of (about) 16 seconds, the interrupt 
 * time unit is 8 seconds.  A task request for a maximum run time of 30 seconds is converted 
 * into (30/8) = 3 Watchdog interrupt times.  (Note that, as a consequence, the resolution 
 * of the measurement depends on the Watchdog divisor used in the call to GsnSysCtl_WdEnable().) 
 * The SQ module maintains a per-task monitor list. This per-task list provides the detailed 
 * information required to decide whether the task is stuck. The monitor also maintains a 
 * free running (monotonically increasing) count of Watchdog Interrupts.  GsnSq_TaskMonitorEnd() 
 * sets the taskTickCount for a task to SQ_TICK_COUNT_INVALID to indicate that the task is IDLE. 
 * GsnSq_TaskMonitorStart() sets the taskTickCount to (maximum allowed ticks+1), to record 
 * the moment when the task moved to the RUNNING state.  Each time a watchdog interrupt is 
 * received, the Task Monitor decrements the counter for the tasks in the running state and 
 * checks to see if the task activity period has been exceeded without taskTickCount having 
 * been reset to SQ_TICK_COUNT_INVALID.  (That is, a task has run for longer than the activity 
 * period without calling GsnSq_TaskMonitorEnd().)  If this occurs, the Task Monitor considers 
 * the task to be hung and issues a software reset.  
 *
 ****************************************************************************/


/**
 *****************************************************************************
 * 
 * @} 
 *****************************************************************************/


/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief maximum number of tasks
 * 
 *****************************************************************************/

#define GSN_SQ_MAX_TASKS    32
#define GSN_CM3_CLK		0x5000000	//80MHz
#define GSN_WDOG_INT_NUMBER 17
#define GSN_WDOG_TIMEOUT_IN_SEC	10 
/****************************************************************************
  *  Type Definitions
  ****************************************************************************/
  
/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Task IDs.
 *
 *    This enum defines the task IDs that need to be monitored by system quality
 *    task monitoring.
 *****************************************************************************/
typedef enum GSN_SQ_TASK_MONITOR_ID
{
    GSN_SQ_TASK_MONITOR_ID_FIRST = 0,
    GSN_SQ_TASK_MONITOR_ID_MAX,
} GSN_SQ_TASK_MONITOR_ID_T;



/***************************************************************************
  *  Public Functions
  ***************************************************************************/


/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief System Quality Task Monitor initialization.
 *
 * @return none
 *****************************************************************************/

VOID
GsnSq_Init(VOID);

/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief System Quality Task Monitor timer start.
 *
 * @return none
 *****************************************************************************/
PUBLIC VOID
GsnSq_WdTmrStart(VOID);

/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Register monitor time for a given task ID.
 *
 * @param taskId		- IN  unique task identifier
 * @param thread		- IN  pointer to the TCB
 * @param monitorTime   - IN  time allotted 
 * @return none
 *****************************************************************************/
VOID

GsnSq_TaskMonitorRegister(UINT32 taskId, GSN_OSAL_THREAD_TCB_T *thread,
                           UINT32 monitorTime);



/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Deregister a task by setting max ticks to 0.
 *
 * @param taskId		- IN  unique task identifier
 * @return none
 *****************************************************************************/
VOID
GsnSq_TaskMonitorDeregister(UINT32 taskId);


/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Start monitoring a given task by setting tick count to max+1.
 *
 * @param taskId		- IN  unique task identifier
 * @param data			- IN  value for data field of task monitor structure.
 * @return none
 *****************************************************************************/
VOID
GsnSq_TaskMonitorStart(UINT32 taskId, INT32 data);



/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Stop monitoring a given task by setting tick count to INVALID.
 *
 * @param taskId		- IN  unique task identifier
 * @return none
 *****************************************************************************/
 
VOID
GsnSq_TaskMonitorStop(UINT32 taskId);

/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Handle Assert based on the level.
 *
 * @param level		- IN  Level of the assert
 * @return none
 *****************************************************************************/

VOID
GsnSq_AssertHandler(UINT8 level);

/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Sysqual Deinit.
 *
 * @return none
 *****************************************************************************/

VOID
GsnSq_DeInit(VOID);

/**
 *****************************************************************************
 * @ingroup GsnTaskMonitor
 * @brief Returns TRUE if monitor started.
 *
 * @return none
 *****************************************************************************/

BOOL
GsnSq_TaskMonitorStarted(VOID);


#endif /* _GSN_SYS_QUAL_H_ */

/*****************************************************************************/



